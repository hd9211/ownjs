<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>12963634cae4e6326bb61f617d436d3c</guid>
<title>教您 10 分钟搭建一个内网穿透服务</title>
<link>https://toutiao.io/k/dsr2yzw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;FRP 内网穿透&lt;/h2&gt;&lt;h2&gt;需求背景&lt;/h2&gt;&lt;p&gt;最近小王公司接个对接公众账号应用开发的项目，其中有个功能需求是&quot;用户关注公众账号后发送特定消息后公众账号需要回复一个二维码海报“。了解需求后，便查看了微信接口文档说明，公众账号需要配置一个回调地址做通知。经验丰富的小王，一看很简单嘛，便分分钟对接微信文档实现了功能，部署时需要把程序开发好的服务部署到公司的公网测试服务器上进行调试，一来一回半天时间没有了！咋办呢? 为了节约小时，有什么方法能让回调地址直接到通知到自己的电脑上进行调试呢。百度了下，原来方法挺多，什么natapp啊，花生壳啊，frp ，对比下，netapp，花生壳高级点的功能都要收费, frp 需要自己配置，但是需要一台公网服务器穿透，正好公司有一台闲置的服务器，于是便搭建了内网穿透进行调试，很快项目顺利完成验收上线。&lt;/p&gt;&lt;h2&gt;拓扑图&lt;/h2&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5815217391304348&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ExViakhaSiafFSCa3xqpkquHPt5ssNbebvmNhbYzMzmuabwniaE6YK56Cw0GGpoNF1EB8yZhk89lKXeR95icdrpnpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1472&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;FTP 需要公网服务器上转一个服务端应用，在需要穿透的内网机器需要安装一个客户端程序，完成配置启动应用后，即可进行外网访问，十分方便，搭建过程10分钟内就能搞定。&lt;/p&gt;&lt;h2&gt;介绍&lt;/h2&gt;&lt;p&gt;GitHub 地址:https://github.com/fatedier/frp&lt;/p&gt;&lt;p&gt;通过在具有公网 IP 的节点上部署 frp 服务端，可以轻松地将内网服务穿透到公网，同时提供诸多专业的功能特性，这包括：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;采用 TCP 连接流式复用，在单个连接间承载更多请求，节省连接建立时间。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;代理组间的负载均衡。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;端口复用，多个服务通过同一个服务端端口暴露。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;多个原生支持的客户端插件（静态文件查看，HTTP、SOCK5 代理等），便于独立使用 frp 客户端完成某些工作。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;高度扩展性的服务端插件系统，方便结合自身需求进行功能扩展。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;服务端和客户端 UI 页面。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;服务端安装&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;下载安装&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span&gt;# 进入服务器进入进行wget 下载&lt;/span&gt;&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; /usr/&lt;span&gt;local&lt;/span&gt;&lt;br/&gt;wget &lt;span&gt;https:&lt;/span&gt;/&lt;span&gt;/github.com/fatedier&lt;/span&gt;&lt;span&gt;/frp/releases&lt;/span&gt;&lt;span&gt;/download/v&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;.&lt;span&gt;37.1&lt;/span&gt;/frp_&lt;span&gt;0&lt;/span&gt;.&lt;span&gt;37.1_&lt;/span&gt;linux_arm64.tar.gz&lt;br/&gt;&lt;span&gt;# 解压&lt;/span&gt;&lt;br/&gt;&lt;span&gt;tar&lt;/span&gt; &lt;span&gt;-zxvf&lt;/span&gt; &lt;span&gt;frp_0&lt;/span&gt;&lt;span&gt;.24&lt;/span&gt;&lt;span&gt;.1_linux_amd64&lt;/span&gt;&lt;span&gt;.tar&lt;/span&gt;&lt;span&gt;.gz&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#进入目录删除客户端配置&lt;/span&gt;&lt;br/&gt; &lt;span&gt;cd&lt;/span&gt; frp_0.24.1_linux_amd64/&lt;br/&gt; rm &lt;span&gt;-f&lt;/span&gt; frpc&lt;br/&gt; rm &lt;span&gt;-f&lt;/span&gt; frpc.ini&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;配置服务器配置文件 frps.ini&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;[common]&lt;br/&gt;&lt;span&gt;#服务器监听端口&lt;/span&gt;&lt;br/&gt;&lt;span&gt;bind_port&lt;/span&gt; = &lt;span&gt;7000&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#对网穿透http端口&lt;/span&gt;&lt;br/&gt;&lt;span&gt;vhost_http_port&lt;/span&gt; =&lt;span&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#管理页面防访问端口&lt;/span&gt;&lt;br/&gt;&lt;span&gt;dashboard_port&lt;/span&gt; = &lt;span&gt;7500&lt;/span&gt;&lt;br/&gt;# dashboard&#x27;s username and password are both optional，if not &lt;span&gt;set&lt;/span&gt;,       &lt;span&gt;default&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; &lt;span&gt;admin&lt;/span&gt;.&lt;br/&gt;&lt;span&gt;dashboard_user&lt;/span&gt; = admin&lt;br/&gt;&lt;span&gt;dashboard_pwd&lt;/span&gt; = &lt;span&gt;123456&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;启动&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;./frps -c ./frps.ini&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;访问看dashboard, dashboard 中可以看到连接穿透的客户端信息。&lt;/p&gt;&lt;p&gt;http://47.104.17.91:7500&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5104311543810849&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ExViakhaSiafFSCa3xqpkquHPt5ssNbebvypdEbWialSvDz9l6I4oIibZibV2CdvKMrHw0Kbp89YLicYPjY0TqRxHewg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2876&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;客户端配置&lt;/h2&gt;&lt;p&gt;同上服务器端下载安装包解压配置，删除frps.ini 文件，只配置客户端配置 frpc.ini&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;[common]&lt;br/&gt;&lt;span&gt;#服务端地址&lt;/span&gt;&lt;br/&gt;&lt;span&gt;server_addr&lt;/span&gt; = &lt;span&gt;47.104&lt;/span&gt;.&lt;span&gt;17.91&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#服务端监听端口，对应服务器bind_port&lt;/span&gt;&lt;br/&gt;&lt;span&gt;server_port&lt;/span&gt; = &lt;span&gt;7000&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#应用名称&lt;/span&gt;&lt;br/&gt;[my_web]&lt;br/&gt;&lt;span&gt;# 协议&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; = http&lt;br/&gt;&lt;span&gt;#本地应用端口名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;local_port&lt;/span&gt; = &lt;span&gt;8888&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#访问穿透域名&lt;/span&gt;&lt;br/&gt;&lt;span&gt;custom_domains&lt;/span&gt; = test.monkeytit.com&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;启动&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;swift&quot;&gt;&lt;code&gt;./frpc -c ./frpc.ini&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;本地启动一个测试springboot 服务，端口8888 项目&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;解析域名到咱们的外网服务器 test.monkeytit.com&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;访问测试&lt;/p&gt;&lt;p&gt;http://test.monkeytit.com/callback&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;TCP 穿透例子&lt;/p&gt;&lt;p&gt;比如咱们在家想对公司一台内网服务器进行管理，可以配置一个远程穿透的SSH 服务。配置如下&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;[common]&lt;br/&gt;&lt;span&gt;#服务端地址&lt;/span&gt;&lt;br/&gt;&lt;span&gt;server_addr&lt;/span&gt; = &lt;span&gt;47.104&lt;/span&gt;.&lt;span&gt;17.91&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#服务端监听端口，对应服务器bind_port&lt;/span&gt;&lt;br/&gt;&lt;span&gt;server_port&lt;/span&gt; = &lt;span&gt;7000&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;[test_ssh]&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; = tcp&lt;br/&gt;&lt;span&gt;local_ip&lt;/span&gt; = &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;local_port&lt;/span&gt; = &lt;span&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span&gt;remote_port&lt;/span&gt; = &lt;span&gt;222&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;这样配置，咱们就可以通过 ssh &lt;span&gt;root@47.104.17.91&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; -p 222 进行连接内网服务器进行管理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;特别注意：如果使用的是阿里云或者腾讯云做穿透，需要把Server的bind_port、vhost_http_port、dashboard_port 端口，配置安全组入站规则中，否则可能访问不通&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ExViakhaSiafHS4oJfTtQW4e4eHxFOlfDE12R9g6TibicKicgrfR297DlW7VYXILBgxx2eKicXERsRaiazeZMyFRJz2YA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;344&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注 &quot;猴哥说Java&quot; 公众账号获取更多干货分享&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>20584f4c7d5b783da4caca728c11d1b8</guid>
<title>管理者的四种不同授权风格</title>
<link>https://toutiao.io/k/4xj3xkz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;什么是授权？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;所谓授权是指管理者把由他全权负责的一项或多项任务委派给下属员工，使下属拥有相当的自主权和行动权。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;授权的6个误区&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1、授权不是全程参与，授权后管理者不要过多干涉员工的工作；&lt;/p&gt;&lt;p&gt;2、授权不是弃权，授权是将任务、权利分配下去，再做适当的监督、帮助和支持；&lt;/p&gt;&lt;p&gt;3、授权不是授责，虽然把权利、工作内容和资源分配给下属，但是责任还是在主管身上；&lt;/p&gt;&lt;p&gt;4、授权不是代理职务，并不意味着下属拥有管理者的所有职权；&lt;/p&gt;&lt;p&gt;5、授权不是分工，分工在岗位说明中已经设定，但授权工作有可能在岗位职责之外；&lt;/p&gt;&lt;p&gt;6、授权不是助理，不是让下属打杂，而是要他独立完成一项工作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;管理者的四种不同授权风格&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;操控型：喜欢主动监督工作的进展，经常不说明理由，只是下令照办，并且严密监督工作的进行。适合于团队经验不足。&lt;/p&gt;&lt;p&gt;教练型：会密切监督下属工作的进行，但通常不会详细指点下属该如何进行，只会跟下属说明所交付的任务，逐步引导。当有必要或需要时，才会提供建议或支援。适合于新参加工作的员工。&lt;/p&gt;&lt;p&gt;顾问型：一般会给予执行工作的人更多的主导权，对于所交付的任务通常只是做大致上的描述，并且会征询对方的意见和观点，最终取得共识，最终接受任务的个人和团队投下更多的心力。这类管理者通常告知下属，只要表明需求，就会得到协助。&lt;/p&gt;&lt;p&gt;协调型：只给原则性的指示和注意事项，并表达进行协助的意愿，而做事的程序和方法全由下属自己决定。在授权时，会视工作执行的能力而给予相对的权限，日后再根据工作的进度进行调整。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;下面举几个《三国演义》的例子&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1、刘备谋赖孔明，武赖关张。孔明出山第一仗前，刘备命人取了佩剑和印信，代表了所有的权利都交给了孔明。孔明出计火烧博望坡时，张飞和关羽开始并不配合，刘备在旁边使眼色，关张二人不得不听令。&lt;/p&gt;&lt;p&gt;刘备在给孔明授权时表现了怎样的授权风格呢？&lt;/p&gt;&lt;p&gt;2、火烧博望坡之战，孔明给诸将下令：让关羽埋伏于豫山，让曹军先头部队过去，等南面火起，放火烧曹军粮草；让张飞埋伏于安林，等南面火起，烧曹军博望城之前屯粮的地方；让赵云在博望坡北负责诱敌深入。&lt;/p&gt;&lt;p&gt;孔明给关张赵三人授权时表现了怎样的授权风格呢？&lt;/p&gt;&lt;p&gt;3、赤壁之战火烧连营的真正实施者是黄盖，苦肉计前一天晚上，周瑜见到黄盖，首先询问黄盖的意见，黄盖自己提出用火攻。周瑜又引导说火攻实施的人很重要。这时候黄盖自告奋勇，愿意用苦肉计骗取信任，然后从曹军内部火攻。&lt;/p&gt;&lt;p&gt;周瑜给黄盖授权实施火烧连营的计策是怎样的授权风格呢？&lt;/p&gt;&lt;p&gt;4、东吴使美人计，实则想讨要荆州。孔明授权赵云保护刘备，并给了他三个锦囊，嘱咐他在紧急时刻依次拆看。&lt;/p&gt;&lt;p&gt;孔明给赵云授权时表现了怎样的授权风格呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1、协调型&lt;/p&gt;&lt;p&gt;2、操控型&lt;/p&gt;&lt;p&gt;3、顾问型&lt;/p&gt;&lt;p&gt;4、教练型&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>afc25deb2b35053c40c8bf395d9efeb3</guid>
<title>如何用 Flink 整合 Hudi，构架沧湖一体化解决方案</title>
<link>https://toutiao.io/k/71k28io</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p cid=&quot;n0&quot; mdtype=&quot;paragraph&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在《如何利用 Flink CDC 实现数据增量备份到 Clickhouse》里，我们介绍了如何cdc到ch，今天我们已久使用前文的案例，来sink到hudi，那么我们开始吧。&lt;/span&gt;&lt;/p&gt;&lt;h1 cid=&quot;n2&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;hudi&lt;/span&gt;&lt;/h1&gt;&lt;h2 cid=&quot;n3&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;简介&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n4&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Apache Hudi(发音为“Hoodie”)在DFS的数据集上提供以下流原语&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n5&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n7&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;插入更新 (如何改变数据集?)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n9&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;增量拉取 (如何获取变更的数据?)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n10&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Hudi维护在数据集上执行的所有操作的时间轴（timeline），以提供数据集的即时视图。Hudi将数据集组织到与Hive表非常相似的基本路径下的目录结构中。数据集分为多个分区，文件夹包含该分区的文件。每个分区均由相对于基本路径的分区路径唯一标识。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n11&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;分区记录会被分配到多个文件。每个文件都有一个唯一的文件ID和生成该文件的提交（commit）。如果有更新，则多个文件共享相同的文件ID，但写入时的提交（commit）不同。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n12&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;存储类型&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;–处理数据的存储方式&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n24&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;视图&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;–处理数据的读取方式&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n25&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;读取优化视图&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;-输入格式仅选择压缩的列式文件&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n26&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n28&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;parquet文件查询性能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n30&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;500 GB的延迟时间约为30分钟&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n32&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;导入现有的Hive表&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n33&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;近实时视图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n41&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;增量视图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n48&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Hudi存储层由三个不同的部分组成&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n49&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;元数据&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;–它以时间轴的形式维护了在数据集上执行的所有操作的元数据，该时间轴允许将数据集的即时视图存储在基本路径的元数据目录下。时间轴上的操作类型包括&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n50&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n52&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;提交（commit）&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，一次提交表示将一批记录原子写入数据集中的过程。单调递增的时间戳，提交表示写操作的开始。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n54&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;清理（clean）&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，清理数据集中不再被查询中使用的文件的较旧版本。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n56&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;压缩（compaction）&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，将行式文件转化为列式文件的动作。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n58&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;索引&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，将传入的记录键快速映射到文件（如果已存在记录键）。索引实现是可插拔的，Bloom过滤器-由于不依赖任何外部系统，因此它是默认配置，索引和数据始终保持一致。Apache HBase-对少量key更高效。在索引标记过程中可能会节省几秒钟。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n60&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;数据&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，Hudi以两种不同的存储格式存储数据。实际使用的格式是可插入的，但要求具有以下特征–读优化的列存储格式（ROFormat），默认值为Apache Parquet；写优化的基于行的存储格式（WOFormat），默认值为Apache Avro。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n61&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n62&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;https://gitee.com/dafei1288/writerpics/raw/master/2021/images/arc.png&quot;&gt;&lt;img data-ratio=&quot;0.5523737754333082&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag8ibkUZjr5bwhyuDWpgLVoeZicuBp7HO7GMABBXYBoK0ranCs1dcUgRib6NEvx98SokjTOpxVQcwNGTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1327&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n63&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h2 cid=&quot;n64&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;为什么Hudi对于大规模和近实时应用很重要？&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n65&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Hudi解决了以下限制&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n77&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Hudi的优势&lt;/span&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n78&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n80&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;HDFS中的可伸缩性限制。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n82&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Hadoop中数据的快速呈现&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n84&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;支持对于现有数据的更新和删除&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n86&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;快速的ETL和建模&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n87&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;em&quot;&gt;&lt;em&gt;&lt;span md-inline=&quot;plain&quot;&gt;（以上内容主要引用于：《&lt;/span&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;Apache Hudi 详解&lt;em&gt;》&lt;/em&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;）&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n91&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n482&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h1 cid=&quot;n488&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;新架构与湖仓一体&lt;/span&gt;&lt;/h1&gt;&lt;p cid=&quot;n489&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;通过湖仓一体、流批一体，准实时场景下做到了：数据同源、同计算引擎、同存储、同计算口径。数据的时效性可以到分钟级，能很好的满足业务准实时数仓的需求。下面是架构图：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n490&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3509259259259259&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag8ibkUZjr5bwhyuDWpgLVoeZwy1NZVia3ucPlRz4rW6unv3U7j7PPSTmb0icOE8CCzNMKMTK9ibbpiaiaZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n493&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;MySQL 数据通过 Flink CDC 进入到 Kafka。之所以数据先入 Kafka 而不是直接入 Hudi，是为了实现多个实时任务复用 MySQL 过来的数据，避免多个任务通过 Flink CDC 接 MySQL 表以及 Binlog，对 MySQL 库的性能造成影响。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n494&quot; mdtype=&quot;paragraph&quot;&gt;通过 CDC 进入到 Kafka 的数据除了落一份到离线数据仓库的 ODS 层之外，会同时按照实时数据仓库的链路，从 ODS-&amp;gt;DWD-&amp;gt;DWS-&amp;gt;OLAP 数据库，最后供报表等数据服务使用。实时数仓的每一层结果数据会准实时的落一份到离线数仓，通过这种方式做到程序一次开发、指标口径统一，数据统一。&lt;/p&gt;&lt;p cid=&quot;n497&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;从架构图上，可以看到有一步数据修正 (重跑历史数据) 的动作，之所以有这一步是考虑到：有可能存在由于口径调整或者前一天的实时任务计算结果错误，导致重跑历史数据的情况。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n499&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;而存储在 Kafka 的数据有失效时间，不会存太久的历史数据，重跑很久的历史数据无法从 Kafka 中获取历史源数据。再者，如果把大量的历史数据再一次推到 Kafka，走实时计算的链路来修正历史数据，可能会影响当天的实时作业。所以针对重跑历史数据，会通过数据修正这一步来处理。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n501&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;总体上说，这个架构属于 Lambda 和 Kappa 混搭的架构。流批一体数据仓库的各个数据链路有数据质量校验的流程。第二天对前一天的数据进行对账，如果前一天实时计算的数据无异常，则不需要修正数据，Kappa 架构已经足够。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n502&quot; mdtype=&quot;paragraph&quot;&gt;&lt;em&gt;（本节内容，引用自：《37 手游基于 Flink CDC + Hudi 湖仓一体方案实践&lt;em&gt;》&lt;/em&gt;）&lt;/em&gt;&lt;/p&gt;&lt;p cid=&quot;n484&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h1 cid=&quot;n92&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;最佳实践&lt;/span&gt;&lt;/h1&gt;&lt;h2 cid=&quot;n93&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;版本搭配&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n94&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;版本选择，这个问题可能会成为困扰大家的第一个绊脚石，下面是hudi中文社区推荐的版本适配：&lt;/span&gt;&lt;/p&gt;&lt;figure cid=&quot;n95&quot; mdtype=&quot;table&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr cid=&quot;n96&quot; mdtype=&quot;table_row&quot;&gt;&lt;th&gt;&lt;span cid=&quot;n97&quot; mdtype=&quot;table_cell&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;flink&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span cid=&quot;n98&quot; mdtype=&quot;table_cell&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;hudi&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr cid=&quot;n99&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span cid=&quot;n100&quot; mdtype=&quot;table_cell&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;1.12.2&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span cid=&quot;n101&quot; mdtype=&quot;table_cell&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;0.9.0&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n102&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span cid=&quot;n103&quot; mdtype=&quot;table_cell&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;1.13.1&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span cid=&quot;n104&quot; mdtype=&quot;table_cell&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;0.10.0&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p cid=&quot;n105&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;官方说的支持版本是这样， 不过目前我的1.13和0.10组合并没有配置成功，所以大家还是尽量选择  &lt;/span&gt;&lt;span md-inline=&quot;em&quot;&gt;&lt;em&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;1.12.2+0.9.0&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 吧，配合&lt;/span&gt;&lt;span md-inline=&quot;em&quot;&gt;&lt;em&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;scala 2.11&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 。&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n106&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;下载hudi&lt;/span&gt;&lt;/h2&gt;&lt;blockquote cid=&quot;n107&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n108&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://mvnrepository.com/artifact/org.apache.hudi/hudi-flink-bundle&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 cid=&quot;n109&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;执行&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n110&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如果将 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;hudi-flink-bundle_2.11-0.9.0.jar&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 放到了  &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;flink/lib&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 下，则只需要如下执行即可，否则会出现各种找不到类的异常&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n111&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n112&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;bin/sql-client.sh embedded&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n113&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h1 cid=&quot;n115&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Flink on hudi&lt;/span&gt;&lt;/h1&gt;&lt;p cid=&quot;n116&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n117&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;新建maven工程，修改pom如下&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;xml&quot; cid=&quot;n118&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;?xml&lt;/span&gt; &lt;span&gt;version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project&lt;/span&gt; &lt;span&gt;xmlns&lt;/span&gt;=&lt;span&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;         &lt;span&gt;xmlns:xsi&lt;/span&gt;=&lt;span&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;         &lt;span&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink_hudi_test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maven.compiler.source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maven.compiler.source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maven.compiler.target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maven.compiler.target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.9.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop-hdfs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.9.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop-common&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.9.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.flink&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.12.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.flink&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-streaming-java_2.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.12.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;!--        &amp;lt;dependency&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;!--            &amp;lt;groupId&amp;gt;org.apache.flink&amp;lt;/groupId&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;!--            &amp;lt;artifactId&amp;gt;flink-jdbc_2.12&amp;lt;/artifactId&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;!--            &amp;lt;version&amp;gt;1.10.3&amp;lt;/version&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;!--        &amp;lt;/dependency&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.flink&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-connector-jdbc_2.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.12.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.flink&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.12.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.flink&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-clients_2.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.12.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.flink&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-table-api-java-bridge_2.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.12.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.flink&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-table-common&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.12.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.flink&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-table-planner_2.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.12.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.flink&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-table-planner-blink_2.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.12.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.flink&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-table-planner-blink_2.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.12.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test-jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba.ververica&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;flink-connector-mysql-cdc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--        &amp;lt;dependency&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--            &amp;lt;groupId&amp;gt;org.apache.hudi&amp;lt;/groupId&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--            &amp;lt;artifactId&amp;gt;hudi-flink-client&amp;lt;/artifactId&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--            &amp;lt;version&amp;gt;0.9.0&amp;lt;/version&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--        &amp;lt;/dependency&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--        &amp;lt;dependency&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--            &amp;lt;groupId&amp;gt;org.apache.hudi&amp;lt;/groupId&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--            &amp;lt;artifactId&amp;gt;hudi-common&amp;lt;/artifactId&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--            &amp;lt;version&amp;gt;0.9.0&amp;lt;/version&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--        &amp;lt;/dependency&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--        &amp;lt;dependency&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--            &amp;lt;groupId&amp;gt;org.apache.hudi&amp;lt;/groupId&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--            &amp;lt;artifactId&amp;gt;hudi-hadoop-mr-bundle&amp;lt;/artifactId&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--            &amp;lt;version&amp;gt;0.9.0&amp;lt;/version&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;!--        &amp;lt;/dependency&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hudi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hudi-flink-bundle_2.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.9.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.49&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n119&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们通过构建查询&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;insert into t2 select replace(uuid(),&#x27;-&#x27;,&#x27;&#x27;),id,name,description,now()  from mysql_binlog&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 将创建的mysql表，插入到hudi里。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;java&quot; cid=&quot;n120&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;.&lt;span&gt;lijiaqi&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;flink&lt;/span&gt;.&lt;span&gt;streaming&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;environment&lt;/span&gt;.&lt;span&gt;StreamExecutionEnvironment&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;flink&lt;/span&gt;.&lt;span&gt;table&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;EnvironmentSettings&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;flink&lt;/span&gt;.&lt;span&gt;table&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;SqlDialect&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;flink&lt;/span&gt;.&lt;span&gt;table&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;TableResult&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;flink&lt;/span&gt;.&lt;span&gt;table&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;bridge&lt;/span&gt;.&lt;span&gt;java&lt;/span&gt;.&lt;span&gt;StreamTableEnvironment&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MysqlToHudiExample&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;(&lt;span&gt;String&lt;/span&gt;[] &lt;span&gt;args&lt;/span&gt;) &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;EnvironmentSettings&lt;/span&gt; &lt;span&gt;fsSettings&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;EnvironmentSettings&lt;/span&gt;.&lt;span&gt;newInstance&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                .&lt;span&gt;useBlinkPlanner&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                .&lt;span&gt;inStreamingMode&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                .&lt;span&gt;build&lt;/span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;StreamExecutionEnvironment&lt;/span&gt; &lt;span&gt;env&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;StreamExecutionEnvironment&lt;/span&gt;.&lt;span&gt;getExecutionEnvironment&lt;/span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;env&lt;/span&gt;.&lt;span&gt;setParallelism&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;StreamTableEnvironment&lt;/span&gt; &lt;span&gt;tableEnv&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;StreamTableEnvironment&lt;/span&gt;.&lt;span&gt;create&lt;/span&gt;(&lt;span&gt;env&lt;/span&gt;, &lt;span&gt;fsSettings&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;tableEnv&lt;/span&gt;.&lt;span&gt;getConfig&lt;/span&gt;().&lt;span&gt;setSqlDialect&lt;/span&gt;(&lt;span&gt;SqlDialect&lt;/span&gt;.&lt;span&gt;DEFAULT&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;// 数据源表&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;String&lt;/span&gt; &lt;span&gt;sourceDDL&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&quot;CREATE TABLE mysql_binlog (\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot; id INT NOT NULL,\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot; name STRING,\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot; description STRING\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;) WITH (\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot; &#x27;connector&#x27; = &#x27;jdbc&#x27;,\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot; &#x27;url&#x27; = &#x27;jdbc:mysql://127.0.0.1:3306/test&#x27;, \n&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot; &#x27;driver&#x27; = &#x27;com.mysql.jdbc.Driver&#x27;, \n&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot; &#x27;username&#x27; = &#x27;root&#x27;,\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot; &#x27;password&#x27; = &#x27;dafei1288&#x27;, \n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot; &#x27;table-name&#x27; = &#x27;test_cdc&#x27;\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;)&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;// 输出目标表&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;String&lt;/span&gt; &lt;span&gt;sinkDDL&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&quot;CREATE TABLE t2(\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\tuuid VARCHAR(20),\n&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\tid INT NOT NULL,\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\tname VARCHAR(40),\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\tdescription VARCHAR(40),\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\tts TIMESTAMP(3)\n&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;//                        &quot;\t`partition` VARCHAR(20)\n&quot; +&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;)\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;//                        &quot;PARTITIONED BY (`partition`)\n&quot; +&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;WITH (\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\t&#x27;connector&#x27; = &#x27;hudi&#x27;,\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\t&#x27;path&#x27; = &#x27;hdfs://172.19.28.4:9000/hudi_t4/&#x27;,\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\t&#x27;table.type&#x27; = &#x27;MERGE_ON_READ&#x27;\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;)&quot;&lt;/span&gt; ;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;// 简单的聚合处理&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;String&lt;/span&gt; &lt;span&gt;transformSQL&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&quot;insert into t2 select replace(uuid(),&#x27;-&#x27;,&#x27;&#x27;),id,name,description,now()  from mysql_binlog&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;tableEnv&lt;/span&gt;.&lt;span&gt;executeSql&lt;/span&gt;(&lt;span&gt;sourceDDL&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;tableEnv&lt;/span&gt;.&lt;span&gt;executeSql&lt;/span&gt;(&lt;span&gt;sinkDDL&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;TableResult&lt;/span&gt; &lt;span&gt;result&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;tableEnv&lt;/span&gt;.&lt;span&gt;executeSql&lt;/span&gt;(&lt;span&gt;transformSQL&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;result&lt;/span&gt;.&lt;span&gt;print&lt;/span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;env&lt;/span&gt;.&lt;span&gt;execute&lt;/span&gt;(&lt;span&gt;&quot;mysql-to-hudi&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n121&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;查询hudi&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;java&quot; cid=&quot;n122&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;.&lt;span&gt;lijiaqi&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;flink&lt;/span&gt;.&lt;span&gt;streaming&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;environment&lt;/span&gt;.&lt;span&gt;StreamExecutionEnvironment&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;flink&lt;/span&gt;.&lt;span&gt;table&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;EnvironmentSettings&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;flink&lt;/span&gt;.&lt;span&gt;table&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;SqlDialect&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;flink&lt;/span&gt;.&lt;span&gt;table&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;TableResult&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;flink&lt;/span&gt;.&lt;span&gt;table&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;bridge&lt;/span&gt;.&lt;span&gt;java&lt;/span&gt;.&lt;span&gt;StreamTableEnvironment&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ReadHudi&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;(&lt;span&gt;String&lt;/span&gt;[] &lt;span&gt;args&lt;/span&gt;) &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;EnvironmentSettings&lt;/span&gt; &lt;span&gt;fsSettings&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;EnvironmentSettings&lt;/span&gt;.&lt;span&gt;newInstance&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                .&lt;span&gt;useBlinkPlanner&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                .&lt;span&gt;inStreamingMode&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                .&lt;span&gt;build&lt;/span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;StreamExecutionEnvironment&lt;/span&gt; &lt;span&gt;env&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;StreamExecutionEnvironment&lt;/span&gt;.&lt;span&gt;getExecutionEnvironment&lt;/span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;env&lt;/span&gt;.&lt;span&gt;setParallelism&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;StreamTableEnvironment&lt;/span&gt; &lt;span&gt;tableEnv&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;StreamTableEnvironment&lt;/span&gt;.&lt;span&gt;create&lt;/span&gt;(&lt;span&gt;env&lt;/span&gt;, &lt;span&gt;fsSettings&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;tableEnv&lt;/span&gt;.&lt;span&gt;getConfig&lt;/span&gt;().&lt;span&gt;setSqlDialect&lt;/span&gt;(&lt;span&gt;SqlDialect&lt;/span&gt;.&lt;span&gt;DEFAULT&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;String&lt;/span&gt; &lt;span&gt;sourceDDL&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&quot;CREATE TABLE t2(\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\tuuid VARCHAR(20),\n&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\tid INT NOT NULL,\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\tname VARCHAR(40),\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\tdescription VARCHAR(40),\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\tts TIMESTAMP(3)\n&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;//                        &quot;\t`partition` VARCHAR(20)\n&quot; +&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;)\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;//                        &quot;PARTITIONED BY (`partition`)\n&quot; +&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;WITH (\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\t&#x27;connector&#x27; = &#x27;hudi&#x27;,\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\t&#x27;path&#x27; = &#x27;hdfs://172.19.28.4:9000/hudi_t4/&#x27;,\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;\t&#x27;table.type&#x27; = &#x27;MERGE_ON_READ&#x27;\n&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                        &lt;span&gt;&quot;)&quot;&lt;/span&gt; ;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;tableEnv&lt;/span&gt;.&lt;span&gt;executeSql&lt;/span&gt;(&lt;span&gt;sourceDDL&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;TableResult&lt;/span&gt; &lt;span&gt;result2&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;tableEnv&lt;/span&gt;.&lt;span&gt;executeSql&lt;/span&gt;(&lt;span&gt;&quot;select * from t2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;result2&lt;/span&gt;.&lt;span&gt;print&lt;/span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;env&lt;/span&gt;.&lt;span&gt;execute&lt;/span&gt;(&lt;span&gt;&quot;read_hudi&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n123&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;展示结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag8ibkUZjr5bwhyuDWpgLVoeZ1euLcgRD6MaJpGMow1lucelWEXfPnAySsMyLmsud5f7JbFrqRnty2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n126&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h1 cid=&quot;n143&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Flink CDC 2.0 on Hudi&lt;/span&gt;&lt;/h1&gt;&lt;h2 mdtype=&quot;heading&quot; cid=&quot;n141&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;添加依赖&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n409&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt; 添加如下依赖到$FLINK_HOME/lib下&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n388&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n390&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;hudi-flink-bundle_2.11-0.10.0-SNAPSHOT.jar (修改 Master 分支的 Hudi Flink 版本为 1.13.2 然后构建)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n393&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;hadoop-mapreduce-client-core-2.7.3.jar (解决 Hudi ClassNotFoundException)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n396&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;flink-sql-connector-mysql-cdc-2.0.0.jar&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n399&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;flink-format-changelog-json-2.0.0.jar&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n402&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;flink-sql-connector-kafka_2.11-1.13.2.jar&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n384&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;注意，在寻找jar的时候，&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;cdc 2.0&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 更新过&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;group id&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; ，不再试 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;com.alibaba.ververica&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 而是改成了 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;com.ververica&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n410&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h2 cid=&quot;n406&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;flink sql cdc on hudi&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n162&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;创建mysql cdc表&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;sql&quot; cid=&quot;n302&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;CREATE&lt;/span&gt;  &lt;span&gt;TABLE&lt;/span&gt; mysql_users &lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;id &lt;span&gt;BIGINT&lt;/span&gt; &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; ENFORCED ,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;name STRING,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;birthday &lt;span&gt;TIMESTAMP&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;ts &lt;span&gt;TIMESTAMP&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;WITH&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;&lt;span&gt;&#x27;connector&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;mysql-cdc&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;&lt;span&gt;&#x27;hostname&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;localhost&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;&lt;span&gt;&#x27;port&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;3306&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;&lt;span&gt;&#x27;username&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;root&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;&lt;span&gt;&#x27;password&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;dafei1288&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;&lt;span&gt;&#x27;server-time-zone&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;Asia/Shanghai&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;&lt;span&gt;&#x27;database-name&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;test&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;&lt;span&gt;&#x27;table-name&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;users&#x27;&lt;/span&gt;   &lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n316&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;创建hudi表&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;sql&quot; cid=&quot;n179&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; hudi_users5&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;    &lt;/span&gt;id &lt;span&gt;BIGINT&lt;/span&gt; &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; ENFORCED,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    name STRING,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    birthday &lt;span&gt;TIMESTAMP&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    ts &lt;span&gt;TIMESTAMP&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;`partition`&lt;/span&gt; &lt;span&gt;VARCHAR&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;)&lt;/span&gt; PARTITIONED &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;`partition`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;WITH&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&#x27;connector&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;hudi&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&#x27;table.type&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;MERGE_ON_READ&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;&#x27;path&#x27;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;hdfs://localhost:9009/hudi/hudi_users5&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;/pre&gt;&lt;p cid=&quot;n205&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;修改配置，让查询模式输出为表，设置checkpoint&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n365&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n368&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt; set execution.result-mode=tableau;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n372&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;set execution.checkpointing.interval=10sec;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n380&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;进行输入导入&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n374&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n376&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;INSERT INTO hudi_users5(id,name,birthday,ts, &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;partition&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;) SELECT  id,name,birthday,ts,DATE_FORMAT(birthday, &#x27;yyyyMMdd&#x27;) FROM mysql_users;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n382&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;查询数据&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n377&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n379&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;select * from hudi_users5;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n153&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;执行结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag8ibkUZjr5bwhyuDWpgLVoeZ86U6D0wEdibLc3vNXFJsKpWojWZVSgltLhe3P8vBXJXBhvcXMcFU8AA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2 cid=&quot;n159&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;卡执行计划&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.43828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag8ibkUZjr5bwhyuDWpgLVoeZibBF994PiaaawE0YlPwiaicXdNLYicElyaDQ9X4KnibFztlUjZNo9qfVTJbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n157&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这个问题坑了我好几天，一度都打算放弃hudi了，表面上很正常，日志也没有任何报错，也可以看出来cdc起作用了，有数据写入，但是就是卡在 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;hoodie_stream_write&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 上一动不动了，没有数据下发了。感谢社区大佬 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;Danny Chan&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 的提点，可能是 checkpoint的问题，于是做了设置&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n127&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n217&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;set execution.checkpointing.interval=10sec;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n213&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;终于正常了&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag8ibkUZjr5bwhyuDWpgLVoeZicHT5rgLQSqtXjFG6ZiaPqxXsTLNp4wtLFsicPMco3nLgnl0I4kJaHRHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p mdtype=&quot;paragraph&quot; cid=&quot;n128&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;致此，flink + hudi 仓湖一体化方案的原型构建完成，感谢大家看到这里，如果对你有点点帮助的话，希望点个关注，转发。您的举手之劳，会对我非常有帮助，非常感谢。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n229&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h1 cid=&quot;n228&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;参考链接&lt;/span&gt;&lt;/h1&gt;&lt;p cid=&quot;n129&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://blog.csdn.net/weixin_49218925/article/details/115511022&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n130&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://blog.csdn.net/qq_37095882/article/details/103714548&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n224&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247493793&amp;amp;idx=1&amp;amp;sn=0aa15c6a0f0165aafb9e9a5679f92c08&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;https://mp.weixin.qq.com/s/xoucbJxzO2Zkq_b2_WDUbA&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n131&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关注 【&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;麒思妙想&lt;/span&gt;&lt;span&gt;】解锁更多硬核。&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;历史文章导读&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果文章对您有那么一点点帮助，我将倍感荣幸&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;欢迎  &lt;span&gt;&lt;strong&gt;关注、在看、点赞、转发 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8uJ0ic6nAag8EItgzqIEhe3GbK3ibibrSC3kGNLaCYoEXEEEV8vatdHqibkazrs7oLJERAG1cldW9pbVmcTKvXL3fA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p cid=&quot;n133&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>adea1d621a3356a502184cef905e009e</guid>
<title>RxJava 容易忽视的细节：subscribeOn() 方法没有按照预期地运行</title>
<link>https://toutiao.io/k/pct8qgx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;_2rhmJa&quot;&gt;&lt;div class=&quot;image-package&quot;&gt;

&lt;p class=&quot;image-caption&quot;&gt;pexels-alessio-cesario-1906821.jpg&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们知道，subscribeOn() 方法通过接收一个 Scheduler 参数，来指定对数据的处理运行在特定的线程调度器 Scheduler 上。若多次执行 subscribeOn() 方法，则只有最初的一次起作用。&lt;/p&gt;
&lt;p&gt;subscribeOn() 方法只有第一次调用才有效，需要满足以下条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被观察者必须是 Cold Observable。&lt;/li&gt;
&lt;li&gt;被观察者多次调用 subscribeOn() 之后，并不意味着线程只会切换一次，而是线程多次切换之后，最终切换到第一次设置的线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以， subscribeOn() 方法的调用并非一直有效。本文会通过列举一些事例，分析其失效的原因。&lt;/p&gt;
&lt;h2&gt;一. 创建 Observable 后内部使用了多线程发射数据&lt;/h2&gt;
&lt;p&gt;使用 RxJava 创建 Observable 后，假如内部使用了多线程发射数据，会带来什么影响呢？&lt;/p&gt;
&lt;p&gt;RxJava 会通过 Scheduler、subscribeOn() 来管理线程，但只有在不手动更改线程的情况下，它才会这样做。&lt;/p&gt;
&lt;p&gt;通常情况下，RxJava 发射的数据会在同一个线程上，但是稍作一些变化，发射的数据来自不同的线程会怎样呢？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static void main(String[] args) {
    Observable.create(emitter -&amp;gt; {
        emitter.onNext(1);
        new Thread(&quot;main&quot;) {
            @Override
            public void run() {
                emitter.onNext(2);
                emitter.onNext(3);
                emitter.onNext(4);
                emitter.onComplete();
            }
        }.start();
    })
    .subscribeOn(Schedulers.io())
    .map(integer -&amp;gt; {
        log(integer + &quot; - I want this happen on an io thread&quot;);
        return integer + &quot;&quot;;
    })
    .subscribe(s -&amp;gt; log(&quot;Consume: &quot;+s));
    try {
        Thread.sleep(2000);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}

public static void log(String msg) {
    System.out.println(&quot;Current Thread Name:&quot;+Thread.currentThread().getName() + &quot;, &quot;+ msg);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Current Thread Name:RxCachedThreadScheduler-1, 1 - I want this happen on an io thread
Current Thread Name:RxCachedThreadScheduler-1, Consume: 1
Current Thread Name:main, 2 - I want this happen on an io thread
Current Thread Name:main, Consume: 2
Current Thread Name:main, 3 - I want this happen on an io thread
Current Thread Name:main, Consume: 3
Current Thread Name:main, 4 - I want this happen on an io thread
Current Thread Name:main, Consume: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述执行结果表明，除了 emitter 发射的 1 是在 io 线程中执行的，其余的数字都是在 main 线程中运行的。&lt;/p&gt;
&lt;p&gt;一旦 create 操作符中的 emitter 发射了数值，甚至在新的线程发射了值，RxJava  还是会很高兴地接受这些数值并将它们进一步传递给流。此时 RxJava 没有改变线程，是因为 subscribeOn() 方法已经完成了工作，订阅已经在其他线程上进行了。这时，没有理由 RxJava 会再次更改线程。所以，会看到上述的运行结果。&lt;/p&gt;
&lt;h2&gt;二. Hot Observable 对 subscribeOn() 调用造成的影响&lt;/h2&gt;
&lt;h3&gt;2.1 特殊的创建操作符 just&lt;/h3&gt;
&lt;p&gt;just 是一个比较“特殊”的创建操作符，just 的作用是将单个数据转换为发射这个单个数据的 Observable。just 类似于 fromXXX，但是 fromXXX 会将数组或 Iterable 的数据取出然后逐个发射，而 just 只是简单地原样发射，将数组或 Iterable 当作单个数据。另外，just 创建的不是一个 Cold Observable。&lt;/p&gt;
&lt;p&gt;下面以 just、fromCallable 为例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    public static void main(String[] args) {
        System.out.println(&quot;from Just&quot;);
        Observable justObservable = Observable.just(new Random().nextInt());
        justObservable.subscribe(System.out::println);
        justObservable.subscribe(System.out::println);

        System.out.println(&quot;\nfrom Callable&quot;);

        Observable callableObservable = Observable.fromCallable(() -&amp;gt; new Random().nextInt());
        callableObservable.subscribe(System.out::println);
        callableObservable.subscribe(System.out::println);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;plain&quot;&gt;from Just
1208207476
1208207476

from Callable
774558265
1432625739
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们不难发现，上述执行结果中 just 操作符创建的 Observable 即使被订阅多次，所产生的值依然保持不变。该值是从 Observable 外部生成的，而 Observable 仅将其存储以供以后使用。&lt;/p&gt;
&lt;p&gt;另外，使用 just 操作符时，不需要 subscribe 订阅也会立即执行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    public static void main(String[] args) {
        System.out.println(&quot;from just&quot;);
        Observable.just(getRandomInteger());
    }

    public static Integer getRandomInteger() {
        System.out.println(&quot;generating Integer&quot;);
        return new Random().nextInt();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;plain&quot;&gt;from just
generating Integer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码，没有进行订阅也执行了打印“generating Integer”，而 Cold Observable 必须使用 subscribe() 才会生效。这就相当于 just 可以立即执行，而 fromCallable 是延迟执行。&lt;/p&gt;
&lt;p&gt;通过比较 just 和 fromCallable 操作符，接下来我们可以总结 Hot Observable 和 Cold Observable 之间的区别。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hot Observable&lt;/th&gt;
&lt;th&gt;Cold Observable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;在外部生成 Observable&lt;/td&gt;
&lt;td&gt;在内部生成 Observable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;发生订阅之前创建 Observable&lt;/td&gt;
&lt;td&gt;发生订阅之后创建 Observable&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;2.2 just 和 fromCallable 分别调用 subscribeOn() 会怎样？&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    public static void main(String[] args) {

        Observable.just(getRandomInteger(&quot;from just&quot;))
                .subscribeOn(Schedulers.io())
                .subscribe(s -&amp;gt; log(&quot;Consume just: &quot; + s));

        Observable.fromCallable(() -&amp;gt; getRandomInteger(&quot;from callable&quot;))
                .subscribeOn(Schedulers.io())
                .subscribe(s -&amp;gt; log(&quot;Consume fromCallable: &quot; + s));

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static Integer getRandomInteger(String prefix) {
        log(prefix + &quot; generating Integer&quot;);
        return new Random().nextInt();
    }

    public static void log(String msg) {
        System.out.println(&quot;Current Thread Name:&quot;+Thread.currentThread().getName() + &quot;, &quot;+ msg);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Current Thread Name:main, from just generating Integer
Current Thread Name:RxCachedThreadScheduler-1, Consume just: 147620150
Current Thread Name:RxCachedThreadScheduler-2, from callable generating Integer
Current Thread Name:RxCachedThreadScheduler-2, Consume fromCallable: -1120243490
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 just 操作符时，getRandomInteger() 函数在 main 函数中运行。而使用 fromCallable 时，getRandomInteger() 函数是在 io 线程中运行。&lt;/p&gt;
&lt;p&gt;因为 Hot Observable 是在订阅之前就创建了 Observable，所以使用 just 操作符后，getRandomInteger() 函数的调用并没有受到 subscribeOn() 的影响。&lt;/p&gt;
&lt;p&gt;当然，在最后 subscribe() 中他们都切换到了 io 线程。&lt;/p&gt;
&lt;h2&gt;三. Subject 是一种特殊的存在，对 subscribeOn() 调用也会造成影响&lt;/h2&gt;
&lt;p&gt;我们先来介绍一下什么是 Subject？Subject 和 Processor 的作用是相同的。Processor 是 RxJava 2.x 新增的类，是 Reactive Stream 标准库中的接口，它继承自 Flowable 支持背压控制。而 Subject 则不支持背压控制。&lt;/p&gt;
&lt;p&gt;举个 Subject 使用的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;        Consumer&amp;lt;Long&amp;gt; subscriber1 = new Consumer&amp;lt;Long&amp;gt;() {
            @Override
            public void accept(@NonNull Long aLong) throws Exception {
                System.out.println(&quot;subscriber1: &quot;+aLong);
            }
        };

        Consumer&amp;lt;Long&amp;gt; subscriber2 = new Consumer&amp;lt;Long&amp;gt;() {
            @Override
            public void accept(@NonNull Long aLong) throws Exception {
                System.out.println(&quot;   subscriber2: &quot;+aLong);
            }
        };

        Consumer&amp;lt;Long&amp;gt; subscriber3 = new Consumer&amp;lt;Long&amp;gt;() {
            @Override
            public void accept(@NonNull Long aLong) throws Exception {
                System.out.println(&quot;      subscriber3: &quot;+aLong);
            }
        };

        Observable&amp;lt;Long&amp;gt; observable = Observable.create(new ObservableOnSubscribe&amp;lt;Long&amp;gt;() {
            @Override
            public void subscribe(@NonNull ObservableEmitter&amp;lt;Long&amp;gt; e) throws Exception {
                Observable.interval(10, TimeUnit.MILLISECONDS,Schedulers.computation())
                        .take(Integer.MAX_VALUE)
                        .subscribe(e::onNext);
            }
        }).observeOn(Schedulers.newThread());

        PublishSubject&amp;lt;Long&amp;gt; subject = PublishSubject.create();
        observable.subscribe(subject);

        subject.subscribe(subscriber1);
        subject.subscribe(subscriber2);

        try {
            Thread.sleep(20L);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        subject.subscribe(subscriber3);

        try {
            Thread.sleep(100L);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;plain&quot;&gt;subscriber1: 0
   subscriber2: 0
subscriber1: 1
   subscriber2: 1
subscriber1: 2
   subscriber2: 2
      subscriber3: 2
subscriber1: 3
   subscriber2: 3
      subscriber3: 3
subscriber1: 4
   subscriber2: 4
      subscriber3: 4
subscriber1: 5
   subscriber2: 5
      subscriber3: 5
subscriber1: 6
   subscriber2: 6
      subscriber3: 6
subscriber1: 7
   subscriber2: 7
      subscriber3: 7
subscriber1: 8
   subscriber2: 8
      subscriber3: 8
subscriber1: 9
   subscriber2: 9
      subscriber3: 9
subscriber1: 10
   subscriber2: 10
      subscriber3: 10
subscriber1: 11
   subscriber2: 11
      subscriber3: 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，多个订阅的 subscriber（或者说观察者）共享同一事件。&lt;/p&gt;
&lt;p&gt;Subject 的特殊性在于它既是 Observable 又是 Observer(Subscriber)。从 Subject 的源码上看到，继承自 Observable 实现 Observer。&lt;/p&gt;
&lt;p&gt;当 Subject 作为观察者时，它可以订阅目标 Cold Observable 使对方开始发送事件。同时它又作为 Observable 转发或者发送新的事件，让 Cold Observable 借助 Subject 转换为 Hot Observable。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Subject 并不是线程安全的，如果想要其线程安全需要调用&lt;code&gt;toSerialized()&lt;/code&gt;方法。(在 RxJava 1.x 的时代还可以用 SerializedSubject 代替 Subject，但是在 RxJava 2.x 以后 SerializedSubject 不再是一个 public class）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RxJava 的官网称 Subject 可以看成是一个桥梁或者代理。Subject 包含四种类型分别是 AsyncSubject、BehaviorSubject、ReplaySubject 和 PublishSubject。&lt;/p&gt;
&lt;p&gt;用一句话分别介绍四种 Subject 的特性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Subject&lt;/th&gt;
&lt;th&gt;发射行为&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AsyncSubject&lt;/td&gt;
&lt;td&gt;不论订阅发生在什么时候，只会发射最后一个数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BehaviorSubject&lt;/td&gt;
&lt;td&gt;发送订阅之前一个数据和订阅之后的全部数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ReplaySubject&lt;/td&gt;
&lt;td&gt;不论订阅发生在什么时候，都发射全部数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PublishSubject&lt;/td&gt;
&lt;td&gt;发送订阅之后的全部数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下面我们以 2 两种常见的 Subject 为例，来看看他们调用 subscribeOn() 方法后会不会起作用？&lt;/p&gt;
&lt;h3&gt;3.1 PublishSubject&lt;/h3&gt;
&lt;p&gt;Observer 只接收 PublishSubject 被订阅之后发送的数据。如果 PublishSubject 在订阅之前，已经执行了 onComplete() 方法，则无法发射数据。&lt;/p&gt;
&lt;p&gt;下面的例子使用 PublishSubject 创建一个数据流，稍后向其发送值。 PublishSubject 使用 subscribeOn() 切换到不同的线程池，并不会起作用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    public static void main(String[] args) {

        PublishSubject&amp;lt;Integer&amp;gt; subject = PublishSubject.create();

        subject.subscribeOn(Schedulers.io())
                .doOnNext(i-&amp;gt; log(&quot;value: &quot;+ i+&quot; - I want this happen on an io thread&quot;)).subscribe();

        subject.subscribeOn(Schedulers.newThread())
                .doOnNext(i-&amp;gt; log(&quot;value: &quot;+ i+&quot; - I want this happen on a new thread&quot;)).subscribe();

        subject.subscribeOn(Schedulers.computation())
                .doOnNext(i-&amp;gt; log(&quot;value: &quot;+ i+&quot; - I want this happen on a computation thread&quot;)).subscribe();

        try {
            Thread.sleep(20);
            subject.onNext(1);
            Thread.sleep(20);
            subject.onNext(2);
            Thread.sleep(20);
            subject.onNext(3);
            Thread.sleep(20);
            subject.onComplete();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void log(String msg) {
        System.out.println(&quot;Current Thread Name:&quot;+Thread.currentThread().getName() + &quot;, &quot;+ msg);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;plain&quot;&gt;Current Thread Name:main, value: 1 - I want this happen on an io thread
Current Thread Name:main, value: 1 - I want this happen on a new thread
Current Thread Name:main, value: 1 - I want this happen on a computation thread
Current Thread Name:main, value: 2 - I want this happen on an io thread
Current Thread Name:main, value: 2 - I want this happen on a new thread
Current Thread Name:main, value: 2 - I want this happen on a computation thread
Current Thread Name:main, value: 3 - I want this happen on an io thread
Current Thread Name:main, value: 3 - I want this happen on a new thread
Current Thread Name:main, value: 3 - I want this happen on a computation thread
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从执行结果上 subscribeOn() 并没有起作用，所有的操作都是在主线程中运行。如果想达到切换线程的效果，需要让 Subject 使用 observeOn() 替换 subscribeOn() 。&lt;/p&gt;
&lt;h3&gt;3.2 BehaviorSubject&lt;/h3&gt;
&lt;p&gt;Observer 会接收到 BehaviorSubject 被订阅之前的最后一个数据，再接收订阅之后发射过来的数据。如果 BehaviorSubject 被订阅之前没有发送任何数据，则会发送一个默认数据。&lt;/p&gt;
&lt;p&gt;由于 BehaviorSubject 的这个特性，subscribeOn() 变得很微妙了，它可能会影响到线程的切换。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    public static void main(String[] args) {

        BehaviorSubject&amp;lt;Integer&amp;gt; subject = BehaviorSubject.create();

        subject.subscribeOn(Schedulers.io())
                .doOnNext(i-&amp;gt; log(&quot;value: &quot;+ i+&quot; - I want this happen on an io thread&quot;)).subscribe();

        subject.onNext(1);

        subject.subscribeOn(Schedulers.newThread())
                .doOnNext(i-&amp;gt; log(&quot;value: &quot;+ i+&quot; - I want this happen on a new thread&quot;)).subscribe();

        subject.subscribeOn(Schedulers.computation())
                .doOnNext(i-&amp;gt; log(&quot;value: &quot;+ i+&quot; - I want this happen on a computation thread&quot;)).subscribe();

        try {
            Thread.sleep(20);
            subject.onNext(2);
            Thread.sleep(20);
            subject.onNext(3);
            Thread.sleep(20);
            subject.onComplete();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void log(String msg) {
        System.out.println(&quot;Current Thread Name:&quot;+Thread.currentThread().getName() + &quot;, &quot;+ msg);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;plain&quot;&gt;Current Thread Name:main, value: 1 - I want this happen on an io thread
Current Thread Name:RxNewThreadScheduler-1, value: 1 - I want this happen on a new thread
Current Thread Name:RxComputationThreadPool-1, value: 1 - I want this happen on a computation thread
Current Thread Name:main, value: 2 - I want this happen on an io thread
Current Thread Name:main, value: 2 - I want this happen on a new thread
Current Thread Name:main, value: 2 - I want this happen on a computation thread
Current Thread Name:main, value: 3 - I want this happen on an io thread
Current Thread Name:main, value: 3 - I want this happen on a new thread
Current Thread Name:main, value: 3 - I want this happen on a computation thread
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从执行结果上看，这段代码在3个线程上运行。&lt;/p&gt;
&lt;p&gt;当我们的 subject 发射第一个值时，第一个观察者已经被订阅。由于订阅代码在我们调用 onNext() 时已经完成，因此订阅调度程序没有任何作用。在这种情况下，当我们调用 onNext() 它类似于 PublishSubject 的工作方式。&lt;/p&gt;
&lt;p&gt;第二和第三个观察者都在初始 onNext() 之后订阅。这是 BehaviorSubject 特性，对于任何新的订阅，它将重播最后一个发射的数据。因此，对于这两个观察者来说，BehaviorSubject 已缓存了这个发射的值(1)，并将其作为预订的一部分发出。这样，将尊重订阅调度程序，并在它提供的线程上通知观察者。&lt;/p&gt;
&lt;p&gt;所有后续的发射的值都发生在订阅之后，因此，值再次与 onNext() 在同一线程上发出，类似于 PublishSubject 的工作方式。&lt;/p&gt;
&lt;h2&gt;四. timer、interval 等函数其实有默认的 Scheduler&lt;/h2&gt;
&lt;p&gt;RxJava 的某些操作符，例如：timer、interval、buffer、debounce、delay 等都支持 Scheduler ，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    @CheckReturnValue
    @SchedulerSupport(SchedulerSupport.COMPUTATION)
    @NonNull
    public static Observable&amp;lt;Long&amp;gt; timer(long delay, @NonNull TimeUnit unit) {
        return timer(delay, unit, Schedulers.computation());
    }

    @CheckReturnValue
    @SchedulerSupport(SchedulerSupport.CUSTOM)
    @NonNull
    public static Observable&amp;lt;Long&amp;gt; timer(long delay, @NonNull TimeUnit unit, @NonNull Scheduler scheduler) {
        Objects.requireNonNull(unit, &quot;unit is null&quot;);
        Objects.requireNonNull(scheduler, &quot;scheduler is null&quot;);

        return RxJavaPlugins.onAssembly(new ObservableTimer(Math.max(delay, 0L), unit, scheduler));
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通常情况下，我们不指定 Scheduler，就是使用默认的 ComputationScheduler，所以即使  subscribeOn() 指定了某个 Scheduler，也不会起作用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    public static void main(String[] args) {

        Observable.timer(5, TimeUnit.MILLISECONDS)
                .subscribeOn(Schedulers.io())
                .subscribe(s -&amp;gt; log(&quot;Consume: &quot; + s));

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void log(String msg) {
        System.out.println(&quot;Current Thread Name:&quot;+Thread.currentThread().getName() + &quot;, &quot;+ msg);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Current Thread Name:RxComputationThreadPool-1, Consume: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因此，执行的结果运行在 computation() 线程上也不奇怪。&lt;/p&gt;
&lt;p&gt;只有，在 timer 函数中指定 Scheduler，观察者才会运行在相应的线程。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    public static void main(String[] args) {

        Observable.timer(5, TimeUnit.MILLISECONDS,Schedulers.io())
                .subscribe(s -&amp;gt; log(&quot;Consume: &quot; + s));

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void log(String msg) {
        System.out.println(&quot;Current Thread Name:&quot;+Thread.currentThread().getName() + &quot;, &quot;+ msg);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;五. 总结&lt;/h2&gt;
&lt;p&gt;RxJava 用好不易，很多东西需要深究其源码。&lt;/p&gt;
&lt;p&gt;本文介绍了几种方式，RxJava 即使调用了 subscribeOn() 方法，线程切换也不会起作用。任何细微使用线程切换的地方，都需要非常注意。虽然有时它不会使应用程序奔溃，但是它们可能会造成一些意外的结果。尚书有云：“不矜细行,终累大德。为山九仞，功亏一篑”。我们在学习和使用过程中也不能忽视任何细节。&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2f01cbfa7edfcc7366b0a089cf4ac682</guid>
<title>如何借助 JuiceFS 为 AI 模型训练提速 7 倍</title>
<link>https://toutiao.io/k/187knf0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post_content markdown&quot;&gt;&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;&lt;p&gt;海量且优质的数据集是一个好的 AI 模型的基石之一，如何存储、管理这些数据集，以及在模型训练时提升 I/O 效率一直都是 AI 平台工程师和算法科学家特别关注的事情。不论是单机训练还是分布式训练，I/O 的性能都会显著影响整体 pipeline 的效率，甚至是最终的模型质量。&lt;/p&gt;&lt;p&gt;我们也逐渐看到容器化成为 AI 训练的趋势，利用容器可以快速弹性伸缩的特点，结合公有云的资源池，能够最大化资源利用率，为企业大大节约成本。因此也就诞生了类似 &lt;a href=&quot;https://www.kubeflow.org&quot;&gt;Kubeflow&lt;/a&gt; 和 &lt;a href=&quot;https://volcano.sh&quot;&gt;Volcano&lt;/a&gt; 这样的开源组件，帮助用户在 Kubernetes 上管理 AI 任务。Kubernetes 自 1.15 开始新增了 &lt;a href=&quot;https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework&quot;&gt;Scheduling Framework&lt;/a&gt;，社区也基于这个新的调度框架优化了很多针对 AI 训练场景的问题。前面提到的训练数据管理问题在 Kubernetes 上依然存在，甚至放大了这个需求，因为计算不再是在固定的几台机器上进行，数据需要智能地跟随计算「流动」（或者反过来）。&lt;/p&gt;&lt;p&gt;最后，不管是算法科学家日常实验，还是正式训练模型，POSIX 接口依然是一个很强烈的需求，虽然主流的框架或者算法库基本都支持对象存储接口但 POSIX 仍然是「第一公民」。一些操作系统的高级特性（如 page cache）也是只有 POSIX 接口才具备的。&lt;/p&gt;&lt;h2 id=&quot;ai-平台整体架构&quot;&gt;AI 平台整体架构&lt;/h2&gt;&lt;p&gt;上面是一个常见的 AI 平台架构图。存储系统目前使用比较多的就是对象存储和 HDFS，这里之所以还会用到 HDFS 有多种原因，比如平台部署在机房没有对象存储，训练数据集预处理是在大数据平台等。计算资源混合了 CPU 实例和 GPU 实例，和大数据平台不一样的地方在于，AI 平台的资源天生就是异构的，因此怎么合理高效利用这些异构资源一直是个业界难题。调度器前面已经介绍到，Kubernetes 是目前主流的组件，结合各种 Job Operator、Volcano、调度插件可以最大程度上发挥 Kubernetes 的能力。Pipeline 是很重要的一个部分，AI 任务并不只是由模型训练这一个步骤组成，还包括数据预处理、特征工程、模型验证、模型评估、模型上线等多个环节，因此 Pipeline 管理也是非常重要的。最后就是算法科学家接触最多的深度学习框架，这些框架目前都有自己的使用群体，很多模型优化会基于某种框架进行（比如 TensorFlow 的 XLA），但也有和框架无关的（比如 &lt;a href=&quot;https://tvm.apache.org&quot;&gt;TVM&lt;/a&gt;）。&lt;/p&gt;&lt;p&gt;本文的关注点在于最底层的存储层，在保持上层组件不变的情况下，如何优化存储层的 I/O 效率。这部分包括但不限于数据缓存、预读、并发读、调度优化等策略，JuiceFS 便是这样一个存储层的增强组件，能够大幅提升 I/O 效率，下面会详细介绍。&lt;/p&gt;&lt;h2 id=&quot;juicefs-简介&quot;&gt;JuiceFS 简介&lt;/h2&gt;&lt;p&gt;JuiceFS 是一个面向云原生环境设计的高性能开源分布式文件系统，完全兼容 POSIX、HDFS、S3 接口，适用于大数据、AI 模型训练、Kubernetes 共享存储、海量数据归档管理等场景。&lt;/p&gt;&lt;p&gt;当通过 JuiceFS 客户端读取数据时，这些数据将会智能地缓存到应用配置的本地缓存路径（可能是内存，也可能是磁盘），同时元数据也会缓存到客户端节点本地内存中。对于 AI 模型训练场景来说，第一个 epoch 完成之后后续的计算都可以直接从缓存中获取训练数据，极大地提升了训练效率。&lt;/p&gt;&lt;p&gt;JuiceFS 也具有预读、并发读取数据的能力，保证每个 mini-batch 的生成效率，提前准备好数据。&lt;/p&gt;&lt;p&gt;此外 JuiceFS 还提供标准的 Kubernetes CSI Driver，应用可以把 JuiceFS 文件系统作为一个共享的 Persistent Volume（PV）同时挂载到多个容器中。&lt;/p&gt;&lt;p&gt;得益于以上特性的支持，算法科学家可以很轻松地管理训练数据，就像访问本地存储一样，无需修改框架进行专门的适配，训练效率也能得到一定的保障。&lt;/p&gt;&lt;h2 id=&quot;测试方案&quot;&gt;测试方案&lt;/h2&gt;&lt;p&gt;为了验证使用 JuiceFS 以后模型训练的效果，我们选取常见的 ResNet50 模型以及 ImageNet 数据集，训练任务使用了 &lt;a href=&quot;https://github.com/Oneflow-Inc/DLPerf/tree/master/PyTorch/resnet50v1.5&quot;&gt;DLPerf&lt;/a&gt; 项目提供的脚本，对应的深度学习框架是 PyTorch。训练节点配置了 8 块 NVIDIA A100 显卡。&lt;/p&gt;&lt;p&gt;作为对比，我们将公有云上的对象存储作为基准线（通过类 S3FS 的方式进行访问），同时和开源项目 Alluxio 进行比较，分别测试了 1 机 1 卡、1 机 4 卡、1 机 8 卡不同配置下的训练效率（即每秒处理的样本数）。&lt;/p&gt;&lt;p&gt;不论是 JuiceFS 还是 Alluxio，训练数据集都提前预热到了内存中，数据集约占用 160G 空间。JuiceFS 提供了 &lt;a href=&quot;https://github.com/juicedata/juicefs/blob/main/docs/zh_cn/command_reference.md#juicefs-warmup&quot;&gt;&lt;code&gt;warmup&lt;/code&gt; 子命令&lt;/a&gt;可以很方便地进行数据集的缓存预热，只需指定需要预热的目录或者文件列表即可。&lt;/p&gt;&lt;p&gt;测试方法是每种配置都跑多轮训练，每轮只跑 1 个 epoch，将每轮的统计结果汇总，在排除一些可能的异常数据以后，计算得出整体的训练效率。&lt;/p&gt;&lt;h2 id=&quot;juicefs-配置选项说明&quot;&gt;JuiceFS 配置选项说明&lt;/h2&gt;&lt;p&gt;AI 模型训练场景的 I/O 模式是典型的只读模式，即只会对数据集产生读请求，不会修改数据。因此为了最大化 I/O 效率，可以适当调整一些配置选项（如缓存相关配置），下面详细介绍几个重要的 JuiceFS 配置选项。&lt;/p&gt;&lt;h3 id=&quot;元数据缓存&quot;&gt;元数据缓存&lt;/h3&gt;&lt;p&gt;在内核中可以缓存三种元数据：属性（attribute)、文件项（entry）和目录项（direntry），它们可以通过如下三个选项控制缓存时间：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;--attr-cache value       属性缓存过期时间；单位为秒 (默认: 1)
--entry-cache value      文件项缓存过期时间；单位为秒 (默认: 1)
--dir-entry-cache value  目录项缓存过期时间；单位为秒 (默认: 1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认元数据在内核中只缓存 1 秒钟，可以根据训练时长适当增大缓存时间，如 2 小时（7200 秒）。&lt;/p&gt;&lt;p&gt;当打开一个文件时（即 &lt;code&gt;open()&lt;/code&gt; 请求），为了保证&lt;a href=&quot;https://github.com/juicedata/juicefs/blob/main/docs/zh_cn/cache_management.md#%E4%B8%80%E8%87%B4%E6%80%A7&quot;&gt;一致性&lt;/a&gt;，JuiceFS 默认都会请求元数据引擎以获取最新的元信息。由于数据集都是只读的，因此可以适当调整处理策略，设置检查文件是否更新的间隔时间，如果时间没有到达设定的值，则不需要访问元数据引擎，可以大幅提升打开文件的性能。相关配置选项是：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;--open-cache value        打开的文件的缓存过期时间（0 代表关闭这个特性）；单位为秒 (默认: 0)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;数据缓存&quot;&gt;数据缓存&lt;/h3&gt;&lt;p&gt;对于已经读过的文件，内核会把它的内容自动缓存下来，下次再打开的时候，如果文件没有被更新（即 &lt;code&gt;mtime&lt;/code&gt; 没有更新），就可以直接从内核中的缓存（page cache）读获得最好的性能。因此当第一个 epoch 运行完毕，如果计算节点的内存足够，那大部分数据集可能都已经缓存到 page cache 中，这样之后的 epoch 将可以不需要经过 JuiceFS 读取数据，性能也能大幅提升。这个特性已经默认在 0.15.2 及以上版本的 JuiceFS 中开启，不需要做任何配置。&lt;/p&gt;&lt;p&gt;除了内核中的数据缓存，JuiceFS 还支持将数据缓存到本地文件系统中，可以是基于硬盘、SSD 或者内存的任意本地文件系统。本地缓存可以通过以下选项来调整：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;--cache-dir value         本地缓存目录路径；使用冒号隔离多个路径 (默认: &quot;$HOME/.juicefs/cache&quot; 或 &quot;/var/jfsCache&quot;)
--cache-size value        缓存对象的总大小；单位为 MiB (默认: 1024)
--free-space-ratio value  最小剩余空间比例 (默认: 0.1)
--cache-partial-only      仅缓存随机小块读 (默认: false)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如要将数据缓存到内存中有两种方式，一种是将 &lt;code&gt;--cache-dir&lt;/code&gt; 设置为 &lt;code&gt;memory&lt;/code&gt;，另一种是将其设置为 &lt;code&gt;/dev/shm&lt;/code&gt;。这两种方式的区别是前者在重新挂载 JuiceFS 文件系统之后缓存数据就清空了，而后者还会保留，性能上两者没有太大差别。下面是将数据缓存到 &lt;code&gt;/dev/shm/jfscache&lt;/code&gt; 并且限定最多使用 300GiB 内存的示例：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;--cache-dir /dev/shm/jfscache --cache-size 307200
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JuiceFS 也支持将数据缓存到多个路径，默认会采用轮询的方式写入缓存数据，多个路径通过冒号分隔，例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;--cache-dir /data1:/data2:/data3
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;alluxio-配置选项说明&quot;&gt;Alluxio 配置选项说明&lt;/h2&gt;&lt;p&gt;Alluxio 的所有组件（如 master、worker、FUSE）都是部署在同一个节点，使用的版本是 2.5.0-2。具体配置如下：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;配置项&lt;/th&gt;&lt;th&gt;设定值&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;alluxio.master.journal.type&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;UFS&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;alluxio.user.block.size.bytes.default&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;32MB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;alluxio.user.local.reader.chunk.size.bytes&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;32MB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;alluxio.user.metadata.cache.enabled&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;alluxio.user.metadata.cache.expiration.time&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;2day&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;alluxio.user.streaming.reader.chunk.size.bytes&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;32MB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;alluxio.worker.network.reader.buffer.size&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;128MB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;此外 Alluxio FUSE 启动时指定的挂载选项是：&lt;code&gt;kernel_cache,ro,max_read=131072,attr_timeout=7200,entry_timeout=7200,nonempty&lt;/code&gt;。&lt;/p&gt;&lt;h2 id=&quot;测试结果&quot;&gt;测试结果&lt;/h2&gt;&lt;p&gt;测试结果包含两个场景，一种使用了内核的 page cache，另一种没有使用。前面提到测试方法是每种配置跑多轮训练，当跑完第一轮以后，后续的测试都有可能直接从 page cache 中读取数据。因此我们设计了第二种场景，来测试没有 page cache 时的训练效率（比如模型训练的第一个 epoch），这种场景能更真实反映底层存储系统的实际性能。&lt;/p&gt;&lt;p&gt;对于第一种场景，JuiceFS 不需要额外配置即可有效利用内核的 page cache，但是对象存储和 Alluxio 的默认配置都不支持这个特性，需要单独进行设置。&lt;/p&gt;&lt;p&gt;需要特别注意的是，我们在测试对象存储的过程中曾经尝试过开启 S3FS 的本地缓存特性，希望达到类似 JuiceFS 和 Alluxio 的缓存效果。但是实际测试时发现即使已经全量预热缓存，以及无论用多少块显卡，1 个 epoch 都无法在 1 天内跑完，甚至比没有缓存时更慢。因此以下测试结果中的「对象存储」未包含开启本地缓存以后的数据。&lt;/p&gt;&lt;p&gt;下图是两个场景的测试结果（「w/o PC」表示没有 page cache）：&lt;/p&gt;&lt;p&gt;得益于元数据缓存和数据缓存，可以看到不管是在哪种场景下，&lt;strong&gt;JuiceFS 相比对象存储平均都能达到 4 倍以上的性能提升，最多能有接近 7 倍的性能差距&lt;/strong&gt;。同时由于对象存储的访问方式没有有效利用内核的 page cache，因此它在这两种场景的性能差距不大。另外在完整的端到端模型训练测试中，因为对象存储的训练效率太低，跑到指定模型精度所需时间过长，在生产环境中基本属于不可用状态。&lt;/p&gt;&lt;p&gt;对比 Alluxio，在有 page cache 的第一种场景中与 JuiceFS 差别不大。在没有 page cache 只有内存缓存的第二种场景中 JuiceFS 平均提升 20% 左右的性能，特别是在 1 机 8 卡的配置下，差距进一步加大，达到了 43% 左右的性能差异。Alluxio 在 1 机 8 卡配置下的性能相比 1 机 4 卡没有提升，没法充分利用多卡的计算能力。&lt;/p&gt;&lt;p&gt;GPU 资源是一种比较昂贵的资源，因此 I/O 效率的差异也能间接体现到计算资源的成本上，越是能高效利用计算资源才越能整体降低 TCO。&lt;/p&gt;&lt;h2 id=&quot;总结及展望&quot;&gt;总结及展望&lt;/h2&gt;&lt;p&gt;本文介绍了在 AI 模型训练中如何充分利用 JuiceFS 的特性来为训练提速，相比直接从对象存储读取数据集，通过 JuiceFS 可以带来最多 7 倍的性能提升。在多卡训练的场景上也能保持一定的线性加速比，为分布式训练奠定了基础。&lt;/p&gt;&lt;p&gt;未来 JuiceFS 还会在 AI 场景探索更多方向，例如进一步提升 I/O 效率、海量小文件存储、数据与计算的亲和性、与 Job Operator 的结合、与 Kubernetes 调度框架或社区调度器的结合等等。欢迎大家积极参与到 JuiceFS 开源社区中来，共同建设云原生 AI 场景的存储基石。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>