<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3993bbe28ee4164e43abb808086c8393</guid>
<title>30 岁的程序员出路在哪里？| 码农周刊第 321 期</title>
<link>https://toutiao.io/k/qdeuemt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;30 岁的程序员出路在哪里？| 码农周刊第 321 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第321期（2020-10-15）&lt;/h2&gt;
        &lt;p&gt;☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=321&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3210&quot; target=&quot;_blank&quot;&gt;薪资翻番如何实现？程序员的涨薪秘诀&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;a href=&quot;https://weekly.manong.io/bounce?nid=321&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3210&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_321.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=321&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;最佳实践&lt;/p&gt;
        
        &lt;p&gt;偏好模型在贝壳的应用&lt;/p&gt;
        
        &lt;p&gt;实战经验&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;共包含 9 种英伟达开发的图像及视频合成方法&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;以 DDD 思想为基础，融合中台核心要素，赋能中台建设。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;开箱即用的中后台前端/设计解决方案&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;详细介绍&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;一步步教你&lt;/p&gt;
        
        &lt;p&gt;细致讲解&lt;/p&gt;
        
        &lt;p&gt;无废话&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;适合入门&lt;/p&gt;
        
        &lt;p&gt;多维度看问题&lt;/p&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://github.com/streamnative/mop&quot; target=&quot;_blank&quot;&gt;GitHub 地址&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;通俗易懂&lt;/p&gt;
        
        &lt;p&gt;适合新手&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;完备分析&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;通俗易懂&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;细致分析&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;一线互联网工程师，分享Linux C++ Go Python等后端开发技术。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 444675 即可&lt;/p&gt;
        
        &lt;p&gt;老年程序猿，工作15年以上。以前极其不擅长写作，最近决定对着弱点迎难而上，写写原创的经验、心得。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 426740 即可&lt;/p&gt;
        
        &lt;p&gt;分享一些在 ThinkJS 项目开发过程中总结的一些经验以及问题&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 253319 即可&lt;/p&gt;
        
        &lt;p&gt;专注互联网金融&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 26661 即可&lt;/p&gt;
        
        &lt;p&gt;主要是分享作为一个机器学习算法工程师的工作学习生活方面的内容，包括Python编程、机器学习和深度学习算法知识，偶尔可能分享一些计算机基础方面的知识，以及一些练习项目等&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 1584 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;本书介绍了 Kotlin 的基本语法、常用类型、面向对象编程以及一些高阶的知识。欢迎到&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;兑换阅读。&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;天无绝程序员之路&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验之谈&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fb0d52fea8a73442cd630a25c6113ce4</guid>
<title>从面试角度一文学完 Kafka</title>
<link>https://toutiao.io/k/ugyvu7i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 是一个优秀的分布式消息中间件，许多系统中都会使用到 Kafka 来做消息通信。对分布式消息系统的了解和使用几乎成为一个后台开发人员必备的技能。今天&lt;code&gt;码哥字节&lt;/code&gt;就从常见的 Kafka 面试题入手，和大家聊聊 Kafka 的那些事儿。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eUHdfRa2iau1r2l5uiatYBfdLo6iartGZYqaQqoIjjDdTHokZbXZpETT5w/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;figcaption&gt;思维导图&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;讲一讲分布式消息中间件&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;什么是分布式消息中间件？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息中间件的作用是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息中间件的使用场景是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息中间件选型？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.22113502935420742&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eOk0QYTSYwRMDic4sEe5pXFpDq7aY1lXx96nIib9O8ibic3sgkwVXicRUJyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;511&quot;/&gt;&lt;figcaption&gt;消息队列&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式消息是一种通信机制，和 RPC、HTTP、RMI 等不一样，消息中间件采用分布式中间代理的方式进行通信。如图所示，采用了消息中间件之后，上游业务系统发送消息，先存储在消息中间件，然后由消息中间件将消息分发到对应的业务模块应用（分布式生产者 - 消费者模式）。这种异步的方式，减少了服务之间的耦合程度。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6539855072463768&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eMCnn894hYzQm9kiaHvVW92cHu9YEFQ5QzgPiaFtG9EKhLAndHCcib0Ovg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;552&quot;/&gt;&lt;figcaption&gt;架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;定义消息中间件：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;利用高效可靠的消息传递机制进行平台无关的数据交流&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基于数据通信，来进行分布式系统的集成&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过提供消息传递和消息排队模型，可以在分布式环境下扩展进程间的通信&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在系统架构中引用额外的组件，必然提高系统的架构复杂度和运维的难度，那么&lt;strong&gt;在系统中使用分布式消息中间件有什么优势呢？消息中间件在系统中起的作用又是什么呢？&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;解耦&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;冗余（存储）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;扩展性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;削峰&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可恢复性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;顺序保证&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缓冲&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;异步通信&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试时，面试官经常会关心面试者对开源组件的选型能力，这既可以考验面试者知识的广度，也可以考验面试者对某类系统的知识的认识深度，而且也可以看出面试者对系统整体把握和系统架构设计的能力。开源分布式消息系统有很多，不同的消息系统的特性也不一样，选择怎样的消息系统，不仅需要对各消息系统有一定的了解，也需要对自身系统需求有清晰的认识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;下面是常见的几种分布式消息系统的对比：&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0171875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eWicicf2rsCH8TmuQOwSsIv4yodTLUBzRuiaic7qeiaBo5IYZtv0fkhfhq4A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;figcaption&gt;选择&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;答案关键字&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;什么是分布式消息中间件？通信，队列，分布式，生产消费者模式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息中间件的作用是什么？解耦、峰值处理、异步通信、缓冲。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息中间件的使用场景是什么？异步通信，消息存储处理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息中间件选型？语言，协议、HA、数据可靠性、性能、事务、生态、简易、推拉模式。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Kafka 基本概念和架构&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;简单讲下 Kafka 的架构？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka 是推模式还是拉模式，推拉的区别是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka 如何广播消息？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka 的消息是否是有序的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka 是否支持读写分离？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka 如何保证数据高可用？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka 中 zookeeper 的作用？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是否支持事务？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分区数是否可以减少？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Kafka 架构中的一般概念：&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6317254174397031&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0ezicXtDDiaMbIKIjibSf05dOIKmBzicuuEhrRkbuESn0DNrfEFOCsTtYTTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1078&quot;/&gt;&lt;figcaption&gt;架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Producer：生产者，也就是发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Consumer：消费者，也就是接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Consumer Group：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实现消息 P2P 模式和广播模式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Broker：服务代理节点。Broker 是 Kafka 的服务节点，即 Kafka 的服务器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Topic：Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Partition：Topic 是一个逻辑的概念，它可以细分为多个分区，每个分区只属于单个主题。同一个主题下不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量（offset）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Offset：offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Replication：副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络一场，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副本对外提供读写服务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Record：实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Kafka Topic Partitions Layout&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6413502109704642&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eIQx0EmicOZeS2PkfAoVPaJbW2kGU8lRcE3PcTI5IszncmuC313y6HeQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;474&quot;/&gt;&lt;figcaption&gt;主题&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 将 Topic 进行分区，分区可以并发读写。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Kafka Consumer Offset&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6090151886330231&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eldOxZh0wr1sjbOZ3bZTJgjGpkfCUQqpS6gFHYRrZabKFiaU5ib4mxtibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2041&quot;/&gt;&lt;figcaption&gt;consumer offset&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;zookeeper&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6064&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eW1FHYjVEQY28EmLJoT0mfqOoF1DeEwQTWkO61aWiaJqDuLEtWiaKbxicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;625&quot;/&gt;&lt;figcaption&gt;zookeeper&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Broker 注册：Broker 是分布式部署并且之间相互独立，Zookeeper 用来管理注册到集群的所有 Broker 节点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Topic 注册：在 Kafka 中，同一个 Topic 的消息会被分成多个分区并将其分布在多个 Broker 上，这些分区信息及与 Broker 的对应关系也都是由 Zookeeper 在维护&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生产者负载均衡：由于同一个 Topic 消息会被分区并将其分布在多个 Broker 上，因此，生产者需要将消息合理地发送到这些分布式的 Broker 上。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消费者负载均衡：与生产者类似，Kafka 中的消费者同样需要进行负载均衡来实现多个消费者合理地从对应的 Broker 服务器上接收消息，每个消费者分组包含若干消费者，每条消息都只会发送给分组中的一个消费者，不同的消费者分组消费自己特定的 Topic 下面的消息，互不干扰。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;答案关键字&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;简单讲下 Kafka 的架构？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Producer、Consumer、Consumer Group、Topic、Partition&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka 是推模式还是拉模式，推拉的区别是什么？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Kafka Producer 向 Broker 发送消息使用 Push 模式，Consumer 消费采用的 Pull 模式。拉取模式，让 consumer 自己管理 offset，可以提供读取性能&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka 如何广播消息？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Consumer group&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka 的消息是否是有序的？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Topic 级别无序，Partition 有序&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka 是否支持读写分离？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;不支持，只有 Leader 对外提供读写服务&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka 如何保证数据高可用？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;副本，ack，HW&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka 中 zookeeper 的作用？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;集群管理，元数据管理&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;是否支持事务？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;0.11 后支持事务，可以实现”exactly once“&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;分区数是否可以减少？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;不可以，会丢失数据&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Kafka 使用&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Kafka 有哪些命令行工具？你用过哪些？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka Producer 的执行过程？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka Producer 有哪些常见配置？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何让 Kafka 的消息有序？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Producer 如何保证数据发送不丢失？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何提升 Producer 的性能？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果同一 group 下 consumer 的数量大于 part 的数量，kafka 如何处理？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka Consumer 是否是线程安全的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;讲一下你使用 Kafka Consumer 消费消息时的线程模型，为何如此设计？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka Consumer 的常见配置？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Consumer 什么时候会被踢出集群？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当有 Consumer 加入或退出时，Kafka 会作何反应？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是 Rebalance，何时会发生 Rebalance？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;命令行工具&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 的命令行工具在 Kafka 包的&lt;code&gt;/bin&lt;/code&gt;目录下，主要包括服务和集群管理脚本，配置脚本，信息查看脚本，Topic 脚本，客户端脚本等。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;kafka-configs.sh：配置管理脚本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-console-consumer.sh：kafka 消费者控制台&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-console-producer.sh：kafka 生产者控制台&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-consumer-groups.sh：kafka 消费者组相关信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-delete-records.sh：删除低水位的日志文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-log-dirs.sh：kafka 消息日志目录信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-mirror-maker.sh：不同数据中心 kafka 集群复制工具&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-preferred-replica-election.sh：触发 preferred replica 选举&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-producer-perf-test.sh：kafka 生产者性能测试脚本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-reassign-partitions.sh：分区重分配脚本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-replica-verification.sh：复制进度验证脚本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-server-start.sh：启动 kafka 服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-server-stop.sh：停止 kafka 服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-topics.sh：topic 管理脚本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-verifiable-consumer.sh：可检验的 kafka 消费者&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka-verifiable-producer.sh：可检验的 kafka 生产者&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;zookeeper-server-start.sh：启动 zk 服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;zookeeper-server-stop.sh：停止 zk 服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;zookeeper-shell.sh：zk 客户端&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们通常可以使用&lt;code&gt;kafka-console-consumer.sh&lt;/code&gt;和&lt;code&gt;kafka-console-producer.sh&lt;/code&gt;脚本来测试 Kafka 生产和消费，&lt;code&gt;kafka-consumer-groups.sh&lt;/code&gt;可以查看和管理集群中的 Topic，&lt;code&gt;kafka-topics.sh&lt;/code&gt;通常用于查看 Kafka 的消费组情况。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Kafka Producer&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka producer 的正常生产逻辑包含以下几个步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;配置生产者客户端参数常见生产者实例。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;构建待发送的消息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送消息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;关闭生产者实例。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Producer 发送消息的过程如下图所示，需要经过&lt;code&gt;拦截器&lt;/code&gt;，&lt;code&gt;序列化器&lt;/code&gt;和&lt;code&gt;分区器&lt;/code&gt;，最终由&lt;code&gt;累加器&lt;/code&gt;批量发送至 Broker。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.85&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eKTYZaOjN9EnxQY1V9DQENGvNs6BgibS2mkrZR58b2HTYxjo7Su8ayvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;figcaption&gt;producer&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka Producer 需要以下必要参数：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;bootstrap.server：指定 Kafka 的 Broker 的地址&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;key.serializer：key 序列化器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;value.serializer：value 序列化器&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见参数：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;batch.num.messages&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：200，每次批量消息的数量，只对 asyc 起作用。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;request.required.acks&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：0，0 表示 producer 毋须等待 leader 的确认，1 代表需要 leader 确认写入它的本地 log 并立即确认，-1 代表所有的备份都完成后确认。只对 async 模式起作用，这个参数的调整是数据不丢失和发送效率的 tradeoff，如果对数据丢失不敏感而在乎效率的场景可以考虑设置为 0，这样可以大大提高 producer 发送数据的效率。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;request.timeout.ms&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：10000，确认超时时间。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;partitioner.class&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：kafka.producer.DefaultPartitioner，必须实现 kafka.producer.Partitioner，根据 Key 提供一个分区策略。&lt;em&gt;有时候我们需要相同类型的消息必须顺序处理，这样我们就必须自定义分配策略，从而将相同类型的数据分配到同一个分区中。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;producer.type&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：sync，指定消息发送是同步还是异步。异步 asyc 成批发送用 kafka.producer.AyncProducer， 同步 sync 用 kafka.producer.SyncProducer。同步和异步发送也会影响消息生产的效率。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;compression.topic&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：none，消息压缩，默认不压缩。其余压缩方式还有，&quot;gzip&quot;、&quot;snappy&quot;和&quot;lz4&quot;。对消息的压缩可以极大地减少网络传输量、降低网络 IO，从而提高整体性能。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;compressed.topics&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：null，在设置了压缩的情况下，可以指定特定的 topic 压缩，未指定则全部压缩。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;message.send.max.retries&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：3，消息发送最大尝试次数。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;retry.backoff.ms&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：300，每次尝试增加的额外的间隔时间。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;topic.metadata.refresh.interval.ms&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：600000，定期的获取元数据的时间。当分区丢失，leader 不可用时 producer 也会主动获取元数据，如果为 0，则每次发送完消息就获取元数据，不推荐。如果为负值，则只有在失败的情况下获取元数据。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;queue.buffering.max.ms&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：5000，在 producer queue 的缓存的数据最大时间，仅仅 for asyc。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;queue.buffering.max.message&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：10000，producer 缓存的消息的最大数量，仅仅 for asyc。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;queue.enqueue.timeout.ms&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;默认值：-1，0 当 queue 满时丢掉，负值是 queue 满时 block, 正值是 queue 满时 block 相应的时间，仅仅 for asyc。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Kafka Consumer&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 有消费组的概念，每个消费者只能消费所分配到的分区的消息，每一个分区只能被一个消费组中的一个消费者所消费，所以同一个消费组中消费者的数量如果超过了分区的数量，将会出现有些消费者分配不到消费的分区。消费组与消费者关系如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0e8hZibvux434Ezrdic0AwyjujUTWZOnf3Aue0NBEDWWTPsRo3nPIdD9Gg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;figcaption&gt;consumer group&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka Consumer Client 消费消息通常包含以下步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;配置客户端，创建消费者&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;订阅主题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拉去消息并消费&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提交消费位移&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;关闭消费者实例&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9778270509977827&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eXcBXb9ysKJdxfk6HfugAjIaKvJj2ibCF3FNicp5ZWXRydmy29W14iclEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;451&quot;/&gt;&lt;figcaption&gt;过程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 Kafka 的 Consumer 客户端是线程不安全的，为了保证线程安全，并提升消费性能，可以在 Consumer 端采用类似 Reactor 的线程模型来消费数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.418732782369146&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eJoAxjWZQhqboDia1UsJDSrdqEaQVaWu6icwL24b4HVPGFQbtQH95GAWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;726&quot;/&gt;&lt;figcaption&gt;消费模型&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Kafka consumer 参数&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;bootstrap.servers：连接 broker 地址，&lt;code&gt;host：port&lt;/code&gt; 格式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;group.id：消费者隶属的消费组。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;key.deserializer：与生产者的&lt;code&gt;key.serializer&lt;/code&gt;对应，key 的反序列化方式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;value.deserializer：与生产者的&lt;code&gt;value.serializer&lt;/code&gt;对应，value 的反序列化方式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;session.timeout.ms：coordinator 检测失败的时间。默认 10s 该参数是 Consumer Group 主动检测 （组内成员 comsummer) 崩溃的时间间隔，类似于心跳过期时间。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;auto.offset.reset：该属性指定了消费者在读取一个没有偏移量后者偏移量无效（消费者长时间失效当前的偏移量已经过时并且被删除了）的分区的情况下，应该作何处理，默认值是 latest，也就是从最新记录读取数据（消费者启动之后生成的记录），另一个值是 earliest，意思是在偏移量无效的情况下，消费者从起始位置开始读取数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;enable.auto.commit：否自动提交位移，如果为&lt;code&gt;false&lt;/code&gt;，则需要在程序中手动提交位移。对于精确到一次的语义，最好手动提交位移&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;fetch.max.bytes：单次拉取数据的最大字节数量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;max.poll.records：单次 poll 调用返回的最大消息数，如果处理逻辑很轻量，可以适当提高该值。但是&lt;code&gt;max.poll.records&lt;/code&gt;条数据需要在在 session.timeout.ms 这个时间内处理完 。默认值为 500&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;request.timeout.ms：一次请求响应的最长等待时间。如果在超时时间内未得到响应，kafka 要么重发这条消息，要么超过重试次数的情况下直接置为失败。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Kafka Rebalance&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;rebalance 本质上是一种协议，规定了一个 consumer group 下的所有 consumer 如何达成一致来分配订阅 topic 的每个分区。比如某个 group 下有 20 个 consumer，它订阅了一个具有 100 个分区的 topic。正常情况下，Kafka 平均会为每个 consumer 分配 5 个分区。这个分配的过程就叫 rebalance。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;什么时候 rebalance？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也是经常被提及的一个问题。rebalance 的触发条件有三种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;组成员发生变更（新 consumer 加入组、已有 consumer 主动离开组或已有 consumer 崩溃了——这两者的区别后面会谈到）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;订阅主题数发生变更&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;订阅主题的分区数发生变更&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何进行组内分区分配？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 默认提供了两种分配策略：Range 和 Round-Robin。当然 Kafka 采用了可插拔式的分配策略，你可以创建自己的分配器以实现不同的分配策略。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;答案关键字&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Kafka 有哪些命令行工具？你用过哪些？&lt;code&gt;/bin&lt;/code&gt;目录，管理 kafka 集群、管理 topic、生产和消费 kafka&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka Producer 的执行过程？拦截器，序列化器，分区器和累加器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka Producer 有哪些常见配置？broker 配置，ack 配置，网络和发送参数，压缩参数，ack 参数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何让 Kafka 的消息有序？Kafka 在 Topic 级别本身是无序的，只有 partition 上才有序，所以为了保证处理顺序，可以自定义分区器，将需顺序处理的数据发送到同一个 partition&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Producer 如何保证数据发送不丢失？ack 机制，重试机制&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何提升 Producer 的性能？批量，异步，压缩&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果同一 group 下 consumer 的数量大于 part 的数量，kafka 如何处理？多余的 Part 将处于无用状态，不消费数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka Consumer 是否是线程安全的？不安全，单线程消费，多线程处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;讲一下你使用 Kafka Consumer 消费消息时的线程模型，为何如此设计？拉取和处理分离&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka Consumer 的常见配置？broker, 网络和拉取参数，心跳参数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Consumer 什么时候会被踢出集群？奔溃，网络异常，处理时间过长提交位移超时&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当有 Consumer 加入或退出时，Kafka 会作何反应？进行 Rebalance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是 Rebalance，何时会发生 Rebalance？topic 变化，consumer 变化&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;高可用和性能&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Kafka 如何保证高可用？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka 的交付语义？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Replic 的作用？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么事 AR，ISR？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Leader 和 Flower 是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka 中的 HW、LEO、LSO、LW 等分别代表什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka 为保证优越的性能做了哪些处理？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分区与副本&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0ewfp38ibLicjtX0e8FmBy9CK8fDJ1puibMUu1Pac6hNNc53L1QwrHIfVvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2048&quot;/&gt;&lt;figcaption&gt;分区副本&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在分布式数据系统中，通常使用分区来提高系统的处理能力，通过副本来保证数据的高可用性。多分区意味着并发处理的能力，这多个副本中，只有一个是 leader，而其他的都是 follower 副本。仅有 leader 副本可以对外提供服务。多个 follower 副本通常存放在和 leader 副本不同的 broker 中。通过这样的机制实现了高可用，当某台机器挂掉后，其他 follower 副本也能迅速”转正“，开始对外提供服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;为什么 follower 副本不提供读服务？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个问题本质上是对性能和一致性的取舍。试想一下，如果 follower 副本也对外提供服务那会怎么样呢？首先，性能是肯定会有所提升的。但同时，会出现一系列问题。类似数据库事务中的幻读，脏读。比如你现在写入一条数据到 kafka 主题 a，消费者 b 从主题 a 消费数据，却发现消费不到，因为消费者 b 去读取的那个分区副本中，最新消息还没写入。而这个时候，另一个消费者 c 却可以消费到最新那条数据，因为它消费了 leader 副本。Kafka 通过 WH 和 Offset 的管理来决定 Consumer 可以消费哪些数据，已经当前写入的数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4909354604786077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eS5xReZlg34TaImRQV7BRkgKcs2BWUnr8JAgpMXww8UBwlQick0nmicpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1379&quot;/&gt;&lt;figcaption&gt;watermark&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;只有 Leader 可以对外提供读服务，那如何选举 Leader&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;kafka 会将与 leader 副本保持同步的副本放到 ISR 副本集合中。当然，leader 副本是一直存在于 ISR 副本集合中的，在某些特殊情况下，ISR 副本中甚至只有 leader 一个副本。当 leader 挂掉时，kakfa 通过 zookeeper 感知到这一情况，在 ISR 副本中选取新的副本成为 leader，对外提供服务。但这样还有一个问题，前面提到过，有可能 ISR 副本集合中，只有 leader，当 leader 副本挂掉后，ISR 集合就为空，这时候怎么办呢？这时候如果设置 unclean.leader.election.enable 参数为 true，那么 kafka 会在非同步，也就是不在 ISR 副本集合中的副本中，选取出副本成为 leader。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;副本的存在就会出现副本同步问题&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 在所有分配的副本 (AR) 中维护一个可用的副本列表 (ISR)，Producer 向 Broker 发送消息时会根据&lt;code&gt;ack&lt;/code&gt;配置来确定需要等待几个副本已经同步了消息才相应成功，Broker 内部会&lt;code&gt;ReplicaManager&lt;/code&gt;服务来管理 flower 与 leader 之间的数据同步。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4772344013490725&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0e9qlJCXlG7NFkeibFgKG5y5goenXJdwzUmAQACZg5yOoAMicQX7SCnx4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1186&quot;/&gt;&lt;figcaption&gt;sync&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;性能优化&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;partition 并发&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;顺序读写磁盘&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;page cache：按页读写&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;预读：Kafka 会将将要消费的消息提前读入内存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高性能序列化（二进制）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内存映射&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无锁 offset 管理：提高并发能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Java NIO 模型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;批量：批量读写&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;压缩：消息压缩，存储压缩，减小网络和 IO 开销&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Partition 并发&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一方面，由于不同 Partition 可位于不同机器，因此可以充分利用集群优势，实现机器间的并行处理。另一方面，由于 Partition 在物理上对应一个文件夹，即使多个 Partition 位于同一个节点，也可通过配置让同一节点上的不同 Partition 置于不同的 disk drive 上，从而实现磁盘间的并行处理，充分发挥多磁盘的优势。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;顺序读写&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 每一个 partition 目录下的文件被平均切割成大小相等（默认一个文件是 500 兆，可以手动去设置）的数据文件，
每一个数据文件都被称为一个段（segment file）, 每个 segment 都采用 append 的方式追加数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0353697749196142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eaQDxVPnMSlUZLVNsvvGuzeoaAiaicyw9Xkia4AGdY8Ft5YH2wXBzCKZ4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;311&quot;/&gt;&lt;figcaption&gt;追加数据&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;答案关键字&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka 如何保证高可用？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;通过副本来保证数据的高可用，producer ack、重试、自动 Leader 选举，Consumer 自平衡&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka 的交付语义？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;交付语义一般有&lt;code&gt;at least once&lt;/code&gt;、&lt;code&gt;at most once&lt;/code&gt;和&lt;code&gt;exactly once&lt;/code&gt;。kafka 通过 ack 的配置来实现前两种。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Replic 的作用？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;实现数据的高可用&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;什么是 AR，ISR？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;AR：Assigned Replicas。AR 是主题被创建后，分区创建时被分配的副本集合，副本个 数由副本因子决定。ISR：In-Sync Replicas。Kafka 中特别重要的概念，指代的是 AR 中那些与 Leader 保 持同步的副本集合。在 AR 中的副本可能不在 ISR 中，但 Leader 副本天然就包含在 ISR 中。关于 ISR，还有一个常见的面试题目是如何判断副本是否应该属于 ISR。目前的判断 依据是：Follower 副本的 LEO 落后 Leader LEO 的时间，是否超过了 Broker 端参数 replica.lag.time.max.ms 值。如果超过了，副本就会被从 ISR 中移除。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Leader 和 Flower 是什么？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka 中的 HW 代表什么？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;高水位值 (High watermark)。这是控制消费者可读取消息范围的重要字段。一 个普通消费者只能“看到”Leader 副本上介于 Log Start Offset 和 HW（不含）之间的 所有消息。水位以上的消息是对消费者不可见的。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka 为保证优越的性能做了哪些处理？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;partition 并发、顺序读写磁盘、page cache 压缩、高性能序列化（二进制）、内存映射 无锁 offset 管理、Java NIO 模型&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文并没有深入 Kafka 的实现细节和源码分析，但 Kafka 确实是一个 优秀的开源系统，很多优雅的架构设计和源码设计都值得我们学习，十分建议感兴趣的同学更加深入的去了解一下这个开源系统，对于自身架构设计能力，编码能力，性能优化都会有很大的帮助。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;推荐阅读&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下几篇文章阅读量与读者反馈都很好，推荐大家阅读：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.33150851581508517&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FbXJ7UCc6O1oicl7z78fR9ibRGPNMBfV0eepXxQmWYEweQTiamFFiaiao4ZAwVOsM3iaDWTF9ef7olpUnt6hm9kLb7Ew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1644&quot;/&gt;&lt;figcaption&gt;MageByte&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6642ca837fc2b78b66ee145708d354a9</guid>
<title>[译] Go 运行时调度器处理系统调用的巧妙方式</title>
<link>https://toutiao.io/k/xlv9j2n</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section&gt;&lt;span&gt;点击上方蓝色“&lt;/span&gt;&lt;span&gt;Go语言中文网&lt;/span&gt;&lt;span&gt;”关注，&lt;/span&gt;&lt;span&gt;回复「&lt;span&gt;电子书&lt;/span&gt;」领全套Go资料&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;goroutine&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 是 Go 的一个标志性特点，是被 Go 运行时所管理的轻量线程。Go 运行时使用&lt;span&gt;一个 M:N 工作窃取调度器&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;实现 goroutine，将 Goroutine 复用在操作系统线程上。调度器有着特殊的术语用来描述三个重要的实体；G 是 goroutine，M 是 OS 线程（一个“机器 machine”），P 是“处理器（processor）”，它的核心是有限的资源，而 M 需要这些资源来运行 Go 代码。限制 P 的供应是 Go 用来限制一次执行多少操作以避免整个系统超载的手段。通常来说，每个 OS 所报告的实际的 CPU 有一个对应的 P （P 的数量是 &lt;span&gt;GOMAXPROCS&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当 Goroutine 执行 网络 IO 或者任何觉得可以异步完成的系统调用操作时，Go 有一个完整的运行时子系统，&lt;span&gt;netpoller&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;，（使用类似 &lt;span&gt;epoll&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; 的系统调用机制）将看起来像多个单独的同步操作转换为一个单独的等待。goroutine 并没有真正进行阻塞的系统调用，而是像等待一个 channel 就绪那样进入休眠状态等待其网络套接字。如果很难有效地实现，概念上讲这些都是直白的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论如何，网络 IO 以及类似的东西远不是 Go 程序可以处理的唯一的系统调用，因此 Go 也必须处理阻塞的系统调用。对 Goroutine 的 M 来说，处理阻塞的系统调用的直接方式是在系统调用前释放 P ，并且在系统调用恢复后尝试重新获取 P 。如果那时候没有空闲的 P ，goroutine 会随着其他等待运行的任务被停放在调度器中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然理论上所有的系统调用都是阻塞的，在实践中不是所有的调用都会阻塞。例如，在现代系统中，获取当前时间的“系统调用”可能甚至没有进入内核（见 Linux 的 &lt;span&gt;vdso(7)&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;）。让 Goroutine 完成释放他们当前的 P 的全部工作再为了这些系统调用重新获取一个 P 有两个问题：首先，所有涉及到的数据结构的锁定（和释放）有着很大的开销。其次，如果可运行的 Goroutine 比 P 多，进行这类系统调用的 Goroutine 无法重新获取 P 并且不得不把自己停放；释放 P 的瞬间，其他 Goroutine 就会被调度到上面。这是额外的运行时开销，有点不公平，并且不利于进行快速系统调度的目的（尤其是那些不进入内核的调用）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 Go 运行时和调度器实际上有两种处理阻塞系统调用的方法，一种悲观方式，应用于预计会很慢的系统调用；另一种乐观方式，应用于预计会很快的系统调用。悲观的系统调用路径实现了直接的方法，运行时在系统调用前主动释放 P，之后尝试将 P 找回来，如果无法获取则停放自身。乐观的系统调用路径不会释放 P，相反，会设置一个特殊的 P 的状态标识并继续进行系统调用。一个特殊的内部 goroutine，sysmon goroutine，定期执行并寻找设置了这个“进行系统调用中”状态的时间太长了的 P，并将 P 从进行系统调用的 Goroutine 那里偷走。当系统调用返回，运行时代码检查它的 P 是否被偷走，如果没有则继续执行（如果 P 被偷走了的话，运行时会尝试获取其他的 P，如果失败可能会停放 goroutine）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一切顺利，乐观的系统调用路径有着非常低的开销（大多数情况下，需要几个&lt;span&gt;原子比较和交换&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;操作）。如果不顺利并且可运行的 Goroutine 的数量比 P 多，一个 P 会有不必要的空闲，通常可能是数十微秒（sysmon Goroutine 最多每 20 微秒运行一次，但如果似乎没有必要的话可以减少运行频率）。可能存在着最坏的情况，但是一般来说，在 Go 运行时方面这是一个值得的抉择。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;via: https://utcc.utoronto.ca/~cks/space/blog/programming/GoSchedulerAndSyscalls&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：&lt;span&gt;ChrisSiebenmann&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;译者：&lt;span&gt;dust347&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;校对：&lt;span&gt;JYSDeveloper&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文由 &lt;span&gt;GCTT&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt; 原创编译，&lt;span&gt;Go 中文网&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt; 荣誉推出&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;goroutine: &lt;em&gt;https://tour.golang.org/concurrency/1&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;一个 M:N 工作窃取调度器: &lt;em&gt;https://rakyll.org/scheduler/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;GOMAXPROCS: &lt;em&gt;https://golang.org/pkg/runtime/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;netpoller: &lt;em&gt;https://morsmachine.dk/netpoller&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;epoll: &lt;em&gt;https://medium.com/@copyconstruct/the-method-to-epolls-madness-d9d2d6378642&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;vdso(7): &lt;em&gt;http://man7.org/linux/man-pages/man7/vdso.7.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;原子比较和交换: &lt;em&gt;https://en.wikipedia.org/wiki/Compare-and-swap&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;ChrisSiebenmann: &lt;em&gt;https://twitter.com/thatcks/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;dust347: &lt;em&gt;https://github.com/dust347&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;JYSDeveloper: &lt;em&gt;https://github.com/JYSDeveloper&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;GCTT: &lt;em&gt;https://github.com/studygolang/GCTT&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;Go 中文网: &lt;em&gt;https://studygolang.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span&gt;&lt;strong&gt;福利&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span&gt;我为大家整理了一份从入门到进阶的&lt;span&gt;Go&lt;/span&gt;学习资料礼包（下图只是部分），同时还包含学习建议：入门看什么，进阶看什么。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.4705882352941178&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UWba2ryLMql12OsAtoHPdsdIbzXA90Pz2xxQUaNJhp4FLyicaC0Wc46u3SXWKthtaHzj1bon1EfNeO7HNcc3Gxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;374&quot;/&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span&gt;关注公众号 「polarisxu」，回复 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;ebook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 获取；还可以回复「&lt;strong&gt;进群&lt;/strong&gt;」，和数万 Gopher 交流学习。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.31875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UWba2ryLMql12OsAtoHPdsdIbzXA90PzrclP8f0Uh0cQ2CWGLZaCrxsPmlTXOFgfQ7bAMXu86LlefeqzTGD8eA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d11cfe031bd97f30e2ccee9b3df35086</guid>
<title>Golang 使用 Chromedp 绕过反爬抓取微信公众号文章</title>
<link>https://toutiao.io/k/03bgw3v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;card-body markdown markdown-toc&quot;&gt;
        
        &lt;h2 id=&quot;Golang使用Chromedp绕过反爬抓取微信公众号文章&quot;&gt;Golang 使用 Chromedp 绕过反爬抓取微信公众号文章&lt;/h2&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近准备爬取一些资讯类技术类文章来做一个信息的聚合。但是呢爬取某些网站的时候会遇到一些反爬策略，很是令人头疼。这里拿利用搜狗搜索爬取微信公众号来举个栗子。这里利用&lt;a href=&quot;https://weixin.sogou.com/weixin?type=1&amp;amp;s_from=input&amp;amp;query=%E8%85%BE%E8%AE%AF%E7%8E%84%E6%AD%A6%E5%AE%9E%E9%AA%8C%E5%AE%A4&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;&quot;&gt;https://weixin.sogou.com/weixin?type=1&amp;amp;s_from=input&amp;amp;query=%E8%85%BE%E8%AE%AF%E7%8E%84%E6%AD%A6%E5%AE%9E%E9%AA%8C%E5%AE%A4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个链接来爬取微信公众号腾讯玄武实验室。按照往常一样，我们会打开浏览器 f12 来审查元素。定位到最近文章的链接如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.gocn.vip/photo/2020/01a8a9e3-9601-4427-ac89-b702b3dc829c.png?x-oss-process=image/resize,w_1920&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;但是我们拿着这个链接用 postman 访问的时候，得到的并不是我们想要的文章详情页，而是一段 js 代码，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.gocn.vip/photo/2020/b51a988b-86ca-4331-a09f-cb8c661bfd27.png?x-oss-process=image/resize,w_1920&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当然你也可以在代码中去执行这段 js 代码得到新的链接，不过你还要去获取前一个页面得到的 cookie，不然就会触发搜狗的验证码验证,这样操作就比较复杂了，所以我们可以采用无头浏览器来解决反爬问题。在 golang 中使用无头浏览器 headless chrome，就需要 chromedp 这个开源库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.gocn.vip/photo/2020/0c9fe7fa-1881-474a-b9c5-e0b7f18d2540.png?x-oss-process=image/resize,w_1920&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;chromedp介绍&quot;&gt;chromedp 介绍&lt;/h2&gt;


&lt;p&gt;chromedp GitHub 开源地址：&lt;a href=&quot;https://github.com/chromedp/chromedp&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/chromedp/chromedp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;chromedp 官方介绍：chromedp 是一种更快，更简单的方法，可以在 Go 中驱动支持&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;&quot;&gt;Chrome DevTools 协议的&lt;/a&gt;浏览器 而无需外部依赖（例如 Selenium 或 PhantomJS）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h5 id=&quot;chromedp能做什么&quot;&gt;chromedp 能做什么&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;解决反爬虫问题&lt;/li&gt;
&lt;li&gt;网站自动化测试&lt;/li&gt;
&lt;li&gt;网页截图&lt;/li&gt;
&lt;li&gt;解决类似 VueJS 和 SPA 之类的渲染&lt;/li&gt;
&lt;li&gt;模拟点击事件 (刷点击量)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;chromedp的使用&quot;&gt;chromedp 的使用&lt;/h5&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;chromedp 安装&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go get -u github.com/chromedp/chromedp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;chromedp 如何使用官方已经给了很详细的文档了，而且还给了很多示例代码。&lt;/p&gt;

&lt;p&gt;GoDoc: &lt;a href=&quot;https://godoc.org/github.com/chromedp/chromedp&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://godoc.org/github.com/chromedp/chromedp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Examples: &lt;a href=&quot;https://github.com/chromedp/examples&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/chromedp/examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里先给出一个 google 搜索网页截图的 demo:&lt;/strong&gt;&lt;/p&gt;
 &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;context&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;

   &lt;span class=&quot;s&quot;&gt;&quot;github.com/chromedp/chromedp&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;// 参数设置&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecAllocatorOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;headless&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserAgent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultExecAllocatorOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;allocCtx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewExecAllocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

   &lt;span class=&quot;c&quot;&gt;// 创建chrome示例&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocCtx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c&quot;&gt;// 打开导航&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Navigate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://google.com/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;c&quot;&gt;// 等待元素加载完成&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WaitVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;c&quot;&gt;// 输入chromedp&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`.gLFyf.gsfi`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;chromedp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NodeVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;c&quot;&gt;// 打印输入框的值&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`.gLFyf.gsfi`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;c&quot;&gt;// 提交&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.gLFyf.gsfi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;c&quot;&gt;// 截图&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CaptureScreenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fullScreenshot.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0644&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;运行得到的截图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.gocn.vip/photo/2020/a15a857d-1e0b-47fe-b72b-d6a77da44342.png?x-oss-process=image/resize,w_1920&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用的基本步骤介绍：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;参数配置&lt;/p&gt;
 &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// 参数配置&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecAllocatorOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;headless&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 是否打开浏览器调试&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserAgent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;// 设置UserAgent&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProxyServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;socks5://127.0.0.1:9050&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 设置代理&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultExecAllocatorOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;allocCtx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewExecAllocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;默认的参数配置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.gocn.vip/photo/2020/2688a143-557c-4c79-91a4-612d84b1193d.png?x-oss-process=image/resize,w_1920&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建 chrome 实例&lt;/p&gt;
 &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// 创建chrome实例&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocCtx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;// 设置超时时间&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行&lt;/p&gt;
 &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;// 打开导航&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Navigate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;// 等待元素加载完成&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WaitVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;// 延迟2秒&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;// 点击事件&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`a[uigs=&quot;account_article_0&quot;]`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NodeVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;// 获取html&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OuterHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[scrapeNewArticle] chromedp Run fail,err: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt;
&lt;p&gt;注：元素选择器不熟悉的可以参考&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;你也可以在 console 里验证是否选中元素，如下：
&lt;img src=&quot;https://static.gocn.vip/photo/2020/61bd64f3-1aaa-47cb-b3f4-b8f383b0c93b.png?x-oss-process=image/resize,w_1920&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Run 函数第二个参数是 action 切片，一些常用的 action 还有如下几个：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sendkeys 往输入框中输入值,比如我们在 google 搜索 chromedp 就可以这样写&lt;/li&gt;
&lt;/ul&gt;
 &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// 输入chromedp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`.gLFyf.gsfi`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;chromedp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NodeVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 打印输入框的值&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`.gLFyf.gsfi`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 提交&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.gLFyf.gsfi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 

 &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NodeVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 

 &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// 获取cookie&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAllCookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;; &quot;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;其它一些 action 以及 action 的详细介绍可以查看官方文档。&lt;/p&gt;
&lt;h2 id=&quot;微信公众号爬取&quot;&gt;微信公众号爬取&lt;/h2&gt;
&lt;p&gt;首先点击第一个页面的&lt;code&gt;每日安全动态推送(09-15)&lt;/code&gt;进行跳转，并且打开第二个 tab 页，也就是文章详情页。&lt;/p&gt;
 &lt;pre class=&quot;highlight plaintext&quot;&gt;&lt;code&gt;var body string
if err := chromedp.Run(ctx,
   chromedp.Tasks{
      // 打开导航
      chromedp.Navigate(_url),
      // 等待元素加载完成
      chromedp.WaitVisible(&quot;body&quot;),
      // 延迟2秒
      chromedp.Sleep(2 * time.Second),
      // 点击事件
      chromedp.Click(`a[uigs=&quot;account_article_0&quot;]`, chromedp.NodeVisible),
      chromedp.Sleep(3 * time.Second),
      // 获取html
      chromedp.OuterHTML(&quot;html&quot;, &amp;amp;body, chromedp.ByQuery),
   },
); err != nil {
   log.Printf(&quot;[scrapeNewArticle] chromedp Run fail,err: %s&quot;, err.Error())
   return
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;当使用搜狗搜索爬取腾讯玄武实验实的时候会遇到一个问题，问题就是我们会打开两个 tab 页，而且我们要的数据是在第二 tab 页中。所以我们需要创建第二个 tab 页的实例，具体解决办法如下，分为两步，第一步我们通过 ListenTarget 监听得到第二个 tab 页的 target ID，然后第二步拿着这个 target ID 创建新的 chrome 实例，在这个新的实例下执行任务，就可以获取到我们想要的 html 元素。&lt;/p&gt;
 &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// 监听得到第二个tab页的target ID&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventTargetCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;// if OpenerID == &quot;&quot;, this is the first tab.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TargetInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpenerID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TargetInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TargetID&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;  &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// 第二个tab页&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;newCtx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithTargetID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;获取文章详情页的 html。&lt;/p&gt;
 &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;newCtx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OuterHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#js_content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chromedp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[scrapeNewArticle] chromedp Run fail,err: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;获取到文章列表的 html 之后，我们就可以使用正则去得到文章，正则如下，一个是链接的正则，一个是文章标题的正则。&lt;/p&gt;
 &lt;pre class=&quot;highlight go&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_linkReg&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`&amp;lt;p style=&quot;text-align: left;&quot;&amp;gt;&amp;lt;span style=&quot;font-size: 16px;&quot;&amp;gt;•&amp;amp;nbsp;&amp;lt;span style=&quot; box-sizing: border-box; width: 100%;padding-right: 5px;padding-left: 5px;flex-basis: 0px;flex-grow: 1;max-width: 100%; &quot;&amp;gt;.+?&amp;lt;a href=&quot;.+?&quot; rel=&quot;nofollow&quot; style=&quot;box-sizing: border-box;color: rgb\(0, 123, 255\);&quot; data-linktype=&quot;2&quot;&amp;gt;&amp;lt;br style=&quot;box-sizing: border-box;&quot;&amp;gt;(.+?)&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_titleReg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`&amp;lt;p style=&quot;box-sizing: border-box;margin-top: 0\.25rem !important;margin-bottom: 0\.25rem !important;text-align: left;&quot;&amp;gt;&amp;lt;small style=&quot;box-sizing: border-box;font-size: 12\.8px;&quot;&amp;gt;&amp;lt;span style=&quot;font-size: 16px;&quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;・&amp;lt;/span&amp;gt;&amp;lt;/small&amp;gt;&amp;lt;span style=&quot;font-size: 16px;&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;q style=&quot;box-sizing: border-box;&quot;&amp;gt;&amp;lt;span style=&quot;font-size: 16px;&quot;&amp;gt;(.+?)&amp;lt;/span&amp;gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;执行结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.gocn.vip/photo/2020/d8ba878d-4e17-4171-97bd-c158b6ca1357.png?x-oss-process=image/resize,w_1920&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;完整代码 github 地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wxj95/chromedpdemo&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/wxj95/chromedpdemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;我们可以使用无头浏览器来绕过一些 js 和 cookie 的反爬。这里不建议太频繁的去抓取文章，因为这样就很有可能触发搜狗的反爬机制，你可能会遇到需要输入验证码的情况，不过你也可以训练搜狗的验证码做个验证码的识别，毕竟我们也是可以使用无头浏览器进行模拟输入点击的。&lt;img title=&quot;:sweat_smile:&quot; alt=&quot;😅&quot; src=&quot;https://twemoji.ruby-china.com/2/svg/1f605.svg&quot; class=&quot;twemoji&quot;/&gt; &lt;/p&gt;
        &lt;div class=&quot;card&quot;&gt;&amp;#13;
  &lt;p class=&quot;card-header&quot;&gt;更多原创文章干货分享，请关注公众号&lt;/p&gt;&amp;#13;
  &lt;ul class=&quot;list-group list-group-flush&quot;&gt;&amp;#13;
    &lt;li class=&quot;list-group-item&quot;&gt;&lt;img src=&quot;/uploads/gopherchina.jpg&quot;/&gt;&lt;/li&gt;&amp;#13;
    &lt;li class=&quot;list-group-item&quot;&gt;加微信实战群请加微信(注明:实战群)：gocnio&lt;/li&gt;&amp;#13;
  &lt;/ul&gt;&amp;#13;
&lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2478693afb28329bc73ebac934d49684</guid>
<title>开始使用 Flutter 构建 Windows 桌面应用吧</title>
<link>https://toutiao.io/k/d0x7t26</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.425531914893617&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gQOwib4zALd2GJvWuMxibFCL1lPJ0r6og9ic0XuX0vCLdZOjFEia5l0UhAzxiafY1cz5AcyFz2mLgLnDem5R4bLIEHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1457&quot; data-backw=&quot;578&quot; data-backh=&quot;246&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;作者 / Chris Sells, Product Manager, Flutter developer experience&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们的使命是为开发者提供一个开源的高效框架，帮助他们在任何平台上构建美观的原生应用。截至目前，我们已经为 Android 和 iOS 带来了生产级别的支持，发布了 8 个稳定版本，仅在 Google Play 商店中就有超过 10 万款应用使用 &lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;amp;album_id=1339408980472561665&amp;amp;__biz=MzAwODY4OTk2Mg==#wechat_redirect&quot; textvalue=&quot;Flutter&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Flutter&lt;/a&gt;&lt;/span&gt;&lt;span&gt;。我们在继续努力，将支持范围扩展至 web、macOS 和 Linux 等其他平台。如今，Flutter 的另一个目标，即支持 Windows 的 Flutter Alpha 版本已经发布。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Windows 仍然是台式机和笔记本电脑设备的热门选择，据 Microsoft 报告称，&lt;/span&gt;&lt;span&gt;Windows 10 的活跃设备数量超过 10 亿台&lt;/span&gt;&lt;span&gt;。我们的统计数据显示，超过一半的 Flutter 开发者使用 Windows，自然 Flutter 应该支持该系统。原生桌面支持为 Flutter 提供了各种可能性，着实令人感到兴奋，其中包括开发工具的改进和新用户负担的降低，当然，还可以让开发者能通过单个代码库为用户可能拥有的任何设备打造应用。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Windows 10: 驱动全球 10 亿月活跃设备&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://blogs.windows.com/windowsexperience/2020/03/16/windows-10-powering-the-world-with-1-billion-monthly-active-devices/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;将 Windows 支持添加至 Flutter&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;正如我们在&lt;/span&gt;&lt;span&gt;架构概览&lt;/span&gt;&lt;span&gt;中所说的那样，Flutter 是一个跨平台界面工具包，旨在实现不同操作系统 (如 iOS 和 Android) 之间的代码重用，同时让应用可以直接与底层平台服务对接。我们的目标是让开发者能够交付高性能且在不同平台上都能自然流畅运行的应用，在尽可能共享代码的同时，包容不同平台间存在的差异。Flutter 的核心是引擎，用于支持必要的原语，为所有 Flutter 应用提供支持。每当需要绘制新的帧时，引擎负责对合成场景进行栅格化。引擎提供了 Flutter 核心 API 的底层实现，包括图形、文本布局、文件和网络 I/O、无障碍功能支持、插件架构以及 Dart 运行时和编译工具链。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;架构概览&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://flutter.cn/docs/resources/architectural-overview&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每当我们将新的目标平台添加到 Flutter，我们都会用新服务对核心框架进行扩展，使其能够在该平台上良好运行。我们先在 Android 和 iOS 上实现了 Material Design，以及适用于移动设备的触控界面，以便在这两个移动平台上实现像素级完美的体验。在 web、Windows、macOS 和 Linux 这些桌面环境中，Flutter 也提供了一整套全新的服务，包括对键盘、鼠标、滚轮和控制器等输入方式的强大支持，以及能适配这些平台的 widget (有些 widget 甚至在 web 和桌面应用的大屏幕上工作得更好)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;此外，每个新平台不仅会影响 Flutter 的框架和引擎，还会影响许多其他方面:&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;工具链更新&lt;/strong&gt;: 为 CLI 和 IDE 工具添加新目标平台（例如本文中的 Windows）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Shell&lt;/strong&gt;: 支持通过 &lt;span&gt;WM_*&lt;/span&gt; 消息处理来自 Windows 的输入，并通过 &lt;/span&gt;&lt;span&gt;ANGLE&lt;/span&gt;&lt;span&gt; 实现输出，ANGLE 使用 &lt;/span&gt;&lt;span&gt;Skia&lt;/span&gt;&lt;span&gt; 以原生速度渲染至底层的 DirectX 接口&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Runner&lt;/strong&gt;: 每个项目都会通过一个容器应用运行在目标平台上。对于 Windows，该容器应用是一个 Win32/C++ 程序，可以加载您的 Flutter 代码并在运行时执行。如果您需要，可以在这里为应用添加原生代码。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;插件&lt;/strong&gt;: 插件是其自身所支持的每个平台的 Dart 代码和原生代码的集合。原生代码需要添加至每个插件中，而这些插件会被编译到您的 Windows 版 Flutter 应用中。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;ANGLE&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://opensource.google/projects/angle&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Skia&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://skia.org/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本次发布的 alpha 版本为我们未来几个月的工作打下了坚实的基础。凭借对 Windows 7 和更高版本的支持，我们希望它能给喜欢尝鲜的开发者提供一个出发点。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;示例应用介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;要实际了解 Flutter 对 Windows 的支持，可以查看我们创建的一些示例应用，这些应用通过我们新增的支持，在 Windows 上运行良好。第一个示例是 Flokk 应用，它是我们与 &lt;/span&gt;&lt;span&gt;gskinner.com&lt;/span&gt;&lt;span&gt; 的设计师和开发者合作的成果。我们旨在通过创建一个富有创意且美观的 Flutter 桌面应用，表明 Flutter 已经为桌面做好准备。Flokk 这款应用可以使用您的真实 Google Contacts 数据，并显示您的联系人在 GitHub 和 Twitter 上的活动。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5626406601650412&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gQOwib4zALd2GJvWuMxibFCL1lPJ0r6og9Ugl2EJ68KwxkAcyE9tPTqFiaTc14iaNNiczibImW3YIxMS3hk5l21bLcog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1333&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;您如果想在自己的 Windows 设备上使用 Flokk 应用，可以在 GitHub 上&lt;span&gt;下载最新版本&lt;/span&gt;。如果您想了解 gskinner 是如何开发这款应用的，可以看看他们的博文: &lt;span&gt;Flokk - 我们如何使用 Flutter 构建桌面应用&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;下载 Flokk&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://github.com/gskinnerTeam/Flokk/releases&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Flokk - 我们如何使用 Flutter 构建桌面应用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://blog.gskinner.com/archives/2020/09/flokk---how-we-built-a-desktop-app-using-flutter.html&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;此外，我们的示例应用 Flutter Gallery 可以为您展示 Flutter 的各个方面，这款应用最近进行了完全重写，以增加对桌面设备的支持。因此，我们能够确保其在 &lt;span&gt;web&lt;/span&gt;、Windows、macOS 和 Linux 上运行良好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Flutter Gallery (web 版)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://gallery.flutter.cn/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8413719185423365&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gQOwib4zALd2GJvWuMxibFCL1lPJ0r6og99ZvCC8wQ13oQb2euiaJXXoheAOiaClmL7jAx9cvwn2DQVecfHvPf1ia6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;933&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Flutter Gallery 中的许多案例代表了不同理念的应用风格，我们推荐您在使用 Flutter 设计自己的 Windows 应用时进行参考。如果感兴趣，您可以&lt;span&gt;在 GitHub 上找到源代码&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;源代码地址&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://github.com/flutter/gallery&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;开始使用 Flutter for Windows&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;请先按照 &lt;/span&gt;&lt;span&gt;Windows 安装说明&lt;/span&gt;&lt;span&gt;开始安装 Flutter SDK。要以 Windows 桌面设备为目标，您首先需要&lt;/span&gt;&lt;span&gt;安装桌面文档中所述的工具&lt;/span&gt;&lt;span&gt;。默认情况下，Flutter 假定您正在构建正式版软件，并且没有为开发 Windows 应用而进行配置。不过，这很容易通过命令行解决:&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ flutter channel dev&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ flutter upgrade&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ flutter config --enable-windows-desktop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在 Windows 系统上安装和配置 Flutter 开发环境&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://flutter.cn/docs/get-started/install/windows&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;桌面文档中所述的工具&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://flutter.cn/desktop#additional-windows-requirements&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;第一个命令将 Flutter 设置为使用实验性 &quot;dev&quot; 渠道 (而不是默认的 &quot;stable&quot; 渠道)。这样您就可以使用仍在 alpha 阶段的平台支持，例如 Windows。第二个命令可以获取该渠道上的最新版本。第三个命令使您可以在 PC 上开发 Windows 应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;完成这些设置后，每次您通过 &lt;/span&gt;&lt;span&gt;Android Studio&lt;/span&gt;&lt;span&gt; 或 &lt;/span&gt;&lt;span&gt;Visual Studio Code&lt;/span&gt;&lt;span&gt; 扩展程序，或者通过命令行创建新的 Flutter 应用时，都会创建一个 Windows 子文件夹。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Android Studio&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://flutter.cn/docs/get-started/editor?tab=androidstudio&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Visual Studio Code&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://flutter.cn/docs/get-started/editor?tab=vscode&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8896034297963559&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gQOwib4zALd2GJvWuMxibFCL1lPJ0r6og9lNibD6BjbOUIia1lDH9jxZYHnRuqibVG0gSSa6U2JxblcvkZofFaGBwbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;933&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果您感到好奇，请在 Windows 上运行默认应用，如下所示:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7088305489260143&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gQOwib4zALd2GJvWuMxibFCL1lPJ0r6og9cY6UmRVsjmu99ZX8LfcWOFrvMzsYS0TXujI3ywcYl8yuPyic7PnM5YQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;838&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在您创建好应用后，构建该应用会生成一个发布模式的原生 EXE 文件以及必要的支持 DLL。如果您想在任何尚未安装 Flutter 的 Windows 10 设备上运行这个新的 Windows 应用，可以按照&lt;/span&gt;&lt;span&gt;这里&lt;/span&gt;&lt;span&gt;的说明压缩打包必要的文件。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在桌面环境分发应用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://flutter.cn/desktop#distribution&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Windows 插件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;尽管目前 Windows 支持还是 alpha 版本，但是 Flutter 的社区成员们已经在着手开发 Windows 插件了。包括:&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;url_launcher&lt;/span&gt;: 从您的应用中启动浏览器并打开给定的 URL&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://pub.flutter-io.cn/packages/url_launcher&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;path_provider&lt;/span&gt;: 提供用户设备上特殊目录的路径，如 Documents 和 temp&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://pub.flutter-io.cn/packages/path_provider&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;shared_preferences&lt;/span&gt;: 将用户偏好设置序列化到磁盘上，从而在您的应用会话之间共享&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://pub.flutter-io.cn/packages/shared_preferences&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;biometric_storage&lt;/span&gt;: 由生物特征加密的存储&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://pub.flutter-io.cn/packages/biometric_storage&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;flutter_audio_desktop&lt;/span&gt;: 在桌面应用中播放音频&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;https://pub.flutter-io.cn/packages/flutter_audio_desktop&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用这些插件的好处是，其中大多数还支持其他 Flutter 平台，这样您就可以将自己的应用适配至 Android、iOS、web、Windows 等平台。此外，尽管在 &lt;/span&gt;&lt;span&gt;pub.dev&lt;/span&gt;&lt;span&gt; (Dart 和 Flutter 的 package 管理平台) 上，大约三分之一的 package 是包含平台特定代码的插件，但大多数插件并非如此。例如，&lt;/span&gt;&lt;span&gt;许多最高质量和最常用的 package&lt;/span&gt;&lt;span&gt; 位列 Flutter Favorite 计划清单，其中大多数可以在 Windows 上运行。您如果想查看可在 Windows 上运行的 package 的完整列表，可以在 pub.dev 上&lt;/span&gt;&lt;span&gt;查询&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Flutter Favorite&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://pub.flutter-io.cn/flutter/favorites&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;适用于 Windows 平台的 package&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://pub.flutter-io.cn/flutter/packages?platform=windows&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;与 Windows 互操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;您也可以构建自己的 Windows 插件。当您位于 dev 渠道并为设备启用了 Windows 开发功能后，可以使用以下命令:&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ flutter &lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;此时，您能够将自己的 Flutter 代码添加到 lib 子文件夹中，并将 Windows 代码添加到插件项目的 Windows 子文件夹中。您将使用 &lt;/span&gt;&lt;span&gt;Platform Channels&lt;/span&gt;&lt;span&gt; (平台通道) 在两个堆栈之间进行通信，本质上就是 Dart 与 C++ 代码之间的消息传递。有关这个话题的最佳示例，请参阅 &lt;/span&gt;&lt;span&gt;url_launcher 的实现&lt;/span&gt;&lt;span&gt;。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;但是，平台通道不是您与 Windows 互操作的唯一选择。您还可以使用 &lt;span&gt;Dart FFI&lt;/span&gt; (外部函数接口) 来加载库，并调用 C 样式的 API，例如 Win32 API。正如您在 &lt;span&gt;GitHub repo&lt;/span&gt; 中看到的那样，path_provider 插件使用 FFI 实现，这与使用平台通道的 url_launcher 有所不同。FFI 不需要在 Dart 与 C++ 之间来回切换，而是允许您编写代码来直接导入您想要的 API。例如，下面是调用 MessageBox API 的代码:&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;typedef MessageBoxNative = &lt;span class=&quot;code-snippet__function&quot;&gt;Int32 &lt;span class=&quot;code-snippet__title&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    IntPtr hWnd,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Pointer&amp;lt;Utf16&amp;gt; lpText,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Pointer&amp;lt;Utf16&amp;gt; lpCaption,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Int32 uType&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;typedef MessageBoxDart = &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; hWnd,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Pointer&amp;lt;Utf16&amp;gt; lpText,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Pointer&amp;lt;Utf16&amp;gt; lpCaption,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; uType&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; user32 = DynamicLibrary.open(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;user32.dll&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; win32MessageBox =  user32.lookupFunction&amp;lt;MessageBoxNative, MessageBoxDart&amp;gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;MessageBoxW&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;showMessageBox&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String message, String caption)&lt;/span&gt; &lt;/span&gt;=&amp;gt;  win32MessageBox(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Utf16.toUtf16(message), &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Utf16.toUtf16(caption), &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;showMessageBox(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Test Message&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Window Caption&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 dart:ffi 调用原生代码&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://flutter.cn/docs/development/platform-integration/c-interop&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;path_provider (Windows 版)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://github.com/flutter/plugins/tree/master/packages/path_provider/path_provider_windows&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段代码不存在平台通道那样在两个线程之间转换的问题。FFI 包括对许多不同种类 API 的支持，包括 Win32、WinRT 和 COM。但先别急着自己去封装基于 C 的整个 Windows API，请去看看 &lt;/span&gt;&lt;span&gt;win32 插件&lt;/span&gt;&lt;span&gt;，它已经在做这件事情了，而且做得很好。事实上，&lt;/span&gt;&lt;span&gt;path_provider&lt;/span&gt;&lt;span&gt; 插件本身就是使用 win32 插件来实现的。有关 win32 插件的开发过程及工作原理，请阅读《&lt;/span&gt;&lt;span&gt;使用 Dart FFI 提升 Windows 开发乐趣&lt;/span&gt;&lt;span&gt;》。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Win32 插件&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://pub.flutter-io.cn/packages/win32&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;path_provider&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://pub.flutter-io.cn/packages/path_provider&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 Dart FFI 提升 Windows 开发乐趣&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://medium.com/@timsneath/windows-fun-with-dart-ffi-687c4619e78d&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Flutter for Windows 的资源&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;无论您处于 Flutter for Windows 历程的哪个阶段，都应该阅读 flutter.dev 上的&lt;/span&gt;&lt;span&gt;桌面端开发文档&lt;/span&gt;&lt;span&gt;，其中包括最新的详细信息。此外，您还可以通过 &lt;/span&gt;&lt;span&gt;codelab&lt;/span&gt;&lt;span&gt; 熟悉编写 Windows、macOS 和 Windows 的桌面 Flutter 应用，其中包括使用 OAuth 进行身份验证、访问 GitHub API 和使用 GraphQL 等真实场景的代码。或者查看另外一个可在 Windows 上运行的 Flutter 桌面代码示例 &lt;/span&gt;&lt;span&gt;Photo Search&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Flutter 桌面支持&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;http://flutter.cn/desktop&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Codelab&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://codelabs.developers.google.com/codelabs/flutter-github-graphql-client&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Photo Search&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://github.com/flutter/samples/tree/master/experimental/desktop_photo_search&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0159313725490196&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gQOwib4zALd2GJvWuMxibFCL1lPJ0r6og9To2s7jfBYib7Y6lVVE4kekhhwtHHrNG2YqP7dcF6jrCrP7WibeF5Lr8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;816&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Photo Search 使用标准的 Windows 文件打开对话框、树形视图 widget、拆分视图 widget，并使用真实的 REST API 呈现检索结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至于其他面向桌面的 widget，我们推荐菜单栏 (&lt;/span&gt;&lt;span&gt;menubar&lt;/span&gt;&lt;span&gt;) 插件、&lt;/span&gt;&lt;span&gt;NavigationRail&lt;/span&gt;&lt;span&gt; widget 和 &lt;/span&gt;&lt;span&gt;DataTable&lt;/span&gt;&lt;span&gt; widget。您还可能对 &lt;/span&gt;&lt;span&gt;InteractiveViewer&lt;/span&gt;&lt;span&gt; widget 感兴趣，它提供完整的桌面支持，可让您通过鼠标动作来平移和缩放其子 widget。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Menubar&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://github.com/google/flutter-desktop-embedding/tree/master/plugins/menubar&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;NavigationRail&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://api.flutter.cn/flutter/material/NavigationRail-class.html&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;DataTable&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://api.flutter.cn/flutter/material/DataTable-class.html&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;InteractiveViewer&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://api.flutter.cn/flutter/widgets/InteractiveViewer-class.html&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另一组相当有用的 widget &lt;/span&gt;&lt;span&gt;来自 SyncFusion&lt;/span&gt;&lt;span&gt;，他们在 Windows 开发社区中已经广为人知，并为创建图表、计量槽、数据网格等工作提供了大量企业级品质的 widget。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;SyncFusion widgets&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://pub.flutter-io.cn/publishers/syncfusion.com/packages&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7845659163987139&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gQOwib4zALd2GJvWuMxibFCL1lPJ0r6og9v8k3cibp06IhNYvXGQbGPvLQT7pXHZFVQwuhh5EGm70acMm1UWMRZiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;933&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些 widget 均有社区和企业使用许可，因此您可以放心寻找适合自己项目的工具。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Flutter for Windows 应用案例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;除了 Windows (以及广义上的 Flutter 桌面支持) package 和插件之外，Flutter 开发者也一直在构建用于 Windows 的优秀应用，比如 &lt;/span&gt;&lt;span&gt;Invoice Ninja&lt;/span&gt;&lt;span&gt; 的这一实验性作品:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5905680600214362&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gQOwib4zALd2GJvWuMxibFCL1lPJ0r6og9fnXFpzEqwbkkeAgm7ROau36nFXBTWwiaSrXC7jQ4sAxwafRy6FF7XHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;933&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Invoice Ninja 是一家提供收据软件的公司，Flutter 为其盈利带来了坚实的助力。他们的软件目前支持 Android 和 iOS 系统，并且&lt;/span&gt;&lt;span&gt;在 web 上提供产品演示&lt;/span&gt;&lt;span&gt;，为用户提供桌面版本已经在公司的计划之内。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;产品演示&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://demo.invoiceninja.com/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;151&quot; data-source-title=&quot;— Hillel Coren，Invoice Ninja 联合创始人&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;Invoice Ninja 过去一直疲于奔命，却只能为 web 和移动端提供支持，曾经一度维护着三个独立的代码库。借助 Flutter 以及最近的 Flutter Desktop，我们已经能够使用单个代码库为每个主流平台构建应用。我们几乎是零成本地获得了应用的桌面版本，而且其性能是所有版本中最好的！&lt;/p&gt;&lt;/section&gt;&lt;p class=&quot;blockquote_info js_blockquote_source&quot;&gt;— Hillel Coren，Invoice Ninja 联合创始人&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果您希望在移动和桌面设备上构建一个真实、可盈利的 Flutter 应用，可以&lt;span&gt;访问 GitHub 获取其源代码&lt;/span&gt;进行参考。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;GitHub: Invoice Ninja&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://github.com/invoiceninja/flutter-client&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Aartos &lt;/span&gt;&lt;span&gt;佳作颇多，实时无人机检测系统就是其中之一，他们&lt;span&gt;使用 Flutter 在多个平台上构建该系统的客户端软件&lt;/span&gt;。&lt;span&gt;这个视频&lt;/span&gt;是一个早期版本的 Windows 客户端，和其移动客户端同时运行。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Aartos&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://drone-detection-system.com/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;无人机检测系统客户端软件&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;https://drone-detection-system.com/aartos-dds/product-overview/&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Windows 端演示视频&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://www.bilibili.com/video/BV1p54y1R79t/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;iOS 和 Windows 两个版本共用完全相同的代码库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果您是一个有经验的 Flutter 开发者，您可能会发现自己需要在不同版本的 Flutter 之间来回切换: 例如一个版本用于发布正式版本的移动应用，另一个版本则用于试验 Windows alpha，那么您可能会喜欢 &lt;/span&gt;&lt;span&gt;Flutter Version Manager&lt;/span&gt;&lt;span&gt; (版本管理器)，它现在带有 Windows 图形用户界面，您可以在&lt;/span&gt;&lt;span&gt;这里&lt;/span&gt;&lt;span&gt;下载。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;此工具已开放源代码，您可以&lt;span&gt;亲自见证&lt;/span&gt; Leo 是怎样让它看起来如此出色的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;FVM&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://github.com/leoafarias/fvm&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;未来计划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;发布了 alpha 版之后，我们的注意力将转移到完善功能集和稳定产品上来。作为一个开源项目，您可以在 &lt;/span&gt;&lt;span&gt;GitHub&lt;/span&gt;&lt;span&gt; 上跟踪 beta 版的进展，还剩下一些工作需要完成，包括无障碍功能、全球化与本地化、增强的键盘与文本处理、对命令行参数的支持等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Flutter for Windows Beta&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://github.com/flutter/flutter/projects/55&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;除了支持经典的 Win32 API 外，我们还在试验基于 &lt;span&gt;UWP&lt;/span&gt; 的 Flutter 容器应用，该版本可以让 Flutter 登陆更多 Windows 设备，包括 Xbox。作为该试验的一部分，本周我们在 Windows Store 上发布了一个基于 UWP 的 &lt;span&gt;Flutter Gallery&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;UWP&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://docs.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Windows Store: Flutter Gallery&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://www.microsoft.com/en-us/p/flutter-gallery/9pdwctdfc7qq&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;以下屏幕截图显示了在 Xbox 上运行的基于 UWP 的 Flutter Gallery:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7299324831207802&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gQOwib4zALd2GJvWuMxibFCL1lPJ0r6og9hN48gSOprPGSP3aW9Ru9s0cxOtchwjdSXkDBCpLqwySzp3q1vTliaSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1333&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图是在一个双屏 Windows 设备 (在 &lt;span&gt;Windows 10X 模拟器&lt;/span&gt;上) 运行的同一个应用:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6811702925731433&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gQOwib4zALd2GJvWuMxibFCL1lPJ0r6og9yw7CicXDVEgz3QWbbHLPyfhhrKCKfWuvYed7bLCA4hYiartykRvVSWUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1333&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Windows 10X 模拟器&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://docs.microsoft.com/en-us/dual-screen/windows/get-dev-tools&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;您可以在 &lt;span&gt;GitHub&lt;/span&gt; 上详细了解 Flutter for UWP 的进展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;增加 UWP 支持&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://github.com/flutter/flutter/issues/14967#issuecomment-697108439&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本次的 alpha 版本将 Flutter 的强大功能引入 Windows，为开发者提供了声明式、可组合和响应性的架构。该版本对 Material 规范的适应性实现，可以让您按照自己的需求来设计应用，并使用全套的 Flutter 开发和调试工具。您的应用在开发完成后将编译为原生 64 位代码，如同任何其他原生应用一样，您可以将其打包并在其他 Windows 设备上运行。最后，您可以使用相同的代码库，为 Android、iOS、web、macOS 和 Linux 平台打造应用。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果您希望使用 Flutter 开始构建 Windows 应用，我们期待听到&lt;/span&gt;&lt;span&gt;您的反馈&lt;/span&gt;&lt;span&gt;！如果您更喜欢运用您的 Windows 专业知识来&lt;/span&gt;&lt;span&gt;构建热门插件的 Windows 实现&lt;/span&gt;&lt;span&gt;，或者为 Flutter 构建一些 Windows 专用的工具 (比如通过 &lt;span&gt;flutter build windows&lt;/span&gt; 命令的输出结果创建 MSIX 的命令行工具)，我们也热烈欢迎！&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;随着 Flutter 开始支持 Windows，您打算构建怎样的精彩应用呢？欢迎在评论区和我们分享您的想法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;1&quot; data-cropselx2=&quot;321&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;95&quot; data-ratio=&quot;0.29508949059201467&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Sjl5iagvIVe6ialXliaPqDZnlk97AV854HuSV1jZZaSDak4nDMsuAJgtiaXRTGlZOsvTBVFnDvOPYA9VUgxECdspHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4358&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span data-darkmode-color-16025839369124=&quot;rgb(51, 105, 232)&quot; data-darkmode-original-color-16025839369124=&quot;rgb(51, 105, 232)&quot;&gt;推荐阅读&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&amp;amp;mid=2652066783&amp;amp;idx=1&amp;amp;sn=68e76f0bbd1f923e2949c27a87126813&amp;amp;chksm=808cf39ab7fb7a8c872d81de0a29b47e31e21d557874db4d9a8c5c0bd19b4d936c7e1f29c3a6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;232&quot; data-ratio=&quot;0.425&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rFWVXwibLGty4ic9P0r7He0vV4jICBqL4taFziaKNKCKGTwngMqsLJY8jlYicUFAdqcNvAzaLSbfXkAVibmgNDXdsyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&amp;amp;mid=2652064029&amp;amp;idx=1&amp;amp;sn=4a0b21abe108d90c456f05cca1098b66&amp;amp;chksm=808ce958b7fb604eb7f579c3838bd3a4860a80df3d2dc4c352c8cb5b3f504a6ae4a2e4606cdc&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;232&quot; data-ratio=&quot;0.42485549132947975&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rFWVXwibLGtxOicrK9sdJGGQ7I5ecbul5hUCc5RVSQQtlfsJNL0fnjFt30D2N44EbAB1z1dtflsCjmZmial0wJjFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;692&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&amp;amp;mid=2652061589&amp;amp;idx=1&amp;amp;sn=3557767b31055d32b4e4a490ce0ff142&amp;amp;chksm=808c9fd0b7fb16c6ef03bceb6c3c36d3c2cfeace3e2c57a3512386dd7480d06b5692443bd0e6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;232&quot; data-ratio=&quot;0.425&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rFWVXwibLGtzvgOdzQvibldOiaPErTiamsicbm64bU1mERyMK81UbRmZmbzFXTfFuTpZv2bSC48CPgM3h3sib7tQaLEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.6197183&quot; data-type=&quot;gif&quot; data-w=&quot;71&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/rFWVXwibLGty0S5JgMN8PpBib2631p7cDvlvTEaxFBzljBX9qWcVMSOymhkTd6ZmanRibYWsh0HmccjGWkadiaLwAA/640?wx_fmt=gif&quot;/&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;点击屏末&lt;/span&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;| &lt;strong&gt;&lt;span&gt;&lt;strong&gt;阅&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;读&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;原&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;文&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt; |&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;访问 Flutter 开发者社区中文资源&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.075&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rFWVXwibLGtxMPDu51LG2yjicbvAuxZz6WAyYfjvkLrZcKfyzCbSiaEKzssYUJpUniaLKtU0NeX2L7zphcS9IkgawQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.696875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/rFWVXwibLGtxMPDu51LG2yjicbvAuxZz6WE0r9WAF2wHtzeC1dvtDqIQQKMKGicJ6pAFWsrD0AXNuiblnQ7nUHhj7A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rFWVXwibLGtxMPDu51LG2yjicbvAuxZz6WskUWYqiazibcvKPcLHUhacmbgDbmN5ibsBy9tCuw1MYI3dZJqj5A5Sneg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>