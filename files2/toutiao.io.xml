<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1e22e4414b07b7f0d29b33c0799106a1</guid>
<title>2022 年别再焦虑啦！加入我们！</title>
<link>https://toutiao.io/k/obimloc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>880c23b223546401797b6c81cc044aa5</guid>
<title>如何在快应用开发中使用 vuex 做状态管理 - 悠然宜想亭</title>
<link>https://toutiao.io/k/80h0rp2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;Post-body&quot;&gt;
                    &lt;p&gt;&lt;a href=&quot;https://vuex.vuejs.org/zh/&quot; rel=&quot; nofollow ugc&quot;&gt;Vuex&lt;/a&gt; 是一个专为 Vue.js 应用程序开发的&lt;strong&gt;状态管理模式&lt;/strong&gt;。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。如果您需要构建一个中大型单页应用，尤其是涉及&lt;strong&gt;多个页面需要共享数据&lt;/strong&gt;，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。与 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot; rel=&quot; nofollow ugc&quot;&gt;Vue&lt;/a&gt; 一样，&lt;a href=&quot;https://nicelinks.site/post/5b5fb5bc615bf842b609105f&quot; rel=&quot; nofollow ugc&quot;&gt;快应用&lt;/a&gt;也是基于&lt;code&gt;MVVM&lt;/code&gt; 的设计模式，因此略作适配，&lt;a href=&quot;https://vuex.vuejs.org/zh/&quot; rel=&quot; nofollow ugc&quot;&gt;Vuex&lt;/a&gt; 也适用于&lt;strong&gt;快应用开发&lt;/strong&gt;。本文旨在与大家分享：&lt;a href=&quot;https://forum.lovejade.cn/d/142-vuex&quot; rel=&quot; nofollow ugc&quot;&gt;如何在快应用开发中使用 vuex 做状态管理&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lovejade.oss-cn-shenzhen.aliyuncs.com/quickapp-x-vuex.png&quot; title=&quot;&quot; alt=&quot;如何在快应用开发中使用 vuex 做状态管理&quot;/&gt;&lt;/p&gt;



&lt;h3&gt;目标与理念&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/post/5b5fb5bc615bf842b609105f&quot; rel=&quot; nofollow ugc&quot;&gt;快应用&lt;/a&gt;是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的&lt;code&gt;快应用联盟&lt;/code&gt;联合制定。其标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。&lt;a href=&quot;https://nicelinks.site/post/5b5fb5bc615bf842b609105f&quot; rel=&quot; nofollow ugc&quot;&gt;快应用&lt;/a&gt;具备传统 APP 完整的应用体验，&lt;code&gt;无需安装、即点即用&lt;/code&gt;；&lt;code&gt;覆盖 10 亿设备&lt;/code&gt;，&lt;code&gt;与操作系统深度集成，探索新型应用场景&lt;/code&gt;。快应用 ── &lt;strong&gt;复杂生活的简单答案，让生活更顺畅&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/post/5b5fb5bc615bf842b609105f&quot; rel=&quot; nofollow ugc&quot;&gt;快应用&lt;/a&gt;语法本身提供&lt;a href=&quot;https://doc.quickapp.cn/tutorial/framework/parent-child-component-communication.html#%E5%85%84%E5%BC%9F%E8%B7%A8%E7%BA%A7%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1&quot; rel=&quot; nofollow ugc&quot;&gt;兄弟跨级组件通信&lt;/a&gt;、全局变量、&lt;a href=&quot;https://doc.quickapp.cn/tutorial/framework/props.html&quot; rel=&quot; nofollow ugc&quot;&gt;props&lt;/a&gt; 等能力；但不同程度上，都存在些许问题：&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;开发者实现 Pub/Sub（订阅）模型：虽然完成了解耦，但操作繁琐；&lt;/li&gt;
&lt;li&gt;利用框架本身提供的事件绑定接口：耦合性高，不够扁平化，难以维护；&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;如果您考虑通过&lt;code&gt;全局变量&lt;/code&gt;以及 props 跨层级传递的方式，但其弊端相对会更多。在某些复杂业务场景，采取&lt;strong&gt;状态模型&lt;/strong&gt;，基于事件操作驱动数据，基于数据变化更新界面；最合适不过了。在众多状态机相关类库中，有开发者对 vuex 进行了快应用适配：&lt;a href=&quot;https://github.com/dyw934854565/vuex&quot; rel=&quot; nofollow ugc&quot;&gt;quickapp-vuex&lt;/a&gt;（&lt;strong&gt;支持了几乎所有的功能，支持 computed, watch, methods&lt;/strong&gt;）。因此您的快应用项目，可运用 vuex 进行状态管理，用以&lt;strong&gt;解决「兄弟跨级组件通信问题」&lt;/strong&gt;，同时，&lt;strong&gt;降低代码之间的耦合性&lt;/strong&gt;。在使用 &lt;a href=&quot;https://github.com/dyw934854565/vuex&quot; rel=&quot; nofollow ugc&quot;&gt;quickapp-vuex&lt;/a&gt; 时，有发现基于 &lt;code&gt;data&lt;/code&gt; 和 &lt;code&gt;getters&lt;/code&gt; 皆不能使用数组（前者会导致报错，后者则陷入死循环），使得运用起来稍显不够顺畅；因此有 fork 出来——&lt;a href=&quot;https://github.com/nicejade/vuex&quot; rel=&quot; nofollow ugc&quot;&gt;qa-vuex&lt;/a&gt;，对其做了解决，以便开发者可更灵活运用。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;支持度： 目前测试了部分手机，1010 及其以上都支持；&lt;/li&gt;
&lt;li&gt;支持机型：vivo  |  魅族  |  华为  |  小米  |  OPPO 等；&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;如何安装&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add qa-vuex
// OR
npm install qa-vuex -S&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;如何使用&lt;/h3&gt;

&lt;p&gt;如果您尚不了解 &lt;a href=&quot;https://vuex.vuejs.org/&quot; rel=&quot; nofollow ugc&quot;&gt;Vuex&lt;/a&gt;，还请先学习下。您也可以参见开源项目：&lt;a href=&quot;https://github.com/vivoquickapp/quickapp-vuex-sample&quot; rel=&quot; nofollow ugc&quot;&gt;quickapp-vuex-sample&lt;/a&gt;。如您需要了解更多，请参见文章：&lt;a href=&quot;https://forum.lovejade.cn/d/142-vuex&quot; rel=&quot; nofollow ugc&quot;&gt;如何在快应用开发中使用 vuex 做状态管理&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// store.js
import Vuex from &#x27;qa-vuex&#x27;
import createLogger from &#x27;./../../node_modules/quickapp-vuex/plugins/logger&#x27;

export default new Vuex.Store({
  state: {
    count: 1314,
    recordArr: []
  },

  getters: {
    rightRecordArr () {
      return state.recordArr. filter(item =&amp;gt; item &amp;gt; 1421)
    }
  },

  mutations: {
    increment (state) {
      state.recordArr.push(state.count)
      state.count ++
    },
    decrement (state) {
      state.recordArr.push(state.count)
      state.count --
    }
  },
  plugins: [createLogger()]
})&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;app.ux&lt;/code&gt; 入口文件，引入 store.js，并挂到全局对象上，确保 store 只实例化一次。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.ux
import store from &#x27;./store/store.js&#x27;
import Vuex from &#x27;qa-vuex&#x27;

Vuex.install(store)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;组件和页面中使用， 需要包一层 Vuex.Component，其他的和 vuex 用发类似。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&quot;counter&quot;&amp;gt;
    &amp;lt;text class=&quot;title&quot;&amp;gt;{{count}}&amp;lt;/text&amp;gt;
    &amp;lt;input class=&quot;btn&quot; type=&quot;button&quot; value=&quot;+&quot; onclick=&quot;increment&quot; /&amp;gt;
    &amp;lt;input class=&quot;btn&quot; type=&quot;button&quot; value=&quot;-&quot; onclick=&quot;decrement&quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { mapGetters, mapState, mapMutations, Component } from &#x27;qa-vuex&#x27;

export default Component({
  computed: {
    ... mapState([&#x27;count&#x27;, &#x27;recordArr&#x27;]),

    ...mapGetters([&#x27;rightRecordArr&#x27;])
  },

  methods: {
    ...mapMutations([&#x27;increment&#x27;, &#x27;decrement&#x27;])
  }
})
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;computed 和 vue 一样支持 function 和 { get, set }；&lt;/p&gt;

&lt;p&gt;watch, 调用快应用的原生 &lt;code&gt;$watch&lt;/code&gt;，支持值为 function。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { Component } from &#x27;qa-vuex&#x27;

export default Component({
  props: {
    title: String
  },

  watch: {
    title: function (newVal, oldVal) {
      console.log(newVal, oldVal)
    }
  }
})&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;项目示例&lt;/h2&gt;

&lt;h3&gt;源码地址&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/vivoquickapp/quickapp-vuex-sample&quot; rel=&quot; nofollow ugc&quot;&gt;quickapp-vuex-sample&lt;/a&gt;：&lt;strong&gt;基于 Vuex 开发出的任务管理&lt;a href=&quot;https://nicelinks.site/post/5b5fb5bc615bf842b609105f&quot; rel=&quot; nofollow ugc&quot;&gt;快应用&lt;/a&gt;：待办清单；它的目标是将任务从您的脑海中移到任务清单，让你专注于当前的工作&lt;/strong&gt;。&lt;/p&gt;

&lt;h3&gt;基于 vuex 开发的「待办清单」快应用&lt;/h3&gt;

&lt;p&gt;我们每天要做的事情都很多，经常会出现想做某个事然后忘掉的情况；待办清单，可以帮我们把要做的事情列出来，一项一项，类似思维导图。把要做的事情在「待办清单」上记录下来，辅之以提醒，就不会轻易忘记。并且，基于它可以让我们实时看到自己已经完成了哪些任务，获得即时满足感；还有哪些任务未完成，更好的规划自己的时间。这里的「待办清单」只是一个模版，提供一些基本功能；您可以在这些基础功能上，自由开发属于自己的 ToDoList 应用。&lt;/p&gt;

&lt;h3&gt;先决条件&lt;/h3&gt;

&lt;p&gt;安装&lt;a href=&quot;https://www.quickapp.cn/docCenter/IDEPublicity&quot; rel=&quot; nofollow ugc&quot;&gt;快应用开发工具&lt;/a&gt;，提供了开发快应用所需要的功能，无需额外安装其它工具和环境。&lt;/p&gt;

&lt;h3&gt;目录介绍&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;└── src
│   ├── assets          # 公用的资源(Images/Styles/字体...)
│   │   ├──images       # 存储 png/jpg/svg 等公共图片资源
│   │   └──styles       # 存放 less/css/ 等公共样式资源
│   ├── components      # 存放项目所抽离出的组件
│   ├── helper          # 项目自定义辅助各类工具
│   ├── pages           # 统一存放项目页面级代码
│   ├── store           # 存放 vuex（store）相关内容
│   ├── app.ux          # 应用程序代码的入口文件
│   └── manifest.json   # 配置应用基本信息
└── package.json        # 定义项目需要的各种模块及配置信息&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;项目功能&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;✅支持一键添加&lt;strong&gt;新任务&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;✅标注&lt;strong&gt;已完成&lt;/strong&gt;任务（向左滑动）；&lt;/li&gt;
&lt;li&gt;✅支持删除单项任务（向左滑动）；&lt;/li&gt;
&lt;li&gt;✅一键删除已完成任务；&lt;/li&gt;
&lt;li&gt;✅查看全部、已完成、未完成任务；&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;项目开发&lt;/h3&gt;

&lt;p&gt;为使得项目后续更好扩展，有按照功能划分，抽离出多个组件，降低单个文件复杂性，以方便后续维护和扩展。虽然&lt;code&gt;快应用&lt;/code&gt;提供&lt;a href=&quot;https://doc.quickapp.cn/tutorial/framework/parent-child-component-communication.html#%E5%85%84%E5%BC%9F%E8%B7%A8%E7%BA%A7%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1&quot; rel=&quot; nofollow ugc&quot;&gt;兄弟跨级组件通信&lt;/a&gt;能力（建议），不同程度上，都存在些问题：&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;开发者实现 Pub/Sub（订阅）模型：虽然完成了解耦，但操作繁琐；&lt;/li&gt;
&lt;li&gt;利用框架本身提供的事件绑定接口：耦合性高，不够扁平化，难以维护；&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;当然，还可以考虑通过&lt;code&gt;全局变量&lt;/code&gt;以及 props 跨层级传递的方式，但其弊端相对会更多。再结合 ToDoList 这个业务场景，采取&lt;strong&gt;状态模型&lt;/strong&gt;，基于事件操作驱动数据，基于数据变化更新界面；最合适不过了。在众多状态机相关类库中，有开发者 vuex 进行了快应用适配：&lt;a href=&quot;https://github.com/dyw934854565/vuex&quot; rel=&quot; nofollow ugc&quot;&gt;quickapp-vuex&lt;/a&gt;；因此本项目采用 vuex 进行状态管理，用以&lt;strong&gt;解决「兄弟跨级组件通信问题」&lt;/strong&gt;，同时，&lt;strong&gt;降低代码之间的耦合性&lt;/strong&gt;。关于如何引入 vuex 可以参考博文：&lt;a href=&quot;https://quickapp.vivo.com.cn/how-to-use-vuex-in-quickapp-development/&quot; rel=&quot; nofollow ugc&quot;&gt;在快应用开发中使用 vuex&lt;/a&gt;。&lt;/p&gt;

&lt;h3&gt;问题记录&lt;/h3&gt;

&lt;p&gt;在组件开发中过程中，遇到了些问题，以下几点值得您注意下：&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;code&gt;tasks-list&lt;/code&gt; 组件展示添加任务，当任务名过长时，如果设置超出部分显示为省略号；本地预览会出现错误，整行都会显示为省略号，已提交 bug 但还未修复；&lt;/li&gt;
&lt;li&gt;使用 slide-view 组件时，slide-view 组件的 enableslide 属性（是否允许侧滑）默认是 true，可以不添加；但本地预览如果不设置为 true，slide-view 组件将会不能侧滑；&lt;/li&gt;
&lt;li&gt;本地预览，slide-view 组件中按钮组，点击会报错，已提交 bug 但还未修复。可以采用 touch 方法或者换一种表现形式，来实现侧滑点击功能。&lt;/li&gt;&lt;/ul&gt;

&lt;h2&gt;猜您可能感兴趣的文章&lt;/h2&gt;


                &lt;/div&gt;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>89826f28ecdcd0fa524155f6ced65fde</guid>
<title>如何撰写好的技术方案设计-真实案例干货分享</title>
<link>https://toutiao.io/k/0f5fv4t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;一、 前言&lt;br/&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一个技术开发者，特别是高级、资深开发、架构师等，往往会遇到根据需求撰写技术方案。那么如何撰写一篇好的技术方案设计，我们今天就来聊一聊这个话题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;二、 技术方案是否有必要&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是肯定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我见过太多由于前期规划不到位（甚至是没有技术方案设计，开个技术讨论会口头沟通一下，就直接评工期开干的），这其中不乏很重要，工期很长的项目。而最后呢，到联调阶段各组串不起来，更可笑的是，产品和产品同学之间都没沟通清楚。导致最终很被动，到处挖坑补洞，而且花费了更多的时间和精力，甚至导致项目延期，后续扩张性不强等等问题。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我认为，技术方案是必不可少的一个环节。往往很多坑在这个阶段就可以避免的。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;古人云:&quot;磨刀不误砍柴工&quot;，技术方案就是磨刀的过程。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.282339707536558&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67WicOEAfAcyiaosXCicREoJVkCPrLdvThA88KIdpqSibJ3aiatGQqWRxbwfJ6kicGjaxZk3kSUCB5yUnWLOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;889&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;方案设计&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三、 如何写好技术方案&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;要贴合需求，满足需求是大方向。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可实施。要考虑当前条件下是否可落地，如：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;团队人员接受能力:技术选型的时候，要考虑团队成员接受能力，盲目引入新技术，可能造成不可预知的问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;时间成本:  一般来说Java 或者 PHP 后端项目(c语言项目可能会做一年甚至更长时间)，3个月时间周期算是比较长的了，假如按照此方案，需要半年甚至更长时间，那可能也不切实际。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;资源成本: 例如，项目可能需要引入Redis，Mysql，ES， MongoDB 等基础资源，那公司是否能提供这些资源(服务器是要钱的)。如果不能，在写技术方案时候，可能就需要考虑是否有替代方案。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;应急处理&amp;amp;可靠性保障
只要人能想到的问题，就一定会发生，不能有侥幸心理。所以要做好出现问题的应对策略，这里就必须做好如：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;四、技术方案模板&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是我总结的技术方案设计模板，希望对大家所有帮助。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、背景&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前的背景现状，简要说明以往业务所遇到的问题，给出本次项目迭代的原因，解决的技术痛点或业务痛点&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、目标&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过次方案要达到什么样的业务指标，例如，支撑多少QPS，性能相比现在提升多少倍，为后期水平扩展做铺垫&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3、整体方案&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1)架构图
2)流程图
3)时序图
4)调用链路图&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4、存储设计&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如Mysql表结构设计，缓存设计，ES存储设计等等，说明Schema、字段类型、默认值、描述信息等。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5、接口定义&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列举出接口的结构，参数，返回值等&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6、灰度方案&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按什么方式灰度，如何做灰度方案，用表格的形式列出分几个阶段灰度，每个阶段大概时间多长。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7、降级方案&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当出现问题如何降级操作，如何回滚。将风险降到最低程度。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8、关联系统(功能)影响&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重点需要各组注意的地方，相关人员需要特别关注，一一确认到位&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;9、资源分配情况&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;人力资源: 实现方案需要多少人力投入(开发人力，测试人力，运维人力)等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;硬件资源: 实现上述方案，列举需要哪些物理机器资源，运维人员需提前准备。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10、预估工期及时间节点&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列举出工期及关键时间节点，如，什么时候联调，什么时候提测，什么时候开始灰度上线，以及后续的迭代完善计划等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;五、温馨提示&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我也给大家总结了我之前做系统重构写的技术方案设计文档（线上真实版本，已脱敏)，给大家总结了2套， 有需要的朋友可以公众号后台留言&quot;方案&quot;即可获取，也欢迎有兴趣的朋友一起交流学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67WicS8obXBjC9RqxibSJcgOsnicwSlKjFSxuEECwjZjYS8Y9zpmCdyv6z4yeSicSQSDNz2XUzRppBjuGXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ef024d893355e0d622ce67dfab462b0c</guid>
<title>CTO手绘的那些事</title>
<link>https://toutiao.io/k/uoyap1i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA4ODM0OTc0NQ==&amp;amp;action=getalbum&amp;amp;album_id=1365683950634631169#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1365683950634631169&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#研发文化&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;41个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3a2de02cbaca32966b0710f509a5b718</guid>
<title>理解go中空结构体的应用和实现原理</title>
<link>https://toutiao.io/k/filze2x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;span&gt;在实际项目或开源程序中，相信大家都见过将一个空结构体作为map值的场景：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;CanSkipFuncs&lt;/span&gt; = &lt;span class=&quot;code-snippet__built_in&quot;&gt;map&lt;/span&gt;[string]&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;{}{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Email&quot;&lt;/span&gt;:   {},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;IP&quot;&lt;/span&gt;:      {},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Mobile&quot;&lt;/span&gt;:  {},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Tel&quot;&lt;/span&gt;:     {},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Phone&quot;&lt;/span&gt;:   {},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ZipCode&quot;&lt;/span&gt;: {},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;或将一个空结构体写入到通道中的使用：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.ch&lt;/span&gt; &amp;lt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;struct&lt;/span&gt;{}{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;那为什么要这样使用空结构体呢？今天就跟大家一起来学习下空结构体的应用以及底层原理。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;01 什么空结构体&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先来看看空结构体是什么。空结构体也是结构体类型，具有结构体的一切特性。但该结构体中没有任何字段组合。所以，&lt;span&gt;该空结构体类型的变量占用的空间为0&lt;/span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们通过unsafe.Sizeof函数来验证一下。unsafe.Sizeof函数的作用是返回一个数据类型所占的空间大小。我们验证一下：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; s &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsafe&lt;/span&gt;.Sizeof(s)) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们看到打印的结果是0，表明struct{}的类型占用的空间是0。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们还可以通过reflect的类型来验证。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; s &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;typ := &lt;span class=&quot;code-snippet__built_in&quot;&gt;reflect&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;TypeOf&lt;/span&gt;(s)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(typ.&lt;span class=&quot;code-snippet__type&quot;&gt;Size&lt;/span&gt;()) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们看到，通过映射变量s的类型，输出空类型的空间大小也是0。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;02 空结构体类型变量的地址&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们知道，在编程语言中，变量的作用就是在内存中，标记和存储数据的。也就是说每个变量会对应着一块内存空间，既然是内存空间，那就应该有对应的内存地址。那空结构体类型变量的地址是什么呢？我们通过如下代码来看下：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;package main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unsafe&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type emptyStruct &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    a := &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;{}{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    b := &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;{}{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; := emptyStruct{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(a)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Printf&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%pn&quot;&lt;/span&gt;, &amp;amp;a) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Printf&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%pn&quot;&lt;/span&gt;, &amp;amp;b) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Printf&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%pn&quot;&lt;/span&gt;, &amp;amp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(a == b) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们发现，所有空结构体类型的变量地址都是一样的。&lt;/span&gt;&lt;span&gt;那这是为什么呢？&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在底层实现中，这和一个很重要的 zerobase 变量有关(在runtime里多次使用到了这个变量），而zerobase 变量是一个 uintptr 的全局变量，占用8个字节。在go源码src/runtime/malloc.go中有如下定义：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; zerobase &lt;span class=&quot;code-snippet__keyword&quot;&gt;uintptr&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;只要你将struct{} 赋值给一个或者多个变量，它都返回这个 zerobase 的地址，这点我们上面已经证实过这一点了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在golang中大量的地方使用到了这个 zerobase 变量，只要分配的内存为0，就返回这个变量地址，在go源码src/runtime/malloc.go的mallocgc函数中定义如下：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;func &lt;span class=&quot;code-snippet__title&quot;&gt;mallocgc&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;size uintptr, typ *_type, needzero &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsafe&lt;/span&gt;.Pointer&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; gcphase == _GCmarktermination {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;mallocgc called with gcphase == _GCmarktermination&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; size == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsafe&lt;/span&gt;.Pointer(&amp;amp;zerobase)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;03 空结构体的应用场景&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一般我们用在用户不关注值内容的情况下，只是作为一个信号或一个占位符来使用。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于map实现集合功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;与channel组合使用，实现一个信号&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;基于map实现集合功能就是我们开头提到的。使用空结构体&lt;span&gt;不占用存储空间外，还有一个语义上的原因&lt;/span&gt;。例如：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; CanSkipFuncs = &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Email&quot;&lt;/span&gt;:   &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;IP&quot;&lt;/span&gt;:      &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Mobile&quot;&lt;/span&gt;:  &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Tel&quot;&lt;/span&gt;:     &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Phone&quot;&lt;/span&gt;:   &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ZipCode&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们这里将空结构体类型更换成布尔类型。首先，声明下，CanSkipFuncs集合代表的是所有要跳过的函数。所以这里的值设置成true还是false是没有任何影响的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么当阅读或review代码的时候，很有可能带来疑惑，对于值所表达的意图就有所怀疑，增加了理解代码的难度。就会理解成当值为true时会执行一个分支，当值为false时会执行另一段逻辑。而相比使用一个空结构体strcut{}理解起来会更容易，一看空结构体struct{}就知道要表达的意思是不需要关心值是什么，只需要关心键值即可。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们再来看下和channel组合使用的例子。在etcd项目中，就有通过往channel中写入一个空结构体作为信号的，源码位于/etcd/server/auth/simple_token.go中，如下：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(tm *simpleTokenTTLKeeper)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; tm.stopc &amp;lt;- &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;{}{}:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-tm.donec:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &amp;lt;-tm.donec&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还有一种是基于缓冲channel实现并发限速。如下：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; limit = &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;{}, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, w := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; work {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            limit &amp;lt;- &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;{}{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            w()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &amp;lt;-limit&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;04 总结&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;空结构体是一种不包含任何字段的结构体类型，不仅具有结构体类型的一切属性，而且该结构体类型占用的空间为0。&lt;/span&gt;&lt;span&gt;常被用于map的集合或和通道配合使用发送信号使用的场景。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;参考链接：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;https://blog.haohtml.com/archives/20339&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://ijayer.github.io/post/tech/code/golang/20200419_emtpy_struct_in_go/&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span&gt;&lt;strong&gt;福利&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span/&gt;&lt;span&gt;我为大家整理了一份&lt;/span&gt;&lt;span&gt;从入门到进阶的Go学习资料礼包&lt;/span&gt;&lt;span&gt;，包含学习建议：入门看什么，进阶看什么。&lt;/span&gt;&lt;span&gt;关注公众号 「polarisxu」，回复 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;ebook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 获取；还可以回复「&lt;strong&gt;进群&lt;/strong&gt;」，和数万 Gopher 交流学习。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UWba2ryLMqm8cgtrMXjG1BLGg46vQNmUompBL02uYYwic9RicPbCnlKdZiacBF5Wv6RLgmGIqnBnwuWyP82ibYusiag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>