<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>33cd2ba07d7496753fa853f172035b5e</guid>
<title>写出结构优雅代码的4个技巧</title>
<link>https://toutiao.io/k/6cddvzi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;写出结构优雅代码就像成为武林高手一样，需要积累思考勤学苦练。冰冻三尺非一日之寒。成熟的业界套路肯定是没有的，因为&lt;span&gt;代码也有思想流派&lt;/span&gt;。现在是百家齐放的时代。&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485626&amp;amp;idx=1&amp;amp;sn=85397fd412b6b204ff0d7fbe82857653&amp;amp;chksm=fafde214cd8a6b027af50392df5c1d598e55b29e7fbbe52a005742f40d5f94da92090b5602c6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;code review&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;code review&lt;/strong&gt;&lt;/a&gt;时，一个不留神就会吵起来。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我在网上找了一下资料基本都是《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247483674&amp;amp;idx=1&amp;amp;sn=77f06af636c2b25fb182d4ea667bc6c7&amp;amp;chksm=fafdebb4cd8a62a2c298ac51236c3f8a052f7be315834ddb4b6954eb0b0a400ce923a7b20ae8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;代码整洁之道&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;代码整洁之道&lt;/strong&gt;&lt;/a&gt;》、《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247483681&amp;amp;idx=1&amp;amp;sn=338890cb9f25abb05aa35fb7914a7b3b&amp;amp;chksm=fafdeb8fcd8a62998afded59df333fb7fb0f8d9670013d551afbf0bd4dbbe37a45014440fff6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;重构：改善既有代码的设计&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;重构：改善既有代码的设计&lt;/strong&gt;&lt;/a&gt;》和《代码之美》这三本书里的内容。建议还是自己看书。可以在【编程一生】公众号里回复：666  获取我的经典电子藏书，这三本书都在里面。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面有一些我自己的总结，前三个别的书中没有。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;使用切面将业务逻辑与其他方面解耦&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最简洁优雅的代码就是只做一件事的代码。很多与业务无关的逻辑，如日志、事务都可以使用切面。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了避免抽象，这里详细介绍怎么用切面打印结构化日志。不感兴趣的可以直接跳过，不影响整篇理解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结构化日志，顾名思义不再是自由格式的日志，而是遵循了一定的结构：每一行日志遵循相同的结构。好处显而易见：简化日志解析，使得日志的后续处理、分析或查询变得方便高效。一般用在&lt;/span&gt;需要集中采集到日志服务器上，用来在监控中显示和做数据分析。数仓领域有数据湖的概念，集中采用可以叫做数据入湖。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在分布式环境下，一般都需要结构化日志采集。一旦发生问题，从监控上至少要能定位问题出现在哪台机器上，然后再去机器上查所有日志。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因此，结构化日志一般是方法的开头和结尾都打印，或者只在结尾打印两种方式。因此非常合适用切面处理。问题来了，方法执行结果怎样切面怎么知道呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;具体代码我之前有上传github，《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484045&amp;amp;idx=2&amp;amp;sn=25cf3c0399cf92edbd57e207f18afea3&amp;amp;chksm=fafde823cd8a61354d12e2355829b78b0a84b422ec4d3569bbbff711cb9b1cb3315eafaef9ac&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;简明日志规范&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;简明日志规范&lt;/strong&gt;&lt;/a&gt;》里也有相应的介绍，这里只说重点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先，在Java等语言的切面中是可以拿到方法的返回结果的，如：&lt;/p&gt;&lt;p&gt;business = pjp.proceed();&lt;/p&gt;&lt;p&gt;business 就是返回结果。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其次，代码中可以进行埋点。定义埋点可以使用面向对象的形式，向对象赋值即可。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7497062279670975&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlicuxFiapRtj510kLcdRajggGj0E4xVdf6Q7X7OiaSjdeqqUPXlc3cpPvp2JKRnUGHRXibJtp4eaGmvYQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1702&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是打印日志打印的最后不是字符串吗？可以使用充血模型在日志构造器中用反射定义对象转格式化日志的通用方法：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7497062279670975&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlicuxFiapRtj510kLcdRajggGVsCYGnXfaxYP4PlicmVDnT0chxRLd2iaibtOWjAKEWONQhHyFia2VnFx5Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1702&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;整个对象可以使用ThreadLocal保存在线程的生命周期中，切面可以从ThreadLocal中获取数据执行打印。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7497062279670975&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlicuxFiapRtj510kLcdRajggGVS328ic5bXnEO0oyYqVJXLHNbO6rWF8GicExYuYpsPYjvK2jWUw3boHA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1702&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;代码使用时需要特殊赋值的地方直接进行赋值，其他事情不需要关心。效果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7497062279670975&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicuxFiapRtj510kLcdRajggGWibj9ticzEok5pl4KF7O3AQgLlw2LXlZd8l91O5ZP5jia2wKpsIGUpMjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1702&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;完整的代码我择期更新到github上，其实除了最后这个使用的地方，我写的都是通用的，直接拿来用即可。看在女生节的份上，让我犯犯懒，最近先不更新。其实我也不是真的&lt;span&gt;懒&lt;/span&gt;，女生节要到了，有很多活动要推掉。上班时间不处理，周末了总得委婉的回复一下。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;PS：这种活动我都不参加，请各位编辑、运营小姐姐们不要找我了哈，咱不蹭热度~~&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;写有风格的代码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484645&amp;amp;idx=1&amp;amp;sn=f86183a5a248a03adf8d8da3452b79fe&amp;amp;chksm=fafdee4bcd8a675d2335942673334f188e7826c39fe24314f91a5151d78c1554527ca612beb8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;代码荣辱观-以运用风格为荣，以随意编码为耻&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;代码荣辱观-以运用风格为荣，以随意编码为耻&lt;/strong&gt;&lt;/a&gt;》中我有详尽的说明和代码讲解，文章风格与代码风格相得益彰，强烈推荐大家再读一遍。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;巧用语法糖&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;一个巧字，暗示着需要深入的理解。只有学的深，才能用的巧。在《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485916&amp;amp;idx=1&amp;amp;sn=84085fd0b7ecc1889a55a036186cbb8a&amp;amp;chksm=fafde372cd8a6a640826bc67df523a6d87b9aba19c164ebffab942e336ca224b311233f53228&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;深入理解函数式编程&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;深入理解函数式编程&lt;/strong&gt;&lt;/a&gt;》中我有详尽的说明和代码讲解，这也是自己满意的文章之一，请大家参阅。&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;《代码整洁之道》中提炼的技巧&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;书中详细介绍，这里做总结，有兴趣可以自己看书。可在【编程一生】公众号中留言：代码整洁之道。就可以获取完整电子书。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;注释&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;唯一真正好的注释是你想办法不去写的注释&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要有循规式注释，比如setter/getter注释&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要添加日志式注释&lt;/span&gt;&lt;svg viewbox=&quot;0 0 15 15&quot;&gt;&lt;path d=&quot;M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z&quot; fill=&quot;currentColor&quot;/&gt;&lt;/svg&gt;&lt;span&gt;，比如修改时间等信息（git可以做的事情）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;注释一定是表达代码之外的东西，代码可以包含的内容，注释中一定不要出现&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果有必要注释，请注释意图（why），而不要去注释实现（how)，大家都会看代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;适当添加警示注释&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;命名&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;异常与错误&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;并发&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分离并发相关代码与其它代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;严格限制对可能被共享的数据的访问&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;避免使用一个共享对象的多个同步方法&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;保持同步区域微小，尽可能少设计临界区&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;单元测试&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要怕单元测试的方法名字太长或者繁琐，测试函数的名称就像注释&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要追求太高的测试覆盖率，测试代码前面90%通常比后面10%花的时间少&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用最简单的并且能够完整运用代码的测试输入&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;给测试函数取一个完整性的描述性名字，比如  Test _&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;测试代码与生产代码一样重要&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果测试代码不能保证整洁，你就会很快失去他们&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;每个测试一个断言，单个测试中断言数量应该最小化也就是一个断言&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;FIRST原则&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;代码结构&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应该把解释条件意图的函数抽离出来，尽可能将条件表达为肯定形式&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要继承常量，比如接口中定义常量，不要使用继承欺骗编程语言的作用范围规则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;模块不应了解它所操作对象的内部情况&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;DTO（Data Transfer Objects）是一个只有公共变量&lt;/span&gt;&lt;svg viewbox=&quot;0 0 15 15&quot;&gt;&lt;path d=&quot;M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z&quot; fill=&quot;currentColor&quot;/&gt;&lt;/svg&gt;&lt;span&gt;没有函数的类&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对象暴露行为，隐藏数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要使用“尤达表示法” 如 if(null == obj)，现代编译器对if(obj = null)这样的代码会给出警告&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一般情况使用if else，简单语句使用三目运算符&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通常来讲提早返回可以减少嵌套并让代码整洁&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;设计&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类应该足够短小&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类应该满足单一权责原则（SRP），类和模块只有一个修改理由&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类应该只有少量的实体变量&lt;/span&gt;&lt;svg viewbox=&quot;0 0 15 15&quot;&gt;&lt;path d=&quot;M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z&quot; fill=&quot;currentColor&quot;/&gt;&lt;/svg&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类应该遵循依赖倒置原则 DIP（Dependency Inversion Principle），类应该依赖于抽象而不是依赖于具体细节&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类中的方法越少越好，函数知道的变量越少越好，类拥有的实体变量越少越好&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;简单设计&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;运行所有测试&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不可重复&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;表达了程序员的意图&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;尽可能减少类和方法的数量&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;以上规则按重要程度排列&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;br/&gt;https://www.zhihu.com/question/28492982/answer/448474779&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;因为公众号平台更改了推送规则，如果不想错过内容，记得读完点一下“在看”，加个“星标”，这样每次新文章推送才会第一时间出现在你的订阅列表里。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486113&amp;amp;idx=1&amp;amp;sn=f3623b2cf257aa37ea83768fd4325762&amp;amp;chksm=fafde00fcd8a691928c66f7e484ab2b7f6fa7797dc32833a7f777bb4ebde58c010750f13c118&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;PDCA方法论&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;PDCA方法论&lt;/strong&gt;&lt;/a&gt;，检查自己是否错过更新：每周三晚上8点左右，我都会更新文章，如果你没有收到，记得点开【编程一生】公众号找一下(*^▽^*)&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>768903756e8bc3eee6322d34e9c4b053</guid>
<title>深入解读SQL优化中的执行计划</title>
<link>https://toutiao.io/k/es1q3xq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;数据库的执行计划是SQL优化的最重要手段，执行计划怎么来的、包含什么内容、我们应该关注哪些点，这些是需要我们掌握的，基于这些知识再去理解SQL优化将更加容易。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文由腾讯云数据库高级架构师何敏带来TDSQL PostgreSQL执行计划详解，以下为分享实录：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;在了解PostgreSQL执行计划之前，需要先知道执行计划由来。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;TDSQL PostgreSQL版任何查询都会经过语法和语义解析，生成查询表达式树，也就是常用查询数，解析器会去解析语法，分析器会把语法对应对象进行展开，通过重写器对规则进行重写，最后生成查询数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5634390651085142&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XS2esJew19aHaS87SzZrPVkeevKicdibsrz70XCAMsECQzm3yVvADQDykXRGoELDohgo8aqicD1qvgRPmcib2aPBPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1198&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据查询树执行器经过查询再进行预处理，找出最小代价路径，最终创建出计划树。再把查询计划交由执行器进行执行。最终执行完成会把结果返回给前端应用。这些操作都是在每个连接对应Backend进程去进行处理。执行器在执行时，会去访问共享内存，内存没有数据，则从磁盘读取。最终将查询的结果缓存在数据库中，逐步输出给用户进程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进程会涉及到例如Work memory、temp buffer等进程级内存，可以通过我们的Explain命令来查看执行计划，对不合理的资源进行调整，提高SQL执行效率。在SQL前面加上Explain，就可以直接看到执行计划。不管是在pgadmin还是其它工具都可以简单进行查看。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我们的执行计划有几个特点：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;首先查询规划是以规划为节点的树形结构，以查询的一些路径作为树形结构，树最底层节点是扫描节点，去扫描表中原始行数。不同表也有不同扫描类型，比如顺序扫描或索引扫描、位图索引扫描。也有非表列源，比如说Values子句。还有查询，可能需要关联、聚合、排序以便操作，同时也会在扫描节点上增加节点进行操作提示以及消耗。Expain输出总是以每个树节点显示一行，内容是基本节点类型和执行节点的消耗评估。可能会出现同级别节点，从汇总行节点缩进显示其它属性。第一行一般都是我们汇总的消耗，这个值是越小越好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5618729096989966&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XS2esJew19aHaS87SzZrPVkeevKicdibsrDJYicbbUt2gGoYqzMFCiaNX6qtKicv75yrFe2icFSkXr79HQj8KfVJ1I9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1196&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在看一个执行计划，我们创建一个测试表，插入1万条数据做分析后，可以看到它的执行计划，这个执行计划很简单，全面扫描它只有一行。执行计划我们从左到右去看，先是评估开始的消耗，这里因为没有别的步骤，所以这个步骤是从0开始，然后是一个总消耗评估。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Rows是输出的行数，它是一个评估结果；然后是每一行的平均字节数，这是一个评估结果，这个评估结果依赖于pg_stats和pg_statistic统计信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么我们怎么去看执行计划呢？就是上级节点的消耗，其中包含了其子节点的消耗，这个消耗值反映在规划器评估这个操作需要的代价。一般这个消耗不包括将数据传输到客户端，只是在数据库后台的执行代价。评估的行数不是执行和扫描节点查询的节点数量，而是返回的数量。同时消耗它不是一个秒的，它是我们规划器的一个参数。Cost是描述一个执行计划代价是多少，而不是具体时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;代价评估的一些基准值一般会关注哪几个参数？&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;seq_page_cost，即扫描一个块需要的消耗，我们默认为是1，而随机扫描random_page我们默认为是4，这个在优化的环节需要进行优化，比如说现在使用SSD，随机页的访问效率肯定比其它的磁盘更快，而这里值就可以改为1。另外就是cpu_tuple_cost，我们CPU去扫描一个块里具体行数，一行大概0.01的消耗。索引是cpu_index_tuple_cost，0.005的消耗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5654712260216848&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XS2esJew19aHaS87SzZrPVkeevKicdibsrZxU1toHd4Vg7IqFUYh1VLZvtTib4gDOjrvUge1Ticia443xsDhxYAic6mw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1199&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个例子，新建Test表有一万行，它分配了94个页。而根据刚刚执行计划可以大概估算消耗：磁盘页乘顺序扫描的Cost，加上扫描行数。这个值就是94个页乘以1，加上1万行乘以0.01的消耗就是194。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;那什么时候去更新pg_class以及pg_stat_user_tables的统计信息？&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;它分为两个部分，一部分主要还是通过analyze以及部分DDL语句去触发更新统计信息。所以执行计划准确与否和统计信息也很有关联。这里加上条件，比如说Where Id小于1000，会去增加一个筛选条件。这样扫描的同时它会去增加损耗，比如扫描的行数不变，但是增加了CPU的计算比较时间，就变为219。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;执行计划最底层是表的扫描，而扫描又分为两种方式，全表扫描以及索引扫描。全表扫描顾名思义去整个表上扫描。就算是有些表加了索引，它也不一定会走索引扫描，如果说满足条件的数据集比较大，索引扫描代价比全表扫描更大，它就会走全表扫描。如前面所说，扫描全表，这个时候重新扫描，会先走索引，再走对应的块，这个代价会比走全表扫描更慢。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一个问题是索引扫描Index Scan。在上面的测试表对查询列建一个索引，举例查询条件是小于1000这个值，cost减少还不够直观，如果条件是小于10之类小数据量查询，索引效果更好，直接走Index Scan。但如果查询条件筛选率不够高，查询会先走索引扫描，再重新扫描行，扫描后他会去判断每一个行的条件，Cost可能相应就变更高。在优化的时候，尤其要去关注这一点，一定要关注索引的筛选率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5607321131447587&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XS2esJew19aHaS87SzZrPVkeevKicdibsr3WXzrtMlkrfPF7JmOibP8Pm2ePETnHUbDLu1giaTW1mMwBiaCPYib6dOxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1202&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;索引扫描里还有一个Index Only Scan，也就是投影列、查询条件都在索引里面，它就会走一个Index Only Scan，不会再去读其它具体的行值，扫描完索引之后就返回，效率非常高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;还有一种扫描方式是位图扫描，在PG里没有位图索引，但是它是有位图扫描的，一般是在on、and或in子句里面去走。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;举个例子，上面查询ID小于1000，同时ID要大于9000，这时候它会先做两次索引扫描。扫描时它不会去读具体数据，会先去做一个Bitmap Scan，之后我们的条件是Or，会先做一个聚集后再去做Check，看一下具体实现方式。它是先去启动时间两个Bitmap Scan总和，因为是具体扫描会有扫描时间，所以这个组合会花费大量时间。同时Index Scan输出的是Tuple，先扫描索引块，得到对应ctid再去扫描具体数据。如果一次只读一条索引项然后去判断行是否满足条件，一个PAGE可以多次访问。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5569409808811305&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XS2esJew19aHaS87SzZrPVkeevKicdibsrzxlibJsBnXibibkzvyThibAfXiczicjvrqQdlFBo1kx0Qh5xpRl26e4p7e4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1203&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而&lt;/span&gt;&lt;span&gt;Bitmap Scan会去输出所有&lt;/span&gt;&lt;span&gt;满足条件的索引项&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;然后&lt;/span&gt;&lt;span&gt;组合&lt;/span&gt;&lt;span&gt;到一起做or等操作&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;最后才&lt;/span&gt;&lt;span&gt;交给上一个节点Bitmap Heap Scan去扫描具体数据，&lt;/span&gt;&lt;span&gt;由于&lt;/span&gt;&lt;span&gt;会先去根据索引扫描的物理数据进行排序，一次性将&lt;/span&gt;&lt;span&gt;块中&lt;/span&gt;&lt;span&gt;满足条件索引项数据取出来。&lt;/span&gt;&lt;span&gt;这样可以说一个块，一次扫描就扫描完了，可以想象这个效率是非常高的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在底层的数据扫描完之后会去做表连接。连接方式一般在两表关联的时候才有连接可能。一般简单说自然选择、左连接、右连接等等。但具体的到数据库的执行计划里一般主要有hash join、nested loop、merge join。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hash Join，它是以Hash方式来进行表连接，首先它确定是两个表里的大小，使用小表去建立Hash map，去扫描大表比较Hash值获取最终查询结果。我们示例中建立另外一张表Test1，并建一个索引进行两张表关联查询，当他们的T1的ID小于10，它Info相等，做一个关联查询。首先开始的时候，因为两个表大小一样，一张有索引，一张没有，会优先选择有索引的表去做一个Hash桶，另外一张表进行一个循环比较Hash值。如果说变一下条件把Test1表删除一部分数据，优化器会以Test1去做一个Hash表，Test表在上面去做驱动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5630743525480367&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XS2esJew19aHaS87SzZrPVkeevKicdibsrtltMgV0GI91Qns4vmqPDZ1RCHVPZUicQMn8BZeq8BZCnJicU5YTVPeXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1197&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;做一个简单梳理。&lt;strong&gt;Hash连接是在做大数据连接时非常有用的方式，就是在两个大表进行join。&lt;/strong&gt;那么这里也是为什么PG在和MySQL比的时候，说它的分析能力要强一点的原因，因为我们的Hash join支持非常好。另外现在MySQL已经支持Hash了，但是还不是那么完善。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hash它有个问题，如果Hash的小表也比较大，Hash表的结果非常大，你的内存放不下，这时就可能会写到你的磁盘中去，就会导致性能急剧下降。在这个时候就要提高work_mem。hash join的时间消耗是什么？我们的外层Cost请求，加上内层一个请求就可以了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;另外一个连接方式就是Nested Loop循环扫描&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，在这个扫描上写了两个循环去扫描。一般在优化的时候，特别是用PG数据库，要去重点看Nested Loop是不是合理。那么什么时候用Nested Loop呢？就是小表和大表进行关联的时候，小表作为驱动表，那大表作为下面的内层表会比较合理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先它会确定一个驱动表，另外是一个内层的表，驱动表每一行与它里面那张表进行一个查询，一个嵌套循环查询比较，代价非常高。就比如每次都是外层的表，乘以外面的条件消耗，这一看就比较大了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;像这种情况，每次扫描时，外层的表每次在驱动时它会去扫描层内层的表，这样效率非常低。而如果内层的表它结果集是相对固定的，那么就可以扫描一次把它做一个物化，下次再循环比较的时就不用再去查询里面的表，类似于Hash join。Hash join是做什么的呢？它前面也是一个Loop，只是把内存的表建立一个Hash表，这样去扫描就会快很多。Materialize就是这么一个优化的方向，这个也依赖于我们的work_mem。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;最后一种连接方式叫Merge join，主要针对于数据量不是特别大的情况下，而且两个表如果结构相似，做好排序，这时反而会比散列连接会好一点&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;示例中原来是走了一个Nested Loop，我们把索引删除，它就去走了Merge join。一般对于这种数值比较效率还可以，因为排序数值效率是高一点。如果是字符串一类，走Merge join效率会更低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5614035087719298&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XS2esJew19aHaS87SzZrPVkeevKicdibsrS1KQKNFpBwgZIr8dHwcnibDTDc2tC6iamjboAdibMA6YWSGDNOBHRobKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1197&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看一下具体的实现，它是先将两个表进行一个排序。Id 1等于1先比较完后，再去比较Id等于2时，就不会再去比较Id1等于1的位置块，会直接从另外一张表的2开始去比较。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;做一个简单比较，Hash join是将一个小表做为一个内存表做Hash运算，将列数据根据hash值放到Hash行列表中，再从另外一张表去抽取记录做Hash运算找到匹配的值，一般是小表做Hash表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Nested Loop是一张表读取数据，访问另外一张表做匹配。Nested Loop在关联表比较小的时候效率最高。小表做驱动，比如这个表只有百来行，而大表很大，循环100次查询，大表会进行索引扫描，相对会快很多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Merge join如果数据做好了排序，而且是数字类型排序，Merge join可能反而比Hash要快。但一般来说如果数据量比较大，Hash基本会比Merge join更快。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外是关联相关参数一般以Enable开头。刚刚那几种连接Nested Loop、Merge join、Hash join、Bitmap Scan都是可以去控制的，参数可以是session级别控制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.56&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XS2esJew19aHaS87SzZrPVkeevKicdibsrwAszib2NsdHagRW7hlnl4s8ZSe7LTogLPia7YXib9TYyXurBTP8C7vEkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;查看执行计划首先是看扫描方式和连接方式，不论再怎么复杂，都是通过这两个进行组合。一般是看它在扫描和关联是不是合理的。这两个判断之后，再去看它的条件是不是合理，或需不需要改写。有了执行计划之外，在看具体执行时间，就要加上Explain Analyze来看具体执行时间。这里有一个不一样的点，在这里有了一个实际执行时间，这个时间是真实时间。可以很精确知道每一步花费时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Analyze之外，还有一些其它参数，可以通过\H Explain的方式去查看详细的语法，有verbos显示具体执行日志，还有Cost消耗、Settings显示特殊设置，buffers内存的一些分配情况。wal、Timing时间，Summary，format输出的格式TXT或者xml、json。如果加上，它的显示信息会多很多。主要是buffers比较有用，显示说你申请了多少，现在多少磁盘块是要命中，多少是进行读取的。在第二次查询的时候，它的磁盘读取会变少，第一次读取是94块，第二次50块块。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了上述内容，还有一个日志参数。我们的log_planner_stats可以输出你的执行计划到日志文件中，Oracle的执行计划是从表里去看，而我们PG是没有的。那么怎么办？可以通过一些参数去控制，导到日志里来。就目前这个日志它是输入到运行日志里的，没有单独去进行记录。当然这个也是我们优化的一个方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过设置这些参数，把这里日志打印出来，显示出执行计划，语法分析、语义分析、重写，这几个阶段它会显示出来。如果开启了执行计划状态，会把这些进行打印。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5584307178631052&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XS2esJew19aHaS87SzZrPVkeevKicdibsrmNMYXDhYm2n93KRTLeTTtDIhfV75Xk0wu7B4aiaHrKB06ibss7U9iaDfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1198&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;最后看执行计划之外，从执行计划去反推SQL优化方向。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;从最底层一个扫描去入手，要尽量走索引扫描。另外索引扫描这里有很多方式，就是看它是否是合理索引，要看类型是不是选择合理的。比如数字类型、字符串类型，我们选用gin索引，还是一些btree索引。PG默认是btree索引，但btree索引不是所有类型和操作符都会适用。另外还需要减少不必要的索引、避免单条SQL插入，要单条变为批量进行插入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面说执行计划表连接类型是不是正确合理，另外要从SQL本身进行入手，我们目的是为了减少它的消耗。如果SQL语句比较复杂，而扫描类型已经无法改动，那这时只能去改写SQL语句，尽量减少嵌套，减少子查询。还可以通过物化视图临时表，去做SQL拆分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5608333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XS2esJew19aHaS87SzZrPVkeevKicdibsrGx8USXCRpp026H7VBuAibCLIQcUDib4rtsk0gIqt9r2c0b7jmrkELY3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;尽量把in语法用Exits方式做连接。另外还要注意一些类型的转换失真，在扫描时，如果它可以走索引扫描，结果走了全面扫描，可能是转换失真了，比如说一个in类型，结果输入是一个字符串类型，它有可能会转换失败，只能走全面扫描，不能索引。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外从数据库参数来入手，就需要精确的统计信息，我们在生成执行计划时，可能autovacuum没有去执行，也可能统计信息落后，那么执行计划就是错误的。这时候就要对应表作为一个analyze。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后就是干涉执行计划，&lt;strong&gt;干涉执行计划有两种方式&lt;/strong&gt;，除了前面的enable几个参数，我们的pg_hint_plan插件也可以做一些Hint控制。还有一些新参数调整，例如调整work_mem、temp_buffers、shared_buffers等参数。还有一些连接池的使用，我们操作系统参数、硬件的性能参数调整等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实往往数据库优化，除了这些以外，还有我们去看操作系统的一些硬件性能，比如CPU是不是Performance模式，磁盘调度方式是不是最优的，网卡Bond模式等其他参数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;﹀&lt;/span&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;﹀&lt;/span&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;﹀&lt;/span&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;-- 更多精彩 --&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend-list&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247499292_1&quot; data-recommend-article-time=&quot;1641994200&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/XS2esJew19bZ0mY1Hb1K6MmebMYxNNgQ2oDYmm1gfFKxgia5LcyhXLU0XP2dCYakLiaW7aKB6t4IxBm1dyiaIvJ3A/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;开源数据库TDSQL PG版再升级：分区表性能提升超10倍&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=Mzg4NjA4NTAzNQ==&amp;amp;mid=2247499292&amp;amp;idx=1&amp;amp;sn=33e3f17b1f81cce6fb00900e6bfa8e31&amp;amp;chksm=cf9dbad8f8ea33ce7682e58110ab5d71a23206c85250662b58ca97c6084de0ab6e9f987abbc9#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg4NjA4NTAzNQ==&amp;amp;mid=2247499292&amp;amp;idx=1&amp;amp;sn=33e3f17b1f81cce6fb00900e6bfa8e31&amp;amp;chksm=cf9dbad8f8ea33ce7682e58110ab5d71a23206c85250662b58ca97c6084de0ab6e9f987abbc9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XS2esJew19bZ0mY1Hb1K6MmebMYxNNgQ2oDYmm1gfFKxgia5LcyhXLU0XP2dCYakLiaW7aKB6t4IxBm1dyiaIvJ3A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;开源数据库TDSQL PG版再升级：分区表性能提升超10倍&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247498646_1&quot; data-recommend-article-time=&quot;1639402150&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/XS2esJew19aJwKDQHRYckcTtXRnfMqmKXoUeNWzicBwL9SuibsOu6u76LicugUBkAJzvPaZzibyCoOvXEPPk2iatm0A/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;一文详解TDSQL PG版Oracle兼容性实践&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=Mzg4NjA4NTAzNQ==&amp;amp;mid=2247498646&amp;amp;idx=1&amp;amp;sn=44e5b262bf67d1269b5fabd579a7c82c&amp;amp;chksm=cf9dbf52f8ea3644179ef0732e56b2acf9c8fed12c0963cf7ef635efb698c3dc47c04aa69382#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg4NjA4NTAzNQ==&amp;amp;mid=2247498646&amp;amp;idx=1&amp;amp;sn=44e5b262bf67d1269b5fabd579a7c82c&amp;amp;chksm=cf9dbf52f8ea3644179ef0732e56b2acf9c8fed12c0963cf7ef635efb698c3dc47c04aa69382&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XS2esJew19aJwKDQHRYckcTtXRnfMqmKXoUeNWzicBwL9SuibsOu6u76LicugUBkAJzvPaZzibyCoOvXEPPk2iatm0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;一文详解TDSQL PG版Oracle兼容性实践&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓&lt;/strong&gt;&lt;strong&gt;↓&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;点击&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;，了解更多优惠&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fb6a81854a10cb772f88b60613b12819</guid>
<title>如何从容应对复杂性</title>
<link>https://toutiao.io/k/e5pmody</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件的复杂性，是一个很泛的概念&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;但是一直都是开发过程中的一个难题，本文旨在在探讨如何去从容应对复杂性&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件的熵增、构造定律&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;熵增定律&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;熵的概念最早起源于物理学，热力学第二定律（又称“熵增定律”），表明了在自然过程中，一个孤立的系统总是从最初的集中、有序的排列状态，趋向于分散、混乱和无序；当熵达到最大时，系统就会处于一种静寂状态。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件系统亦是如此， 在软件系统的维护过程中。软件的生命力会从最初的集中、有序的排列状态，逐步趋向复杂、无序状态，直到软件不可维护而被迫下线或重构。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;2zm7fr&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:228805,&amp;quot;width&amp;quot;:804,&amp;quot;height&amp;quot;:596,&amp;quot;rotation&amp;quot;:0,&amp;quot;src&amp;quot;:&amp;quot;/oss/getResourceRedirectUrl?fileId=neweditor%2F821aa376-2772-4bd8-af00-109c8a74b517.png&amp;amp;expire=3600000&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;  &amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;构造定律&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;自然界是如何应对这复杂性？&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这在物理中被称为构造定律 （Constructal Law), &amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;是由Adrian Bejan于1995提出的：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;For a finite-size system to persist in time (to live), it must evolve in such a way that it provides easier access to the imposed currents that flow through it.&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;对于一个有限大小的持续活动的系统，它必须以这种方式发展演进：它提供了一种在自身元素之间更容易访问的流动方式。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这个定理在自然界中比比皆是，最典型的比如水循环系统，海水蒸发到大气，下雨时降落在地面，一部分渗入地面流入江河，一部分继续蒸发，不断循环。这种自发性质的设计反映了这一趋势：他们允许实体或事物更容易地流动 - 以最少的能量消耗到达最远的地方，就连街道和道路这些人为地构建物体，往往也是有排序的模式，以提供最大的灵活性。&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如何应对软件系统的复杂性？&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件系统的复杂性往往是被低估的。复杂越高，开发人员会感到不安。对其的理解认知负荷代价就越高，我们就更不快乐。真正的挑战是在构建我们的系统时要保持其有序以及工程师的生产方式。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Ousterhout教授在《软件设计的哲学》书中提到&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;#F5222D&amp;quot;,&amp;quot;sz&amp;quot;:14,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件设计的最大目标，就是降低复杂度（complexity）&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;就是设计符合业务的构造定律的演进方式，一种可以以最小的开发维护成本， 使业务更快更好的流动发展的方式&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;/oss/getResourceRedirectUrl?fileId=neweditor%2F8a3a48cc-d47c-4a43-a9c8-1d6d858a2321.png&amp;amp;expire=3600000&amp;quot;,&amp;quot;width&amp;quot;:763,&amp;quot;height&amp;quot;:377,&amp;quot;rotation&amp;quot;:0},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件复杂性来自哪里， 如何解决？&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;4p78uk&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;软件复杂性.jpeg&amp;quot;,&amp;quot;size&amp;quot;:14064,&amp;quot;width&amp;quot;:845,&amp;quot;height&amp;quot;:220,&amp;quot;rotation&amp;quot;:0,&amp;quot;src&amp;quot;:&amp;quot;/oss/getResourceRedirectUrl?fileId=neweditor%2F8a0a654f-81e5-4c9b-89a2-9308971f8a0e.jpeg&amp;amp;expire=3600000&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; &amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不确定性的来源&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1、业务的不确定性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2、技术的不确定性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3、人员流动的不确定性&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如何面对不确定性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面对外部的确定性，转化为&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;#FE0300&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;内核的确定性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面对外部的不确定性，找到&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;#FE0300&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;稳定的内核基础&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1、专注问题域&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当下互联网发展速度是迅猛的， 软件的形态也在不断的变化演进&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面对未来的业务及变化，横向业务与纵向业务的发展都是不确定性的&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Robert C. Martin提到的&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(64, 64, 64)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;BDUF&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(64, 64, 64)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;永远不要想着在开始就设计好了全部的事情(big design up front)&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;一定要&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;#F5222D&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;避免过度设计&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;除非能够十分确认的可预见变化， 业务边界&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;否则专注解决当前1-2年内业务变化设计, 讲好当下的用户故事&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;专注解决眼前的问题域， 面向不确定设计，增量敏捷开发&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2、确认稳定的系统内核&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;随着业务的变化、系统设计也要持续演进升级。没有一开始就完美的架构， 好的架构设计一定演化来的，不是一开始就设计出来的。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;一个健康公司的成长，业务横向、纵向会发展的会越来越复杂，支持业务的系统也一定会越来越复杂。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;系统演进过程中的成本，会受到最开始的设计、系统最初的内核影响的。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面对外部业务的不确定性， 技术的不确定性，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;外部依赖的不确定性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;一个稳定的内核应该尽量把外部的不确定性隔离&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1、业务与技术的隔离&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;#FE0300&amp;quot;,&amp;quot;sz&amp;quot;:16,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;以业务为核心&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，分离业务复杂度和技术复杂度。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2、内部系统与外部依赖的隔离&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3、系统中常变部分与不常变部分的隔离&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;4、隔离复杂性（&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;把复杂性的部分隔离在一个模块，尽量不与其他模块互动）&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;无序性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;系统和代码像多个线团一样散落一地一样,&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;混乱不堪，毫无头绪。&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如何面对无序性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1、统一认知（秩序化）&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2、系统清晰明了的结构（结构化）&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3、业务开发流程化（标准化）&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;注：这里说的流程化并非指必须使用类似&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;BPM的流程编排系统，&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;而是指对于一个需求，业务开发有一定的顺序， 有规划的先做一部分事情，开发哪一个模块再去做剩下的工作，是可以流程化的&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;规模&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;业务规模的膨胀以及开发团队规模的膨胀&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;都会带来系统的复杂性提升&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如何面对规模膨胀带来的复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1、业务隔离， 分而治之&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2、专注产品核心竞争力的发展&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3、场景分层&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;#FE0300&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;关键场景&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;投入更多的开发、测试资源、业务资源(比如单元测试覆盖率在90%以上)在关键场景， &amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;普通场景&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;更快，更低成本、更少资源投入地完成普通场景的迭代&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;认知成本&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;是指开发人员需要多少知识才能完成一项任务。&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在引入新的变化时，要考虑到带来的好处是否大于系统认知成本的提升&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;比如：之前提到的BPM流程编排引擎，如果对系统带来的好处不够多也是增加认知成本的一种&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不合适的设计模式也&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;是增加认知成本的一种&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;前台同学吐槽的星环&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;比较高的学习成本， 也是认知成本的一种&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如何降低认知成本&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1、系统与现实业务更自然真实的映射，对业务抽象建模&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;/oss/getResourceRedirectUrl?fileId=neweditor%2Fb9409356-2c95-4ffa-9ebe-d7e52250d4a1.png&amp;amp;expire=3600000&amp;quot;,&amp;quot;width&amp;quot;:729,&amp;quot;height&amp;quot;:260,&amp;quot;rotation&amp;quot;:0},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(77, 77, 77)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件工程师实际上只在做一件事情，即把现实中的问题搬到计算机上，通过信息化提升生产力。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2、代码的含义清晰，不模糊&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3、代码的整洁度&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;4、系统的有序性， 架构清晰&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;5、避免过度设计&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;6、减少复杂、重复概念， 降低学习成本&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;7、谨慎引入会带来系统复杂性的变化&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应对复杂性的利器&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;领域驱动设计——DDD&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;领域驱动设计(DDD) &amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DDD是把业务模型翻译成系统架构设计的一种方式, 领域模型是对业务模型的抽象。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不是所有的业务服务都合适做DDD架构，DDD合适产品化，可持续迭代，业务逻辑足够复杂的业务系统，小规模的系统与简单业务不适合使用，毕竟相比较于MVC架构，认知成本和开发成本会大不少&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;但是DDD里面的一些战略思想我认为还是较为通用的&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1、对通用语言的提炼和推广&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;清晰语言认知， 比如之前在详情装修系统中，&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ItemTemplate : 表示当前具体的装修页面&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ItemDescTemplate、Template，两个都能表示模板概概念&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;刚开始接触这块的时候比较难理解这一块逻辑&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;之后在负责设计详情编辑器大融合这个项目时第一件事就是团队内先重新统一认知&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;装修页面统一使用 —— Page概念&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;模板统一使用 —— Template概念&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不将模板和页面的概念糅杂在一起，含糊不清&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;避免重复和混乱的概念定义&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2、贫血模型和充血模型&amp;quot;]]],[&amp;quot;h4&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2.1 贫血模型&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;贫血模型的&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;基本特征是：它第一眼看起来还真像这么回事儿。项目中有许多对象，它们的命名都是根据领域模型来的。然而当你真正检视这些对象的行为时，会发现它们基本上没有任何行为，仅仅是一堆getter/setter方法，&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这些贫血对象在设计之初就被定义为只能包含数据，不能加入领域逻辑；&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;所有的业务逻辑是放在所谓的业务层（xxxService, xxxManager对象中)，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;需要使用这些模型来传递数据。&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;@Data\npublic class Person {\n    /**\n     * 姓名\n     */\n    private String name;\n\n    /**\n     * 年龄\n     */\n    private Integer age;\n\n    /**\n     * 生日\n     */\n    private Date birthday;\n\n    /**\n     * 当前状态\n     */\n    private Stauts stauts;\n}&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;public class PersonServiceImpl implements PersonService {\n    \n    public void sleep(Person person) {\n        person.setStauts(SleepStatus.get());\n    }\n\n    public void setAgeByBirth(Person person) {\n        Date birthday = person.getBirthday();\n        if (currentDate.before(birthday)) {\n            throw new IllegalArgumentException(\&amp;quot;The birthday is before Now,It&#x27;s unbelievable\&amp;quot;);\n        }\n        int yearNow = cal.get(Calendar.YEAR);\n        int dayBirth = bir.get(Calendar.DAY_OF_MONTH);\n        /*大概计算， 忽略月份等，年龄是当前年减去出生年*/\n        int age = yearNow - yearBirth;\n        person.setAge(age);\n    }\n}\n}&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;public class WorkServiceImpl implements WorkService{\n\n    public void code(Person person) {\n        person.setStauts(CodeStatus.get());\n    }\n\n}&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这一段代码就是贫血对象的处理过程&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Person类， 通过PersonService、WorkingService去控制Person的行为&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;第一眼看起来像是没什么问题&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;但是真正去思考整个流程&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;WorkingService， PersonService到底是什么样的存在&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;与真实世界逻辑相比， 过于抽象&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;基于贫血模型的传统开发模式，将数据与业务逻辑分离，违反了 OOP 的封装特性，实际上是一种面向过程的编程风格。但是，现在几乎所有的 Web 项目，都是基于这种贫血模型的开发模式，甚至连 Java Spring 框架的官方 demo，都是按照这种开发模式来编写的。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面向过程编程风格有种种弊端，比如，数据和操作分离之后，数据本身的操作就不受限制了。任何代码都可以随意修改数据。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h4&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2.2 充血模型&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;充血模型是一种有行为的模型，模型中状态的改变只能通过模型上的行为来触发，同时所有的约束及业务逻辑都收敛在模型上。&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;@Data\npublic class Person extends Entity {\n    /**\n     * 姓名\n     */\n    private String name;\n\n    /**\n     * 年龄\n     */\n    private Integer age;\n\n    /**\n     * 生日\n     */\n    private Date birthday;\n\n    /**\n     * 当前状态\n     */\n    private Stauts stauts;\n\n    public void code() {\n        this.setStauts(CodeStatus.get());\n    }\n    \n    public void sleep() {\n        this.setStauts(SleepStatus.get());\n    }\n    \n    public void setAgeByBirth() {\n        Date birthday = this.getBirthday();\n        Calendar currentDate = Calendar.getInstance();\n        if (currentDate.before(birthday)) {\n            throw new IllegalArgumentException(\&amp;quot;The birthday is before Now,It&#x27;s unbelievable\&amp;quot;);\n        }\n        int yearNow = currentDate.get(Calendar.YEAR);\n        int yearBirth = birthday.getYear();\n        /*粗略计算， 忽略月份等，年龄是当前年减去出生年*/\n        int age = yearNow - yearBirth;\n        this.setAge(age);\n    }\n        \n}&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h4&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:10.666666666666666,&amp;quot;after&amp;quot;:10.666666666666666,&amp;quot;line&amp;quot;:0.8529411764705882}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2.3 贫血模型和充血模型的区别&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;wrap&amp;quot;:false},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;/**\n * 贫血模型\n */\npublic class Client {\n\n    @Resource\n    private PersonService personService;\n\n    @Resource\n    private WorkService workService;\n\n    public void test() {\n        Person person = new Person();\n        personService.setAgeByBirth(person);\n        workService.code(person);\n        personService.sleep(person);\n    }\n}\n\n\n/**\n * 充血模型\n */\npublic class Client {\n\n    public void test() {\n        Person person = new Person();\n        person.setAgeByBirth();\n        person.code();\n        person.sleep();\n    }\n}&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;上面两段代码，&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;很明显第二段的认知成本更低，  这在满是Service，Manage 的系统下更为明显&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Person的行为交由自己去管理， 而不是交给各种Service去管理&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;贫血模型是&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;事务脚本模式&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;贫血模型相对简单，模型上只有数据没有行为，业务逻辑由xxxService、xxxManger等类来承载，相对来说比较直接，针对简单的业务，贫血模型可以快速的完成交付，但后期的维护成本比较高，很容易变成我们所说的面条代码。\n&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;充血模型是领域模型模式&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;充血模型的实现相对比较复杂，但所有逻辑都由各自的类来负责，职责比较清晰，方便后期的迭代与维护。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面向对象设计主张将数据和行为绑定在一起也就是充血模型，而贫血领域模型则更像是一种面向过程设计，很多人认为这些贫血领域对象是真正的对象，从而彻底误解了面向对象设计的涵义。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Martin Fowler 曾经和 Eric Evans 聊天谈到它时，都觉得这个模型似乎越来越流行了。作为领域模型的推广者，他们觉得这不是一件好事，极力反对这种做法。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;贫血领域模型的根本问题是，它引入了领域模型设计的所有成本，却没有带来任何好处。最主要的成本是将对象映射到数据库中，从而产生了一个O/R（对象关系）映射层。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;只有当你充分使用了面向对象设计来组织复杂的业务逻辑后，这一成本才能够被抵消。如果将所有行为都写入到Service对象，那最终你会得到一组事务处理脚本，从而错过了领域模型带来的好处。而且当业务足够复杂时， 你将会得到一堆爆炸的事务处理脚本。&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3、对业务的理解和抽象&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;sz&amp;quot;:11.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;限定业务边界，&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;对业务进行与现实更自然的理解和抽象&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;数据模型与业务模型隔离&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;把业务映射成为领域模型沉淀在系统中&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;4、结构与防腐层&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;/oss/getResourceRedirectUrl?fileId=neweditor%2F53ca5d18-3bc3-4fc1-8670-d5da79c1267c.png&amp;amp;expire=3600000&amp;quot;,&amp;quot;width&amp;quot;:580,&amp;quot;height&amp;quot;:559,&amp;quot;rotation&amp;quot;:0},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;User &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Interfaces&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;负责对外交互, &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;提供对外远程接口&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;application&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用程序执行其任务所需的代码。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;它协调域层对象以执行实际任务。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;该层适用于跨事务、安全检查和高级日志记录。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;domain&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;负责表达业务概念&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;对业务的分解，抽象，建模 &amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;业务逻辑、程序的核心。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;#F5222D&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;防腐层接口&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;放在这里&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;infrastucture&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(18, 18, 18)&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;为其他层提供通用的技术能力&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。如repository的implementation（ibatis，hibernate, nosql），中间件服务等&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;anti-corruption layer的implementation &amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;#F5222D&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;防腐层实现&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;放在这里。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;防腐层的作用：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.8)&amp;quot;,&amp;quot;sz&amp;quot;:12,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;封装三方服务&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;隔离内部系统对外部的依赖&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:15,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;5、让隐性概念显性化&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;文档与注释可能会失去实时性（文档、注释没有人持续维护）&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;但是线上生产代码是业务逻辑最真实的展现&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;减少代码中模糊的地方&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;让业务逻辑显性化体现出来&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;提升代码清晰度&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;if (itemDO != null &amp;amp;&amp;amp; MapUtils.isNotEmpty(itemDO.getFeatures()) &amp;amp;&amp;amp; itemDO.getFeatures().containsKey(ITEM_PC_DESCRIPTION_PUSH)) {\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, \&amp;quot;\&amp;quot; + templateId);\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, \&amp;quot;\&amp;quot; + pcContent.hashCode());\n} else {\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, \&amp;quot;\&amp;quot; + templateId);\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_WL_TEMPLATEID, \&amp;quot;\&amp;quot; + templateId);\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, \&amp;quot;\&amp;quot; + pcContent.hashCode());\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_WL_PUSH, \&amp;quot;\&amp;quot; + content.hashCode());\n}&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;比如这一段代码就把判断里的业务逻辑隐藏了起来&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这段代码其实的业务逻辑是这样， 判断商品是否有PC装修内容&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如果有做一些操作， 如果没有做一些操作&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;将hasPCContent 这个逻辑表现出来， 一眼就能看出来大概的业务逻辑&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;让业务逻辑显现化，能让代码更清晰&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可以改写成这样&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;boolean hasPCContent = itemDO != null &amp;amp;&amp;amp; MapUtils.isNotEmpty(itemDO.getFeatures()) &amp;amp;&amp;amp; itemDO.getFeatures().containsKey(ITEM_PC_DESCRIPTION_PUSH);\nif (hasPCContent) {\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, \&amp;quot;\&amp;quot; + templateId);\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, \&amp;quot;\&amp;quot; + pcContent.hashCode());\n} else {\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, \&amp;quot;\&amp;quot; + templateId);\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_WL_TEMPLATEID, \&amp;quot;\&amp;quot; + templateId);\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, \&amp;quot;\&amp;quot; + pcContent.hashCode());\n   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_WL_PUSH, \&amp;quot;\&amp;quot; + content.hashCode());\n}&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;简单设计原则——《Clean Code》&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1、保持系统最大可测试&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;只要系统可测试并且越丰富的单元测试越会导向保持类短小且目的单一的设计方案，遵循单一职责的类，测试起来比较简单&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;遵循有关编写测试并持续运行测试的简单、明确规则，系统就会更贴近OO低偶尔度，高内聚度的目标。编写测试越多，就越会遵循DIP之类的规则，编写最大可测试可改进并走向更好的系统设计&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2、避免重复&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(55, 55, 55)&amp;quot;,&amp;quot;sz&amp;quot;:11.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;重复是拥有良好设计系统的大敌。它代表着额外的工作、额外的风险和额外且不必要的复杂度。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;除了雷同的代码，功能类似的方法也可以进行包装减少重复，&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(55, 55, 55)&amp;quot;,&amp;quot;sz&amp;quot;:11.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;“小规模复用”可大量降低系统复杂性。要想实现大规模复用，必须理解如何实现小规模复用。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;共性的抽取也会使代码更好的符合单一职责原则&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3、更清晰的表达开发者的意图&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件项目的主要成本在于长期维护，当系统变得越来越复杂，开发者就需要越来越多的时间来理解他，而且也极有可能误解。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;所以作者需要将代码写的更清晰：选用好名称、保持函数和类的短小、采用标准命名法、标准的设计模式名，编写良好的单元测试。用心是最珍贵的资源。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;4、尽可能减少类和方法&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如果过度使用以上原则，为了保持类的函数短小，我们可能会造出太多细小的类和方法。所以这条规则也主张函数和类的数量要少。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如应当为每个类创建接口、字段和行为必须切分到数据类和行为类中。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应该抵制这类教条，采用更实用的手段。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;目标是在保持函数和类短小的同时，保持系统的短小精悍。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不过这是优先级最低的一条。更重要的是测试，消除重复和清晰表达。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;最后&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;总而言之，做业务开发其实一点也不简单，面对不确定性的问题域，复杂的业务变化，&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如何更好的理解和抽象业务，如何更优雅的应对复杂性，一直都是软件开发的一个难题。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在对抗软件熵增，寻找对抗软件复杂性，符合业务的构造定律的演进方式，我们一直都在路上。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:14.666666666666668,&amp;quot;after&amp;quot;:14.666666666666668,&amp;quot;line&amp;quot;:0.8529411764705882}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:20,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;参考&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;[1]  《&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(17, 17, 17)&amp;quot;,&amp;quot;fonts&amp;quot;:{&amp;quot;ascii&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;hAnsi&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;cs&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;eastAsia&amp;quot;:&amp;quot;Helvetica&amp;quot;},&amp;quot;sz&amp;quot;:10,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Domain-Driven Design&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;》 ：&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://book.douban.com/subject/1629512/&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;https://book.douban.com/subject/1629512/&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;[2] 《&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(17, 17, 17)&amp;quot;,&amp;quot;fonts&amp;quot;:{&amp;quot;ascii&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;hAnsi&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;cs&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;eastAsia&amp;quot;:&amp;quot;Helvetica&amp;quot;},&amp;quot;sz&amp;quot;:10,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Implementing Domain-Driven Design&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;》 ：&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://book.douban.com/subject/25844633/&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;https://book.douban.com/subject/25844633/&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;[3] 《&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(17, 17, 17)&amp;quot;,&amp;quot;fonts&amp;quot;:{&amp;quot;ascii&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;hAnsi&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;cs&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;eastAsia&amp;quot;:&amp;quot;Helvetica&amp;quot;},&amp;quot;sz&amp;quot;:10,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Clean Code》：&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://book.douban.com/subject/4199741/&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;https://book.douban.com/subject/4199741/&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(17, 17, 17)&amp;quot;,&amp;quot;fonts&amp;quot;:{&amp;quot;ascii&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;hAnsi&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;cs&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;eastAsia&amp;quot;:&amp;quot;Helvetica&amp;quot;},&amp;quot;sz&amp;quot;:10,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;[4]  《&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(73, 73, 73)&amp;quot;,&amp;quot;fonts&amp;quot;:{&amp;quot;ascii&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;hAnsi&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;cs&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;eastAsia&amp;quot;:&amp;quot;Helvetica&amp;quot;},&amp;quot;sz&amp;quot;:10,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A Philosophy of Software Design》 ：&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://book.douban.com/subject/30218046/&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;https://book.douban.com/subject/30218046/&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgb(73, 73, 73)&amp;quot;,&amp;quot;fonts&amp;quot;:{&amp;quot;ascii&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;hAnsi&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;cs&amp;quot;:&amp;quot;Helvetica&amp;quot;,&amp;quot;eastAsia&amp;quot;:&amp;quot;Helvetica&amp;quot;},&amp;quot;sz&amp;quot;:10,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;‍&lt;/span&gt;软件的复杂性，是一个很泛的概念。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是一直都是开发过程中的一个难题，本文旨在探讨如何去从容应对复杂性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;01&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;strong&gt;软件的熵增、构造定律&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;熵增定律&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;熵的概念最早起源于物理学，热力学第二定律（又称“熵增定律”），表明了在自然过程中，一个孤立的系统总是从最初的集中、有序的排列状态，趋向于分散、混乱和无序；当熵达到最大时，系统就会处于一种静寂状态。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;软件系统亦是如此， 在软件系统的维护过程中。软件的生命力会从最初的集中、有序的排列状态，逐步趋向复杂、无序状态，直到软件不可维护而被迫下线或重构。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;429&quot; data-backw=&quot;579&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7415565345080763&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naLr4HM643NC0QVdy2veiclpKFvYa05uEPvHxCQ5Jo2Bn4WobQfQM8R2nnUI9bz27pSnyOURyJwcQcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;681&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;构造定律&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;自然界是如何应对这复杂性？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这在物理中被称为构造定律 （Constructal Law), &lt;/span&gt;&lt;span&gt;是由Adrian Bejan于1995提出的：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;For a finite-size system to persist in time (to live), it must evolve in such a way that it provides easier access to the imposed currents that flow through it.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于一个有限大小的持续活动的系统，它必须以这种方式发展演进：它提供了一种在自身元素之间更容易访问的流动方式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个定理在自然界中比比皆是，最典型的比如水循环系统，海水蒸发到大气，下雨时降落在地面，一部分渗入地面流入江河，一部分继续蒸发，不断循环。这种自发性质的设计反映了这一趋势：他们允许实体或事物更容易地流动 - 以最少的能量消耗到达最远的地方，就连街道和道路这些人为地构建物体，往往也是有排序的模式，以提供最大的灵活性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;02&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;strong&gt;如何应对软件系统的复杂性？&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;软件系统的复杂性往往是被低估的。复杂越高，开发人员会感到不安。对其的理解认知负荷代价就越高，我们就更不快乐。真正的挑战是在构建我们的系统时要保持其有序以及工程师的生产方式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Ousterhout教授在《软件设计的哲学》书中提到：&lt;/span&gt;&lt;span&gt;软件设计的最大目标，就是降低复杂度（complexity）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;就是设计符合业务的构造定律的演进方式，一种可以以最小的开发维护成本， 使业务更快更好的流动发展的方式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;284&quot; data-backw=&quot;579&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.49226006191950467&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naLr4HM643NC0QVdy2veiclpKC6D45xbj7MrIQjOgolsN7SC7dfwqCAGn9Yunb561AyDDO2icT5PwV1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;646&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;03&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;strong&gt;软件复杂性来自哪里， 如何解决？&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;169&quot; data-backw=&quot;579&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.29253731343283584&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naLr4HM643NC0QVdy2veiclpKAEmdoucWPuHkicMn9r9kB7qTjvib7wbtPSOXCqh99D6JDwmB4ic8Wm3hA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;670&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;不确定性的来源&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、业务的不确定性&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、技术的不确定性&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、人员流动的不确定性&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;如何面对不确定性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;面对外部的确定性，转化为内核的确定性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;面对外部的不确定性，找到稳定的内核基础。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1、专注问题域&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当下互联网发展速度是迅猛的， 软件的形态也在不断的变化演进。&lt;/span&gt;&lt;span&gt;面对未来的业务及变化，横向业务与纵向业务的发展都是不确定性的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Robert C. Martin提到的BDUF，&lt;/span&gt;&lt;span&gt;永远不要想着在开始就设计好了全部的事情(big design up front)，&lt;/span&gt;&lt;span&gt;一定要避免过度设计。&lt;/span&gt;&lt;span&gt;除非能够十分确认的可预见变化， 业务边界，否则专注解决当前1-2年内业务变化设计, 讲好当下的用户故事，专注解决眼前的问题域。 面向不确定设计，增量敏捷开发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2、确认稳定的系统内核&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着业务的变化、系统设计也要持续演进升级。没有一开始就完美的架构， 好的架构设计一定演化来的，不是一开始就设计出来的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一个健康公司的成长，业务横向、纵向会发展的会越来越复杂，支持业务的系统也一定会越来越复杂。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;系统演进过程中的成本，会受到最开始的设计、系统最初的内核影响的。&lt;/span&gt;&lt;span&gt;面对外部业务的不确定性， 技术的不确定性，外部依赖的不确定性。一个稳定的内核应该尽量把外部的不确定性隔离。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务与技术的隔离。&lt;/span&gt;&lt;span&gt;以业务为核心，分离业务复杂度和技术复杂度。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;内部系统与外部依赖的隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;系统中常变部分与不常变部分的隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;隔离复杂性（把复杂性的部分隔离在一个模块，尽量不与其他模块互动）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;无序性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;系统和代码像多个线团一样散落一地一样，&lt;/span&gt;&lt;span&gt;混乱不堪，毫无头绪。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;04&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;如何面对无序性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、统一认知（秩序化）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、系统清晰明了的结构（结构化）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、业务开发流程化（标准化）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;注：这里说的流程化并非指必须使用类似BPM的流程编排系统，&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而是指对于一个需求，业务开发有一定的顺序， 有规划的先做一部分事情，开发哪一个模块再去做剩下的工作，是可以流程化的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;05&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;规模&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;业务规模的膨胀以及开发团队规模的膨胀，&lt;/span&gt;&lt;span&gt;都会带来系统的复杂性提升。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;06&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;如何面对规模膨胀带来的复杂性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、业务隔离， 分而治之&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、专注产品核心竞争力的发展&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、场景分层&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1、关键场景&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;投入更多的开发、测试资源、业务资源(比如单元测试覆盖率在90%以上)在关键场景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2、普通场景&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;更快，更低成本、更少资源投入地完成普通场景的迭代&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;07&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;认知成本&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;是指开发人员需要多少知识才能完成一项任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在引入新的变化时，要考虑到带来的好处是否大于系统认知成本的提升，&lt;/span&gt;&lt;span&gt;比如：之前提到的BPM流程编排引擎，如果对系统带来的好处不够多也是增加认知成本的一种。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不合适的设计模式也是增加认知成本的一种，前台同学吐槽的中台架构比较高的学习成本， 也是认知成本的一种。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;08&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;如何降低认知成本&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、系统与现实业务更自然真实的映射，对业务抽象建模&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;208&quot; data-backw=&quot;579&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3605769230769231&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naLr4HM643NC0QVdy2veiclpKYKO1o2iaCXNMx29C1sDUw7SpMhqQ4AsAZQGyGV2BMJ1YmwNXaNPJuFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;624&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;软件工程师实际上只在做一件事情，即把现实中的问题搬到计算机上，通过信息化提升生产力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、代码的含义清晰，不模糊&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、代码的整洁度&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4、系统的有序性， 架构清晰&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5、避免过度设计&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6、减少复杂、重复概念， 降低学习成本&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;7、谨慎引入会带来系统复杂性的变化&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;04&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;strong&gt;应对复杂性的利器&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;领域驱动设计——DDD&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;DDD是把业务模型翻译成系统架构设计的一种方式, 领域模型是对业务模型的抽象。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不是所有的业务服务都合适做DDD架构，DDD合适产品化，可持续迭代，业务逻辑足够复杂的业务系统，小规模的系统与简单业务不适合使用，毕竟相比较于MVC架构，认知成本和开发成本会大不少。&lt;/span&gt;&lt;span&gt;但是DDD里面的一些战略思想我认为还是较为通用的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1、对通用语言的提炼和推广&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;清晰语言认知， 比如之前在详情装修系统中：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ItemTemplate : 表示当前具体的装修页面&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ItemDescTemplate、Template，两个都能表示模板概概念&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;刚开始接触这块的时候比较难理解这一块逻辑，&lt;/span&gt;&lt;span&gt;之后在负责设计详情编辑器大融合这个项目时第一件事就是团队内先重新统一认知。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;装修页面统一使用 —— Page概念&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;模板统一使用 —— Template概念&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不将模板和页面的概念糅杂在一起，含糊不清，&lt;/span&gt;&lt;span&gt;避免重复和混乱的概念定义。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2、贫血模型和充血模型&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;1）贫血模型&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;贫血模型的基本特征是：它第一眼看起来还真像这么回事儿。项目中有许多对象，它们的命名都是根据领域模型来的。然而当你真正检视这些对象的行为时，会发现它们基本上没有任何行为，仅仅是一堆getter/setter方法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些贫血对象在设计之初就被定义为只能包含数据，不能加入领域逻辑；所有的业务逻辑是放在所谓的业务层（xxxService, xxxManager对象中)，需要使用这些模型来传递数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Data&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Person {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    /**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     * 姓名&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private String name;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    /**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     * 年龄&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private Integer age;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    /**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     * 生日&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private Date birthday;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    /**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     * 当前状态&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private Stauts stauts;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class PersonServiceImpl implements PersonService {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void sleep(Person person) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        person.setStauts(SleepStatus.get());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void setAgeByBirth(Person person) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Date birthday = person.getBirthday();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        if (currentDate.before(birthday)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            throw new IllegalArgumentException(&quot;The birthday is before Now,It&#x27;s unbelievable&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        int yearNow = cal.get(Calendar.YEAR);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        int dayBirth = bir.get(Calendar.DAY_OF_MONTH);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        /*大概计算， 忽略月份等，年龄是当前年减去出生年*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        int age = yearNow - yearBirth;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        person.setAge(age);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class WorkServiceImpl implements WorkService{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void code(Person person) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        person.setStauts(CodeStatus.get());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这一段代码就是贫血对象的处理过程，&lt;/span&gt;&lt;span&gt;Person类， 通过PersonService、WorkingService去控制Person的行为，&lt;/span&gt;&lt;span&gt;第一眼看起来像是没什么问题，但是真正去思考整个流程。WorkingService， PersonService到底是什么样的存在？与真实世界逻辑相比， 过于抽象。基于贫血模型的传统开发模式，将数据与业务逻辑分离，违反了 OOP 的封装特性，实际上是一种面向过程的编程风格。但是，现在几乎所有的 Web 项目，都是基于这种贫血模型的开发模式，甚至连 Java Spring 框架的官方 demo，都是按照这种开发模式来编写的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;面向过程编程风格有种种弊端，比如，数据和操作分离之后，数据本身的操作就不受限制了。任何代码都可以随意修改数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;2）充血模型&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;充血模型是一种有行为的模型，模型中状态的改变只能通过模型上的行为来触发，同时所有的约束及业务逻辑都收敛在模型上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Data&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Person extends Entity {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    /**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     * 姓名&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private String name;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    /**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     * 年龄&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private Integer age;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    /**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     * 生日&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private Date birthday;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    /**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     * 当前状态&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private Stauts stauts;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void code() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        this.setStauts(CodeStatus.get());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void sleep() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        this.setStauts(SleepStatus.get());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void setAgeByBirth() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Date birthday = this.getBirthday();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Calendar currentDate = Calendar.getInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        if (currentDate.before(birthday)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            throw new IllegalArgumentException(&quot;The birthday is before Now,It&#x27;s unbelievable&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        int yearNow = currentDate.get(Calendar.YEAR);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        int yearBirth = birthday.getYear();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        /*粗略计算， 忽略月份等，年龄是当前年减去出生年*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        int age = yearNow - yearBirth;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        this.setAge(age);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h4&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span&gt;3）贫血模型和充血模型的区别&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; * 贫血模型&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Client {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Resource&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private PersonService personService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Resource&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private WorkService workService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void test() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Person person = new Person();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        personService.setAgeByBirth(person);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        workService.code(person);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        personService.sleep(person);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; * 充血模型&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Client {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void test() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Person person = new Person();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        person.setAgeByBirth();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        person.code();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        person.sleep();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;上面两段代码&lt;/span&gt;&lt;span&gt;很明显第二段的认知成本更低，  这在满是Service，Manage 的系统下更为明显，Person的行为交由自己去管理， 而不是交给各种Service去管理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;贫血模型是事务脚本模式&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;贫血模型相对简单，模型上只有数据没有行为，业务逻辑由xxxService、xxxManger等类来承载，相对来说比较直接，针对简单的业务，贫血模型可以快速的完成交付，但后期的维护成本比较高，很容易变成我们所说的面条代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;充血模型是领域模型模式&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;充血模型的实现相对比较复杂，但所有逻辑都由各自的类来负责，职责比较清晰，方便后期的迭代与维护。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;面向对象设计主张将数据和行为绑定在一起也就是充血模型，而贫血领域模型则更像是一种面向过程设计，很多人认为这些贫血领域对象是真正的对象，从而彻底误解了面向对象设计的涵义。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Martin Fowler 曾经和 Eric Evans 聊天谈到它时，都觉得这个模型似乎越来越流行了。作为领域模型的推广者，他们觉得这不是一件好事，极力反对这种做法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;贫血领域模型的根本问题是，它引入了领域模型设计的所有成本，却没有带来任何好处。最主要的成本是将对象映射到数据库中，从而产生了一个O/R（对象关系）映射层。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;只有当你充分使用了面向对象设计来组织复杂的业务逻辑后，这一成本才能够被抵消。如果将所有行为都写入到Service对象，那最终你会得到一组事务处理脚本，从而错过了领域模型带来的好处。而且当业务足够复杂时， 你将会得到一堆爆炸的事务处理脚本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3、对业务的理解和抽象&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;限定业务边界，&lt;/span&gt;&lt;span&gt;对业务进行与现实更自然的理解和抽象，数据模型与业务模型隔离，把业务映射成为领域模型沉淀在系统中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;4、结构与防腐层&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;497&quot; data-backw=&quot;519&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9576107899807321&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naLr4HM643NC0QVdy2veiclpK0k4zOLKibzFNBY9XRvEyzYzibO8qmj4ibodX9Wm3AYoBoSaBr5tico4Ujw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;519&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;User Interfaces&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;负责对外交互, 提供对外远程接口&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;application&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;应用程序执行其任务所需的代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;它协调域层对象以执行实际任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该层适用于跨事务、安全检查和高级日志记录。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;domain&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;负责表达业务概念。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对业务的分解，抽象，建模 。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;业务逻辑、程序的核心。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;防腐层接口放在这里。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;infrastucture&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为其他层提供通用的技术能力。如repository的implementation（ibatis，hibernate, nosql），中间件服务等&lt;/span&gt;&lt;span&gt;anti-corruption layer的implementation 防腐层实现放在这里。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;防腐层的作用：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;封装三方服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;隔离内部系统对外部的依赖。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;5、让隐性概念显性化&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;文档与注释可能会失去实时性（文档、注释没有人持续维护），&lt;/span&gt;&lt;span&gt;但是线上生产代码是业务逻辑最真实的展现，减少代码中模糊的地方，让业务逻辑显性化体现出来，提升代码清晰度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;if (itemDO != null &amp;amp;&amp;amp; MapUtils.isNotEmpty(itemDO.getFeatures()) &amp;amp;&amp;amp; itemDO.getFeatures().containsKey(ITEM_PC_DESCRIPTION_PUSH)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, &quot;&quot; + templateId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, &quot;&quot; + pcContent.hashCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} else {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, &quot;&quot; + templateId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_WL_TEMPLATEID, &quot;&quot; + templateId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, &quot;&quot; + pcContent.hashCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_WL_PUSH, &quot;&quot; + content.hashCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;比如这一段代码就把判断里的业务逻辑隐藏了起来，这段代码其实的业务逻辑是这样， 判断商品是否有PC装修内容。如果有做一些操作， 如果没有做一些操作，将hasPCContent 这个逻辑表现出来， 一眼就能看出来大概的业务逻辑，让业务逻辑显现化，能让代码更清晰。可以改写成这样：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;boolean hasPCContent = itemDO != null &amp;amp;&amp;amp; MapUtils.isNotEmpty(itemDO.getFeatures()) &amp;amp;&amp;amp; itemDO.getFeatures().containsKey(ITEM_PC_DESCRIPTION_PUSH);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;if (hasPCContent) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, &quot;&quot; + templateId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, &quot;&quot; + pcContent.hashCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} else {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, &quot;&quot; + templateId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_WL_TEMPLATEID, &quot;&quot; + templateId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, &quot;&quot; + pcContent.hashCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_WL_PUSH, &quot;&quot; + content.hashCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;简单设计原则——《Clean Code》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、保持系统最大可测试&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;只要系统可测试并且越丰富的单元测试越会导向保持类短小且目的单一的设计方案，遵循单一职责的类，测试起来比较简单。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;遵循有关编写测试并持续运行测试的简单、明确规则，系统就会更贴近OO低耦合度，高内聚度的目标。编写测试越多，就越会遵循DIP之类的规则，编写最大可测试可改进并走向更好的系统设计。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、避免重复&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;重复是拥有良好设计系统的大敌。它代表着额外的工作、额外的风险和额外且不必要的复杂度。除了雷同的代码，功能类似的方法也可以进行包装减少重复，&lt;/span&gt;&lt;span&gt;“小规模复用”可大量降低系统复杂性。要想实现大规模复用，必须理解如何实现小规模复用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;共性的抽取也会使代码更好的符合单一职责原则。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、更清晰的表达开发者的意图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;软件项目的主要成本在于长期维护，当系统变得越来越复杂，开发者就需要越来越多的时间来理解他，而且也极有可能误解。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以作者需要将代码写的更清晰：选用好名称、保持函数和类的短小、采用标准命名法、标准的设计模式名，编写良好的单元测试。用心是最珍贵的资源。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4、尽可能减少类和方法&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果过度使用以上原则，为了保持类的函数短小，我们可能会造出太多细小的类和方法。所以这条规则也主张函数和类的数量要少。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如应当为每个类创建接口、字段和行为必须切分到数据类和行为类中。&lt;/span&gt;&lt;span&gt;应该抵制这类教条，采用更实用的手段。目标是在保持函数和类短小的同时，保持系统的短小精悍。不过这是优先级最低的一条。更重要的是测试，消除重复和清晰表达。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;05&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;strong&gt;最后&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;总而言之，做业务开发其实一点也不简单，面对不确定性的问题域，复杂的业务变化，&lt;/span&gt;&lt;span&gt;如何更好的理解和抽象业务，如何更优雅的应对复杂性，一直都是软件开发的一个难题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在对抗软件熵增，寻找对抗软件复杂性，符合业务的构造定律的演进方式，我们一直都在路上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[1]  《Domain-Driven Design》 ：https://book.douban.com/subject/1629512/&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[2] 《Implementing Domain-Driven Design》 ：https://book.douban.com/subject/25844633/&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[3] 《Clean Code》：https://book.douban.com/subject/4199741/&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[4]  《A Philosophy of Software Design》 ：https://book.douban.com/subject/30218046/&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c64e0d5254c72e4e910ec37ae17556a9</guid>
<title>MySQL写缓冲(change buffer)，终于懂了！！！（收藏）</title>
<link>https://toutiao.io/k/ojlk0e1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;上篇《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651969401&amp;amp;idx=1&amp;amp;sn=6af3b41ff0b9b91da67b65656f34c8fe&amp;amp;chksm=bd2d62a58a5aebb38ab5647871e157f97216b1221477cd3634b368919c1e0417be19d5e90d03&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;MySQL缓冲池(buffer pool)，终于懂了！！！（收藏）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;MySQL缓冲池(buffer pool)，终于懂了&lt;/a&gt;&lt;/span&gt;&lt;span&gt;》，介绍了InnoDB缓冲池的工作原理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单回顾一下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9266666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YrezxckhYOxbibeY4UQvLjjG76dIsbXYGIT4QibW2XqWIEjTRgTxFIszWZCY8yCZtZoKMaicHGfYR2TeoWC0sgQgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）MySQL数据存储包含&lt;/span&gt;&lt;span&gt;内存&lt;/span&gt;&lt;span&gt;与&lt;/span&gt;&lt;span&gt;磁盘&lt;/span&gt;&lt;strong&gt;&lt;span&gt;两个部分&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）内存缓冲池&lt;/span&gt;&lt;span&gt;(buffer pool)&lt;/span&gt;&lt;span&gt;以页为单位&lt;/span&gt;&lt;span&gt;，缓存最热的数据页&lt;/span&gt;&lt;span&gt;(data page)&lt;/span&gt;&lt;span&gt;与索引页&lt;/span&gt;&lt;span&gt;(index page)&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）InnoDB以变种LRU算法管理缓冲池，并能够&lt;/span&gt;&lt;span&gt;解决&lt;/span&gt;&lt;span&gt;“&lt;strong&gt;预读失效&lt;/strong&gt;”与“&lt;strong&gt;缓冲池污染&lt;/strong&gt;”的&lt;/span&gt;&lt;span&gt;问题&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;画外音：细节详见&lt;span&gt;《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651969401&amp;amp;idx=1&amp;amp;sn=6af3b41ff0b9b91da67b65656f34c8fe&amp;amp;chksm=bd2d62a58a5aebb38ab5647871e157f97216b1221477cd3634b368919c1e0417be19d5e90d03&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;MySQL缓冲池(buffer pool)，终于懂了！！！（收藏）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;MySQL缓冲池(buffer pool)，终于懂了&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;》&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;毫无疑问，&lt;/span&gt;&lt;span&gt;对于读请求，缓冲池能够减少磁盘IO&lt;/span&gt;&lt;span&gt;，提升性能。问题来了，&lt;strong&gt;那写请求呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;情况一&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假如要修改页号为4的索引页，而这个&lt;/span&gt;&lt;span&gt;页正好在缓冲池内&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8892508143322475&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YrezxckhYOxbibeY4UQvLjjG76dIsbXYGz1vXclzPZx2jibXpCIdtSoXsanw03fibDWAGkMhia2P1wNNDBUPupiaZAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;307&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如上图序号1-2：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）直接修改缓冲池中的页，一次内存操作；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）写入&lt;/span&gt;&lt;span&gt;redo log&lt;/span&gt;&lt;span&gt;，一次磁盘顺序写操作；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样的效率是最高的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;画外音：像写日志这种顺序写，每秒几万次没问题。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;是否会出现一致性问题呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;并不会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）读取，会命中缓冲池的页；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）缓冲池LRU数据淘汰，会将“脏页”刷回磁盘；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）数据库异常奔溃，能够从&lt;/span&gt;&lt;span&gt;redo log&lt;/span&gt;&lt;span&gt;中恢复数据；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;什么时候缓冲池中的页，会刷到磁盘上呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;定期刷磁盘&lt;/span&gt;&lt;span&gt;，而不是每次刷磁盘，能够降低磁盘IO，提升MySQL的性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;画外音：批量写，是常见的&lt;span&gt;&lt;em&gt;&lt;span&gt;优化&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;手段。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;情况二&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假如要修改页号为40的索引页，而这个&lt;/span&gt;&lt;span&gt;页正好&lt;strong&gt;不&lt;/strong&gt;在缓冲池内&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.81875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YrezxckhYOxbibeY4UQvLjjG76dIsbXYG3S9QEVicZ0Aiaxwn1PjRgRclImMdy3OaD3PeTQGvyavicuwgyYBhqY2lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;320&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此时麻烦一点，如上图需要1-3：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）先把需要为40的索引页，从磁盘加载到缓冲池，一次磁盘随机读操作；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）修改缓冲池中的页，一次内存操作；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）写入&lt;/span&gt;&lt;span&gt;redo log&lt;/span&gt;&lt;span&gt;，一次磁盘顺序写操作；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;没有命中缓冲池的时候，&lt;strong&gt;至少产生一次磁盘IO&lt;/strong&gt;，对于写多读少的业务场景，&lt;strong&gt;是否还有优化的空间呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这即是InnoDB考虑的问题，又是本文将要讨论的写缓冲&lt;/span&gt;&lt;span&gt;(change buffer)&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;画外音：从名字容易看出，写缓冲是降低磁盘IO，提升数据库写性能的一种机制。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;什么是InnoDB的写缓冲？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在MySQL5.5之前，叫&lt;/span&gt;&lt;span&gt;插入缓冲&lt;/span&gt;&lt;span&gt;(insert buffer)&lt;/span&gt;&lt;span&gt;，只针对insert做了优化；现在对delete和update也有效，叫做&lt;/span&gt;&lt;span&gt;写缓冲&lt;/span&gt;&lt;span&gt;(change buffer)&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它是一种应用在&lt;strong&gt;非唯一普通索引页&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(non-unique secondary index page)&lt;/span&gt;&lt;span&gt;不在缓冲池中，对页进行了写操作，并不会立刻将磁盘页加载到缓冲池，而仅仅记录缓冲变更&lt;/span&gt;&lt;span&gt;(buffer changes)&lt;/span&gt;&lt;span&gt;，等未来数据被读取时，再将数据合并&lt;/span&gt;&lt;span&gt;(merge)&lt;/span&gt;&lt;span&gt;恢复到缓冲池中的技术。写缓冲的&lt;strong&gt;目的&lt;/strong&gt;是&lt;/span&gt;&lt;span&gt;降低写操作的磁盘IO&lt;/span&gt;&lt;span&gt;，提升数据库性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;画外音：R了狗了，这个句子，好长。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;InnoDB加入写缓冲优化，上文“情况二”流程会有什么变化？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假如要修改页号为40的索引页，而这个&lt;/span&gt;&lt;span&gt;页正好&lt;strong&gt;不&lt;/strong&gt;在缓冲池内&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6989528795811518&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YrezxckhYOxbibeY4UQvLjjG76dIsbXYGKt8kPxmUopMTBDRsXPARNoUbx9EIQFjmiba7iaxamcr8IbgGXEfcwUtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;382&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加入写缓冲优化后，流程优化为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）在写缓冲中记录这个操作，一次内存操作；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）写入&lt;/span&gt;&lt;span&gt;redo log&lt;/span&gt;&lt;span&gt;，一次磁盘顺序写操作；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其性能与，这个索引页在缓冲池中，相近。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;画外音：可以看到，40这一页，并没有加载到缓冲池中。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;是否会出现一致性问题呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也不会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）数据库异常奔溃，能够从&lt;/span&gt;&lt;span&gt;redo log&lt;/span&gt;&lt;span&gt;中恢复数据；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）写缓冲不只是一个内存结构，它也会&lt;/span&gt;&lt;span&gt;被定期刷盘到写缓冲系统表空间&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）数据读取时，有另外的流程，将数据合并到缓冲池；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不妨设，&lt;/span&gt;&lt;span&gt;稍后&lt;/span&gt;&lt;span&gt;的一个时间，有请求&lt;/span&gt;&lt;span&gt;查询索引页40的数据&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6912928759894459&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YrezxckhYOxbibeY4UQvLjjG76dIsbXYGt4FmeS44CXDb15NTQNnILUkLfYHl52zJfaLibniaicdTjUOS94xkzeIew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;379&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此时的流程如序号1-3：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）载入索引页，缓冲池未命中，这次磁盘IO不可避免；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）从写缓冲读取相关信息；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）恢复索引页，放到缓冲池LRU里；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;画外音：可以看到，40这一页，在真正被读取时，才会被加载到缓冲池中。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还有一个遗漏问题，&lt;strong&gt;为什么写缓冲优化，仅适用于非唯一普通索引页呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;InnoDB里，聚集索引&lt;/span&gt;&lt;span&gt;(clustered index)&lt;/span&gt;&lt;span&gt;和普通索引&lt;/span&gt;&lt;span&gt;(secondary index)&lt;/span&gt;&lt;span&gt;的异同，《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651961494&amp;amp;idx=1&amp;amp;sn=34f1874c1e36c2bc8ab9f74af6546ec5&amp;amp;chksm=bd2d0d4a8a5a845c566006efce0831e610604a43279aab03e0a6dde9422b63944e908fcc6c05&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;1分钟了解MyISAM与InnoDB的索引差异&lt;/a&gt;》有详尽的叙述，不再展开。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果索引设置了唯一&lt;/span&gt;&lt;span&gt;(unique)&lt;/span&gt;&lt;span&gt;属性，在进行&lt;/span&gt;&lt;span&gt;修改操作&lt;/span&gt;&lt;span&gt;时，InnoDB必须进行&lt;/span&gt;&lt;span&gt;唯一性检查&lt;/span&gt;&lt;span&gt;。也就是说，&lt;/span&gt;&lt;span&gt;索引页即使不在缓冲池，磁盘上的页读取无法避免&lt;/span&gt;&lt;span&gt;(否则怎么校验是否唯一？)，此时就应该直接把相应的页放入缓冲池再进行修改，而不应该再整写缓冲这个幺蛾子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了数据页被访问，&lt;strong&gt;还有哪些场景会触发刷写缓冲中的数据呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还有这么几种情况，会刷写缓冲中的数据：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）有一个后台线程，会认为数据库空闲时；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）数据库缓冲池不够用时；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）数据库正常关闭时；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）&lt;/span&gt;&lt;span&gt;redo log&lt;/span&gt;&lt;span&gt;写满时；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;画外音：几乎不会出现redo log写满，此时整个数据库处于无法写入的不可用状态。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;什么业务场景，适合开启InnoDB的写缓冲机制？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先说&lt;/span&gt;&lt;span&gt;什么时候不适合&lt;/span&gt;&lt;span&gt;，如上文分析，当：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）数据库都是唯一索引；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）或者，写入一个数据后，会立刻读取它；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这两类场景，在写操作进行时（进行后），本来就要进行进行页读取，本来相应页面就要入缓冲池，此时写缓存反倒成了负担，增加了复杂度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;什么时候&lt;/span&gt;&lt;span&gt;适合使用写缓冲&lt;/span&gt;&lt;span&gt;，如果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）数据库大部分是非唯一索引；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）业务是写多读少，或者不是写后立刻读取；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以使用写缓冲，将原本每次写入都需要进行磁盘IO的SQL，优化定期批量写磁盘。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;画外音：例如，账单流水业务。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;上述原理，对应InnoDB里哪些参数？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有两个比较重要的参数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3943217665615142&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YrezxckhYOxbibeY4UQvLjjG76dIsbXYGX04pVicWGmkk0OI1lWsY64v9XrsNXBHdSA3Bvd7gf4LZ3K7rAGq56Fw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;参数&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;innodb_change_buffer_max_size&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;介绍&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：配置写缓冲的大小，占整个缓冲池的比例，默认值是25%，最大值是50%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;画外音：写多读少的业务，才需要调大这个值，读多写少的业务，25%其实也多了。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;参数&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;innodb_change_buffering&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;介绍&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：配置哪些写操作启用写缓冲，可以设置成&lt;/span&gt;&lt;span&gt;all/none/inserts/deletes&lt;/span&gt;&lt;span&gt;等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;希望大家有收获，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;思路&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;比结论重要。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5ODYxMDA5OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YrezxckhYOxbibeY4UQvLjjG76dIsbXYGaaKCJpqU0kzRuu3r2CXosccgtc57I15CePibfpQMd5dBibXZDNNZYtkg/0?wx_fmt=png&quot; data-nickname=&quot;架构师之路&quot; data-alias=&quot;road5858&quot; data-signature=&quot;架构师之路，坚持撰写接地气的架构文章&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;架构师之路&lt;/strong&gt;-分享技术思路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相关推荐：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651969397&amp;amp;idx=1&amp;amp;sn=5a0a001776c0e848722312bb7adb53b0&amp;amp;chksm=bd2d62a98a5aebbf80e51bd0988c9484548272e91c6e3762487d816ad836b05b4d62f9bd0fbf&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;架构师之路，21年干货精选&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;架构师之路，21年干货精选&lt;/a&gt;》&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cb0a51d8ebddc6b71980236f4745b12e</guid>
<title>「码农周刊 VIP 会员专属邮件周报」每周五发送，赶紧上车吧！</title>
<link>https://toutiao.io/k/zskhwzb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;我爱程序员&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;developerWorks&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;我们的产品：《码农周刊》 http://manong.io/ 、《开发者头条》 http://toutiao.io/&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>