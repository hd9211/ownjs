<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>fbf6a25cadb535221e74ec06eee88645</guid>
<title>结合最近的感受谈谈《原则》和《浪潮之巅》给我的启示</title>
<link>https://toutiao.io/k/tkb15br</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;《原则》和《浪潮之巅》我很多年前看过，虽然不是技术书，却是程序员界的经典名著。推荐有时间时去看一下。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6392785571142284&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRliccdk0hxtiax7HDgkAoibyVrEAMKV7Yvf2UCNyfeD38oaah4ZEYAJiaweVicLV8wTGzptwFtwEJWElWZg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;998&quot;/&gt;&lt;/p&gt;&lt;p&gt;我在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485046&amp;amp;idx=2&amp;amp;sn=afcb67fa121782b101a59e7b3f28250c&amp;amp;chksm=fafdecd8cd8a65cef8ba549f4cb9e3eff6457da609871fa21e7eb1ac163511d06062ab3a5941&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《三言|比做什么事更重要的是找对做事的人》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《三言|比做什么事更重要的是找对做事的人》&lt;/a&gt;中还引用了《原则》里的名言：痛苦+反思=进步。在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484659&amp;amp;idx=1&amp;amp;sn=42b7296d0e53a7c181aca4aa47d47718&amp;amp;chksm=fafdee5dcd8a674b16c55f18068b25071eb312ae820f6cad4ac0013e4e7366ff8d4ec182ebf1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《技术境界的二三四》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《技术境界的二三四》&lt;/a&gt;中，我还对《浪潮之巅》的模式做过总结。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;昨天凌晨，我友情转发了一个朋友的文章。朋友说帮他发了这个他才能拿到授权，他急需用。这个朋友是我上周末认识的，是公众号的粉丝，之前因为入咱们用户群加了微信，也是老用户了。我知道帮这个忙会大量流失用户，结果也是果不其然。但是我仍然坚持自己是对的。因为做人要有原则，义气比自己的得失重要，这是我做人的原则。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这让我想起《原则》这本书，我对书中记忆最深的是人要坚持自己的道德标准，这样才能成大事。我倒不是想成什么大事，但是我深切知道一个道理：周围的人都否定我、不认可我做的事，虽然是一件很伤心的事情。却没有自己否定自己更难受。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;马云说：“任何团队的核心骨干，都必须学会在没有鼓励，没有认可，没有帮助，没有理解，没有宽容，没有退路，只有压力的情况下，一起和团队获得胜利。成功，只有一个定义，就是对结果负责。如果你靠别人的鼓励才能发光，你最多算个灯泡。我们必须成为发动机，去影响其他人发光，你自然就是核心！”&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;自己在做什么，别人一个月、两个月、一年、两年不理解没有关系。自己在沿着自己规划的路线走，有自己的坚持，只要有希望，每天都是可以笑着对面对。但是放弃了自己的原则，一定不会成功。而且做什么都会差些运气。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我还挣扎在这一步。经常幻想着到达《浪潮之巅》里的境界：坚持自己的原则与理念，终于成功的登上了浪潮之巅。坚守的原则成为了公司的基因，禁锢了公司跟随时代发展的脚步，被滚滚后浪淹没。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;也许这一天永远不会到来，但是在这一天来临之前，一定要固守好自己的原则。因为有原则，就有希望。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c3be80313559b0a4830ea317b3a2b32a</guid>
<title>架构师如何选型分布式业务网关</title>
<link>https://toutiao.io/k/enmg99d</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在日常工作中，不同的场合下，我们可能都会听说网关的概念，当然通常是指业务网关（API网关），负责API的输入和输出。有了业务网关之后，各个API服务提供者可以专注于自己的业务逻辑处理，而API网关更专注于安全、流量、路由等问题。从功能层次我们又会联想到一个概念——代理。网关与代理的区别：代理本质是数据的透传，协议不会发生变化；网关在数据透传的背景下，还会涉及协议的转换，比如从HTTP到Dubbo。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;那么作为一名架构师，我们该如何选型“业务网关”呢？我们自己先要学会做技术选型，自己预期有一个技术成本的预判，比如我推荐使用Spring Cloud Alibaba+Spring Gateway，就是我自己作为一个架构师的技术预判。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Zuul&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Zuul是Netflix开源的微服务网关，可以和Eureka、Ribbon、Hystrix等组件配合使用，Spring Cloud对Zuul进行了整合与增强，Zuul总共有两个大的版本：Zuul1.0和Zuul2.0，目前最新的版本为v2.2.0，Zuul1.0和Zuul2.0版本之间功能差异性非常大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Netflix的Zuul包含如下功能：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;身份认证与安全：&lt;/span&gt;&lt;span&gt;识别每个资源的验证要求，并拒绝那些与要求不符的请求；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;审查与监控：在边缘位置追踪有意义的数据和统计结果；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;动态路由：&lt;/span&gt;&lt;span&gt;动态地将请求路由到不同的后端集群；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;压力测试&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;逐渐增加指向集群的流量，以了解性能；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;负载分配：&lt;/span&gt;&lt;span&gt;为每一种负载类型分配对应容量&lt;/span&gt;&lt;span&gt;，并弃用超出限定值的请求&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;静态响应处理：在边缘位置直接建立部分响应，从而避免其转发到内部集群；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;多区域弹性：&lt;/span&gt;&lt;span&gt;跨越AWS &lt;/span&gt;&lt;span&gt;Region进行请求路由，旨在实现ELB（Elastic Load Balancing）使用的多样化和&lt;/span&gt;&lt;span&gt;以及让系统的边缘更贴近系统的使用者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;以上介绍来自Zuul官方文档，但其实开源版本的Zuul以上功能一个都没有——开源的Zuul只是几个Jar包而已，以上能力指的应该是Netflix官方自用的Zuul的能力；Netflix自用的Zuul能力是比较强大的，可使用Groovy编写过滤器，并且可动态加载/卸载、修改规则，而且使用Cassandra作为数据库，然而开源版本这些一个都没有；Spring Cloud中，Zuul绝大部分功能都是Spring Cloud团队为Zuul开发的；所以Zuul 2.x的开源进度延后一年，Spring Cloud团队开发了自己的SCG，并宣布Spring Cloud不打算支持Zuul 2.x，你还觉得意外吗？看到这里，很多人可能没有动力学习Zuul了，个人认为还是可以了解一下的，后面讲到SCG时，你会发现很多设计理念是相通的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;既然说到了Spring Cloud对Zuul的封装，那么我们来简单的分析下Spring Cloud与Zuul的关系。Spring Cloud通过Spring Cloud Netflix 1.X来封装Zuul1.0，1.X的最后一个版本是v1.4.7.RELEASE，对应的Zuul版本是1.3.1。Spring Cloud Netflix从3.X开始就没有封装Zuul网关，包括Zuul1.0和Zuul2.0，也就是说开发者想要通过Spring Cloud来复用Zuul，只能使用Zuul1.0，暂时不能复用Zuul2.0。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Zuul目前在github上的star数为10.2k，fork数为2k，也就是说还是有很多开源爱好者会基于Zuul来定制化业务网关。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了开源的Spring Cloud定制化Zuul，开源微服务框架jhipster也参与了定制，并集成到它的生态中。Jhipster主要包含generator-jhipster和jhipster-registry，前者star数微17.7k，fork数为3.5k，后者star数为604，fork为607。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Zuul1.0整体架构设计如图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7104377104377104&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyWT6MTWtPib6eKFUI9D02lCqb1SicPrjI8bzZZFdZz2t6USvVP17Akn6veAmiaBvmanamgadXJSjsZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;594&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Zuul2.0整体架构设计如图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6771929824561403&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyWT6MTWtPib6eKFUI9D02lC4HskII7icXnrOakI3f1qYqrpW5vsvjfUT2LYRXWPIaCvxkFCoctliaIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;570&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Spring Cloud Gateway&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SCG是基于Spring Framework 5.0和Spring Boot 2.0构建的API网关，提供路由等功能。其旨在提供一种简单而有效的方法路由到API，并为它们提供跨领域的关注点，例如：安全性、监视/指标和弹性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要特性：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;ava8&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Spring Framework5&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Spring Boot2&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;动态路由&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Spring Handler Mapping&lt;/span&gt;&lt;span&gt;内置的路由匹配&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;请求的路由匹配（路径、方法、&lt;/span&gt;&lt;span&gt;Hea&lt;/span&gt;&lt;span&gt;der&lt;/span&gt;&lt;span&gt;、主机等）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;过滤器限定范围以匹配路由&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;过滤器可以修改下游&lt;/span&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;请求和&lt;/span&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;响应（添加、删除&lt;/span&gt;&lt;span&gt;Header&lt;/span&gt;&lt;span&gt;、添加&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;删除参数、重写路径、设置路径等）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;API或配置驱动&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持Spring Cloud Discovery Client配置路由&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SCG的专业术语包括：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;路由：它是基本构建模块，主要包含ID、URI、断言集合以及过滤器集合，如果能够匹配断言就会执行路由；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;断言：&lt;/span&gt;&lt;span&gt;主要是指Java8的函数式断言，输入类型是Spring Framework的ServerWebExchange，基于断言可以匹配基于headers或者parameters的http请求；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;过滤器：&lt;/span&gt;&lt;span&gt;它是通过特殊的工厂方法构造的基于Spring Framework GatewayFilter的实现，通过过滤器开发者可以在http请求下行之前修改请求响应参数，在请求响应返回之后可以修改响应的结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;SCG整体架构设计如图所示。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7508896797153025&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyWT6MTWtPib6eKFUI9D02lCM4JFeJpgVrodhL3nEt9ibS4l0C0ibwoKp5BgbAAMhWiakpSlzaQKneq2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;562&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;自研网关&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个API网关的基本功能包括统一接入、协议适配、流量管控与容错，以及安全防护，这个四大基本功能构成了网关的核心能力。网关首要的功能是负责统一接入，然后将请求的协议转换成内部的接口协议，在调用的过程中还要限流、降级和熔断等容错的方式来保护网关的整体稳定，同时网关还要做到基本的安全防护（防刷控制），以及黑白名单（比如IP地址白名单）等基本的安全措施，主要包括：统一标准接入，具备高性能、高并发和高可靠性，具备负载均衡的能力；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5185185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyWT6MTWtPib6eKFUI9D02lCKumL0Y3CqMic3uclBq11OK1SLz0nbSyibVYOfVuYq5t2Z28bhkx8Odew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;486&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了基本的四个功能，网关运行良好的环境还包括注册中心（比如通过Nacos读取已经发布的API接口的动态配置）。为了实现高性能，将数据全部异构到缓存（比如Redis）中，同时还可以配合本机缓存来进一步的提高网关系统的性能。为了提高网关的吞吐率，可以使用NIO+Servlet3异步的方式，还可以利用Servlet3的异步特性将请求线程与业务处理线程分开，为后续的线程池隔离做好基本的支撑。访问日志的存储我们可以放到Hbase或者ES中，如果要作为开放网关使用，那么需要一个支持OAuth2.0协议的授权中心，同时还可以引入Nginx+Lua的方式，将一些基本的校验判断前置到应用系统之上，这样可以更加轻量级的处理网关接入的问题。&lt;/span&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7288135593220338&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyWT6MTWtPib6eKFUI9D02lC95FriaJKLRcKeuhXcBrfGIfbbeJtI05ic4Tx5VmzqcfRHfty44O5iaL8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;590&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要包括接入层，开发者可以通过Nginx和Lua脚本，解决限流、黑白名单、路由、负载均衡、长短连接以及容灾切换的问题。网关需要保证服务的稳定性，需要接入注册中心，因为本书是Spring Cloud Alibaba的布道书籍，所以强烈推荐使用Nacos作为注册中心和配置中心。统一的鉴权中心，主要是统一解决网关为各个API服务的鉴权问题，当然可以按照服务维度做隔离，自定义鉴权规则。统一用户中心主要是解决用户登录问题，确保微服务调用的安全性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自研网关还需要有泛化功能，使用者在调用提供者的接口的时候，不再需要API提供者的客户端JAR包，因此也就没有了POJO，通过泛化的方式进行远程调用。一般情况下我们要通过RPC调用接口提供方的服务，首先在系统中嵌入接口提供者的JAR包，然后使用JAR包里面的类和方法。对于一个网关系统来说，如果要调用N个接口，就需要N个JAR包，这样的网关是很难维护的，当然Dubbo RPC是支持泛化的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网关要具备时间校验、方法校验、版本校验和签名校验等功能，当然网关还需要具备服务降级、日志记录以及监控与告警功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;对比以上三种网关&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;网关&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;限流&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;鉴权&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;监控&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;易用性&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;可维护性&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;成熟度&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;SCG&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;可以通过IP，用户，集群限流，提供了相应的接口进行扩展&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;普通鉴权auth2.0&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Gateway Metrics Filter&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;简单易用&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Spring系列可扩展强，易配置和可维护性好&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Spring社区成熟，但Gateway资源少。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Zuul2&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;可以通过配置文件配置集群限流和单服务器限流，也可以通过filter实现限流扩展&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;filter中实现&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Filter中实现&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;参考资料比较少&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;可维护性差&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;开源不就资源少。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Zuul1&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;自研网关&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;需要开发&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;需要开发&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;需要开发&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;需要开发&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;可维护性极高&lt;/span&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;&lt;span/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;需要开发&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐使用Spring Cloud Alibaba+Spring Cloud Gateway，可以更加高效的利用Spring Cloud ALibaba的服务治理能力去融合网关API的治理，从而提升业务服务API的系统稳定性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a641f663a3d53046beadbbb21df22135</guid>
<title>一文读懂层次聚类（Python代码）</title>
<link>https://toutiao.io/k/dpr2ch4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是东哥。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇想和大家介绍下&lt;strong&gt;层次聚类&lt;/strong&gt;，先通过一个简单的例子介绍它的基本理论，然后再用一个实战案例&lt;code&gt;Python&lt;/code&gt;代码实现聚类效果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先要说，聚类属于机器学习的无监督学习，而且也分很多种方法，比如大家熟知的有&lt;code&gt;K-means&lt;/code&gt;。层次聚类也是聚类中的一种，也很常用。下面我先简单回顾一下&lt;code&gt;K-means&lt;/code&gt;的基本原理，然后慢慢引出层次聚类的定义和分层步骤，这样更有助于大家理解。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;层次聚类和K-means有什么不同？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;K-means&lt;/code&gt; 工作原理可以简要概述为：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;决定簇数（k）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从数据中随机选取 k 个点作为质心&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将所有点分配到最近的聚类质心&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;计算新形成的簇的质心&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重复步骤 3 和 4&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个迭代过程，直到新形成的簇的质心不变，或者达到最大迭代次数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是 &lt;code&gt;K-means&lt;/code&gt; 是存在一些缺点的，我们必须在算法开始前就决定簇数 &lt;code&gt;K&lt;/code&gt; 的数量，但实际我们并不知道应该有多少个簇，所以一般都是根据自己的理解先设定一个值，这就可能导致我们的理解和实际情况存在一些偏差。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;层次聚类完全不同，它不需要我们开始的时候指定簇数，而是先完整的形成整个层次聚类后，通过决定合适的距离，自动就可以找到对应的簇数和聚类。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;什么是层次聚类？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们由浅及深的介绍什么是层次聚类，先来一个简单的例子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设我们有以下几点，我们想将它们分组：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.648068669527897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUgA35GFzWW2rveQcoWYZ0Caoqdic06Y4gr8WnxicChyILdNQdq5bFVib9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;233&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以将这些点中的每一个分配给一个单独的簇，就是4个簇（4种颜色）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.642570281124498&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpU0dc9nB7nVLpDOhveryTwLhabfY0mXZvqribQ1Rw8yqyH8mgUvMyq8GA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;249&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后基于这些簇的相似性（距离），将最相似的（距离最近的）点组合在一起并重复这个过程，直到只剩下一个集群：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6551724137931034&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUTn4mYcpPs3SD9GxjuSv5Gaea3Uq4R0ajtsJWZQlB6KY9M1pBYz9oIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;319&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面本质上就是在构建一个层次结构。先了解到这里，后面我们详细介绍它的分层步骤。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;层次聚类的类型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要有两种类型的层次聚类：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;凝聚层次聚类&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先让所有点分别成为一个单独的簇，然后通过相似性不断组合，直到最后只有一个簇为止，这就是凝聚层次聚类的过程，和我们上面刚刚说的一致。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分裂层次聚类&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分裂层次聚类正好反过来，它是从单个集群开始逐步分裂，直到无法分裂，即每个点都是一个簇。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以无论是 10、100、1000 个数据点都不重要，这些点在开始的时候都属于同一个簇：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7189542483660131&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUk2kMF9JAVicKfJia0miaUr3ubdnRhIaVk0ykOnRWGUfZxxDDOJ35W3qSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;306&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，在每次迭代中拆分簇中相隔最远的两点，并重复这个过程，直到每个簇只包含一个点：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.642570281124498&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpU0dc9nB7nVLpDOhveryTwLhabfY0mXZvqribQ1Rw8yqyH8mgUvMyq8GA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;249&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的过程就是&lt;strong&gt;分裂层次聚类&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;执行层次聚类的步骤&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面已经说了层次聚类的大概过程，那关键的来了，如何确定点和点的相似性呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是聚类中最重要的问题之一了，一般计算相似度的方法是：&lt;strong&gt;计算这些簇的质心之间的距离&lt;/strong&gt;。距离最小的点称为相似点，我们可以合并它们，也可以将其称为&lt;strong&gt;基于距离的算法&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外在层次聚类中，还有一个称为&lt;strong&gt;邻近矩阵&lt;/strong&gt;的概念，它存储了每个点之间的距离。下面我们通过一个例子来理解如何计算相似度、邻近矩阵、以及层次聚类的具体步骤。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;案例介绍&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设一位老师想要将学生分成不同的组。现在有每个学生在作业中的分数，想根据这些分数将他们分成几组。关于拥有多少组，这里没有固定的目标。由于老师不知道应该将哪种类型的学生分配到哪个组，因此不能作为监督学习问题来解决。下面，我们将尝试应用层次聚类将学生分成不同的组。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是个5名学生的成绩：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.180952380952381&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUWq9N0IAgFWt86iaUgEg3vXdRmBBo5Nws59rkiaZzwykQNpjiabNH6ySeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;210&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;创建邻近矩阵&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们要创建一个邻近矩阵，它储存了每个点两两之间的距离，因此可以得到一个形状为 n X n 的方阵。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个案例中，可以得到以下 5 x 5 的邻近矩阵：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9806949806949807&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUZkwTuZuREpvKFOAibNVkkxY6eH1trwnmlacNzJ4uYhchLDBrzicOiaicDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;259&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;矩阵里有两点需要注意下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;矩阵的对角元素始终为 0，因为点与其自身的距离始终为 0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用欧几里得距离公式来计算非对角元素的距离&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们要计算点 1 和 2 之间的距离，计算公式为：&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\sqrt{(10-7)^2}=\sqrt{9}=3&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -1392.2 9444.1 1860&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msqrt&quot;&gt;&lt;g transform=&quot;translate(1020, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1611.2, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(2611.4, 0)&quot;&gt;&lt;path data-c=&quot;37&quot; d=&quot;M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(3111.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(389, 413) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(0, 182.2)&quot;&gt;&lt;path data-c=&quot;221A&quot; d=&quot;M1001 1150Q1017 1150 1020 1132Q1020 1127 741 244L460 -643Q453 -650 436 -650H424Q423 -647 423 -645T421 -640T419 -631T415 -617T408 -594T399 -560T385 -512T367 -448T343 -364T312 -259L203 119L138 41L111 67L212 188L264 248L472 -474L983 1140Q988 1150 1001 1150Z&quot;/&gt;&lt;/g&gt;&lt;rect x=&quot;1020&quot; y=&quot;1272.2&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5201.8, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msqrt&quot; transform=&quot;translate(6257.6, 0)&quot;&gt;&lt;g transform=&quot;translate(853, 0)&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;39&quot; d=&quot;M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(0, 137.2)&quot;&gt;&lt;path data-c=&quot;221A&quot; d=&quot;M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z&quot;/&gt;&lt;/g&gt;&lt;rect x=&quot;853&quot; y=&quot;877.3&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(7888.3, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(8944.1, 0)&quot;&gt;&lt;path data-c=&quot;33&quot; d=&quot;M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同理，按此计算方法完成后填充邻近矩阵其余元素。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;执行层次聚类&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里使用凝聚层次聚类来实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;步骤 1：首先，我们将所有点分配成单个簇：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14556962025316456&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUGXib8hwKN3nyBIl7qRjqPibUXicc7uibb27WLA9LN38x0SEE2Z8aslgj2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;316&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里不同的颜色代表不同的簇，我们数据中的 5 个点，即有 5 个不同的簇。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;步骤2：接下来，我们需要&lt;strong&gt;查找邻近矩阵中的最小距离并合并距离最小的点&lt;/strong&gt;。然后我们更新邻近矩阵：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0141509433962264&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUqoY5ibicGw1xbRU7FoXnXCk6v1Px5x0PHsXdsV3szhSoy9lD3pQKeic3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;212&quot;/&gt;最小距离是 3，因此我们将合并点 1 和 2：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39308176100628933&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUSfXCKNOoOUibRiahd1KKUcjqqfIAAGvWzencnM9LR5VXYYKu75bHqegg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;318&quot;/&gt;让我们看看更新的集群并相应地更新邻近矩阵：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9723502304147466&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUxia53A7JHGDKgecA4SzNVwTbXGtNfHjD6t6p5KycIeb0DiasMGXeUESA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;217&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更新之后，我们取了1、2 两个点中值 (7, 10) 最大的来替换这个簇的值。当然除了最大值之外，我们还可以取最小值或平均值。然后，我们将再次计算这些簇的邻近矩阵：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.706081081081081&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpU3uVRRiapMVJQbqSK7qAt9kKaAibPmvZRLHGnROicSCYQucKDqW1t7b09g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;296&quot;/&gt;第 3 步：重复第 2 步，直到只剩下一个簇。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重复所有的步骤后，我们将得到如下所示的合并的聚类：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1724137931034482&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUEXhlugicSnBialuYxS8eiaRUj8SxKasViczUeicKYrEkYXUoYaxFsq23fFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;319&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是凝聚层次聚类的工作原理。但问题是我们仍然不知道该分几组？是2、3、还是4组呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面开始介绍如何选择聚类数。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如何选择聚类数？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了获得层次聚类的簇数，我们使用了一个概念，叫作&lt;strong&gt;树状图&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过树状图，我们可以更方便的选出聚类的簇数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到上面的例子。当我们合并两个簇时，树状图会相应地记录这些簇之间的距离并以图形形式表示。下面这个是树状图的原始状态，横坐标记录了每个点的标记，纵轴记录了点和点之间的距离：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8915343915343915&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUmMqRrufuJ2X91zdXCUEc0CHRouzx9yfABk8d2eqb5PCiaM1MaYBlSRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;378&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当合并两个簇时，将会在树状图中连接起来，连接的高度就是点之间的距离。下面是我们刚刚层次聚类的过程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1724137931034482&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUEXhlugicSnBialuYxS8eiaRUj8SxKasViczUeicKYrEkYXUoYaxFsq23fFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;319&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后开始对上面的过程进行树状图的绘制。从合并样本 1 和 2 开始，这两个样本之间的距离为 3。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9745762711864406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpU2ibL1A44dQpRcHnmWfDxEzWeGiaIgibWSqCwhlDldH2L4cXW5bCdWicpUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;354&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到已经合并了 1 和 2。垂直线代表 1 和 2 的距离。同理，按照层次聚类过程绘制合并簇类的所有步骤，最后得到了这样的树状图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.957983193277311&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUmN7ibScHLhTJia9CicVy8A9MeI0TPZiaB1yjK0YEmiawEP6icd6snNxmEvicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;357&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过树状图，我们可以清楚地形象化层次聚类的步骤。树状图中垂直线的距离越远代表簇之间的距离越大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了这个树状图，我们决定簇类数就方便多了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们可以设置一个&lt;strong&gt;阈值距离&lt;/strong&gt;，绘制一条水平线。比如我们将阈值设置为 12，并绘制一条水平线，如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9305555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUwyJichV0wVW0LrOiaQwicwme9rokqQ5LRkAStPs99fllySS746jFAbuLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;360&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从交点中可以看到，聚类的数量就是与阈值水平线与垂直线相交的数量（红线与 2 条垂直线相交，我们将有 2 个簇）。与横坐标相对应的，一个簇将有一个样本集合为 (1,2,4)，另一个集群将有一个样本集合 (3,5)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，我们就通过树状图解决了分层聚类中要决定聚类的数量。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Python代码实战案例&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面是理论基础，有点数学基础都能看懂。下面介绍下在如何用代码&lt;code&gt;Python&lt;/code&gt;来实现这一过程。这里拿一个&lt;strong&gt;客户细分&lt;/strong&gt;的数据来展示一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;数据集和代码在我的GitHub里，欢迎star！&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://github.com/xiaoyusmd/PythonDataScience&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个数据来源于UCI 机器学习库。我们的目的是根据批发分销商的客户在不同产品类别（如牛奶、杂货、地区等）上的年度支出，对他们进行细分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先对数据进行一个标准化，为了让所有数据在同一个维度便于计算，然后应用层次聚类来细分客户。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span&gt;import&lt;/span&gt; normalize&lt;br/&gt;data_scaled = normalize(data)&lt;br/&gt;data_scaled = pd.DataFrame(data_scaled, columns=data.columns)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; scipy.cluster.hierarchy &lt;span&gt;as&lt;/span&gt; shc&lt;br/&gt;plt.figure(figsize=(&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;))  &lt;br/&gt;plt.title(&lt;span&gt;&quot;Dendrograms&quot;&lt;/span&gt;)  &lt;br/&gt;dend = shc.dendrogram(shc.linkage(data_scaled, method=&lt;span&gt;&#x27;ward&#x27;&lt;/span&gt;))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7057851239669422&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUZaOHuxTGXiahHkmQrJBJ4uvaoMO075xz8ZSC94CLP0vJ9DFvb2BL8Ug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;605&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;x 轴包含了所有样本，y 轴代表这些样本之间的距离。距离最大的垂直线是蓝线，假如我们决定要以阈值 6 切割树状图：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;plt.figure(figsize=(&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;))  &lt;br/&gt;plt.title(&lt;span&gt;&quot;Dendrograms&quot;&lt;/span&gt;)  &lt;br/&gt;dend = shc.dendrogram(shc.linkage(data_scaled, method=&lt;span&gt;&#x27;ward&#x27;&lt;/span&gt;))&lt;br/&gt;plt.axhline(y=&lt;span&gt;6&lt;/span&gt;, color=&lt;span&gt;&#x27;r&#x27;&lt;/span&gt;, linestyle=&lt;span&gt;&#x27;--&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6919354838709677&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUlXIFt000ojnhB2Bxn56DkUhqSISbUlVfoRoFwhye9ZWKctDKj4Of0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;620&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们有两个簇了，我们要对这 2 个簇应用层次聚类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; sklearn.cluster &lt;span&gt;import&lt;/span&gt; AgglomerativeClustering&lt;br/&gt;cluster = AgglomerativeClustering(n_clusters=&lt;span&gt;2&lt;/span&gt;, affinity=&lt;span&gt;&#x27;euclidean&#x27;&lt;/span&gt;, linkage=&lt;span&gt;&#x27;ward&#x27;&lt;/span&gt;)  &lt;br/&gt;cluster.fit_predict(data_scaled)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5790349417637272&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpUWG1Yegxzk7p4g8ficNxX2oRe4oUdZtxs7RZSfVm7jTJeyusgC9YRdicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;601&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于我们定义了 2 个簇，因此我们可以在输出中看到 0 和 1 的值。0 代表属于第一个簇的点，1 代表属于第二个簇的点。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;plt.figure(figsize=(&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;))  &lt;br/&gt;plt.scatter(data_scaled[&lt;span&gt;&#x27;Milk&#x27;&lt;/span&gt;], data_scaled[&lt;span&gt;&#x27;Grocery&#x27;&lt;/span&gt;], c=cluster.labels_) &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6914191419141914&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYLfdqf5trtQULN7jUXFWZpU3cxF2BS8HlbNqV6x9CFwKRccgDL64iaylpiapMe96XaKGsFPoemibm4Nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;606&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里我们就成功的完成了聚类。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;参考：https://www.analyticsvidhya.com/blog/2019/05/beginners-guide-hierarchical-clustering/&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>941922890e2d968c12afe96d8fc14021</guid>
<title>那些年我做的开源项目之KV引擎（NutsDB）</title>
<link>https://toutiao.io/k/xl5b90u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你好，我是太白。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天和你分享我之前做过的开源项目那些事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文的主角是KV引擎：&lt;span&gt;NutsDB&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Github地址：https://github.com/xujiajun/nutsdb&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;有兴趣可以star收藏，watch关注下，参与贡献非常之欢迎。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下方👇🏻 关注本公众号&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg5OTcwNDc5Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4x9eqg3nPicpPPwX5QicW5GH0GDjvnLvCTOBOBqXvBDElILDVzRne2QibNY0DIV2Sg0FweAFze3K0aBog/0?wx_fmt=png&quot; data-nickname=&quot;太白技术&quot; data-alias=&quot;taibai_tech&quot; data-signature=&quot;关键词：Go语言、微服务、架构、开源项目。欢迎关注。&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;前言&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;NutsDB是什么&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;为什么有NutsDB&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;整体架构&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;开源表现&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;里程碑事件&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用案例&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;未来展望&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;感谢&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;加群&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一篇&lt;span&gt;《那些年我做的开源项目之web篇》&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;，我和大家分享了web方向开源项目。本篇将给大家分享我做的开源项目KV引擎NutsDB的故事。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;NutsDB是什么&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NutsDB是笔者在2019年1月份开源的，截止今天已经开源三年有余。它是一款简单的、高性能的纯Go语言开发的内嵌型KV引擎，支持基本的Get、Put、Delete操作、TTL，还支持类似Redis的List、Set、Sorted Set，还支持ACID的事务。截止本文发布，最新版本是v0.7.1。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7484035759897829&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4x9Uw6bUCCh6CMyWrTCUkgCrNUUgtys4PTIrTW2qE2N9V0zLAuG0cXt0yR3ywPVX8zsAW9iaaQ7RBtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;783&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;为什么有NutsDB&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下是摘自项目的README-CN.md。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「注意：」&lt;/strong&gt;以下是当时开源的时候写的，有些结论可能不一定准确，贴出来只是为了原汁原味。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我想找一个用纯go编写，尽量简单（方便二次开发、研究）、高性能（读写都能快一点）、内嵌型的（减少网络开销）数据库，最好支持事务。因为我觉得对于数据库而言，数据完整性很重要。如果能像Redis一样支持多种数据结构就更好了。而像Redis一般用作缓存，对于事务支持也很弱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;找到几个备选项：&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;BoltDB&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BoltDB是一个基于B+ tree，有着非常好的读性能，还支持很实用的特性：范围扫描和按照前缀进行扫描。有很多项目采用了他。虽然现在官方不维护，由etcd团队在维护 他也支持ACID事务，但是他的写性能不是很好。如果对写性能要求不高也值得尝试。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;GoLevelDB&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GoLevelDB是google开源的leveldb的go语言版本的实现。他的性能很高，特别是写性能，他基于LSM tree实现。可惜他不支持事务(他的README没有提到，其实doc有api的)。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Badger&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Badger同样是基于LSM tree，不同的是他把key/value分离。据他官网描述是基于为SSD优化。同是他也支持事务。但是我自己测试发现他的写性能没我想象中高，具体见我的benchmark。（使用当时它默认的配置测的）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，以上DB都不支持多种数据结构例如list、set等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;好奇心的驱使&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于如何实现kv数据库的好奇心吧。数据库可以说是系统的核心，了解数据库的内核或者自己有实现，对更好的用轮子或者下次根据业务定制轮子都很有帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以上两点，我决定尝试开发一个简单的kv数据库，性能要好，功能也要强大（至少他们好的功能特性都要继承）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上面的选项，我发现大致基于存储引擎的模型分：B+ tree和LSM tree。基于B+ tree的模型相对后者成熟。一般使用覆盖页的方式和WAL（预写日志）来作崩溃恢复。而LSM tree的模型他是先写log文件，然后在写入MemTable内存中，当一定的时候写回SSTable，文件会越来越多，于是他一般作法是在后台进行合并和压缩操作。一般来说，基于B+ tree的模型写性能不如LSM tree的模型。而在读性能上比LSM tree的模型要来得好。当然LSM tree的模型也可以优化，比如引入BloomFilter。但是这些模型还是太复杂了。我喜欢简单，简单意味着好实现，好维护，相对不容易出错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直到我找到bitcask这种模型，他其实本质上也算LSM tree的范畴吧。他模型非常简单很好理解和实现，很快我就实现了一个版本。但是他的缺点是不支持范围扫描。我尝试去优化他，又开发一个版本，基于B+ tree作为索引，满足了范围扫描的问题。现在这个版本基本上都实现上面提到的数据库的一些有用的特性，包括支持范围扫描和前缀扫描、包括支持bucket、事务等，还支持了更多的数据结构（list、set、sorted set）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;天下没有银弹，NutsDB也有他的局限，比如随着数据量的增大，索引变大，启动会慢，只想说NutsDB还有很多优化和提高的空间，由于本人精力以及能力有限。所以把这个项目开源出来。更重要的是我认为一个项目需要有人去使用，有人提意见才会成长。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;整体架构&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「整体的架构」&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7806841046277666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4xibkYS9uFnIyoAO8NSicMBIMAIsW8u8GthU1IiagUzHA47l1s5APH8Piaj9uXDOndRmBJYO8Tj2kodosA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;497&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「说明：」&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;API&lt;/strong&gt;：暴露给开发者用的接口，例如：Open()、Put()、Get()、RPush()、SAdd()、ZAdd()等等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;内存索引&lt;/strong&gt;：对各个数据结构的内存索引，包括B+Tree、List、Set、Sorted Set等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;读写数据管理&lt;/strong&gt;：对数据进行持久化的管理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;备份、清理&lt;/strong&gt;：对数据的备份和磁盘冗余的数据清理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;事务管理&lt;/strong&gt;：对数据库读写操作的事务性保障。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开源表现&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开源一天和一周表现&lt;/span&gt;&lt;strong/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;截图来自：&lt;span&gt;NUTSDB, 高性能内嵌型KV数据库支持事务和多种数据结构&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;开源&lt;/span&gt;&lt;strong&gt;「当天」&lt;/strong&gt;&lt;span&gt;，获得&lt;/span&gt;&lt;strong&gt;「165个star」&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6078869047619048&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4xibkYS9uFnIyoAO8NSicMBIMAWAf4iaNs56fbTOesiamM6tP9D7WutT2fJ00NkfR2ZOoSgjUia8IibtYhmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1344&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开源&lt;/span&gt;&lt;strong&gt;「一周」&lt;/strong&gt;&lt;span&gt;，获得&lt;/span&gt;&lt;strong&gt;「576个star」&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7486583184257602&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4xibkYS9uFnIyoAO8NSicMBIMAlnj8wQ0LVwR3Pnun8icgqMJYhSQicuxd7yB4TxfiaicfUdMibKicb6aaVzYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1118&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;star增长趋势&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面按照发版一次宣传一下的节奏。截图来自 &lt;span&gt;https://starchart.cc/xujiajun/nutsdb&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4819512195121951&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4xibkYS9uFnIyoAO8NSicMBIMAcz3L8lfibUzGLnyKeEd9uibicG6pq2fKWSCWmbmgicRnXp4aeuiaXuOEE7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1025&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;sup/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;里程碑事件&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体见：https://github.com/xujiajun/nutsdb/blob/master/CHANGELOG.md&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;v0.1.0（2019-2-28）支持Put、Get、Delete、TTL、Range Scanning等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;v0.2.0（2019-3-05）支持List、Set、Sorted Set等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;v0.3.0（2019-3-11）支持sync等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;v0.4.0（2019-3-15）支持mmap方式等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;v0.5.0（2019-11-28）修复一些bug &amp;amp; 支持GetAll()等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;v0.6.0（2021-03-21）支持put带时间戳&amp;amp;支持正则的PrefixSearchScan等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;v0.7.0（2022-03-06) 支持内存模式运行、支持IterateBuckets遍历bucket等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;使用案例&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;被生产环境采用&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.15783783783783784&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4xibkYS9uFnIyoAO8NSicMBIMAcouj5Zx0aOmXdgwakOhoJag7zrHB7DU4aPBicmNqrAxoU2DpSlq2uVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;925&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2502732240437158&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4xibkYS9uFnIyoAO8NSicMBIMAYyERj072UaZ9IicH5BjImAEorygliaeVPNQYY5CuGIW3T54P9K75AUgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;915&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1955128205128205&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4xibkYS9uFnIyoAO8NSicMBIMAKtTEs8pP1F6J1hzyc9EJAtMObZCrvDeK7l5Obeu2q9dA2BicDdfxfNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;936&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.17475728155339806&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4xibkYS9uFnIyoAO8NSicMBIMAic9Sica615SUdSBbvz0POVKic6ZHMXTOILB0pDfkpicc6SYyyJrXJ22jLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;927&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;被开源项目使用（部分）&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内容摘自：&lt;span&gt;https://github.com/xujiajun/nutsdb/issues/27&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;https://github.com/av-elier/nutsdb-cli&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第三方开发的NutsDB的cli，作者@av-elier ，俄罗斯人&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;https://github.com/cloud-barista/cb-store&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;cb-store是一个通用的存储库，用于管理Cloud-Barista的Meta信息。您可以选择NUTSDB或ETCD作为cb-store的存储库。作者是韩国的团队&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;https://github.com/jrapoport/chestnut&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://github.com/ranzhendong/irishman&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Irishman 是一个以go为开发语言的中间件，在Kerrigan项目中使用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;https://github.com/bitepeng/b0pass&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;百灵快传：基于Go语言的高性能 &quot;手机电脑超大文件传输神器&quot;、&quot;局域网共享文件服务器&quot;。斩获了1k+ star&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;https://github.com/rule110-io/surge&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Surge是一个p2p文件共享应用程序，旨在利用区块链技术实现100%匿名文件传输。Surge是端到端加密、分散和开源的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;更多，大概还有100+项目使用:&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;详见链接：https://github.com/xujiajun/nutsdb/network/dependents?package_id=UGFja2FnZS0yMjY0ODU0MDM5&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;未来展望&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;易用性：增加cli命令行工具、可视化方向等。&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;这边特别谢谢新院，他也是NutsDB的用户，提了很多建议给我。所以接下去易用性会放在首位。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;文档建设：继续完善文档。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;功能完善：对于已知的功能按照优先级完善，后面对标Redis支持更多功能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式：解决高可用、大数据量存储问题。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;感谢&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;感谢贡献者、感谢使用者、感谢提issue的网友。如果没有你们的反馈和支持，我可能坚持不下去了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是贡献者的截图。来自链接：https://github.com/xujiajun/nutsdb/graphs/contributors&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0994623655913978&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/y18hkib7c4xibkYS9uFnIyoAO8NSicMBIMAGNnicpXqy9pdHSnHczdnicnp3udgevvHhvfSRQ7xlgT3HZ1NnqtOxNhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;744&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;加群&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎加群交流，直接扫描下面二维码入群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果已经过期，加我微信（xujiajun1234567），备注：加群，我拉你进群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/y18hkib7c4x9Uw6bUCCh6CMyWrTCUkgCrK9flGaxTEzWwrxtXNd6lEsjEegbq7laHnqXU3ShPniaP9cyniaicInEZw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;1.2796296296296297&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;NutsDB: &lt;span&gt;&quot;https://github.com/xujiajun/nutsdb&quot;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;《那些年我做的开源项目之web篇》: &lt;span&gt;https://mp.weixin.qq.com/s/emkUCc1BNiazzuNX1gkcCQ&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;NUTSDB, 高性能内嵌型KV数据库支持事务和多种数据结构: &lt;span&gt;http://xujiajun.cn/2019/03/11/nutsdb/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;xujiajun/nutsdb starchart: &lt;span&gt;https://starchart.cc/xujiajun/nutsdb&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Is there any case that is used in production（请问有没有在生产使用的案例）: &lt;span&gt;https://github.com/xujiajun/nutsdb/issues/27&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>388074fef390b4b30e3ed3ef9d511c0d</guid>
<title>重构于 Vite：我如何做 SSG、静态资源发布以及自动化部署</title>
<link>https://toutiao.io/k/kjlg5vq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;作者：&lt;strong&gt;BASS  &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://chengpeiquan.com/article/rewrite-in-vite.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文写于年初，&lt;/span&gt;&lt;span&gt;文中提到的一些当时还不支持 Vue3 的包，现在可能已经支持了。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从 2021 年元旦 Vite 发布 2.0 Beta 版就一直在关注 Vite 的动态，借着春节放假有时间，而且 Vue 3.0 和 Vite 2.0 都才大版本更新上线不久，预感后面会火，先开荒尝试一波，也当给以后工作上的业务先提前踩踩坑，对博客做了第三次重构，这一次把客户端和服务端都重新写了，由 PHP 的 LNMP 全家桶全部换成了前端侧的技术栈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在经历了春节假期每天大概花 2 ~ 3 小时的投入，终于如期上线，第一个版本是发布于 2 月 14 日情人节 ，算是给自己的情人节礼物，当时是先部署在我闲置的香港服务器做了一波测试服调试，期间做了一些体验上的优化，然后 2 月 18 日 在休假的最后一天，部署到我正式服务器上了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且特别巧的是，这一天也是 Vite 2.0 正式版发布的日子：&lt;span&gt;Vite 2.0 发布了 - 尤雨溪&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;，同一天上线，就感觉特别美好，值得纪念。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.292894280762565&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iagNW4Zy9Cya6fCugPpkWeniaN43kUaHgTHpBGNvk1zLSHxZmWqXp8f6gr3TC1ptvuwld0vaQycNBRHBUuvWicDTQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1154&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;LightHouse 的打分&lt;/figcaption&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 运作流程&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次重构后，从开发到部署更新的运作流程图如下，日常只需要维护 GitHub 仓库的代码，其他的都是自动化完成。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg wxw-img&quot; data-ratio=&quot;1.2070015220700152&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iagNW4Zy9Cya6fCugPpkWeniaN43kUaHgTrHc0f063ia8qiciajZicoyqFDq3jxnmP6G9bXeaatBkDzmWfDteIogb3kA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;657&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;博客运作流程&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 重构的价值&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次重构，并非是因为放假有空就找点事情做，而是带着几个目的来的：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;提前开荒 &lt;span&gt;Vite 2.0&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; ，为公司后续的业务提前踩坑，可以为团队进行技术选型提供帮助，因为之前我在做 JSSDK、Vue Plugin 的时候，已经开始脱离 Webpack，用 &lt;span&gt;Rollup&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; 作为构建工具，而 Vite 正是基于 Rollup ，不仅构建速度非常快，而且也像 Webpack 一样提供了热更新，对于一线开发来说，体验上是非常好的，而且它还是 Vue 团队大力推广的新工具，这让我很有兴趣去研究它。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;了解一下当前的一些新生的前端工具，比如 UI 框架方面之前一直停留在适合 B 端产品的 Ant-Design、 Vuetify 、 饿了么等等，说实话我做 B 端产品的时候才会用，面向 C 端因为有设计稿，我基本上都是手写样式，听闻新一代的 UI 框架 &lt;span&gt;Tailwind CSS&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 已经有一段时间了，虽然很奇怪为什么还会回到十年前一样用原子类的 class，“开倒车” 竟然还有 3 万多的 Star，让我非常的好奇到底为什么，结果一用，真香！没错，这次博客的样式，就是用的 Tailwind 。还有像 CSS 预处理器之前也一直停留在 Sass / Less / Stylus 三驾马车，这一次我抛弃了他们，用上了 &lt;span&gt;PostCSS Language&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; + &lt;span&gt;CSS Variable&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;，也是真香！&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;借此机会多了解一下生产环境的服务端开发，公司业务几乎没有机会让自己实操服务端，所以大部分情况下都是在跑本机的 Server，很多场景是开发环境下遇不到的，要想进步，还是要多在生产环境磨练。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;接触更多优秀的开源作品，比如代码语法高亮之前一直只知道 &lt;span&gt;highlight.js&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt; （因为 WordPress 的高亮插件就是用这个……），这一次我是用了 &lt;span&gt;prism&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt; ，更小巧，颗粒度更细，虽然目前还没有太多时间去定制代码高亮的配色，不过后面有时间想要处理，prism 会更加方便。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;享受从 0 到 1 搭建脚手架的一个过程，目前这个版本算是实现一个简易版的 VuePress ，但是如果一直使用开箱即用的 VuePress ，很多时候并没有想去了解那些功能是怎么实现的，或者用哪些工具可以实现想要的功能（Btw: 我自从用了 Vue-CLI 之后就很久没自己配置 Webpack 了，直到 Rollup 的时候才算重新玩转了一次，这一次的 Vite 又是新的体验）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更多的更多，尽在未来，这肯定不是最后的一个版本，还有非常大的优化空间。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 重构前的目标&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实去年就有想法要对博客做一波改版，但有几个原因导致一拖再拖，一个是因为业务比较忙（这个没办法，工作为重），一个是懒（主要是懒得去思考怎么设计，当然期间有在考虑一些不同的落地方案），还有一个主要的原因是当时 Vue 3.0 刚发布，我当时主要的精力放在踩坑体验 3.0，那段时间，大部分的时间和精力都放在撰写 &lt;span&gt;Vue3.0 学习教程与实战案例&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt; 上面去了，休息时间有限，能够闲下来的时间也只有下班回来和周末，除掉一些自己的事情外，留下来捣鼓新东西的时间并不算很多，只能先押后了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比 2018 年那次改版，当时只是单纯想重新弄一个干净的博客写东西，这一次的目标是比较明确了，就是从基于 PHP 的 WordPress，用前端的技术栈全部重构一遍，做一个纯前端的博客出来，当然还要保留 SEO ，就要求还要上 SSR（Server Side Render） 或者 SSG（Server Side Generation） 。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 技术栈的选择&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于开工前已经是 2021 年了，因为有前面几个月玩 Vue 3.0 的基础打底，非常想用 3.0 来重构博客，加上元旦期间 Vite 2.0 Beta 版刚好发布（就很突然），注意力完全放在了 Vue3 和 Vite2 上面，非常想跑一下两者结合有多爽。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于重构的最终目标还是要保持网站的 SEO 能力，所以肯定不能使用默认的 SPA 应用模式，要走服务端渲染，所以技术栈方面只需要考虑两条线：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 基于 SSR&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然在此之前考虑过几个方案，最开始是优先考虑做 SSR ，考虑过 &lt;span&gt;Nuxt&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt; 、&lt;span&gt;Vapper&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt; 等一些比较流行的开箱即用的 SSR 框架，但这些框架目前都还在弄 Vue 2.0，甚至部分框架看起来有点 “弃坑” 的趋势（背靠字节大厂的 Vapper 居然一年多没更新了 emm…… ）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加上搞 SSR 的话，服务器成本比较高，我的低配 ECS 可能 Hold 不住，好好玩一玩的话还要投点钱，想了想先算了，那么退而求次就是上 SSG 。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 基于 SSG&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;玩转 SSG 也是有考虑过一些开箱即用的 SSG 框架，比如用的人最多的 &lt;span&gt;Hexo&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;，但我本身一直对 Hexo 不太感兴趣，而且似乎满大街随便找一个独立博客都是基于 Hexo 的，模板也千篇一律，缺乏个人特色。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好友小毅 &lt;span&gt;@chawyehsu&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt; 安利的 &lt;span&gt;Saber&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;，跑了个 demo 玩了一下，觉得真的蛮不错的，原本打算就直接用 Saber 的，不过目前 Saber 还是以 Vue 2.0 为主（听说下个版本会支持 3.0 ，不过也不知道什么时候会发布），由于内心实在是非常想用 Vue3 ，所以这个方案最终作为备选。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好吧，对 3.0 的执念，还让我想起两个 Vue 官方的作品：&lt;span&gt;VuePress&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt; 和它的弟弟 &lt;span&gt;VitePress&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt;，他们的新版本都是基于 Vue 3.0，而且已经可以用了，但一直以来我觉得它们都更适合用来写项目文档……&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 最终敲定&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;期间，Vite 官网在 2.0 Beta 版发布后，也新增了一 Part &lt;span&gt;Server-Side Rendering | Vite&lt;/span&gt;&lt;sup&gt;[17]&lt;/sup&gt; 指导如何实现 Vite SSR，我觉得可行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加上有两个开源项目让我非常感兴趣，一个是 &lt;span&gt;vite-ssr&lt;/span&gt;&lt;sup&gt;[18]&lt;/sup&gt;，一个是 &lt;span&gt;vite-ssg&lt;/span&gt;&lt;sup&gt;[19]&lt;/sup&gt;，我也分别对他们跑了 demo ，很给力，So，最后决定基于这两个开源项目之一，选择自己搭脚手架……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终用到的核心技术是：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Vite 2.0 —— 超快的构建工具&lt;/p&gt;&lt;p&gt;Vue 3.0 —— 更强大更灵活的 Vue&lt;/p&gt;&lt;p&gt;SSG —— 服务端渲染方案，利于 SEO 进行内容收录&lt;/p&gt;&lt;p&gt;PWA —— 构建离线应用&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然还要考虑的事情很多，每个环节还要用到不同的技术栈，具体我在下面逐个环节说明。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 重构过程分析&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面来说说决定重构之后，整个思考的过程顺序，以及对每一个技术模块的技术栈选型原因分析吧，希望对有计划重构项目的朋友带来一些帮助。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 构建工具&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实 &lt;span&gt;Vue-CLI&lt;/span&gt;&lt;sup&gt;[20]&lt;/sup&gt; 对 Vue 3.0 的支持已经非常好了，我的 &lt;span&gt;Vue 3.0 教程&lt;/span&gt;&lt;sup&gt;[21]&lt;/sup&gt; 也是基于 Vue-CLI 写的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之所以选择 Vite，一方面是它的构建速度真的比 &lt;span&gt;Webpack&lt;/span&gt;&lt;sup&gt;[22]&lt;/sup&gt; 要快好多，另一方面是，自从 Vue 3.0 推出以来， Vue 官方团队就一直在投入精力优化和宣传 Vite，尽管 1.0 版本的功能和生态不如人意，但超快的构建速度已经体现了出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加上在我准备动手重构的时候官方刚好发布了 2.0 大更新，对比了 1.0 简直是质的飞跃，让我非常感兴趣，而且按照目前官方团队的态度，我觉得后面 Vite 会逐步代替 Vue-CLI ，提前了解，提前踩坑，对以后的工作也有帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且在生态方面，Vite 2.0 的各种支持都算很完善了，不得不说整个春节期间，Vue 团队的人都在忙着给 Vite 2.0 干活，我在春节提的 Issue，基本上 2 ~ 3 小时就能给我回应，解决问题速度非常快（大过年的耶！），重构过程感觉自己拥有一个强大的技术支持团队一样!&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开荒虽然辛苦，但也有另一番乐趣！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 服务端渲染&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是在选择合适的构建工具之后，应该考虑的第二件事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人博客之前一直选择用 WordPress ，一方面除了有 &lt;span&gt;LNMP&lt;/span&gt;&lt;sup&gt;[23]&lt;/sup&gt; 一键部署等快速搭建方案，和各种各样的模板之外，主要也是归功于 WP 对 SEO 的支持也是非常好，我这个博客的日常访问都是来自于搜索引擎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单纯选择用 Vue 3.0 重新开发 SPA 应用肯定会丢失 SEO，所以才有了前面的 &lt;span&gt;技术栈的选择&lt;/span&gt;&lt;sup&gt;[24]&lt;/sup&gt;，本次是通过 SSG 方案来落地服务端渲染。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 项目架构规划&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在开始动手之前，还要对网站架构做一波规划，盲目动手只能给自己挖坑，自己的博客虽然说内容不多，但也有一些东西要考虑：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;对外展示的网站结构要保持不变，也就是原来的页面地址要尽量一样，避免用户访问不到原来的内容&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;对实在不能保持原样的 URL ，或者要废弃的页面，需要做 301 重定向&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;降低后续更新的构建和部署成本，尽量自动化，减少人工操作&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;数据需要无缝迁移，不能有丢失&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;减少服务器压力，把大部分资源消耗放在开源平台上（诸如 Github、jsdelivr CDN 等等）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然其他的如移动端适配啥的也要看情况顾及，之前博客还有一个小程序版本，不过因为没人看（害，真的整整一年过去了，完全没人看小程序版本…），所以小程序的依赖保留没有在这次的重构兼容考虑范围里，重构完毕后我就直接把原来的服务停了，回头有空了再重新写一版接口给小程序用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 模板开发&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于 Vue 3.0 的项目，主要的模板肯定还是 Vue 文件，站点的主要结构、页面的布局、美化等等都是基于 &lt;code&gt;.vue&lt;/code&gt; 文件，只需要按照原来的习惯，路由页面放在你的 &lt;code&gt;src/views&lt;/code&gt; 文件夹下，组件模板放置于 &lt;code&gt;src/components&lt;/code&gt; 下，就可以自动生成路由访问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时也加入了 &lt;code&gt;.md&lt;/code&gt; 文件的支持，用于书写 Markdown 格式的内容，日常记录博客会更方便，并且像 VuePress 那样，同时支持在 Markdown 里嵌套 Vue，让博客的定制更加灵活。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个项目的路由页面、组件结构，跟你平时开发 Vue 项目是完全一样的，无缝切换。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;src &lt;br/&gt;├─components &lt;br/&gt;│ ├─Footer.vue &lt;br/&gt;│ └─Header.vue &lt;br/&gt;└─views &lt;br/&gt;│ ├─[page].vue&lt;br/&gt;├─article &lt;br/&gt;│ └─rewrite-in-vite.md &lt;br/&gt;│ ├─about.md &lt;br/&gt;└─index.vue&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里推荐几个非常方便的 Vite 插件：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;vite-plugin-pages&lt;/span&gt;&lt;sup&gt;[25]&lt;/sup&gt; ：能够自动读取指定目录下的 Vue / Md 文件生成 Vue 路由，只需要管理好 views 文件夹的层级关系，无需再单独维护路由配置&lt;/p&gt;&lt;p&gt;&lt;span&gt;vite-plugin-md&lt;/span&gt;&lt;sup&gt;[26]&lt;/sup&gt; ：一个能让 Markdown 文件像 Vue 组件一样导入使用的插件，它也基于 markdown-it，支持进行一系列 md 生态扩展&lt;/p&gt;&lt;p&gt;&lt;span&gt;vite-plugin-components&lt;/span&gt;&lt;sup&gt;[27]&lt;/sup&gt;：可以像 VuePress 一样，无需 import，会自动根据组件的标签名去 components 目录下寻找组件&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本上你只需要按照开发 Vue 项目的习惯去开发就可以了，如果有一些思路被卡住不知道怎么下手，可以参考我仓库源码。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 样式处理器&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有设计稿的时候我更喜欢借助 CSS 预处理器（目前常用 &lt;span&gt;Stylus&lt;/span&gt;&lt;sup&gt;[28]&lt;/sup&gt;），借助他们的变量 、 嵌套书写，以及 Mixin 、 Extend 等功能，避免写原生 CSS 带来的烦恼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有设计稿的时候，会用上 &lt;span&gt;Ant Design&lt;/span&gt;&lt;sup&gt;[29]&lt;/sup&gt; 等 UI 框架来帮我减少页面设计上的一些时间浪费，但这些框架通常更适合用在 B 端产品。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;去年底在知乎刷到过一篇 &lt;span&gt;如何评价 CSS 框架 TailwindCSS？&lt;/span&gt;&lt;sup&gt;[30]&lt;/sup&gt; ，了解到一款全新的 CSS 框架 Tailwind CSS，乍一看很像是在开历史的倒车，回归原子类 className ，评价也是褒贬不一，自己光看文档的时候也是想着这啥玩意…&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是考虑到如果真的是开倒车，凭什么可以拿到 3 万的 Star，抱着试一下的心态在这次重构里面引入尝试，确实真香！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前感受到的好处就是：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延续 CSS 的属性命名，你需要什么属性自己放，也就是自己必须有一定的 CSS 基础，特别是在多端适配方面，不用担心框架用久了自己不会写 CSS 的问题&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，你要实现一个容器内完全居中，手写 CSS 是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;.container&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;display&lt;/span&gt;: flex;&lt;br/&gt;  &lt;span&gt;justify-content&lt;/span&gt;: center;&lt;br/&gt;  &lt;span&gt;align-items&lt;/span&gt;: center;&lt;br/&gt;  &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;100px&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;100px&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 Tailwind CSS 的写法是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;flex justify-center items-center w-40 h-40&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写法跟你在 VSCode 里自动补全代码时，敲入的命令非常接近，不像传统的 UI 框架一样，你写个标签就自动生成按钮，都不知道它是怎么写出来的（这也是我比较少想用 UI 框架的原因，我怕久了自己都不会写了），实际上，使用 Tailwind 之后，你还是在自己写 CSS， 只不过更方便了！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;支持 CSS tree-shaking ，构建后的文件非常迷你&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;传统的 Atom CSS ，引入了就得整包引入，而 Tailwind 可以借助 PostCSS ，可以在最终项目构建的时候，抽离出我们用到的样式，用不到的会被直接扔掉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我自己体验了一下，核心样式文件在配置 Purge 之前构建出来大概有 6M 多，Purge 之后只有 24K ！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;可以组合使用，类似于 CSS 预处理器的 Extend&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我要写一个通用的图片样式，让图片具备自适配不变型的效果，我只需要借助 @apply 像这样子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;.img&lt;/span&gt; {&lt;br/&gt;  @apply w-full h-full object-cover;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译出来就是我想要的效果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;.img&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;-o-object-fit&lt;/span&gt;: cover;&lt;br/&gt;  &lt;span&gt;object-fit&lt;/span&gt;: cover;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;支持目前主流的暗黑模式，通过 &lt;code&gt;dark:xxxxx&lt;/code&gt; 的前缀就可以轻松定制两款皮肤&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点一下切换皮肤：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;用了 Tailwind 之后，你几乎可以不用写 Sass / Stylus 了，那么问题来了：如何弥补 CSS 预处理器提供的一些功能？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;借助 &lt;span&gt;PostCSS Language&lt;/span&gt;&lt;sup&gt;[31]&lt;/sup&gt; 和 &lt;span&gt;CSS Variable&lt;/span&gt;&lt;sup&gt;[32]&lt;/sup&gt;，可以轻松的书写像 CSS 预处理一样的嵌套和变量。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;a&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;color&lt;/span&gt;: &lt;span&gt;var&lt;/span&gt;(--fg-deeper);&lt;br/&gt;  &lt;span&gt;text-decoration&lt;/span&gt;: none;&lt;br/&gt;&lt;br/&gt;  &amp;amp;:hover {&lt;br/&gt;    &lt;span&gt;border-bottom&lt;/span&gt;: &lt;span&gt;1px&lt;/span&gt; solid &lt;span&gt;var&lt;/span&gt;(--fg-light);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;独立的文件使用 &lt;code&gt;.postcss&lt;/code&gt; 或者 &lt;code&gt;.pcss&lt;/code&gt; 作为文件后缀，在 Vue 组件里则使用 &lt;code&gt;&amp;lt;style lang=&quot;postcss&quot;&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; 来指定 PostCSS Language 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，说的再多也不如亲手写一写，我之前在知乎也是看了好久始终不能决定用不用，之前赶业务也没时间，这一次也终于动手体验了一把，后悔，特别后悔，后悔怎么没有早点用！！！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; SEO 优化&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然前面的 &lt;span&gt;服务端渲染&lt;/span&gt;&lt;sup&gt;[33]&lt;/sup&gt; 帮我们解决了空 HTML 文档的问题，但要更好的进行 SEO 优化，还需要落实到具体的页面上去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如页面的 &lt;code&gt;title&lt;/code&gt; 、 &lt;code&gt;description&lt;/code&gt; 、 &lt;code&gt;keyword&lt;/code&gt; 等等，这里我是用到了以下两个工具来帮我实现每个页面的 TKD 定制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;gray-matter&lt;/span&gt;&lt;sup&gt;[34]&lt;/sup&gt;：支持对 &lt;code&gt;.md&lt;/code&gt; 文件的 TKD 优化，你可以在 Markdown 文件的最前面加入这样的代码，即可实现对页面展示对应的 TKD 信息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;---&lt;br/&gt;title: 这是页面的标题&lt;br/&gt;desc: 这是页面的描述&lt;br/&gt;keywords: 关键词1,关键词2,关键词3&lt;br/&gt;---&lt;br/&gt;&lt;br/&gt;下面是要书写的 Markdown 内容…&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;@vueuse/head&lt;/span&gt;&lt;sup&gt;[35]&lt;/sup&gt;：可以让你在 &lt;code&gt;.vue&lt;/code&gt; 文件里实现优化，在 Vue 组件里的 &lt;code&gt;script&lt;/code&gt; 部分，写入以下的代码，就可以实现 TKD 信息的配置。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { useHead } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@vueuse/head&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;useHead({&lt;br/&gt;  meta: [&lt;br/&gt;    {&lt;br/&gt;      name: &lt;span&gt;&#x27;title&#x27;&lt;/span&gt;,&lt;br/&gt;      content: &lt;span&gt;&#x27;这是页面的标题&#x27;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      name: &lt;span&gt;&#x27;description&#x27;&lt;/span&gt;,&lt;br/&gt;      content: &lt;span&gt;&#x27;这是页面的描述&#x27;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      name: &lt;span&gt;&#x27;keywords&#x27;&lt;/span&gt;,&lt;br/&gt;      content: &lt;span&gt;&#x27;关键词1,关键词2,关键词3&#x27;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  ]&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你还可以扩展更多的信息上去，具体都在各自对应的 Github 仓库的 README 里有详细的说明。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，SEO 优化远远不止这一点，包括 robots 、 链接语义化 、减少死链 、 旧地址重定向等等，后面也会有说明。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 静态资源处理&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;静态资源指 js 、 css 、 img 这些资源，放自己服务器也不是不好，我之前就是放自己服务器上，没有去改，虽然 WordPress 虽然有配置 CDN 的插件，但是 CDN 平台诸如七牛、又拍云，免费额度只针对 http , 都是需要付费才可以使用 https，总的来说还是要多出一笔钱来处理这块服务，反正自己的博客访问量不大，而且技术博客很少多媒体资源，日常使用的带宽消耗很少，我三年前在阿里云充的 50 块钱，三年过去了到现在还有 45.91 …&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过这次改版就不一样了，后续我可能还会开辟一些图片模块，加上改版后是把项目托管到了 Github ，先天优势存在，那么就要多考虑一下利用 Github 提供的免费服务了！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发过 NPM 包的同学，或者日常使用 NPM 插件比较细心的同学，应该能够发现发布在 NPM 上的包都自动部署到了 CDN 平台，诸如 jsdelivr 、 unpkg 、cdnjs 等等，那么 Github 和这些 CDN 能关联吗？在此之前其实我也没去关注能不能，但这一次我查了一下，确实可以，而且其中对国内访问速度最友好的 jsdelivr ，支持度最高！超棒的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于 jsdelivr 的速度可以参考：&lt;span&gt;国内有哪些靠谱的 Javascript 库 CDN 可用？&lt;/span&gt;&lt;sup&gt;[36]&lt;/sup&gt;，也可以测试下我的博客，我自己对测试结果还是挺满意的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.46&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iagNW4Zy9Cya6fCugPpkWeniaN43kUaHgTyeK5786mMJ9JqkeTFUtemK5CZeHibJ4hIT2JOGnrSvDwLWFqoNaAp9Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;测试我自己网站的速度&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以最后我是把所有静态资源都指向了 jsdelivr CDN ，它无需你自己再做任何部署工作，只需要把代码文件更新到你的 GitHub 仓库里，就会自动同步到 jsdelivr 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;访问格式为在 &lt;span&gt;jsdelivr CDN 官网&lt;/span&gt;&lt;sup&gt;[37]&lt;/sup&gt; 有案例说明，更多用法可以查看官网的文档 &lt;span&gt;Features - jsdelivr&lt;/span&gt;&lt;sup&gt;[38]&lt;/sup&gt;，为了避免项目源码过大，你可以像我一样单独创建一个类似 &lt;span&gt;assets-storage&lt;/span&gt;&lt;sup&gt;[39]&lt;/sup&gt; 这样的仓库用来存储这些静态资源，在仓库的 README 也有简单介绍下如何引用 CDN 地址和清除 CDN 缓存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到项目里，只需要在 &lt;span&gt;vite.config.ts&lt;/span&gt;&lt;sup&gt;[40]&lt;/sup&gt; 里修改 &lt;code&gt;base&lt;/code&gt; 的路径即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; defineConfig({&lt;br/&gt;  base: isDev&lt;br/&gt;    ? &lt;span&gt;&#x27;/&#x27;&lt;/span&gt;&lt;br/&gt;    : &lt;span&gt;&#x27;https://cdn.jsdelivr.net/gh/chengpeiquan/chengpeiquan.com@gh-pages/&#x27;&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;详细可以看官网的文档 &lt;span&gt;Configuring Vite | Vite&lt;/span&gt;&lt;sup&gt;[41]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然这种方式如果你用平时的命令行或者老乌龟界面工具来提交文件，始终还是比较麻烦，这里推荐一个现成的图床工具 &lt;span&gt;PicGo&lt;/span&gt;&lt;sup&gt;[42]&lt;/sup&gt; ，支持多个平台的 CDN 服务，其中就有 Github 。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.565&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iagNW4Zy9Cya6fCugPpkWeniaN43kUaHgTQz0rHbNhVVFLLcnEU0zEUaNfHzKVDW8AEMxwQzxPIichPb7M1TAr6Ig/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;PicGo 图床界面&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可以在 Github 仓库上的 &lt;span&gt;Releases&lt;/span&gt;&lt;sup&gt;[43]&lt;/sup&gt; 下载最新的客户端版本，只是使用的话，可以单独下载对应系统的安装文件，不需要克隆整个仓库下来自己构建。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 资源导出&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次的资源导出主要是指原来的那些图片，前面有提到，我之前没有启动 CDN 服务，所以图片资源都还在自己的服务器上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WordPress 的上传资源都存放在 &lt;code&gt;/wp-content/uploads/&lt;/code&gt; 目录下，阿里云非常方便的就是，你可以连 SFTP 上去把这些文件直接拖下来就可以了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重新传到 Github 上又非常简单，克隆你的仓库下来后，放到指定的文件夹里，重新提交就可以了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等未来某一次你不想继续用 Github 托管了，只需要把仓库拉下来，所有文件又都在了，都是非常方便和灵活。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 爬虫编写&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一部分主要针对原来的文章，虽然我之前的 WordPress 就开启了 Markdown 编辑器支持，但如 &lt;span&gt;SEO 优化&lt;/span&gt;&lt;sup&gt;[44]&lt;/sup&gt; 里提到的，缺少很多 TKD 信息配置，而且里面的图片地址也都要更换为 CDN 的路径，所以就算用现成工具去处理 HTML / XML 转 Markdown，都还要去补充这些信息，也比较繁琐。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以是借助了 Node 编写了个静态爬虫，在爬取过程中对一些内容进行追加、转换。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的实现可以参考我之前写的 &lt;span&gt;网站改版迁移经验记录：基于 node 的爬虫编写&lt;/span&gt;&lt;sup&gt;[45]&lt;/sup&gt; ，这里就不重复赘述了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 数据统计&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然是 Vue 项目，那么当然支持 Vue 系的统计插件，之前写的两个统计平台插件，都是可以开箱即用的，均已支持 Vue 3.0 的使用。你可以在 &lt;span&gt;main.ts&lt;/span&gt;&lt;sup&gt;[46]&lt;/sup&gt; 里了解如何开启流量的统计上报功能，如果你需要记录埋点，也都有 API 可以轻松触发数据的上报。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;百度统计：&lt;span&gt;vue-baidu-analytics&lt;/span&gt;&lt;sup&gt;[47]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;友盟统计：&lt;span&gt;vue-cnzz-analytics&lt;/span&gt;&lt;sup&gt;[48]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 服务端开发&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务端之前是 WordPress 所依赖的 Nginx + PHP + MySQL ，这一次重构也把服务端直接换了，更换为 Node.JS + Express ，通过 PM2 守护进程来运行在阿里云。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对，这一次没有数据库，第一版暂时不打算做数据库，暂时用不到，目前大部分数据都已经迁移到 Github 仓库了，下个版本功能迭代用到了再考虑弄一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的服务器系统是 CentOS 7，也就是 Linux 系统，关于 Linux 下如何安装 Node ，搜素引擎很多方法，这里也不赘述了，放几个自己用到的关键命令参考吧。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;清除缓存然后升级系统和软件&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sudo yum clean all sudo yum makecache sudo yum update sudo yum upgrade -y&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;安装 NPM 并通过 stable 安装最新版本的 Node&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sudo yum install npm sudo npm install -g n sudo n stable&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;全局安装 &lt;span&gt;yarn&lt;/span&gt;&lt;sup&gt;[49]&lt;/sup&gt; ，没错，我现在更喜欢用 yarn 来进行包管理，这一步你可以跳过&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;npm i -g yarn&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;然后是全局安装 &lt;span&gt;pm2&lt;/span&gt;&lt;sup&gt;[50]&lt;/sup&gt;，这个是必须要装的，否则我们的终端一关，服务就停了，需要通过 PM2 来守护进程，当然，你也可以用 &lt;span&gt;forever&lt;/span&gt;&lt;sup&gt;[51]&lt;/sup&gt; 。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;yarn global add pm2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他的步骤就不用说了，创建服务器的文件夹，初始化，安装 &lt;span&gt;express&lt;/span&gt;&lt;sup&gt;[52]&lt;/sup&gt; 或者其他你更熟悉的服务程序，搞起吧！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;有几件事要特别叮嘱一下：&lt;/p&gt;&lt;p&gt;1. 因为服务端变了，如果原来有开启 HTTPS，记得重新配置你的 SSL 证书（我用的是阿里云的免费证书，只需要 1 年更换 1 次）&lt;/p&gt;&lt;p&gt;2. 域名也要重新做 301 重定向（HTTP 强切 HTTPS ， WWW 强切无 3W 等）&lt;/p&gt;&lt;p&gt;3. 检查之前是否有在推广的的链接挂掉了，也要重新 301 到新地址 （比如 RSS 源之前是 /feed/ ，现在是 /feed.xml）&lt;/p&gt;&lt;p&gt;4. 最重要的，配置上对路由 history 模式的支持&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一版其实不复杂，后面有需要会继续迭代。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 自动化部署&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码托管在 GitHub 的好处就是 GitHub Actions 可以帮我们实现 CI / CD，通过配置分支的 push 或者 pull_request 等行为来实现自动触发项目的构建打包，并实现一键部署到阿里云服务器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的脚本可以参考我写的 &lt;span&gt;workflow&lt;/span&gt;&lt;sup&gt;[53]&lt;/sup&gt; ，里面都提供了注释。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;workflow 里所有以 &lt;code&gt;secrets.XXXXXX&lt;/code&gt; 的格式均为仓库独立配置的密钥变量，在仓库的 &lt;code&gt;settings&lt;/code&gt; &amp;gt; &lt;code&gt;Actions secrets&lt;/code&gt; 里添加。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中一些关键环节说明如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;on&lt;/code&gt; 是指分支行为，我配置了合并分支才会触发，因为平时都是托管在 &lt;code&gt;develop&lt;/code&gt; 分支，包括未开发完毕的功能，写一半的文章草稿，只有确认可以发布的代码，才会合并到 &lt;code&gt;main&lt;/code&gt; 进行更新&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; 是触发自动打包 / 发布一系列行为的各种操作，从上到下按顺序处理，其中的 ACCESS_TOKEN 是 GitHub 的 Token，请来 &lt;span&gt;Personal access tokens&lt;/span&gt;&lt;sup&gt;[54]&lt;/sup&gt; 创建，创建后只会显示一次，请保存好，后面涉及到 Token 的地方可以重复使用同一个 Token，请勿泄露！&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;gh-pages&lt;/code&gt; 分支是打包完毕后的文件，推送到阿里云服务器的也是这个分支下的所有文件，之所以托管一份在 GitHub，是因为我们前面部署了 CDN 支持，JS / CSS 文件是需要读取这个分支的 CDN 文件&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;部署到阿里云的环节，配置的 &lt;code&gt;SERVER_SSH_KEY&lt;/code&gt; 是自己服务器的密钥对，如果你也是跟我一样使用阿里云的 ECS ，可以参考 &lt;span&gt;创建 SSH 密钥对&lt;/span&gt;&lt;sup&gt;[55]&lt;/sup&gt;， 创建后还需要绑定给实例才能激活生效，绑定操作请参考 &lt;span&gt;绑定 SSH 密钥对&lt;/span&gt;&lt;sup&gt;[56]&lt;/sup&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;SERVER_IP&lt;/code&gt; 是自己服务器的公网 IP，这个其实可以不用配置为密钥变量，因为 &lt;code&gt;ping&lt;/code&gt; 一下你的域名也知道是什么 IP ，只是因为我有两台服务器，所以配置为变量可以方便的通过 &lt;code&gt;SERVER_IP&lt;/code&gt; 和 &lt;code&gt;SERVER_IP_TEST&lt;/code&gt; 去切换，其他变量其实也有一个 TEST 版本&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;最后的 &lt;code&gt;TARGET&lt;/code&gt; 是你在服务器上，node 服务器所安装的目录。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果其中有什么环节不清楚的，善用搜索引擎，或者到我博客仓库给我提 issue 也可以。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你不是托管在 GitHub ，而是别的 Git 平台诸如自建的 Gitlab ，你也可以通过 &lt;span&gt;Jenkins&lt;/span&gt;&lt;sup&gt;[57]&lt;/sup&gt; 去配置 CI / CD 的支持。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 离线应用构建&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Vue-CLI 创建新项目的时候，可以了解到有一个选项是关于 PWA 的，关于 PWA 的定义建议直接阅读 &lt;span&gt;渐进式 Web 应用（PWA） | MDN&lt;/span&gt;&lt;sup&gt;[58]&lt;/sup&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vite 官方团队也对 PWA 做了支持，通过 &lt;span&gt;vite-plugin-pwa&lt;/span&gt;&lt;sup&gt;[59]&lt;/sup&gt; 可以方便的实现一个离线应用的配置。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;不过目前发现了一个问题就是，当 &lt;code&gt;vite.config.ts&lt;/code&gt; 的 &lt;code&gt;base&lt;/code&gt; 选项设置为 CDN 地址时，构建出来的 PWA manifest 资源路径会读取错误，原因是 manifest 不能走 CDN，要单独从网站内读取，虽然跟作者提了优化建议（详见 &lt;span&gt;#25&lt;/span&gt;&lt;sup&gt;[60]&lt;/sup&gt;），不过还需要点时间去优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以在原版进行版本更新之前，自己先发布了个私有调试包 fix 了这个问题，有遇到一样情况的朋友可以先安装 &lt;span&gt;\@chengpeiquan/vite-plugin-pwa&lt;/span&gt;&lt;sup&gt;[61]&lt;/sup&gt; 这个去用，不过最好还是留意原版的更新，这个私有包不会长期维护。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;2021-02-22 更新：目前原版已更新，Fix 了我反馈的问题，请使用 v0.5.3 以后的版本可以避免该问题的产生，给作者点赞！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于 PWA 的配置可以参考我的项目，这里单独说一下需要特别注意的点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;因为使用了 CDN，所以 &lt;code&gt;scope&lt;/code&gt; 和 &lt;code&gt;manifest.start_url&lt;/code&gt; 选项需要显式指定，否则资源会读取出错&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;基于我上面提到的路径问题，从 v0.5.3 开始，配置 CDN 的同时，也需要显式指定 &lt;code&gt;base&lt;/code&gt; 选项，避免出现 404&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他的选项根据实际需要去处理就可以了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt; 结语&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为网站的设计一向不是我的专长，加上不喜欢花里胡哨的东西，所以这一次重构后的 UI 设计还是基本继承了原来的风格。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但也有一些新的迭代，比如加上了跟随系统的暗黑风格（也可以通过导航右上角进行手动切换），还有首页的变化，对于内容不多的博客来说，挺好的一个 idea，这是来自好友小毅 &lt;span&gt;The Art of Chawye Hsu&lt;/span&gt;&lt;sup&gt;[62]&lt;/sup&gt; 和 Vite 开发者 Antfu &lt;span&gt;Anthony Fu&lt;/span&gt;&lt;sup&gt;[63]&lt;/sup&gt; 的博客参考。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，整个项目的重构，更多的技术支持来自于 Anthony，他也是 Vue 和 Vite 官方团队的开发者，他比我早几天上线的 &lt;span&gt;Rewrite in Vite&lt;/span&gt;&lt;sup&gt;[64]&lt;/sup&gt; 给了我很多思路，很多基于 Vite 的插件也是他写的，都是在这几天发布和迭代，有那种瞌睡来了枕头的感觉，美妙！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整的项目依赖和配置请查看仓库的  &lt;span&gt;package.json&lt;/span&gt;&lt;sup&gt;[65]&lt;/sup&gt;  和 &lt;span&gt;vite.config.ts&lt;/span&gt;&lt;sup&gt;[66]&lt;/sup&gt; ，整个项目也完全开源了，具体的实现可以查看 &lt;span&gt;Github 仓库&lt;/span&gt;&lt;sup&gt;[67]&lt;/sup&gt; ，在这里就不赘述了，如果觉得对你有用，欢迎 Star 。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Vite 2.0 发布了 \ 尤雨溪: &lt;em&gt;https://zhuanlan.zhihu.com/p/351147547&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Vite 2.0: &lt;em&gt;https://github.com/vitejs/vite&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Rollup: &lt;em&gt;https://github.com/rollup/rollup&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;Tailwind CSS: &lt;em&gt;https://github.com/tailwindlabs/tailwindcss&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;PostCSS Language: &lt;em&gt;https://github.com/postcss/postcss&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;CSS Variable: &lt;em&gt;https://developer.mozilla.org/zh-CN/docs/Web/CSS/--&lt;/em&gt;*&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;highlight.js: &lt;em&gt;https://github.com/highlightjs/highlight.js&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;prism: &lt;em&gt;https://github.com/PrismJS/prism&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;Vue3.0 学习教程与实战案例: &lt;em&gt;https://vue3.chengpeiquan.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;Nuxt: &lt;em&gt;https://github.com/nuxt/nuxt.js&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;Vapper: &lt;em&gt;https://github.com/shuidi-fed/vapper&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;Hexo: &lt;em&gt;https://github.com/hexojs/hexo&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;p&gt;@chawyehsu: &lt;em&gt;https://github.com/chawyehsu&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14]&lt;/span&gt;&lt;p&gt;Saber: &lt;em&gt;https://github.com/saberland/saber&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15]&lt;/span&gt;&lt;p&gt;VuePress: &lt;em&gt;https://github.com/vuejs/vuepress&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[16]&lt;/span&gt;&lt;p&gt;VitePress: &lt;em&gt;https://github.com/vuejs/vitepress&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[17]&lt;/span&gt;&lt;p&gt;Server-Side Rendering | Vite: &lt;em&gt;https://vitejs.dev/guide/ssr.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[18]&lt;/span&gt;&lt;p&gt;vite-ssr: &lt;em&gt;https://github.com/frandiox/vite-ssr&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[19]&lt;/span&gt;&lt;p&gt;vite-ssg: &lt;em&gt;https://github.com/antfu/vite-ssg&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[20]&lt;/span&gt;&lt;p&gt;Vue-CLI: &lt;em&gt;https://github.com/vuejs/vue-cli&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[21]&lt;/span&gt;&lt;p&gt;Vue 3.0 教程: &lt;em&gt;https://vue3.chengpeiquan.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[22]&lt;/span&gt;&lt;p&gt;Webpack: &lt;em&gt;https://github.com/webpack/webpack&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[23]&lt;/span&gt;&lt;p&gt;LNMP: &lt;em&gt;https://github.com/licess/lnmp&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[24]&lt;/span&gt;&lt;p&gt;技术栈的选择: &lt;em&gt;#%E6%8A%80%E6%9C%AF%E6%A0%88%E7%9A%84%E9%80%89%E6%8B%A9&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[25]&lt;/span&gt;&lt;p&gt;vite-plugin-pages: &lt;em&gt;https://github.com/hannoeru/vite-plugin-pages&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[26]&lt;/span&gt;&lt;p&gt;vite-plugin-md: &lt;em&gt;https://github.com/antfu/vite-plugin-md&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[27]&lt;/span&gt;&lt;p&gt;vite-plugin-components: &lt;em&gt;https://github.com/antfu/vite-plugin-components&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[28]&lt;/span&gt;&lt;p&gt;Stylus: &lt;em&gt;https://github.com/stylus/stylus&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[29]&lt;/span&gt;&lt;p&gt;Ant Design: &lt;em&gt;https://github.com/vueComponent/ant-design-vue&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[30]&lt;/span&gt;&lt;p&gt;如何评价 CSS 框架 TailwindCSS？: &lt;em&gt;https://www.zhihu.com/question/337939566&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[31]&lt;/span&gt;&lt;p&gt;PostCSS Language: &lt;em&gt;https://github.com/postcss/postcss&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[32]&lt;/span&gt;&lt;p&gt;CSS Variable: &lt;em&gt;https://developer.mozilla.org/zh-CN/docs/Web/CSS/--&lt;/em&gt;*&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[33]&lt;/span&gt;&lt;p&gt;服务端渲染: &lt;em&gt;#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[34]&lt;/span&gt;&lt;p&gt;gray-matter: &lt;em&gt;https://github.com/jonschlinkert/gray-matter&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[35]&lt;/span&gt;&lt;p&gt;@vueuse/head: &lt;em&gt;https://github.com/vueuse/head&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[36]&lt;/span&gt;&lt;p&gt;国内有哪些靠谱的 Javascript 库 CDN 可用？: &lt;em&gt;https://www.zhihu.com/question/20227463/answer/370662453&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[37]&lt;/span&gt;&lt;p&gt;jsdelivr CDN 官网: &lt;em&gt;https://www.jsdelivr.com/?docs=gh&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[38]&lt;/span&gt;&lt;p&gt;Features - jsdelivr: &lt;em&gt;https://www.jsdelivr.com/features#gh&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[39]&lt;/span&gt;&lt;p&gt;assets-storage: &lt;em&gt;https://github.com/chengpeiquan/assets-storage&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[40]&lt;/span&gt;&lt;p&gt;vite.config.ts: &lt;em&gt;https://github.com/chengpeiquan/chengpeiquan.com/blob/main/vite.config.ts&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[41]&lt;/span&gt;&lt;p&gt;Configuring Vite | Vite: &lt;em&gt;https://vitejs.dev/config/#base&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[42]&lt;/span&gt;&lt;p&gt;PicGo: &lt;em&gt;https://github.com/Molunerfinn/PicGo&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[43]&lt;/span&gt;&lt;p&gt;Releases: &lt;em&gt;https://github.com/Molunerfinn/PicGo/releases&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[44]&lt;/span&gt;&lt;p&gt;SEO 优化: &lt;em&gt;#seo-%E4%BC%98%E5%8C%96&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[45]&lt;/span&gt;&lt;p&gt;网站改版迁移经验记录：基于 node 的爬虫编写: &lt;em&gt;https://chengpeiquan.com/article/node-web-crawler&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[46]&lt;/span&gt;&lt;p&gt;main.ts: &lt;em&gt;https://github.com/chengpeiquan/chengpeiquan.com/blob/main/src/main.ts&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[47]&lt;/span&gt;&lt;p&gt;vue-baidu-analytics: &lt;em&gt;https://github.com/chengpeiquan/vue-baidu-analytics&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[48]&lt;/span&gt;&lt;p&gt;vue-cnzz-analytics: &lt;em&gt;https://github.com/chengpeiquan/vue-cnzz-analytics&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[49]&lt;/span&gt;&lt;p&gt;yarn: &lt;em&gt;https://github.com/yarnpkg/yarn&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[50]&lt;/span&gt;&lt;p&gt;pm2: &lt;em&gt;https://github.com/Unitech/pm2&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[51]&lt;/span&gt;&lt;p&gt;forever: &lt;em&gt;https://github.com/foreversd/forever&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[52]&lt;/span&gt;&lt;p&gt;express: &lt;em&gt;https://github.com/expressjs/express&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[53]&lt;/span&gt;&lt;p&gt;workflow: &lt;em&gt;https://github.com/chengpeiquan/chengpeiquan.com/blob/main/.github/workflows/github-ci.yml&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[54]&lt;/span&gt;&lt;p&gt;Personal access tokens: &lt;em&gt;https://github.com/settings/tokens&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[55]&lt;/span&gt;&lt;p&gt;创建 SSH 密钥对: &lt;em&gt;https://www.alibabacloud.com/help/zh/doc-detail/51793.htm&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[56]&lt;/span&gt;&lt;p&gt;绑定 SSH 密钥对: &lt;em&gt;https://www.alibabacloud.com/help/zh/doc-detail/51796.htm&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[57]&lt;/span&gt;&lt;p&gt;Jenkins: &lt;em&gt;https://github.com/jenkinsci/jenkins&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[58]&lt;/span&gt;&lt;p&gt;渐进式 Web 应用（PWA） | MDN: &lt;em&gt;https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[59]&lt;/span&gt;&lt;p&gt;vite-plugin-pwa: &lt;em&gt;https://github.com/antfu/vite-plugin-pwa&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[60]&lt;/span&gt;&lt;p&gt;#25: &lt;em&gt;https://github.com/antfu/vite-plugin-pwa/pull/25&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[61]&lt;/span&gt;&lt;p&gt;@chengpeiquan/vite-plugin-pwa: &lt;em&gt;https://www.npmjs.com/package/@chengpeiquan/vite-plugin-pwa&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[62]&lt;/span&gt;&lt;p&gt;The Art of Chawye Hsu: &lt;em&gt;https://chawyehsu.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[63]&lt;/span&gt;&lt;p&gt;Anthony Fu: &lt;em&gt;https://antfu.me/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[64]&lt;/span&gt;&lt;p&gt;Rewrite in Vite: &lt;em&gt;https://antfu.me/posts/rewrite-in-vite&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[65]&lt;/span&gt;&lt;p&gt;package.json: &lt;em&gt;https://github.com/chengpeiquan/chengpeiquan.com/blob/main/package.json&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[66]&lt;/span&gt;&lt;p&gt;vite.config.ts: &lt;em&gt;https://github.com/chengpeiquan/chengpeiquan.com/blob/main/vite.config.ts&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[67]&lt;/span&gt;&lt;p&gt;Github 仓库: &lt;em&gt;https://github.com/chengpeiquan/chengpeiquan.com&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>