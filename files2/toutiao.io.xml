<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>9d4ba53f93a476c977c185a9e26e57f4</guid>
<title>搞定这8个Kafka生产级容量评估，每日10亿+请求轻松拿捏！</title>
<link>https://toutiao.io/k/9gqhrpj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拿电商平台为例，kafka 集群每天需要承载10亿+请求流量数据，一天24小时，对于平台来说，晚上12点到凌晨8点这8个小时几乎没多少数据涌入的。这里我们使用&lt;/span&gt;&lt;strong&gt;&lt;span&gt;「二八法则」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;来进行预估，也就是80%的数据（8亿）会在剩余的16个小时涌入，且8亿中的80%的数据（约6.4亿）会在这16个小时的20%时间 （约3小时）涌入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过上面的场景分析，可以得出如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;QPS计算公式 = 640000000 ÷ (3 * 60 * 60) = 6万，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;也就是说高峰期集群需要扛住每秒6万的并发请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设&lt;/span&gt;&lt;strong&gt;&lt;span&gt;每条数据平均按20kb(生产端有数据汇总)&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;来算, 那就是 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;1000000000 * 20kb = 18T，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;一般情况下我们都会设置&lt;/span&gt;&lt;strong&gt;&lt;span&gt;3个副本，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;即&lt;/span&gt;&lt;strong&gt;&lt;span&gt;54T，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;另外 kafka 数据是有保留时间周期的,  一般情况是保留&lt;/span&gt;&lt;strong&gt;&lt;span&gt;最近3天的数据，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;即 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;54T * 3 = 162T。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;两者主要区别如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先SSD硬盘性能好，主要是指的随机读写能力性能好，非常适合Mysql这样的集群，而&lt;/span&gt;&lt;strong&gt;&lt;span&gt;SSD的顺序读写性能跟机械硬盘的性能是差不多的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Kafka 写磁盘是顺序追加写的，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;所以对于 kafka 集群来说，我们使用&lt;/span&gt;&lt;strong&gt;&lt;span&gt;普通机械硬盘&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;就可以了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、每台服务器需要多少块硬盘&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;根据&lt;/span&gt;&lt;strong&gt;&lt;span&gt;第一二步骤&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;计算结果，我们需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;7台物理机，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;一共需要存储&lt;/span&gt;&lt;strong&gt;&lt;span&gt;162T&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;数据，大约每台机器需要存储&lt;/span&gt;&lt;strong&gt;&lt;span&gt;23T&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;数据，根据以往经验一般服务器配置&lt;/span&gt;&lt;strong&gt;&lt;span&gt;11块&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;硬盘，这样每块硬盘大约存储2T的数据就可以了，另外为了服务器性能和稳定性，我们一般要保留一部分空间，保守按每块硬盘&lt;/span&gt;&lt;strong&gt;&lt;span&gt;最大能存储3T数据。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、场景总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;要搞定&lt;/span&gt;&lt;strong&gt;&lt;span&gt;10亿+&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;请求，需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;7台物理机，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;使用&lt;/span&gt;&lt;strong&gt;&lt;span&gt;普通机械硬盘&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;进行存储，每台服务器&lt;/span&gt;&lt;strong&gt;&lt;span&gt;11块&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;硬盘，每块硬盘存储&lt;/span&gt;&lt;strong&gt;&lt;span&gt;2T&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、kafka容量评估之内存&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、Kafka 写磁盘流程及内存分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;346&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.6098562628336756&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAppxmyvEpv43XubfYgBRian0N6mlcylJWT8or72IKYdQJ3EUCTPLhHsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;974&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上图可以得出 Kafka 读写数据的流程主要都是基于os cache，所以基本上 Kafka 都是基于内存来进行数据流转的，这样的话要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;分配尽可能多的内存资源给os cache。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;kafka的核心源码基本都是用 scala 和 java (客户端)写的，底层都是基于 JVM 来运行的，所以要分配一定的内存给 JVM 以保证服务的稳定性。对于 Kafka 的设计，并没有把很多的数据结构存储到 JVM 中，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;所以根据经验，给 JVM 分配6~10G就足够了。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;443&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.7798254122211445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAu1Ickbq5vCeZL01AejBhfs56p6PLcCZ53AWAibOWicuxbGa4xiapYhMmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1031&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;185&quot; data-backw=&quot;349&quot; data-ratio=&quot;0.5300859598853869&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAYcGw7ewrYPsiaSRUG72ibHGeibSl7YUtEe4sxs7HNlInagoIePEJjKKRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;349&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上图可以看出一个 Topic 会对于多个 partition，一个 partition 会对应多个 segment ，一个 segment 会对应磁盘上4个log文件。假设我们这个平台总共100个 Topic ，那么总共有 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;100 Topic * 5 partition * 3 副本 = 1500 partition 。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;对于 partition 来说实际上就是物理机上一个文件目录， .log就是存储数据文件的，默认情况下一个&lt;/span&gt;&lt;strong&gt;&lt;span&gt;.log日志文件大小为1G。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果要保证这1500个 partition 的最新的 .log 文件的数据都在内存中，这样性能当然是最好的，需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt; 1500  * 1G = 1500 G&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;内存，但是我们没有必要所有的数据都驻留到内存中，我们只保证&lt;/span&gt;&lt;strong&gt;&lt;span&gt;25%左右&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的数据在内存中就可以了，这样大概需要 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;1500 * 250M = 1500 * 0.25G = 375G内存，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;通过&lt;/span&gt;&lt;strong&gt;&lt;span&gt;第二步&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;分析结果，我们总共需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;7台物理机，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这样的话&lt;/span&gt;&lt;strong&gt;&lt;span&gt;每台服务器只需要约54G内存，外加上面分析的JVM的10G，总共需要64G内存。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;还要保留一部分内存给操作系统使用，故我们选择&lt;/span&gt;&lt;strong&gt;&lt;span&gt;128G内存的服务器&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;是非常够用了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、场景总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要搞定&lt;/span&gt;&lt;strong&gt;&lt;span&gt;10亿+&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;请求，需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;7台物理机，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;每台物理机内存选择&lt;/span&gt;&lt;strong&gt;&lt;span&gt;128G内存&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;为主，这样内存会比较充裕。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、kafka容量评估之CPU压力&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、CPU Core分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;我们评估需要多少个 CPU Core，主要是看 Kafka 进程里会有多少个线程，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;线程主要是依托多核CPU来执行的，如果线程特别多，但是 CPU核很少，就会导致CPU负载很高，会导致整体工作线程执行的效率不高,性能也不会好。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;所以我们要保证CPU Core的充足，来保障系统的稳定性和性能最优。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、Kafka 网络架构及线程数计算&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;270&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.4759259259259259&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAwn1ctLCrKzUtmJzSjlorE5fQQ7HwbbtNL7BY0LulSPAFsdJZx0fA4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们评估下 Kafka 服务器启动后会有多少线程在跑，其实这部分内容跟kafka超高并发网络架构密切相关，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;上图是Kafka 超高并发网络架构图，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;从图中我们可以分析得出：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;330&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.58&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAI7rYrRfEicH2CMyY06abdEEiczuGQyKdJJ0YFPApeUJOnlHeS0e6WicCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了上图所列的还有其他一些线程，所以估算下来，一个 kafka 服务启动后，会&lt;/span&gt;&lt;strong&gt;&lt;span&gt;有100多个线程在跑。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;158&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.27744982290436837&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAypDCSGsIl6jrKCFDExfWSJE1MztMViaOEibsIzjad5Ry3icf5scNOTmsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;847&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、场景总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要搞定&lt;/span&gt;&lt;strong&gt;&lt;span&gt;10亿+&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;请求，需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;7台物理机，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;每台物理机内存选择&lt;/span&gt;&lt;strong&gt;&lt;span&gt;128G内存&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;为主，需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;16个cpu core(32个性能更好)。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;六、kafka容量评估之网卡&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、网卡对比分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;260&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.4581861012956419&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAf8PFFRwLLLvtFG7XPhvX85wCP9icn28icHYJ9bxTBOGwdIv3t3B5icuJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;849&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过上图分析可以得出&lt;/span&gt;&lt;strong&gt;&lt;span&gt;千兆网卡和万兆网卡的区别最大之处在于网口的传输速率的不同，千兆网卡的传输速率是1000Mbps，万兆网卡的则是10Gbps万兆网卡是千兆网卡传输速率的10倍。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;性能上讲，万兆网卡的性能肯定比千兆网卡要好。万兆网卡现在主流的是10G的，发展趋势正逐步面向40G、100G网卡。但还是要根据使用环境和预算来选择投入，毕竟千兆网卡和万兆网卡的性价比区间还是挺大的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、网卡选择分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;根据&lt;/span&gt;&lt;strong&gt;&lt;span&gt;第一二步&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;分析结果，高峰期的时候，每秒会有大约&lt;/span&gt;&lt;strong&gt;&lt;span&gt;6万&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;请求涌入，即每台机器&lt;/span&gt;&lt;strong&gt;&lt;span&gt;约1万&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;请求涌入&lt;/span&gt;&lt;strong&gt;&lt;span&gt;(60000 / 7)，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;每秒要接收的数据大小为: &lt;/span&gt;&lt;strong&gt;&lt;span&gt;10000 * 20 kb = 184 M/s，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;外加上数据副本的同步网络请求，总共需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt; 184 * 3 = 552 M/s。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;334&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5889929742388759&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAT1yNWsETTXWBqka1Axn37ucgR710mCbXgUgXkTO4DFfR0jpmYYXbtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;854&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一般情况下，网卡带宽是不会达到上限的，对于千兆网卡，我们能用的基本在700M左右，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;通过上面计算结果，千兆网卡基本可以满足，万兆网卡更好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、场景总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;要搞定&lt;/span&gt;&lt;strong&gt;&lt;span&gt;10亿+&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;请求，需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;7台物理机，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;每台物理机内存选择&lt;/span&gt;&lt;strong&gt;&lt;span&gt;128G内存&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;为主，需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;16个cpu core(32个性能更好)，千兆网卡基本可以满足，万兆网卡更好。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;7、kafka容量评估之核心参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;481&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.8466981132075472&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MA5Qgfvry2FuOZxmBmRrqQzobspsFQsIJt0dUrQwsltuw8AC7Wicg8brw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;848&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;508&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.8937426210153483&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAt3uAjQYTVcSxnvScU0spX11ia8DOhibR3uSrylmicGIOYoe58SK5Bicia3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;847&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3069657615112161&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAw3borzCq50cZicEiaPfhib8W2Y79kTKcevyBVckZmkdIqibPzibz3ktNzAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;847&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;8、kafka容量评估之集群规划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、集群部署规划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;这里我采用五台服务器来构建 Kafka 集群，集群依赖 ZooKeeper，所以在部署 Kafka 之前，需要部署好 ZooKeeper 集群。这里我将 Kafka 和 ZooKeeper 部署在了一起，Kafka 集群节点操作系统仍然采用 Centos 7.7 版本，各个主机角色和软件版本如下表所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;302&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5324675324675324&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MA15taS2wkMzLv9synicGbO72dib7barNeq7fvXGzjiaBVg8OtKhol3IvKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;847&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里需要注意：&lt;/span&gt;&lt;span&gt;Kafka 和 ZooKeeper 的版本，默认 Kafka2.11 版本自带的 ZooKeeper 依赖 jar 包版本为 3.5.7，因此 ZooKeeper 的版本至少在 3.5.7 及以上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、下载与安装&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;Kafka 需要安装 Java 运行环境，你可以点击Kafka官网&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(https://kafka.apache.org/downloads)获取 Kafka 安装包，推荐的版本是 kafka_2.11-2.4.1.tgz。将下载下来的安装包直接解压到一个路径下即可完成 Kafka 的安装，这里统一将 Kafka 安装到 /usr/local 目录下，我以在 kafka-zk1 主机为例，基本操作过程如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;span class=&quot;code-snippet__meta&quot;&gt;root@kafkazk1~&lt;/span&gt;]&lt;span class=&quot;code-snippet__meta&quot;&gt;# tar -zxvf kafka_2.11-2.4.1.tgz  -C /usr/local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;span class=&quot;code-snippet__meta&quot;&gt;root@kafkazk1~&lt;/span&gt;]&lt;span class=&quot;code-snippet__meta&quot;&gt;# mv /usr/local/kafka_2.11-2.4.1  /usr/local/kafka&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里我创建了一个 Kafka 用户，用来管理和维护 Kafka 集群，后面所有对 Kafka 的操作都通过此用户来完成，执行如下操作进行创建用户和授权：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;span class=&quot;code-snippet__meta&quot;&gt;root@kafkazk1~&lt;/span&gt;]&lt;span class=&quot;code-snippet__meta&quot;&gt;# useradd kafka&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;span class=&quot;code-snippet__meta&quot;&gt;root@kafkazk1~&lt;/span&gt;]&lt;span class=&quot;code-snippet__meta&quot;&gt;# chown -R kafka:kafka /usr/local/kafka&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 kafka-zk1 节点安装完成 Kafka 后，先进行配置 Kafka，等 Kafka 配置完成，再统一打包复制到其他两个节点上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;broker.id=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;listeners=PLAINTEXT:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;log&lt;/span&gt;.dirs=/usr/local/kafka/logs&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;num.partitions=&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;log&lt;/span&gt;.retention.hours=&lt;span class=&quot;code-snippet__number&quot;&gt;72&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;log&lt;/span&gt;.segment.bytes=&lt;span class=&quot;code-snippet__number&quot;&gt;1073741824&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;zookeeper.connect=&lt;span class=&quot;code-snippet__number&quot;&gt;172.16&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.213&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.31&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;2181&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;172.16&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.213&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;2181&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;172.16&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.213&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.33&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;2181&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;auto&lt;/span&gt;.create.topics.enable=&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;delete&lt;/span&gt;.topic.enable=&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;num.network.threads=&lt;span class=&quot;code-snippet__number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;num.io.threads=&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;message.max.bytes=&lt;span class=&quot;code-snippet__number&quot;&gt;10485760&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;log&lt;/span&gt;.flush.interval.message=&lt;span class=&quot;code-snippet__number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;log&lt;/span&gt;.flush.interval.ms=&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;replica.lag.time.max.ms=&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kafka 配置文件修改完成后，接着打包 Kafka 安装程序，将程序复制到其他4个节点，然后进行解压即可。&lt;/span&gt;&lt;span&gt;注意，在其他4个节点上，broker.id 务必要修改，Kafka 集群中 broker.id 不能有相同的(唯一的)。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、启动集群&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;五个节点的 Kafka 配置完成后，就可以启动了，但在启动 Kafka 集群前，需要确保 ZooKeeper 集群已经正常启动。接着，依次在 Kafka 各个节点上执行如下命令即可：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;span class=&quot;code-snippet__meta&quot;&gt;root@kafkazk1~&lt;/span&gt;]&lt;span class=&quot;code-snippet__meta&quot;&gt;# cd /usr/local/kafka&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;span class=&quot;code-snippet__meta&quot;&gt;root@kafkazk1 kafka&lt;/span&gt;]&lt;span class=&quot;code-snippet__meta&quot;&gt;# nohup bin/kafka-server-start.sh  config/server.properties &amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;span class=&quot;code-snippet__meta&quot;&gt;root@kafkazk1 kafka&lt;/span&gt;]&lt;span class=&quot;code-snippet__meta&quot;&gt;# jps&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;21840&lt;/span&gt; Kafka&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;15593&lt;/span&gt; Jps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;15789&lt;/span&gt; QuorumPeerMain&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里将 Kafka 放到后台(deamon)运行，启动后，会在启动 Kafka 的当前目录下生成一个 nohup.out 文件，可通过此文件查看 Kafka 的启动和运行状态。&lt;/span&gt;&lt;span&gt;通过 jps 指令，可以看到有个 Kafka 标识，这是 Kafka 进程成功启动的标志。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;九、总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;整个场景总结：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要搞定&lt;/span&gt;&lt;strong&gt;&lt;span&gt;10亿+&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;请求，经过上面深度剖析评估后需要以下资源：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;316&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5562130177514792&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zicoe8pJRtKkBFeL2ib8P4MAqc0nVdP3a72E0OMibrNFu2nqc0Uy25NE6ZFxTwXWzUHtNCXYPl6wy0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;845&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;作者丨王江华&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;来源丨公众号：华仔聊技术（ID：gh_97b8de4b5b34）&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;dbaplus社群欢迎广大技术人员投稿，投稿邮箱：&lt;/span&gt;&lt;span&gt;editor@dbaplus.cn&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5938c8a1acbfcac95810ba25cc22ccac</guid>
<title>字节“FII事件”发生的那一夜；别再说谷歌取消OKR了；Go微服务生产指南清单｜码农周刊VIP会员专属邮件周报 Vol.091</title>
<link>https://toutiao.io/k/d9oheay</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;本文内容节选自&lt;strong&gt;「码农周刊VIP会员专属邮件周报 Vol.091」&lt;/strong&gt;，感谢阅读。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？扫码即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓↓↓&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本期，首先分享的是&lt;strong&gt;避免「瞎忙活」的十条秘笈&lt;/strong&gt;，摘录几条，共勉。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）清晰的目标。&lt;br/&gt;2）垃圾时间处理信息。&lt;br/&gt;3）不要和别人比较。&lt;br/&gt;4）要有成长心态。&lt;br/&gt;5）锻炼身体。&lt;br/&gt;……&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;字节“FII事件”发生的那一夜&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/zqJ4AJjE5I9WDkcQFMlM6Q&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;信任不会忽然消失，但很难说清开头在哪里。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;别再说谷歌取消OKR了&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/l6sZgjnKWoTN8JWTIIwtjA&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;在OKR这件事情上，优秀的学习者不会简单地只抄老大哥的答案，他们学习的是老大哥的解题思维和过程。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;收钱吧生产环境全链路压测的实践&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/3elzr5y&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;经验总结&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;分布式数据库的高可用性简史&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/k44qn9i&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;在历史上是如何处理容错的，以及高可用性是什么样子的。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Android卡顿掉帧问题分析之工具篇&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/w3j907a&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;详细介绍&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;一份Go微服务生产指南清单给你&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/n6xubkw&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;供参考&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;如何打造一款简单易用的 React 状态管理工具&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/kew0md8&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;一步步教你&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;做好这 16 项优化，你的 Linux 操作系统焕然一新&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/63xesh3&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;实操干货&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;GitHub的4个神技，同桌直呼666&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/oaoov9m&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;试试吧&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;4 种主流的 API 架构风格对比: SOAP vs REST vs GraphQL vs RPC&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/hydzart&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;供参考&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？扫码即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓↓↓&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e80af263a75324a20af475ac622f9fd1</guid>
<title>Go 项目使用 Makefile</title>
<link>https://toutiao.io/k/dagx8gt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;大家好，我是 frank。&lt;br/&gt;欢迎大家点击标题下方&lt;span&gt;蓝色&lt;/span&gt;文字「Golang 语言开发栈」关注公众号。&lt;br/&gt;&lt;strong&gt;设为星标&lt;/strong&gt;，第一时间接收推送文章。&lt;br/&gt;&lt;strong&gt;文末扫码&lt;/strong&gt;，加群一起学 Golang 语言。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;01 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;介绍&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 提供一个名为&lt;code&gt;go&lt;/code&gt;的命令，该命令可自动下载、构建、安装和测试 Go 包和命令。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 提供&lt;code&gt;go&lt;/code&gt;命令，官方的目的是为了不需要编写 Makefile，而是能够仅使用 Go 源代码本身中的信息来构建 Go 代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，我们在 Go 项目中也不需要完全摒弃使用 make 和 Makefile，可以使用 Makefile 的“伪目标”，简化使用 &lt;code&gt;go&lt;/code&gt; 命令的复杂性，规范团队使用 &lt;code&gt;go&lt;/code&gt; 命令的方式，提升个人或团队的生产力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;02 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;make 和 Makefile&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;make 命令行工具可以自动判断是否需要重新编译程序，实际上 make 不仅限于程序，我们可以使用它来描述任何任务，只要其他文件发生更改，某些文件就必须从其他文件自动更新。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在使用 make 命令行工具之前，我们需要编写一个名为 Makefile 的文件，该文件描述程序中文件之前的关系，并提供用于更新每个文件的命令。也就是说 Makefile 决定 make 做什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于 Makefile 的介绍，感兴趣的读者朋友，可以查阅相关资料深入学习，本文仅介绍 Makefile 的规则（格式），如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;target ... : prerequisites ...&lt;br/&gt;&amp;lt;Tab&amp;gt;command&lt;br/&gt;    ...&lt;br/&gt;    ...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;target ... : prerequisites ...;command&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阅读上面示例代码，target 是目标文件，多个目标文件之间使用空格分隔，一般只有一个目标文件，也可以是“伪目标”（某个操作的名字）；prerequisites 是先决条件；command 是“命令”，可以在 prerequisites 后面，使用分号分隔，也可以另起一行，但是必须以&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;开头，如果想要使用其他键，可以使用内置变量 .RECIPEPREFIX 声明。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;target 目标是必须的，不可省略。&lt;span&gt;prerequisites 和 command 是可选的，但是二者必须存在其一。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;03 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 项目使用 Makefile&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Go 项目中使用 Makefile，一般我们只会使用“伪目标”，我们使用 &lt;code&gt;go build&lt;/code&gt; 构建可执行文件为例，介绍 Go 项目怎么使用 Makefile。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;build:&lt;br/&gt;  go build -o blog&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阅读上面示例代码，我们编写一个简单的 Makefile，定义一个“伪目标” build，命令是 &lt;code&gt;go build -o blog&lt;/code&gt;，构建名为 blog 的可执行文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 make 命令行工具，运行“伪目标”build。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;make build&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行 &lt;code&gt;make build&lt;/code&gt;，终端打印出 Makefile 中“伪目标” build 的命令。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go build -o blog&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们不想打印出执行的命令，可以在命令前面加上 &lt;code&gt;@&lt;/code&gt; 符号。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际项目开发时，我们可能需要构建多个操作系统的可执行文件，我们再编写一个 Makefile，新增三个“伪目标”，分别是windows、linux 和 darwin。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;APP=blog&lt;br/&gt;&lt;br/&gt;build:&lt;br/&gt;        @go build -o ${APP}&lt;br/&gt;windows:&lt;br/&gt;        @GOOS=windows go build -o ${APP}-windows&lt;br/&gt;linux:&lt;br/&gt;        @GOOS=linux go build -o ${APP}-linux&lt;br/&gt;darwin:&lt;br/&gt;        @GOOS=darwin go build -o ${APP}-darwin&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阅读上面示例代码，我们定义一个自定义变量 &lt;code&gt;APP&lt;/code&gt;，在命令行中使用 &lt;code&gt;$(APP)&lt;/code&gt; 调用变量，并且 GOOS 指定操作系统，使用&lt;code&gt;@&lt;/code&gt;开头，不再打印执行命令。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行 &lt;code&gt;make windows&lt;/code&gt;、&lt;code&gt;make linux&lt;/code&gt; 和 &lt;code&gt;make darwin&lt;/code&gt;，分别构建 windows、linux 和 drawin 操作系统的可执行文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;.&lt;br/&gt;├── Makefile&lt;br/&gt;├── blog&lt;br/&gt;├── blog-darwin&lt;br/&gt;├── blog-linux&lt;br/&gt;├── blog-windows&lt;br/&gt;├── go.mod&lt;br/&gt;└── main.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是，如果有文件名和“伪目标”同名，那么该“伪目标”无法使用 make 命令执行指定的 command。因为 make 发现与“伪目标”同名的文件已存在，将不会再重新构建，所以就不会运行指定的 command，为了避免出现该问题，可以使用内置目标名&lt;code&gt;.PHONY&lt;/code&gt;声明这些“伪目标”名是“伪目标”，而不是与“伪目标”同名的文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整 Makefile 文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;APP=blog&lt;br/&gt;&lt;br/&gt;.PHONY: help all build windows linux darwin&lt;br/&gt;&lt;br/&gt;help:&lt;br/&gt;        @echo &quot;usage: make &amp;lt;option&amp;gt;&quot;&lt;br/&gt;        @echo &quot;options and effects:&quot;&lt;br/&gt;        @echo &quot;    help   : Show help&quot;&lt;br/&gt;        @echo &quot;    all    : Build multiple binary of this project&quot;&lt;br/&gt;        @echo &quot;    build  : Build the binary of this project for current platform&quot;&lt;br/&gt;        @echo &quot;    windows: Build the windows binary of this project&quot;&lt;br/&gt;        @echo &quot;    linux  : Build the linux binary of this project&quot;&lt;br/&gt;        @echo &quot;    darwin : Build the darwin binary of this project&quot;&lt;br/&gt;all:build windows linux darwin&lt;br/&gt;build:&lt;br/&gt;        @go build -o ${APP}&lt;br/&gt;windows:&lt;br/&gt;        @GOOS=windows go build -o ${APP}-windows&lt;br/&gt;linux:&lt;br/&gt;        @GOOS=linux go build -o ${APP}-linux&lt;br/&gt;darwin:&lt;br/&gt;        @GOOS=darwin go build -o ${APP}-darwin&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阅读上面示例代码，我们可以看到 Makefile 中第二个“伪目标” all，该目标只有 4 个先决条件，没有任何命令。执行 &lt;code&gt;make all&lt;/code&gt; 命令，可以批量执行多个“伪目标”。该命令等同于以下命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;make build&lt;br/&gt;make windows&lt;br/&gt;make linux&lt;br/&gt;make darwin&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;细心的读者朋友们阅读到此处，心中可能会有一个疑问，想要知道 Makefile 中包含哪些“目标”，必须查看 Makefile 文件吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不必如此，我们可以在 Makefile 中编写一个“伪目标” help，用于描述 Makefile 中的“伪目标”列表和使用示例等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Make 命令运行时，如果不指定“目标”，默认执行 Makefile 文件的第一个“目标”。一般将 &lt;code&gt;help&lt;/code&gt; 作为 Makefile 的第一个“伪目标”，我们可以执行 &lt;code&gt;make&lt;/code&gt; 或 &lt;code&gt;make help&lt;/code&gt; 命令，输出使用方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;04 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文我们介绍 make 和 Makefile 的使用方法，并且通过 &lt;code&gt;go&lt;/code&gt; 命令中的 &lt;code&gt;go build&lt;/code&gt; 介绍 Go 项目怎么使用 Makefile，大家可以举一反三，编写自己的 Go 项目 Makefile。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;推荐阅读：&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247486020&amp;amp;idx=1&amp;amp;sn=0782a4791d0e5262ad46ecd7d5a1c198&amp;amp;chksm=9f81a02aa8f6293c9cf5db8f8945433dde8ec3c264a94877a7af7c23a8e327a227473ea2c42d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Go 微服务工具包 Go kit 怎么集成 gRPC？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Go 微服务工具包 Go kit 怎么集成 gRPC？&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247485896&amp;amp;idx=1&amp;amp;sn=7f13caa0a4a0efc9aa52f91449f1eee7&amp;amp;chksm=9f81a3a6a8f62ab0e4476eab641b65fc0376f817c7393dabdefeb239fcf8fb879bec353df558&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Golang 语言的多种变量声明方式和使用场景&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Golang 语言的多种变量声明方式和使用场景&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247485871&amp;amp;idx=1&amp;amp;sn=5e9eac1cce46b90fdab7be5ea14be9ef&amp;amp;chksm=9f81a3c1a8f62ad7f00ae7659154d87c2790097944d8606cf440aa5cd58e29c9b13cedad2099&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Golang 语言 vendor 在 GOPATH 和 Modules 中的区别&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Golang 语言 vendor 在 GOPATH 和 Modules 中的区别&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247484890&amp;amp;idx=1&amp;amp;sn=4fd66e7c91e0fb87f1723f14650941e5&amp;amp;chksm=9f81afb4a8f626a2188e082c00a8c81ebf48a8bc0d35f0757527b4cb90390994c8714775efb8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Golang 语言 method 接收者使用值类型和指针类型的区别&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Golang 语言 method 接收者使用值类型和指针类型的区别&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247484749&amp;amp;idx=1&amp;amp;sn=6e5455fb53756f08c32940e476138753&amp;amp;chksm=9f81af23a8f626351263aaa520929fda1afd086bd7d708d2c6f7248880b0c764fd8ca3339caa&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Golang 语言中基础同步原语 Mutex 和 RWMutex 的区别&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Golang 语言中基础同步原语 Mutex 和 RWMutex 的区别&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;参考资料:&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;https://en.wikipedia.org/wiki/Make_(software)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://www.gnu.org/software/make/manual/make.html#Introduction&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://www.gnu.org/software/make/manual/make.html#Phony-Targets&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://go.dev/doc/articles/go_command&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://tutorialedge.net/golang/makefiles-for-go-developers/&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d55ac99a34d7c6414096a15698c98b02</guid>
<title>使用 Go 和 Linux Kernel 技术探究容器化原理</title>
<link>https://toutiao.io/k/6c5itbq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;容器的优势&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36843229389149934&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8kUzNHVHJOMBGDOly9Eg1mchhn5H6EbaIfIQhAe6lIAzoIy8jfaBlDjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4682&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;传统模式的部署，直接将多个应用运行在物理服务器上，如果其中一个应用占用了大部分资源，可能会导致其他应用的性能下降。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虚拟化部署时代，可以在单个物理服务器的 CPU 上运行多个虚拟机（VM），每个 VM 是一台完整的计算机，在虚拟化硬件之上运行所有组件（包括了操作系统）。因此，可以让不同的应用在 VM 之间安全地隔离运行，更好地利用物理服务器上的资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;容器与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等，但与 VM 不同的是，容器之间共享操作系统（OS）。 所以，容器被认为是一种轻量级的操作系统层面的虚拟化技术。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比于 VM ，轻量级的容器更适合云原生模式的实践。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;容器的本质&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6122222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8k8YiaX0hlfMH1ibd0iaia2icMmkxENWre3dAgN3yiaenHghG02ZiaMJoic1Rvlw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;容器是一种轻量级的操作系统层面的虚拟化技术。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重点是 “操作系统层面” ，即容器本质上是利用操作系统提供的功能来实现虚拟化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;容器技术的代表之作 Docker ，则是一个基于 Linux 操作系统，使用 Go 语言编写，调用了 Linux Kernel 功能的虚拟化工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了更好地理解容器的本质，我们来看看容器具体使用了哪些 Linux Kernel 技术，以及在 Go 中应该如何去调用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40881642512077293&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8kHkG7DHG8eTBMz8em3ZVRicQCFMs4SEgqROrHpicrla3iaoWe2QibuuJU7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1656&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1、NameSpace&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NameSpace 即命名空间是 Linux Kernel 一个强大的特性，可用于进程间资源隔离。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于容器之间共享 OS ，对于操作系统而言，容器的实质就是进程，多个容器运行，对应操作系统也就是运行着多个进程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当进程运行在自己单独的命名空间时，命名空间的资源隔离可以保证进程之间互不影响，大家都以为自己身处在独立的一个操作系统里。这种进程就可以称为容器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到资源隔离上，从 Kernel: 5.6 版本开始，已经提供了 8 种 NameSpace ，这 8 种 NameSpace 可以对应地隔离不同的资源（ Docker 主要使用了前 6 种）。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;命名空间&lt;/th&gt;&lt;th&gt;系统调用参数&lt;/th&gt;&lt;th&gt;作用&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Mount (mnt)&lt;/td&gt;&lt;td&gt;CLONE_NEWNS&lt;/td&gt;&lt;td&gt;文件目录挂载隔离。用于隔离各个进程看到的挂载点视图&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Process ID (pid)&lt;/td&gt;&lt;td&gt;CLONE_NEWPID&lt;/td&gt;&lt;td&gt;进程 ID 隔离。使每个命名空间都有自己的初始化进程，PID 为 1，作为所有进程的父进程&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Network (net)&lt;/td&gt;&lt;td&gt;CLONE_NEWNET&lt;/td&gt;&lt;td&gt;网络隔离。使每个 net 命名空间有独立的网络设备，IP 地址，路由表，/proc/net 目录等网络资源&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Interprocess Communication (ipc)&lt;/td&gt;&lt;td&gt;CLONE_NEWIPC&lt;/td&gt;&lt;td&gt;进程 IPC 通信隔离。让只有相同 IPC 命名空间的进程之间才可以共享内存、信号量、消息队列通信&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;UTS&lt;/td&gt;&lt;td&gt;CLONE_NEWUTS&lt;/td&gt;&lt;td&gt;主机名或域名隔离。使其在网络上可以被视作一个独立的节点而非主机上的一个进程&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;User ID (user)&lt;/td&gt;&lt;td&gt;CLONE_NEWUSER&lt;/td&gt;&lt;td&gt;用户 UID 和组 GID 隔离。例如每个命名空间都可以有自己的 root 用户&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Control group (cgroup) Namespace&lt;/td&gt;&lt;td&gt;CLONE_NEWCGROUP&lt;/td&gt;&lt;td&gt;Cgroup 信息隔离。用于隐藏进程所属的控制组的身份，使命名空间中的 cgroup 视图始终以根形式来呈现，保障安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Time Namespace&lt;/td&gt;&lt;td&gt;CLONE_NEWTIME&lt;/td&gt;&lt;td&gt;系统时间隔离。允许不同进程查看到不同的系统时间&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NameSpace 的具体描述可以查看 &lt;span&gt;Linux man 手册中的 NAMESPACES&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 章节，手册中还描述了几个 NameSpace API ，主要是和进程相关的系统调用函数。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4348327566320646&quot; data-type=&quot;png&quot; data-w=&quot;1734&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8kTYSKD0RMeh8CBj1I7cLfNIIj66fZjsmGFhaTl2T5K5TvYOkMmSVK4A/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;clone()&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;clone&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; (*fn)(&lt;span&gt;void&lt;/span&gt; *), &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;stack&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; flags, &lt;span&gt;void&lt;/span&gt; *arg, ...&lt;br/&gt;                 &lt;span&gt;/* pid_t *parent_tid, void *tls, pid_t *child_tid */&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;clone() 用于创建新进程，通过传入一个或多个系统调用参数（ flags 参数）可以创建出不同类型的 NameSpace ，并且子进程也将会成为这些 NameSpace 的成员。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;setns()&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;setns&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; fd, &lt;span&gt;int&lt;/span&gt; nstype)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;setns() 用于将进程加入到一个现有的 Namespace 中。其中 fd 为文件描述符，引用 &lt;code&gt;/proc/[pid]/ns/&lt;/code&gt; 目录里对应的文件，nstype 代表 NameSpace 类型。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;unshare()&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;unshare&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; flags)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;unshare() 用于将进程移出原本的 NameSpace ，并加入到新创建的 NameSpace 中。同样是通过传入一个或多个系统调用参数（ flags 参数）来创建新的 NameSpace 。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;ioctl()&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;ioctl&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; fd, &lt;span&gt;unsigned&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; request, ...)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ioctl() 用于发现有关 NameSpace 的信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的这些系统调用函数，我们可以直接用 C 语言调用，创建出各种类型的 NameSpace ，这是最直观的做法。而对于 Go 语言，其内部已经帮我们封装好了这些函数操作，可以更方便地直接使用，降低心智负担。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看一个简单的小工具（&lt;span&gt;源自 Containers From Scratch • Liz Rice • GOTO 2018&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;os/exec&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;switch&lt;/span&gt; os.Args[&lt;span&gt;1&lt;/span&gt;] {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;run&quot;&lt;/span&gt;:&lt;br/&gt;  run()&lt;br/&gt; &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(&lt;span&gt;&quot;help&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; cmd := exec.Command(os.Args[&lt;span&gt;2&lt;/span&gt;], os.Args[&lt;span&gt;3&lt;/span&gt;:]...)&lt;br/&gt; cmd.Stdin = os.Stdin&lt;br/&gt; cmd.Stdout = os.Stdout&lt;br/&gt; cmd.Stderr = os.Stderr&lt;br/&gt; must(cmd.Run())&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;must&lt;/span&gt;&lt;span&gt;(err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个程序接收用户命令行传递的参数，并使用 &lt;code&gt;exec.Command&lt;/code&gt; 运行，例如当我们执行 &lt;code&gt;go run main.go run echo hello&lt;/code&gt; 时，会创建出 &lt;code&gt;main&lt;/code&gt; 进程， &lt;code&gt;main&lt;/code&gt; 进程内执行 &lt;code&gt;echo hello&lt;/code&gt; 命令创建出一个新的 &lt;code&gt;echo&lt;/code&gt; 进程，最后随着 &lt;code&gt;echo&lt;/code&gt; 进程的执行完毕，&lt;code&gt;main&lt;/code&gt; 进程也随之结束并退出。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host go]# go run main.go run echo hello&lt;br/&gt;hello&lt;br/&gt;[root@host go]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6367583212735166&quot; data-type=&quot;png&quot; data-w=&quot;1382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8ke48hz3ATicxMQOqMz4CKuP1Yk5l7iavWYjRqll2aPTqYSic1b37c2cXfw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是上面创建的进程太快退出了，不便于我们观察。如果让 &lt;code&gt;main&lt;/code&gt; 进程启动一个 &lt;code&gt;bash&lt;/code&gt; 进程会怎样呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了直观对比，我们先看看当前会话的进程信息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host go]# ps&lt;br/&gt;  PID TTY          TIME CMD&lt;br/&gt; 1115 pts/0    00:00:00 bash&lt;br/&gt; 1205 pts/0    00:00:00 ps&lt;br/&gt;[root@host go]# echo $$&lt;br/&gt;1115&lt;br/&gt;[root@host go]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当前我们正处于 PID 1115 的 &lt;code&gt;bash&lt;/code&gt; 会话进程中，继续下一步操作：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host go]# go run main.go run /bin/bash&lt;br/&gt;[root@host go]# ps&lt;br/&gt;  PID TTY          TIME CMD&lt;br/&gt; 1115 pts/0    00:00:00 bash&lt;br/&gt; 1207 pts/0    00:00:00 go&lt;br/&gt; 1225 pts/0    00:00:00 main&lt;br/&gt; 1228 pts/0    00:00:00 bash&lt;br/&gt; 1240 pts/0    00:00:00 ps&lt;br/&gt;[root@host go]# echo $$&lt;br/&gt;1228&lt;br/&gt;[root@host go]# exit&lt;br/&gt;exit&lt;br/&gt;[root@host go]# ps&lt;br/&gt;  PID TTY          TIME CMD&lt;br/&gt; 1115 pts/0    00:00:00 bash&lt;br/&gt; 1241 pts/0    00:00:00 ps&lt;br/&gt;[root@host go]# echo $$&lt;br/&gt;1115&lt;br/&gt;[root@host go]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在执行 &lt;code&gt;go run main.go run /bin/bash&lt;/code&gt; 后，我们的会话被切换到了 PID 1228 的 &lt;code&gt;bash&lt;/code&gt; 进程中，而 &lt;code&gt;main&lt;/code&gt; 进程也还在运行着（当前所处的 &lt;code&gt;bash&lt;/code&gt; 进程是 &lt;code&gt;main&lt;/code&gt; 进程的子进程，&lt;code&gt;main&lt;/code&gt; 进程必须存活着，才能维持 &lt;code&gt;bash&lt;/code&gt; 进程的运行）。当执行 &lt;code&gt;exit&lt;/code&gt; 退出当前所处的 &lt;code&gt;bash&lt;/code&gt; 进程后，&lt;code&gt;main&lt;/code&gt; 进程随之结束，并回到原始的 PID 1115 的 &lt;code&gt;bash&lt;/code&gt; 会话进程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们说过，容器的实质是进程，你现在可以把 &lt;code&gt;main&lt;/code&gt; 进程当作是 “Docker” 工具，把 &lt;code&gt;main&lt;/code&gt; 进程启动的 &lt;code&gt;bash&lt;/code&gt; 进程，当作一个 “容器” 。这里的 “Docker” 创建并启动了一个 “容器”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么打了双引号，是因为在这个 &lt;code&gt;bash&lt;/code&gt; 进程中，我们可以随意使用操作系统的资源，并没有做资源隔离。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要想实现资源隔离，也很简单，在 run() 函数增加 &lt;code&gt;SysProcAttr&lt;/code&gt; 配置，先从最简单的 UTS 隔离开始，传入对应的 &lt;code&gt;CLONE_NEWUTS&lt;/code&gt; 系统调用参数，并通过 &lt;code&gt;syscall.Sethostname&lt;/code&gt; 设置主机名：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; cmd := exec.Command(os.Args[&lt;span&gt;2&lt;/span&gt;], os.Args[&lt;span&gt;3&lt;/span&gt;:]...)&lt;br/&gt; cmd.Stdin = os.Stdin&lt;br/&gt; cmd.Stdout = os.Stdout&lt;br/&gt; cmd.Stderr = os.Stderr&lt;br/&gt; cmd.SysProcAttr = &amp;amp;syscall.SysProcAttr{&lt;br/&gt;  Cloneflags: syscall.CLONE_NEWUTS,&lt;br/&gt; }&lt;br/&gt; must(syscall.Sethostname([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;mycontainer&quot;&lt;/span&gt;)))&lt;br/&gt; must(cmd.Run())&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码看似没什么问题，但仔细思考一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;syscall.Sethostname&lt;/code&gt; 这一行到底是哪个进程在执行？&lt;code&gt;main&lt;/code&gt; 进程还是 &lt;code&gt;main&lt;/code&gt; 进程创建的子进程？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不用想，子进程都还没 Run 起来呢！现在调用肯定是 &lt;code&gt;main&lt;/code&gt; 进程在执行，&lt;code&gt;main&lt;/code&gt; 进程可没进行资源隔离，相当于直接更改宿主机的主机名了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;子进程还没 Run 起来，还不能更改主机名，等子进程 Run 起来后，又会进入到阻塞状态，无法再通过代码方式更改到子进程内的主机名。那有什么办法呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看来只能把 &lt;code&gt;/proc/self/exe&lt;/code&gt; 这个神器请出来了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Linux 2.2 内核版本及其之后，&lt;code&gt;/proc/[pid]/exe&lt;/code&gt; 是对应 pid 进程的二进制文件的符号链接，包含着被执行命令的实际路径名。如果打开这个文件就相当于打开了对应的二进制文件，甚至可以通过重新输入 &lt;code&gt;/proc/[pid]/exe&lt;/code&gt; 重新运行一个对应于 pid 的二进制文件的进程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于 &lt;code&gt;/proc/self&lt;/code&gt; ，当进程访问这个神奇的符号链接时，可以解析到进程自己的 &lt;code&gt;/proc/[pid]&lt;/code&gt; 目录。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;合起来就是，当进程访问 &lt;code&gt;/proc/self/exe&lt;/code&gt; 时，可以运行一个对应进程自身的二进制文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这有什么用呢？继续看下面的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;os/exec&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;syscall&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;switch&lt;/span&gt; os.Args[&lt;span&gt;1&lt;/span&gt;] {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;run&quot;&lt;/span&gt;:&lt;br/&gt;  run()&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;child&quot;&lt;/span&gt;:&lt;br/&gt;  child()&lt;br/&gt; &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(&lt;span&gt;&quot;help&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; cmd := exec.Command(&lt;span&gt;&quot;/proc/self/exe&quot;&lt;/span&gt;, &lt;span&gt;append&lt;/span&gt;([]&lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;child&quot;&lt;/span&gt;}, os.Args[&lt;span&gt;2&lt;/span&gt;:]...)...)&lt;br/&gt; cmd.Stdin = os.Stdin&lt;br/&gt; cmd.Stdout = os.Stdout&lt;br/&gt; cmd.Stderr = os.Stderr&lt;br/&gt; cmd.SysProcAttr = &amp;amp;syscall.SysProcAttr{&lt;br/&gt;  Cloneflags: syscall.CLONE_NEWUTS,&lt;br/&gt; }&lt;br/&gt; must(cmd.Run())&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;child&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; must(syscall.Sethostname([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;mycontainer&quot;&lt;/span&gt;)))&lt;br/&gt; cmd := exec.Command(os.Args[&lt;span&gt;2&lt;/span&gt;], os.Args[&lt;span&gt;3&lt;/span&gt;:]...)&lt;br/&gt; cmd.Stdin = os.Stdin&lt;br/&gt; cmd.Stdout = os.Stdout&lt;br/&gt; cmd.Stderr = os.Stderr&lt;br/&gt; must(cmd.Run())&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;must&lt;/span&gt;&lt;span&gt;(err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 run() 函数中，我们不再是直接运行用户所传递的命令行参数，而是运行 &lt;code&gt;/proc/self/exe&lt;/code&gt; ，并传入 &lt;code&gt;child&lt;/code&gt; 参数和用户传递的命令行参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样当执行 &lt;code&gt;go run main.go run echo hello&lt;/code&gt; 时，会创建出 &lt;code&gt;main&lt;/code&gt; 进程， &lt;code&gt;main&lt;/code&gt; 进程内执行 &lt;code&gt;/proc/self/exe child echo hello&lt;/code&gt; 命令创建出一个新的 &lt;code&gt;exe&lt;/code&gt; 进程，关键也就是这个 &lt;code&gt;exe&lt;/code&gt; 进程，我们已经为其配置了 &lt;code&gt;CLONE_NEWUTS&lt;/code&gt; 系统调用参数进行 UTS 隔离。也就是说，&lt;code&gt;exe&lt;/code&gt; 进程可以拥有和 &lt;code&gt;main&lt;/code&gt; 进程不同的主机名，彼此互不干扰。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进程访问 &lt;code&gt;/proc/self/exe&lt;/code&gt; 代表着运行对应进程自身的二进制文件。因此，按照 &lt;code&gt;exe&lt;/code&gt; 进程的启动参数，会执行 child() 函数，而 child() 函数内首先调用 &lt;code&gt;syscall.Sethostname&lt;/code&gt; 更改了主机名（此时是 &lt;code&gt;exe&lt;/code&gt; 进程执行的，并不会影响到 &lt;code&gt;main&lt;/code&gt; 进程），接着和本文最开始的 run() 函数一样，再次使用 &lt;code&gt;exec.Command&lt;/code&gt; 运行用户命令行传递的参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结一下就是， &lt;code&gt;main&lt;/code&gt; 进程创建了 &lt;code&gt;exe&lt;/code&gt; 进程（&lt;code&gt;exe&lt;/code&gt; 进程已经进行 UTS 隔离，&lt;code&gt;exe&lt;/code&gt; 进程更改主机名不会影响到 &lt;code&gt;main&lt;/code&gt; 进程）， 接着 &lt;code&gt;exe&lt;/code&gt; 进程内执行 &lt;code&gt;echo hello&lt;/code&gt; 命令创建出一个新的 &lt;code&gt;echo&lt;/code&gt; 进程，最后随着 &lt;code&gt;echo&lt;/code&gt; 进程的执行完毕，&lt;code&gt;exe&lt;/code&gt; 进程随之结束，&lt;code&gt;exe&lt;/code&gt; 进程结束后， &lt;code&gt;main&lt;/code&gt; 进程再结束并退出。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.40317286652078776&quot; data-type=&quot;png&quot; data-w=&quot;1828&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8ksqiaA81NfNHicHicZ4OXUgj1JLOzmuRrlDIKZicajeVWjia4EIibcwYkUHibA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那经过 &lt;code&gt;exe&lt;/code&gt; 这个中间商所创建出来的 &lt;code&gt;echo&lt;/code&gt; 进程和之前由 &lt;code&gt;main&lt;/code&gt; 进程直接创建的 &lt;code&gt;echo&lt;/code&gt; 进程，两者有何不同呢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道，创建 &lt;code&gt;exe&lt;/code&gt; 进程的同时我们传递了 &lt;code&gt;CLONE_NEWUTS&lt;/code&gt; 标识符创建了一个 UTS NameSpace ，Go 内部帮我们封装了系统调用函数 clone() 的调用，我们也说过，由 clone() 函数创建出的进程的子进程也将会成为这些 NameSpace 的成员，所以默认情况下（创建新进程时无继续指定系统调用参数），由 &lt;code&gt;exe&lt;/code&gt; 进程创建出的 &lt;code&gt;echo&lt;/code&gt; 进程会继承 &lt;code&gt;exe&lt;/code&gt; 进程的资源， &lt;code&gt;echo&lt;/code&gt; 进程将拥有和 &lt;code&gt;exe&lt;/code&gt; 进程相同的主机名，并且同样和 &lt;code&gt;main&lt;/code&gt; 进程互不干扰。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，借助中间商 &lt;code&gt;exe&lt;/code&gt; 进程 ，&lt;code&gt;echo&lt;/code&gt; 进程可以成功实现和宿主机（ &lt;code&gt;main&lt;/code&gt; 进程）资源隔离，拥有不同的主机名。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.37714987714987713&quot; data-type=&quot;png&quot; data-w=&quot;1628&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8kGgzZDouvHshvEyl1xgpy48SwHsTvFfwMgfqtI9zpHXmaz2ficuia5d4g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再次通过启动 &lt;code&gt;/bin/bash&lt;/code&gt; 进行验证主机名是否已经成功隔离：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host go]# hostname&lt;br/&gt;host&lt;br/&gt;[root@host go]# go run main.go run /bin/bash&lt;br/&gt;[root@mycontainer go]# hostname&lt;br/&gt;mycontainer&lt;br/&gt;[root@mycontainer go]# ps&lt;br/&gt;  PID TTY          TIME CMD&lt;br/&gt; 1115 pts/0    00:00:00 bash&lt;br/&gt; 1250 pts/0    00:00:00 go&lt;br/&gt; 1268 pts/0    00:00:00 main&lt;br/&gt; 1271 pts/0    00:00:00 exe&lt;br/&gt; 1275 pts/0    00:00:00 bash&lt;br/&gt; 1287 pts/0    00:00:00 ps&lt;br/&gt;[root@mycontainer go]# exit&lt;br/&gt;exit&lt;br/&gt;[root@host go]# hostname&lt;br/&gt;host&lt;br/&gt;[root@host go]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当执行 &lt;code&gt;go run main.go run /bin/bash&lt;/code&gt; 时，我们也可以在另一个 ssh 会话中，使用 &lt;code&gt;ps afx&lt;/code&gt; 查看关于 PID 15243 的 &lt;code&gt;bash&lt;/code&gt; 会话进程的层次信息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host ~]# ps afx&lt;br/&gt;......&lt;br/&gt; 1113 ?        Ss     0:00  \_ sshd: root@pts/0&lt;br/&gt; 1115 pts/0    Ss     0:00  |   \_ -bash&lt;br/&gt; 1250 pts/0    Sl     0:00  |       \_ go run main.go run /bin/bash&lt;br/&gt; 1268 pts/0    Sl     0:00  |           \_ /tmp/go-build2476789953/b001/exe/main run /bin/bash&lt;br/&gt; 1271 pts/0    Sl     0:00  |               \_ /proc/self/exe child /bin/bash&lt;br/&gt; 1275 pts/0    S+     0:00  |                   \_ /bin/bash&lt;br/&gt;......&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以此类推，新增资源隔离只要继续传递指定的系统调用参数即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;os/exec&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;syscall&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;switch&lt;/span&gt; os.Args[&lt;span&gt;1&lt;/span&gt;] {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;run&quot;&lt;/span&gt;:&lt;br/&gt;  run()&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;child&quot;&lt;/span&gt;:&lt;br/&gt;  child()&lt;br/&gt; &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(&lt;span&gt;&quot;help&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;[main]&quot;&lt;/span&gt;, &lt;span&gt;&quot;pid:&quot;&lt;/span&gt;, os.Getpid())&lt;br/&gt; cmd := exec.Command(&lt;span&gt;&quot;/proc/self/exe&quot;&lt;/span&gt;, &lt;span&gt;append&lt;/span&gt;([]&lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;child&quot;&lt;/span&gt;}, os.Args[&lt;span&gt;2&lt;/span&gt;:]...)...)&lt;br/&gt; cmd.Stdin = os.Stdin&lt;br/&gt; cmd.Stdout = os.Stdout&lt;br/&gt; cmd.Stderr = os.Stderr&lt;br/&gt; cmd.SysProcAttr = &amp;amp;syscall.SysProcAttr{&lt;br/&gt;  Cloneflags: syscall.CLONE_NEWUTS |&lt;br/&gt;   syscall.CLONE_NEWPID |&lt;br/&gt;   syscall.CLONE_NEWNS,&lt;br/&gt;  Unshareflags: syscall.CLONE_NEWNS,&lt;br/&gt; }&lt;br/&gt; must(cmd.Run())&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;child&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;[exe]&quot;&lt;/span&gt;, &lt;span&gt;&quot;pid:&quot;&lt;/span&gt;, os.Getpid())&lt;br/&gt; must(syscall.Sethostname([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;mycontainer&quot;&lt;/span&gt;)))&lt;br/&gt; must(os.Chdir(&lt;span&gt;&quot;/&quot;&lt;/span&gt;))&lt;br/&gt; must(syscall.Mount(&lt;span&gt;&quot;proc&quot;&lt;/span&gt;, &lt;span&gt;&quot;proc&quot;&lt;/span&gt;, &lt;span&gt;&quot;proc&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;))&lt;br/&gt; cmd := exec.Command(os.Args[&lt;span&gt;2&lt;/span&gt;], os.Args[&lt;span&gt;3&lt;/span&gt;:]...)&lt;br/&gt; cmd.Stdin = os.Stdin&lt;br/&gt; cmd.Stdout = os.Stdout&lt;br/&gt; cmd.Stderr = os.Stderr&lt;br/&gt; must(cmd.Run())&lt;br/&gt; must(syscall.Unmount(&lt;span&gt;&quot;proc&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;))&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;must&lt;/span&gt;&lt;span&gt;(err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Cloneflags&lt;/code&gt; 参数新增了 &lt;code&gt;CLONE_NEWPID&lt;/code&gt; 和 &lt;code&gt;CLONE_NEWNS&lt;/code&gt; 分别隔离进程 pid 和文件目录挂载点视图，&lt;code&gt;Unshareflags: syscall.CLONE_NEWNS&lt;/code&gt; 则是用于禁用挂载传播（如果不设置该参数，container 内的挂载会共享到 host ，挂载传播不在本文的探讨范围内）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们创建 PID Namespace 时，&lt;code&gt;exe&lt;/code&gt; 进程包括其创建出来的子进程的 pid 已经和 &lt;code&gt;main&lt;/code&gt; 进程隔离了，这一点可以通过打印 &lt;code&gt;os.Getpid()&lt;/code&gt; 结果或执行 &lt;code&gt;echo $$&lt;/code&gt; 命令得到验证。但此时还不能使用 &lt;code&gt;ps&lt;/code&gt; 命令查看，因为 &lt;code&gt;ps&lt;/code&gt; 和 &lt;code&gt;top&lt;/code&gt; 等命令会使用 &lt;code&gt;/proc&lt;/code&gt; 的内容，所以我们才继续引入了 Mount Namespace ，并在 &lt;code&gt;exe&lt;/code&gt; 进程挂载 &lt;code&gt;/proc&lt;/code&gt; 目录。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Mount Namespace 是 Linux 第一个实现的 Namespace ，其系统调用参数是 CLONE_NEWNS ( New Namespace ) ，是因为当时并没意识到之后还会新增这么多的 Namespace 类型。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host go]# ps&lt;br/&gt;  PID TTY          TIME CMD&lt;br/&gt; 1115 pts/0    00:00:00 bash&lt;br/&gt; 3792 pts/0    00:00:00 ps&lt;br/&gt;[root@host go]# echo $$&lt;br/&gt;1115&lt;br/&gt;[root@host go]# go run main.go run /bin/bash&lt;br/&gt;[main] pid: 3811&lt;br/&gt;[exe] pid: 1&lt;br/&gt;[root@mycontainer /]# ps&lt;br/&gt;  PID TTY          TIME CMD&lt;br/&gt;    1 pts/0    00:00:00 exe&lt;br/&gt;    4 pts/0    00:00:00 bash&lt;br/&gt;   15 pts/0    00:00:00 ps&lt;br/&gt;[root@mycontainer /]# echo $$&lt;br/&gt;4&lt;br/&gt;[root@mycontainer /]# exit&lt;br/&gt;exit&lt;br/&gt;[root@host go]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，&lt;code&gt;exe&lt;/code&gt; 作为初始化进程，pid 为 1 ，创建出了 pid 4 的 &lt;code&gt;bash&lt;/code&gt; 子进程，而且已经看不到 &lt;code&gt;main&lt;/code&gt; 进程了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;剩下的 IPC 、NET、 USER 等 NameSpace 就不在本文一一展示了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2、Cgroups&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;借助 NameSpace 技术可以帮进程隔离出自己单独的空间，成功实现出最简容器。但是怎样限制这些空间的物理资源开销（CPU、内存、存储、I/O 等）就需要利用 Cgroups 技术了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限制容器的资源使用，是一个非常重要的功能，如果一个容器可以毫无节制的使用服务器资源，那便又回到了传统模式下将应用直接运行在物理服务器上的弊端。这是容器化技术不能接受的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cgroups 的全称是 Control groups 即控制组，最早是由 Google 的工程师（主要是 Paul Menage 和 Rohit Seth）在 2006 年发起，一开始叫做进程容器（process containers）。在 2007 年时，因为在 Linux Kernel 中，容器（container）这个名词有许多不同的意义，为避免混乱，被重命名为 cgroup ，并且被合并到 2.6.24 版本的内核中去。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Android 也是凭借这个技术，为每个 APP 分配不同的 cgroup ，将每个 APP 进行隔离，而不会影响到其他的 APP 环境。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cgroups 是对进程分组管理的一种机制，提供了对一组进程及它们的子进程的资源限制、控制和统计的能力，并为每种可以控制的资源定义了一个 subsystem （子系统）的方式进行统一接口管理，因此 subsystem 也被称为 resource controllers （资源控制器）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;几个主要的 subsystem 如下（ Cgroups V1 ）：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;子系统&lt;/th&gt;&lt;th&gt;作用&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;cpu&lt;/td&gt;&lt;td&gt;限制进程的 cpu 使用率&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cpuacct&lt;/td&gt;&lt;td&gt;统计进程的 cpu 使用情况&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cpuset&lt;/td&gt;&lt;td&gt;在多核机器上为进程分配单独的 cpu 节点或者内存节点（仅限 NUMA 架构）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory&lt;/td&gt;&lt;td&gt;限制进程的 memory 使用量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;blkio&lt;/td&gt;&lt;td&gt;控制进程对块设备（例如硬盘） io 的访问&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;devices&lt;/td&gt;&lt;td&gt;控制进程对设备的访问&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;net_cls&lt;/td&gt;&lt;td&gt;标记进程的网络数据包，以便可以使用 tc 模块（traffic control）对数据包进行限流、监控等控制&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;net_prio&lt;/td&gt;&lt;td&gt;控制进程产生的网络流量的优先级&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;freezer&lt;/td&gt;&lt;td&gt;挂起或者恢复进程&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;pids&lt;/td&gt;&lt;td&gt;限制 cgroup 的进程数量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;更多子系统参考 &lt;span&gt;Linux man cgroups&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;文档&lt;/td&gt;&lt;td&gt;https://man7.org/linux/man-pages/man7/cgroups.7.html&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;借助 Cgroups 机制，可以将一组进程（task group）和一组 subsystem 关联起来，达到控制进程对应关联的资源的能力。如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9615902964959568&quot; data-type=&quot;png&quot; data-w=&quot;1484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8k9lYHy0Hm4TuZkFwmZSo3MorJXiaIPXib5DMMfp8HjicrcXFkGLWzvR34w/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cgroups 的层级结构称为 hierarchy （即 cgroup 树），是一棵树，由 cgroup 节点组成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统可以有多个 hierarchy ，当创建新的 hierarchy 时，系统所有的进程都会加入到这个 hierarchy 默认创建的 root cgroup 根节点中，在树中，子节点可以继承父节点的属性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于同一个 hierarchy，进程只能存在于其中一个 cgroup 节点中。如果把一个进程添加到同一个 hierarchy 中的另一个 cgroup 节点，则会从第一个 cgroup 节点中移除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hierarchy 可以附加一个或多个 subsystem 来拥有对应资源（如 cpu 和 memory ）的管理权，其中每一个 cgroup 节点都可以设置不同的资源限制权重，而进程（ task ）则绑定在 cgroup 节点中，并且其子进程也会默认绑定到父进程所在的 cgroup 节点中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于 Cgroups 的这些运作原理，可以得出：如果想限制某些进程的内存资源，就可以先创建一个 hierarchy ，并为其挂载 memory subsystem ，然后在这个 hierarchy 中创建一个 cgroup 节点，在这个节点中，将需要控制的进程 pid 和控制属性写入即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们就来实践一下。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Linux 一切皆文件。&lt;/p&gt;&lt;p&gt;在 Linux Kernel 中，为了让 Cgroups 的配置更直观，使用了目录的层级关系来模拟 hierarchy ，以此通过虚拟的树状文件系统的方式暴露给用户调用。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个 hierarchy ，并为其挂载 memory subsystem ，这一步我们可以跳过，因为系统已经默认为每个 subsystem 创建了一个默认的 hierarchy ，我们可以直接使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如 memory subsystem 默认的 hierarchy 就在 &lt;code&gt;/sys/fs/cgroup/memory&lt;/code&gt; 目录。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host go]# mount | grep memory&lt;br/&gt;cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)&lt;br/&gt;[root@host go]# cd /sys/fs/cgroup/memory&lt;br/&gt;[root@host memory]# pwd&lt;br/&gt;/sys/fs/cgroup/memory&lt;br/&gt;[root@host memory]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要在这个 hierarchy 目录下创建一个文件夹，就相当于创建了一个 cgroup 节点：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host memory]# mkdir hello&lt;br/&gt;[root@host memory]# cd hello/&lt;br/&gt;[root@host hello]# ls&lt;br/&gt;cgroup.clone_children           memory.kmem.slabinfo                memory.memsw.failcnt             memory.soft_limit_in_bytes&lt;br/&gt;cgroup.event_control            memory.kmem.tcp.failcnt             memory.memsw.limit_in_bytes      memory.stat&lt;br/&gt;cgroup.procs                    memory.kmem.tcp.limit_in_bytes      memory.memsw.max_usage_in_bytes  memory.swappiness&lt;br/&gt;memory.failcnt                  memory.kmem.tcp.max_usage_in_bytes  memory.memsw.usage_in_bytes      memory.usage_in_bytes&lt;br/&gt;memory.force_empty              memory.kmem.tcp.usage_in_bytes      memory.move_charge_at_immigrate  memory.use_hierarchy&lt;br/&gt;memory.kmem.failcnt             memory.kmem.usage_in_bytes          memory.numa_stat                 notify_on_release&lt;br/&gt;memory.kmem.limit_in_bytes      memory.limit_in_bytes               memory.oom_control               tasks&lt;br/&gt;memory.kmem.max_usage_in_bytes  memory.max_usage_in_bytes           memory.pressure_level&lt;br/&gt;[root@host hello]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中我们创建的 &lt;code&gt;hello&lt;/code&gt; 文件夹内的所有文件都是系统自动创建的。常用的几个文件功能如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;文件名&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;tasks&lt;/td&gt;&lt;td&gt;cgroup 中运行的进程（ PID）列表。将 PID 写入一个 cgroup 的 tasks 文件，可将此进程移至该 cgroup&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cgroup.procs&lt;/td&gt;&lt;td&gt;cgroup 中运行的线程群组列表（ TGID ）。将 TGID 写入 cgroup 的 cgroup.procs 文件，可将此线程组群移至该 cgroup&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cgroup.event_control&lt;/td&gt;&lt;td&gt;event_fd() 的接口。允许 cgroup 的变更状态通知被发送&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;notify_on_release&lt;/td&gt;&lt;td&gt;用于自动移除空 cgroup 。默认为禁用状态（0）。设定为启用状态（1）时，当 cgroup 不再包含任何任务时（即，cgroup 的 &lt;code&gt;tasks&lt;/code&gt; 文件包含 PID，而 PID 被移除，致使文件变空），kernel 会执行 &lt;code&gt;release_agent&lt;/code&gt; 文件（仅在 root cgroup 出现）的内容，并且提供通向被清空 cgroup 的相关路径（与 root cgroup 相关）作为参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory.usage_in_bytes&lt;/td&gt;&lt;td&gt;显示 cgroup 中进程当前所用的内存总量（以字节为单位）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory.memsw.usage_in_bytes&lt;/td&gt;&lt;td&gt;显示 cgroup 中进程当前所用的内存量和 swap 空间总和（以字节为单位）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory.max_usage_in_bytes&lt;/td&gt;&lt;td&gt;显示 cgroup 中进程所用的最大内存量（以字节为单位）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory.memsw.max_usage_in_bytes&lt;/td&gt;&lt;td&gt;显示 cgroup 中进程的最大内存用量和最大 swap 空间用量（以字节为单位）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory.limit_in_bytes&lt;/td&gt;&lt;td&gt;设定用户内存（包括文件缓存）的最大用量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory.memsw.limit_in_bytes&lt;/td&gt;&lt;td&gt;设定内存与 swap 用量之和的最大值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory.failcnt&lt;/td&gt;&lt;td&gt;显示内存达到 &lt;code&gt;memory.limit_in_bytes&lt;/code&gt; 设定的限制值的次数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory.memsw.failcnt&lt;/td&gt;&lt;td&gt;显示内存和 swap 空间总和达到 &lt;code&gt;memory.memsw.limit_in_bytes&lt;/code&gt; 设定的限制值的次数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory.oom_control&lt;/td&gt;&lt;td&gt;可以为 cgroup 启用或者禁用“内存不足”（Out of Memory，OOM） 终止程序。默认为启用状态（0），尝试消耗超过其允许内存的任务会被 OOM 终止程序立即终止。设定为禁用状态（1）时，尝试使用超过其允许内存的任务会被暂停，直到有额外内存可用。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;更多文件的功能说明可以查看 kernel 文档中的 &lt;span&gt;cgroup-v1/memory&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个 &lt;code&gt;hello cgroup&lt;/code&gt; 节点中，我们想限制某些进程的内存资源，只需将对应的进程 pid 写入到 &lt;code&gt;tasks&lt;/code&gt; 文件，并把内存最大用量设定到 &lt;code&gt;memory.limit_in_bytes&lt;/code&gt; 文件即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host hello]# cat memory.oom_control&lt;br/&gt;oom_kill_disable 0&lt;br/&gt;under_oom 0&lt;br/&gt;[root@host hello]# cat memory.failcnt&lt;br/&gt;0&lt;br/&gt;[root@host hello]# echo 100M &amp;gt; memory.limit_in_bytes&lt;br/&gt;[root@host hello]# cat memory.limit_in_bytes&lt;br/&gt;104857600&lt;br/&gt;[root@host hello]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;hello cgroup&lt;/code&gt; 节点默认启用了 OOM 终止程序，因此，当有进程尝试使用超过可用内存时会被立即终止。查询 &lt;code&gt;memory.failcnt&lt;/code&gt; 可知，目前还没有进程内存达到过设定的最大内存限制值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们已经设定了 &lt;code&gt;hello cgroup&lt;/code&gt; 节点可使用的最大内存为 100M ，此时新启动一个 &lt;code&gt;bash&lt;/code&gt; 会话进程并将其移入到 &lt;code&gt;hello cgroup&lt;/code&gt; 节点中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host hello]# /bin/bash&lt;br/&gt;[root@host hello]# echo $$&lt;br/&gt;4123&lt;br/&gt;[root@host hello]# cat tasks&lt;br/&gt;[root@host hello]# echo $$ &amp;gt; tasks&lt;br/&gt;[root@host hello]# cat tasks&lt;br/&gt;4123&lt;br/&gt;4135&lt;br/&gt;[root@host hello]# cat memory.usage_in_bytes&lt;br/&gt;196608&lt;br/&gt;[root@host hello]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续在此会话进程所创建的子进程都会加入到该 &lt;code&gt;hello cgroup&lt;/code&gt; 节点中（例如 pid 4135 就是由于执行 cat 命令而创建的新进程，被系统自动加入到了 tasks 文件中）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续使用 &lt;span&gt;memtester&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; 工具来测试 100M 的最大内存限制是否生效：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host hello]# memtester 50M 1&lt;br/&gt;memtester version 4.5.1 (64-bit)&lt;br/&gt;Copyright (C) 2001-2020 Charles Cazabon.&lt;br/&gt;Licensed under the GNU General Public License version 2 (only).&lt;br/&gt;&lt;br/&gt;pagesize is 4096&lt;br/&gt;pagesizemask is 0xfffffffffffff000&lt;br/&gt;want 50MB (52428800 bytes)&lt;br/&gt;got  50MB (52428800 bytes), trying mlock ...locked.&lt;br/&gt;Loop 1/1:&lt;br/&gt;  Stuck Address       : ok&lt;br/&gt;  Random Value        : ok&lt;br/&gt;  Compare XOR         : ok&lt;br/&gt;  Compare SUB         : ok&lt;br/&gt;  Compare MUL         : ok&lt;br/&gt;  Compare DIV         : ok&lt;br/&gt;  Compare OR          : ok&lt;br/&gt;  Compare AND         : ok&lt;br/&gt;  Sequential Increment: ok&lt;br/&gt;  Solid Bits          : ok&lt;br/&gt;  Block Sequential    : ok&lt;br/&gt;  Checkerboard        : ok&lt;br/&gt;  Bit Spread          : ok&lt;br/&gt;  Bit Flip            : ok&lt;br/&gt;  Walking Ones        : ok&lt;br/&gt;  Walking Zeroes      : ok&lt;br/&gt;  8-bit Writes        : ok&lt;br/&gt;  16-bit Writes       : ok&lt;br/&gt;&lt;br/&gt;Done.&lt;br/&gt;[root@host hello]# memtester 100M 1&lt;br/&gt;memtester version 4.5.1 (64-bit)&lt;br/&gt;Copyright (C) 2001-2020 Charles Cazabon.&lt;br/&gt;Licensed under the GNU General Public License version 2 (only).&lt;br/&gt;&lt;br/&gt;pagesize is 4096&lt;br/&gt;pagesizemask is 0xfffffffffffff000&lt;br/&gt;want 100MB (104857600 bytes)&lt;br/&gt;got  100MB (104857600 bytes), trying mlock ...over system/pre-process limit, reducing...&lt;br/&gt;got  99MB (104853504 bytes), trying mlock ...over system/pre-process limit, reducing...&lt;br/&gt;got  99MB (104849408 bytes), trying mlock ...over system/pre-process limit, reducing...&lt;br/&gt;......&lt;br/&gt;[root@host hello]# cat memory.failcnt&lt;br/&gt;1434&lt;br/&gt;[root@host hello]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到当 memtester 尝试申请 100M 内存时，失败了，而 &lt;code&gt;memory.failcnt&lt;/code&gt; 报告显示内存达到 &lt;code&gt;memory.limit_in_bytes&lt;/code&gt; 设定的限制值（100M）的次数为 1434 次。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要删除 cgroup 节点，也只需要删除对应的文件夹即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host hello]# exit&lt;br/&gt;exit&lt;br/&gt;[root@host hello]# cd ../&lt;br/&gt;[root@host memory]# rmdir hello/&lt;br/&gt;[root@host memory]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过上面对 Cgroups 的使用和实践，可以将其应用到我们之前的 Go 程序中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;os/exec&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;path/filepath&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;strconv&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;syscall&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;switch&lt;/span&gt; os.Args[&lt;span&gt;1&lt;/span&gt;] {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;run&quot;&lt;/span&gt;:&lt;br/&gt;  run()&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;child&quot;&lt;/span&gt;:&lt;br/&gt;  child()&lt;br/&gt; &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(&lt;span&gt;&quot;help&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;[main]&quot;&lt;/span&gt;, &lt;span&gt;&quot;pid:&quot;&lt;/span&gt;, os.Getpid())&lt;br/&gt; cmd := exec.Command(&lt;span&gt;&quot;/proc/self/exe&quot;&lt;/span&gt;, &lt;span&gt;append&lt;/span&gt;([]&lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;child&quot;&lt;/span&gt;}, os.Args[&lt;span&gt;2&lt;/span&gt;:]...)...)&lt;br/&gt; cmd.Stdin = os.Stdin&lt;br/&gt; cmd.Stdout = os.Stdout&lt;br/&gt; cmd.Stderr = os.Stderr&lt;br/&gt; cmd.SysProcAttr = &amp;amp;syscall.SysProcAttr{&lt;br/&gt;  Cloneflags: syscall.CLONE_NEWUTS |&lt;br/&gt;   syscall.CLONE_NEWPID |&lt;br/&gt;   syscall.CLONE_NEWNS,&lt;br/&gt;  Unshareflags: syscall.CLONE_NEWNS,&lt;br/&gt; }&lt;br/&gt; must(cmd.Run())&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;child&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;[exe]&quot;&lt;/span&gt;, &lt;span&gt;&quot;pid:&quot;&lt;/span&gt;, os.Getpid())&lt;br/&gt; cg()&lt;br/&gt; must(syscall.Sethostname([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;mycontainer&quot;&lt;/span&gt;)))&lt;br/&gt; must(os.Chdir(&lt;span&gt;&quot;/&quot;&lt;/span&gt;))&lt;br/&gt; must(syscall.Mount(&lt;span&gt;&quot;proc&quot;&lt;/span&gt;, &lt;span&gt;&quot;proc&quot;&lt;/span&gt;, &lt;span&gt;&quot;proc&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;))&lt;br/&gt; cmd := exec.Command(os.Args[&lt;span&gt;2&lt;/span&gt;], os.Args[&lt;span&gt;3&lt;/span&gt;:]...)&lt;br/&gt; cmd.Stdin = os.Stdin&lt;br/&gt; cmd.Stdout = os.Stdout&lt;br/&gt; cmd.Stderr = os.Stderr&lt;br/&gt; must(cmd.Run())&lt;br/&gt; must(syscall.Unmount(&lt;span&gt;&quot;proc&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;))&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;cg&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; mycontainer_memory_cgroups := &lt;span&gt;&quot;/sys/fs/cgroup/memory/mycontainer&quot;&lt;/span&gt;&lt;br/&gt; os.Mkdir(mycontainer_memory_cgroups, &lt;span&gt;0755&lt;/span&gt;)&lt;br/&gt; must(ioutil.WriteFile(filepath.Join(mycontainer_memory_cgroups, &lt;span&gt;&quot;memory.limit_in_bytes&quot;&lt;/span&gt;), []&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;100M&quot;&lt;/span&gt;), &lt;span&gt;0700&lt;/span&gt;))&lt;br/&gt; must(ioutil.WriteFile(filepath.Join(mycontainer_memory_cgroups, &lt;span&gt;&quot;notify_on_release&quot;&lt;/span&gt;), []&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;1&quot;&lt;/span&gt;), &lt;span&gt;0700&lt;/span&gt;))&lt;br/&gt; must(ioutil.WriteFile(filepath.Join(mycontainer_memory_cgroups, &lt;span&gt;&quot;tasks&quot;&lt;/span&gt;), []&lt;span&gt;byte&lt;/span&gt;(strconv.Itoa(os.Getpid())), &lt;span&gt;0700&lt;/span&gt;))&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;must&lt;/span&gt;&lt;span&gt;(err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在 &lt;code&gt;exe&lt;/code&gt; 进程添加了对 cg() 函数的调用，代码相对简单，和我们的实践流程几乎是一致的，区别只在于为 &lt;code&gt;notify_on_release&lt;/code&gt; 文件设定为 1 值，使得当我们的 &lt;code&gt;exe&lt;/code&gt; 进程退出后，可以自动移除所创建的 cgroup 。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host go]# go run main.go run /bin/bash&lt;br/&gt;[main] pid: 4693&lt;br/&gt;[exe] pid: 1&lt;br/&gt;[root@mycontainer /]# ps&lt;br/&gt;  PID TTY          TIME CMD&lt;br/&gt;    1 pts/2    00:00:00 exe&lt;br/&gt;    4 pts/2    00:00:00 bash&lt;br/&gt;   15 pts/2    00:00:00 ps&lt;br/&gt;[root@mycontainer /]# cat /sys/fs/cgroup/memory/mycontainer/tasks&lt;br/&gt;1&lt;br/&gt;4&lt;br/&gt;16&lt;br/&gt;[root@mycontainer /]# cat /sys/fs/cgroup/memory/mycontainer/notify_on_release&lt;br/&gt;1&lt;br/&gt;[root@mycontainer /]# cat /sys/fs/cgroup/memory/mycontainer/memory.limit_in_bytes&lt;br/&gt;104857600&lt;br/&gt;[root@mycontainer /]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 memtester 测试和结果预期一致：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@mycontainer /]# memtester 100M 1&lt;br/&gt;memtester version 4.5.1 (64-bit)&lt;br/&gt;Copyright (C) 2001-2020 Charles Cazabon.&lt;br/&gt;Licensed under the GNU General Public License version 2 (only).&lt;br/&gt;&lt;br/&gt;pagesize is 4096&lt;br/&gt;pagesizemask is 0xfffffffffffff000&lt;br/&gt;want 100MB (104857600 bytes)&lt;br/&gt;got  100MB (104857600 bytes), trying mlock ...over system/pre-process limit, reducing...&lt;br/&gt;got  99MB (104853504 bytes), trying mlock ...over system/pre-process limit, reducing...&lt;br/&gt;got  99MB (104849408 bytes), trying mlock ...over system/pre-process limit, reducing...&lt;br/&gt;......&lt;br/&gt;[root@mycontainer /]# exit&lt;br/&gt;exit&lt;br/&gt;[root@host go]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样篇幅问题，剩下的 subsystem 也不在本文一一展示了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实到这里，我们已经通过 NameSpace 技术帮进程隔离出自己单独的空间，并使用 Cgroups 技术限制和监控这些空间的资源开销，这种特殊的进程就是容器的本质。可以说，我们本篇文章的目的已达成，可以结束了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.40881642512077293&quot; data-type=&quot;png&quot; data-w=&quot;1656&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8kHkG7DHG8eTBMz8em3ZVRicQCFMs4SEgqROrHpicrla3iaoWe2QibuuJU7g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是除了利用 NameSpace 和 Cgroups 来实现 &lt;strong&gt;容器（container）&lt;/strong&gt; ，在 Docker 中,还使用到了一个 Linux Kernel 技术：UnionFS 来实现 &lt;strong&gt;镜像（images）&lt;/strong&gt; 功能。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;鉴于本篇文章的主旨 —— 使用 Go 和 Linux Kernel 技术探究容器化原理的主要技术点是 NameSpace 和 Cgroups 。镜像的实现技术 UnionFS 属于加餐内容，可自行选择是否需要消化。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3、UnionFS&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;UnionFS 全称 Union File System （联合文件系统），在 2004 年由纽约州立大学石溪分校开发，是为 Linux、FreeBSD 和 NetBSD 操作系统设计的一种分层、轻量级并且高性能的文件系统，可以 &lt;strong&gt;把多个目录内容联合挂载到同一个目录下&lt;/strong&gt; ，而目录的物理位置是分开的，并且对文件系统的修改是类似于 git 的 commit 一样 &lt;strong&gt;作为一次提交来一层层的叠加的&lt;/strong&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Docker 中，镜像相当于是容器的模板，一个镜像可以衍生出多个容器。镜像利用 UnionFS 技术来实现，就可以利用其 &lt;strong&gt;分层的特性&lt;/strong&gt; 来进行镜像的继承，基于基础镜像，制作出各种具体的应用镜像，不同容器就可以直接 &lt;strong&gt;共享基础的文件系统层&lt;/strong&gt; ，同时再加上自己独有的改动层，大大提高了存储的效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以该 Dockerfile 为例&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;FROM&lt;/span&gt; ubuntu:&lt;span&gt;18.04&lt;/span&gt;&lt;br/&gt;&lt;span&gt;LABEL&lt;/span&gt;&lt;span&gt; org.opencontainers.image.authors=&lt;span&gt;&quot;org@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; . /app&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; make /app&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; rm -r &lt;span&gt;$HOME&lt;/span&gt;/.cache&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CMD&lt;/span&gt;&lt;span&gt; python /app/app.py&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;镜像的每一层都可以代表 Dockerfile 中的一条指令，并且除了最后一层之外的每一层都是只读的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在该 Dockerfile 中包含了多个命令，如果命令修改了文件系统就会创建一个层（利用 UnionFS 的原理）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先 &lt;code&gt;FROM&lt;/code&gt; 语句从 &lt;code&gt;ubuntu:18.04&lt;/code&gt; 镜像创建一个层 【1】，而 &lt;code&gt;LABEL&lt;/code&gt; 命令仅修改镜像的元数据，不会生成新镜像层，接着 &lt;code&gt;COPY&lt;/code&gt; 命令会把当前目录中的文件添加到镜像中的 &lt;code&gt;/app&lt;/code&gt; 目录下，在层【1】的基础上生成了层【2】。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个 &lt;code&gt;RUN&lt;/code&gt; 命令使用 &lt;code&gt;make&lt;/code&gt; 构建应用程序，并将结果写入新层【3】。第二个 &lt;code&gt;RUN&lt;/code&gt; 命令删除缓存目录，并将结果写入新层【4】。最后，&lt;code&gt;CMD&lt;/code&gt; 指令指定在容器内运行什么命令，只修改了镜像的元数据，也不会产生镜像层。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这【4】个层（layer）相互堆叠在一起就是一个镜像。当创建一个新容器时，会在 &lt;strong&gt;镜像层（image layers）&lt;/strong&gt; 上面再添加一个新的可写层，称为 &lt;strong&gt;容器层（container layer）&lt;/strong&gt; 。对正在运行的容器所做的所有更改，例如写入新文件、修改现有文件和删除文件，都会写入到这个可写容器层。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6948148148148148&quot; data-type=&quot;jpeg&quot; data-w=&quot;675&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8k95wiaZ0wESYr2jORRpicmE1nx3K1ib9oO02zDC1eTf3aJT8U8Nd1NWqfg/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于相同的镜像层，每一个容器都会有自己的可写容器层，并且所有的变化都存储在这个容器层中，所以多个容器可以共享对同一个底层镜像的访问，并且拥有自己的数据状态。而当容器被删除时，其可写容器层也会被删除，如果用户需要持久化容器里的数据，就需要使用 Volume 挂载到宿主机目录。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6176853055916776&quot; data-type=&quot;jpeg&quot; data-w=&quot;769&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8kZdMbqMRzYRdrZFap22l0vpIMgWrmF8a7ehVBf9p8MTMajspuXteicOQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看完 Docker 镜像的运作原理，让我们回到其实现技术 UnionFS 本身。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前 Docker 支持的 UnionFS 有以下几种类型：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;联合文件系统&lt;/th&gt;&lt;th&gt;存储驱动&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;OverlayFS&lt;/td&gt;&lt;td&gt;overlay2&lt;/td&gt;&lt;td&gt;当前所有受支持的 Linux 发行版的 &lt;strong&gt;首选&lt;/strong&gt; 存储驱动程序，并且不需要任何额外的配置&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OverlayFS&lt;/td&gt;&lt;td&gt;fuse-overlayfs&lt;/td&gt;&lt;td&gt;仅在不提供对 rootless 支持的主机上运行 Rootless Docker 时才首选&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Btrfs 和 ZFS&lt;/td&gt;&lt;td&gt;btrfs 和 zfs&lt;/td&gt;&lt;td&gt;允许使用高级选项，例如创建快照，但需要更多的维护和设置&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;VFS&lt;/td&gt;&lt;td&gt;vfs&lt;/td&gt;&lt;td&gt;旨在用于测试目的，以及无法使用写时复制文件系统的情况下使用。此存储驱动程序性能较差，一般不建议用于生产用途&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;AUFS&lt;/td&gt;&lt;td&gt;aufs&lt;/td&gt;&lt;td&gt;Docker 18.06 和更早版本的首选存储驱动程序。但是在没有 overlay2 驱动的机器上仍然会使用 aufs 作为 Docker 的默认驱动&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Device Mapper&lt;/td&gt;&lt;td&gt;devicemapper&lt;/td&gt;&lt;td&gt;RHEL （旧内核版本不支持 overlay2，最新版本已支持）的 Docker Engine 的默认存储驱动，有两种配置模式：loop-lvm（零配置但性能差） 和 direct-lvm（生产环境推荐）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OverlayFS&lt;/td&gt;&lt;td&gt;overlay&lt;/td&gt;&lt;td&gt;推荐使用 overlay2 存储驱动&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在尽可能的情况下，推荐使用 OverlayFS 的 overlay2 存储驱动，这也是当前 Docker 默认的存储驱动（以前是 AUFS 的 aufs ）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可查看 Docker 使用了哪种存储驱动：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host ~]# docker -v&lt;br/&gt;Docker version 20.10.15, build fd82621&lt;br/&gt;[root@host ~]# docker info | grep Storage&lt;br/&gt; Storage Driver: overlay2&lt;br/&gt;[root@host ~]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OverlayFS 其实是一个类似于 AUFS 的、面向 Linux 的现代联合文件系统，在 2014 年被合并到 Linux Kernel （version 3.18）中，相比 AUFS 其速度更快且实现更简单。 overlay2 （Linux Kernel version 4.0 或以上）则是其推荐的驱动程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;overlay2 由四个结构组成，其中：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;lowerdir ：表示较为底层的目录，对应 Docker 中的只读镜像层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;upperdir ：表示较为上层的目录，对应 Docker 中的可写容器层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;workdir ：表示工作层（中间层）的目录，在使用过程中对用户不可见&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;merged ：所有目录合并后的联合挂载点，给用户暴露的统一目录视图，对应 Docker 中用户实际看到的容器内的目录视图&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是在 Docker 文档中关于 &lt;span&gt;overlay 的架构图&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;，但是对于 overlay2 也同样可以适用：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.25596816976127323&quot; data-type=&quot;jpeg&quot; data-w=&quot;754&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8k5nuvOFaseF7WZUZd2iblj3UT2z9anZtVoaf5Yyb5dSiaFhJhPtgnibKqQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 lowerdir 所对应的镜像层（ Image layer ），实际上是可以有很多层的，图中只画了一层。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;细心的小伙伴可能会发现，图中并没有出现 workdir ，它究竟是如何工作的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以从读写的视角来理解，对于读的情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;文件在 upperdir ，直接读取&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文件不在 upperdir ，从 lowerdir 读取，会产生非常小的性能开销&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文件同时存在 upperdir 和 lowerdir 中，从 upperdir 读取（upperdir 中的文件隐藏了 lowerdir 中的同名文件）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于写的情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;创建一个新文件，文件在 upperdir 和 lowerdir 中都不存在，则直接在 upperdir 创建&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;修改文件，如果该文件在 upperdir 中存在，则直接修改&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;修改文件，如果该文件在 upperdir 中不存在，将执行 copy_up 操作，把文件从 lowerdir 复制到 upperdir ，后续对该文件的写入操作将对已经复制到 upperdir 的副本文件进行操作。这就是 &lt;strong&gt;写时复制（copy-on-write）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;删除文件，如果文件只在 upperdir 存在，则直接删除&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;删除文件，如果文件只在 lowerdir 存在，会在 upperdir 中创建一个同名的空白文件（whiteout file），lowerdir 中的文件不会被删除，因为他们是只读的，但 whiteout file 会阻止它们继续显示&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;删除文件，如果文件在 upperdir 和 lowerdir 中都存在，则先将 upperdir 中的文件删除，再创建一个同名的空白文件（whiteout file）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;删除目录和删除文件是一致的，会在 upperdir 中创建一个同名的不透明的目录（opaque directory），和 whiteout file 原理一样，opaque directory 会阻止用户继续访问，即便 lowerdir 内的目录仍然存在&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说了半天，好像还是没有讲到 workdir 的作用，这得理解一下，毕竟人家在使用过程中对用户是不可见的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但其实 workdir 的作用不可忽视。想象一下，在删除文件（或目录）的场景下（文件或目录在 upperdir 和 lowerdir 中都存在），对于 lowerdir 而言，倒没什么，毕竟只读，不需要理会，但是对于 upperdir 来讲就不同了。在 upperdir 中，我们要先删除对应的文件，然后才可以创建同名的 whiteout file ，如何保证这两步必须都执行，这就涉及到了原子性操作了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;workdir 是用来进行一些中间操作的，其中就包括了原子性保证。在上面的问题中，完全可以先在 workdir 创建一个同名的 whiteout file ，然后再在 upperdir 上执行两步操作，成功之后，再删除掉 workdir 中的 whiteout file 即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而当修改文件时，workdir 也在充当着中间层的作用，当对 upperdir 里面的副本进行修改时，会先放到 workdir ，然后再从 workdir 移到 upperdir 里面去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理解完 overlay2 运作原理，接下来正式进入到演示环节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先可以来看看在 Docker 中启动了一个容器后，其挂载点是怎样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host ~]# mount | grep overlay&lt;br/&gt;[root@host ~]# docker run -d -it ubuntu:18.04 /bin/bash&lt;br/&gt;cb25841054d9f037ec5cf4c24a97a05f771b43a358dd89b40346ca3ab0e5eaf4&lt;br/&gt;[root@host ~]# mount | grep overlay&lt;br/&gt;overlay on /var/lib/docker/overlay2/56bbb1dbdd636984e4891db7850939490ece5bc7a3f3361d75b1341f0fb30b85/merged type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/OOPFROHUDK727Z5QKNPWG5FBWV:/var/lib/docker/overlay2/l/6TWQL4UC7XYLZWZBKPS6F4IKLF,upperdir=/var/lib/docker/overlay2/56bbb1dbdd636984e4891db7850939490ece5bc7a3f3361d75b1341f0fb30b85/diff,workdir=/var/lib/docker/overlay2/56bbb1dbdd636984e4891db7850939490ece5bc7a3f3361d75b1341f0fb30b85/work)&lt;br/&gt;[root@host ~]# ll /var/lib/docker/overlay2/56bbb1dbdd636984e4891db7850939490ece5bc7a3f3361d75b1341f0fb30b85/merged&lt;br/&gt;total 76&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 28 08:04 bin&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 24  2018 boot&lt;br/&gt;drwxr-xr-x  1 root root 4096 May 10 11:17 dev&lt;br/&gt;drwxr-xr-x  1 root root 4096 May 10 11:17 etc&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 24  2018 home&lt;br/&gt;drwxr-xr-x  8 root root 4096 May 23  2017 lib&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 28 08:03 lib64&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 28 08:03 media&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 28 08:03 mnt&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 28 08:03 opt&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 24  2018 proc&lt;br/&gt;drwx------  2 root root 4096 Apr 28 08:04 root&lt;br/&gt;drwxr-xr-x  5 root root 4096 Apr 28 08:04 run&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 28 08:04 sbin&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 28 08:03 srv&lt;br/&gt;drwxr-xr-x  2 root root 4096 Apr 24  2018 sys&lt;br/&gt;drwxrwxrwt  2 root root 4096 Apr 28 08:04 tmp&lt;br/&gt;drwxr-xr-x 10 root root 4096 Apr 28 08:03 usr&lt;br/&gt;drwxr-xr-x 11 root root 4096 Apr 28 08:04 var&lt;br/&gt;[root@host ~]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，挂载后的 merged 目录包括了 lowerdir 、upperdir 、workdir 目录，而 merged 目录实际上就是容器内用户看到的目录视图。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到技术本身，我们可以自己来尝试一下如何使用 &lt;span&gt;mount 的 overlay 挂载选项&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt; ：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.032591414944356&quot; data-type=&quot;png&quot; data-w=&quot;1258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmeqJicUaMsg81NttM4YEicH8kWXGor2HrQK6h8GcuurF6QUDHmH4LhqmCcd6HRmycJlyicvWsvCXL7ZQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先创建好 lowerdir（创建了 2 个） 、upperdir 、workdir、 merged 目录，并为 lowerdir 和 upperdir 目录写入一些文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host ~]# mkdir test_overlay&lt;br/&gt;[root@host ~]# cd test_overlay/&lt;br/&gt;[root@host test_overlay]# mkdir lower1&lt;br/&gt;[root@host test_overlay]# mkdir lower2&lt;br/&gt;[root@host test_overlay]# mkdir upper&lt;br/&gt;[root@host test_overlay]# mkdir work&lt;br/&gt;[root@host test_overlay]# mkdir merged&lt;br/&gt;[root@host test_overlay]# echo &#x27;lower1-file1&#x27; &amp;gt; lower1/file1.txt&lt;br/&gt;[root@host test_overlay]# echo &#x27;lower2-file2&#x27; &amp;gt; lower2/file2.txt&lt;br/&gt;[root@host test_overlay]# echo &#x27;upper-file3&#x27; &amp;gt; upper/file3.txt&lt;br/&gt;[root@host test_overlay]# tree&lt;br/&gt;.&lt;br/&gt;|-- lower1&lt;br/&gt;|   `-- file1.txt&lt;br/&gt;|-- lower2&lt;br/&gt;|   `-- file2.txt&lt;br/&gt;|-- merged&lt;br/&gt;|-- upper&lt;br/&gt;|   `-- file3.txt&lt;br/&gt;`-- work&lt;br/&gt;&lt;br/&gt;5 directories, 3 files&lt;br/&gt;[root@host test_overlay]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 mount 命令的 overlay 选项模式进行挂载：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host test_overlay]# mount -t overlay overlay -olowerdir=lower1:lower2,upperdir=upper,workdir=work merged&lt;br/&gt;[root@host test_overlay]# mount | grep overlay&lt;br/&gt;......&lt;br/&gt;overlay on /root/test_overlay/merged type overlay (rw,relatime,lowerdir=lower1:lower2,upperdir=upper,workdir=work)&lt;br/&gt;[root@host test_overlay]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时进入 merged 目录就可以看到所有文件了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host test_overlay]# cd merged/&lt;br/&gt;[root@host merged]# ls&lt;br/&gt;file1.txt  file2.txt  file3.txt&lt;br/&gt;[root@host merged]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们尝试修改 lowerdir 目录内的文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@host merged]# echo &#x27;lower1-file1-hello&#x27; &amp;gt; file1.txt&lt;br/&gt;[root@host merged]# cat file1.txt&lt;br/&gt;lower1-file1-hello&lt;br/&gt;[root@host merged]# cat /root/test_overlay/lower1/file1.txt&lt;br/&gt;lower1-file1&lt;br/&gt;[root@host merged]# ls /root/test_overlay/upper/&lt;br/&gt;file1.txt  file3.txt&lt;br/&gt;[root@host merged]# cat /root/test_overlay/upper/file1.txt&lt;br/&gt;lower1-file1-hello&lt;br/&gt;[root@host merged]#&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和之前我们所说的一致，当修改 lowerdir 内的文件时，会执行 copy_up 操作，把文件从 lowerdir 复制到 upperdir ，后续对该文件的写入操作将对已经复制到 upperdir 的副本文件进行操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其它的读写情况，大家就可以自行尝试了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实容器的底层原理并不难，本质上就是一个特殊的进程，特殊在为其创建了 NameSpace 隔离运行环境，用 Cgroups 为其控制了资源开销，这些都是站在 Linux 操作系统的肩膀上实现的，包括 Docker 的镜像实现也是利用了 UnionFS 的分层联合技术。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们甚至可以说几乎所有应用的本质都是 &lt;strong&gt;上层调下层 ，下层支撑着上层&lt;/strong&gt; 。&lt;span/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;Linux man 手册中的 NAMESPACES: &lt;span&gt;https://man7.org/linux/man-pages/man7/namespaces.7.html&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;p&gt;源自 Containers From Scratch • Liz Rice • GOTO 2018: &lt;span&gt;https://www.youtube.com/watch?v=8fi7uSYlOdc&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3] &lt;/span&gt;&lt;p&gt;Linux man cgroups: &lt;span&gt;https://man7.org/linux/man-pages/man7/cgroups.7.html&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4] &lt;/span&gt;&lt;p&gt;cgroup-v1/memory: &lt;span&gt;https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5] &lt;/span&gt;&lt;p&gt;memtester: &lt;span&gt;https://pyropus.ca./software/memtester/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6] &lt;/span&gt;&lt;p&gt;以该 Dockerfile 为例: &lt;span&gt;https://docs.docker.com/storage/storagedriver/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7] &lt;/span&gt;&lt;p&gt;overlay 的架构图: &lt;span&gt;https://docs.docker.com/storage/storagedriver/overlayfs-driver/#how-the-overlay-driver-works&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8] &lt;/span&gt;&lt;p&gt;mount 的 overlay 挂载选项: &lt;span&gt;https://man7.org/linux/man-pages/man8/mount.8.html&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9b2225d4e28af6ef795cd0ad8af2e153</guid>
<title>性能调优｜生产环境kafka集群400W/tps为啥就扛不住了？</title>
<link>https://toutiao.io/k/k59acft</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;span data-raw-text=&quot;点&quot; data-textnode-index=&quot;0&quot; data-index=&quot;0&quot;&gt;&lt;span data-raw-text=&quot;点&quot; data-textnode-index=&quot;0&quot; data-index=&quot;0&quot;&gt;&lt;span data-raw-text=&quot;点&quot; data-textnode-index-1641215183112=&quot;0&quot; data-index-1641215183112=&quot;0&quot;&gt;点&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;击&quot; data-textnode-index=&quot;0&quot; data-index=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;击&quot; data-textnode-index=&quot;1&quot; data-index=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;击&quot; data-textnode-index-1641215183112=&quot;1&quot; data-index-1641215183112=&quot;1&quot;&gt;击&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;上&quot; data-textnode-index=&quot;0&quot; data-index=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;上&quot; data-textnode-index=&quot;2&quot; data-index=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;上&quot; data-textnode-index-1641215183112=&quot;2&quot; data-index-1641215183112=&quot;2&quot;&gt;上&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;方&quot; data-textnode-index=&quot;0&quot; data-index=&quot;3&quot;&gt;&lt;span data-raw-text=&quot;方&quot; data-textnode-index=&quot;3&quot; data-index=&quot;3&quot;&gt;&lt;span data-raw-text=&quot;方&quot; data-textnode-index-1641215183112=&quot;3&quot; data-index-1641215183112=&quot;3&quot;&gt;方&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;“&quot; data-textnode-index=&quot;1&quot; data-index=&quot;4&quot;&gt;&lt;span data-raw-text=&quot;“&quot; data-textnode-index=&quot;4&quot; data-index=&quot;4&quot;&gt;&lt;span data-raw-text=&quot;“&quot; data-textnode-index-1641215183112=&quot;4&quot; data-index-1641215183112=&quot;4&quot;&gt;“&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index=&quot;1&quot; data-index=&quot;5&quot;&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index=&quot;5&quot; data-index=&quot;5&quot;&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index-1641215183112=&quot;5&quot; data-index-1641215183112=&quot;5&quot;&gt;中&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;间&quot; data-textnode-index=&quot;1&quot; data-index=&quot;6&quot;&gt;&lt;span data-raw-text=&quot;间&quot; data-textnode-index=&quot;6&quot; data-index=&quot;6&quot;&gt;&lt;span data-raw-text=&quot;间&quot; data-textnode-index-1641215183112=&quot;6&quot; data-index-1641215183112=&quot;6&quot;&gt;间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;件&quot; data-textnode-index=&quot;1&quot; data-index=&quot;7&quot;&gt;&lt;span data-raw-text=&quot;件&quot; data-textnode-index=&quot;7&quot; data-index=&quot;7&quot;&gt;&lt;span data-raw-text=&quot;件&quot; data-textnode-index-1641215183112=&quot;7&quot; data-index-1641215183112=&quot;7&quot;&gt;件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;兴&quot; data-textnode-index=&quot;1&quot; data-index=&quot;8&quot;&gt;&lt;span data-raw-text=&quot;兴&quot; data-textnode-index=&quot;8&quot; data-index=&quot;8&quot;&gt;&lt;span data-raw-text=&quot;兴&quot; data-textnode-index-1641215183112=&quot;8&quot; data-index-1641215183112=&quot;8&quot;&gt;兴&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;趣&quot; data-textnode-index=&quot;1&quot; data-index=&quot;9&quot;&gt;&lt;span data-raw-text=&quot;趣&quot; data-textnode-index=&quot;9&quot; data-index=&quot;9&quot;&gt;&lt;span data-raw-text=&quot;趣&quot; data-textnode-index-1641215183112=&quot;9&quot; data-index-1641215183112=&quot;9&quot;&gt;趣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;圈&quot; data-textnode-index=&quot;1&quot; data-index=&quot;10&quot;&gt;&lt;span data-raw-text=&quot;圈&quot; data-textnode-index=&quot;10&quot; data-index=&quot;10&quot;&gt;&lt;span data-raw-text=&quot;圈&quot; data-textnode-index-1641215183112=&quot;10&quot; data-index-1641215183112=&quot;10&quot;&gt;圈&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;”&quot; data-textnode-index=&quot;1&quot; data-index=&quot;11&quot;&gt;&lt;span data-raw-text=&quot;”&quot; data-textnode-index=&quot;11&quot; data-index=&quot;11&quot;&gt;&lt;span data-raw-text=&quot;”&quot; data-textnode-index-1641215183112=&quot;11&quot; data-index-1641215183112=&quot;11&quot;&gt;”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index=&quot;3&quot; data-index=&quot;13&quot;&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index=&quot;13&quot; data-index=&quot;13&quot;&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index-1641215183112=&quot;13&quot; data-index-1641215183112=&quot;13&quot;&gt;选&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;择&quot; data-textnode-index=&quot;3&quot; data-index=&quot;14&quot;&gt;&lt;span data-raw-text=&quot;择&quot; data-textnode-index=&quot;14&quot; data-index=&quot;14&quot;&gt;&lt;span data-raw-text=&quot;择&quot; data-textnode-index-1641215183112=&quot;14&quot; data-index-1641215183112=&quot;14&quot;&gt;择&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;“&quot; data-textnode-index=&quot;4&quot; data-index=&quot;15&quot;&gt;&lt;span data-raw-text=&quot;“&quot; data-textnode-index=&quot;15&quot; data-index=&quot;15&quot;&gt;&lt;span data-raw-text=&quot;“&quot; data-textnode-index-1641215183112=&quot;15&quot; data-index-1641215183112=&quot;15&quot;&gt;“&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;设&quot; data-textnode-index=&quot;4&quot; data-index=&quot;16&quot;&gt;&lt;span data-raw-text=&quot;设&quot; data-textnode-index=&quot;16&quot; data-index=&quot;16&quot;&gt;&lt;span data-raw-text=&quot;设&quot; data-textnode-index-1641215183112=&quot;16&quot; data-index-1641215183112=&quot;16&quot;&gt;设&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;为&quot; data-textnode-index=&quot;4&quot; data-index=&quot;17&quot;&gt;&lt;span data-raw-text=&quot;为&quot; data-textnode-index=&quot;17&quot; data-index=&quot;17&quot;&gt;&lt;span data-raw-text=&quot;为&quot; data-textnode-index-1641215183112=&quot;17&quot; data-index-1641215183112=&quot;17&quot;&gt;为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;星&quot; data-textnode-index=&quot;4&quot; data-index=&quot;18&quot;&gt;&lt;span data-raw-text=&quot;星&quot; data-textnode-index=&quot;18&quot; data-index=&quot;18&quot;&gt;&lt;span data-raw-text=&quot;星&quot; data-textnode-index-1641215183112=&quot;18&quot; data-index-1641215183112=&quot;18&quot;&gt;星&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;标&quot; data-textnode-index=&quot;4&quot; data-index=&quot;19&quot;&gt;&lt;span data-raw-text=&quot;标&quot; data-textnode-index=&quot;19&quot; data-index=&quot;19&quot;&gt;&lt;span data-raw-text=&quot;标&quot; data-textnode-index-1641215183112=&quot;19&quot; data-index-1641215183112=&quot;19&quot;&gt;标&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;”&quot; data-textnode-index=&quot;4&quot; data-index=&quot;20&quot;&gt;&lt;span data-raw-text=&quot;”&quot; data-textnode-index=&quot;20&quot; data-index=&quot;20&quot;&gt;&lt;span data-raw-text=&quot;”&quot; data-textnode-index-1641215183112=&quot;20&quot; data-index-1641215183112=&quot;20&quot;&gt;”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;点击下面图片直达文章合集&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247486570&amp;amp;idx=1&amp;amp;sn=25afad26c7986aaaf32e0be8de2fc334&amp;amp;chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;484&quot; data-fileid=&quot;100004440&quot; data-ratio=&quot;0.56484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Wkp2azia4QFvb8vlf6yzjyavLTicUhz4yF3LcyauVPlEuhGcMEvpGexLHhK5rvcWMGlpzbZgwKarPicPrncibdZ2Eg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;大家好，我是威哥，《RocketMQ技术内幕》作者、RocketMQ社区首席布道师、中通快递基础架构资深架构师，越努力越幸运，唯有坚持不懈，与大家共勉。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最近公司日志Kafka集群出现了性能瓶颈，单节点还没达到60W/tps时消息发送就出现了很大延迟，甚至最高超过了10s，截图说明如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.26796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFveQeb5S7ibWOUAffmyiaKhXJU8MHR2nhud5YxzYQIkJl2BK6ibQBRshRZ4X6mZwOF1IsbkbWfDY2CaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;虽说使用的机械磁盘，但这点压力对Kafka来说应该是小菜一碟，这引起了我的警觉，需要对其进行一番诊断了。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过监控平台观察Kafka集群中相关的监控节点，发现cpu使用率才接近20%左右，磁盘IO等待等指标都并未出现任何异常，那会是什么问题呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常CPU耗时不大，但性能已经明显下降了，我们优先会去排查kafka节点的线程栈，获取线程栈的方法比较简单，命令为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ps -ef | grep kafka // 获取pid&lt;br/&gt;jstack pid &amp;gt; j1.log&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上述命令我们就可以获取到kafka进程的堆栈信息，通过查看线程名称中包含kafka-request-handler字眼的线程(Kafka中处理请求)，发现了大量的锁等待，具体截图如下所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFveQeb5S7ibWOUAffmyiaKhXJGO3YzXjMBwFibDhibcM3VBF4eRFUUVcXdibd273zxMaqyd1hiaicOmibQlQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且在jstack文件中发现很多线程都在等待这把锁，截图如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.45078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFveQeb5S7ibWOUAffmyiaKhXJWLy445wDALaI73lAGKbTHGmYfQaicpTyRUonjZmiclZvzM1K904B9TAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先根据线程堆栈查看代码，找到对应的源代码如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.87734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFveQeb5S7ibWOUAffmyiaKhXJhmuWm698RPiaicvudA0iaNEahaBbbibW4oq5EaoGboSGjoZRRaSibGCeArQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过阅读源码，这段代码是分区Leader在追加数据时为了保证写入分区时数据的完整性，对分区进行的加锁，即如果对同一个分区收到多个写入请求，则这些请求将串行执行，这个锁时必须的，无法进行优化，但仔细观察线程的调用栈，发现在锁的代码块出现了&lt;strong&gt;GZIPInputstream&lt;/strong&gt;，进行了zip压缩，一个压缩处在锁中，其执行性能注定低下，那在什么时候需要在服务端进行压缩呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故我们继续看一下LogValidator的validateMessagesAndAssignOffsets方法，最终调用validateMessagesAndAssignOffsetsCompressed方法，部分代码截图如下所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.71875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFveQeb5S7ibWOUAffmyiaKhXJLvA14lmxjUciaNX8BAstr7NwZqqso9Sf2fC9ialCXG9DcV1MyU4lm2Dg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码的注释部分详细介绍了kafka在服务端需要进行压缩的4种情况，对其进行翻译，其实就是两种情况：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、客户端与服务端端压缩算法不一致&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、客户端与服务端端的消息版本格式不一样，包括offset的表示方法、压缩处理方法&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于客户端与服务端压缩算法不一致，这个基本不会出现，因为服务端通常可以支持多种压缩算法，会根据客户端的压缩算法进行自动匹配。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最有可能的就是服务端与客户端端消息协议版本不一致，如果版本不一致，则需要在服务端重新偏移量，如果使用了压缩机制，则需要重新进行解压缩，然后计算位点，再进行压缩存储，性能消耗极大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;后面排查日志使用端，确实是客户端版本与服务端版本不一致导致，最终需要对客户端进行统一升级。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于Kafka的压缩、日志偏移量，消息存储的分析，请持续关注Kafka专栏，后续会持续更新，敬请期待。&lt;/p&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span data-raw-text=&quot;最&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2943&quot;&gt;最&lt;/span&gt;&lt;span data-raw-text=&quot;后&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2944&quot;&gt;后&lt;/span&gt;&lt;span data-raw-text=&quot;说&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2945&quot;&gt;说&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2946&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;句&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2947&quot;&gt;句&lt;/span&gt;&lt;span data-raw-text=&quot;(&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2948&quot;&gt;(&lt;/span&gt;&lt;span data-raw-text=&quot;求&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2949&quot;&gt;求&lt;/span&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2950&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2951&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2952&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;别&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2953&quot;&gt;别&lt;/span&gt;&lt;span data-raw-text=&quot;白&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2954&quot;&gt;白&lt;/span&gt;&lt;span data-raw-text=&quot;嫖&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2955&quot;&gt;嫖&lt;/span&gt;&lt;span data-raw-text=&quot;我&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2956&quot;&gt;我&lt;/span&gt;&lt;span data-raw-text=&quot;)&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2957&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-raw-text=&quot;如&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2958&quot;&gt;如&lt;/span&gt;&lt;span data-raw-text=&quot;果&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2959&quot;&gt;果&lt;/span&gt;&lt;span data-raw-text=&quot;这&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2960&quot;&gt;这&lt;/span&gt;&lt;span data-raw-text=&quot;篇&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2961&quot;&gt;篇&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2962&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2963&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;对&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2964&quot;&gt;对&lt;/span&gt;&lt;span data-raw-text=&quot;您&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2965&quot;&gt;您&lt;/span&gt;&lt;span data-raw-text=&quot;有&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2966&quot;&gt;有&lt;/span&gt;&lt;span data-raw-text=&quot;所&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2967&quot;&gt;所&lt;/span&gt;&lt;span data-raw-text=&quot;帮&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2968&quot;&gt;帮&lt;/span&gt;&lt;span data-raw-text=&quot;助&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2969&quot;&gt;助&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2970&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;或&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2971&quot;&gt;或&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2972&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;有&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2973&quot;&gt;有&lt;/span&gt;&lt;span data-raw-text=&quot;所&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2974&quot;&gt;所&lt;/span&gt;&lt;span data-raw-text=&quot;启&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2975&quot;&gt;启&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2976&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2977&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;话&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2978&quot;&gt;话&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2979&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;帮&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2980&quot;&gt;帮&lt;/span&gt;&lt;span data-raw-text=&quot;忙&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2981&quot;&gt;忙&lt;/span&gt;&lt;span data-raw-text=&quot;扫&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2982&quot;&gt;扫&lt;/span&gt;&lt;span data-raw-text=&quot;描&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2983&quot;&gt;描&lt;/span&gt;&lt;span data-raw-text=&quot;下&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2984&quot;&gt;下&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2985&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2986&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2987&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2988&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2989&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2990&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2991&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;下&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2992&quot;&gt;下&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2993&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;您&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2994&quot;&gt;您&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2995&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;支&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2996&quot;&gt;支&lt;/span&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2997&quot;&gt;持&lt;/span&gt;&lt;span data-raw-text=&quot;是&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2998&quot;&gt;是&lt;/span&gt;&lt;span data-raw-text=&quot;我&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2999&quot;&gt;我&lt;/span&gt;&lt;span data-raw-text=&quot;坚&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3000&quot;&gt;坚&lt;/span&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3001&quot;&gt;持&lt;/span&gt;&lt;span data-raw-text=&quot;写&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3002&quot;&gt;写&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3003&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;最&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3004&quot;&gt;最&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3005&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3006&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;动&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3007&quot;&gt;动&lt;/span&gt;&lt;span data-raw-text=&quot;力&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3008&quot;&gt;力&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3009&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-raw-text=&quot;求&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3010&quot;&gt;求&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3011&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;键&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3012&quot;&gt;键&lt;/span&gt;&lt;span data-raw-text=&quot;三&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3013&quot;&gt;三&lt;/span&gt;&lt;span data-raw-text=&quot;连&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3014&quot;&gt;连&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3015&quot;&gt;：&lt;/span&gt;&lt;span data-raw-text=&quot;点&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3016&quot;&gt;点&lt;/span&gt;&lt;span data-raw-text=&quot;赞&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3017&quot;&gt;赞&lt;/span&gt;&lt;span data-raw-text=&quot;、&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3018&quot;&gt;、&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3019&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3020&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;、&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3021&quot;&gt;、&lt;/span&gt;&lt;span data-raw-text=&quot;在&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3022&quot;&gt;在&lt;/span&gt;&lt;span data-raw-text=&quot;看&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3023&quot;&gt;看&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3024&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIzNzgyMjYxOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFvs5UnzjhzrS6h29QXbfK4I0GLibNP4Qlpt1ovSdmwfsoY7D4JYUZzkACtqe3wrKh6icG7oHUTMibJbA/0?wx_fmt=png&quot; data-nickname=&quot;中间件兴趣圈&quot; data-alias=&quot;dingwpmz_zjj&quot; data-signature=&quot;《RocketMQ技术内幕》作者维护，主打成体系剖析JAVA主流中间件架构与设计原理，为构建完备的互联网分布式架构体系而努力，助力突破职场瓶颈。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3025&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3026&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;公&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3027&quot;&gt;公&lt;/span&gt;&lt;span data-raw-text=&quot;众&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3028&quot;&gt;众&lt;/span&gt;&lt;span data-raw-text=&quot;号&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3029&quot;&gt;号&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3030&quot;&gt;：&lt;/span&gt;&lt;span data-raw-text=&quot;「&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3031&quot;&gt;「&lt;/span&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3032&quot;&gt;中&lt;/span&gt;&lt;span data-raw-text=&quot;间&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3033&quot;&gt;间&lt;/span&gt;&lt;span data-raw-text=&quot;件&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3034&quot;&gt;件&lt;/span&gt;&lt;span data-raw-text=&quot;兴&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3035&quot;&gt;兴&lt;/span&gt;&lt;span data-raw-text=&quot;趣&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3036&quot;&gt;趣&lt;/span&gt;&lt;span data-raw-text=&quot;圈&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3037&quot;&gt;圈&lt;/span&gt;&lt;span data-raw-text=&quot;」&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3038&quot;&gt;」&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3039&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;在&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3040&quot;&gt;在&lt;/span&gt;&lt;span data-raw-text=&quot;公&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3041&quot;&gt;公&lt;/span&gt;&lt;span data-raw-text=&quot;众&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3042&quot;&gt;众&lt;/span&gt;&lt;span data-raw-text=&quot;号&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3043&quot;&gt;号&lt;/span&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3044&quot;&gt;中&lt;/span&gt;&lt;span data-raw-text=&quot;回&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3045&quot;&gt;回&lt;/span&gt;&lt;span data-raw-text=&quot;复&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3046&quot;&gt;复&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3047&quot;&gt;：&lt;/span&gt;&lt;span data-raw-text=&quot;「&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3048&quot;&gt;「&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3049&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;D&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3050&quot;&gt;D&lt;/span&gt;&lt;span data-raw-text=&quot;F&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3051&quot;&gt;F&lt;/span&gt;&lt;span data-raw-text=&quot;」&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3052&quot;&gt;」&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3053&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;获&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3054&quot;&gt;获&lt;/span&gt;&lt;span data-raw-text=&quot;取&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3055&quot;&gt;取&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3056&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;量&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3057&quot;&gt;量&lt;/span&gt;&lt;span data-raw-text=&quot;学&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3058&quot;&gt;学&lt;/span&gt;&lt;span data-raw-text=&quot;习&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3059&quot;&gt;习&lt;/span&gt;&lt;span data-raw-text=&quot;资&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3060&quot;&gt;资&lt;/span&gt;&lt;span data-raw-text=&quot;料&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3061&quot;&gt;料&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3062&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;回&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3063&quot;&gt;回&lt;/span&gt;&lt;span data-raw-text=&quot;复&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3064&quot;&gt;复&lt;/span&gt;&lt;span data-raw-text=&quot;「&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3065&quot;&gt;「&lt;/span&gt;&lt;span data-raw-text=&quot;专&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3066&quot;&gt;专&lt;/span&gt;&lt;span data-raw-text=&quot;栏&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3067&quot;&gt;栏&lt;/span&gt;&lt;span data-raw-text=&quot;」&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3068&quot;&gt;」&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3069&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;获&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3070&quot;&gt;获&lt;/span&gt;&lt;span data-raw-text=&quot;取&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3071&quot;&gt;取&lt;/span&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3072&quot;&gt;1&lt;/span&gt;&lt;span data-raw-text=&quot;5&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3073&quot;&gt;5&lt;/span&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3074&quot;&gt;个&lt;/span&gt;&lt;span data-raw-text=&quot;主&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3075&quot;&gt;主&lt;/span&gt;&lt;span data-raw-text=&quot;流&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3076&quot;&gt;流&lt;/span&gt;&lt;span data-raw-text=&quot;J&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3077&quot;&gt;J&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3078&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;v&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3079&quot;&gt;v&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3080&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3081&quot;&gt;中&lt;/span&gt;&lt;span data-raw-text=&quot;间&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3082&quot;&gt;间&lt;/span&gt;&lt;span data-raw-text=&quot;件&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3083&quot;&gt;件&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3084&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3085&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;分&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3086&quot;&gt;分&lt;/span&gt;&lt;span data-raw-text=&quot;析&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3087&quot;&gt;析&lt;/span&gt;&lt;span data-raw-text=&quot;专&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3088&quot;&gt;专&lt;/span&gt;&lt;span data-raw-text=&quot;栏&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3089&quot;&gt;栏&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3090&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;另&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3091&quot;&gt;另&lt;/span&gt;&lt;span data-raw-text=&quot;外&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3092&quot;&gt;外&lt;/span&gt;&lt;span data-raw-text=&quot;回&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3093&quot;&gt;回&lt;/span&gt;&lt;span data-raw-text=&quot;复&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3094&quot;&gt;复&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3095&quot;&gt;：&lt;/span&gt;&lt;span data-raw-text=&quot;加&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3096&quot;&gt;加&lt;/span&gt;&lt;span data-raw-text=&quot;群&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3097&quot;&gt;群&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3098&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3099&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;以&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3100&quot;&gt;以&lt;/span&gt;&lt;span data-raw-text=&quot;跟&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3101&quot;&gt;跟&lt;/span&gt;&lt;span data-raw-text=&quot;很&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3102&quot;&gt;很&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3103&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;B&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3104&quot;&gt;B&lt;/span&gt;&lt;span data-raw-text=&quot;A&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3105&quot;&gt;A&lt;/span&gt;&lt;span data-raw-text=&quot;T&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3106&quot;&gt;T&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3107&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;厂&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3108&quot;&gt;厂&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3109&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;前&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3110&quot;&gt;前&lt;/span&gt;&lt;span data-raw-text=&quot;辈&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3111&quot;&gt;辈&lt;/span&gt;&lt;span data-raw-text=&quot;交&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3112&quot;&gt;交&lt;/span&gt;&lt;span data-raw-text=&quot;流&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3113&quot;&gt;流&lt;/span&gt;&lt;span data-raw-text=&quot;和&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3114&quot;&gt;和&lt;/span&gt;&lt;span data-raw-text=&quot;学&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3115&quot;&gt;学&lt;/span&gt;&lt;span data-raw-text=&quot;习&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3116&quot;&gt;习&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3117&quot;&gt;。&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3024&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3117&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-style=&quot;white-space: normal; background-color: rgb(255, 255, 255); color: rgb(62, 62, 62); letter-spacing: 0.544px; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot; class=&quot;js_darkmode__155&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93589&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span data-raw-text=&quot;走&quot; data-textnode-index-1641215183112=&quot;116&quot; data-index-1641215183112=&quot;3118&quot;&gt;走&lt;/span&gt;&lt;span data-raw-text=&quot;进&quot; data-textnode-index-1641215183112=&quot;116&quot; data-index-1641215183112=&quot;3119&quot;&gt;进&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index-1641215183112=&quot;116&quot; data-index-1641215183112=&quot;3120&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index-1641215183112=&quot;116&quot; data-index-1641215183112=&quot;3121&quot;&gt;者&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247484618&amp;amp;idx=1&amp;amp;sn=e24d7d19006f0d66e697e8d2be4aa508&amp;amp;chksm=e8c3f33edfb47a286f4515c4b11e822c35eab9b6c7ada25ac2cce3d2f7e5dac0230b54c56646&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6831&quot;&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index-1641215183112=&quot;117&quot; data-index-1641215183112=&quot;3122&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;0&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6832&quot;&gt;&lt;span data-raw-text=&quot;0&quot; data-textnode-index-1641215183112=&quot;118&quot; data-index-1641215183112=&quot;3123&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;年&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6833&quot;&gt;&lt;span data-raw-text=&quot;年&quot; data-textnode-index-1641215183112=&quot;119&quot; data-index-1641215183112=&quot;3124&quot;&gt;年&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;I&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6834&quot;&gt;&lt;span data-raw-text=&quot;I&quot; data-textnode-index-1641215183112=&quot;120&quot; data-index-1641215183112=&quot;3125&quot;&gt;I&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;T&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6835&quot;&gt;&lt;span data-raw-text=&quot;T&quot; data-textnode-index-1641215183112=&quot;121&quot; data-index-1641215183112=&quot;3126&quot;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;老&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6836&quot;&gt;&lt;span data-raw-text=&quot;老&quot; data-textnode-index-1641215183112=&quot;122&quot; data-index-1641215183112=&quot;3127&quot;&gt;老&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;兵&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6837&quot;&gt;&lt;span data-raw-text=&quot;兵&quot; data-textnode-index-1641215183112=&quot;123&quot; data-index-1641215183112=&quot;3128&quot;&gt;兵&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;给&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6838&quot;&gt;&lt;span data-raw-text=&quot;给&quot; data-textnode-index-1641215183112=&quot;124&quot; data-index-1641215183112=&quot;3129&quot;&gt;给&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;职&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6839&quot;&gt;&lt;span data-raw-text=&quot;职&quot; data-textnode-index-1641215183112=&quot;125&quot; data-index-1641215183112=&quot;3130&quot;&gt;职&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;场&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6840&quot;&gt;&lt;span data-raw-text=&quot;场&quot; data-textnode-index-1641215183112=&quot;126&quot; data-index-1641215183112=&quot;3131&quot;&gt;场&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;新&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6841&quot;&gt;&lt;span data-raw-text=&quot;新&quot; data-textnode-index-1641215183112=&quot;127&quot; data-index-1641215183112=&quot;3132&quot;&gt;新&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;人&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6842&quot;&gt;&lt;span data-raw-text=&quot;人&quot; data-textnode-index-1641215183112=&quot;128&quot; data-index-1641215183112=&quot;3133&quot;&gt;人&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6843&quot;&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;129&quot; data-index-1641215183112=&quot;3134&quot;&gt;的&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6844&quot;&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index-1641215183112=&quot;130&quot; data-index-1641215183112=&quot;3135&quot;&gt;一&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;些&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6845&quot;&gt;&lt;span data-raw-text=&quot;些&quot; data-textnode-index-1641215183112=&quot;131&quot; data-index-1641215183112=&quot;3136&quot;&gt;些&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;建&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6846&quot;&gt;&lt;span data-raw-text=&quot;建&quot; data-textnode-index-1641215183112=&quot;132&quot; data-index-1641215183112=&quot;3137&quot;&gt;建&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;议&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6847&quot;&gt;&lt;span data-raw-text=&quot;议&quot; data-textnode-index-1641215183112=&quot;133&quot; data-index-1641215183112=&quot;3138&quot;&gt;议&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247486100&amp;amp;idx=1&amp;amp;sn=3166338465f9b4a47ad93ecf13df6e48&amp;amp;chksm=e8c3fd60dfb47476e0c3ff65673eee47a5b99c7455f70252d08d6d0330828ea9050b27526a7d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;“&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3139&quot;&gt;“&lt;/span&gt;&lt;span data-raw-text=&quot;我&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3140&quot;&gt;我&lt;/span&gt;&lt;span data-raw-text=&quot;”&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3141&quot;&gt;”&lt;/span&gt;&lt;span data-raw-text=&quot;被&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3142&quot;&gt;被&lt;/span&gt;&lt;span data-raw-text=&quot;阿&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3143&quot;&gt;阿&lt;/span&gt;&lt;span data-raw-text=&quot;里&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3144&quot;&gt;里&lt;/span&gt;&lt;span data-raw-text=&quot;巴&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3145&quot;&gt;巴&lt;/span&gt;&lt;span data-raw-text=&quot;巴&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3146&quot;&gt;巴&lt;/span&gt;&lt;span data-raw-text=&quot;宠&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3147&quot;&gt;宠&lt;/span&gt;&lt;span data-raw-text=&quot;幸&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3148&quot;&gt;幸&lt;/span&gt;&lt;span data-raw-text=&quot;了&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3149&quot;&gt;了&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247485407&amp;amp;idx=1&amp;amp;sn=0e0de515b3a66ac91e55fdf583be5c0d&amp;amp;chksm=e8c3f02bdfb4793daecebbead9c5cdf6e64da25b80f2fd3f2bcfcc52a6c3a57b2414298bd0b5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;程&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6848&quot;&gt;&lt;span data-raw-text=&quot;程&quot; data-textnode-index-1641215183112=&quot;135&quot; data-index-1641215183112=&quot;3150&quot;&gt;程&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;序&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6849&quot;&gt;&lt;span data-raw-text=&quot;序&quot; data-textnode-index-1641215183112=&quot;136&quot; data-index-1641215183112=&quot;3151&quot;&gt;序&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;员&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6850&quot;&gt;&lt;span data-raw-text=&quot;员&quot; data-textnode-index-1641215183112=&quot;137&quot; data-index-1641215183112=&quot;3152&quot;&gt;员&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;如&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6851&quot;&gt;&lt;span data-raw-text=&quot;如&quot; data-textnode-index-1641215183112=&quot;138&quot; data-index-1641215183112=&quot;3153&quot;&gt;如&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;何&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6852&quot;&gt;&lt;span data-raw-text=&quot;何&quot; data-textnode-index-1641215183112=&quot;139&quot; data-index-1641215183112=&quot;3154&quot;&gt;何&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;提&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6853&quot;&gt;&lt;span data-raw-text=&quot;提&quot; data-textnode-index-1641215183112=&quot;140&quot; data-index-1641215183112=&quot;3155&quot;&gt;提&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;高&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6854&quot;&gt;&lt;span data-raw-text=&quot;高&quot; data-textnode-index-1641215183112=&quot;141&quot; data-index-1641215183112=&quot;3156&quot;&gt;高&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;影&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6855&quot;&gt;&lt;span data-raw-text=&quot;影&quot; data-textnode-index-1641215183112=&quot;142&quot; data-index-1641215183112=&quot;3157&quot;&gt;影&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;响&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6856&quot;&gt;&lt;span data-raw-text=&quot;响&quot; data-textnode-index-1641215183112=&quot;143&quot; data-index-1641215183112=&quot;3158&quot;&gt;响&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;力&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6857&quot;&gt;&lt;span data-raw-text=&quot;力&quot; data-textnode-index-1641215183112=&quot;144&quot; data-index-1641215183112=&quot;3159&quot;&gt;力&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247485573&amp;amp;idx=1&amp;amp;sn=4d936fa700b38b5158316bdaf1aeac68&amp;amp;chksm=e8c3ff71dfb476675613afe09c682bc5fbd454b35f8d3d6d0458360149d5f0d673965c8852c4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;优&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3160&quot;&gt;优&lt;/span&gt;&lt;span data-raw-text=&quot;秀&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3161&quot;&gt;秀&lt;/span&gt;&lt;span data-raw-text=&quot;程&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3162&quot;&gt;程&lt;/span&gt;&lt;span data-raw-text=&quot;序&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3163&quot;&gt;序&lt;/span&gt;&lt;span data-raw-text=&quot;员&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3164&quot;&gt;员&lt;/span&gt;&lt;span data-raw-text=&quot;必&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3165&quot;&gt;必&lt;/span&gt;&lt;span data-raw-text=&quot;备&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3166&quot;&gt;备&lt;/span&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3167&quot;&gt;技&lt;/span&gt;&lt;span data-raw-text=&quot;能&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3168&quot;&gt;能&lt;/span&gt;&lt;span data-raw-text=&quot;之&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3169&quot;&gt;之&lt;/span&gt;&lt;span data-raw-text=&quot;如&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3170&quot;&gt;如&lt;/span&gt;&lt;span data-raw-text=&quot;何&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3171&quot;&gt;何&lt;/span&gt;&lt;span data-raw-text=&quot;高&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3172&quot;&gt;高&lt;/span&gt;&lt;span data-raw-text=&quot;效&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3173&quot;&gt;效&lt;/span&gt;&lt;span data-raw-text=&quot;阅&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3174&quot;&gt;阅&lt;/span&gt;&lt;span data-raw-text=&quot;读&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3175&quot;&gt;读&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3176&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3177&quot;&gt;码&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247484822&amp;amp;idx=1&amp;amp;sn=ecaada01b1bcf73b3a9fb750872b8e9d&amp;amp;chksm=e8c3f262dfb47b74d6f03be903dc734953e83ee720ac5b98e7ffcd92da39df5d68308b26bf85&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;我&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3178&quot;&gt;我&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3179&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;另&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3180&quot;&gt;另&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3181&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;种&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3182&quot;&gt;种&lt;/span&gt;&lt;span data-raw-text=&quot;参&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3183&quot;&gt;参&lt;/span&gt;&lt;span data-raw-text=&quot;与&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3184&quot;&gt;与&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3185&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;R&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3186&quot;&gt;R&lt;/span&gt;&lt;span data-raw-text=&quot;o&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3187&quot;&gt;o&lt;/span&gt;&lt;span data-raw-text=&quot;c&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3188&quot;&gt;c&lt;/span&gt;&lt;span data-raw-text=&quot;k&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3189&quot;&gt;k&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3190&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;t&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3191&quot;&gt;t&lt;/span&gt;&lt;span data-raw-text=&quot;M&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3192&quot;&gt;M&lt;/span&gt;&lt;span data-raw-text=&quot;Q&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3193&quot;&gt;Q&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3194&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;开&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3195&quot;&gt;开&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3196&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;社&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3197&quot;&gt;社&lt;/span&gt;&lt;span data-raw-text=&quot;区&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3198&quot;&gt;区&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3199&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;方&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3200&quot;&gt;方&lt;/span&gt;&lt;span data-raw-text=&quot;式&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3201&quot;&gt;式&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span data-raw-text=&quot;点&quot; data-textnode-index-1641215183112=&quot;147&quot; data-index-1641215183112=&quot;3202&quot;&gt;点&lt;/span&gt;&lt;span data-raw-text=&quot;击&quot; data-textnode-index-1641215183112=&quot;147&quot; data-index-1641215183112=&quot;3203&quot;&gt;击&lt;/span&gt;&lt;span data-raw-text=&quot;查&quot; data-textnode-index-1641215183112=&quot;147&quot; data-index-1641215183112=&quot;3204&quot;&gt;查&lt;/span&gt;&lt;span data-raw-text=&quot;看&quot; data-textnode-index-1641215183112=&quot;147&quot; data-index-1641215183112=&quot;3205&quot;&gt;看&lt;/span&gt;&lt;span data-raw-text=&quot;“&quot; data-textnode-index-1641215183112=&quot;147&quot; data-index-1641215183112=&quot;3206&quot;&gt;“&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;阅&quot; data-textnode-index-1641215183112=&quot;148&quot; data-index-1641215183112=&quot;3207&quot;&gt;阅&lt;/span&gt;&lt;span data-raw-text=&quot;读&quot; data-textnode-index-1641215183112=&quot;148&quot; data-index-1641215183112=&quot;3208&quot;&gt;读&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index-1641215183112=&quot;148&quot; data-index-1641215183112=&quot;3209&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index-1641215183112=&quot;148&quot; data-index-1641215183112=&quot;3210&quot;&gt;文&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;”&quot; data-textnode-index-1641215183112=&quot;149&quot; data-index-1641215183112=&quot;3211&quot;&gt;”&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;149&quot; data-index-1641215183112=&quot;3212&quot;&gt;，&lt;/span&gt;&lt;strong&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3213&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;直&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3214&quot;&gt;直&lt;/span&gt;&lt;span data-raw-text=&quot;接&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3215&quot;&gt;接&lt;/span&gt;&lt;span data-raw-text=&quot;进&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3216&quot;&gt;进&lt;/span&gt;&lt;span data-raw-text=&quot;入&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3217&quot;&gt;入&lt;/span&gt;&lt;span data-raw-text=&quot;[&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3218&quot;&gt;[&lt;/span&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3219&quot;&gt;中&lt;/span&gt;&lt;span data-raw-text=&quot;间&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3220&quot;&gt;间&lt;/span&gt;&lt;span data-raw-text=&quot;件&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3221&quot;&gt;件&lt;/span&gt;&lt;span data-raw-text=&quot;兴&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3222&quot;&gt;兴&lt;/span&gt;&lt;span data-raw-text=&quot;趣&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3223&quot;&gt;趣&lt;/span&gt;&lt;span data-raw-text=&quot;圈&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3224&quot;&gt;圈&lt;/span&gt;&lt;span data-raw-text=&quot;]&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3225&quot;&gt;]&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3226&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3227&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;合&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3228&quot;&gt;合&lt;/span&gt;&lt;span data-raw-text=&quot;集&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3229&quot;&gt;集&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3230&quot;&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>