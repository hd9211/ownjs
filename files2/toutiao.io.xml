<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cd4c6debf92331f2d0cd1f8ccead0244</guid>
<title>优质网站同好者周刊（第 54 期）- 倾城之链 - 悠然宜想亭</title>
<link>https://toutiao.io/k/y8jsfcd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;Post-body&quot;&gt;
                    &lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot; rel=&quot; nofollow ugc&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot; rel=&quot; nofollow ugc&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot; rel=&quot; nofollow ugc&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot; rel=&quot; nofollow ugc&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot; rel=&quot; nofollow ugc&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/SVG&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;SVG&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%9C%A8%E7%BA%BF&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;在线&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E5%85%B7&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;工具&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：svg, svg tool, svg viewer, online svg, svg to jsx, svg to react, svg to react native, svg optimize&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;SVG Viewer is an online tool to view and optimize SVGs.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.svgviewer.dev.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - SVG Viewer - View, save, and optimize SVGs&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.svgviewer.dev/&quot; rel=&quot; nofollow ugc&quot;&gt;SVG Viewer&lt;/a&gt;，是一个在线工具，用于查看（预览）和优化 &lt;a href=&quot;https://nicelinks.site/tags/SVG&quot; rel=&quot; nofollow ugc&quot;&gt;SVG&lt;/a&gt;，这对 &lt;strong&gt;Web 开发&lt;/strong&gt;相关从业人员，颇为有用。在介绍该网站功能之前，有必要对 &lt;code&gt;SVG&lt;/code&gt; 做一个大致科普：&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/tags/SVG&quot; rel=&quot; nofollow ugc&quot;&gt;SVG&lt;/a&gt;：&lt;strong&gt;可缩放矢量图形&lt;/strong&gt;（Scalable Vector Graphics，SVG），是一种用于描述二维的&lt;strong&gt;矢量&lt;/strong&gt;图形，基于 XML 的标记语言。作为一个基于文本的开放网络标准，SVG 能够优雅而简洁地渲染不同大小的图形，并和 CSS，DOM，JavaScript 和 SMIL 等其他网络标准无缝衔接。本质上，&lt;strong&gt;SVG 相对于图像，就好比 HTML 相对于文本&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;SVG 图像及其相关行为被定义于 XML 文本文件之中，这意味着可以对它们进行搜索、索引、编写脚本以及压缩。此外，这也意味着可以使用任何文本编辑器和绘图软件来创建和编辑它们。&lt;/p&gt;

&lt;p&gt;和传统的点阵图像模式，像 JPEG 和 PNG 不同，SVG 格式提供的是矢量图，这意味着它的图像能够被无限放大，而且不失真或降低质量，并且可以方便地修改内容。&lt;/p&gt;

&lt;p&gt;正如 HTML 一样，SVG 也有可被 JavaScript 访问的文档对象模型（DOM）和事件。这允许开发者创建丰富的动画和可交互的图像。如欲了解 SVG 更多，可参见 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://developer.mozilla.org/zh-CN/docs/Web/SVG&quot; rel=&quot; nofollow ugc&quot;&gt;SVG | MDN&lt;/a&gt;。&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;再说回 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.svgviewer.dev/&quot; rel=&quot; nofollow ugc&quot;&gt;SVG Viewer&lt;/a&gt;，因为可以方便预览 SVG 内容和美化（Prettify）SVG 代码，您可以基于该网站来编写 SVG（支持清除（Clear）、调整大小（Resize）、以及大量可选项设置（Options））；还支持一键转换为 React、React Native 代码及 PNG 图片；此外，您可以一键&lt;strong&gt;下载&lt;/strong&gt;和&lt;strong&gt;分享&lt;/strong&gt;您所创建的 SVG。如果您有操作 SVG 相关诉求，&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.svgviewer.dev/&quot; rel=&quot; nofollow ugc&quot;&gt;SVG Viewer&lt;/a&gt; 是您值得关注且典藏的网站。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/621739aa2d17f22050cf1a31&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - SVG Viewer - View, save, and optimize SVGs&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Vue&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;Vue&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/vueuse.org.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - VueUse&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://vueuse.org/&quot; rel=&quot; nofollow ugc&quot;&gt;VueUse&lt;/a&gt;，是一组基于 Vue Composition API 的实用函数（常用工具集）；支持 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot; rel=&quot; nofollow ugc&quot;&gt;Vue&lt;/a&gt; 2 和 3。它的初衷是：将一切原本并不支持响应式的 JS API，变得支持响应式，省去程序员自己写相关代码。目前 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://vueuse.org/&quot; rel=&quot; nofollow ugc&quot;&gt;VueUse&lt;/a&gt; 已提供几十个解决方案，适用于常见的开发者用例，如跟踪 Ref 变化、检测元素可见性、简化常见的 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot; rel=&quot; nofollow ugc&quot;&gt;Vue&lt;/a&gt; 模式、键盘/鼠标输入等。使用 &lt;code&gt;VueUse&lt;/code&gt; 是一个节省开发时间的好方法，因为您不必自己添加所有这些标准功能。它具有以下功能特征：&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;🎛 &lt;strong&gt;功能丰富&lt;/strong&gt;：140+功能供您选择；&lt;/li&gt;
&lt;li&gt;🕶 &lt;strong&gt;无缝迁移&lt;/strong&gt;：适用于 Vue 3 和 2；&lt;/li&gt;
&lt;li&gt;⚡ &lt;strong&gt;完全可摇树&lt;/strong&gt;：（tree shakeable）只拿你想要的；&lt;/li&gt;
&lt;li&gt;🦾 &lt;strong&gt;类型增强&lt;/strong&gt;：用 TypeScript 编写，带有完整的 TS 文档；&lt;/li&gt;
&lt;li&gt;🛠 &lt;strong&gt;灵活&lt;/strong&gt;：将 refs 作为参数传递，完全可定制、可配置的事件过滤器和目标；&lt;/li&gt;
&lt;li&gt;☁️ &lt;strong&gt;无需捆绑器&lt;/strong&gt;：可通过 CDN 使用，无需任何捆绑程序；&lt;/li&gt;
&lt;li&gt;🔋 &lt;strong&gt;SSR 友好&lt;/strong&gt;：与服务器端渲染/生成完美配合；&lt;/li&gt;
&lt;li&gt;🎪 &lt;strong&gt;互动演示&lt;/strong&gt;：功能文档还附带交互式演示；&lt;/li&gt;
&lt;li&gt;🔌 &lt;strong&gt;附加组件&lt;/strong&gt;：支持 Router、Firebase、RxJS 等各种插件。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://vueuse.org/&quot; rel=&quot; nofollow ugc&quot;&gt;VueUse&lt;/a&gt; 使用方式也非常简单：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 安装 VueUse
npm i @vueuse/core

// 使用 VueUse
import { useMouse, usePreferredDark, useLocalStorage } from &#x27;@vueuse/core&#x27;
export default {
  setup() {
    // tracks mouse position
    const { x, y } = useMouse()

    // is user prefers dark theme
    const isDark = usePreferredDark()

    // persist state in localStorage
    const store = useLocalStorage(
      &#x27;my-storage&#x27;,
      {
        name: &#x27;Apple&#x27;,
        color: &#x27;red&#x27;,
      },
    )

    return { x, y, isDark, store }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;总结一下，VueUse 中有以下 9 种类型的函数。如果你想了解实用程序的完整列表，建议移步至 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://vueuse.org/&quot; rel=&quot; nofollow ugc&quot;&gt;VueUse 官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Animation&lt;/strong&gt;：包含易于使用的过渡、超时和计时功能；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Browser&lt;/strong&gt;：可用于不同的屏幕控制、剪贴板、偏好等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component&lt;/strong&gt;：提供了不同组件方法的简写；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Formatters&lt;/strong&gt;：提供响应时间格式化功能；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sensors&lt;/strong&gt;：用来监听不同的 DOM 事件、输入事件和网络事件；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;：管理用户状态（全局、本地存储、会话存储）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utility&lt;/strong&gt;：不同的实用函数，如 getter、条件、引用同步等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Watch&lt;/strong&gt;：更多高级类型的观察器，如可暂停的观察器、退避的观察器和条件观察器；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Misc&lt;/strong&gt;：不同类型的事件、WebSockets 和 Web workers 的功能。&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://vueuse.org/&quot; rel=&quot; nofollow ugc&quot;&gt;VueUse&lt;/a&gt; 很大程度启发于 &lt;code&gt;react-use&lt;/code&gt;、&lt;code&gt;vue-hooks、react-hooks&lt;/code&gt; 等项目。Vue Compostion API 支持了更好的逻辑分离，让这些常用的工具可以被复用，能够让你快速地构建丰富的应用。VueUse 中的大多数函数都会返回一个&lt;strong&gt;refs 对象&lt;/strong&gt;，您可以使用 ES6 的对象解构语法来获取您需要的内容。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6217279e2d17f22050cf1a2f&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - VueUse&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%A8%8B%E5%BA%8F&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;程序&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%A1%86%E6%9E%B6&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;框架&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;A web-app framework that includes everything needed to create database-backed web applications according to the Model-View-Controller (MVC) pattern.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/rubyonrails.org.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - Ruby on Rails — A web-app Framework &quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://rubyonrails.org/&quot; rel=&quot; nofollow ugc&quot;&gt;Ruby on Rails&lt;/a&gt;（官方简称为 Rails，亦被简称为 RoR），是一个基于 Ruby 语言写的开源 Web 应用程序框架，包括根据&lt;strong&gt;模型-视图-控制器&lt;/strong&gt;（MVC）模式创建数据库支持的 Web 应用程序所需的一切。它努力使自身保持简单，来使实际的应用开发时的代码更少，使用最少的配置。Rails 的设计原则包括 “不做重复的事”（Don&#x27;t Repeat Yourself）和 “惯例优于设置”（Convention Over Configuration）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://rubyonrails.org/&quot; rel=&quot; nofollow ugc&quot;&gt;Ruby on Rails&lt;/a&gt; 是一种结合 Ruby 语言与 Rails 平台的一种网页程序框架，Ruby 语言以自然、简洁、快速著称，全面支持面向对象程序设计，而 Rails 则是 Ruby 广泛应用方式之一，在 Rails 平台上设计出一套独特的 MVC 开发架构，采取模型（Model）、视图（View）、控制器（Controller）分离的开发方式，不但减少了开发中的问题，更简化了许多繁复的动作。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://rubyonrails.org/&quot; rel=&quot; nofollow ugc&quot;&gt;Rails&lt;/a&gt; 是一个全栈框架。它附带了在前端和后端构建出色的 Web 应用程序所需的所有工具：渲染 HTML 模板、更新数据库、发送和接收电子邮件、通过 WebSocket 维护实时页面、为异步工作排队作业、将上传存储在云中，为常见攻击提供可靠的安全保护。Rails 可以做到这一切，且还有更多。&lt;/p&gt;

&lt;p&gt;Ruby on Rails 的数千个程序已经在线上得到应用。包括 Twitter、Airbnb、GitLab、Shopify 等知名网站。如果您对其感兴趣，不妨前往其官网了解一下。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/621646542d17f22050cf1a2d&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - Ruby on Rails — A web-app Framework &lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/npm&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Node.js&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;Node.js&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;npm is the package manager for Node.js. It was created in 2009 as an open source project to help JavaScript developers easily share packaged modules of code.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.npmjs.com.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - npm ｜ the package manager for Node.js&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.npmjs.com/&quot; rel=&quot; nofollow ugc&quot;&gt;NPM&lt;/a&gt;（&lt;strong&gt;Node Package Manager&lt;/strong&gt;) 是 JavaScript 运行时环境 Node.js 的默认包管理器，由 npm, Inc. 维护（一家成立于 2014 年的公司，于 2020 年 3 月 17 日被 GitHub 收购）。&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.npmjs.com/&quot; rel=&quot; nofollow ugc&quot;&gt;npm&lt;/a&gt; 是 JavaScript 社区的重要组成部分，有助于支持世界上最大的开发者生态系统之一。npm 有非常多东西：&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;npm 是 Node.js 的包管理器。它作为一个开源项目创建于 2009 年，旨在帮助 JavaScript 开发人员轻松共享打包的代码模块。&lt;/li&gt;
&lt;li&gt;npm Registry 是一个公开的开源代码包集合，用于 Node.js、前端 Web 应用程序、移动应用程序、机器人、路由器以及 JavaScript 社区的无数其他需求。&lt;/li&gt;
&lt;li&gt;npm 是允许开发人员安装和发布这些包的命令行客户端。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;GitHub 现在已经保证 npm 将永远免费。截至 2020 年 3 月 17 日，npm 为大约 1200 万开发人员，提供了 130 万个软件包，这些开发人员每月下载这些软件包达 750 亿次。&lt;/p&gt;

&lt;p&gt;新版的 &lt;a href=&quot;https://nicelinks.site/tags/Node.js&quot; rel=&quot; nofollow ugc&quot;&gt;Node.js&lt;/a&gt; 已经集成了 npm；如果您有安装 Node.js，那么 npm 也一并安装好了。您可以通过输入 &lt;code&gt;npm -v&lt;/code&gt; 来测试是否成功安装。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.npmjs.com/&quot; rel=&quot; nofollow ugc&quot;&gt;NPM&lt;/a&gt; 是一种重用其他开发人员的代码的方法，也是一种与他人共享代码的方式，并且可以很容易地管理不同版本的代码。&lt;code&gt;npm&lt;/code&gt; 开始作为 Node 包管理器，所以你会发现很多模块可以在服务器端使用。也有很多的包添加命令供您在命令行中使用。如果您从事&lt;strong&gt;前端开发&lt;/strong&gt;相关工作，想必 &lt;code&gt;npm&lt;/code&gt; 是您必不可少的工具；当然，您也可以使用其替代性产品 &lt;code&gt;yarn&lt;/code&gt;，详情可参见文章 ──&lt;a href=&quot;https://www.jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/&quot; rel=&quot; nofollow ugc&quot;&gt;Npm vs Yarn 之备忘详单&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6216392f2d17f22050cf1a2b&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - npm ｜ the package manager for Node.js&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;前端开发&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;Search term highlighting intended for every use case. Can be used with plain JavaScript or as jQuery plugin.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/markjs.io.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - mark.js – JavaScript keyword highlight&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://markjs.io/&quot; rel=&quot; nofollow ugc&quot;&gt;mark.js&lt;/a&gt;，是一个用 JavaScript 编写的文本荧光笔（高亮工具库），可以与纯 JavaScript 或作为 jQuery 插件一起使用。它可以用来动态标记搜索词或自定义正则表达式，并为您提供内置选项，如支持标点符号、单独的单词搜索、自定义同义词、支持 iframes、自定义过滤器、准确性定义、自定义元素、自定义类名等。它不仅功能强大，而且使用非常简单，如下示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;# 基于 npm 安装
npm install mark.js --save-dev
# 或者基于 yarn
yarn add mark.js

// 使用
import Mark from &#x27;mark.js&#x27;
const contentDom = document.querySelector(&#x27;.content&#x27;)
const instance = new Mark(contentDom);
instance.mark(keyword, {
  exclude: [&quot;h1&quot;],
  className: &quot;mark-highlight&quot;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果您有打算做&lt;strong&gt;本地搜索&lt;/strong&gt;功能，那么 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://markjs.io/&quot; rel=&quot; nofollow ugc&quot;&gt;mark.js&lt;/a&gt; 工具库非常拥有，可以帮您&lt;strong&gt;高亮&lt;/strong&gt;关键字。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6213944196847213f2febb08&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - mark.js – JavaScript keyword highlight&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; title=&quot;&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;本期文末寄语&lt;/h2&gt;

&lt;p&gt;舜发于畎亩之中，傅说举于版筑之间，胶鬲举于鱼盐之中，管夷吾举于士，孙叔敖举于海，百里奚举于市。&lt;strong&gt;故天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能&lt;/strong&gt;。── 战国 · 孟子《生于忧患死于安乐》&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/300/h/300/interlace/1/ignore-error/1&quot; title=&quot;&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;您可能感兴趣的文章&lt;/h3&gt;



                &lt;/div&gt;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ca560a0d2534f8b3cd18148ba58c5dac</guid>
<title>跟着 Go 作者掌握泛型</title>
<link>https://toutiao.io/k/821lotp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是 polarisxu。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 GopherCon 2021 年大会上，Go 两位作者 Robert Griesemer 和 Ian Lance Taylor 做了泛型相关的演讲，即将在 Go1.18 发布的 Go 泛型，正是两位设计的。一直想着把他们的演讲做一个梳理，然后分享给大家。拖的有点久，趁春节假期整理出来了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意，本文中的 constraints 包，已经确定在 Go1.18 正式版中去除，放入 golang.org/x/exp 中。详细可以参考该文：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzY0NDE3NA==&amp;amp;mid=2247489468&amp;amp;idx=1&amp;amp;sn=6f4a4579ab9aef880702f80993e33674&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Go1.18 这个包确定没了&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go1.18 关于泛型部分，主要有三个特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Type parameters for functions and types，即函数和类型的类型参数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Type sets defined by interfaces，即由接口定义的类型集合&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Type inference，即类型推断&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、类型参数&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看函数的类型参数。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;类型参数列表（Type parameter lists）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类型参数列表看起来是带方括号的普通参数列表。通常，类型参数以大写字母开头，以强调它们是类型：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[P, Q constraint1, R constraint2]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看一个例子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非泛型版本的求最小值：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;min&lt;/span&gt;&lt;span&gt;(x, y &lt;span&gt;float64&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;float64&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; x &amp;lt; y {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; x&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; y&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有 int 类型的 min 版本需求，得另外写一个类似的函数，这完全是重复代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那泛型版本呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;min&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Ordered&lt;/span&gt;]&lt;span&gt;(x, y T)&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; x &amp;lt; y {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; x&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; y&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意和上面版本的区别。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;多了一个 &lt;code&gt;[T constraints.Ordered]&lt;/code&gt;，这就是类型参数列表，声明了一个类型 T，它的约束是 constraints.Ordered，即类型 T 满足它规定的条件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;参数类型 float64 变成了 T，而不是具体的某个类型&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那这个泛型函数如何调用呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;m := min[&lt;span&gt;int&lt;/span&gt;](&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是很奇怪？其实仔细一琢磨，好像没问题。因为函数声明中有  &lt;code&gt;[T constraints.Ordered]&lt;/code&gt;，跟普通的函数参数有点像。调用时，提供 int，表明普通函数参数是 int 类型。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实例化&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在调用时，会进行实例化过程：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）用类型实参（type arguments）替换类型形参（type parameters）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）检查类型实参（type arguments）是否实现了类型约束&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果第 2 步失败，实例化（调用）失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，调用过程可以分解为以下两步：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;fmin := min[&lt;span&gt;float64&lt;/span&gt;]&lt;br/&gt;m := fmin(&lt;span&gt;2.3&lt;/span&gt;, &lt;span&gt;3.4&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 和下面等价&lt;/span&gt;&lt;br/&gt;m := min[&lt;span&gt;float64&lt;/span&gt;](&lt;span&gt;2.3&lt;/span&gt;, &lt;span&gt;3.4&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;// 相当于 m := (min[float64])(2.3, 3.4)&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，实例化产生了一个非泛型函数。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;类型的类型参数&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类型也可以有类型参数。通过一个例子理解一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个泛型版二叉树：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Tree[T &lt;span&gt;interface&lt;/span&gt;{}] &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; left, right *Tree[T]&lt;br/&gt; data        T&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(t *Tree[T])&lt;/span&gt; &lt;span&gt;Lookup&lt;/span&gt;&lt;span&gt;(x T)&lt;/span&gt; *&lt;span&gt;Tree&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; stringTree Tree[&lt;span&gt;string&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意其中的 &lt;code&gt;[T interface{}]&lt;/code&gt; ，跟函数的类型参数语法是一样的，T 相当于是一个类型，所以，之后用到 Tree 的地方，T 都跟随着，即 &lt;code&gt;Tree[T]&lt;/code&gt;，包括方法的接收者（receiver）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意实例化的地方：&lt;code&gt;var stringTree Tree[string]&lt;/code&gt;，和上面两个实例化步骤中的第一步一样。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、类型集合（Type sets）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看值参数的类型（the type of value parameters）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;函数普通参数列表中的每个值参数都有一个类型，这个类型定义值的集合。比如 float64 定义了浮点数值的集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相应的有类型参数的类型（the type of type parameters），也就是说，类型参数列表中的每个类型参数都有一个类型，这个类型定义了类型的集合，这叫做类型约束（type constraint）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;min&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Ordered&lt;/span&gt;]&lt;span&gt;(x, y T)&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的 constraints.Ordered 是类型参数列表中的 T 参数的类型，它定义了类型的集合，即类型约束。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;constraints.Ordered 是 Go1.18 内置的一个类型约束，它有两个功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;只有值支持排序的类型才能传递给类型参数 T；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;T 类型的值必须支持 &lt;code&gt;&amp;lt;&lt;/code&gt; 操作符，因为函数体中使用了该操作符。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;类型约束是接口&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家都知道接口定义了方法集（method sets），演讲中给了一张图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.559375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBbP6LicH9XoqcyMicRellBBJ6UPpdeNPpPObBibtCxQpEg9jXGkZzmowBnqS2bN95iaKnrLJSClQGmQ6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;method sets&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据 Go 的规则，类型 P、Q、R 方法中包含了 a、b、c，因此它们实现了接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，反过来可以说，接口也定义了类型集（type sets）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBbP6LicH9XoqcyMicRellBBJ6ghSJibyTZnKXU7ed8OU8YwYRcXGIMkgLb9alPWNVFR97WrHsuHGs4hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;type sets&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图中，类型 P、Q、R 都实现了左边的接口（因为都实现了接口的方法集），因此我们可以说该接口定义了类型集。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然接口是定义类型集，只不过是间接定义的：类型实现接口的方法集。而类型约束是类型集，因此完全可以重用接口的语义，只不过这次是直接定义类型集：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.490625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBbP6LicH9XoqcyMicRellBBJ62fouib1vdHmhAM9pTx66qwd1oke8iamygSLq1g69yybWtIKtKNDl5G6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;interface defines type sets&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是类型约束的语法，通过接口直接定义类型集：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Xxx &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; | &lt;span&gt;string&lt;/span&gt; | &lt;span&gt;bool&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 constraints.Ordered 的定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// Ordered is a constraint that permits any ordered type: any type&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// that supports the operators &amp;lt; &amp;lt;= &amp;gt;= &amp;gt;.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// If future releases of Go add new ordered types,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// this constraint will be modified to include them.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Ordered &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; Integer | Float | ~&lt;span&gt;string&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Ordered 定义了所有 interger、浮点数和字符串类型的集合。所以，&amp;lt; 操作符也是支持的。这其中的 Integer、Float 也在 constraints 包有定义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;细心的朋友应该发现了 &lt;code&gt;~string&lt;/code&gt;，类型前面的 &lt;code&gt;~&lt;/code&gt;。&lt;code&gt;~T&lt;/code&gt; 意味着包含底层类型 T 的所有类型集合。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果约束中的所有类型都支持一个操作，则该操作可以与相应的类型参数一起使用&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了将约束单独定义为类型外，还可以写成字面值的形式，比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[S &lt;span&gt;interface&lt;/span&gt;{~[]E}, E &lt;span&gt;interface&lt;/span&gt;{}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这看着有点晕，其实可以直接这么写：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[S ~[]E, E &lt;span&gt;interface&lt;/span&gt;{}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go1.18 中，any 是 interface{} 的别名，因此可以进一步写为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[S ~[]E, E any]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;E 是切片的元素类型，&lt;code&gt;~[]E&lt;/code&gt; 表示底层是 &lt;code&gt;[]E&lt;/code&gt; 切片类型的都符合该约束。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、类型推断&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在调用泛型函数时，提供类型实参感觉有点多余。Go 虽然是静态类型语言，但擅长类型推断。因此泛型这里，Go 也实现了类型推断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用泛型版的 min，可以不提供类型实参，而是直接由 Go 进行类型推断：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; a, b, m &lt;span&gt;float64&lt;/span&gt;&lt;br/&gt;m := min[&lt;span&gt;float64&lt;/span&gt;](a, b)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类型推断的细节很复杂，但使用起来还是很简单，大部分时候，跟普通函数调用没有区别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于类型推断，演讲中给了一个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Scale&lt;/span&gt;[&lt;span&gt;E&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt;]&lt;span&gt;(s []E, c E)&lt;/span&gt; []&lt;span&gt;E&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; r := &lt;span&gt;make&lt;/span&gt;([]E, &lt;span&gt;len&lt;/span&gt;(s))&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i, v := &lt;span&gt;range&lt;/span&gt; s {&lt;br/&gt;  r[i] = v * c&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; r&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个函数的目的是希望对 s 中的每个元素都乘以参数 c，最后返回一个新的切片。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着定义一个类型：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Point []&lt;span&gt;int32&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(p Point)&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 实现细节不重要，忽略&lt;/span&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;point&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很显然，Point 类型的切片可以传递给 Scale：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ScaleAndPrint&lt;/span&gt;&lt;span&gt;(p Point)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; r := Scale(p, &lt;span&gt;2&lt;/span&gt;)&lt;br/&gt; fmt.Println(r.String())&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们希望对 p 进行 Scale，得到一个新的 p，但发现返回的 r 根本不是 Point：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; p := Point{&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;}&lt;br/&gt; ScaleAndPrint(p)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会报错：&lt;code&gt;r.String undefined (type []int32 has no field or method String)&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，我们应该这样修改 Scale 函数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Scale&lt;/span&gt;[&lt;span&gt;S&lt;/span&gt; ~[]&lt;span&gt;E&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt;]&lt;span&gt;(s S, c E)&lt;/span&gt; &lt;span&gt;S&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; r := &lt;span&gt;make&lt;/span&gt;(S, &lt;span&gt;len&lt;/span&gt;(s))&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i, v := &lt;span&gt;range&lt;/span&gt; s {&lt;br/&gt;  r[i] = v * c&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; r&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意其中的变化：加入了泛型 S，以及额外的类型约束 &lt;code&gt;~[]E&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用 Scale 时，不需要 &lt;code&gt;r := Scale[Point, int32](p, 2)&lt;/code&gt;，因为 Go 会进行类型推断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正确的完整代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;constraints&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Scale&lt;/span&gt;[&lt;span&gt;S&lt;/span&gt; ~[]&lt;span&gt;E&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt;]&lt;span&gt;(s S, c E)&lt;/span&gt; &lt;span&gt;S&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; r := &lt;span&gt;make&lt;/span&gt;(S, &lt;span&gt;len&lt;/span&gt;(s))&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i, v := &lt;span&gt;range&lt;/span&gt; s {&lt;br/&gt;  r[i] = v * c&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; r&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Point []&lt;span&gt;int32&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(p Point)&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 实现细节不重要，忽略&lt;/span&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;point&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ScaleAndPrint&lt;/span&gt;&lt;span&gt;(p Point)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; r := Scale(p, &lt;span&gt;2&lt;/span&gt;)&lt;br/&gt; fmt.Println(r.String())&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; p := Point{&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;}&lt;br/&gt; ScaleAndPrint(p)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、什么时候用泛型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泛型的加入，无疑增加了复杂度。我个人认为，能不用泛型就不用泛型。在演讲中，两位大佬提到，在以下场景可以考虑使用泛型：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对于 slice、map、channel 等类型，如果它们的元素类型是不确定的，操作这类类型的函数可以考虑用泛型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一些通用目的的数据结构，比如前面提到的二叉树等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果一些函数行为相同，只是类型不同，可以考虑用泛型重构&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，目前 Go 方法不支持类型参数，所以，如果方法有需要泛型的场景，可以转为函数的形式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，不要为了泛型而泛型。比如这样的泛型就很糟糕：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ReadFour&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;io&lt;/span&gt;.&lt;span&gt;Reader&lt;/span&gt;]&lt;span&gt;(r T)&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而应该使用非泛型版本：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ReadFour&lt;/span&gt;&lt;span&gt;(r io.Reader)&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5、总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泛型是一把双刃剑。泛型的加入，让 Go 不那么简单了。有些代码写出来，可读性可能非常差。我们应该按没有泛型时候写代码，当发现在 Repeat Yourself 时，再考虑能不能用泛型重构，千万别玩什么花样！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，放上演讲的视频地址，有兴趣的可以观看：https://www.youtube.com/watch?v=Pa_e9EeCdy8。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5ffcd52b44ed3d7750b1ffb0c8a74670</guid>
<title>如何写一份让面试官眼前一亮的简历？</title>
<link>https://toutiao.io/k/n5pmmlc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU0OTE4MzYzMw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk55KKLFaGCDRURMvFtPXf9fZXJOHOFsA3Ye8Qbibf3qHLkBQNpdjicAVpPf2T03EcakjAFbwqicjXSibXA/0?wx_fmt=png&quot; data-nickname=&quot;架构师社区&quot; data-alias=&quot;devabc&quot; data-signature=&quot;架构师社区，专注分享架构师技术干货，架构师行业秘闻，汇集各类奇妙好玩的架构师话题和流行的架构师动向！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;一份好的简历，能给面试官一个好的印象，可能你接下来的面试就很顺利。一份糟糕的简历，可能连简历筛查都过不了，所以写好一份简历很重要。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可是笔者发现很多伙伴根本不会写简历，有的内容不全，有的重点不突出，有的语句不通，有的错字连篇，还有的看一眼就想丢到垃圾桶去。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;于是笔者今天想就这个话题聊聊，如何写好一份简历？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;笔者不想长篇大论，讲一些原则，要写些什么，不要写什么，这样你看完这篇文章还是无从下手，笔者就从实战的角度说一说。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1、简历制作&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不要随便在网上找一份简历模板，修修改改，更不要随手打开一个word就开写。现在有很多专门制作简历的网站，可以根据你填写的信息导出一份精美的简历，这种简历既美观条理又清晰，看起来一目了然，是比较推荐的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;按下面的顺序填写简历就可以了。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;基本信息 &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;个⼈总结 &lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;教育经历 &lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;专业技能 &lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;⼯作经历 &lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;项⽬经历 &lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他（选填）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、基本信息&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个没什么好说的，无非就是姓名，年龄，联系方式，如实填写就好了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt;&lt;strong&gt;个人总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个人总结部分，就是要突出自己的亮点，扬长避短，尽量给面试官留下深刻印象的部分。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在这里，可以先写上自己的开发经验，然后对一两家比较重要的公司进行深入说明，比如带过团队，负责过比较重要的项目，负责过比较核心的业务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后写上自己深⼊研究的技术。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总之，个人总结就是要多写一些让⾯试官和HR眼前⼀亮的东⻄。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;举个例子：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;xxx年java开发经验，⽬前在xxx公司（xxxx万⽤户，xxx头部平台）担任系统架构师，从事分布式、⾼并发、⼤数据量平台架构设计以及研发，最⾼系统总⽤户量超过xxxx万，⽇活跃⽤户xxx万。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果你level没那么高，可以这样写：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;xxx年开发经验，曾在xxx&lt;span&gt;公司（上市公司，市值xxxx亿美⾦，知名xxx平台）从事分布式、高并发的金融系统开发，⾼峰期qps过xx万。对⽹络、并发编程、分布式系统，Redis、kafka、zookeeper等技术有深⼊研究。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4、教育经历&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（1）写上⾃⼰的教育经历，如果是985或211⼤学，要标记出来，相当一部分公司是很看重学历学校的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（2）教育经历保留最⾼的学历，其他的可以不写，等HR⾯试的时候⾃⼰想办法去聊学历这个事。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5、专业技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;（1）写上你熟悉的，深⼊理解的，和精通的技术，不熟的不要写，被问倒了就尴尬了。&lt;/section&gt;&lt;section&gt;（2）同时在写的时候要有⼀定的层次感。&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先写从基础内容开始，⽐如jdk集合与并发包，线程池，jvm，mysql 等技术；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后写中间件rocketmq kafka zk netty等技术；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后再写⼀些运维相关的技术；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6、工作经历&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;这部分建议从最近的公司开始写，每段工作经历中写上比较重要的项目。&lt;/section&gt;&lt;section&gt;（1）如果公司做的是C端项⽬，要写产品名，不要写公司全名，能简写就尽量简写。&lt;/section&gt;&lt;section&gt;（2）如果公司是独⻆兽，融过资的，或上市公司等，可以标注上，⽐如上市公司（市值60亿美⾦）、D轮融资等。 &lt;/section&gt;&lt;section&gt;（3）如果是外包给甲⽅做项⽬的，可以写甲⽅的产品名或公司名。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后写具体的项⽬，然后把每个项⽬拆分成下面这些部分：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;项⽬名称&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;项⽬背景&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;项⽬描述&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;把你项⽬的具体业务描述出来，挑重点业务来写，每个业务是怎样去实现的，也可以适当的把一些学到但并没有用上的技术融入到项目中去。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;项⽬职责&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;负载情况&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;要写上应⽤的总⽤户量、⽇活跃⽤户量、⽇访问量、⾼峰连接数、⾼峰请求并发数、⽇数据量、总数据量等数字。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你的项⽬并发量⽐较⾼，就突出并发量相关的数字。如果项⽬没有并发，但是数据量很⼤，就突出数据量相关的数字。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果实在是并发量和数据量都不⾏，就写项⽬规模相关的数字，⽐如项⽬拆分了多少个服务， 每个服务部署了多少台机器，每个中间件部署了多少台机器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;上⾯这些数字，都可以根据你真实的业务情况去适当的增加。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;技术挑战、解决⽅案&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;这⾥是体现你项⽬亮点的地⽅。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要⼤概写⼀个简单标题，你在做项⽬中，做了什么样的业务或使⽤了什么样的技术（中间件、 框架）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后标题下⾯写，做这个业务或使⽤这个技术时遇到了怎么样【技术挑战】。（这⾥⾄少写2个）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后在对应上⾯的技术挑战，你的解决⽅案是什么。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以去写⼀些复杂业务、源码级别、⼤数据量、⾼并发的解决⽅案。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt; &lt;strong&gt;7、其他（选填）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据自己的具体情况，可以适当的增加一些栏目，比如有的伙伴有写技术文章和开源项目的，可以加上去，&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;简历写完后，导出要保存为pdf格式，因为如果是word格式，打开的时候可能排版变得很乱，也可能因为不同版本兼容问题打不开，pdf格式就不存在这些问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面详细说了下如何写好一份简历，但是笔者想说的是，简历只是一块敲门砖，让用人单位给你一个面试机会，能不能通过面试最终还要靠你的真才实学。如果没有真才实学，就算你的简历写的天花乱坠，照样不能通过面试。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后，给伙伴们一个小小的忠告，诚实点，不要试图撒谎。常常你撒一个谎的时候，需要无数个谎言来掩饰，如果其中某一个谎言被戳穿，那你这次面试就失败了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;另外现在很多公司都会做背调，有的是自己公司的hr做背调，还有的是请专门的背调公司做背调，比如91背调，八方锦程，全景求是。不要低估这些背调公司的手段，如果你被调查出来有违法违纪，跟简历不符的内容，那就会触及背调红线，很可能你就会被pass掉。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总之写好一份简历，不能敷衍了事，要适度包装，给人耳目一新的感觉，又不能包装的离谱，给人假的离谱的感觉。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU0OTE4MzYzMw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk55KKLFaGCDRURMvFtPXf9fZXJOHOFsA3Ye8Qbibf3qHLkBQNpdjicAVpPf2T03EcakjAFbwqicjXSibXA/0?wx_fmt=png&quot; data-nickname=&quot;架构师社区&quot; data-alias=&quot;devabc&quot; data-signature=&quot;架构师社区，专注分享架构师技术干货，架构师行业秘闻，汇集各类奇妙好玩的架构师话题和流行的架构师动向！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4e3d262a5154f0b478f47c7d02b061ab</guid>
<title>开源｜一款适合于快速开发业务的 Go 框架</title>
<link>https://toutiao.io/k/wnwdwqc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;以下内容选自「码农周刊 VIP 会员」圈子，每日更新，精彩不断。&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一款适合于快速开发业务的 Go 框架，可快速构建 API 服务或 Web 网站。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1656&quot; data-ratio=&quot;1.8853333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ5xCK35MmIAZY2MoAmliafucpaNAuXPBmPxibsF9bKh4bg0SmMP9gzockMFdzT9ALeYqowEbXUbNgEQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>719d4f94674da841e81121c20c6f4e7a</guid>
<title>阿里巴巴第三季度净利润同比下降 75%；字节跳动确认 28 岁员工不幸离世；去哪儿网因让员工加班被罚款｜开发者头条</title>
<link>https://toutiao.io/k/szrj964</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNav9O9qnKhTa0bTibkxoP6qd5iccad7eMp1oeqEUFwkJG8E3pZRIJoSfLdPTGKsF3l1G6Dw2xmrZlfuTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;来源&lt;/strong&gt;：网络整理&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;头条菌微信号：&lt;/span&gt;&lt;span&gt;toutiaoio007&lt;/span&gt;&lt;span&gt; ，欢迎加我，交个朋友！&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;字节跳动确认 28 岁员工不幸离世，去世员工母亲辟谣获赔 2000 万&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2 月 23 日上午，网传一名 28 岁的字节跳动员工于 22 日晚猝死，其妻子怀孕两个月。下午，字节作出回应：「很遗憾要和大家同步这个令人悲痛的消息：2 月 23 日 13 时 43 分，从医院获知，在抢救 41 个小时后，吴同学不幸离世。」字节表示，公司已承担全部医治费用，全力提供后勤支持。公司还将向吴同学家属提供抚恤和关怀，协助处理好相关事宜，尽力帮助其家人渡过难关。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;23 日晚间，去世员工的母亲就网上赔偿 2000 万的说法进行辟谣。她在接受媒体采访时表示，现在很痛苦，网传赔偿 2000 万消息是假的，双方暂未协商赔偿事宜。（新浪科技、快科技）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;去哪儿网因让员工加班被罚款&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;针对因违反劳动法被罚一事，去哪儿网官方回应称，确因疫情在征得员工同意的情形下安排了长假期间加班，以保障疫情期间尽快响应消费者诉求。虽已支付了加班费并安排了倒休假缓解，但确实违反了加班限制性时间规定。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;企查查 app 显示，近日，去哪儿网关联公司北京趣拿信息技术有限公司新增一则行政处罚，处罚事由为延长劳动者工作时间，处罚结果为对该单位给予警告，并处 3250 元罚款。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;去哪儿网表示，公司尊重政府的处罚决定，并已深刻认识到问题的严重性，目前已第一时间进行了整改。同时，积极组织开展各层级管理者相关培训，切实保障员工各项利益的落实执行。（TechWeb）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;消息称微信在试行「1065」工作制&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《科创板日报》援引知情人士消息称，微信事业群正在试运行「1065」工作制 —— 早上 10 点上班，晚上 6 点下班，一周工作五天。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;知情人士指出，该工作制从年后开始，其所在部门其实以前也是这个作息，不要求强制加班，「这次是强制要求下班，所以是比之前更宽松」。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;阿里巴巴第三季度营收 2425.8 亿元，净利润同比下降 75%&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;2 月 24 日消息，阿里巴巴集团公布 2022 财年第三季度业绩，截至 2021 年 12 月 31 日，阿里巴巴第三季度营收 2,425.8 亿元，预估 2,449.1 亿元；第三季度调整后每 ADS 收益 16.87 元。净利润 204.29 亿元，净利润同比下降 75%。阿里巴巴生态全球年度活跃消费者数量达到 12.8 亿，单季增长 4300 万。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本季度，阿里巴巴收入同比增长 10%，经营利润同比下降 34%，经调整 EBITA 同比下降 27%。这些下降主要由于对增长业务的投入增加、为用户增长而增加的费用，以及支持商家的举措。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;生活服务首次以板块阵型写入财报，以饿了么为中心的「到家」和以高德为中心的「到目的地」业务整体年度活跃消费者达到约 3.72 亿，单季净增长 1700 万，订单量同比增长 22%。（网易科技）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;最高法发布新修改的非法集资刑事司法解释：涉网贷、虚拟币交易、养老领域非法集资等&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最高法发布新修改的非法集资刑事司法解释。其中提到，增加网络借贷、虚拟币交易、融资租赁等新型非法吸收资金的行为方式，同时针对养老领域非法集资突出问题，增加以提供“养老服务”、投资“养老项目”等方式非法吸收资金的情形。（36氪）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;快手电商直播间将于3月1日起切断淘宝、京东联盟商品链接&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;快手电商发布公告称，因第三方电商平台与快手合作协议变更，自2022年3月1日0时起，淘宝联盟商品链接将无法在快手直播间购物车、短视频购物车、商详页等发布商品及服务链接；京东联盟商品链接将无法在快手直播间购物发布商品及服务链接，可在短视频购物车、商详页等发布商品及服务链接。（36氪）&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;苹果 AR/VR 头显再次被传将采用 Micro LED 显示屏，三星正在准备竞品&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;据韩国 ET News 报道，苹果公司的混合现实头显再次被传出将采用先进的 Micro LED 显示屏。Micro LED 显示屏直接建立在芯片晶圆上，而不是玻璃基板上，这使得显示屏更薄，更小，更省电。它们允许像素尺寸在 4 至 20 微米之间，而标准 OLED 面板的像素尺寸为 40 至 300 微米，Micro LED 显示器具有更快的微秒级响应时间，使其更适合于增强现实（AR）和虚拟现实（VR）应用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一方面，三星被传正计划推出一款拥有「全息图」技术和 Exynos 芯片的 AR 设备。此前有报道称，三星在将 AR 和 VR 设备推向市场的热潮中明显落后，部分原因是其对可折叠智能手机的「痴迷」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然普遍认为苹果的头显将在今年推出，但由于开发问题，彭博社的马克·古尔曼最近的一份报告对该设备在 2022 年出现的可能性表示怀疑，现在看来 2023 年更有可能。（cnBeta）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;为抢占短视频市场，Meta向全球Facebook用户开放Reels功能&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;当地时间周二，Facebook母公司Meta宣布，将向全球所有Facebook用户开放短视频功能Reels。Meta首席执行官马克·扎克伯格在Facebook上写道：“到目前为止，Reels已成为我们增长最快的内容形式，今天我们将向全球所有Facebook用户提供它。”Reels是Meta在2020年8月在Instagram上推出的一项短视频功能，其目的是为了和Tiktok争夺短视频市场。（财联社）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;加入「码农周刊VIP会员」，成为更好的开发者！&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavicibroqCN98y5SNT9NbfA3oHYQiaicFScHFfppgek7ZGicJiaHK45qc2zoccBibfEzIvzTsI4AB2xO2IaOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>