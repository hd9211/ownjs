<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c4b9944319fbf5013c7e35484e2febc7</guid>
<title>凯文·凯利70岁生日的103条人生建议｜码农周刊VIP会员专属邮件周报 Vol.090</title>
<link>https://toutiao.io/k/d3q95iv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;logged-out env-production page-responsive page-blob&quot; id=&quot;readabilityBody&quot;&gt;
    

    

  &lt;p id=&quot;start-of-content&quot; class=&quot;show-on-focus&quot;/&gt;







    


    

  &lt;include-fragment class=&quot;js-notification-shelf-include-fragment&quot; data-base-src=&quot;https://github.com/notifications/beta/shelf&quot;/&gt;





  &lt;div class=&quot;application-main &quot; data-commit-hovercards-enabled=&quot;&quot; data-discussion-hovercards-enabled=&quot;&quot; data-issue-and-pr-hovercards-enabled=&quot;&quot;&gt;
        &lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SoftwareSourceCode&quot; class=&quot;&quot;&gt;
    &lt;main id=&quot;js-repo-pjax-container&quot; data-pjax-container=&quot;&quot;&gt;
      

    
    








  



&lt;div id=&quot;repo-content-pjax-container&quot; class=&quot;repository-content &quot;&gt;
  
  


  
      
  &lt;div class=&quot;clearfix container-xl px-3 px-md-4 px-lg-5 mt-4&quot;&gt;
    
    
&lt;div&gt;
  




    
&lt;a class=&quot;d-none js-permalink-shortcut&quot; data-hotkey=&quot;y&quot; href=&quot;/toutiaoio/weekly.manong.io/blob/bfce3ea87cd5c8c85608e58ecb1dbde7503f34ff/docs/vol.090.md?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;Permalink&lt;/a&gt;







    &lt;div id=&quot;spoof-warning&quot; class=&quot;mt-0 pb-3&quot; hidden=&quot;&quot; aria-hidden=&quot;&quot;&gt;
  &lt;div data-view-component=&quot;true&quot; class=&quot;flash flash-warn mt-0 clearfix&quot;&gt;
  
  
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert float-left mt-1&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;

      &lt;p class=&quot;overflow-hidden&quot;&gt;This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.&lt;/p&gt;


  
&lt;/div&gt;&lt;/div&gt;

    &lt;include-fragment src=&quot;/toutiaoio/weekly.manong.io/spoofed_commit_check/bfce3ea87cd5c8c85608e58ecb1dbde7503f34ff&quot; data-test-selector=&quot;spoofed-commit-check&quot;/&gt;

    &lt;div class=&quot;Box d-flex flex-column flex-shrink-0 mb-3&quot;&gt;
  
  

  &lt;div class=&quot;Box-body d-flex flex-items-center flex-auto border-bottom-0 flex-wrap&quot;&gt;
    &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-fg-default float-left mr-3&quot; id=&quot;blob_contributors_box&quot;&gt;
      &lt;summary class=&quot;Link--primary&quot;&gt;
        &lt;svg text=&quot;gray&quot; aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-people&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M5.5 3.5a2 2 0 100 4 2 2 0 000-4zM2 5.5a3.5 3.5 0 115.898 2.549 5.507 5.507 0 013.034 4.084.75.75 0 11-1.482.235 4.001 4.001 0 00-7.9 0 .75.75 0 01-1.482-.236A5.507 5.507 0 013.102 8.05 3.49 3.49 0 012 5.5zM11 4a.75.75 0 100 1.5 1.5 1.5 0 01.666 2.844.75.75 0 00-.416.672v.352a.75.75 0 00.574.73c1.2.289 2.162 1.2 2.522 2.372a.75.75 0 101.434-.44 5.01 5.01 0 00-2.56-3.012A3 3 0 0011 4z&quot;/&gt;
&lt;/svg&gt;
        &lt;strong&gt;1&lt;/strong&gt;
        
        contributor
      &lt;/summary&gt;
      &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast&quot; aria-label=&quot;Users who have contributed to this file&quot; src=&quot;/toutiaoio/weekly.manong.io/contributors-list/master/docs/vol.090.md&quot; preload=&quot;&quot;&gt;
        &lt;div class=&quot;Box-header&quot;&gt;
          &lt;button class=&quot;Box-btn-octicon btn-octicon float-right&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
            &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
          &lt;/button&gt;
          &lt;h3 class=&quot;Box-title&quot;&gt;
            Users who have contributed to this file
          &lt;/h3&gt;
        &lt;/div&gt;
        &lt;include-fragment&gt;
          &lt;svg viewbox=&quot;0 0 16 16&quot; fill=&quot;none&quot; data-view-component=&quot;true&quot; class=&quot;my-3 mx-auto d-block anim-rotate&quot;&gt;
  &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;7&quot; stroke=&quot;currentColor&quot; stroke-opacity=&quot;0.25&quot; stroke-width=&quot;2&quot; vector-effect=&quot;non-scaling-stroke&quot;/&gt;
  &lt;path d=&quot;M15 8a7.002 7.002 0 00-7-7&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; vector-effect=&quot;non-scaling-stroke&quot;/&gt;
&lt;/svg&gt;
        &lt;/include-fragment&gt;
      &lt;/details-dialog&gt;
    &lt;/details&gt;
  &lt;/div&gt;
&lt;/div&gt;







    &lt;readme-toc&gt;

    &lt;div data-target=&quot;readme-toc.content&quot; class=&quot;Box mt-3 position-relative&quot;&gt;
      
  &lt;div class=&quot;Box-header js-blob-header blob-header js-sticky js-position-sticky top-0 p-2 d-flex flex-shrink-0 flex-md-row flex-items-center&quot;&gt;

      &lt;details data-target=&quot;readme-toc.trigger&quot; data-menu-hydro-click=&quot;{&amp;quot;event_type&amp;quot;:&amp;quot;repository_toc_menu.click&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;target&amp;quot;:&amp;quot;trigger&amp;quot;,&amp;quot;repository_id&amp;quot;:193332705,&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/toutiaoio/weekly.manong.io/blob/master/docs/vol.090.md?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&amp;quot;,&amp;quot;user_id&amp;quot;:null}}&quot; data-menu-hydro-click-hmac=&quot;22043ed9df8256ce83f5fb1aa1911a940509266306b4564c4b9f8c48a25be466&quot; class=&quot;dropdown details-reset details-overlay&quot;&gt;
  &lt;summary class=&quot;btn btn-octicon m-0 mr-2 p-2&quot; aria-haspopup=&quot;true&quot; aria-label=&quot;Table of Contents&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-list-unordered&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M2 4a1 1 0 100-2 1 1 0 000 2zm3.75-1.5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zM3 8a1 1 0 11-2 0 1 1 0 012 0zm-1 6a1 1 0 100-2 1 1 0 000 2z&quot;/&gt;
&lt;/svg&gt;
  &lt;/summary&gt;


  &lt;details-menu class=&quot;SelectMenu&quot; role=&quot;menu&quot;&gt;
    
  &lt;/details-menu&gt;
&lt;/details&gt;


  &lt;p class=&quot;text-mono f6 flex-auto pr-3 flex-order-2 flex-md-order-1&quot;&gt;

      92 lines (53 sloc)
      &lt;span class=&quot;file-info-divider&quot;/&gt;
    3.62 KB
  &lt;/p&gt;

  

    
&lt;/div&gt;


        &lt;div id=&quot;readme&quot; class=&quot;Box-body readme blob js-code-block-container p-5 p-xl-6 gist-border-0&quot;&gt;
    &lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-凯文凯利70岁生日的103条人生建议码农周刊vip会员专属邮件周报-vol090&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#凯文凯利70岁生日的103条人生建议码农周刊vip会员专属邮件周报-vol090&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;凯文·凯利70岁生日的103条人生建议｜码农周刊VIP会员专属邮件周报 Vol.090&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;本文内容节选自「码农周刊VIP会员专属邮件周报 Vol.090」，每周五发送，欢迎订阅！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;#%E7%AE%80%E4%BB%8B&quot;&gt;码农周刊简介&lt;/a&gt;｜&lt;a href=&quot;#%E8%AF%BB%E8%80%85%E5%9C%88%E5%AD%90%E4%B8%93%E5%B1%9E%E9%82%AE%E4%BB%B6%E5%91%A8%E6%8A%A5&quot;&gt;读者圈子专属邮件周报&lt;/a&gt;｜&lt;a href=&quot;#%E5%BE%80%E6%9C%9F%E5%AD%98%E6%A1%A3&quot;&gt;往期存档&lt;/a&gt;&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-欢迎加入读者圈子一起交流&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#欢迎加入读者圈子一起交流&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;欢迎加入读者圈子，一起交流！&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;600+圈子成员，以中高级程序员为主，更有架构师、CTO坐镇交流；&lt;/li&gt;
&lt;li&gt;1000+优质主题，数十G独家资料，每日分享，精挑细选；&lt;/li&gt;
&lt;li&gt;全年52期专属邮件周报，让你轻松掌握业界资讯、技术干货，提升认知水平；&lt;/li&gt;
&lt;li&gt;全年52本好书共读，让你花最少的时间，获取更好的知识；&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;……&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;心动不如行动，赶快加入吧！&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/2fac8f02f427e6fd6754cc3079b5de7539bccbb010003d49d2309d0ee1a21c5a/68747470733a2f2f696d672e746f757469616f2e696f2f6164732f7669705f6769746875625f303530362e6a706567&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2fac8f02f427e6fd6754cc3079b5de7539bccbb010003d49d2309d0ee1a21c5a/68747470733a2f2f696d672e746f757469616f2e696f2f6164732f7669705f6769746875625f303530362e6a706567&quot; data-canonical-src=&quot;https://img.toutiao.io/ads/vip_github_0506.jpeg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-本期首先分享的是凯文凯利70岁生日的103条人生建议摘录几条共勉&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#本期首先分享的是凯文凯利70岁生日的103条人生建议摘录几条共勉&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期，首先分享的是凯文·凯利70岁生日的103条人生建议，摘录几条，共勉。&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;不要为那种你不想成为的人工作。&lt;/li&gt;
&lt;li&gt;12个爱你的人，比12,000,000个喜欢你的人更值得。&lt;/li&gt;
&lt;li&gt;别犯同样的错，试一些新错。&lt;/li&gt;
&lt;li&gt;领导的真正工作是培养更多领导，而不是粉丝。&lt;/li&gt;
&lt;li&gt;付出（锻炼、陪伴、工作）的连续性比数量更重要。日拱一卒，比偶尔为之更重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-内容节选&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#内容节选&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;内容节选&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;1、&lt;a href=&quot;https://mp.weixin.qq.com/s/1Dv17rDRto_1i_LdHEVARA&quot; rel=&quot;nofollow&quot;&gt;TikTok内幕：张一鸣的巨浪征途&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;“另一方面，张一鸣不会感情用事，对人对事极为精确，眼睛容不下灰色和沙粒。这让他流露出一种狠绝。在早期，他把拿走公司代码的人送进了监狱。”&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;2、&lt;a href=&quot;https://mp.weixin.qq.com/s/_fZxTDOr2n1IQySjVODB8A&quot; rel=&quot;nofollow&quot;&gt;Web3革命：逃离、信仰、大迁徙&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;互联网正在发生的一场“大迁徙”&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;3、&lt;a href=&quot;https://toutiao.io/k/vduu1jt&quot; rel=&quot;nofollow&quot;&gt;B站SRE业务稳定性运营实践&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;从稳定性的相关理论定义出发，围绕稳定性的核心领域展开描述，并介绍B站在相关领域所做的实践探索。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;4、&lt;a href=&quot;https://toutiao.io/k/h7w6rt4&quot; rel=&quot;nofollow&quot;&gt;携程酒店订单缓存 &amp;amp; 存储系统升级实践&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;万字长文详解&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;5、&lt;a href=&quot;https://github.com/alibaba/fastjson2&quot;&gt;阿里巴巴开源的高性能JSON库&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;FASTJSON项目的重要升级&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;6、&lt;a href=&quot;https://github.com/k8w/tsrpc&quot;&gt;一个专为 TypeScript 设计的 RPC 框架&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;适用于 HTTP API、WebSocket 实时应用、NodeJS 微服务等场景。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;7、&lt;a href=&quot;https://toutiao.io/k/zgzh3st&quot; rel=&quot;nofollow&quot;&gt;几道高频的JVM面试题&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;供参考&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;8、&lt;a href=&quot;https://toutiao.io/k/x03gc99&quot; rel=&quot;nofollow&quot;&gt;9张图轻松吃透Go内存管理单元&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;图文并茂&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;9、&lt;a href=&quot;https://toutiao.io/k/n0gqyj1&quot; rel=&quot;nofollow&quot;&gt;Elasticsearch 数据建模指南&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;详细介绍&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;10、&lt;a href=&quot;https://toutiao.io/k/y59f508&quot; rel=&quot;nofollow&quot;&gt;我的机器学习之路&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;学习总结&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-简介&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#简介&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;简介&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;/li&gt;
&lt;li&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万&lt;/li&gt;
&lt;li&gt;专业、简单、有用，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;/li&gt;
&lt;li&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「码农周刊VIP会员」服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-读者圈子专属邮件周报&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#读者圈子专属邮件周报&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;读者圈子专属邮件周报&lt;/h2&gt;

&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-往期存档&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#往期存档&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;往期存档&lt;/h2&gt;

&lt;/article&gt;
  &lt;/div&gt;

    &lt;/div&gt;

  &lt;/readme-toc&gt;

  

  &lt;details class=&quot;details-reset details-overlay details-overlay-dark&quot; id=&quot;jumpto-line-details-dialog&quot;&gt;
    &lt;summary data-hotkey=&quot;l&quot; aria-label=&quot;Jump to line&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast linejump&quot; aria-label=&quot;Jump to line&quot;&gt;
          &lt;/details-dialog&gt;
  &lt;/details&gt;


&lt;/div&gt;

  &lt;/div&gt;


&lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;

  &lt;/div&gt;

          &lt;footer class=&quot;footer width-full container-xl p-responsive&quot; role=&quot;contentinfo&quot;&gt;


  
  &lt;p class=&quot;d-flex flex-justify-center pb-6&quot;&gt;
    &lt;span class=&quot;f6 color-fg-muted&quot;/&gt;
  &lt;/p&gt;
&lt;/footer&gt;




  &lt;div id=&quot;ajax-error-message&quot; class=&quot;ajax-error-message flash flash-error&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;button type=&quot;button&quot; class=&quot;flash-close js-ajax-error-dismiss&quot; aria-label=&quot;Dismiss error&quot;&gt;
      &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
    &lt;/button&gt;&lt;p&gt;
    You can’t perform that action at this time.
  &lt;/p&gt;&lt;/div&gt;

  &lt;div class=&quot;js-stale-session-flash flash flash-warn flash-banner&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-in&quot; hidden=&quot;&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-out&quot; hidden=&quot;&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
  &lt;/div&gt;
    &lt;template id=&quot;site-details-dialog&quot;&gt;
  &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm&quot; open=&quot;&quot;&gt;
    &lt;summary role=&quot;button&quot; aria-label=&quot;Close dialog&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal&quot;&gt;
      &lt;button class=&quot;Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
        &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
      &lt;/button&gt;
      &lt;p class=&quot;octocat-spinner my-6 js-details-dialog-spinner&quot;/&gt;
    &lt;/details-dialog&gt;
  &lt;/details&gt;
&lt;/template&gt;

    

    &lt;template id=&quot;snippet-clipboard-copy-button&quot;&gt;
  
&lt;/template&gt;




  &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d05d20afa35a404a3853631c0460048c</guid>
<title>TensorFlow决策森林构建GBDT（Python）</title>
<link>https://toutiao.io/k/9xnh49u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4OTQ1MTA4OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYJ1LbaTxqd4VPOibfZ1tf0fXDUqFOLlPcRPvv4W4Cro4YnhRx2Xib5MId5rECtVMBkmvJk8nSNnsekw/0?wx_fmt=png&quot; data-nickname=&quot;数据挖掘工程师&quot; data-alias=&quot;DataMinings&quot; data-signature=&quot;数万名数据挖掘爱好者的聚集地，致力于前沿数据技术研究。公众号以数据为核心，分享大数据、数据分析、机器学习、深度学习等干货，想学数据我等你来。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;一、Deep Learning is Not All You Need&lt;/h3&gt;&lt;p&gt;&lt;span&gt;尽管神经网络在图像识别、自然语言等很多领域大放异彩，但回到表格数据的数据挖掘任务中，树模型才是低调王者，如论文《Tabular Data: Deep Learning is Not All You Need》提及的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30956375838926176&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesA7H38QGa8GFws3XcJickd9n9VCqpxosHQryMUPRLG9VFcbaVlVVDCZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1192&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;深度学习可能不是解决所有机器学习问题的灵丹妙药，通过树模型在处理表格数据时性能与神经网络相当（甚至优于神经网络），而且树模型易于训练使用，有较好的可解释性。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7624309392265194&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesVNkRiarlCRYialkgLDGVbkibOxs198DUfwwdHiaNmLajs8KW6qUGlNKM9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1086&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;二、树模型的使用&lt;/h3&gt;&lt;p&gt;&lt;span&gt;对于决策树等模型的使用，通常是要到scikit-learn、xgboost、lightgbm等机器学习库调用， 这和深度学习库是独立割裂的，不太方便树模型与神经网络的模型融合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.659016393442623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzes6WvBaxiaRktquhFnBz6LdyhYRkhrc5OF7OMCYuBgtoIb5YdlNib4xD5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;610&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个好消息是，Google 开源了 TensorFlow 决策森林（TF-DF），为基于树的模型和神经网络提供统一的接口，可以直接用TensorFlow调用树模型。决策森林（TF-DF）简单来说就是用TensorFlow封装了常用的随机森林（RF）、梯度提升(GBDT)等算法，其底层算法是基于C++的 Yggdrasil 决策森林 (YDF)实现的。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;三、TensorFlow构建GBDT实践&lt;/h3&gt;&lt;p&gt;&lt;span&gt;TF-DF安装很简单&lt;/span&gt;&lt;code&gt;&lt;span&gt;pip install -U tensorflow_decision_forests&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，有个遗憾是目前只支持Linux环境，如果本地用不了将代码复制到 Google Colab 试试~&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;import numpy as np  &lt;br/&gt;import pandas as pd&lt;br/&gt;import matplotlib.pyplot as plt&lt;br/&gt;import tensorflow as tf&lt;br/&gt;tf.random.set_seed(123)&lt;br/&gt;&lt;br/&gt;from sklearn import datasets&lt;br/&gt;from sklearn.model_selection import train_test_split&lt;br/&gt;from sklearn.metrics import precision_score, recall_score, f1_score,roc_curve&lt;br/&gt;&lt;br/&gt;dataset_cancer = datasets.load_breast_cancer()    &lt;span&gt;# 加载癌细胞数据集&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#print(dataset_cancer[&#x27;DESCR&#x27;])&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;df = pd.DataFrame(dataset_cancer.data, columns=dataset_cancer.feature_names)  &lt;br/&gt;&lt;br/&gt;df[&lt;span&gt;&#x27;label&#x27;&lt;/span&gt;] = dataset_cancer.target&lt;br/&gt;&lt;br/&gt;&lt;span&gt;print&lt;/span&gt;(df.shape)&lt;br/&gt;&lt;br/&gt;df.head()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1596774193548387&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesvlQCALXUgEicVLOhLTkuAk5M8WmcyJb65Lvia64gorTk5vPODfseCicvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# holdout验证法： 按3：7划分测试集 训练集&lt;/span&gt;&lt;br/&gt;x_train, x_test= train_test_split(df, test_size=0.3)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# EDA分析：数据统计指标&lt;/span&gt;&lt;br/&gt;x_train.describe(include=&lt;span&gt;&#x27;all&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38613861386138615&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzes4RCZJ5pmINr9yIfHYYMNpvVhxibHTpgXic8icXqdkRKlAOWenzgKBdazQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1212&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;构建TensorFlow的GBDT模型：TD-DF 一个非常方便的地方是它不需要对数据进行任何预处理。它会自动处理数字和分类特征，以及缺失值，我们只需要将df转换为 TensorFlow 数据集，如下一些超参数设定:&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41774193548387095&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesibCjpC7tftFGKXNWx5OVmx0hlDdliaKUYM6p03gboWe6Tb7cZ52Q9ZHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;模型方面的树的一些常规超参数，类似于scikit-learn的GBDT&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8233870967741935&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesiaxXnlubVr3N723j31ZEhw1AnqI3NMuqTOpq0wg0Ny5Hk4EzLqQlDHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;此外，还有带有正则化（dropout、earlystop）、损失函数（focal-loss）、效率方面（goss基于梯度采样）等优化方法：&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8411290322580646&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesdpfNVLc3IkFHINvo9mP5ZHEx9Zq8pmtOsX8hfQLCy5QgZynhlee0EQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;构建模型、编译及训练，一步到位：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 模型参数&lt;/span&gt;&lt;br/&gt;model_tf = tfdf.keras.GradientBoostedTreesModel(loss=&lt;span&gt;&quot;BINARY_FOCAL_LOSS&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 模型训练&lt;/span&gt;&lt;br/&gt;model_tf.compile()&lt;br/&gt;model_tf.fit(x=train_ds,validation_freq=0.1)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;## 模型评估&lt;/span&gt;&lt;br/&gt;可以看到&lt;span&gt;test&lt;/span&gt;的准确率已经都接近1，可以再那个困难的数据任务试试~&lt;br/&gt;evaluation = model_tf.evaluate(test_ds,return_dict=True)&lt;br/&gt;probs = model_tf.predict(test_ds)&lt;br/&gt;fpr, tpr, _ = roc_curve(x_test.label, probs)&lt;br/&gt;plt.plot(fpr, tpr)&lt;br/&gt;plt.title(&lt;span&gt;&#x27;ROC curve&#x27;&lt;/span&gt;)&lt;br/&gt;plt.xlabel(&lt;span&gt;&#x27;false positive rate&#x27;&lt;/span&gt;)&lt;br/&gt;plt.ylabel(&lt;span&gt;&#x27;true positive rate&#x27;&lt;/span&gt;)&lt;br/&gt;plt.xlim(0,)&lt;br/&gt;plt.ylim(0,)&lt;br/&gt;plt.show()&lt;br/&gt;&lt;span&gt;print&lt;/span&gt;(evaluation)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7679465776293823&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesevfeXy8ibTNp1erC0qlxp7Utq2dgw6iaFibyAIAou0E8DU4NgAtFz7Ogg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;599&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;模型解释性
GBDT等树模型还有另外一个很大的优势是解释性，这里TF-DF也有实现。模型情况及特征重要性可以通过&lt;/span&gt;&lt;code&gt;&lt;span&gt;print(model_tf.summary())&lt;/span&gt;&lt;/code&gt;&lt;span&gt;打印出来，&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6238767650834403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesxwicFdD8g1j3BaiaibkibLibQ2lHL1GS4eVr0LOLmaXgyePicrgnNhndIG1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;779&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;特征重要性支持了几种不同的方法评估：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;MEAN_MIN_DEPTH指标。平均最小深度越小，较低的值意味着大量样本是基于此特征进行分类的，变量越重要。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6778846153846154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesibdFmnJZqUcXGEw9Ft6plL8LiaFnGUvbucjg4VBVwbn6XYj4iaawLvllw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;624&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;NUM_NODES指标。它显示了给定特征被用作分割的次数，类似split。此外还有其他指标就不一一列举了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.450229709035222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesWp92T6yal0TibBOKUpbxOBVwhZpxHrPYeibLZXEQrOia2OvHxx3FcomvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;653&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们还可以打印出模型的具体决策的树结构，通过运行&lt;/span&gt;&lt;code&gt;&lt;span&gt;tfdf.model_plotter.plot_model_in_colab(model_tf, tree_idx=0, max_depth=10)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，整个过程还是比较清晰的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38225806451612904&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eyibF6kJBjTtTgssc6hGCszcK8u0oyzesQKs1uI4KhKw5YKt6CALTia9TWWzzialwulGOO2s6GtarYAeytib3IQw5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;小结&lt;/h4&gt;&lt;p&gt;&lt;span&gt;基于TensorFlow的TF-DF的树模型方法，我们可以方便训练树模型（特别对于熟练TensorFlow框架的同学），更进一步，也可以与TensorFlow的神经网络模型做效果对比、树模型与神经网络模型融合、利用异构模型先特征表示学习再输入模型（如GBDT+DNN、DNN embedding+GBDT），进一步了解可见如下参考文献。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;参考文献：&lt;/p&gt;&lt;p&gt;https://www.tensorflow.org/decision_forests/
https://keras.io/examples/structured_data/classification_with_tfdf/&lt;/p&gt;&lt;/blockquote&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4OTQ1MTA4OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYJ1LbaTxqd4VPOibfZ1tf0fXDUqFOLlPcRPvv4W4Cro4YnhRx2Xib5MId5rECtVMBkmvJk8nSNnsekw/0?wx_fmt=png&quot; data-nickname=&quot;数据挖掘工程师&quot; data-alias=&quot;DataMinings&quot; data-signature=&quot;数万名数据挖掘爱好者的聚集地，致力于前沿数据技术研究。公众号以数据为核心，分享大数据、数据分析、机器学习、深度学习等干货，想学数据我等你来。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4OTQ1MTA4OQ==&amp;amp;mid=2247500459&amp;amp;idx=1&amp;amp;sn=8e15c48bc67abdc03caa649689479140&amp;amp;chksm=fdcfd895cab85183fb6a03ac22f9804b973ebea2e96a5d153a062067a6fe6c1e241b2aeb7b0a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;10 种聚类算法的完整 Python 操作示例&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;10 种聚类算法的完整 Python 操作示例&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4OTQ1MTA4OQ==&amp;amp;mid=2247500259&amp;amp;idx=2&amp;amp;sn=e52aa3206765ab55d7ebc89d8ba4a29c&amp;amp;chksm=fdcfdbddcab852cbb2a9763745871ed2a266b1f997f1e37b52d2db244dbc6faa1f61f5aa1548&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;为什么回归问题用MSE？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;为什么回归问题用MSE？&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4OTQ1MTA4OQ==&amp;amp;mid=2247500237&amp;amp;idx=1&amp;amp;sn=c15c8ef92403c01730a5ee3a28c487d0&amp;amp;chksm=fdcfdbf3cab852e5f17b75b8a0ac72cb0b9754c609dc3ea91fc45617b067e8be5f5657709a17&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;时序特征相关系数的稳定性分析(附代码)&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;时序特征相关系数的稳定性分析(附代码)&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4OTQ1MTA4OQ==&amp;amp;mid=2247499891&amp;amp;idx=1&amp;amp;sn=53f97dd57de38f9e27bf3f5c18180e36&amp;amp;chksm=fdcfda4dcab8535b8cd129d90dd40927f2f33c6039d2dbe921fc1daae45f84fb3bf9f80bdc99&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;时间序列预测方法汇总：从理论到实践（附Kaggle经典比赛方案）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;时间序列预测方法汇总：从理论到实践（附Kaggle经典比赛方案）&lt;/a&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>88a2bdae9347ca6105d14802f10bc076</guid>
<title>基于开源IM即时通讯框架MobileIMSDK：RainbowChat v8.1版已发布</title>
<link>https://toutiao.io/k/22j49tg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;js-text&quot;&gt;&amp;#13;
  &lt;p class=&quot;js-site&quot;&gt;Copyright © 2014-2022 即时通讯网 - 即时通讯开发者社区 &lt;span class=&quot;hidden-xs&quot;&gt;/ 版本 V4.4&lt;/span&gt;&lt;/p&gt;&amp;#13;
  &lt;p class=&quot;js-ipc&quot;&gt;苏州网际时代信息科技有限公司 &lt;a href=&quot;https://beian.miit.gov.cn/&quot; getarticles=&quot;&quot; target=&quot;_blank&quot;&gt;(苏ICP备16005070号-1）&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;/div&gt;&amp;#13;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a4924502014d1f88f286eb16031f1712</guid>
<title>CUPID - for joyful coding 快乐的编程</title>
<link>https://toutiao.io/k/3jzqtse</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-14bz7qe&quot; options=&quot;[object Object]&quot;&gt;&lt;p data-first-child=&quot;&quot; data-pid=&quot;JfBJTZtx&quot;&gt;原文在这里&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//dannorth.net/2022/02/10/cupid-for-joyful-coding/%23domain-based-structure&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CUPID - forjoyful coding&lt;/a&gt;，作者对如何编写好的代码列举出了自己的方法论，我觉得蛮有意思的就翻译了一下，渣翻译欢迎各路大佬指出错误。&lt;/p&gt;&lt;p data-pid=&quot;wHXr3WOy&quot;&gt;以下为正文&lt;/p&gt;&lt;h2&gt;CUPID - for joyful coding&lt;/h2&gt;&lt;p data-pid=&quot;8wUhnjqP&quot;&gt;让我们从轻轻的揭开&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/SOLID&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;SOLID&lt;/a&gt;原则的偶像包袱开始，SOLID原则如今已经发展成了某种既成事实。如果我认为SOLID原则的优越性已不如当初，那我们应该用什么新的原则来取而代之呢？有新的原则适用于所有软件开发么？当我们聊到原则的时候，我们到底是在聊什么呢？&lt;/p&gt;&lt;p data-pid=&quot;nbnoZVBW&quot;&gt;我相信当我们满足某些属性或者特征时，会让我们在开发过程中心情愉悦。你的代码越具有这种气质，你的开发工作就越快乐；但是你应该根据实际的场景来权衡利弊。&lt;/p&gt;&lt;p data-pid=&quot;7eQiqxES&quot;&gt;这些特性有很多重复和互相关联的部分，可以从多种角度去描述他们。 我从自己编码工作中挑选了5种我最关注的特性。当然特性多了会造成收益递减，5种也正好可以组成一个足够方便于记忆的首字母缩写。&lt;/p&gt;&lt;p data-pid=&quot;3xuJJLRE&quot;&gt;CUPID特性如下：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;ArEzJj2n&quot;&gt;Composable: 可组合，合作愉快&lt;/li&gt;&lt;li data-pid=&quot;cr_sts6I&quot;&gt;Unix philosophy: Unix哲学，只做好一件事&lt;/li&gt;&lt;li data-pid=&quot;nkfEfXqw&quot;&gt;Predictable: 可预测的&lt;/li&gt;&lt;li data-pid=&quot;oZDMDf62&quot;&gt;Idiomatic: 通俗易懂/惯用的&lt;/li&gt;&lt;li data-pid=&quot;cqLPE3OS&quot;&gt;Domain-based: 解决方案域在语言和结构上对问题域建模&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;TfKqGPrV&quot;&gt;&lt;b&gt;Joyful software &lt;/b&gt;快乐的开发&lt;/p&gt;&lt;p data-pid=&quot;UzTN8C9P&quot;&gt;有些代码工作起来会让人愉悦。你知道如何找到你需要做的事。你知道如何进行你想要的修改，代码容易定位，容易理解，容易推理。 你对自己所修改的代码不会带来过度的副作用很有自信。就像是代码在引导你，邀请你四处看看。那个在你之前维护这些代码的程序员为之后维护的人考虑周全，因为可能之后维护代码的人就是他自己。&lt;/p&gt;&lt;p data-pid=&quot;KcKUhUKT&quot;&gt;Martin Fowler在他的伟大著作《重构》中说道：&lt;/p&gt;&lt;blockquote data-pid=&quot;1gkdoute&quot;&gt;-- 任何傻瓜都可以编写计算机可以理解的代码。优秀的程序员编写人类可以理解的代码。&lt;/blockquote&gt;&lt;p data-pid=&quot;pt5yJFii&quot;&gt;我在2000年代初读到这句话之后，他彻底颠覆了我的编程世界观。也许好的代码是为了让其他人可以理解呢？也许未来的那个人可能是我自己呢？这听起来像是一件令人向往的事情。&lt;/p&gt;&lt;p data-pid=&quot;GufzDuj_&quot;&gt;但是，尽管“可理解”也许是一个崇高的理想，但它并不是那么遥不可及！在Martin撰写《重构》一书的同时，计算机先驱Richard P. Gabriel描述了代码应该具备“宜居性”（这里&lt;i&gt;Habitability&lt;/i&gt;不知道怎么翻译比较好）:&lt;/p&gt;&lt;blockquote data-pid=&quot;Rz-nkenF&quot;&gt;代码宜居性是可以理解代码的构造和意图，同时能被轻松方便的修改的一种特性&lt;br/&gt;-- Habitability and Piecemeal Growth1, &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.dreamsongs.com/Files/PatternsOfSoftware.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Patterns of Software&lt;/a&gt; pp. 7-16, Richard P. Gabriel&lt;/blockquote&gt;&lt;p data-pid=&quot;nw2mxXlX&quot;&gt;这感觉更像是需要奋斗的目标。轻松方便的修改他人的代码会有多好的感觉呢？如果我们让代码能具有宜居性，那么是否编码会更开心呢？代码库是否有可能让你的工作充满欢乐？&lt;/p&gt;&lt;p data-pid=&quot;39tQSVbV&quot;&gt;如果编码是你的日常工作，那么寻找以及修改代码将成为你的用户体验。你所体验的惊喜，挫折，恐惧，无奈，期待，希望，欢乐都来源于早些在代码库中工作的程序员所做出的选择。&lt;/p&gt;&lt;p data-pid=&quot;lqp4njZ4&quot;&gt;如果我们假设代码库是可以让人欢乐工作的，是否任何一个代码库都有一些代码片段对你的心灵造成独一无二影响呢？或者我们是否可以清晰的表述什么使我们快乐，然后提供一条途径来增加我们编写代码的快乐呢？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Properties over principles &lt;/b&gt;属性高于原则&lt;/h2&gt;&lt;p data-pid=&quot;r_9HnTSg&quot;&gt;当我开始对SOLID的5个原则制定回应时，我设想的是用我觉得更有用更具关联性的内容来替换每一条原则。我很快意识到这个原则本身就是有问题的。原则类似于规则：要么遵守，要么不遵守。这就会产生规则追随者和规则执行者的“有界集合”，而不是具有共同价值观的人的“中心集合”。&lt;/p&gt;&lt;p data-pid=&quot;TLgWYsSz&quot;&gt;相反的，我开始思考属性：代码的质量以及特性，而不是要遵循规则。属性定义了努力的目标以及需要接近的原点。你的代码距离这个原点或远或近，而且总是有一个明确的改进方向。你可以使用属性作为镜头或者过滤器来评估你的代码并且你能决定接下来要解决哪些问题。由于CUPID原则都是互相关联的，所以你在任何一个方向做的改进都会对其他方向有积极的影响。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Properties of properties &lt;/b&gt;属性的属性&lt;/h2&gt;&lt;p data-pid=&quot;IR7jwfFY&quot;&gt;那么我们如何选择属性呢？是什么决定属性是否有效的呢？我需要CUPID都具备我定义的3个属性的属性。他们是实用的，人性化以及分层的。&lt;/p&gt;&lt;p data-pid=&quot;NK6N45sH&quot;&gt;要做到实用性，属性需要满足以下条件： 易于表达：你可以用短短的几句话就能表达它，并且提供具体的例子以及反例。 易于评估：你可以把它当成镜头来审视以及讨论代码，同时你能简单的判断代码中包含了多少属性。 易于移植：你可以从小规模开始并且沿着任何CUPID维度增量演化代码。这里没有“孤注一掷”也没有“失败”，就像是从来没有“完成”这个概念。代码的优化一直可以持续进行。&lt;/p&gt;&lt;p data-pid=&quot;OfA1kbKr&quot;&gt;要做到人性化，属性需要从人的角度来阅读，而不是代码。CUPID是关于编写代码的感受，并不是对代码本身的抽象描述。例如，虽然Unix哲学“把一件事做好”可能听起来像是单一职责原则，但是前者是关于你如何使用代码，而后者是关于代码本身的内部构造。&lt;/p&gt;&lt;p data-pid=&quot;pmXznn4G&quot;&gt;要做到分层，对于初学者来说，属性应该提供易于表达的结果，同时为那些更有经验并想要探究软件性质的人提供更深层次的细节。每一条CUPID属性都是显而易见的，只是名称和简短描述，但每一个都体现了许多层，纬度，方法。我们也许能够描述每一个属性的“原点”，但有很多路径能够到达那里！&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Composable &lt;/b&gt;代码可组合/可组合性&lt;/h2&gt;&lt;p data-pid=&quot;M8X__MAU&quot;&gt;易于使用的软件会被多次重复使用。有一些特征会影响代码可组合性，但这些既不是充分条件，也不是必要条件。在每种情况下我们可以找到双方的反例，因此你应该针对这些例子思考有用的对策。需要权衡利弊，否则过犹不及。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;Small surface area &lt;/b&gt;控制颗粒度&lt;/h3&gt;&lt;p data-pid=&quot;eeUhXt8w&quot;&gt;短小的代码，精心设计的API能减少学习成本，减少犯错的机率，减少与其他正在使用的代码冲突或不一致的可能性。如果你的API颗粒度太细，你发现必须将他们组合在一起，并且对于常见用例知道如何“正确组合“变得不那么显而易见时，那么这将会成为使用的障碍。确定API正确的颗粒度比看起来要难。但总有一个关键点能平衡碎片化和臃肿。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;Intention-revealing &lt;/b&gt;所见即所得&lt;/h3&gt;&lt;p data-pid=&quot;tNAJezYL&quot;&gt;所见即所得的代码易于探索和评估。我能轻松的找到相关的组件，并快速确认是不是我需要的东西。有一个我喜欢的库--来自于像古老类似于XStream这样的开源项目--分别有2分钟的教程，10分钟的教程，以及深度探索。当我发现这些并不是我想要的时候，可以马上停止同时并不会浪费太多的时间。&lt;/p&gt;&lt;p data-pid=&quot;J0Umge6Q&quot;&gt;不止一次当我开始编写类，并使用所见即所得的方式为其命名时，IDE的输入联想会弹出已经存在的相同类名。这通常意味着其他人也有和我同样的想法，并且我不经意间看到了他们的代码，因为我们选择了同样的命名。当然这不仅仅是巧合；我们精通同一个领域，这使得我们选择相似名字的机率大大增加。当你拥有基于领域的代码时，这种情况更有可能会发生。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;Minimal dependencies &lt;/b&gt;最小依赖&lt;/h3&gt;&lt;p data-pid=&quot;R5x7B2MN&quot;&gt;当具有最小依赖时，可以降低你对于版本以及不兼容性的担忧。当我使用Java编写我第一个开源项目XJB时引用了log4j日志库，他在项目中几乎无处不在。我的同事指出这种依赖不仅仅在于库本身，而且依赖于特定版本。我甚至没有想过；为什么有人要担心像日志库这样无害的东西？因此，我们移除了依赖，甚至提取了一个完整的其他项目，该项目使用Java动态代理做有趣的事，它本身具有最小依赖的特性。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Unix philosophy &lt;/b&gt;Unix哲学&lt;/h2&gt;&lt;p data-pid=&quot;HVNod2wm&quot;&gt;Unix和我差不多大；我们都诞生于1969年，Unix成为这个星球上最流行的操作系统。在1990年代，每个优秀的计算机硬件厂商都拥有自己的Unix系统，直到关键的开源变体Linux和FreeBSD变得无处不在。如今，它以Linux的形式运行着几乎所有的商业服务器，包括云服务器以及私有部署，嵌入式系统以及网络设备，它支持MacOS和Android操作系统，甚至Windows都提供了Linux可选子系统的功能。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;A simple, consistent model &lt;/b&gt;简单，一致性模型&lt;/h3&gt;&lt;p data-pid=&quot;2Qn_dPjN&quot;&gt;是什么让一个起始于电信实验室，被一个大学学生当作业余爱好的小众操作系统，最终成为了世界上最大的操作系统？毫无疑问，在那个操作系统供应商以相互诉讼技术而闻名的时代，商业以及法律上的成功都受益于此，但期经久不衰的技术吸引力在于其简单而且一贯的设计理念。&lt;/p&gt;&lt;p data-pid=&quot;iSKx3oM5&quot;&gt;Unix设计理念就像上面描述的可组合属性，写出可以良好协同工作的组件，只做一件事并且把他做好。例如，ls命令列出文件以及目录的详情，但他对文件以及目录本身一无所知！有一个叫stat的系统命令会提供相应的详细信息；ls只是一个把信息显示为文本的工具。&lt;/p&gt;&lt;p data-pid=&quot;L2M8XGlJ&quot;&gt;类似的，cat命令打印（连接）一个或者多个文件的内容，grep选中满足模式匹配的文本，sed通过模式匹配替换文本，等等。Unix命令行有一个很强大的概念“管道”，用于连接上一个命令的输出到下一个命令的输入，可以用于选择，转换，过滤以及排序，等等。你可以基于几个被精心设计只做一件事并做到最好的程序来编写复杂的文件以及数据处理程序。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;Single purpose vs. single responsibility &lt;/b&gt;单一目标 vs 单一职责&lt;/h3&gt;&lt;p data-pid=&quot;zU16WBUO&quot;&gt;单一目标第一眼看上去很像单一职责（SRP），并且和SRP的某些解释有点重叠。但是“做好一件事”是由外而内的观点；他具有特定、明确以及全面的目的。SRP是由内到外的观点：主要讨论的是关于代码组织结构。&lt;/p&gt;&lt;p data-pid=&quot;0P4Tq9RI&quot;&gt;用创造这个词的Robert C.Martin的话来说，遵循SRP原则的代码“应该有一个，且只有一个修改的理由”。在维基百科文件中的示例是一个用于生成报告的模块，你需要分别关注报告内容以及报告格式，他们会存在于单独的类中，甚至是单独的模块。正如我在别处所说的，以我的经验来看，这是人为制造的割裂，最常见的情况是数据的内容和格式一起改变；新的字段，比如对于某些数据源的变动会影响内容和你希望展现他的方式。&lt;/p&gt;&lt;p data-pid=&quot;6we1Whzm&quot;&gt;另一个常见的场景是“UI组件” SRP要求你将组件的渲染和业务逻辑分开。作为一个开发，让渲染和业务逻辑存在于不同的模块中会产生需要将相同字段链接在一起的苦差事。更大的风险在于，这种过早优化，会阻止随着代码增长出现的更自然的关注点分离，以及随着“做好一件事”并且更合适问题空间的领域模型的组件的出现。随着任何代码库的增长，是时候将其分割成合理的子组件了，但可组合性以及基于领域的结构的属性将更好的指明在什么时间，如何进行这些结构更改。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Predictable &lt;/b&gt;符合直觉/表里如一/可预测性&lt;/h2&gt;&lt;p data-pid=&quot;els21EYf&quot;&gt;代码的行为应该表里如一，一致以及可靠的，没有令人不快的意外。这种行为不能仅仅只是推测，更要容易确认。从这个意义上来说，可预测性是可测试性的概括。&lt;/p&gt;&lt;p data-pid=&quot;l3fthxBt&quot;&gt;可预测性的代码的行为应该符合预期，并且应该具有确定性和可观察性的。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;Behaves as expected &lt;/b&gt;符合预期&lt;/h3&gt;&lt;p data-pid=&quot;7ny4NSm2&quot;&gt; Kent Beck的文章&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.martinfowler.com/bliki/BeckDesignRules.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;four rules of simple design&lt;/a&gt;的第一条就是代码“通过了所有测试”。即使是没有测试，这也应该是正确的！可预测代码的预期行为应该可以从结构和命名中显而易见。如果这部份代码没有有测试用例，那么编写起来则毫不费力。Michael Feathers把它称为特性测试（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//michaelfeathers.silvrback.com/characterization-testing&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;characterisation tests&lt;/a&gt;）。用他自己的话来说就是：&lt;/p&gt;&lt;blockquote data-pid=&quot;otBHs12k&quot;&gt;“当一个系统投入生产时，从某种程度上，它变成了它自己的规范”&lt;br/&gt;-- Michael Feathers&lt;/blockquote&gt;&lt;p data-pid=&quot;Pl8aL4Mx&quot;&gt;我觉得没必要这样，并且我发现有一些人把TDD从工具上升到了信仰的高度。我曾经开发过一个只有7%“测试覆盖率”的复杂算法交易应用。这些测试用例甚至分布不均！大部分代码根本没有自动测试，有一些则有大量的复杂测试，用于测试细微的错误以及边界情况。我对大部分代码的修改都及为自信，因为每个组件只做好一件事，他们的行为直接并且可预测的，因此代码修改的结果常常是显而易见的。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;Deterministic &lt;/b&gt;确定性&lt;/h3&gt;&lt;p data-pid=&quot;MB4XYQlp&quot;&gt;软件的行为每次都应该是一致的。即使代码被设计成非确定性的--例如随机数生成或者动态计算--也应该有可定义的操作或者功能的边界。你应该可以预测内存，网络，存储或者处理边界，时间边界，以及其他依赖的期望。&lt;/p&gt;&lt;p data-pid=&quot;KuZIlAzs&quot;&gt;确定性是一个广泛的话题。为了追求可预测性，代码的确定性应该具有鲁棒性，可靠性以及可扩展性。&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;CW47WEYh&quot;&gt;鲁棒性是代码处理各种情况的广度或完整性，限制和边界应该显而易见。&lt;/li&gt;&lt;li data-pid=&quot;NHPX46I4&quot;&gt;可靠性是在我们考虑的各种情况下按预期运行，并确保我们每次能得到相同的结果。&lt;/li&gt;&lt;li data-pid=&quot;6zINmS62&quot;&gt;可扩展性是我们处理我们未考虑到的情况的能力，比如输入或者操作环境中的意外扰动。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;b&gt;Observable &lt;/b&gt;可观察性&lt;/h3&gt;&lt;p data-pid=&quot;ug5HBPDd&quot;&gt;代码应该在控制理论意义上是可观察的：我们可以通过代码的输出推断他的内部状态。这只有在我们设计时才有可能。一但多个组件交互，特别是异步交互时，将会出现涌现行为（emergent behaviour）以及非线性结果（non-linear consequences）。&lt;/p&gt;&lt;p data-pid=&quot;xU93_slS&quot;&gt;从一开始就量化代码的各项指标意味着我们可以获取有效的数据来了解其运行时特性。我用四阶段模型来描述--其中有二个扩展阶段--类似于这样：&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;W00iPPni&quot;&gt;&lt;b&gt;Instrumentation&lt;/b&gt; 量化各类监测指标用于表现软件运行情况。&lt;/li&gt;&lt;li data-pid=&quot;CA5XeFo7&quot;&gt;&lt;b&gt;Telemetry&lt;/b&gt; 上传使产生的监测信息有效，无论上传的方式是使用拉（请求）或者是推（发送消息）；“在远端收集数据”&lt;/li&gt;&lt;li data-pid=&quot;Ju57Xwfg&quot;&gt;&lt;b&gt;Monitoring&lt;/b&gt; 监控用于接收这些指标并且可视化。&lt;/li&gt;&lt;li data-pid=&quot;-x3q9HyF&quot;&gt;&lt;b&gt;Alerting&lt;/b&gt; 报警是对于监控的数据或者数据中的模式做出反应。&lt;br/&gt;扩展：&lt;/li&gt;&lt;li data-pid=&quot;yw6BY2vP&quot;&gt;&lt;b&gt;Predicting&lt;/b&gt; 使用这些数据在事情发生前对其进行预测的能力。&lt;/li&gt;&lt;li data-pid=&quot;lhizQWVP&quot;&gt;&lt;b&gt;Adapting&lt;/b&gt; 可以动态的调整系统，比如抢先调整或者从预测的扰动中恢复系统。&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;21pxBue4&quot;&gt;大部分软件甚至连第一阶段都没有通过。有一些工具可以拦截或者改变正在运行的系统以增加一定的程度的洞察力，但这些工具提供的量化指标远不如在程序设计之初就进行设计来的有效。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Idiomatic &lt;/b&gt;通俗易懂/惯用的&lt;/h2&gt;&lt;p data-pid=&quot;DyaUbNur&quot;&gt;每个人都有自己的编码风格。比如代码缩进使用空格或者Tab键，变量命名约定，花括号或者括号的位置，源文件中代码的布局，或者无数其他种可能。在此这上，我们可以对库、工具链、工作目录，甚至版本控制的备注风格或者提交颗粒度进行分层。（你肯定在使用版本控制吧对不对？）&lt;/p&gt;&lt;p data-pid=&quot;vBCzkViK&quot;&gt;当使用不熟悉代码时会显著的增加额外的认知负担（extraneous cognitive load）。类似于理解问题域和解空间，你必须要能解释别人的意思，以及他们的决定是经过深思熟虑的和上下文相关的，或者是武断的和习惯性的。&lt;/p&gt;&lt;p data-pid=&quot;4qyQFksJ&quot;&gt;最伟大的编程特质是同理心：对你的用户，对支持人员，对未来的开发者，任何人都可能成为未来的你。编写“人类可以理解的代码”意味着为其他人编写代码。这就是通俗易懂代码的含义。&lt;/p&gt;&lt;p data-pid=&quot;FoVEpvht&quot;&gt;在这种情况下，您的目标受众是：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;vN9eWVet&quot;&gt;熟悉该语言，库，工具链，以及生态系统&lt;/li&gt;&lt;li data-pid=&quot;dOU715Ck&quot;&gt;有丰富经验的软件开发者&lt;/li&gt;&lt;li data-pid=&quot;PfoLORDx&quot;&gt;努力完成工作的人！&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;b&gt;Language idioms &lt;/b&gt;通俗的语言表达&lt;/h3&gt;&lt;p data-pid=&quot;cioJGh_5&quot;&gt;代码应该符合语言的习惯用法。有一些语言对于代码的展现有强烈的主观意识，这使得评估代码的惯用程度变得容易。其他的语言则没有这样，这让你的责任“选择一种风格”并坚持下去。Go和Python就是固执己见的语言的两个例子。&lt;/p&gt;&lt;p data-pid=&quot;0UxTxrct&quot;&gt;Python程序员使用术语“pythonic”来描述习惯用法 。如果你在Python REPL输入&lt;/p&gt;&lt;p data-pid=&quot;0Z99sFLJ&quot;&gt;或者在Shell环境运行&lt;/p&gt;&lt;p data-pid=&quot;vU1-Hfbq&quot;&gt;就会出现一个美妙的复活节彩蛋。打印出名为“Python编程之禅”的编程格言列表，其中有一行，捕捉到了通俗易懂代码的精髓：“应该有一种—最好只有一种—显而易见的方法来做到这一点。”（There should be one—and preferably only one—obvious way to do it.）&lt;/p&gt;&lt;p data-pid=&quot;PehHLxGM&quot;&gt;Go语言使用gofmt来格式化代码并让代码遵循同一种编码风格。这一下子消除了关于缩进、大括号放置或其他语法怪癖在这方面的分歧。这意味着你在库文档或者教程中看到的任意示例代码看起来都是一致的。甚至有一个名为&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//go.dev/doc/effective_go&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Effective Go&lt;/a&gt;的文档，展示了语言定义之外的惯用Go。&lt;/p&gt;&lt;p data-pid=&quot;VqRCHfsD&quot;&gt;形成鲜明对比的语言比如 Scala，Ruby，Javascript，以及可敬的Perl。这些语言被设计成多范式；Perl 创造了首字母缩略词 TIMTOWTDI——“有不止一种方法可以做到”——发音为“Tim Toady”。你可以在其中大多数语言中同时编写函数式、过程式或者面向对象的代码，这比你知道的任何一种语言的学习曲线都要平缓。&lt;/p&gt;&lt;p data-pid=&quot;QTdss0LP&quot;&gt;对于像处理一系列值这样简单的事情，这些语言大多数都允许你：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;ZevY-OeM&quot;&gt;使用迭代器&lt;/li&gt;&lt;li data-pid=&quot;ePN8NUv7&quot;&gt;使用下标循环&lt;/li&gt;&lt;li data-pid=&quot;3iYDEVn6&quot;&gt;使用条件循环&lt;/li&gt;&lt;li data-pid=&quot;GsJjSWWK&quot;&gt;使用带有收集器的函数管道&lt;/li&gt;&lt;li data-pid=&quot;4LmA4cxk&quot;&gt;写一个尾递归函数&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;N3sJsZja&quot;&gt;这意味着在任何的非正常大小的代码块中（non-trivial size of code），你可能会发现其中每一个的示例，通常是相互结合的。同样，这一切都会增加认知负担，影响你思考手头问题的能力，增加不确定性并且减少快乐。&lt;/p&gt;&lt;p data-pid=&quot;P4O8fvfA&quot;&gt;通俗易懂的代码可以出现在任何的粒度级别：函数命名，类型，参数，模块；代码布局；模块结构；工具的选择；依赖的选择；你如何管理依赖；等等。&lt;/p&gt;&lt;p data-pid=&quot;_2b1dNPR&quot;&gt;无论你的技术栈处于固执己见的哪一个层级，如果你花时间去学习该语言的习语，它的生态系统，他的社区，以及它的最佳编码实践，那么你编写的代码能更善解人意和使人快乐。&lt;/p&gt;&lt;p data-pid=&quot;sw8z8FeO&quot;&gt;你在任意一个语言中编写代码的时间都要长于你投入学习的时间，所以抵制编写对于“当下的你”来说很好理解的代码就显得很重要，因为你不会止步不前！唯一能让你写出自信的通俗易懂的代码的方法就是花时间去学习它。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;Local idioms &lt;/b&gt;本地方言&lt;/h3&gt;&lt;p data-pid=&quot;gx8_8YRT&quot;&gt;如果一门语言在惯用风格没有达成共识时或者有多种选择，这时你和你的团队就需要决定什么是“好”的，并引入约束和指导方针来鼓励一致性。这些约束可以像IDE中分享代码格式化规则一样简单，“建立监督”工具用于检查和评审代码，并就标准工具链达成共识。&lt;/p&gt;&lt;p data-pid=&quot;cne8Yn5s&quot;&gt;架构决策记录（Architecture Decision Records - ADRs），是用于记录你对风格以及习语选择的好方法。与任何其他架构讨论相比，这些都是“重要的技术决策”。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Domain-based &lt;/b&gt;基于领域的&lt;/h2&gt;&lt;p data-pid=&quot;370QSZ16&quot;&gt;我们编写软件来满足需求。这可能是具体的和情境化的，也可能是笼统的和影响深远的。无论目的是什么，代码都应该使用问题域的语言表达它在做什么，并且缩小你写的代码和实际需要实现之前的认知差距。这不仅仅是“使用正常的词”那么简单。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;Domain-based language &lt;/b&gt;基于领域的语言&lt;/h3&gt;&lt;p data-pid=&quot;YTy39S-z&quot;&gt;计算机编程语言和它们的库充满了计算机科学结构，例如Hash Maps, 链表, 树集(Tree Sets)，数据库连接，等等。他们还有基本的类型比如整形，字符，布尔值。你很有可能声明某人的姓(surname)为string[30]来存储它，但是如果定义一个Surname的类型则更显而易见。甚至surname这个类型可以具有相关的操作，属性或者约束。银行软件中许多细微的错误都是源于使用浮点数来表示货币金额；经验丰富的金融软件开发人员则会定义具有Currency以及Amount属性的Money类型，因为Money他本身就是一个复合类型。&lt;/p&gt;&lt;p data-pid=&quot;alo0O9Yd&quot;&gt;命名类型和操作不仅仅是为了捕获和预防错误，同时还能使代码中的解决方案空间更容易表示和导航。这是我对“每个程序员都应该知道的97件事”（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.oreilly.com/library/view/97-things-every/9780596809515/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;97 Things Every Programmer Should Know&lt;/a&gt;）所做的贡献，即“领域语言中的代码”。&lt;/p&gt;&lt;p data-pid=&quot;CjWCXe8i&quot;&gt;领域驱动代码的一个成功标准是，一个不经意的观察者无法判断人们在讨论代码还是在讨论领域。我有幸在一个电子交易系统中经历过一次，那时一个金融分析师正在和二个程序员讨论复杂的交易定价逻辑。我以为他们在讨论定价规则，然而他们指着一屏的代码，金融分析师通过一行一行的读取代码和程序员讨论定价算法！问题域和实现代码之间仅有的认知差距只是一些句法标点！&lt;/p&gt;&lt;h3&gt;&lt;b&gt;Domain-based structure &lt;/b&gt;基于领域的结构&lt;/h3&gt;&lt;p data-pid=&quot;VuO7d5Fs&quot;&gt;使用基于领域的语言很重要，但如何构建代码同样很重要。很多框架都提供了“脚手架项目”，其目录布局以及存根文件旨在帮助你快速入门。这会在你的代码上加强一个与你正在解决的问题无关的先验结构。&lt;/p&gt;&lt;p data-pid=&quot;YK5hbUa6&quot;&gt;相反，代码的布局-目录的名称，子目录和同级目录的关系，相关文件的分组和命名-都应该尽可能的映射问题域。&lt;/p&gt;&lt;p data-pid=&quot;DlFYXQtZ&quot;&gt;应用框架Ruby On Rails在2000年代初期通过将基于领域的结构构建到其工具中而普及了这种方法，Rails的广泛采用意味着许多后来的框架都复制了这个想法。CUPID与语言框架无关，但是Rails创建了一个有用的案例用来研究并理解基于领域的结构和基于框架结构的区别。&lt;/p&gt;&lt;p data-pid=&quot;Cb1IgKNV&quot;&gt;下面目录结构是Rails应用生成的脚手架的一部分，重点关注开发人员将花费最多时间的（app）目录。在撰写本文时，完整的脚手架已经接近大约50个目录包括60个文件。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;app
├── assets
│   ├── config
│   ├── images
│   └── stylesheets
├── channels
│   └── application_cable
├── controllers
│   └── concerns
├── helpers
├── javascript
│   └── controllers
├── jobs
├── mailers
├── models
│   └── concerns
└── views
    └── layouts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;4lY00O-K&quot;&gt;想像这可能是一个医院管理应用程序，带有病例的部分。这个布局表明我们至少需要：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;1zPT7Nw3&quot;&gt;一个模型，用于映射到某处的数据库&lt;/li&gt;&lt;li data-pid=&quot;S97bW8Lp&quot;&gt;一个视图，用于渲染病历至屏幕&lt;/li&gt;&lt;li data-pid=&quot;mlMrMKcP&quot;&gt;一个控制器，用于协调视图和模型&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;dmL0-a9m&quot;&gt;然后是帮助器（helpers），资产（assets）以及一些其他的框架概念，例如模型关注点或者控制关注点，邮件程序，作业（jobs），通道（channel），也许还有一个Javascript控制器与你的Ruby控制器一起使用。这些软件工件的每一个都存在于独立的目录中，即使它们在语义上是紧密集成的。&lt;/p&gt;&lt;p data-pid=&quot;NLorDkVS&quot;&gt;任何对于病历管理系统的重大改动都可能会涉及分散在代码库中的代码。SOLID原则中的单一职责原则视图代码应该与控制器代码分离，像Rails这样的框架解读这种原则并将其实现为视图和控制器放入完全不同的目录。这将会增加认知负担，降低内聚性，并增加了产品修改的难度。正如我之前讨论的，这种意识形态的约束会让工作更加困难，编码库的乐趣也会降低。&lt;/p&gt;&lt;p data-pid=&quot;qP2xi_ZG&quot;&gt;我们仍然需要模型、视图和控制器这样的工件，无论我们以何种方式布置代码，但按类型对它们进行分组不应形成主要形式。相反的，代码库的顶层设计应该显示医院管理系统的主要用例；也许是患者历史，预约，职员和医嘱。&lt;/p&gt;&lt;p data-pid=&quot;kCQH6ZSY&quot;&gt;对代码结构采用基于领域的方法可以很容易的理解代码的用途，并且可以轻松导航到任何你需要的代码且不会比“让按钮变成蓝色”这种事更复杂。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;Domain-based boundaries &lt;/b&gt;基于领域的边界&lt;/h3&gt;&lt;p data-pid=&quot;nbW34XA4&quot;&gt;当我们按照我们想要的方式来构建代码，并且以我们的规则来命名时，模块边界就变成了域边界，部署就变得简单了。将组件部署为单个工件所需要的一切都联系在一起，因此我们可以将域边界和部署边界对齐，并部署具有内聚性的业务组件和服务。无论你将产品或者服务打包为单体应用，许多小的微服务，或者介于两者之间的任意形式，这种一致性将减少你决策和规划的复杂度，并尽可能少的让你遗忘某些事，或者从不同的环境或者子系统中引入工件。&lt;/p&gt;&lt;p data-pid=&quot;lubBjKB3&quot;&gt;这并不限制我们使用单一、扁平的、顶层的代码结构（top level of code structure）。域可以包含子域；组件可以包含子组件；部署可以在对你的修改和风险状况有意义的任何颗粒度级别上进行。将代码边界和域边界对齐使所有的这些选项变得易于推理和管理。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Concluding thoughts &lt;/b&gt;结尾思考&lt;/h2&gt;&lt;p data-pid=&quot;rgynV2Bv&quot;&gt;我相信拥有更多这些属性的代码：可组合性，符合Unix哲学，可预测性，或者是通俗易懂以及基于领域，比不具体这些的代码在工作中更让人快乐。虽然我独立的评估每个特性，但是我发现它们是相辅相成的。&lt;/p&gt;&lt;p data-pid=&quot;tRObCWng&quot;&gt;既可组合又全面的代码-把一件事做好-就像一个可靠的朋友。通俗易懂的代码就算你第一次看到你也倍感亲切。可预测的代码将你的注意力转移到其他特殊情况。基于领域的代码将从需求到解决方案之间的认知差距缩短到最小。将代码向这些属性中的任何一个的原点靠拢都会比你发现的更好。&lt;/p&gt;&lt;p data-pid=&quot;X8CKRsqu&quot;&gt;因为CUPID只是一个助记词，所以每个字母我还有几个候选者。我之所以选择这5个只是因为他们更“基础”；我们可以从中得出其他的候选属性。之后的文章会对一些没有入选的属性进行探讨，让我们看看他们在不受CUPID原则影响时编写软件会得出怎么样的结果。&lt;/p&gt;&lt;p data-pid=&quot;pab0DARq&quot;&gt;我很想听听人们对于CUPID的最佳实践。我已经了解到有一些团队开始使用这些属性来评估他们的代码，并且制定清理历史代码的策略，我迫不急待地想要听到经验分享以及学习案例。与此同时我将会更加深入CUPID，依次探索每一个属性，看看还有哪些被人们所忽略的点。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;翻译参考&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;JQnBTohB&quot;&gt;[Idiomatic Code]    &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/swlh/idiomatic-code-a73f17f0f28&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;medium.com/swlh/idiomat&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ic-code-a73f17f0f28&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/u&gt; &lt;/p&gt;&lt;p data-pid=&quot;KTh90Daf&quot;&gt;[artifact (software development)​]    &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.techtarget.com/searchsoftwarequality/definition/artifact-software-development&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;techtarget.com/searchso&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ftwarequality/definition/artifact-software-development&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/u&gt; &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8836415ad41998f285750532aa5bde67</guid>
<title>3种方式！Go Error处理最佳实践</title>
<link>https://toutiao.io/k/crmxg9t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe977Xa5zfy5iaV3agpS11Cqm4psjPOibic6BZSicnBFh6uWzCFp3uqN5R114Fq85DmuCzdL3eESlQ37bFA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;导语 |&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;错误处理一直以一是编程必需要面对的问题，错误处理如果做的好的话，代码的稳定性会&lt;/span&gt;&lt;span&gt;很好。不同的语言有不同的出现处理的方式。Go语言也一样，在本篇文章中，我们来讨论一下Go语言的错误处理方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;一、错误与异常&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;1&quot; data-sign=&quot;fd3ba7320809aed0b3a7a7547a8647b9&quot;&gt;&lt;span&gt;（一）&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;错误是程序中可能出现的问题，比如连接数据库失败，连接网络失败等，在程序设计中，错误处理是业务的一部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;98262240ca8645af56770f83c7a472e8&quot;&gt;&lt;span&gt;Go内建一个error接口类型作为go的错误标准处理&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;98262240ca8645af56770f83c7a472e8&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;c7ee59e8343f82a268919b95c2deeb76&quot;&gt;&lt;span&gt;http://golang.org/pkg/builtin/#error&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; error &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__built_in&quot;&gt;Error&lt;/span&gt;() &lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://golang.org/src/pkg/errors/errors.go&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(text &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &amp;amp;errorString{text}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; errorString &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   s &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(e *errorString)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; e.s&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;ceb7f04d807d6a9f7a3a3d2d43bc97e3&quot;&gt;&lt;span&gt;（二）Exception&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常是指在不该出现问题的地方出现问题，是预料之外的，比如空指针引用，下标越界，向空map添加键值等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;5a7ea83019261901e4386de061fb5be9&quot;&gt;&lt;span&gt;（三）panic&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于真正意外的情况，那些表示不可恢复的程序错误，不可恢复才使用panic。对于其他的错误情况，我们应该是期望使用error来进行判定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;7bd74ab8deb29502b0550ccdb3aaf72f&quot;&gt;&lt;span&gt;go源代码很多地方写panic, 但是工程实践业务代码不要主动写panic，理论上panic只存在于server启动阶段，比如config文件解析失败，端口监听失败等等，所有业务逻辑禁止主动panic，所有异步的goroutine都要用recover去兜底处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;0b26c1a29a28fd8fb594a49e036e9291&quot;&gt;&lt;span&gt;（四）总结&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;理解了错误和异常的真正含义，我们就能理解Go的错误和异常处理的设计意图。传统的try...catch...结构，很容易让开发人员把错误和异常混为一谈，甚至把业务错误处理的一部分当做异常来处理，于是你会在程序中看到一大堆的catch...&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go开发团队认为错误应该明确地当成业务的一部分，任何可以预见的问题都需要做错误处理，于是在Go代码中，任何调用者在接收函数返回值的同时也需要对错误进行处理，以防遗漏任何运行时可能的错误。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常则是意料之外的，甚至你认为在编码中不可能发生的，Go遇到异常会自动触发panic（恐慌），触发panic程序会自动退出。除了程序自动触发异常，一些你认为不可允许的情况你也可以手动触发异常。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，在Go中除了触发异常，还可以终止异常并可选的对异常进行错误处理，也就是说，错误和异常是可以相互转换的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;二、Go处理错误的三种方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;705498691352a2b5c3deb99f6e904bbe&quot;&gt;&lt;span&gt;（一）经典Go逻辑&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;直观的返回error：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; ZooTour &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Enter() error &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    VisitPanda(panda *Panda) error &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Leave() error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Tour&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t ZooTour1, panda *Panda)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := t.Enter(); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errors.WithMessage(err, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Enter failed.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := t.VisitPanda(); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errors.WithMessage(err, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;VisitPanda failed.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;706a2e97dde1675b05bf0d9c4df1fdc4&quot;&gt;&lt;span&gt;（二）屏蔽过程中的error的处理&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;将error保存到对象内部，处理逻辑交给每个方法，本质上仍是顺序执行。标准库的bufio、database/sql包中的Rows等都是这样实现的，有兴趣可以去看下源码：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; ZooTour &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Enter() error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    VisitPanda(panda *Panda) error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Leave() error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Err() error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Tour&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t ZooTour, panda *Panda)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    t.Enter()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    t.VisitPanda(panda)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    t.Leave()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := t.Err(); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errors.WithMessage(err, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ZooTour failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;d5fa3167157813114ec1f4748cff34b9&quot;&gt;&lt;span&gt;（三）利用函数式编程延迟运行&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分离关注点-遍历访问用数据结构定义运行顺序，根据场景选择，如顺序、逆序、二叉树树遍历等。运行逻辑将代码的控制流逻辑抽离，灵活调整。kubernetes中的visitor对此就有很多种扩展方式，分离了数据和行为，有兴趣可以去扩展阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Walker &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Next MyFunc&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; SliceWalker &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    index &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    funs []MyFunc&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;NewEnterFunc&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MyFunc&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t ZooTour)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; t.Enter()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BreakOnError&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t ZooTour, walker Walker)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f := walker.Next() &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; f == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := f(t); err := &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;282f642150861c8edaf6123fab79d0b0&quot;&gt;&lt;span&gt;（四）三种方式对比&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面这三个例子，是Go项目处理错误使用频率最高的三种方式，也可以应用在error以外的处理逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;三、分层下的Error Handling&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;1&quot; data-sign=&quot;93e15a3022719528ae6836a8b688bfd0&quot;&gt;&lt;span&gt;（一）一个常见的三层调用&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在工程实践中，以一个常见的三层架构（dao-&amp;gt;service-&amp;gt;controller）为例，我们常见的错误处理方式大致如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := mode.ParamCheck(param); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    log.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;param=%+v&quot;&lt;/span&gt;, param)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errs.ErrInvalidParam&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; mode.ListTestName(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;_, err := dao.GetTestName(ctx, settleId)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    log.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GetTestName failed. err: %v&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errs.ErrDatabase&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    log.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GetTestDao failed. uery: %s error(%v)&quot;&lt;/span&gt;, sql, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;ee1c48914814b4c14626dffa3fb8b872&quot;&gt;&lt;span&gt;（二）问题总结&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; data-lines=&quot;3&quot; data-sign=&quot;09d9d0d3bca83bc0cdf56b26770851a3list3&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分层开发导致的处处打印日志；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;难以获取详细的堆栈关联；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根因丢失。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;3601ac2df8b55e284ba998b08e9fc0af&quot;&gt;&lt;span&gt;（三）Wrap erros&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go相关的错误处理方法很多，但大多为过渡方案，这里就不一一分析了（类似&lt;/span&gt;&lt;span&gt;github.com/juju/errors&lt;/span&gt;&lt;span&gt;库，有兴趣可以了解）。这里我以&lt;/span&gt;&lt;span&gt;github.com/pkg/errors&lt;/span&gt;&lt;span&gt;为例，这个也是官方Proposal的重点参考对象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot; data-lines=&quot;3&quot; data-sign=&quot;5865182d06afb8fd19ef3d06ba1ea4cclist3&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;错误要被日志记录；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应用程序处理错误，保证100%完整性；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;之后不再报告当前错误（错误只被处理一次）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;github.com/pkg/errors包主要包含以下几个方法，如果我们要新生成一个错误，可以使用New函数,生成的错误，自带调用堆栈信息。如果有一个现成的error ，我们需要对他进行再次包装处理，这时候有三个函数可以选择（WithMessage/WithStack/Wrapf）。其次，如果需要对源错误类型进行自定义判断可以使用Cause,可以获得最根本的错误原因。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(message string)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WithMessage&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(err error, message string)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WithStack&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(err error)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Wrapf&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(err error, format string, args ...interface{})&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Cause&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(err error)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以常见的一个三层架构为例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9291553133514986&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe94RLDb9L9KvbfjHd5tXxnc8GxCLibDxtgibo0uFfjqojDwkjRN0ksubE90ns5E7EZjlUtYk1NF8lkTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;734&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; errors.Is(err, sql.ErrNoRows) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, errors.Wrapf(ierror.ErrNotFound, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;query:%s&quot;&lt;/span&gt;, query)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, errors.Wrapf(ierror.ErrDatabase,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;query: %s error(%v)&quot;&lt;/span&gt;, query, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    bills, err := a.Dao.GetName(ctx, param)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result, errors.WithMessage(err, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GetName failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(Format)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(next ihttp.MiddleFunc)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ihttp&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;MiddleFunc&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, req *http.Request, rsp *ihttp.Response)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        format := &amp;amp;format{Time: time.Now().Unix()}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        err := next(ctx, req, rsp)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        format.Data = rsp.Data&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            format.Code, format.Msg = errCodes(ctx, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        rsp.Data = format&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;errCodes&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, err error)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        log.CtxErrorf(ctx, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;error: [%+v]&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; myError = &lt;span class=&quot;code-snippet__built_in&quot;&gt;new&lt;/span&gt;(erro.IError)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; errors.As(err, &amp;amp;myError) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; myError.Code, myError.Msg&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; code.ServerError, i18n.CodeMessage(code.ServerError)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果和其他库进行协作，考虑使用errors.Wrap或者errors.Wrapf保存堆栈信息。同样适用于和标准库协作的时候。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;_, err := os.Open(path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Open failed. [%s]&quot;&lt;/span&gt;, path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;a31093bfca1a95d298b929332ee984bf&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;a31093bfca1a95d298b929332ee984bf&quot;&gt;&lt;span&gt;最终效果样例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.1484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe94RLDb9L9KvbfjHd5tXxnc8bayiarVkHvic59J0mCpxjiaoOd1xHDibTfvdcqPb3GDHicgYhSz03khGm7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;30a4c70e7b307aafcf1c0f48b79a8f82&quot;&gt;&lt;span&gt;关键点总结：&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;四、errgroup集中错误处理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;官方的ErrGroup非常简单，其实就是解决小型多任务并发任务。基本用法golang.org/x/sync/errgroup包下定义了一个Group struct，它就是我们要介绍的ErrGroup并发原语，底层也是基于WaitGroup实现的。在使用ErrGroup时，我们要用到三个方法，分别是WithContext、Go和Wait。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;1&quot; data-sign=&quot;e753f13250226a5e021139d44f999239&quot;&gt;&lt;span&gt;（一）背景&lt;/span&gt;&lt;/h2&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;233a1509300eaac92808d6effcd928b3&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;233a1509300eaac92808d6effcd928b3&quot;&gt;&lt;span&gt;通常，在写业务代码性能优化时经常将一个通用的父任务拆成几个小任务并发执行。此时需要将一个大的任务拆成几个小任务并发执行，来提高QPS，我们需要再业务代码里嵌入以下逻辑，但这种方式存在问题：&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;233a1509300eaac92808d6effcd928b3&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;98ad53f5e0495f49e5795d9733f57189&quot;&gt;&lt;span&gt;（二）errgroup函数签名&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type &lt;span class=&quot;code-snippet__type&quot;&gt;Group&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WithContext&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; (*&lt;span class=&quot;code-snippet__type&quot;&gt;Group&lt;/span&gt;, context.&lt;span class=&quot;code-snippet__type&quot;&gt;Context&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(g *Group)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Go&lt;/span&gt;(f &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; error)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(g *Group)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Wait&lt;/span&gt;() error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;a6502b9ddec7b8608b7bd88b68322b35&quot;&gt;&lt;span&gt;整个包就一个Group结构体：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;d976f203b6f22aea4ce4beb6d93ee2e9&quot;&gt;&lt;span&gt;（三）使用案例&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意这里有一个坑，在后面的代码中不要把ctx当做父 context又传给下游，因为errgroup取消了，这个context就没用了，会导致下游复用的时候出错&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TestErrgroup&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   eg, ctx := errgroup.WithContext(context.Background())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;; i++ {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      i := i&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      eg.Go(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         time.Sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Canceled:&quot;&lt;/span&gt;, i)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;End:&quot;&lt;/span&gt;, i)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         }})}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := eg.Wait(); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      log.Fatal(err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;1&quot; data-sign=&quot;058e19ba2ee08865333ac4739e83dc66&quot;&gt;&lt;span&gt;（四）errgroup拓展包&lt;/span&gt;&lt;/h2&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;d9c2c93711f14087bd7abd2614d7631e&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;d9c2c93711f14087bd7abd2614d7631e&quot;&gt;&lt;span&gt;B站拓展包&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;d9c2c93711f14087bd7abd2614d7631e&quot;&gt;&lt;span&gt;（https://github.com/go-kratos/kratos/blob/v0.3.3/pkg/sync/errgroup/errgroup.go）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相比官方的结构，B站的结构多出了一个函数签名管道和一个函数签名切片,并把Context直接放入了返回的Group结构，返回仅返回一个Group结构指针。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type &lt;span class=&quot;code-snippet__type&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   err     error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   wg      sync.&lt;span class=&quot;code-snippet__type&quot;&gt;WaitGroup&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   errOnce sync.&lt;span class=&quot;code-snippet__type&quot;&gt;Once&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   workerOnce sync.&lt;span class=&quot;code-snippet__type&quot;&gt;Once&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ch         chan &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   chs        []&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ctx    context.&lt;span class=&quot;code-snippet__type&quot;&gt;Context&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   cancel &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WithContext&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; *&lt;span class=&quot;code-snippet__type&quot;&gt;Group&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &amp;amp;&lt;span class=&quot;code-snippet__type&quot;&gt;Group&lt;/span&gt;{ctx: ctx}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go方法可以看出并不是直接起协程的（如果管道已经初始化好了），而是优先将函数签名放入管道，管道如果满了就放入切片。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(g *Group)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Go&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(f &lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;(ctx context.Context)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   g.wg.Add(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; g.ch != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; g.ch &amp;lt;- f:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         g.chs = &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt;(g.chs, f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; g.do(f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GOMAXPROCS函数其实是起了一个并发池来控制协程数量，传入最大协程数量进行并发消费管道里的函数签名：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(g *Group)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;GOMAXPROCS&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(n &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; n &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;errgroup: GOMAXPROCS must great than 0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   g.workerOnce.Do(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      g.ch = &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(context.Context)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;n&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;i&lt;/span&gt; := 0; &lt;span class=&quot;code-snippet__title&quot;&gt;i&lt;/span&gt; &amp;lt; &lt;span class=&quot;code-snippet__title&quot;&gt;n&lt;/span&gt;; &lt;span class=&quot;code-snippet__title&quot;&gt;i&lt;/span&gt;++&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; f := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; g.ch {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               g.do(f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         }()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;bd1f80fb1a0098cf3f106daa6a72df6d&quot;&gt;&lt;span&gt;整个流程梳理下来其实就是启动一个固定数量的并发池消费任务，Go函数其实是向管道中发送任务的生产者，这个设计中有意思的是他的协程生命周期的控制，他的控制方式是每发送一个任务都进行WaitGroup加一，在最后结束时的wait函数中进行等待，等待所有的请求都处理完才会关闭管道，返出错误。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;15151080bcf5a420718cf991e8721952&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;15151080bcf5a420718cf991e8721952&quot;&gt;&lt;span&gt;tips&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt; 作者简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;105&quot; data-backw=&quot;105&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94RLDb9L9KvbfjHd5tXxnc8uK1w7ic9UImich90T4hO0gsYHUKnnUcicO1soLiadaBfumQxQACwu6mqbw/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;955&quot; data-cropy1=&quot;18.19047619047619&quot; data-cropy2=&quot;1000.4761904761905&quot; data-fileid=&quot;100044396&quot; data-ratio=&quot;1.0282722513089004&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94RLDb9L9KvbfjHd5tXxnc8icjKKD2IQfh97X9SjImK58LIH0MFVOle5LbeNib6sic03uAmVPgV61d7A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;955&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;李森林&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;腾讯后台工程师&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;腾讯后台工程师，目前负责腾讯游戏内容平台的设计、开发和维护工作。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt; 推荐阅读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247536592&amp;amp;idx=1&amp;amp;sn=d0f64191958c0e044180361fa0311a4e&amp;amp;chksm=eaa85580dddfdc96196e8b1fd0c6e10e456a479c3bcec43475dfa890ef7fd13519f5b0014695&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;生于云，长于云，开发者如何更好地吃透云原生？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;生于云，长于云，开发者如何更好地吃透云原生？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247536389&amp;amp;idx=1&amp;amp;sn=64e654aa19f84d22d3782cc2c5586eee&amp;amp;chksm=eaa85555dddfdc434925071270ea89a3d147d140d8347760af16ea17090246a302e200e211e1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;从0到1详解ZooKeeper的应用场景及架构原理！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;从0到1详解ZooKeeper的应用场景及架构原理！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247536139&amp;amp;idx=1&amp;amp;sn=f9aaeaf85420feae4168b7d05106c2f8&amp;amp;chksm=eaa8545bdddfdd4daa6accbeb92deaf119cb7bd395b7942b0995f3ed737209895d85b6c14f91&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;分布式事务解决方案：从了解到放弃！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;分布式事务解决方案：从了解到放弃！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247536128&amp;amp;idx=1&amp;amp;sn=419b57b371a768cf3451d942941684aa&amp;amp;chksm=eaa85450dddfdd461b89b6f8b7ebcfd1748babd45bda46d9d23cdee41d064a0010dc3e72dd81&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Go语言从0到1实现最简单的数据库！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;Go语言从0到1实现最简单的数据库！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI2NDU4OTExOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96FK2eEg86vUicOR3n6kAHk1PHvTb8VBicYk0RmNQYsQyibgg8iaZqT0bCEU9VKo3Z3iceoQfgycyMpKWQ/0?wx_fmt=png&quot; data-nickname=&quot;云加社区&quot; data-alias=&quot;QcloudCommunity&quot; data-signature=&quot;腾讯云官方社区公众号，汇聚技术开发者群体，分享技术干货，打造技术影响力交流社区。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.59375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/VY8SELNGe977Xa5zfy5iaV3agpS11Cqm4xV7ckfbmtFLyUjFID2k7yO4q8hvB4OqYoNkARZ2xuvzKvMtnmVN2BQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>