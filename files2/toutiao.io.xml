<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>0094af46455dfb4ff810f46dcd67377f</guid>
<title>2021 年 5 月大厂面试总结</title>
<link>https://toutiao.io/k/jzi9mfx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;本文 9793 字，读完需要 30 分钟左右，适合在早高峰拥挤的地铁中阅读，你可能正在面试的路上，或者准备出去面试，无论怎样，本文都会给你带来不小的收获。我们也邀请了高飞来小道消息进行了分享，当天收听最高在线 1000 人+。欢迎大家&lt;strong&gt;扫码&lt;/strong&gt;收听回放。&lt;/p&gt;&lt;figure&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;506&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;596&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/EKs3bvt0w0JnIWSrhcUiavicHIjMpRDgaMq4IaXmoBfzYsAjnPy3rXlVfOTIl89MG20RVESibqSicCk5yp59QNrMGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/figure&gt;&lt;span&gt;❞&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;沉寂了好一段日子，连我们公司自己人都问我为什么最近都不写文章了。那么当看到本篇的标题的时候，大家应该可以猜到这是为什么了。我最终还是决定要离开服务了 5 年多的公司。而这次跳槽历经 3 个月，前后聊了 10 家公司，进行了将近 40 场面试, 基本都是 4+1 的流程(技术面+HR 面)， 所以日程被排的很满。有一段时间每天都有 2 个面试邀约， 加上还有本职工作所以便没有精力再更新文章了。这次面试也算是个大活了， 经历了各式各样的面试场景。所以我想把这次跳槽的经验记录下来， 复盘一下自己的不足之处，同时也给大家提供一些素材，让大家以后出去面试能有个参照。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;素材介绍&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;面试 List&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我先介绍一下这一次面试的公司， 这一次我一心奔着大平台去的， 所以基本没有面试创业公司。以上市公司或者准上市公司为主。List 如下：BAT，快手，字节，贝壳，京东，美团，作业帮，神策数据。其中也调级加面过，也有由于职位不匹配换部门重新面过。所以虽然我没仔细计算过面试的场次，但是粗略估算差不多有 40 场这样一个数字吧。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;岗位介绍&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;职位上都是资深技术专家岗， 岗位需求上带的人较少，毕竟还是走技术路线，主要内容是在质量团队中做技术攻坚以及建设基础设施。业务方向上为容器，大数据，AI 这 3 个方向。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;面试结果&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5 家聊到最后，5 家由于岗位或方向不匹配主动放弃，1 家面试未通过（4 面交叉面的时候未通过）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上是这次面试的素材信息， 先介绍清楚， 避免跟我情况相差太多的同学有误解。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;算法方面&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;遇到算法考核的概率&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试考不考算法的问题我想大部分人都是很关心的， 毕竟平时工作用不上但面试就是喜欢考。我在面试之前其实也在群里询问是否要留足时间刷题，比较担心这么着急出去面试会不会因为准备不足而翻车。那么现在市面上对于算法的考核是什么样的呢？我直接说结果吧，不管大家是否认可在面试中把算法作为主要的考核手段。但是只要你有跳槽的心思， 就去刷题吧， 从我这次的面试经验来看，算法仍然是很主流的考核候选人的方式之一。但确实不是每一次都会考， 这个看公司风格，团队风格，面试官风格也看岗位的特点， 不是可以一概而论的。比如我在面试某家出了名的算法重灾区的时候，全程都没有考核算法。并且考核算法的这些公司里几乎也只有 1 面的时候才会考算法。所以综合我面试的所有数据来看， 遇到考算法和不考算法的团队是一半一半的概率。但是由于我这次面试的岗位的特点， 有时候一面面试官就是团队负责人的级别， 而到了这个级别的人一般是不喜欢问算法这种这么细节的东西的。所以我个人的结论是对于大部分测试开发人员来说，在面试的时候遇到算法考核的概率还是比较大的。PS：我也询问了几个同时期也在面试的朋友， 他们遇到考核算法的概率也不低。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;算法考核的范围和难度&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我这次遇到的题目几乎都是可以在 leetcode 上找到原题的，即便没有原题也是一个原题之上的变种， 所以大家刷题上还是以 leetcode 为主。难度上只遇见过 2 次中等难度， 其余的都是 easy 程度的题目，最多遇到的是链表和双指针相关的题目。可以看出来市场对于测试开发人员在算法上的考核要比研发序列轻松。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;算法考核占面试评价的比重&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我个人的感受是不会把算法作为硬性的标准一刀切的否定候选人。比如面试中有 2 次我是没有写出 bug free 的答案的，但是最后仍然通过了面试并且对方对我的评价依然不低。所以总结下来如果我们其他的方面足够优秀的话， 算法的影响并不是很大。但是如果面试官认为我们在其他方面并不优秀或者普普通通， 面试官就会很喜欢用算法来作为考核的最终手段了， 这时候没有答出来的话就是致命的了， 这一点我在接到某司 4 面挂通知的时候，就有所体会了。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;刷题是一定要刷的，不过 leetcode 上几千道题要刷完不太现实，成本太高。个人建议 easy 级别 top 系列可以刷一下。有精力的中等级别的刷一个高频系列，比如全排列，子集，子序列这些就可以了。再多的就不建议大部分人去刷了， 毕竟成本太高了。我们都是有工作和生活的，不可能整天都泡在算法上。否则会影响你正常的工作和学习的进度&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;做好心态建设，算法这个东西就跟高考似的， 刷过的题型是可以试试但是没刷过的可能连个思路都没有，leetcode 上那么多题型，你刷的再多也可能碰上没思路的题。这时候该认栽就认栽， 面试挂了也别气馁， 换一家继续面就可以了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;预留好足够的时间， 刷题是个长期的活，尤其我们都是有工作和生活的，做好长期战斗的准备。不要在已经开始投简历的阶段才开始刷题，临时抱佛脚不太管用。要在刚动了跳槽的心思的时候，就开始偷偷的刷起来。这一点我做的不好， 真的是简历已经发出去了，才开始刷。这就导致了我有几次没有写出正确的答案。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;面试频率方面&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的建议是有条件的话尽量的多面试几家，不要犯懒，即便这家公司你不想去， 也要去聊聊看。原因如下:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;面试讲究的是状态和心态，刚刚面试的时候一般是找不到一个良好的状态的， 很可能连自己的项目介绍的都磕磕巴巴的。而在心态上，刚出去面试不是过于乐观就是过于悲观，只有多面试几家公司才能树立一个比较合适的自信心。所以在去面试你特别想去的公司之前，最好先找 2 家公司练练手。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多面试也是为了找准自己的定位， 像我这种已经快 5 年半没有出去面试过的人，其实是很比较难能准确的评估自己的级别的。自己的定位找不准就容易出事， 比如本来你是 P8 能力的人，但是你觉得自己只有 p7 的水平，那么在跟 HR 谈薪的时候就会因为底气不足不敢要期望的薪资， 而如果你只有 P7 的水平却误认为自己是 P8 的级别，那也会因为自己有过高的期望而让谈判失败错失了好的工作机并会打击自己的信心。所以在面试初期的时候一定要快速的找准自己的职级定位&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;面试是一个互相博弈的过程，尤其是跟 HR 谈薪资和定级的时候， 你需要手上至少有那么 2 个 offer 才能有底气与 HR 谈判。如果手上没 offer 就跟你心仪的公司谈， 很可能会被一压再压。要知道 HR 也是希望你过去的， 这也涉及到她的绩效。你手上有好的 offer 她就不敢压的太狠， 要不然你不来了她的损失也不小。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有些时候不聊一下，其实你都不知道这个岗位其实很适合你，没准聊着聊着就成了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;面试题方面&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先说明一下， 经过这次面试的总结，以及我跟几个同样在找工作的朋友沟通的情况看， 高级职位基本不会问基础方面的问题了， 因为这个级别开始就是走专家方向，要求的技术深度和广度是不一样的， 不会小打小闹的跟你扣基础技术。比如咱们社区里提到的一些常考题目一般都是看不到了。例如给你一个场景怎么设计测试用例，问 xpath 语法，问接口测试里怎么封装数据，问长连接和短连接的区别，问某个语言的语法， 类似这样的问题很少会碰到， 而我面试了 40 场是一个也没遇到。取而代之的会问一些成系统的问题来考核，希望候选人从更全局的角度来回答问题， 也希望候选人能更深入的分析一个方案的前因后果，成本收益，技术选型， 方案优势等等。当然面试官们还是以在简历中介绍的项目和技术点来挖掘问题为主， 不会天马行空的问不相干的问题。我把我还能记得的面试题分成几个类型列在下面。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;考核技术深度的类型&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一类问题是考核候选人硬实力的杀手锏，因为不像考核软性素质和项目管理类的这种偏务虚的问题， 务虚的问题是有话术的。而这类问题没有话术可言，只能靠自己的实力硬抗。下面我列一下我遇到的几个典型的问题。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;详细介绍一下容器网络的原理。这是我在面试一个做云的团队的一面面试题，后面又追问了 iptables 的原理， 因为现在的云产品都是要提供容器化服务的么，我简历中也写了很多 docker 和 k8s 的东西， 所以问这个问题也是对口。这个问题怎么说呢， 我觉得算是比较难的吧 ，大家用 docker 和 k8s 的时候一般都比较少关注底层原理。这涉及到 linux 底层的知识，包含了 namespace， 网桥，iptalbes 等知识， 具体的答案我曾经写过帖子，大家可以参考一下：https://testerhome.com/topics/9567&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在简历中描述的混沌工程项目中， 你是否调研过开源的故障注入工具比如 chaos-blade 和 chaos-mesh。你是否了解这两款工具，而当时你为什么没有选择开源工具而选择了自研， 你自研的东西对比这两款工具有什么区别？这个问题大概遇到了 3，4 次吧， 目前混沌工程比较火， 很多地方都希望我去做混沌工程相关的东西，所以碰见问这个问题的情况比较多。这个同样考察候选人的技术深度， 首先要解释清楚 chaos-blade 和 chaos-mesh 的原理，他们在故障注入方面是用什么样的机制去注入，各自的优缺点是什么。比如要解释 chaos-mesh 是直接从宿主机上通过切换名称空间来达到故障注入的目的，而我选择的是用 side car 模式直接注入故障容器的方式在 K8S 中注入故障。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;说几个你在运维 k8s 集群中出现的问题和解决思路，也有几个面试官直接问比较传统的介绍一下你印象最深刻的 bug。这个类型的问题回答思路一定要往高逼格上回答， 要体现技术身体和你处理问题的能力。我回答的是在维护 k8s 集群的时候遇到的 k8s 自己的 bug， 尤其是涉及到了 k8s 和 docker 的设计与 linux 内核冲突的 bug 方面上， 体现了自己研究 k8s 的技术深度。刚才也说了这是一个立 flag 的问题， 如果只是说一个很平常的 bug， 面试官会觉得你技术很一般， 没有解决过一些困难的问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;简述一下 spark 运行的原理/Flink 有几种窗口分别是做什么的。这是一道大数据相关的问题，是我面试一个大数据团队的时候遇到的。面试官估计就是想考核我 spark 的硬实力， 完全跟测试无关，这可能是很多小伙伴们不能理解的， 因为可能会觉得我要是会 spark 干嘛不去做大数据开发。但很遗憾， 很多的领域里面就是你不懂这个领域的研发技能的话，就是没办法做测试的。而大数据就是其中之一， 不懂大数据开发的人基本上很难能做大数据的测试。所以这道题从 RDD 讲起，数据切分，数据倾斜，shuffle 的原理，包括 shuffle 中的 shuffle write 和 shuffle read 的过程都是会考的。而 Flink 的题略简单， 时间窗口和数字窗口两个大类， 再详细讲一下时间窗口里的滚动窗口， 滑动窗口，session 窗口， global 窗口都说一遍也就过关了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你自己维护一个 k8s 集群， 你通过什么手段保证集群的稳定性。这道题其实就是考察你懂不懂 k8s 的调度机制， 但是面试官没有直接问 node selector， pod selector，节点亲和性啊这些具体的知识点， 而是给我假设了这样一个场景看看我能不能灵活的运用这些知识点。所以我回答的思路就是围绕这些知识点的。比如第一点，流程规范上需要把 k8s 中运行的服务或任务分成不同的类别。类似算法中的分治思想。把集群中的节点也分成不同的类别， 比如有 SSD 硬盘的， 有 GPU 的， 有万兆网卡的，适合运行在线服务的，适合运行离线服务的， 适合运行业务服务的。这些节点分别按类别打上不同的 label， 然后把不同任务和服务使用 node selector 或者节点亲和性反亲和性调度到合适的节点上去。这样分而治之， 避免类似 IO 密集型的任务把业务服务给弄垮了的情况出现。所以流程规范上要规定每个团队按这种规范来启动容器。第二点，资源调度和规划上，每个任务和服务都要填写 request 和 limit 这两个字段明确的声明自己对于资源的需求， 禁止大量超卖导致资源失衡把机器搞垮， 同时节点的 kubelet 也需要在启动的时候限制好当前机器启动的 pod 数量的上限，避免 pod 过多， 也要通过参数给操作系统预留资源， 不能让 k8s 把资源都吃满，导致操作系统没有资源了整台机器崩溃。第三点，k8s 本身的服务要使用高可用模式， 并且所有启动了高可用模式的 pod， 需要使用 pod 反亲和性保证两个相同的服务不会启动到同一个节点上，同时每个 pod 必须配置好探针，对服务有完整的健康检查探活机制。第四点，要有完善的监控和自动化运维机制， 监控方面使用普罗米修斯监控所有节点和容器，并设置微信告警， 自动化运维方面编写自动化的程序， 比如自动清理存活时间太长的 pod， 节点压力过高时自动给该节点打 taint 以阻止任务继续调度到该节点上。第五点， 集群要有冗余， 多加几个节点防止某些节点崩溃的时候可以让服务迁移到其他健康节点上， 同时镜像要有规范，不能太大，免得迁移的时候 IO 太高，时间太长。这道题其实我理解对方就是在考我的 k8s 的调度机制，只是他没有直接问技术点， 而是考核我有没有一个成体系的技术能力解决问题。我发现这是好多大厂面试官的提问风格。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结一下这类问题是所有问题中最扣技术能力的了， 面试官会从简历中挑选他感兴趣的东西使劲往深了问， 考核的就是候选人在某样技术领域里到底走的多深。甚至直接就是问你研发技能， 这个是很多小伙伴们反感的。但这就是现实吧， 不仅仅是面试官， 我自己也比较认同只有在一定程度上了解了研发技术后，才能设计出更合适的测试场景。比如在大数据领域里你不知道 shuffle 这个东西的话， 那就真的不知道要去测试数据倾斜这个场景了。不知道 checkpoint 的话也就想不到在流计算里去测试数据一致性。所以有些时候你会面对一些研发技术的问题，我遇到一个比较极端的是面试官直接问我如何设计一个在线的实时排名系统， 就是客户端+kafka+flink 这套思路， 我理解面试官也不是说希望你能开发出这么一个系统出来， 他只是想知道你是否有相关的概念， 是不是深入的测过这样的系统， 因为如果你真的深入测试过一个系统， 那这个系统的架构你一定能说的出来。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;考核测试策略的类型&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一类问题主要出现在如果面试的岗位和当前公司的岗位很匹配的情况下， 或者面试官也是这一领域里面， 他会使劲的问测试策略。比如我是在 AI 领域中的， 我这一次找的工作也大多数是做 AI 的团队， 所以经常遇到如下问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果评估模型的效果？类似于问怎么做效果测试。这个问题在 AI 圈子里属于最常问的问题， 一般听说过的同学基本都知道采集数据灌入模型然后评估模型预测的正确率。但是如果这么简单的回答基本是会跪的。因为其实这个测试类型还蛮复杂的， 模型效果涉及到很多东西。比如线上模型和线下模型的效果一致性， 不同类型的模型的评估指标都有什么。整个模型的生命周期中分成哪些阶段， 每个阶段怎么测试来保证效果。做效果测试的时候数据如何采集等等。这类的问题肯定不是一两句话能说清楚的， 需要候选人更全面的分析每个场景和对应的测试方案。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在大数据产品里都做过哪些测试方案？同样是一个很大的问题， 我的答题思路是批处理和流计算要分别说， 批处理方面就涉及到了功能，性能，数据倾斜，异常场景， 数据及时性。流计算里功能，性能，数据一致性。同样共性的都要做监控，批处理的监控主要是写 spark 程序扫描数据， 而流计算主要是写一段 Flink 来对接消息中间件来扫描数据。白盒测试方面需要去研发的 repo 里以 UT 的形式去测试 UDF 和 UDAF， 还要去拆流，把大的流拆成若干个小流进行集成测试。同样不管批处理还是流计算在数据领域不管是功能还是性能测试都避免不了造数这个话题。需要分析一下需要造数进行测试的场景， 怎么造数， 甚至介绍一下自己的造数工具的思路。我自己的思路无非就是批处理用 spark， 流计算用消息中间件的客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果测试产品的稳定性？这个问题容易理解为问你如何开展混沌工程。因为混沌工程的目的就是测试产品的高可用架构在生产环境下出现故障的时候是否有足够的容错能力保证产品继续的稳定提供服务。但混沌工程的这种故障注入进行测试只是一个思路， 所以我回答的时候也说明了在云原生架构下， 如何从服务调度方面，镜像规范方面， 容器编排规范方面来保证服务的稳定性。因为有些时候调度策略不对或者镜像太大或者没有设置合理的探针，资源规划都会导致服务的不稳定。而混沌工程方面也会展开来说在不同的场景下主要注意的地方， 比如在流计算场景里更注意的是故障在触发后会不会造成数据不一致的情况。所以验证点就不是业务正常的返回， 还要验证数据是否正确。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结一下这类问题跟上面说的技术深度不一样， 考核技术深度的时候是一条线的使劲往深了问， 而这种测试策略类型的问题我理解更看重的是候选人能否从整体的角度全面的介绍你的测试策略。毕竟这个级别不是大头兵了， 需要负责一个方向，不能是只在一个点上发力。个人理解这种问题会比较少扣技术细节， 更关注的是候选人对特定业务的测试方案的理解是否足够全面。我们在日常工作里很多人可能只是负责某一块东西， 很难能熟悉所有的测试方案， 比如从效果测试来说我们团队其实有人专门做在线效果测试， 有人专门做离线， 有人专门做一致性，有人专门做数据正确性测试， 并不是效果测试中所有的场景都交给一个人来测试。所以平时工作的时候除了自己负责的测试外， 还是建议大家都关注一下其他人做的测试类型， 给自己形成一个整体的测试思维和视角。这一点我自己也有所不足， 我更擅长的是机器学习场景， 而深度学习类比如 CV,NLP，OCR 我都不太熟，回答问题的这时候这部分有些缺失。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;考核管理能力/软性素质/测试理念/业务理解 等&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比较懒了我就把这些类型都汇总在一个标题里了， 回答这类问题有话术， 需要候选人口才好， 说话逻辑清晰， 并且对于问题有自己独到的见解， 我列一下我被问到的印象深刻的几个问题。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;你是如何理解工程效能的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你是如何理解 QA 这个职业的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果给你一个 40 人左右的团队， 你如何管理，如何展开招聘工作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果设计一个国内通用的可以评估自动化测试的效果的模型，你考虑一下这个模型要怎么设计， 要从哪些维度评估。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在推进工具/平台/流程 的时候遇到不配合的团队怎么处理？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大概介绍一下产品的业务，盈利模式，公司对这个产品的策略&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何度量你的自动化测试方案/工程效能工具 的成本，收益&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你如何证明当前的产品的质量是 OK 的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你如何设计你所在产品的质量保障体系&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先这类问题大多数是没有正确答案的，每家公司的理念不一样， 仁者见仁智者见智。有些看运气， 就是看你回答的理念符不符合面试官的价值观， 不符合的话别想太多就认栽吧。然后回答这类问题的时候很看你的表达能力， 言语之间的逻辑性比较重要。个人觉得最关键的是对这类问题要事前有准备， 否则容易被打个措手不及。平时工作的时候也要多注重一些系统性思维的思考， 对以后都是有帮助的。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;剩下的有些问题我自己也记不清楚了， 就主要列上面那 3 个大类吧。整体看除了考核算法有固定的题库外， 其他的问题基本都是根据我简历里描述的项目来展开问的， 所以好好准备自己简历中描述的内容十分重要， 结合我自己做面试官的经验， 逻辑表达能力其实也是占了一个比较重要的位置。如果在回答上述这些问题的时候逻辑混乱， 磕磕巴巴，前言不搭后语, 那面试可能也是会挂的。所以事前准备真的很重要， 只要是简历里写的，都要自己过好几遍， 能预想到的问题都准备好答案背下来， 比如项目描述， 测试方案这些东西。并且整个技术方案的前因后果也要准备好， 因为有些面试官会比较喜欢问你为什么要推进这个技术方案， 是遇到什么问题导致的？还是你自己主动推进的？推进这个技术方案遇到了什么问题， 这个技术方案有什么优势， 后面的拿到了什么结果， 怎么度量你的结果。面试官会根据简历写的东西使劲扣， 所以事前准备好是非常重要的。自己简历里写的内容一定要经得起考验， 否则勾起面试官的兴趣后最后却比较失望，那就很影响面试结果了。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;谈一谈业务方向的选择&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次出来面试对于业务方向的选择也有一些感受， 我觉得有一句话也挺对的叫选择大于努力， 我自认为是比较努力的类型， 但也不得不承认当初也是选择了几个比较好的业务方向， 所以现在找工作比较容易， 竞争对手少，大厂都愿意要这几个方向的人才，而且价钱也都能聊的上去。这几个方向分别是：容器，大数据，AI。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;首先云目前比较火，尤其是云原生架构特别火， 不少公司都在转型云原生架构，线上线下环境都要上云。从我这次找工作的情况来看， 即便是顶级公司中也有不少项目是没有上云的， 而这些公司都不约而同的希望能将这些项目上云， 所以才会在面试的过程中非常关注我简历中描述的 docekr，k8s，混沌工程，环境治理等相关内容。看目前的趋势， 以后这类技术会成为行业内很普遍的技能，很多测试人员尤其是大厂测试人员都要或多或少的掌握一些这样的技能，而能在云原生架构下建设环境治理， CICD， 混沌工程以及各类测试平台与工具就成了目前比较稀缺的能力， 并且现在专业做云的公司也越来越多， 连字节都要搞自己的云了， 所以相关的测试岗位也变多了， 但是在测试行业里懂这些的人是比较少的， 毕竟容器技术才火了这么几年，而且被很多人当做是运维领域的技能，所以很少有 QA 会去研究。而这个领域的研究深了也会比较值钱。所以现在云领域我认为是一个比较好的方向。感兴趣的同学可以了解一下。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;再说大数据， 我记得 15 年的时候，当时我们质量部这边有一个架构师就说过大数据是未来。当时我还不知道什么是大数据，好像那个时候大数据这个词还没有像现在这么普遍， 可能那个时候做大数据的人还是比较小众的。但是现在基本上成点规模的公司都会有自己的数据部门， 目前这部分业务的测试工作在很多公司仍然以研发自测为主，也没办法，懂大数据的 QA 比较少。这也导致了如果你在大数据上有一些沉淀的话， 就会比较抢手。我们团队之前有 2 个人拿了美团和快手的数据团队的 offer， 听说总包涨幅都不低。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后说说 AI， 前几年 AI 热潮造就了不少工作岗位， 虽然现在 AI 四小龙后劲不足，但市面上各个公司仍然都还在构建自己的 AI 能力。而跟上面 2 个领域一样的是 AI 领域的 QA 人才仍然很缺少， 做这部分测试需要懂机器学习，深度学习，大数据（因为目前机器学习都是构建在大量的数据下的）。我跟一些大厂的同行聊天的时候，大家都表达出了招人的乏力， 想在世面上招到符合要求的测试人员太困难， 大家都开启了内部培养的模式。所以在这样一个大环境下，懂 AI 业务和相关技术栈的 QA 会比较吃香。从我自己这次找工作来说， 在当前公司做机器学习平台的经历还是很加分的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以业务方向的选择是挺重要的， 除了我说的这 3 个方向以外一定也是有其他不错的方向， 只是我不熟悉的就不说了。我个人觉得选择一个技术类的业务方向是比较好的， 就比如我上面说的这 3 个方向， 全部是技术类的业务，也就是技术本身就占业务中很重要的部分。在这样的业务中工作就可以兼顾技术与业务两方面的发展。比如你在云产品中做测试人员， 云产品中很多时候玩的就是 docker，k8s，OpenStack，分布式存储这些东西，这样你测试的过程中就能练出一身技术了。选择走技术类的业务还有一个好处是业务足够复杂， 深度也足够深。可发展的空间比较大，越走到后面竞争对手就越少。当然做起来难度就越高，需要学习很多技术， 但也正因为难度大， 竞争对手才少， 机会才多。如果业务比较简单， 那很难做出亮点， 机会也少，门槛低，竞争对手就多。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;职业发展上个人感觉几个比较重要的事情&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;选择一个自己热爱的领域：这个怎么说呢， 努力的重要性是不言而喻的， 但是如果我不热爱这个领域的话， 实话实说我很这么多年来一直保持学习的状态。长期保持高强度的做一件自己不喜欢的事还能做的特别好， 这不是一般人能坚持下来的，起码我就不是。所以我个人觉得做自己喜欢的事挺重要的， 这很大程度决定了后面自己是不是能发展的好。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择一个有门槛的领域：门槛的重要性我之前专门写过文章表明我的观点， 上面也说过门槛高，挑战大，但是机会多，对手少，上限高。门槛低，容易做，但是机会少，对手多，上限低。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;心态上不要纠结于&lt;strong&gt;「QA」&lt;/strong&gt;的本职范围内：好些同学总会纠结一些事到底是不是 QA 的职责范围， 比如有人会觉得 docker 和 k8s 是运维才应该学的东西， 面试的时候面试官问几句心态就炸了，直言我又不是 研发/运维 我干嘛要学这个。这样是不行的， 还是那句话，高阶的测试开发人员一定要有技术追求。技术与业务的结合才是最优解。我在一场面试的时候，面试官问我混沌工程这个事情有些公司都是 SRE 部门做的， 你觉得 QA 做的优势是什么。我回答说 SRE 或运维可能在云原生相关能力上比我更优秀， 但是他们不懂用户，不懂业务，不懂产品。注入故障后他们并不能很好的评估故障带来的影响， 而 QA 可以。以我这几年做测开的经验， 很多有价值的事情都是需要一定的研发和运维能力才能去做。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;年龄是每个人都要面对的坎， 只有不停的提高自己的能力， 让能力的增长匹配的上年龄的增长才能让自己处于一个比较安全的位置。这一点在出来面试的时候就会感受的到。不希望自己面试的时候因为年龄问题被卡住，平时就不要趟平， 多锻炼自己的能力。我一个朋友在 43 岁的时候还能找到不错的工作， 而另一个人在 30 来岁的时候就早早的被迫转了行。这个行业， 逆水行舟， 不进则退， 大家努力吧。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自己的实力决定了周围人对待你的态度， 多年前我还是菜鸟的时候出来面试到处受白眼，遭嫌弃。而这次面试感觉全世界都变的友好了起来， 到处都洋溢着灿烂的笑脸， 婉拒对方的时候，他们还会各种挽留。而我在公司中推进事情的时候也是发现比以前容易很多，不再像以前那样不把自己当回事。所以想要受尊重， 想要工作开展的顺利， 还是要往上爬。这个世界就是这么现实，还是那句话， 逆水行舟不进则退。我们都是在水流中不停向前的人。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;跳槽的时候需要注意的几个事情&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;有些同学可能担心跳槽涨幅会不会卡 30%。普遍会有这个情况， 但优秀的人可以打破这个限制。想要超过 30% 一般要走特批， 或者业务方极力争取，所以面试中的任何一面的面评都是比较重要的，大家要认真对待每一次面试， 不要因为一面的时候觉得对方比你年轻或者能力没你好就态度轻慢。总之就是想要涨幅超过 30%， 就要证明自己有这个价值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大厂背调一般比较严格， 大家注意千万别造假。简历中的工作信息最好对着自己的社保记录写一遍。第三方背调公司一般会要求提供 10 年内最近两家公司的信息， 要求提供同事， 直属上级和 HR 的联系方式。再强调一下别因为觉得自己跟领导或者 HR 关系不好，担心说自己坏话而填写其他人， 如果被查出来的话，也是可能会导致背调失败的。他们的评价并不会直接影响你的入职， 只要确定你没有造假就不会出事。如果上家公司找不到联系人了， 可能会要求提供社保记录， 离职证明（所以以前公司的离职证明最好留一个备份）。最后如果实在没办法证明自己在那家公司工作过的话， 背调公司一般会顺延， 调查 10 年内第三家公司的经历。在背调之前一定要跟 HR 再确认一遍他们手里的简历是不是你提供的最新的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;遇到不合拍的面试官的情况很正常，心里再不爽也别当时翻脸。没有当场翻脸就还有周旋的余地，很多面试官其实在你入职后都跟你没多少交集，没必要跟他置气。比如我 4 面挂的那一次就是美团技术委员会的交叉面， 完全是另一个部门的人。他是业务团队的人， 我面的是数据团队的岗位， 他不懂大数据， 我不懂客户端。被挂了也正常，因为两个人完全不在一个频道上。心态放平和， 面试后找主管沟通说明情况，看是否有周旋的余地。就算不成也没关系， 好好睡一觉准备下一家公司。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;尊重每一家公司，不要在 offer 之间反复横挑， 太败人品。如果决定不去这家公司了， 尽早说明， 不要拖着。圈子很小， 要小心维护自己的风评。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;尊重每一个面试官， 聊得开心的可以加个微信， 就算这次不成，以后也没准会有合作的机会。圈子真的很小， 没准走着走着就又聚到一起了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就写这么多吧，估计大家可借鉴的也不多， 毕竟每个人有每个人的情况。最后说一下大厂的面试流程都很长， 动辄 1 个多月，大家要合理安排时间。祝大家早日富可敌国！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;742&quot; data-backw=&quot;558&quot; data-ratio=&quot;1.3293768545994065&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0JnIWSrhcUiavicHIjMpRDgaMzeNOVqiaALyLJ804RVrYpT1qACTD2lLYI6YlGW7wnNDr4DRpVd12HtQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1011&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3841886269070735&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/EKs3bvt0w0IMIoKH5WoLTNicQz8R8EaYElJjicIvfJaicFoANUueBVfKKMm2MJNB4pPcKicOKpV6sPiaTAy3Dky0How/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;721&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dc0b74d455a195619eabca5fc6895a04</guid>
<title>分布式事务如何解决？一次讲清楚</title>
<link>https://toutiao.io/k/fcm5li4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分布式事务基础&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;事务&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事务指的就是一个操作单元，在这个操作单元中的所有操作最终要保持一致的行为，要么所有操作都成功，要么所有的操作都被撤销。简单地说，事务提供一种“要么什么都不做，要么做全套”机制。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;本地事务&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本地事务其实可以认为是数据库提供的事务机制。说到数据库事务就不得不说，数据库事务中的四大特性:&lt;br/&gt;&lt;code&gt;A：原子性(Atomicity)&lt;/code&gt;，一个事务中的所有操作，要么全部完成，要么全部不完成&lt;br/&gt;&lt;code&gt;C：一致性(Consistency)&lt;/code&gt;，在一个事务执行之前和执行之后数据库都必须处于一致性状态&lt;br/&gt;&lt;code&gt;I：隔离性(Isolation)&lt;/code&gt;，在并发环境中，当不同的事务同时操作相同的数据时，事务之间互不影响&lt;br/&gt;&lt;code&gt;D：持久性(Durability)&lt;/code&gt;，指的是只要事务成功结束，它对数据库所做的更新就必须永久的保存下来&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据库事务在实现时会将一次事务涉及的所有操作全部纳入到一个不可分割的执行单元，该执行单元中的所有操作要么都成功，要么都失败，只要其中任一操作执行失败，都将导致整个事务的回滚。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分布式事务&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本质上来说，分布式事务就是为了保证不同数据库的数据一致性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分布式事务的场景&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;单体系统访问多个数据库&lt;br/&gt;一个服务需要调用多个数据库实例完成数据的增删改操作&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.514760147601476&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gFMTdFjOuv9Qh9JRaXVfGE3hjNicff2X80WHqwpmPZIhsNxia6h8VW1ibaM4AHiaTatHOBWV695O6NoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;542&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;多个微服务访问同一个数据库&lt;br/&gt;多个服务需要调用一个数据库实例完成数据的增删改操作&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6030245746691871&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gFMTdFjOuv9Qh9JRaXVfGE05XiaGbCS7Ltm0LOzT7vgUgZ8gRLETVrycjia8SxHYf5rNPY8iblDsmvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;529&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;多个微服务访问多个数据库&lt;br/&gt;多个服务需要调用一个数据库实例完成数据的增删改操作&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5654450261780105&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gFMTdFjOuv9Qh9JRaXVfGEopAhwfSoC4Y4HjmtZYgWDYnTSGpCibgONG81cyXOe9P3gR2g3HxDkPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;573&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分布式事务解决方案&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;全局事务&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全局事务基于DTP模型实现。DTP是由X/Open组织提出的一种分布式事务模型——&lt;code&gt;X/Open Distributed Transaction Processing Reference Model&lt;/code&gt;。它规定了要实现分布式事务，需要三种角色：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;AP: Application 应用系统 (微服务)&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;TM: Transaction Manager 事务管理器 (全局事务管理)&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;RM: Resource Manager 资源管理器 (数据库)&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个事务分成两个阶段:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阶段一: 表决阶段，所有参与者都将本事务执行预提交，并将能否成功的信息反馈发给协调者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阶段二: 执行阶段，协调者根据所有参与者的反馈，通知所有参与者，步调一致地执行提交或者回滚。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8525179856115108&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gFMTdFjOuv9Qh9JRaXVfGELbHowMP3m99ExTb4fZsDGtAXtknA0TNPxF6mr6ZVR92GP11qVInNwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;556&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;单点问题：事务协调者宕机&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同步阻塞: 延迟了提交时间，加长了资源阻塞时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据不一致: 提交第二阶段，依然存在commit结果未知的情况，有可能导致数据不一致&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;可靠消息服务&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于可靠消息服务的方案是通过消息中间件保证上、下游应用数据操作的一致性。&lt;br/&gt;假设有A和B两个系统，分别可以处理任务A和任务B。此时存在一个业务流程，需要将任务A和任务B在同一个事务中处理。就可以使用消息中间件来实现这种分布式事务。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5892857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gFMTdFjOuv9Qh9JRaXVfGE4dTduaREfTqnWEBWqmS9HhLsOnIFlwHdibSXzE02X3iaH0cQlOc7lPiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;952&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第一步: 消息由系统A投递到中间件&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在系统A处理任务A前，首先向消息中间件发送一条消息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息中间件收到后将该条消息持久化，但并不投递。持久化成功后，向A回复一个确认应答&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;系统A收到确认应答后，则可以开始处理任务A&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;任务A处理完成后，向消息中间件发送Commit或者Rollback请求。该请求发送完成后，对系统A而言，该事务的处理过程就结束了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果消息中间件收到Commit，则向B系统投递消息；如果收到Rollback，则直接丢弃消息。但是如果消息中间件收不到Commit和Rollback指令，那么就要依靠&quot;超时询问机制&quot;。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;超时询问机制
系统A除了实现正常的业务流程外，还需提供一个事务询问的接口，供消息中间件调用。当消息中间件收到发布消息便开始计时，如果到了超时没收到确认指令，就会主动调用系统A提供的事务询问接口询问该系统目前的状态。该接口会返回三种结果，中间件根据三种结果做出不同反应：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提交:将该消息投递给系统B&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;回滚:直接将条消息丢弃&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;处理中:继续等待&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第二步: 消息由中间件投递到系统B&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息中间件向下游系统投递完消息后便进入阻塞等待状态，下游系统便立即进行任务的处理，任务处理完成后便向消息中间件返回应答。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果消息中间件收到确认应答后便认为该事务处理完毕&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果消息中间件在等待确认应答超时之后就会重新投递，直到下游消费者返回消费成功响应为止。&lt;br/&gt;一般消息中间件可以设置消息重试的次数和时间间隔，如果最终还是不能成功投递，则需要手工干预。这里之所以使用人工干预，而不是使用让Ａ系统回滚，主要是考虑到整个系统设计的复杂度问题。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于可靠消息服务的分布式事务，前半部分使用异步，注重性能；后半部分使用同步，注重开发成本。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最大努力通知&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最大努力通知也被称为定期校对，其实是对第二种解决方案的进一步优化。它引入了本地消息表来记录错误消息，然后加入失败消息的定期校对功能，来进一步保证消息会被下游系统消费。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.33707865168539325&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gFMTdFjOuv9Qh9JRaXVfGENJhVChamVSfdCSvQLVSYqBQtLX10HdOzUzTvLDL08icQB48BaBycrVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;801&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第一步: 消息由系统A投递到中间件&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;处理业务的同一事务中，向本地消息表中写入一条记录&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;准备专门的消息发送者不断地发送本地消息表中的消息到消息中间件，如果发送失败则重试&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第二步: 消息由中间件投递到系统B&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;消息中间件收到消息后负责将该消息同步投递给相应的下游系统，并触发下游系统的任务执行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当下游系统处理成功后，向消息中间件反馈确认应答，消息中间件便可以将该条消息删除，从而该事务完成&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于投递失败的消息，利用重试机制进行重试，对于重试失败的，写入错误消息表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息中间件需要提供失败消息的查询接口，下游系统会定期查询失败消息，并将其消费&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式的优缺点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;优点：&lt;/strong&gt;  一种非常经典的实现，实现了最终一致性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;TCC事务&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCC即为Try Confirm Cancel，它属于补偿型分布式事务。TCC实现分布式事务一共有三个步骤：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Try：尝试待执行的业务
这个过程并未执行业务，只是完成所有业务的一致性检查，并预留好执行所需的全部资源&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Confirm：确认执行业务
确认执行业务操作，不做任何业务检查， 只使用Try阶段预留的业务资源。&lt;br/&gt;通常情况下，采用TCC则认为 Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。若Confirm阶段真的出错了，需引入重试机制或人工处理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Cancel：取消待执行的业务
取消Try阶段预留的业务资源。&lt;br/&gt;通常情况下，采用TCC则认为Cancel阶段也是一定成功的。若Cancel阶段真的出错了，需引入重试机制或人工处理。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8214285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gFMTdFjOuv9Qh9JRaXVfGEpEKpGQlFT4oEeRjxMzrqUPj0fEm8gAu95TS5WvzxwRdHgFiaYR2W27Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;588&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCC两阶段提交与XA两阶段提交的区别是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;XA是资源层面的分布式事务，强一致性，在两阶段提交的整个过程中，一直会持有资源的锁。&lt;br/&gt;&lt;br/&gt;TCC是业务层面的分布式事务，最终一致性，不会一直持有资源的锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCC事务的优缺点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;优点：&lt;/strong&gt; &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把数据库层的二阶段提交上提到了应用层来实现，规避了数据库层的2PC性能低下问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt; &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCC的Try、Confirm和Cancel操作功能需业务提供，开发成本高。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;SAGA&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Saga 是一种补偿协议，在 Saga 模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2942477876106195&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gFMTdFjOuv9Qh9JRaXVfGEo5qZ7hBCfmHPERmFwBFiaRvVhb7eusiasicDia1QHnPV4SVlhZcddJvJibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;452&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;补偿协议&lt;/strong&gt;：在Saga模式下，分布式事务内有多个参与者，每个参与者都是正向补偿服务。上图中的&lt;code&gt;T1~Tn&lt;/code&gt;就是&lt;strong&gt;正向调用&lt;/strong&gt;，&lt;code&gt;C1~Cn&lt;/code&gt;是&lt;strong&gt;补偿调用&lt;/strong&gt;，正向调用和补偿调用是一一对应的关系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设有n个被调用方服务，&lt;code&gt;T1&lt;/code&gt;就是对服务一的调用，接着&lt;code&gt;T2&lt;/code&gt;是对服务方二的调用，T3是对服务方三的调用。如果这个时候返回了失败，那么就需要进行回滚，此时就会调用&lt;code&gt;T2&lt;/code&gt;的对应补偿&lt;code&gt;C2&lt;/code&gt;，调用&lt;code&gt;T1&lt;/code&gt;的对应补偿&lt;code&gt;C1&lt;/code&gt;，使得分布式事务回到初始状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Saga 正向服务与补偿服务都需要业务开发者实现，因此是业务入侵的。Saga 模式下分布式事务通常是由事件驱动的，各个参与者之间是异步执行的，Saga 模式是一种长事务解决方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Saga 模式使用场景&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Saga 模式适用于业务流程长且需要保证事务最终一致性的业务系统，Saga 模式一阶段就会提交本地事务，无锁、长流程情况下可以保证性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事务参与者可能是其它公司的服务或者是遗留系统的服务，无法进行改造和提供 TCC 要求的接口，可以使用 Saga 模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Saga模式的优势与缺点&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一阶段提交本地数据库事务，无锁，高性能；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参与者可以采用事务驱动异步执行，高吞吐
补偿服务即正向服务的“反向”，易于理解，易于实现；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Saga 模式由于一阶段已经提交本地数据库事务，且没有进行“预留”动作，所以不能保证隔离性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;SEATA&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2019 年 1 月，阿里巴巴中间件团队发起了开源项目 Fescar（Fast &amp;amp; EaSy Commit AndRollback），其愿景是让分布式事务的使用像本地事务的使用一样，简单和高效，并逐步解决开发者们遇到的分布式事务方面的所有难题。后来更名为 Seata，意为：Simple Extensible AutonomousTransaction Architecture，是一套分布式事务解决方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Seata的设计目标是对业务无侵入，因此从业务无侵入的2PC方案着手，在传统2PC的基础上演进。它把一个分布式事务理解成一个包含了若干分支事务的全局事务。全局事务的职责是协调其下管辖的分支事务达成一致，要么一起成功提交，要么一起失败回滚。此外，通常分支事务本身就是一个关系数据库的本地事务。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1785714285714286&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gFMTdFjOuv9Qh9JRaXVfGEyC5TFay37pteOXbtm1YMcRENapw9ic55KocKF4WYkqWHE3kJOtO3JOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;336&quot;/&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Seata主要由三个重要组件组成：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TC：Transaction Coordinator 事务协调器，管理全局的分支事务的状态，用于全局性事务的提交和回滚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TM：Transaction Manager 事务管理器，用于开启、提交或者回滚全局事务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RM：Resource Manager 资源管理器，用于分支事务上的资源管理，向TC注册分支事务，上报分支事务的状态，接受TC的命令来提交或者回滚分支事务。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6003683241252302&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gFMTdFjOuv9Qh9JRaXVfGE1aRHUH6nf1jB0Fotib04WHFnia5cummYc7eXxYwia1U9jF6SicBOU2mzFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;543&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Seata的执行流程如下:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;A服务的TM向TC申请开启一个全局事务，TC就会创建一个全局事务并返回一个唯一的XID&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;A服务的RM向TC注册分支事务，并及其纳入XID对应全局事务的管辖&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;A服务执行分支事务，向数据库做操作&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;A服务开始远程调用B服务，此时XID会在微服务的调用链上传播&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;B服务的RM向TC注册分支事务，并将其纳入XID对应的全局事务的管辖&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;B服务执行分支事务，向数据库做操作&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;全局事务调用链处理完毕，TM根据有无异常向TC发起全局事务的提交或者回滚&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;TC协调其管辖之下的所有分支事务， 决定是否回滚&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Seata实现2PC与传统2PC的差别：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;架构层次方面，传统2PC方案的 RM 实际上是在数据库层，RM本质上就是数据库自身，通过XA协议实现，而 Seata的RM是以jar包的形式作为中间件层部署在应用程序这一侧的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;两阶段提交方面，传统2PC无论第二阶段的决议是commit还是rollback，事务性资源的锁都要保持到Phase2完成才释放。而Seata的做法是在Phase1 就将本地事务提交，这样就可以省去Phase2持锁的时间，整体提高效率。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b40e2284ac7630d7e75877cdaea14c63</guid>
<title>面试高频题：讲讲项目中的技术难点？</title>
<link>https://toutiao.io/k/f1ktph1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;点击上方&lt;/span&gt;&lt;span&gt;蓝色字体&lt;/span&gt;&lt;span&gt;，选择“设为星标”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;section&gt;&lt;span&gt;回复”学习资料“获取学习宝典&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.0625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ow6przZuPIENb0m5iawutIf90N2Ub3dcPuP2KXHJvaR1Fv2FnicTuOy3KcHuIEJbd9lUyOibeXqW8tEhoJGL98qOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwMDY0Nzk2Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/WRLYshvT39ykfC4Jy6mnxuibX6vJOmVCNF49BAQXbX3dKVmHVjpF89LmQhvdd6GbaQAbwrKSeaMu3Q41SnmOpxA/0?wx_fmt=png&quot; data-nickname=&quot;猿天地&quot; data-alias=&quot;cxytiandi&quot; data-signature=&quot;猿天地由《Spring Cloud微服务-全栈技术与案例解析》, 《Spring Cloud微服务 入门 实战与进阶》作者尹吉欢创建。 资深Java技术专家和微服务技术专家，在Spring Cloud和微服务方面有丰富的经验。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信很多人都有类似的经历，在面试快要结束的时候经常会被问到一个问题：&lt;strong&gt;讲讲项目中的技术难点？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个比较开放的问题，首先它没有固定的答案，因为每个人做过的项目不同，使用的框架不同，对应的架构不同，自然遇到的技术难点也不同。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 一定要真实&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在回答这个问题的时候，一定要仔细想想之前真实遇到的问题，不要随便编一个，这样很容易出问题，因为面试官会顺着细节一层层的问下去，如果你是编出来的，到最后就圆不回去了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;求职者说我们下单的接口最开始只能支持几百的 TPS，被我优化后 TPS 破万了，只要你说完这句话面试官就开始进入继续追问细节了。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;破万具体是多少的 TPS？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有多少台机器？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;机器分别是什么配置？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据库是什么配置？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你们是怎么进行压测的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;下单链路跟多少个服务进行了交互？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每个服务的耗时多久？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何进行优化的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何发现接口中的性能瓶颈？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你只有抗住了这一系列的连环炮追问，而且面试官通过你的描述和你说的指标进行对比，如果比较匹配那么你就过关了。如果不匹配，肯定就面失败了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 技术层面的难点&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术层面的难点可以是做了 GC 的优化，从多少 GC 次优化到多少次，STW 的时间降低了多少，通过哪些手段做的优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以是压测时性能一直上不去，通过什么手段进行了优化，从多少优化到多少。期间有没有加机器，有没有升配服务器，升配数据库等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以是项目运行一段时间后就出现假死的情况，处理不了任何请求。然后你是怎么一步步去分析并找到具体原因的，然后又是如何去解决的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一定要有细节有数据，这样的案例才真实可信。并且面试官会认为你是具备去分析并解决问题的能力。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 不一定是技术层面的难点&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然问的是技术难点，如果你确实没有遇到过什么技术难点，这个时候可以往其他方面去靠，不要直接回答说：&lt;strong&gt;没有遇到过什么难点&lt;/strong&gt;。我敢保证，你要你这样回答了，面试成功的可能性不大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以往业务层面，领导力方面去讲，比如你可以说当时做某个业务的时候，没有这块经验。然后通过查找资料，去咨询有经验的朋友等独立的完成了某个系统的设计。并且在做完后取得了什么样的成绩，这个过程对自己来说是非常具体挑战性的，所以这是在项目中遇到的一个难点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以是自己主动请缨，在领导的支持下主导了老项目的重构，给团队的同学培训了 DDD，并且通过 DDD 成功的将某个业务成功的进行了重构。这样可以体现你的主动性，分享精神，领导力等多方面综合的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后送给大家的就是：&lt;strong&gt;一定要先准备好，想好自己要说什么，临时发挥效果肯定没有事先准备的好。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如果对你有用，来个转发呗！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;关于作者&lt;/strong&gt;：尹吉欢，简单的技术爱好者，《Spring Cloud 微服务-全栈技术与案例解析》, 《Spring Cloud 微服务 入门 实战与进阶》作者, 公众号&lt;strong&gt;猿天地&lt;/strong&gt;发起人。&lt;/p&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre&gt;&lt;p&gt;&lt;span&gt;后台回复 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;学习资料&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;span&gt;领取学习视频&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-mpa-template-id=&quot;112&quot; data-mpa-category=&quot;quote&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.511002444987775&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WRLYshvT39zWmaics1nAAwT4NCD77uDcf6vcXE1DAHybibTY0V3XDmf4YX1q9qYibIwz9xmRVTkEvTjP87gaKEZrQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;818&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如有收获，点个在看，诚挚感谢&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;我不差钱啊&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7ea462a4dbeeaf91dd49f897f2f86e01</guid>
<title>没有大厂的命，得了大厂的病</title>
<link>https://toutiao.io/k/l96isr0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6 月的某个周五晚上，和前同事一起踢完夜场球，然后我拉着他去撸串……踢完球去撸串，仿佛回到了大学生活。哦，不对，大学那时候，身体耐操，踢球和撸串之间还会来一个凉水澡。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我这个前同事两年前从我们公司跳槽去了某团，现在也是管理团队，酒过三巡他和我吐了个槽：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;他的团队 3-5 月接二连三的走了十几个程序员，他们一直在招人补人，招了一段时间发现今年招人真费劲。花时间花精力面了不少人，很多人给了 offer 最终也没来，都被大厂给抢了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给了 offer 人家不来，这种情况我也有遇到，其实也算正常。别人不来，有可能是被原来的公司加薪挽留了，最有可能的还是拿到更好的 offer 了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实话实说，之前几个月是跳槽黄金期，别人能拿到多个 offer 说明他有这个实力，选择钱多的 offer 也是人之常情。毕竟现在 BAT、字节、快手这些公司对人才是真敢给钱，有时候给的钱多到我看了都很服气。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过听完他吐槽，我还是给他回了一句，“你这个老凡尔赛”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他们公司的规模、名声已经很不错了，如果他们都觉得招人很难，还让那些更小的互联网公司、软件公司怎么招人？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他问我是怎么招人的？我和他说了说我的想法和做法。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;1.&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在抱怨招人难之前，我们先自问一下，是不是自己给自己制造了难度？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们经常说别人：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;面试造航母，干活拧螺丝。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在吐槽别人的同时，也看看自己的招聘是不是也这样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我曾经和下面的技术 Leader 说过，&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你们招人写的 JD 要求那么高，招个普通工程师要精通 JVM 优化、多线程、微服务……写的这么高大上，干活真的都用得上这些吗？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;咱们 JD 写的接地气一点、实际一点，干活用到什么技能，就按什么要求招聘，可以适当提高要求，但是太离谱就不好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我需要一个 80 分的人，我就按照 80-100 分的要求去面试别人。如果按照 120 分，甚至 150 分的要求去面试，就算招到了人，多花钱不说，人家入职之后一看，实际工作和你面试说的完全不一样啊，技术成长满足不了他，这种人大概率也待不久。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们做项目的时候都希望不要过度设计，招人也是同理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些时候，最合适的才是最好的。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;2.&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果招聘费劲，可以适当降低自己的要求。比如你想招一个 5 年工作经验的程序员，一直没招到合适的，那是不是可以考虑招 3 年经验的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都想吃现成的，都希望招一个合适的人，招来之后不用培养，直接就能上手干活儿。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是各有利弊，我们降低了工作经验的要求，说不定可以找到一个有潜力的年轻人，这类好苗子成长起来是很快的，而且年轻人的可塑性更好，可以更好的融入团队。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有人会觉得招这类人有风险：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;花两年把他培养起了，技术水平涨上来了，结果干了两年跳槽了，白花了两年时间、精力，忙活半天最终帮别的公司培养人了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种现象在哪家公司都会有，大家都是打工的，早晚都会离开公司，铁打的公司，流水的程序员。没必要太纠结了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，根据我的经验，自己培养出来的人忠诚度还是比较高的。你在培养别人的时候，如果很用心，他们都能感受到你的真心，大多数人都是有良心、重感情的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然了，招好苗子，就需要面试官会看人、会选人。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;3.&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候招人要抱着淘宝贝、捡漏的心态去招人。啥意思呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在大厂工资高，但是招聘门槛也确实高。有些程序员能力挺优秀的，但是他学历不够，或者不是计算机相关专业的，这类程序员可能就不太好进大厂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大厂不缺人投简历，可以要求名校、相关专业，甚至要求研究生。但是其他公司得认清自己，如果公司没那么 NB，也就别要求别人那么 NB 了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再说了，这些进不去大厂的程序员里，不乏优秀之人，仔细选肯定能选到的。淘到宝的前提是，我们在看人的时候，别因为别人的学历不行，学校不行，没在大厂干过，就给人家贴上一个“不行”的标签。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果和大厂拼不过工资，那就拼耐心呗。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;4.&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上说的是招聘相关的，还有一点我觉得很重要，甚至可能是最重要的一点，就是保持团队稳定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;团队稳定了，跳槽的人少了，无形中也缓解了招聘的压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;招聘不但难，而且花精力、花钱，与其是把精力、金钱都用在招人，还不如匀出来一部分精力和钱，用在保持团队稳定上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大厂高工资挖人，不是你的团队不稳定的全部理由。毕竟并不是所有人选择工作都看钱，除了钱之外，title、干的爽不爽、是否能成长提高、团队气氛……这些对员工稳定来说都是很重要的因素。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我觉得团队是否稳定，很大程度上在于团队管理者。我每年给自己设定的 KPI 里，就有一项是关于团队稳定性的，这样就能强迫我自己在团队稳定上多下工夫。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;5.&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到这里，我想起来现在有个现象：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;薪资倒挂&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就是新员工比老员工的工资高，尤其是今年这个现象比较明显。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不管其他公司、其他团队怎么看待薪资倒挂，起码在我的团队里，我是一直在尽量避免这种现象发生。尤其对干的好的骨干同事来说，我觉得薪资倒挂对他们不公平。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两个人能力差不多的情况下，花钱招贵的新员工，还不如把钱用来给干的好的老员工涨工资。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;6.&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说实话，招人难这事我今年也遇到了，毕竟我们公司也不是 BAT 大厂，也给不起太高的工资。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一些人能力强、背景好，跳槽就是希望钱多，就是想去大厂，哪怕工作时间 996、大小周也能接受。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;“只有工资给到位，我的时间你支配”&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类人肯定不是我们考虑的对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是还有很多人，他们并不是一味的看钱，他们会考虑工资的性价比，可以工资低一些，但是工作时长也别那么长，他们希望工作之外还有自己的生活。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类人有的是排斥加班文化，有的是在大厂加班加吐了想躺平了……不管什么原因吧，据我所知，这类人还不是少数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，并不是所有人都只图大厂和高工资，搞清楚候选人的诉求，能让招聘成功率更高一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总之，在招人难这个事上，光抱怨没用，大厂的高工资是个原因，但是更可能是我们自己的原因。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;没有大厂的命，就别得大厂的病。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是就是我对团队和招聘的一些看法，有不同观点，欢迎一起讨论。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果看了觉得有我说的有一点道理，希望能帮忙转发、随手点个在看，&lt;strong&gt;你的支持对我很重要&lt;/strong&gt;。&lt;/p&gt;&lt;hr/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是四猿外。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一家上市公司的技术总监，管理的技术团队一百余人。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我从一名非计算机专业的毕业生，转行到程序员，一路打拼，一路成长。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我会通过公众号，&lt;br/&gt;把自己的成长故事写成文章，&lt;br/&gt;把枯燥的技术文章写成故事。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。欢迎加我微信，拉你入群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9852216748768473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KQibCDibpTo0kqofPehQvDDibibcb3bQUELdY3Knsl4r0RcgsV9l4icr3icmZQfaBXtSFNTxmdQlAZT1OQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4e10ac43d037d8aa363feae0d4397c64</guid>
<title>Cobar 源码分析之 AST</title>
<link>https://toutiao.io/k/00qvkkd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;背景&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Cobar&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Cobar&lt;/code&gt;是阿里开源的数据库中间件，关于它的介绍这里不再赘述，可以参考之前的文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5NjE2MDQwNg==&amp;amp;mid=2247484886&amp;amp;idx=1&amp;amp;sn=f0df2310907805354227bb1729813f23&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《Cobar SQL审计的设计与实现》&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SQL&lt;/code&gt;是一种领域语言（编程语言），常用于关系型数据库，方便管理结构化数据。数据库执行SQL时先对SQL进行词法分析、语法分析、语义分析生成抽象语法树（Abstract Syntax Tree，简称&lt;code&gt;AST&lt;/code&gt;），再被优化器处理生成执行计划，由执行引擎执行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;SQL Parser&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将SQL解析为AST的解析器叫&lt;code&gt;SQL Parser&lt;/code&gt;，开发这个解析器通常有两种方式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过工具自动生成&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;手工编写&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;优点：性能好，代码清晰易于扩展&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缺点：对开发人员要求高，需要了解编译原理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cobar中也实现了SQL Parser，它在Cobar中的位置可以从它的架构图中看到&lt;img data-ratio=&quot;0.7218259629101283&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0SX0fpWpoM3X4icPviaIabjIrqp9Jfcs8HddLQsx0Guk7bpfKgIeQiaj03KwzbL9FMicWsWlmVuQjBOxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;701&quot;/&gt;SQL Parser之后是SQL Router，可以推断出SQL Parser解析出AST的目的是为了分库分表的路由功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cobar的SQL Parser也经历了三个版本的迭代，本质是性能考虑：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一版：基于JavaCC生成SQL parser，性能较差，优化不方便&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二版：仿照ANTLR生成的parser结构手写，中间对象过多&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三版：基于LL(2)识别器手写&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文不对SQL Parser做过多的介绍，有兴趣可以参考这篇文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247503815&amp;amp;idx=1&amp;amp;sn=aede00e2c367fa4d07e1773e91a980f9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《比开源快30倍的自研SQL Parser设计与实践》&lt;/a&gt;，这篇文章我也仔细阅读了几遍，附上总结的脑图：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://github.com/lkxiaolou/reading/tree/main/xmind&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Cobar AST&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cobar中的SQL Parser将SQL解析为AST，为了直观感受，先举个例子：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;select id,type from goods as g where type in (select type from type_config where status = 0)&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过Cobar SQL Parser后，生成了如下AST对象：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7457627118644068&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0SX0fpWpoM3X4icPviaIabjIrdRnVLSgbia70UVhBL8TXjHX5Wnhbic8KWj6VRxXuFpwLJ0mT0pW7mhAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;826&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个AST的根节点就是select语句，然后每个属性都是叶子节点，叶子节点的属性再分出叶子节点。可能有点绕，需要从代码层面感受。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AST的Node定义如下，这里只有个accept方法，是为了遍历这棵树，暂时不管，后面会说到：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ASTNode&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;accept&lt;/span&gt;&lt;span&gt;(SQLASTVisitor visitor)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现这个ASTNode主要有这几个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;SQLStatement：SQL语句，比如select、update、insert等语句，体现在上图的DMLSelectStatement&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Expression：表达式，比如and、or、比较等语句，体现在InExpression、ComparisionEqualsExpression、LiteralNumber、Identifier&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TableReference：table相关语句，体现在TableReferences、TableRefFactor&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以ComparisionEqualsExpression的实现为例&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1224944320712695&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0SX0fpWpoM3X4icPviaIabjIrjYQ6jgI2Kibu8M1aGgRvicuXROHXBVvbnfmahbPMpHEZ4ria5qbFTcPaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;449&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中1是比较的左右表达式，2是判断符，这里是“=”，3是计算该表达式。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;evaluationInternal如何实现？其实表达式被结构化和穷举之后这个问题变得简单，比如这里只需要取左右的数值，进行是否相等的比较即可。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;AST操作&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了如上对AST的了解，接下来看对AST的操作，最基本的是遍历，利用ASTNode的accept，需要实现&lt;code&gt;SQLASTVisitor&lt;/code&gt;接口，这个SQLASTVisitor定义如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;2.067750677506775&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0SX0fpWpoM3X4icPviaIabjIrso1TwoTN16w2WDYaWjicxVH9fe6icPra0OReUtxYTYxS362nkYiaHIliaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;369&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实是利用了java的多态，对每种ASTNode都定义了visit方法，遍历时不同对象对应到不同方法上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如&lt;code&gt;MySQLOutputASTVisitor&lt;/code&gt;可以遍历AST，将AST还原为SQL输出，只需要这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SQLStatement stmt = SQLParserDelegate.parse(sql);&lt;br/&gt;StringBuilder s = new StringBuilder();&lt;br/&gt;stmt.accept(new MySQLOutputASTVisitor(s));&lt;br/&gt;System.out.println(s.toString());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样执行会输出&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;SELECT id, type FROM goods AS G WHERE type IN (SELECT type FROM type_config WHERE status = 0)&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SQLParserDelegate.parse(sql)解析出来为DMLSelectStatement对象，它的visit方法实现如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;accept&lt;/span&gt;&lt;span&gt;(SQLASTVisitor visitor)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    visitor.visit(&lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再看MySQLOutputASTVisitor的visit(DMLSelectStatement node)实现：代码比较长，这里就不贴了，总体思路是遇到叶子节点就直接按格式存入StringBuilder中，否则继续调用相应节点的accept继续遍历，是一种深度遍历的思想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以参考MySQLOutputASTVisitor编写符合自己需求的遍历器。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;AST的应用&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分库分表&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cobar中利用AST可以获取table名、列名、比较的值进行分库分表，这也是Cobar最重要的功能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;SQL特征生成&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，我了解的AST还可以对原始SQL生成SQL特征，比如原始SQL是这样：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;select id, name, age from user as u where age &amp;gt;= 20&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者是&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;select id, name, age from user as u where age &amp;gt;= 30&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;都可以被归一化为&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;select id, name, age from user as u where age &amp;gt;= ?&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在进行SQL慢查询或其他的统计、针对SQL进行限流时非常有用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;危险SQL拦截&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线上写了一条没有where条件的update或delete，这时可以利用AST进行表达式计算，对没有where条件和where条件恒为true的SQL进行拦截。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最后&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文从SQL AST的来源、结构、遍历原理、应用等方面进行介绍，相信看完文章会对SQL AST有了初步的了解，如果想进一步了解可以参考Cobar项目中的单元测试进行实际的演示感受。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;搜索关注微信公众号&quot;捉虫大师&quot;，后端技术分享，架构设计、性能优化、源码阅读、问题排查、踩坑实践。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0SX0fpWpoM3X4icPviaIabjIrorjdCjkgWW5KiaX1H4s4ic0yFRxuf5qrY0euaUZgNQHkMM9B8QfXOHHw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>