<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>35128aad9b33a273ba2024109b87a8ed</guid>
<title>sonic ：基于 JIT 技术的开源全场景高性能 JSON 库</title>
<link>https://toutiao.io/k/p9vuoir</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;项目仓库：https://github.com/bytedance/sonic&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;sonic 是字节跳动&lt;strong&gt;开源&lt;/strong&gt;的一款 &lt;strong&gt;Golang JSON 库&lt;/strong&gt;，基于即时编译（Just-In-Time Compilation）与向量化编程（Single Instruction Multiple Data）技术，大幅提升了 Go 程序的 JSON 编解码性能。同时结合 lazy-load 设计思想，它也为不同业务场景打造了一套全面高效的 API。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自 2021 年 7 月份发布以来， sonic 已被抖音、今日头条等业务采用，累计为字节跳动&lt;strong&gt;节省了数十万 CPU 核&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为什么要自研 JSON 库&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JSON（JavaScript Object Notation） 以其简洁的语法和灵活的自描述能力，被广泛应用于各互联网业务。但是 JSON 由于本质是一种文本协议，且没有类似 Protobuf 的强制模型约束（schema），编解码效率往往十分低下。再加上有些业务开发者对 JSON 库的不恰当选型与使用，最终导致服务性能急剧劣化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在字节跳动，我们也遇到了上述问题。根据此前统计的公司 CPU 占比 TOP 50 服务的性能分析数据，JSON 编解码开销总体接近 10%，单个业务占比甚至超过 40%，提升 JSON 库的性能至关重要。因此我们对业界现有 Go JSON 库进行了一番评估测试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，根据主流 JSON 库 API，我们将它们的使用方式分为三种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;泛型（generic）编解码&lt;/strong&gt;：JSON 没有对应的 schema，只能依据自描述语义将读取到的 value 解释为对应语言的运行时对象，例如：JSON object 转化为 Go map[string]interface{}；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;定型（binding）编解码&lt;/strong&gt;：JSON 有对应的 schema，可以同时结合模型定义（Go struct）与 JSON 语法，将读取到的 value 绑定到对应的模型字段上去，同时完成数据解析与校验；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;查找（get）&amp;amp; 修改（set）&lt;/strong&gt;：指定某种规则的查找路径（一般是 key 与 index 的集合），获取需要的那部分 JSON value 并处理。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，我们根据样本 JSON 的 key 数量和深度分为三个量级：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;小（small）&lt;/strong&gt;：400B，11 key，深度 3 层；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;中（medium）&lt;/strong&gt;：110KB，300+ key，深度 4 层（实际业务数据，其中有大量的嵌套 JSON string)；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;大（large）&lt;/strong&gt;：550KB，10000+ key，深度 6 层。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;352&quot; data-backw=&quot;558&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;352&quot; data-ratio=&quot;0.6304347826086957&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOiaTEXRLjJ4sDdFQGTvfP2A0gXCYzMFBsFFl3n4ESrRtJzQ2IYiaFpolZGapib9lUmZibOUqYJ7tXMb1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1748&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不同数据量级下 JSON 库性能表现&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果显示：&lt;strong&gt;目前这些 JSON 库均无法在各场景下都保持最优性能，即使是当前使用最广泛的第三方库 json-iterator，在泛型编解码、大数据量级场景下的性能也满足不了我们的需要&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JSON 库的基准编解码性能固然重要，但是对不同场景的最优匹配更关键 —— 于是我们走上了自研 JSON 库的道路。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;开源库 sonic 技术原理&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 JSON 业务场景复杂，指望通过单一算法来优化并不现实。于是在设计 sonic 的过程中，我们借鉴了其他领域/语言的优化思想（不仅限于 JSON），将其融合到各个处理环节中。其中较为核心的技术有三块：&lt;strong&gt;JIT、lazy-load&lt;/strong&gt; 与 &lt;strong&gt;SIMD&lt;/strong&gt; 。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;JIT&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于有 schema 的&lt;strong&gt;定型编解码&lt;/strong&gt;场景而言，很多运算其实不需要在“运行时”执行。这里的“运行时”是指程序真正开始解析 JSON 数据的时间段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子，如果业务模型中确定了某个 JSON key 的值一定是布尔类型，那么我们就可以在序列化阶段直接输出这个对象对应的 JSON 值（‘true’或‘false’），并不需要再检查这个对象的具体类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;sonic-JIT 的核心思想就是：&lt;strong&gt;将模型解释与数据处理逻辑分离，让前者在“编译期”固定下来&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种思想也存在于标准库和某些第三方 JSON 库，如 json-iterator 的函数组装模式：把 Go struct 拆分解释成一个个字段类型的编解码函数，然后组装并缓存为整个对象对应的编解码器（codec），运行时再加载出来处理 JSON。但是这种实现难以避免转化成大量 interface 和 function 调用栈，随着 JSON 数据量级的增长，function-call 开销也成倍放大。只有&lt;strong&gt;将模型解释逻辑真正编译出来&lt;/strong&gt;，实现 stack-less 的执行体，才能最大化 schema 带来的性能收益。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业界实现方式目前主要有两种：&lt;strong&gt;代码生成 code-gen&lt;/strong&gt;（或&lt;strong&gt;模版 template&lt;/strong&gt;）和 &lt;strong&gt;即时编译 JIT&lt;/strong&gt;。前者的优点是库开发者实现起来相对简单，缺点是增加业务代码的维护成本和局限性，无法做到秒级热更新——这也是代码生成方式的 JSON 库受众并不广泛的原因之一。JIT 则将编译过程移到了程序的加载（或首次解析）阶段，只需要提供 JSON schema 对应的结构体类型信息，就可以一次性编译生成对应的 codec 并高效执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;sonic-JIT 大致过程如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;321&quot; data-backw=&quot;558&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;321&quot; data-ratio=&quot;0.575925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5EcwYhllQOiaTEXRLjJ4sDdFQGTvfP2A0X6sJicMXefj3x9mE5GmnRb4KI4GZKiasuCU5q1h8MRvjWibAOhwPSR2Yg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;sonic-JIT 体系&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;初次运行时，基于 Go 反射来获取需要编译的 schema 信息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;结合 JSON 编解码算法生成一套自定义的中间代码 OP codes；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将 OP codes 翻译为 Plan9 汇编；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用第三方库 golang-asm 将 Plan 9 转为机器码；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将生成的二进制码注入到内存 cache 中并封装为 go function；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;后续解析，直接根据 type ID （rtype.hash）从 cache 中加载对应的 codec 处理 JSON。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从最终实现的结果来看，sonic-JIT 生成的 codec 性能不仅好于 json-iterator，甚至超过了代码生成方式的 easyjson（见后文“性能测试”章节）。这一方面跟底层文本处理算子的优化有关（见后文“SIMD &amp;amp; asm2asm”章节），另一方面来自于 sonic-JIT 能控制底层 CPU 指令，在运行时建立了一套独立高效的 ABI（Application Binary Interface）体系：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;将使用频繁的变量放到固定的寄存器上（如 JSON buffer、结构体指针），尽量避免 memory load &amp;amp; store；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自己维护变量栈（内存池），避免 Go 函数栈扩展；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动生成跳转表，加速 generic decoding 的分支跳转；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用寄存器传递参数（当前 Go Assembly 并未支持，见“SIMD &amp;amp; asm2asm”章节）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Lazy-load&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于大部分 Go JSON 库，泛型编解码是它们性能表现最差的场景之一，然而由于业务本身需要或业务开发者的选型不当，它往往也是被应用得最频繁的场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泛型编解码性能差仅仅是因为没有 schema 吗？其实不然。我们可以对比一下 C++ 的 JSON 库，如 rappidjson、simdjson，它们的解析方式都是泛型的，但性能仍然很好（simdjson 可达 2GB/s 以上）。标准库泛型解析性能差的根本原因在于&lt;strong&gt;它采用了 Go 原生泛型——interface（map[string]interface{}）作为 JSON 的编解码对象&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这其实是一种糟糕的选择：首先是数据反序列化的过程中，map 插入的开销很高；其次在数据序列化过程中，map 遍历也远不如数组高效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回过头来看，JSON 本身就具有完整的自描述能力，如果我们用一种与 JSON AST 更贴近的数据结构来描述，不但可以让转换过程更加简单，甚至可以实现按需加载（lazy-load）——这便是 sonic-ast 的核心逻辑：&lt;strong&gt;它是一种 JSON 在 Go 中的编解码对象，用 node {type, length, pointer} 表示任意一个 JSON 数据节点，并结合树与数组结构描述节点之间的层级关系&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;623&quot; data-backw=&quot;558&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;359&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;401&quot; data-ratio=&quot;1.117794486215539&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOiaTEXRLjJ4sDdFQGTvfP2A0FHyUaCytibObOKKqycXdMmysapbE8FbkeAxZpTI9mYDrbt6ibeTWXEZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;399&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;sonic-ast 结构示意&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;sonic-ast 实现了一种有状态、可伸缩的 JSON 解析过程：当使用者 get 某个 key 时，sonic 采用 skip 计算来轻量化跳过要获取的 key 之前的 json 文本；对于该 key 之后的 JSON 节点，直接不做任何的解析处理；仅使用者真正需要的 key 才完全解析（转为某种 Go 原始类型）。由于节点转换相比解析 JSON 代价小得多，在并不需要完整数据的业务场景下收益相当可观。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然 skip 是一种轻量的文本解析（处理 JSON 控制字符“[”、“{”等），但是使用类似 gjson 这种纯粹的 JSON 查找库时，往往会有相同路径查找导致的重复开销。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对该问题，sonic 在对于子节点 skip 处理过程增加了一个步骤，将跳过 JSON 的 key、起始位、结束位记录下来，分配一个 Raw-JSON 类型的节点保存下来，这样二次 skip 就可以直接基于节点的 offset 进行。同时 sonic-ast 支持了节点的更新、插入和序列化，甚至支持将任意 Go types 转为节点并保存下来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换言之，sonic-ast 可以作为一种通用的泛型数据容器替代 Go interface，在&lt;strong&gt;协议转换、动态代理&lt;/strong&gt;等服务场景有巨大潜力。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;SIMD &amp;amp; asm2asm&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论是定型编解码场景还是泛型编解码场景，核心都离不开 JSON 文本的处理与计算。其中一些问题在业界已经有比较成熟高效的解决方案，如浮点数转字符串算法 Ryu，整数转字符串的查表法等，这些都被实现到 sonic 的底层文本算子中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一些问题逻辑相对简单，但是可能会面对较大数量级的文本，如 JSON string 的 unquote\quote 处理、空白字符的跳过等。此时我们就需要某种技术手段来提升处理能力。SIMD 就是这样一种用于并行处理大规模数据的技术，目前大部分 CPU 已具备 SIMD 指令集（例如 Intel AVX），并且在 simdjson 中有比较成功的实践。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是一段 sonic 中 skip 空白字符的算法代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;#if USE_AVX2&lt;/span&gt;&lt;br/&gt;    // 一次比较比较32个字符&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; (likely(nb &amp;gt;= 32)) {&lt;br/&gt;        // vmovd 将单个字符转成YMM&lt;br/&gt;        __m256i x = _mm256_load_si256 ((const void *)sp);&lt;br/&gt;        // vpcmpeqb 比较字符，同时为了充分利用CPU 超标量特性使用4 倍循环&lt;br/&gt;        __m256i a = _mm256_cmpeq_epi8 (x, _mm256_set1_epi8(&lt;span&gt;&#x27; &#x27;&lt;/span&gt;));&lt;br/&gt;        __m256i b = _mm256_cmpeq_epi8 (x, _mm256_set1_epi8(&lt;span&gt;&#x27;\t&#x27;&lt;/span&gt;));&lt;br/&gt;        __m256i c = _mm256_cmpeq_epi8 (x, _mm256_set1_epi8(&lt;span&gt;&#x27;\n&#x27;&lt;/span&gt;));&lt;br/&gt;        __m256i d = _mm256_cmpeq_epi8 (x, _mm256_set1_epi8(&lt;span&gt;&#x27;\r&#x27;&lt;/span&gt;));&lt;br/&gt;        // vpor 融合4次结果&lt;br/&gt;        __m256i u = _mm256_or_si256   (a, b);&lt;br/&gt;        __m256i v = _mm256_or_si256   (c, d);&lt;br/&gt;        __m256i w = _mm256_or_si256   (u, v);&lt;br/&gt;        // vpmovmskb  将比较结果按位展示&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; ((ms = _mm256_movemask_epi8(w)) != -1) {&lt;br/&gt;            _mm256_zeroupper();&lt;br/&gt;            // tzcnt 计算末尾零的个数N&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; sp - ss + __builtin_ctzll(~(uint64_t)ms);&lt;br/&gt;        }&lt;br/&gt;        /* move to next block */&lt;br/&gt;        sp += 32;&lt;br/&gt;        nb -= 32;&lt;br/&gt;    }&lt;br/&gt;    /* clear upper half to avoid AVX-SSE transition penalty */&lt;br/&gt;    _mm256_zeroupper();&lt;br/&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;sonic 中 strnchr() 实现（SIMD 部分）&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发者们会发现这段代码其实是用 C 语言编写的 —— 其实 sonic 中绝大多数文本处理函数都是用 C 实现的：一方面 SIMD 指令集在 C 语言下有较好的封装，实现起来较为容易；另一方面这些 C 代码通过 clang 编译能充分享受其编译优化带来的提升。为此我们开发了一套 x86 汇编转 Plan9 汇编的工具 asm2asm，将 clang 输出的汇编通过 Go Assembly 机制静态嵌入到 sonic 中。同时在 JIT 生成的 codec 中我们利用 asm2asm 工具计算好的 C 函数 PC 值，直接调用 CALL 指令跳转，从而绕过 Go Assembly 不能寄存器传参的限制，压榨最后一丝 CPU 性能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;其它&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了上述提到的技术外，sonic 内部还有很多的细节优化，比如使用 RCU 替换 sync.Map 提升 codec cache 的加载速度，使用内存池减少 encode buffer 的内存分配，等等。这里限于篇幅便不详细展开介绍了，感兴趣的同学可以自行搜索阅读 sonic 源码进行了解。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;性能测试&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们以前文中的不同测试场景进行测试，得到结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;259&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.46440677966101696&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOiaTEXRLjJ4sDdFQGTvfP2A0gaCk2VdgAN3nvdlQuZSkrRtETiazdkd1GaAKsN2xEaaCqcBHU2khDTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3245&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;小数据（400B，11 个 key，深度 3 层）&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;251&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.44998461064943057&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOiaTEXRLjJ4sDdFQGTvfP2A0SGPLjjBa016SS1nMN9dXoCILibLroR6cJX9WicgKsweb61wGMzl28oiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3249&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;中数据（110KB，300+ key，深度 4 层）&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;250&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.44745762711864406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOiaTEXRLjJ4sDdFQGTvfP2A0sEuykFSIIsEWWDGx7ibqCQHgGzX8aqzm68Wic72a22sWByKnLNuX9sPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3245&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大数据（550KB，10000+ key，深度 6 层）&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到 sonic 在几乎所有场景下都处于领先（sonic-ast 由于直接使用了 Go Assembly 导入的 C 函数导致小数据集下有一定性能折损）&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;平均编码性能较 json-iterator 提升 240% ，平均解码性能较 json-iterator 提升 110% ；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;单 key 修改能力较 sjson 提升 75% 。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且在生产环境中，sonic 中也验证了良好的收益，服务高峰期占用核数减少将近三分之一：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;338&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.60625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOiaTEXRLjJ4sDdFQGTvfP2A0ZibGPQxV6yFavpQKg3ODEgZyKkMwPRAayC3z05RZibEOknDibjibx5Tdgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;字节某服务在 sonic 上线前后的 CPU 占用（核数）对比&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;结语&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于底层基于汇编进行开发，sonic 当前仅支持 amd64 架构下的 darwin/linux 平台 ，后续会逐步扩展到其它操作系统及架构。除此之外，我们也考虑将 sonic 在 Go 语言上的成功经验移植到不同语言及序列化协议中。目前 sonic 的 C++ 版本正在开发中，其定位是基于 sonic 核心思想及底层算子实现一套通用的高性能 JSON 编解码接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;近日，sonic 发布了第一个大版本 v1.0.0，标志着其除了可被企业灵活用于生产环境，也正在积极响应社区需求、拥抱开源生态。我们期待 sonic 未来在使用场景和性能方面可以有更多突破，欢迎开发者们加入进来贡献 PR，一起打造业界最佳的 JSON 库！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;相关链接&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目地址：https://github.com/bytedance/sonic&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BenchMark：https://github.com/bytedance/sonic/blob/main/bench.sh&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d82b3112b8fffa5bb22b7572ea30a579</guid>
<title>也许你该找个人聊聊？</title>
<link>https://toutiao.io/k/1qrbh71</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bc6d5a44d41be344a0cfc26b993ef8b7</guid>
<title>十亿用户的系统！</title>
<link>https://toutiao.io/k/pqsnqhd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;前几天有朋友问了这么个问题，这是一道面试题：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;十亿用户的系统，用户可以用手机号、账号、邮箱、昵称等登录，这样的表结构应该怎样设计？登录流程大致是怎样的？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好家伙！十亿用户的系统……&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在我看来，这道面试题主要是想考察两点：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;面试者是否做过相关业务或者有非常扎实的数据库表设计能力&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;面试者是否真的了解在高并发下应该怎么分库分表&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们先看第一个问题：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;表结构怎么设计？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当出现多种登录方式的时候，就意味着一个用户对应的账号可能会有若干个。现在可能用手机和昵称登录，以后就可能用邮箱登录，甚至将来还可能通过微信、QQ、微博等第三方渠道登录。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先，直觉上，咱们第一个冒出的念头是什么？对我个人来说，就是本能的想着，如果是多种登录类型，就在存储用户信息的表上加多个字段。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如，支持手机号登录，就加一个手机号字段，支持邮箱登录，就加一个邮箱字段等等。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;表结构类似下面这样：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;id&lt;span class=&quot;code-snippet__params&quot;&gt;|name|&lt;/span&gt;phone&lt;span class=&quot;code-snippet__params&quot;&gt;|email|&lt;/span&gt;nick_name&lt;span class=&quot;code-snippet__params&quot;&gt;|desc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是仔细一想，这种设计存在问题：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;当用户登录的时候，我们需要根据用户的登录类型，先要知道去查找用户表的哪个字段才可以进行登录逻辑判断。例如，用户登录用手机号了，我们就要知道去表里查找对应的 phone 字段去校验登录；登录用邮箱了，我们就要知道去表里查找对应的 email 字段才可以。这样做，代码逻辑会很复杂。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;再增加一种登录方式的时候，我们还得给数据库的表里再增加一个字段，同时还得修改登录的代码。这种修改一不小心，还很容易修改不完善，造成线上 bug。每增加一种登录方式，就搞一次这种流程，成本有点过高了。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因此，我们最好能找到另一种更灵活的办法。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;更灵活的办法就意味着，我们设计的表，必须易扩展。怎么叫易扩展？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;加记录比加字段要更容易扩展。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样的话，我们只能想想是不是考虑列变行的思路了，即添加字段变成添加行记录来解决。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因此方案如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;创建一张授权表，专门用来处理登录。当新增登录类型的时候，只需要考虑增加一条记录即可：记录登录类型、登录名称以及相关密码，同时有个 user_id 字段，去和用户表做关联。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6168032786885246&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KS7zNT0Jvu2ianT9eGK5kh2WbNoCEkC6mDD2VOcwtm6k788PqqiaCKpkJFzOUFjgBMUrj5HKmCjlkPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;976&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;用户表就存储一些非登录相关的额外信息即可。像这样：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9400630914826499&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KS7zNT0Jvu2ianT9eGK5kh2Wmmo4phibJqq0YUHPfIxOugPiax4uKIv4ofh9Nl3jaJT6qF7YyGLWJFEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样设计后，很明显就做到了易扩展。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假如我自己有两种登录方式，授权表（Author）的数据：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.17220543806646527&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQysy0HuQxRLZ4HSwT66pXeKFbLoRMV4bBvssia9yXT87bFG7Fg4BCKWWXgvyuTVfvqGn4Siatygopicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;993&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;用户表（User）的数据：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.12185297079556898&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQysy0HuQxRLZ4HSwT66pXeKfCkliclic09AxYviahwHhaUwqSUOXGWX0swLc0Jp91Sv4QiaQ34dW0kLOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;993&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这种方案的缺点就是，改密码的时候，得一起改动。需要注意。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;说完表结构后，再来说下一个问题：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;十亿用户系统的登录流程&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;乍一看，这道题里有十亿用户，那基本可以算是高并发、大数据了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因为十亿用户，哪怕有百分之一的活跃用户，也是千万级别的。所以，在这样的情况下，必然需要考虑分库分表。分库是为了应对高并发，分表则是为了应对大数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以 MySQL 为例， 一般来讲，在 4核CPU/8G内存/RAID10 的普通硬盘的服务器配置下，一台 &lt;span&gt;M&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;SQL&lt;/span&gt; 库能一直可靠运行的可承载压力是 1000TPS 左右。一张通常的 20 个字段以内的表，能保证查询性能没有大的下降的话，可承载的数据量大致是 1000 万条数据左右。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以，咱们分表的时候就要尽量控制表数据不超过一千万条数据。也因此，十亿用户，分表就是分 100 张表。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时呢，咱们说了，一台库大概能承载的可靠运行并发数是 1000TPS 左右。分库一般来说，100 张表分 10 个库，每个库 10 张表，就很绰绰有余了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好，现在问题来了，&lt;/span&gt;&lt;span&gt;分库分表的策略是什么呢？就是按什么分呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一般是按照 user_id 分。假如我们要分 10 个库 100 张表是吧， 一般来说就是先通过 user_id mod 10 去定义好库，再通过 user_id mod 100 定义好表。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如 user_id mod 10 = 3，user_id mod 100 = 33，那么这个用户的数据就被定位到了数据库 3 中的 33 号表。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意，这里又来了一个问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假设一个 user_id = 100 会怎么样？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;user_id  mod 10 = 0，user_id mod 100 = 0。它会被分在 0 号库，0 号表。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那如果我想分到 1 号库，0 号表呢，有对应的 user_id 吗？&lt;/span&gt;&lt;span&gt;是没有的。为什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因为当一个 user_id mod 100 = 0 时，这个 user_id mod 10 也一定为 0 。所以，不会存在 1 号库，0 号表的情况。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以，我们还需要对库进行调整，要把库变成 11 个库，然后呢，每个库有 100 张表。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;原因就是：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;库数和表数之间不能存在公约数，也就是他们需要互质，只有这样，我们分配数据的时候，才会尽量均匀。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好了，当 user_id 分完之后，你会发现，按照咱们的设计，只能解决 User 表的问题。那登录在哪里？该怎么办？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;咱们继续看，前面说了，登录逻辑是靠 Author 表来验证。那 Author 表数据大，也得分库分表啊？它怎么分？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其实挺简单，分库分表的时候，我们根据 Author 表的 user_name 的 Hash 去分。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假设有个用户的 user_name 是 abc，然后将这个 abc 进行下 hash，再除以库的数量。现在是 11 个库，所以就是 hash(abc) mod 11 这样得到库的编号，然后再 hash(abc) mod 100 得到表的编号。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;于是，当我们登录的时候，流程如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;输入 abc 和密码；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;验证出账号类型；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将信息传递给服务器；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务器在数据库层之上会有一个路由层，根据 hash(abc) mod 11/100 定位数据库和表；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;查询 Author 表验证。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这道题到此为止，算是回答完毕了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，我要在此再多说一点东西。面试题这里，其实是限制死了，只让你考虑数据库。但是在实际工作当中呢，对于这种高并发、大数据的解决，方向往往是多重索引，加外置缓存。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因为，在面试题中，我们只需要考虑登录问题。而在实际工作里，我们往往还需要考虑数据重用、资源耗费等问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以，实际上，很多这种高并发、大数据的登录，我们根据手头的资源，虽然依然会使用分库分表，但是，往往还会采用 ElasticSearch 缓存一些用户基本信息和用户数据所在的数据库和表的地址信息，将他们作为索引，去真正的做相关登录业务行为。并根据用户字段的使用热度，会在登录时，把一些用户关键字段读取出来，放到外置的 Redis 缓存中，供以后重用。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样做的好处就是，分库分表我们可以根据资源随意增加减少，只需要到时候修改下 ElasticSearch 中的索引信息即可。同时，有了 Redis，也能减少后面分库分表资源的消耗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651506905&amp;amp;idx=2&amp;amp;sn=be4dc72831a156ff656ca5c40e643944&amp;amp;chksm=bd25a4a68a522db0b135b5fb87ffc5b76c27aeeaf9407a3ca7beadda7b47b61e06a963556516&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;B站高可用架构实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;B站高可用架构实践&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651501882&amp;amp;idx=1&amp;amp;sn=5905a566d095ab63f2d3505b7fbfdd33&amp;amp;chksm=bd25d9458a5250537bd86cd82d3b8194bf14811e8a4e6888865fe528eee43d98570b0dc4dbc7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Kafka 架构设计的任督二脉&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Kafka 架构设计的任督二脉&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651501882&amp;amp;idx=1&amp;amp;sn=5905a566d095ab63f2d3505b7fbfdd33&amp;amp;chksm=bd25d9458a5250537bd86cd82d3b8194bf14811e8a4e6888865fe528eee43d98570b0dc4dbc7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Kafka 架构设计的任督二脉&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651501881&amp;amp;idx=1&amp;amp;sn=fedcb35a5a47b3a2ce9bef2073482429&amp;amp;chksm=bd25d9468a525050d6587dd3651913ccebf98e1b85a3acd7a18695750ca574719ddd52584e0c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;ElasticSearch让人叹为观止的分布式系统架构设计&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;ElasticSearch让人叹为观止的分布式系统架构设计&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>71f11aea97679613d0d0e02530d7b567</guid>
<title>TCP网络那点破事！三次握手、四次挥手、TIME-WAIT、HTTP 2.0 ....</title>
<link>https://toutiao.io/k/igh5e8c</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;10&quot; data-source-title=&quot;&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;来自公众号：&lt;span&gt;微观技术&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是Tom哥~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天主要给各位分享&lt;code&gt;TCP网络&lt;/code&gt;的一些常见知识点，日常工作或面试会经常遇到。考虑内容篇幅不小，建议先收藏，慢慢咀嚼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有帮助，也请转给身边的朋友们，”独乐乐不如众乐乐“&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，来个目录，让大家对文章内容先有个直观了解&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.024945770065076&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdRomH3FoIUyOnHOhxmENBvYWY9TIB7H14hiaic9lK8tjQN1gbQusSaQgWOvyYC9icVTPa0LX7W5ZKDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;922&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;网络的七层模型，简单介绍每层的作用？&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案：分为7层，从下到上依次是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;应用层：计算机用户与网络之间的接口，常见的协议有：HTTP、FTP、 SMTP、TELNET&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;表示层：数据的表示、安全、压缩。将应用处理的信息转换为适合网络传输的格式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;会话层：建立和管理本地主机与远程主机之间的会话。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;传输层：定义传输数据的&lt;code&gt;协议端口号&lt;/code&gt;，以及流控和差错校验，保证报文能正确传输。协议有TCP、UDP&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;网络层：路由选择算法，进行逻辑地址寻址，实现不同网络之间的最佳路径选择。协议有IP、ICMP&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据链路层：接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层。这一层的数据叫做帧。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;物理层：建立、维护、断开物理连接。传输比特流（将1、0转化为电流强弱来进行传输，到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.63125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdRomH3FoIUyOnHOhxmENBvMYUsbNmTZ8lezG0pEZ0X7whHQVyO6MbxS1hzOpzBDyPZDR5cl1NO4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;TCP 报文首部有哪些字段?&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案：&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6567425569176882&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdRomH3FoIUyOnHOhxmENBvaZ1PKzDu2mMvjvwlT1M5n9NR9F72xajuz4IicibJheSacQOFM0j3jxRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;571&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;源端口、目的端口：各占2个字节，表示数据从哪个进程来，去往哪个进程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;序号（Sequence Number）：占4个字节，TCP连接中传送的数据每一个字节都会有一个序号&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;确认号（Acknowledgement Number）：占4个字节，另一方发送的tcp报文段的响应&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据偏移：头部长度，占4个字节，表示TCP报文段的数据距离TCP报文段的起始处有多远。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;6位标志位：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;URG：紧急指针是否有效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ACK：表示确认号是否有效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;PSH：提示接收端应用程序立刻将数据从tcp缓冲区读走&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RST：表示要求对方重新建立连接&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SYN：这是一个连接请求或连接接受的报文&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;FIN：告知对方本端要关闭连接&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;窗口大小：占4个字节，用于TCP流量控制。告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;校验和：占2个字节，由发送端填充，接收端对TCP报文段执行CRC算法以检验TCP报文段在传输过程中是否损坏。检验的范围包括头部、数据两部分，是TCP可靠传输的一个重要保障。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;紧急指针：占2个字节，一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一个字节的序号，用于发送端向接收端发送紧急数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;TCP 三次握手过程？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：目的是同步连接双方的序列号和确认号，并交换TCP窗口。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一次握手，客户端发送(seq=x)，客户端进入&lt;/span&gt;&lt;code&gt;&lt;span&gt;SYN_SEND&lt;/span&gt;&lt;/code&gt;&lt;span&gt;状态&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二次握手，服务端响应(Seq=y, Ack=x+1)，服务器端就进入&lt;/span&gt;&lt;code&gt;&lt;span&gt;SYN_RCV&lt;/span&gt;&lt;/code&gt;&lt;span&gt;状态。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第三次握手，客户端收到服务端的确认后，发送(Ack=y+1)，客户端进入&lt;/span&gt;&lt;code&gt;&lt;span&gt;ESTABLISHED&lt;/span&gt;&lt;/code&gt;&lt;span&gt;状态。当服务器端接收到这个包时，也进入&lt;/span&gt;&lt;code&gt;&lt;span&gt;ESTABLISHED&lt;/span&gt;&lt;/code&gt;&lt;span&gt;状态。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8194444444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdRomH3FoIUyOnHOhxmENBvsxho6J2Z0LjgdMJibJOgO0qAT6NlQcazaaHSnWSu2Fj300Ay6PswhWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;为什么是三次握手，而不是两次或四次？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果只有两次握手，那么服务端向客户端发送 &lt;/span&gt;&lt;code&gt;&lt;span&gt;SYN/ACK&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 报文后，就会认为连接建立。但是如果客户端没有收到报文，那么客户端是没有建立连接的，这就导致服务端会浪费资源。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用两次握手无法建立 TCP 连接，而使用三次握手是建立连接所需要的最小次数&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;TCP 四次挥手的过程？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一次挥手：客户端向服务端发送连接释放报文&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二次挥手：服务端收到连接释放报文后，立即发出确认报文。这时 TCP 连接处于半关闭状态，即客户端到服务端的连接已经释放了，但是服务端到客户端的连接还未释放。表示客户端已经没有数据发送了，但是服务端可能还要给客户端发送数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三次挥手：服务端向客户端发送连接释放报文&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第四次挥手：客户端收到服务端的连接释放报文后，立即发出确认报文。此时，客户端就进入了 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TIME-WAIT&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 状态。注意此时客户端到 TCP 连接还没有释放，必须经过 2*MSL（最长报文段寿命）的时间后，才进入&lt;/span&gt;&lt;code&gt;&lt;span&gt;CLOSED&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 状态。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.725576289791438&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdRomH3FoIUyOnHOhxmENBv7BicFBax3vfnWmRNC5p9Hx3gYiaibfIpPprOChqFcf7iawVF369XYX6RSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;911&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;为什么需要四次挥手？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：TCP 是&lt;/span&gt;&lt;code&gt;&lt;span&gt;全双工&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。一方关闭连接后，另一方还可以继续发送数据。所以四次挥手，将断开连接分成两个独立的过程。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;客户端 TIME-WAIT ，为什么要等待 2MSL 才进入 CLOSED 状态？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：MSL 是报文段在网络上最大存活时间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;确保 ACK 报文能够到达服务端，从而使服务端正常关闭连接。客户端在发送完最后一个 ACK 报文段后，再经过 2MSL，就可以保证本连接持续的时间内产生的所有报文段都从网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;一台 8G 内存服务器，可以同时维护多少个连接？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：发送、接收缓存各4k，还要考虑socket描述符，一个tcp连接需要占用的最小内存是8k，那么最大连接数为：&lt;/span&gt;&lt;code&gt;&lt;span&gt;8*1024*1024 K / 8 K = 1048576 个&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，即约100万个tcp长连接。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;什么是拆包？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：传输层封包不能太大，基于这个限制，往往以缓冲区大小为单位，将数据拆分成多个 TCP 段（&lt;/span&gt;&lt;code&gt;&lt;span&gt;TCP Segment&lt;/span&gt;&lt;/code&gt;&lt;span&gt;）传输。在接收数据的时候，一个个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TCP 段&lt;/span&gt;&lt;/code&gt;&lt;span&gt;又被重组成原来的数据。简单来讲分为几个过程：拆分——传输——重组。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;什么是粘包？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：解决数据太小问题，防止&lt;/span&gt;&lt;code&gt;&lt;span&gt;多次发送&lt;/span&gt;&lt;/code&gt;&lt;span&gt;占用资源。TCP 协议将它们合并成一个 TCP 段发送，在目的地再还原成多个数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缓冲区是做什么用？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：缓冲区是在内存中开辟的一块区域，目的是缓冲。当应用频繁地通过网卡收、发数据，网卡只能一个一个处理。当网卡忙不过来的时候，数据就需要排队，也就是将数据放入缓冲区。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意：TCP Segment 的大小不能超过缓冲区大小。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;TCP 协议是如何保证数据的顺序？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案：&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.20234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdRomH3FoIUyOnHOhxmENBv5FJQGXYRMxECxFc2Uzjm5vNyia2Bhg3hRFRpfsjWSHNBEfccymJc35w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大数据拆包成多个片段，发送可以保证有序，但是由于网络环境复杂，并不能保证它们到达时也是有序的，为了解决这个问题，对每个片段用&lt;/span&gt;&lt;code&gt;&lt;span&gt;Sequence Number&lt;/span&gt;&lt;/code&gt;&lt;span&gt;编号，接收数据的时候，通过 Seq 进行排序。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意：seq是累计的发送字节数&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;TCP 协议如何解决丢包？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：丢包需要重发，关键是如何判断有没有丢包！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;每一个数据包，接收方都会给发送方发响应。每个 TCP 段发送时，接收方已经接收了多少数据，用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Acknowledgement Number&lt;/span&gt;&lt;/code&gt;&lt;span&gt;（简写ACK） 表示。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意：ack是累计的接收字节数，表示这个包之前的包都已经收到了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;什么是 MSS ?&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：MSS 全称 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Maximun Segment Size&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。是TCP Header 中的可选项（Options），控制了 TCP 段的大小，不能由单方决定，需要双方协商。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;TCP 协议如何控制流量传输速度？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：简单讲通过&lt;/span&gt;&lt;code&gt;&lt;span&gt;滑动窗口&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。发送、接收窗口的大小可以用来控制 TCP 协议的流速。窗口越大，同时可以发送、接收的数据就越多，吞吐量也就越大。但是窗口越大，如果数据发生错误，损失也就越大，因为需要重传越多的数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TCP每个请求都要有响应，如果一个请求没有收到响应，发送方就会认为这次发送出现了故障，会触发重发。为了提升吞吐量，一个TCP段再没有收到响应时，可以继续发送下一个段。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5450081833060556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdRomH3FoIUyOnHOhxmENBvdoNu7Giaza2xicichwJvCpVK5P7pDaxbWPzYcuPWelonKzLNIzgQcibRww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1222&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;窗口区域包含两类数据：已发送未确认、未发送（即将发送）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;窗口中序号最小的分组如果收到 ACK，窗口就会向右滑动&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;滑动窗口的size规格可能会变化，需要从ACK数据包实时取最新值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果最小序号的分组长时间没有收到 ACK，就会触发整个窗口的数据重新发送&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;HTTP 1.0 、1.1 和 HTTP 2.0 有什么区别？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、HTTP 1.0&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;默认是短连接，每次与服务器交互，都需要新开一个连接。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、HTTP 1.1&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;默认持久化连接，建立一次连接，多次请求均由这个连接完成。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、HTTP 2.0&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;二进制分帧：在应用层和传输层之间加了一个二进制分帧层，将所有传输的信息分割为更小的消息和帧（frame），并对它们采用二进制格式的编码。减少服务端的压力，内存占用更少，连接吞吐量更大&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多路复用：允许同时通过单一的HTTP/2.0连接发起多次的请求-响应消息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;头部压缩：采用了&lt;/span&gt;&lt;code&gt;&lt;span&gt;Hpack&lt;/span&gt;&lt;/code&gt;&lt;span&gt;头部压缩算法对Header进行压缩，减少重复发送。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器推送：服务器主动将一些资源推送给浏览器并缓存起来。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;HTTP 与 HTTPS 的区别？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：HTTPS = HTTP + SSL/TLS&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;HTTP 采用明文通讯；端口 80&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;HTTPS 在HTTP的基础上加入了&lt;/span&gt;&lt;code&gt;&lt;span&gt;SSL/TLS协议&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，SSL/TLS依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。端口 443&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;HTTP 协议为什么要设计成无状态？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：HTTP是一种无状态协议，每个请求都是独立执行，请求/响应。这样设计的重要原因是，降低架构设计复杂度，毕竟服务器一旦带上了状态，&lt;/span&gt;&lt;code&gt;&lt;span&gt;扩容、缩容、路由&lt;/span&gt;&lt;/code&gt;&lt;span&gt;都会受到制约。无状态协议不要求服务器在多个请求期间保留每个用户的信息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但，你可能会问，如果有登录要求的业务怎么办？HTTP协议提供扩展机制，Header中增加了Cookie，存储在客户端，每次请求时自动携带，采用空间换时间机制，满足上下请求关联。虽然浪费了些网络带宽，但是减少了复杂度。当然为了减轻网络负担，浏览器会限制Cookie的大小，不同浏览器的限制标准略有差异，如：Chrome 10，限制最多 180个，每个Cookie大小不能超过 4096 bytes&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;HTTPS 的访问流程是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发起一个http请求，告诉服务器自己支持哪些hash算法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务端把自己的信息以&lt;/span&gt;&lt;code&gt;&lt;span&gt;数字证书&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的形式返回给客户端（公钥在证书里面，私钥由服务器持有）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到服务器的响应后会先验证证书的合法性（证书中包含的地址与正在访问的地址是否一致，证书是否过期）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果证书验证通过，就会生成一个随机的&lt;/span&gt;&lt;code&gt;&lt;span&gt;对称密钥&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，用证书的公钥加密。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端将证书公钥加密后的密钥发送给服务端&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端用私钥解密，解密之后就得到客户端的密钥&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后，客户端与服务端就靠密钥完成明文加密、安全通信、对称解密&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;对称加密与非对称加密有什么区别？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对称加密。加密和解密使用同一个密钥。速度快。常用的如：AES、DES&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;非对称加密。公钥与私钥配对出现，公钥对数据加密，私钥对数据解密。常用的如：RSA、DSS&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;TCP 抓包用什么工具？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：Wireshark，应用最广泛的网络协议分析器。功能非常丰富&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持数百个协议&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实时捕获、离线分析&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持 Windows、Linux、macOS、Solaris、FreeBSD、NetBSD等平台；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;界面化操作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持 Gzip&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持 IPSec&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;span&gt;--- EOF ---&lt;/span&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;推荐↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAxNTcyNzAyOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/NW4iaKVI4GNOJHFfxs3Dq0jLTT7riaETbUFsDsjYiaOftPu1tdHm0icq8sgibZo5ZEiaHGbLLxSVrd3B5psBZVwVCdHQ/0?wx_fmt=png&quot; data-nickname=&quot;运维&quot; data-alias=&quot;Operation1024&quot; data-signature=&quot;分享网络管理、网络运维、运维规划、运维开发、Python运维、Linux运维等知识，推广围绕DevOps理念的自动化运维、精益运维、智能运维等优秀实践，让运维工程师更加专注于自动化。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>db2454cca12b8bd42612c040e06b7f9e</guid>
<title>为什么MySQL不建议使用NULL作为列默认值？</title>
<link>https://toutiao.io/k/yksfv0a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常能听到的答案是&lt;code&gt;使用了NULL值的列将会使索引失效&lt;/code&gt;,但是如果实际测试过一下,你就知道&lt;code&gt;IS NULL&lt;/code&gt;会使用索引.所以上述说法有漏洞.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;着急的人拉到最下边看结论&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Preface&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;Null is a special constraint of columns.&lt;br/&gt;The columns in table will be added null constrain if you do not define the column with “not null” key words explicitly&lt;br/&gt;when creating the table.Many programmers like to define columns by default&lt;br/&gt;because of the conveniences(reducing the judgement code of nullibility) what consequently&lt;br/&gt;cause some uncertainty of query and poor performance of database.&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;NULL&lt;/code&gt;值是一种对列的特殊约束,我们创建一个新列时,如果没有明确的使用关键字&lt;code&gt;not null&lt;/code&gt;声明该数据列,&lt;code&gt;Mysql&lt;/code&gt;会默认的为我们添加上&lt;code&gt;NULL&lt;/code&gt;约束.&lt;br/&gt;有些开发人员在创建数据表时,由于懒惰直接使用Mysql的默认推荐设置.(即允许字段使用&lt;code&gt;NULL&lt;/code&gt;值).而这一陋习很容易在使用&lt;code&gt;NULL&lt;/code&gt;的场景中得出不确定的查询结果以及引起数据库性能的下降.&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Introduce&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;Null is null means it is not anything at all,we cannot think of null is equal to ‘’ and they are totally different.&lt;br/&gt;MySQL provides three operators to handle null value:“IS NULL”,“IS NOT NULL”,&quot;&amp;lt;=&amp;gt;&quot; and a function ifnull().&lt;br/&gt;IS NULL: It returns true,if the column value is null.&lt;br/&gt;IS NOT NULL: It returns true,if the columns value is not null.&lt;br/&gt;&amp;lt;=&amp;gt;: It’s a compare operator similar with “=” but not the same.It returns true even for the two null values.&lt;br/&gt;(eg. null &amp;lt;=&amp;gt; null is legal)&lt;br/&gt;IFNULL(): Specify two input parameters,if the first is null value then returns the second one.&lt;br/&gt;It’s similar with Oracle’s NVL() function.&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;NULL&lt;/code&gt;并不意味着什么都没有,我们要注意 &lt;code&gt;NULL&lt;/code&gt; 跟 &lt;code&gt;&#x27;&#x27;&lt;/code&gt;(空值)是两个完全不一样的值.MySQL中可以操作&lt;code&gt;NULL&lt;/code&gt;值操作符主要有三个.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;IS NULL&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;IS NOT NULL&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 太空船操作符,这个操作符很像&lt;code&gt;=&lt;/code&gt;,&lt;code&gt;select NULL&amp;lt;=&amp;gt;NULL&lt;/code&gt;可以返回&lt;code&gt;true&lt;/code&gt;,但是&lt;code&gt;select NULL=NULL&lt;/code&gt;返回&lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;IFNULL&lt;/code&gt; 一个函数.怎么使用自己查吧…反正我会了&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Example&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Null never returns true when comparing with any other values except null with “&amp;lt;=&amp;gt;”.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;NULL&lt;/code&gt;通过任一操作符与其它值比较都会得到&lt;code&gt;NULL&lt;/code&gt;,除了&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; test_null(&lt;br/&gt;    -&amp;gt; &lt;span&gt;id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;    -&amp;gt; &lt;span&gt;name&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;)&lt;br/&gt;    -&amp;gt; );&lt;br/&gt;Query OK, 0 rows affected (0.02 sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; test_null &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&#x27;zlm&#x27;&lt;/span&gt;);&lt;br/&gt;Query OK, 1 row affected (0.00 sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; test_null &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;Query OK, 1 row affected (0.00 sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_null;&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;| id | name |&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;|  1 | zlm  |&lt;br/&gt;|  2 | NULL |&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;2 rows in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_null &lt;span&gt;where&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;Empty &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_null &lt;span&gt;where&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;| id | name |&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;|  2 | NULL |&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_null &lt;span&gt;where&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;| id | name |&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;|  1 | zlm  |&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_null &lt;span&gt;where&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;=&lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;Empty &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_null &lt;span&gt;where&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&amp;lt;&amp;gt;&lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;Empty &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_null &lt;span&gt;where&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&amp;lt;=&amp;gt;&lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;| id | name |&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;|  1 | zlm  |&lt;br/&gt;|  2 | NULL |&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;2 rows in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;//&lt;span&gt;null&lt;/span&gt;&amp;lt;=&amp;gt;&lt;span&gt;null&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;,it&lt;span&gt;&#x27;s equal to &quot;where 1=1&quot;.&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Null means “a missing and unknown value”.Let’s see details below.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NULL代表一个不确定的值,就算是两个NULL,它俩也不一定相等.(像不像C中未初始化的局部变量)&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;IS&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; &lt;span&gt;IS&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;IS&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;IS&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;-----------+---------------+------------+----------------+&lt;/span&gt;&lt;br/&gt;| 0 IS NULL | 0 IS NOT NULL | &#x27;&#x27; IS NULL | &#x27;&#x27; IS NOT NULL |&lt;br/&gt;+&lt;span&gt;-----------+---------------+------------+----------------+&lt;/span&gt;&lt;br/&gt;|         0 |             1 |          0 |              1 |&lt;br/&gt;+&lt;span&gt;-----------+---------------+------------+----------------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;//It&lt;span&gt;&#x27;s not equal to zero number or vacant string.&lt;br/&gt;//In MySQL,0 means fasle,1 means true.&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;SELECT 1 = NULL, 1 &amp;lt;&amp;gt; NULL, 1 &amp;lt; NULL, 1 &amp;gt; NULL;&lt;br/&gt;+----------+-----------+----------+----------+&lt;br/&gt;| 1 = NULL | 1 &amp;lt;&amp;gt; NULL | 1 &amp;lt; NULL | 1 &amp;gt; NULL |&lt;br/&gt;+----------+-----------+----------+----------+&lt;br/&gt;|     NULL |      NULL |     NULL |     NULL |&lt;br/&gt;+----------+-----------+----------+----------+&lt;br/&gt;1 row in set (0.00 sec)&lt;br/&gt;&lt;br/&gt;//It cannot be compared with number.&lt;br/&gt;//In MySQL,null means false,too.&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;It truns null as a result if any expression contains null value.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;任何有返回值的表达式中有&lt;code&gt;NULL&lt;/code&gt;参与时,都会得到另外一个&lt;code&gt;NULL&lt;/code&gt;值.&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;ifnull&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;&#x27;First is null&#x27;&lt;/span&gt;),&lt;span&gt;ifnull&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;+&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;&#x27;First is null&#x27;&lt;/span&gt;),&lt;span&gt;ifnull&lt;/span&gt;(&lt;span&gt;concat&lt;/span&gt;(&lt;span&gt;&#x27;abc&#x27;&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;),&lt;span&gt;&#x27;First is null&#x27;&lt;/span&gt;);&lt;br/&gt;+&lt;span&gt;------------------------------+---------------------------------+--------------------------------------------+&lt;/span&gt;&lt;br/&gt;| ifnull(null,&#x27;First is null&#x27;) | ifnull(null+10,&#x27;First is null&#x27;) | ifnull(concat(&#x27;abc&#x27;,null),&#x27;First is null&#x27;) |&lt;br/&gt;+&lt;span&gt;------------------------------+---------------------------------+--------------------------------------------+&lt;/span&gt;&lt;br/&gt;| First is null                | First is null                   | First is null                              |&lt;br/&gt;+&lt;span&gt;------------------------------+---------------------------------+--------------------------------------------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;//&lt;span&gt;null&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; needs &lt;span&gt;to&lt;/span&gt; be disposed &lt;span&gt;with&lt;/span&gt; &lt;span&gt;ifnull&lt;/span&gt;() &lt;span&gt;function&lt;/span&gt;,what usually causes &lt;span&gt;sql&lt;/span&gt; &lt;span&gt;statement&lt;/span&gt; more complex.&lt;br/&gt;//&lt;span&gt;As&lt;/span&gt; we &lt;span&gt;all&lt;/span&gt; know,MySQL does &lt;span&gt;not&lt;/span&gt; support funcion index.Therefore,&lt;span&gt;indexes&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; the &lt;span&gt;column&lt;/span&gt; may &lt;span&gt;not&lt;/span&gt; be used.That&lt;span&gt;&#x27;s really worse.&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;It’s diffrent when using count(*) &amp;amp; count(null column).&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;count(*)&lt;/code&gt; 或者 &lt;code&gt;count(null column)&lt;/code&gt;结果不同,&lt;code&gt;count(null column)&lt;/code&gt;&amp;lt;=&lt;code&gt;count(*)&lt;/code&gt;.&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(*),&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;name&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; test_null;&lt;br/&gt;+&lt;span&gt;----------+-------------+&lt;/span&gt;&lt;br/&gt;| count(*) | count(name) |&lt;br/&gt;+&lt;span&gt;----------+-------------+&lt;/span&gt;&lt;br/&gt;|        2 |           1 |&lt;br/&gt;+&lt;span&gt;----------+-------------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;//&lt;span&gt;count&lt;/span&gt;(*) &lt;span&gt;returns&lt;/span&gt; &lt;span&gt;all&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;ignore&lt;/span&gt; the &lt;span&gt;null&lt;/span&gt; &lt;span&gt;while&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;name&lt;/span&gt;) &lt;span&gt;returns&lt;/span&gt; the non-&lt;span&gt;null&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;&quot;name&quot;&lt;/span&gt;.&lt;br/&gt;//This will also leads &lt;span&gt;to&lt;/span&gt; uncertainty &lt;span&gt;if&lt;/span&gt; someone &lt;span&gt;is&lt;/span&gt; unaware &lt;span&gt;of&lt;/span&gt; the details above.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;When using distinct,group by,order by,all null values are considered as the same value.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然&lt;code&gt;select NULL=NULL&lt;/code&gt;的结果为&lt;code&gt;false&lt;/code&gt;,但是在我们使用&lt;code&gt;distinct&lt;/code&gt;,&lt;code&gt;group by&lt;/code&gt;,&lt;code&gt;order by&lt;/code&gt;时,&lt;code&gt;NULL&lt;/code&gt;又被认为是相同&lt;code&gt;值&lt;/code&gt;.&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; test_null &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;Query OK, 1 row affected (0.00 sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;distinct&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; test_null;&lt;br/&gt;+&lt;span&gt;------+&lt;/span&gt;&lt;br/&gt;| name |&lt;br/&gt;+&lt;span&gt;------+&lt;/span&gt;&lt;br/&gt;| zlm  |&lt;br/&gt;| NULL |&lt;br/&gt;+&lt;span&gt;------+&lt;/span&gt;&lt;br/&gt;2 rows in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;//Two &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; returned one &lt;span&gt;and&lt;/span&gt; the &lt;span&gt;result&lt;/span&gt; became two.&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; test_null &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;------+&lt;/span&gt;&lt;br/&gt;| name |&lt;br/&gt;+&lt;span&gt;------+&lt;/span&gt;&lt;br/&gt;| NULL |&lt;br/&gt;| zlm  |&lt;br/&gt;+&lt;span&gt;------+&lt;/span&gt;&lt;br/&gt;2 rows in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;//Two &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; were put &lt;span&gt;into&lt;/span&gt; the same group.&lt;br/&gt;//&lt;span&gt;By&lt;/span&gt; &lt;span&gt;default&lt;/span&gt;,&lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; will also &lt;span&gt;sort&lt;/span&gt; the &lt;span&gt;result&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt; &lt;span&gt;row&lt;/span&gt; showed &lt;span&gt;first&lt;/span&gt;).&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[zlm]&amp;gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;,&lt;span&gt;name&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; test_null &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;| id | name |&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;|  2 | NULL |&lt;br/&gt;|  3 | NULL |&lt;br/&gt;|  1 | zlm  |&lt;br/&gt;+&lt;span&gt;----+------+&lt;/span&gt;&lt;br/&gt;3 rows in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;//Three &lt;span&gt;rows&lt;/span&gt; were sorted(two &lt;span&gt;null&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; showed &lt;span&gt;first&lt;/span&gt;).&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;MySQL supports to use index on column which contains null value(what’s different from oracle).&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL中支持在含有&lt;code&gt;NULL&lt;/code&gt;值的列上使用索引,但是&lt;code&gt;Oracle&lt;/code&gt;不支持.这就是我们平时所说的如果列上含有&lt;code&gt;NULL&lt;/code&gt;那么将会使索引失效.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;严格来说,这句话对与MySQL来说是不准确的.&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;(root@localhost mysql3306.sock)[sysbench]&amp;gt;&lt;span&gt;show&lt;/span&gt; &lt;span&gt;tables&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;--------------------+&lt;/span&gt;&lt;br/&gt;| Tables_in_sysbench |&lt;br/&gt;+&lt;span&gt;--------------------+&lt;/span&gt;&lt;br/&gt;| sbtest1            |&lt;br/&gt;| sbtest10           |&lt;br/&gt;| sbtest2            |&lt;br/&gt;| sbtest3            |&lt;br/&gt;| sbtest4            |&lt;br/&gt;| sbtest5            |&lt;br/&gt;| sbtest6            |&lt;br/&gt;| sbtest7            |&lt;br/&gt;| sbtest8            |&lt;br/&gt;| sbtest9            |&lt;br/&gt;+&lt;span&gt;--------------------+&lt;/span&gt;&lt;br/&gt;10 rows in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[sysbench]&amp;gt;&lt;span&gt;show&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; sbtest1\G&lt;br/&gt;*************************** &lt;span&gt;1.&lt;/span&gt; &lt;span&gt;row&lt;/span&gt; ***************************&lt;br/&gt;       &lt;span&gt;Table&lt;/span&gt;: sbtest1&lt;br/&gt;&lt;span&gt;Create&lt;/span&gt; &lt;span&gt;Table&lt;/span&gt;: &lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;`sbtest1`&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;`id`&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;br/&gt;  &lt;span&gt;`k`&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;0&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`c`&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;120&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`pad`&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;60&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;  PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;`id`&lt;/span&gt;),&lt;br/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`k_1`&lt;/span&gt; (&lt;span&gt;`k`&lt;/span&gt;)&lt;br/&gt;) &lt;span&gt;ENGINE&lt;/span&gt;=&lt;span&gt;InnoDB&lt;/span&gt; AUTO_INCREMENT=&lt;span&gt;100001&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;CHARSET&lt;/span&gt;=utf8&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;row&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[sysbench]&amp;gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; sbtest1 &lt;span&gt;modify&lt;/span&gt; k &lt;span&gt;int&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;span&gt;modify&lt;/span&gt; c &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;120&lt;/span&gt;) &lt;span&gt;null&lt;/span&gt;,&lt;span&gt;modify&lt;/span&gt; &lt;span&gt;pad&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;60&lt;/span&gt;) &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;Query OK, 0 rows affected (4.14 sec)&lt;br/&gt;Records: 0  Duplicates: 0  Warnings: 0&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[sysbench]&amp;gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; sbtest1 &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;100001&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;Query OK, 1 row affected (0.00 sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[sysbench]&amp;gt;&lt;span&gt;explain&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;,k &lt;span&gt;from&lt;/span&gt; sbtest1 &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;100001&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;----+-------------+---------+------------+-------+---------------+---------+---------+-------+------+----------+-------+&lt;/span&gt;&lt;br/&gt;| id | select_type | table   | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |&lt;br/&gt;+&lt;span&gt;----+-------------+---------+------------+-------+---------------+---------+---------+-------+------+----------+-------+&lt;/span&gt;&lt;br/&gt;|  1 | SIMPLE      | sbtest1 | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | NULL  |&lt;br/&gt;+&lt;span&gt;----+-------------+---------+------------+-------+---------------+---------+---------+-------+------+----------+-------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt; &lt;span&gt;warning&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;(root@localhost mysql3306.sock)[sysbench]&amp;gt;&lt;span&gt;explain&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;,k &lt;span&gt;from&lt;/span&gt; sbtest1 &lt;span&gt;where&lt;/span&gt; k &lt;span&gt;is&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;----+-------------+---------+------------+------+---------------+------+---------+-------+------+----------+--------------------------+&lt;/span&gt;&lt;br/&gt;| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref   | rows | filtered | Extra                    |&lt;br/&gt;+&lt;span&gt;----+-------------+---------+------------+------+---------------+------+---------+-------+------+----------+--------------------------+&lt;/span&gt;&lt;br/&gt;|  1 | SIMPLE      | sbtest1 | NULL       | ref  | k_1           | k_1  | 5       | const |    1 |   100.00 | Using where; Using index |&lt;br/&gt;+&lt;span&gt;----+-------------+---------+------------+------+---------------+------+---------+-------+------+----------+--------------------------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt; &lt;span&gt;warning&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;//&lt;span&gt;In&lt;/span&gt; the &lt;span&gt;first&lt;/span&gt; &lt;span&gt;query&lt;/span&gt;,the newly added &lt;span&gt;row&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; retrieved &lt;span&gt;by&lt;/span&gt; primary key.&lt;br/&gt;//&lt;span&gt;In&lt;/span&gt; the &lt;span&gt;second&lt;/span&gt; &lt;span&gt;query&lt;/span&gt;,the newly added &lt;span&gt;row&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; retrieved &lt;span&gt;by&lt;/span&gt; secondary &lt;span&gt;key&lt;/span&gt; &lt;span&gt;&quot;k_1&quot;&lt;/span&gt;&lt;br/&gt;//It has been proved that &lt;span&gt;indexes&lt;/span&gt; can be used &lt;span&gt;on&lt;/span&gt; the &lt;span&gt;columns&lt;/span&gt; which contain &lt;span&gt;null&lt;/span&gt; value.&lt;br/&gt;//&lt;span&gt;column&lt;/span&gt; &lt;span&gt;&quot;k&quot;&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; datatype which occupies &lt;span&gt;4&lt;/span&gt; &lt;span&gt;bytes&lt;/span&gt;,but the &lt;span&gt;value&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;&quot;key_len&quot;&lt;/span&gt; turn &lt;span&gt;out&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; be &lt;span&gt;5.&lt;/span&gt;what&lt;span&gt;&#x27;s happed?Because null value needs 1 byte to store the null flag in the rows.&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个是我自己测试的例子.&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;mysql&amp;gt; &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_1;&lt;br/&gt;+&lt;span&gt;-----------+------+------+&lt;/span&gt;&lt;br/&gt;| name      | code | id   |&lt;br/&gt;+&lt;span&gt;-----------+------+------+&lt;/span&gt;&lt;br/&gt;| gaoyi     | wo   |    1 |&lt;br/&gt;| gaoyi     | w    |    2 |&lt;br/&gt;| chuzhong  | wo   |    3 |&lt;br/&gt;| chuzhong  | w    |    4 |&lt;br/&gt;| xiaoxue   | dd   |    5 |&lt;br/&gt;| xiaoxue   | dfdf |    6 |&lt;br/&gt;| sujianhui | su   |   99 |&lt;br/&gt;| sujianhui | NULL |   99 |&lt;br/&gt;+&lt;span&gt;-----------+------+------+&lt;/span&gt;&lt;br/&gt;8 rows in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;mysql&amp;gt; &lt;span&gt;explain&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_1 &lt;span&gt;where&lt;/span&gt; code &lt;span&gt;is&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;| id | select_type | table  | partitions | type | possible_keys | key        | key_len | ref   | rows | filtered | Extra                 |&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;|  1 | SIMPLE      | test_1 | NULL       | ref  | index_code    | index_code | 161     | const |    1 |   100.00 | Using index condition |&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt; &lt;span&gt;warning&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;mysql&amp;gt; &lt;span&gt;explain&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_1 &lt;span&gt;where&lt;/span&gt; code &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;| id | select_type | table  | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;|  1 | SIMPLE      | test_1 | NULL       | range | index_code    | index_code | 161     | NULL |    7 |   100.00 | Using index condition |&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt; &lt;span&gt;warning&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;mysql&amp;gt; &lt;span&gt;explain&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_1 &lt;span&gt;where&lt;/span&gt; code=&lt;span&gt;&#x27;dd&#x27;&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;| id | select_type | table  | partitions | type | possible_keys | key        | key_len | ref   | rows | filtered | Extra                 |&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;|  1 | SIMPLE      | test_1 | NULL       | ref  | index_code    | index_code | 161     | const |    1 |   100.00 | Using index condition |&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt; &lt;span&gt;warning&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;br/&gt;mysql&amp;gt; &lt;span&gt;explain&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_1 &lt;span&gt;where&lt;/span&gt; code &lt;span&gt;like&lt;/span&gt; &lt;span&gt;&quot;dd%&quot;&lt;/span&gt;;&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;| id | select_type | table  | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;|  1 | SIMPLE      | test_1 | NULL       | range | index_code    | index_code | 161     | NULL |    1 |   100.00 | Using index condition |&lt;br/&gt;+&lt;span&gt;----+-------------+--------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+&lt;/span&gt;&lt;br/&gt;1 row in &lt;span&gt;set&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt; &lt;span&gt;warning&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Summary 总结&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;null value always leads to many uncertainties when disposing sql statement.It may cause bad performance accidentally.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列中使用&lt;code&gt;NULL&lt;/code&gt;值容易引发不受控制的事情发生,有时候还会严重托慢系统的性能.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如:&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;null value will not be estimated in aggregate function() which may cause inaccurate results.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对含有NULL值的列进行统计计算,eg. &lt;code&gt;count()&lt;/code&gt;,&lt;code&gt;max()&lt;/code&gt;,&lt;code&gt;min()&lt;/code&gt;,结果并不符合我们的期望值.&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;null value will influence the behavior of the operations such as “distinct”,“group by”,“order by” which causes wrong sort.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;干扰排序，分组,去重结果.&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;null value needs ifnull() function to do judgement which makes the program code more complex.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有的时候为了消除&lt;code&gt;NULL&lt;/code&gt;带来的技术债务,我们需要在SQL中使用&lt;code&gt;IFNULL()&lt;/code&gt;来确保结果可控,但是这使程序变得复杂.&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;null value needs a extra 1 byte to store the null information in the rows.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;NULL&lt;/code&gt;值并是占用原有的字段空间存储,而是额外申请一个字节去标注,这个字段添加了&lt;code&gt;NULL&lt;/code&gt;约束.(就像额外的标志位一样)&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;As these above drawbacks,it’s not recommended to define columns with default null.&lt;br/&gt;We recommand to define “not null” on all columns and use zero number &amp;amp; vacant string to substitute relevant data type of null.&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据以上缺点,我们并不推荐在列中设置NULL作为列的默认值,你可以使用&lt;code&gt;NOT NULL&lt;/code&gt;消除默认设置,使用&lt;code&gt;0&lt;/code&gt;或者&lt;code&gt;&#x27;&#x27;&lt;/code&gt;空字符串来代替&lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>