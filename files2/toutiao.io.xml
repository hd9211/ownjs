<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>4a225e2d07d887526ac95e9ada8924b5</guid>
<title>面试过 200 人的经验，都在这里了 | 码农周刊第 325 期</title>
<link>https://toutiao.io/k/xvysg5s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;面试过 200 人的经验，都在这里了 | 码农周刊第 325 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第325期（2020-11-25）&lt;/h2&gt;
        &lt;p&gt;☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=325&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3250&quot; target=&quot;_blank&quot;&gt;薪资翻番如何实现？程序员的涨薪秘诀&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;a href=&quot;https://weekly.manong.io/bounce?nid=325&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3250&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_321.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=325&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;相比 cocos2d 引擎有着更低的入门门槛和维护成本，为复杂动画的实现提供了一种全新的方式，新的复杂动画开发将会变得更加简单高效。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;让您享受极简编程体验，快速访问支付宝开放平台开放的各项核心能力。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;一个不错的 Python 学习教程，30 天循序渐进地教你学会 Python。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;白皮书从技术、市场、趋势、挑战等多维度，对我国开源产业生态进行了全面、深度的剖析，指出了我国开源产业发展的几大重要趋势。&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;试试吧&lt;/p&gt;
        
        &lt;p&gt;经验总结&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;简明介绍&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;一步步教你&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        
        &lt;p&gt;供参考&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;图文并茂&lt;/p&gt;
        
        &lt;p&gt;收藏吧&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;实用&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;使用方便&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;一步步教你&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;良心教程&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;你怎么看？&lt;/p&gt;
        
        &lt;p&gt;深入研究&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;技术总结，经验分享&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 451179 即可&lt;/p&gt;
        
        &lt;p&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 429587 即可&lt;/p&gt;
        
        &lt;p&gt;分享计算机视觉与机器学习技术的最前沿&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 359575 即可&lt;/p&gt;
        
        &lt;p&gt;聚焦基础架构和Linux。十年架构，日百亿流量，与你探讨高并发世界，给你不一样的味道。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 351247 即可&lt;/p&gt;
        
        &lt;p&gt;学习就是不停的积累&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 24912 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;本手册以开发工程师为中心视角，划分为单元测试、安全规约、MySQL 数据库、工程结构等七个维度，相应的扩展解释和说明、正例和反例，全面、立体、形象地帮助开发工程师成长。欢迎到&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;兑换阅读。&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;个人经历&lt;/p&gt;
        
        &lt;p&gt;一直被追赶，从未被超越&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8f426b22261e5941795776ef561e0419</guid>
<title>编码风格：MVC 模式下 SSM 环境，代码分层管理</title>
<link>https://toutiao.io/k/dr3u1om</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1&gt;&lt;span&gt;一、分层策略&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;MVC模式与代码分层策略，MVC全名是ModelViewController即模型－视图－控制器，作为一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑，这是一种开发模式，但并不是实际开发中代码的分层模式，通常SSM框架的后端代码分层如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7587006960556845&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDMX1ZqiaQLKPukndEhjpicD1TH4QxYQ2s3iaf61M2NNW0edLHaG73jhZicA6GkhPFcxWIyT8GicQSzluw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;862&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;controller控制层：定义服务端接口，入参出参，和一些入参校验；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;service业务服务层：组装业务逻辑，业务校验，构建控制层需要的参数模型；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;dao数据交互层：提供服务层需要的数据查询方法，处理数据交互条件相关的逻辑；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;mapper持久层：基于mybatis框架需要的原生支持，目前很常用的持久层组件；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;&lt;span&gt;二、控制层&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、Rest接口风格&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;基于资源访问和处理的逻辑，使用不同风格的注解。例如资源新增，更新，查询，删除。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 新增&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@PostMapping&lt;/span&gt;(&lt;span&gt;&quot;/insert&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Integer &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;(@RequestBody BaseInfo baseInfo)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; baseInfoService.insert(baseInfo);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 更新&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@PutMapping&lt;/span&gt;(&lt;span&gt;&quot;/update/{id}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;update&lt;/span&gt;&lt;span&gt;(@PathVariable(value = &lt;span&gt;&quot;id&quot;&lt;/span&gt;)&lt;/span&gt; Integer id,&lt;br/&gt;                     @RequestBody BaseInfo baseInfo) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (id&amp;lt;&lt;span&gt;1&lt;/span&gt;){&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;error&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    baseInfo.setId(id);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;update=&quot;&lt;/span&gt;+baseInfoService.update(baseInfo);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 主键查询&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/detail/{id}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; InfoModel &lt;span&gt;detail&lt;/span&gt;&lt;span&gt;(@PathVariable(value = &lt;span&gt;&quot;id&quot;&lt;/span&gt;)&lt;/span&gt; Integer id) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; baseInfoService.detail(id) ;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 主键删除&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@DeleteMapping&lt;/span&gt;(&lt;span&gt;&quot;/delete/{id}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(@PathVariable(value = &lt;span&gt;&quot;id&quot;&lt;/span&gt;)&lt;/span&gt; Integer id) &lt;/span&gt;{&lt;br/&gt;    baseInfoService.delete(id) ;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;SUS&quot;&lt;/span&gt; ;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、接口复用度&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;不建议接口高度复用，例如增删改查都各自对接接口即可，基本原则，不同的客户端端操作，对于独立的接口。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 列表加载&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/list&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;BaseInfo&amp;gt; &lt;span&gt;list&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; baseInfoService.list(&lt;span&gt;new&lt;/span&gt; BaseInfoExample()) ;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 列表搜索&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@PostMapping&lt;/span&gt;(&lt;span&gt;&quot;/search&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;BaseInfo&amp;gt; &lt;span&gt;search&lt;/span&gt; &lt;span&gt;(@RequestParam(&lt;span&gt;&quot;userName&quot;&lt;/span&gt;)&lt;/span&gt; String userName,&lt;br/&gt;                              @&lt;span&gt;RequestParam&lt;/span&gt;&lt;span&gt;(&lt;span&gt;&quot;phone&quot;&lt;/span&gt;)&lt;/span&gt; String phone) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; baseInfoService.search(userName,phone) ;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如常见的list接口，list通常都有会按条件加载的search机制，而且搜索的判断条件很复杂，建议分为两个接口，从实际考虑，大部分场景下都是只使用list接口，很少使用search搜索。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、入参出参&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;校验客户端必须条件，例如某某条件必填必选等，如果有问题，快速阻断请求链路，做到程序入口控制层拦截返回。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@PutMapping&lt;/span&gt;(&lt;span&gt;&quot;/update/{id}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;update&lt;/span&gt;&lt;span&gt;(@PathVariable(value = &lt;span&gt;&quot;id&quot;&lt;/span&gt;)&lt;/span&gt; Integer id,&lt;br/&gt;                     @RequestBody BaseInfo baseInfo) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (id&amp;lt;&lt;span&gt;1&lt;/span&gt;){&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;error&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    baseInfo.setId(id);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;update=&quot;&lt;/span&gt;+baseInfoService.update(baseInfo);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数在三个以下，可以直接陈列入参，参数在三个或三个以上可以使用实体类统一封装。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@PostMapping&lt;/span&gt;(&lt;span&gt;&quot;/search&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;BaseInfo&amp;gt; &lt;span&gt;search&lt;/span&gt; &lt;span&gt;(@RequestParam(&lt;span&gt;&quot;userName&quot;&lt;/span&gt;)&lt;/span&gt; String userName,&lt;br/&gt;                              @&lt;span&gt;RequestParam&lt;/span&gt;&lt;span&gt;(&lt;span&gt;&quot;phone&quot;&lt;/span&gt;)&lt;/span&gt; String phone) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; baseInfoService.search(userName,phone) ;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;4、参数处理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;出参格式处理度基本原则，服务器作为公共资源，避免非必要操作，例如客户端可自行判断返回值是否为空，null等，或者一些常见格式处理，利用客户端适当分担服务器压力。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、业务服务层&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、业务校验&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;例如传入订单号，经过数据库层查询，没有订单数据，这里称为业务性质的异常，代码本身没有问题，但是业务逻辑无法正常执行。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; InfoModel &lt;span&gt;detail&lt;/span&gt;&lt;span&gt;(Integer id)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    BaseInfo baseInfo = baseInfoDao.selectByPrimaryKey(id) ;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (baseInfo != &lt;span&gt;null&lt;/span&gt;){&lt;br/&gt;        DetailInfoEntity detailInfoEntity = detailInfoDao.getById(id);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (detailInfoEntity == &lt;span&gt;null&lt;/span&gt;){&lt;br/&gt;            LOG.info(&lt;span&gt;&quot;id=&quot;&lt;/span&gt;+id+&lt;span&gt;&quot;数据缺失 DetailInfo&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; buildModel(baseInfo,detailInfoEntity) ;&lt;br/&gt;    }&lt;br/&gt;    LOG.info(&lt;span&gt;&quot;id=&quot;&lt;/span&gt;+id+&lt;span&gt;&quot;数据完全缺失&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; ;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、组装业务逻辑&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通常情况下服务层作为逻辑做复杂的一块，用来拼接业务核心步骤，可以通过业务逻辑判定，一步一步执行程序，避免在程序入口做大量可能用到的对象创建和需求数据查询。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;(BaseInfo record)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    record.setCreateTime(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; insertFlag = baseInfoDao.insert(record);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (insertFlag &amp;gt; &lt;span&gt;0&lt;/span&gt;){&lt;br/&gt;        DetailInfoEntity detailInfoEntity = &lt;span&gt;new&lt;/span&gt; DetailInfoEntity();&lt;br/&gt;        detailInfoEntity.setUserId(record.getId());&lt;br/&gt;        detailInfoEntity.setCreateTime(record.getCreateTime());&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(detailInfoDao.save(detailInfoEntity)){&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; insertFlag ;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; insertFlag;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3、数据模型构建&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通常情况业务层是偏复杂的，如果想快速理解业务层，可以对复杂的业务方法，在提供一个返参构建的方法，用来处理服务层要向控制层回传的参数，这样可以让重度的服务层方法变的清晰。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; InfoModel &lt;span&gt;buildModel&lt;/span&gt; &lt;span&gt;(BaseInfo baseInfo,DetailInfoEntity detailInfo)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    InfoModel infoModel = &lt;span&gt;new&lt;/span&gt; InfoModel() ;&lt;br/&gt;    infoModel.setBaseInfo(baseInfo);&lt;br/&gt;    infoModel.setDetailInfoEntity(detailInfo);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; infoModel ;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;四、数据交互层&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、逆向工程&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这里以使用mybatis框架或者mybatis-plus框架作为参考。如果是mybatis框架，建议逆向工程的模板代码不做自定义的修改，如果需要自定义方法，在mapper和xml层面再自定义一个扩展文件，用来存放自定义的方法和SQL逻辑，这样避免表结构变动大引发的强烈不适。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6972477064220184&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDMX1ZqiaQLKPukndEhjpicD17qnGMRIUsriaibhwibbIvR44L8r3bz2uaEZNNB3CBhf6LLZMaia8zwtMVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;872&quot;/&gt;&lt;/p&gt;&lt;p&gt;当然现在大部分都会mybatis-plus作为持久层组件，可以避免上述问题。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、数据交互&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;针对业务层的需要，提供相应的数据查询方法，只处理与数据库交互的逻辑，避免出现业务逻辑，尤其在分布式架构下，不同服务的数据查询和组装，不应该出现在该层。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;BaseInfoDao&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt;&lt;span&gt;(BaseInfo record)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;List&amp;lt;BaseInfo&amp;gt; &lt;span&gt;selectByExample&lt;/span&gt;&lt;span&gt;(BaseInfoExample example)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;updateByPrimaryKey&lt;/span&gt;&lt;span&gt;(BaseInfo record)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;BaseInfo &lt;span&gt;selectByPrimaryKey&lt;/span&gt;&lt;span&gt;(Integer id)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;deleteByPrimaryKey&lt;/span&gt;&lt;span&gt;(Integer id)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;BaseInfo &lt;span&gt;getById&lt;/span&gt; &lt;span&gt;(Integer id)&lt;/span&gt; &lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;五、源代码地址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https:&lt;span&gt;//github.com/cicadasmile/data-manage-parent&lt;/span&gt;&lt;br/&gt;GitEE·地址&lt;br/&gt;https:&lt;span&gt;//gitee.com/cicadasmile/data-manage-parent&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3783359497645212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCjMheLZtcM2iaVMBOpIUKR4CDRCG9FLT5K6NmGXvG7exrW0TSuDjnTKJQ5PDq8j8Y7PHDd17Z3gicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d79dbef21efd42ba4008b1d9b39155a4</guid>
<title>Grails Oauth2 插件适配非标准 SSO 接口</title>
<link>https://toutiao.io/k/nzhai4f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-header&quot;&gt;
&lt;h1 class=&quot;title&quot;&gt;Grails Oauth2 插件适配非标准 SSO 接口&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;冯宇 Posted at — Nov 26, 2020
&lt;span class=&quot;meta&quot; id=&quot;busuanzi_container_page_pv&quot;&gt;阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;/&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;markdown&quot;&gt;

&lt;p&gt;最近遇到一个项目，需要跟某大厂的单点登录接口对接。然而该厂使用的并非行业通用的 OAuth2 接口，经过一番魔改之后，成功搞定了单点登录的对接。&lt;/p&gt;
&lt;h2 id=&quot;该厂单点登录的流程&quot;&gt;该厂单点登录的流程&lt;/h2&gt;
&lt;p&gt;该厂单点登录的流程大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求登录页面：&lt;code&gt;{ssoUrl}?returnUrl=http://localhost:8080/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录成功会给&lt;code&gt;returnUrl&lt;/code&gt;带回一个&lt;code&gt;token=xxYYzz&lt;/code&gt;的参数跳转回来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用这个&lt;code&gt;token&lt;/code&gt;参数配合&lt;code&gt;username:password&lt;/code&gt;(经过 base64 编码)认证请求用户信息接口获取用户信息:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;POST /{ssoUrl}/getUser?token=xxYYzz
Authorization Basic {secret}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然不是标准的单点登录流程(如 Oauth2 协议跳转回来的参数是&lt;code&gt;code&lt;/code&gt;而不是&lt;code&gt;token&lt;/code&gt;，需要用&lt;code&gt;code&lt;/code&gt;换取&lt;code&gt;access token&lt;/code&gt;，然后用&lt;code&gt;access token&lt;/code&gt;登录 SSO 系统获取用户信息)，但大体流程上还是大同小异的。因此可以通过稍加改造 Grails Oauth2 插件来对接到我们已经支持的 OAuth2 登录。&lt;/p&gt;
&lt;h2 id=&quot;实现非标准-oauth2-适配&quot;&gt;实现非标准 Oauth2 适配&lt;/h2&gt;
&lt;p&gt;Grails 的&lt;a href=&quot;http://pledbrook.github.io/grails-shiro-oauth/guide/introduction.html&quot;&gt;grails-shiro-oauth&lt;/a&gt;插件使用上还是比较简单的，插件已经实现了一个&lt;code&gt;OauthController&lt;/code&gt;，并且实现了&lt;code&gt;callback&lt;/code&gt;和&lt;code&gt;authenticate&lt;/code&gt;两个 action，默认注册了&lt;code&gt;/oauth/callback/$provider&lt;/code&gt;这个 URL 帮助自动处理 OAuth2 的回调，我们只需要实现目标 SSO 服务端的 API 以及成功的响应&lt;code&gt;onSuccess&lt;/code&gt; action 就可以了。&lt;/p&gt;
&lt;p&gt;大致的主要部分逻辑如下:&lt;/p&gt;
&lt;p&gt;Api 实现部分：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyApi&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;DefaultApi20&lt;/span&gt; {

    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;ConfigObject&lt;/span&gt; &lt;span&gt;configObject&lt;/span&gt; = &lt;span&gt;Holders&lt;/span&gt;.&lt;span&gt;grailsApplication&lt;/span&gt;.&lt;span&gt;config&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;ssoUrl&lt;/span&gt; = &lt;span&gt;configObject&lt;/span&gt;.&lt;span&gt;oauth&lt;/span&gt;.&lt;span&gt;providers&lt;/span&gt;.&lt;span&gt;myApi&lt;/span&gt;.&lt;span&gt;ssoUrl&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;resourceUrl&lt;/span&gt; = &lt;span&gt;configObject&lt;/span&gt;.&lt;span&gt;oauth&lt;/span&gt;.&lt;span&gt;providers&lt;/span&gt;.&lt;span&gt;myApi&lt;/span&gt;.&lt;span&gt;resourceUrl&lt;/span&gt;

    &lt;span&gt;@Override&lt;/span&gt;
    &lt;span&gt;Verb&lt;/span&gt; &lt;span&gt;getAccessTokenVerb&lt;/span&gt;() {
        &lt;span&gt;Verb&lt;/span&gt;.&lt;span&gt;POST&lt;/span&gt;
    }

    &lt;span&gt;@Override&lt;/span&gt;
    &lt;span&gt;AccessTokenExtractor&lt;/span&gt; &lt;span&gt;getAccessTokenExtractor&lt;/span&gt;() {
        &lt;span&gt;new&lt;/span&gt; &lt;span&gt;JsonTokenExtractor&lt;/span&gt;()
    }

    &lt;span&gt;@Override&lt;/span&gt;
    &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getAccessTokenEndpoint&lt;/span&gt;() {
        &lt;span&gt;resourceUrl&lt;/span&gt;
    }

    &lt;span&gt;@Override&lt;/span&gt;
    &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getAuthorizationUrl&lt;/span&gt;(&lt;span&gt;OAuthConfig&lt;/span&gt; &lt;span&gt;config&lt;/span&gt;) {
        &lt;span&gt;Preconditions&lt;/span&gt;.&lt;span&gt;checkValidUrl&lt;/span&gt;(&lt;span&gt;config&lt;/span&gt;.&lt;span&gt;callback&lt;/span&gt;, &lt;span&gt;&quot;Must provide a valid url as callback. RootCloud does not support OOB&quot;&lt;/span&gt;)
        &lt;span&gt;String&lt;/span&gt;.&lt;span&gt;format&lt;/span&gt;(&lt;span&gt;ssoUrl&lt;/span&gt;, &lt;span&gt;OAuthEncoder&lt;/span&gt;.&lt;span&gt;encode&lt;/span&gt;(&lt;span&gt;config&lt;/span&gt;.&lt;span&gt;callback&lt;/span&gt;))
    }

    &lt;span&gt;@Override&lt;/span&gt;
    &lt;span&gt;OAuthService&lt;/span&gt; &lt;span&gt;createService&lt;/span&gt;(&lt;span&gt;OAuthConfig&lt;/span&gt; &lt;span&gt;config&lt;/span&gt;) {
        &lt;span&gt;new&lt;/span&gt; &lt;span&gt;MyApiOAuthService&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;config&lt;/span&gt;);
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OAuthService 实现部分:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyApiOAuthService&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;OAuth20ServiceImpl&lt;/span&gt; {

    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;DefaultApi20&lt;/span&gt; &lt;span&gt;api&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;OAuthConfig&lt;/span&gt; &lt;span&gt;config&lt;/span&gt;

    &lt;span&gt;MyApiOAuthService&lt;/span&gt;(&lt;span&gt;DefaultApi20&lt;/span&gt; &lt;span&gt;api&lt;/span&gt;, &lt;span&gt;OAuthConfig&lt;/span&gt; &lt;span&gt;config&lt;/span&gt;) {
        &lt;span&gt;super&lt;/span&gt;(&lt;span&gt;api&lt;/span&gt;, &lt;span&gt;config&lt;/span&gt;)
        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;api&lt;/span&gt; = &lt;span&gt;api&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;config&lt;/span&gt; = &lt;span&gt;config&lt;/span&gt;
    }

    &lt;span&gt;@Override&lt;/span&gt;
    &lt;span&gt;Token&lt;/span&gt; &lt;span&gt;getAccessToken&lt;/span&gt;(&lt;span&gt;Token&lt;/span&gt; &lt;span&gt;requestToken&lt;/span&gt;, &lt;span&gt;Verifier&lt;/span&gt; &lt;span&gt;verifier&lt;/span&gt;) {
        &lt;span&gt;String&lt;/span&gt; &lt;span&gt;url&lt;/span&gt; = &lt;span&gt;api&lt;/span&gt;.&lt;span&gt;accessTokenEndpoint&lt;/span&gt; + &lt;span&gt;&quot;?token=${requestToken.token}&quot;&lt;/span&gt;
        &lt;span&gt;OAuthRequest&lt;/span&gt; &lt;span&gt;request&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;OAuthRequest&lt;/span&gt;(&lt;span&gt;api&lt;/span&gt;.&lt;span&gt;getAccessTokenVerb&lt;/span&gt;(), &lt;span&gt;url&lt;/span&gt;)
        &lt;span&gt;request&lt;/span&gt;.&lt;span&gt;addHeader&lt;/span&gt;(&lt;span&gt;&#x27;Authorization&#x27;&lt;/span&gt;, &lt;span&gt;&quot;Basic ${config.apiSecret}&quot;&lt;/span&gt;)
        &lt;span&gt;Response&lt;/span&gt; &lt;span&gt;response&lt;/span&gt; = &lt;span&gt;request&lt;/span&gt;.&lt;span&gt;send&lt;/span&gt;()
        &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Token&lt;/span&gt;(&lt;span&gt;response&lt;/span&gt;.&lt;span&gt;body&lt;/span&gt;, &lt;span&gt;config&lt;/span&gt;.&lt;span&gt;apiSecret&lt;/span&gt;)
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有一些 hack 的部分，&lt;code&gt;getAccessToken&lt;/code&gt;按照 OAuth2 的流程应该是使用&lt;code&gt;code&lt;/code&gt;换取&lt;code&gt;access token&lt;/code&gt;的过程，但是被我们调整成了直接用&lt;code&gt;token&lt;/code&gt;请求用户信息，将响应封装进入了&lt;code&gt;Token&lt;/code&gt;类，交由&lt;code&gt;onSuccess&lt;/code&gt; action 进行解析。&lt;/p&gt;
&lt;p&gt;由于 grails shiro oauth 插件只认&lt;code&gt;code&lt;/code&gt;参数，不认非标准的&lt;code&gt;token&lt;/code&gt;参数，因此我们需要在 filter 中做一下参数转换，以便对接插件。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;OauthCallbackFilters&lt;/span&gt; {

    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;filters&lt;/span&gt; = {
        &lt;span&gt;fillInCodeParam&lt;/span&gt;(&lt;span&gt;controller:&lt;/span&gt; &lt;span&gt;&#x27;oauth&#x27;&lt;/span&gt;, &lt;span&gt;action:&lt;/span&gt; &lt;span&gt;&#x27;callback&#x27;&lt;/span&gt;) {
            &lt;span&gt;before&lt;/span&gt; = {
                &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;params&lt;/span&gt;.&lt;span&gt;token&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;params&lt;/span&gt;.&lt;span&gt;code&lt;/span&gt;) {
                    &lt;span&gt;params&lt;/span&gt;.&lt;span&gt;put&lt;/span&gt;(&lt;span&gt;&#x27;code&#x27;&lt;/span&gt;, &lt;span&gt;params&lt;/span&gt;.&lt;span&gt;token&lt;/span&gt;)
                }
            }
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后在 onSuccess action 的逻辑中变通一下，直接按照 JSON 格式解析&lt;code&gt;Token&lt;/code&gt;就完事了:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ShiroOAuthController&lt;/span&gt; {

    &lt;span&gt;GrailsApplication&lt;/span&gt; &lt;span&gt;grailsApplication&lt;/span&gt;
    &lt;span&gt;OauthService&lt;/span&gt; &lt;span&gt;oauthService&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;() {
        &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;params&lt;/span&gt;.&lt;span&gt;provider&lt;/span&gt;) {
            &lt;span&gt;renderError&lt;/span&gt; &lt;span&gt;400&lt;/span&gt;, &lt;span&gt;&quot;The Shiro OAuth callback URL must include the &#x27;provider&#x27; URL parameter.&quot;&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;
        }
        &lt;span&gt;Map&lt;/span&gt; &lt;span&gt;providerConfig&lt;/span&gt; = &lt;span&gt;grailsApplication&lt;/span&gt;.&lt;span&gt;config&lt;/span&gt;.&lt;span&gt;oauth&lt;/span&gt;.&lt;span&gt;providers&lt;/span&gt;[&lt;span&gt;params&lt;/span&gt;.&lt;span&gt;provider&lt;/span&gt;]
        &lt;span&gt;String&lt;/span&gt; &lt;span&gt;sessionKey&lt;/span&gt; = &lt;span&gt;oauthService&lt;/span&gt;.&lt;span&gt;findSessionKeyForAccessToken&lt;/span&gt;(&lt;span&gt;params&lt;/span&gt;.&lt;span&gt;provider&lt;/span&gt;)
        &lt;span&gt;Token&lt;/span&gt; &lt;span&gt;accessToken&lt;/span&gt; = &lt;span&gt;session&lt;/span&gt;[&lt;span&gt;sessionKey&lt;/span&gt;]
        &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;accessToken&lt;/span&gt;) {
            &lt;span&gt;renderError&lt;/span&gt; &lt;span&gt;500&lt;/span&gt;, &lt;span&gt;&quot;No OAuth token in the session for provider &#x27;${params.provider}&#x27;!&quot;&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;
        }

        &lt;span&gt;// Create the relevant authentication token and attempt to log in.
&lt;/span&gt;&lt;span/&gt;        &lt;span&gt;def&lt;/span&gt; &lt;span&gt;oauthUserInfo&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;params&lt;/span&gt;.&lt;span&gt;provider&lt;/span&gt; == &lt;span&gt;&#x27;myapi&#x27;&lt;/span&gt;) {
            &lt;span&gt;oauthUserInfo&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;JSONObject&lt;/span&gt;(&lt;span&gt;accessToken&lt;/span&gt;.&lt;span&gt;token&lt;/span&gt;)
        } &lt;span&gt;else&lt;/span&gt; {
            &lt;span&gt;Response&lt;/span&gt; &lt;span&gt;response&lt;/span&gt; = &lt;span&gt;oauthService&lt;/span&gt;.&lt;span&gt;&quot;get${params.provider}Resource&quot;&lt;/span&gt;(&lt;span&gt;accessToken&lt;/span&gt;, &lt;span&gt;providerConfig&lt;/span&gt;.&lt;span&gt;resourceUrl&lt;/span&gt;)
            &lt;span&gt;log&lt;/span&gt;.&lt;span&gt;debug&lt;/span&gt;(&lt;span&gt;&quot;OAuth resource response for ${params.provider}: ${response.body}&quot;&lt;/span&gt;)
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;response&lt;/span&gt;.&lt;span&gt;body&lt;/span&gt; =~ &lt;span&gt;/\{.*}/&lt;/span&gt;) {
                &lt;span&gt;oauthUserInfo&lt;/span&gt; = &lt;span&gt;JSON&lt;/span&gt;.&lt;span&gt;parse&lt;/span&gt;(&lt;span&gt;response&lt;/span&gt;.&lt;span&gt;body&lt;/span&gt;)
            } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;response&lt;/span&gt;.&lt;span&gt;body&lt;/span&gt; =~ &lt;span&gt;/&amp;lt;.*&amp;gt;/&lt;/span&gt;) {
                &lt;span&gt;oauthUserInfo&lt;/span&gt; = &lt;span&gt;XML&lt;/span&gt;.&lt;span&gt;parse&lt;/span&gt;(&lt;span&gt;response&lt;/span&gt;.&lt;span&gt;body&lt;/span&gt;)
            } &lt;span&gt;else&lt;/span&gt; {
                &lt;span&gt;oauthUserInfo&lt;/span&gt; = &lt;span&gt;request&lt;/span&gt;.&lt;span&gt;getParameterMap&lt;/span&gt;()
            }
        }
        &lt;span&gt;//...
&lt;/span&gt;&lt;span/&gt;    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样通过小幅度变通就可以适配非标准的 OAuth2 流程了。&lt;/p&gt;


&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2a8a548e81481aebda6e4bf2df4484dd</guid>
<title>南京有哪些牛批的互联网公司？</title>
<link>https://toutiao.io/k/akkoum5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

                

                
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7ded0626d096afd598b5dfafb5b856ad</guid>
<title>Bug 数能否做为技术人员考核的 KPI？</title>
<link>https://toutiao.io/k/ttropqu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section&gt;作为以代码为生的软件开发人员，可用的功能与Bug总是相生相克。有次产品迭代回顾会上，我提出低级Bug数量要作为KPI之一进行绩效考核，私底下某些小伙伴反响挺激动：写怎么可能没有Bug，怎么会有这么傻X的要求？如果真的是Bug数量的多寡来考核写代码的开发同学，相信大家都会疯，这是制度上的缺陷，不利于组织的发展。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EwukgicNDWBuXnlsEmnXnH9anehcnsfOPtVWia6BLiatYhtnNhhS9ibgTONuHKv4Y3JG7tFxHZMibTO9fKkB2AcXpcA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;题图 from pixabay&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;他确实曲解了我的用意，我不是要考核Bug数，而是考核低级Bug数，什么是低级Bug？写过几年代码，大概都分的清Bug的严重程度。&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;界面上的样式问题，格式不统一、错乱、错别字&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;极简单的空值判定问题，稍微自测就能暴露出来&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;常用代码使用不规范，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;系统上线数据库连接错乱&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;完全复制别人的类似代码不加思考直接据为已用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;......&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;相信还能罗列很多，这种写出来的没有技术含量的Bug，摆在台面上，相信自己都会脸红，这些问题不需要有很好的技术水平才会犯。低级问题都有很好的套路可以避免：遵循普遍的代码规范，单元自测，遵照特定的流程，细心+认真。&lt;/p&gt;&lt;section&gt;为什么要&lt;span&gt;考核低级Bug数&lt;/span&gt;，低级Bug数不是考察你的技术能力高低，它反映的是一个人的&lt;span&gt;工作态度问题&lt;/span&gt;。一个好的工作态度胜过一个不负责任的技术大牛，那为什么不考核Bug数？Bug的多寡源自于代码开发量的多寡，做的多，错的就多。做的少，就错的少。不做就不错。如果按这个标准走，对大家是不公平的，这个组织就不会有长足的发展。一个学习型组织的成员，必须抱着成长的心态向前走，而不是怕出错误就不往前走。&lt;/section&gt;&lt;section&gt;还有一个Bug数指标也可以做为KPI项考核呢？&lt;strong&gt;&lt;span&gt;Bug重复打开率&lt;/span&gt;&lt;/strong&gt;。一个Bug被Fixed掉之后，过段时间又被再次打开，说明没有彻底解决掉，在某些场景下依旧存在。或者当前问题解决了，引发了另外的Bug，在另个的Bug被解决掉之后，当前的Bug又被重新打开了，也就是大家常说的“改好一个，坏了仨”，越改，Bug越多。&lt;/section&gt;&lt;section&gt;当大家不重视代码质量，无感Bug数的时候，团队就会形成一种潜意识——Bug无所谓，出现了改就是了，如此而来的产品质量肯定不会高到那里去。当然也不能高压控制Bug，出现一个扣多少多少钱，只会让团队萎缩不前。因Bug导致的生产事故，依据大小，是可以进行处罚，相信大家也不会太大怨言。&lt;/section&gt;&lt;section&gt;&lt;span&gt;Bug无小事，质量意识心常存。&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;希望对你有所帮助&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>