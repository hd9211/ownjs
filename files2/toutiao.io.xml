<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>4b14f0dd83e57e3d5fdf17e03cd4cd60</guid>
<title>[推荐] 硬核！漫画图解 HTTP 基础 + 面试题</title>
<link>https://toutiao.io/k/rmckht1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;blockquote&gt;&lt;p&gt;文章持续更新，可以微信搜一搜「golang小白成长记」第一时间阅读，回复【教程】获golang免费视频教程。本文已经收录在GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎Star。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-ratio=&quot;2.3391959798994977&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEOLVsZs70k5AcZ7Kj8VAaFCn2IxsiccFkYTO1VibibnbtiaIawr7SboXC8w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;398&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.447719298245614&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrE3qZicIZ9g0GgOn0lsEu0tRYcicSTm02Uklst5g5Yyt3kQa8zg4LZ6zag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2850&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;什么是HTTP&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;HTTP 全称&lt;strong&gt;超⽂文本传输协议&lt;/strong&gt;，也就是&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol。&lt;br/&gt;其中我们常见的&lt;strong&gt;文本，图片，视频&lt;/strong&gt;这些东西都可以用超文本进行表示，而我常看的猫片，也属于超文本，所以大家不要再说我偷偷看猫片了，我只是在看超文本。HTTP只是定义了一套传输超文本的规则，只要符合了这一套规则，不管你是用iphone，还是用老爷机，都可以实现猫片的传输。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5171306209850107&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrE1yzbyHae0QvV8fBvK2DxjWiadOTfcg06ZxCvibd1rMaSVicibaoaYoBKbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;934&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;七层网络&lt;/span&gt;&lt;/h1&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7202702702702702&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrE1TeyxpDmoafh8Bj3TJ1GANKEa8E6ibuJtTjmf7sSj8JKyaKsKQR2Jhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;740&quot; title=&quot;网络协议&quot;/&gt;&lt;figcaption&gt;网络协议&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;大概了解了&lt;strong&gt;HTTP&lt;/strong&gt;后，给大家看看它在它们家族里的地位。HTTP位于&lt;strong&gt;应用层&lt;/strong&gt;，跟它类似的协议还有常见的&lt;strong&gt;FTP协议&lt;/strong&gt;，常见的&lt;strong&gt;某影天堂&lt;/strong&gt;的下载链接曾经经常是以&lt;strong&gt;FTP开头&lt;/strong&gt;的。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.36675461741424803&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEHOUhRiaAHeiaH2ibjBo3a85WoIdLEO7akzjJGuLUHJOr3lS0DFLzXmzdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1516&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;HTTP报文格式&lt;/span&gt;&lt;/h1&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8658043654001617&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEftmEXb72BqPP0vNibG855QmNic2eQ9NZD1b5icO1rKMwW5Wyq6ibBjwtFA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1237&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.906&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrELyicjsjC1XfsQbKqBFxdjdY6E7aBjpVDFkmQfvfdJejedodS1ELvpPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;有点抽象？不知道小白说的啥？那实操一下，用&lt;code&gt;wireshark&lt;/code&gt;抓包看一下猫片里的请求报文和响应报文具体长什么样子吧&lt;/p&gt;&lt;h2&gt;&lt;span&gt;请求报文&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;GET /cmaskboss/164203142_30_1.enhance.webmask HTTP/1.1&lt;br/&gt;Host: upos-sz-staticks3.bilivideo.com&lt;br/&gt;Connection: keep-alive&lt;br/&gt;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36&lt;br/&gt;Accept: */*&lt;br/&gt;Origin: https://www.bilibili.com&lt;br/&gt;Sec-Fetch-Site: cross-site&lt;br/&gt;Sec-Fetch-Mode: cors&lt;br/&gt;Sec-Fetch-Dest: empty&lt;br/&gt;Referer: https://www.bilibili.com/&lt;br/&gt;Accept-Encoding: identity&lt;br/&gt;Accept-Language: zh-CN,zh;q=0.9&lt;br/&gt;Range: bytes=0-16&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这上面第一行的GET 就是&lt;strong&gt;请求方法&lt;/strong&gt;，&lt;code&gt;/cmaskboss/164203142_30_1.enhance.webmask&lt;/code&gt; 则是 &lt;strong&gt;URL&lt;/strong&gt; , 而&lt;code&gt;HTTP/1.1&lt;/code&gt;则是&lt;strong&gt;协议版本&lt;/strong&gt;。接下来从&lt;code&gt;Host&lt;/code&gt;开始到最后一行&lt;code&gt;Range&lt;/code&gt;，都是&lt;strong&gt;Headers头&lt;/strong&gt;。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;响应报文&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;HTTP/1.1 &lt;span&gt;206&lt;/span&gt; Partial Content&lt;br/&gt;&lt;span&gt;Content-Type: application/octet-stream&lt;br/&gt;Content-Length: 17&lt;br/&gt;Connection: keep-alive&lt;br/&gt;Server: Tengine&lt;br/&gt;ETag: &quot;92086de1e6d1d4791fb950a0ac7e30ba&quot;&lt;br/&gt;Date: Sat, 30 Jan 2021 09:31:31 GMT&lt;br/&gt;Last-Modified: Sun, 04 Oct 2020 01:54:28 GMT&lt;br/&gt;Expires: Mon, 01 Mar 2021 09:31:31 GMT&lt;br/&gt;Age: 1018695&lt;br/&gt;Content-Range: bytes 0-16/353225&lt;br/&gt;Accept-Ranges: bytes&lt;br/&gt;X-Application-Context: application&lt;br/&gt;x-kss-request-id: 75bcbfa8ab194e3c825e89c81a912692&lt;br/&gt;x-kss-BucketOwner: MjAwMDAyMDEwNw==&lt;br/&gt;X-Info-StorageClass: -&lt;br/&gt;Content-MD5: kght4ebR1HkfuVCgrH4wug==&lt;br/&gt;X-Cache-Status: HIT from KS-CLOUD-JH-MP-01-03&lt;br/&gt;X-Cache-Status: HIT from KS-CLOUD-TJ-UN-14-13&lt;br/&gt;X-Cache-Status: HIT from KS-CLOUD-LF-UN-11-25&lt;br/&gt;Access-Control-Allow-Origin: https://www.bilibili.com&lt;br/&gt;Access-Control-Allow-Headers: Origin,X-Requested-With,Content-Type,Accept,range&lt;br/&gt;X-Cdn-Request-ID: 7e2c783ca7d392624118593ec1dc66bc&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;类似请求报文，&lt;code&gt;HTTP/1.1&lt;/code&gt;是&lt;strong&gt;协议版本&lt;/strong&gt;，&lt;code&gt;206&lt;/code&gt;是&lt;strong&gt;状态码&lt;/strong&gt;，&lt;code&gt;Partial Content&lt;/code&gt; 则是&lt;strong&gt;状态描述符&lt;/strong&gt;。接下来从&lt;code&gt;Content-Type&lt;/code&gt;开始到最后一行&lt;code&gt;X-Cdn-Request-ID&lt;/code&gt;都是&lt;strong&gt;Headers信息&lt;/strong&gt;。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;报文信息解读&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;其实上面的抓包信息，在浏览器里按F12就能看到，之所以要用&lt;code&gt;wireshark&lt;/code&gt;可能&lt;strong&gt;只是装X效果比较好吧&lt;/strong&gt;。按下F12看到的响应数据就跟下图展示的那样。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8342541436464088&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrE22P3ic8ibogfmLuE2AKvhPsZiaRN7YnVs0NfOdhejwGEOHvArpLPBAZOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1086&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1.请求数据&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.017786561264822&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEmorI6ucwY46Z9YfwzXqX6eBBsU55hqFxXDnYd2O1mAMbENuaTEMlcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1012&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2.响应数据&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.094758064516129&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEs2qgWqFdk4F0FCIgENfhUQ0tCKbvS5Z6mhiapFlSx3ibXN26t1W2DibEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;992&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3.Request URL&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;URL是什么&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;URL 代表着是统一资源定位符（Uniform Resource Locator）。作用是为了告诉使用者 某个资源在 Web 上的地址。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像或一个猫片等等。上面我们请求猫片的URL就是 &lt;code&gt;https://upos-sz-staticks3.bilivideo.com/cmaskboss/164203142_30_1.enhance.webmask&lt;/code&gt; 这里面细分，又可以分为好几个部分。&lt;/p&gt;&lt;p&gt;表示该URL的协议部分为http还是https，会用//为分隔符。上面的URL表示网页用的是HTTPS协议，而上面提到的X影天堂用的则是ftp协议的下载链接。&lt;/p&gt;&lt;p&gt;域名是&lt;code&gt;upos-sz-staticks3.bilivideo.com&lt;/code&gt;，在发送请求前，会向DNS服务器解析IP，如果已经知道ip，还可以跳过DNS解析那一步，直接把IP当做域名部分使用。&lt;/p&gt;&lt;p&gt;域名后面有些时候会带有端口，和域名之间用:分隔，端口不是一个URL的必须的部分。当网址为&lt;strong&gt;http://&lt;/strong&gt;时，默认端口为&lt;strong&gt;80&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当网址为&lt;strong&gt;https://&lt;/strong&gt;时，默认端口为&lt;strong&gt;443&lt;/strong&gt;，以上两种都可以省略端口号。上面的URL其实&lt;strong&gt;省略了443端口&lt;/strong&gt;号。&lt;/p&gt;&lt;p&gt;从域名的第一个/开始到最后一个/为止，是虚拟目录的部分。虚拟目录也不是URL必须的部分，本例中的虚拟目录是&lt;code&gt;/cmaskboss/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;从域名最后一个/开始到?为止，是文件名部分；如果没有?，则是从域名最后一个/开始到#为止，是文件名部分；如果没有?和#，那么就从域名的最后一个/从开始到结束，都是文件名部分。本例中的文件名是&lt;code&gt;164203142_30_1.enhance.webmask&lt;/code&gt;，文件名也不是一个URL的必须部分。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;URL 和 URI 的区别&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;其实一直有个误解，很多人以为URI是URL的子集，其实应该反过来。URL是URI的子集才对。简单解释下。&lt;br/&gt;假设&quot;小白&quot;(URI)是一种资源，而&quot;在迪丽亦巴的怀里&quot;表明了一个位置。如果你想要找到（locate）小白，那么你可以到&quot;在迪丽亦巴怀里&quot;找到小白，而&quot;在迪丽亦巴怀里的/小白&quot;才是我们常说的URL。而&quot;在迪丽亦巴怀里的/小白&quot;（URL）显然是&quot;小白&quot;（URI）的子集，毕竟，&quot;小白&quot;还可能是&quot;在牛亦菲怀里的/小白&quot;（其他URL）。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.46277097078228085&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEFiaeOdEvCaLYicNsr6bSjG9Ks6lQ60rDyfJzkLicol39IBG7nhWAsrqTA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1061&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;4.Request Method&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;HTTP 定义了一组&lt;strong&gt;请求方法&lt;/strong&gt;，以表明要对给定资源执行的操作。指示针对给定资源要执行的期望动作.。虽然他们也可以是名词，但这些请求方法有时被称为HTTP动词.。每一个请求方法都实现了不同的语义。&lt;/p&gt;&lt;p&gt;这次请求B站猫片的请求里用的是GET，意味着获取。但其实HTTP定义了多种请求方法，来满足各种需求。除了Get，还有几个POST、HEAD、OPTIONS、PUT、DELETE、TRACE 和 CONNECT。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.0987012987012987&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEQd3YkOiax8WhkOpaDcEQGbWAohMh63t9JCWS39nibYCS7iauaR6wcFjKA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;385&quot;/&gt;&lt;/p&gt;&lt;p&gt;常见的各个请求方法的具体功能如下：&lt;/p&gt;&lt;h3&gt;&lt;span&gt;GET&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;请求指定的页面信息，并返回消息主体(body)+头信息(header)。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;HEAD：&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;HEAD和GET本质是一样的，区别在于HEAD只返回头信息(header)，不返回消息主体(body)。大家不要以为它没用，它跟GET和POST一样，在http/1.0的时候就存在了，实属三元老之一了。主要用途&lt;/p&gt;&lt;h3&gt;&lt;span&gt;POST&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;向服务器提交数据。这个方法用途广泛，几乎目前所有的提交操作都是靠这个完成。POST跟GET最常用，但最大的区别在于，POST每次调用都可能会修改数据，是非幂等的，而GET类似于只读，是幂等的。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;PUT：&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这个方法比较少见。在HTTP规范中POST是非等幂的，多次调用会产生不同的结果。比如：创建一个用户,由于网络原因或是其他原因多创建了几次,那么将会有多个用户被创建。而PUT id/xiaobai 则会创建一个id为 xiaobai 的用户，多次调用还是会创建的结果是一样的，所以PUT是等幂的。但是一般为了避免造成心智负担，实战中也会使用POST替代PUT。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;DELETE：&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;删除某一个资源。基本上这个也很少见，一般实战中如果是删除操作，也是使用POST来替代。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;OPTIONS：&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;options是什么&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;它用于获取当前URL所支持的方法。若请求成功，则它会在HTTP响应头部中带上给各种“Allow”的头，表明某个请求在对应的服务器中都支持哪种请求方法。比如下图：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.0512820512820513&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEcPHg8kxmK0OWwicbic1jduvicafhOXgHhcmAsLntSULkNahoU6vrKDyRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot;/&gt;&lt;/p&gt;&lt;p&gt;这里面需要关注的点有两个&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Request Header里的关键字段&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.1807372175980975&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEUicpNnu4UKJptMXMDM4etg3x2zffQicpk5uSGC2uK1gOTb9bmpQibN6dw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;841&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Response Header里的关键字段&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.33753943217665616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEn0mxNyyCMvUqQwAJoxHLN6rR022bZIOg09RSISGLiahtj19JRhxDCzA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;951&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Options&lt;/code&gt;堪称是网络协议中的老实人，就好像老实人刚谈了个女朋友，每次牵手前都要问下人家 “我可以牵你的手吗？”， “我可以抱你吗？”，得到了答应后才会下手。差点被这老实人气质感动得留下了不争气的泪水。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9850993377483444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEt4hwlvQGsRBIwrWddOUQY3zTmX1yIRFDHlInXJVHDySdT2oHRwLCfg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;604&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;什么时候需要使用options&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;在&lt;strong&gt;跨域&lt;/strong&gt;（记住这个词，待会解释）的情况下，浏览器发起&lt;strong&gt;复杂请求前&lt;/strong&gt;会&lt;strong&gt;自动&lt;/strong&gt;发起 options 请求。跨域共享标准规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 options 方法发起一个预检请求，从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。&lt;/p&gt;&lt;p&gt;这里提到了两个关键词：&lt;/p&gt;&lt;h4&gt;&lt;span&gt;什么是简单请求和复杂请求。&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;某些请求不会触发 CORS 预检请求，这样的请求一般称为&quot;简单请求&quot;，而会触发预检的请求则为&quot;复杂请求&quot;。&lt;/p&gt;&lt;p&gt;1.简单请求&lt;/p&gt;&lt;p&gt;2.复杂请求&lt;/p&gt;&lt;p&gt;由此可见，因为上述请求在获取B站资源的请求Headers里带有 &lt;code&gt;Access-Control-Request-Headers: range&lt;/code&gt; , 而&lt;code&gt;range&lt;/code&gt;正好不在简单请求的条件2中提到的Headers范围里，因此属于&lt;strong&gt;复杂请求&lt;/strong&gt;，于是触发预检options请求。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;什么是跨域&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;刚刚提到了一个词叫&lt;strong&gt;跨域&lt;/strong&gt;，那什么是跨域呢？在了解跨域之前，首先要了解一个概念：&lt;strong&gt;同源&lt;/strong&gt;。所谓&lt;strong&gt;同源&lt;/strong&gt;是指，&lt;strong&gt;域名、协议、端口均相同&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.906&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrELyicjsjC1XfsQbKqBFxdjdY6E7aBjpVDFkmQfvfdJejedodS1ELvpPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;不明白没关系，举个例子。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.23585598824393827&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrE8323QcdLJjeAVnz0BaiaQfPNEjcEUKd1snzibibq9g58odsdkaNjELuCA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1361&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;需要特别注意的是，localhost和127.0.0.1虽然都指向本机，但也&lt;strong&gt;不属于同源&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;而&lt;strong&gt;非同源&lt;/strong&gt;之间网页调用就是我们所说的&lt;strong&gt;跨域&lt;/strong&gt;。在&lt;strong&gt;浏览器&lt;/strong&gt;同源策略限制下，向不同&lt;strong&gt;源&lt;/strong&gt;发送XHR请求，&lt;strong&gt;浏览器&lt;/strong&gt;认为该请求不受信任，禁止请求，具体表现为请求后不正常响应。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;options带来什么问题&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;由此可见，复杂请求的条件其实非常容易满足，而一旦满足复杂请求的条件，则浏览器便会发送2次请求（一次预检options，一次复杂请求），这一次options就一来一回（一个RTT），显然会导致延迟和不必要的网络资源浪费，高并发情况下则可能为服务器带来严重的性能消耗。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;2.287878787878788&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEXbNa1I3v7aico54ibiaq1HVvOWSQBA5WC9I2Fnv6dHIXibAVlyZkvgK8RQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;924&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;如何优化options&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;每次复杂请求前都会调用一次options，这其实非常没有必要。因为大部分时候相同的请求，短时间内获得的结果是不会变的，是否可以通过浏览器缓存省掉这一次查询？&lt;/p&gt;&lt;p&gt;&lt;code&gt;Access-Control-Max-Age&lt;/code&gt;就是优化这个流程中使用的一个Header。它的作用是当你每次请求&lt;code&gt;options&lt;/code&gt;方法时，服务端返回调用支持的方法（Access-Control-Allow-Methods ）和Headers（Access-Control-Allow-Headers）有哪些，同时告诉你，它在接下来 &lt;code&gt;Access-Control-Max-Age&lt;/code&gt;时间（单位是秒）里都支持，则这段时间内，不再需要使用options进行请求。特别注意的是，当&lt;code&gt;Access-Control-Max-Age&lt;/code&gt;的值为-1时，表示禁用缓存，每一次请求都需要发送预检请求，即用OPTIONS请求进行检测。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.1715976331360947&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEuicSFP7ocJArXFp1nfeKkw78EvAgA1JgibdNTPwNtwuCibL6iaayLtibdwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;5.Status Code&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;状态码是什么&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;HTTP Status Code是常说的HTTP状态码。当用户访问一个网页时，浏览器会向网页所在服务器发出请求。服务器则会根据请求作出响应，而状态码则是响应的一部分，代表着本次请求的结果。所有状态码的第一个数字代表了响应的大概含义，组合上第二第三个数字则可以表示更具体的原因。如果请求失败了，通过这个状态码，大概初步判断出这次请求失败的原因。以下是五类状态码的含义。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.43193997856377275&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrE8TglTFFicSf4DL9XSQXYaY6ibXicWTMicO0EqjFLe9icRRgZruBvLUxLYbw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;933&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;状态码流程&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;可以根据以下流程图了解下各类状态码间的关系。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5417348608837971&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEW0CsR8ERKn65Lm2TEngVGJliarrsBvmq7ofib1DY3GDxa0icaeRNS3zxw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1222&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1.998759305210918&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEmLXtPbG8cPfoibcPKiafgCsYIKuYwPoIiaZKzSEozwRduNuuku0q22P3Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1612&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-ratio=&quot;2.8615209988649264&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEojbeia7juhLfgic5ic6pPE4V3licCOPEC7bsWIDzESRNQBOEXibpcYQStQQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1762&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.8120649651972158&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEqqbkxZmX326mfOHlrhBCMDHiarcricYcxRF0zhVF5BbcaOXSreWcY6PA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;862&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;常见状态码介绍&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这是最常见的状态码。代表请求已成功，数据也正常返回。而B站猫片里虽然响应成功了，但却不是200，而是206，是为什么呢，接下去继续看看。&lt;/p&gt;&lt;p&gt;这个状态码在上面B站请求的响应结果。服务器已经成功处理了部分 GET 请求。类似于B站看视频或者迅雷这类的 HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;307 Temporary Redirect&lt;/p&gt;&lt;p&gt;内部重定向。重定向的意思是，当你输入一个网址的时候，浏览器会自动帮你跳转到另外一个网址上。比如，当你在浏览器输入框输入&lt;code&gt;http://www.baidu.com/&lt;/code&gt;时。由于使用http并不安全，百度会自动帮你跳转到它对应的https网页上。而此时，需要重定向的地址，会通过&lt;code&gt;Response Headers&lt;/code&gt;的&lt;code&gt;Location&lt;/code&gt;返回&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6003717472118959&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrE4jsEsticM9rrxpWfkACHicLlYEQZtjHtMRLX0V851g1iap772pzcGaKlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1076&quot;/&gt;&lt;/p&gt;&lt;p&gt;404 Not Found&lt;/p&gt;&lt;p&gt;请求失败，请求所希望得到的资源未被在服务器上发现。出现这个错误的最有可能的原因是服务器端没有这个页面，或者是Request Method与注册URL的Method不一致，比如我有一个URL在服务端注册的Request Method 为 &lt;strong&gt;POST&lt;/strong&gt;，但调用的时候却错误用了&lt;strong&gt;GET&lt;/strong&gt;，则也会出现404错误。&lt;/p&gt;&lt;p&gt;499 Client has closed connection&lt;/p&gt;&lt;p&gt;网络请求过程中，由于服务端处理时间过长，客户端超时。一般常见于，后端服务器处理时间过长，而客户端也设置了一个超时等待时间，客户端等得“不耐烦”了，主动关掉连接时报出。&lt;/p&gt;&lt;figure/&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEc39zPecdHQoyzVasylAMR4mnQPK1bdenbose5V165NFtxb808HW73Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;502 Bad Gateway&lt;/p&gt;&lt;p&gt;服务器方面无法给予正常的响应。一般常见于服务器崩溃后，nginx 无法正常收到服务端的响应，给客户端返回502状态码。&lt;/p&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6921875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEc7m7jb5VMiaWOSGl9zHMwUbTcTyjegfygfia4iamrFwiakHPwRPPiaOZ5HQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;504 Gateway Timeout&lt;/p&gt;&lt;p&gt;网络请求过程中，由于服务端处理时间过长，网关超时。一般常见于，后端服务器逻辑处理时间过长，甚至长于 nginx设置的最长等待时间时报错。它跟 499 状态码非常像，区别在于499 表示的是客户端超时，504是网关超时。如果是499超时，可以考虑修改客户端的代码调整超时时间，如果是504，则考虑调整nginx的超时配置。&lt;/p&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.71015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEXTkeldSlJwU2iatpaM4ERtV4q5KGOeAXS9UaSCky7ticQG8bQI4sblicg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;6. Headers&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;Content-Length&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Content-Length&lt;/code&gt;是HTTP的消息长度, 用&lt;strong&gt;十进制数字&lt;/strong&gt;表示。&lt;code&gt;Content-Length&lt;/code&gt;首部指出报文中消息的当前实际字节大小。如果消息文本进行了gzip压缩的话， &lt;code&gt;Content-Length&lt;/code&gt;指的就是压缩后的大小而不是原始大小。&lt;/p&gt;&lt;p&gt;正常情况下&lt;code&gt;Content-Length&lt;/code&gt;是不需要手动去设置的，大部分语言的网络库都会自动封装好，但是如果在一些特殊情况下，出现&lt;code&gt;Content-Length&lt;/code&gt;与实际要发送的消息大小不一致，就会出现一些问题。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;如果&lt;code&gt;Content-Length&lt;/code&gt; &amp;lt; 实际长度&lt;/p&gt;&lt;p&gt;下面启动一个HTTP服务器，所有语言都一样，示例里使用了golang。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// w表示response对象，返回给客户端的内容都在对象里处理&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// r表示客户端请求对象，包含了请求头，请求参数等等&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;index&lt;/span&gt;&lt;span&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  b, _ := ioutil.ReadAll(r.Body)&lt;br/&gt;  fmt.Printf(&lt;span&gt;&quot;request body=%#v, content_length=%v \nheaders=%v&quot;&lt;/span&gt;,&lt;span&gt;string&lt;/span&gt;(b), r.ContentLength, r.Header)&lt;br/&gt;  &lt;span&gt;// 往w里写入内容，就会在浏览器里输出&lt;/span&gt;&lt;br/&gt;  fmt.Fprintf(w, &lt;span&gt;string&lt;/span&gt;(b))&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;// 设置路由，如果访问/，则调用index方法&lt;/span&gt;&lt;br/&gt;  http.HandleFunc(&lt;span&gt;&quot;/&quot;&lt;/span&gt;, index)&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 启动web服务，监听9090端口&lt;/span&gt;&lt;br/&gt;  err := http.ListenAndServe(&lt;span&gt;&quot;:9999&quot;&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;      log.Fatal(&lt;span&gt;&quot;ListenAndServe: &quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在控制台输入&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot; style=&quot;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;&quot;&amp;gt; curl -L -X POST &#x27;http://127.0.0.1:9999&#x27; -H &#x27;Content-Type: application/json&#x27; -H &#x27;Content-Length: 5&#x27; -d &#x27;1234567&#x27; |  jq&lt;br/&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt; Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;/span&gt;&lt;br/&gt;                               Dload  Upload   Total   Spent    Left  Speed&lt;br/&gt;100    12  100     5  100     7    828   1160 --:--:-- --:--:-- --:--:--  1400&lt;br/&gt;12345&lt;br/&gt;&amp;lt;/span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输入的body是 &lt;code&gt;1234567&lt;/code&gt;，共&lt;strong&gt;7个数字&lt;/strong&gt;，但是输入的 &lt;code&gt;Content-Length&lt;/code&gt;为 5。到了服务器那，收到了 &lt;code&gt;12345&lt;/code&gt;，共&lt;strong&gt;5个数字&lt;/strong&gt;，数量上跟输入的&lt;code&gt;Content-Length&lt;/code&gt;一致。由此可见当&lt;code&gt;Content-Length&lt;/code&gt; &amp;lt; 实际长度， 消息会被截断。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果&lt;code&gt;Content-Length&lt;/code&gt; &amp;gt;  实际长度&lt;/p&gt;&lt;p&gt;还是上面的服务端代码，但是控制台输入以下命令&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; curl -L -X POST &lt;span&gt;&#x27;http://127.0.0.1:9999&#x27;&lt;/span&gt; -H &lt;span&gt;&#x27;Content-Type: application/json&#x27;&lt;/span&gt; -H &lt;span&gt;&#x27;Content-Length: 100&#x27;&lt;/span&gt; -d &lt;span&gt;&#x27;1234567&#x27;&lt;/span&gt; | jq&lt;/span&gt;&lt;br/&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt; Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;/span&gt;&lt;br/&gt;                               Dload  Upload   Total   Spent    Left  Speed&lt;br/&gt;100     7    0     0    0     7      0      0 --:--:--  0:01:19 --:--:--     0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这次情况不太一样，会发现请求一直阻塞没有返回。这是因为输入的body是 &lt;code&gt;1234567&lt;/code&gt;，共&lt;strong&gt;7个数字&lt;/strong&gt;，但是输入的 &lt;code&gt;Content-Length&lt;/code&gt;为 100。也就是服务端一直认为这次的body&lt;strong&gt;长度为100&lt;/strong&gt;，但是目前只收到了&lt;strong&gt;部分消息（长度为7）&lt;/strong&gt;，剩余的长度为93的消息由于各种原因&lt;strong&gt;还在路上&lt;/strong&gt;，因此选择&lt;strong&gt;傻傻等待剩下的消息&lt;/strong&gt;，就造成了上面提到的阻塞。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;Range&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEVaMJquVzGtic48Ox4ViaUib5jHGGVdXqI82yboz41zoSanrzvy1bp7bBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1350&quot;/&gt;&lt;/p&gt;&lt;p&gt;视频播放需要支持用户调整播放进度，支持让用户选择直接跳到中间部分开始播放。为了实现这个功能，需要通过HTTP Range Requests 协议用于指定需要获取视频片段。而 Request Header里的range头则是用于指定要请求文件的起始和结束位置。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.0528846153846154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEhuXVdGdfNfW6T2CxylwwdpziaHLaBkULA29eHzoXe24W8usPhbqIVgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;832&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.1063348416289593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEXEjQ6JQl8YuiaQkQ9oicUPntZX6goqia444Gqu9HwK1nicQrhV47VF5KSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;884&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;如果服务器不支持，直接忽略 Range 头，浏览器会正常按流式加载整个视频文件，以状态码 200 响应即可。另外，当我们在 html 中放一个 video 标签，浏览器会直接发起一个 &lt;code&gt;Range: bytes=0-&lt;/code&gt; 的请求，向服务器请求从开始到结尾的完整文件。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果服务器支持 Range Requests，会读取视频文件，并将他的第 162653～242638 字节提取出来，响应码为 206，则浏览器会在接收到足够字节（比如当前播放进度往后推20s）时结束掉请求，以节省网络流量；当播放进度继续往前，缓存不够时，浏览器会发起一个新的 Range Requests 请求，请求的 Range 直接从缓存结尾的字节开始，只加载剩余的部分文件。同时返回的Response Headers中有一个 content-range 的字段域，用于告诉了客户端发送了多少数据。content-range  描述了响应覆盖的范围和整个实体长度。一般格式：&lt;code&gt;Content-Range：开始字节位置-结束字节位置／文件大小（byte）&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;长连接和短连接&lt;/span&gt;&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Connection: close&lt;/p&gt;&lt;p&gt;表示请求响应完成之后立即关闭连接，这是HTTP/1.0请求的默认值。每次请求都经过“创建tcp连接 -&amp;gt; 请求资源 -&amp;gt; 响应资源 -&amp;gt; 释放连接”这样的过程&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Connection: keep-alive&lt;/p&gt;&lt;p&gt;表示连接不立即关闭，可以继续响应下一个请求。HTTP/1.1的请求默认使用一个持久连接。可以做到只建立一次连接，多次资源请求都复用该连接，完成后关闭。流程上是 建立tcp连接 -&amp;gt; 请求资源 -&amp;gt; 响应资源 -&amp;gt; … （保持连接）…  -&amp;gt;  第n次请求资源 -&amp;gt; 第n次响应资源 -&amp;gt; 释放连接。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在http1.1中Request Header和Reponse Header中都有可能出现一个Connection: keep-alive 头信息。Request Header里的Connection: keep-alive 头是为了告诉服务端，客户端想要以长连接形式进行通信。而Response Header里的Connection: keep-alive 头是服务端告诉客户端，我的服务器支持以长连接的方式进行通信。如果不能使用长连接，会&lt;strong&gt;返回  Connection: close ，相当于告诉客户端“我不支持长连接，你死了这条心，老老实实用短连接吧&lt;/strong&gt;” 。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;HTTP为什么要使用长连接&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;我们知道 HTTP 建立在 TCP 传输层协议之上，而 TCP 的建立需要三次握手，关闭需要四次挥手，这些步骤都需要时间，带给 HTTP 的就是请求响应时延。如果使用短连接，那么每次数据传输都需要经历一次上面提到的几个步骤，如果能只连接一次，保持住这个连接不断开，期间通信就可以省下建立连接和断开连接的过程，对于提升HTTP性能有很大的帮助。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;2.885157096424702&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrECxhRZULRugDkTicq4Hv0WU1S6F8EWgvpR4L4NanZTjIS0icRXgNfuAiaQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;923&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.9989154013015185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEPF5akEr3ZCdjKMSu5NLVzV1Gpdic7zMAhWY8xGFWibV0LiaUBPgDd9yJQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;922&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;长连接&lt;/strong&gt;可以&lt;strong&gt;省去较多的TCP建立和关闭的操作，减少浪费，节约时间&lt;/strong&gt;。对于频繁请求资源的客户来说，较适用长连接。但是在长连接的应用场景下，需要有一方主动关闭连接。如果客户端和服务端之间的连接一直不关闭的话，连接数则会越来越多，严重的时候会造成资源占用过高。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;解决方案也比较简单。如果这些连接其实长时间内并没有任何数据传输的话，那其实属于空闲连接，这时候可以在服务端设置空闲连接的存活时间，超过一定时间后由服务端主动断掉，从而保证无用连接及时释放。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;Cookies&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;Cookies是什么&lt;/span&gt;&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据。里面一般带有该浏览器的身份信息。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;浏览器需要保存这段数据，不得轻易删除。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;此后每次浏览器访问该服务器，都必须带上这段数据。服务器用使用这段数据确认浏览器身份信息。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;&lt;span&gt;Cookie的作用&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;Cookie 一般有两个作用。&lt;/p&gt;&lt;p&gt;1.识别用户身份。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;举个例子。用户 A 用浏览器访问了“猫猫网”，“猫猫网”的服务器就会立刻给 A 返回一段Cookie数据，内含「uid=a」。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当 A 再次访问“猫猫网”下的其他页面时，比如跳转到“猫猫交友评论”，就会附带上「uid=a」这段数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同理，用户 B 用浏览器访问“猫猫网” 时，就给 B 分配了一段Cookie数据，内含「uid=b」。B 之后访问“猫猫网”的时候，就会一直带上「uid=b」这段数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因此“猫猫网”的服务器通过Cookie数据就能区分 A 和 B 两个用户了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;2.持久化用户信息。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因为cookies的数据会被用户浏览器保存到本地下。因此可以利用这一特点保持一些简单的用户数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;比如一些博客网站，可以通过cookies记录下用户的性别年龄等信息，以此进行一些个性化展示。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当然上面提到的都是一些比较粗糙的场景，是为了方便大家理解cookies的功能。实际使用cookies会非常谨慎。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;Referrer Policy 和 Referrer&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.1950207468879668&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrETULWrTtorwZiauv1NhQ1roIQsHMZRicfYrDZOqp0JqRgHXpqFcXUugCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;482&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;Referrer是什么&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;Referrer 是HTTP请求header的报文头，用于指明当前流量的来源参考页面，常被用于分析用户来源等信息。通过这个信息，我们可以知道访客是怎么来到当前页面的。比如在上面的请求截图里，可以看出我是使用&lt;code&gt;https://www.bilibili.com/&lt;/code&gt;访问的视频资源。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;Referrer Policy 是什么&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;为什么要这么麻烦呢？因为有些网站一些用户敏感信息，比如 sessionid 或是 token 放在地址栏里，如果当做Referrer字段全部传递的话，那第三方网站就会拿到这些信息，会有一定的安全隐患。所以就有了 Referrer Policy，用于过滤 Referrer 报头内容。&lt;/p&gt;&lt;p&gt;比如在上面的请求截图里，可以看出我是使用&lt;code&gt;strict-origin-when-cross-origin&lt;/code&gt;策略，含义是跨域时将当前页面URL过滤掉参数及路径部分，仅将协议、域名和端口（如果有的话）当作 Referrer。否则 Referrer 还是传递当前页的全路径。同时当发生降级（比如从 https:// 跳转到 http:// ）时，不传递 Referrer 报头。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Cache-control&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;什么是cache-control&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;cache-control，用于控制浏览器缓存。简而言之，当某人访问网站时，其浏览器将在本地保存某些资源，例如图像和网站数据。当该用户重新访问同一网站时，缓存控制设置的规则会确定该用户是否从本地缓存中加载这些资源，或者浏览器是否必须向服务器发送新资源的请求。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;什么是浏览器缓存&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;浏览器缓存是指浏览器本地保存网站资源，以便不必再次通过网络从服务器获取它们。例如，“猫猫网”的背景图像可以保存到本地缓存中，这样在用户第二次访问该页面时，该图像将从用户的本地文件加载，剩下网络获取资源的时间，页面加载速度就会更快。&lt;/p&gt;&lt;p&gt;但是浏览器也不会永远把这些网站资源放在本地，否则本地磁盘就会炸，所以会限定保存资源的时间，这叫生存时间（TTL）。如果 TTL 过期后用户请求缓存的资源，浏览器必须再次通过网络与服务器建立连接并重新下载这个资源。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;常见的缓存控制策略&lt;/span&gt;&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;cache-control: private&lt;br/&gt;具有“private”指令的响应只能由客户端缓存，不能由中间代理（例如 CDN或代理）缓存。这些资源通常是包含私密数据的资源，例如显示用户个人信息的网站。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;cache-control: public&lt;br/&gt;相反，“public”指令表示资源可以由任何缓存存储。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;cache-control: no-store&lt;br/&gt;带有“no-store”指令的响应无法缓存到任何位置，也永不缓存。也就是说，用户每次请求此数据时，都必须将请求发送到源站服务器以获取新副本。此指令通常保留给包含极其敏感数据的资源，例如银行帐户信息。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;cache-control: max-age&lt;br/&gt;此指令指定了生存时间，也就是资源在下载后可以缓存多少秒钟。例如，如果将最大期限设置为 1800，则首次从服务器请求资源后的 1800 秒（30 分钟）内，后续请求都会向用户提供该资源的缓存版本。如果 30 分钟后用户再次请求资源，则客户端需要向服务器重新请求该资源。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;cache-control: no-cache&lt;/p&gt;&lt;p&gt;从B站截图里可以看出，使用的缓存控制指令是&lt;code&gt;cache-control: no-cache&lt;/code&gt;。它表示，只有先检查资源没有更新版本后，才可使用所请求资源的缓存版本。那么问题来了，怎么判断资源是否有更新版本呢？这就需要 &lt;code&gt;ETag&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;ETag&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.072549019607843&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEtNDibEzkbVcyCtxRtV7EichMJKoVnIszoCxTOCaibwq4T2D9ic7wcaw6rA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1020&quot;/&gt;&lt;/p&gt;&lt;p&gt;Etag是 Entity tag的缩写，是服务端的一个资源版本的令牌标识。在 HTTP 响应头中将其传送到客户端。每当资源更新时，此令牌会更新。&lt;/p&gt;&lt;p&gt;比如，浏览器第一次请求资源的时候，服务端返回了这个资源的&lt;code&gt;ETag: &quot;095933fff2323351d3b495f2f879616f1762f752&quot;&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;当浏览器再次请求这个资源的时候，浏览器会将&lt;code&gt;If-None-Match: &quot;095933fff2323351d3b495f2f879616f1762f752&quot;&lt;/code&gt; 传输给服务端，服务端拿到该ETAG，对比资源是否发生变化。&lt;/p&gt;&lt;p&gt;此过程可确保用户始终获得资源的最新版本，并且无需进行不必要的下载。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;最后&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;果然B站是个充满学习氛围的地方，看个猫片都能学到这么多硬核知识。接下来我打算去舞蹈区看看有没有适合你们的知识点。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.002&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrE5FjleBe3Ny5XrFjla3LiaefbEKdEbQicuBMB2qlW8qCMkKTkKSrTdekg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;我是小白，有空？一起在知识的海洋里呛水啊，懂我意思？&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8574561403508771&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEuTnic9sSf39YRzqLQbH5YyWO7NibiapL3KXq2fC54ynWibPuMSwkicqSMBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;912&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/FmVWPHrDdnlAaoSXY0YM0UFgz62fPnrEaMTUbapm8DVqiaVqCwq7qBRtvOQ3DhPPV9ibeAzRh8txzmzAzlGUlPRg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;- [1] 计算机网络自动向下&lt;/p&gt;&lt;p&gt;- [2] 极客时间-趣谈网络协议&lt;/p&gt;&lt;p&gt;- [3] 极客时间-透视HTTP&lt;/p&gt;&lt;p&gt;- [4] 图解HTTP&lt;/p&gt;&lt;p&gt;- [5] 漫画形象-小肥柴&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>59817a50ebf9de4751ba66ea29a0e63e</guid>
<title>[推荐] Spring Boot 异步调用</title>
<link>https://toutiao.io/k/xxk05uj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;@&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;2.1、无返回值的异步方法&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2.1、有返回值的异步方法&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3.1、方法级别重写Executor&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3.2、应用级别重写Executor&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3.3、自定义线程池配置&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“异步调用”对应的是“同步调用”，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际开发中，有时候为了及时处理请求和进行响应，我们可能使用异步调用，&lt;strong&gt;同步调用指程序按照定义顺序依次执行，每一行程序都必须等待上一行程序执行完成之后才能执行；异步调用指程序在顺序执行时，不等待异步调用的语句返回结果就执行后面的程序。&lt;/strong&gt;异步调用的实现有很多，例如多线程、定时任务、消息队列等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里学习使用@Async注解来实现异步调用。&lt;/p&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、@EnableAsync&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们需要在启动类上添加  @EnableAsync 注解来声明开启异步方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@EnableAsync&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SpringbootAsyncApplication&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        SpringApplication.run(SpringbootAsyncApplication&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;args&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、@Async&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;需要注意的，@Async在使用上有一些限制：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;它只能应用于public修饰的方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自调用–从同一个类中调用async方法，将不起作用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原因很简单：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;只有公共方法，才可以被代理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自调用不起作用，因为它越过了代理直接调用了方法。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1、无返回值的异步方法&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个异步运行的无返回值方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;asyncMethodWithVoidReturnType&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;异步无返回值方法 &quot;&lt;/span&gt;&lt;br/&gt;                + Thread.currentThread().getName());&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;big&gt;实例：&lt;/big&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;AsyncTask:异步式任务类，定义了三个异步式方法。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@Author&lt;/span&gt; 三分恶&lt;br/&gt; * &lt;span&gt;@Date&lt;/span&gt; 2020/7/15&lt;br/&gt; * &lt;span&gt;@Description&lt;/span&gt; 异步式任务&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AsyncTask&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   Logger log= LoggerFactory.getLogger(AsyncTask&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Random random = &lt;span&gt;new&lt;/span&gt; Random();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 定义三个异步式方法&lt;br/&gt;     * &lt;span&gt;@throws&lt;/span&gt; InterruptedException&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;taskOne&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; start = System.currentTimeMillis();&lt;br/&gt;        &lt;span&gt;//随机休眠若干毫秒&lt;/span&gt;&lt;br/&gt;        Thread.sleep(random.nextInt(&lt;span&gt;10000&lt;/span&gt;));&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; end = System.currentTimeMillis();&lt;br/&gt;        log.info(&lt;span&gt;&quot;任务一执行完成耗时{}秒&quot;&lt;/span&gt;, (end - start)/&lt;span&gt;1000f&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;taskTwo&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; start = System.currentTimeMillis();&lt;br/&gt;        Thread.sleep(random.nextInt(&lt;span&gt;10000&lt;/span&gt;));&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; end = System.currentTimeMillis();&lt;br/&gt;        log.info(&lt;span&gt;&quot;任务二执行完成耗时{}秒&quot;&lt;/span&gt;, (end - start)/&lt;span&gt;1000f&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;taskThree&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; start = System.currentTimeMillis();&lt;br/&gt;        Thread.sleep(random.nextInt(&lt;span&gt;10000&lt;/span&gt;));&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; end = System.currentTimeMillis();&lt;br/&gt;        log.info(&lt;span&gt;&quot;任务三执行完成耗时{}秒&quot;&lt;/span&gt;, (end - start)/&lt;span&gt;1000f&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@Author&lt;/span&gt; 三分恶&lt;br/&gt; * &lt;span&gt;@Date&lt;/span&gt; 2020/7/15&lt;br/&gt; * &lt;span&gt;@Description&lt;/span&gt;&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@SpringBootTest&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RunWith&lt;/span&gt;(SpringRunner&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AsyncTaskTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; AsyncTask asyncTask;&lt;br/&gt;&lt;br/&gt;    Logger log= LoggerFactory.getLogger(AsyncTaskTest&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doAsyncTasks&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;long&lt;/span&gt; start = System.currentTimeMillis();&lt;br/&gt;            &lt;span&gt;//调用三个异步式方法&lt;/span&gt;&lt;br/&gt;            asyncTask.taskOne();&lt;br/&gt;            asyncTask.taskTwo();&lt;br/&gt;            asyncTask.taskThree();&lt;br/&gt;            Thread.sleep(&lt;span&gt;5000&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;long&lt;/span&gt; end = System.currentTimeMillis();&lt;br/&gt;            log.info(&lt;span&gt;&quot;主程序执行完成耗时{}秒&quot;&lt;/span&gt;, (end - start)/&lt;span&gt;1000f&lt;/span&gt;);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果：可以看到三个方法没有顺序执行，这个复执行单元测试，您可能会遇到各种不同的结果，比如：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1570048309178744&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf6Ow2vqaaH7vmQwx1J3XPf2qicBREaC2hvY5IoR3ZoiaWjn1N02QfW7A3ibzuIOsMQznFZeP0QM5USA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1242&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;在这里插入图片描述&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1495480690221857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf6Ow2vqaaH7vmQwx1J3XPfrJ6Wia9tliagqxMHqGXIAbusrT3YnxIEXibgtta291lJC9ZCHAnNH5H7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1217&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;在这里插入图片描述&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原因是目前doTaskOne、doTaskTwo、doTaskThree三个函数的时候已经是异步执行了。&lt;strong&gt;主程序在异步调用之后，主程序并不会理会这三个函数是否执行完成了，由于没有其他需要执行的内容，所以程序就自动结束了，&lt;/strong&gt;导致了不完整或是没有输出任务相关内容的情况。&lt;/p&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1、有返回值的异步方法&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;@Async也可以应用有返回值的方法–通过在Future中包装实际的返回值：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;   &lt;span&gt;/**&lt;br/&gt;     * 有返回值的异步方法&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Future&amp;lt;String&amp;gt; &lt;span&gt;asyncMethodWithReturnType&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;执行有返回值的异步方法 &quot;&lt;/span&gt;&lt;br/&gt;                + Thread.currentThread().getName());&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            Thread.sleep(&lt;span&gt;5000&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AsyncResult&amp;lt;String&amp;gt;(&lt;span&gt;&quot;hello world !!!!&quot;&lt;/span&gt;);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            &lt;span&gt;//&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring还提供了一个实现Future的AsyncResult类。这个类可用于跟踪异步方法执行的结果。&lt;/p&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;big&gt;实例：&lt;/big&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Future&amp;lt;String&amp;gt; &lt;span&gt;taskOne&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; start = System.currentTimeMillis();&lt;br/&gt;        &lt;span&gt;//随机休眠若干毫秒&lt;/span&gt;&lt;br/&gt;        Thread.sleep(random.nextInt(&lt;span&gt;10000&lt;/span&gt;));&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; end = System.currentTimeMillis();&lt;br/&gt;        log.info(&lt;span&gt;&quot;任务一执行完成耗时{}秒&quot;&lt;/span&gt;, (end - start)/&lt;span&gt;1000f&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AsyncResult&amp;lt;&amp;gt;(&lt;span&gt;&quot;任务一完事了&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;taskTwo、taskThree方法做同样的改造。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;   &lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doFutureTask&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;long&lt;/span&gt; start=System.currentTimeMillis();&lt;br/&gt;            Future&amp;lt;String&amp;gt; future1=asyncTask.taskOne();&lt;br/&gt;            Future &amp;lt;String&amp;gt; future2 = asyncTask.taskTwo();&lt;br/&gt;            Future &amp;lt;String&amp;gt; future3 = asyncTask.taskThree();&lt;br/&gt;            &lt;span&gt;//三个任务执行完再执行主程序&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;do&lt;/span&gt; {&lt;br/&gt;                Thread.sleep(&lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;            } &lt;span&gt;while&lt;/span&gt; (future1.isDone() &amp;amp;&amp;amp; future2.isDone() &amp;amp;&amp;amp; future3.isDone());&lt;br/&gt;            log.info(&lt;span&gt;&quot;获取异步方法的返回值:{}&quot;&lt;/span&gt;, future1.get());&lt;br/&gt;            Thread.sleep(&lt;span&gt;5000&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;long&lt;/span&gt; end = System.currentTimeMillis();&lt;br/&gt;            log.info(&lt;span&gt;&quot;主程序执行完成耗时{}秒&quot;&lt;/span&gt;, (end - start)/&lt;span&gt;1000f&lt;/span&gt;);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (ExecutionException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果：可以看到三个任务完成后才执行主程序，还输出了异步方法的返回值。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.18764478764478765&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf6Ow2vqaaH7vmQwx1J3XPfonwKlHw1nt6Bmhcmich6hia9Reb9KnJvRMYXAUcpXbboo3BxLIaYLPyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1295&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;在这里插入图片描述&lt;/figcaption&gt;&lt;/figure&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、 Executor&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认情况下，Spring使用SimpleAsyncTaskExecutor异步运行这些方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以在两个级别上重写默认线程池——应用程序级别或方法级别。&lt;/p&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1、方法级别重写Executor&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所需的执行程序需要在配置类中声明 Executor：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@Author&lt;/span&gt; 三分恶&lt;br/&gt; * &lt;span&gt;@Date&lt;/span&gt; 2020/7/15&lt;br/&gt; * &lt;span&gt;@Description&lt;/span&gt; 方法级别重写线程池&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@EnableAsync&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SpringAsyncConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;(name = &lt;span&gt;&quot;threadPoolTaskExecutor&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Executor &lt;span&gt;threadPoolTaskExecutor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，在@Async中的属性提供Executor名称：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;@Async&lt;/span&gt;(&lt;span&gt;&quot;threadPoolTaskExecutor&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;asyncMethodWithConfiguredExecutor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;Execute method with configured executor - &quot;&lt;/span&gt;&lt;br/&gt;                + Thread.currentThread().getName());&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2、应用级别重写Executor&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置类应实现AsyncConfigurer接口，重写getAsyncExecutor()方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里，我们将返回整个应用程序的Executor，这样一来，它就成为运行以@Async注释的方法的默认Executor：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@Author&lt;/span&gt; 三分恶&lt;br/&gt; * &lt;span&gt;@Date&lt;/span&gt; 2020/7/15&lt;br/&gt; * &lt;span&gt;@Description&lt;/span&gt; 应用级别重写 Excutor&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@EnableAsync&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SpringApplicationAsyncConfig&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AsyncConfigurer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Executor &lt;span&gt;getAsyncExecutor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3、自定义线程池配置&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上面，自定义线程池只是简单地返回了一个线程池：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，还可以对线程池做一些配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@Author&lt;/span&gt; 三分恶&lt;br/&gt; * &lt;span&gt;@Date&lt;/span&gt; 2020/7/15&lt;br/&gt; * &lt;span&gt;@Description&lt;/span&gt;&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@EnableAsync&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SpringPropertiesAsyncConfig&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AsyncConfigurer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 对线程池进行配置&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Executor &lt;span&gt;getAsyncExecutor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ThreadPoolTaskExecutor taskExecutor = &lt;span&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;br/&gt;        taskExecutor.setCorePoolSize(&lt;span&gt;20&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setMaxPoolSize(&lt;span&gt;200&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setQueueCapacity(&lt;span&gt;25&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setKeepAliveSeconds(&lt;span&gt;200&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setThreadNamePrefix(&lt;span&gt;&quot;oKong-&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者&lt;/span&gt;&lt;br/&gt;        taskExecutor.setRejectedExecutionHandler(&lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor.CallerRunsPolicy());&lt;br/&gt;        taskExecutor.initialize();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; taskExecutor;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ThreadPoolTaskExecutor配置参数的简单说明：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;corePoolSize：线程池维护线程的最少数量&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;keepAliveSeconds：允许的空闲时间,当超过了核心线程出之外的线程在空闲时间到达之后会被销毁&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;maxPoolSize：线程池维护线程的最大数量,只有在缓冲队列满了之后才会申请超过核心线程数的线程&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;queueCapacity：缓存队列&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;rejectedExecutionHandler：线程池对拒绝任务（无线程可用）的处理策略。这里采用了CallerRunsPolicy策略，当线程池没有处理能力的时候，该策略会直接在 execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务。还有一个是AbortPolicy策略：处理程序遭到拒绝将抛出运行时RejectedExecutionException。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、异常处理&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当方法返回类型为Future时，异常处理很容易– Future.get()方法将抛出异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是如果是无返回值的异步方法，&lt;strong&gt;异常不会传播到调用线程。&lt;/strong&gt;因此，我们需要添加额外的配置来处理异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将通过实现AsyncUncaughtExceptionHandler接口来创建自定义异步异常处理程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当存在任何未捕获的异步异常时，将调用handleUncaughtException()方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@Author&lt;/span&gt; 三分恶&lt;br/&gt; * &lt;span&gt;@Date&lt;/span&gt; 2020/7/15&lt;br/&gt; * &lt;span&gt;@Description&lt;/span&gt;&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomAsyncExceptionHandler&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AsyncUncaughtExceptionHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;handleUncaughtException&lt;/span&gt;&lt;span&gt;(Throwable throwable, Method method, Object... objects)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;Exception message - &quot;&lt;/span&gt; + throwable.getMessage());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;Method name - &quot;&lt;/span&gt; + method.getName());&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (Object param : objects) {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;Parameter value - &quot;&lt;/span&gt; + param);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面，我们使用配置类实现了AsyncConfigurer接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为其中的一部分，我们还需要重写getAsyncUncaughtExceptionHandler()方法以返回我们的自定义异步异常处理：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;/**&lt;br/&gt;     * 返回自定义异常处理&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AsyncUncaughtExceptionHandler &lt;span&gt;getAsyncUncaughtExceptionHandler&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CustomAsyncExceptionHandler();&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5、总结&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里异步请求的使用及相关配置，如超时，异常等处理。在剥离一些和业务无关的操作时，就可以考虑使用异步调用进行其他无关业务操作，以此提供业务的处理效率。或者一些业务场景下可拆分出多个方法进行同步执行又互不影响时，也可以考虑使用异步调用方式提供执行效率。&lt;/p&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文为学习笔记类博客，学习资料来源见参考！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;big&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/big&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【1】：《深入浅出SpringBoot 2.x》
【2】：Spring Boot中使用@Async实现异步调用【3】：SpringBoot 中异步执行任务的 2 种方式【4】：How To Do @Async in Spring【5】：SpringBoot系列：Spring Boot异步调用@Async【6】：SpringBoot | 第二十一章：异步开发之异步调用【7】：实战Spring Boot 2.0系列(三) - 使用@Async进行异步调用详解&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8f2c792937841e234117e1426de9abc4</guid>
<title>[推荐] 面试 Redis 没底？这 40 道面试题让你不再慌（附答案）</title>
<link>https://toutiao.io/k/0b1v2v6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1 spellcheck=&quot;false&quot; data-pm-slice=&quot;0 0 []&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.33184855233853006&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;898&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRgzIV2YTLYP1C9K6m6ZesXIGMic8cBk5es1ZicMDfULrExGEw49a51icWhlYkA1pXmib62xNNUDrMgXA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;我是架构精进之路，点击上方“关注”，坚持每天为你分享技术干货，私信我回复“01”，送你一份程序员成长进阶大礼包。&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot; data-pm-slice=&quot;0 0 []&quot;&gt;&lt;span&gt;金三银四面试季，为了做好大家面试路上的助攻手，对于Redis这块心里还没底的同学，特整理40道Redis常见面试题，让你面试不慌，争取Offer拿到手软！&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;img data-height=&quot;674&quot; data-ratio=&quot;0.5616666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BI6BibH8ptMd09kibsHCWGVibtbBibSck1UvYEvQlKWw0n7zQr8xQegHNtFkfAp4ZghS0ykemUjuEricv11SxKu6ib7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot; data-width=&quot;1200&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot; data-pm-slice=&quot;0 0 []&quot;&gt;&lt;strong&gt;&lt;span&gt;1、什么是 Redis?&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;Redis 是完全开源免费的，遵守 BSD 协议，是一个高性能的 key-value 数据库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Redis 与其他 key - value 缓存产品有以下三个特点：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）Redis 不仅仅支持简单的 key-value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）Redis 支持数据的备份，即 master-slave 模式的数据备份。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Redis 优势&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）性能极高 – Redis 能读的速度是 110000 次/s,写的速度是 81000 次/s 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）丰富的数据类型 – Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及Ordered Sets 数据类型操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）原子 – Redis 的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过 MULTI 和 EXEC指令包起来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）丰富的特性 – Redis 还支持 publish/subscribe, 通知, key 过期等等特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Redis 与其他 key-value 存储有什么不同？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）Redis 有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis 的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）Redis 运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样 Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;2、Redis 的数据类型？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：Redis 支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及 zsetsorted set：有序集合)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们实际项目中比较常用的是 string，hash 如果你是 Redis 中高级用户，还需要加上下面几种数据结构 HyperLogLog、Geo、Pub/Sub。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你说还玩过 Redis Module，像 BloomFilter，RedisSearch，Redis-ML，面试官的眼睛就开始发亮了。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;3、使用 Redis 有哪些好处？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;（1）速度快，因为数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O1)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）支持丰富数据类型，支持 string，list，set，Zset，hash 等&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）丰富的特性：可用于缓存，消息，按 key 设置过期时间，过期后将会自动删除&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;4、Redis 相比 Memcached 有哪些优势？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;（1）Memcached 所有的值均是简单的字符串，redis 作为其替代者，支持更为丰富的数据类&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）Redis 的速度比 Memcached 快很&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）Redis 可以持久化其数据&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;5、Memcache 与 Redis 的区别都有哪些？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;（1）存储方式 Memecache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。Redis 有部分存在硬盘上，这样能保证数据的持久性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）数据支持类型 Memcache 对数据类型支持相对简单。Redis 有复杂的数据类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）使用底层模型不同 它们之间底层实现方式 以及与客户端之间通信的应用协议不一样。Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。 &lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;6、Redis 是单进程单线程的？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：Redis 是单进程单线程的，redis 利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;7、一个字符串类型的智能存储最大容量是多少？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：512M&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;8、Redis 的持久化机制是什么？各自的优缺点？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;Redis提供两种持久化机制 RDB 和 AOF 机制:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、RDB（Redis DataBase)持久化方式：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;是指用数据集快照的方式半持久化模式)记录 redis 数据库的所有键值对,在某个时间点将数据写入一个临时文件，持久化结束后，用这个临时文件替换上次持久化的文件，达到数据恢复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;优点：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）只有一个文件 dump.rdb，方便持久化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）容灾性好，一个文件可以保存到安全的磁盘。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis的高性能)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）相对于数据集大时，比 AOF 的启动效率更高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;缺点：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、AOF（Append-only file)持久化方式：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;是指所有的命令行记录以 redis 命令请求协议的格式完全持久化存储)保存为 aof 文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;优点&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次命令操作就记录到 aof 文件中一次。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof工具解决数据一致性问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;缺点：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）AOF 文件比 RDB 文件大，且恢复速度慢。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）数据集大的时候，比 rdb 启动效率低。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;strong&gt;&lt;span&gt;9、Redis 常见性能问题和解决方案：&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;（1）Master 最好不要写内存快照，如果 Master 写内存快照，save 命令调度 rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）为了主从复制的速度和连接的稳定性，Master 和 Slave 最好在同一个局域网&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）尽量避免在压力很大的主库上增加从&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（5）主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &amp;lt;- Slave1&amp;lt;- Slave2 &amp;lt;- Slave3…这样的结构方便解决单点故障问题，实现 Slave 对 Master的替换。如果 Master 挂了，可以立刻启用 Slave1 做 Master，其他不变。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;10、redis 过期键的删除策略？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;（1）定时删除:在设置键的过期时间的同时，创建一个定时器 timer). 让定时器在键的过期时间来临时，立即执行对键的删除操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）惰性删除:放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键;如果没有过期，就返回该键。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）定期删除:每隔一段时间程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1614499661579&quot; data-category_id_list=&quot;1|11|16|17|22|24|26|27|28|29|3|31|32|35|36|37|39|41|42|43|45|46|47|48|49|5|50|51|52|53|54|55|6|7|8&quot; data-id=&quot;1614499661579&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;11、Redis 的回收策略（淘汰策略）?&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;volatile-lru&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;volatile-ttl&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;volatile-random&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;allkeys-lru&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;allkeys-random&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从数据集（server.db[i].dict）中任意选择数据淘汰&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;no-enviction&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（驱逐）：禁止驱逐数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意这里的 6 种机制，volatile 和 allkeys 规定了是对已设置过期时间的数据集淘汰数据还是从全部数据集淘汰数据，后面的 lru、ttl 以及 random 是三种不同的淘汰策略，再加上一种 no-enviction 永不回收的策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;使用策略规则：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用 allkeys-lru&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用allkeys-random&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;12、为什么 Redis 需要把所有数据放到内存中？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答 ：Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以 redis 具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘 I/O 速度为严重影响 redis 的性能。在内存越来越便宜的今天，redis 将会越来越受欢迎。如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;13、Redis 的同步机制了解么？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：Redis 可以使用主从同步，从从同步。第一次同步时，主节点做一次 bgsave，并同时将后续修改操作记录到内存 buffer，待完成后将 rdb 文件全量同步到复制节点，复制节点接收完成后将 rdb 镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。 &lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;14、Pipeline 有什么好处，为什么要用 pipeline？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：可以将多次 IO 往返的时间缩减为一次，前提是 pipeline 执行的指令之间没有因果相关性。使用 redis-benchmark 进行压测的时候可以发现影响 redis 的 QPS峰值的一个重要因素是 pipeline 批次指令的数目。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;15、是否使用过 Redis 集群，集群的原理是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;（1）Redis Sentinal 着眼于高可用，在 master 宕机时会自动将 slave 提升为master，继续提供服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）Redis Cluster 着眼于扩展性，在单个 redis 内存不足时，使用 Cluster 进行分片存储。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;16、Redis 集群方案什么情况下会导致整个集群不可用？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：有 A，B，C 三个节点的集群,在没有复制模型的情况下,如果节点 B 失败了，那么整个集群就会以为缺少 5501-11000 这个范围的槽而不可用。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;17、Redis 支持的 Java 客户端都有哪些？官方推荐用哪个？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：Redisson、Jedis、lettuce 等等，官方推荐使用 Redisson。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;18、Jedis 与 Redisson 对比有什么优缺点？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：Jedis 是 Redis 的 Java 实现的客户端，其 API 提供了比较全面的 Redis 命令的支持；Redisson 实现了分布式和可扩展的 Java 数据结构，和 Jedis 相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等 Redis 特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Redisson 的宗旨是促进使用者对 Redis 的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;19、Redis 如何设置密码及验证密码？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;设置密码：config set requirepass 123456&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;授权密码：auth 123456&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;20、说说 Redis 哈希槽的概念？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：Redis 集群没有使用一致性 hash,而是引入了哈希槽的概念，Redis 集群有16384 个哈希槽，每个 key 通过 CRC16 校验后对 16384 取模来决定放置哪个槽，集群的每个节点负责一部分 hash 槽。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;21、Redis 集群的主从复制模型是怎样的？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型,每个节点都会有 N-1 个复制品.&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;22、Redis 集群会有写操作丢失吗？为什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答 ：Redis 并不能保证数据的强一致性，这意味着在实际中集群在特定的条件下可能会丢失写操作。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;23、Redis 集群之间是如何复制的？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：异步复制&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;24、Redis 集群最大节点个数是多少？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：16384 个。 &lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;25、Redis 集群如何选择数据库？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：Redis 集群目前无法做数据库选择，默认在 0 数据库。 &lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;26、怎么测试 Redis 的连通性？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：使用 ping 命令。 &lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;27、怎么理解 Redis 事务？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;28、Redis 事务相关的命令有哪几个？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：MULTI、EXEC、DISCARD、WATCH&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;29、Redis key 的过期时间和永久有效分别怎么设置？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：EXPIRE 和 PERSIST 命令。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;30、Redis 如何做内存优化？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的 web 系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的 key,而是应该把这个用户的所有信息存储到一张散列表里面。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1614499694254&quot; data-category_id_list=&quot;1|11|16|17|22|24|26|27|28|29|3|31|32|35|36|37|39|41|42|43|45|46|47|48|49|5|50|51|52|53|54|55|6|7|8&quot; data-id=&quot;1614499694254&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;31、Redis 回收进程如何工作的？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：一个客户端运行了新的命令，添加了新的数据。Redi 检查内存使用情况，如果大于 maxmemory 的限制, 则根据设定好的策略进行回收。一个新的命令被执行，等等。所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;32、都有哪些办法可以降低 Redis 的内存使用情况呢？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：如果你使用的是 32 位的 Redis 实例，可以好好利用 Hash,list,sorted set,set等集合类型数据，因为通常情况下很多小的 Key-Value 可以用更紧凑的方式存放到一起。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;33、Redis 的内存用完了会发生什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：如果达到设置的上限，Redis 的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以将 Redis 当缓存来使用配置淘汰机制，当 Redis 达到内存上限时会冲刷掉旧的内容。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;34、一个 Redis 实例最多能存放多少的 keys？List、Set、Sorted Set 他们最多能存放多少元素？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：理论上 Redis 可以处理多达 232 的 keys，并且在实际中进行了测试，每个实例至少存放了 2 亿 5 千万的 keys。我们正在测试一些较大的值。任何 list、set、和 sorted set 都可以放 232 个元素。换句话说，Redis 的存储极限是系统中的可用内存值。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;35、MySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中的数据都是热点数据&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;？&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：Redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相关知识：&lt;strong&gt;Redis 提供 6 种数据淘汰策略&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;volatile-lru&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;volatile-ttl&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;volatile-random&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;allkeys-lru&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;allkeys-random&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从数据集（server.db[i].dict）中任意选择数据淘汰&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;no-enviction&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（驱逐）：禁止驱逐数据&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;36、Redis 最适合的场景？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、会话缓存（Session Cache）&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最常用的一种使用 Redis 的情景是会话缓存（session cache）。用 Redis 缓存会话比其他存储（如 Memcached）的优势在于：Redis 提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用 Redis 来缓存会话的文档。甚至广为人知的商业平台Magento 也提供 Redis 的插件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、全页缓存（FPC）&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除基本的会话 token 之外，Redis 还提供很简便的 FPC 平台。回到一致性问题，即使重启了 Redis 实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似 PHP 本地 FPC。再次以 Magento 为例，Magento提供一个插件来使用 Redis 作为全页缓存后端。此外，对 WordPress 的用户来说，Pantheon 有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、队列&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Reids 在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得 Redis能作为一个很好的消息队列平台来使用。Redis 作为队列使用的操作，就类似于本地程序语言（如 Python）对 list 的 push/pop 操作。如果你快速地在 Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用 Redis 创建非常好的后端工具，以满足各种队列需求。例如，Celery 有一个后台就是使用 Redis 作为 broker，你可以从这里去查看。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、排行榜/计数器&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Redis 在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis 只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的 10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：ZRANGE user_scores 0 10 WITHSCORES Agora Games 就是一个很好的例子，用 Ruby 实现的，它的排行榜就是使用 Redis 来存储数据的，你可以在这里看到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5、发布/订阅&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后（但肯定不是最不重要的）是 Redis 的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用 Redis 的发布/订阅功能来建立聊天系统！&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;37、假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：使用 keys 指令可以扫出指定模式的 key 列表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对方接着追问：如果这个 redis 正在给线上的业务提供服务，那使用 keys 指令会有什么问题？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个时候你要回答 redis 关键的一个特性：redis 的单线程的。keys 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用 scan 指令，scan 指令可以无阻塞地提取出指定模式的 key 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 keys 指令长。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;38、如果有大量的 key 需要设置同一时间过期，一般需要注意什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：如果大量的 key 过期时间设置的过于集中，到过期的那个时间点，redis 可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使得过期时间分散一些。&lt;/span&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;39、使用过 Redis 做异步队列么，你是怎么用的？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;答：一般使用 list 结构作为队列，rpush 生产消息，lpop 消费消息。当 lpop 没有消息的时候，要适当 sleep 一会再重试。如果对方追问可不可以不用 sleep 呢？list 还有个指令叫 blpop，在没有消息的时候，它会阻塞住直到消息到来。如果对方追问能不能生产一次消费多次呢？使用 pub/sub 主题订阅者模式，可以实现1:N 的消息队列。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如果对方追问 pub/sub 有什么缺点？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如 RabbitMQ等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如果对方追问 redis 如何实现延时队列？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我估计现在你很想把面试官一棒打死如果你手上有一根棒球棍的话，怎么问得这么详细。但是你很克制，然后神态自若地回答道：使用 sortedset，拿时间戳作为score，消息内容作为 key 调用 zadd 来生产消息，消费者用 zrangebyscore 指令获取 N 秒之前的数据轮询进行处理。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;到这里，面试官暗地里已经对你竖起了大拇指。但是他不知道的是此刻你却竖起了中指，在椅子背后。 &lt;/p&gt;&lt;/blockquote&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;40、使用过 Redis 分布式锁么，它是什么回事？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;先拿 setnx 来争抢锁，抢到之后，再用 expire 给锁加一个过期时间防止锁忘记了释放。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时候对方会告诉你说你回答得不错，然后接着问如果在 setnx 之后执行 expire之前进程意外 crash 或者要重启维护了，那会怎么样？这时候你要给予惊讶的反馈：唉，是喔，这个锁就永远得不到释放了。紧接着你需要抓一抓自己的脑袋，故作思考片刻，好像接下来的结果是你主动思考出来的，然后回答：我记得 set 指令有非常复杂的参数，这个应该是可以同时把 setnx 和expire 合成一条指令来用的！&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;对方这时会显露笑容，心里开始默念：摁，这小子还不错。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：https://blog.csdn.net/Design407/article/details/103242874&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;福利：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;关注本公众号，在底部菜单栏「福利专区」-面试资料，即可免费获取大量面试相关技术图书资料。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5583333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyerKrZ4bZNErgXUmOQq7yoicWFJgeNhVzBX2ZIicEmdmfhSNUMeWLF5OMSiarHRoVdAAAJDke3Dib8q2vb9PceZWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p data-pm-slice=&quot;1 1 []&quot;&gt;&lt;/p&gt;&lt;p data-pm-slice=&quot;1 1 []&quot;&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;作者：架构精进之路，专注软件架构研究，技术学习与个人成长，关注并私信我回复“01”，送你一份程序员成长进阶大礼包。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;往期热文推荐：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98311&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTqLjdQBs7fV8zqHRaQhA2ibia13fFn6ibS5qr5PpmZoxd8nlhAyJu7d1CjLicAruicOEb7uxibEGM476xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87502&quot;&gt;&lt;p&gt;&lt;span&gt;「技术架构精进」专注架构研究，技术分享&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Thanks for reading!&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4e62059aa423339b80408f0de3f44855</guid>
<title>[推荐] 高并发系统的限流策略：漏桶和令牌桶（附源码剖析）</title>
<link>https://toutiao.io/k/x6ro69m</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;哈喽，大家好，我是正在学习&lt;code&gt;PS&lt;/code&gt;技术的&lt;code&gt;asong&lt;/code&gt;，这是我并发编程系列的第&lt;code&gt;5&lt;/code&gt;篇文章，今天与大家聊一聊高并发系统中的限流技术，限流又称为流量控制，是指限制到达系统的并发请求数，当达到限制条件则可以拒绝请求，可以起到保护下游服务，防止服务过载等作用。常用的限流策略有漏桶算法、令牌桶算法、滑动窗口；下文主要与大家一起分析一下漏桶算法和令牌桶算法，滑动窗口就不在这里这介绍了。好啦，废话不多话，开整。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;漏桶算法&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;漏桶算法比较好理解，假设我们现在有一个水桶，我们向这个水桶里添水，虽然我们我们无法预计一次会添多少水，也无法预计水流入的速度，但是可以固定出水的速度，不论添水的速率有多大，都按照固定的速率流出，如果桶满了，溢出的上方水直接抛弃。我们把水当作&lt;code&gt;HTTP&lt;/code&gt;请求，每次都把请求放到一个桶中，然后以固定的速率处理请求，说了这么多，不如看一个图加深理解(图片来自于网络，手残党不会画，多多包涵)：&lt;/p&gt;&lt;img data-ratio=&quot;1.3176229508196722&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPNFVT6F1cSh4LJhic7wX9o3chrbsG2ukqH2YliaicwdJibcq8icWRObTT5crsHvaUBic5t9ndGGxRLLYwyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;488&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原理其实很简单，就看我们怎么实现它了，&lt;code&gt;uber&lt;/code&gt;团队有一个开源的&lt;code&gt;uber-go/ratelimit&lt;/code&gt;库，这个库就是漏桶的一种实现，下面我们一起来看一看他的实现思路。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;样例&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习一个新东西的时候，往往是从会用开始的，慢慢才能明白其实现原理，所以我们先来看看这个库是怎样使用的，这里我们直接提供一个实际使用例子，配合&lt;code&gt;Gin&lt;/code&gt;框架，我们添加一个限流中间件，来达到请求限流的作用，测试代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 定义全局限流器对象&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; rateLimit ratelimit.Limiter&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 在 gin.HandlerFunc 加入限流逻辑&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;leakyBucket&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;gin&lt;/span&gt;.&lt;span&gt;HandlerFunc&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; prev := time.Now()&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  now := rateLimit.Take()&lt;br/&gt;  fmt.Println(now.Sub(prev)) &lt;span&gt;// 为了打印时间间隔&lt;/span&gt;&lt;br/&gt;  prev = now &lt;span&gt;// 记录上一次的时间，没有这个打印的会有问题&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; rateLimit = ratelimit.New(&lt;span&gt;10&lt;/span&gt;)&lt;br/&gt; r := gin.Default()&lt;br/&gt; r.GET(&lt;span&gt;&quot;/ping&quot;&lt;/span&gt;, leakyBucket(), &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  c.JSON(&lt;span&gt;200&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt; })&lt;br/&gt; r.Run() &lt;span&gt;// listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们简单使用压测工具&lt;code&gt;ab&lt;/code&gt;测试一下：&lt;code&gt;ab -n 10 -c 2 http://127.0.0.1:8080/ping&lt;/code&gt;，执行结果部分如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3687074829931973&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPNFVT6F1cSh4LJhic7wX9o3cuPNpVZHTAJ6bSDPeHCC79oZktdSpbBiaTgPIAWiawypIicd5LGmwcDNvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;735&quot;/&gt;&lt;/figure&gt;&lt;img data-ratio=&quot;0.7490494296577946&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPNFVT6F1cSh4LJhic7wX9o3cmtHcjFh7L588hQFUGgCynLuSw7v9GMR8fJc2VabFIhkdEiccpDSclhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;789&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;观察结果可知，每次处理请求的时间间隔是10ms，并且后面的请求耗时越来越久，为什么会这样呢？这里先卖个小关子，看完&lt;code&gt;uber&lt;/code&gt;的实现你就知道了～&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;源码实现&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们首先来看一下其核心结构：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; limiter &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; sync.Mutex&lt;br/&gt; last       time.Time&lt;br/&gt; sleepFor   time.Duration&lt;br/&gt; perRequest time.Duration&lt;br/&gt; maxSlack   time.Duration&lt;br/&gt; clock      Clock&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Limiter &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// Take should block to make sure that the RPS is met.&lt;/span&gt;&lt;br/&gt; Take() time.Time&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限制器接口只提供了一个方法&lt;code&gt;take()&lt;/code&gt;，&lt;code&gt;take()&lt;/code&gt;方法会阻塞确保两次请求之间的时间走完，具体实现我们在下面进行分析。实现限制器接口的结构体中各个字段的意义如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;sync.Mutext&lt;/code&gt;：互斥锁，控制并发的作用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;last&lt;/code&gt;：记录上一次的时刻&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;sleepFor&lt;/code&gt;：距离处理下一次请求需要等待的时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;perRequest&lt;/code&gt;：每次请求的时间间隔&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxSlack&lt;/code&gt;：最大松弛量，用来解决突发流量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;clock&lt;/code&gt;：一个时钟或模拟时钟，提供了&lt;code&gt;now&lt;/code&gt;和&lt;code&gt;sleep&lt;/code&gt;方法，是实例化速率限制器&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要是用该限制器，首先需要通过&lt;code&gt;New&lt;/code&gt;方法进行初始化，一个必传的参数是&lt;code&gt;rate&lt;/code&gt;，代表的是每秒请求量(RPS)，还有一个可选参数，参数类型&lt;code&gt;option&lt;/code&gt;，也就是我们可以自定义&lt;code&gt;limit&lt;/code&gt;，不过一般使用场景不多，这里就不过多介绍了。我主要看一下他是怎么保证固定速率的，截取&lt;code&gt;New&lt;/code&gt;方法部分代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;l := &amp;amp;limiter{&lt;br/&gt;  perRequest: time.Second / time.Duration(rate),&lt;br/&gt;  maxSlack:   &lt;span&gt;-10&lt;/span&gt; * time.Second / time.Duration(rate),&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据我们传入的请求数量，能计算出&lt;code&gt;1&lt;/code&gt;s内要通过&lt;code&gt;n&lt;/code&gt;个请求，每个请求之间的间隔时间是多少，这样在&lt;code&gt;take&lt;/code&gt;方法中就可以根据这个字段来处理请求的固定速率问题，这里还初始化了最大松弛化字段，他的值是负数，默认最大松弛量是10个请求的时间间隔。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们主要看一下&lt;code&gt;take&lt;/code&gt;方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(t *limiter)&lt;/span&gt; &lt;span&gt;Take&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;Time&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; t.Lock()&lt;br/&gt; &lt;span&gt;defer&lt;/span&gt; t.Unlock()&lt;br/&gt; now := t.clock.Now()&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; t.last.IsZero() {&lt;br/&gt;  t.last = now&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; t.last&lt;br/&gt; }&lt;br/&gt; t.sleepFor += t.perRequest - now.Sub(t.last)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; t.sleepFor &amp;lt; t.maxSlack {&lt;br/&gt;  t.sleepFor = t.maxSlack&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; t.sleepFor &amp;gt; &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;  t.clock.Sleep(t.sleepFor)&lt;br/&gt;  t.last = now.Add(t.sleepFor)&lt;br/&gt;  t.sleepFor = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  t.last = now&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; t.last&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;take()&lt;/code&gt;方法的执行步骤如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;为了控制并发，所以进入该方法就需要进行上锁，该锁的粒度比较大，整个方法都加上了锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过&lt;code&gt;IsZero&lt;/code&gt;方法来判断当前是否是第一次请求，如果是第一次请求，直接取&lt;code&gt;now&lt;/code&gt;时间即可返回。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果不是第一次请求，就需要计算距离处理下一次请求需要等待的时间，这里有一个要注意点的是累加需要等待的时间，目的是可以给后面的抵消使用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果当前累加需要等待的时间大于最大松弛量了，将等待的时间设置为最大松弛量的时间。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果当前请求多余的时间无法完全抵消此次的所需量，调用&lt;code&gt;sleep&lt;/code&gt;方法进行阻塞，同时清空等待的时间。如果&lt;code&gt;sleepFor&lt;/code&gt;小于0，说明此次请求时间间隔大于预期间隔，也就说无需等待可以直接处理请求。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;步骤其实不是很多，主要需要注意一个知识点 —— 最大松弛量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;漏桶算法有个天然缺陷就是无法应对突发流量（匀速，两次请求 &lt;code&gt;req1&lt;/code&gt; 和 &lt;code&gt;req2&lt;/code&gt; 之间的延迟至少应该 &lt;code&gt;&amp;gt;=perRequest&lt;/code&gt;)，举个例子说明：假设我们现在有三个请求&lt;code&gt;req1&lt;/code&gt;、&lt;code&gt;req2&lt;/code&gt;、&lt;code&gt;req3&lt;/code&gt;按顺序处理，每个请求处理间隔为100ms，&lt;code&gt;req1&lt;/code&gt;请求处理完成之后150ms，&lt;code&gt;req2&lt;/code&gt;请求到来，依据限速策略可以对 &lt;code&gt;req2&lt;/code&gt; 立即处理，当 &lt;code&gt;req2&lt;/code&gt; 完成后，&lt;code&gt;50ms&lt;/code&gt; 后， &lt;code&gt;req3&lt;/code&gt; 到来，这个时候距离上次请求还不足 &lt;code&gt;100ms&lt;/code&gt;，因此还需要等待 &lt;code&gt;50ms&lt;/code&gt; 才能继续执行, 但是，对于这种情况，实际上这三个请求一共消耗了 &lt;code&gt;250ms&lt;/code&gt; 才完成，并不是预期的 &lt;code&gt;200ms&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36585365853658536&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPNFVT6F1cSh4LJhic7wX9o3cUaL5fBcZbqtpjElkH1gn4OUdJ0BGXeV8TibYQv3N4VS1brTnjDh0L5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;656&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于上面这种情况，我们可以把之前间隔比较长的请求的时间匀给后面的请求判断限流时使用，减少请求等待的时间了，但是当两个请求之间到达的间隔比较大时，就会产生很大的可抵消时间，以至于后面大量请求瞬间到达时，也无法抵消这个时间，那样就已经失去了限流的意义，所以引入了最大松弛量 (maxSlack) 的概念, 该值为负值，表示允许抵消的最长时间，防止以上情况的出现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是漏桶实现的基本思路了，整体还是很简单的，你学会了吗？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;令牌桶算法&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;令牌桶其实和漏桶的原理类似，令牌桶就是想象有一个固定大小的桶，系统会以恒定速率向桶中放 Token，桶满则暂时不放。从网上找了图，表述非常恰当：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.47368421052631576&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPNFVT6F1cSh4LJhic7wX9o3crxfSWBTvxFvc3nibia41UqHe4ibNGSAnTgafHwkRGa26h2WuO7x122oIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;532&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于令牌桶限流算法的实现，&lt;code&gt;Github&lt;/code&gt;有一个高效的基于令牌桶限流算法实现的限流库：&lt;code&gt;github.com/juju/ratelimit&lt;/code&gt;，&lt;code&gt;Golang&lt;/code&gt;的&lt;code&gt;timer/rate&lt;/code&gt;也是令牌桶的一种实现，本文就不介绍&lt;code&gt;juju/ratelimit&lt;/code&gt;库了，有兴趣的自己学习一下的他的实现思想吧，我们主要来看一看&lt;code&gt;time/rate&lt;/code&gt;是如何实现的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;样例&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是老样子，我们还是结合&lt;code&gt;gin&lt;/code&gt;写一个限流中间件看看他是怎么使用的，例子如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;golang.org/x/time/rate&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; rateLimit *rate.Limiter&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;tokenBucket&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;gin&lt;/span&gt;.&lt;span&gt;HandlerFunc&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; rateLimit.Allow() {&lt;br/&gt;   c.String(http.StatusOK, &lt;span&gt;&quot;rate limit,Drop&quot;&lt;/span&gt;)&lt;br/&gt;   c.Abort()&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  c.Next()&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; limit := rate.Every(&lt;span&gt;100&lt;/span&gt; * time.Millisecond)&lt;br/&gt; rateLimit = rate.NewLimiter(limit, &lt;span&gt;10&lt;/span&gt;)&lt;br/&gt; r := gin.Default()&lt;br/&gt; r.GET(&lt;span&gt;&quot;/ping&quot;&lt;/span&gt;, tokenBucket(), &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  c.JSON(&lt;span&gt;200&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt; })&lt;br/&gt; r.Run() &lt;span&gt;// listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的例子我们首先调用&lt;code&gt;NewLimiter&lt;/code&gt;方法构造一个限流器，第一个参数是&lt;code&gt;r limit&lt;/code&gt;，代表每秒可以向&lt;code&gt;Token&lt;/code&gt;桶中产生多少&lt;code&gt;token&lt;/code&gt;，第二个参数是&lt;code&gt;b int&lt;/code&gt;，代表&lt;code&gt;Token&lt;/code&gt;桶的容量大小，对于上面的例子，表示每&lt;code&gt;100ms&lt;/code&gt;往桶中放一个&lt;code&gt;token&lt;/code&gt;，也就是&lt;code&gt;1s&lt;/code&gt;钟产生&lt;code&gt;10&lt;/code&gt;个，桶的容量就是&lt;code&gt;10&lt;/code&gt;。消费&lt;code&gt;token&lt;/code&gt;的方法这里我们使用&lt;code&gt;Allow&lt;/code&gt;方法，Allow 实际上就是 &lt;code&gt;AllowN(time.Now(),1)&lt;/code&gt;，&lt;code&gt;AllowN&lt;/code&gt;方法表示，截止到某一时刻，目前桶中数目是否至少为 &lt;code&gt;n&lt;/code&gt; 个，满足则返回 &lt;code&gt;true&lt;/code&gt;，同时从桶中消费 &lt;code&gt;n&lt;/code&gt;个 &lt;code&gt;token&lt;/code&gt;。反之返回不消费 &lt;code&gt;Token&lt;/code&gt;。对应上面的例子，当桶中的数目不足于&lt;code&gt;1&lt;/code&gt;个时，就会丢掉该请求。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;源码剖析&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Limit类型&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;time/rate&lt;/code&gt;自定义了一个&lt;code&gt;limit&lt;/code&gt;类型，其实他本质就是&lt;code&gt;float64&lt;/code&gt;的别名，&lt;code&gt;Limit&lt;/code&gt;定了事件的最大频率，表示每秒事件的数据量，0就表示无限制。&lt;code&gt;Inf&lt;/code&gt;是无限的速率限制；它允许所有事件(即使突发为0)。还提供&lt;code&gt;Every&lt;/code&gt; 方法来指定向&lt;code&gt;Token&lt;/code&gt; 桶中放置&lt;code&gt;Token&lt;/code&gt; 的间隔，计算出每秒时间的数据量。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Limit &lt;span&gt;float64&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Inf is the infinite rate limit; it allows all events (even if burst is zero).&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Inf = Limit(math.MaxFloat64)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Every converts a minimum time interval between events to a Limit.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Every&lt;/span&gt;&lt;span&gt;(interval time.Duration)&lt;/span&gt; &lt;span&gt;Limit&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; interval &amp;lt;= &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; Inf&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; / Limit(interval.Seconds())&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;code&gt;Limiter&lt;/code&gt;结构体&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Limiter &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; mu     sync.Mutex&lt;br/&gt; limit  Limit&lt;br/&gt; burst  &lt;span&gt;int&lt;/span&gt;&lt;br/&gt; tokens &lt;span&gt;float64&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// last is the last time the limiter&#x27;s tokens field was updated&lt;/span&gt;&lt;br/&gt; last time.Time&lt;br/&gt; &lt;span&gt;// lastEvent is the latest time of a rate-limited event (past or future)&lt;/span&gt;&lt;br/&gt; lastEvent time.Time&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各个字段含义如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;mu&lt;/code&gt;：互斥锁、为了控制并发&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;limit&lt;/code&gt;：每秒允许处理的事件数量，即每秒处理事件的频率&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;burst&lt;/code&gt;：令牌桶的最大数量，如果&lt;code&gt;burst&lt;/code&gt;为0，并且limit == Inf，则允许处理任何事件，否则不允许&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;tokens&lt;/code&gt;：令牌桶中可用的令牌数量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;last&lt;/code&gt;：记录上次limiter的tokens被更新的时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;lastEvent&lt;/code&gt;：&lt;code&gt;lastEvent&lt;/code&gt;记录速率受限制(桶中没有令牌)的时间点，该时间点可能是过去的，也可能是将来的(&lt;code&gt;Reservation&lt;/code&gt;预定的结束时间点)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;code&gt;Reservation&lt;/code&gt;结构体&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Reservation &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; ok        &lt;span&gt;bool&lt;/span&gt;&lt;br/&gt; lim       *Limiter&lt;br/&gt; tokens    &lt;span&gt;int&lt;/span&gt;&lt;br/&gt; timeToAct time.Time&lt;br/&gt; &lt;span&gt;// This is the Limit at reservation time, it can change later.&lt;/span&gt;&lt;br/&gt; limit Limit&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各个字段含义如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ok&lt;/code&gt;：到截至时间是否可以获取足够的令牌&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;lim&lt;/code&gt;：&lt;code&gt;limiter&lt;/code&gt;对象&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;tokens&lt;/code&gt;：需要获取的令牌数量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;timeToAct&lt;/code&gt;：需要等待的时间点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;limit&lt;/code&gt;：代表预定的时间，是可以更改的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;reservation&lt;/code&gt;就是一个预定令牌的操作，&lt;code&gt;timeToAct&lt;/code&gt;是本次预约需要等待到的指定时间点才有足够预约的令牌。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;code&gt;Limiter&lt;/code&gt;消费token&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Limite&lt;/code&gt;r有三个&lt;code&gt;token&lt;/code&gt;的消费方法，分别是&lt;code&gt;Allow&lt;/code&gt;、&lt;code&gt;Reserve&lt;/code&gt;和&lt;code&gt;Wait&lt;/code&gt;，最终三种消费方式都调用了&lt;code&gt;reserveN&lt;/code&gt; 、&lt;code&gt;advance&lt;/code&gt;这两个方法来生成和消费 &lt;code&gt;Token&lt;/code&gt;。所以我们主要看看&lt;code&gt;reserveN&lt;/code&gt;、&lt;code&gt;advance&lt;/code&gt;函数的具体实现。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(lim *Limiter)&lt;/span&gt; &lt;span&gt;advance&lt;/span&gt;&lt;span&gt;(now time.Time)&lt;/span&gt; &lt;span&gt;(newNow time.Time, newLast time.Time, newTokens &lt;span&gt;float64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;//last不能在当前时间now之后，否则计算出来的elapsed为负数，会导致令牌桶数量减少&lt;/span&gt;&lt;br/&gt;  last := lim.last&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; now.Before(last) {&lt;br/&gt;  last = now&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;//根据令牌桶的缺数计算出令牌桶未进行更新的最大时间&lt;/span&gt;&lt;br/&gt; maxElapsed := lim.limit.durationFromTokens(&lt;span&gt;float64&lt;/span&gt;(lim.burst) - lim.tokens)&lt;br/&gt; elapsed := now.Sub(last) &lt;span&gt;//令牌桶未进行更新的时间段&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; elapsed &amp;gt; maxElapsed {&lt;br/&gt;  elapsed = maxElapsed&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;//根据未更新的时间(未向桶中加入令牌的时间段)计算出产生的令牌数&lt;/span&gt;&lt;br/&gt; delta := lim.limit.tokensFromDuration(elapsed)&lt;br/&gt; tokens := lim.tokens + delta &lt;span&gt;//计算出可用的令牌数&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; burst := &lt;span&gt;float64&lt;/span&gt;(lim.burst); tokens &amp;gt; burst {&lt;br/&gt;  tokens = burst&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; now, last, tokens&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;advance&lt;/code&gt;方法的作用是更新令牌桶的状态，计算出令牌桶未更新的时间(elapsed)，根据&lt;code&gt;elapsed&lt;/code&gt;算出需要向桶中加入的令牌数&lt;code&gt;delta&lt;/code&gt;，然后算出桶中可用的令牌数&lt;code&gt;newTokens&lt;/code&gt;.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;reserveN&lt;/code&gt;方法的实现：&lt;code&gt;reserveN&lt;/code&gt;是&lt;code&gt;AllowN&lt;/code&gt;,&lt;code&gt;ReserveN&lt;/code&gt;及&lt;code&gt;WaitN&lt;/code&gt;的辅助方法，用于判断在&lt;code&gt;maxFutureReserve&lt;/code&gt;时间内是否有足够的令牌。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// @param n 要消费的token数量&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// @param maxFutureReserve 愿意等待的最长时间&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(lim *Limiter)&lt;/span&gt; &lt;span&gt;reserveN&lt;/span&gt;&lt;span&gt;(now time.Time, n &lt;span&gt;int&lt;/span&gt;, maxFutureReserve time.Duration)&lt;/span&gt; &lt;span&gt;Reservation&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; lim.mu.Lock()&lt;br/&gt; &lt;span&gt;// 如果没有限制&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; lim.limit == Inf {&lt;br/&gt;  lim.mu.Unlock()&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; Reservation{&lt;br/&gt;   ok:        &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//桶中有足够的令牌&lt;/span&gt;&lt;br/&gt;   lim:       lim,&lt;br/&gt;   tokens:    n,&lt;br/&gt;   timeToAct: now,&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;//更新令牌桶的状态，tokens为目前可用的令牌数量&lt;/span&gt;&lt;br/&gt; now, last, tokens := lim.advance(now)&lt;br/&gt;  &lt;span&gt;// 计算取完之后桶还能剩能下多少token&lt;/span&gt;&lt;br/&gt; tokens -= &lt;span&gt;float64&lt;/span&gt;(n)&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; waitDuration time.Duration&lt;br/&gt;  &lt;span&gt;// 如果token &amp;lt; 0, 说明目前的token不够，需要等待一段时间&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; tokens &amp;lt; &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;  waitDuration = lim.limit.durationFromTokens(-tokens)&lt;br/&gt; }&lt;br/&gt; ok := n &amp;lt;= lim.burst &amp;amp;&amp;amp; waitDuration &amp;lt;= maxFutureReserve&lt;br/&gt; r := Reservation{&lt;br/&gt;  ok:    ok,&lt;br/&gt;  lim:   lim,&lt;br/&gt;  limit: lim.limit,&lt;br/&gt; }&lt;br/&gt;  &lt;span&gt;// timeToAct表示当桶中满足token数目等于n的时间&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; ok {&lt;br/&gt;  r.tokens = n&lt;br/&gt;  r.timeToAct = now.Add(waitDuration)&lt;br/&gt; }&lt;br/&gt;  &lt;span&gt;// 更新桶里面的token数目&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// 更新last时间&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// lastEvent&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; ok {&lt;br/&gt;  lim.last = now&lt;br/&gt;  lim.tokens = tokens&lt;br/&gt;  lim.lastEvent = r.timeToAct&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  lim.last = last&lt;br/&gt; }&lt;br/&gt; lim.mu.Unlock()&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; r&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的代码我已经进行了注释，这里在总结一下流程：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;首选判断是否拥有速率限制，没有速率限制也就是桶中一致拥有足够的令牌。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;计算从上次取 Token 的时间到当前时刻，期间一共新产生了多少 &lt;code&gt;Token&lt;/code&gt;：我们只在取&lt;code&gt;Token&lt;/code&gt; 之前生成新的&lt;code&gt;Token&lt;/code&gt;，也就意味着每次取&lt;code&gt;Token&lt;/code&gt;的间隔，实际上也是生成 &lt;code&gt;Token&lt;/code&gt; 的间隔。我们可以利用 &lt;code&gt;tokensFromDuration&lt;/code&gt;, 轻易的算出这段时间一共产生 &lt;code&gt;Token&lt;/code&gt; 的数目。所以当前 &lt;code&gt;Token&lt;/code&gt; 数目 = 新产生的&lt;code&gt;Token&lt;/code&gt; 数目 + 之前剩余的 &lt;code&gt;Token&lt;/code&gt; 数目 - 要消费的&lt;code&gt;Token&lt;/code&gt; 数目。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果消费后剩余 Token 数目大于零，说明此时 Token 桶内仍不为空，此时 Token 充足，无需调用侧等待。如果 Token 数目小于零，则需等待一段时间。那么这个时候，我们可以利用 &lt;code&gt;durationFromTokens&lt;/code&gt; 将当前负值的 Token 数转化为需要等待的时间。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将需要等待的时间等相关结果返回给调用方&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实整个过程就是利用了 &lt;strong&gt;Token 数可以和时间相互转化&lt;/strong&gt; 的原理。而如果 Token 数为负，则需要等待相应时间即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到了&lt;code&gt;durationFromTokens&lt;/code&gt;、&lt;code&gt;tokensFromDuration&lt;/code&gt;这两个方法，是关键，他们的实现如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(limit Limit)&lt;/span&gt; &lt;span&gt;durationFromTokens&lt;/span&gt;&lt;span&gt;(tokens &lt;span&gt;float64&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;Duration&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; seconds := tokens / &lt;span&gt;float64&lt;/span&gt;(limit)&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; time.Nanosecond * time.Duration(&lt;span&gt;1e9&lt;/span&gt;*seconds)&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(limit Limit)&lt;/span&gt; &lt;span&gt;tokensFromDuration&lt;/span&gt;&lt;span&gt;(d time.Duration)&lt;/span&gt; &lt;span&gt;float64&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// Split the integer and fractional parts ourself to minimize rounding errors.&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// See golang.org/issues/34861.&lt;/span&gt;&lt;br/&gt; sec := &lt;span&gt;float64&lt;/span&gt;(d/time.Second) * &lt;span&gt;float64&lt;/span&gt;(limit)&lt;br/&gt; nsec := &lt;span&gt;float64&lt;/span&gt;(d%time.Second) * &lt;span&gt;float64&lt;/span&gt;(limit)&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; sec + nsec/&lt;span&gt;1e9&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;durationFromTokens&lt;/code&gt;：功能是计算出生成&lt;code&gt;N&lt;/code&gt; 个新的&lt;code&gt;Token&lt;/code&gt; 一共需要多久。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;tokensFromDuration&lt;/code&gt;：给定一段时长，这段时间一共可以生成多少个 Token。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;细心的网友会发现&lt;code&gt;tokensFromDuration&lt;/code&gt;方法既然是计算一段时间一共可以生成多少个&lt;code&gt;Token&lt;/code&gt;，为什么不直接进行相乘呢？其实&lt;code&gt;Golang&lt;/code&gt;最初的版本就是采用&lt;code&gt;d.Seconds() * float64(limit)&lt;/code&gt;直接相乘实现的，虽然看上去一点问题没有，但是这里是两个小数相乘，会带来精度损失，所以采用现在这种方法实现，分别求出秒的整数部分和小数部分，进行相乘后再相加，这样可以得到最精确的精度。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;code&gt;limiter&lt;/code&gt;归还&lt;code&gt;Token&lt;/code&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然我们可以消费&lt;code&gt;Token&lt;/code&gt;，那么对应也可以取消此次消费，将&lt;code&gt;token&lt;/code&gt;归还，当调用 &lt;code&gt;Cancel()&lt;/code&gt; 函数时，消费的 Token 数将会尽可能归还给 Token 桶。归还也并不是那么简单，接下我们我们看看归还&lt;code&gt;token&lt;/code&gt;是如何实现的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(r *Reservation)&lt;/span&gt; &lt;span&gt;CancelAt&lt;/span&gt;&lt;span&gt;(now time.Time)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; !r.ok {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; r.lim.mu.Lock()&lt;br/&gt; &lt;span&gt;defer&lt;/span&gt; r.lim.mu.Unlock()&lt;br/&gt;  &lt;span&gt;/*&lt;br/&gt;  1.如果无需限流&lt;br/&gt; 2. tokens为0 (需要获取的令牌数量为0)&lt;br/&gt; 3. 已经过了截至时间&lt;br/&gt; 以上三种情况无需处理取消操作&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; r.lim.limit == Inf || r.tokens == &lt;span&gt;0&lt;/span&gt; || r.timeToAct.Before(now) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;//计算出需要还原的令牌数量&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//这里的r.lim.lastEvent可能是本次Reservation的结束时间，也可能是后来的Reservation的结束时间，所以要把本次结束时间点(r.timeToAct)之后产生的令牌数减去&lt;/span&gt;&lt;br/&gt; restoreTokens := &lt;span&gt;float64&lt;/span&gt;(r.tokens) - r.limit.tokensFromDuration(r.lim.lastEvent.Sub(r.timeToAct))&lt;br/&gt;  &lt;span&gt;// 当小于0，表示已经都预支完了，不能归还了&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; restoreTokens &amp;lt;= &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;//从新计算令牌桶的状态&lt;/span&gt;&lt;br/&gt; now, _, tokens := r.lim.advance(now)&lt;br/&gt; &lt;span&gt;//还原当前令牌桶的令牌数量，当前的令牌数tokens加上需要还原的令牌数restoreTokens&lt;/span&gt;&lt;br/&gt; tokens += restoreTokens&lt;br/&gt;  &lt;span&gt;//如果tokens大于桶的最大容量，则将tokens置为桶的最大容量&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; burst := &lt;span&gt;float64&lt;/span&gt;(r.lim.burst); tokens &amp;gt; burst {&lt;br/&gt;  tokens = burst&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;// update state&lt;/span&gt;&lt;br/&gt; r.lim.last = now &lt;span&gt;//记录桶的更新时间&lt;/span&gt;&lt;br/&gt; r.lim.tokens = tokens &lt;span&gt;//更新令牌数量&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// 如果都相等，说明跟没消费一样。直接还原成上次的状态吧&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; r.timeToAct == r.lim.lastEvent {&lt;br/&gt;  prevEvent := r.timeToAct.Add(r.limit.durationFromTokens(&lt;span&gt;float64&lt;/span&gt;(-r.tokens)))&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; !prevEvent.Before(now) {&lt;br/&gt;   r.lim.lastEvent = prevEvent&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注释已经添加，就不在详细解释了，重点是这一行代码：&lt;code&gt;restoreTokens := float64(r.tokens) - r.limit.tokensFromDuration(r.lim.lastEvent.Sub(r.timeToAct))&lt;/code&gt;，&lt;code&gt;r.tokens&lt;/code&gt;指的是本次消费的&lt;code&gt;token&lt;/code&gt;数，&lt;code&gt;r.timeToAcr&lt;/code&gt;指的是&lt;code&gt;Token&lt;/code&gt;桶可以满足本次消费数目的时刻，也就是消费的时刻+等待的时长，&lt;code&gt;r.lim.lastEvent&lt;/code&gt;指的是最近一次消费的&lt;code&gt;timeToAct&lt;/code&gt;的值，通过&lt;code&gt;r.limit.tokensFromDuration&lt;/code&gt;方法得出的结果指的是从该次消费到当前时间，一共又消费了多少&lt;code&gt;Token&lt;/code&gt;数目，所以最终得出这一段的代码含义是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要归还的&lt;code&gt;Token&lt;/code&gt; = 该次消费的&lt;code&gt;Token&lt;/code&gt; - 新消费的&lt;code&gt;token&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好啦，源码就暂时分析到这了，因为标准库的实现的代码量有点大，还有一部分在这里没有说，留给大家自己去剖析吧～。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文重点介绍了漏桶算法和令牌桶算法，漏桶算法和令牌桶算法的主要区别在于，&quot;漏桶算法&quot;能够强行限制数据的传输速率(或请求频率)，而&quot;令牌桶算法&quot;在能够限制数据的平均传输速率外，还允许某种程度的突发传输。在某些情况下，漏桶算法不能够有效地使用网络资源，因为漏桶的漏出速率是固定的，所以即使网络中没有发生拥塞，漏桶算法也不能使某一个单独的数据流达到端口速率。因此，漏桶算法对于存在突发特性的流量来说缺乏效率。而令牌桶算法则能够满足这些具有突发特性的流量。通常，漏桶算法与令牌桶算法结合起来为网络流量提供更高效的控制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;好啦，这篇文章就到这里啦，素质三连（分享、点赞、在看）都是笔者持续创作更多优质内容的动力！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;创建了一个Golang学习交流群，欢迎各位大佬们踊跃入群，我们一起学习交流。入群方式：加我vx拉你入群，或者公众号获取入群二维码&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;结尾给大家发一个小福利吧，最近我在看[微服务架构设计模式]这一本书，讲的很好，自己也收集了一本PDF，有需要的小伙可以到自行下载。获取方式：关注公众号：[Golang梦工厂]，后台回复：[微服务]，即可获取。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;我翻译了一份GIN中文文档，会定期进行维护，有需要的小伙伴后台回复[gin]即可下载。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;翻译了一份Machinery中文文档，会定期进行维护，有需要的小伙伴们后台回复[machinery]即可获取。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;我是asong，一名普普通通的程序猿，让我们一起慢慢变强吧。欢迎各位的关注，我们下期见~~~&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPNFVT6F1cSh4LJhic7wX9o3cmPicXrYcyvAxtKDVTg3PzTQicpw8wLIc59lVPs6c0UrWDwr1qnwq67UA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐往期文章：&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0595754cfe0179859fbb9779b8e92fcd</guid>
<title>[推荐] 看完这篇文章，别再说不会 Redis 的高级特性了</title>
<link>https://toutiao.io/k/xl63gz1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 作为后端工程师必备的技能，阿粉每次面试的时候都会被问到，阿粉特意把公号前面发过的 Redis 系列文章整理出来成一篇，自己学习同时也帮助大家一起学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;文章较长，建议先收藏再观看。&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Redis 的数据类型有哪些？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 五种数据类型，每种数据类型都有相关的命令，几种类型分别如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;String（字符串）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;List（列表）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Hash（字典）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Set（集合）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Sorted Set（有序集合）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 有五种常见的数据类型，每种数据类型都有各自的使用场景，通用的字符串类型使用最为广泛，普通的 Key/Value 都是这种类型；列表类型使用的场景经常有粉丝列表，关注列表的场景；字典类型即哈希表结构，这个类型的使用场景也很广泛，在各种系统里面都会用到，可以用来存放用户或者设备的信息，类似于 HashMap 的结构；Redis set 提供的功能与列表类型类似也是一个列表的功能，区别是 Set 是去重的；有序集合功能与 Set 一样，只不过是有顺序的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Redis 的内存回收与Key 的过期策略&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Redis 内存过期策略&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;过期策略的配置&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 随着使用的时间越来越长，占用的内存会越来越大，那么当 Redis 内存不够的时候，我们要知道 Redis 是根据什么策略来淘汰数据的，在配置文件中我们使用 &lt;code&gt;maxmemory-policy&lt;/code&gt; 来配置策略，如下图&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7013888888888888&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmP70gbibgibicdTDZXZ62R5uWM3IdEpnyAckUuLWdR9lbneR1Knzic3RPibxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1152&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到策略的值由如下几种：&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;volatile-lru: 在所有带有过期时间的 key 中使用 LRU 算法淘汰数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;alkeys-lru: 在所有的 key 中使用最近最少被使用 LRU 算法淘汰数据，保证新加入的数据正常；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;volatile-random: 在所有带有过期时间的 key 中随机淘汰数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;allkeys-random: 在所有的 key 中随机淘汰数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;volatile-ttl: 在所有带有过期时间的 key 中，淘汰最早会过期的数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;noeviction: 不回收，当达到最大内存的时候，在增加新数据的时候会返回 error，不会清除旧数据，这是 Redis 的默认策略；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;volatile-lru, volatile-random, volatile-ttl 这几种情况在 Redis 中没有带有过期 Key 的时候跟 noeviction 策略是一样的。淘汰策略是可以动态调整的，调整的时候是不需要重启的，原文是这样说的，我们可以根据自己 Redis 的模式来动态调整策略。”To pick the right eviction policy is important depending on the access pattern of your application, however you can reconfigure the policy at runtime while the application is running, and monitor the number of cache misses and hits using the Redis INFO output in order to tune your setup.“&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;策略的执行过程&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端运行命令，添加数据申请内存；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redis 会检查内存的使用情况，如果已经超过的最大限制，就是根据配置的内存淘汰策略去淘汰相应的 key，从而保证新数据正常添加；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;继续执行命令。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;近似的 LRU 算法&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 中的 LRU 算法不是精确的 LRU 算法，而是一种经过采样的LRU，我们可以通过在配置文件中设置 &lt;code&gt;maxmemory-samples 5&lt;/code&gt; 来设置采样的大小，默认值为 5，我们可以自行调整。官方提供的采用对比如下，我们可以看到当采用数设置为 10 的时候已经很接近真实的 LRU 算法了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.50234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPicL0ic1Pxjon6Oz8y8DCghYK6OiceeTRAa7kZibotQpeQCFtY6zYhXDKPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Redis 3.x 以上的版本的中做过优化，目前的近似 LRU 算法以及提升了很大的效率，Redis 之所以不采样实际的 LRU 算法，是因为会耗费很多的内存，原文是这样说的&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;The reason why Redis does not use a true LRU implementation is because it costs more memory.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Key 的过期策略&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;设置带有过期时间的 key&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面介绍了 Redis 的内存回收策略，下面我们看看 Key 的过期策略，提到 Key 的过期策略，我们说的当然是带有 expire 时间的 key，如下&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.527336860670194&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmP62JNVZicnGic1OCj7brIlsL9FEsr6HOicgp2wbzJzib8pSO2MkrYaiahtmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 &lt;code&gt;redis&amp;gt; set name ziyouu ex 100&lt;/code&gt; 命令我们在 Redis 中设置一个 key 为 name，值为 ziyouu 的数据，从上面的截图中我们可以看到右下角有个 TTL，并且每次刷新都是在减少的，说明我们设置带有过期时间的 key 成功了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Redis 如何清除带有过期时间的 key&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于如何清除过期的 key 通常我们很自然的可以想到就是我们可以给每个 key 加一个定时器，这样当时间到达过期时间的时候就自动删除 key，这种策略我们叫&lt;strong&gt;定时策略&lt;/strong&gt;。这种方式对内存是友好的，因为可以及时清理过期的可以，但是由于每个带有过期时间的 key 都需要一个定时器，所以这种方式对 CPU 是不友好的，会占用很多的 CPU，另外这种方式是一种主动的行为。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有主动也有被动，我们可以不用定时器，而是在每次访问一个 key 的时候再去判断这个 key 是否到达过期时间了，过期了就删除掉。这种方式我们叫做&lt;strong&gt;惰性策略&lt;/strong&gt;，这种方式对 CPU 是友好的，但是对应的也有一个问题，就是如果这些过期的 key 我们再也不会访问，那么永远就不会删除了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 服务器在真正实现的时候上面的两种方式都会用到，这样就可以得到一种折中的方式。另外在&lt;strong&gt;定时策略&lt;/strong&gt;中，从官网我们可以看到如下说明&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Specifically this is what Redis does 10 times per second:&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Test 20 random keys from the set of keys with an associated expire.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Delete all the keys found expired.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;If more than 25% of keys were expired, start again from step 1.&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;意思是说 Redis 会在有过期时间的 Key 集合中随机 20 个出来，删掉已经过期的 Key，如果比例超过 25%，再重新执行操作。每秒钟会执行 10 个这样的操作。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Redis 的发布订阅功能你知道吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发布订阅系统在我们日常的工作中经常会使用到，这种场景大部分情况我们都是使用消息队列的，常用的消息队列有 Kafka，RocketMQ，RabbitMQ，每一种消息队列都有其特性。其实在很多时候我们可能不需要独立部署相应的消息队列，只是简单的使用，而且数据量也不会太大，这种情况下，我们就可以考虑使用 Redis 的 Pub/Sub 模型。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;使用方式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;发布与订阅&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 的发布订阅功能主要由 PUBLISH，SUBSCRIBE，PSUBSCRIBE 命令组成，一个或者多个客户端订阅某个或者多个频道，当其他客户端向该频道发送消息的时候，订阅了该频道的客户端都会收到对应的消息。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7692307692307693&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPpvZiaprPXJS0XicFsaLQ7bibzQgliaHNJiaqhZGUQsMpWcJWwnYKFaVcIZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图中有四个客户端，Client 02，Client 03，Client 04 订阅了同一个Sport 频道（Channel），这时当 Client 01 向 Sport Channel 发送消息 “basketball” 的时候，02-04 这三个客户端都同时收到了这条消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个过程的执行命令如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先开四个 Redis 的客户端，然后在 Client 02，Client 03，Client 04 中输入&lt;code&gt;subscribe sport&lt;/code&gt; 命令，表示订阅 sport 这个频道&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.15257731958762888&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPU0ZvIrSbWSJztRh6kEXicWI4hlBibTMbu3roQVw6naZuib9WV7Ne2QIhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;970&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在 Client 01 的客户端中输入&lt;code&gt;publish sport basketball&lt;/code&gt; 表示向 sport 频道发送消息 &quot;basketball&quot;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2754491017964072&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPibbCapiah14icdsw4gjUaLGibZDVf1nB2Z4t85aUeseZKM8w4piaAccAleg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;668&quot;/&gt;&lt;span&gt;这个时候我们在去看下Client 02-04 的客户端，可以看到已经收到了消息了，每个订阅了这个频道的客户端都是一样的。&lt;/span&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.24672489082969432&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPBS3lJiaEn008FeJKuYWic0t9YZ0CyvwOSfA0sLCan3B9jxQyqEKTmHjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;916&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里 Client 02-Client 04 三个客户端订阅了 Sport 频道，我们叫做订阅者（subscriber），Client 01 发布消息，我们叫做发布者（publisher），发送的消息就是 message。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;模式订阅&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们看到的是一个客户端订阅了一个 Channel，事实上单个客户端也可以同时订阅多个 Channel，采用模式匹配的方式，一个客户端可以同时订阅多个 Channel。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.66953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPUU0lRhjU6DCKXEWEFvLl9S53XAttwsYYicJr5aibgfkELcCibtfgOpYXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图 Client 05 通过命令&lt;code&gt;subscribe run&lt;/code&gt; 订阅了 &lt;code&gt;run&lt;/code&gt; 频道，Client 06 通过命令&lt;code&gt;psubscribe run*&lt;/code&gt; 订阅了 &lt;code&gt;run*&lt;/code&gt; 匹配的频道。当 Client 07 向 &lt;code&gt;run&lt;/code&gt; 频道发送消息 666 的时候，05 和 06 两个客户端都收到消息了；接下来 Client 07 向 &lt;code&gt;run1&lt;/code&gt; 和 &lt;code&gt;run_sport&lt;/code&gt; 两个频道发送消息的时候，Client 06 依旧可以收到消息，而 Client 05 就收不到了消息了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Client 05 订阅&lt;code&gt;run&lt;/code&gt; 频道和接收到消息：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.24197002141327623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmP0PHlJMPQUo40xd16Vc6esnr9BfM80V5e5icz59IicUCJ0XEFdAIKtnkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;934&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Client 06 订阅&lt;code&gt;run*&lt;/code&gt; 频道和接收到消息：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3151969981238274&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPSzICPnU8ATicbCVtrLoc3TTO1VcoibauQb7jZU5AaiaDibbV2ic729C9Ytg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1066&quot;/&gt;&lt;figcaption&gt;image-20191222141458065&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Client 07 向多个频道发送消息：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3577981651376147&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPgK2vahnXico5NvXJzibQYSicLCz4ZAjw08LDj2vqbyy2hn6xXJ0LzCa3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1090&quot;/&gt;&lt;figcaption&gt;image-20191222141514914&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面的案例，我们学会了一个客户端可以订阅单个或者多个频道，分别通过&lt;code&gt;subscribe&lt;/code&gt;，&lt;code&gt;psubscribe&lt;/code&gt; 命令，客户端可以通过 &lt;code&gt;publish&lt;/code&gt; 发送相应的消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在命令行中我们可以用 Ctrl + C 来取消相关订阅，对应的命令时 &lt;code&gt;unsubscribe channelName&lt;/code&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Pub/Sub 底层存储结构&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;订阅 Channel&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Redis 的底层结构中，客户端和频道的订阅关系是通过一个字典加链表的结构保存的，形式如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4093457943925234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmP8kVyLjMumXFcgib4ic4g3DH3mhpCLCzGj9LfTCAbZ613UvQWGdM2ibNOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1070&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Redis 的底层结构中，Redis 服务器结构体中定义了一个 &lt;code&gt;pubsub_channels&lt;/code&gt; 字典&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;redisServer&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//用于保存所有频道的订阅关系&lt;/span&gt;&lt;br/&gt; dict *pubsub_channels;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个字典中，key 代表的是频道名称，value 是一个链表，这个链表里面存放的是所有订阅这个频道的客户端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以当有客户端执行订阅频道的动作的时候，服务器就会将客户端与被订阅的频道在 pubsub_channels 字典中进行关联。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时候有两种情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;该渠道是首次被订阅：首次被订阅说明在字典中并不存在该渠道的信息，那么程序首先要创建一个对应的 key，并且要赋值一个空链表，然后将对应的客户端加入到链表中。此时链表只有一个元素。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;该渠道已经被其他客户端订阅过：这个时候就直接将对应的客户端信息添加到链表的末尾就好了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，如果有一个新的客户端 Client 08 要订阅 &lt;code&gt;run&lt;/code&gt; 渠道，那么上图就会变成&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4323308270676692&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPZpeCFKYx1kRtibInlIsx9nTKAcFhNIn4HRCO7LI4XLDHaELTC3pibm6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1064&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 Client 08 要订阅一个新的渠道 &lt;code&gt;new_sport&lt;/code&gt; ，那么就会变成&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5393053016453382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPSXAb1velfSibBSLXtc8ib1bVAticyo2FictIkq18HhME3nTdnaRNYzO6hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1094&quot;/&gt;&lt;figcaption&gt;image-20191222161558999&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个订阅的过程可以采用下面伪代码来实现&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Map&amp;lt;String, List&amp;lt;Object&amp;gt;&amp;gt; pubsub_channels = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;subscribe&lt;/span&gt;&lt;span&gt;(String[] subscribeList, Object client)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//遍历所有订阅的 channel，检查是否在 pubsub_channels 中，不在则创建新的 key 和空链表&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; subscribeList.length; i++) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (!pubsub_channels.containsKey(subscribeList[i])) {&lt;br/&gt;                pubsub_channels.put(subscribeList[i], &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;());&lt;br/&gt;            }&lt;br/&gt;            pubsub_channels.get(subscribeList[i]).add(client);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;取消订阅&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面介绍的是单个 Channel 的订阅，相反的如果一个客户端要取消订阅相关 Channel，则无非是找到对应的 Channel 的链表，从中删除对应的客户端，如果该客户端已经是最后一个了，则将对应 Channel 也删除。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;unSubscribe&lt;/span&gt;&lt;span&gt;(String[] subscribeList, Object client)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//遍历所有订阅的 channel，依次删除&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; subscribeList.length; i++) {&lt;br/&gt;            pubsub_channels.get(subscribeList[i]).remove(client);&lt;br/&gt;            &lt;span&gt;//如果长度为 0 则清楚 channel&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (pubsub_channels.get(subscribeList[i]).size() == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                remove(subscribeList[i]);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;模式订阅结构&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模式渠道的订阅与单个渠道的订阅类似，不过服务器是将所有模式的订阅关系都保存在服务器状态的&lt;code&gt;pubsub_patterns&lt;/code&gt; 属性里面。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;redisServer&lt;/span&gt;{&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//保存所有模式订阅关系&lt;/span&gt;&lt;br/&gt; &lt;span&gt;list&lt;/span&gt; *pubsub_patterns;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与订阅单个 Channel 不同的是，pubsub_patterns 属性是一个链表，不是字典。节点的结构如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;pubsubPattern&lt;/span&gt;{&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//订阅模式的客户端&lt;/span&gt;&lt;br/&gt; redisClient *client;&lt;br/&gt; &lt;span&gt;//被订阅的模式&lt;/span&gt;&lt;br/&gt; robj *pattern;&lt;br/&gt;} pubsubPattern;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实 &lt;code&gt;client&lt;/code&gt; 属性是用来存放对应客户端信息，&lt;code&gt;pattern&lt;/code&gt; 是用来存放客户端对应的匹配模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以对应上面的 Client-06 模式匹配的结构存储如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3076923076923077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPL9s9SRfcs0f6XWAYXXzWG3icic5EN7uibHnpebzh2X19DokSfm40jfZPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;figcaption&gt;image-20191222174528367&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;pubsub_patterns&lt;/code&gt;链表中有一个节点，对应的客户端是 Client-06，对应的匹配模式是&lt;code&gt;run*&lt;/code&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;订阅模式&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当某个客户端通过命令&lt;code&gt;psubscribe&lt;/code&gt; 订阅对应模式的 Channel 时候，服务器会创建一个节点，并将 Client 属性设置为对应的客户端，pattern 属性设置成对应的模式规则，然后添加到链表尾部。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对应的伪代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;List&amp;lt;PubSubPattern&amp;gt; pubsub_patterns = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;(String[] subscribeList, Object client)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//遍历所有订阅的 channel，创建节点&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; subscribeList.length; i++) {&lt;br/&gt;            PubSubPattern pubSubPattern = &lt;span&gt;new&lt;/span&gt; PubSubPattern();&lt;br/&gt;            pubSubPattern.client = client;&lt;br/&gt;            pubSubPattern.pattern = subscribeList[i];&lt;br/&gt;            pubsub_patterns.add(pubSubPattern);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;创建新节点；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;给节点的属性赋值；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将节点添加到链表的尾部；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;退订模式&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;退订模式的命令是&lt;code&gt;punsubscribe&lt;/code&gt;，客户端使用这个命令来退订一个或者多个模式 Channel。服务器接收到该命令后，会遍历&lt;code&gt;pubsub_patterns&lt;/code&gt;链表，将匹配到的 client 和 pattern 属性的节点给删掉。这里需要判断 client 属性和 pattern 属性都合法的时候再进行删除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;punsubscribe&lt;/span&gt;&lt;span&gt;(String[] subscribeList, Object client)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//遍历所有订阅的 channel 相同 client 和 pattern 属性的节点会删除&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; subscribeList.length; i++) {&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; pubsub_patterns.size(); j++) {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (pubsub_patterns.get(j).client == client&lt;br/&gt;                &amp;amp;&amp;amp; pubsub_patterns.get(j).pattern == subscribeList[i]) {&lt;br/&gt;                    remove(pubsub_patterns);&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;遍历所有的节点，当匹配到相同 client 属性和 pattern 属性的时候就进行节点删除。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;发布消息&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发布消息比较好容易理解，当一个客户端执行了&lt;code&gt;publish channelName message&lt;/code&gt; 命令的时候，服务器会从&lt;code&gt;pubsub_channels&lt;/code&gt;和&lt;code&gt;pubsub_patterns&lt;/code&gt; 两个结构中找到符合&lt;code&gt;channelName&lt;/code&gt; 的所有 Channel，进行消息的发送。在 &lt;code&gt;pubsub_channels&lt;/code&gt; 中只要找到对应的 Channel 的 key 然后向对应的 value 链表中的客户端发送消息就好。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Redis 的持久化你了解吗&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;持久化是将程序数据在持久状态和瞬时状态间转换的机制。通俗的讲，就是瞬时数据（比如内存中的数据，是不能永久保存的）持久化为持久数据（比如持久化至数据库中，能够长久保存）。另外我们使用的 Redis 之所以快就是因为数据都存储在内存当中，为了保证在服务器出现异常过后还能恢复数据，所以就有了 Redis 的持久化，Redis 的持久化有两种方式，一种是快照形式 RDB，另一种是增量文件 AOF。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;RDB&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RDB 持久化方式是会在一个特定的时间间隔里面保存某个时间点的数据快照，我们拿到这个数据快照过后就可以根据这个快照完整的复制出数据。这种方式我们可以用来备份数据，把快照文件备份起来，传送到其他服务器就可以直接恢复数据。但是这只是某个时间点的全部数据，如果我们想要最新的数据，就只能定期的去生成快照文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RDB 的实现主要是通过创建一个子进程来实现 RDB 文件的快照生成，通过子进程来实现备份功能，不会影响主进程的性能。同时上面也提到 RDB 的快照文件是保存一定时间间隔的数据的，这就会导致如果时间间隔过长，服务器出现异常还没来得及生成快照的时候就会丢失这个间隔时间的所有数据；那有同学就会说，我们可以把时间间隔设置的短一点，适当的缩短是可以的，但是如果间隔时间段设置短一点频繁的生成快照对系统还是会有影响的，特别是在数据量大的情况下，高性能的环境下是不允许这种情况出现的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以在 &lt;code&gt;redis.conf&lt;/code&gt; 进行 RDB 的相关配置，配置生成快照的策略，以及日志文件的路径和名称。还有定时备份规则，如下图所示，里面的注释写的很清楚，简单说就是在多少时间以内多少个 key 变化了就会触发快照。如&lt;code&gt;save 300 10&lt;/code&gt; 表示在 5 分钟内如果有 10 个 key 发生了变化就会触发生产快照，其他的同理。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.65625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPXKUDDiciaic17DkvHTmexYcZiawaHN18APoibeQb1mYkUCgFrpwWicOxJW4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了我们在配置文件中配置自动生成快照文件之外，Redis 本身提供了相关的命令可以让我们手动生成快照文件，分别是 &lt;code&gt;SAVE&lt;/code&gt; 和 &lt;code&gt;BGSAVE&lt;/code&gt; ，这两个命令功能相同但是方式和效果不一样，&lt;code&gt;SAVE&lt;/code&gt; 命令执行完后阻塞服务器进程，阻塞过后服务器就不能处理任何请求，所以在生产上不能用，和&lt;code&gt;SAVE&lt;/code&gt; 命令直接阻塞服务器进程的做法不同，&lt;code&gt;BGSAVE&lt;/code&gt; 命令是生成一个子进程，通过子进程来创建 RDB 文件，主进程依旧可以处理接受到的命令，从而不会阻塞服务器，在生产上可以使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阿粉在这里测试一下自动生成快照，我们修改一下快照的生成策略为&lt;code&gt;save 10 2&lt;/code&gt;，然后在本地启动Redis 服务，并用 redis-cli 链接进入，依次步骤如下&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;修改配置，如下&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3753943217665615&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPMKXwnFjRObJ6D6yuKNdWBiblmwA0PYQ1ZTuwmYbrKkmVBJtNgJLyZmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;启动 Redis 服务，我们可以从启动日志中看到，默认是会先读取 RDB 文件进行恢复的&lt;/p&gt;&lt;figure/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.60234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPqCPVKjMvWn5iaKCbJC4oqvLVF2kcapedxBADoTYSZ6CaYge0hytEGTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;链接 Redis 服务，并在 10s 内设置 3 个 key&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.29338103756708406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPEPXoyWcyLXgolUadSYcTzjqZZA3iciaYSAF6wvf3pUZrLYfDBxZ8hvOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1118&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;这个时候我们会看到 Redis 的日志里面会输出下面内容，因为触发了规则，所以开启子进程进行数据备份，同时在对应的文件路径下面，我们也看到了 rdb 文件。&lt;/p&gt;&lt;figure/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.62265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmP3BaJmRTEfrxOSbdFibhDiaVX9nYBd4iasPpj4vicQsJX0hicwj6dMPiaAzSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.25163398692810457&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPn9qqWTHL3JlfJlXXYTjp79bKTsyWUUwnYLIiaRs35lN3nw2BHRClqtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面可以看出，我们配置的规则生效了，也成功的生成了 RDB 文件， 后续在服务器出现异常的情况，只要重新启动就会读取对应的 RDB 文件进行数据备份。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;AOF&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AOF 是一种追加执行命令的形式，它跟 RDB 的区别是，AOF 并不是把数据保存下来，而是保存执行的动作。在开启 AOF 功能的时候，客户端连接后执行的每一条命令都会被记录下来。这其实让阿粉想起来的 MySQL 的 binlog 日志，也是记录操作的命令，后续可以根据文件去恢复数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AOF 是追加命令格式的文件，同样的我们可以定义多长时间把数据同步一次，Redis 本身提供了三种策略来实现命令的同步，分别是不进行同步，每秒同步一次，以及当有查询的时候同步一次。默认的策略也是使用最多的策略就是每秒同步一次，这样我们可以知道，丢失的数据最多也就只有一秒钟的数据。有了这种机制，AOF 会比 RDB 可靠很多，但是因为文件里面存在的是执行的命令，所以AOF 的文件一般也会比 RDB 的文件大点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 的 AOF 功能，默认是没有开启的，我们可以通过在配置文件中配置&lt;code&gt;appendonly yes&lt;/code&gt; 是功能开启，同时配置同步策略&lt;code&gt;appendfsync everysec&lt;/code&gt; 开启每秒钟同步一次，我们拿到 AOF 文件过后，可以根据这个文件恢复数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的我们在&lt;code&gt;redis.conf&lt;/code&gt; 中可以看到默认是没有开启 AOF 功能的，并且我们也可以指定对应的文件名称和路径。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.28363636363636363&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPEjWrKiaoJQ8nsrpia1bQPKGbfIoibnKjYuMMrkVaQX7DSLtGwpE8fOByQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们测试一下开启 AOF 功能，先修改配置然后重启 Redis 的服务器，我们会发现已经没有读取 RDB 文件的日志了，并且在日志文件路径下面已经生成了一个 aof 文件。需要注意的是，因为我们重启的服务，并且开启了 AOF，所以现在 Redis 服务器里面并没有我们之前添加的数据（说明什么问题呢？）。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.49453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPZJesWVdZPf9mZepc4ibZF13oiavShMhNtAz7HlAm9TicfeERpPBUfDcJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3568904593639576&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPsWsfaNWRLZhic8FBKVZlIbrJcCFKwD0A72nMiceVyWhiatkal5QYeTEzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们使用客户端连接进入，设置如下值，接下来我们可以看看 aof 文件里面的内容&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5229681978798587&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPCLIic8PbbzLFl1ZHOVBcj1yfcFLAibmsBLBd9dxRbPnvNnxoom6lnGhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8218694885361552&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdB9NjZH2uZSUgjp4NkOnUmPnpAq0j8SwkqOqMIq3pEsVVibmuzdMGaqv4esT52H4fnsd5oNsCr5afQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到&lt;code&gt;aof&lt;/code&gt; 文件里面的内容就是执行的命令，只不过是以一种固定的格式存储的，我们在备份的时候如果不需要哪些数据，可以手动删掉对应的命令就可以重新备份数据。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Redis 的有几种集群模式&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然说单机 Redis 理论上可以达到 10 万并发而且也可以进行持久化，但是在生产环境中真正使用的时候，我相信没有哪个公司敢这样使用，当数据量达到一定的规模的时候肯定是要上 Redis 集群的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 的模式有主从复制模式，哨兵模式以及集群模式，这三种模式的涉及到篇幅内容会比较多，阿粉后面会单独写一篇文章来介绍，感兴趣的小伙伴可以先自己学习下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>