<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>25caaaecb08abf73983f2474f15bd9f2</guid>
<title>3000帧动画图解MySQL为什么需要binlog、redo log和undo log</title>
<link>https://toutiao.io/k/b0g4460</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;blockquote&gt;&lt;p&gt;全文建立在MySQL的存储引擎为InnoDB的基础上&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;先看一条SQL如何入库的：&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6029106029106029&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5vYBnrr3ECibGJgV4kDD13Owh9cakU4W7Y8icS44A3aPrDz1Zf2rExQyQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1443&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是一条很简单的更新SQL，从MySQL服务端接收到SQL到落盘，先后经过了MySQL Server层和InnoDB存储引擎。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Server层就像一个产品经理，分析客户的需求，并给出实现需求的方案。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;InnoDB就像一个基层程序员，实现产品经理给出的具体方案。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在MySQL”分析需求，实现方案“的过程中，还夹杂着内存操作和磁盘操作，以及记录各种日志。&lt;/p&gt;&lt;p&gt;他们到底有什么用处？他们之间到底怎么配合的？MySQL又为什么要分层呢？InnoDB里面的那一块Buffer Pool又是什么？&lt;/p&gt;&lt;p&gt;我们慢慢分析。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;分层结构&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;MySQL为什么要分为Server层和存储引擎两层呢？&lt;/p&gt;&lt;p&gt;这个问题官方也没有给出明确的答案，但是也不难猜，简单来说就是为了“解耦”。&lt;/p&gt;&lt;p&gt;Server层和存储引擎各司其职，分工明确，用户可以根据不同的需求去使用合适的存储引擎，多好的设计，对不对？&lt;/p&gt;&lt;p&gt;后来的发展也验证了“分层设计”的优越性：&lt;/p&gt;&lt;p&gt;MySQL最初搭载的存储引擎是自研的只支持简单查询的MyISAM的前身ISAM，后来与Sleepycat合作研发了Berkeley DB引擎，支持了事务。&lt;/p&gt;&lt;p&gt;江山代有才人出，技术后浪推前浪，MySQL在持续的升级着自己的存储引擎的过程中，遇到了横空出世的InnoDB，InnoDB的功能强大让MySQL倍感压力。&lt;/p&gt;&lt;p&gt;自己的存储引擎打不过InnoDB怎么办？&lt;/p&gt;&lt;p&gt;打不过就加入！&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;240&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5peOJnaG8YA8CDo2zXONz8lC5tWznDkgmO6faE29vSa7ZwBuGVPoKgA/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;MySQL选择了和InnoDB合作。正是因为MySQL存储引擎的插件化设计，两个公司合作的非常顺利，MySQL也在合作后不久就发布了正式支持nnoDB的4.0版本以及经典的4.1版本。&lt;/p&gt;&lt;p&gt;MySQL兼并天下模式也成为MySQL走向繁荣的一个重要因素。这能让MySQL长久地保持着极强竞争力。&lt;/p&gt;&lt;p&gt;时至今日，MySQL依然占据着极高数据库市场份额，仅次于王牌数据库Oracle。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3684461391801716&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5dPrXNGiaATYiaG9MdBHSHKHUIddI7nKQjonSj2ic2iacWOPV5eZC5eYjtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2098&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;Buffer Pool&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;在InnoDB里，有一块非常重要的结构——Buffer Pool。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30505050505050507&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5T84TEicntKYoZdaiavMT15VsV3vV9HVGNrfNERDib9XytRCstWD3HQ5Lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;990&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Buffer Pool是个什么东西呢？&lt;/p&gt;&lt;p&gt;Buffer Pool就是一块用于缓存MySQL磁盘数据的内存空间。&lt;/p&gt;&lt;p&gt;为什么要缓存MySQL磁盘数据呢？&lt;/p&gt;&lt;p&gt;我们通过一个例子说明，我们先假设没有Buffer Pool，user表里面只有一条记录，记录的age = 1，假设需要执行三条SQL：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;事务A：update user set age = 2&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事务B：update user set age = 3&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事务C：update user set age = 4&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果没有Buffer Pool，那执行就是这样的：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41952983725135623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5nzTZDvuxfVTnt20tv6pv6XmLgLZiaaHIX9OsiaGt5QLGjVTBGLP5IBHg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1659&quot;/&gt;&lt;/figure&gt;&lt;p&gt;从图上可以看出，每次更新都需要从磁盘拿数据（1次IO），修改完了需要刷到磁盘（1次IO），也就是每次更新都需要2次磁盘IO。三次更新需要6次磁盘IO。&lt;/p&gt;&lt;p&gt;而有了Buffer Pool，执行就成了这样：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41952983725135623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5qwznMkInqrsdynPSgYCLglIUBleUDCaGoc2ibYwhDJogudIWAOZCJ6Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1659&quot;/&gt;&lt;/figure&gt;&lt;p&gt;从图上可以看出，只需要在第一次执行的时候将数据从磁盘拿到Buffer Pool（1次IO），第三次执行完将数据刷回磁盘（1次IO），整个过程只需要2次磁盘IO，比没有Buffer Pool节省了4次磁盘IO的时间。&lt;/p&gt;&lt;p&gt;当然，Buffer Pool真正的运转流程没有这么简单，具体实现细节和优化技巧还有很多，由于篇幅有限，本文不做详细描述。&lt;/p&gt;&lt;p&gt;我想表达的是：Buffer Pool就是将磁盘IO转换成了内存操作，节省了时间，提高了效率。&lt;/p&gt;&lt;p&gt;Buffer Pool是提高了效率没错，但是出现了一个问题，Buffer Pool是基于内存的，而只要一断电，内存里面的数据就会全部丢失。&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果断电的时候Buffer Pool的数据还没来得及刷到磁盘，那么这些数据不&lt;/span&gt;就&lt;span&gt;丢失了吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;还是上面的那个例子，如果三个事务执行完毕，在age = 4还没有刷到磁盘的时候，突然断电，数据就全部丢掉了：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41952983725135623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5mJGnXS3KficmXdmTwfBqAhvUVLia7xpsiblEWl7vickNf1xxMdqkPYbwMA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1659&quot;/&gt;&lt;/figure&gt;&lt;p&gt;试想一下，如果这些丢失的数据是核心的用户交易数据，那用户能接受吗？&lt;/p&gt;&lt;p&gt;答案是否定的。&lt;/p&gt;&lt;p&gt;那InnoDB是如何做到数据不会丢失的呢？&lt;/p&gt;&lt;p&gt;今天的第一个日志——redo log登场了。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;恢复 - redo log&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;顾名思义，redo是重做的意思，redo log就是重做日志的意思。&lt;/p&gt;&lt;p&gt;redo log是如何保证数据不会丢失的呢？&lt;/p&gt;&lt;p&gt;就是在修改之后，先将修改后的值记录到磁盘上的redo log中，就算突然断电了，Buffer Pool中的数据全部丢失了，来电的时候也可以根据redo log恢复Buffer Pool，这样既利用到了Buffer Pool的内存高效性，也保证了数据不会丢失。&lt;/p&gt;&lt;p&gt;我们通过一个例子说明，我们先假设没有Buffer Pool，user表里面只有一条记录，记录的age = 1，假设需要执行一条SQL：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;事务A：update user set age = 2&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;执行过程如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38396624472573837&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5KslibP5KBnZYqoBY6CSyWSyRewzl77zcJuZ0GVSUhicOicSlfWrCqBEFA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1659&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如上图，有了redo log之后，将age修改成2之后，马上将age = 2写到redo log里面，如果这个时候突然断电内存数据丢失，在来电的时候，可以将redo log里面的数据读出来恢复数据，用这样的方式保证了数据不会丢失。&lt;/p&gt;&lt;p&gt;&lt;span&gt;你可能会问，redo log文件也在磁盘上，数据文件也在磁盘上，都是磁盘操作，何必多&lt;/span&gt;此&lt;span&gt;一举？&lt;/span&gt;&lt;span&gt;为什么不直接将修改的数据写到数据文件里面去呢？&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;240&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5pyBCEyFEmhK8jzx1YN0tZVa9IEXLIUjPPVHf0N74cR2KppBfOrXoAA/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;傻瓜，因为redo log是磁盘顺序写，数据刷盘是磁盘随机写，磁盘的顺序写比随机写高效的多啊。&lt;/p&gt;&lt;p&gt;这种先预写日志后面再将数据刷盘的机制，有一个高大上的专业名词——WAL（Write-ahead logging），翻译成中文就是预写式日志。&lt;/p&gt;&lt;p&gt;虽然磁盘顺序写已经很高效了，但是和内存操作还是有一定的差距。&lt;/p&gt;&lt;p&gt;那么，有没有办法进一步优化一下呢？&lt;/p&gt;&lt;p&gt;答案是可以。那就是给redo log也加一个内存buffer，也就是redo log buffer，用这种套娃式的方法进一步提高效率。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5465587044534413&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5WDqqxpEpfgTrbfYy7VKP6LQBb1wv4ZJqkZxRrKXAfaMRLcSm4WsZsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;988&quot;/&gt;&lt;/figure&gt;&lt;p&gt;redo log buffer具体是怎么配合刷盘呢？&lt;/p&gt;&lt;p&gt;在&lt;span&gt;回答这个问题之前之前，我们先来捋一下MySQL服务端和操作系统的关系：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;MySQL服务端是一个进程，它运行于操作系统之上。也就是说，操作系统挂了MySQL一定挂了，但是MySQL挂了操作系统不一定挂。&lt;/p&gt;&lt;p&gt;所以MySQL挂了有两种情况：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;MySQL挂了，操作系统也挂了，也就是常说的服务器宕机了。这种情况Buffer Pool里面的数据会全部丢失，操作系统的os cache里面的数据也会丢失。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MySQL挂了，操作系统没有挂。这种情况Buffer Pool里面的数据会全部丢失，操作系统的os cache里面的数据不会丢失。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;OK，了解了MySQL服务端和操作系统的关系之后，再来看redo log的落盘机制。redo log的刷盘机制由参数innodb_flush_log_at_trx_commit控制，这个参数有3个值可以设置：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;innodb_flush_log_at_trx_commit = 1：实时写，实时刷&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;innodb_flush_log_at_trx_commit = 0：延迟写，延迟刷&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;innodb_flush_log_at_trx_commit = 2：实时写，延迟刷&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;写可以理解成写到操作系统的缓存（os cache），刷可以理解成把操作系统里面的缓存刷到磁盘。&lt;/p&gt;&lt;p&gt;这三种策略的区别，我们分开讨论：&lt;/p&gt;&lt;h3&gt;&lt;span&gt;innodb_flush_log_at_trx_commit = 1：实时写，实时刷&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这种策略会在每次事务提交之前，每次都会将数据从redo log刷到磁盘中去，理论上只要磁盘不出问题，数据就不会丢失。&lt;/p&gt;&lt;p&gt;总结来说，这种策略效率最低，但是丢数据风险也最低。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;234&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40538033395176254&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5n0EucPx61F7LGtsQFbO2yzUjKxZF3SNtOfaiasjlEZrmwQdGZjlIqYQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1078&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;innodb_flush_log_at_trx_commit = 0：延迟写，延迟刷&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这种策略在事务提交时，只会把数据写到redo log buffer中，然后让后台线程定时去将redo log buffer里面的数据刷到磁盘。&lt;/p&gt;&lt;p&gt;这种策略是最高效的，但是我们都知道，定时任务是有间隙的，但是如果事务提交后，后台线程没来得及将redo log刷到磁盘，这个时候不管是MySQL进程挂了还是操作系统挂了，这一部分数据都会丢失。&lt;/p&gt;&lt;p&gt;总结来说这种策略效率最高，丢数据的风险也最高。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40520896426408237&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ59QvpbwvIf7WdEnWJx3zBiaeV0OJOSr9ucibf7JhiapxbBJLHq6Q9xCAhg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1651&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;innodb_flush_log_at_trx_commit = 2：实时写，延迟刷&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这种策略在事务提交之前会把redo log写到os cache中，但并不会实时地将redo log刷到磁盘，而是会每秒执行一次刷新磁盘操作。&lt;/p&gt;&lt;p&gt;这种情况下如果MySQL进程挂了，操作系统没挂的话，操作系统还是会将os cache刷到磁盘，数据不会丢失，如下图：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4043343653250774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ50MEiaYTeYH9S9WNyVrooZnYcyBQD5Zq87mjlRANKsAqZutf25Zp3Guw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1615&quot;/&gt;&lt;/figure&gt;&lt;p&gt;但如果MySQL所在的服务器挂掉了，也就是操作系统都挂了，那么os cache也会被清空，数据还是会丢失。如下图：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4094087730451367&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5pam8k3dhEVCmz5mrcIQMiamkm4Zj5siagxcVtNLOS4ZSeBrP1xuIMHicA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1573&quot;/&gt;&lt;/figure&gt;&lt;p&gt;所以，这种redo log刷盘策略是上面两种策略的折中策略，效率比较高，丢失数据的风险比较低，绝大多情况下都推荐这种策略。&lt;/p&gt;&lt;p&gt;总结一下，redo log的作用是用于恢复数据，写redo log的过程是磁盘顺序写，有三种刷盘策略，有innodb_flush_log_at_trx_commit 参数控制，推荐设置成2。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;回滚 - undo log&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;我们都知道，InnoDB是支持事务的，而事务是可以回滚的。&lt;/p&gt;&lt;p&gt;假如一个事务将age=1修改成了age=2，在事务还没有提交的时候，后台线程已经将age=2刷入了磁盘。这个时候，不管是内存还是磁盘上，age都变成了2，如果事务要回滚，找不到修改之前的age=1，无法回滚了。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4215328467153285&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5qqicIWWjXR82P772LkA6zbTRx9s1lAEYoBmyicA32ibagvCU5icibNY6PDA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1644&quot;/&gt;&lt;/figure&gt;&lt;p&gt;那怎么办呢？&lt;/p&gt;&lt;p&gt;很简单，把修改之前的age=1存起来，回滚的时候根据存起来的age=1回滚就行了。&lt;/p&gt;&lt;p&gt;MySQL确实是这么干的！这个记录修改之前的数据的过程，叫做记录undo log。undo翻译成中文是撤销、回滚的意思，undo log的主要作用也就是回滚数据。&lt;/p&gt;&lt;p&gt;如何回滚呢？看下面这个图：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43523002421307505&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ5kSwP8QCpMtcjHxkGuiaelYNdWBlKmPsjc9sCAkLnwicILxEj2BcWJniaw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1652&quot;/&gt;&lt;/figure&gt;&lt;p&gt;MySQL在将age = 1修改成age = 2之前，先将age = 1存到undo log里面去，这样需要回滚的时候，可以将undo log里面的age = 1读出来回滚。&lt;/p&gt;&lt;p&gt;需要注意的是，undo log默认存在全局表空间里面，你可以简单的理解成undo log也是记录在一个MySQL的表里面，插入一条undo log和插入一条普通数据是类似。也就是说，写undo log的过程中同样也是要写入redo log的。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;归档 - binlog&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;undo log记录的是修改之前的数据，提供回滚的能力。&lt;/p&gt;&lt;p&gt;redo log记录的是修改之后的数据，提供了崩溃恢复的能力。&lt;/p&gt;&lt;p&gt;那binlog是干什么的呢？&lt;/p&gt;&lt;p&gt;binlog记录的是修改之后的数据，用于归档。&lt;/p&gt;&lt;p&gt;和redo log日志类似，binlog也有着自己的刷盘策略，通过sync_binlog参数控制：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;sync_binlog = 0 ：每次提交事务前将binlog写入os cache，由操作系统控制什么时候刷到磁盘&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;sync_binlog =1 ：采用同步写磁盘的方式来写binlog，不使用os cache来写binlog&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;sync_binlog = N ：当每进行n次事务提交之后，调用一次fsync将os cache中的binlog强制刷到磁盘&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么问题来了，binlog和redo log都是记录的修改之后的值，这两者有什么区别呢？有redo log为什么还需要binlog呢？&lt;/p&gt;&lt;p&gt;首先看两者的一些区别：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;binlog是逻辑日志，记录的是对哪一个表的哪一行做了什么修改；redo log是物理日志，记录的是对哪个数据页中的哪个记录做了什么修改，如果你还不了解数据页，你可以理解成对磁盘上的哪个数据做了修改。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;binlog是追加写；redo log是循环写，日志文件有固定大小，会覆盖之前的数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;binlog是Server层的日志；redo log是InnoDB的日志。如果不使用InnoDB引擎，是没有redo log的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但说实话，我觉得这些区别并不是redo log不能取代binlog的原因，MySQL官方完全可以调整redo log让他兼并binlog的能力，但他没有这么做，为什么呢？&lt;/p&gt;&lt;p&gt;我认为不用redo log取代binlog最大的原因是“没必要”。&lt;/p&gt;&lt;p&gt;为什么这么说呢？&lt;/p&gt;&lt;p&gt;第一点，binlog的生态已经建立起来。MySQL高可用主要就是依赖binlog复制，还有很多公司的数据分析系统和数据处理系统，也都是依赖的binlog。取代binlog去改变一个生态费力了不讨好。&lt;/p&gt;&lt;p&gt;第二点，binlog并不是MySQL的瓶颈，花时间在没有瓶颈的地方没必要。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Buffer Pool是MySQL进程管理的一块内存空间，有减少磁盘IO次数的作用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;redo log是InnoDB存储引擎的一种日志，主要作用是崩溃恢复，有三种刷盘策略，有innodb_flush_log_at_trx_commit 参数控制，推荐设置成2。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;undo log是InnoDB存储引擎的一种日志，主要作用是回滚。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;binlog是MySQL Server层的一种日志，主要作用是归档。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MySQL挂了有两种情况：操作系统挂了MySQL进程跟着挂了；操作系统没挂，但是MySQL进程挂了。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;最后，再用一张图总结一下全文的知识点：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5697841726618705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PVxtibbvVya2bEvr5pCsZk4zVuicqKCBZ56ib68QaiaFNXPOmiamJKekEtG1EK2DwJsVofQLVgSnZibAbIicGiaBZ5Belw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2780&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;写在最后&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;这篇文章写在一年之前，本来觉得是一篇水文没想要发，最近无聊修改了一下发了出来，希望能够用动图的形式帮助到MySQL基础不太好的朋友，大神忽略就好。&lt;/p&gt;&lt;p&gt;需要强调的一点是，由于作者水平有限，本文只是浅显的从无到有地阐述了MySQL几种日志的大致作用，过程中省略了很多细节，比如Buffer Pool的实现细节，比如undo log和MVCC的关系，比如binlog buffer、change buffer的存在，比如redo log的两阶段提交。&lt;/p&gt;&lt;p&gt;如果您有任何问题，我们可以探讨，如果您在文中发现错误，还望您指出，万分感谢！&lt;/p&gt;&lt;h2&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;《MySQL实战45讲》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《从根儿上理解MySQL》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《MySQL技术内幕—InnoDB存储引擎》第2版&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-ratio=&quot;0.08658008658008658&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/TNUwKhV0JpTGQqtlGfEHkjibtshlaDwVKzjqq2pnpmYC14bKxDtSuhpWZWfVcicj5PFsoSMzuzicKIWZbsBpGXiaicg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;462&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend-list&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;4&quot; data-recommend-article-id=&quot;2247499136_1&quot; data-recommend-article-time=&quot;1655523000&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/SHN22OeaUN82JdYKQ1ckc8nkc2icXUJShVr6gKMOXo5wicVLTcjibvHfFcA1KaS7MINgjffzwD2E3zEXSSicEsuwtQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;Logback 配置文件这样优化，TPS提高 10 倍&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI0NTcwMjk2OA==&amp;amp;mid=2247499136&amp;amp;idx=1&amp;amp;sn=e4547a54feff1756cc2ea20ee5409c18&amp;amp;chksm=e94835d7de3fbcc1e77ed37ff8cda59f58ba07fcd2668070c2b45e4970c8e1df7c0053b076c5#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0NTcwMjk2OA==&amp;amp;mid=2247499136&amp;amp;idx=1&amp;amp;sn=e4547a54feff1756cc2ea20ee5409c18&amp;amp;chksm=e94835d7de3fbcc1e77ed37ff8cda59f58ba07fcd2668070c2b45e4970c8e1df7c0053b076c5&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;4&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/SHN22OeaUN82JdYKQ1ckc8nkc2icXUJShVr6gKMOXo5wicVLTcjibvHfFcA1KaS7MINgjffzwD2E3zEXSSicEsuwtQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;627&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;Logback 配置文件这样优化，TPS提高 10 倍&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;4&quot; data-recommend-article-id=&quot;2247499086_1&quot; data-recommend-article-time=&quot;1655350200&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/SHN22OeaUNibZmw7apXI7B0EZB44P4IRYib2jdCmTUMb0SezJsj4pWGadPjiat40Z4fsbjvnw7nibhSicnh6BlXicHQA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;看完这妹纸的日更作业，网友直呼：中国计算机界的神！&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI0NTcwMjk2OA==&amp;amp;mid=2247499086&amp;amp;idx=1&amp;amp;sn=a604baa854c1496e02c88e59280788f1&amp;amp;chksm=e9483519de3fbc0f9db0a912c92a6424849b0818ea80c2b1d5a61cee0817a8a3cfa9f8d640ac#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0NTcwMjk2OA==&amp;amp;mid=2247499086&amp;amp;idx=1&amp;amp;sn=a604baa854c1496e02c88e59280788f1&amp;amp;chksm=e9483519de3fbc0f9db0a912c92a6424849b0818ea80c2b1d5a61cee0817a8a3cfa9f8d640ac&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;4&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/SHN22OeaUNibZmw7apXI7B0EZB44P4IRYib2jdCmTUMb0SezJsj4pWGadPjiat40Z4fsbjvnw7nibhSicnh6BlXicHQA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;481&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;看完这妹纸的日更作业，网友直呼：中国计算机界的神！&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;4&quot; data-recommend-article-id=&quot;2247499030_1&quot; data-recommend-article-time=&quot;1655177400&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/SHN22OeaUN98R86Dfdrb58F04LJzaHL5SV9rurMmPZshC2ic92PKfwBtia1KuRvDDuhqXMibgvGybaA5JtgEL0rdQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;最新 955 不加班的公司名单&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI0NTcwMjk2OA==&amp;amp;mid=2247499030&amp;amp;idx=1&amp;amp;sn=fdadbbb33c9e34726af338868314aa71&amp;amp;chksm=e9483541de3fbc57cb7953b3215892fea23c27d7138fe61a3e2f95be1779bf7578105e3320b4#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0NTcwMjk2OA==&amp;amp;mid=2247499030&amp;amp;idx=1&amp;amp;sn=fdadbbb33c9e34726af338868314aa71&amp;amp;chksm=e9483541de3fbc57cb7953b3215892fea23c27d7138fe61a3e2f95be1779bf7578105e3320b4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;4&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.9987849331713244&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/SHN22OeaUN98R86Dfdrb58F04LJzaHL5SV9rurMmPZshC2ic92PKfwBtia1KuRvDDuhqXMibgvGybaA5JtgEL0rdQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;823&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;最新 955 不加班的公司名单&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;END&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;添加下方面试现场小编微信&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;备注：面试交流 即可进群&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;316&quot; data-ratio=&quot;0.5703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/SHN22OeaUN9fH6Ct6NMmF74YkHgbCPYCBmm94Oaccf1LxdibFVDg5j784RxugAHrCkIFS2f2thaSLgUA48PmT4w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;↓喜欢「程序员面试现场」识别下方二维码↓&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;关注我们吧！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/c7KaH7odaU7ECIZmW23V9CNicM60zuH0nzRTibaqVuUlLCtibBFH6AHOeDVAtWsscQISjRIYficMe0cW80hhXUZIrg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;「点赞」是认可★&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;「在看」是支持&lt;span&gt;★&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>627b3443347e1242f8d124b19ce35260</guid>
<title>软件架构如何“以不变应万变”</title>
<link>https://toutiao.io/k/d6wagu8</link>
<content:encoded>&lt;div&gt;&lt;body id=&quot;readabilityBody&quot;&gt;
&lt;p id=&quot;app&quot;/&gt;
&lt;img src=&quot;https://static001.infoq.cn/static/infoq/img/logo-121-75.yuij86g.png&quot; alt=&quot;架构复杂千百倍，但思想从未改变_架构_辛晓亮_InfoQ精选文章&quot;/&gt;





    

&lt;/body&gt;
&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6ff51b12a59b0bc621727496787296ab</guid>
<title>如何做好CodeReview</title>
<link>https://toutiao.io/k/v5nrj6u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;strong&gt;一、引言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;CodeReview对于一个技术团队来讲是非常重要核心的，如果没有一个良好的CodeReview制度，会导致技术债堆积严重，长时间下来影响系统的可维护性、质量以及性能等各方面问题。&lt;/p&gt;&lt;p&gt;良好的的CodeReview习惯，可以有效提高整体代码质量，及时发现代码中可能存在的问题。包括像Google、微软这些公司，Code Review都是基本要求，代码合并之前必须要有人审查通过才行。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;尤其对于一个创业团队来讲做好CodeReview真心不容易，创业团队要追求业务快速增长，一方面从上到下很少人会重视，认真做CodeReview的很少，有的流于形式，有的可能根本就没有Code Review的环节，代码质量只依赖于事后的测试。也有些团队想做好代码审查，但不知道怎么做比较好。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、CodeReview作用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;其实大部分人都知道CodeReview的作用。这里简述下几点主要作用：&lt;/p&gt;&lt;p&gt;①尽量避免bug的出现。只能尽量降低bug的&quot;产出率&quot;，提前发现bug，降低生产事故发生率。&lt;/p&gt;&lt;p&gt;②方便维护，降低维护成本。编写规范的代码和优秀的代码可以给未来接手的同学更好的理解其意图进行维护或者在其基础上继续开发，不会让新同学想“打死前任”的冲动。&lt;/p&gt;&lt;p&gt;③正确处理业务需求逻辑。开发同学实现的业务需求是否与需求对应，是否会存在理解偏差，是否存在处理不当等等。&lt;/p&gt;&lt;p&gt;④尽量最优实现。在编写代码的过程中，每个人的逻辑思维都可能存在不同，在评审过程中，开发同学写的代码还存在现有更好、更优的实现方式，或者把实现的最优逻辑分享给其它同学讨论学习。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、CodeReview相关工具&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在正式代码Review之前，推荐阿里Java代码开发规范P3C进行扫描一遍：https://github.com/alibaba/p3c/，都有相应的Eclipse/IDEA插件。&lt;/p&gt;&lt;p&gt;推荐使用ReviewBoard：https://github.com/reviewboard/reviewboard&lt;/p&gt;&lt;p&gt;ReviewBoard支持pre commit和post commit，条件允许的情况下推荐使用pre commit，时间紧迫的情况可以使用post commit。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、如何推进CodeReview&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.把CodeReview作为开发流程的必选项而不是可选项&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在很早以前，我就尝试过将代码审查作为代码流程的一部分，但只是一个可选项，没有Code Review也可以把代码合并到master。这样的结果就是想起来才会去做Code Review，去检查的时候已经有了太多的代码变更，审查起来非常困难，另外就算审查出问题，也很难得以修改。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们现在对代码的审查则是作为开发流程的一个必选项，每次开发新功能或者修复Bug，开一个新的分支，分支要合并到master有两个必要条件：&lt;/p&gt;&lt;p&gt;1）所有的自动化测试通过&lt;/p&gt;&lt;p&gt;2）有至少一个人CodeReview通过，如果是新手的PR，还必须有资深程序员CodeReview通过&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这样把CodeReview作为开发流程的一个必选项后，就很好的保证了代码在合并之前有过Code Review。而且这样合并前要求代码审查的流程，好处也很明显：&lt;/p&gt;&lt;p&gt;1）由于每一次合并前都要做代码审查，这样一般一次审查的代码量也不会太大，对于审查者来说压力也不会太大&lt;/p&gt;&lt;p&gt;2）如果在CodeReview时发现问题，被审查者希望代码能尽快合并，也会积极的对审查出来的问题进行修改，不至于对审查结果太过抵触&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.把CodeReview变成一种开发文化而不仅仅是一种制度&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;把Code Review 作为开发流程的必选项后，不代表CodeReview这件事就可以执行的很好，因为Code Review的执行，很大部分程度上依赖于审查者的认真审查，以及被审查者的积极配合，两者缺一不可！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果仅仅只是当作一个流程制度，那么就可能会流于形式。最终结果就是看起来有CodeReview，但没有人认真审查，随便看下就通过了，或者发现问题也不愿意修改。&lt;/p&gt;&lt;p&gt;真要把CodeReview这件事做好，必须让CodeReview变成团队的一种文化，开发人员从心底接受这件事，并认真执行这件事。&lt;/p&gt;&lt;p&gt;要形成这样的文化，不那么容易，也没有想象的那么难，比如这些方面可以参考：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先，得让开发人员认识到CodeReview这件事为自己、为团队带来的好处&lt;/p&gt;&lt;p&gt;然后，得要有几个人做好表率作用，榜样的力量很重要&lt;/p&gt;&lt;p&gt;还有，对于管理者来说，你激励什么，往往就会得到什么&lt;/p&gt;&lt;p&gt;最后，像写自动化测试一样，把CodeReview要作为开发任务的一部分，给审查者和被审查者都留出专门的时间去做这件事，不能光想着马儿跑得快又舍不得给马儿吃草&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如何形成这样的文化，有心的话，还有很多方法可以尝试。只有真正让大家都认同和践行，才可能去做好Code Review这件事。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.CodeReview需要注意事项&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;CodeReview沟通常见问题：&lt;/p&gt;&lt;p&gt;1）把在CodeReview中别人给你提的修改意见当成了对自己能力的否定，以为对方是在说自己是个不合格的程序员。这样就会在工作中带有强烈的个人情绪，导致整个CodeReview环节气氛变的尴尬无比&lt;/p&gt;&lt;p&gt;2）由于CodeReview是书写方式，被review的人在看到你的批注时候，经常会多想，明明是一句简单的批注：此处应该关闭流。当事人看到也会理解为：我靠，这么简单的都忘记了，连关闭流都不知道，真挫&lt;/p&gt;&lt;p&gt;3）你要求的修改点在对方看来是鸡蛋里挑骨头，或是对方觉得我这样实现就是很好，为什么要改。冲突就这样产生，如果这个时候没处理好，直接就会导致冲突的上升，就不仅仅是技术讨论的问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个人情感的代入是批注部分最难的问题根源之一。&lt;/p&gt;&lt;p&gt;不要凸显自己的牛X，自己技术比别人好的优越感。抛开这种优越感。记住CodeReview的主要目的不仅仅为了找代码的bug, 而是提供认真专业的反馈来帮助队友提高，你的每条建议都是给双方一次学习的机会。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;建议：&lt;/p&gt;&lt;p&gt;1）在CodeReview的批注中加入code sample&lt;/p&gt;&lt;p&gt;2）在批注中尽量不要用指代人称，如 你****，如果要用可以用我们来替代你。用我们能强化团队的整体意思，而你则更多带有指责的意思&lt;/p&gt;&lt;p&gt;3）尽量不要用命令的口吻去表达自己的意见。如果你的公司阶级观念比较重，那就另当别论。&lt;/p&gt;&lt;p&gt;4）CodeReview评论要友好，避免负面词汇；有说不清楚的问题当面沟通。&lt;/p&gt;&lt;p&gt;5）批注中对要改的内容作出说明原因时候，尽量能有理论依据支撑，而不是我觉得就应该这样。这样做到有理有据，不会出现相互不服问题&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、常见CodeReview问题总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.基础规范&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;比如团队制定一些内部规范，比如代码模板、代码分层结构、内部组件库使用、开源软件使用规范等，这些基本的前提是要遵守的，这一点是CodeReview前提。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）统一的代码format格式&lt;/p&gt;&lt;p&gt;这里不讨论哪种代码风格好，比如右花括号是单独一行显示好，还是在不用哪个换行的好。个人觉得团队需要做的不是是花时间讨论代码format格式没有哪种好哪种差，而是需要制定一种格式风格，然后团队每个开发成员去遵守即可，推荐使用阿里巴巴的P3C插件的code format，如果代码format格式执行不到位，后面代码merge成本会非常高。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）统一的代码提交comment风格&lt;/p&gt;&lt;p&gt;如果是做的是一个功能，需要注明本次提交做的是哪个功能，实现思路是什么&lt;/p&gt;&lt;p&gt;如果是修改bug的，需要注明本次提交修改了什么bug, bug的原因以及如何修改的&lt;/p&gt;&lt;p&gt;这样就方便Code Review的人能很清楚的知道你的代码思路&lt;/p&gt;&lt;p&gt;推荐使用angular的代码提交规范：https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）代码风格&lt;/p&gt;&lt;p&gt;方法名：在计算机科学中，命名是一个难题。一个函数被命名为==get_message_queue_name==，但做的却是完全不同的事情，比如从输入内容中清除html，那么这是一个不准确的命名，并且可能会误导。&lt;/p&gt;&lt;p&gt;值名：对于数据结构，==foo== or ==bar== 可能是无用的名字。相比==exception==， ==e==同样是无用的。如果需要(根据语言)尽可能详细，在重新查看代码时，那些见名知意的命名是更容易理解的。&lt;/p&gt;&lt;p&gt;函数长度：对于一个函数的长度，我的经验值是小于20行，如果一个函数在50行以上，最好把它分成更小的函数块。&lt;/p&gt;&lt;p&gt;类的长度：我认为类的长度应该小于300行，最好在100内。把较长的类分离成独立的类，这样更容易理解类的功能。&lt;/p&gt;&lt;p&gt;文件的长度：对于Python，一个文件最多1000行代码。任何高于此的文件应该把它分离成更小更内聚,看一下是否违背的“单一职责” 原则。&lt;/p&gt;&lt;p&gt;文档：对于复杂的函数来说，参数个数可能较多，在文档中需要指出每个参数的用处，除了那些显而易见的。&lt;/p&gt;&lt;p&gt;注释代码：移除任何注释代码行。&lt;/p&gt;&lt;p&gt;函数参数个数：不要太多， 一般不要超过3个。。&lt;/p&gt;&lt;p&gt;可读性：代码是否容易理解？在查看代码时要不断的停下来分析它？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上相关的规范推荐使用阿里巴巴的P3C插件定义的规范。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）使用异常还是错误码返回&lt;/p&gt;&lt;p&gt;在分布式微服务应用中，系统调用依赖关系复杂，系统内部之间抛异常传递，系统与系统之间使用错误码返回，这样能够清晰看到异常错误原因、定位问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;5）统一错误码&lt;/p&gt;&lt;p&gt;错误码本身不算是代码问题，不过基于整个组织和工程的可维护性来说，可以将错误码不符合规范作为一种错误加以避免。方法：对错误码进行可控的管理和遵循规范使用。可以使用公共文档维护， 也可以开发错误码管理系统来避免相同的错误码。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;6）参数检测 &lt;/p&gt;&lt;p&gt;参数检测是对业务处理的第一层重要过滤。如果参数检测不足够，就会导致脏数据进入服务处理，轻则导致异常，重则插入脏数据到数据库，对后续维护都会造成很多维护成本。&lt;/p&gt;&lt;p&gt;方法：采用“契约式编程”，规定前置条件，并使用单测进行覆盖。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于复杂的业务应用， 优雅的参数检测处理尤为重要。根据 “集中管理和处理一致性原则”， 可以建立一个 paramchecker包或者基于hibernate validator进行参数检测， 设计一个可复用的微框架来对应用中所有的参数进行统一集中化检测。&lt;/p&gt;&lt;p&gt;参数检测主要包括： &lt;/p&gt;&lt;p&gt;(1) 参数的值类型， 可以根据不同值类型做基础的检测； &lt;/p&gt;&lt;p&gt;(2)参数的业务类型，有基础非业务参数， 基础业务参数和具体业务参数。不同的参数业务类型有不同的处理。将参数值类型与参数业务类型结合起来， 结合一致性的异常捕获处理， 就可以实现一个可复用的参数检测框架。参数检测既可以采用普通的分支语句，也可以采用注解方式。采用注解方式更可读，不过单测编写更具技巧。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;7）小而完整的代码提交习惯&lt;/p&gt;&lt;p&gt;很多开发很怕麻烦，觉得修改一个bug需要重新创建一个分支并提交一次pullrequest, 太浪费时间。但是不知道是，一次提交太多的代码或是多个功能或是多个bug一起提交，会导致code review的效果大打折扣。建议一次提交的改动尽量不要超过100行，否则review起来花的时间会特别长，同时也会导致code review的人失去耐心，从而没有真正起到review的作用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.代码业务逻辑&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们在Code Review的过程中，也根据实际业务进行总结了跟业务紧密关联的问题，也就是业务开发规范。在业务处理的时候，根据业务特点或者业务处理方式，我们需要按照实际业务去调用我们规定的方式，因为曾多次出现，所以做下记录，防止后人或新人重复掉坑里，甚至重复出现同一类问题事故。同时，我们针对总结的问题，也按照建议和强制的规范级别来要求或者指导我们的同学进行更好的开发。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;业务逻辑正确这是最基本的前提，如果逻辑存在缺陷肯定会出现bug，所以这是CodeReview的基本前提。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.体系结构和代码设计&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;常见的Code Review的设计问题如下分类：&lt;/p&gt;&lt;p&gt;单一职责原则：一个类有且只能一个职责。我通常使用这个原则去衡量，如果我们必须使用“和”来描述一个方法做的事情，这可能在抽象层上出了问题。&lt;/p&gt;&lt;p&gt;开闭原则：如果是面向对象的语言，对象对可扩展开放、对修改关闭。如果我们需要添加另外的内容会怎样？&lt;/p&gt;&lt;p&gt;代码复用：根据&quot;三振法&quot;,如果代码被复制一次，虽然如喜欢这种方式，但通常没什么问题。但如果再一次被复制，就应该通过提取公共的部分来重构它。&lt;/p&gt;&lt;p&gt;潜在的bugs：是否会引起的其他错误？循环是否以我们期望的方式终止？&lt;/p&gt;&lt;p&gt;错误处理：错误确定被优雅的修改？会导致其他错误？如果这样，修改是否有用？&lt;/p&gt;&lt;p&gt;效率：如果代码中包含算法，这种算法是否是高效？例如，在字典中使用迭代，遍历一个期望的值，这是一种低效的方式。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有些新人发现自己的代码提交PR（Pull Request）后，会收到一堆的Code Review意见，必须要做大量的改动。这多半是因为在开始做之前，没有做好设计，做出来后才发现问题很多。&lt;/p&gt;&lt;p&gt;建议在做一个新功能之前，写一个简单的设计文档，表达清楚自己的设计思路，找资深的先帮你做一下设计的审查，发现设计上的问题。设计上没问题了，再着手开发，那么到Review的时候，相对问题就会少很多，这也同时体现了技术方案评审的重要性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.可维护性&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;可维护性问题是“在当前业务变更的范围内通常不会导致BUG、故障，却会在日后埋下地雷，引发BUG、故障、维护成本大幅增加”的类别。&lt;/p&gt;&lt;p&gt;1）硬编码&lt;/p&gt;&lt;p&gt;硬编码主要有三种情况：a. “魔数”；b. 写死的配置；c. 临时加的逻辑和文案。&lt;/p&gt;&lt;p&gt;“魔数”与重复代码类似，当前或许不会引发问题，时间一长，为了弄清楚其代表的含义，增加很多沟通维护成本，且分散在各处很容易导致修改的时候遗漏不一致。务必清清除。方法也比较简单：定义含义明显的枚举或常量，代表这个魔数在代码中发言。&lt;/p&gt;&lt;p&gt;“写死的配置”不会影响业务功能， 不过在环境变更或系统调优的时候，就显得很不方便了。方法：尽量将配置抽离出来做成配置项放到配置文件里。&lt;/p&gt;&lt;p&gt;“临时加的逻辑和文案”也是一种破坏系统可维护性的做法。方法：抽离出来放在单独的函数或方法里，并特别加以注释。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;2）重复代码&lt;/p&gt;&lt;p&gt;重复代码在当前可能不会造成 BUG，但上线后，需要维护多处的事实一致性；时间一长，后续修改的时候就特别容易遗漏或处理不一致导致 BUG；重复代码是公认的“代码坏味”，必当尽力清除。方法：抽离通用的部分，定制差异。重复代码还有一种情况出现，即创造新函数时，先看看是否既有方法已经实现过。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;3）通用逻辑与定制业务逻辑耦合&lt;/p&gt;&lt;p&gt;这大概是每个媛猿们在开发生涯中遇到的最恶心的事情之一了。通用逻辑与具体的各种业务逻辑混杂交错，想插根针都难。遇到这种情况，只能先祈福，然后抽离一个新的函数，严格判断相应条件满足后去调用它。&lt;/p&gt;&lt;p&gt;如果是新创建逻辑，可以使用函数式编程或基于接口的编程，将通用处理流程抽离出来，而将具体业务逻辑以回调函数的形式传入处理。&lt;/p&gt;&lt;p&gt;不要让不同的业务共用相同的函数，然后在函数里一堆 if-else plus switch ， 而是每个业务都有各自的函数， 并可复用相同的通用逻辑和流程处理；或者各个业务可以覆写同样命名的函数。&lt;/p&gt;&lt;p&gt;复用，而非混杂。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;4）直接在原方法里加逻辑&lt;/p&gt;&lt;p&gt;有业务改动时，猿媛们图方便倾向于直接在原方法里加判断和逻辑。这样做是很不好的习惯。一方面，增加了原方法的长度，破坏了其可维护性；另一方面，有可能对原方法的既有逻辑造成破坏。可靠的方式是：新增一个函数，然后在原方法中调用并说明原因。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;5）多业务耦合&lt;/p&gt;&lt;p&gt;在业务边界未仔细划分清晰的情况下出现，一个业务过多深入和掺杂另一个非相关业务的实现细节。在项目和系统设计之初，特别要注意先划分业务边界，定义好接口设计和服务依赖关系，再着手开发；否则，延迟到后期做这些工作，很可能会导致重复的工作量，含糊复杂的交互、增加后期系统维护和问题排查的许多成本。磨刀不误砍柴工。划分清晰的业务、服务、接口边界就属于磨刀的功夫。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;6）代码层次不合理&lt;/p&gt;&lt;p&gt;代码改动逻辑是正确的，然而代码的放置位置不符合当前架构设计约定，导致后续维护成本增加。&lt;/p&gt;&lt;p&gt;代码层次不合理可能导致重复代码。比如获取操作人和操作记录，如果写在类 XController 里， 那么类 YController 就面临尴尬局面：如果写在 YController ， 就会导致重复代码；如果跨层去调用 XController 方法，又是非常不推荐的做法。因此， 获取操作人和操作记录，最好写在 Service 层， Controller 层只负责参数传入、检测和结果转译、返回。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;7）不用多余的代码&lt;/p&gt;&lt;p&gt;工程中常常会有一些不用的代码。或者是一些暂时未用到的Util工具或库函数，或者是由于业务变更导致已经废弃不用的代码，或者是由于一时写出后来又重写的代码。尽量清除掉不用多余的代码，对系统可维护性是一种很好的改善，同时也有利于CodeReview。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;8）使用全局变量&lt;/p&gt;&lt;p&gt;使用全局变量并没有“错”，错的是，一旦出现问题，排查和调试问题起来，真的会让人“一夜之间白了头”，耗费数个小时是轻微惩罚。此外，全局变量还能“顺手牵羊”地破坏函数的通用性，导致可维护性变差。务必消除全局变量的使用。当然，全局常量是可以的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;9）缺乏必要的注释&lt;/p&gt;&lt;p&gt;对重要和关键点的代码缺乏必要的注释，使用到的重要算法缺乏必要的引用出处，对特别的处理缺乏必要的说明。&lt;/p&gt;&lt;p&gt;原则上， 每个方法至少要用一个简短的单行注释， 适宜地描述了方法的用途、业务逻辑、作者及日期。对于特殊甚至奇葩的需求的特别实现，要加一些注释。这样后续维护时有个基础。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5.空值&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;空值恐怕是最容易出现的地方之一。常见错误有： &lt;/p&gt;&lt;p&gt;a. 值为NULL导致空指针异常； &lt;/p&gt;&lt;p&gt;b. 参数字符串含有前导或后缀空格没有Trim导致查询为空。导致以上结果的原因主要有：无此记录、有此记录但由于SQL访问异常而没查到、网络调用失败、记录中有脏数据、参数没传。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;原则上，对于任何异常， 希望能够打印出具体的错误信息，根据错误信息很快明白是什么原因， 而不是一个 null ，还要在代码里去推敲为什么为空。这样我们必须识别出程序中可能的null， 并及时检测、捕获和抛出异常。&lt;/p&gt;&lt;p&gt;对于空值，最好的防护是“防御式编程”。当获取到对象之后， 使用之前总是判断是否为空，并适当抛出异常、打错误日志或做其它处理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.异常处理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;常见的异常处理规范包括如下：&lt;/p&gt;&lt;p&gt;1）尽量用try…catch…finally的语句来处理异常，在finally应当尽可能回收内存资源。&lt;/p&gt;&lt;p&gt;2）尽量减少用try监控的代码块。&lt;/p&gt;&lt;p&gt;3）先用专业的异常来处理，最后再用Exception异常来兜底。&lt;/p&gt;&lt;p&gt;4）在catch从句里，别简单地抛出异常了事，应当尽可能地处理异常，避免吞掉异常不做任何处理。&lt;/p&gt;&lt;p&gt;5）出现异常后，应尽量保证项目不会终止，应尽量把异常造成的影响缩小到最小程度。&lt;/p&gt;&lt;p&gt;6）遇到异常如果无法处理，逐层往上抛&lt;/p&gt;&lt;p&gt;7）未捕获潜在的异常，调用API接口、库函数或系统服务等，只顾着享受便利却不做防护，常导致因为局部失败而影响整体的功能。最好的防护依然是“防御式编程”。要么在当前方法捕获异常并返回合适的空值或空对象，要么抛给高层处理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;7.日志打印&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对于重要而关键的实例状态、代码路径及API调用，应当添加适当的Info日志；对于异常，应当捕获并添加Error日志。缺乏日志并不会影响业务功能，但出现问题排查时，就会非常不方便，甚至错失极宝贵的机会(不易重现的情况尤其如此)。此外，缺乏日志也会导致可控性差，难以做数据统计和分析。&lt;/p&gt;&lt;p&gt;同时打印过多的日志并不好，一方面遮掩真正需要的信息，导致排查耗费时间， 另一方面造成服务器空间浪费、影响性能。生产环境日志一般只开放 INFO及以上级别的日志；Debug 日志只在调试或排错的时候使用，生产环境可以禁止debug日志。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;8.并发问题&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;并发的问题更难检测、复现和调试。常见的问题有：&lt;/p&gt;&lt;p&gt;1)在可能由多线程并发访问的对象中含有共享变量却没有同步保护；&lt;/p&gt;&lt;p&gt;2)在代码中手动创建缺乏控制的线程或线程池&lt;/p&gt;&lt;p&gt;3)并发访问数据库时没有做任何同步措施&lt;/p&gt;&lt;p&gt;4)多个线程对同一对象的互斥操作没有同步保护&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用线程池、并发库、并发类、同步工具而不是线程对象、并发原语。在复杂并发场景下，还需注意多个同步对象上的锁是否按合适的顺序获得和释放以避免死锁，相应的错误处理代码是否合理。&lt;/p&gt;&lt;p&gt;并发问题还特别容易导致线程安全问题，在作为全局变量使用需要特别注意，比如常见的HasMap、SimpleDateFormat非线程安全对象避免作为全局变量使用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;9.幂等问题&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;幂等问题也是分布式系统中经常遇到的问题，客户端或者网络会触发一些重试场景，如果程序没有做到幂等，会导致一些脏数据或者bug问题，需要抽象出一个公共幂等组件针对该场景进行处理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;10.资源泄露&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;资源泄露通常有以下几种情况：&lt;/p&gt;&lt;p&gt;1）打开文件却没有关闭&lt;/p&gt;&lt;p&gt;2）连接池的连接未回收&lt;/p&gt;&lt;p&gt;3）重复创建的脚本引用没有置空，无法被回收&lt;/p&gt;&lt;p&gt;4）已使用完的集合元素始终被引用，无法被回收&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;11.事务问题&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;事务方面常出现的问题是：&lt;/p&gt;&lt;p&gt;1）多个紧密关联的业务操作和 SQL 语句没有事务保证。 &lt;/p&gt;&lt;p&gt;2）在资金业务操作或数据强一致性要求的业务操作中，要注意使用事务，保证数据更新的一致性和完整性。&lt;/p&gt;&lt;p&gt;3）涉及到数据库事务和其他远程调用问题，比如文件上传是先保存数据库还是先进行文件上传，文件上传不属于数据库事务，如何保证一致性是个需要解决问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;12.性能问题&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;低性能会导致产品功能不好用、不可用，甚至导致产品失败。&lt;/p&gt;&lt;p&gt;常见情况有：&lt;/p&gt;&lt;p&gt;a. 循环地逐个调用单个接口获取数据或访问数据库; &lt;/p&gt;&lt;p&gt;b. 重复创建几乎完全相同的(开销大的)对象；&lt;/p&gt;&lt;p&gt;c. 数据库访问、网络调用等服务未处理超时的情况； &lt;/p&gt;&lt;p&gt;d. 多重循环对于大数据量处理的算法性能低；&lt;/p&gt;&lt;p&gt;e. 大量字符串拼接时使用了String而非StringBuilder.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于 a，最好提供批量接口或批量并发获取数据； &lt;/p&gt;&lt;p&gt;对于 b, 将可复用对象抽离出循环，一次创建多次使用； &lt;/p&gt;&lt;p&gt;对于 c，设置合理的超时时间并捕获超时异常处理； &lt;/p&gt;&lt;p&gt;对于 d，使用预排序或预处理， 构造合适的数据结构， 使得算法平均性能在 O(n) 或 O(nlogn) ； &lt;/p&gt;&lt;p&gt;对于 e, 记住：少量字符串拼接使用String, 大量字符串拼接使用 StringBuilder， 通常不会使用到 StringBuffer.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然这里面还有更多的涉及到性能问题，比如一些工具类或JDK使用：Apache的BeanUils比Spring 的BeanUils性能低，使用Java中的正则要进行预编译等。。。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;13.SQL问题&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;SQL的正确性通常可以通过 DAO 测试来保证。SQL问题主要是指潜在的性能问题和安全问题。&lt;/p&gt;&lt;p&gt;要避免SQL性能问题， 在表设计的时候就要做好索引工作。在表数据量非常大的情况下，SQL语句编写要非常小心。查询SQL需要添加必要索引，添加合适的查询条件和查询顺序，加快查询效率，避免慢查；尽量避免使用 Join, 子查询；避免SQL注入。&lt;/p&gt;&lt;p&gt;尤其避免在 update 语句中使用 where-if ！很容易导致全表更新和严重的数据丢失，造成严重的线上故障 ！！！&lt;/p&gt;&lt;p&gt;另外一点避免使用存储过程，以及SQL中写业务逻辑。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;14.安全&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;安全问题一向是互联网产品研发中极容易被忽视、而在爆发后又极引发热议的议题。安全和隐私是用户的心理红线之一。应用、数据、资金的安全性应当仅次于产品功能的准确性和使用体验。&lt;/p&gt;&lt;p&gt;常见的安全问题包括XSS、CSRF以及其他越权等，关于XSS可以定义全局的XSSFilter或者在网关层实现xss过滤，其他CSRF和越权问题在编码时需要格外注意，否则会引发安全漏洞，造成不必要的损失。&lt;/p&gt;&lt;p&gt;另外还有一些常见问题：缓冲区溢出；恶意代码注入；权限赋予不当；应用目录泄露等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;安全问题的CodeReview可参见检查点清单：信息安全 。主要是如下措施： &lt;/p&gt;&lt;p&gt;a. 严格检查和屏蔽非法输入； &lt;/p&gt;&lt;p&gt;b. 对含敏感信息的请求加密通信； &lt;/p&gt;&lt;p&gt;c. 业务处理后消除任何敏感私密信息的任何痕迹； &lt;/p&gt;&lt;p&gt;d. 结果返回前在反序列化中清除敏感私密信息； &lt;/p&gt;&lt;p&gt;e. 敏感私密信息在数据存储设备中应当加密存储； &lt;/p&gt;&lt;p&gt;f. 应用有严格的角色、权限、操作、数据访问分级和控制； &lt;/p&gt;&lt;p&gt;g. 切忌暴露服务器的重要的安全性信息，防止服务器被攻击影响正常服务运行。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;15.设计问题&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;常见的设计问题通常体现在：&lt;/p&gt;&lt;p&gt;1）是否有潜在的性能问题&lt;/p&gt;&lt;p&gt;2）是否有安全问题&lt;/p&gt;&lt;p&gt;3）业务变化时是否容易扩展&lt;/p&gt;&lt;p&gt;4）是否有遗漏的点&lt;/p&gt;&lt;p&gt;5）持续高负荷压力下是否会崩溃&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、CodeReview实践&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;具体CodeReview时要先Review设计实现思路，然后Review设计模式，接着Review成形的骨干代码，最后Review完成的代码，如果程序复杂的话，需要拆成几个单元或模块分别Review。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;另外在CodeReview之前需要强调几点：&lt;/p&gt;&lt;p&gt;1）代码在提交CodeReview之前，要自己先REVIEW和测试一遍&lt;/p&gt;&lt;p&gt;2）提交PR要小&lt;/p&gt;&lt;p&gt;在做Code Review的时候，如果有大量的文件修改，那么Review起来是很困难的，但如果PR比较小，相对就比较容易Review，也容易发现代码中可能存在的问题。所以在提交PR时，PR要小，如果是比较大的改动，那么最好分批提交，以减轻审查者的压力。&lt;/p&gt;&lt;p&gt;3）对评论进行分级&lt;/p&gt;&lt;p&gt;在做CodeReview时，需要针对审查出有问题的代码行添加评论，如果只是评论，有时候对于被审查者比较难甄别评论所代表的含义，是不是必须要修改。&lt;/p&gt;&lt;p&gt;4)评论要友好，避免负面词汇；有说不清楚的问题当面沟通&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最佳实践建议：&lt;/p&gt;&lt;p&gt;1）制定规范：编码规范+技术规范+业务规范+数据库规范，形成标准文档化。&lt;/p&gt;&lt;p&gt;2）根据需求开发，定期安排相关开发人员、评审人员参与Code Review，有需要的话可以邀请测试人员参与。&lt;/p&gt;&lt;p&gt;3）开始评审前，要求相关代码通过阿里编码规范/FIndBugs/SonarLint等插件进行前期扫描，避免出现比较多的基本问题。&lt;/p&gt;&lt;p&gt;4）新同学首次参入进来，需要着重关注新人，给予更好的建议，帮助提升代码质量。&lt;/p&gt;&lt;p&gt;5）针对评审质量很高的代码给予肯定，并且表扬相关人员。&lt;/p&gt;&lt;p&gt;6）定期总结Code Review存在的问题，记录相关问题于wiki(文档)上，按月度或季度定期输出总结。&lt;/p&gt;&lt;p&gt;7）制定与实际业务相关的开发规范，防止重复掉坑，重复出现同一类问题事故等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这是CodeReview一些工作心得，如果觉得哪里说的不好，或者有其它见解，欢迎评论，大家一起探讨。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;reference：&lt;/p&gt;&lt;p&gt;https://www.cnblogs.com/lovesqcc/p/9271781.html&lt;/p&gt;&lt;p&gt;https://toutiao.io/posts/x9rd6d/preview&lt;/p&gt;&lt;p&gt;https://blog.csdn.net/cm15835106905/article/details/104690023&lt;/p&gt;&lt;p&gt;https://zhuanlan.zhihu.com/p/73809355&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d4c92d22783e733611674a0e538e75a7</guid>
<title>最牛逼的技术能力，是技术领导力</title>
<link>https://toutiao.io/k/kron0fq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNDI0ODY1OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBsbESO4ibFCDqef4scQ0d37tBp3meC5icozRdMAmCZgNG0NTJnMXn3pVne9cibHIqibWzmQXeCeQRkONg/0?wx_fmt=png&quot; data-nickname=&quot;与数据同行&quot; data-alias=&quot;ysjtx_fyp&quot; data-signature=&quot;傅一平博士创办的大数据公众号，分享数据领域的实践经验、思考感悟和学习体会！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;傅一平评语：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;文章里提到，技术人员的职业发展，大致分成5个阶段：初级技术人员、高级技术人员、技术专家/技术Leader、架构师/&lt;/span&gt;&lt;span&gt;技术总监&lt;/span&gt;&lt;span&gt;、技术副总裁/CTO，一个传统企业的数据从业者的职业发展路径可能是这样的：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一阶段：会取数，懂点SQL&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二阶段：会做报表指标，掌握BI工具&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第三阶段：负责数据仓库项目，掌握数据管理知识&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第四阶段：负责管理一只数据团队，架构理解多少看个人修为&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第五阶段：&lt;span&gt;管理路线走到底（&lt;/span&gt;技术专家路线其实也不多）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;虽然起步的时候看起来不太一样&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;但到了第四、第五阶段，由于管理属性越来越多，技术领导力的要求却逐步趋同了&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正文开始&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最近，有几位知识星球的会员，跟我咨询技术人员成长方面的问题：&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;46&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;我是程序员，工作5年左右，开始带团队，写的代码逐渐减少，很担心自己会失去竞争力，我该怎么办？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;61&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;我是技术经理，30岁左右，平时工作主要做方案评审、架构设计，很少写代码了，感觉技术都生疏了，随时有可能被淘汰，越来越焦虑。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在技术人员的成长过程当中，类似的问题还有很多，比如：做管理后是不是就要丢掉技术？如何平衡技术和管理的精力投入？技术管理者逐渐失去核心竞争力，怎么办......&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;K哥是程序员出身，后来转做管理，一直做到公司高层。在我将近20年的职场生涯里，以上问题都是我遇到过和解决过的。归纳起来，其实就是两个问题：技术人员的职业发展路线是怎么样的？什么是技术能力？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;01&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;技术人员的发展路线&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术人员的职业发展，大致分成5个阶段：初级技术人员、高级技术人员、技术专家/技术Leader、架构师/&lt;span&gt;技术总监&lt;/span&gt;、技术副总裁/CTO。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面是一张技术人员职业发展路线图，分成：技术、管理、业务，三条发展路线，各序列是可以相互转换，你可以收藏起来参考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6781326781326781&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhxh78ynNR4oCHmiaRPaoZiaDiaAmYn8VpqCpZBdVFDZP7K8f0MukwK9crhRZyXnJ6vG3hROcY9KXdiaDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1221&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第一阶段，初级技术人员&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常指的是毕业生，或刚转行做技术的人。这个阶段能够在资深技术人员的指导下完成工作任务，不捅娄子，基本就合格了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第二阶段，高级技术人员&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过3到5年的成长，在某个领域积累了经验，能够独立解决工作中大部分的问题，碰到技术难题偶尔也能解决一些。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第三阶段，&lt;/strong&gt;&lt;strong&gt;技术专家/技术Leader&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般来说，在某个领域工作8年以上，代表了公司在该领域技术最高水平，能够解决大部分的疑难杂症，指导高级技术人员的日常工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;发展到这个阶段，如果情商不是太差，对技术也没有执念，就可以走管理路线。这是技术人员职业发展的转折点，不同的选择，决定不同的发展路线。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第四阶段，&lt;strong&gt;架构师/&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;技术总监&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;走技术路线的，往上就是架构师，做更大的架构，带领更多的架构师，一直做到首席架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;走管理路线的，就带领更大的团队，负责更多的项目，混得好的话可以继续升副总裁。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第五阶段，&lt;/strong&gt;&lt;strong&gt;技术副总裁/CTO&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;能够走到这个阶段，基本上就是技术职业生涯的尽头了，光技术好是不可能走到这个阶段的，高管本身也是一门玄学，改天再写写。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;02&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;什么是技术能力？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从以上5个发展阶段可以看出，每个阶段的工作内容不同，技术人员的能力要求也不同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，对不同阶段的技术人员来说，技术能力的定义也不相同。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结下来，技术能力可以分成三个层次：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第一层，技术实现能力&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就是技术落地的能力，比如写代码、做UI界面、做测试、做系统运维等等，这是技术人员的基础功底。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以程序员为例，要掌握最基础最底层的知识技能，比如：操作系统、数据库、算法、网络协议等等，还能够解决技术难题，不仅治标也能治本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第二层，技术架构能力&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个层面就是技术架构、技术规划的能力，能够透过现象看本质，通过模型、原则来表达复杂的业务架构、系统架构，能够指导技术人员进行系统开发。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是一种高阶的技术架构思维，能够发现问题，定义问题，分析问题，解决问题。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要有更高&lt;span&gt;水平&lt;/span&gt;的认知，并且能够用跨专业、跨学科的思维去快速研究问题，解决问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第三层，技术领导力&lt;/strong&gt;&lt;br/&gt;这是技术能力的最高阶，通过技术影响力去实现组织的愿景和目标，带领团队、调动资源，最终拿到战略结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个阶段，要具备对产业的深刻洞察，具有前瞻性的技术视野&lt;span&gt;，&lt;/span&gt;为企业规划5到10年的技术蓝图，以支撑企业中长期战略，为企业构建强大的技术壁垒，重塑企业数字化核心竞争力。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术领导力作为技术能力的最高阶，包含：认知、视野、业务、架构、产品、项目、领导力等诸多方面的能力项。放一张CTO的能力模型图，大家自己感受一下。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5903846153846154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhwcpQ5AsrRmAnlAAJwB8P7ibe9G9VuTdIlTuVjsXCbDhu4pzpA3PRPpVSRleO34BesgzX0S9W6Sgpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1040&quot;/&gt;&lt;br/&gt;&lt;span&gt;作者@Mr.K&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这三个层级的技术能力，在不同的技术岗位上，各自的占比是不相同的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;初级和高级技术人员，更多要求技术实现能力、少量的技术架构能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构师/技术总监，要求技术实现能力、技术架构能力、技术领导力，占比相对均衡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;副总裁/CTO，侧重在技术领导力上面，少量的技术架构能力，基本不要求技术实现能力。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1316239316239316&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhzgrt5vVV1OnPkZPhTPiaeMpksZKu7DON9g9GiboCZzklaicwSHRZ1CicfTsejH2BUO16BPXTfb04Sg1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;585&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作者@Mr.K&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;03&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;怎样提升技术能力？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上图可以看出，不同阶段的技术人员，所要求的技术能力是不相同的，下面我们逐一说明。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;初级技术人员&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这个阶段的技术能力是技术实现能力&lt;/span&gt;，初级技术人员欠缺的是基础技术知识、项目开发经验，要有针对性地提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要提醒的是，许多技术人员非常热衷于学习一些热门的开发框架、研究一些酷炫的技术组件，白白浪费了很多精力和时间。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为技术发展太快，基本上两三年轮换一遍，与其追逐新的技术热点，倒不如专注在那些“不变”的技术上面，比如：操作系统、数据库、网络协议、算法等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就像亚马逊创始人贝索斯所说的：“把所有资源all in在不变的事物上”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;高级技术人员&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就是我们所说的“高开”，是干活的主力，能够在某个领域独当一面，也是“996”最严重的阶段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个时候要警惕成为工具人，对任何技术问题、业务问题都要深入去思考，多想一层，要知道Why、What、How，逐渐培养自己的职业敏感度，俗称直觉，这也是高手和普通人的区别。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;技术专家/技术Leader&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;许多初做管理的朋友会问：这个阶段还要不要写代码？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要知道，&lt;span&gt;这个阶段最主要的技术能力是&lt;/span&gt;&lt;span&gt;技术实现能力、技术架构能力&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为基层管理者，编码能力和架构能力强，下面的人就服你，项目执行和团队管理就会顺畅得多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 这个阶段需要树立中长期的职业发展目标，在技术和管理发展路线之间作出选择。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为技术专家，除了自己“练剑”，还需要经常到江湖上跟高手过招，通过行业交流，进一步提升视野、拓展人脉，为你的下一步职业发展做铺垫。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;管理上你是新手，有更多的挑战在等着你，要向富有经验的管理者多学习，不断实践，逐渐形成自己的管理风格。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;架构师/&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;技术总监&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为小公司的高层，大公司的中层，也意味着你离具体技术落地工作越来越远。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这个阶段的技术能力更强调：技术架构能力、技术领导力&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你问，架构师、技术总监要不要写代码？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那我只能说，你的一行代码太昂贵了，对公司来说。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与技术Leader相比，技术总监掌握了更多的资源，更大的分配权限，并且需要处理的问题更复杂。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他的工作更聚焦在，设计团队目标、建设人才梯队、向上级拿更多资源、确保战略级项目的交付。这些工作，哪一个不比写那几行代码价值更大？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不是说架构师和技术总监就不能写代码，只是需要要清楚的认识到：你如此专注于技术细节，究竟是在寻求安全感、缓解焦虑，还是这个技术问题非你莫属，手底下100多号人都没你行？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果是后者的话，说明你的人才梯队建设出大问题了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术总监还有一个更重要的职责，就是充当技术外交官，去搞定业务方。用业务听得懂的语言，讲清楚为什么要还技术债、要做技术升级。适当的时候，要拒绝业务方的不合理需求，引导业务方往正确的道路上走。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还要尽量不让业务方投诉你，即便投诉，也要确保你的领导始终站在你这一边，这是保命的关键。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，还需要有独立思考的能力，用技术创新驱动业务的发展，充分体现技术的价值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对大部分的技术人员来说，这些事情都是非常有挑战的。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;技术副总裁/CTO&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这个阶段的技术能力，主要是技术领导力，少量的架构能力&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不要再问，CTO要不要写代码了，因为技术实现能力，根本就不属于CTO的技术能力，也就是说CTO写不写代码，根本就不重要。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我的一些CTO朋友，创业早期确实是撸起袖子写代码的，也有一些朋友对技术有执念，即便公司上市了也还一直坚持写，但这些都不是普遍现象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为技术一号位，还有许多价值更高的事情，比如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;规划了5到10年的技术战略，建立起一整套技术治理体系，并且运行良好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;利用自己的视野和行业人脉，驱动公司的业务和技术的发展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在商业上的洞察力，帮助公司进行业务和技术创新。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在行业范围内，建立了技术品牌，为公司吸引了许多一流人才。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里就不展开讲了，毕竟能够到达这个阶段人的是极少数。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，总结一下，本文主要聊了技术人员职业发展的5个阶段，以及技术能力的三个层面，还聊了不同阶段的技术人员如何提升技术能力&lt;span&gt;。文章开头提到的那些问题，是不是就有答案了？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11052631578947368&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBsBYSDtf5PsebibaWibPrb2pJgqibG1Ofib3ygwnPkDQ7zZnzONLyKjuoAy0nrsvux6pC8ibialk2n3gHCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;380&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNDI0ODY1OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBsbESO4ibFCDqef4scQ0d37tBp3meC5icozRdMAmCZgNG0NTJnMXn3pVne9cibHIqibWzmQXeCeQRkONg/0?wx_fmt=png&quot; data-nickname=&quot;与数据同行&quot; data-alias=&quot;ysjtx_fyp&quot; data-signature=&quot;傅一平博士创办的大数据公众号，分享数据相关的技术干货、思考感悟和学习体会！&quot; data-from=&quot;2&quot; has-insert-preloading=&quot;1&quot; wah-hotarea=&quot;click&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.11052631578947368&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;380&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBvelVDaaECmibKwBQzYWNl0picKDW2SVG0x8ZLO79NPSHfUeyu1c22j9RcZrxbvNmn1rJvIYXdSuVVg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBvelVDaaECmibKwBQzYWNl0phMcwdicuLTbTN6eYGf4qUvIccIScFH1NJ4GicibNykk16iaicdeVetVvqFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;443&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.10789473684210527&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBvelVDaaECmibKwBQzYWNl0pS95nEJT8H5pQa2Fhibgic3gLcIfeweqeqmgVyOdCjyQfmzYyeD41ViaKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;380&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1085714285714285&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBvelVDaaECmibKwBQzYWNl0piakr9hOHIQcIp7IdxCN9prg55iaUYNuicpLlPLvBhQyQ5SYWnzMibau76A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;525&quot;/&gt;&lt;/p&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/ol&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;38&quot; data-backw=&quot;278&quot; data-ratio=&quot;0.13421052631578947&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBu17iaEWDibxVATAq6l4UyeUs6GCy780B6EX0z5qiagCNLStYCX6cUYDWleXP1PpNg0ZtHh4xokz8picg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;380&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655944517&amp;amp;idx=1&amp;amp;sn=22e4a9a5c90a8044b35f4ecc2d08d369&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;数仓的建模和BI的建模有啥区别？by彭文华&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655943803&amp;amp;idx=1&amp;amp;sn=240c1864795b6d238d3b3763fc06bea6&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;数据湖很美好，但并不被需要&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655943748&amp;amp;idx=1&amp;amp;sn=4f75b40244927590e53692d9ea08e182&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;一文讲透数据仓库ODS层&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655943604&amp;amp;idx=1&amp;amp;sn=ff6c6be25b3efc1a57c26db71c1d1ba8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;浅谈大数据的过去、现在和未来&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655943115&amp;amp;idx=1&amp;amp;sn=4091b01eb17d1cd33180237b829cf8aa&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;数据库、数据湖、数据仓库、湖仓一体、智能湖仓，分别都是什么鬼？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655940614&amp;amp;idx=1&amp;amp;sn=296baf9144a7ad9825c502a4c2ce750e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;为什么ClickHouse分析数据库这么强？（原理剖析+应用实践）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655940345&amp;amp;idx=1&amp;amp;sn=9702be814bd92c67ef19cfb6158ee3e4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;解密One ID中的核心技术ID-Mapping&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655939732&amp;amp;idx=1&amp;amp;sn=2e811b4b3d38f2a10b15bc5fbc54466d&amp;amp;chksm=8d79cfa9ba0e46bfaac87b12498a17e239d67d6c46097ad27921ad710886e83a5980d600bb50&amp;amp;token=268190193&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;到底什么是数据湖？全面解读数据湖的缘起、特征、技术、案例和趋势&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655939738&amp;amp;idx=1&amp;amp;sn=dd2895374714282e4e14a01f47f8fa29&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;5分钟看懂：如何构建一个数据仓库？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655939680&amp;amp;idx=1&amp;amp;sn=ec9921493d985c4c3e4c61defa5ef56a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;阿里的数据仓库建模是否也是“华而不实”？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655939684&amp;amp;idx=1&amp;amp;sn=37b4b8c1d5cfd9873e7ee2a03333a3b0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;到底什么叫作数据集成？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击左下角“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;阅读原文&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”查看更多精彩文章，公众号推送规则变了，如果您想及时收到推送，麻烦右下角点个&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;或者把本号&lt;/span&gt;&lt;span&gt;&lt;strong&gt;置顶&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;！&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;/ol&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b4fe2fb2036878a22cf823d65e39f0b7</guid>
<title>爱奇艺海外 App 网络优化实践</title>
<link>https://toutiao.io/k/cdmnciz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section&gt;
作者 | 王伟峰&lt;/section&gt;&lt;section&gt;
编辑 | 闫园园&lt;/section&gt;&lt;p&gt;做海外市场，特别是目标面向全球的用户，网络的重要性不言而喻。试想一个移动端应用，打开 App 首页需要 10s 的时间，恐怕会让一半的用户流失。&lt;/p&gt;&lt;p&gt;爱奇艺推出的国际版面向全球的用户，在面临海外网络复杂的环境，针对性做了一系列优化实践，取得了不错的效果，在此总结分享我们的一些做法和优化思路，希望对大家有所帮助。&lt;/p&gt;&lt;p&gt;优化实践的几个核心：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;能不请求网络就不请求；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;请求的链接目标 0-RTT；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;请求的内容越小越好。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;整个工作分为三个阶段：调研当地网络环境，对基础链路技术性优化，业务层技术改进。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;调研当地网络情况&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;在 App 初期版本内增加请求链路的采样。样本数足够的情况下，可以清楚你要推广的市场是怎样的环境。样本数据让我们清楚发现了各个国家、地区网络的问题，在大规模宣传和投入前，做好 App 的基础工作非常重要。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36462093862815886&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkW2T9wr3KzU8LJukTQoduTG9HTlT7iaGWt90HQKMZ9PZHJlXxicJ6fZaLbogdV5gkucvt5rYbPH2Fvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;世界各地区用户至数据中心的网络延迟&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.472289156626506&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkW2T9wr3KzU8LJukTQoduTGDknuF7azyUUnhgUwHJPWQlXAxEUk1VPSK1UnInEiblpEAKAlbmkDNibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：世界各地区移动网络情况&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在调研阶段，我们发现了以下问题比较明显，切实影响我们的运营及 App 体验：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;运营商劫持严重，DNS 劫持、HTTP 劫持 ;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;移动端网络复杂，东南亚的网络基础建设还待改善 ;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;低端 Android 机有一定的占比，数量级别影响决策 ;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;国际网络用户端到服务器的延迟高。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在初期阶段，技术工作的核心是解决以上问题，为后续的运营做好基础建设。&lt;/p&gt;&lt;p&gt;因为业务接口大部分为 HTTP 形式，就开始围绕 HTTPS 进行针对性改进。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.27918170878459686&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkW2T9wr3KzU8LJukTQoduTGibnfN8AwVEbx4HJoBib8ic8cIG7KeiaNMErYtcHmQkgMwjJZTJEYdBOeKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：一个 HTTPS 请求阶段分析&lt;/span&gt;&lt;/p&gt;&lt;p&gt;一个 HTTPS 在第一请求会有 5 个 RTT。&lt;/p&gt;&lt;p&gt;1RTT(DNS) + 1RTT（TCP 握手）+ 2RTT（TLS1.2）+ 1RTT（HTTP 链接）&lt;/p&gt;&lt;p&gt;如果以端到服务 50ms 延迟为例，&lt;/p&gt;&lt;p&gt;一个 HTTPS 的接口延迟 =  350ms =  50*5+ 100ms(服务端)&lt;/p&gt;&lt;p&gt;如果目标是一个美国用户，打开首页需要 1.1s, 这个时间显然有点长。&lt;/p&gt;&lt;p&gt;下面开始进行技术改进的正文：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2563176895306859&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkW2T9wr3KzU8LJukTQoduTGuZysl4hpo8pKC09yQ4YYjkxib863Mwsg64iaftxTTTG4iaoGHib8XvZpyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：概括技术性优化的关键点&lt;/span&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;基础链路的改进优化&lt;/span&gt;
&lt;/section&gt;&lt;section&gt;
&lt;span&gt;DNS 优化&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;DNS 的解析改为 HTTPDNS&lt;/p&gt;&lt;p&gt;DNS 的改进上线后观察初始连接请求提升 17% 的效率。&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;传输层的优化调整&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt; MTU 的问题（最严重的情况：部分网络封杀 ICMP 协议，导致 MTU 无法自动协商。）&lt;/section&gt;&lt;section&gt;&lt;span/&gt;
TCP 层面的优化&lt;/section&gt;&lt;p&gt;&lt;strong&gt;1.TCP 拥塞控制优化&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;拥塞窗口 CongWin 是未接收到接收端确认情况下连续发送的字节数 ; CongWin 是动态调整，取决于带宽和延迟的积，比如 100MB 的带宽 100ms 的延迟环境。&lt;/p&gt;&lt;p&gt;时延带宽积 = 100Mbps*100ms =(100/8)*(100/1000) = 1.25MB&lt;/p&gt;&lt;p&gt;理论上 CongWin 窗口可以最大化到 1.25MB。CentOS 默认 CongWin = 20*MSS， 在 29KB 左右，离上限 1.26MB 差太多了，默认值上调 TCP 的启动会更快。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.TCP 快速打开 (TCP Fast Open：TFO)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;TCP 的 keepalive 下依然会有链接断掉重建的情况，TFO 是针对这种情况的优化。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8892900120336944&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkW2T9wr3KzU8LJukTQoduTGGaibwZoLkyVgPNtQaFBhwLM9bWs47gfMt8RCCBKeiaqsgug3iboP0wPMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：TFO 的原理机制&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在我们观察中开启 TFO 机制，海外业务一个 RTT 通常时间在 100ms 以上，HTTP 请求效率提升了 12% 左右。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;应用层的改进&lt;/span&gt;
&lt;/section&gt;&lt;section&gt;
&lt;span&gt;HTTP 的优化&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;HTTP1.1 有个 keep-alive 作用是复用 TCP 链接，减少新建的消耗，对于浏览器的业务比较适用，但对于移动端这种时间分散的请求，大部分请求还是新建连接。HTTP1.1 的串行机制有头部阻塞的问题。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;SSL 层优化&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;尽量升级到 TLS1.3，利用 Pre-shared Key 机制，开启 ssl_early_data 可以进一步优化 “0-RTT ”如果无法升级 TLS 版本，优化密钥算法为 ECDHE，运算速度快，握手的消息往返由 2-RTT 减少到 1-RTT，能达到与 TLS1.3 类似的效果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6831325301204819&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkW2T9wr3KzU8LJukTQoduTGNUWvcFs4GATh5qicOz5nn8YxrHxqPINyMqxE4PsxSPIaPHB1dmGp5Yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 TLS 版本的区别&lt;/span&gt;&lt;/p&gt;&lt;p&gt;TLS1.3 经过优化后， 一个 HTTP 请求由之前的 4 个 RTT 减少为 3 个 RTT。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;升级 HTTP2.0&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;几个重要的改进点：分帧传输、多路复用、头部压缩。&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
多路复用&lt;/section&gt;&lt;p&gt;在 HTTP/2 中，两个非常重要的概念：帧（frame）和流（stream）。&lt;/p&gt;&lt;p&gt;帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。&lt;/p&gt;&lt;p&gt;多路复用，就是在一个 TCP 连接中可以存在多条流。这些改进可以避免 HTTP 队头阻塞问题，提高传输性能。&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
头部压缩&lt;/section&gt;&lt;p&gt;开发人员如果不注意对 header 内容的控制，会造成 header 内容失控的现象，客户端极容易存储一个非常大的 Cookie。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5511432009626955&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkW2T9wr3KzU8LJukTQoduTGRdyjHCgaqXrcEX899ycZic4LyN7774eMiazhHMNHj2kMia5mjeYtwbYCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：HTTP2 的分帧传输机制&lt;/span&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;边缘节点动态加速⭐️，这个是非常有效的方式&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;尽可能离用户最近，利用边缘节点对路由、链路进行优化，提高动态服务的效率。相较于直连模式，使用动态加速后，P90 的接口延迟效率提升了 60%。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4825511432009627&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkW2T9wr3KzU8LJukTQoduTGUcmWDkvKpbyubmQ3J52sarDmYgpSbD64DoUbBVAqy0sMjklyttBLzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：爱奇艺动态加速的效果提升&lt;/span&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;启用兜底机制&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;对于失败的请求，启用兜底的协议 quic 或者 kcp。&lt;/p&gt;&lt;p&gt;客户端的失败率在 3% 左右，对这部分请求使用 UDP 协议兜底尝试，在我们的观察成功率提升了 45%。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;传输内容的优化&lt;/span&gt;
&lt;/section&gt;&lt;section&gt;
&lt;span&gt;应用 Brotli&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;因为预置了字典，在同等级别的压缩率下，对比 gzip 至少提升了 17% 的压缩比，接口平均的 Content-Size 由 30KB，降至 18KB。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;接口由 JSON 改为 Google Protobuf&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;应用 protobuf 的重要原因是解析效率比 JSON 至少高四五倍，在节点深度和数据量大的情况下更明显。但注意 Protobuf 内部的 varint 压缩，只对小于 128 的数字进行可变长压缩。实际效果不大，生产环境如果数据量大，外层的压缩如 gzip 不可少。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;图片格式升级为 Webp&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;在应用 webp 的同时，降低海报图片的质量，实践看海报的 quality 设置为 85% 肉眼难以分辨，相对同质量的 jpeg 或者 png，可以最大减小 45% 的体积。&lt;/p&gt;&lt;p&gt;应用效果明显，App 打开首页图片的加载提升肉眼可见。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;业务层面的优化改进&lt;/span&gt;
&lt;/section&gt;&lt;section&gt;
&lt;span&gt;减少不必要请求：&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;一些通用内容，如导航、频道，通常由运营人员主动更新。如下图，增加一个启动阶段请求的接口，里面放入内容更新的时间戳，与本地 cache 的时间戳有差异，则异步请求更新。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40312876052948254&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkW2T9wr3KzU8LJukTQoduTGz57QLBWumTDaicCoxmqhZSoaRvUWj9iag3bxkxlIxGv3EFjamiacwnBpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;区别用户网络，适应不同的策略。&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;对于视频，非 Wifi 默认启播码率为 360P。&lt;/p&gt;&lt;p&gt;对于海报，后端接口提供两种质量的 Url，wifi 高质，4G 低质。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;更多的业务优化&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;增加请求重试、调整 HTTP 的超时时间，请求缓存、联播预载等等。这些可以根据业务的需求进行调整。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;结尾&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;爱奇艺海外版经过一系列细节优化，用户体验持续上升。用户接口延迟、客户端失败率、视频播放成功率一系列的关键指标得到很大的改善。这也助力爱奇艺在东南亚多个国家的应用市场排名升至 TOP1。&lt;/p&gt;&lt;p&gt;另外 App 优化、Server 延迟优化、产品体验的改进，这一系列只有相辅相成才可以最大化提升用户体验。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作者介绍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;王伟峰&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;爱奇艺科技有限公司后端开发工程师。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;爱奇艺研究员。曾负责爱奇艺海外移动端质量、海外运营系统设计和实施等工作。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>