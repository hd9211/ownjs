<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ab405e9121e0e45a1ae7b50d026aa069</guid>
<title>千亿级金融场景下，基于Pulsar的云原生消息队列有怎样的表现？</title>
<link>https://toutiao.io/k/upkl2yx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;腾讯云中间件&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;gh_6ea1bc2dd5fd&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;腾讯云中间件官方账号。关注微服务、容器、API网关、消息中间件、DevOps、Serverless等云原生技术热点资讯，发布腾讯云中间件产品、用户手册、实践案例以及技术干货。定期举办技术沙龙，与你分享有效的技术解决方案。&amp;#13;
&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a553c482a8776b84536dd7083370d8cc</guid>
<title>盘点2021｜「避坑宝典」为大家分享一下笔者在2021年所遇到“匪夷所思”的Bug趣事（上）</title>
<link>https://toutiao.io/k/zdaoba0</link>
<content:encoded>&lt;div&gt;&lt;body id=&quot;readabilityBody&quot;&gt;
&lt;p id=&quot;app&quot;/&gt;
&lt;img src=&quot;https://static001.infoq.cn/static/infoq/img/logo-121-75.yuij86g.png&quot; alt=&quot;盘点2021｜「避坑宝典」为大家分享一下笔者在2021年所遇到“匪夷所思”的Bug趣事（上）&quot;/&gt;





    

&lt;/body&gt;
&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>77803f8964abaec7511998e6ccbcb2da</guid>
<title>前端性能优化 - 每一个前端开发者需要知道的防抖与节流知识</title>
<link>https://toutiao.io/k/zw4nlz0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wnIMIiaEIIrhfJLtAmkLMY12ibm2hVnicQYTjGKXStnjfQdxiaIas9zkWyRoVvEpNzUz3ic19z8MBtxI5W9GoOozkIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;防抖和节流都是应用在高频事件触发场景中，例如 &lt;code&gt;scroll（滚动加载、回到顶部）&lt;/code&gt;、&lt;code&gt;input（联想输入）&lt;/code&gt; 事件等。&lt;strong&gt;防抖和节流核心实现思想是在事件和函数之间增加了一个控制层，达到延迟执行的功能，目的是防止某一时间内频繁执行一些操作，造成资源浪费&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事件与函数之间的控制层通常有两种实现方式：&lt;strong&gt;一是使用定时器&lt;/strong&gt;，每次事件触发时判断是否已经存在定时器，是本文我们实现的方式。&lt;strong&gt;另外一种是记录上一次事件触发的时间戳&lt;/strong&gt;，每次事件触发时判断当前时间戳距离上次执行的时间戳之间的一个差值（&lt;code&gt;deplay - (now - previous)&lt;/code&gt;），是否达到了设置的延迟时间。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;可视化效果对比&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图是通过一个可视化工具 debounce_throttle 截取的一个效果图，展示了移动鼠标事件在&lt;strong&gt;常规操作&lt;/strong&gt;、&lt;strong&gt;防抖处理（debounce）&lt;/strong&gt;、**节流处理（throttle）**三种情况下的一个对比。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5357737104825291&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wnIMIiaEIIrhfJLtAmkLMY12ibm2hVnicQYvuibXIYasVZp71FjJOA0KAibE6PjhdXLoZgWx3JYuFaeIqZciabRL9Bqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2404&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;防抖（debounce）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;防抖是在事件触的指定时间后执行回掉函数，如果指定时间内再次触发事件，按照最后一次重新计时&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;生活场景示例：公交车到站点后，师傅不会上一个人就立马关闭车门起步，会等待最后一个人上去了或车上人已经满了，才会关闭车门起步。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;联想输入 - 常规示例&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如搜索框联想提示，当我们输入数据后，可能会请求接口获取数据，如果没有做任何处理，当在输入开始时就会不断的触发接口请求，这中间必然会造成资源的浪费，如果这样频繁操作 DOM 也是不可取的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// Bad code&lt;/span&gt;&lt;br/&gt;&amp;lt;html&amp;gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; search: &lt;span&gt;&amp;lt;&lt;span&gt;input&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;search&quot;&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;text&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;      &lt;span&gt;const&lt;/span&gt; searchInput = &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&quot;search&quot;&lt;/span&gt;);&lt;br/&gt;      searchInput.addEventListener(&lt;span&gt;&#x27;input&#x27;&lt;/span&gt;, ajax);&lt;br/&gt;      &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;ajax&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt;) &lt;/span&gt;{ &lt;span&gt;// 模仿数据查询&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`Search data: &lt;span&gt;${e.target.value}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;      }&lt;br/&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这段代码我们没有做过任何优化，使用 ajax() 方法模拟数据请求，让我们看下执行效果。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5292153589315526&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/wnIMIiaEIIrhfJLtAmkLMY12ibm2hVnicQY9kDTGkibc3yx9p3BbDb6pJGpoFqaya5KtEIPUVF690CDP5sBuoJQvtA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;599&quot;/&gt;&lt;figcaption&gt;常规联想输入操作.gif&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是调用的真实接口，从输入的那一刻起就会不停掉用服务端接口，浪费不必要的性能，还很容易触发接口的限流措施，例如 Github 提供的 API 会有每小时最大请求数限制。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;联想输入 - 防抖处理示例&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让我们实现一个&lt;strong&gt;防抖函数（&lt;/strong&gt;&lt;code&gt;**debounce**&lt;/code&gt;**）**优化下上面的代码。**原理是通过标记，判断指定的时间内是否存在多次调用，当存在多次调用时清除掉上一次的定时器，重新开始计时，在指定的时间内如果没有再次调用，就执行传入的回调函数 **&lt;code&gt;**fn**&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;debounce&lt;/span&gt;(&lt;span&gt;fn, ms&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; timerId;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;span&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (timerId) {&lt;br/&gt;      clearTimeout(timerId);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    timerId = setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      fn(...args);&lt;br/&gt;    }, ms);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这对于搜索场景是比较合适的，我们希望以最后一次输入结果为准，修改最开始的联想输入示例。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; handleSearchRequest = debounce(ajax, &lt;span&gt;500&lt;/span&gt;)&lt;br/&gt;searchInput.addEventListener(&lt;span&gt;&#x27;input&#x27;&lt;/span&gt;, handleSearchRequest);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次就好多了，当连续输入停顿时以最后一次的输入接口为准请求接口，避免了不停的刷新接口。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3572621035058431&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/wnIMIiaEIIrhfJLtAmkLMY12ibm2hVnicQYiadCWuNOGoXXicgybWFMoQX9NibjwdL1rcbRchqIwmyU31z21bCmTmYKg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;599&quot;/&gt;&lt;figcaption&gt;联想输入-防抖.gif&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;适当的时候记得要清除事件，例如 React 中，我们在组件挂载时监听 &lt;code&gt;input&lt;/code&gt;，同样的组件卸载时也要清除对应的事件监听器函数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;componentDidMount() {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.handleSearchRequest = debounce(ajax, &lt;span&gt;500&lt;/span&gt;)&lt;br/&gt; searchInput.addEventListener(&lt;span&gt;&#x27;input&#x27;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;.handleSearchRequest);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;componentWillUnmount() {&lt;br/&gt;  searchInput.removeEventListener(&lt;span&gt;&#x27;input&#x27;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;.handleSearchRequest);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;节流（throttle）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;节流是在事件触发后，在指定的间隔时间内执行回调函数&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;生活场景示例：当我们乘坐地铁时，列车总是按照指定的间隔时间每 5 分钟（也许是其它时间）这样运行，当时间到达之后，列车就要开走了。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;滚动到顶部 - 常规示例&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，页面有很多个列表项，当我们向下滚动之后希望出现一个 &lt;code&gt;Top 按钮&lt;/code&gt; 点击之后能够回到顶部，这时我们需要获取滚动位置与顶部的距离判断是否展示 &lt;code&gt;Top 按钮&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; container = &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;container&#x27;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.addEventListener(&lt;span&gt;&#x27;scroll&#x27;&lt;/span&gt;, handleScrollTop);&lt;br/&gt;    &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;handleScrollTop&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;scrollTop: &#x27;&lt;/span&gt;, &lt;span&gt;document&lt;/span&gt;.body.scrollTop);&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;document&lt;/span&gt;.body.scrollTop &amp;gt; &lt;span&gt;400&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;// 处理展示按钮操作&lt;/span&gt;&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// 处理不展示按钮操作&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&amp;lt;&lt;span&gt;/body&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，如果不加任何处理，滚动一下可能就会触发上百次，每次都去做处理，显然是白白浪费性能的。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8839137645107794&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wnIMIiaEIIrhfJLtAmkLMY12ibm2hVnicQYvglIf5MurIS6W3H3vkAsdZJQ6W7FOuCkxDkOqKjX3AeOyI4HIzzp8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1206&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;滚动未处理节流.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;滚动到顶部 - 节流处理示例&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现一个简单的节流（throttle）函数，与防抖很相似，区别的地方是，这里通过标志位判断是否已经被触发，当已经触发后，再进来的请求直接结束掉，直到上一次指定的间隔时间到达且回调函数执行之后，再接受下一个处理。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;throttle&lt;/span&gt;(&lt;span&gt;fn, ms&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;span&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (flag) &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;    flag = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      fn(...args)&lt;br/&gt;      flag = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    }, ms);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;改造下上面的示例，再来看看执行结果。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; handleScrollTop = throttle(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;scrollTop: &#x27;&lt;/span&gt;, &lt;span&gt;document&lt;/span&gt;.body.scrollTop);&lt;br/&gt;  &lt;span&gt;// todo:&lt;/span&gt;&lt;br/&gt;}, &lt;span&gt;500&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;window&lt;/span&gt;.addEventListener(&lt;span&gt;&#x27;scroll&#x27;&lt;/span&gt;, handleScrollTop);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与上面 “常规滚动到顶部示例” 做对比，现在效果已经好多了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.66&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/wnIMIiaEIIrhfJLtAmkLMY12ibm2hVnicQY2zDc0SPdtQ8Xcs5qia9QcWg5tXhSXZib1cZRoWlM6lOUEO74ZSryAY4Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot;/&gt;&lt;figcaption&gt;滚动到顶部-节流处理.gif&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;记得清除事件&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以 React 为例，组件挂载时我们监听 window 的 scroll 事件，在组件卸载时记得要移除对应的事件监听器函数。如果组件卸载时忘记移除，原先 A 页面引入了 ScrollTop 组件，单页面应用跳转到 B 页面后，虽然 B 页面没有引入 ScrollTop 组件，但是也会受到影响，因为该事件已经在 window 全局对象注册了，另外这样也存在内存泄漏。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ScrollTop&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;PureComponent&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  componentDidMount() {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.handleScrollTop = throttle(&lt;span&gt;this&lt;/span&gt;.props.updateScrollTopValue, &lt;span&gt;500&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.addEventListener(&lt;span&gt;&#x27;scroll&#x27;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;.handleScrollTop);&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  componentWillUnmount() {&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.removeEventListener(&lt;span&gt;&#x27;scroll&#x27;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;.handleScrollTop);&lt;br/&gt;  }&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;requestAnimationFrame&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;requestAnimationFrame 是浏览器提供的一个 API，它的应用场景是告诉浏览器，我需要运行一个动画。该方法会要求浏览器在下次重绘之前调用指定的回调函数更新动画。这个 API 在 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3NTg5MjU1Mw==&amp;amp;mid=2247484325&amp;amp;idx=1&amp;amp;sn=37f173b7a43175d47fe95dfaeac47ac4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;JavaScript 异步编程指南 - 探索浏览器中的事件循环机制&lt;/a&gt; 中有讲过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它会受到浏览器的刷新频率影响，如果是 60fps 那就是每间隔 16.67ms 执行一次，如果在 16.67ms 内有多次 DOM 操作，也是不会渲染多次的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当浏览器的刷新频率为 60fps 时等价于 &lt;code&gt;throttle(fn, 16.67)&lt;/code&gt;。在使用时需要先处理下，不能让它立即执行，由事件触发。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; handleScrollTop = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; requestAnimationFrame(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;scrollTop: &#x27;&lt;/span&gt;, &lt;span&gt;document&lt;/span&gt;.body.scrollTop);&lt;br/&gt;  &lt;span&gt;// todo:&lt;/span&gt;&lt;br/&gt;});&lt;br/&gt;&lt;span&gt;window&lt;/span&gt;.addEventListener(&lt;span&gt;&#x27;scroll&#x27;&lt;/span&gt;, handleScrollTop);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;requestAnimationFrame 这个是浏览器的 API，在 Node.js 中是不支持的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;社区工具集支持&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;社区中一些 JavaScript 的工具集框架，也都提供了防抖与节流的支持，例如 underscorejs、lodash。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚开始有提到，另外一种实现方式是记录上一次事件触发的时间戳，每次事件触发时判断当前时间戳距离上次执行的时间戳之间的一个差值，来判断是否达到了设置的延迟时间，以 underscorejs throttle 实现为例，只保留部分代码示例，一个关键代码片段是 &lt;code&gt;remaining = wait - (_now - previous)&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// https://github.com/jashkenas/underscore/blob/master/modules/throttle.js#L23&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;throttle&lt;/span&gt;(&lt;span&gt;func, wait, options&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; timeout, context, args, result;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; previous = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; throttled = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _now = now();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!previous &amp;amp;&amp;amp; options.leading === &lt;span&gt;false&lt;/span&gt;) previous = _now;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; remaining = wait - (_now - previous);&lt;br/&gt;    context = &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;    args = &lt;span&gt;arguments&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (remaining &amp;lt;= &lt;span&gt;0&lt;/span&gt; || remaining &amp;gt; wait) {&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (timeout) {&lt;br/&gt;        clearTimeout(timeout);&lt;br/&gt;        timeout = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;      }&lt;br/&gt;      previous = _now;&lt;br/&gt;      result = func.apply(context, args);&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (!timeout) context = args = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;  };&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; throttled;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;防抖是在事件触的指定时间后执行回掉函数，如果指定时间内再次触发事件，按照最后一次重新计时。节流是在事件触发后的间隔时间内执行回调函数。这两个概念在前端开发中都是会遇到的，选择合理的方案解决实际问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;防抖与节流还不是太理解的，对着文中的示例自己实践下，有什么疑问在留言区提问。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h2&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;us-3913677&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-ratio=&quot;0.006666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xsw6Lt5pDCu1rRLicXibOB6jq4wpe7W4Ioibu7XTJR1ABzARKoLxyWEWeIV6HJRII2GK1ntnCkVIqjY852gntBd5Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;敬请关注「Nodejs技术栈」微信公众号，&lt;span&gt;期望与志同道合的你一起打造优质 “Nodejs技术栈” 交流群，一起互相学习进步！&lt;/span&gt;&lt;span&gt;可长按下方二维码&lt;/span&gt;&lt;span&gt;添加【五月君】个人微信备注 “Node” 邀请入群。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zPkNS9m6iatLmT5coKbicuqENgoc3Pz4QWwtrEoP2RU2thicCJHaKNmJ23Hh9jYvicpVgiauY6NxNaZ59D6svw1Qskg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>66338119fb21d2b3cdcbdf4326f036ec</guid>
<title>我被这个浏览了 746000 次的问题惊住了！</title>
<link>https://toutiao.io/k/c7xllwm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;这个一个很有意思，但是卵用不大的小知识点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;先给你搞个程序看一下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MainTest&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String[] args&lt;/span&gt;) throws Exception&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SimpleDateFormat simpleDateFormat = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Date date = simpleDateFormat.parse(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1900-01-01 08:00:00&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(simpleDateFormat.format(date));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你说上面的程序逻辑就是一个简单的时间格式化，你说输出结果是什么？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;只是需要瞟一眼就知道，肯定是输出这个结果呀：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1900-01-01 08:00:00&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，你把上面的程序拿出来，直接跑起来，你会发现输出结果竟然是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1900-01-01 08:05:43&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当时就懵逼了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我知道时差 8 小时，是因为有时区问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我知道时间差 1 小时，是因为有夏令时的原因。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是这里差了 5 分 43 秒，有零有整，就让我有点摸不着头脑了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9454545454545454&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgDBstWVOPuicTIu162zpXSVPOaQLyfgT0lhJjH8xJsbkZiafLSLicCibuXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;440&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面这个案例就是一个读者分享给我的，他们在数据库里面默认时间是 1900-01-01，再加上时区问题，刚好变成了 1900-01-01 08:00:00，于是在通过程序做数据迁移的时候就踩到了这个莫名其妙的时间问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1021069692058347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUglCMh0dt44LXRoNEkXJKiahs0PSzNSqhee0t3iarlGZpEo2DC44iccaL7A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1234&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时他还给我附送了一个关于这个 bug 的链接：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://bugs.openjdk.java.net/browse/JDK-8266262&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34278180619644033&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgIEVSREB3c6ybM8EicxXBCwPCLIBhDxeJWPzlhwmtbctaKoQVy66ZZNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1517&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我乍一看，这个 bug 还挺新的呢，属于今年提出来的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;仔细又看了一眼发现是和之前的 bug 重复了：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33424283765347884&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgoV9CBG8SGFcs31iaKOkyoibiavrjy3LcKmmoJulThZ34AUJZuMZQu8FDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;733&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是这里提到了原因：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他说可以看一下这个链接&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://www.timeanddate.com/time/zone/china/shanghai?year=1900&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里面，在 1900 年的时候，发生了一个变化：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;The timezone offset was UTC +8:05:43 hours all of the period.&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;虽然我没太看明白具体是什么意思，但是我看到了“&lt;strong&gt;5 分 43 秒&lt;/strong&gt;”：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44933469805527126&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUglkEicficwtDR5Y6icf7noPxhvCRXyAMKEwxN3e1LKI3OY8CxKTtnL8Xnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;977&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我理解就是由于时区的变化，导致时间发生了重置。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着我顺藤摸瓜，在 stackoverflow 上找到了这个：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://stackoverflow.com/questions/6841333/why-is-subtracting-these-two-times-in-1927-giving-a-strange-result&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当时我就震惊了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个 10 年前被提出的问题居然已经被浏览过 746k 次了，非常热门的问题了，我居然没注意到过：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10849539406345957&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgbiaibp7t4qVtko01FJeoZ32U7jwAy9OowZdcWicgrYTUuHPgW4BMiapgYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;977&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个问题具体是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8216783216783217&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgxic4KcUUd67aqLJNAW4reicC4d6WvrRZa0n9ItY4Kwo9RP8tAkeQEOMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;858&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你就大概瞟一眼，我给你翻译翻译。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;提问者说，他发现 1927-12-31 23:54:07 到 1927-12-31 23:54:08 之间差了 353 秒，按理来说应该是 1 秒才对啊？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是把时间改成下面这样，又正常了：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; str3 = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1927-12-31 23:54:07&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; str4 = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1927-12-31 23:54:08&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;span/&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我把程序粘出来你也可以跑一下，看看结果非常的神奇啊：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;[] args) throws ParseException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    SimpleDateFormat sf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; str3 = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1927-12-31 23:54:07&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; str4 = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1927-12-31 23:54:08&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt; sDt3 = sf.parse(str3);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt; sDt4 = sf.parse(str4);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    long ld3 = sDt3.getTime() /&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    long ld4 = sDt4.getTime() /&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    System.out.println(ld4-ld3);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;span/&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是当我跑了一遍之后，我发现：我去，说好的 353 秒呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;跑出来怎么是 1 秒呢，毫无毛病啊：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgFxqmd9IL133Knyk0sJ5XKAsjS0c6XVauibmdWF0AEN6f3EzicoO0xk2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;603&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我甚至怀疑是 JDK 版本的问题，于是我换了 JDK 9,11,15 都跑了一下，都是 1 秒。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这就很奇怪了啊。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;感觉这个问题提的就有问题啊。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8324175824175825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgMlZ5lgE0hVEl9ficsRkxXXVRvI1kQHsiaOydAmuxKbAxYibeyGBicqOicfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;364&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是当我读了下面最高赞的答案之后，我才仿佛窥见了一点端倪。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个回答比较长，我先全部截图下来给你看看：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3228021978021978&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgkT9VrX0pCcZwjfzt7Ee5d99H5iatOeAkTcbLONUTicibQjEaY5J4hp6PQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比较长的原因是作者修改了几次回答。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么会修改回答呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;且往后看吧，一切的答案都藏在这里面。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我选关键的给你说。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先看第一段：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2857142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgtzJWfIOaZjbHUQdjVx4gQuspibHEk3gOBsd2eZlSDLNXjwoMnVwNLPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;658&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他说&lt;strong&gt;（1927年） 12 月 31 日的时候，上海的时区发生了变化&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而关于 1927 年上海的详细情况，他附上了一个超链接，这个超链接就是前面出现的网站，点进去之后是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4155653450807636&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgVRnGRFzDJbFbPUbNLnBwfZhVujwsx6gzHUvgny40bHrRnEoXme03ibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;681&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是这个里面显示：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;No further time changes in 1927 in Shanghai&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;翻译过来就是：1927 年上海的时间没有进一步变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这特么就和他下面说的那一坨内容对不上了啊？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他下面说，在 1927 年底的午夜时分，时钟往回走了 5 分 52 秒。因此，&quot;1927-12-31 23:54:08&quot;实际上发生了两次，而 Java 取的是第二次的的时刻，因此存在差异。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看到这里其实我都懵逼了，这玩意前后不符啊，于是我又接着开始搜索。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;直到我发现了这个：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://coolshell.cn/articles/5075.html/comment-page-2#comments&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这也是十年前的文章。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里面作者把当时网站截了个图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7089452603471295&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgkUVko0oB3ibO39W0WVxMmAicGxDLz8EnXkibTLldvXBB7icNF7Dicdia4JlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;749&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当年的截图显示：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在1927年12月31日23:59:59时，往后面的一秒应该是1928年1月1日 0:0:0，但是这个时间被往后调整了5分52秒，而成了，1927年12月31日的，23:54:08，于是，完成了352秒的穿越。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这说明了什么？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;说明数据发生了篡改，有人篡改了网页上的信息！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgyVSyZ6WvcUGfEYLOj4TeiazdcH5wZqJGkNeV7jWxT7ESPOiaD4kHDrXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;458&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;到底是怎么回事呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们回到 stackoverflow 接着往下看：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2916666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgngiaGJEGRklVMbbPUUp3FgPcslsDibccOEroWicVwdia6w0xBWIJ2I1ckw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;648&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是他第一次修改回答，因为 History changes...&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;历史发了变化了...&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他这里说，如果用 TZDB 的 2013a 版本的数据，原来的问题将不再表现出完全相同的行为。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 2013a 中，结果将是 358 秒，过渡时间为 23:54:03，而不是 23:54:08。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他提到了一个 TZDB，这是个啥东西呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我也不知道，但是我搜索了一下。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3971631205673759&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgcfo7PkMG7lBFmkR27CpUYV2JCUWgChiaD9nYxibZ9icwR6icKzkvG5TO9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;705&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他应该说的是这个的东西。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.iana.org/time-zones&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看名字你也知道了，它是一个时区数据库，里面应该是维护的时区相关的数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也就是说，在这个时区数据库里面，用 2013a 版本的数据，前面的代码就是另外一种输出了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也就是说数据确实发生了变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而关键的回答在于下一次编辑：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16798732171156894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgrVqWHOldECPJtmtxwQoJKLZbiag8qzC0DNAFNbSZEjq1Y4fs2UeasgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;631&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;History has changed again...&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;历史再次发生了变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这个时区数据库里面，2014f 版本中，变化的时间已经移到了1900-12-31，现在只是一个 343 秒的变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;343 秒？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不就是我们前面的 5 分 43 秒吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.437410071942446&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUg0N3kkXsuibSl0iay7bM6q4v2csNNJPKlAJMrChhML4wz2WlE565CWZvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;695&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好了，现在时差能对上了，343 秒，但是时间还是没对上啊。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们的测试时间 1900-01-01 08:00:00，他这里写的时间是 1900-12-31。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;差了整整一年呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好，我们看他最后一次编辑的内容：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13902053712480253&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgDDrFMVJFvvkLaMZXiaL4wbePibuQzX7jrHt3O9zWS3J7p4ibrb8tYenQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;633&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我个人理解他要表达的意思是这样的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Java 为了在时区上统一标准，所以来了个一刀切的政策。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;统一的标准就是让 UTC 时区下 1900 年之前的任何瞬间都是标准时间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;至于产生的时差嘛...&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;就在最开始的时候补上去吧。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以，1900-01-01 00:00:00 加上 8 小时时差，是 1900-01-01 08:00:00，在这个基础上预先加上 27 年后来自 1927-12-31 那个午夜由于时间回拨带来的 343 秒。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1900-01-01 08:05:43，我个人认为就是这样来的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而前面 stackoverflow 里面对应的那个程序，我们现在执行是输出 1，但是在 10 年前，输出结果确实是 353 。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;就像我把程序改成这样：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5826513911620295&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgA7H4SzScv0hzHpEh3QJJu4GTrE9gVibgW5OW5ib4hKjicxoPLp7L1gcIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;611&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最终的输出结果不是 1，而是 -342。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;时间，发生了“倒流”&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好了，又是一个没啥卵用的知识点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后，再补充两个冷知识。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一个是我在 JDK Bug 列表里面追溯了一下，能找到最早提出相关问题的时间是 2005 年：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://bugs.openjdk.java.net/browse/JDK-6281408&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.479607250755287&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUggoMAzEPrxWBeLhibNxibEaUpNo0HDyxEPVkicdUOdwUbsV4DhstsH6DvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1324&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这个里面，官方是这样回复的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1332116788321168&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgFOrwb4icrTmiaLfq4cPUQ6ATsWO6x94BmiayjQDBWkibWh4FyIOg6I6FoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;548&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个问题不会被修复，以避免任何兼容性问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;意思就是：问题我知道了，但是这玩意不太好弄，bug 先变成 feature 吧，就先这样吧。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;别问，问就是有历史原因在里面。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二个冷知识是，前面提到的，时区在 1927 年发生了变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你知道为什么吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我在某网站上找到了这样的描述：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17686424474187382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgicxXFCzoce3ficricswofFLeNPzKwx4eUHj0B3uhxmq1p5rwo8dQSLRbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1046&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651492514&amp;amp;idx=1&amp;amp;sn=4102f57635ae3c7594c70b100551eda3&amp;amp;chksm=bd25fcdd8a5275cb468f9090ef39a41758340d6a367c11f8d4810d70584908e9d29faec91da4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;死磕18个Java8日期处理，工作必用！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;死磕18个Java8日期处理，工作必用！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651486675&amp;amp;idx=2&amp;amp;sn=8986b0a6a3d19ec402af899b89cc4c51&amp;amp;chksm=bd2515ac8a529cba356a8b39810eed7d92a488e5f8d5d2f1ad690a793390dbe07e8aee76eeae&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;18 个 Java8 日期处理的实践，太有用了！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;18 个 Java8 日期处理的实践，太有用了！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651486675&amp;amp;idx=2&amp;amp;sn=8986b0a6a3d19ec402af899b89cc4c51&amp;amp;chksm=bd2515ac8a529cba356a8b39810eed7d92a488e5f8d5d2f1ad690a793390dbe07e8aee76eeae&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;18 个 Java8 日期处理的实践，太有用了！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651497941&amp;amp;idx=2&amp;amp;sn=f74161345cff588f62d9a52d601c5094&amp;amp;chksm=bd25c9aa8a5240bcc32b8965c25bcbbba1660d4ca034dcbb3eb118493af6b63c86d403d77331&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;计算机时间到底是怎么来的？程序员必看的时间知识！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;计算机时间到底是怎么来的？程序员必看的时间知识！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8c5f7f4db31170cabb33215a232521f4</guid>
<title>分布式链路追踪在字节跳动的实践</title>
<link>https://toutiao.io/k/hkc5fd7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;综述&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字节跳动在发展过程中，逐渐形成了十分复杂的超大规模微服务体系，对后端整体的可观测性解决方案提出了极高的要求。为了解决这个问题，基础架构智能运维团队自研链路追踪系统，将海量 Metrics/Trace/Log 数据进行整合与统一，并在此基础上实现了新一代的一站式全链路观测诊断平台，帮助业务解决监控排障、链路梳理、性能分析等问题。本文将会介绍字节跳动链路追踪系统的整体功能和技术架构，以及实践过程中我们的思考与总结。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;什么是分布式链路追踪(Trace) ？&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;M T L 的关系&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可观测性的三大基础数据是 Metrics / Log / Trace。说到这三大件，可能大家会想到当需要监控变化趋势和配置告警时就去用 Metrics；当需要细查问题时去查 log；对于微服务数量较多的系统，还得有 Trace，Trace 也可以看做一种标准结构化的 log，记录了很多固定字段，例如上下游调用关系和耗时，查看上下游调用关系或者请求耗时在链路各节点上的分布可以查看 Trace。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46296296296296297&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPgPiaRP2ckVwoA61zuCGEhDl7jbH7OhibN7x5E3pkyzTibpia95KV9k9KuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是如果带着孤立的观点去用这些数据的话，数据的价值会大大降低。举例一个常见的场景，通过 Metrics 得知某服务 SLA 降低，错误率上升，怎么去排查根因呢？先去找错误日志吧，可是我看到的错误日志是不是真的和这个错误率上升有关系呢？得翻翻代码看看这些错误日志都是哪里打出来的，代表什么意思。再去找找有没有错误 Trace？找出来的 Trace 也不太确定是不是和这个错误率上升有关系，还是得看代码确认下。终于通过一行行的代码和数据比对，确认到这个错误是下一层服务返回给我的，把那个服务的负责人拉进来一起排查吧，然后这个群越拉越大，更多的人被拖进来一层一层地查下去，最终定位到是某个底层服务上线了一个变更导致 Panic，错误层层向上传播导致服务 SLA 降低。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个过程很不美好，需要工程师理解每一项数据的底层逻辑，才能充分利用它们去解决具体问题。而在复杂的大规模微服务系统中，没有单个工程师能够做到熟悉每一个微服务的底层逻辑，因此复杂微服务系统的排障和观测往往是一项有挑战的困难工作。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Trace 是数据的链接纽带&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果所有微服务的监控数据都是遵循统一模型和语义规范并且天生高度关联的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在软件系统中，每秒钟有无数的 Context 在流动。这些 Context 可能是一个实时在线请求，也可能是一个异步处理任务。每个 Context 都会在多个微服务节点中持续传播才能最终完成。所有的监控数据（包括 Metric, Log 等）都源自于某一个 Context。Trace 就是这个 Context 的数据载体，通过标准化的数据模型，记录 Context 在多个微服务中的全部执行过程，并沿途关联上此 Context 上发生的所有事件（包括 Metric, Log 等）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再回到刚才那个 Case，当我们对某个 Metric 波动发生兴趣时，可以直接将造成此波动的 Trace 关联检索出来，然后查看这些 Trace 在各个微服务中的所有执行细节，发现是底层某个微服务在执行请求过程中发生了 Panic，这个错误不断向上传播导致了服务对外 SLA 下降。如果可观测平台做得更完善一些，将微服务的变更事件数据也呈现出来，那么一个工程师就可以快速完成整个排障和根因定位的过程，甚至不需要人，通过机器就可以自动完成整个排障和根因定位过程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5407407407407407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPmPfCad6zfI5QnPO4NnQq0SAdia6pBGjPm7IwEFp2lnVvpicibyeQrHr5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Trace 不仅仅是用来查看耗时分布甘特图的工具，&lt;strong&gt;也是海量监控数据的 Context 链接纽带&lt;/strong&gt;。基于可靠关联的 Metric / Trace / Log 数据，也构建出强大的可观测性能力，回答监控排障、SLO 调优、架构梳理、流量估算、智能化故障归因等众多复杂问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Trace 的采集以及跨服务进程的 Context 传递一般是由微服务框架等基础设施自动完成的，但是要实现最佳效果也需要所有研发工程师的理解和配合。研发工程师在编码的过程中应当有意识地在所有代码执行过程中持续传递 Context。比如在 Golang 中，context.Context 需要在所有函数调用中作为参数持续传递；在 Java 中，一般默认用 Threadlocal 作为 Context 的存储载体，但是如果有多线程或者异步的场景，则需要开发者自行对 Context 进行显式的传递，否则上下文就断了，难以实现有效的追踪和监控。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;字节链路追踪系统的挑战与机遇&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字节跳动在发展过程中，逐渐形成了十分复杂的超大规模微服务体系，对后端整体的可观测性解决方案提出了极高的要求。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5703703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPanpurH3jn39QftaIwAkjTriaXKD8647BNMiaq1qste0icvHkqLdIPCbGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们面临的挑战包括：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;线上流量巨大&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务数量巨大，调用关系复杂，迭代变化快&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;研发团队庞大，分工复杂&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前字节跳动有巨大的流量，众多的活跃微服务、容器实例数，以及庞大的研发团队。一个复杂业务链路动辄涉及数百个微服务，有一线业务，有中台，也有基础设施，不同微服务由不同的研发团队开发，同时还有各类横向团队负责整体架构的质量、稳定性、安全和效率等相关工作。不同团队对链路追踪系统都会有不一样的诉求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时我们也有着难得的机遇：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;微服务框架高度统一&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务高度容器化，环境统一&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;存储/中间件等基础设施高度统一&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;得益于长期的统一基建工作，字节全公司范围内的所有微服务使用的底层技术方案统一度较高。绝大部分微服务都部署在公司统一的容器平台上，采用统一的公司微服务框架和网格方案，使用公司统一提供的存储组件及相应 SDK。高度的一致性对于基础架构团队建设公司级别的统一链路追踪系统提供了有利的基础。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;字节链路追踪系统的目标&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面对这样的现状，字节链路追踪系统围绕着一些目标展开建设。我们的功能性目标主要包括这几个方面：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;统一数据模型与语义&lt;/strong&gt;：统一数据模型和语义规范，对所有主流框架/组件进行默认埋点中间件的替换升级，建立 Metrics / Trace / Log 可靠关联关系。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;开放自定义&lt;/strong&gt;：统一模型的基础上，充分开放自定义能力，满足不同业务场景的监控追踪需求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;中心化配置管控&lt;/strong&gt;：中心化动态管理采样、染色、熔断限流、索引、脱敏保密等各类策略。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;一站式观测平台&lt;/strong&gt;：提供从 SDK 到采集、计算、存储、查询和产品化交互的完整解决方案，基于高质量基础数据，构建一站式观测平台，提升监控排障、SLO 调优、架构梳理、容量管理等场景的能效。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在功能性目标的背后，我们追求的技术目标主要围绕这几个方面：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;业务集成开销最小化&lt;/strong&gt;：集成开销包括业务接入的改造成本和接入后带来的 Overhead 开销。大范围的链路追踪能够成功覆盖推广，必须保证将集成开销降到最低。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;平衡存储效率与检索需求&lt;/strong&gt;：需要以有限的机器预算完成较大数据量的处理和存储，保证数据从产生到可被检索的延迟在分钟级以内，检索响应速度在秒级以内。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;多机房容灾完备性&lt;/strong&gt;：需要优先考虑当发生断网或拥塞、机房宕机等灾难场景，业务急需观测线上状况时，保持可用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;最小化架构与依赖复杂度&lt;/strong&gt;：字节在海内外有众多机房，需尽可能最小化整体架构的复杂度和第三方依赖的复杂度，否则多机房的部署运维包括容灾完备性保障会非常困难。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;字节链路追踪系统的实现&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据采集&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据模型&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;统一的数据模型是 Trace 的基础，字节链路追踪系统的数据模型设计借鉴了 opentracing 和 CAT 等优秀的开源解决方案，结合字节内部实际生态和使用习惯，使用如下数据模型：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Span&lt;/strong&gt;: 一个有时间跨度的事件，例如一次 RPC 调用，一个函数执行。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Event&lt;/strong&gt;: 一个没有时间跨度的事件，例如一条 log，一次 panic。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Metric&lt;/strong&gt;: 一个带多维 tag 的数值，例如一个消息体的大小，一个订单的价格。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Trace&lt;/strong&gt;: 一个请求上下文在多个分布式微服务节点的完整执行链路。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Transaction&lt;/strong&gt;: 一条 Trace 在单个服务节点上的所有 Span / Event / Metric 对象构成的树形结构消息体。Transaction 是 Trace 数据的处理和存储的最小单位，紧凑的数据结构有利于节约成本和提高检索性能。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6460348162475822&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPbRBOYDicJLLWLbVecK5micbqccticQJkOlnDtshW3sBmUy1l3APhbHOpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1034&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图展示了使用字节链路追踪系统 SDK 埋 Trace 的代码示例。注意其中 Context 贯穿整个请求生命周期，在进程内和跨进程间持续传递，将数据串联起来。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPrZDKXAkjjQ6iaYg3CMsiandk2hU9TvUNI0PWicjMg9BAtIcWkBCyquwlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续这个示例，我们结合下图阐述一下如何基于这套模型将 Metric / Trace / Log 进行可靠关联的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Metric 关联 Trace:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;每个 Span 会有内置的频次/耗时/失败率 Metric 统计时序，Rpc/Mq 场景的 Span 还会有 SendSize/RecvSize/MqLag 等内置统计时序。Span Tag 和 Metric Tag 一一对应，以此为依据可以将 Span 时序指标与 Trace 中的 Span 可靠关联。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每个 Event 不仅会挂载在 Span 上，也会有内置的频次 Metric 统计时序。Event Tag 与 Metric Tag 一一对应，以此为依据可以将 Event 时序指标与 Trace 中的 Event 可靠关联。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每个 Metric 不仅会挂载在 Span 上，也会按 Metric 类型输出 rate/timer/store 等各类统计时序，两边 Tag 一一对应，以此为依据可以将 Metric 时序指标与 Trace 中的 Metric 对象可靠关联。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Trace 关联 Log:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Log SDK 会将 Context 中的 TraceID 和 SpanID 写入日志头中，通过 TraceID 和 SpanID 与 Trace 建立可靠关联。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43148148148148147&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPAibzSV2UBF39YpUpNNzrz1lcibqH3GSkibXssQxLQXoVFj8zeZx9iawSWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;语义规范&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仅有统一的抽象数据模型还不够。如果每个服务都五花八门的随意打 tag 没有统一标准，那么即使有统一抽象模型也很难建设高质量的观测平台。必须对 HTTP Server, RPC Server, RPC Client, MySQL Client, Redis Client, MQ Consumer, MQ Producer 等各类主流场景都进行统一的语义规范，确保不同语言不同框架在相同场景下上报的数据遵循统一语义规范，才能够真正获取高质量的可观测性数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;语义规范没有唯一标准，下面给出字节内部目前使用的部分语义规范作为参考示例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;通用基础字段&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;字段名称&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;描述&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;ServiceName&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;服务名称&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Framework&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;服务所使用的框架组件&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;DC&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;服务所在机房&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Cluster&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;TCE 上服务的逻辑集群&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;DeployStage&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;部署阶段（小流量，单机房，全流量）&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;IPV4&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;IPV4 地址&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;IPV6&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;IPV6 地址&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;PodName&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;容器唯一名称&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Env&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;服务部署的环境泳道&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;场景化语义规范示例：RPC Client 场景&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;字段名称&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;含义&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Method&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;此 RPC Client 调用发起时所在的服务接口&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;ToService&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;被调用的远端 Server 服务名&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;ToMethod&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;被调用的远端 Server 接口名称&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;ToServiceType&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;被调用的远端 Server 服务类型，例如 thrift/grpc&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;ToCluster&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;被调用的远端 Server 集群名&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;ToDc&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;被调用的远端 Server 机房&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;ToAddr&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;被调用的远端 Server IP:Port 地址&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;StatusCode&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;系统状态码&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;BusinessStatusCode&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;业务状态码&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;IsError&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;此字段标识请求是否失败，0: 成功 1: 失败，框架默认会按照是否发生系统层面错误设置此字段的值，也允许业务自行调整这个字段的值，此字段会用于默认的错误率监控告警等场景&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;SendSize&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;发送数据大小（单位 Byte）&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;RecvSize&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;收到数据大小（单位 Byte）&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Latency&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;RPC 调用耗时（单位微秒）&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;采样策略&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于字节整体线上流量非常大，微服务数目众多，不同微服务的性能敏感度、成本敏感度和数据需求各有不同，例如有些服务涉及敏感数据，必须有非常完整的追踪数据；有些服务性能高度敏感，需要优先控制采样数最小化 Overhead；测试泳道、小流量灰度或者线上问题追查等场景会需要不同的采样策略；常规流量和发生异常的流量也需要不同的采样策略。因此灵活的采样策略以及调控手段非常必要。字节链路追踪系统主要提供了如下几种采样模式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;固定概率采样+低流量接口兜底采样&lt;/strong&gt;：默认以 Logid 作为采样种子，按固定概率进行采样。对于流量较低的接口，按固定概率采样难以命中的，SDK 会自动按一定的时间间隔进行兜底采样，确保低流量接口也有一定数目的请求被采集。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;自适应概率采样&lt;/strong&gt;：按单位时间对每个接口采集一定数目的 Transaction 为目标，例如 100 条/min，SDK 自动根据当前 QPS 动态计算采样率进行采样。流量较低或不稳定的服务建议采取这种模式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;染色采样：对特定的请求添加染色标记，SDK 检测到染色标对该请求进行强制采样。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;PostTrace 后置采样&lt;/strong&gt;: 当一个 Trace 一开始未命中采样，但在执行过程中发生了一些令人感兴趣的事（例如出错或时延毛刺）时，可以在 Trace 中间状态发起采样。相较于先全采再后置采样，此方案开销极低。PostTrace 是前置概率采样的一个重要补充，可以针对性地采集到异常链路，相比于先全采后 tail-based sampling 方案其开销是极小的。但 PostTrace 的缺点只能采集到 PostTrace 时刻尚未结束的 Span，因此数据完整性相较前置采样有一定损失。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们结合一个示例来更好的理解什么是 PostTrace。左图是一个请求，按照阿拉伯数字标识的顺序在微服务间发生了调用，本来这条 trace 没有采样，但是在阶段 5 时发生了异常，触发了 posttrace，这个 posttrace 信息可以从 5 回传到 4，并传播给后续发生的 6 和 7，最后再回传到 1，最终可以采集到 1,4,5,6,7 这几个环节的数据，但是之前已经结束了的 2、3 环节则采集不到。右图是我们线上的一个实际的 posttrace 展示效果，错误层层向上传播最终采集到的链路的样子。PostTrace 对于错误链传播分析、强弱依赖分析等场景有很好的应用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4759259259259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPBsUOXTHollMstMqyR9x9S5NLldJzLqpuJkwJ1Hx1toOibKn0UNmurUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些采样策略可以同时组合使用。需注意，采样不影响 Metrics 和 Log。Metrics 是全量数据的聚合计算结果，不受采样影响。业务日志也是全量采集，不受采样影响。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;中心化配置管控&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了提高效率，方便不同团队高效工作，字节链路追踪系统提供了丰富的中心化配置管控能力，核心能力包括以下几个方面：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;采样策略&lt;/strong&gt;：支持业务按照不同的集群、接口、机房、部署阶段设置不同的概率采样策略；也可以动态设置染色、PostTrace 触发条件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;自定义索引&lt;/strong&gt;：不同的框架和场景会有不同的默认索引字段，也支持业务按需在默认索引的基础上为自定义字段创建索引。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;熔断保护&lt;/strong&gt;：SDK 默认配备多种熔断保护机制确保 Trace 采集不会占用过多资源影响主线功能，同时允许业务根据实际情况对相关的熔断参数进行动态调整。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;脱敏保密&lt;/strong&gt;：业务可以按需对 Trace 数据进行脱敏和保密。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;整体架构&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;整体架构&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47100712105798576&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPsTXInIQIaeYd5VF7NeXpJWYe35T1jByiaXvUF6AcdjEDLYVphatwFcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;983&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字节链路追踪系统从数据接入侧、消费存储到查询整体模块架构如上图所示。这里说一些技术细节：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;私有协议数据流，性能更极致&lt;/strong&gt;：从 SDK 到最终写入存储，整体数据流采用私有协议，数据流中各环节仅需解码部分 header 即可完成处理，无需解码所有内容，可以节约大量的中间环节资源，降低时延。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;底层本高吞吐的字节自研日志存储&lt;/strong&gt;：以较低的存储成本实现较高的写入速度和查询性能，用于支持各类 Trace 在线检索场景。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;单元化架构保障多机房容灾完备性&lt;/strong&gt;：整体采用单元化架构，节约机房间网络带宽，在部分机房间网络故障或单机房宕机时保持高可用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;精细灵活的中心化调控能力&lt;/strong&gt;：统一的配置中心向整个数据流各阶段下发各类动态配置发并实时生效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;兼顾在线实时查询与计算分析&lt;/strong&gt;：如架构图所示，数据流主要分两条，一条负责数据的在线存储和实时查询，要求链路尽可能短，追求性能极致，压低时延，保证数据从产生到可检索要尽可能快+高可用；另一条是计算分析流，对延迟的要求相对较低，但是需要满足各类场景化的计算分析需求，与公司数仓平台有较好的集成。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;元数据采集与安全过期&lt;/strong&gt;：从 Trace 数据流中可以采集到准确度和时效性很高的元数据，例如每个微服务有哪些活跃接口，使用了哪些框架组件等信息，为多个第三方系统例如监控告警和服务治理等平台提供支持。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;多机房容灾完备性&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面讲目标时提到，链路追踪系统作为一个可观测性基础设施，需要优先考虑当发生断网或拥塞、机房宕机等灾难场景，业务急需观测线上状况时，保持可用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.803921568627451&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPkhpEv7s0Bz12iadDXGKdzOicq4RxDTtxQicsDd4GXIbEDCWoyczuEsPsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;663&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字节链路追踪系统采用单元化部署机制，写入数据流上各机房间无通信，顶层查询模块部署在汇聚机房（同时在主机房部署备用查询节点），查询时向各机房发起检索并合并结果。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;写入流主机房间无数据通信，主机房间发生断网时，功能不受损。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当发生单机房宕机或孤岛时，可执行预案在查询侧屏蔽掉故障机房，保证其他机房数据可用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当顶层查询模块所在的机房宕机或断网时，可执行预案将查询切到备用机房查询节点继续提供服务。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分析计算&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了基础的实时检索能力以外，场景化的数据聚合分析计算也是链路追踪系统的一个重要需求，目前字节链路追踪系统支持的分析计算场景主要包括：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;拓扑计算&lt;/strong&gt;：为每个微服务（精确到接口/集群/机房粒度）计算上下游依赖链路拓扑骨架，满足业务架构梳理，全链路监控等场景需求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;流量估算&lt;/strong&gt;：聚合计算所有 Trace 并结合每条 Trace 的采样率估算出链路的原始流量及调用比例，满足活动扩容评估，流量来源分析，成本分摊计算等场景需求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;错误链分析&lt;/strong&gt;：聚合计算含有错误的 Trace 的错误传播路径，满足故障根因定位，错误影响面分析，易故障点优化等场景需求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;链路性能分析&lt;/strong&gt;：聚合计算满足特定条件的 Trace 并分析各环节的耗时及调用比例等数据，满足全链路性能优化，耗时增加根因定位等场景需求。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不同的需求场景可以选择不同的计算模式，目前字节链路追踪系统采用的计算模式主要有三种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;近实时流式计算&lt;/strong&gt;：从消息队列中消费数据按照时间窗口进行流式聚合计算，近实时地不断更新计算结果。例如拓扑计算主要采取此模式，以获取近实时的拓扑骨架。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;即兴抽样计算&lt;/strong&gt;：即兴从在线存储中按照特定条件抽样检索出有限数目（例如数百条）的 Trace 进行聚合计算，快速获得计算结果。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;离线批计算&lt;/strong&gt;：定时对离线数仓中的 Trace 进行 MapReduce 批计算，输出分析结果。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大部分场景的的 Trace 分析计算实质都是批量 Trace 的 MapReduce 计算，基础逻辑算子在不同的计算模式中可以复用。例如错误传播链分析计算，既可以在故障时刻进行即兴抽样计算快速得到分析结果，也可以通过离线批计算的方式进行长期订阅用于 SLO 持续优化。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5325953259532595&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPspSyqmyYvGwj6AAuu6Dn2CJ0URqljnIMiaSZZjo4k5KQUkm6KxIPxeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;813&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;现阶段实施效果&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;吞吐量：Transaction 数 10 Million/秒（默认采样率 0.1%），索引数 300 Million/秒&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;查询性能：TraceID 检索性能 P50 &amp;lt; 100 毫秒, P99 &amp;lt; 500 毫秒&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据产生到可检索整体时延: AVG ≈ 1 分钟，P99 &amp;lt; 2 分钟&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;存储资源：5 PB (2 副本 TTL 15 天)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实践应用案例&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;P99 慢请求根因追查&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于 Metrics, Trace, 底层调用分析和容器资源监控进行毛刺慢请求根因的快速定位。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48333333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPQd3EPfmzpPsWaAsBWdj9p2ibAwSane0DiapOQtCD9Nz1thaqvulxibarA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;全链路实时监控&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;支持从任一微服务节点发起拓扑查询，实时观测各节点的流量/延迟/错误率/资源使用率/告警/变更等，快速从全链路视角获取整体状态信息，用于日常巡检、故障排查或压测观测等场景。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6314814814814815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPLC3COSY5kztbiaVwWLp28Qr8WSgEHqBdk9ibPBHOk86dGzGjmzqiaYFew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;活动大促全链路容量预估&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各业务线会经常搞些活动来促进用户增长或留存，在准备这些活动时，容量估算是一个必备阶段，过程一般如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1341991341991342&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPEiba7cOAcWQ7NHcAlStTzO0KYfLheM4Ktm799zJeH3Gm44dWhN9h60w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;693&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字节链路追踪系统可以根据入口在历史时段上的 QPS，各节点调用比例，资源使用率等指标自动完成全链路各环节 QPS 增量与资源增量需求的一键估算。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3574074074074074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPjsklKicP1QHe6PNBDLjmvltrKLhu9bjy1FWjjm1lF67VPEkFrE5OHMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;故障来源与影响面分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当发生异常时，可以从在线存储中快速批量检索到异常 Trace 进行聚合计算，分析错误根源来自哪里，传播到了哪里，影响到了哪些服务，并和昨日同时段错误率进行对比，帮助工程师在遇到故障时快速定位根因。错误传播链计算也支持通过离线订阅的方式，对全时段所有异常 Trace 进行长期计算，以助力于 SLO 长期优化。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbPJLPapEDbVYsnHian5hsjSUD1mgGSl88BwMfXhT9mwyfd5cZhPuaribRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Trace 是软件系统监控数据的链接纽带，建立 Metrics/Trace/Log 的可靠关联关系，是构建强大的可观测性能力的基础，基于优质的监控数据，可以回答监控排障，SLO 调优，架构梳理，流量估算，智能化故障归因等众多复杂问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字节跳动在发展过程中，逐渐形成了十分复杂的超大规模微服务体系，我们面临着很多挑战，包括线上流量巨大，微服务数量巨大，迭代变化快，研发团队庞大，分工复杂等，但同时也有着难得的机遇，即全公司层面的微服务基础设施十分统一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面对这样的现状，字节链路追踪系统围绕着一些目标展开建设，这些目标有一些是项目建设之初就明确的，也有一些是在实践过程中反思总结的，主要包括统一数据模型与语义，开放自定义，中心化配置管控，一站式观测平台；业务集成开销最小化，平衡存储效率与检索需求，多机房容灾完备性和最小化架构与依赖复杂度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来分享了字节链路追踪系统的整体实现。数据采集侧的建设主要关注数据模型，语义统一，采样策略以及熔断保护等，并实现中心化配置管控。服务端的建设主要关注平衡成本和延迟，兼顾在线检索和分析计算，保障多机房的容灾完备性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后分享了字节链路追踪系统的一些实践应用，例如 P99 慢请求根因追查，全链路实时监控，活动大促全链路容量预估和错误传播分析等。&lt;/p&gt;&lt;h3&gt;关于智能运维团队&lt;/h3&gt;&lt;p&gt;字节跳动基础架构智能运维团队（可观测性基础设施 Observability Infrastructure）负责（1）自研海量时序数据库、调用链路、日志系统；（2）一站式可观测性平台，包括自定义大盘、智能报警和智能监控产品、归因自愈、链路排障分析。由此推动线上稳定性保障、故障诊断、容量管理和服务治理等能力构建。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOjvJ1QybxoXicjQWpLRcdAbP3WHUPFkSZdKNMdJbPt161hlBUFgia2UYZJ9bIvicokHXxYCY1sXv9wTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/figure&gt;&lt;p&gt;更多岗位，可邮件联系 &lt;strong&gt;xuhuan.1503@bytedance.com&lt;/strong&gt; 获取&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>