<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f428d0c31404e887b105a4ba926ee7d8</guid>
<title>悄悄学习Doris，偷偷惊艳所有人 | Apache Doris四万字小总结</title>
<link>https://toutiao.io/k/w5o0jfy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;h2&gt;Doris 简史&lt;/h2&gt;&lt;p&gt;Doris 自第一版诞生以来，经过了 11 年的发展，中间做过无数改进。这⾥只罗列对 Doris 发展来说⽐比较重要的关键节点与事件。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2008&lt;br/&gt;Doris1 ，「筑巢引凤」的重要基石&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在 Doris1 诞生之前，百度使用 MySQL Sharding 方式来为广告主提供广告报表支持。随着百度本身流量的增加，广告流量也随之增加，已有的 MySQL Sharding 方案变得不再能够满足业务的需求。当时数据存储和计算成熟的开源产品很少，Hbase 的导入性能只有大约 2000 条/秒，不能满足业务每小时新增的要求。而业务还在不断增长，来自业务的压力越来越大。在这种情况下，Doris1 诞生了，并且在 2008 年 10 月份跟随百度凤巢系统一起正式上线。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2009&lt;br/&gt;Doris2，解「百度统计」燃眉之急&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;2008 年的百度统计服务大约有 50-60 台 MySQL，但是业务每天有 3000 万+条增量数据，由于 MySQL 的存储和查询性能无法满足需求，对存量数据的支撑已经到了极限，问题频出，万般无奈之下百度统计甚至关闭了新增用户的功能，以减少数据量的增加。&lt;/p&gt;&lt;p&gt;Doris1 由于当时时间紧、任务重，所以设计、实现的时候只为了能够满足凤巢的业务需求，并没有兼顾其他的应用需求。2009 年 Doris2 研发完成后上线百度统计，并且成功支撑百度统计后续的快速增长，成功的助力百度统计成为当时国内规模最大，性能、功能最强的统计平台。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2010&lt;br/&gt;Doris3 ，让查询再快一点&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;随着业务数据量的不断增长，Doris2 系统的问题也逐渐成为业务发展的瓶颈。首先体现在 Doris2 无法满足业务的查询性能需求，主要是对于长时间跨度的查询请求、以及大客户的查询请求。其次，Doris2 在日常运维方面基本上都需要停服后手动操作，比如 Schema Change、集群扩缩容等，一方面用户体验很差，一方面还会增加集群运维的成本。最后，Doris2 本身并不是高可用系统，机器故障等问题还是会影响服务的稳定性，并且需要人肉进行复杂的操作来恢复服务。为了解决 Doris2 的问题，团队开始了 Doris3 设计、研发。Doris3 的主要架构中，DT（Data Transfer）负责数据导入、DS（Data Seacher）模块负责数据查询、DM（Data Master）模块负责集群元数据管理，数据则存储在 Armor 分布式 Key-Value 引擎中。Doris3 依赖 ZooKeeper 存储元数据，从而其他模块依赖 ZooKeeper 做到了无状态，进而整个系统能够做到无故障单点。&lt;/p&gt;&lt;p&gt;在数据分布方面 Doris3 引入了分区的概念。&lt;br/&gt;另外 Doris3 在日常运维 Schema Change，以及扩容、缩容等方面都做了针对性设计，使其能够自动化进行，不依赖线上人工操作。&lt;/p&gt;&lt;p&gt;Doris3 在 2011 年完成开发后逐渐替换 Doris2 所制成的业务，并且成功的解决了大客户查询的问题。而公司内部后续的新需求，也都由 Doris3 来承担支持。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2012&lt;br/&gt;MySQL + Doris3 ，百度的第一个 OLAP 平台&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;2012 年随着 Doris3 逐步迁移 Doris2 的同时，大数据时代悄然到来。在公司内部，随着百度业务的发展，各个业务端需要更加灵活的方式来分析已有的数据。而此时的 Doris3 仍然只支持单表的统计分析查询，还不能够满足业务进行多维分析的需求。所以，为了能够支持业务的多维分析需求，Doris3 采用了 MySQL Storage Handler 的方式来扩展 Doris3。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2012&lt;br/&gt;OLAP Engine，突破底层存储束缚&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Doris3 支持报表分析场景时，底层通用 Key-Value 存储引擎的弊端也逐渐显露。&lt;br/&gt;为了能够在底层存储引擎上有所突破，OLAP Engine 项目启动了。这个项目的发起者是当时从 Google 来的高 T，为百度带来了当时业界最领先的底层报表引擎技术。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2013&lt;br/&gt;用 PALO，玩转 OLAP&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;底层技术的发展会激发上层业务的需求，而上层业务的需求同时会为底层的技术带来新的挑战。因此 Doris 亟需一款拥有分布式计算能力的查询引擎。新产品的名字命名为 PALO，意为玩转 OLAP。随着 PALO1 的正式上线，除了迁移所有 Doris3 已有的的业务外，也成功支持了当时百度内部大部分的 OLAP 分析场景。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2015&lt;br/&gt;PALO 2，让架构再简单一点&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果说 PALO 1 是为了解决性能问题，那么 PALO 2 主要是为了在架构上进行优化。通过 PALO2 的工作，系统架构本身变得相当简洁，并且不需要任何依赖。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2017 and Future&lt;br/&gt;Apache Doris (incubating) ，是更广阔的世界&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Palo 于 2017 年正式在 GitHub 上开源，并且在 2018 年贡献给 Apache 社区，并将名字改为 Apache Doris(incubating)进行正式孵化。随着开源，Doris 已经在京东、美团、搜狐、小米等公司的生产环境中正式使用，也有越来越多的 Contributor 加入到 Doris 大家庭中。&lt;/p&gt;&lt;h2&gt;整体架构 - MPP架构&lt;/h2&gt;&lt;h3&gt;弹性MPP架构-极简架构&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGOAygsK4821KIXL12cayTsdpAq4dvC15bgb06pfKDuWZ1JFCrIiaaGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;FE前端节点-主要负责元数据的管理、查询调度,解析sql的执行计划给BE，&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;BE-数据的存储和执行的引擎，这里存储和计算还是在一起的；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;FE:leader 、follower(参与选举)，水平扩容&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对外提供了mysql兼容的协议;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGeCypL2AxdSPaf8KKOaBPZgBq50xpTLTJEHeCwUH1Wo9Leec4ezNsjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.49907407407407406&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGEictxHrM3Ls7zeOOpQfA4dL2whBFVHns3rPdVJkABJibAp0leEGJoXVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5166666666666667&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4&gt;sql查询进入doris的过程:&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;解析成逻辑执行计划-A|B两个表的scan -&amp;gt; Join -&amp;gt;聚合(group by K1 sum(V1) )，聚合操作 -&amp;gt; 最后再sort by sum(V1)排序 ；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;MPP架构就是可以把执行计划转换成物理层面的，&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;假设有3个节点，会把执行计划类似fregment(有节点的组合)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;scanB扫描B表的数据，可能通过一个brokercust、dataSink和exchange这样的节点会把fregment串联起来，每个fregment中会有不同的计算节点；比如数据经过广播跟A表join，之后进行聚合操作；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个MPP就是支持两层的聚合，每个节点做完聚合操作后最后汇总到一个节点再做一次；在doris中支持在中间做一次shuffle，shuffle完成之后在上层再做一次聚合，这样子就不会有大单点的计算瓶颈。再推给上层去做排序。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据不同的机器每个fregment会拆成instent它执行的子单元，就可以充分发挥MPP的多基多合的能力，根据机器数量和设置的并行度，充分利用资源。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;智能CBO查询优化器&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGhEt3jEWsyxHPTic261X2fQb1YKeg9KibVCEm36ZfDibftHzCq69aEc5FA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.37777777777777777&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;dorisDB跟开源的apache doris有几个改造点:&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在FE这边的改造:&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;plan会根据cpu的成本预估，加入更多的统计信息(列的基数、直方图等等)，能够更准确的预估表的执行计划。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;两个表join时，使用brokercast join还是shuffle join还是其他join的一些方式，左右表过滤出来应该有多少行数等，哪个表作为左右表等；聚合函数用1层还是2层等等&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;极速向量化引擎&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGYicVtb4IdbEXpV3gdgrud3Pj2VGDFrhZALQ57xRCsLdovZNWI2ucaIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.43148148148148147&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4&gt;高效的列式存储&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGGEDdze1jd3gKF9JYeYgicFJicYHpTMnfDZaf1YvfKZzD3znZobdNQRuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.43425925925925923&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4&gt;现代化物化视图加速&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGobH1ZoMttFiaJOxpmf0Lia9UzsklLibk11Nu4ghia4ySOHpbicByEOmchNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.45740740740740743&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4&gt;实时构建DWS数据&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGq1y7bzfWJKv6vTdfF51OcgH04wBLhEueSLib1PQcuS5UVxk0kRfOExw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5092592592592593&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;实时数据分析报表的场景:&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;flume-kafka-doris(进行实时数据的聚合)-BI工具的展示&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Join优化 — colocated Join&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGFwRzhY0cSm2R6mGuicGc3BP1yXN4FZVefedeawPtF6AOzRoe3LibIAeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.462037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;doris多表关联有一个明显的优势:&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;原来的建模倾向于宽表，一旦维度的变更就会导致数据的重新刷新，灵活性降低。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;现场关联，秒级查询返回；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;除了高效的shuffle join外还会有一个colocate join 降低特别大的两个表的数据传输量。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;colocate join 在建表时就数据的分布方式，相同的数据可以哈希到一个桶中，所有的数据都可以在本地进行关联操作，最后再在上层做一次数据的聚合。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;极简运维，弹性伸缩&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGnicCXgZJ7FQRa1NSEcCqkT5cS6GCvsTx9RhCj8qUxJWuQk1pdUKEicdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.4398148148148148&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h2&gt;设计原理&lt;/h2&gt;&lt;h3&gt;海量分布式存储系统Doris原理概述&lt;/h3&gt;&lt;p&gt;Doris是一个海量分布式 KV 存储系统，其设计目标是支持中等规模高可用可伸缩的 KV 存储集群。Doris可以实现海量存储，线性伸缩、平滑扩容，自动容错、故障转移，高并发，且运维成本低。部署规模，建议部署4-100+台服务器。&lt;/p&gt;&lt;h4&gt;逻辑架构&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGVXXnXeFuibwOXWX1vwkd0qsny7rLrnDnSMiayLFjdI7YhqtWhWjiaSgxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.40555555555555556&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;Doris采用两层架构，Client 和 DataServer+Store。&lt;br/&gt;有四个核心组件，Client、DataServer、Store、Administration。&lt;br/&gt;应用程序通过Client SDK进行Doris的访问，每台服务器上部署一个Data Sever做服务器的管理，每台服务器上有自己的存储Store，整个集群的数据存储，每台机器独立部署。数据通过路由选择写入到不同的机器中。&lt;br/&gt;Administration为管理中心，提供配置、管理和监控。&lt;br/&gt;config指应用程序启动一个Data Server，在启动时要配置管理中心的ip地址，通关管理中心。管理中心会修改配置项感知到集群中加了新机器，对新机器管理，扩容等。待机器处于可用状态，将该机器的配置项通知给KV Client。从而KV Client进行新的路由选择。扩容、下线机器等的控制台界面通过Management管理。Monitor监控机器是否正常。&lt;/p&gt;&lt;h4&gt;KV Storage 概念模型&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGVVQl0oddbCA5e9POll9SzZnV9ySuiagkYMicVXXG8M66z9TePfgT8icQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.4777777777777778&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;client写数据，绑定产品的namespace（逻辑隔离），构成新key，路由到具体机器上读写。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGDzZkm5TDKzMicU6P3icYmIk7EDmLkvy5wI4I6M7FepUNiczvriax1zFnicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.38425925925925924&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;路由解析算法是设计的一个关键点，决定集群的管理方式，也决定了集群扩容的复杂性和难度。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Doris的算法类似redis，有桶的概念，key映射到1w个虚拟节点，虚拟节点在映射到物理节点。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;由于Doris设计时，用于4-100+规模的集群。因此，Doris分了1w个虚拟节点，当服务器超过100会导致负载不均衡，1000会更差，相当于每一个集群上有10个虚拟节点，虚拟节点会有10%的影响。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;扩容时，需要调节虚拟节点指向新的位置。具体过程为，暴利轮询新节点添加后，一个服务器上应该承载的虚拟节点个数，将超出的虚拟节点迁移到新机器即可。如上图左图有2个物理节点，扩容后，有3个物理节点，变为右图。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;基本访问架构&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGFTubuS6n0cgolATzh0Ah4ODCwOEHnS55Bh6xPXsUDdduwzLiacMyc3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5318725099601593&quot; data-w=&quot;1004&quot;/&gt;&lt;/p&gt;&lt;h4&gt;监控检测&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGosBwibPgZkF6EEozkEN3DCyUAzokMb8BgGO0W1XnrKXj3aWOAIGibgRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5203703703703704&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;集群管理的重要角色Config Server，有一个功能是负责发现故障服务器。&lt;br/&gt;发现故障的方式有2种：&lt;/p&gt;&lt;p&gt;通常心跳检测是慢的，几秒进行一次心跳检测。更多时候，是client Fail失败报告发现无效服务器，当写入失败时，Client会告诉Config Server。Config Server校验，也访问失败，则通知其他client。&lt;/p&gt;&lt;h3&gt;基本原理&lt;/h3&gt;&lt;h4&gt;读取数据流程&lt;/h4&gt;&lt;p&gt;用户可使用MySQL客户端连接FE，执行SQL查询， 获得结果。&lt;/p&gt;&lt;p&gt;查询流程如下：&lt;/p&gt;&lt;p&gt;① MySQL客户端执行DQL SQL命令。&lt;br/&gt;② FE解析, 分析, 改写, 优化和规划, 生成分布式执行计划。&lt;br/&gt;③ 分布式执行计划由 若干个可在单台be上执行的plan fragment构成， FE执行exec_plan_fragment, 将plan fragment分发给BE，指定其中一台BE为coordinator。&lt;br/&gt;④ BE执行本地计算, 比如扫描数据。&lt;br/&gt;⑤ 其他BE调用transimit_data将中间结果发送给BE coordinator节点汇总为最终结果。&lt;br/&gt;⑥ FE调用fetch_data获取最终结果。&lt;br/&gt;⑦ FE将最终结果发送给MySQL client。&lt;/p&gt;&lt;p&gt;执行计划在BE上的实际执行过程比较复杂, 采用向量化执行方式，比如一个算子产生4096个结果，输出到下一个算子参与计算，而非batch方式或者one-tuple-at-a-time。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGbGZoibuAarUbRKWRCYsoVWScseMrqQVagl2OJHIGgaRcgQa28wRPH2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6555555555555556&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4&gt;导入数据流程&lt;/h4&gt;&lt;p&gt;用户创建表之后, 导入数据填充表.&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;支持导入数据源有: 本地文件, HDFS, Kafka和S3.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持导入方式有: 批量导入, 流式导入, 实时导入.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持的数据格式有: CSV, Parquet, ORC等.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;导入发起方式有: 用RESTful接口, 执行SQL命令.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;数据导入的流程如下:&lt;/p&gt;&lt;p&gt;① 用户选择一台BE作为协调者, 发起数据导入请求, 传入数据格式, 数据源和标识此次数据导入的label, label用于避免数据重复导入. 用户也可以向FE发起请求, FE会把请求重定向给BE.&lt;br/&gt;② BE收到请求后, 向FE master节点上报, 执行loadTxnBegin, 创建全局事务。 因为导入过程中, 需要同时更新base表和物化索引的多个bucket, 为了保证数据导入的一致性, 用事务控制本次导入的原子性.&lt;br/&gt;③ BE创建事务成功后, 执行streamLoadPut调用, 从FE获得本次数据导入的计划. 数据导入, 可以看成是将数据分发到所涉及的全部的tablet副本上, BE从FE获取的导入计划包含数据的schema信息和tablet副本信息.&lt;br/&gt;④ BE从数据源拉取数据, 根据base表和物化索引表的schema信息, 构造内部数据格式.&lt;br/&gt;⑤ BE根据分区分桶的规则和副本位置信息, 将发往同一个BE的数据, 批量打包, 发送给BE, BE收到数据后, 将数据写入到对应的tablet副本中.&lt;br/&gt;⑥ 当BE coordinator节点完成此次数据导入, 向FE master节点执行loadTxnCommit, 提交全局事务, 发送本次数据导入的 执行情况, FE master确认所有涉及的tablet的多数副本都成功完成, 则发布本次数据导入使数据对外可见, 否则, 导入失败, 数据不可见, 后台负责清理掉不一致的数据.&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGmOZewJKFMj3LjaCxWicU2GIoKaj5F0qMbpGmD6ADxibnIicNfEFqW8Fdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5527777777777778&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4&gt;修改元数据流程&lt;/h4&gt;&lt;p&gt;更改元数据的操作有: 创建数据库, 创建表, 创建物化视图, 修改schema等等. 这样的操作需要:&lt;/p&gt;&lt;p&gt;元数据的更新操作流程如下:&lt;/p&gt;&lt;p&gt;① 用户使用MySQL client执行SQL的DDL命令, 向FE的master节点发起请求; 比如: 创建表.&lt;br/&gt;② FE检查请求合法性, 然后向BE发起同步命令, 使操作在BE上生效; 比如: FE确定表的列类型是否合法, 计算tablet的副本的放置位置, 向BE发起请求, 创建tablet副本.&lt;br/&gt;③ BE执行成功, 则修改内存的Catalog. 比如: 将table, partition, index, tablet的副本信息保存在Catalog中.&lt;br/&gt;④ FE追加本次操作到EditLog并且持久化.&lt;br/&gt;⑤ FE通过复制协议将EditLog的新增操作项同步到FE的follower节点.&lt;br/&gt;⑥ FE的follower节点收到新追加的操作项后, 在自己的Catalog上按顺序播放, 使得自己状态追上FE master节点.&lt;/p&gt;&lt;p&gt;上述执行环节出现失败, 则本次元数据修改失败.&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGyoQOBsQia5m29tC1rV5V5ib2OdLJXenlibKbobk3YdefZBuM94LKpicstA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.8314814814814815&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h3&gt;表设计详解&lt;/h3&gt;&lt;h4&gt;数据存储基本原理&lt;/h4&gt;&lt;p&gt;查找维度列的前缀的查找过程为: 先查找shortkey index, 获得逻辑块的起始行号, 查找维度列的行号索引, 获得目标列的数据块, 读取数据块, 然后解压解码, 从数据块中找到维度列前缀对应的数据项.&lt;/p&gt;&lt;h4&gt;加速数据处理&lt;/h4&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.32314814814814813&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGibzwXa8icKaa5YSd0fpibAYeTVTaS9MKVfJFInV4a7zucQqayia1dbbRLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;DorisDB的表和关系型数据相同, 由行和列构成. 每行数据对应用户一条记录, 每列数据有相同数据类型. 所有数据行的列数相同, 可以动态增删列. DorisDB中, 一张表的列可以分为维度列(也成为key列)和指标列(value列), 维度列用于分组和排序, 指标列可通过聚合函数SUM, COUNT, MIN, MAX, REPLACE, HLL_UNION, BITMAP_UNION等累加起来. 因此, DorisDB的表也可以认为是多维的key到多维指标的映射.&lt;/p&gt;&lt;p&gt;在DorisDB中, 表中数据按列存储, 物理上, 一列数据会经过分块编码压缩等操作, 然后持久化于非易失设备, 但在逻辑上, 一列数据可以看成由相同类型的元素构成的数组. 一行数据的所有列在各自的列数组中保持对齐, 即拥有相同的数组下标, 该下标称之为序号或者行号. 该序号是隐式, 不需要存储的, 表中的所有行按照维度列, 做多重排序, 排序后的位置就是该行的行号.&lt;/p&gt;&lt;p&gt;查询时, 如果指定了维度列的等值条件或者范围条件, 并且这些条件中维度列可构成表维度列的前缀, 则可以利用数据的有序性, 使用range-scan快速锁定目标行.&lt;/p&gt;&lt;p&gt;当范围查找时, 如何快速地找到起始的目标行呢? 答案是shortkey index. 如下图所示: shortkey索引为稀疏索引,&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGtAITLxb3FVQaIDF2ibMEicJ6NzK1u7NYo2G9MOFuc6lF8XqlQykqUvjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5157407407407407&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4&gt;表模型介绍&lt;/h4&gt;&lt;p&gt;为了描述方便, 我们借鉴关系模式中的主键概念, 称DorisDB表的维度列的取值构成数据表的排序键, DorisDB的排序键对比传统的主键具有:&lt;/p&gt;&lt;p&gt;对于摄入(ingest)的主键重复的多行数据, 填充于(populate)数据表中时, 按照三种处理方式划分:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;明细模型: 表中存在主键重复的数据行, 和摄入数据行一一对应, 用户可以召回所摄入的全部历史数据.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;聚合模型: 表中不存在主键重复的数据行, 摄入的主键重复的数据行合并为一行, 这些数据行的指标列通过聚合函数合并, 用户可以召回所摄入的全部历史数据的累积结果, 但无法召回全部历史数据.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;更新模型: 聚合模型的特殊情形, 主键满足唯一性约束, 最近摄入的数据行, 替换掉其他主键重复的数据行. 相当于在聚合模型中, 为数据表的指标列指定的聚合函数为REPLACE, REPLACE函数返回一组数据中的最新数据.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;需要注意:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;建表语句, 排序列的定义必须出现在指标列定义之前.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;排序列在建表语句中的出现次序为数据行的多重排序的次序.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;排序键的稀疏索引(shortkey index)会选择排序键的若干前缀列.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;明细模型&lt;/h4&gt;&lt;p&gt;DorisDB建表的默认模型是明细模型。&lt;/p&gt;&lt;p&gt;一般用明细模型来处理的场景有如下特点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;需要保留原始的数据（例如原始日志，原始操作记录等）来进行分析；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;查询方式灵活, 不局限于预先定义的分析方式, 传统的预聚合方式难以命中;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据更新不频繁。导入数据的来源一般为日志数据或者是时序数据, 以追加写为主要特点, 数据产生后就不会发生太多变化。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;聚合模型&lt;/h4&gt;&lt;p&gt;在数据分析领域，有很多需要对数据进行统计和汇总操作的场景。比如:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;分析网站或APP访问流量，统计用户的访问总时长、访问总次数;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;广告厂商为广告主提供的广告点击总量、展示总量、消费统计等;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分析电商的全年的交易数据, 获得某指定季度或者月份的, 各人口分类(geographic)的爆款商品.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;适合采用聚合模型来分析的场景具有如下特点：&lt;/p&gt;&lt;h4&gt;更新模型&lt;/h4&gt;&lt;p&gt;有些分析场景之下，数据会更新, DorisDB采用更新模型来满足这种需求。比如在电商场景中，定单的状态经常会发生变化，每天的订单更新量可突破上亿。在这种量级的更新场景下进行实时数据分析，如果在明细模型下通过delete+insert的方式，是无法满足频繁更新需求的; 因此, 用户需要使用更新模型来满足数据分析需求。&lt;/p&gt;&lt;p&gt;以下是一些适合更新模型的场景特点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;已经写入的数据有大量的更新需求；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;需要进行实时数据分析。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;数据分布&lt;/h3&gt;&lt;h4&gt;数据分布方式&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;数据分布：数据分布是将数据划分为子集, 按一定规则, 均衡地分布在不同节点上，以期最大限度地利用集群的并发性能。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;短查询：short-scan query，指扫描数据量不大，单机就能完成扫描的查询。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;长查询：long-scan query，指扫描数据量大，多机并行扫描能显著提升性能的查询。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;常见的四种数据分布方式有：(a) Round-Robin、(b) Range、(c) List和(d) Hash (DeWitt and Gray, 1992)。如下图所示:&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CG9q7A7Sk4yJZNsF8uWM7KSGCwxND4L2Kh1AfBl7WL3tU3Rtq7Pp5Qqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.9398148148148148&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Round-Robin : 以轮转的方式把数据逐个放置在相邻节点上。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Range : 按区间进行数据分布，图中区间[1-3]，[4-6]分别对应不同Range。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;List : 直接基于离散的各个取值做数据分布，性别、省份等数据就满足这种离散的特性。每个离散值会映射到一个节点上，不同的多个取值可能也会映射到相同节点上。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Hash : 按哈希函数把数据映射到不同节点上。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;如何选择排序键&lt;/h3&gt;&lt;h4&gt;排序键基本原理&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;数据倾斜：业务方如果确定数据有很大程度的倾斜，那么建议采用多列组合的方式进行数据分桶，而不是只单独采用倾斜度大的列做分桶。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;高并发：分区和分桶应该尽量覆盖查询语句所带的条件，这样可以有效减少扫描数据，提高并发。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;高吞吐：尽量把数据打散，让集群以更高的并发扫描数据，完成相应计算。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;dynamic_partition.enable : 是否开启动态分区特性，可指定为 TRUE 或 FALSE。如果不填写，默认为 TRUE。&lt;/p&gt;&lt;p&gt;dynamic_partition.time_unit : 动态分区调度的粒度，可指定为 DAY/WEEK/MONTH。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;指定为 DAY 时，分区名后缀需为yyyyMMdd，例如20200325。图1 就是一个按天分区的例子，分区名的后缀满足yyyyMMdd。 PARTITION p20200321 VALUES LESS THAN (&quot;2020-03-22&quot;), PARTITION p20200322 VALUES LESS THAN (&quot;2020-03-23&quot;), PARTITION p20200323 VALUES LESS THAN (&quot;2020-03-24&quot;), PARTITION p20200324 VALUES LESS THAN (&quot;2020-03-25&quot;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;指定为 WEEK 时，分区名后缀需为yyyy_ww，例如2020_13代表2020年第13周。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;指定为 MONTH 时，动态创建的分区名后缀格式为 yyyyMM，例如 202003。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;dynamic_partition.start: 动态分区的开始时间。以当天为基准，超过该时间范围的分区将会被删除。如果不填写，则默认为Integer.MIN_VALUE 即 -2147483648。&lt;/p&gt;&lt;p&gt;dynamic_partition.end: 动态分区的结束时间。 以当天为基准，会提前创建N个单位的分区范围。&lt;/p&gt;&lt;p&gt;dynamic_partition.prefix : 动态创建的分区名前缀。&lt;/p&gt;&lt;p&gt;dynamic_partition.buckets : 动态创建的分区所对应的分桶数量。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;指定为 DAY 时，分区名后缀需为yyyyMMdd，例如20200325。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;指定为 WEEK 时，分区名后缀需为yyyy_ww，例如 2020_13, 代表2020年第13周。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;指定为 MONTH 时，动态创建的分区名后缀格式为 yyyyMM，例如 202003。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;DorisDB中为加速查询，在内部组织并存储数据时，会把表中数据按照指定的列进行排序，这部分用于排序的列（可以是一个或多个列），可以称之为Sort Key。明细模型中Sort Key就是指定的用于排序的列（即 DUPLICATE KEY 指定的列），聚合模型中Sort Key列就是用于聚合的列（即 AGGREGATE KEY 指定的列），更新模型中Sort Key就是指定的满足唯一性约束的列（即 UNIQUE KEY 指定的列）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;h2&gt;核心功能&lt;/h2&gt;&lt;h3&gt;存储结构设计解析&lt;/h3&gt;&lt;p&gt;Doris是基于MPP架构的交互式SQL数据仓库，主要用于解决近实时的报表和多维分析。Doris高效的导入、查询离不开其存储结构精巧的设计。&lt;/p&gt;&lt;h4&gt;设计目标&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;批量导入，少量更新&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;绝大多数的读请求&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;宽表场景，读取大量行，少量列&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;非事务场景&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;良好的扩展性&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;储存文件格式&lt;/h4&gt;&lt;p&gt;1、存储目录结构&lt;/p&gt;&lt;p&gt;存储层对存储数据的管理通过storage_root_path路径进行配置，路径可以是多个。存储目录下一层按照分桶进行组织，分桶目录下存放具体的tablet，按照tablet_id命名子目录。&lt;/p&gt;&lt;p&gt;Segment文件存放在tablet_id目录下按SchemaHash管理。Segment文件可以有多个，一般按照大小进行分割，默认为256MB。其中，Segment v2文件命名规则为：${rowset_id}_${segment_id}.dat。&lt;/p&gt;&lt;p&gt;2、Segment v2文件结构&lt;/p&gt;&lt;p&gt;Segment整体的文件格式分为数据区域，索引区域和footer三个部分&lt;/p&gt;&lt;p&gt;SegmentFooterPB: 定义文件的元数据信息&lt;br/&gt;4个字节的FooterPB内容的checksum&lt;br/&gt;4个字节的FileFooterPB消息长度，用于读取FileFooterPB&lt;br/&gt;8个字节的MAGIC CODE，之所以在末位存储，是方便不同的场景进行文件类型的识别&lt;/p&gt;&lt;h4&gt;Footer信息&lt;/h4&gt;&lt;p&gt;Footer信息段在文件的尾部，存储了文件的整体结构，包括数据域的位置，索引域的位置等信息，其中有SegmentFooterPB，CheckSum，Length，MAGIC CODE 4个部分。&lt;/p&gt;&lt;p&gt;SegmentFooterPB数据结构如下：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CG7DvW7fb265PIAacXUVcRlGA6cibrHHjLjPApLiblo0w6oGs3xhgmUmLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6601851851851852&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;SegmentFooterPB采用了PB格式进行存储，主要包含了列的meta信息、索引的meta信息，Segment的short key索引信息、总行数。&lt;/p&gt;&lt;p&gt;1、列的meta信息&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;ColumnId：当前列在schema中的序号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;UniqueId：全局唯一的id&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Type：列的类型信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Length：列的长度信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Encoding：编码格式&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Compression：压缩格式&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Dict PagePointer：字典信息&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;2、列索引的meta信息&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;OrdinalIndex：存放列的稀疏索引meta信息。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ZoneMapIndex：存放ZoneMap索引的meta信息，内容包括了最大值、最小值、是否有空值、是否没有非空值。SegmentZoneMap存放了全局的ZoneMap信息，PageZoneMaps则存放了每个页面的统计信息。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;BitMapIndex：存放BitMap索引的meta信息，内容包括了BitMap类型，字典数据BitMap数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;BloomFilterIndex：存放了BloomFilter索引信息。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Ordinal Index (一级索引)&lt;/h4&gt;&lt;p&gt;Ordinal Index索引提供了通过行号来查找Column Data Page数据页的物理地址。Ordinal Index能够将按列存储数据按行对齐，可以理解为一级索引。其他索引查找数据时，都要通过Ordinal Index查找数据Page的位置。因此，这里先介绍Ordinal Index索引。&lt;/p&gt;&lt;p&gt;在一个segment中，数据始终按照key（AGGREGATE KEY、UNIQ KEY 和 DUPLICATE KEY）排序顺序进行存储，即key的排序决定了数据存储的物理结构。确定了列数据的物理结构顺序，在写入数据时，Column Data Page是由Ordinal index进行管理，Ordinal index记录了每个Column Data Page的位置offset、大小size和第一个数据项行号信息，即Ordinal。这样每个列具有按行信息进行快速扫描的能力。&lt;/p&gt;&lt;h4&gt;列数据存储&lt;/h4&gt;&lt;p&gt;Column的data数据按照Page为单位分块存储，每个Page大小一般为64*1024个字节。&lt;/p&gt;&lt;p&gt;Page在存储的位置和大小由ordinal index管理。&lt;/p&gt;&lt;p&gt;1、data page存储结构&lt;/p&gt;&lt;p&gt;DataPage主要为Data部分、Page Footer两个部分。&lt;br/&gt;Data部分存放了当前Page的列的数据。当允许存在Null值时，对空值单独存放了Null值的Bitmap，由RLE格式编码通过bool类型记录Null值的行号。&lt;br/&gt;Page Footer包含了Page类型Type、UncompressedSize未压缩时的数据大小、FirstOrdinal当前Page第一行的RowId、NumValues为当前Page的行数、NullMapSize对应了NullBitmap的大小。&lt;/p&gt;&lt;p&gt;2、数据压缩&lt;/p&gt;&lt;p&gt;针对不同的字段类型采用了不同的编码。默认情况下，针对不同类型采用的对应关系如下：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGmqIeocMHD5sKUuwmuxBdVnsncLdicv9qiaCjHZlqDaBQR2yZB5I5qChA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.33661971830985915&quot; data-w=&quot;710&quot;/&gt;&lt;/p&gt;&lt;p&gt;默认采用LZ4F格式对数据进行压缩。&lt;/p&gt;&lt;h4&gt;存储结构&lt;/h4&gt;&lt;p&gt;1、存储结构&lt;/p&gt;&lt;p&gt;Short Key Index前缀索引，是在key（AGGREGATE KEY、UNIQ KEY 和 DUPLICATE KEY）排序的基础上，实现的一种根据给定前缀列，快速查询数据的索引方式。这里Short Key Index索引也采用了稀疏索引结构，在数据写入过程中，每隔一定行数，会生成一个索引项。这个行数为索引粒度默认为1024行，可配置。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGteXtGTBHgoYiaacNzEq38r3pILzgia2q0ztJgtIfa3icKOFeAialicI22kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6092592592592593&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;其中，KeyBytes中存放了索引项数据，OffsetBytes存放了索引项在KeyBytes中的偏移。&lt;/p&gt;&lt;p&gt;2、索引生成规则&lt;/p&gt;&lt;p&gt;Short Key Index采用了前36 个字节，作为这行数据的前缀索引。当遇到 VARCHAR 类型时，前缀索引会直接截断。&lt;/p&gt;&lt;h4&gt;ZoneMap Index索引&lt;/h4&gt;&lt;p&gt;ZoneMap索引存储了Segment和每个列对应每个Page的统计信息。这些统计信息可以帮助在查询时提速，减少扫描数据量，统计信息包括了Min最大值、Max最小值、HashNull空值、HasNotNull不全为空的信息。&lt;/p&gt;&lt;h4&gt;BloomFilter&lt;/h4&gt;&lt;p&gt;当一些字段不能利用Short Key Index并且字段存在区分度比较大时，Doris提供了BloomFilter索引。&lt;/p&gt;&lt;h4&gt;Bitmap Index索引&lt;/h4&gt;&lt;p&gt;Doris还提供了BitmapIndex用来加速数据的查询。&lt;/p&gt;&lt;h3&gt;写入流程、删除流程分析&lt;/h3&gt;&lt;p&gt;Doris 针对不同场景支持了多种形式的数据写入方式，其中包括了从其他存储源导入 Broker Load、http 同步数据导入 Stream Load、例行的 Routine Load 导入和 Insert Into 写入等。同时导入流程会涉及 FE 模块（主要负责导入规划生成和导入任务的调度工作）、BE 模块（主要负责数据的 ETL 和存储）、Broker 模块（提供 Doris 读取远端存储系统中文件的能力）。其中 Broker 模块仅在 Broker Load 类型的导入中应用。&lt;/p&gt;&lt;p&gt;下面以 Stream Load 写入为例子，描述了 Doris 的整体的数据写入流程如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGND57ibicPicufA9icsVHtFHMG8uanvhtX4jG8F14EUxVoM3Z7fPU2K8jSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7305263157894737&quot; data-w=&quot;950&quot;/&gt;&lt;/p&gt;&lt;p&gt;流程描述如下：&lt;/p&gt;&lt;p&gt;1、FE 接收用户的写入请求，并随机选出 BE 作为 Coordinator BE。将用户的请求重定向到这个 BE 上。&lt;br/&gt;2、Coordinator BE 负责接收用户的数据写入请求，同时请求 FE 生成执行计划并对调度、管理导入任务 LoadJob 和导入事务。&lt;br/&gt;3、Coordinator BE 调度执行导入计划，执行对数据校验、清理之后。&lt;br/&gt;4、数据写入到 BE 的存储层中。在这个过程中会先写入到内存中，写满一定数据后按照存储层的数据格式写入到物理磁盘上。&lt;/p&gt;&lt;h4&gt;数据分发流程&lt;/h4&gt;&lt;p&gt;数据在经过清洗过滤后，会通过 Open/AddBatch 请求分批量的将数据发送给存储层的 BE 节点上。在一个 BE 上支持多个 LoadJob 任务同时并发写入执行。LoadChannelMgr 负责管理了这些任务，并对数据进行分发。&lt;/p&gt;&lt;p&gt;数据分发和写入过程如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGwSLjfPHNOFlXcKpGsL6xtDm4fmVrXKSlXXic8NxhvOGN21kYyLCLVcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.612037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;每次导入任务 LoadJob 会建立一个 LoadChannel 来执行，LoadChannel 维护了一次导入的通道，LoadChannel 可以将数据分批量写入操作直到导入完成。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;LoadChannel 会创建一个 TabletsChannel 执行具体的导入操作。一个 TabletsChannel 对应多个 Tablet。一次数据批量写入操作中，TabletsChannel 将数据分发给对应 Tablet，由 DeltaWriter 将数据写入到 Tablet，便开始了真正的写入操作。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;DeltaWriter 与 Memtable&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;DeltaWriter 主要负责不断接收新写入的批量数据，完成单个 Tablet 的数据写入。由于新增的数据可以是增量 Delta 部分，因此叫做 DeltaWriter。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;DeltaWriter 数据写入采用了类 LSM 树的结构，将数据先写到 Memtable 中，当 Memtable 数据写满后，会异步 flush 生成一个 Segment 进行持久化，同时生成一个新的 Memtable 继续接收新增数据导入，这个 flush 操作由 MemtableFlushExecutor 执行器完成。&lt;/p&gt;&lt;p&gt;Memtable 中采用了跳表的结构对数据进行排序，排序规则使用了按照 schema 的 key 的顺序依次对字段进行比较。这样保证了写入的每一个写入 Segment 中的数据是有序的。如果当前模型为非 DUP 模型（AGG 模型和 UNIQUE 模型）时，还会对相同 key 的数据进行聚合。&lt;/p&gt;&lt;h4&gt;物理写入&lt;/h4&gt;&lt;p&gt;1、RowsetWriter 各个模块设计&lt;/p&gt;&lt;p&gt;在物理存储层面的写入，由 RowsetWriter 完成。RowsetWriter 中又分为 SegmentWriter、ColumnWriter、PageBuilder、IndexBuilder 等子模块。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;其中 RowsetWriter 从整体上完成一次导入 LoadJob 任务的写入，一次导入 LoadJob 任务会生成一个 Rowset，一个 Rowset 表示一次导入成功生效的数据版本。实现上由 RowsetWriter 负责完成 Rowset 的写入。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;SegmentWriter 负责实现 Segment 的写入。一个 Rowset 可以由多个 Segment 文件组成。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ColumnWriter 被包含在 SegmentWriter 中，Segment 的文件是完全的列存储结构，Segment 中包含了各个列和相关的索引数据，每个列的写入由 ColumnWriter 负责写入。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在文件存储格式中，数据和索引都是按 Page 进行组织，ColumnWriter 中又包含了生成数据 Page 的 PageBuilder 和生成索引 Page 的 IndexBuilder 来完成 Page 的写入。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;最后，FileWritableBlock 来负责具体的文件的读写。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;2、RowsetWriter 写入流程&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGPkBPowB4QXkbdDrVxd2lWR250rcgsOEMRuFxicwqSo3oibUaThbRKdDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6972222222222222&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;物理写入流程的详细描述：&lt;/p&gt;&lt;p&gt;1.当一个 Memtable 写满时(默认为 100M)，将 Memtable 的数据会 flush 到磁盘上，这时 Memtable 内的数据是按 key 有序的。然后逐行写入到 RowsetWriter 中。&lt;br/&gt;2.RowsetWriter 将数据同样逐行写入到 SegmentWriter 中，RowsetWriter 会维护当前正在写入的 SegmentWriter 以及要写入的文件块列表。每完成写入一个 Segment 会增加一个文件块对应。&lt;br/&gt;3.SegmentWriter 将数据按行写入到各个 ColumnWriter 的中，同时写入 ShortKeyIndexBuilder。ShortKeyIndexBuilder 主要负责生成 ShortKeyIndex 的索引 Page 页。具体的 ShortKeyIndex 索引格式可以参见《Doris 存储层设计介绍 1——存储结构设计解析》文档。&lt;br/&gt;4.ColumnWriter 将数据分别写入 PageBuilder 和各个 IndexBuilder，PageBuilder 用来生成 ColumnData 数据的 PageBuilder，各个 IndexBuilder 包括了（OrdinalIndexBuilder 生成 OrdinalIndex 行号稀疏索引的 Page 格式、ZoneMapIndexBuilder 生成 ZoneMapIndex 索引的 Page 格式、BitMapIndexBuilder 生成 BitMapIndex 索引的 Page 格式、BloomFilterIndexBuilder 生成 BloomFilterIndex 索引的 Page 格式）。具体参考 Doris 存储文件格式解析。&lt;br/&gt;5.添加完数据后，RowsetWriter 执行 flush 操作。&lt;br/&gt;6.SegmentWriter 的 flush 操作，将数据和索引写入到磁盘。其中对磁盘的读写由 FileWritableBlock 完成。&lt;br/&gt;7.ColumnWriter 将各自数据、索引生成的 Page 顺序写入到文件中。&lt;br/&gt;8.SegmentWriter 生成 SegmentFooter 信息，SegmentFooter 记录了 Segment 文件的原数据信息。完成写入操作后，RowsetWriter 会再开启新的 SegmentWriter，将下一个 Memtable 写入新的 Segment，直到导入完成。&lt;/p&gt;&lt;h4&gt;Rowset 发布&lt;/h4&gt;&lt;p&gt;整个发布过程如下：&lt;/p&gt;&lt;p&gt;1.DeltaWriter 统计当前 RowsetMeta 元数据信息，包括行数、字节数、时间、Segment 数量。&lt;br/&gt;2.保存到 RowsetMeta 中，向 FE 提交导入事务。当前导入事务由 FE 开启，用来保证一次导入在各个 BE 节点的数据的同时生效。&lt;br/&gt;3.在 FE 协调好之后，由 FE 统一下发 Publish 任务使导入的 Rowset 版本生效。任务中指定了发布的生效 version 版本信息。之后 BE 存储层才会将这个版本的 Rowset 设置为可见。&lt;br/&gt;4.Rowset 加入到 BE 存储层的 Tablet 进行管理。&lt;/p&gt;&lt;h4&gt;删除流程&lt;/h4&gt;&lt;p&gt;目前 Delete 有两种实现，一种普通的删除类型为 DELETE，一种为 LOAD_DELETE。&lt;/p&gt;&lt;h4&gt;DELETE 执行流程&lt;/h4&gt;&lt;p&gt;DELETE 的支持一般的删除操作，实现较为简单，DELETE 模式下没有对数据进行实际删除操作，而是对数据删除条件进行了记录。存储在 Meta 信息中。当执行 Base Compaction 时删除条件会一起被合入到 Base 版本中。Base 版本为 Tablet 从[0-x]的第一个 Rowset 数据版本。具体流程如下：&lt;/p&gt;&lt;p&gt;1.删除时由 FE 直接下发删除命令和删除条件。&lt;br/&gt;2.BE 在本地启动一个 EngineBatchLoadTask 任务，生成新版本的 Rowset，并记录删除条件信息。这个删除记录的 Rowset 与写入过程的略有不同，该 Rowset 仅记录了删除条件信息，没有实际的数据。&lt;br/&gt;3.FE 同样发布生效版本。其中会将 Rowset 加入到 Tablet 中，保存 TabletMeta 信息。&lt;/p&gt;&lt;h4&gt;LOAD_DELETE 执行流程&lt;/h4&gt;&lt;p&gt;LOAD_DELETE 支持了在 UNIQUE KEY 模型下，实现了通过批量导入要删除的 key 对数据进行删除，能够支持大量数据删除能力。整体思路是在数据记录中加入删除状态标识，在 Compaction 流程中会对删除的 key 进行压缩。&lt;/p&gt;&lt;h3&gt;数据模型和物化视图&lt;/h3&gt;&lt;h4&gt;聚合模型&lt;/h4&gt;&lt;p&gt;聚合模型的特点就是将表中的列分为了 Key 和 Value 两种。 Key 就是数据的维度列，比如时间，地区等等。Value 则是数据的指标列，比如点击量，花费等。每个指标列还会有自己的聚合函数，包括 sum、min、max 和 bitmap_union 等。数据会根据维度列进行分组，并对指标列进行聚合。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CG6eeTltVZ6ibkw8IpNZGGGYricICD2s2jwclKnkbibbrsj1vYzkJHgxQYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;首先是导入数据 ，原始数据在导入过程中，会根据表结构中的 Key 进行分组，相同 Key 的 Value 会根据表中定义的 Aggregation Function 进行聚合。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGUVO49qNKk0B6CGgDEp0TNNtq7ibbaNNQwhLFGkSS2E61Uic12cznUsaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;由于 Doris 采用的是 MVCC 机制进行的并发控制，所以每一次新的导入都是一个新的版本。我们把这种版本称为 Singleton 。&lt;/p&gt;&lt;p&gt;不断的导入新的数据后，尽管同一批次的数据在导入过程中已经发生了聚合，但不同版本之间的数据依旧存在维度列相同但是指标列并没有被聚合的情况。这时候就需要通过 Compaction 机制进行二次聚合。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGhHuCic9jR3CRsUG5iaoMjClL2OdDyal1rJ0iapvKBm2HRlib42TKuSKiarA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5625&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Compaction&lt;/strong&gt; 的意思其实就是将不同版本的数据进行合并。它 分为两个阶段，第一个阶段是： 当 Singleton 的数据版本个数到达 Doris 设置的阈值时，就会触发 Cumulative 级别的 Compaction。 这个级别的 Compaction 会将一个区间段内的版本数据根据定义好的聚合函数进行再聚合。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGickZenugBe0IfeEu7KUZKa6Ly5GIYwLGYF2dgklBVztyHCp94zZAeog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5625&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;说完聚合模型，再介绍一种聚合模型上的 提升查询效率 的方式—— 构建 Rollup&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGWZzeFHmXDeNATSYhKXQvtGhichtk5SibzBOcqkAdMhMEFx8Fkl6nCbDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;Rollup 也就是上卷，是一种在多维分析中比较常用的操作——也就是从细粒度的数据向高层的聚合。&lt;/p&gt;&lt;p&gt;在 Doris 中，我们提供了在聚合模型上的构建 Rollup 功能，将数据根据更少的维度进行预聚合。将本身在用户查询时才会进行聚合计算的数据预先计算好，并存储在 Doris 中，从而达到提升用户粗粒度上的查询效率。&lt;/p&gt;&lt;p&gt;Rollup 还有一点好处在于，由于 Doris 具有在原始数据上实时计算的能力，因此不需要对所有维度的每个组合都创建 Rollup。尤其是在维度很多的情况下，可以取得一个存储空间和查询效率之间的平衡。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGJmcoWTLHKic7bsgFC0ib3C7ytFsK05Emv8OlMdvM8MXv7rnUUN5D7xRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5625&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;在创建 Rollup 的时候首先你需要有一个聚合模型的 Base 表，然后就可以取部分维度创建一个 Rollup 表。&lt;/p&gt;&lt;p&gt;聚合模型的优点就在于：划分维护和指标列后，数据本身已经进行过预聚合，对于分析型查询效率提升明显。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;但是聚合模型在某些用户场景下并不适用：&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;很多业务并没有聚合的需求，就是要存储原始的用户行为日志。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一些业务在初期还不能确认哪些是维度列，哪些是指标列&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;聚合模型本身更难理解，对新用户体验不好，比如一些查询结果和用户预期的不一致。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;基于以上问题，我们增加了对明细数据模型的支持。&lt;/p&gt;&lt;h4&gt;明细模型&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGkHssFFjqcNtCWlRiaEXa4SrVss6DibRVEVGrhboMqZRNRoPyjCxEnHbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5625&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;明细数据模型刚好和聚合模型相反，不区分维护和指标列，并不对导入的数据做任何聚合，每条原始数据都会保留在表中。&lt;/p&gt;&lt;p&gt;明细模型就像 Mysql 中的表一样，优势就在于你可以详细追溯每个用户行为或订单详情。但劣势也很明显，分析型的查询效率不高。&lt;/p&gt;&lt;h4&gt;Doris 的物化视图&lt;/h4&gt;&lt;p&gt;物化视图的出现主要是为了满足用户，既能对原始明细数据的任意维度分析，也能快速的对固定维度进行分析查询的需求。&lt;/p&gt;&lt;p&gt;首先，什么是物化视图？&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGQ9cG97RZwdiah86PXMrxKLQpxB0E4cD7kOPficXG526FtfUZDUL6f6oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;从定义上来说，就是包含了查询结果的数据库对象，可能是对远程数据的本地 Copy；也可能是一个表或多表 Join 后结果的行或列的子集；也可能是聚合后的结果。说白了，就是预先存储查询结果的一种数据库对象。&lt;/p&gt;&lt;p&gt;在 Doris 中的物化视图，就是查询结果预先存储起来的特殊的表。&lt;/p&gt;&lt;p&gt;它的优势在于：&lt;br/&gt;1.对于那些经常重复的使用相同的子查询结果的查询性能大幅提升&lt;br/&gt;2.Doris 自动更新物化视图的数据，保证 Base 表和物化视图表的数据一致性。无需额外的维护成本&lt;br/&gt;3.查询的时候也可以自动匹配最优的物化视图&lt;/p&gt;&lt;h4&gt;物化视图&lt;/h4&gt;&lt;p&gt;目前支持的聚合函数包括常用的 sum、min、max、count 以及 pv、uv， 留存率等计算时常用的去重算法 hll_union，和用于精确去重计算 count(distinct) 的算法 bitmap_union。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGfHN7vok3wKypWaXiczahsOZ1gKWq4sjBV08Fb5oQVWUaNPeic8COeAJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5625&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;使用物化视图功能后，由于物化视图实际上是损失了部分维度数据的。所以对表的 DML 类型操作会有一些限制。&lt;/p&gt;&lt;p&gt;使用物化视图功能后，由于物化视图实际上是损失了部分维度数据的。所以对表的 DML 类型操作会有一些限制。&lt;/p&gt;&lt;p&gt;对于物化视图和 Rollup 来说，他们的共同点都是 通过预聚合 的方式来提升查询效率。 实际上物化视图是 Rollup 的一个超集，在覆盖 Rollup 的工作同时，还支持更灵活的聚合方式。&lt;/p&gt;&lt;p&gt;因此，如果对数据的分析需求既 覆盖了明细查询也存在分析类查询 ，则可以先创建一个明细模型的表，并构建物化视图。&lt;/p&gt;&lt;h2&gt;Doris SQL 原理解析&lt;/h2&gt;&lt;p&gt;SQL解析在下文中指的是将一条sql语句经过一系列的解析最后生成一个完整的物理执行计划的过程。&lt;/p&gt;&lt;p&gt;这个过程包括以下四个步骤：词法分析，语法分析，生成逻辑计划，生成物理计划。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGUH79zZaj4icEzUW9j0lwyfgNLNVvvL5JKRJXTwElF9HlbFrNau7WgZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.412962962962963&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4&gt;设计目标&lt;/h4&gt;&lt;p&gt;Doris SQL解析架构的设计有以下目标：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;最大化计算的并行性&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;最小化数据的网络传输&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;最大化减少需要扫描的数据&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;总体架构&lt;/h4&gt;&lt;p&gt;Doris SQL解析具体包括了五个步骤：词法分析，语法分析，生成单机逻辑计划，生成分布式逻辑计划，生成物理执行计划。&lt;/p&gt;&lt;p&gt;具体代码实现上包含以下五个步骤：Parse, Analyze, SinglePlan, DistributedPlan, Schedule。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CG4WbtsVLMGnaZnySAmhPDT0JlibQr8TqnCqkWjffaiawKNuh6s6dibiaONg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.5574074074074074&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;下文侧重介绍查询SQL的解析。&lt;/p&gt;&lt;p&gt;下图展示了一个简单的查询SQL在Doris的解析实现。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGRsicQUDIib1mgrZxUZboUZ2dbt1L0rib0zDOpufrVZl7EKZO020m58BWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.2444444444444445&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4&gt;Parse阶段&lt;/h4&gt;&lt;p&gt;词法分析采用jflex技术，语法分析采用java cup parser技术，最后生成抽象语法树（Abstract Syntax Tree）AST，这些都是现有的、成熟的技术，在这里不进行详细介绍。&lt;/p&gt;&lt;p&gt;AST是一种树状结构，代表着一条SQL。不同类型的查询select, insert, show, set, alter table, create table等经过Parse阶段后生成不同的数据结构（SelectStmt, InsertStmt, ShowStmt, SetStmt, AlterStmt, AlterTableStmt, CreateTableStmt等），但他们都继承自Statement，并根据自己的语法规则进行一些特定的处理。例如：对于select类型的sql， Parse之后生成了SelectStmt结构。&lt;/p&gt;&lt;p&gt;SelectStmt结构包含了SelectList，FromClause，WhereClause，GroupByClause，SortInfo等结构。这些结构又包含了更基础的一些数据结构，如WhereClause包含了BetweenPredicate（between表达式）, BinaryPredicate（二元表达式）， CompoundPredicate（and or组合表达式）, InPredicate（in表达式）等。&lt;/p&gt;&lt;h4&gt;Analyze阶段&lt;/h4&gt;&lt;p&gt;抽象语法树是由StatementBase这个抽象类表示。这个抽象类包含一个最重要的成员函数analyze()，用来执行Analyze阶段要做的事。&lt;/p&gt;&lt;p&gt;不同类型的查询select, insert, show, set, alter table, create table等经过Parse阶段后生成不同的数据结构（SelectStmt, InsertStmt, ShowStmt, SetStmt, AlterStmt, AlterTableStmt, CreateTableStmt等），这些数据结构继承自StatementBase，并实现analyze()函数，对特定类型的SQL进行特定的Analyze。&lt;/p&gt;&lt;p&gt;例如：select类型的查询，会转成对select sql的子语句SelectList, FromClause, GroupByClause, HavingClause, WhereClause, SortInfo等的analyze()。然后这些子语句再各自对自己的子结构进行进一步的analyze()，通过层层迭代，把各种类型的sql的各种情景都分析完毕。例如：WhereClause进一步分析其包含的BetweenPredicate（between表达式）, BinaryPredicate（二元表达式）， CompoundPredicate（and or组合表达式）, InPredicate（in表达式）等。&lt;/p&gt;&lt;h4&gt;生成单机逻辑Plan阶段&lt;/h4&gt;&lt;p&gt;这部分工作主要是根据AST抽象语法树生成代数关系，也就是俗称的算子数。树上的每个节点都是一个算子，代表着一种操作。&lt;/p&gt;&lt;p&gt;ScanNode代表着对一个表的扫描操作，将一个表的数据读出来。HashJoinNode代表着join操作，小表在内存中构建哈希表，遍历大表找到连接键相同的值。Project表示投影操作，代表着最后需要输出的列，图片表示只用输出citycode这一列。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGP5IYWHQGmIOdT2ZeH8auekRricKiaTVo1PLuPIkhWqs1BoiaXTTzsjaNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5027777777777778&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4&gt;生成分布式Plan阶段&lt;/h4&gt;&lt;p&gt;有了单机的PlanNode树之后，就需要进一步根据分布式环境，拆成分布式PlanFragment树（PlanFragment用来表示独立的执行单元），毕竟一个表的数据分散地存储在多台主机上，完全可以让一些计算并行起来。&lt;/p&gt;&lt;p&gt;这个步骤的主要目标是最大化并行度和数据本地化。主要方法是将能够并行执行的节点拆分出去单独建立一个PlanFragment，用ExchangeNode代替被拆分出去的节点，用来接收数据。拆分出去的节点增加一个DataSinkNode，用来将计算之后的数据传送到ExchangeNode中，做进一步的处理。&lt;/p&gt;&lt;p&gt;这一步采用递归的方法，自底向上，遍历整个PlanNode树，然后给树上的每个叶子节点创建一个PlanFragment，如果碰到父节点，则考虑将其中能够并行执行的子节点拆分出去，父节点和保留下来的子节点组成一个parent PlanFragment。拆分出去的子节点增加一个父节点DataSinkNode组成一个child PlanFragment，child PlanFragment指向parent PlanFragment。这样就确定了数据的流动方向。&lt;/p&gt;&lt;h4&gt;Schedule阶段&lt;/h4&gt;&lt;p&gt;这一步是根据分布式逻辑计划，创建分布式物理计划。主要解决以下问题：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;哪个 BE 执行哪个 PlanFragment&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;每个 Tablet 选择哪个副本去查询&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何进行多实例并发&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;h2&gt;实践&lt;/h2&gt;&lt;h3&gt;Apache Doris 基于 Bitmap 的精确去重和用户行为分析&lt;/h3&gt;&lt;h4&gt;How Doris Count Distinct without Bitmap&lt;/h4&gt;&lt;p&gt;Doris 除了支持 HLL 近似去重，也是支持 Runtime 现场精确去重的。实现方法和 Spark，MR 类似。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGe3GNF6WcibK55OlBkx5c9ia970nuDn759TjgtW5h3tojam1rp16YEXPQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.4756944444444444&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;对于上图计算 PV 的 SQL，Doris 在计算时，会按照下图进行计算，先根据 page 列和 user_id 列 group by,最后再 count。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGLfaUE9gWtgCDurqicxg8Dd7ZyEpJdJVWANvu5y4oYEicrNxO2Mh1K7xQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.47800925925925924&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;显然，上面的计算方式，当数据量越来越大，到几十亿，几百亿时，使用的 IO 资源，CPU 资源，内存资源，网络资源就会越来越多，查询也会越来越慢。&lt;/p&gt;&lt;p&gt;那么，下面一个自然而然的问题就是，应该如何让 Doris 的精确去重查询性能更快呢？&lt;/p&gt;&lt;h4&gt;How To Make Count Distinct More Faster&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;堆机器&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Cache&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;优化 CPU 执行引擎 (向量化，SIMD，查询编译等)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持 GPU 执行引擎&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;预计算&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;How Doris Count Distinct With Bitmap&lt;/h4&gt;&lt;p&gt;要在 Doris 中预计算，自然要用到 Doris 的聚合模型，下面简单看下 Doris 中的聚合模型：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5243055555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGib6ELqCib9DDU19iatFaFJgmX2lhVGmaMJhVdpd7MUUr9XsfzIK7soia0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;Doris 的聚合模型分为 Key 列和 Value 列，Key 列就是维度列，Value 列是指标列，Key 列全局有序，每个 Value 列会有对应的聚合函数，相同 Key 列的 Value 会根据对应的聚合函数进行聚合。上图中，Year，City 是 Key 列，Cost 是 Value 列，Cost 对应的聚合函数式 Sum。Doris 支持根据不同维度组合建立不同的 Rollup 表，并能在查询时自动路由。&lt;/p&gt;&lt;p&gt;所以要在 Doris 中实现 Count Distinct 的预计算，就是实现一种 Count Distinct 的聚合指标。那么可以像 Sum,Min,Max 聚合指标一样直接实现一种 Count Distinct 聚合指标吗?&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CG1d6NRXwIvSwRpbKia91wmLD0BFy0lR7Z2r5zBXKsULrCLyiaFyJWKB8A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5439814814814815&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;Doris 中聚合指标必须支持上卷。 但如果只保留每个 City 的 User 的去重值，就没办法上卷聚合出只有 Year 为维度的时候 User 的去重值，因为去重值不能直接相加，已经把明细丢失了，不知道在 2016 或 2017 年，北京和上海不重合的 User 有多少。&lt;/p&gt;&lt;p&gt;所以去重指标要支持上卷聚合，就必须保留明细，不能只保留一个最终的去重值。而计算机保留信息的最小单位是一个 bit，所以很自然的想到用 Bitmap 来保留去重指标的明细数据。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGDRGtPAZMz1H1owD2RDG9jHGu0h8kAApGybWVWIFqiaKiacmahJ5AfmDw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5034722222222222&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;Roaring Bitmap 的核心思路很简单，就是根据数据的不同特征采用不同的存储或压缩方式。 为了实现这一点，Roaring Bitmap 首先进行了分桶，将整个 int 域拆成了 2 的 16 次方 65536 个桶，每个桶最多包含 65536 个元素。&lt;/p&gt;&lt;p&gt;所以一个 int 的高 16 位决定了，它位于哪个桶，桶里只存储低 16 位。以图中的例子来说，62 的前 1000 个倍数，高 16 位都是 0，所以都在第一个桶里。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGNgibhgUlsic4e8UDP5EzdicvjmgxspgDWoQLvLTPaEhRgBgoIf0ZDPmcQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5868055555555556&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;然后在桶粒度针对不同的数据特点，采用不同的存储或压缩方式：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGkatArxnHehES6bPIPdKkZeBMeB8DXiaxiaLzZdbROu0iaQnEmN4uial2gQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5254629629629629&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;默认会采用 16 位的 Short 数组来存储低 16 位数据，当元素个数超过 4096 时，会采用 Bitmap 来存储数据。&lt;/p&gt;&lt;p&gt;第 3 类 Run Container 是优化连续的数据， Run 指的是 Run Length Encoding（RLE）&lt;/p&gt;&lt;p&gt;在做字典映射时，使用比较广泛的数据结构是 Trie 树。&lt;/p&gt;&lt;p&gt;Trie 树的问题是字典对应的编码值是基于节点位置决定的，所以 Trie 树是不可变的。这样没办法用来实现全局字典，因为要做全局字典必然要支持追加。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGJqRcOwSpVUEGtvbRwico1D85ic3IKoTIdIfficbV0HAOAYrcGkvbt35Hw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5196759259259259&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;如何让同一个 String 永远映射到同一个 ID。一个简单的思路是把 String 对应的 ID 直接序列化下来，因为全局字典只需要支持 String 到 ID 的单向查找，不需要支持 ID 到 String 的反向查找。&lt;/p&gt;&lt;p&gt;当全局字典越来越大的时候，就会面临内存不足的问题。一个自然的想法就是 Split。当全局字典拆成多个子树之后，必然会涉及到每个子树的按需加载和删除，这个功能是使用 Guava 的 LoadingCache 实现的。&lt;/p&gt;&lt;p&gt;为了解决读写冲突的问题，实现了 MVCC，使得读写可以同时进行。全局字典目前是存储在 HDFS 上的，一个全局字典目录下会有多个 Version，读的时候永远读取最新 Version 的数据，写的时候会先写到临时目录，完成后再拷贝到最新的 Version 目录。同时为了保证全局字典的串行更新，引入分布式锁。&lt;/p&gt;&lt;p&gt;目前基于 Trie 树的全局字典存在的一个问题是，全局字典的编码过程是串行的，没有分布式化，所以当全局字典的基数到几十亿规模时，编码过程就会很慢。一个可行的思路是，类似 Roaring Bitmap，可以将整个 Int 域进行分桶，每个桶对应固定范围的 ID 编码值，每个 String 通过 Hash 决定它会落到哪个桶内，这样全局字典的编码过程就可以并发。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGOBfAzvDrSwiaGXjRyKQA84hT82S967yIwe5XsJYsjxmUjAicDmmzibs1g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5648148148148148&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;正是由于目前基于 Trie 树的全局字典 无法分布式构建，滴滴的同学引入了基于 Hive 表的全局字典。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGq2iauTLV2gCRCNerViaMsp7YwibCIDurrQhuYnsdlhRqy1IckJxib97saw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5127314814814815&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;这种方案中全局字典本身是一张 Hive 表，Hive 表有两个列，一个是原始值，一个是编码的 Int 值，然后通过上面的 4 步就可以通过 Spark 或者 MR 实现全局字典的更新，和对事实表中 Value 列的替换。&lt;/p&gt;&lt;p&gt;基于 Hive 表的全局字典相比基于 Trie 树的全局字典的优点除了可以分布式化，还可以实现全局字典的复用。但是缺点也是显而易见，相比基于 Trie 树的全局字典，会使用多几倍的资源，因为原始事实表会被读取多次，而且还有两次 Join。&lt;/p&gt;&lt;h4&gt;How to Use Doris Bitmap&lt;/h4&gt;&lt;p&gt;Create Table （为了有更好的加速效果，最好建下 ROLLUP）&lt;/p&gt;&lt;pre&gt;&lt;code&gt;CREATE TABLE `pv_bitmap` (&lt;br/&gt;&lt;br/&gt;`dt` int,&lt;br/&gt;&lt;br/&gt;`page` varchar(10),&lt;br/&gt;&lt;br/&gt;`user_id` bitmap bitmap_union&lt;br/&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;AGGREGATE KEY(`dt`, page)&lt;br/&gt;&lt;br/&gt;DISTRIBUTED BY HASH(`dt`) BUCKETS 2;&lt;br/&gt;&lt;br/&gt;ALTER TABLE pv_bitmap ADD ROLLUP pv (page, user_id);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Load Data&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cat data | curl --location-trusted -u user:passwd -T -&lt;br/&gt;&lt;br/&gt;-H &quot;columns: dt,page,user_id, user_id=$BITMAP_LOAD_FUNCTION(user_id)&quot;&lt;br/&gt;&lt;br/&gt;http://host:8410/api/test/pv_bitmap/_stream_load&lt;br/&gt;&lt;br/&gt;TO_BITMAP(expr) : 将 0 ~ 4294967295 的 unsigned int 转为 bitmap&lt;br/&gt;&lt;br/&gt;BITMAP_HASH(expr): 将任意类型的列通过 Hash 的方式转为 bitmap&lt;br/&gt;&lt;br/&gt;BITMAP_EMPTY(): 生成空 bitmap，用于 insert 或导入的时填充默认值&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Query&lt;/p&gt;&lt;pre&gt;&lt;code&gt;select bitmap_count(bitmap_union(user_id)) from pv_bitmap;                                select bitmap_union_count(user_id) from pv_bitmap;                                select bitmap_union_int(id) from pv_bitmap;&lt;br/&gt;&lt;br/&gt;BITMAP_UNION(expr) : 计算两个 Bitmap 的并集，返回值是序列化后的 Bitmap 值&lt;br/&gt;&lt;br/&gt;BITMAP_COUNT(expr) : 计算 Bitmap 的基数值&lt;br/&gt;&lt;br/&gt;BITMAP_UNION_COUNT(expr): 和 BITMAP_COUNT(BITMAP_UNION(expr)) 等价&lt;br/&gt;&lt;br/&gt;BITMAP_UNION_INT(expr) : 和 COUNT(DISTINCT expr) 等价(仅支持TINYINT,SMALLINT 和 INT)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Insert Into （ 可以加速无需上卷的精确去重查询场景 ）&lt;/p&gt;&lt;pre&gt;&lt;code&gt;insert into bitmaptable1 (id, id2) VALUES (1001, tobitmap(1000)), (1001, to_bitmap(2000));&lt;br/&gt;&lt;br/&gt;insert into bitmaptable1 select id, bitmapunion(id2) from bitmap_table2 group by id;&lt;br/&gt;&lt;br/&gt;insert into bitmaptable1 select id, bitmaphash(id_string) from table;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;基于 Bitmap 的用户行为分析&lt;/h4&gt;&lt;p&gt;用户行为分析从字面意思上讲，就是分析用户的行为。分析用户的哪些行为呢？可以简单用 5W2H 来总结。即 Who(谁)、What(做了什么行为)、When(什么时间)、Where(在哪里)、Why(目的是什么)、How(通过什么方式)，How much (用了多长时间、花了多少钱)。&lt;/p&gt;&lt;p&gt;其终极目的就是为了不断优化产品，提升用户体验，让用户花更多的时间，花更多的钱在自己的产品上。&lt;/p&gt;&lt;p&gt;目前用户行为分析的解法大概有这么几种：&lt;/p&gt;&lt;p&gt;第一种就数据库的 Join 解法，一般效率是比较低的。我们在 Doris 中是可以用这种思路实现的。&lt;br/&gt;第二种是基于明细数据的，UDAF 实现。Doris 也是支持的。&lt;br/&gt;第三种是基于 Bitmap 的 UDAF 实现的，也就是今天要分享的。&lt;br/&gt;第四种是用专用的系统来做用户行为分析，专用系统的好处是可以针对特定场景，做更多的优化。&lt;/p&gt;&lt;h4&gt;Doris Intersect_count&lt;/h4&gt;&lt;p&gt;现在已经在 Doris 的聚合模型中支持了 Bitmap，所以可以基于 Bitmap 实现各类 UDF, UDAF，来实现大多数用户行为分析。&lt;/p&gt;&lt;h4&gt;Intersect_count 计算留存&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;select intersect_count(user_id, dt, &#x27;20191111&#x27;) as first_day,&lt;br/&gt;&lt;br/&gt;intersect_count(user_id, dt, &#x27;20191112&#x27;) as second_day,&lt;br/&gt;&lt;br/&gt;intersect_count(user_id, dt, &#x27;20191111&#x27;, &#x27;20191112&#x27;) as retention,&lt;br/&gt;&lt;br/&gt;from table&lt;br/&gt;&lt;br/&gt;where dt in (&#x27;20191111&#x27;, &#x27;20191112&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假如有 user_id 和 page 的信息，我们希望知道在访问美团页面之后，又有多少用户访问了外卖页面，也可以用 intersect_count 来进行计算。&lt;/p&gt;&lt;h4&gt;Intersect_count 筛选特定用户&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;select&lt;br/&gt;&lt;br/&gt;intersect_count(user_id, tag_value, &#x27;男&#x27;, &#x27;90后&#x27;, &#x27;10-20万&#x27;)&lt;br/&gt;&lt;br/&gt;from user_profile&lt;br/&gt;&lt;br/&gt;where (tag_type=&#x27;性别&#x27; and tag_value=&#x27;男&#x27;)&lt;br/&gt;&lt;br/&gt;or (tag_type=&#x27;年龄&#x27; and tag_value=&#x27;90后&#x27;)&lt;br/&gt;&lt;br/&gt;or (tag_type=&#x27;收入&#x27; and tag_value=&#x27;10-20万&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后也可以通过 intersect_count 来进行一些特定用户的筛选。例如原始表里有 user_id，tag_value，tag_type 这些信息，我们想计算年收入 10-20 万的 90 后男性有多少，就可以用这个简单的 SQL 来实现。&lt;/p&gt;&lt;h4&gt;Doris Bitmap ToDo&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;全局字典进行开源，支持任意类型的精确去重&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持 Int64，支持 Int64 后一方面支持更高基数的 bitmap 精确去重，另一方面如果原始数据中有 bigint 类型的数据便不需要全局字典进行编码。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持 Array 类型。很多用户行为分析的场景下的 UDAF 或 UDF，用 Array 表达更加方便和规范。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;更方便更智能的批量创建 Rollup。当用户基数到达十多亿时，Bitmap 本身会比较大，而且对几十万个 Bitmap 求交的开销也会很大，因此还是需要建立 Rollup 来进行加速查询。更进一步，我们期望可以做到根据用户的查询特点去自动建立 Rollup。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;希望支持更多、更复杂的用户行为分析。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Summary&lt;/h4&gt;&lt;p&gt;如果应用基数在百万、千万量级，并拥有几十台机器，那么直接选择 count distinct 即可；&lt;/p&gt;&lt;p&gt;如果希望进行用户行为分析，可以考虑 IntersectCount 或者自定义 UDAF。&lt;/p&gt;&lt;p&gt;Reference&lt;/p&gt;&lt;h3&gt;Apache Doris 在美团外卖数仓中的应用实践&lt;/h3&gt;&lt;h4&gt;外卖运营业务特点&lt;/h4&gt;&lt;p&gt;外卖业务为大家提供送餐服务，连接商家与用户，这是一个劳动密集型的业务，外卖业务有上万人的运营团队来服务全国几百万的商家，并以“商圈”为单元，服务于“商圈”内的商家。“商圈”及其上层组织机构是一个变化维度，当“商圈”边界发生变化时，就导致在往常日增量的业务生产方式中，历史数据的回溯失去了参考意义。在所有展现组织机构数据的业务场景中，组织机构的变化是一个绕不开的技术问题。此外，商家品类、类型等其它维度也存在变化维的问题。如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGOM8d4IpHDic6osicYExzIgibMbJedq1WDjyPIyfficYibDTCvgaegYYYCaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.17669172932330826&quot; data-w=&quot;1064&quot;/&gt;&lt;/p&gt;&lt;h4&gt;数据生产面临的挑战&lt;/h4&gt;&lt;p&gt;数据爆炸，每日使用最新维度对历史数据进行回溯计算。在 Kylin 的 MOLAP 模式下存在如下问题：&lt;/p&gt;&lt;h4&gt;解决方案：引入 MPP 引擎，数据现用现算&lt;/h4&gt;&lt;p&gt;既然变化维的历史数据预计算成本巨大，最好的办法就是现用现算，但现用现算需要强大的并行计算能力。OLAP 的实现有 MOLAP、ROLAP、HOLAP 三种形式。长期以来，由于传统关系型 DBMS 的数据处理能力有限，所以 ROLAP 模式受到很大的局限性。随着分布式、并行化技术成熟应用，MPP 引擎逐渐表现出强大的高吞吐、低时延计算能力，号称“亿级秒开”的引擎不在少数，ROLAP 模式可以得到更好的延伸。例如：日数据量的 ROLAP 现场计算，周、月趋势的计算，以及明细数据的浏览都可以较好的应对。&lt;/p&gt;&lt;p&gt;下图是 MOLAP 模式与 ROLAP 模式下应用方案的比较：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGibRjBYYbiamspl3GcnksFZ7vZUpc8QUrMfgWzmxWVibSxYAe7YJTzfqLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5435185185185185&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;MOLAP 模式的劣势&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;应用层模型复杂，根据业务需要以及 Kylin 生产需要，还要做较多模型预处理。这样在不同的业务场景中，模型的利用率也比较低。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Kylin 配置过程繁琐，需要配置模型设计，并配合适当的“剪枝”策略，以实现计算成本与查询效率的平衡。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;由于 MOLAP 不支持明细数据的查询，在“汇总+明细”的应用场景中，明细数据需要同步到 DBMS 引擎来响应交互，增加了生产的运维成本。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;较多的预处理伴随着较高的生产成本。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ROLAP 模式的优势&lt;/p&gt;&lt;p&gt;综上所述，在变化维、非预设维、细粒度统计的应用场景下，使用 MPP 引擎驱动的 ROLAP 模式，可以简化模型设计，减少预计算的代价，并通过强大的实时计算能力，可以支撑良好的实时交互体验。&lt;/p&gt;&lt;h3&gt;Doris 引擎在美团的重要改进&lt;/h3&gt;&lt;h4&gt;Join 谓词下推的传递性优化&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGia4DicJt0PB8xgyKicvJicm9icbQnrgzSX8H6xLTQibaKBZoz3KZM1picdadQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.4848837209302326&quot; data-w=&quot;860&quot;/&gt;&lt;/p&gt;&lt;p&gt;如上图所示，对于下面的 SQL：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;select * from t1 join t2 on t1.id = t2.id where t1.id = 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Doris 开源版本默认会对 t2 表进行全表 Scan，这样会导致上面的查询超时，进而导致外卖业务在 Doris 上的第一批应用无法上线。&lt;/p&gt;&lt;p&gt;于是在 Doris 中实现了第一个优化：Join 谓词下推的传递性优化（MySQL 和 TiDB 中称之为 Constant Propagation）。Join 谓词下推的传递性优化是指：基于谓词 t1.id = t2.id 和 t1.id = 1, 可以推断出新的谓词 t2.id = 1，并将谓词 t2.id = 1 下推到 t2 的 Scan 节点。这样假如 t2 表有数百个分区的话，查询性能就会有数十倍甚至上百倍的提升，因为 t2 表参与 Scan 和 Join 的数据量会显著减少。&lt;/p&gt;&lt;h4&gt;查询执行多实例并发优化&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGmWdd6HcMwIOyQmCau0ibmuQU3sbNWDiaszn5vaw9XemP7noGM0LtDozg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7132132132132132&quot; data-w=&quot;666&quot;/&gt;&lt;/p&gt;&lt;p&gt;如上图所示，Doris 默认在每个节点上为每个算子只会生成 1 个执行实例。这样的话，如果数据量很大，每个执行实例的算子就需要处理大量的数据，而且无法充分利用集群的 CPU、IO、内存等资源。&lt;/p&gt;&lt;p&gt;一个比较容易想到的优化手段是，可以在每个节点上为每个算子生成多个执行实例。这样每个算子只需要处理少量数据，而且多个执行实例可以并行执行。&lt;/p&gt;&lt;p&gt;下图是并发度设置为 5 的优化效果，可以看到对于多种类型的查询，会有 3 到 5 倍的查询性能提升：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGSAXgMlNrgha6ibiaE4je78ZOVZ9Dyr2qV8WYqiaDRwLj9lPnXoTFDms2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.583743842364532&quot; data-w=&quot;812&quot;/&gt;&lt;/p&gt;&lt;h4&gt;Colocate Join&lt;/h4&gt;&lt;p&gt;Colocate Join（Local Join）是和 Shuffle Join、Broadcast Join 相对的概念，即将两表的数据提前按照 Join Key Shard，这样在 Join 执行时就没有数据网络传输的开销，两表可以直接在本地进行 Join。&lt;/p&gt;&lt;p&gt;整个 Colocate Join 在 Doris 中实现的关键点如下：&lt;/p&gt;&lt;p&gt;对于下面的 SQL，Doris Colocate Join 和 Shuffle Join 在不同数据量下的性能对比如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;select count(*) FROM A t1 INNER JOIN [shuffle] B t5    ON ((t1.dt = t5.dt) AND (t1.id = t5.id)) INNER JOIN [shuffle] C t6    ON ((t1.dt = t6.dt) AND (t1.id = t6.id)) where t1.dt in (xxx days);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGDDPUfFDo3UPSSN4tgPbszTSstNt5fbj8FXicNWAgzS7WiafHSsRYjBXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.49074074074074076&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;Bitmap 精确去重&lt;/p&gt;&lt;p&gt;Doris 之前实现精确去重的方式是现场计算的，实现方法和 Spark、MapReduce 类似：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGnvaSaVq20Gqy15hTQmkCvgHLxFZricaNic97SMlTMpeCgKdopSugSLeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.48518518518518516&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;对于上图计算 PV 的 SQL，Doris 在计算时，会按照下图的方式进行计算，先根据 page 列和 user_id 列 group by，最后再 Count：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGdq7mH4lbTzhR4GDsCRmzAXcuHBI2NbbT6NtZibGLDbOXcNm2laDYJRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.47962962962962963&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;显然，上面的计算方式，当数据量越来越大，到几十亿几百亿时，使用的 IO 资源、CPU 资源、内存资源、网络资源会变得越来越多，查询也会变得越来越慢。&lt;/p&gt;&lt;p&gt;于是在 Doris 中新增了一种 Bitmap 聚合指标，数据导入时，相同维度列的数据会使用 Bitmap 聚合。有了 Bitmap 后，Doris 中计算精确去重的方式如下：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGx5b8Aiad0GfquFwGQ2aUXY5RJicwa9gub9GV7mHwk9eCoCia24NKQUo6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5092592592592593&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;可以看到，当使用 Bitmap 之后，之前的 PV 计算过程会大幅简化，现场查询时的 IO、CPU、内存，网络资源也会显著减少，并且不再会随着数据规模而线性增加。&lt;/p&gt;&lt;h4&gt;总结与思考&lt;/h4&gt;&lt;p&gt;实践证明，以 Doris 引擎为驱动的 ROLAP 模式可以较好地处理汇总与明细、变化维的历史回溯、非预设维的灵活应用、准实时的批处理等场景。而以 Kylin 为基础的 MOLAP 模式在处理增量业务分析，固化维度场景，通过预计算以空间换时间方面依然重要。&lt;/p&gt;&lt;p&gt;业务方面，通过外卖数仓 Doris 的成功实践以及跨事业群的交流，美团已经有更多的团队了解并尝试使用了 Doris 方案。而且在平台同学的共同努力下，引擎性能还有较大提升空间，相信以 Doris 引擎为驱动的 ROLAP 模式会为美团的业务团队带来更大的收益。从目前实践效果看，其完全有替代 Kylin、Druid、ES 等引擎的趋势。&lt;/p&gt;&lt;p&gt;目前，数据库技术进步飞速，近期柏睿数据发布全内存分布式数据库 RapidsDB v4.0 支持 TB 级毫秒响应（处理千亿数据可实现毫秒级响应）。可以预见，数据库技术的进步将大大改善数仓的分层管理与应用支撑效率，业务将变得“定义即可见”，也将极大地提升数据的价值。&lt;/p&gt;&lt;h3&gt;Apache Doris 在京东广告的应用实践&lt;/h3&gt;&lt;h4&gt;原有系统存在的问题&lt;/h4&gt;&lt;p&gt;主要表现以下几个方面：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;原有系统已经逐渐无法满足我们日常业务的性能需求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;日常业务所需的 Schema Change，Rollup 等操作，在原有系统上有极高的人力成本。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;原有系统的数据无法迁移，扩容需要重刷全部历史数据，运维成本极高。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在“618”和“双 11”的时候，原有系统会成为我们对外服务的一个隐患。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;因此需要一个合适的数据查询引擎来替代原有系统，考虑到团队的人力和研发能力，选择使用开源的 OLAP 引擎来替换原有系统。&lt;/p&gt;&lt;h4&gt;技术选型&lt;/h4&gt;&lt;p&gt;为广告主提供在线报表数据查询服务，因此该 OLAP 查询引擎必须满足：可以支持高并发查询，可以毫秒级返回数据，且可以随着业务的发展水平扩展。此外也承接了越来越多运营和采销同事的多维数据分析的需求，因此希望该 OLAP 引擎也可以支持高吞吐的 Ad-hoc 查询。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGnbeSSe0YuCKVnjcs6EFwfkia3zrHKXJZ1qzAHvzs2uSVnGfyiaib4uJEA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.7530864197530864&quot; data-w=&quot;648&quot;/&gt;&lt;/p&gt;&lt;p&gt;需要同时支持离线（T+1）大规模数据和实时（分钟级间隔）数据的导入，数据导入后即可查询，保证数据导入的实时性和原子性。离线数据（几十 G）的导入任务需要在 1 小时内完成，实时数据（百 M 到几 G）的导入任务需要在 10 分钟内完成。&lt;/p&gt;&lt;p&gt;在“618”这类大促前通常会进行扩容，因此需要新系统扩容方便，无需重刷历史数据来重新分布数据，且扩容后原有机器的数据最好可以很方便地迁移到新机器上，避免造成数据倾斜。&lt;/p&gt;&lt;p&gt;根据日常业务的需要，经常会进行 Schema Change 操作。由于原有系统对这方面的支持很差，希望新系统可以进行 Online Schema Change，且对线上查询无影响。&lt;/p&gt;&lt;p&gt;由于业务的日常变更会对一些表进行数据修复，因此新系统需要支持错误数据的删除，从而无需重刷全部历史数据，避免人力和计算资源的浪费。&lt;/p&gt;&lt;p&gt;目前开源的 OLAP 引擎很多，但由于面临大促的压力，需要尽快完成选型并进行数据迁移，因此只考察比较出名的几个 OLAP 系统：ClickHouse，Druid 和 Doris。&lt;/p&gt;&lt;p&gt;最终选择 Doris 来替换原有系统，主要基于以下几方面的考虑：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Doris 的查询速度是亚秒级的，并且相对 ClickHouse 来说，Doris 对高并发的支持要优秀得多。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Doris 扩容方便，数据可以自动进行负载均衡，解决了原有系统的痛点。ClickHouse 在扩容时需要进行数据重分布，工作量比较大。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Doris 支持 Rollup 和 Online Schema Change，这对日常业务需求十分友好。而且由于支持 MySQL 协议，Doris 可以很好地和之前已有的系统进行融合。而 Druid 对标准 SQL 的支持有限，并且不支持 MySQL 协议，改造成本很高。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;广告场景应用&lt;/h4&gt;&lt;p&gt;经过对系统的改造，目前使用 Doris 作为系统中的一个数据存储层，汇总了离线和实时数据，也为上层查询系统提供统一的效果数据查询接口。如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7583444592790387&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGPjvJS0uFIVmeCoCMA73Doib0VWMibjDmqZPKlDK4ibp78XfdBuia9ry7BA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;749&quot;/&gt;&lt;/p&gt;&lt;p&gt;日常实时数据主要包含展现/点击跟单数据，DMP 人群包的效果数据以及十几条产品线的点击，展现和消耗数据，导入时间间隔从 1 分钟到 1 小时不等，数据量在百 M 左右的可以秒级导入，数据量在 1G 左右的可以在 1 分钟内完成。离线数据主要包含搜索词的效果数据和各种营销工具的基础数据，大多数都是 T+1 数据，每日新增数据量在 20G-30G，导入耗时在 10-20 分钟。&lt;/p&gt;&lt;p&gt;大多数效果数据报表，广告主的查询维度相对固定且可控，但要求能在毫秒级返回数据，所以必须保证这些查询场景下的性能。Doris 支持的聚合模型可以进行数据的预聚合，将点击，展现，消耗等数据汇总到建表时指定的维度。&lt;/p&gt;&lt;p&gt;此外，Doris 支持建立 Rollup 表（即物化视图）也可以在不同维度上进行预聚合，这种自定义的方式相比 Kylin 的自动构建 cube，有效避免了数据的膨胀，在满足查询时延的要求下，降低了磁盘占用。Doris 还可以通过 Rollup 表对维度列的顺序进行调整，避免了 Kylin 中因过滤维度列在 HBase RowKey 后部而造成的查询性能低下。&lt;/p&gt;&lt;p&gt;对于一些为广告主提供的营销工具，维度和指标通常会有 30~60 列之多，而且大部分查询要求按照所有维度列进行聚合，由于维度列较多，这种查询只能依赖于现场计算能力。目前对于这种类型的查询请求，会将其数据尽量均匀分布到多台 BE 上，利用 Doris MPP 架构的特性，并行计算，并通过控制查询时间范围（一个月），可以使 TP99 达到 3s 左右。&lt;/p&gt;&lt;p&gt;正是由于 Doris 具有自定义的预计算能力和不俗的现场计算能力，简化了日常工作。以为广告主提供的营销工具“行业大盘”为例，如图所示，这种业务场景下，不仅要计算广告主自身的指标数据，还需计算广告主所在类目的指标数据，从而进行对比。&lt;/p&gt;&lt;p&gt;原有系统数据分片只能按照指定列进行散列，没有分布式查询计划，就不能汇总类目维度数据。原先为了解决这种业务场景，虽然底层是同一数据源，但需要建两个表，一个是广告主维度表，一个是类目维度表，维护了两个数据流，增大了工作负担。&lt;/p&gt;&lt;p&gt;使用了 Doris 之后，广告主维度表可以 Rollup 出类目维度表。查询广告主维度数据时可以根据分区分桶（按照时间分区，按照广告主 ID 分桶）确定一个 Tablet，缩小数据查询范围，查询效率很高。查询类目维度时，数据已经按照广告主 ID 进行分片 ，可以充分利用 Doris 现场计算的能力，多个 BE 并行计算，实时计算类目维度数据，在我们的线上环境也能实现秒级查询。这种方案下数据查询更加灵活，无需为了查询性能而维护多个预计算数据，也可以避免多张表之间出现数据不一致的问题。&lt;/p&gt;&lt;h4&gt;实际使用效果&lt;/h4&gt;&lt;p&gt;Doris 支持聚合模型，可以提前聚合好数据，对计算广告效果数据点击，展现和消耗十分适合。对一些数据量较大的高基数表，可以对查询进行分析，建立不同维度或者顺序的的 Rollup 表来满足查询性能的需求。&lt;/p&gt;&lt;p&gt;Doris 支持 Online Schema Change，相比原有系统 Schema Change 需要多个模块联动，耗费多个人力数天才能进行的操作，Doris 只需一条 SQL 且在较短时间内就可以完成。对于日常需求来说，最常见的 Schema Change 操作就是加列，Doris 对于加列操作使用的是 Linked Schema Change 方式，该方式可以无需转换数据，直接完成，新导入的数据按照新的 Schema 进行导入，旧数据可以按照新加列的默认值进行查询，无需重刷历史数据。&lt;/p&gt;&lt;p&gt;Doris 通过 HLL 列和 BITMAP 列支持了近似/精确去重的功能，解决了之前无法计算 UV 的问题。&lt;/p&gt;&lt;p&gt;日常数据修复，相较于以前有了更多的方式可以选择。对于一些不是很敏感的数据，我们可以删除错误数据并进行重新导入；对于一些比较重要的线上数据，我们可以使用 Spark on Doris 计算正确数据和错误数据之间的差值，并导入增量进行修复。这样的好处是，不会暴露一个中间状态给广告主。还有一些业务会对一个或多个月的数据进行重刷。目前在测试使用 Doris 0.12 版本提供的 Temp Partition 功能，该功能可以先将正确数据导入到 Temp Partition 中，完成后可以将要删除的 Partition 和 Temp Partition 进行交换，交换操作是原子性的，对于上层用户无感知。&lt;/p&gt;&lt;p&gt;Doris 添加新的 BE 节点后可以自动迁移 Tablet 到新节点上，达到数据负载均衡。通过添加 FE 节点，则可以支撑更高的查询峰值，满足大促高并发的要求。&lt;/p&gt;&lt;p&gt;大促期间数据导入量会暴增，而且在备战期间，也会有憋单演练，在短时间内会产生大量数据导入任务。通过导入模块限制 Load 的并发，可以避免大量数据的同时导入，保证了 Doris 的导入性能。&lt;/p&gt;&lt;p&gt;Doris 在团队已经经历了数次大促，在所有大促期间无事故发生，查询峰值 4500+qps，日查询总量 8 千万+，TP99 毫秒级，数据日增量近 300 亿行，且实时导入数据秒级延迟。&lt;/p&gt;&lt;p&gt;Doris 支持低延时的高并发查询和高吞吐的 Ad-hoc 查询，但是这两类查询会相互影响，迁移到 Doris 的初期日常线上的主要问题就是高吞吐的查询占用资源过多，导致大量低延时的查询超时。后来使用两个集群来对两类查询进行物理隔离，解决了该问题。&lt;/p&gt;&lt;p&gt;Doris 在 0.11 版本时 FE 的 MySQL 服务 IO 线程模型较为简单，使用一个 Acceptor+ThreadPool 来完成 MySQL 协议的通信过程，单个 FE 节点在并发较高（2000+qps 左右）的时候会出现连接不上的问题，但此时 CPU 占用并不高。在 0.12 版本的时候，Doris 支持了 NIO，解决了这个问题，可以支撑更高的并发。也可以使用长连接解决这个问题，但需要注意 Doris 默认对连接数有限制，连接占满了就无法建立新的连接了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;h3&gt;基于 Doris 的小程序用户增长实践&lt;/h3&gt;&lt;p&gt;首先为什么要做思域精细化运营呢，这起源于两个痛点：&lt;/p&gt;&lt;p&gt;然后针对这两个问题，产品上面提出了一个解决方案 -- 就是分层运营，它主要分为两部分：一个是运营触达，还有一个是精细化的人群。&lt;/p&gt;&lt;p&gt;这套解决方案的收益和价值：&lt;/p&gt;&lt;p&gt;对于开发者来说：&lt;/p&gt;&lt;p&gt;对于整个生态来讲：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;提高了私欲利用率和活跃度&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;激活了开发者主动经营的意愿&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;促进了生态的良性循环&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;用户分层技术难点&lt;/h4&gt;&lt;p&gt;首先给大家简单介绍遇到的四个难点：&lt;/p&gt;&lt;p&gt;1.TB 级数据。数据量特别大，前面讲到是基于画像和行为去做的一个用户分层，数据量是特别大的，每天的数据量规模是 1T +&lt;br/&gt;2.查询的频响要求极高，毫秒级到秒级的一个要求。前面介绍 B 端视角功能时大家有看到，有一个预估人数的功能，用户只要点击 ”预估人数“ 按钮，需要从 TB 级的数据量级里面计算出筛选出的人群人数是多少，这种要在秒级时间计算 TB 级的数量的一个结果的难度其实可想而知&lt;br/&gt;3.计算复杂，需要动静组合。怎么理解？就是现在很多维度是没办法去做预聚合的，必须去存明细数据，然后去实时的计算，这个后面也会细讲&lt;br/&gt;4.产出用户包的时效性要求高。这个比较好理解，如果产出特别慢的话，肯定会影响用户体验&lt;/p&gt;&lt;p&gt;针对上面的四个难点，解法是：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;针对第一个难点 --&amp;gt; 压缩存储，降低查询的数量级。&lt;/strong&gt;&lt;br/&gt;具体选型就是使用 Bitmap 存储，这解法其实很好理解，不管现在主流的 OLAP 引 擎有多么厉害，数据量越大，查询肯定会越慢，不可能说数据量越大，我查询还是一直不变的，这种其实不存在的，所以我们就需要降低存储。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;针对第二和第三个难点 --&amp;gt; 选择合适计算引擎&lt;/strong&gt;&lt;br/&gt;在调研了当前开源的包括 ClickHouse, Doris, Druid 等多种引擎后，最终选择了基于 MPP 架构的 OLAP 引擎 Doris。&lt;br/&gt;这里可以简单跟大家介绍一下选择 Doris 的原因，从性能来说其实都差不多，但是都 Doris 有几个优点:&lt;br/&gt;第一：它是兼容 Mysql 协议，也就是说你的学习成本非常低，基本上大家只要了解 mysql， 就会用 Doris， 不需要很大的学习成本。&lt;br/&gt;第二：Doris 运维成本很低，基本上就是自动化运维。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;针对第四个难点 --&amp;gt; 选择合适的引擎&lt;/strong&gt;&lt;br/&gt;通过对比 Spark 和 Doris，我们选择了 Doris ，后面会详细讲为什么会用 Doris。&lt;/p&gt;&lt;h4&gt;用户分层的架构和解决方案&lt;/h4&gt;&lt;p&gt;分层运营架构：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGrthW2N78JTZHyHpE1eZCEiaO7o4SvWlYYQnEib9f7yQHBr62BKqXAozw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.562962962962963&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;架构的话分为两部分，就是在线部分跟离线部分。&lt;/p&gt;&lt;p&gt;在线部分：&lt;br/&gt;分为了四层：服务层、解析层、计算层跟存储层，然后还有调度平台和监控平台。&lt;/p&gt;&lt;p&gt;服务层，主要功能包含：&lt;/p&gt;&lt;p&gt;解析层，是对 DSL 的一个解析、优化、路由以及 Sql 模板：&lt;/p&gt;&lt;p&gt;比如要查在线预估人数，首先会在解析层做一个 DSL 的解析，之后根据不同情景做 DSL 的优化，比如选择了近七天活跃且近七天不活跃的用户，这种要七天活跃和七天不活跃的交集显然就是零了，对不对？像这样情况在优化层直接将结果 0 返回给用户就不会再往下走计算引擎，类似还有很多其他优化场景。然后优化完之后会使用 DSL 路由功能，根据不同查询路由到不同的 Sql 模板进行模板的拼接。&lt;/p&gt;&lt;p&gt;计算层，计算引擎使用 Spark 和 Doris：&lt;/p&gt;&lt;p&gt;存储层：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mysql：主要用来存用户分层的一些用户信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Redis：主要用作缓存&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Doris：主要存储画像数据和行为数据&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;AFS：主要是存储产出的用户包的一些信息&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;调度平台：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;主要是离线任务的调度&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;监控平台：&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;整个服务稳定性的监控&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;离线部分：&lt;/p&gt;&lt;p&gt;离线部分的话主要是对需要的数据源（比如说画像、关注、行为等数据源）做 ETL 清洗，清洗完之后会做一个全局字典并写入 Doris。任务最终会产出用户包，并会分发给小程序 B 端跟百度统计：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;小程序 B 端：推送给手机端用户&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;百度统计：拿这些用户包做一次群体分析&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以上就是一个整体的架构。&lt;/p&gt;&lt;p&gt;图中大家可以看到有几个标红的地方，同时也用数字 1、2、3 做了标记，这几个标红是重点模块，就是针对于上面提到的四个难点做的重点模块改造，接下来会针对这三个重点模块一一展开进行讲解。&lt;/p&gt;&lt;p&gt;1、全局字典&lt;/p&gt;&lt;p&gt;首先讲解全局字典这个模块，全局字典的目的主要是为了解决难点一：数据量大，需要压缩存储同时压缩存储之后还要保证查询性能。&lt;/p&gt;&lt;p&gt;为啥要用全局字典：&lt;br/&gt;这里大家可能会有一个疑问，就是说用 BitMap 存储为啥还要做全局字典？这个主要是因为 Doris 的 BitMap 功能是基于 RoaringBitmap 实现的，因此假如说用户 ID 过于离散的时候，RoaringBitmap 底层存储结构用的是 Array Container 而不是 BitMap Container，Array Container 性能远远差于 BitMap Container。因此我们要使用全局字典将用户 ID 映射成连续递增的 ID，这就是使用全局字典的目的。&lt;/p&gt;&lt;p&gt;全局字典的更新逻辑概况：&lt;br/&gt;这里是使用 Spark 程序来实现的，首先加载经过 ETL 清洗之后各个数据源（画像、关注、行为这些数据源）和全局字典历史表（用来维护维护用户 ID 跟自增 ID 映射关系），加载完之后会判断 ETL 里面的用户 ID 是否已经存在字典表里面，如果有的话，就直接把 ETL 的数据写回 Doris 就行了，如果没有就说明这是一个新用户，然后会用 row_number 方法生成一个自增 ID ，跟这个新用户做一次映射，映射完之后更新到全局字典并写入 Doris。&lt;/p&gt;&lt;p&gt;2、Doris&lt;/p&gt;&lt;p&gt;接下来介绍第二个重点模块 Doris。&lt;/p&gt;&lt;p&gt;2.1 Doris 分桶策略&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGAcmyOOKL2KxXe5eibcxSv9ODKHCsrl0F1Ze1w119UoM9HCwL6kIg84g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.562962962962963&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;分桶策略的目的是为了解决难点二：查询频响要求高。&lt;/p&gt;&lt;p&gt;为啥要做分桶策略：&lt;/p&gt;&lt;p&gt;之前使用了全局字典保证用户的连续递增，但是发现用了全局字典之后，BitMap 的查询性能其实并没有达到预期。 Doris 其实是分布式的一个集群，它会按照某些 Key 进行分桶，也就是分桶之后用户 ID 在桶内就不连续，又变成零散的了。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.562962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGBCmQT40kZ89KFhUFNabDHINxre0f1zcaWYUOxIYDff0LwJ6lp8N5Zw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;方案其实就是在表里面增加了一个 hid 的字段，然后让 Doris 按照 hid 字段进行分桶，这里 hid 生成算法是：&lt;/p&gt;&lt;p&gt;hid = V/（M/N） 然后取整&lt;br/&gt;其中：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;V：全局字典的用户 ID 对应的整数&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;M：预估的用户总数&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;N：分层数&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;大家可以看一下：userid 是六个即 0~5，所以 M= 6；分为三个桶，N = 3；因此 M 除以 N 就等于二。这样的话我就要用 userid 去除以二，然后取整作为 hid。可以看一下，比如说 userid 是零，0÷2 取整为 0 ，userid 是一的话，hid 还是这样，因为 1÷2 的整数部分是零；同理 2÷2 、3÷2 是一，4÷2、5÷2 是二，这样的话就把 userid 跟 hid 做对应，然后再根据 hid 做分层。大家可以看到分层结果，hid = 0 时 userid 是 0、1，hid = 1 时 userid 是 2、3，hid = 2 时 userid 是 4、5，这样就保证了桶内连续。&lt;/p&gt;&lt;p&gt;2.2 doris 之用户画像标签优化&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGvT5G4o9eX5QTzsa0h74d7DTVSGhuHmenYdv4so1VicBdzMFERL1r6Wg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.562962962962963&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;画像标签优化解决的难点也是难点二：查询频响要求高。&lt;/p&gt;&lt;p&gt;方案一：&lt;br/&gt;tag_type, tag_value 。tag_type 是用来记录标签的类型，tag_value 是用来记录标签的内容。&lt;br/&gt;如图所示：比如说 tag_type 是性别，tag_value 可能是男或女，bitmap 这里就是存储所有性别是男的用户 id 列表。&lt;br/&gt;同样对于 tag_type 是地域、tag_value 是北京，bitmap 存储的是所有地域在北京的用户 id 列表。&lt;/p&gt;&lt;p&gt;方案二：&lt;br/&gt;大宽表，使用大宽表在一行记录了所有的标签，然后使用 bitmap 记录这个标签的用户 id 列表。&lt;/p&gt;&lt;p&gt;最终选择方案二，为什么没有选方案一呢 ？因为方案一它是一个标签对应一个用户 bitmap，当想查一个联合的结果就比较耗时，比如想查询性别是男且区域是北京的所有用户，这样的话需要取出 “男” 的用户和 “北京“ 的用户，两者之间做一个交集。肯定会有计算量会有更多的时间消耗，但是如果用大宽表去做存储的话，就可以根据用户常用的查询去构建一个物化视图，当用户的查询（比如在北京的男性）命中了物化视图，就可以直接去取结果，而不用再去做计算，从而降低耗时。&lt;/p&gt;&lt;p&gt;这里还有一个知识点跟大家分享一下：在使用 Doris 的时候，一定要尽量去命中它的前缀索引跟物化视图，这样会大大的提升查询效率。&lt;/p&gt;&lt;p&gt;2.3 doris 之动静组合查询&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CGta1WibLkvBLI7AykR7YUzmZY4Q741HjZNXYRPX545qJlqjpjPUp0HjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.562962962962963&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;动静组合查询，对应的难点是难点三：计算复杂。&lt;/p&gt;&lt;p&gt;首先介绍一下什么叫动静组合查询：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;静态查询：定义为用户维度是固定的，就是可以进行预聚合的查询为静态查询。比如说男性用户，男性用户个就是一个固定的群体，不管怎么查用户肯定不会变，就可以提前进行预聚合的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;动态查询：主要偏向于一些行为，就是那种查询跟着用户的不同而不同。比如说查近 30 天收藏超过三次的用户，或者还有可能是近 30 天收藏超过四次的用户，这种的话就很随意，用户可能会查询的维度会特别的多，而且也没法没办法进行一个预聚合，所以称之为动态的一个查询。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;然后小程序用户分层，相比于同类型的用户分层功能增加了用户行为筛选，这也是小程序产品的特点之一。比如说可以查近 30 天用户支付订单超过 30 元的男性， 这种 ”近 30 天用户支付订单超过 30 元“ 的查询是没办法用 bitmap 做记录的，也没办法说提前计算好，只能在线去算。这种就是一个难点，就是说怎么用非 bitmap 表和 bitmap 做交并补集的运算，为了解决这个问题，结合上面的例子把查询拆分为四步：查近 30 天用户支付订单超过 30 元的男性，且年龄在 20 ~30 岁的用户（具体查询语句参考 PPT 图片）&lt;/p&gt;&lt;p&gt;第一步先查 20~30 岁的男性用户。因为是比较固定，这里可以直接查 bitmap 表。&lt;/p&gt;&lt;p&gt;第二步要查近 30 天用户支付订单超过 30 元的用户。这种的话就没办法去查 bitmap 表了，因为 bitmap 没有办法做这种聚合，只能去查行为表。&lt;/p&gt;&lt;p&gt;第三步就是要做用户 ID 跟在 线 bitmap 的一个转化。Doris 其实已经提供了这样的功能函数：to_bitmap，可以在线将用户 id 转换成 bitmap。&lt;/p&gt;&lt;p&gt;第四步是求交集。就是第一步和第四步的结果求交集。&lt;/p&gt;&lt;p&gt;然后，整篇的核心其实是在第三步：Doris 提供了 to_bitmap 的功能，它帮我们解决了非 bitmap 表和 bitmap 联合查询的问题。&lt;/p&gt;&lt;p&gt;以上是基于 Doris 用户分层方案的一个讲解，基于上述方案整体的性能收益是：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;95 分位耗时小于一秒&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;存储耗降低了 9.67 倍&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;行数优化了八倍&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;如何快速产出用户包&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2O7sFho1EsiblwXWictib5f2CG7xM4IKfsxY7hMr3EC1nOricRaBQeEWDzdEpCcMSkhB8cxSJl0RFeeXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.56353591160221&quot; data-w=&quot;543&quot;/&gt;&lt;/p&gt;&lt;p&gt;现在讲一下第三部分：用户包。这部分主要是用来解决难点四：产出用户包要求时效性高。这个其实也有两个方案：&lt;/p&gt;&lt;p&gt;方案一：调度平台 + spark。&lt;br/&gt;这个其实比较容易理解，因为要跑离线任务很容易就想到了 spark。在这个调度平台里面用了 DAG 图，分三步：先产出用户的 cuid，然后再产出用户的 uid，最后是回调一下做一次更新。&lt;/p&gt;&lt;p&gt;方案二：调度平台 + solo。&lt;/p&gt;&lt;p&gt;最终的方案选型选用了Doris。&lt;/p&gt;&lt;p&gt;方案一使用的是 Spark ，它存在几个问题：比如 Yarn 调度比较耗时，有时候也会因为队列的资源紧张而会有延迟，所以有时候会出现一个很极端的情况就是：产出零个用户，也要 30 分钟才能跑完，这种对用户的体验度非常不好。&lt;/p&gt;&lt;p&gt;方案二的话就是利用了 Doris 的 SELECT INTO OUTFILE 产出结果导出功能，就是查出的结果可以直接导出到 AFS，这样的效果就是最快不到三分钟就可以产出百万级用户，所以 Doris 性能在某些场景下比 Spark 要好很多。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>94ad8e7d9f7281f79c81b8aa6c46cd0f</guid>
<title>用规则引擎让你一天上线十个需求</title>
<link>https://toutiao.io/k/ldd1cse</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各位读者朋友大家好，我是薯条，好久没更文章，不知还有多少读者记得这个号，这篇文章写的有点精分，如果你有耐心看完本文，可以翻翻留言区，我会发个新年红包。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;业务背景&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是本号老读者，可能知道我是做数据系统的，作为一个在线数据服务组，我们这边承接的需求是小而多的。我在一家打车公司上班，运营大佬们认为不同用户在不同场景下有不同打车需求，设计出来很多子品类。于是我们组会承接这样一类需求：计算用户不同品类的各种实时单量，如：快车呼单量、拼车完单量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样的需求，一般处理流程是这样的：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2546419098143236&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJV5hHuUicxxAkYbxqPehPYWNK9iauXQ6z8mgu3P2qmrh1YXcz7qJ2SbWeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1508&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;描述一下这个图：用户在订单流转状态关键节点发生动作时，系统会发一个MQ消息让供其他系统消费。其他系统通过一个明确的据口径判断这条msg是否符合当前业务逻辑，进而存db或是丢弃。比如一个需求要计算：拼车完单量，一个靠谱的拼车rd告诉你口径是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;If aa.bb.cc == &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;// 说明是多车型发单&lt;/span&gt;&lt;br/&gt;  Unmarshal(bb.cc.ee)&lt;br/&gt;  看&lt;span&gt;type&lt;/span&gt;是否为 &lt;span&gt;4&lt;/span&gt; &lt;br/&gt;&lt;span&gt;else&lt;/span&gt;  &lt;span&gt;// 单车型发单&lt;/span&gt;&lt;br/&gt; Unmarshal(bb.cc.ff)&lt;br/&gt;  看&lt;span&gt;type&lt;/span&gt;是否为 &lt;span&gt;4&lt;/span&gt; &lt;br/&gt;(&lt;span&gt;type&lt;/span&gt; = &lt;span&gt;4&lt;/span&gt; 的是拼车)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你对着这个口径，订阅mq，写数据提取和订单判断的逻辑，整个流程写代码1小时，自测一小时，由于你们机器太多，上线花了1整天，整体研发效率还行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二天，产品又给你提了个需求，想计算拼车的发单量，你又去找对应业务线的开发同学寻求一个取数口径，然后重复上面的过程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三天，产品上线了，效果不错，数据涨了3个点，老板非常开心，在周会上让PM讲两句他的心路历程，PM同学重点感谢了老板的栽培，然后轻描淡写的说了产品的底层逻辑和关键抓手。而他的几个精明的同事都get到了抓手是你，于是连夜赶PRD，要求你这个抓手把他们负责品类的各种实时单量全给抓出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第四天，你崩溃了，因为你收到4个PM并行的8个单量需求，正当你奋笔疾书再次准备重复上述流程时，你睿智的老板告诉你这样做有不妥之处：来一个坑填一个萝卜是小农时代的做法，现在都21世纪了，时代变了，让你想一种通用解决方案，让系统走向工业时代！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你似懂非懂点了点头，查了各种CSDN、博客园、知乎、github，又在技术交流群各种@群里大佬有没有遇到这种场景。一番折腾后终于有了头绪，于是你高兴的向老板汇报：老板，我懂了，这个场景可以用&lt;strong&gt;JPATH&lt;/strong&gt; + &lt;strong&gt;Expression Eval来&lt;/strong&gt;解决！这样一来，再来新的需求只需要写在db里插入俩表达式就可以了，20个需求提过来也不用怕。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你的老板微笑着点了点头，看了一眼自己手上的劳力士，有意无意的晃了晃，说：小伙子很上道，自己也琢磨出解法了，赶紧设计方案，争取本周上线，尽快拿到业务结果，到时候升职加薪少不了你的！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实现方案&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个系统的核心需求有两点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;数据提取&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;规则判断&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据提取即ETL，把mq的msg中关键信息提取出来，提取之后可能还需要简单处理一下(比如msg中事件时间是timestamp，你想转化为RFC3339格式) ，这里可以用JPATH 做数据提取 (如果你写过爬虫，一定知道用xpath去提取HTML中的node消息，jpath就是json数据的提取规则)。配置一个ETL rule，如图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.38917525773195877&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVtLzqUc9akicgbQ1OFibse5e31kG40pNo832CiaVfCIpjzgiaw95bFPWTBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1552&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后是数据规则判断，即题目中提到的规则引擎，我们这里使用 开源库govaluate，比如上面拼车完单的例子，我们可以配置这样的规则：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cc == &lt;span&gt;1&lt;/span&gt; ? ( in(&lt;span&gt;4&lt;/span&gt;, ee)? &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt; ) : ( ff ==&lt;span&gt;4&lt;/span&gt; ? &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;govaluate会把这个表达式构建出一颗ast，然后输入参数进行求值(是不是回忆起来了编译原理？)。接下来让我们研究一下这个库~&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;govaluate介绍与使用注意&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;govaluate支持对C风格的算数/字符串的表达式进行求值。比如这些例子(例子来源于&lt;code&gt;evaluation_test.go&lt;/code&gt;):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;1. 100 ^ (23 * (2 | 5))&lt;br/&gt;2. 5 &amp;lt; 10 &amp;amp;&amp;amp; 1 &amp;lt; 5&lt;br/&gt;3. (foo == &lt;span&gt;true&lt;/span&gt;) || (bar == &lt;span&gt;true&lt;/span&gt;) // foo、bar为变量&lt;br/&gt;4. theft &amp;amp;&amp;amp; period == 24 ? 60     // theft、period为变量&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个库几乎支持你能想象到的任何表达式，有兴趣可以去这个test文件。除此之外它支持拓展UDF， 你可以自己写一些函数支持你的定制业务逻辑，它还支持执行类方法，更多信息可以看README。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们需要使用它时，只需要这几行代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;expression, err := govaluate.NewEvaluableExpression(&lt;span&gt;&quot;foo &amp;gt; 0&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;parameters := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}, &lt;span&gt;8&lt;/span&gt;)&lt;br/&gt;parameters[&lt;span&gt;&quot;foo&quot;&lt;/span&gt;] = &lt;span&gt;-1&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;result, err := expression.Evaluate(parameters);&lt;br/&gt;&lt;span&gt;// result is now set to &quot;false&quot;, the bool value.&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过这个demo我们可以看到它的api被设计成了两步， 第一步&lt;strong&gt;NewEvaluableExpression&lt;/strong&gt;的功能主要是把表达式拓展为一颗AST，&lt;strong&gt;Evaluate&lt;/strong&gt;的主要功能是把用户参数填入ast求值。。举个例子：比如&lt;code&gt;1 + foo + 4 * boo&lt;/code&gt;这个表达式，在两个阶段分别做的事情是这样：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4743083003952569&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJViaTrpK0mHXiaEqJRfGYM6LQBgELYEjdIOaB4OBF17m2Luw8clkia7wib5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1518&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6153846153846154&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVQ47mBDJ15xPpZBLoaVlErkDZgZWS18sShbA8HY3ocnMheZLmCiaD8KA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1456&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么生产项目代码中直接把这两步抄进去就可以了吗？显然不是。通过观察就可以发现， 第一步构造ast依赖的表达式其实是可以预先确定的，且表达式一般不会变化，没有必要用户每次传一个api就构造一颗ast然后求值。可以把表达式存入db，在项目启动or更新配置时加载到内存中， 比如搞一个&lt;code&gt;map[string]*EvaluableExpression&lt;/code&gt;, 把不同表达式的ast进行cache，这样用户每次请求时只需遍历ast进行求值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;预编译所带来的收益很显著，尤其是在你表达式比较复杂的情况下。我对&lt;code&gt;foo &amp;gt; 2? 1:0&lt;/code&gt;这个表达式分别做了现编译和预编译的benchmark，结果如下：&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;现编译&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5235404896421846&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVBmgEDSBEUcmdquNUTQY1icbiatlz2hb3qLjrqpsIGomzYEh3fuicicibK8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2124&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;(现编译 构建ast占用62.3%的cpu开销，而eval只占2%)&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;预编译&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.25850965961361544&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVurkaBVl2OZia4oWZFplicCuQgYibgCgYAB2fESplOm1fY6Yq7xKsnKMZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2174&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;(预编译省掉了构建ast的成本，节约了大量cpu资源) &lt;span&gt;建议大&lt;/span&gt;&lt;span&gt;家如果使用这个库，有条件要用预编译版本。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;govaluate 原理&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看起来govaluate很有意思， 接下来让我们挖一下它的源码。首先来看第一阶段，把表达式拓展为AST时的逻辑，我简单画了一张图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3270321361058601&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVPWYf6YphgOuqBfLlcPFw1N6bKjlfib5LZ0GMudopibibAyavS6BaV9eYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2116&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面以&lt;code&gt;1 + foo + 4 * boo&lt;/code&gt;为例，&lt;strong&gt;parserToken&lt;/strong&gt;后，我们可以得到一堆token:&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6916376306620209&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVWVpWX2KssfbBMLBpDMMQNUR9b3TRZibXVTQc0OuUhJ45oSiaBia15Dq6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1148&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;checkBalance&lt;/strong&gt;没啥好说的，核心功能就看小括号是否成对出现：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5913312693498453&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJViavNCicMTqhBuDiatVrAys0omkQnJWE5ARKY0HrDsZPNAcxGLloFK8sjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;646&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;strong&gt;checkExpressionSyntax&lt;/strong&gt;阶段主要是check token之间是否符合预设规则，核心是这个函数：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.34539473684210525&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVtgibKaazibATy4A9TAxq5oPgzWvCqNK45OmxzyPD3drsTRLHCOVDGV2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1216&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个函数会check当前的token是否是上一个token的合法值，合法值是预设的，比如NUMERIC的合法值是后面这些：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8816425120772947&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVsict9CppqvyWZ0skSKzmiaPFM7HXEGicOicCuplx4zaI5yVVgmVphlfic1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来的 &lt;strong&gt;optimizeTokens&lt;/strong&gt; 函数没啥好说的，主要就是编译一下正则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比较有意思的是&lt;strong&gt;planStages&lt;/strong&gt;这个步骤。&lt;strong&gt;planStages&lt;/strong&gt;这个大步骤内部大概分成了planTokens、reorderStages、elideLiterals这三个小步骤，下面来一一介绍：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2201834862385321&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVRdBQjRfibKJTYjOz4AgyZVUKhj81uL3GcPryszIZ4BySTYbkOicbot3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;872&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;planTokens&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个函数写的让我大开眼界，首先它用func做不同运算符的优先级计算，原理是func接收struct作为参数，而参数中的next为这个函数连接的下一个优先级的func。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2540880503144654&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJV2T1JicV3Vh6so8Y3xVgZRXAe8ZCX0b8qWibkgQuz1Za1bD7jEYQOJTJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1590&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个func优先级打印出来是这样的：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3244274809160305&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJV17VVTWv4icTGWnn3dzuibk8LM33xVIQeWMeLtnicGj6SgzoLnLia1YwjMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1572&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了运算符优先级之后，对于具体的节点，会继续看节点类型，比如是func，accesser还是valueType，valueType的节点对于不同的详细类型也有不同策略，比如数字节点会构建一个Node，而小括号节点会直接parser下一个token来构建优先级更高的树。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于不同的运算符，在这个函数链上会下沉构建出优先级比较高的节点，保证符合数学计算的规律。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;reorderStages&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里主要把ast重排序，让ast由普通tree变成avl tree，树旋转的代码写的特别骚气，比如&lt;code&gt;1 + foo + 4 * boo&lt;/code&gt; 这个表达式，planToken执行完后，会变成这样一颗树：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0653753026634383&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVJOVlURLoZfVh4sicdItpJ5IdFEe38N1VMe2icjxt2oLdvYXdmbUeSOzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;826&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重排序的过程是把相同优先级的节点进行旋转，第一步是交换左右节点：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5721518987341773&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVvrdKuDK3hz1aibicOYtxy8C9ZibryNJ3oGDbzmoTeEIyj3cRakRuwdicdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1580&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步是LL左旋：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5102564102564102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJV1VFuKKcBNzI6LZlR0zCO9ericmh7nQaicIg7ficszQibV3zLBCWHiaibVsBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1560&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就平衡了，一个非常骚气的算法。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;elideLiterals&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个步骤是看叶子节点是否为&lt;code&gt;LITERAL&lt;/code&gt;，比如这棵树：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7185929648241206&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVXPA8iaJ3DDgKPSd0UXLliatRdtWLZaXRKDfN99yOybdNGkRYcg2bIYnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;796&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个阶段，各个子节点会进行dfs计算直接变成：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7753623188405797&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVqHBP0nHmszp7FEdpt3A9jYkfETxmexCL87V5Y31BerIVfzkltyU6cQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;276&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此第一阶段的逻辑梳理完毕。而第二个阶段&lt;strong&gt;Evaluate&lt;/strong&gt;的主要功能是把用户参数填入ast，进行求值。这个过程比较简单，本文不在赘述。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;govaluate 不足&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;govaluate 看起来很美好，真的是这样吗？其实不然，这个项目最后一次commit是2017年，距今已经6年了。我们在使用期间也发现了很多小bug和代码优美度欠缺的地方。下面来简单列举几个：&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;弱类型&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;govaluate所有数字类型都是被解析为float64进行计算的，这么玩写代码爽了，但是当你用&lt;code&gt;1+2+9&lt;/code&gt;做表达式时，可能会得到一个类型为fload64的interface{}结果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08793103448275862&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVKjs28yHVsKeuI3uHM26TzQerJ4z239ibnsy7RbgicFoFBMt2DNCItn1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1160&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;函数限制&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;govaluate的函数有的返回值无法继续做运算。比如这个case：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5785340314136126&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVBPKG5Zqib9gzWFGYXlKaEo9YmeM09h9J1m9u8CtyzibLxG208tKdyaTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1528&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看起来没有任何问题，但是执行会报错：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.042416452442159386&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVAW4fbHuadR8PCdWyntnunjupgdjP8kHlECcm4TMRGXvtr1UMX7XVBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1556&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;参数会去除转义符&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如这段代码：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.23166023166023167&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVb78dAme4YlVPnvXpoW5aNRxIL2lrQIic8PAdMib9zelN3AGW5tC2ZXUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1554&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理论上结果应该含有转义符，实际上结果是:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.10996563573883161&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVIukrf7ydrVpF4SW97teCcRDl23V8ibI1q15MGVUlPqecXUNCYKIY5Jw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1164&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上是这段代码搞的鬼，代码比较简单，就不解释了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.33509234828496043&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVqOWSWZxkuozM9uIaDbtgicx7WaIzvRMOynjRE20u3ibGS6PVZANNe3Ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1516&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;奇奇怪怪的代码&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;this关键字：这个就不举例子了，这个库里所有方法的接收者都是this，被官方建议熏陶过的我，看的我着实蛋疼...&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;双重否定表肯定：token解析阶段有这样的代码，不知道作者为啥要搞个双重否定，我的话，会用一个&lt;code&gt;isQuote&lt;/code&gt;代替。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.12251655629139073&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9IR9Ct85IUoD4jW0aicGeicJVlenic8mFQf9y5c8J2IQ9koKQoo3GTnmMNKwSBbQvEGsOoBySMHic0mxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1208&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;govaluate改进&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一个17年后就没更新过的项目， 也不知道作者还会不会维护。业务发展是不等人，govaluate对于我们服务来说并不能满足需求，很多时候用起来比较别扭，所以我基于我们的场景对于govaluate做了一些定制改造。我个人还是非常喜欢这个库的，于是把代码fork了一份，加了个eplus后缀，改造了上面那几个匪夷所思的问题。并加了个比较定制化的feature：type promotion。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个听起来比较唬人， 其实就是支持更弱类型的表达式运算，比如我的库支持：&#x27;2&#x27; -1, &#x27;4&#x27; * 3，要支持这种功能，核心需要改两种地方：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一种地方是typeCheck。比如subStage会check两个字节点必须是float64类型， 我们要支持string operator num， 可以把typeCheck扩大为可以是chek node是否为 floatOrStr。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二种地方是OpeatorOperate。前面我们把String类型也放进来让它支持计算了，但是在go里str和float终究是无法计算的， 所以到了计算阶段需要做一个type promotion，即把string类型转化为数字类型之后再计算。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结与反思&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;govaluate在我心中还是有一些不完美的地方，我们这里用它也是因为项目初期就引入了这个库，在大量的线上用例使用后要迁移这个库成本巨大， 对于用的不爽的地方只能改了。如果读者朋友有需求， 可以看一下市面上其他的表达式开源库， 比如gval。当然，如果你的场景比较复杂， 需要很多if else 或者for循环，那简单的规则引擎可能满足不了你的需求，此时可以考虑内嵌个更完整的脚本库或者嵌入lua， 不过这样就更复杂了， 慎重考虑把这样的东西直接放在db里面， 后期不好维护。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;反思&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;govaluate这个库对我有很多启发，最主要就是表达式的预编译可以节省大量CPU开销，组内某个项目目前的运行方式是随着请求现编译，构建执行计划dag图，理论上如果能预编译，请求到来只是对于对应param访问存储，可以节省大量CPU开销。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跳脱出govaluate本身，我们系统选择JPATH + Expr做数据提取和条件描述做需求，本质上是因为这边的mq数据是JSON格式，JSON有一定的局限性，描述数据没啥问题，但是描述条件就比较困难了，理论上如果用XML这种技能描述条件，又能描述数据的交互形式，那我们可能会构建一个完全不同的系统。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后稍微打个广告吧， 如果你也想使用govaluate，又有一些定制化的需求，欢迎star我的库然后提个issue， 我想试着维护一个开源库， 嘿嘿。&lt;/p&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎加入 &lt;strong&gt;随波逐流的薯条&lt;/strong&gt; 微信群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;薯条目前有草帽群、木叶群、琦玉群，群交流内容不限于技术、投资、趣闻分享等话题。欢迎感兴趣的同学入群交流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;入群请加薯条的个人微信：709834997。并备注：加入薯条微信群。&lt;/p&gt;&lt;p&gt;欢迎关注我的公众号~&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dba61be31e6974694481b00703340549</guid>
<title>Python 超轻量级日志解决方案</title>
<link>https://toutiao.io/k/lupogxe</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KkCMRahHfcreUibKoGTYVPcPwqcbkHHkInwCjHlgiczjf4s1Bak4p1zSNcgWTgaAzBT15ickq7DS6WCOsG7vpV7ww/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日志，几乎每个程序都需要有的功能，对于很多比较大型的，多人合作的程序，使用专业的日志解决方案，比如 fluentd，是个不错的选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;fluentd 就是重了点，你需要搭建 fluentd 服务，然后不同的应用再通过相应的方式将日志信息传导 fluentd 服务中，当然重的好处是强大，它可以兼容多个语言，只有你的 client 实现好就行，还可以在日志传输管道中加入各种 hook，比如某个带关键字的日志要执行某种操作等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的程序比较轻，之前都是运维同学搭建好了 fluentd+ES 一套日志管理系统，现在要自己弄，有点麻烦，所以决定使用其他方式来实现日志的管理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先列一下我简单的需求：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1. 日志可以存入文件（最基本要求）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2. 日志可以存入 MongoDB（方便搜索分析）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3. 报警日志可以主动告警（方便我及时修复）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;日志存文件&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先来实现前两个功能，利用 Python 自带的 logging 便可以实现将日志内容存入文件的功能，代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; time&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; logging&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; logging.handlers&lt;br/&gt;&lt;br/&gt;LOG_FILENAME = &lt;span&gt;&#x27;main.log&#x27;&lt;/span&gt;&lt;br/&gt;logger = logging.getLogger()&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;set_logger&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    logger.setLevel(logging.INFO)&lt;br/&gt;&lt;br/&gt;    formatter = logging.Formatter(&lt;span&gt;&#x27;%(asctime)s - %(process)d-%(threadName)s - &#x27;&lt;/span&gt;&lt;br/&gt;                                  &lt;span&gt;&#x27;%(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s&#x27;&lt;/span&gt;)&lt;br/&gt;    console_handler = logging.StreamHandler()&lt;br/&gt;    console_handler.setFormatter(formatter)&lt;br/&gt;    logger.addHandler(console_handler)&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;# log output to file&lt;/span&gt;&lt;br/&gt;    file_handler = logging.handlers.RotatingFileHandler(&lt;br/&gt;        LOG_FILENAME, maxBytes=&lt;span&gt;10485760&lt;/span&gt;, backupCount=&lt;span&gt;5&lt;/span&gt;, encoding=&lt;span&gt;&quot;utf-8&quot;&lt;/span&gt;)&lt;br/&gt;    logger.addHandler(file_handler)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;set_logger()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;logging 模块标准的写法，利用 logging 的 handler 功能实现格式化，同样利用 handler 功能，将日志存入到本地文件中。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;日志存 MongoDB&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 log4mongo 库，可以让你的 logging 无缝将日志存入到 MongoDB 中，log4mongo 提供了符合 logging 调用格式的 Handler，直接使用则可，代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; time&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; logging&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; logging.handlers&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; log4mongo.handlers &lt;span&gt;import&lt;/span&gt; MongoHandler&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; logging &lt;span&gt;import&lt;/span&gt; *&lt;br/&gt;&lt;br/&gt;LOG_FILENAME = &lt;span&gt;&#x27;main.log&#x27;&lt;/span&gt;&lt;br/&gt;logger = logging.getLogger()&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;set_logger&lt;/span&gt;&lt;span&gt;(mongodb=False)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    logger.setLevel(logging.INFO)&lt;br/&gt;&lt;br/&gt;    formatter = logging.Formatter(&lt;span&gt;&#x27;%(asctime)s - %(process)d-%(threadName)s - &#x27;&lt;/span&gt;&lt;br/&gt;                                  &lt;span&gt;&#x27;%(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s&#x27;&lt;/span&gt;)&lt;br/&gt;    console_handler = logging.StreamHandler()&lt;br/&gt;    console_handler.setFormatter(formatter)&lt;br/&gt;    logger.addHandler(console_handler)&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; mongodb:&lt;br/&gt;        &lt;span&gt;# log output to mongodb&lt;/span&gt;&lt;br/&gt;        db_name = &lt;span&gt;&#x27;bestpitcher_log&#x27;&lt;/span&gt;&lt;br/&gt;        mon_handler = MongoHandler(host=mongodb_config[&lt;span&gt;&#x27;host&#x27;&lt;/span&gt;],&lt;br/&gt;                                   port=int(mongodb_config[&lt;span&gt;&#x27;port&#x27;&lt;/span&gt;]),&lt;br/&gt;                                   database_name=db_name,&lt;br/&gt;                                   &lt;span&gt;# username=mongodb_config[&#x27;user&#x27;],&lt;/span&gt;&lt;br/&gt;                                   &lt;span&gt;# password=mongodb_config[&#x27;password&#x27;],&lt;/span&gt;&lt;br/&gt;                                   &lt;span&gt;# authentication_db=db_name&lt;/span&gt;&lt;br/&gt;                                   )&lt;br/&gt;        mon_handler.setLevel(logging.INFO)&lt;br/&gt;        logger.addHandler(mon_handler)&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;# log output to file&lt;/span&gt;&lt;br/&gt;        file_handler = logging.handlers.RotatingFileHandler(&lt;br/&gt;            LOG_FILENAME, maxBytes=&lt;span&gt;10485760&lt;/span&gt;, backupCount=&lt;span&gt;5&lt;/span&gt;, encoding=&lt;span&gt;&quot;utf-8&quot;&lt;/span&gt;)&lt;br/&gt;        logger.addHandler(file_handler)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;set_logger(mongodb=&lt;span&gt;True&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实例化 MongoHandler，获得相应的 handler，然后添加到 logger 中，便实现了将日志写入 MongoDB 的效果，如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.12057522123893805&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KkCMRahHfcreUibKoGTYVPcPwqcbkHHkII3ts3laN2SGO7EBhnZkaZmdZKRXYN0VBN0m4v7Y4Eh6YOOS4kt0frQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;904&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;日志报警&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目代码在阿里云上运行，阿里云提供了对日志文件进行监控并通过钉钉报警的功能，跟其他组同事交流，他不希望不是自己组里的项目也使用他这套，会显得很乱，至于会不会乱，不纠结，既然人家不想我这样搞，那就自己搞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单调用，使用飞书的 WebHook 机器人可以非常轻松的实现日志推送报警的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在开始编写前，要理清飞书机器人的概念，飞书中其实有两种机器人，如果你通过【飞书机器人】去搜索，就会有点懵。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;飞书中，每个群组可以设置一个 WebHook 机器人，这个使用个人版飞书便可以直接使用，非常方便，我们的日志监控就利用 WebHook 机器人，其添加方式如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1. 先创建一个群，然后点击设置，然后点击【群机器人】，然后点击【添加机器人】&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7670682730923695&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KkCMRahHfcreUibKoGTYVPcPwqcbkHHkIIy0fZsMpOypndJ8lHKOUnMVZmiaGkVGrzickvyUWhbQG9tK6csKeQb2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;498&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7554630593132154&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KkCMRahHfcreUibKoGTYVPcPwqcbkHHkIwLSSiaSoz69ZkO8VFlN5bJKE7vFSITpdfvyDpNColAq2HwhBxTFqibwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;961&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2. 简单配置 WebHook 机器人&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7554630593132154&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KkCMRahHfcreUibKoGTYVPcPwqcbkHHkINibfUFyBtqSlA2P2q4gfLUiauiaOoOeBooj9cTzRfxz8CFM6icfcend76Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;961&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从配置就可以看出，WebHook 机器人的工作原理，通过 HTTP 请求机器人的 webhook 地址，请求数据的格式符合 webhook 文档定义的格式变可以请求成功了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了安全，我这里还开启了【签名校验】，即如果你通过中间人攻击抓我的包，包中的内容是加密的，而我的后端程序会使用这个签名校验秘钥对加密内容进行解析，获得真实数据，与 WebHook 交互代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; base64&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; hashlib&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; hmac&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; datetime &lt;span&gt;import&lt;/span&gt; datetime&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; requests&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; requests.adapters &lt;span&gt;import&lt;/span&gt; HTTPAdapter&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; requests.packages.urllib3.util &lt;span&gt;import&lt;/span&gt; Retry&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; hashlib&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; base64&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; Crypto.Cipher &lt;span&gt;import&lt;/span&gt; AES&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; configs &lt;span&gt;import&lt;/span&gt; *&lt;br/&gt;&lt;br/&gt;timestamp = int(datetime.now().timestamp())&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AESCipher&lt;/span&gt;&lt;span&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, key)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        self.bs = AES.block_size&lt;br/&gt;        self.key = hashlib.sha256(AESCipher.str_to_bytes(key)).digest()&lt;br/&gt;&lt;br/&gt;&lt;span&gt;    @staticmethod&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;str_to_bytes&lt;/span&gt;&lt;span&gt;(data)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        u_type = type(&lt;span&gt;b&quot;&quot;&lt;/span&gt;.decode(&lt;span&gt;&#x27;utf8&#x27;&lt;/span&gt;))&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; isinstance(data, u_type):&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; data.encode(&lt;span&gt;&#x27;utf8&#x27;&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; data&lt;br/&gt;&lt;br/&gt;&lt;span&gt;    @staticmethod&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;_unpad&lt;/span&gt;&lt;span&gt;(s)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; s[:-ord(s[len(s) - &lt;span&gt;1&lt;/span&gt;:])]&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;decrypt&lt;/span&gt;&lt;span&gt;(self, enc)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        iv = enc[:AES.block_size]&lt;br/&gt;        cipher = AES.new(self.key, AES.MODE_CBC, iv)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; self._unpad(cipher.decrypt(enc[AES.block_size:]))&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;decrypt_string&lt;/span&gt;&lt;span&gt;(self, enc)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        enc = base64.b64decode(enc)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; self.decrypt(enc).decode(&lt;span&gt;&#x27;utf8&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BaseBot&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        self.session = requests.Session()&lt;br/&gt;        &lt;span&gt;# 设置重试&lt;/span&gt;&lt;br/&gt;        self.session.mount(&lt;span&gt;&#x27;https://&#x27;&lt;/span&gt;, HTTPAdapter(&lt;br/&gt;            max_retries=Retry(total=&lt;span&gt;5&lt;/span&gt;, method_whitelist=frozenset([&lt;span&gt;&#x27;GET&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;POST&#x27;&lt;/span&gt;]))))&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;gen_sign&lt;/span&gt;&lt;span&gt;(self, secret)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 拼接时间戳以及签名校验&lt;/span&gt;&lt;br/&gt;        string_to_sign = &lt;span&gt;&#x27;{}\n{}&#x27;&lt;/span&gt;.format(timestamp, secret)&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;# 使用 HMAC-SHA256 进行加密&lt;/span&gt;&lt;br/&gt;        hmac_code = hmac.new(&lt;br/&gt;            string_to_sign.encode(&lt;span&gt;&quot;utf-8&quot;&lt;/span&gt;), digestmod=hashlib.sha256&lt;br/&gt;        ).digest()&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;# 对结果进行 base64 编码&lt;/span&gt;&lt;br/&gt;        sign = base64.b64encode(hmac_code).decode(&lt;span&gt;&#x27;utf-8&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; sign&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BaseMsgBot&lt;/span&gt;&lt;span&gt;(BaseBot)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        super(BaseMsgBot, self).__init__()&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;send_base_msg&lt;/span&gt;&lt;span&gt;(self, msg)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;&quot;&quot;&lt;br/&gt;        发送基本的信息&lt;br/&gt;        :return:&lt;br/&gt;        &quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;        sign = self.gen_sign(WEBHOOK_SECRET)&lt;br/&gt;        params = {&lt;br/&gt;            &lt;span&gt;&quot;timestamp&quot;&lt;/span&gt;: timestamp,&lt;br/&gt;            &lt;span&gt;&quot;sign&quot;&lt;/span&gt;: sign,&lt;br/&gt;            &lt;span&gt;&quot;msg_type&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&quot;content&quot;&lt;/span&gt;: {&lt;span&gt;&quot;text&quot;&lt;/span&gt;: msg}&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        resp = requests.post(WEBHOOK_URL, json=params)&lt;br/&gt;        resp.raise_for_status()&lt;br/&gt;        result = resp.json()&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; result.get(&lt;span&gt;&quot;code&quot;&lt;/span&gt;) &lt;span&gt;and&lt;/span&gt; result.get(&lt;span&gt;&quot;code&quot;&lt;/span&gt;) != &lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;            print(&lt;span&gt;f&quot;发送失败：&lt;span&gt;{result[&lt;span&gt;&#x27;msg&#x27;&lt;/span&gt;]}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;        print(&lt;span&gt;&quot;消息发送成功&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&#x27;__main__&#x27;&lt;/span&gt;:&lt;br/&gt;    BaseMsgBot().send_base_msg(&lt;span&gt;&#x27;懒编程YYDS!&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.47641509433962265&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KkCMRahHfcreUibKoGTYVPcPwqcbkHHkIdpHCx0S3nQOp4mSOdiboZK37voY0pibibJ1yYpT5hrcCpBJrtWSr9pMOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;424&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WebHook 机器人是不与我们的后端程序交互的，即无法实现，我发一段指令给他，他执行相应动作这样的效果，但对于单纯的日志监控，WebHook 够用了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;飞书中另外一种机器人是需要通过创建机器人应用的方式创建，这种机器人不在群组里，而是在工作台中，比如下图我创建了自己的应用机器人。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.31757289204097716&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KkCMRahHfcreUibKoGTYVPcPwqcbkHHkIiaqwCwmMmA2sa02BLwHntEoaDVmFMnAicwoibDg3VenEYWwvC8rYLzgcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1269&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要创建这种机器人，需要企业版飞书，因为机器人获取消息、发送消息的功能需要申请相应的权限，当然，还有国内惯例，通过 APPSECRET 换取 2 小时后会过期的 access_token，这个我也弄了，因为我喜欢通过飞书机器人控制程序的一下动作，比如从日志机器人中发现了严重报错，但日志机器人无法控制程序，而我人在外面，此时可以通过应用机器人执行一些动作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;飞书 WebHook 机器人对接完了，那怎么与 logging 结合在一起使用呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为我已有的项目中已经大量的使用 logger 了，我不希望去逐行修改使用 logger 的方式，而是希望通过某种对 logger 无感的方式来实现日志传递到 WebHook 的效果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单阅读 logging 文档，发现没有 Hook 机制，没办法，只能看 logging 源码走继承重写的解决方案了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里可以总结一下我对库修改的方式，如果一个库，没有我想要的功能（通过文档判断），我就会去看它的源代码，然后尝试将核心类通过继承的方式弄出来，然后再在继承出的子类中添加自己的逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单分析，会发现 logger 下，使用的 info、warning、error 等方法，都会调用_log 方法，_log 方法会进一步执行相应的动作，这些动作我不关心，因为我会通过 super 方法直接使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;琢磨一下自己的需求，对于 info 基本的日志，当然不需要日志报警，简单记录到 MongoDB 中就好了，对于 error 级别日志，报错了嘛，当然希望主动告诉我，但有时 info 基本，我也希望它主动告诉我，基于上述分析，写出如下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; logging&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; logging.handlers&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; logging &lt;span&gt;import&lt;/span&gt; *&lt;br/&gt;&lt;br/&gt;LOG_FILENAME = &lt;span&gt;&#x27;main.log&#x27;&lt;/span&gt;&lt;br/&gt;LOG_LEVEL = ERROR&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyLogger&lt;/span&gt;&lt;span&gt;(Logger)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, name, level=NOTSET)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        super(MyLogger, self).__init__(name=name, level=level)&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;_log&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;            self,&lt;br/&gt;            level,&lt;br/&gt;            msg,&lt;br/&gt;            args,&lt;br/&gt;            exc_info=None,&lt;br/&gt;            extra=None,&lt;br/&gt;            stack_info=False,&lt;br/&gt;            robot=False&lt;br/&gt;    )&lt;/span&gt; -&amp;gt; &lt;span&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;br/&gt;        :param level:&lt;br/&gt;        :param msg:&lt;br/&gt;        :param args:&lt;br/&gt;        :param exc_info:&lt;br/&gt;        :param extra:&lt;br/&gt;        :param stack_info:&lt;br/&gt;        :param robot: 是否要通过飞书机器人将日志发送到飞书上&lt;br/&gt;        :return:&lt;br/&gt;        &quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;        super(MyLogger, self)._log(level, msg, args, exc_info, extra, stack_info)&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; robot &lt;span&gt;or&lt;/span&gt; level &amp;gt;= LOG_LEVEL:&lt;br/&gt;            msg_bot.send_base_msg(msg)&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__reduce__&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; getLogger, ()&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;logger = MyLogger(&lt;span&gt;&#x27;bestpitcher_log&#x27;&lt;/span&gt;, WARNING)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述代码中，实现 MyLogger 基础于 Logger，然后重写其中的_log 方法，_log 方法中，第一件事便是通过 super 调用父类中_log 方法的逻辑，然后再添加自己的逻辑，即发送信息到飞书 webhook 的逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;_log 方法中，我添加了 robot 参数，如果打印日志时，设置了 robot，则发送到 webhook，此外还有默认日志级别，这里是 ERROR 级别，即 error 日志，就算 robot 为 False，也会主动发送日志到 webhook 中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单测试使用一下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; logger &lt;span&gt;import&lt;/span&gt; logger&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_logger&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    logger.info(&lt;span&gt;&#x27;[info] 这条日志只会记录在MongoDB中&#x27;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;# exc_info 获得报错时的调用链&lt;/span&gt;&lt;br/&gt;    logger.error(&lt;span&gt;&#x27;[error] 这条日志会发送到WebHook机器人上&#x27;&lt;/span&gt;, exc_info=&lt;span&gt;True&lt;/span&gt;)&lt;br/&gt;    logger.warning(&lt;span&gt;&#x27;[warning] 这条日志也会发送到WebHook&#x27;&lt;/span&gt;, robot=&lt;span&gt;True&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&#x27;__main__&#x27;&lt;/span&gt;:&lt;br/&gt;    test_logger()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WebHook 效果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.29333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KkCMRahHfcreUibKoGTYVPcPwqcbkHHkI7Hne5s2cKCFRM12Hq6541ouTPcalviamIfWfdCvzPUn7NmzxicRfrTuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MongoDB 效果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.14432989690721648&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KkCMRahHfcreUibKoGTYVPcPwqcbkHHkIOO46cqcumY2f1lAGSZBiaIa9qdwYiaOEEFWzlGdYVuprj3KIzbLZHLPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;970&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结尾&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目 Github 地址：https://github.com/ayuLiao/simple-logger&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是二两，我们下篇文章见。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对了，公众号有我个人微信，可以找我玩。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Enjoy Coding.&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>30845a84df4f9c31bcafd6e43c912fa0</guid>
<title>深入浅出 Spark：内存计算的由来</title>
<link>https://toutiao.io/k/blk5hm3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;自 Spark 问世以来，已有将近十年的光景。2009 年，Spark 诞生于加州大学伯克利分校的 AMP 实验室（the Algorithms, Machines and People lab），并于 2010 年开源。2013 年，Spark 捐献给阿帕奇软件基金会（Apache Software Foundation），并于 2014 年成为 Apache 顶级项目。&lt;/p&gt;&lt;p&gt;2014，是个久远的年代，那个时候，大数据江湖群雄并起，门派林立。论内功，有少林派的 Hadoop，Hadoop 可谓德高望重、资历颇深，2006 年由当时的互联网老大哥 Yahoo！开源并迅速成为 Apache 顶级项目。所谓天下武功出少林，Hadoop 的三招绝学：HDFS（分布式文件系统）、YARN（分布式调度系统）、MapReduce（分布式计算引擎），为各门各派武功绝学的发展奠定了坚实基础。论阵法，有武当派的 Hive，Hive 可谓是开源分布式数据仓库的鼻祖。论剑法，有峨眉派的 Mahout，峨眉武功向来“一树开五花、五花八叶扶”，Mahout 在分布式系统之上提供主流的经典机器学习算法实现。论轻功，有昆仑派的 Storm，在当时，Storm 轻巧的分布式流处理框架几乎占据着互联网流计算场景的半壁江山。&lt;/p&gt;&lt;p&gt;Spark 师从 Hadoop，习得 MapReduce 内功心法，因天资聪慧、勤奋好学，年纪轻轻即独创内功绝学：Spark Core —— 基于内存的分布式计算引擎。青，出于蓝而胜于蓝；冰，水为之而寒于水。凭借扎实的内功，Spark 练就一身能为：&lt;/p&gt;&lt;section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Spark SQL —— 分布式数据分析&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Spark Streaming —— 分布式流处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Spark MLlib —— 分布式机器学习&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Spark GraphX —— 分布式图计算&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;自恃内功深厚、招式变幻莫测，Spark 初涉江湖便立下豪言壮语：One stack to rule them all —— 剑锋直指各大门派。小马乍行嫌路窄，大鹏展翅恨天低。各位看官不禁要问：Spark 何以傲视群雄？Spark 修行的内功心法 Spark Core，与老师 Hadoop 的 MapReduce 绝学相比，究竟有何独到之处？&lt;/p&gt;&lt;section&gt;
&lt;span&gt;1&lt;/span&gt; Hadoop MapReduce&lt;/section&gt;&lt;p&gt;欲探究竟，还需从头说起。在 Hadoop 出现以前，数据分析市场的参与者主要由以 IOE（IBM、Oracle、EMC）为代表的传统 IT 巨头构成，Share-nothing 架构的分布式计算框架大行其道。传统的 Share-nothing 架构凭借其预部署、高可用、高性能的特点在金融业、电信业大放异彩。然而，随着互联网行业飞速发展，瞬息万变的业务场景对于分布式计算框架的灵活性与扩展性要求越来越高，笨重的 Share-nothing 架构无法跟上行业发展的步伐。2006 年，Hadoop 应运而生，MapReduce 提供的分布式计算抽象，结合分布式文件系统 HDFS 与分布式调度系统 YARN，完美地诠释了“数据不动代码动”的新一代分布式计算思想。&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.39090909090909093&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VOOsGfES71KOX45xyOdewiaYdAhRZtFzuNsf8pzL4eb6ankMnSJPLIWniauAQ5ZUtv8ZfkhGibBQWtbg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1430&quot;/&gt;&lt;/section&gt;&lt;p&gt;顾名思义，MapReduce 提供两类计算抽象，即 Map 和 Reduce。Map 抽象用于封装数据映射逻辑，开发者通过实现其提供的 map 接口来定义数据转换流程；Reduce 抽象用于封装数据聚合逻辑，开发者通过实现 reduce 接口来定义数据汇聚过程。Map 计算结束后，往往需要对数据进行分发才能启动 Reduce 计算逻辑来执行数据聚合任务，数据分发的过程称之为 Shuffle。MapReduce 提供的分布式任务调度让开发者专注于业务逻辑实现，而无需关心依赖管理、代码分发等分布式实现问题。在 MapReduce 框架下，为了完成端到端的计算作业，Hadoop 采用 YARN 来完成分布式资源调度从而充分利用廉价的硬件资源，采用 HDFS 作为计算抽象之间的数据接口来规避廉价磁盘引入的系统稳定性问题。&lt;/p&gt;&lt;p&gt;由此可见，Hadoop 的“三招一套”自成体系，MapReduce 搭配 YARN 与 HDFS，几乎可以实现任何分布式批处理任务。然而，近乎完美的组合也不是铁板一块，每一只木桶都有它的短板。HDFS 利用副本机制实现数据的高可用从而提升系统稳定性，但额外的分片副本带来更多的磁盘 I/O 和网络 I/O 开销，众所周知，I/O 开销会严重损耗端到端的执行性能。更糟的是，一个典型的批处理作业往往需要多次 Map、Reduce 迭代计算来实现业务逻辑，因此上图中的计算流程会被重复多次，直到最后一个 Reduce 任务输出预期的计算结果。我们来想象一下，完成这样的批处理作业，在整个计算过程中需要多少次落盘、读盘、发包、收包的操作？因此，随着 Hadoop 在互联网行业的应用越来越广泛，人们对其 MapReduce 框架的执行性能诟病也越来越多。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;2&lt;/span&gt; Spark Core&lt;/section&gt;&lt;p&gt;时势造英雄，Spark 这孩子不仅天资过人，学起东西来更是认真刻苦。当别人都在抱怨老师 Hadoop 的 MapReduce 心法有所欠缺时，他居然已经开始盘算如何站在老师的肩膀上推陈出新。在 Spark 拜师学艺三年后的 2009 年，这孩子提出了“基于内存的分布式计算引擎”—— Spark Core，此心法一出，整个武林为之哗然。Spark Core 最引入注目的地方莫过于“内存计算”，这一说法几乎镇住了当时所有的初学者，大家都认为 Spark Core 的全部计算都在内存中完成，人们兴奋地为之奔走相告。兴奋之余，大家开始潜心研读 Spark Core 内功心法，才打开心法的手抄本即发现一个全新的概念 —— RDD。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;3&lt;/span&gt; RDD&lt;/section&gt;&lt;p&gt;RDD（Resilient Distributed Datasets），全称是“弹性分布式数据集”。全称本身并没能很好地解释 RDD 到底是什么，本质上，RDD 是 Spark 用于对分布式数据进行抽象的数据模型。简言之，RDD 是一种抽象的数据模型，这种数据模型用于囊括、封装所有内存中和磁盘中的分布式数据实体。对于大部分 Spark 初学者来说，大家都有一个共同的疑惑：Spark 为什么要提出这么一个新概念？与其正面回答这个问题，不如我们来反思另一个问题：Hadoop 老师的 MapReduce 框架，到底欠缺了什么？有哪些可以改进的地方？前文书咱们提到：MapReduce 计算模型采用 HDFS 作为算子（Map 或 Reduce）之间的数据接口，所有算子的临时计算结果都以文件的形式存储到 HDFS 以供下游算子消费。下游算子从 HDFS 读取文件并将其转化为键值对（江湖人称 KV），用 Map 或 Reduce 封装的计算逻辑处理后，再次以文件的形式存储到 HDFS。不难发现，问题就出在数据接口上。HDFS 引发的计算效率问题我们不再赘述，那么，有没有比 HDFS 更好的数据接口呢？如果能够将所有中间环节的数据文件以某种统一的方式归纳、抽象出来，那么所有 map 与 reduce 算子是不是就可以更流畅地衔接在一起，从而不再需要 HDFS 了呢？—— Spark 提出的 RDD 数据模型，恰好能够实现如上设想。&lt;/p&gt;&lt;p&gt;为了弄清楚 RDD 的基本构成和特性，我们从它的 5 大核心属性说起。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;属性名&lt;/th&gt;&lt;th&gt;成员类型&lt;/th&gt;&lt;th&gt;属性含义&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;dependencies&lt;/td&gt;&lt;td&gt;变量&lt;/td&gt;&lt;td&gt;生成该 RDD 所依赖的父 RDD&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;compute&lt;/td&gt;&lt;td&gt;方法&lt;/td&gt;&lt;td&gt;生成该 RDD 的计算接口&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;partitions&lt;/td&gt;&lt;td&gt;变量&lt;/td&gt;&lt;td&gt;该 RDD 的所有数据分片实体&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;partitioner&lt;/td&gt;&lt;td&gt;方法&lt;/td&gt;&lt;td&gt;划分数据分片的规则&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;preferredLocations&lt;/td&gt;&lt;td&gt;变量&lt;/td&gt;&lt;td&gt;数据分片的物理位置偏好&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;对于 RDD 数据模型的抽象，我们只需关注前两个属性，即 dependencies 和 compute。任何一个 RDD 都不是凭空产生的，每个 RDD 都是基于一定的“计算规则”从某个“数据源”转换而来。dependencies 指定了生成该 RDD 所需的“数据源”，术语叫作依赖或父 RDD；compute 描述了从父 RDD 经过怎样的“计算规则”得到当前的 RDD。这两个属性看似简单，实则大有智慧。&lt;/p&gt;&lt;p&gt;与 MapReduce 以算子（Map 和 Reduce）为第一视角、以外部数据为衔接的设计方式不同，Spark Core 中 RDD 的设计以数据作为第一视角，不再强调算子的重要性，算子仅仅是 RDD 数据转换的一种计算规则，map 算子和 reduce 算子纷纷被弱化、稀释在 Spark 提供的茫茫算子集合之中。dependencies 与 compute 两个核心属性实际上抽象出了“从哪个数据源经过怎样的计算规则和转换，从而得到当前的数据集”。父与子的关系是相对的，将思维延伸，如果当前 RDD 还有子 RDD，那么从当前 RDD 的视角看过去，子 RDD 的 dependencies 与 compute 则描述了“从当前 RDD 出发，再经过怎样的计算规则与转换，可以获得新的数据集”。&lt;/p&gt;&lt;section&gt;&lt;img data-backh=&quot;225&quot; data-backw=&quot;562&quot; data-ratio=&quot;0.40097970608817357&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VOOsGfES71KOX45xyOdewiaYbHjsZiaN1clicicjx7ibbwcaia7pwGVpxCFU7BwPc09boaiaHDgKjZkdhgTQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1429&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;不难发现，所有 RDD 根据 dependencies 中指定的依赖关系和 compute 定义的计算逻辑构成了一条从起点到终点的数据转换路径。这条路径在 Spark 中有个专门的术语，叫作 Lineage —— 血统。Spark Core 依赖血统进行依赖管理、阶段划分、任务分发、失败重试，任意一个 Spark 计算作业都可以析构为一个 Spark Core 血统。关于血统，到后文书再展开讨论，我们继续介绍 RDD 抽象的另外 3 个属性，即 partitions、partitioner 和 preferredLocations。相比 dependencies 和 compute 属性，这 3 个属性更“务实”一些。&lt;/p&gt;&lt;p&gt;在分布式计算中，一个 RDD 抽象可以对应多个数据分片实体，所有数据分片构成了完整的 RDD 数据集。partitions 属性记录了 RDD 的每一个数据分片，方便开发者灵活地访问数据集。partitioner 则描述了 RDD 划分数据分片的规则和逻辑，采用不同的 partitioner 对 RDD 进行划分，能够以不同的方式得到不同数量的数据分片。因此，partitioner 的选取，直接决定了 partitions 属性的分布。preferredLocations —— 位置偏好，该属性与 partitions 属性一一对应，定义了每一个数据分片的物理位置偏好。具体来说，每个数据分片可以有以下几种不同的位置偏好：&lt;/p&gt;&lt;section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;本地内存：数据分片已存储在当前计算节点的内存中，可就地访问&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;本地磁盘：数据分片在当前计算节点的磁盘中有副本，可就地访问&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;本机架磁盘：当前节点没有分片副本，但是同机架其他机器的磁盘中有副本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他机架磁盘：当前机架所有节点都没有副本，但其他机架的机器上有副本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无所谓：当前数据分片没有位置偏好&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;根据“数据不动代码动”的原则，Spark Core 优先尊重数据分片的本地位置偏好，尽可能地将计算任务分发到本地计算节点去处理。显而易见，本地计算的优势来源于网络开销的大幅减少，进而从整体上提升执行性能。&lt;/p&gt;&lt;p&gt;RDD 的 5 大属性从“虚”与“实”两个角度刻画了对数据模型的抽象，任何数据集，无论格式、无论形态，都可以被 RDD 抽象、封装。前面提到，任意分布式计算作业都可以抽象为血统，而血统由不同 RDD 抽象的依次转换构成，因此，任意的分布式作业都可以由 RDD 抽象之间的转换来实现。理论上，如果计算节点内存足够大，那么所有关于 RDD 的转换操作都可以放到内存中来执行，这便是“内存计算”的由来。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;4&lt;/span&gt; 土豆工坊&lt;/section&gt;&lt;p&gt;从理论出发学习、理解新概念总是枯燥而乏味，通过生活化的类比来更好地理解 RDD 的构成和内存计算的由来也许会更轻松一些。假设有个生产桶装薯片的工坊，这个工坊规模小、工艺也比较原始。为了充分利用每一颗土豆、降低生产成本，工坊使用 3 条流水线来同时生产 3 种不同尺寸的桶装薯片，分别是小号、中号、大号桶装薯片。3 条流水线可以同时加工 3 颗土豆，每条流水线的作业流程都是一样的，即土豆的清洗、切片、烘焙、分发、装桶，其中分发环节用于区分小号、中号、大号 3 种薯片。所有小号薯片都会分发给第一条流水线，中号薯片分发给第二条流水线，不消说，大号薯片都分发给第三条流水线。看得出来，这家工坊工艺虽然简单，倒是也蛮有章法。桶装薯片的制作流程，与 Spark 分布式计算的执行过程颇为神似。&lt;/p&gt;&lt;section&gt;&lt;img data-backh=&quot;134&quot; data-backw=&quot;562&quot; data-ratio=&quot;0.23776223776223776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VOOsGfES71KOX45xyOdewiaY5sRpkT8wicBZFqSLFV3MEFDSX9ibWkVr5pBgEPDPVWrYlrwXX9A8SXtw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1430&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;我们先从食材的视角审视薯片的加工流程，首先，3 颗土豆作为原始素材被送上流水线。流水线的第一道工序是清洗，原来带泥的土豆经过清洗变成了一颗颗“干净的土豆”。第二道工序是切片，土豆经过切片操作后，变成了一枚枚大小不一、薄薄的薯片，当然，这些薯片都还是生的，等到烘烤之后方能食用。第三道工序正是用来烘焙，生薯片在经过烘烤后，变成了可以食用的零食。到目前为止，所有流水线上都生产出了 “原味”的薯片，不过，薯片的尺寸参差不齐，如果现在就装桶的话，一来用户体验较差，二来桶的利用效率也低，不利于节约成本。因此，流水线上增加了分发的环节，分发操作先把不同尺寸的薯片区分开，然后根据预定规则把不同尺寸的薯片发送到对应的流水线上。每条流水线都执行同样的分发操作，即先区分大小号，然后再转发薯片。分发步骤完成后，每条流水线的薯片尺寸大小相当，最后通过机械手把薯片封装到对应尺寸的桶里，从而完成一次完整的薯片加工流程。&lt;/p&gt;&lt;p&gt;横看成岭侧成峰，我们再从流水线的视角，重新审视这个过程。从头至尾，除了分发环节，3 条流水线没有任何交集。在分发环节之前，每条流水线都是专心致志、各顾各地开展工作 —— 把土豆食材加载到流水线上、清洗、切片、烘焙；在分发环节完成后，3 条流水线也是各自装桶，互不影响。流水线式的作业方式提供了较强的容错能力，如果某个加工环节出错，流水线只需要重新加载一颗新的土豆食材就能够恢复生产。例如，假设第一条流水线在烘焙阶段不小心把薯片烤糊了，此时只需要在流水线的源头重新加载一颗新的土豆，所有加工流程会自动重新开始，不会影响最终的装桶操作。另外，3 条流水线提供了同时处理 3 颗土豆的能力，因此土豆工坊的并发能力为 3，每次可以同时装载并加工 3 颗土豆，大幅地提升了生产效率。&lt;/p&gt;&lt;p&gt;那么，用土豆工坊薯片加工的流程类比 Spark 分布式计算，会有哪些有趣的发现呢？仔细对比，每一种食材形态，如刚从地里挖出来的土豆食材、清洗后的“干净土豆”、生薯片、烤熟的薯片、分发后的薯片，不就是 Spark 中的 RDD 抽象吗？每个 RDD 都有 dependencies 和 compute 属性，对应地，每一种食材形态的 dependencies 就是流水线上前一个步骤的食材形态，而其 compute 属性就是从前一种食材形态转换到当前这种食材形态的加工方法。例如，对于烤熟的薯片（图中 bakedChipsRDD）来说，它的 dependencies 就是上一步的“已切好的生薯片”（chipsRDD），而它的 compute 属性，就是“烘焙”这一工艺方法。在土豆工坊的制作流程中，从头至尾会产生 6 个 RDD，即 potatosRDD、cleanedPotatosRDD、chipsRDD、bakedChipsRDD 和 shuffledBakedChipsRDD，分别对应不同的食材形态。注意，RDD 是对数据模型的抽象，它的 partitions 属性会对应多个数据分片实体。例如，对于原始食材 potatosRDD，它的 partitions 属性对应的是图中的 3 颗带泥土豆，每颗土豆代表一个“数据分片”。&lt;/p&gt;&lt;p&gt;同理，chipsRDD 的 partitions 属性包含的是从 3 颗土豆切出来的所有“生薯片”，每一枚生薯片都有一个 preferredLocation 用来标记自己所在的流水线，所有生薯片的 preferredLocation 集合构成了 chipsRDD 的 preferredLocations 属性。不难发现，如果我们把土豆工坊中的流水线看成是分布式计算节点，流水线上每一种食材形态的转换，都可以在计算节点中按序完成。特别地，如果节点内存足够大，那么所有上述转换，都可以在内存中完成。随着纳米工艺的飞速发展，在不远的将来，也许内存的价格会像现在的磁盘一样便宜。正是基于这样的判断，Spark 提出了“内存计算”的概念。&lt;/p&gt;&lt;section&gt;&lt;img data-backh=&quot;103&quot; data-backw=&quot;562&quot; data-ratio=&quot;0.18264520643806859&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VOOsGfES71KOX45xyOdewiaYuFoHWHqC3CCsfUdoUaqjT2njsbMvZgWaXvpLpCib7ep3yrWAI0icx3Cw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1429&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;
&lt;span&gt;5&lt;/span&gt; Show me the code&lt;/section&gt;&lt;p&gt;Linus Torvalds 他老人家常说：“Talk is cheap. Show me the code.”。在本篇的最后，我们通过代码示例来直观地感受一下 RDD 的转换过程。学习一门新的编程语言，我们通常从“Hello World”开始；学习分布式开发，我们得从“Word Count”说起。在开始之前，我们准备一个纯文本文件，内容非常简单，只有 3 行文本，如下图所示：&lt;/p&gt;&lt;section&gt;&lt;img data-backh=&quot;223&quot; data-backw=&quot;562&quot; data-ratio=&quot;0.39618138424821003&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VOOsGfES71KOX45xyOdewiaYF510E20yLJiaVCeQGbHmbG26X9awD115wibXYnvNsyNB1caCFVpPfT8Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;419&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;“Word Count”任务的目标是拆分文本中的单词并对所有单词计数，对于上图中的文本内容，我们期望的结果是 I 的计数是 3，chips 的计数为 2，等等。在用代码来实现这个任务之前，我们先来思考一下：解决这个问题，都需要哪些步骤。首先，我们需要将文件内容读取到计算节点内存，同时对数据进行分片；对于每个数据分片，我们要将句子分割为一个个的单词，同样的单词可能存在于多个不同的分片中（如单词 I），因此需要对单词进行分发，从而使得同样的单词只存在于一个分片之中；最后，在所有分片上计算每个单词的计数。对于这样一个分词计数任务，如果采用 Hadoop MapReduce 框架来实现，往往需要用 Java 来实现 Map、Reduce 抽象，编写上百行代码。得益于 Spark RDD 数据模型的设计及其提供的丰富算子，无论是用 Java、Scala 还是 Python，只消几行代码，即可实现“Word Count”任务。&lt;/p&gt;&lt;section&gt;&lt;img data-backh=&quot;260&quot; data-backw=&quot;562&quot; data-ratio=&quot;0.4632610216934919&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VOOsGfES71KOX45xyOdewiaYMhvqZjFETrDKKSYzUdXHNwlvic5VnM4CHdCEUWsrZv2zhrQBMZwFpTg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1429&quot;/&gt;&lt;/section&gt;&lt;p&gt;结合刚刚分析的“解题步骤”，我们首先通过 textFile 算子将文件内容加载到内存，同时对数据进行分片。然后，用 flatMap 和 map 算子实现分词和计 1 的操作。这里计 1 的目的有二，一来是将数据转换为（键, 值）对的形式从而调用 pairRDD 相关算子；二来为 Map 端聚合计算打下基础。关于 pairRDD、性能优化，我们在后文书会详细展开，此处先行略过。最后，通过 reduceByKey 算子完成单词的分发和计数。在这份代码中，我们仅用 5 行 Scala code 就实现了“Word Count”分布式计算作业。在算子的驱动下，不同形态 RDD 之间的依赖关系与转换过程一目了然。那么，如果把这段代码放到土豆工坊的流水线上，会是怎样的流程呢？&lt;/p&gt;&lt;section&gt;&lt;img data-backh=&quot;174&quot; data-backw=&quot;562&quot; data-ratio=&quot;0.30979020979020977&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VOOsGfES71KOX45xyOdewiaYDUDv1sVPeOeuI2icqiaUICbVgibzwc9Yfb5MCB54xy7hSHfJoSgjyj11Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1430&quot;/&gt;&lt;/section&gt;&lt;section&gt;
&lt;span&gt;6&lt;/span&gt; Postscript&lt;/section&gt;&lt;p&gt;本篇是《Spark 分布式计算科普专栏》的第一篇，笔者学浅才疏、疏漏难免。如果您有任何疑问，或是觉得文章中的描述有所遗漏或不妥，欢迎在评论区留言、讨论。掌握一门技术，书本中的知识往往只占两成，三成靠讨论，五成靠实践。更多的讨论能激发更多的观点、视角与洞察，也只有这样，对于一门技术的认知与理解才能更深入、牢固。在本篇博文中，我们从分布式计算发展历史的角度，审视了 Spark、RDD 以及内存计算的由来；以 RDD 的 5 大核心属性展开，讲解 RDD 的构成、依赖关系、转换过程，并结合“土豆工坊”的生活化示例来类比 RDD 转换和 Spark 分布式内存计算的工作流程。&lt;/p&gt;&lt;p&gt;最后，我们用一个简单的代码示例 —— Word Count 来直观地体会 Spark 算子与 RDD 的转换逻辑。细心的读者可能早已发现，文中多次提及“后文书再展开”，Spark 是一个精妙而复杂的分布式计算引擎，在本篇博文中我们不得不对 Spark 中的许多概念都进行了“前置引用”。换句话说，有些概念还没来得及解释（如 Lineage —— 血统），就已经被引入到了本篇博文中。这样的叙述方法也许会给一些读者带来困惑，毕竟，用一个还未说清的概念，去解释另一个新概念，总是感觉没那么牢靠。常言道：“出来混，迟早是要还的”。在后续的专栏文章中，我们会继续对 Spark 的核心概念与原理进行探讨，尽可能地还原 Spark 分布式内存计算引擎的全貌。&lt;/p&gt;&lt;p&gt;&lt;span&gt;作者简介：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;吴磊，Spark Summit China 2017 讲师、World AI Conference 2020 讲师，曾任职于 IBM、联想研究院、新浪微博，具备丰富的数据库、数据仓库、大数据开发与调优经验，主导基于海量数据的大规模机器学习框架的设计与实现。现担任 Comcast Freewheel 机器学习团队负责人，负责计算广告业务中机器学习应用的实践、落地与推广。热爱技术分享，热衷于从生活的视角解读技术，曾于《IBM developerWorks》和《程序员》杂志发表多篇技术文章。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;h5&gt;&lt;span/&gt;今日荐文&lt;span/&gt;&lt;/h5&gt;&lt;p&gt;点击下方图片即可阅读&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651041914&amp;amp;idx=1&amp;amp;sn=059ae1be87783817441ec2bbbc3c232a&amp;amp;chksm=bdbe48298ac9c13f62075c8bd77673161a8a0b64dc77fdf382ff18e3ae0dbeaf8eadeb06526d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.5505376344086022&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VM6zia0bf9gVyaZFn7eITk4zGWNHODyvx3WrATZzZy7tafZ3Jqgwhz83esPg4aHvE6oVo3ic7N5AMcw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;930&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;120 天已至，华为全面断芯，没有 Plan B&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;hr/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;InfoQ 读者交流群上线啦！各位小伙伴可以扫描下方二维码，添加 InfoQ 小助手，回复关键字“&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;进群&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;”申请入群。回复“&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;资料&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;”，获取资料包传送门，注册 InfoQ 网站后，可以任意领取一门极客时间课程，免费滴！大家可以和 InfoQ 读者一起畅所欲言，和编辑们零距离接触，超值的技术礼包等你领取，还有超值活动等你参加，快来加入我们吧！&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-ratio=&quot;1&quot; data-w=&quot;396&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VMbposTkCibHIp3Gx4nCK08bvyGbOhibN6YgOt5A0zdQ1prTfZKicnZLLic6VUfdicYYUowH9nFCff3SKA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages __bg_gif&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;643&quot; data-ratio=&quot;1.1515625&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YriaiaJPb26VNBX66P2F9dF2yuYfbcibGMuaBYgvK62MGPE9HhgU2vptFAUZdaO2cGKCsP4h1DnibIGywKSkFv9b6g/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点个在看少个 bug&lt;/span&gt; &lt;span&gt;👇&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bbb99026cd497ba0553b462f9fab039e</guid>
<title>30 分钟学会 SVD 矩阵分解（Python代码）</title>
<link>https://toutiao.io/k/hhp2snp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是东哥。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SVD在机器学习中是非常重要的，利用神奇的矩阵变换可以实现很多功能，比如图像压缩、降维等等。&lt;strong&gt;本篇介绍SVD的原理、应用、以及在Python代码中的使用。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SVD(Singular Value Decomposition)奇异值分解分解是机器学习中最重要的矩阵分解方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它能够将一个任意形状的矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 750 716&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;分解成一个正交矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;U&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 767 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;和一个对角矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Sigma&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 722 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;以及另一个正交矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;V^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 1404 863.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(856.2, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的乘积。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SVD分解具有非常深刻的几何含义。矩阵实际上对应着一种线性变换，一个矩阵作用到一个向量上，会得到一个新的向量。任何一个矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 750 716&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的操作效果可以分解成一次旋转&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;V^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 1404 863.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(856.2, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，一次拉伸和维度改变&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Sigma &quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 722 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，以及另外一次旋转&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;U&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 767 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;三者作用效果的合成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SVD分解通常用于数据压缩和数据降维。用于数据降维时，既可以对列降维，也可以对行降维，其中对列的降维等价于PCA的降维。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不仅如此，SVD算法还可以用于在声音和图像处理中剥离背景信号，在推荐算法中也经常出现它的身影。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、SVD矩阵分解简介&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SVD分解将任意矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 750 716&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;分解成一个正交矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;U&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 767 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;和一个对角矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Sigma&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 722 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;以及另一个正交矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;V^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 1404 863.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(856.2, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的乘积。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对角矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Sigma&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 722 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的对角元称为矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 750 716&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的奇异值，可以证明，奇异值总是大于等于0的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当对角矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Sigma&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 722 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的奇异值按从大到小排列时，SVD分解是唯一的。&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;A = U \Sigma V^T&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -891.7 4976.6 973.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1027.8, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2083.6, 0)&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2850.6, 0)&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(3572.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(856.2, 413) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/section&gt;&lt;/span&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/NOM5HN2icXzx1zD2ib9saxv55hvj7NyMkqbmBytLD1WbRJ7GdsicYZaB5nkjad1w0Q3Kn3pb0RvxIC8tiatQD9ibqrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假定&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 750 716&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;是&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;m\times n&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -491 2700.4 502&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1100.2, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2100.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;维的，则 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;U&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 767 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 是&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;m\times m&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -491 2978.4 502&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1100.2, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2100.4, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;维的，&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Sigma&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 722 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;m\times n&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -491 2700.4 502&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1100.2, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2100.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;维的，&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;V^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 1404 863.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(856.2, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;n\times n&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -491 2422.4 502&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(822.2, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1822.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 维的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SVD分解有着非常深刻的几何含义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;矩阵实际上是对应着一种线性变换。一个矩阵作用到一个向量上，会得到一个新的向量。任何一个矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 750 716&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的操作效果可以分解成一次旋转&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;V^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 1404 863.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(856.2, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，一次拉伸和维度改变&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Sigma &quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 722 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，以及另外一次旋转&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;U&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 767 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;三者作用效果的合成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意正交矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;V^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 1404 863.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(856.2, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;和&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;U&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 767 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;作用到向量后是不会改变向量长度的，所以对应着旋转变换。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、SVD分解的数学推演&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A = U \Sigma V^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 4976.6 923.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1027.8, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2083.6, 0)&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2850.6, 0)&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(3572.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(856.2, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;  可以推出&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A A^T = (U \Sigma V^T)(V \Sigma^T U^T) = U(\Sigma\Sigma^T)U^T &quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/Hp9HAaP9GFCa0MxhOKaY0UU4G5ToEDfIx8iaRicBZN53DfNcz5ZHwRqZUwrpDibxeluPLEhg0FPia4OeVonGVaQggOs0hvofRwrG/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;U^TA A^TU = \Sigma\Sigma^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 7521.8 923.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(833.8, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1381.6, 0)&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(2131.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(750, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3429.4, 0)&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4474.2, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5530, 0)&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(6252, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(722, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Sigma\Sigma^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 1991.8 841.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(722, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(722, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 依然是对角矩阵，又U为正交矩阵。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;(\Sigma\Sigma^T)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 2769.8 1091.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(1111, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(722, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2380.8, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;为&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A A^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 2047.8 841.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(750, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(750, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的相似对角矩阵，其对角元为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A A^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 2047.8 841.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(750, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(750, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的特征值，U由其对应特征向量构成，这些向量称为A的左奇异向量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Sigma&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 722 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的对角元为&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A A^T&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 2047.8 841.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(750, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(750, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;特征值的平方根，称之为矩阵A的奇异值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似地&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;V&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 769 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;由&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;A^TA&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 2047.8 841.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(750, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1297.8, 0)&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的特征向量构成，这些向量称为A的右奇异向量。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、SVD分解和数据压缩&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;奇异值描述了矩阵对应的拉伸变换在各个方向的比例，是矩阵的重要特征。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;奇异值的分布通常非常不均，在很多的情况下前10%甚至1%的奇异值之和就占了全部奇异值之和的99%以上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我们可以用前&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;r&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -442 451 453&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;个大的奇异值来近似的描述矩阵。$(r&amp;lt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是SVD分解用来进行数据压缩的原理。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/NOM5HN2icXzx1zD2ib9saxv55hvj7NyMkqTDFn9cDTNAIJX4UR0ghZucHx7UFibwkbibQ8hxry1dGt7MZZ5O6NRRMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设 m = 10000,n = 8000,原来存储矩阵A需要存储8000万个数字，如果经过奇异值分解发现前100个奇异值贡献了99%的奇异值之和，于是可以近似只保留这100个奇异值及对应的左右奇异向量，那么只需要保留100+10000×100+100×8000= 180.01万个数字，只有原来的不到2.3%。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 下面的范例示范SVD分解用于图片数据压缩。&lt;/span&gt;&lt;br/&gt;%matplotlib inline &lt;br/&gt;%config InlineBackend.figure_format = &lt;span&gt;&#x27;svg&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; numpy &lt;span&gt;as&lt;/span&gt; np &lt;br/&gt;&lt;span&gt;from&lt;/span&gt; matplotlib &lt;span&gt;import&lt;/span&gt; pyplot &lt;span&gt;as&lt;/span&gt; plt&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; skimage &lt;span&gt;import&lt;/span&gt; data&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;compressBySVD&lt;/span&gt;&lt;span&gt;(img,r)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    u,s,vt = np.linalg.svd(img)&lt;br/&gt;    ur = u[:,&lt;span&gt;0&lt;/span&gt;:r]&lt;br/&gt;    sr = s[&lt;span&gt;0&lt;/span&gt;:r]&lt;br/&gt;    vtr = vt[&lt;span&gt;0&lt;/span&gt;:r,:]&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; (ur,sr,vtr)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;rebuildFromSVD&lt;/span&gt;&lt;span&gt;(ur,sr,vtr)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    img = ur@np.diag(sr)@vtr&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;(img)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;img = data.camera()/&lt;span&gt;255.0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;plt.figure(figsize=(&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;8&lt;/span&gt;)) &lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i,r &lt;span&gt;in&lt;/span&gt; enumerate([&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;,&lt;span&gt;30&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;,&lt;span&gt;200&lt;/span&gt;],start = &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;    ur,sr,vtr = compressBySVD(img,r)&lt;br/&gt;    compress_ratio = (np.product(ur.shape) + len(sr) + &lt;br/&gt;                      np.product(vtr.shape))/np.product(img.shape)&lt;br/&gt;    img_rebuild = rebuildFromSVD(ur,sr,vtr)&lt;br/&gt;    ax=plt.subplot(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,i)&lt;br/&gt;    ax.imshow(img_rebuild,cmap = &lt;span&gt;&quot;gray&quot;&lt;/span&gt;)&lt;br/&gt;    ax.set_title(&lt;span&gt;&quot;r=%d&quot;&lt;/span&gt;%r+&lt;span&gt;&quot;, compress_ratio=%.2f&quot;&lt;/span&gt;%compress_ratio)&lt;br/&gt;    ax.set_xticks([])&lt;br/&gt;    ax.set_yticks([]) &lt;br/&gt;    &lt;br/&gt;ax = plt.subplot(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;)&lt;br/&gt;ax.imshow(img,cmap = &lt;span&gt;&quot;gray&quot;&lt;/span&gt;)&lt;br/&gt;ax.set_title(&lt;span&gt;&quot;r = 512, original image&quot;&lt;/span&gt;)&lt;br/&gt;ax.set_xticks([])&lt;br/&gt;ax.set_yticks([]) &lt;br/&gt;&lt;br/&gt;plt.show()&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7841907151819323&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/NOM5HN2icXzx1zD2ib9saxv55hvj7NyMkqhUFaE1rM8vYfpxjhbH1b3KbZxvZXF33uCYKa64TN3LnpqxhlHIyXNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;797&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、SVD分解和PCA降维&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PCA降维可以看成是SVD分解的一个应用。PCA降维使用的变换矩阵恰好是SVD分解的右奇异矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;V&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 769 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，由于SVD分解存在着无需通过计算特征值和特征向量的可并行的数值迭代计算算法，sklearn的PCA降维算法正是通过SVD分解计算的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/NOM5HN2icXzx1zD2ib9saxv55hvj7NyMkql9PC0iaR8ZeLD4VIfiaO2a78KT0PXTYUe2mPHcSJiaBDZVtKB77ycLFEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面证明SVD分解的右奇异向量构成的矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;V&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 769 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;恰好是PCA算法所需要的正交变换矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;W&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 1048 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;57&quot; d=&quot;M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假定PCA对应的正交变换矩阵为&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;W&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 1048 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;57&quot; d=&quot;M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，根据PCA算法的数学原理，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;W&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 1048 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;57&quot; d=&quot;M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;由协方差矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;(X - \overline{X})^T(X - \overline{X})&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -1015.5 7992.7 1265.5&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1463.2, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mover&quot; transform=&quot;translate(2463.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(0, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(18, 498.3) scale(0.707)&quot;&gt;&lt;svg x=&quot;0&quot; y=&quot;444&quot; viewbox=&quot;301.2 444 1204.9 246&quot;&gt;&lt;path data-c=&quot;AF&quot; d=&quot;M69 544V590H430V544H69Z&quot; transform=&quot;scale(3.615, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(3333.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4270.2, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4659.2, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5733.5, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mover&quot; transform=&quot;translate(6733.7, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(0, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(18, 498.3) scale(0.707)&quot;&gt;&lt;svg x=&quot;0&quot; y=&quot;444&quot; viewbox=&quot;301.2 444 1204.9 246&quot;&gt;&lt;path data-c=&quot;AF&quot; d=&quot;M69 544V590H430V544H69Z&quot; transform=&quot;scale(3.615, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(7603.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的各个特征向量组成，它能够将协方差矩阵相似对角化。&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;W^T(X - \overline{X})^T(X - \overline{X})W = \Lambda&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/Hp9HAaP9GFCa0MxhOKaY0UU4G5ToEDfIJuEBvBJdxFC4RPZkBwuJmrHPw32DO2Cq2LsCD8IG7RnkEUgdJIzctswRrKqnf4tF/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Lambda&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 694 716&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;39B&quot; d=&quot;M320 708Q326 716 340 716H348H355Q367 716 372 708Q374 706 423 547T523 226T575 62Q581 52 591 50T634 46H661V0H653Q644 3 532 3Q411 3 390 0H379V46H392Q464 46 464 65Q463 70 390 305T316 539L246 316Q177 95 177 84Q177 72 198 59T248 46H253V0H245Q230 3 130 3Q47 3 38 0H32V46H45Q112 51 127 91Q128 92 224 399T320 708Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;为&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;(X - \overline{X})^T(X - \overline{X})&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -1015.5 7992.7 1265.5&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1463.2, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mover&quot; transform=&quot;translate(2463.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(0, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(18, 498.3) scale(0.707)&quot;&gt;&lt;svg x=&quot;0&quot; y=&quot;444&quot; viewbox=&quot;301.2 444 1204.9 246&quot;&gt;&lt;path data-c=&quot;AF&quot; d=&quot;M69 544V590H430V544H69Z&quot; transform=&quot;scale(3.615, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(3333.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4270.2, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4659.2, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5733.5, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mover&quot; transform=&quot;translate(6733.7, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(0, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(18, 498.3) scale(0.707)&quot;&gt;&lt;svg x=&quot;0&quot; y=&quot;444&quot; viewbox=&quot;301.2 444 1204.9 246&quot;&gt;&lt;path data-c=&quot;AF&quot; d=&quot;M69 544V590H430V544H69Z&quot; transform=&quot;scale(3.615, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(7603.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的相似对角矩阵，且对角元由大到小排列。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;利用&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;X - \overline{X}&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -1015.5 2944.4 1097.5&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1074.2, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mover&quot; transform=&quot;translate(2074.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(0, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(18, 498.3) scale(0.707)&quot;&gt;&lt;svg x=&quot;0&quot; y=&quot;444&quot; viewbox=&quot;301.2 444 1204.9 246&quot;&gt;&lt;path data-c=&quot;AF&quot; d=&quot;M69 544V590H430V544H69Z&quot; transform=&quot;scale(3.615, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的SVD矩阵分解:&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;X - \overline{X} = U \Sigma V^T&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -1015.5 7171 1097.5&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1074.2, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mover&quot; transform=&quot;translate(2074.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(0, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(18, 498.3) scale(0.707)&quot;&gt;&lt;svg x=&quot;0&quot; y=&quot;444&quot; viewbox=&quot;301.2 444 1204.9 246&quot;&gt;&lt;path data-c=&quot;AF&quot; d=&quot;M69 544V590H430V544H69Z&quot; transform=&quot;scale(3.615, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3222.2, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4278, 0)&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5045, 0)&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(5767, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(856.2, 413) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们有&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;V^T(X - \overline{X})^T(X - \overline{X})V = \Sigma^T\Sigma &amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/Hp9HAaP9GFCa0MxhOKaY0UU4G5ToEDfItOvwcGb5Uslv2D2KOmvTGI2cExCTOPGm0ic9FaXB2FicY3oojrzeWmC7ibk4YgCDmZS/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据SVD分解的数学原理，&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Sigma^T\Sigma&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -841.7 1991.8 841.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(722, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1269.8, 0)&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;也是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;(X - \overline{X})^T(X - \overline{X})&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -1015.5 7992.7 1265.5&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1463.2, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mover&quot; transform=&quot;translate(2463.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(0, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(18, 498.3) scale(0.707)&quot;&gt;&lt;svg x=&quot;0&quot; y=&quot;444&quot; viewbox=&quot;301.2 444 1204.9 246&quot;&gt;&lt;path data-c=&quot;AF&quot; d=&quot;M69 544V590H430V544H69Z&quot; transform=&quot;scale(3.615, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(3333.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4270.2, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4659.2, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5733.5, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mover&quot; transform=&quot;translate(6733.7, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(0, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(18, 498.3) scale(0.707)&quot;&gt;&lt;svg x=&quot;0&quot; y=&quot;444&quot; viewbox=&quot;301.2 444 1204.9 246&quot;&gt;&lt;path data-c=&quot;AF&quot; d=&quot;M69 544V590H430V544H69Z&quot; transform=&quot;scale(3.615, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(7603.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;的相似对角矩阵，且对角元由大到小排列。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是有：&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\Sigma^T\Sigma = \Lambda &amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -891.7 4019.4 973.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(722, 413) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1269.8, 0)&quot;&gt;&lt;path data-c=&quot;3A3&quot; d=&quot;M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2269.6, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3325.4, 0)&quot;&gt;&lt;path data-c=&quot;39B&quot; d=&quot;M320 708Q326 716 340 716H348H355Q367 716 372 708Q374 706 423 547T523 226T575 62Q581 52 591 50T634 46H661V0H653Q644 3 532 3Q411 3 390 0H379V46H392Q464 46 464 65Q463 70 390 305T316 539L246 316Q177 95 177 84Q177 72 198 59T248 46H253V0H245Q230 3 130 3Q47 3 38 0H32V46H45Q112 51 127 91Q128 92 224 399T320 708Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/section&gt;&lt;/span&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;V^T(X - \overline{X})^T(X - \overline{X})V =  \Lambda &amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -1015.5 12193.3 1265.5&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(856.2, 413) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1404, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1793, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2867.2, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mover&quot; transform=&quot;translate(3867.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(0, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(18, 498.3) scale(0.707)&quot;&gt;&lt;svg x=&quot;0&quot; y=&quot;444&quot; viewbox=&quot;301.2 444 1204.9 246&quot;&gt;&lt;path data-c=&quot;AF&quot; d=&quot;M69 544V590H430V544H69Z&quot; transform=&quot;scale(3.615, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(4737.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 413) scale(0.707)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5674.3, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6063.3, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(7137.5, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mover&quot; transform=&quot;translate(8137.7, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(0, 0)&quot;&gt;&lt;path data-c=&quot;58&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(18, 498.3) scale(0.707)&quot;&gt;&lt;svg x=&quot;0&quot; y=&quot;444&quot; viewbox=&quot;301.2 444 1204.9 246&quot;&gt;&lt;path data-c=&quot;AF&quot; d=&quot;M69 544V590H430V544H69Z&quot; transform=&quot;scale(3.615, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(9007.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9396.7, 0)&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(10443.5, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(11499.3, 0)&quot;&gt;&lt;path data-c=&quot;39B&quot; d=&quot;M320 708Q326 716 340 716H348H355Q367 716 372 708Q374 706 423 547T523 226T575 62Q581 52 591 50T634 46H661V0H653Q644 3 532 3Q411 3 390 0H379V46H392Q464 46 464 65Q463 70 390 305T316 539L246 316Q177 95 177 84Q177 72 198 59T248 46H253V0H245Q230 3 130 3Q47 3 38 0H32V46H45Q112 51 127 91Q128 92 224 399T320 708Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是右奇异向量构成的矩阵 𝑉 恰好是PCA算法所需要的正交变换矩阵 𝑊。&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;W = V&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 3150.6 765&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;57&quot; d=&quot;M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1325.8, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2381.6, 0)&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意到PCA算法实际上是一种列降维的方法，实际上利用SVD分解的左奇异矩阵&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;U&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 767 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;也可以对矩阵进行行降维。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/NOM5HN2icXzx1zD2ib9saxv55hvj7NyMkql9PC0iaR8ZeLD4VIfiaO2a78KT0PXTYUe2mPHcSJiaBDZVtKB77ycLFEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 演示SVD用于PCA降维的计算&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;%matplotlib inline &lt;br/&gt;%config InlineBackend.figure_format = &lt;span&gt;&#x27;svg&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; numpy &lt;span&gt;as&lt;/span&gt; np &lt;br/&gt;&lt;span&gt;from&lt;/span&gt; sklearn.decomposition &lt;span&gt;import&lt;/span&gt; PCA&lt;br/&gt;&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; matplotlib &lt;span&gt;import&lt;/span&gt; pyplot &lt;span&gt;as&lt;/span&gt; plt&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; skimage &lt;span&gt;import&lt;/span&gt; data&lt;br/&gt;&lt;br/&gt;X = np.array([[&lt;span&gt;-1.0&lt;/span&gt;, &lt;span&gt;-3&lt;/span&gt;, &lt;span&gt;-2&lt;/span&gt;], [&lt;span&gt;-2&lt;/span&gt;, &lt;span&gt;-1&lt;/span&gt;, &lt;span&gt;-3&lt;/span&gt;], [&lt;span&gt;-3&lt;/span&gt;, &lt;span&gt;-2&lt;/span&gt;, &lt;span&gt;-5&lt;/span&gt;], [&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;], [&lt;span&gt;6&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;], [&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;]])&lt;br/&gt;&lt;br/&gt;pca = PCA(n_components= &lt;span&gt;2&lt;/span&gt;)&lt;br/&gt;X_new = pca.fit_transform(X)&lt;br/&gt;print(&lt;span&gt;&quot;\ndecomposition by pca:&quot;&lt;/span&gt;)&lt;br/&gt;print(&lt;span&gt;&quot;singular value:&quot;&lt;/span&gt;)&lt;br/&gt;print(pca.singular_values_)&lt;br/&gt;print(&lt;span&gt;&quot;X_new:&quot;&lt;/span&gt;)&lt;br/&gt;print(X_new)&lt;br/&gt;&lt;br/&gt;print(&lt;span&gt;&quot;\ndecomposition by svd:&quot;&lt;/span&gt;)&lt;br/&gt;U,S,Vt = np.linalg.svd(X-X.mean(axis = &lt;span&gt;0&lt;/span&gt;))&lt;br/&gt;print(&lt;span&gt;&quot;singular value:\n&quot;&lt;/span&gt;,S[:&lt;span&gt;2&lt;/span&gt;])&lt;br/&gt;print(&lt;span&gt;&quot;X_new:&quot;&lt;/span&gt;)&lt;br/&gt;print(np.dot(X-X.mean(axis = &lt;span&gt;0&lt;/span&gt;),np.transpose(Vt)[:,&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;]))&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 注：降维结果中正负号的差异是因为PCA调整了SVD分解后的U和Vt符号以保持各列最大值取正&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;decomposition by pca:&lt;br/&gt;singular value:&lt;br/&gt;[11.31375337  2.89544001]&lt;br/&gt;X_new:&lt;br/&gt;[[ 3.23378083  1.06346839]&lt;br/&gt; [ 3.88607412 -0.50763321]&lt;br/&gt; [ 6.25267378  0.08479886]&lt;br/&gt; [-3.50509914 -0.96584476]&lt;br/&gt; [-6.02398361  1.89494314]&lt;br/&gt; [-3.84344598 -1.56973242]]&lt;br/&gt;&lt;br/&gt;decomposition by svd:&lt;br/&gt;singular value:&lt;br/&gt; [11.31375337  2.89544001]&lt;br/&gt;X_new:&lt;br/&gt;[[-3.23378083 -1.06346839]&lt;br/&gt; [-3.88607412  0.50763321]&lt;br/&gt; [-6.25267378 -0.08479886]&lt;br/&gt; [ 3.50509914  0.96584476]&lt;br/&gt; [ 6.02398361 -1.89494314]&lt;br/&gt; [ 3.84344598  1.56973242]]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUzODYwMDAzNA==&amp;amp;action=getalbum&amp;amp;album_id=1699019347278561282#wechat_redirect&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;em&gt;&lt;span&gt;1. &lt;/span&gt;&lt;/em&gt;pandas100个骚操作&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;2. &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUzODYwMDAzNA==&amp;amp;action=getalbum&amp;amp;album_id=1838255778403581970#wechat_redirect&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;机器学习原创系列&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;3. &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUzODYwMDAzNA==&amp;amp;action=getalbum&amp;amp;album_id=1816443218394218499#wechat_redirect&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;数据科学干货下载&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;最后给大家&lt;/span&gt;&lt;strong&gt;&lt;span&gt;分享《10本数据挖掘电子书》&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，包括数据分析、统计学、数据挖掘、机器学习。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;现在免费分享出来，有需要的读者可以下载学习，在下面的公众号「&lt;strong&gt;数据挖掘工程师&lt;/strong&gt;」里回复关键字：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;数据挖掘&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，就行。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4OTQ1MTA4OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Iefry9dPrYJ1LbaTxqd4VPOibfZ1tf0fXDUqFOLlPcRPvv4W4Cro4YnhRx2Xib5MId5rECtVMBkmvJk8nSNnsekw/0?wx_fmt=png&quot; data-nickname=&quot;数据挖掘工程师&quot; data-alias=&quot;DataMinings&quot; data-signature=&quot;数万名数据挖掘爱好者的聚集地，致力于前沿数据技术研究。公众号以数据为核心，分享大数据、数据分析、机器学习、深度学习等干货，想学数据我等你来。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>