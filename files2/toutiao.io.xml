<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>79ae919a85624913f926b3e613e4ffcd</guid>
<title>如何将你的开源项目变成稳定的收入来源</title>
<link>https://toutiao.io/k/rklgzc4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; role=&quot;option&quot; title=&quot;链接&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot;&gt;
                                            
                                                                                    &lt;span class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI0MDIwNTQ1Mg==&amp;amp;action=getalbum&amp;amp;album_id=1503969356932759554#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1503969356932759554&quot; data-tag_source=&quot;3&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;#&lt;/span&gt;开源项目&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span class=&quot;article-tag-card__right&quot;&gt;&lt;span class=&quot;weui-hidden_abs&quot;&gt;,&lt;/span&gt;2个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;你可能会维护几个开源项目，有没有想过从中赚钱？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序员经常将空闲时间花在个人软件开发项目上。许多程序员将他们的实验和创新想法转化为每个人都可以免费使用的开源项目。GitHub 上的大部分开源项目都是由开发人员为开发人员制作的。换句话说，程序员可以通过节省额外的开发时间来将大多数开源项目与其软件项目集成。此外，还有许多开源开发人员工具可以让开发人员的生活更轻松。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序员经常把开源项目作为一种爱好来工作，就像我一样。然而，我们在与开源项目合作的同时，还从事着一份软件工程工作，帮助我们支付账单。因此，毫无疑问，如果这些项目帮助我们支付账单，我们可以将更多时间花在我们的开源项目上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我通过&lt;span&gt;我的开源项目&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;赚了相当多的钱。在这个故事中，我将指导你如何在不失去现有社区的情况下将你的开源项目变成一个收入来源。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;确保你的项目解决了一个问题&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一个成功的开源项目背后，都有一个每个人都需要解决的工程问题。例如，&lt;span&gt;zx&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 项目在三个月内获得了超过 18k 的 GitHub 星星，它引入了一种使用 JavaScript 编写类似 Bash 的 shell 脚本的方法。Bash 脚本语言确实很慢，而且对开发人员不友好。当脚本的逻辑变得复杂时，每个程序员都经常与 shell 脚本斗争，因为 Bash 不是一种通用语言。zx 项目解决了大多数开发者面临的一个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1630310052396&quot; data-category_id_list=&quot;48|26|1|55|47|5|24|37|11|50|54|53|52|42|29|43|16|51|36&quot; data-id=&quot;1630310052396&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在你考虑盈利过程之前，你需要确保你的项目是成功的。开源项目的成功取决于开发人员受众的大小。如果您在开源项目的沟通渠道中经常收到特性请求、反馈和问题，那么恭喜您，您可以继续下一步。否则，请确保您的开源项目解决了大多数开发人员面临的问题。此外，请确保维护一个干净且最新的网站和文档。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;让它做好用于生产准备！&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序员寻找开源框架和库，将其纳入各种项目中。不是所有的程序员都会把你的开源项目和业余项目整合在一起，他们可能经常试图把你的项目和企业软件系统整合在一起。因此，你需要使你的开源项目为生产做好准备，以支持企业的整合。生产就绪指的是设计良好、文档完善、可维护、可扩展、稳定、不易出错和功能齐全的软件模块。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确保你的开源项目有上述要求。否则，请彻底测试你的项目，重构你的代码库，并增加更多的功能以满足企业级需求。检查以下故事来验证你的编码技能，因为你的开源项目的质量取决于它们。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;提高编程技能的 5 个实践：https://betterprogramming.pub/5-practices-to-improve-your-programming-skills-e2ed9b8463db&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;在不失去社区的情况下实现商业化&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，我将指导你从你的开源项目中获得收入来源。在继续之前，请务必验证以上两点，因为收入流的成功取决于这些关键事实。开源项目有许多盈利方法（也被称为开源商业模式）：付费开发者支持、免费增值(付费服务)、SaaS 订阅(软件即服务)、众筹、众包和基于捐赠的模式。这些模式具有不同的特性，每种模式都有不同的优缺点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我研究了许多开源盈利模式。最后，我发现基于捐赠的模型非常适合我们个人的开源项目。它不会影响你现有的社区。另一方面，其他盈利方法会直接影响到你的社区，因为这些模式会强制玩家付费，即使你的项目是开源的。基于捐赠的模式接受支付，保留你给予社区的确切自由。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你的项目需要对开发者社区产生一些相当大的影响才能获得捐赠。你的项目在第一阶段可能不会得到更多的捐赠。因此，我们需要一个与主要捐赠模式相一致的后备收入流，以保持您的积极性。如果你能将广告等纯粹的被动收入流与基于捐赠的模式结合起来，那就太棒了。这些都是理论方法。我将解释我是如何为我的开源项目创造收入流的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创造你的收入流&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们知道如何通过广告和捐赠建立一个理论上的收入流，让我们构建一个实用的。首先，你需要选择你要接受捐赠的地方，我选择 Patreon 是因为它的简单性和透明性。将您的捐赠平台链接到项目的网站和代码库，最初，请确保添加一些较低的每月捐赠级别，例如 2 美元、5 美元和 10 美元。原因是任何人都可能倾向于为你的努力捐献这样的金额。始终在你的每一次发布中感谢你的捐赠者，以激励他们继续捐赠订阅。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步是将广告平台整合到你的开源项目的网站上。我们总是使用静态网站生成器来构建开源项目的文档和网站。选择一个静态网站生成器，你可以很容易地放置一些广告块。我选择&lt;span&gt;Docusaurus&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;是因为它的简单性和灵活性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选择一个开源友好的广告平台， Google AdSense 不太适合开源项目的网站。&lt;span&gt;EthicalAds&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 和 &lt;span&gt;Carbon Ads&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; 等平台专为开源项目而设计。我选择 EthicalAds 是因为与 Carbon 平台相比，它提供了更高的收入份额。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我选择基于捐赠的模式来产生收入流，因为我想确保现有开发者社区的自由。世界上最大的开源组织 Apache 软件基金会 (ASF) 也使用基于捐赠的模式来支付其费用。聚集在您的开源项目周围的人每天都做出各种贡献，使它获得成功。有些人可能决定通过捐款来为您的开源项目做出财务贡献。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你需要用你的开源项目赚取收入来源--请确保你解决了一个问题，使它可以生产，接受捐赠，整合一个开源友好的广告平台，并每天不断改进你的项目。使这种收入流发挥作用需要时间，我的开源收入流每月产生的金额接近 100 美元，我希望有一天它会赚更多的钱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于开源，推荐下面这本书：&lt;/p&gt;&lt;section&gt;&lt;mpcps frameborder=&quot;0&quot; class=&quot;js_editor_cps&quot; data-datakey=&quot;1630309875249_0.010239300739570911&quot; data-uid=&quot;1630309875247&quot; data-type=&quot;1&quot; data-product=&quot;&quot; data-templateid=&quot;list&quot; data-pid=&quot;29160368&quot; data-categoryid=&quot;3&quot; data-appuin=&quot;3084391334&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;文章链接请点击阅读&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;相关阅读&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676497614&amp;amp;idx=1&amp;amp;sn=221622a6d9b168f7e8399d692192cbee&amp;amp;chksm=f362d72dc4155e3bae605fa04c637b7335910653ea4281149abca0a408ee59b2b63531b25ac8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WYoaOn5t0APeo0PQLLYbmZFl6JutwoPX6hJg6IQiamwZHs180acecgm0DwVawxDjjYVNoyOxLicpibGF4hibatvCTA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676494626&amp;amp;idx=1&amp;amp;sn=566c9e92802dfe0de5e21af2952801aa&amp;amp;chksm=f362dac1c41553d7fb02e21988fb86ac6fefde7138ff673a053176b069ce7a3501a4c198ae50&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WYoaOn5t0AMDZRHZavLcTB1THMdv74fKKsH0YuLbyqyf2rA2bctxZpDt0PpSbBKwwXiaKqSd5uTmW91jNFuyJuA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;section&gt;&lt;span&gt;原文：https://betterprogramming.pub/how-to-turn-your-open-source-project-into-a-stable-income-stream-4c46b15ed960&lt;br/&gt;&lt;span&gt;作者：Shalitha Suranga&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI0MDIwNTQ1Mg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AN1zVl7Tea9DR1nnHnJKhstY9ibUZsx8PHEXXU6e37qYUDXWVkQTFtcKk84R88icdY0vhbniaSotOiaRw/0?wx_fmt=png&quot; data-nickname=&quot;前端全栈开发者&quot; data-alias=&quot;by-zhangbing-dev&quot; data-signature=&quot;专注分享国内外前端技术、Web全栈开发技术精选文章，大前端技术资讯、优质教程、工具资源等，助力开发者成长。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;猜你喜欢&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;p&gt;&lt;em/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6573e36a94ab503c15cb79be22f481be</guid>
<title>面试中一个暴露能力等级的问题</title>
<link>https://toutiao.io/k/iqhcspb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; role=&quot;option&quot; title=&quot;链接&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot;&gt;
                                            
                                                                                    &lt;span class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUzNjAxODg4MQ==&amp;amp;action=getalbum&amp;amp;album_id=2035342422091579394#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2035342422091579394&quot; data-tag_source=&quot;3&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;#&lt;/span&gt;面试&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span class=&quot;article-tag-card__right&quot;&gt;&lt;span class=&quot;weui-hidden_abs&quot;&gt;,&lt;/span&gt;1个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;通常我写在文章发表出来之前我问的一些面试题都是我要下架的面试题。就是说我有一个面试题库，我会经常更新，淘汰一些。一般淘汰的问题我才敢拿出来全面分析，避免造成面试时候的不公平。&lt;/section&gt;&lt;section&gt;但是有一道题，我面试时必问，我也建议其他的面试官考察这道题。如果面试者能提前准备，回答的很漂亮，再好不过。但是这道题就像自我介绍一样，是个引子。回答的好，会引出下面很多问题。回答的不好，直接决定能力等级的打分。&lt;/section&gt;&lt;section&gt;这道题就是：请介绍你遇到的印象最深的一个问题或者故障，请介绍你是怎么发现、处理、分析和解决的。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;回答举例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;举例一&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;描述：一次收到了服务器宕机的告警，从监控上可以看到机器出现故障当时有非常频繁的fullGC。于是进行了重启，发现没有解决问题。所以我们直接开始排查问题原因，从监控中可以看到一个接口请求量高于平时。通过撸代码发现这个接口里有个sql的where条件失效，每次调用都是全表扫描，所以把服务器打挂了。我们用了1个多小时，定位问题后进行了热修复。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;连环问1：你们的业务量有多少？在开始排查原因之前，除了重启是否有其他的止血措施？&lt;/section&gt;&lt;section&gt;回答：高峰时有几百QPS，出问题正好在低峰期，也就10QPS，所以也没有什么大影响。所以没做其他的止血措施。&lt;/section&gt;&lt;section&gt;我算了一下，业务中断1个多小时，影响业务少数也有4W笔。如果不需要承担一些后果，我猜测：要不就是上层领导自己扛下了压力，没有穿透过来，要不就是这个服务不是核心业务。而回答者的止血措施前期准备不足，稳定性意识也不是特别高。属于中规中矩的开发人员。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;连环问2：这个问题在测试阶段怎么没发现？&lt;br/&gt;&lt;/section&gt;&lt;section&gt;回答：测试用例没有覆盖到。&lt;/section&gt;&lt;section&gt;问题的根因是接口的核心逻辑，还不属于边界或者少量场景，我猜测整个团队把关都不是很严，缺少牛人指导。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;由于两个连环问的回答技术含量一般，我没有就这个问题继续追问。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;举例二&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;描述：一次与外部进行对接，结果从对接方的服务器上调用接口获取不到数据，我们ping、telnet等命令发现都没有问题，没有办法就进行了抓包，看到数据联通性是好的，就想到可能是配置问题，最终查到配置了包大小的限制导致。&lt;/section&gt;&lt;section&gt;我觉得他的回答没有问题，不是我的主要考察方向，我没有追问。从这个回答中，我觉得对他的linux基本命令的掌握达标了。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;举例三&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;描述：做了一个配置中心，用户在使用的时候使用方式不当。公司里主流使用xx1和xx2两种编程语言，这两种语言所用的序列化器肯定是不同的。用户在配置序列化器的使用对整个业务线的所有应用进行了全局配置，把所有服务配置成同一个序列化器。这个地方我们做配置中心的承担少部分责任，主要责任还是用户。本质原因是他们的操作失误，我们还是进行优化，增加了审核环节。&lt;/section&gt;&lt;section&gt;连环问1：除了审核，针对配置中心，是否还有其他的优化空间呢？&lt;br/&gt;&lt;/section&gt;&lt;section&gt;回答：这个地方我们其实有很完善的文档，用户没有按要求操作我们也很无奈。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;这时候，我觉得我们遇到了价值观上的分歧。服务、担当、协同上我们的认知是有差异的，没有谁对谁错，只是有差异。为了避免争执我转移问题到其他不相关问题上。这里说说我自己对此问题的想法：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;这里配置中心需要做保证服务健壮性为核心的优化：1&amp;gt;配置需要灰度生效，而不是一次性全局生效。2&amp;gt;针对业务线级别全局配置这种大范围低频配置，应该增加专家审核环节，由配置专家进行把关，确保符合用户预期。3&amp;gt;像涉及到业务线多个服务的配置修改，需要将配置更新下发给涉及的每个服务负责人进行确认，服务负责人确认后才能生效。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;配置这件事情，我再多说两句，几个月前刚刚做过调查问题，采样范围不广，也不能说多客观。但是从业界近几年的大事故来看，确实非常值得重视：&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6353790613718412&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicYQybamGIH5gmga50RjAJlb8vH2m76yyHWPgaicyLia7ic8k8Bn6GKa5n7RibR7M35iaZH0kv9lkPVYiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;后记&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;前段时间我重温了小时候看的第一部电视剧《雪山飞狐》，小时候看不懂，现在我明白了，整个故事的核心是：一个由于沟通不畅引发的血案。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;故事开始，明末清初，李自成有4个忠心耿耿的护卫，分别姓：胡、苗、范、田。起义失败后，他手下3个护卫因事离开，还有剩下胡护卫和李自成。胡护卫为保李自成，忍辱负重，假意投清。实际上在计划一个东山再起的行动，毕竟他们在一个雪山上埋了一个宝藏，还是有资本的。&lt;/section&gt;&lt;section&gt;行动都计划好了，就差跟另外3个护卫通气了。这时候去找3个护卫，对于原来的事情没有解释，被3个护卫杀了。临死前说：你们其实打不过我，我让着你们，情愿被杀。但你们千万别让我儿子知道你们把我杀了。不然你们打不过他，会死翘翘的。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;我看到这里心里在整理这里面的逻辑：“重要的事情一点也没说，只说了些没用的。不仅如此，最后这段话简直就是在说，我反正死了无所谓，不想辩解。只是我死了，肯定会有人给我报仇，你们也得死。&lt;span&gt;”&lt;/span&gt;我突然明白了：这个胡护卫难道是想明白了反清复明不可能成功，但是又不想落个骂名，所以想把这三个反清复明的兄弟杀了，还想找个正大光明的理由，就以自己为饵，让儿子替自己报仇。这样，既可以让天下免受战火之苦，又保全了名声，好心机呀。&lt;/section&gt;&lt;section&gt;果然，胡护卫的儿子胡一刀来报仇了，他让三个护卫临死前见了一个人，这个人就是李自成，李自成把当年的事情做了澄清。三护卫觉得自己冤枉了胡护卫就自杀了。临死前什么都没跟家人交代，什么鬼，存心让胡一刀背锅？&lt;br/&gt;&lt;/section&gt;&lt;p&gt;胡一刀背着杀死三护卫的锅，田护卫和苗护卫的儿子田归农和苗人凤就来找他了。胡一刀和苗人凤开始了以性命相拼的比武之路。他俩简直是天造地设的CP，惺惺相惜。胡一刀还帮苗人凤报仇，到了苗人凤仇人家，啥都不说，用苗家剑法咔咔咔的把人砍了。连个立地成佛的机会都不给。看其他电视剧，我经常的感觉：都这紧张的节骨眼儿了，你们就先别废话了。看这剧，我的感觉是你们动手前能不能先沟通沟通，着啥急呀？&lt;/p&gt;&lt;p&gt;田归农功夫菜，心眼坏，在苗人凤刀上偷偷喂毒。比武时胡一刀受伤，胡一刀挂了。苗人凤心怀愧疚，见到了自己的人上人蓝，开口闭口就是胡一刀夫妇如何恩爱。两口子结婚第一件事就是带着媳妇见这两个死人。我特明白蓝见到甜言蜜语的田归农，跟着人家跑了，她是看穿了苗人凤是gay。&lt;/p&gt;&lt;p&gt;其实苗人凤深爱自己的前妻，把宝藏地图打成金钗送给了蓝。并且只要蓝活的好好的，就不会杀田归农给胡一刀报仇。蓝很快知道了田归农和自己在一起别有用心，她后悔了。苗人凤也很想让蓝回到自己身边，何况他们还有一个女儿落蓝每天夜里想娘想的偷偷抹泪。然而，他们见面谁也撕不下来脸把心里想的说出来。&lt;/p&gt;&lt;p&gt;蓝过的生不如死，一心求死。死前把金钗交给田归农，让他交还给苗人凤，说：“只要你把这个交给他，他就不会杀你。”苗人凤来了，田归农慌慌张张的把金钗交给苗人凤。苗人凤在剧里终于解释了一回：“田归农呀，这个金钗里就有你心心念念的藏宝图哦。”苗人凤觉得蓝一生都在守护他们之间“钗在人在，钗亡人亡”的承诺；觉得自己在蓝心里比田归农重要。很满意，大笑而去。总结一下苗人凤对蓝做的事情：“他明知道田归农不是好人，完全不和蓝解释，任凭蓝掉进龙潭虎穴。蓝受尽折磨而死，但是死后他知道蓝心中还是他最重要，虚荣心得到满足，没有遗憾了。&lt;span&gt;”&lt;/span&gt;这种人为什么能是一个正面人物的设定？&lt;/p&gt;&lt;p&gt;金庸大大用真挚的文笔写出了在那个语言表达匮乏的年代，人们为此付出的代价。&lt;/p&gt;&lt;p&gt;大家都在抱怨现在的面试太卷了。我有切实的感受，我经常面试完叹息一声：这个同学要是在十几年前面试是能过的。可十几年前中国的互联网行业还在抄袭国外，现在经常是被国外抄袭。中国出品的一些中间件也越来越多的被国外使用。&lt;/p&gt;&lt;p&gt;我们所做的只是比十年前更注重方法了，而自己的成长工作和生活中都能用的上。比如这个年代更重视沟通，甚至沟通技能也成为了面试考察的一个重点之一。我们努力训练来的这个技能不仅能更好的促进工作，还能避免《雪山飞狐》里的悲剧，最重要的是让中国在世界上越来越有地位。当然，还是希望少加班，多些时间，休息着、玩着，就把事情想的更明白了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>27ab3420d8416c74d6739c27d17317dd</guid>
<title>浅谈订单重构之 MySQL 分库分表实战篇</title>
<link>https://toutiao.io/k/gisvlmp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、背景&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发布上篇文章&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU5NTg1ODg2MQ==&amp;amp;mid=2247484071&amp;amp;idx=1&amp;amp;sn=f18638697219a90fa7764155ef852f1f&amp;amp;chksm=fe6ac665c91d4f7356a57e490e98834b99da4ea8fb249780a37babc5699dfa32a1dad27c0c2d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;浅谈订单重构之路&lt;/a&gt;之后，有很多小伙伴想知道，分库分表具体是如何实现的。那么这篇文章具体介绍下，分库分表实战。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、目标&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h5&gt;&lt;span/&gt;本文将完成如下目标:&lt;span/&gt;&lt;/h5&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;* 分表数量: 256    分库数量: 4&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;* 以用户ID(user_id) 为数据库分片Key&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;* 最后测试订单创建，更新，删除, 单订单号查询，根据user_id查询列表操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;架构图:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;323&quot; data-backw=&quot;558&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;323&quot; data-ratio=&quot;0.5792880258899676&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67W8IuD7dibHtyVICl35ptdqAg8kHhuMky6qdHPzslnZy6BiaqsHg3vKM52CH68QRRkQcsibpymqEZjMGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;927&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;表结构如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;`order_XXX`&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;`order_id`&lt;/span&gt; &lt;span&gt;bigint&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;unsigned&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`user_id`&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;0&#x27;&lt;/span&gt; &lt;span&gt;COMMENT&lt;/span&gt; &lt;span&gt;&#x27;订单id&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`status`&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;0&#x27;&lt;/span&gt; &lt;span&gt;COMMENT&lt;/span&gt; &lt;span&gt;&#x27;订单状态&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`booking_date`&lt;/span&gt; datetime &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`create_time`&lt;/span&gt; datetime &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`update_time`&lt;/span&gt; datetime &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;`order_id`&lt;/span&gt;),&lt;br/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_user_id`&lt;/span&gt; (&lt;span&gt;`user_id`&lt;/span&gt;),&lt;br/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_bdate`&lt;/span&gt; (&lt;span&gt;`booking_date`&lt;/span&gt;),&lt;br/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_ctime`&lt;/span&gt; (&lt;span&gt;`create_time`&lt;/span&gt;),&lt;br/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_utime`&lt;/span&gt; (&lt;span&gt;`update_time`&lt;/span&gt;)&lt;br/&gt;) &lt;span&gt;ENGINE&lt;/span&gt;=&lt;span&gt;InnoDB&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;CHARSET&lt;/span&gt;=utf8;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注:  000&amp;lt;= XXX &amp;lt;= 255, 本文重点在于分库分表实践, 只保留具有代表性字段，其它场景可以在此基础上做改进。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;全局唯一ID设计&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要求:1.全局唯一 2:粗略有序 3:可反解出库编号&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1bit + 39bit时间差 + 8bit机器号 + 8bit用户编号(库号) + 8bit自增序列&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;订单号组成项&lt;/th&gt;&lt;th&gt;保留字段&lt;/th&gt;&lt;th&gt;毫秒级时间差&lt;/th&gt;&lt;th&gt;机器数&lt;/th&gt;&lt;th&gt;用户编号(表编号)&lt;/th&gt;&lt;th&gt;自增序列&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;所占字节(单位bit)&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;39&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单机最大QPS: 256000
使用寿命: 17年&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;订单号生成规则说明详见&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU5NTg1ODg2MQ==&amp;amp;mid=2247483780&amp;amp;idx=1&amp;amp;sn=d8b7d87f402d316ef4eecc4683e49444&amp;amp;chksm=fe6ac546c91d4c503ef6d846e7d78d8620b5bf4b5498c7b8451ad3ccf68a62d68a0d173b0230&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;浅谈分布式唯一Id生成器之最佳实践&lt;/a&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、环境准备&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;基本信息&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;项&lt;/th&gt;&lt;th&gt;版本&lt;/th&gt;&lt;th&gt;备注&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;SpringBoot&lt;/td&gt;&lt;td&gt;2.1.10.RELEASE&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mango&lt;/td&gt;&lt;td&gt;1.6.16&lt;/td&gt;&lt;td&gt;wiki地址:https://github.com/jfaster/mango&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HikariCP&lt;/td&gt;&lt;td&gt;3.2.0&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mysql&lt;/td&gt;&lt;td&gt;5.7&lt;/td&gt;&lt;td&gt;测试使用docker一键搭建&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;数据库环境准备&lt;/p&gt;&lt;p&gt;温馨提示：使用docker-compose快速搭建了4主4从数据库集群，实现本地快速一键部署(实现方式查看我公众号文章:&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU5NTg1ODg2MQ==&amp;amp;mid=2247484089&amp;amp;idx=1&amp;amp;sn=a61f8c0e7d821375f3a8e95d5449f360&amp;amp;chksm=fe6ac67bc91d4f6d14c1806eebd6f37ea98d2052f09c2c4579070a1eb9d0761fb6bebf84c73e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;浅谈工作中常用应用软件本地docker化，一键部署它不香吗？&lt;/a&gt;)，生产环境一般由DBA同学搭建。&lt;/p&gt;&lt;p&gt;具体实现请移步查看:&lt;span&gt;https://gitee.com/bytearch_admin/docker-app/tree/main/mysql-cluster&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;建库 &amp;amp; 导入分表&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;* 在mysql master实例分别建库 &lt;/p&gt;&lt;p&gt;&lt;span&gt;172.30.1.21(&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;rder_db_&lt;/span&gt;&lt;span&gt;1)&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;172.30.1.22(&lt;/span&gt;&lt;span&gt;order_db_2)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;172.30.1.23(&lt;/span&gt;&lt;span&gt;ord&lt;/span&gt;&lt;span&gt;er_db_3)&lt;/span&gt;&lt;span&gt;,   172.30.1.24(&lt;/span&gt;&lt;span&gt;order_db_4&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;*  依次导入建表SQL 命令为&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;mysql&lt;/span&gt; -uroot -pbytearch -h172.&lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;21&lt;/span&gt; order_db_1&amp;lt;fast-cloud-mysql-sharding/doc/sql/order_db_1.sql;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;mysql&lt;/span&gt; -uroot -pbytearch -h172.&lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;22&lt;/span&gt; order_db_2&amp;lt;fast-cloud-mysql-sharding/doc/sql/order_db_2.sql;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;mysql&lt;/span&gt; -uroot -pbytearch -h172.&lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;23&lt;/span&gt; order_db_3&amp;lt;fast-cloud-mysql-sharding/doc/sql/order_db_3.sql;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;mysql&lt;/span&gt; -uroot -pbytearch -h172.&lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;24&lt;/span&gt; order_db_4&amp;lt;fast-cloud-mysql-sharding/doc/sql/order_db_4.sql;  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;   &lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、配置&amp;amp;实践&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;pom文件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;            &lt;span&gt;&amp;lt;!-- mango 分库分表中间件 --&amp;gt;&lt;/span&gt; &lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.jfaster&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mango-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.0.1&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;         &lt;br/&gt;             &lt;span&gt;&amp;lt;!-- 分布式ID生成器 --&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.bytearch&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fast-cloud-id-generator&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;${version}&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.0.6&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;常量配置&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; com.bytearch.fast.cloud.mysql.sharding.common;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 分库分表策略常用常量&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ShardingStrategyConstant&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * database 逻辑名称 ，真实库名为 order_db_XXX&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String LOGIC_ORDER_DATABASE_NAME = &lt;span&gt;&quot;order_db&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 分表数 256，一旦确定不可更改&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SHARDING_TABLE_NUM = &lt;span&gt;256&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 分库数, 不建议更改， 可以更改，但是需要DBA迁移数据&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SHARDING_DATABASE_NODE_NUM = &lt;span&gt;4&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;yml 配置&lt;/p&gt;&lt;p&gt;4主4从数据库配置， 这里仅测试默认使用root用户密码，生产环境不建议使用root用户。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;mango:&lt;/span&gt;&lt;br/&gt;  scan-&lt;span&gt;package:&lt;/span&gt; com.bytearch.fast.cloud.mysql.sharding.dao&lt;br/&gt;&lt;span&gt;  datasources:&lt;/span&gt;&lt;br/&gt;    - &lt;span&gt;name:&lt;/span&gt; order_db_1&lt;br/&gt;&lt;span&gt;      master:&lt;/span&gt;&lt;br/&gt;        driver-&lt;span&gt;&lt;span&gt;class&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;com&lt;/span&gt;.&lt;span&gt;mysql&lt;/span&gt;.&lt;span&gt;cj&lt;/span&gt;.&lt;span&gt;jdbc&lt;/span&gt;.&lt;span&gt;Driver&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;jdbc&lt;/span&gt;-&lt;span&gt;url&lt;/span&gt;: &lt;span&gt;jdbc&lt;/span&gt;:&lt;span&gt;mysql&lt;/span&gt;://172.30.1.21:3306/&lt;span&gt;order_db_1&lt;/span&gt;?&lt;span&gt;useUnicode&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;characterEncoding&lt;/span&gt;=&lt;span&gt;utf8&lt;/span&gt;&amp;amp;&lt;span&gt;autoReconnect&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;rewriteBatchedState&lt;/span&gt;&amp;amp;&lt;span&gt;connectTimeout&lt;/span&gt;=1000&amp;amp;&lt;span&gt;socketTimeout&lt;/span&gt;=5000&amp;amp;&lt;span&gt;useSSL&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;user&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;root&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;password&lt;/span&gt;: &lt;span&gt;bytearch&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;maximum&lt;/span&gt;-&lt;span&gt;pool&lt;/span&gt;-&lt;span&gt;size&lt;/span&gt;: 10&lt;br/&gt;        &lt;span&gt;connection&lt;/span&gt;-&lt;span&gt;timeout&lt;/span&gt;: 3000&lt;br/&gt;      &lt;span&gt;slaves&lt;/span&gt;:&lt;br/&gt;        - &lt;span&gt;driver&lt;/span&gt;-&lt;span&gt;class&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;com&lt;/span&gt;.&lt;span&gt;mysql&lt;/span&gt;.&lt;span&gt;cj&lt;/span&gt;.&lt;span&gt;jdbc&lt;/span&gt;.&lt;span&gt;Driver&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;jdbc&lt;/span&gt;-&lt;span&gt;url&lt;/span&gt;: &lt;span&gt;jdbc&lt;/span&gt;:&lt;span&gt;mysql&lt;/span&gt;://172.30.1.31:3306/&lt;span&gt;order_db_1&lt;/span&gt;?&lt;span&gt;useUnicode&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;characterEncoding&lt;/span&gt;=&lt;span&gt;utf8&lt;/span&gt;&amp;amp;&lt;span&gt;autoReconnect&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;rewriteBatchedState&lt;/span&gt;&amp;amp;&lt;span&gt;connectTimeout&lt;/span&gt;=1000&amp;amp;&lt;span&gt;socketTimeout&lt;/span&gt;=5000&amp;amp;&lt;span&gt;useSSL&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;user&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;root&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;password&lt;/span&gt;: &lt;span&gt;bytearch&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;maximum&lt;/span&gt;-&lt;span&gt;pool&lt;/span&gt;-&lt;span&gt;size&lt;/span&gt;: 10&lt;br/&gt;          &lt;span&gt;connection&lt;/span&gt;-&lt;span&gt;timeout&lt;/span&gt;: 3000&lt;br/&gt;    - &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;order_db_2&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;master&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;driver&lt;/span&gt;-&lt;span&gt;class&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;com&lt;/span&gt;.&lt;span&gt;mysql&lt;/span&gt;.&lt;span&gt;cj&lt;/span&gt;.&lt;span&gt;jdbc&lt;/span&gt;.&lt;span&gt;Driver&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;jdbc&lt;/span&gt;-&lt;span&gt;url&lt;/span&gt;: &lt;span&gt;jdbc&lt;/span&gt;:&lt;span&gt;mysql&lt;/span&gt;://172.30.1.22:3306/&lt;span&gt;order_db_2&lt;/span&gt;?&lt;span&gt;useUnicode&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;characterEncoding&lt;/span&gt;=&lt;span&gt;utf8&lt;/span&gt;&amp;amp;&lt;span&gt;autoReconnect&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;rewriteBatchedState&lt;/span&gt;&amp;amp;&lt;span&gt;connectTimeout&lt;/span&gt;=1000&amp;amp;&lt;span&gt;socketTimeout&lt;/span&gt;=5000&amp;amp;&lt;span&gt;useSSL&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;user&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;root&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;password&lt;/span&gt;: &lt;span&gt;bytearch&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;maximum&lt;/span&gt;-&lt;span&gt;pool&lt;/span&gt;-&lt;span&gt;size&lt;/span&gt;: 10&lt;br/&gt;        &lt;span&gt;connection&lt;/span&gt;-&lt;span&gt;timeout&lt;/span&gt;: 3000&lt;br/&gt;      &lt;span&gt;slaves&lt;/span&gt;:&lt;br/&gt;        - &lt;span&gt;driver&lt;/span&gt;-&lt;span&gt;class&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;com&lt;/span&gt;.&lt;span&gt;mysql&lt;/span&gt;.&lt;span&gt;cj&lt;/span&gt;.&lt;span&gt;jdbc&lt;/span&gt;.&lt;span&gt;Driver&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;jdbc&lt;/span&gt;-&lt;span&gt;url&lt;/span&gt;: &lt;span&gt;jdbc&lt;/span&gt;:&lt;span&gt;mysql&lt;/span&gt;://172.30.1.32:3306/&lt;span&gt;order_db_2&lt;/span&gt;?&lt;span&gt;useUnicode&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;characterEncoding&lt;/span&gt;=&lt;span&gt;utf8&lt;/span&gt;&amp;amp;&lt;span&gt;autoReconnect&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;rewriteBatchedState&lt;/span&gt;&amp;amp;&lt;span&gt;connectTimeout&lt;/span&gt;=1000&amp;amp;&lt;span&gt;socketTimeout&lt;/span&gt;=5000&amp;amp;&lt;span&gt;useSSL&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;user&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;root&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;password&lt;/span&gt;: &lt;span&gt;bytearch&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;maximum&lt;/span&gt;-&lt;span&gt;pool&lt;/span&gt;-&lt;span&gt;size&lt;/span&gt;: 10&lt;br/&gt;          &lt;span&gt;connection&lt;/span&gt;-&lt;span&gt;timeout&lt;/span&gt;: 3000&lt;br/&gt;    - &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;order_db_3&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;master&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;driver&lt;/span&gt;-&lt;span&gt;class&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;com&lt;/span&gt;.&lt;span&gt;mysql&lt;/span&gt;.&lt;span&gt;cj&lt;/span&gt;.&lt;span&gt;jdbc&lt;/span&gt;.&lt;span&gt;Driver&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;jdbc&lt;/span&gt;-&lt;span&gt;url&lt;/span&gt;: &lt;span&gt;jdbc&lt;/span&gt;:&lt;span&gt;mysql&lt;/span&gt;://172.30.1.23:3306/&lt;span&gt;order_db_3&lt;/span&gt;?&lt;span&gt;useUnicode&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;characterEncoding&lt;/span&gt;=&lt;span&gt;utf8&lt;/span&gt;&amp;amp;&lt;span&gt;autoReconnect&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;rewriteBatchedState&lt;/span&gt;&amp;amp;&lt;span&gt;connectTimeout&lt;/span&gt;=1000&amp;amp;&lt;span&gt;socketTimeout&lt;/span&gt;=5000&amp;amp;&lt;span&gt;useSSL&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;user&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;root&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;password&lt;/span&gt;: &lt;span&gt;bytearch&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;maximum&lt;/span&gt;-&lt;span&gt;pool&lt;/span&gt;-&lt;span&gt;size&lt;/span&gt;: 10&lt;br/&gt;        &lt;span&gt;connection&lt;/span&gt;-&lt;span&gt;timeout&lt;/span&gt;: 3000&lt;br/&gt;      &lt;span&gt;slaves&lt;/span&gt;:&lt;br/&gt;        - &lt;span&gt;driver&lt;/span&gt;-&lt;span&gt;class&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;com&lt;/span&gt;.&lt;span&gt;mysql&lt;/span&gt;.&lt;span&gt;cj&lt;/span&gt;.&lt;span&gt;jdbc&lt;/span&gt;.&lt;span&gt;Driver&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;jdbc&lt;/span&gt;-&lt;span&gt;url&lt;/span&gt;: &lt;span&gt;jdbc&lt;/span&gt;:&lt;span&gt;mysql&lt;/span&gt;://172.30.1.33:3306/&lt;span&gt;order_db_3&lt;/span&gt;?&lt;span&gt;useUnicode&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;characterEncoding&lt;/span&gt;=&lt;span&gt;utf8&lt;/span&gt;&amp;amp;&lt;span&gt;autoReconnect&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;rewriteBatchedState&lt;/span&gt;&amp;amp;&lt;span&gt;connectTimeout&lt;/span&gt;=1000&amp;amp;&lt;span&gt;socketTimeout&lt;/span&gt;=5000&amp;amp;&lt;span&gt;useSSL&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;user&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;root&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;password&lt;/span&gt;: &lt;span&gt;bytearch&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;maximum&lt;/span&gt;-&lt;span&gt;pool&lt;/span&gt;-&lt;span&gt;size&lt;/span&gt;: 10&lt;br/&gt;          &lt;span&gt;connection&lt;/span&gt;-&lt;span&gt;timeout&lt;/span&gt;: 3000&lt;br/&gt;    - &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;order_db_4&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;master&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;driver&lt;/span&gt;-&lt;span&gt;class&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;com&lt;/span&gt;.&lt;span&gt;mysql&lt;/span&gt;.&lt;span&gt;cj&lt;/span&gt;.&lt;span&gt;jdbc&lt;/span&gt;.&lt;span&gt;Driver&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;jdbc&lt;/span&gt;-&lt;span&gt;url&lt;/span&gt;: &lt;span&gt;jdbc&lt;/span&gt;:&lt;span&gt;mysql&lt;/span&gt;://172.30.1.24:3306/&lt;span&gt;order_db_4&lt;/span&gt;?&lt;span&gt;useUnicode&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;characterEncoding&lt;/span&gt;=&lt;span&gt;utf8&lt;/span&gt;&amp;amp;&lt;span&gt;autoReconnect&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;rewriteBatchedState&lt;/span&gt;&amp;amp;&lt;span&gt;connectTimeout&lt;/span&gt;=1000&amp;amp;&lt;span&gt;socketTimeout&lt;/span&gt;=5000&amp;amp;&lt;span&gt;useSSL&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;user&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;root&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;password&lt;/span&gt;: &lt;span&gt;bytearch&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;maximum&lt;/span&gt;-&lt;span&gt;pool&lt;/span&gt;-&lt;span&gt;size&lt;/span&gt;: 10&lt;br/&gt;        &lt;span&gt;connection&lt;/span&gt;-&lt;span&gt;timeout&lt;/span&gt;: 3000&lt;br/&gt;      &lt;span&gt;slaves&lt;/span&gt;:&lt;br/&gt;        - &lt;span&gt;driver&lt;/span&gt;-&lt;span&gt;class&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;com&lt;/span&gt;.&lt;span&gt;mysql&lt;/span&gt;.&lt;span&gt;cj&lt;/span&gt;.&lt;span&gt;jdbc&lt;/span&gt;.&lt;span&gt;Driver&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;jdbc&lt;/span&gt;-&lt;span&gt;url&lt;/span&gt;: &lt;span&gt;jdbc&lt;/span&gt;:&lt;span&gt;mysql&lt;/span&gt;://172.30.1.34:3306/&lt;span&gt;order_db_4&lt;/span&gt;?&lt;span&gt;useUnicode&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;characterEncoding&lt;/span&gt;=&lt;span&gt;utf8&lt;/span&gt;&amp;amp;&lt;span&gt;autoReconnect&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&amp;amp;&lt;span&gt;rewriteBatchedState&lt;/span&gt;&amp;amp;&lt;span&gt;connectTimeout&lt;/span&gt;=1000&amp;amp;&lt;span&gt;socketTimeout&lt;/span&gt;=5000&amp;amp;&lt;span&gt;useSSL&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;user&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;root&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;password&lt;/span&gt;: &lt;span&gt;bytearch&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;maximum&lt;/span&gt;-&lt;span&gt;pool&lt;/span&gt;-&lt;span&gt;size&lt;/span&gt;: 10&lt;br/&gt;          &lt;span&gt;connection&lt;/span&gt;-&lt;span&gt;timeout&lt;/span&gt;: 300&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;分库分表策略&lt;/p&gt;&lt;p&gt;1). 根据order_id为shardKey分库分表策略&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; com.bytearch.fast.cloud.mysql.sharding.strategy;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.bytearch.fast.cloud.mysql.sharding.common.ShardingStrategyConstant;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.bytearch.id.generator.IdEntity;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.bytearch.id.generator.SeqIdUtil;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.jfaster.mango.sharding.ShardingStrategy;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 订单号分库分表策略&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;OrderIdShardingStrategy&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ShardingStrategy&lt;/span&gt;&amp;lt;&lt;span&gt;Long&lt;/span&gt;, &lt;span&gt;Long&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getDataSourceFactoryName&lt;/span&gt;&lt;span&gt;(Long orderId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (orderId == &lt;span&gt;null&lt;/span&gt; || orderId &amp;lt; &lt;span&gt;0L&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;order_id is invalid!&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        IdEntity idEntity = SeqIdUtil.decodeId(orderId);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (idEntity.getExtraId() &amp;gt;= ShardingStrategyConstant.SHARDING_TABLE_NUM) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;sharding table Num is invalid, tableNum:&quot;&lt;/span&gt; + idEntity.getExtraId());&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;//1. 计算步长&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; step = ShardingStrategyConstant.SHARDING_TABLE_NUM / ShardingStrategyConstant.SHARDING_DATABASE_NODE_NUM;&lt;br/&gt;        &lt;span&gt;//2. 计算出库编号&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; dbNo = Math.floorDiv(idEntity.getExtraId(), step) + &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;//3. 返回数据源名&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; String.format(&lt;span&gt;&quot;%s_%s&quot;&lt;/span&gt;, ShardingStrategyConstant.LOGIC_ORDER_DATABASE_NAME, dbNo);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getTargetTable&lt;/span&gt;&lt;span&gt;(String logicTableName, Long orderId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (orderId == &lt;span&gt;null&lt;/span&gt; || orderId &amp;lt; &lt;span&gt;0L&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;order_id is invalid!&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        IdEntity idEntity = SeqIdUtil.decodeId(orderId);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (idEntity.getExtraId() &amp;gt;= ShardingStrategyConstant.SHARDING_TABLE_NUM) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;sharding table Num is invalid, tableNum:&quot;&lt;/span&gt; + idEntity.getExtraId());&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 基于约定，真实表名为 logicTableName_XXX， XXX不足三位补0&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; String.format(&lt;span&gt;&quot;%s_%03d&quot;&lt;/span&gt;, logicTableName, idEntity.getExtraId());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2). 根据user_id 为shardKey分库分表策略&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; com.bytearch.fast.cloud.mysql.sharding.strategy;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.bytearch.fast.cloud.mysql.sharding.common.ShardingStrategyConstant;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.jfaster.mango.sharding.ShardingStrategy;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 指定分片KEY 分库分表策略&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserIdShardingStrategy&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ShardingStrategy&lt;/span&gt;&amp;lt;&lt;span&gt;Integer&lt;/span&gt;, &lt;span&gt;Integer&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getDataSourceFactoryName&lt;/span&gt;&lt;span&gt;(Integer userId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//1. 计算步长 即单库放得表数量&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; step = ShardingStrategyConstant.SHARDING_TABLE_NUM / ShardingStrategyConstant.SHARDING_DATABASE_NODE_NUM;&lt;br/&gt;        &lt;span&gt;//2. 计算出库编号&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; dbNo = Math.floorDiv(userId % ShardingStrategyConstant.SHARDING_TABLE_NUM, step) + &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;//3. 返回数据源名&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; String.format(&lt;span&gt;&quot;%s_%s&quot;&lt;/span&gt;, ShardingStrategyConstant.LOGIC_ORDER_DATABASE_NAME, dbNo);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getTargetTable&lt;/span&gt;&lt;span&gt;(String logicTableName, Integer userId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 基于约定，真实表名为 logicTableName_XXX， XXX不足三位补0&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; String.format(&lt;span&gt;&quot;%s_%03d&quot;&lt;/span&gt;, logicTableName, userId % ShardingStrategyConstant.SHARDING_TABLE_NUM);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;dao层编写&lt;/p&gt;&lt;p&gt;1). OrderPartitionByIdDao&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; com.bytearch.fast.cloud.mysql.sharding.dao;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.bytearch.fast.cloud.mysql.sharding.common.ShardingStrategyConstant;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.bytearch.fast.cloud.mysql.sharding.pojo.entity.OrderEntity;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.bytearch.fast.cloud.mysql.sharding.strategy.OrderIdShardingStrategy;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.jfaster.mango.annotation.*;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@DB&lt;/span&gt;(name = ShardingStrategyConstant.LOGIC_ORDER_DATABASE_NAME, table = &lt;span&gt;&quot;order&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Sharding&lt;/span&gt;(shardingStrategy = OrderIdShardingStrategy&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;OrderPartitionByIdDao&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@SQL&lt;/span&gt;(&lt;span&gt;&quot;INSERT INTO #table (order_id, user_id, status, booking_date, create_time, update_time) VALUES&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;(:orderId,:userId,:status,:bookingDate,:createTime,:updateTime)&quot;&lt;/span&gt;&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;insertOrder&lt;/span&gt;&lt;span&gt;(@TableShardingBy(&lt;span&gt;&quot;orderId&quot;&lt;/span&gt;)&lt;/span&gt; @&lt;span&gt;DatabaseShardingBy&lt;/span&gt;&lt;span&gt;(&lt;span&gt;&quot;orderId&quot;&lt;/span&gt;)&lt;/span&gt; OrderEntity orderEntity)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@SQL&lt;/span&gt;(&lt;span&gt;&quot;UPDATE #table set update_time = now()&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;#if(:bookingDate != null),booking_date = :bookingDate #end &quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;#if (:status != null), status = :status #end&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;WHERE order_id = :orderId&quot;&lt;/span&gt;&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;updateOrderByOrderId&lt;/span&gt;&lt;span&gt;(@TableShardingBy(&lt;span&gt;&quot;orderId&quot;&lt;/span&gt;)&lt;/span&gt; @&lt;span&gt;DatabaseShardingBy&lt;/span&gt;&lt;span&gt;(&lt;span&gt;&quot;orderId&quot;&lt;/span&gt;)&lt;/span&gt; OrderEntity orderEntity)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@SQL&lt;/span&gt;(&lt;span&gt;&quot;SELECT * FROM #table WHERE order_id = :1&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;OrderEntity &lt;span&gt;getOrderById&lt;/span&gt;&lt;span&gt;(@TableShardingBy @DatabaseShardingBy Long orderId)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@SQL&lt;/span&gt;(&lt;span&gt;&quot;SELECT * FROM #table WHERE order_id = :1&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@UseMaster&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;OrderEntity &lt;span&gt;getOrderByIdFromMaster&lt;/span&gt;&lt;span&gt;(@TableShardingBy @DatabaseShardingBy Long orderId)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;单元测试&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@SpringBootTest&lt;/span&gt;(classes = {Application&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;})&lt;br/&gt;@&lt;span&gt;RunWith&lt;/span&gt;(&lt;span&gt;SpringJUnit4ClassRunner&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ShardingTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    OrderPartitionByIdDao orderPartitionByIdDao;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    OrderPartitionByUserIdDao orderPartitionByUserIdDao;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testCreateOrderRandom&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;20&lt;/span&gt;; i++) {&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; userId = ThreadLocalRandom.current().nextInt(&lt;span&gt;1000&lt;/span&gt;,&lt;span&gt;1000000&lt;/span&gt;);&lt;br/&gt;            OrderEntity orderEntity = &lt;span&gt;new&lt;/span&gt; OrderEntity();&lt;br/&gt;            orderEntity.setOrderId(SeqIdUtil.nextId(userId % ShardingStrategyConstant.SHARDING_TABLE_NUM));&lt;br/&gt;            orderEntity.setStatus(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;            orderEntity.setUserId(userId);&lt;br/&gt;            orderEntity.setCreateTime(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;            orderEntity.setUpdateTime(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;            orderEntity.setBookingDate(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; ret = orderPartitionByIdDao.insertOrder(orderEntity);&lt;br/&gt;            Assert.assertEquals(&lt;span&gt;1&lt;/span&gt;, ret);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testOrderAll&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//insert&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; userId = ThreadLocalRandom.current().nextInt(&lt;span&gt;1000&lt;/span&gt;,&lt;span&gt;1000000&lt;/span&gt;);&lt;br/&gt;        OrderEntity orderEntity = &lt;span&gt;new&lt;/span&gt; OrderEntity();&lt;br/&gt;        orderEntity.setOrderId(SeqIdUtil.nextId(userId % ShardingStrategyConstant.SHARDING_TABLE_NUM));&lt;br/&gt;        orderEntity.setStatus(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;        orderEntity.setUserId(userId);&lt;br/&gt;        orderEntity.setCreateTime(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;        orderEntity.setUpdateTime(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;        orderEntity.setBookingDate(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; i = orderPartitionByIdDao.insertOrder(orderEntity);&lt;br/&gt;        Assert.assertEquals(&lt;span&gt;1&lt;/span&gt;, i);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//get from master&lt;/span&gt;&lt;br/&gt;        OrderEntity orderInfo = orderPartitionByIdDao.getOrderByIdFromMaster(orderEntity.getOrderId());&lt;br/&gt;        Assert.assertNotNull(orderInfo);&lt;br/&gt;        Assert.assertEquals(orderInfo.getOrderId(), orderEntity.getOrderId());&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//get from slave&lt;/span&gt;&lt;br/&gt;        OrderEntity slaveOrderInfo = orderPartitionByIdDao.getOrderById(orderEntity.getOrderId());&lt;br/&gt;        Assert.assertNotNull(slaveOrderInfo);&lt;br/&gt;        &lt;span&gt;//update&lt;/span&gt;&lt;br/&gt;        OrderEntity updateEntity = &lt;span&gt;new&lt;/span&gt; OrderEntity();&lt;br/&gt;        updateEntity.setOrderId(orderInfo.getOrderId());&lt;br/&gt;        updateEntity.setStatus(&lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;        updateEntity.setUpdateTime(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; affectRows = orderPartitionByIdDao.updateOrderByOrderId(updateEntity);&lt;br/&gt;        Assert.assertTrue( affectRows &amp;gt; &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testGetListByUserId&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; userId = ThreadLocalRandom.current().nextInt(&lt;span&gt;1000&lt;/span&gt;,&lt;span&gt;1000000&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;5&lt;/span&gt;; i++) {&lt;br/&gt;            OrderEntity orderEntity = &lt;span&gt;new&lt;/span&gt; OrderEntity();&lt;br/&gt;            orderEntity.setOrderId(SeqIdUtil.nextId(userId % ShardingStrategyConstant.SHARDING_TABLE_NUM));&lt;br/&gt;            orderEntity.setStatus(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;            orderEntity.setUserId(userId);&lt;br/&gt;            orderEntity.setCreateTime(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;            orderEntity.setUpdateTime(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;            orderEntity.setBookingDate(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;            orderPartitionByIdDao.insertOrder(orderEntity);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;//防止主从延迟引起的校验错误&lt;/span&gt;&lt;br/&gt;            Thread.sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        List&amp;lt;OrderEntity&amp;gt; orderListByUserId = orderPartitionByUserIdDao.getOrderListByUserId(userId);&lt;br/&gt;        Assert.assertNotNull(orderListByUserId);&lt;br/&gt;        Assert.assertTrue(orderListByUserId.size() == &lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大功告成:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.38203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67W8IuD7dibHtyVICl35ptdqAgmJVkouKvW0LgM5HlDqHP0nyK8u5B9aTSpBDzlqe5bkiaklZVqe89icoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上源码已开源至: https://gitee.com/bytearch_admin/fast-cloud/tree/master/fast-cloud-mysql-sharding 欢迎点赞收藏。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;五、总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇主要介绍Java版使用Mango框架实现Mysql分库分表实战，分库分表中间件也可以使用类似于ShardingJDBC，或者自研。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上分库分表数量仅供演示参考，实际工作中分表数量、分库数量、是根据公司实际业务数据增长速度, 高峰期QPS,物理机器配置等等因素计算。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ab4730fa8b0daa5612d411a7c0ec62cb</guid>
<title>简略图解：输入 url 到出现页面，浏览器做了什么？</title>
<link>https://toutiao.io/k/j3bazjo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-hnrfcf&quot; options=&quot;[object Object]&quot;&gt;&lt;p&gt;应该有很多前端开发人员都思考过这么一个问题：从输入 URL 到页面加载完成，中间都做发生了什么?&lt;/p&gt;&lt;p&gt;这个问题涉及的面非常广，每个涉及的点又很深入。从触屏/键盘如何到 CPU？CPU 如何到系统内核？如何从操作系统 GUI 到浏览器？浏览器如何向网卡发送数据？数据如何从本机网卡发送到服务器？服务器接收数据后如何处理？服务器返回数据后浏览器如何处理？浏览器如何将页面展现出来？等等等等，每一个过程都包含了大量且深入的知识体系，很难一以贯通。&lt;/p&gt;&lt;p&gt;但作为前端开发人员，浏览器是我们的主要工具之一，浏览器是如何将页面展现出来的则是我们更关注的部分。因此本文就从一些基本流程来简要描述这个过程。&lt;/p&gt;&lt;p&gt;首先，我们放上整体流程图。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ce4c2b729990e0e1cebf648aa57b72ab_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;558&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-ce4c2b729990e0e1cebf648aa57b72ab_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;558&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-ce4c2b729990e0e1cebf648aa57b72ab_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-ce4c2b729990e0e1cebf648aa57b72ab_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;从上面这个图中可以发现，虽然使用的 Javascript 是单线程语言，但浏览器本身是多进程的。&lt;/p&gt;&lt;p&gt;但是这并不是从一而终的状态，而是浏览器从早期的单进程结构逐渐发展发展而来。现代浏览器各进程根据负责的功能不同，分为浏览器进程、渲染器进程、网络进程、GPU 进程、缓存进程、插件进程等等。为了更好的理解浏览器页面的呈现过程，我们以最主流的 Chrome 为例，简要的说明一下各个进程的大致职能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;浏览器进程:  负责控制界面展示、用户交互、子进程管理等功能。&lt;/li&gt;&lt;li&gt;渲染器进程:  负责将 HTML\CSS\JS 转化为用户可以与之交互的网页。渲染引擎如 webkit、blink  和 JS 引擎 V8 都是在该进程之中。&lt;/li&gt;&lt;li&gt;GPU 进程: GPU 进程原本是为了实现 3D CSS 效果，但是随后页面、Chrome 的 UI 都采用 GPU 来绘制，是 GPU 成为了重要需求，于是增加了 GPU 进程。&lt;/li&gt;&lt;li&gt;网络进程： 负责页面的网络资源加载。&lt;/li&gt;&lt;li&gt;插件进程：负责插件的运行，由于插件可能崩溃，需要插件进程其他进程隔离。注意，插件并不是我们常用的浏览器拓展，plugin 和 extension 是不同的。&lt;/li&gt;&lt;li&gt;缓存进程：负责处理页面资源缓存和清理。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们本次需要重点关注的是&lt;b&gt;渲染器进程&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;回到问题，当我们在浏览器地址栏输入地址时，浏览器进程的 UI 线程会捕捉输入内容，如果访问的是网址，那么 UI 线程会启动一个网络线程来构建请求（这里我们暂时不考虑缓存，缓存又是另外一个故事了），它请求 DNS 进行域名解析然后连接服务器获取数据。如果我们输入的是关键词，浏览器则使用默认配置的搜索引擎来搜索。在获取到数据并通过安全校验后，网络线程会通知 UI 线程数据准备完毕，然后UI线程创建一个渲染器进程来进行页面的渲染，并将数据通过 IPC 管道传递给渲染器进程。&lt;/p&gt;&lt;p&gt;至此，我们的主角&lt;b&gt;渲染器进程&lt;/b&gt;登场！&lt;/p&gt;&lt;h2&gt;解析 HTML&lt;/h2&gt;&lt;p&gt;渲染器进程接收到的是一个 HTML，需要把 HTML 解析成 DOM 数据结构。因为直接的 HTML 字节流是无法被渲染引擎所理解的，必须转化成可以理解的内部结构。这个内部结构就是 DOM，DOM 提供了对 HTML 文档的结构化表述。在渲染引擎中，DOM 有三个层面的作用：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;从页面角度：DOM 是生成页面的基础数据结构。&lt;/li&gt;&lt;li&gt;从 js 角度：DOM 提供了 js 操作的接口。通过这套接口，js 可以对 DOM 接口进行访问，从而使开发者拥有改变文档结构、样式、内容的能力。&lt;/li&gt;&lt;li&gt;从安全角度：DOM 是 HTML 经过解析的内部数据结构，它将 web 页面和 js 链接起来，并过滤了一些不安全的内容。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;渲染器进程内部使用 HTML Parser 将 HTML 解析成 DOM 结构。需要注意的是，HTML 解析器不会等待整个 HTML 文档加载完毕再去解析，而是加载多少了多少 HTML，就解析多少。&lt;/p&gt;&lt;p&gt;那么 HTML 字节流是如何转换成 DOM 的呢？&lt;/p&gt;&lt;p&gt;其实和 V8 解析 js 类似，也是做词法分析，通过分词器将字节流成功成一个个 token，包括 Tag token 和文本 token。HTML 解析器维护了一个 token 栈结构，token 会按照对应顺序入栈出栈，然后将 token 解析成 DOM 节点，并将 DOM 节点添加进 DOM 树中。&lt;/p&gt;&lt;p&gt;前面提到生成 DOM 可以过滤一些不安全内容。这主要是渲染引擎中的一个名为XSSAuditor安全检查模块实现的。它会监测词法安全，在分词器解析出 token 之后，检查这些模块是否引用了外部脚本，是否符合 CSP 规范，是否存在跨站点请求等。如果出现不符合规范的内容。XSSAuditor 会对该脚本或下载任务进行拦截。&lt;/p&gt;&lt;p&gt;DOM 树在构建过程中会创建 document对象，然后以 document 为根节点的 DOM 树不断修改向其中添加新的元素。&lt;/p&gt;&lt;h2&gt;解析 CSS&lt;/h2&gt;&lt;p&gt;前面已经将 HTML 解析成 DOM 树了，但是光拥有 DOM 树还不足以让我们知道页面的样貌。因为我们肯定会为页面设置一些样式。因此主进程还会解析页面中的 CSS 从而确定每个 DOM 节点的计算样式（computed style）。&lt;/p&gt;&lt;p&gt;CSS 的样式来源主要有三个：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;通过 link 引用的外部 CSS 文件&lt;/li&gt;&lt;li&gt;使用&amp;lt;style&amp;gt;标签内的 CSS&lt;/li&gt;&lt;li&gt;元素的 style 属性内嵌的 CSS&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;同样，浏览器无法直接理解这些纯文本的 CSS 样式。所以渲染引擎在接受到 CSS 文本时，会通过 CSS parser 执行解析转换操作。解析过程和 HTML 是部分类似的。最终将 CSS 文本转换成浏览器可以理解的结构 styleSheets，这个结构具备查询和修改的能力，为后续的样式操作提供基础。&lt;/p&gt;&lt;p&gt;然后将 styleSheet 中的属性值进行标准化操作，比如我们在写样式时常常用到 font-size：1em、color：bule、font-weight：bold 等转换成标准的计算值。&lt;/p&gt;&lt;p&gt;最后根据层叠样式的继承规则和层叠规则，计算出的每个 DOM 节点的样式，被保存在ComputedStyle结构内。&lt;/p&gt;&lt;h2&gt;渲染树 Render Tree VS 布局树 LayoutTree&lt;/h2&gt;&lt;p&gt;到目前为止，我们已经在渲染器进程的主线程中走完了前两步。我们已经有了节点，又知道了节点的样式，是不是就可以开始渲染了 ?&lt;/p&gt;&lt;p&gt;不，进度条告诉我们事情远没有那么简单。&lt;/p&gt;&lt;p&gt;但是在进行下一步之前，我们还需要厘清些概念。这其中 Layout Tree 我们是常听的，那 Render Tree又是啥？它和 Layout Tree一样吗？&lt;/p&gt;&lt;p&gt;Layout Tree不等于Render Tree。&lt;/p&gt;&lt;p&gt;从这篇开发者文档[&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction%3Fhl%3Dzh-cn&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;developers.google.com/w&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;eb/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]中的配图可以看到，Render tree 是将 dom 和 cssom 结合的产物。也就是主线程解析 CSS 并把计算后的样式添加到 dom 节点上，进而得到了一个渲染树。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;The main thread parses CSS and determines the computed style for each DOM node. This is information about what kind of style is applied to each element based on CSS selectors.

———《Inside look at modern web browser(part 3)》&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-69eb3c4b4f84440cbc3c09aa1c6985d8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1150&quot; data-rawheight=&quot;537&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-69eb3c4b4f84440cbc3c09aa1c6985d8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1150&quot; data-rawheight=&quot;537&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-69eb3c4b4f84440cbc3c09aa1c6985d8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-69eb3c4b4f84440cbc3c09aa1c6985d8_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如图所示，我们只是知道了节点是否可见和它们的可见样式，但是还不知道节点的精确位置和大小。也就是需要进行布局。&lt;/p&gt;&lt;p&gt;主线程从 render tree 的根节点开始遍历，按照一定规则处理后，将得到一个盒模型。它会精确的捕获每个元素在视口内的确切位置和尺寸，所有的相对测量值都会转换为屏幕上的绝对元素。在得知了那些节点可见，计算样式和几何信息后，渲染引擎就可以把 render tree 上的每个节点都转换成屏幕上的像素，这一步称为绘制或者栅格化。&lt;/p&gt;&lt;p&gt;也就是说，Layout Tree是Render Tree在进行布局计算后的结果，在 Render tree 的基础上，增加了节点的几何信息。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3e8fb8af26862e4f3991824d6845b48d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;865&quot; data-rawheight=&quot;455&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-3e8fb8af26862e4f3991824d6845b48d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;865&quot; data-rawheight=&quot;455&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-3e8fb8af26862e4f3991824d6845b48d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3e8fb8af26862e4f3991824d6845b48d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;The main thread going over DOM tree with computed styles and producing layout tree 
———《Inside look at modern web browser(part 3)》&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;图层树 Layer tree&lt;/h2&gt;&lt;p&gt;真好，我们又走完一步，现在我们有了节点还有节点的精确位置和样式，可不可以渲染了？&lt;/p&gt;&lt;p&gt;抱歉，还是不行。&lt;/p&gt;&lt;p&gt;这里我们要先了解一个概念，栅格化或者说光栅化（Restering）。简单来说栅格化就是将这些节点信息转化为屏幕上的像素点。&lt;/p&gt;&lt;p&gt;那么栅格化跟我们渲染有什么关系呢？因为浏览器使用的正是这个技术将元素绘制在屏幕上。&lt;/p&gt;&lt;p&gt;Chrome 以前是在可视区域内将元素栅格化，随着用户滚动页面，不断调整栅格化的区域，继续栅格化并将内容填充到缺失部分效的方式。这样的问题是用户快速滚动页面的时候，会出现卡顿感。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9ed512afc63c664458faf1bd42247cc0_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;480&quot; data-rawheight=&quot;300&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-9ed512afc63c664458faf1bd42247cc0_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-9ed512afc63c664458faf1bd42247cc0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;480&quot; data-rawheight=&quot;300&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-9ed512afc63c664458faf1bd42247cc0_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-9ed512afc63c664458faf1bd42247cc0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-9ed512afc63c664458faf1bd42247cc0_b.gif&quot;/&gt;&lt;/figure&gt;&lt;p&gt;现在的 chrome 栅格化是采用一种合成（composting）的技术，把页面中某些部分分到一些层中，分别栅格化它们，然后在栅格化线程中合成。这样在页面滚动时，原材料已经有了（已经栅格化好的那些层），只需要将视口内的层合成为一个新的帧就好了。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-dd41bdf77d3be6d75425337973a6094f_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;450&quot; data-thumbnail=&quot;https://pic4.zhimg.com/v2-dd41bdf77d3be6d75425337973a6094f_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-dd41bdf77d3be6d75425337973a6094f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;450&quot; data-thumbnail=&quot;https://pic4.zhimg.com/v2-dd41bdf77d3be6d75425337973a6094f_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-dd41bdf77d3be6d75425337973a6094f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-dd41bdf77d3be6d75425337973a6094f_b.gif&quot;/&gt;&lt;/figure&gt;&lt;p&gt;那这又跟 Layer Tree 又有啥关系呢？&lt;/p&gt;&lt;p&gt;前面说过目前 Chrome 使用的是将多个图层合成为一帧的技术。Layer Tree的作用就是，&lt;b&gt;分层。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;为了找到那些元素应该在哪些层里，主线程遍历 layout tree 来创建 layer tree （Chrome devtools 里称为 &#x27;update layer tree&#x27;）&lt;/p&gt;&lt;p&gt;渲染引擎并不会为每个节点创建一个图层，如果一个节点没有图层，那么它属于父节点的图层。想要创建新图层，节点需要满足一定条件。&lt;/p&gt;&lt;p&gt;页面是二维平面，但是层叠上下文会让 HTML 元素具有三维概念。这些元素按照自身属性的优先级分布在垂直于这个二维平面的 Z 轴上。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-dd9edbac7bfb5414c4b51fc73711a7cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;749&quot; data-rawheight=&quot;541&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-dd9edbac7bfb5414c4b51fc73711a7cf_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;749&quot; data-rawheight=&quot;541&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-dd9edbac7bfb5414c4b51fc73711a7cf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-dd9edbac7bfb5414c4b51fc73711a7cf_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;明确定位属性的元素、定义透明属性的元素、使用 CSS 滤镜的元素等等，都拥有层叠上下文属性。具体参考MDN[&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;developer.mozilla.org/z&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;h-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]。&lt;/p&gt;&lt;p&gt;当我们在一个 100*100 的 div 中书写大量文字时，文字所显示的区域肯定会超出 100*100。这时候就产生了剪裁，渲染引擎会裁剪文字内容的一部分用于显示在 div 区域。出现这种裁剪情况的时候，渲染引擎会为文字部分单独创建一个层。如果出现滚动条，滚动条也会被提升为单独的层。只要满足上述 2 条件任意之一，即会被提升为单独一层。&lt;/p&gt;&lt;p&gt;&lt;b&gt;绘制 Paint&lt;/b&gt;&lt;/p&gt;&lt;p&gt;经历了上述步骤，终于我们到了绘制这一步了。&lt;/p&gt;&lt;p&gt;绘制是其实一个大的过程，包括生成绘制记录 Paint Records，合成器分图块，栅格线程光栅化（调用 GPU 生成位图），合成器帧提交等过程。&lt;/p&gt;&lt;p&gt;通过分层我们知道了一些特殊元素的层级关系。但是，我们还不知道同一层内的元素的层级关系，谁该覆盖谁。主线程根据前面的 LayerTree 为每一层创建绘制记录表  PaintRecords，决定谁先画谁后画。后画上去的肯定覆盖前面的，也就决定了同一层内的元素层级。绘制记录表也理解成一个类似单向链表的形式，遍历链表即可获得绘制顺序。&lt;/p&gt;&lt;p&gt;在查看文档的过程中，我们会发现不同文档对先生成 Layer Tree 还是先得到 Paint Records 有不同说法。&lt;/p&gt;&lt;p&gt;我理解的应该是先分层，然后对每一层创建 Paint Records。如果是先遍历整个 Layout tree 得到绘制记录再分层的话，会多了很多额外的工作，比如把绘制记录的某些绘制步骤挑出来和某些层绑定在一起。而且从 Chrome devtool 里的 profermance 可以看到，先创建了 layer tree，然后开始 paint。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-cfe284037e3de6ac40ed813525cb5b48_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;584&quot; data-rawheight=&quot;314&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-cfe284037e3de6ac40ed813525cb5b48_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;584&quot; data-rawheight=&quot;314&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-cfe284037e3de6ac40ed813525cb5b48_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-cfe284037e3de6ac40ed813525cb5b48_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;有了&lt;b&gt;图层&lt;/b&gt;和&lt;b&gt;绘制记录表&lt;/b&gt;之后，将信息提交给合成器线程进行合成。由于一个图层可能非常非常大，超过了视口的面积，那么一次性将这么大的图层全绘制出来是没有必要的。所以还需要将图层分割成一个个&lt;b&gt;图块 Tile&lt;/b&gt;，优先绘制这些图块。图块大小通常是256*256 或 512*512，然后将图块信息传递给&lt;b&gt;栅格化线程池&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;栅格化线程池中都是栅格化线程，这些线程执行栅格任务&lt;b&gt;Raster Task&lt;/b&gt;将图块生成位图，优先生成视口 viewport 附近的位图。通常栅格化过程使用 GPU 来加速，所以又称为快速栅格化、GPU 栅格化。&lt;/p&gt;&lt;p&gt;当所有的图块栅格化完毕，合成器线程收集Draw Quads的图块信息。Draw Quads 记录了图块在内存中的位置和在页面哪个位置绘制图块。&lt;/p&gt;&lt;p&gt;现在万事俱备，在主线程内将 Draw Quads 这些信息合成合成器帧 （Compositer Frame）并通过 IPC管道发送给浏览器进程。浏览器进程再将合成器帧发送给GPU。&lt;/p&gt;&lt;p&gt;GPU执行渲染，页面出现！！！&lt;/p&gt;&lt;p&gt;大功告成！！！但是这不是结束，我们还要考虑到重排重绘。&lt;/p&gt;&lt;h2&gt;从线程角度看重排重绘&lt;/h2&gt;&lt;p&gt;作为前端经常听到说重排比重绘的开销大，那我们从线程角度该如何理解呢？&lt;/p&gt;&lt;p&gt;&lt;b&gt;重排（回流）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;如果通过 js 或 CSS修改元素的几何位置属性，如宽度、高度等，那么浏览器会触发重新布局。也就是重新生成 layout tree 及以后的所有流程，并全都再走一遍。这种开销是比较大的。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-40340327e5c10970f378434a3fcb4285_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;284&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-40340327e5c10970f378434a3fcb4285_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;284&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-40340327e5c10970f378434a3fcb4285_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-40340327e5c10970f378434a3fcb4285_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;重绘&lt;/b&gt;&lt;/p&gt;&lt;p&gt;如果只是改变元素背景颜色，则不用修改 layout tree 和 layer tree，也不用修改进入绘制以及之后的流程。由于省略了布局和分层阶段，开销会小一些，效率较高。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-607c5894d212fbfe7bf5669e4a756b06_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;280&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-607c5894d212fbfe7bf5669e4a756b06_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;280&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-607c5894d212fbfe7bf5669e4a756b06_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-607c5894d212fbfe7bf5669e4a756b06_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;直接合成&lt;/b&gt;&lt;/p&gt;&lt;p&gt;如果更改一个即不要布局也不需要绘制的属性，则渲染引擎将跳过布局和绘制阶段，只执行后续的合成操作，我们把这个过程称之为合成。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-15606d89d5f707b74ecf7fb0c652d0e0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;288&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-15606d89d5f707b74ecf7fb0c652d0e0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;288&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-15606d89d5f707b74ecf7fb0c652d0e0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-15606d89d5f707b74ecf7fb0c652d0e0_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;js 执行，重排，重绘都是运行在主线程的，都有可能因为大量的计算导致页面卡顿。而除了主线程外，还有合成器线程和栅格线程，如果能不使用主线程直接进行合成的话，就能使页面更加流畅。&lt;/p&gt;&lt;p&gt;css 3 transform 就是这样的一个属性，它实现动画效果可以避开重排和重绘，直接在非主线程上执行动画合成的操作。由于不占用主线程，并且也没有布局和绘制的阶段，所以效率是最高的。&lt;/p&gt;&lt;p&gt;另外，除了使用 transform 属性外，还可以使用 requestAnimationFrame 方法。requestAnimationFrame 传入的 callback 会在下一帧的重绘前调用，从而尽可能的提高动画帧率。可以参考这篇文档[&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64917985&quot; class=&quot;internal&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;zhuanlan.zhihu.com/p/64&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;917985&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;延展阅读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;浏览器的演进&lt;/b&gt;&lt;/p&gt;&lt;p&gt;按照目前发展情况来，未来 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，以达到简单、稳定、高速、安全的目标。&lt;/p&gt;&lt;p&gt;现有的各种模块将重构成独立的服务（Service），比如把 UI、数据库、文件、设备、网络等模块重构为类似操作系统底层的基础服务，并在各自独立的进程中运行。同时通过使用定义好的接口以及 IPC 来通信、访问，让系统更内聚、松耦合、易于维护和扩展。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ed1bbf8613c390c4d5c7a2ce7e6cc3d0_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;406&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-ed1bbf8613c390c4d5c7a2ce7e6cc3d0_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-ed1bbf8613c390c4d5c7a2ce7e6cc3d0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;406&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-ed1bbf8613c390c4d5c7a2ce7e6cc3d0_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-ed1bbf8613c390c4d5c7a2ce7e6cc3d0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-ed1bbf8613c390c4d5c7a2ce7e6cc3d0_b.gif&quot;/&gt;&lt;/figure&gt;&lt;p&gt;同时 Chrome 还提供灵活的弹性架构，在强大性能设备上以多进程的方式运行基础服务，在资源受限的设备上（如下图），则会将很多服务整合到一个进程中，从而节省内存占用。谷歌开发者文档[&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developers.google.com/web/updates/2018/09/inside-browser-part1%23at_the_core_of_the_computer_are_the_cpu_and_gpu&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;developers.google.com/w&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;eb/updates/2018/09/inside-browser-part1#at_the_core_of_the_computer_are_the_cpu_and_gpu&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f6ff53f3cf58e8f05b1baf5ef74c5c2e_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;406&quot; data-thumbnail=&quot;https://pic3.zhimg.com/v2-f6ff53f3cf58e8f05b1baf5ef74c5c2e_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-f6ff53f3cf58e8f05b1baf5ef74c5c2e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;406&quot; data-thumbnail=&quot;https://pic3.zhimg.com/v2-f6ff53f3cf58e8f05b1baf5ef74c5c2e_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-f6ff53f3cf58e8f05b1baf5ef74c5c2e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f6ff53f3cf58e8f05b1baf5ef74c5c2e_b.gif&quot;/&gt;&lt;/figure&gt;&lt;p&gt;目前 Chrome 正在逐步构建 Chrome 基础服务（Chrome Foundation Service）这将是一个漫长的迭代过程，让我们一起拭目以待。&lt;/p&gt;&lt;p&gt;&lt;b&gt;参考文献&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Render-tree Construction，Layout，and Paint：&lt;/p&gt;&lt;p&gt;[&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;developers.google.com/w&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;eb/fundamentals/performance/critical-rendering-path/render-tree-construction&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;Inside look at modern web browser（par1 - part4）：&lt;/p&gt;&lt;p&gt;[&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developers.google.com/web/updates/2018/09/inside-browser-part3&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;developers.google.com/w&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;eb/updates/2018/09/inside-browser-part3&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;Chrome 浏览器架构：&lt;/p&gt;&lt;p&gt;[&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//xie.infoq.cn/article/5d36d123bfd1c56688e125ad3&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;xie.infoq.cn/article/5d&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;36d123bfd1c56688e125ad3&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;Chrome架构：仅仅打开了1个页面，为什么有4个进程：&lt;/p&gt;&lt;p&gt;[&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.poetries.top/browser-working-principle/guide/part1/lesson01.html%23%25e8%25bf%259b%25e7%25a8%258b%25e5%2592%258c%25e7%25ba%25bf%25e7%25a8%258b&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.poetries.top/brows&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;er-working-principle/guide/part1/lesson01.html#%e8%bf%9b%e7%a8%8b%e5%92%8c%e7%ba%bf%e7%a8%8b&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;requestAnimationFrame 回调时机：&lt;/p&gt;&lt;p&gt;[&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64917985&quot; class=&quot;internal&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;zhuanlan.zhihu.com/p/64&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;917985&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;层叠上下文：&lt;/p&gt;&lt;p&gt;[&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;developer.mozilla.org/z&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;h-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;Process Models：&lt;/p&gt;&lt;p&gt;[&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.chromium.org/developers/design-documents/process-models&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;chromium.org/developers&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/design-documents/process-models&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;&lt;b&gt;推荐阅读：&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/651/%25E6%25B2%25A1%25E7%2599%25BB%25E5%25BD%2595%25E7%25BD%2591%25E9%25A1%25B5%25E4%25B9%259F%25E8%2583%25BD%25E4%25B8%25AA%25E6%2580%25A7%25E5%258C%2596%25E6%258E%25A8%25E8%258D%2590%25EF%25BC%259F%25E4%25B8%2580%25E6%2596%2587%25E8%25AF%25A6%25E8%25A7%25A3%25E6%25B5%258F%25E8%25A7%2588%25E5%2599%25A8%25E6%258C%2587%25E7%25BA%25B9.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-f57327254d14a03410c974e93d6bcab4_180x120.jpg&quot; data-image-width=&quot;684&quot; data-image-height=&quot;313&quot; data-text=&quot;没登录网页也能个性化推荐？一文详解浏览器指纹&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/618/%25E7%25BD%2591%25E9%25A1%25B5%25E5%2587%25BA%25E7%258E%25B0%25E4%25B8%258D%25E6%25B2%25B3%25E8%259F%25B9%25E5%25BC%25B9%25E7%25AA%2597%25EF%25BC%259F%25E9%2582%25A3%25E6%2598%25AF%25E8%25A2%25AB%25E5%258A%25AB%25E6%258C%2581%25E4%25BA%2586%25EF%25BC%2581.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-ff9909d5d496a9175fa22d64419cb011_180x120.jpg&quot; data-image-width=&quot;640&quot; data-image-height=&quot;277&quot; data-text=&quot;网页出现不河蟹弹窗？那是被劫持了！&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p/&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c0f4ebe151670a34ca7df579e2e220f5</guid>
<title>如何短时间学好微服务的</title>
<link>https://toutiao.io/k/e0nxsy6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;em&gt;前天发的，忘了标原创，看过的忽略……最近脑子有点……&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我之前写过几篇关于微服务的文章，读者们看完反馈不错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247485243&amp;amp;idx=1&amp;amp;sn=01c52fa742b7baadb688429c4056ee43&amp;amp;chksm=fcd8cb7acbaf426cc0c1108198f8b32a33d04742d54a26f7156ad4c2385dfd11dc69196422da&amp;amp;token=1470797860&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;微服务的架构模式（上）&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247485296&amp;amp;idx=1&amp;amp;sn=31a32a3275fb581dfdc6ee3504cad3a4&amp;amp;chksm=fcd8cb31cbaf42274d5ea0281f093bfe2f10a343f437b060eaa24255c50df8d1670e7b198278&amp;amp;token=1470797860&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;微服务的架构模式（中）&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247485336&amp;amp;idx=1&amp;amp;sn=ca24150f951883f11eb1d90428e6f0c3&amp;amp;chksm=fcd8cbd9cbaf42cff97f03b7f94ee05c682b8afba232b3dc870bc5a1c3f3f320fd3de1ec1c0c&amp;amp;token=1470797860&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;微服务的架构模式（下）&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484777&amp;amp;idx=1&amp;amp;sn=977e620df6c3b640985e20345aa80a12&amp;amp;chksm=fcd8c928cbaf403ed6e28e6b8aafaa851cd0a5a1404fbb34ba7eeb25b592b7a593852e9bd002&amp;amp;token=1470797860&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;恕我直言，微服务挺好，但不适合你&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时，也有读者说：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;看完文章是懂了，但是自己学的时候，还是有点懵，不知道怎么下手&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;授人以鱼不如授人以渔。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;鱼能解决一时之饥，却不能解决长久之饥。我知道，你们需要知识，同时更需要学习知识的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，这篇文章就说说&lt;strong&gt;渔&lt;/strong&gt;，正文开始。&lt;/p&gt;&lt;hr/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序员的某些技术也会过时，就像冰箱里的食物，长期不拿出来吃掉，就会过期和腐败。所以，程序员这个行业，需要不断的学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我现在已经从程序员转成技术管理了，管理 100 多人团队每天一堆事……还是写代码、研究技术的日子比较纯粹，没有那么多浪费时间的无聊会议，没有那么多技术无关的事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然如此，但是技术也不能丢。每当出现非常流行的新技术，或者团队技术栈准备升级，我都必须去学习这些新技术，争取在短时间内，能把控住技术栈升级带来的风险。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正是在这种形势下，我也从中琢磨出了一些快速学习的套路和技巧。我分享出来，希望抛砖引玉，能对后来者有一些帮助和启发。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一步：技术栈需要先分类&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当想要学习任何新技术的时候，我经常做的第一件事就是&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;对要学习的技术领域去做一个分类&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，几年前，公司的系统要改造成微服务架构，那我就必须去学习微服务的这套技术栈。但是，一学我才发现，微服务的技术栈怎么这么多……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，就要对微服务的技术栈进行分类。目的也很简单，就是为了对学习作出一个规划，根据技术栈的分类，作出一个有着明显轻重缓急的学习计划。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就微服务而言，我将其划分为如下几类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;微服务的设计&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务的原理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务的架构&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务的开发框架和代码规范&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务的安全&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务的运维&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分完类之后，再结合当时的情况，我的计划是这样的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，由于我是从零开始，需要设计到落地一条龙。所以，我决定优先摸熟&lt;strong&gt;微服务的设计&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我会找书看，通过看书弄清楚概念和知道怎么划分业务。为什么是看书不是看网上文章，原因后面会说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，再根据落地的需要，去学习&lt;strong&gt;微服务的架构&lt;/strong&gt;最佳实践以及&lt;strong&gt;微服务的开发框架和代码规范&lt;/strong&gt;。学好这些内容，等以后把微服务落地的时候都用得上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学的时候，先不需要去深入语法细节，我只需要明白框架的核心思想和代码规范，把控技术落地不会脱离大方向。技术的细节可以等后面真正写代码的时候，再和同事们一起去钻研，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在微服务落地后，就需要&lt;strong&gt;微服务的运维&lt;/strong&gt;了。而微服务的运维，其实可以浅尝辄止的学习，重点是要知道微服务的运维组件和运维常规工作流程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公司有专门运维团队的，剩下的工作交给运维同事就好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在微服务运维后，我感觉只靠学习市面上的微服务套路肯定还不太够，如果要让微服务能更好的适合我们自己的业务，还需要根据底层&lt;strong&gt;微服务的原理&lt;/strong&gt;，去搞透微服务最佳实践为何这样做的原因。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很显然，这块的学习难度非常大，需要不少知识储备。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，再难学也值得学，因为极有可能我们需要结合自己公司的业务，对微服务作出个性化的定制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建议：找几个兄弟一起组队学习原理这块。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;微服务的安全&lt;/strong&gt;，主要是网关的安全措施，大部分公司都有安全团队，这部分交给他们负责就好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，再经过分门别类之后，我们就很清晰了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微服务的学习顺序就是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微服务设计 &amp;gt; 微服务架构 &amp;gt; 微服务开发框架和代码规范 &amp;gt; 微服务原理 &amp;gt; 微服务运维 &amp;gt; 微服务安全&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习内容的详尽程度则是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;微服务设计、微服务原理需要多读几本书，尤其是原理，要深入学习 + 和牛人广泛讨论；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他部分的学习，优先级没那么高。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二步：选择合适的书&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们根据技术栈分类定出学习计划后，接下来就要选择合适的书籍学习了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里需要强调一下，以我的经验，对一门全新的技术学习，不建议完全通过看网上的文章。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为网上的文章有好也有坏，坏的是真坑人，而且作为初学者，你没有什么经验，不知道文章是否有错误。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我举个例子，网上的链路跟踪，尤其讲 SkyWalking 的相关文章，很多都是错的，如果对链路跟踪不熟悉，就很难分辨出错误，到时候不慎把错误的观念用到了系统里，再改正就非常费劲了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，入门阶段还是老老实实的找一些权威书籍看吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，权威书籍也有问题，因为书的受众不一样，如果一些书读的不合适，比如，选的书籍讲的都是过时的技术，又或者有的书籍讲的非常晦涩，理解起来非常费劲，那这些书就不合适我们去读，读了要么浪费时间，要么错用过时的技术。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么选择合适的书？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我想学微服务设计，我发现微服务设计和领域驱动设计又是紧密关联的。领域驱动设计又有很多的书，有讲理论的，有讲实战的，甚至还有混杂着其他技术栈的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我当时需要的是理论 + 实战的书，并且最好有在已有项目移植到微服务的相关案例的书。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来就是去网上看书评了。一般来说，现在豆瓣、当当、京东的书评和书籍简介都比较不错了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，我更偏好英文书一些，所以，当时根据亚马逊的评价找到了一本《Implementing Domain-Driven Design》，这本书后来翻译成中文了，叫《实现领域驱动设计》—— 我粗看过，我认为翻译的不好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事后证明，这本书确实解决了我的问题，让我摸清楚了&lt;strong&gt;域、子域、边界上下文&lt;/strong&gt;之类的关键概念。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第三步：读书需要技巧&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选完了书，就要去读书。但是，任何一本 IT 书籍，可都是不薄的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像我前面举例的《Implementing Domain-Driven Design》，这本书就是六百多页的厚度。如果一天读 20 页，需要 30 多天，这个时间就太慢了。所以，就需要技巧：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;先速读后精读&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说，对于六百多页的书，尤其是讲解的概念穿插实战的，应该开始的时候，快速阅读。我大概一天是 100 - 200 页左右，时间控制在 4 个小时，连续不断的阅读。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种阅读，看上去很难，其实是建立在快速的跳读和略读上的。读取的时候，只找关键词，尤其是名词。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;找到关键词后，一般就要提取知识点。三五个关键词，就能提取出一个关键知识点来。遇到不会的，也可以当做关键词提取出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关键词往往和小章节的标题能对应上，根据关键词，找到章节中的解释，看明白了，就能跳过别的章节内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;速读，弄懂即可，不需要把所有的内容都读完。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，一本六百多页的书，大概一周就读完了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;读完后，别着急，然后就需要根据你提取的关键词和知识点去做精读了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，由于书籍的关键点已经提取出来了，你只需要精心学习提取的知识即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般而言，知识点提取后，需要精读的内容往往只有原来整体内容的几分之一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我精读这本书大概花了一周左右。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在精读期间，如果有一些发现理解不足的，还需要去查一些别的资料来补充理解，或者动手实践，或者和别人一起交流，除了讲解自己的看法和理解，也需要能汲取别人的看法和理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;精读的最佳结果是，你能用自己的话把原来的概念和别人讲清楚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，总的算下来，读这本六百多页的书需要花十天、半个月的时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说起来，其实大家可以问问身边认识大厂的高手，你会发现，他们大多数人读书，都是我这样类似的读法，确实非常有用。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第四步：落地实践&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;书读完了，肯定有很多不足的地方。这时候，就需要通过技术实践去加深理解、弥补不足。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实践分为两种：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1. 书中的实验&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大部分技术书籍，大部分都有些对应的课后习题或者实验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为这些实验都是附属在某些具体讲解、某些概念的章节后，针对性非常强。所以，如果能不看书，根据自己的理解，去顺利把实践做出来，那就证明，确实学习到位了，可以把学到的东西用到实战中了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2. 实际中的场景&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当书中的实验都做完了，就可以考虑真实的项目场景了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以先根据工作需求，打造出一个包含了所学新技术全栈的 Demo 出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，微服务，就可以搭建一套，有网关、有配置中心、有链路跟踪的 Demo。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Demo 搭建之后，还可以采取一些测试用例对这个 Demo 进行测试，不管是业务测试还是性能压测，都要进行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当 Demo 的指标达到要求后，就可以考虑抽取出一个不重要的项目进行新技术栈的尝试了。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上所说，这就是我日常学习技术的几板斧：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;我是先通过对要学习的技术分类，去减少学习负担。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;再去根据技术分类，提取出要解决的一些问题。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;然后，根据问题去预测出想要读的书的内容范围。又根据这些范围，去各种卖书、评书网站去选书。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;选书完，采用一些读书技巧，去快速学习。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;学习完后，必须实践，加深理解。如此，完成一整套新技术学习。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原创不易，看完觉得有帮助，来个三连支持。&lt;/p&gt;&lt;hr/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是四猿外。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一家上市公司的技术总监，管理的技术团队一百余人。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我从一名非计算机专业的毕业生，转行到程序员，一路打拼，一路成长。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我会通过公众号，&lt;br/&gt;把自己的成长故事写成文章，&lt;br/&gt;把枯燥的技术文章写成故事。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。欢迎加我微信，拉你入群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9852216748768473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KQibCDibpTo0kqofPehQvDDibibcb3bQUELdY3Knsl4r0RcgsV9l4icr3icmZQfaBXtSFNTxmdQlAZT1OQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>