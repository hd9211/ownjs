<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>38f54e9613f5d15fe3b21a35adbb20b6</guid>
<title>如何获取客户端 IP</title>
<link>https://toutiao.io/k/0q4s2ed</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;section&gt;一台手机连接到 Web 服务器进行支付下单操作，Web 服务器需要获取手机的真实 IP 来做一些业务相关的策略，比如分析用户行为、限制请求频率等。用户请求经过了交换机、路由器等网络硬件设备，Nginx 等负载均衡器，Web 服务器如何获取到客户端 IP？&lt;/section&gt;&lt;h3&gt;&lt;span&gt;为什么需要 IP 和 MAC 地址？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;section&gt;手机发出网络请求，请求会携带 IP 和 MAC 地址。IP 已经可以定位到手机在网络中的具体位置，为什么还需有 MAC 地址？没有 MAC 地址可以完成通信吗？&lt;/section&gt;&lt;section&gt;先看一下 IP 报文协议&lt;br/&gt;&lt;/section&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.38596491228070173&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3atrAFNycEd5qgSV6RPib8W1bcTx3mot8Mgr5ndVzw6yDPJs0UiaqvHJdTF0UBy8qLp3vKnxQMS53k2ympGJ2WFw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1368&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;section&gt;报文中有源 IP 和目标 IP 地址，没有其他的字段来存储中转信息。&lt;/section&gt;&lt;section&gt;现在客户端 S 经过 A、B 路由器到达服务器 D，S 发到中转点 A 时必定要在报文中写入和 A 地址相关的信息，比如 A 的 IP 地址，这样请求到达 A 的时候 A 才知道这个请求是发给自己的。但实际上 IP 报文并没有一个中转 IP 字段。&lt;/section&gt;&lt;section&gt;如果可以重新设计网络协议，你可以在 IP 报文协议中加入一个中转 IP 字段，这个字段用来记录需要中转的地点。S 发往 A 时，中转 IP 填写为 A 的 IP 地址；A 发往 B 时，中转 IP 填写为 B 的 IP 地址。&lt;/section&gt;&lt;section&gt;而 TCP/IP 网络模型已经做了这个事情，这个中转 IP 就是 MAC，只不过它是在链路层实现的。如果协议按照中转 IP 重新设计，可以完成通信吗？如果网络只有几个节点，路由记录下转发路由表，理论上是可以通信的。但节点增多，路由就存不下了。而且在新建路由表时需要有个广播探测建表的过程，这个广播报文会发送到所有机器，会造成通信阻塞完全不可用。&lt;/section&gt;&lt;section&gt;怎么进行优化？分而治之？把几台机器分到一个组（局域网）里。这样路由表只用记录组里 leader 的 IP，这个 leader 就是网关。在组里通信的时候使用 MAC 来寻址，在组外就使用 IP 来寻址。MAC 寻址需要使用广播这种方式，广播更接近物理硬件实现。这个 MAC 地址能否作为中转信息放在网络层呢？为什么需要分这么多层？&lt;/section&gt;&lt;h3&gt;&lt;span&gt;为什么网络协议要分层？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;section&gt;分层是计算机系统中的常见操作，看看常用的互联网服务架构，从最底层到最上层依次是：&lt;/section&gt;&lt;section&gt;Data：数据层，包括 MySQL、Redis 等。存储用户、订单、商品数据。&lt;/section&gt;&lt;section&gt;DAO：Data Access Object，数据读取层，对基础数据的 CRUD。比如读取用户基本信息。&lt;/section&gt;&lt;section&gt;AO：逻辑组合层，对 DAO 层的数据进一步处理。比如对用户基本信息和订单信息组合，封装为一个 GetHomePage() 的接口，用于在网站首屏展示用户 home 页。&lt;/section&gt;&lt;section&gt;CGI：接入层，如查询用户首页，调用 GetHomePage()，展示给用户首页信息。&lt;/section&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6349413298565841&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3atrAFNycEd5qgSV6RPib8W1bcTx3mot81oPwRCBMpoIU7XibqdpGwzKWYsJzXasJE4K1DCaIX8tuoWiadGojROsg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1534&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;section&gt;这样做的好处是逻辑解耦、职责分明，每一层负责特定的事务。当需要进行修改时，只需要在这一层修改而不影响其他层的服务。比如需要新增一个查询用户最近一年生活用品消费总额接口，那么在 AO 层组合查询订单 DAO 和查询商品详情 DAO 的返回数据即可。&lt;/section&gt;&lt;section&gt;TCP/IP 协议模型也是同样的原理。&lt;/section&gt;&lt;section&gt;物理层：主要是硬件电路，负责原始比特流的处理和传输。比如将模拟电\光信号转换为二进制流。代表设备是集线器。&lt;/section&gt;&lt;section&gt;链路层：负责 MAC 帧的处理，将源 MAC 地址、目标 MAC 地址、协议类型字段封装。代表设备是交换机。&lt;/section&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.1334033613445378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3atrAFNycEd5qgSV6RPib8W1bcTx3mot8QZMM4OTXsQtPYuWDFXd7A9CfGOWZYnsibGBX9vYUKqhh7ZYtLPiaoGFw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1904&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;section&gt;网络层：负责 IP 的处理，将源 IP 地址、目标 IP 地址等字段封装。代表设备是路由器。&lt;/section&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3266384778012685&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3atrAFNycEd5qgSV6RPib8W1bcTx3mot8MgdQQiaCq9Kia2O26dvHvb4p3iclXkvzGe564oUiaVp1JsUVF06icX6Sbsg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1892&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;section&gt;传输层：负责 TCP/UDP 处理，将源端口、目的端口等字段封装。&lt;/section&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.45521601685985247&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3atrAFNycEd5qgSV6RPib8W1bcTx3mot8H32LMqib3ZY4As6VuyOib4VFiamCxAianLCTH3m6GylrcngmILJ18Cc6Ng/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1898&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;section&gt;应用层：负责和应用相关的协议处理，比如 HTTP、FTP。&lt;/section&gt;&lt;section&gt;这样分层后，应用层需要可靠的通信协议，可以使用 TCP，自己不用保证可靠性；应用层也可以基于 UDP 自己实现可靠性（比如 QUIC 协议）。如果没有分层，TCP 协议耦合在了所有层，应用层就没办法定制化了。&lt;/section&gt;&lt;section&gt;同时，网络层可以专心处理在组（局域网）之间的通信；链路层专心处理在组（局域网）内的通信。&lt;/section&gt;&lt;h3&gt;&lt;span&gt;Nginx 代理与配置&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;section&gt;请求经过交换机在局域网内转发，再经过路由器在局域网之间转发后到达了 Nginx。手机最开始通过域名解析获取到的服务器 IP 其实就是 Nginx。这个 TCP 的请求其实已经结束了，那么请求最终怎么到达 Web 服务器？&lt;/section&gt;&lt;section&gt;查看 Nginx 的配置&lt;/section&gt;&lt;pre&gt;&lt;section&gt;server {&lt;br/&gt;    listen      &lt;span&gt;80&lt;/span&gt;; &lt;span&gt;# 监听80端口&lt;/span&gt;&lt;br/&gt;    server_name localhost; &lt;span&gt;# 配置域名&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    location ^~ /gethomepage {&lt;br/&gt;        proxy_pass       http:&lt;span&gt;//9.141.171.14:11648; // 内网 IP&lt;/span&gt;&lt;br/&gt;        proxy_set_header X-Real-IP $remote_addr;&lt;br/&gt;        proxy_set_header Host $host;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;请求通过 url 匹配到规则后转给给了内网的 IP 9.141.171.14，这时 Nginx 就是新的客户端了。通过 request.getRemoteAddr 获取到的 remote_addr IP 是 TCP 底层会话 socket 连接的 IP，也就是 Nginx 的地址，显然不是客户端的 IP。获取请求到服务器的客户端 IP，可以通过读取 HTTP Header 中的字段。&lt;/section&gt;&lt;section&gt;这两个字段都需要在 Nginx 中进行配置&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;proxy_set_header&lt;/span&gt; X-Real-IP &lt;span&gt;$remote_addr&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;proxy_set_header&lt;/span&gt; X-Forwarded-For &lt;span&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;这样请求从客户端经过交换机、路由器、Nginx 到达 Web 服务器，我们就获取到了真实的用户 IP。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>982b7e472ce2df9feac4510ea145d87a</guid>
<title>利用 XXL-JOB 实现灵活控制的分片处理</title>
<link>https://toutiao.io/k/8fsdc6i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;container app-preview post-body&quot;&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;p&gt;本文讲述了一种利用 XXL-JOB 来进行分片任务处理的方法，另外加入对执行节点数的灵活控制。&lt;/p&gt;

&lt;h2&gt;场景&lt;/h2&gt;

&lt;p&gt;现在一张数据表里有大量数据需要某个服务端应用来处理，要求：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;能够并行处理；&lt;/li&gt;
&lt;li&gt;能够较灵活地控制并行任务数量。&lt;/li&gt;
&lt;li&gt;压力较均衡地分散到不同的服务器节点；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;思路&lt;/h2&gt;

&lt;p&gt;因为需要并行处理同一张数据表里的数据，所以比较自然地想到了分片查询数据，可以利用对 id 取模的方法进行分片，避免同一条数据被重复处理。&lt;/p&gt;

&lt;p&gt;根据第 1、2 点要求，本来想通过对线程池的动态配置来实现，但结合第 3 点来考虑，服务器节点数量有可能会变化，节点之间相互无感知无通信，自己在应用内实现一套调度机制可能会很复杂。&lt;/p&gt;

&lt;p&gt;如果有现成的独立于这些服务器节点之外的调度器就好了——顺着这个思路，就想到了已经接入的分布式任务调度平台 XXL-JOB，而在阅读其 &lt;a href=&quot;https://www.xuxueli.com/xxl-job/&quot;&gt;官方文档&lt;/a&gt; 后发现「分片广播 &amp;amp; 动态分片」很贴合这种场景。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/xxl-job-sharding-broadcast.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;方案&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;利用 XXL-JOB 的路由策略「分片广播」来调度定时任务；&lt;/li&gt;
&lt;li&gt;通过任务参数传入执行任务节点数量；&lt;/li&gt;
&lt;li&gt;定时任务逻辑里，根据获取到的分片参数、执行任务节点数量，决策当前节点是否需要执行，分片查询数据并处理：

&lt;ul&gt;
&lt;li&gt;如果 &lt;em&gt;分片序号 &amp;gt; (执行任务节点数量 - 1)&lt;/em&gt;，则当前节点不执行任务，直接返回；&lt;/li&gt;
&lt;li&gt;否则，取 &lt;em&gt;分片序号&lt;/em&gt; 和 &lt;em&gt;执行任务节点数量&lt;/em&gt; 作为分片参数，查询数据并处理。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样，我们可以实现灵活调度 [1, N] 个节点并行执行任务处理数据。&lt;/p&gt;

&lt;h2&gt;主要代码示例&lt;/h2&gt;

&lt;p&gt;JobHandler 示例：&lt;/p&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@XxlJob(&quot;demoJobHandler&quot;)
public void execute() {
    String param = XxlJobHelper.getJobParam();
    if (StringUtils.isBlank(param)) {
        XxlJobHelper.log(&quot;任务参数为空&quot;);
        XxlJobHelper.handleFail();
        return;
    }

    // 执行任务节点数量
    int executeNodeNum = Integer.valueOf(param);
    // 分片序号
    int shardIndex = XxlJobHelper.getShardIndex();
    // 分片总数
    int shardTotal = XxlJobHelper.getShardTotal();

    if (executeNodeNum &amp;lt;= 0 || executeNodeNum &amp;gt; shardTotal) {
        XxlJobHelper.log(&quot;执行任务节点数量取值范围[1,节点总数]&quot;);
        XxlJobHelper.handleFail();
        return;
    }

    if (shardIndex &amp;gt; (executeNodeNum - 1)) {
        XxlJobHelper.log(&quot;当前分片 {} 无需执行&quot;, shardIndex);
        XxlJobHelper.handleSuccess();
        return;
    }

    shardTotal = executeNodeNum;

    // 分片查询数据并处理
    process(shardIndex, shardTotal);

    XxlJobHelper.handleSuccess();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分片查询数据示例：&lt;/p&gt;

&lt;pre lang=&quot;sql&quot;&gt;&lt;code&gt;select field1, field2 
from table_name 
where ... 
    and mod(id, #{shardTotal}) = #{shardIndex} 
order by id limit #{rows};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;进一步思考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果需要更大的并发量，需要有大于应用节点数量的任务并行，如何处理？&lt;/p&gt;

&lt;p&gt;两种思路：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过任务参数传入一个并发数，单个节点在处理任务时，将查询到的数据按这个数字进行再分片，交由线程池并行处理；&lt;/li&gt;
&lt;li&gt;配置 M 个定时任务，指定相同的 JobHandler，给它们编号 0、1、2...M，并将定时任务编号和 M 这两个数，由任务参数传入，定时任务逻辑里，先根据分片参数、定时任务编号、M，重新计算出新的分片参数，如 &lt;em&gt;分片序号 = (分片序号 * M) + 定时任务编号&lt;/em&gt;，&lt;em&gt;分片总数 = 分片总数 \&lt;/em&gt; M*，再查询数据并处理。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果有可能频繁调整任务执行逻辑，包括可能要新增任务参数等，而不想重启服务器，如何解决？&lt;/p&gt;

&lt;p&gt;可以考虑使用 XXL-JOB 的「GLUE模式」任务，能够在线编辑和更新定时任务执行逻辑。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;参考&lt;/h2&gt;


&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>92cc72b8c986d99589519ac0ce487485</guid>
<title>C++ 类和继承面试点 25 连问</title>
<link>https://toutiao.io/k/1zai9jw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;本篇文章连问面试时经常会遇到的类和继承相关25个问题，看看你能回答出几道题呀。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg5ODI2MTEwNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/RNfZGZNpL1ApdamSCLJUhObeTmib5J7icNXWMw4fdEgv9HqGu5kc787JKMyVEJB65TFNO7l5b1UTKeMZHnao2T8A/0?wx_fmt=png&quot; data-nickname=&quot;cpp加油站&quot; data-alias=&quot;xy13640954449&quot; data-signature=&quot;专注分享linux下c/c++开发经验，做有质量和温度的公众号&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;还是先看一下思维导图，如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.5359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RNfZGZNpL1BsJ6yJdtv3TwcTwZXjwKlhFsAdXlI7x9MypSknGC4sNLAlzaI3E8c7icWAAxibolv1ibI3jYZ6MrwDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;1. c++的三大特性是什么&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;c++的三大特性，说白了其实就是面向对象的三大特性，是指：封装、继承、多态，简单说明如下：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;封装是一种技术，它使类的定义和实现分离，也就是隐藏了实现细节，只留下接口给他人调用，另外封装还有一层意义是它把某种事物具现出属性和方法并形成了一个整体，就像一个人，同时具有身高和身体等等这些，才是完整的人，如果不封装，那这个人就相当于四分五裂了；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;继承，所谓继承，其实就是真实意义上讲的继承了某些东西，放到c++的类里面，其实就是实现了代码的重用，即派生类要使用基类的属性和方法，就不用再重新编写代码，这种可以算是实现继承。还有一种就是继承了某样东西，但是派生类需要重新实现一下，也就是接口继承，下面第三点要讲的多态就是接口继承的典型代表；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多态，多种形态，就是我们使用基类的指针或者引用调用基类的某个函数时，编译期并不知道到底是要调用哪个函数，因为我们不能确定这个指针或者引用到底指向基类对象还是派生类对象，直到运行时才能确定，这个就叫多态。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;span&gt;2. c++继承的优点和缺点&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;优点：根据第1点中讲的，其实继承优点就是实现了代码的重用和接口的重用；&lt;/p&gt;&lt;p&gt;缺点：子类会继承父类的部分行为，父类的任何改变都可能影响子类的行为，也就是说，如果继承下来的实现不适合子类的问题，那么父类必须重写或者被其他的类替换，这种依赖关系限制了灵活性。&lt;/p&gt;&lt;p&gt;从以上对比看，同一种属性既可以是优点，也可以是缺点，就看个人在编程过程中的灵活运用了。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;3. 派生类调用构造函数和析构函数的顺序&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;看代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&lt;br/&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    A()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;A()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    ~A()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;~A()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;B&lt;/span&gt;:&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; A&lt;br/&gt;{&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    B()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;B()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    ~B()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;~B()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    B b;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;A()&lt;br/&gt;B()&lt;br/&gt;~B()&lt;br/&gt;~A()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据结果，可知顺序如下：&lt;/p&gt;&lt;h4&gt;&lt;span&gt;4. c++中多态有什么作用&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;个人理解，其实就是实现了接口的重用，同样的接口，派生类与基类不同的实现。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;5. 多态的实现原理&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;一般来讲多态分为编译时多态和运行时多态，编译时多态就是指的重载哪些，我们通常默认多态是运行时的多态。&lt;/p&gt;&lt;p&gt;运行时多态简单来讲就是：使用基类指针或者引用指向一个派生类对象，在非虚继承的情况下，派生类直接继承基类的虚表指针，然后使用派生类的虚函数去覆盖基类的虚函数，这样派生类对象通过虚表指针访问到的虚函数就是派生类的虚函数了。&lt;/p&gt;&lt;p&gt;更详细的说明请看之前写的这篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg5ODI2MTEwNg==&amp;amp;mid=2247483984&amp;amp;idx=1&amp;amp;sn=9800103c0ccb68e7879af7b356240a3a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;c++头脑风暴-多态、虚继承、多重继承内存布局&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;6. 类成员函数的重载、覆盖和隐藏的区别&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;重载即为函数重载，重载的特征：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;相同的范围，也就是在同一个类中；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;函数名字相同；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;函数参数不同；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;virtual关键字无影响。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;覆盖是指派生类函数覆盖基类函数，覆盖的特征：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不同的范围，即函数分别位于派生类和基类中；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;函数名字相同；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;函数参数相同；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基类函数必须有virtual关键字。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;隐藏是指派生类的函数屏蔽了与其同名的基类函数，特征如下：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;总结：函数名相同，参数也相同的情况下，如果基类函数有virtual关键字，则是多态，否则就是隐藏；函数名相同，参数不同的情况下，如果函数位于同一个类中，则是重载，否则就是隐藏。&lt;/strong&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;7. 析构函数是否可以为虚函数？如果可以，有什么作用？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;析构函数可以是虚函数，因为它是对象结束时才调用，不影响虚表构建。&lt;/p&gt;&lt;p&gt;那么析构函数作为虚函数有什么作用呢，看这样一段代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&lt;br/&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    A()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;A()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    ~A()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;~A()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;B&lt;/span&gt;:&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; A&lt;br/&gt;{&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    B()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;B()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    ~B()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;~B()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    A* a = &lt;span&gt;new&lt;/span&gt; B;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; ( a != &lt;span&gt;nullptr&lt;/span&gt; )&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;delete&lt;/span&gt; a;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码执行后输出如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;A()&lt;br/&gt;B()&lt;br/&gt;~A()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;构造的时候是正常的，但是析构的时候只调用了基类的析构函数，此时我们把类A的析构函数修改为virtual，看看结果：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;A()&lt;br/&gt;B()&lt;br/&gt;~B()&lt;br/&gt;~A()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;一般情况下，只有当一个类被用作基类时才需要使用虚析构函数，这样做的作用是当一个基类的指针删除派生类的对象时，能确保派生类的析构函数会被调用。因为销毁的时候直接销毁的基类指针，此时编译器只知道调用基类析构，并不会主动去调用派生类的析构函数，所以基类析构函数需为虚析构函数，这样运行时程序才会去调用派生类的析构函数，其实这就相当于析构函数的多态，基于多态的作用，这个指向派生类的基类指针会先调用派生类的析构函数，然后再调用基类的析构函数。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;所以当类有派生类时，析构函数一定要是虚函数。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;8. 构造函数里面”初始化列表”和”赋值”的区别&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;初始化列表和赋值的区别如下：&lt;/p&gt;&lt;h4&gt;&lt;span&gt;9. 构造函数什么情况下必须使用初始化列表&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;实际上，根据上面第8点，赋值是先声明以后再赋值的，我们初次接触c++的时候就应该知道有些类型是必须要声明的时候就有初值的，这里我想到的有以下类型：&lt;/p&gt;&lt;p&gt;以上三种情况都必须使用初始化列表而不能在构造函数中进行赋值。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;10. 什么情况下要使用虚继承？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;多重继承时需要使用虚继承，一般的我们在多重继承时使用虚继承来防止二义性问题。&lt;/p&gt;&lt;p&gt;看下面这段代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&lt;br/&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    A()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;A()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;virtual&lt;/span&gt; ~A()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;~A()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;B&lt;/span&gt;:&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; A&lt;br/&gt;{&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    B()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;B()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    ~B()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;~B()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;C&lt;/span&gt;:&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; A&lt;br/&gt;{&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    C()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;C()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    ~C()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;~C()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;D&lt;/span&gt;:&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; B, &lt;span&gt;public&lt;/span&gt; C&lt;br/&gt;{&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    D d;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行后输出结果如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;A()&lt;br/&gt;B()&lt;br/&gt;A()&lt;br/&gt;C()&lt;br/&gt;~C()&lt;br/&gt;~A()&lt;br/&gt;~B()&lt;br/&gt;~A()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看到没有类A的构造函数和析构函数都执行了两次，这很显然是不正确的，因为执行类B构造函数时要执行一次类A的构造函数，执行类C的时候也要执行一次类A的构造函数，析构函数同理，到这里问题还不大，毕竟可以编译和运行。&lt;/p&gt;&lt;p&gt;把代码改一下，如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&lt;br/&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    A()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;A()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;print()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;virtual&lt;/span&gt; ~A()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;~A()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;B&lt;/span&gt;:&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; A&lt;br/&gt;{&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    B()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;B()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    ~B()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;~B()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;C&lt;/span&gt;:&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; A&lt;br/&gt;{&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    C()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;C()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    ~C()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;~C()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;D&lt;/span&gt;:&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; B, &lt;span&gt;public&lt;/span&gt; C&lt;br/&gt;{&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    D d;&lt;br/&gt;    d.print();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译直接就报错了:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;.cpp&lt;/span&gt;&lt;span&gt;:54&lt;/span&gt;&lt;span&gt;:4&lt;/span&gt;: 错误：对成员‘&lt;span&gt;print&lt;/span&gt;’的请求有歧义&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就是二义性了，解决办法是使用形如&lt;code&gt;class C: virtual public A&lt;/code&gt;这样的虚继承形式，B虚继承A，C也虚继承A，那样就可以编译通过，且运行也都是没有问题的。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;11. 怎么防止类对象被拷贝和赋值？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;防止类对象被拷贝和赋值，无非是禁止类对象调用拷贝构造函数和赋值函数，在c++11以后有三种方法：&lt;/p&gt;&lt;h4&gt;&lt;span&gt;12. 构造函数里面是否可以为虚函数？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;答案是不可以，构造函数是不能声明为virtual的，这与虚函数的机制有关，虚函数是存放在虚表的，而虚表是在构造函数执行过程中才建立的，构造函数声明为virtual就会陷入到是先有鸡还是先有蛋的尴尬境地，所以编译器做了限制。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;13. 构造函数里面是否可以抛出异常？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;构造函数可以抛出异常，若有动态分配内存，则要在抛异常之前手动释放。&lt;/p&gt;&lt;p&gt;有关构造函数最全面的说明请看这篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg5ODI2MTEwNg==&amp;amp;mid=2247483911&amp;amp;idx=1&amp;amp;sn=1b4253594377719f787ca96a486fd19e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;最全面的c++中类的构造函数高级使用方法及禁忌&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;14. struct和class区别&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;区别如下：&lt;/p&gt;&lt;p&gt;struct的成员默认是公有的，class的成员默认是私有的。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;一个原则：当类中有很少的方法并且有公有数据时，应该使用struct关键字，否则使用class关键字。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;&lt;span&gt;15. 析构函数是否可以抛异常&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;可以，但是最好不要抛出，如果一定要抛出，那要在析构函数内部处理，保证析构函数能执行完成。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;16. 构造函数里面是否可以调用虚函数&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;可以调用，因为虚函数表是在编译期建立的，当调用构造函数时，首先就会初始化虚函数指针，那我们就知道了虚函数的地址，当然可以调用虚函数了。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;17. 什么是友元函数&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;在函数前面加上friend，这个函数就变成了友元函数，它代表这个函数与某个类成为朋友了，此时访问类的私有成员也是不受限制的。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;18. 友元类是什么&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;与友元函数类似，在一个类A中声明另外一个类B为friend类型，那么这个类B就是友元类，它访问类A的私有成员和保护成员都不受限制。&lt;/p&gt;&lt;p&gt;有关友元详细说明，请看这篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg5ODI2MTEwNg==&amp;amp;mid=2247483831&amp;amp;idx=1&amp;amp;sn=32df8fff841a0960f398a8d791439d37&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;c++类访问权限及友元&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;19. 友元是否违反了封装的原则&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;违反了，友元函数可以不受访问权限的限制而访问类的任何成员，也就是它可以直接接触类的实现，当然违反了封装的原则，只是有时基于我们自身的某些使用场景，不得不使用友元。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;20. 多重继承时类对象内存布局&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;非虚继承时，按照继承顺序存储，虚继承时，虚基类的内容放在一块内存的最后面存储。&lt;/p&gt;&lt;p&gt;详细的看之前这篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg5ODI2MTEwNg==&amp;amp;mid=2247483984&amp;amp;idx=1&amp;amp;sn=9800103c0ccb68e7879af7b356240a3a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;c++头脑风暴-多态、虚继承、多重继承内存布局&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;21. 类的大小由哪些因素决定？空类是多大？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;由成员变量和是否有虚函数决定，如果类中有虚函数，那就在所有成员变量的基础上加上一个虚函数指针的大小，在64位机器中，虚函数指针为8个字节，注意计算类大小的时候要考虑字节对齐的问题。&lt;/p&gt;&lt;p&gt;空类大小为1个字节。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;22. new一个类的时候发生了什么&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;new其实就是申请动态内存，而一个类只有虚指针和成员变量才需要内存，所以new一个类就是给虚指针和成员变量申请内存空间。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;23. 类的成员函数有地址吗？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;有呀，编译器编译的时候就给了成员函数地址，且一个类的成员函数是唯一的，所有对象共用。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;24. 类指针被赋值成NULL还能调用成员函数吗&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;可以的，看以下代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CPeople&lt;/span&gt;&lt;br/&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    &lt;span&gt;double&lt;/span&gt; height;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; age;&lt;br/&gt;    &lt;span&gt;char&lt;/span&gt; sex;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    CPeople(){}&lt;br/&gt;    ~CPeople(){}&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;print()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    CPeople *people = &lt;span&gt;nullptr&lt;/span&gt;;&lt;br/&gt;    people-&amp;gt;print();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;粗粗一看，代码使用了空指针调用，结合我们知道的，如果使用了空指针，就会发生段错误，那这里肯定也会发生段错误，但实际上编译执行后并没有产生错误，print函数被正确执行了，这就很尴尬了，这是为什么呢？&lt;/p&gt;&lt;p&gt;这是因为类的成员函数的实现机制，上题说了，类的成员函数跟某个对象无关，实际上它被编译后，我们可以把它理解为一个全局性的函数，从汇编的角度看，print函数被编译后真正的函数名是&lt;code&gt;_ZN7CPeople5printEv&lt;/code&gt;这个，并且此时因为print函数没有使用类CPeople的任何成员，它当然可以正常的执行。&lt;/p&gt;&lt;p&gt;但是，假设在print里面调用了某个成员变量呢，如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CPeople&lt;/span&gt;&lt;br/&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    &lt;span&gt;double&lt;/span&gt; height;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; age;&lt;br/&gt;    &lt;span&gt;char&lt;/span&gt; sex;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    CPeople(){age = &lt;span&gt;100&lt;/span&gt;;}&lt;br/&gt;    ~CPeople(){}&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;age=&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;this&lt;/span&gt;-&amp;gt;age &amp;lt;&amp;lt; &lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    CPeople *people = &lt;span&gt;nullptr&lt;/span&gt;;&lt;br/&gt;    people-&amp;gt;print();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这次再执行就会报段错误了，为什么呢，因为成员函数是公用的，但是成员变量却是每个对象独有的，没有为people分配空间，就是没给成员变量分配空间，且此时people为空指针，那给成员函数传入的隐形this指针也是空指针，它怎么可能访问到某个成员变量呢。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;25. 什么是纯虚函数？什么是抽象类?&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;看一下这段代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CPeople&lt;/span&gt;&lt;br/&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;:&lt;br/&gt;    CPeople(){}&lt;br/&gt;    ~CPeople(){}&lt;br/&gt;    &lt;span&gt;&lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码里面print就是纯虚函数，所谓纯虚函数其实就是虚函数后面加&lt;code&gt;= 0&lt;/code&gt;，此时print函数是不需要实现的，它只是定义了一个抽象接口而已。&lt;/p&gt;&lt;p&gt;同样的，这段代码里面的CPeople就是抽象类了，某个类不论是自己定义了纯虚函数，还是从其他基类继承了纯虚函数但却并没有实现的，都可以称为抽象类，所谓抽象，其实就是具体的反义词，比方说这里只给了一个接口，但是接口到底是怎么实现的，不知道，这就叫做抽象了。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;好了，本篇文章就为大家介绍到这里，觉得内容对你有用的话，记得顺手点个在看哦~&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>df925665d73e175c3174813da3595316</guid>
<title>刻意练习 Elasticsearch 10000 个小时，鬼知道经历了什么</title>
<link>https://toutiao.io/k/emceu6t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;和腾讯的老师聊天，期间提到了写博客、公众号发文，老师的一句话“不过得有持续的内容才行”，振聋发聩！让我思考良久......&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因为有太多的博主写着写着就各种原因断更了，“可持续”的确是写作者的一路向前走、所向披靡的唯一的法宝。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、博客起源&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;研究生阶段搞 C++，机缘巧合读了《我是一只IT小小鸟》（豆瓣评分：7.8 分），关注到书中作者之一的“C++的罗浮宫”博主刘未鹏老师，后面自然读了他的长销书《暗时间》。这本书我至少读了两遍之上，对当时的我冲击很大，现在读当时做的读书笔记，仍然感觉“字字珠玑”，值得慢速、逐字逐句读。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一方面：正如《暗时间》书的内容介绍部分提及：“在这8年里，作者平均每个月写1篇博客或更少，但从未停止。”，我当时的想法是：竟然有人能做到这么长久的自律和勤奋。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;另一方面：书中的很多警句我现在都记忆犹新，比如：“书写是为了更好的思考”、比如：“如果一件事情你不能讲清楚，十有八九你还没有完全理解”。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;书中有一章标题是“为什么你从现在开始就应该写博客”提及——“用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。”&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我认为就是我在 2012 年前后定下写博客的思想源头。近 10 年过去了，我非常庆幸当时的决定，同时又感觉莫名的“诚惶诚恐”般的后怕——如果十年前不做这个决定，现在的我在何方？想想都很后怕，一阵“冷颤”从后背抽搐到前胸，不敢多去想......&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最初写博客可能和很多读者一样，没的写，所以转载居多，而后转载+评论或者读书笔记，最后才一步步走到原创的路子上。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看一下第一篇原创拙作，可以用“不忍直视、惨不忍睹”来形容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3966033966033966&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9bcMxRB6WrMCa7NS7fhcKeGoOuuPIibgfiaEDghWzeWcg2CfkLxicoTzXYgAk1VNbYmDPFOt3EtqsSwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1001&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、和 Elasticsearch 结缘&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一篇原创后，博客就没有断，至少每月都有产出，以学生时代参加比赛（百度之星、中兴捧月）、准备面试（C/C++、数据结构、算法、设计模式）为主，然后就是：工作过程中遇到问题的反思和总结。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2015、2016年前后，偶然机会项目组需要调研：Mysql 与 Elasticsearch 实时同步问题，给出的调研问题：如何支持增、删、改、查的同步。其实现在看来就是阿里开源的 canel 基于binlog 做的事情，当时canel 还不支持 Elasticsearch。我调研了大量 logstash 的文章，实现了：全量+增量同步，发现了数据量大后可能的内存问题（早期版本 logstash 内存问题比较多）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2016年写了浏览量近10万+《深入详解Elasticsearch》专栏。2016年的年度总结中我是这么写的：”对于Elasticsearch的迭代版本的确变化很快，从最早的1.X，2.X.Y，到现在稳定的5.X，国内外研究和使用都处于起步阶段。&#x27;当一个东西有很大应用价值，并且互联网上仅有有限较旧的资料时，这就是机会所在&#x27;。 我基于ES2.3.4版本，发现Mysql和ES实时同步的确有很多疑点和不确定点，且github, stackoverflow, google搜索到的都是不成体系的资料，促使我形成专栏。”&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现在看来当时就是发现了：“Elasticsearch + 博客” 这么一个机会。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果从2016年算起，到2021年已经 5年+时间，算作：5年（其实已远大于5年）。每年工作去掉零头，算作300天（其实不止300天）。每天工作和 Elasticsearch 相关算作：7个小时（一天工作远不止7小时，通勤路上我也是刷 Elastic 社区、刷 Elastic 社群）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么总的时间是多少呢？算一下便知：5 * 300 * 7 = 10500 小时。其实：会远超过 10000小时。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;畅销书《异类》中提及的一万小时定律——“人们眼中的天才之所以卓越非凡，并非天资超人一等，而是付出了持续不断的努力。1 万小时的锤炼是任何人从平凡变成世界级大师的必要条件。”&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其实，过了 10000 小时，我深有感触：自己不过是刚入门，离所谓“大师”还有十万八年里要走，保守估计，还得练习 10 年+ 以上才敢说进阶。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、写公众号&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通勤路途辛苦，我也不喜欢开车，培养了三大爱好：“听相声/书/付费教程、看文章/论坛、冥想/睡觉”。有深度的技术文不适合颠簸的公车上读，技术的深度和睡觉的速度成正相关，越深奥的文章越容易犯困。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2017年那会迷上《时间的朋友》作者李笑来的公众号文章（PS：我是新东方文化的粉丝，个人偶像之一就是俞敏洪，俞老师早些年的几乎所有随笔我都读过，我人生第一次去北京只仅参观了：天安门、清华北大、新东方总部），笑来老师早期文章“七年就是一辈子”系列都是绝佳的实战+深思后的文章，文章逻辑缜密、严谨，耐人寻味和深思。比如：“避免三个大坑：莫名其妙凑热闹、心急火燎随大流、为别人操碎了心”，比如：“注意力 &amp;gt; 时间 &amp;gt; 金钱”，很多观点都是相见恨晚，我感触很深并深信“人至践则无敌”的行动纲领，所以也及早的付出了行动。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 行动之一：通勤路上刷 Elastic 中文社区。&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;学习别人的问题并尝试回复问题，这个习惯当时坚持了近 3 年，现在频率稍微变低，但还是会刷。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“好处”之一：一不小心 Elastic 中文社区积分排名全国 Top 5。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.632183908045977&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9bcMxRB6WrMCa7NS7fhcKeGR36XbrlmjMKxicsGFB2lSQR2xyEWqbKCRIbWmUvkRy4biaACEW9GEqlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1131&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“好处”之二：极大的扩展了技术交流圈。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我第一时间响应 Elastic 日报编辑招聘要求，“扩编”成为了Elastic 日报责任编辑，负责周五日报搜集、发布工作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意：日报编辑是公益行为，没有任何酬劳的。大家伙乐此不疲，一天一篇，今天我发的第1264篇。之前倒没觉得有什么，现在看来，对于普通 Elastic 学习者的我，相当于坐上了直达电梯，和 Elastic 中国第一人 medcl大神、和 Elastic 认证中国第一人魏彬老师等10几位大厂大佬在一个群里。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;后面还结缘认识了：极客时间Elasticsearch课作者阮一鸣老师，有过深度的交流，我集结成了&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247485149&amp;amp;idx=1&amp;amp;sn=4e5e3fd765ae42045abf1a0a84efb48f&amp;amp;chksm=eaa82ef5dddfa7e3e7f9667d03ca580f16e1ad9d7125904fca18de2bd6263d9c924a6a1d01cf&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;短文一篇&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;短文一篇&lt;/a&gt;。更为好玩和有趣的是：这篇文章还得到阮一鸣老师父母的微信公众号的首次赞赏。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我将 Medcl 大神和 Elastic 社区顶级大神 Wood 大叔的音频专访第一时间做成了&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484065&amp;amp;idx=1&amp;amp;sn=879f1e6ea0ee687affac94c60cb2b1a9&amp;amp;chksm=eaa82a89dddfa39f7778929f33561b419f1ee945f1a4ac40531377b3a0c62cd9671a9528028e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;图文版&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;图文版&lt;/a&gt;，得到 wood 大叔的微信称赞和授权后发布。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2019 年自费去北京参加了 Elastic 开发者大会，面基了：Medcl、魏彬老师、Elastic 捷哥、Elastic中国区前总裁王总、张超老师、日报编辑团队小伙伴等。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;期间还获得过：阿里云、腾讯云、Elastic 官方等一线互联网厂商的面试邀约。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以上的所谓的“好处”，或许叫“好处”都显得功利一些，都非有意而为，在我看来都是“水到渠成”的事情。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 行动之二就是：写公众号。&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我印象很深，那是一个夜晚，风儿没有那么缠绵（~~ 突然整出了歌词 ~~），我躺在躺椅上，给老婆说出了自己思考很久的决定：“我准备做公众号了”，当时畅想了很多对美好未来的憧憬，真的是兴奋的是一晚上没有睡好。这是一个躺床就能秒睡、怎么叫都叫不醒的中年人为数不多又难得可贵的“失眠的一晚”。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;定下写公众号之前注册过两个公众号，都是不知道写什么而无疾而终。而当晚执意定下的这个就是大家现在看到的“铭毅天下Elasticsearch”公众号，最主要的是当时定下的基调就是：写 Elasticsearch 相关的技术文为主，写读书笔记、个人总结为辅，该定调才决定了公众号能走到今天。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;公众号红海泛滥的当下，能活下来就相当不容易，得益于 rochy 大佬的相关优化建议，目前微信搜索“Elasticsearch”，铭毅天下公众号排第一名。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.7601010101010102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9bcMxRB6WrMCa7NS7fhcKeGKwc5SqjZJSeFg0FbISicIeo5GxnkWRNQ0ia49jOokF3skOictBZDXxic7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;396&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、做社群——“死磕Elasticsearch”知识星球&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2018 年前后，由于 elastic.blog.csdn.net 博客 + 铭毅天下公众号，逐步积累了 2000 人+ 的 Elasticsearch 技术交流 QQ 群，我自己也加了近 10 个 Elasticsearch 技术交流群。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;刷社区和刷QQ技术群，给我的第一直观感觉就是：隔几天都会有重复的问题出现，很多问题我都能第一时间找到社区文章出处、官方地址或者直接给出答案。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;偶然的原因，在“新生大学”的交流群里，有看到发知识星球相关推广的文章，才萌生了让技术问题进一步落地、组建一个更纯粹的技术交流社群的想法。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;彼时的我初出茅庐、锋芒毕露，以为有了一定的门槛，不大会有人加入，就完全是试水的心态。但是，没有想到的是，星球也意外的、坚强的存活下来了，且内部圈子里口碑还不错。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0194508009153318&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9bcMxRB6WrMCa7NS7fhcKeGP5xFLia924R1Er7sricEAtI0uZib3hcxpcI3AQNygEBxav7fV0m3yk2CA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;874&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.41730474732006123&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9bcMxRB6WrMCa7NS7fhcKeGXIfSNu7cAV4cic3Cs6nhHOtiblf9BFdibIbiaQPLTlP8sHW6M7uunZSibVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1306&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1 为了让 Elastic 知识更好的落地，我做了 N 多尝试&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;死磕的内涵：刻意练习 + 10000小时，《异类》+《刻意练习》+《心流》三本书的思想整合。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;星球成员：近 1200 人&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;星球运营周期：3.3 年+&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;星球slogo：更短时间更快习得更多干货！&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;星球嘉宾：中国最强 Elasticsearch 嘉宾阵容（魏彬老师、阮一鸣老师、张超老师、杨振涛老师、阿里云、腾讯云、IBM等一线互联网大厂大佬）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;星球成就：51 位球友通过 Elasticsearch （ECE）认证、2位球友通过 Kibana（ECA）认证，占据中国通过总人数的一半+。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;星球资料：《Elasticsearch 最少必要知识》电子书已集结成册，《Elasticsearch 最少必要知识》全套视频陆续更新中，预计：今年完结，每月邀请一位嘉宾或者星主自己视频分享一次（已坚持5个月+），教程+视频无限次回看。基本保障技术问题有问有答，历史问题快捷搜索。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;星球特色：刻意练习落地实施——打卡学习。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;2.2222222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9bcMxRB6WrMCa7NS7fhcKeG9z77MibsdlwCVLqv7gqoTEZOPE8ZoQ7V5b6cLqqnPibMazEUXUxiaqJPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2 做知识星球心得体会&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.2.1 “蚕食”式的学习&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6020408163265306&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9bcMxRB6WrMCa7NS7fhcKeGgrvxbCQpjkplHSNa8gepict2TfQmGemAQ8UHNqX3BVFPW8SZQaB1Bsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1078&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个点，我想了一整天.....&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我老家住在农村，很自豪的是我是土生土长的农村孩子。小时候家里就养蚕。第一次给蚕喂桑叶的场景让我记忆犹新：“拿了一堆桑叶相对均匀的撒给各个养蚕的大托盘里（蚕的栖息地），我心想，这总够吃一阵了吧？‘’&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;蚕个头不大，嘴巴就更小一些，甚至你得把它托在手里才能看到他的“小嘴”。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，其实真过不了多久，整个单片桑叶甚至整个托盘的桑叶会被吃个精光。幼小的心灵的我颇感震撼！再放眼看整个蚕房，“嗤嗤嗤”的声音和吃剩的桑叶的骨架，着实相当壮观！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“蚕食”多用在：“比喻如蚕吃桑叶那样一点一点地吃掉，比喻逐步侵占。”&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我突然想到：比喻学习也很贴切。什么意思呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果把 Elasticsearch 甚至搜索引擎当做美味的“桑叶”（N多片）的话。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作为星主的我和大家一样，无非就是一个小蚕，可能我是相对活跃、“窜动的厉害”的小蚕，如果再加一个特点就是：头大、脸皮厚。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果单靠一个小蚕吃掉所有桑叶，的确会耗时很久。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，N 多小蚕一起，一点点“蚕食”桑叶，会有意想不到的效果。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;映射到 Elasticsearch 学习是一样的道理，知识点就像 N 多片桑叶，如果一个人去啃，很可能会“迷失”、甚至中途想放弃。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，如果有来自全国、甚至全球（球友有来自：美国硅谷、加拿大、中国台湾）的近千家互联网公司的球友，一起在不同的方向“蚕食”桑叶，并且成果一定程度上是共享的。一起去攻克难题、交流分享，对大家来说是互利共赢，每个人都会得到快速的提升。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.2.2 持续刻意练习&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;《异类》中的 10000 小时定律毕竟是相对不那么严谨，刻意练习是接地气的正统学习方法。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;《刻意练习》中强调的 “3F”原则是刻意练习的三个核心准则。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;保持对一件事情的专注力，是做好练习的前提条件。这点，我们一直是坚守的，近 99% 的内存都是围绕星球主题：Elasticsearch 展开的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;包含但不限于：Elasticsearch 架构选型、方案选型、技术问题交流、实战问题解答、Elastic 工作推荐、求职心得交流等。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;科学作家万维钢老师说：“心流，可以说是刻意练习的一个结果”，我认为刻意练习的最高境界是“心流”，这也是我们所憧憬的状态。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对比一个人学习，或者几个人在公司内部交流学习，会很闭塞，容易出现的情况——瓶颈问题。受限于：个人能力和架构师能力。如果仅你一个人研究 Elasticsearch，你就是公司的瓶颈；如果一个小团队研究 Elasticsearch，小团队就是公司的瓶颈，问题若团队解决不了，一般就会搁浅了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其实，放眼全国或者全球，很多内部解决不了的问题，很可能别人早已经解决，早已经有靠谱的方案，不过这些方案可能没有及时公开到互联网。知识星球给这种点对点、点对多点的知识获取提供了更多可能，架起了知识桥梁，填补了搜索引擎搜不到的空白。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我会不定期的归拢知识星球、星球微信群里的信息，把大家常问的问题形成“错题本”，存档到星球的“错题本”模块，让更多人获益、相同问题不犯错，少走弯路。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时，知识星球+微信群相辅相成，一方面：知识星球用于知识的沉淀、更纯粹，永久存储，避免出现类似：QQ群、微信群找不到聊天记录的情况。另一方面：相对零散琐碎的即时交流，微信群更合适。同时，我还会将微信群里有价值的信息（聊天截图、知识点、发散技术点及价值链接）搬运到知识星球，以便永久归档，日积月累，形成知识宝藏。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1375358166189111&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9bcMxRB6WrMCa7NS7fhcKeGgHYO6s7nWYsd0Nia8zic8Vm55iaIDr7v7iaibuy0vnClhjPkrqv8Wa2EzYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;698&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同行交流尤其数百、上千同行的交流，开放互通的交流氛围，是很容易扫清知识盲区的，如果：别人提到的点、给出的链接，我们不知道。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一般第一反应：“他是怎么知道的？他研究了哪些链接，读过哪些文档？看过哪些源码？我怎么我没有找到？”这些反思，都利于我们及时纠偏、纠错，及早发现未知、迎头赶上。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.2.3 机会把握&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2019 年参加 Elasticsearch 大会，主席台上 Medcl 宣布了中国只通过 21 位 认证工程师。我当晚的总结是这么写的：“很震撼、很稀缺！思考：从经济学角度，稀缺就意味着贵；同时，稀缺也意味着机会！感叹难度大的同时，另一个角度看：我们努力都有了方向。”&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我能做的就是：2020 年2月5日拿下 Elastic 认证，并分享经验、逐步形成《最少必要知识手册》，截止2021-06-19，我已带领 51 位球友拿下认证。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是非常细分领域的一个非常小、甚至很多人不知道、不 care 领域的尝试，但是很成功，这也增强了我坚持下去的动力！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;只要是机会就会有人看到，但我会选择抢先起跑，用强大的执行力和毅力，做到头部！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关于机会，我的一点不成熟思考如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当大家都在看公众号文章的时候，写公众号的就有机会；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当大家都在写公众号文章的时候，持续写的就会有机会；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当大家都在持续更新的时候，用户思维+定位精准+立意明确+持续更新就会有机会；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当大家都在刷视频的时候，做视频就会有机会；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当大家都在做视频的时候，持续做视频就会有机会；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当大家都在持续做视频的时候，用户思维+定位精准+立意明确+持续更新视频就会有更新。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当大家都在做星球的时候，做好星球的管理、形成自己的风格和调性、形成社群良性互动和沟通、给球友提供干货、节省球友时间、做到有问必答、有求必应、提升服务意识的星球就会有机会。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.2.4 全量思维+增量思维&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;回归到 Elasticsearch 的学习，本质是：算法+搜索引擎原理+Lucene原理+Elasticsearch原理+源码的学习、积累。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;全量思维是什么意思呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如：官方文档的全量、比如书籍的全量。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过 Elastic 认证考试，必然会涉猎几乎全量的官方文档以及细节内容，这点毋庸置疑。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个过程，对于夯实基础和认知有非常大的帮助。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有的读者说，英文的文档，我不喜欢看。那么全量的中文书籍是推荐大家学习的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这时候，读者可能惊讶：“不会吧？”，其实看得多了，就会有筛选，正如：刘未鹏老师提倡的“只看好书”。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我是兴趣爱好的角度，会买全量的书（如下截图），单本书我会看：作者如何构思、如何将实战、原理串在一起。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.904881101376721&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9bcMxRB6WrMCa7NS7fhcKeGgSJib9Rs375llMECN4MCtBSgrXfsFyPsl28J0zibaYuOoOLWQUCNb8XQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;799&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;多本书对同一知识点，我会串着看，看大家对同一个知识点的解读，谁更深入、谁讲的更透，如何讲的更透。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;全量思维：不见得是逐字逐句的全部读完，而是让我能快速对比，识别出重点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;增量思维是什么呢？书本上没有的内容，官方文档没有的内容，甚至Google、Stackoverflow 也搜不到的，就是需要增量习得的内容，在哪里学？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在Elastic社区、微信群、QQ群、知识星球里面学习别的公司的业务场景、积累、总结。逐步形成增量思维。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;全量备份 + 增量部分能保障我们的集群数据的高可用。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同样的，全量思维 + 增量思维时间长了肯定会形成一定的壁垒。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;毕竟，这相当耗费精力，不是每个人都有那么多时间的。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3 关于星球良性增长的一点思考&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.3.1 多设身处地的多为大家着想&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;甚至说成：舍身触地都不过分。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;舍身：舍弃自己的小我，成就大家的大我。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;触地：接地气，不端着架着。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;用户思维——从别人的场景、别人的问题学习、实践、反思、总结，不放过任何一个学习的机会。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.3.2 互相成就&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;利他就是利己，星主多花了时间，就会节省 N 多人的时间。&lt;/span&gt;&lt;span&gt;对此，星主是值得的、应该去做的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;星球促成了数个企业主招聘和球友的换工作需求，很多球友拿到“阿里云、微软、滴滴、拼多多”的 offer 就是非常好的印证。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;星球联系 Elastic 官方组织了两次 Elastic 认证考试团购，累计 60 人+，每人节省 500 元+ 人民币，也是互相成就的非常好的印证。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.3.3 以身作则&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;星主起到带头大哥的作用，我自己带项目团队面临项目进度进展缓慢的时候，我一般都会说一句“周末我会过来加班，大家根据自己的进度做好协调”，从未强制过团队成员加班。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当然，这不是内卷，这是作为项目负责人、团队负责人应该做的。就和带兵打仗一样，将领和军官就得身先士卒、一马当先，大喊“跟我冲”，而不是躲在后面疾呼“给我冲”。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.3.4 少有人走的路&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;写博客拼到底拼的是坚持和毅力，我自己近几年的每篇博客平均耗时 6 小时左右，要经历：构思、框架、填充、排版、调优等过程。谁苦谁知道，都是累和泪。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而，运营星球更是非常耗时间的过程，我已亲眼目睹很多大厂大佬的星球的“无疾而终”，方向都非常棒，什么原因呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;唯一可能的原因就是：时间不够用、精力跟不上。再去深究的话，就是：有退路。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我既然选择了这条狭窄的路，就得去坚持下去，我和别人不一样，我已破釜沉舟，没有退路和回头路。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哪怕历尽艰辛、我只能会披荆斩棘、一路向前！最终形成自己的“少有人走的路”。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、小结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我一直以来没有特殊的爱好，并因此深感惭愧和自责。当我偶然间看到字节老大张一鸣说：“自己不抽烟，不喝酒，不喜欢汽车，不打高尔夫，就喜欢做产品，看书，和有意思的人交流作者。”才感觉没有什么自责的，这或许是企业家气质（哈哈）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我唯一的运动项目：乒乓球，打的也不咋地。估计随意挑个广场舞大爷，也能打过我。后面我反思：关于乒乓球，我都是低水平勤奋，从来没有刻意练习过发球，更不用说练习“变换发球”了，只求一时赢球的快感和大比分落后又追赶后反超的刺激。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我在大学和读研唯一能和同学不一样的地方就是：我看了 N 多演讲 + 不少闲书，尤其偶像俞敏洪的演讲，应该是当时能找到的全量。这个东西当时不觉得有用，但是，10几年过去了，这是我极大的心灵财富。至少遇到困境和选择的问题时候，我能克服、我能选对，即便我选不对，我也能走出属于自己的路。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Elasticearch 的确给了我刻意练习的机会，我用它锻炼我的心性、磨练我的意志力，非常不可思议又惊险刺激。研究的越久、实践的越久，越感觉自己懂得越少，不会的东西太多、太多，甚至感觉自己就是“小学生”，很多问题等待去实践、去研究、去研读原理、去死磕源码，或许这就是成长吧！这个过程很苦，但很值，这让我笃信了：深耕一个领域，必然大有可为！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;俞老师的“潜心一技、做到极致”是我和很多读者很喜欢的一句话。可以引申解读为两层含义：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一是：潜心。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;要耐得住寂寞，要勇于坚持。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;真如最近非常火的河南大学程民生教授的演讲金句：“成功的秘诀就是坚持不懈。成功有时候不需要精明，在浮躁的社会，沉着冷静就是胜利，稳重坚守就是成功。你跟着浮、你跟着躁，你就跟着成为泡沫了。”&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一是：极致。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;极致：就是精益求精。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;正如百岁翻译泰斗许渊冲教授的百岁新年愿望里写的那样：“Good better best，Never let it rest，Till good is better，And better best。（意为：好上加好，精益求精；不到绝顶，永远不停）”。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;刻意练习 10000 小时只是刚起步，后面还有很长的路要走，我愿和大家同行！&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;span&gt;推荐：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2c1f7554beeae78183c8d3c397ead005</guid>
<title>Harmony OS Wearable 秒表项目开发小实践（附带源码）</title>
<link>https://toutiao.io/k/5x7donf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot;&gt;
                            &lt;h3&gt;项目效果图&lt;/h3&gt;
&lt;p/&gt;&lt;noscript&gt;&lt;img src=&quot;https://file.liyuechun.com/miaobiaoxiaoguotu.gif&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;j-lazy&quot; src=&quot;https://www.harmonybus.net/wp-content/themes/justnews/themer/assets/images/lazy.png&quot; data-original=&quot;https://file.liyuechun.com/miaobiaoxiaoguotu.gif&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;
&lt;h3&gt;介绍&lt;/h3&gt;
&lt;p&gt;我将手把手带你实现&lt;strong&gt;华为 &lt;span class=&quot;wpcom_tag_link&quot;&gt;&lt;a href=&quot;https://www.harmonybus.net/archives/tag/wearable&quot; title=&quot;Wearable&quot; target=&quot;_blank&quot;&gt;Wearable&lt;/a&gt;&lt;/span&gt;  可穿戴设备&lt;/strong&gt;&lt;span class=&quot;wpcom_tag_link&quot;&gt;&lt;a href=&quot;https://www.harmonybus.net/archives/tag/%e7%a7%92%e8%a1%a8&quot; title=&quot;秒表&quot; target=&quot;_blank&quot;&gt;秒表&lt;/a&gt;&lt;/span&gt;应用程序的开发 。华为 Wearable  手表应用开发支持 JS 语言，支持 HTML 标签和 CSS 样式布局。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DevEco Studio IDE&lt;/li&gt;
&lt;li&gt;Wearable   可穿戴手表或模拟器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wearable 秒表项目创建步骤&lt;/h3&gt;
&lt;h4&gt;第一步：创建一个 Wearable 项目并运行HellWorld&lt;/h4&gt;
&lt;p/&gt;&lt;noscript&gt;&lt;img src=&quot;https://file.liyuechun.com/WX20210611-140403@2x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;j-lazy&quot; src=&quot;https://www.harmonybus.net/wp-content/themes/justnews/themer/assets/images/lazy.png&quot; data-original=&quot;https://file.liyuechun.com/WX20210611-140403@2x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;noscript&gt;&lt;img src=&quot;https://file.liyuechun.com/WX20210611-140456@2x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;j-lazy&quot; src=&quot;https://www.harmonybus.net/wp-content/themes/justnews/themer/assets/images/lazy.png&quot; data-original=&quot;https://file.liyuechun.com/WX20210611-140456@2x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;noscript&gt;&lt;img src=&quot;https://file.liyuechun.com/WX20210611-140553@2x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;j-lazy&quot; src=&quot;https://www.harmonybus.net/wp-content/themes/justnews/themer/assets/images/lazy.png&quot; data-original=&quot;https://file.liyuechun.com/WX20210611-140553@2x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;noscript&gt;&lt;img src=&quot;https://file.liyuechun.com/WX20210611-140700@2x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;j-lazy&quot; src=&quot;https://www.harmonybus.net/wp-content/themes/justnews/themer/assets/images/lazy.png&quot; data-original=&quot;https://file.liyuechun.com/WX20210611-140700@2x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;noscript&gt;&lt;img src=&quot;https://file.liyuechun.com/WX20210611-141008@2x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;j-lazy&quot; src=&quot;https://www.harmonybus.net/wp-content/themes/justnews/themer/assets/images/lazy.png&quot; data-original=&quot;https://file.liyuechun.com/WX20210611-141008@2x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;
&lt;h4&gt;第二步：拷贝下面的代码替换&lt;code&gt;index.html&lt;/code&gt;中的代码&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;stack class=&quot;stack&quot;&amp;gt;
    &amp;lt;image src=&#x27;/common/images/Mirage.png&#x27; class=&quot;background&quot;&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;div class=&quot;container&quot; onswipe=&quot;touchMove&quot;&amp;gt;
        &amp;lt;text class=&quot;title&quot;&amp;gt;
            {{time}}
        &amp;lt;/text&amp;gt;
        &amp;lt;div class=&quot;row&quot;&amp;gt;

            &amp;lt;image src=&quot;{{imgSrc}} &quot;class=&quot;stopWatchButtons&quot; onclick=&quot;startOrPause&quot;&amp;gt;&amp;lt;/image&amp;gt;
            &amp;lt;image src=&quot;/common/images/stop-button.png&quot; class=&quot;stopWatchButtons&quot; onclick=&quot;reset&quot;&amp;gt;&amp;lt;/image&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/stack&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;第三步：拷贝下面的代码替换&lt;code&gt;index.css&lt;/code&gt;中的代码&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;
.stack {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.row {
    display: flex;
    flex-direction: row;
    justify-content: center;
}

.stopWatchButtons{
    width: 64px;
    height: 64px;
    margin: 5px;
}

.row {
    display: flex;
    flex-direction: row;

}&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;第四步：拷贝下面的代码到&lt;code&gt;index.js&lt;/code&gt;进行代码替换&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import app from &#x27;@system.app&#x27;

let startTime;
let elapsedTime = 0;
let timerInterval;
let startOrPauseFlag = false;

export default {
    data: {
        time: &#x27;00:00:00:00&#x27;,
        imgSrc: &#x27;/common/images/play-button.png&#x27;,
    },
    startOrPause() {
        var that = this;
        startTime = Date.now() - elapsedTime;
        if (startOrPauseFlag == false) {
            that.imgSrc = &#x27;/common/images/pause-button.png&#x27;;
            startOrPauseFlag = true;
            timerInterval = setInterval(function printTime() {
                elapsedTime = Date.now() - startTime;
                that.time = timeToString(elapsedTime);
            }, 10);
        }else{
            clearInterval(timerInterval);
            that.imgSrc = &#x27;/common/images/play-button.png&#x27;;
            startOrPauseFlag = false;
        }
    },
    reset() {
        var that = this;
        clearInterval(timerInterval);
        that.time = &quot;00:00:00:00&quot;
        elapsedTime = 0;
        that.imgSrc = &#x27;/common/images/play-button.png&#x27;;
        startOrPauseFlag = false;
    },
    touchMove(e) { // Handle the swipe event.
        if (e.direction == &quot;right&quot;) // Swipe right to exit.
        {
            this.appExit();
        }
    },
    appExit(){  // Exit the application.
        app.terminate();
    }
}
function timeToString(time) {
    // milliseconds to hours
    let diffInHrs = time / 3600000;
    let hh = Math.floor(diffInHrs);
    // hours to minutes
    let diffInMin = (diffInHrs - hh) * 60;
    let mm = Math.floor(diffInMin);
    // minutes to seconds
    let diffInSec = (diffInMin - mm) * 60;
    let ss = Math.floor(diffInSec);
    // seconds to milliseconds
    let diffInMs = (diffInSec - ss) * 100;
    let ms = Math.floor(diffInMs);
    let formattedHH = padL(hh,2,0)
    let formattedMM = padL(mm,2,0)
    let formattedSS = padL(ss,2,0)
    let formattedMS = padL(ms,2,0)
    return `${formattedHH}:${formattedMM}:${formattedSS}:${formattedMS}`;
}
function padL(a,b,c) { //string/number,length=2,char=0
    return (new Array(b || 2).join(c || 0) + a).slice(-b)
}&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;第五步：查看效果图&lt;/h4&gt;
&lt;p/&gt;&lt;noscript&gt;&lt;img src=&quot;https://file.liyuechun.com/WX20210618-111013%402x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;j-lazy&quot; src=&quot;https://www.harmonybus.net/wp-content/themes/justnews/themer/assets/images/lazy.png&quot; data-original=&quot;https://file.liyuechun.com/WX20210618-111013%402x.png&quot; alt=&quot;【附带源码】Harmony OS Wearable 秒表项目开发小实践&quot;/&gt;
&lt;h3&gt;源码下载&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt;&lt;a href=&quot;https://github.com/HarmonyBus/Stopwatch&quot;&gt;https://github.com/HarmonyBus/Stopwatch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gitee:&lt;/strong&gt;&lt;a href=&quot;https://gitee.com/harmonybus/Stopwatch&quot;&gt;https://gitee.com/harmonybus/Stopwatch&lt;/a&gt;&lt;/p&gt;
                                                        &lt;div class=&quot;entry-copyright&quot;&gt;&lt;p&gt;发布者：黎 跃春，转载请注明出处：&lt;span&gt;https://www.harmonybus.net/archives/2234&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;                        &lt;/div&gt;
                        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>