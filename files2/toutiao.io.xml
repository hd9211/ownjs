<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c1bf9befbcadf5ec933309b56cc85bdf</guid>
<title>Go 和 Golang 有什么关系？</title>
<link>https://toutiao.io/k/onfjmvl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近天气也冷了，掐指一算是招聘季了，无论是校招、社招、HR、面试官们都蠢蠢欲动。这不，我有一个朋友的 HR 朋友都有起名困难了，一看 Go 语言的工作说明（Job Description），发现各有不同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6884422110552764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNl4L6EcicIRaBmAQW6EIoVMrAKZodtMibk833yqe3lAGqATibHclgbFWBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1592&quot;/&gt;&lt;figcaption&gt;来自某招聘网站&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仔细一看，有叫 Go 的，也有叫 Golang，还有叫 GO 的。好家伙，Go 语言有这么多个别名，&lt;span&gt;为什么要叫 Golang，&lt;/span&gt;甚至某乎都讨论了起来。到底叫什么是正确的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为此，今天就由煎鱼带大家理一理，了解这背后的关系。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Go 官方定义&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从网上的资料来看，大家对 Go 的名字还是比较关注的，对于 Go 团队来讲，仿佛经常被问。例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;“Go 和 Golang 的关系是什么？”&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“Go、Golang、GO 哪个对？”&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;甚至在之前探讨 Go2 草案时，也有人开始起 Go2 的名字了，纠结是要叫 “golang2”，还是 “go2lang”：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5091210613598673&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNVJzotEeFPbUtZ7cq6J5F454h3ILoQEM3eEV7aCDAicjiaQjzFwkibcyug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1206&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这是错误的。在 Go FAQ 中有明确的回答这个问题：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.19905771495877503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNtSQ3oLOqmn6UiakpiaLgRjGL44OCfdHrxR6ohyMNntVrOPYGvyrhBDQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1698&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一门语言称为 “Go”，不叫 “Golang”，也不叫 “GO”。“golang” 只是网站的地址，而不是语言的名称。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时 “GO” 的语言名称叫法也是错误的，虽然官方上的 Logo 是 “GO”：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4028056112224449&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibN6L3nTElAFkYickrtXaicsvk1FwM8tbJKibkmN3LF2vkdSeFDWYMzJo8TQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;998&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这显然只是设计师层面的美观考量，并不是这一门语言的标准定义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此&lt;strong&gt;这一门语言叫做 “Go” 语言&lt;/strong&gt;，这是正确的，也得到官方认证的，也不曾改变过。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为什么会有 Golang&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但可能又有小伙伴疑惑了，那为什么 “Golang” 这个别名，如此之火。到底是为什么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里一共有三点原因，分别是：站点地址（Go FAQ 提到）、搜索引擎、社区和论坛、语言重名。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Go 站点地址&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 团队所期望的 https://go.org 早就被注册，从网站的底部标识来看，2008 年起建站：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.582&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNhMF2Uw406ia8ia7842LfVhXwz5M6icMnMib4X9tISG6aRPz0NcQzek4ibzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 Go 语言只能使用 https://golang.org，你也会 https://pkg.go.dev 和 https://golang.org、https://godoc.org，存在多个域名，并不统一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此作为 Go 开发者所常用官方站点，自然而然 golang 这一个语言标识就深深地被记住了，一直沿用至今。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时域名为 “golang” 关键字，自然会大幅度的影响到 Go 资料搜索引擎的收录，是一个非常重要的因素。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;搜索引擎&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在早年 Go 语言还不知名时，用 go 关键字去搜索资料会非常的困难。这是各大搜索引擎早年的一个槽点（reddit 很多吐槽）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为单一的 go 关键字过于广泛了，很多人会直接用 golang 关键字来搜资料，反而会更能看到一些与 Go 真正相关的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4784&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNKFOkKOSumDUAgdxBU5UN9lKSpJrboIAYGpyFmzvoQy7mbVzsATlkYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2500&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一点在近年来有明确改善，得益于 Go 语言的崛起，现在也能搜到了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;社区和论坛&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在社区、论坛等，也有类似的问题。因为占位、重名、认知等原因。像是 segmentfault、twitter 叫 golang。掘金叫 Go，各有不同。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2838002436053593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNUTbia1hkpW9qn3n0hjficMOYdiaFrYqOMwbJGk0ZNCb3zWnOFuWGJ1CFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1642&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这点难以改善，毕竟各家都是不同企业的。所以难受的点是用户，搜了 Go，可能搜不到，又跑去搜 Golang 才可以。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再看看国外的论坛，在 Google 群组 golang-nuts 和 golang-dev 也有类似偏差。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本可以明确 &lt;strong&gt;“Golang” 更多会被用在搜索和标签上&lt;/strong&gt;，能够保证搜索和标签查询的结果。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;语言重名&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上在 Go 语言出现前，已经存在一门 “Go!” 的编程语言了。有网友表示这也是 Go 官方纠结的一点。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4557988645579886&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNRk3xYxlTPjSa5pjLJQiarbCUBvDREk55YTJNficzegtC2vPNDZUC6Mhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2466&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过实际上编程语言重名并不少见，但由于真实性有待考量，建议仅是了解即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至少现在已经没有这门语言的命名之争。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以明确，官方诠释的正确名称为 Go。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但由于 go.org 域名的原因，
因此在 Go Programming Language 的通俗称呼下，采取了 golang 来作为 Go 站点、Google 群组的域名/组别等的建立。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 资料肯定都集中在官方站点、论坛，自然而然，大家用 “go” 关键字也就很难搜索到了，都得用 “golang” 关键字。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以明确，&lt;strong&gt;Go 是这一门编程语言的名字，Golang 更多是在搜索和标签上的使用&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这看上去，是搜索引擎的胜利，你觉得呢？：）&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4052deb51011ff0420e2aa137777dc47</guid>
<title>设计模式中的俄罗斯套娃：装饰者模式</title>
<link>https://toutiao.io/k/6huzufj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;blockquote&gt;&lt;p&gt;微信公众号：&lt;strong&gt;Java论道&lt;/strong&gt;&lt;br/&gt;关注定期分享Java技术文章，囊括Spring全家桶、Linux、架构设计、分布式、微服务、消息中间件、面试题等。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;俄罗斯套娃想必大家都不陌生，就是同一种玩具娃娃大的套小的，然后一层一层嵌套下去。&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100000139&quot; data-ratio=&quot;0.6111111111111112&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/qdfEUPqfXuxibV7hQ5icVJJ5TvtpWVeXXoVG6FMm0aSVGFqps2xiceP16XZOKNwhfTGHE3X5l5JVARuPRiaGqFIDXQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;俄罗斯套娃&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在设计模式中，有一种常用的套娃模式，叫做装饰者（Decorator）模式，又称为包装（Wrapper）模式。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;HttpServletRequest 套娃&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;在 Spring 框架开发的 Web 应用中，如果使用了 Spring Security 或 Spring Session，用 Debug 模式观察一下某个请求对应的 HttpServletRequest 对象，会发现这就是一个俄罗斯套娃：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100000140&quot; data-ratio=&quot;0.99&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qdfEUPqfXuxibV7hQ5icVJJ5TvtpWVeXXoOe5ZUNibQm22jPPyX6uAAf4YpL6FUQjibg2OjdgKpOzsTUUxmKAYOALA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;HttpServletRequest 对象&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;图中可以看到我们拿到的 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象，内部成员中包含了一个 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象，而这个内部的 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象内部又包含了一个 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象，层层包含，层层套娃。这就是一个典型的装饰者模式。&lt;/p&gt;&lt;p&gt;我们知道，&lt;code&gt;HttpServletRequest&lt;/code&gt; 是 Servlet 规范中提供的一个 interface 接口。Servlet 规范本身没有实现 &lt;code&gt;HttpServletRequest&lt;/code&gt; 接口，&lt;code&gt;HttpServletRequest&lt;/code&gt; 接口一般是由 Servlet 容器来实现，例如 Tomcat、Jetty。如果 Spring Security、Spring Session 等框架想要增强 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象的功能，但是不改变原有对象的接口，最好的办法就是使用装饰者模式。例如：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Spring Security 增强了 &lt;code&gt;HttpServletRequest.getRemoteUser()&lt;/code&gt; 方法，可返回当前通过 Spring Security 框架登录用户的用户名；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Spring Session 增强了 &lt;code&gt;HttpServletRequest.getSession()&lt;/code&gt; 方法，增强后的 Session 取代了 Servlet 容器的默认实现，其读写可以使用一个集中式的存储，例如 Redis，这样可以方便集群中的多个实例共享 Session。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;HttpServletRequestWrapper / ServletRequestWrapper&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;javax.servlet.http&lt;/code&gt; 包下有个 &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt; 类，继承自 &lt;code&gt;ServletRequestWrapper&lt;/code&gt; 类。可以看到这两个类上的注释：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;翻译：这个类实现了装饰者模式/包装模式，方法模式会直接调用内部包装的 request 对象。&lt;/p&gt;&lt;p&gt;&lt;code&gt;ServletRequestWrapper&lt;/code&gt; 本身实现了 &lt;code&gt;ServletRequest&lt;/code&gt; 接口，它的构造方法要求传入另一个 &lt;code&gt;ServletRequest&lt;/code&gt; 对象，并将这个对象赋值给内部 request 对象：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ServletRequestWrapper&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ServletRequest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ServletRequest request;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ServletRequestWrapper&lt;/span&gt;&lt;span&gt;(ServletRequest request)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (request == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;Request cannot be null&quot;&lt;/span&gt;);   &lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.request = request;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ServletRequestWrapper&lt;/code&gt; 对 &lt;code&gt;ServletRequest&lt;/code&gt; 接口方法的实现，则是直接调用内部 request 对象对应的方法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; String getContentType() {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.request.getContentType();&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; ServletInputStream getInputStream() throws IOException {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.request.getInputStream();&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; String getParameter(String name) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.request.getParameter(name);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上就是一个最基本的装饰器。我们可以直接拿来套娃：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;HttpServletRequest request = ...; &lt;span&gt;// 已有的 request 对象&lt;/span&gt;&lt;br/&gt;HttpServletRequest requestWrapper = &lt;span&gt;new&lt;/span&gt; HttpServletRequestWrapper(request); &lt;span&gt;// 包装后的对象&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，上面代码没有任何意义，因为 &lt;code&gt;requestWrapper&lt;/code&gt; 没有做任何扩展，使用 &lt;code&gt;requestWrapper&lt;/code&gt; 对象和直接用 &lt;code&gt;request&lt;/code&gt; 对象没有任何区别。真正的装饰者类会继承 &lt;code&gt;ServletRequestWrapper&lt;/code&gt; 并在此基础上做增强。&lt;/p&gt;&lt;p&gt;下面，我们再看下 Spring Security 和 Spring Session 如何对 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象进行装饰。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Spring Security / Spring Session 中的装饰者实现&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在 Spring Security 文档 Servlet API integration 中，可以看到 Spring Security 框架对 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象的 &lt;code&gt;getRemoteUser()&lt;/code&gt;、&lt;code&gt;getUserPrincipal()&lt;/code&gt;、&lt;code&gt;isUserInRole(String)&lt;/code&gt; 等方法进行了增强，例如 &lt;code&gt;getRemoteUser()&lt;/code&gt; 方法可以直接返回当前登录用户的用户名。接下来看一下 Spring Security 如何增强这些方法。&lt;/p&gt;&lt;p&gt;首先，Spring Security 提供了一个过滤器 &lt;code&gt;SecurityContextHolderAwareRequestFilter&lt;/code&gt;，对相关请求进行过滤处理。这个 Filter 中创建了一个新的 &lt;code&gt;Servlet3SecurityContextHolderAwareRequestWrapper&lt;/code&gt; 对象，这个类继承自 &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt; 类，并增强了相关方法。其父类 &lt;code&gt;SecurityContextHolderAwareRequestWrapper&lt;/code&gt; 类源码中可以看到对 &lt;code&gt;getRemoteUser()&lt;/code&gt; 方法的增强：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SecurityContextHolderAwareRequestWrapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HttpServletRequestWrapper&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getRemoteUser&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Authentication auth = getAuthentication();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; ((auth == &lt;span&gt;null&lt;/span&gt;) || (auth.getPrincipal() == &lt;span&gt;null&lt;/span&gt;)) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (auth.getPrincipal() &lt;span&gt;instanceof&lt;/span&gt; UserDetails) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; ((UserDetails) auth.getPrincipal()).getUsername();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (auth &lt;span&gt;instanceof&lt;/span&gt; AbstractAuthenticationToken) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; auth.getName();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; auth.getPrincipal().toString();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单来讲，就是 Spring Security 通过一个 Filter 过滤相关请求，拿到原始的 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象，通过一个继承自 &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt; 类的装饰者，增强了 &lt;code&gt;getRemoteUser()&lt;/code&gt; 等相关方法，再将增强后的对象传给后续的业务处理，那么后续我们在 Controller 层拿到的 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象就可以直接使用 &lt;code&gt;getRemoteUser()&lt;/code&gt; 等方法。&lt;/p&gt;&lt;p&gt;Spring Session 实现和 Spring Security 类似，这里就不再重复介绍，有兴趣可以看 &lt;code&gt;SessionRepositoryFilter&lt;/code&gt; 源码。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Collections 中的装饰者&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;装饰者模式不但可以增强被装饰者的功能，还可以禁用某些功能。当然，禁用实际上也是一种“增强”。&lt;/p&gt;&lt;p&gt;例如，假设有一个 List，当我们需要将这个 List 传给第三方的某个方法去读，但是由于这个第三方方法不可信，为了防止这个方法对 List 篡改，可以通过装饰器模式禁用 List 的修改方法，装饰成一个只读的 List。&lt;/p&gt;&lt;p&gt;&lt;code&gt;java.util.Collections&lt;/code&gt; 中提供了一个静态方法 &lt;code&gt;unmodifiableList(List)&lt;/code&gt;，用于将一个 List 封装为只读的 List：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&amp;lt;String&amp;gt; &lt;span&gt;list&lt;/span&gt; = ...;&lt;br/&gt;&lt;span&gt;List&lt;/span&gt;&amp;lt;String&amp;gt; unmodifiableList = Collections.unmodifiableList(&lt;span&gt;list&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过这个方法的源码可以看到，&lt;code&gt;Collections.unmodifiableList(List)&lt;/code&gt; 方法实际上返回了一个 &lt;code&gt;UnmodifiableList&lt;/code&gt;。&lt;code&gt;UnmodifiableList&lt;/code&gt; 是一个典型的装饰者，其内部对 List 的读相关方法直接调用被装饰对象的对应方法，而对写相关方法做了限制，抛出 &lt;code&gt;UnsupportedOperationException&lt;/code&gt;。下面是 &lt;code&gt;UnmodifiableList&lt;/code&gt; 的部分源码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UnmodifiableList&lt;/span&gt;&amp;lt;E&amp;gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;UnmodifiableCollection&lt;/span&gt;&amp;lt;E&amp;gt;&lt;br/&gt;                                  &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;List&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;br/&gt;    final List&amp;lt;? extends E&amp;gt; &lt;span&gt;list&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    UnmodifiableList(List&amp;lt;? extends E&amp;gt; &lt;span&gt;list&lt;/span&gt;) {&lt;br/&gt;        super(&lt;span&gt;list&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;list&lt;/span&gt; = &lt;span&gt;list&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; E &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;.get(index);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; E &lt;span&gt;set&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; index, E element)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; index, E element)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; E &lt;span&gt;remove&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;indexOf&lt;/span&gt;&lt;span&gt;(Object o)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;.indexOf(o);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;lastIndexOf&lt;/span&gt;&lt;span&gt;(Object o)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;.lastIndexOf(o);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; boolean &lt;span&gt;addAll&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; index, Collection&amp;lt;? extends E&amp;gt; c)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;java.util.Collections&lt;/code&gt; 中还提供了其他一系列装饰者：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;unmodifiableSet(Set)&lt;/code&gt;、&lt;code&gt;unmodifiableMap(Map)&lt;/code&gt; 等方法和 &lt;code&gt;unmodifiableList(List)&lt;/code&gt; 类似，用于不同类型的集合的装饰&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;synchronizedList(List)&lt;/code&gt;、&lt;code&gt;synchronizedSet(Set)&lt;/code&gt;、&lt;code&gt;synchronizedMap(Map)&lt;/code&gt; 等方法使用 &lt;code&gt;synchronized&lt;/code&gt; 装饰 List、Set、Map 中的相关方法，返回一个线程安全的集合&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;checkedList(List, Class)&lt;/code&gt;、&lt;code&gt;checkedSet(Set, Class)&lt;/code&gt;、&lt;code&gt;checkedMap(List, Class, Class)&lt;/code&gt; 等方法返回类型安全的集合，如果插入集合的元素类型不符合要求则会抛出异常&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;InputStream 装饰者&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;装饰者不但可以增强被装饰者原有的方法，还可以增加新的方法扩展功能。&lt;/p&gt;&lt;p&gt;在 &lt;code&gt;java.io&lt;/code&gt; 包中，针对 &lt;code&gt;InputStream&lt;/code&gt; 有一个基础的抽象装饰者 &lt;code&gt;FilterInputStream&lt;/code&gt;，其源码如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;FilterInputStream&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;InputStream&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; InputStream &lt;span&gt;in&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;FilterInputStream&lt;/span&gt;(&lt;span&gt;InputStream &lt;span&gt;in&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;in&lt;/span&gt; = &lt;span&gt;in&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;read&lt;/span&gt;(&lt;span/&gt;) throws IOException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;.read();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;类似于上面讲到的 &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt; 类，&lt;code&gt;FilterInputStream&lt;/code&gt; 是一个基础的装饰者，它的子类才是具体的装饰者的实现。&lt;code&gt;DataInputStream&lt;/code&gt; 就是其中一个典型的装饰者实现。&lt;/p&gt;&lt;p&gt;&lt;code&gt;DataInputStream&lt;/code&gt; 用于从被装饰的 &lt;code&gt;InputStream&lt;/code&gt; 对象中读取基本数据类型，它继承自 &lt;code&gt;FilterInputStream&lt;/code&gt;，并新增了新的方法，如 &lt;code&gt;readByte()&lt;/code&gt;、&lt;code&gt;readInt()&lt;/code&gt;、&lt;code&gt;readFloat()&lt;/code&gt; 等，这些方法是 &lt;code&gt;InputStream&lt;/code&gt; 接口中没有的。&lt;/p&gt;&lt;p&gt;除了 &lt;code&gt;DataInputStream&lt;/code&gt; 之外，&lt;code&gt;FilterInputStream&lt;/code&gt; 常见的子类装饰者还有：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;BufferedInputStream&lt;/code&gt; 为被装饰的 &lt;code&gt;InputStream&lt;/code&gt; 提供缓冲功能以及支持 &lt;code&gt;mark&lt;/code&gt; 和 &lt;code&gt;reset&lt;/code&gt; 方法&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;CipherInputStream&lt;/code&gt; 使用加密算法（例如 AES）对 &lt;code&gt;InputStream&lt;/code&gt; 中的数据加密或解密&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;DeflaterInputStream&lt;/code&gt;、&lt;code&gt;InflaterInputStream&lt;/code&gt; 使用 deflate 压缩算法对 &lt;code&gt;InputStream&lt;/code&gt; 中的数据压缩或解压&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;装饰者模式结构&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100000141&quot; data-ratio=&quot;0.59453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qdfEUPqfXuxibV7hQ5icVJJ5TvtpWVeXXodtIqKBlmMzvRLtMPrzcBcXYb2waogNc5oic7IVibGfG1HMbBmaxs0UZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;装饰者模式结构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;图片来源：https://refactoringguru.cn/design-patterns/decorator&lt;/p&gt;&lt;p&gt;下面总结一下在前面的例子中，各个类和上图中的对应关系：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;部件（Component）对应有 &lt;code&gt;HttpServletRequest&lt;/code&gt;、&lt;code&gt;List&lt;/code&gt;、&lt;code&gt;InputStream&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;基础装饰（Base Decorator）对应有 &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt;、&lt;code&gt;FilterInputStream&lt;/code&gt;；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;具体装饰类（Concrete Decorators）对应有 &lt;code&gt;Servlet3SecurityContextHolderAwareRequestWrapper&lt;/code&gt;、&lt;code&gt;UnmodifiableList&lt;/code&gt;、&lt;code&gt;DataInputStream&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0324bcd0a8543415314070b84a4c781f</guid>
<title>Android 转场动画深度解析</title>
<link>https://toutiao.io/k/jtg6jd0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;所谓转场动画，通俗的讲就是一个Activity跳转到另一个Activity是的动画；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Activity的转场动画很早就有了，5.0之前用的是overridePendingTransition（）这个方法。在5.0之后，Google使用Material Design设计风格，进而有了的新的转场转场动画的诞生，效果还是挺炫酷的；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天我们就来讲解下；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、转场动画兼容性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、API21之前Activity过渡动画使用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; API21之前Activity过渡动画通过两种方式来实现:style主题里面统一设置、使用代码overridePendingTransition函数单独设置；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;style文件主题里面统一定义，全局为所有Activity设置过渡动画效果；&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:windowAnimationStyle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@style/Animation.Activity.Customer&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Animation.Activity.Customer&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;parent&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@android:style/Animation.Activity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:activityOpenEnterAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/right_in&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:activityOpenExitAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/left_out&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:activityCloseEnterAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/left_in&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:activityCloseExitAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/right_out&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;代码overridePendingTransition(enterAnim, exitAnim)；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于overridePendingTransition函数，有一个需要注意的地方就是：它必需紧挨着startActivity()或者finish()或者onBackPressed()函数调用，否则不一定有效果；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、API 21 之后Activity过渡动画使用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在API 21之后google又推出了一种比之前效果更加赞的过渡动画；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过ActivityOptions + Transition来实现Activity过渡动画；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以在使用之前需要进行版本判断。当版本API 大于21时使用转场动画，否则不使用；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.LOLLIPOP) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ActivityOptions + Transition来实现Activity过渡动画之前先来了看下ActivityOptions里面几个函数代表啥意思；&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ActivityOptions &lt;span class=&quot;code-snippet__title&quot;&gt;makeCustomAnimation&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Context context, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; enterResId, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; exitResId&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ActivityOptions &lt;span class=&quot;code-snippet__title&quot;&gt;makeScaleUpAnimation&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;View source, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startX, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startY, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; width, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; height&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ActivityOptions &lt;span class=&quot;code-snippet__title&quot;&gt;makeThumbnailScaleUpAnimation&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;View source, Bitmap thumbnail, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startX, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startY&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ActivityOptions &lt;span class=&quot;code-snippet__title&quot;&gt;makeSceneTransitionAnimation&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Activity activity, View sharedElement, String sharedElementName&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ActivityOptions &lt;span class=&quot;code-snippet__title&quot;&gt;makeSceneTransitionAnimation&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Activity activity, android.util.Pair&amp;lt;View, String&amp;gt;... sharedElements&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;对于Transition Activity过渡动画的使用，我们简单的分为三个步骤：&lt;/span&gt;&lt;span&gt;告诉系统以Transition的方式启动Activity、定义过渡动画、设置过渡动画&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、转场动画的使用场景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Android中的转场动画主要有三种场景：&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面分别详细的介绍；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、转场动画的使用场景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、两个activity之间切换时界面的过渡效果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;两个activity切换时的，有两个动画，从activity A 切换到activity B时，会有A的退出动画和B的进入动画；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.544360902255639&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhHicPvjRtficvg3Q5zaEb8lPviaJiaGmcrw5qxS7LKgDJcdOSS55c36lUA5EiaAPsFKT7DzyZVh4qJfERQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;665&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Google提供的android.transition.Transition包中从activity A切换到activity B有三种方式：Explode, Slide 和Fade；&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Explode：从屏幕的中间进入或退出；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Slide：从屏幕的一边向另一边进入或退出；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Fade：通过改变透明度来出现或消失；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上面的三种动画有两种实现方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.7754891864057673&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/kyDL16ViavhHicPvjRtficvg3Q5zaEb8lPvLnuz3WRPhve1fg2znibP95ynkRbj5YTeRQoEvYNr8eqF0IHQObI2SEA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;971&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①通过xml声明；&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在res目录下新建transition文件夹在transition文件夹下新建activity_fade.xml文件；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;activity_fade.xml&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;fade&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://schemas.android.com/apk/res/&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1000&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;activity_slide.xml&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;slide&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://schemas.android.com/apk/res/&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1000&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ActivityA的代码如下：因为从ActivityA切换到ActivityB,所以ActivityA是退出动画使用的方法是：getWindow().setExitTransition(slide);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setContentView(R.layout.activity_transition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setupWindowAnimations();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setupWindowAnimations&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Slide slide = TransitionInflater.from(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;).inflateTransition(R.transition.activity_slide);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        getWindow().setExitTransition(slide);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ActivityB是进入动画使用方法：getWindow().setEnterTransition(fade);，ActivityB的代码如下&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setContentView(R.layout.activity_transition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setupWindowAnimations();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setupWindowAnimations&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Fade fade = TransitionInflater.from(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;).inflateTransition(R.transition.activity_fade);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        getWindow().setEnterTransition(fade);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②代码方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ActivityA代码如下：实现一个Slide对象并且设置时间为1000毫秒&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setContentView(R.layout.activity_transition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setupWindowAnimations();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setupWindowAnimations&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Slide slide = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Slide();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        slide.setDuration(&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        getWindow().setExitTransition(slide);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ActivityB中实现一个Fide对象并且设置时间为1000毫秒；&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setContentView(R.layout.activity_transition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setupWindowAnimations();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setupWindowAnimations&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Fade fade = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Fade();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fade.setDuration(&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        getWindow().setEnterTransition(fade);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、两个activity或者Fragment之间shared elements 切换效果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Shared elements转换确定两个Activity之间共享的视图如何在这两个Activity之间转换；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果两个Activity在不同的位置和大小中具有相同的图像，则通过Shared elements转换会在这两个Activity之间平滑地转换和缩放图像；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当从Activity A跳转到Activity B时，ActivityA， ActivityB中的两个item有动画变化，但是要注意的时ActivityA ，ActivityB中的item是两个独立的item；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;shared elements转换包括以下几种：&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;changeBounds 改变目标布局中view的边界&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;changeClipBounds 裁剪目标布局中view的边界&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;changeTransform 实现旋转或者缩放动画&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;changeImageTransform 实现目标布局中ImageView的旋转或者缩放动画&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;实现上面的效果需要三个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.7972103004291845&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/kyDL16ViavhHicPvjRtficvg3Q5zaEb8lPvpwic3BT7UBkdfqmejBHDHsgoicX88jESLSibk07nqbR7HKu9coibHQCib9A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;932&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;① Window Content Transition&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设置styles.xml文件，允许windowContentTransitions如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;value/style.xml&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;MaterialAnimations&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;parent&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:windowContentTransitions&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②定义一个相同的transition名称&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分别在Activity A 和Activity B的布局文件中定义item，这两个item的属性可以不一样，但是android:transitionName必须一样。如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;activity_a.xml&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;ImageView&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:id=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@+id/small_blue_icon&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        style=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/MaterialAnimations.Icon.Small&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:src=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@drawable/circle&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:transitionName=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@string/blue_name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;activity_b.xml&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;ImageView&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:id=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@+id/big_blue_icon&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        style=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/MaterialAnimations.Icon.Big&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:src=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@drawable/circle&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:transitionName=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@string/blue_name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③在activity中启动shared element&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用ActivityOptions.makeSceneTransitionAnimation()方法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ActivityA.java&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;blueIconImageView.setOnClickListener(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; View.OnClickListener() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onClick&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;View v&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Intent i = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Intent(MainActivity.&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, SharedElementActivity.class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        View sharedView = blueIconImageView;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        String transitionName = getString(R.&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;.blue_name);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ActivityOptions transitionActivityOptions = ActivityOptions.makeSceneTransitionAnimation(MainActivity.&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, sharedView, transitionName);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        startActivity(i, transitionActivityOptions.toBundle());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Fragment之间Shared elements&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Fragment之间的Shared elements的使用过程和Activity之间的类似，分为三个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①允许windowContentTransitions&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;MaterialAnimations&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;parent&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:windowContentTransitions&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②定义一个共同的变换名称&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;layout/fragment_a.xml&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;ImageView&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:id=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@+id/small_blue_icon&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        style=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/MaterialAnimations.Icon.Small&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:src=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@drawable/circle&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:transitionName=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@string/blue_name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;layout/fragment_b.xml&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;ImageView&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:id=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@+id/big_blue_icon&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        style=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/MaterialAnimations.Icon.Big&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:src=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@drawable/circle&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:transitionName=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@string/blue_name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③使用FragmentTransaction&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;FragmentB fragmentB = FragmentB.newInstance(sample);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Slide slideTransition = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Slide(Gravity.RIGHT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;slideTransition.setDuration(&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sharedElementFragment2.setEnterTransition(slideTransition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ChangeBounds changeBoundsTransition = TransitionInflater.&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;).inflateTransition(R.transition.change_bounds);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fragmentB.setSharedElementEnterTransition(changeBoundsTransition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;getFragmentManager().beginTransaction()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .replace(R.id.content, fragmentB)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .addSharedElement(blueView, getString(R.&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;.blue_name))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .commit();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;学习就要沉下心来认真的去领悟&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0NDE3MjM1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhFRZkgpibUGGz2NIiaBUpj7NeBSJASje1M1ZhVvpDIGibicMUeCiad3ptsJLaLUjhrVYs5bGZWuenY6UaQ/0?wx_fmt=png&quot; data-nickname=&quot;Android开发编程&quot; data-alias=&quot;&quot; data-signature=&quot;一个有10多年经验开发的android、java、前端等语言的老程序员，在这里一起聊聊技术，一起聊聊生活、一起聊聊中年危机的生存之道，一起进步一起加油，感兴趣的欢迎订阅；不定时的更新。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NDE3MjM1Ng==&amp;amp;mid=2247485063&amp;amp;idx=1&amp;amp;sn=8de7b34a2f5d2e24594fdd4b6688ad5b&amp;amp;chksm=c329faacf45e73ba5e73b91d50c68bf7ffa45c65ab091c826baee5317c4e0518da37822f3977&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java进阶之深入理解负载均衡的5种算法实现原理&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ad74e7676957b46695d55c75973fcfc1</guid>
<title>2021 年快结束了！抓紧啦！</title>
<link>https://toutiao.io/k/809c4m6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1c83f438db513c1805d384e319860b11</guid>
<title>数据思维在携程商旅页面性能优化中的一次实践</title>
<link>https://toutiao.io/k/pu73a6l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5MDI3MjA5MQ==&amp;amp;action=getalbum&amp;amp;album_id=1748286673357963265#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1748286673357963265&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#大数据&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;10个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:0.title1&quot;&gt;&lt;p&gt;&lt;strong&gt;作者简介&lt;/strong&gt;&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Graviton，携程研发总监，专注数据思维驱动团队效能与技术发展。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文旨在通过一个实际的例子，说明如何通过数据思维来解决研发工作中的一些棘手问题。通过此文，希望能够清楚地阐述我对下面几个问题的理解：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【What】什么是“数据思维”？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【Why】为什么要用“数据思维”去解决问题？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【Who】数据分析师、开发工程师、测试工程师、产品经理等各角色在这个领域内的定位？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【How】能否用一个清晰可复制的流程来描述“数据思维”的执行过程？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、什么是“数据思维”？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我从Brian Godsey的著作《THINK LIKE A DATA SCIENTIST——Tackle the Data Science Process Step-by-Step》一书中，深受启发，书中提到：“数据科学的核心并不关注数据库的具体实现或者编程语言，即使这些内容对从业者而言是不可缺少的。其核心在于数据内容之间的相互作用，给定项目的目标以及用于实现这些目标的数据分析方法。” &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据科学是一门新兴学科，说白了就是一种方法论。结合书名所提，“数据思维”本质上就是应用这种方法论去思考 (Think) ，&lt;strong&gt;去分析、理解“数据内容之间的相互作用”，再结合“数据分析方法”，去实现“给定项目的目标”。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、为什么要用“数据思维”？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据的价值已是公认的共识。数据可以从理性客观的方式来表达方向、程度、结果等等。拿互联网行业的研发工作为例，我们经常面对“如何用有限的研发资源来解决更多的需求”这样的问题，相比靠经验决策，相对公平、有效的解决方案唯有通过数据去量化每个需求带来的收益，从而可以有一个评判标准决定优先级；再者，我们也通常会用“影响多少订单量”这样的数据来衡量一个故障的严重程度；同时，我们也会定义一些特征、主动标记和采集一些符合这些特征的数据，从而可以衡量某个特定问题的结果，比如通过某些数据说明系统的用户体验得到了提升。总之，建立在数据之上的思考和讨论，往往更清晰，更易理解，更具说服力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、角色与定位&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般成熟的团队都会有数据分析师，数据科学家这样的角色，从工作职能上来讲，分析类的工作应该归属于他们。他们可以利用统计学、算法模型、机器学习等专业手段，把混沌未知的问题转化成更易于决策的数据依据。比如，如何优化一个搜索功能，让用户更快地搜索到他们感兴趣的产品或内容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但今天讨论的“数据思维”，我认为并不专属于他们，而理应所有的职能角色都应该具备。而且掌握数据科学相关的专业知识并不是“数据思维”得以实践的必要条件。比如研发需要记录标识用户行为、系统状态等数据的埋点，并能分析它们以用于技术排障；测试工程师需要记录bug产生的数量，给它们按照严重程度分类，并通过统计不同项目产生bug的变化来评价项目质量；产品经理需要通过AB实验对比转化率、点击率等等这些最基本的指标，以验证产品收益是否符合预期……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、流程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来，我们就以一个实际的例子来说明：如何利用“数据思维”来解决一个棘手的问题——页面性能优化。我尽可能详细地把“数据思维”相关的全过程记录下来，包括基于数据的思考过程，脱敏后的技术实现方法等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一步：我们需要明确问题和目标&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;问题1：我们的预定页面一直被用户投诉，非常慢，体验很差！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;问题2：现阶段，我们各组能用于专项提升用户体验的研发和测试资源都非常有限！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上述两个问题，我们设定期望的目标：挤出少量的研发和测试资源，限定一个特定场景，看到用户体验上的正向变化。我们限定了如下场景：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第二步：找到量化指标&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;明确问题和目标后，我们需要找到几个有效且容易采集的指标来评价我们的问题和目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;指标1: 自采TTI &lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们很容易想到，评价用户体验最直观的感受就是要“快”，从定义上来讲，就是从页面访问开始到看到列表卡片这段周期的耗时。这个数据很容易就可以被采集，开始和结束两个时间戳减一下，单位是毫秒。然后把一个时间片段内所有采集到的这种耗时从小到大排列，取第95%小那个位置的值，叫95分位（类似方法称percentile，也叫分位线，后续统一用95L表示），这个值的意义是代表95%的访问都小于这个耗时，可以代表绝大多数的用户。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是个综合性指标，代表了几乎整个页面首屏加载的生命周期，既包含了客户端因素，也包含了服务端因素。为方便描述，我们计这个指标为“自采TTI（Time to Interactive）”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里假定：我们已经部署了基于Apache Hadoop生态下的存储系统（HDFS）、数仓（HIVE）和查询分析引擎（SPARK），以及至少一种可定期调度执行特定脚本的工具（比如crontab），具体的部署方案超出了本文的介绍范围，不再赘述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们在客户端开发过程中，有很重要的一个步骤就是埋点的设计和开发。客户端开发会把特定埋点的结构化信息上报到服务端（这个过程使用了Kafka），然后会以特定的结构放入HIVE数仓。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以“自采TTI”为例，转换成JSON格式后大概是这样：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;key&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;o_corp_htl_performance&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;ts&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;1630653123093&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;userId&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;012345&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;pageId&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1234567890&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;sessionId&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;2940023&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;data&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;{\&quot;name\&quot;:\&quot;customTTI\&quot;,\&quot;latency\&quot;:1729,\&quot;startTime\&quot;:1630653123093 }\&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这能映射到HIVE上的一张表，每个key对应表里的一个字段。这是比较通用的一张表，通过自定义data字段，客户端可以上报各种自定义类型的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面是对应的按天分区的建表语句。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`edw_corp_frontend_tracelog`&lt;/span&gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`ts`&lt;/span&gt;: &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;访问时间戳&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`key`&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;埋点Key&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`userId`&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;用户ID&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`pageId`&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;页面ID&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`sessionId`&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Session ID&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`data`&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;自定义埋点内容&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;客户端页面自定义埋点表&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;PARTITIONED &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; (&lt;span class=&quot;code-snippet__string&quot;&gt;`d`&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;date&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;STORED&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; ORC;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，有了这张表后，我们可以通过执行一句简单的SQL得到每一天的“自采TTI”的95L聚合数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; d,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;avg&lt;/span&gt;(latency) &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; avg_latency,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       percentile(latency, &lt;span class=&quot;code-snippet__number&quot;&gt;0.5&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; P50_latency,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       percentile(latency, &lt;span class=&quot;code-snippet__number&quot;&gt;0.95&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; P95_latency&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  (&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; d,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          userId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          pageId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;CAST&lt;/span&gt;(get_json_object(&lt;span class=&quot;code-snippet__string&quot;&gt;`data`&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;$.latency&#x27;&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; latency&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; mytracedb.edw_corp_frontend_tracelog&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; d&amp;gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2021-01-01&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; get_json_object(&lt;span class=&quot;code-snippet__string&quot;&gt;`data`&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;$.name)=&#x27;&lt;/span&gt;customTTI&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;) AS dx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;GROUP BY d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以把这个结果集导到某个数据可视化工具（Tableau/Excel）上展示，这样可以更加直观，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788375&quot; data-ratio=&quot;0.449901768172888&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhpO510aSZspK9MfU1iaS5nKhlx04RTFvGQr0EtI3JhaFUxbu0bP6Gxibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1018&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;指标2: 自采FMP&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按之前的解释，需要思考“数据内容之间的相互作用”。而单“自采TTI”只是一个综合性的数据内容，我们还需要一些数据能进一步定位哪些因素在对这个综合数据起主要作用。下图展示了整个页面加载的过程：前面三张图是纯客户端在运行，页面上没有展示内容；中间5张图看到头部加载了部分内容，列表还在加载中；最后2张图可以看到所有内容都已经展示出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788376&quot; data-ratio=&quot;0.16796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhL6laXmar6aWKtgf4dDQzibcPvia1Zkujbxm7JMF97RmjGteLUbWjZqFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单来说，就是从浏览器（或者webview）发起请求到服务器下载页面数据和相关脚本，然后客户端渲染（render）出用户看得到且可交互的页面节点（DOM）。整个时间消耗也就分成服务端和客户端两部分（理论上还要考虑网络部分，但这块比较复杂，后续可以单独起一篇讨论）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们把前3张图的部分单独拉出来做一个指标，客户端在执行到第4张图的时候，上报一个埋点，只需要把data字段里的name值修改下即可：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;key&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;o_corp_htl_performance&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;ts&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;1630653123093&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;userId&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;012345&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;pageId&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1234567890&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;sessionId&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;2940023&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;data&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;{\&quot;name\&quot;:\&quot;filterLoaded\&quot;,\&quot;latency\&quot;:1729,\&quot;startTime\&quot;:1630653123093 }\&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;指标3: 自采BFF延迟&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来，中间5张图主要是在服务端处理，服务层面的耗时指标也需要考虑进来。这里客户端可以使用两种模式来请求API数据：一种是常规的CSR（Client Side Rendering），使用AJAX异步请求Restful API后在客户端渲染出DOM；另一种是SSR（Server Side Rendering），使用NodeJS调用内网SOA服务并直接生成好DOM下发到客户端。&lt;/span&gt;&lt;span&gt;不论哪种模式，我们先只计API服务从接收到请求到输出报文，这个耗时为整个服务耗时，同样看95L。我们计这个指标为“自采BFF延迟”。实际上BFF（Backend for frontend）是对上游依赖服务的聚合，对BFF内部的耗时分布还可以进一步拆分，比如我们主要依赖Dx服务，那我们可以用类似方法，计“自采Dx延迟”，同样看95L，Dx&amp;lt;BFF。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务端的日志相对比较丰富，但我们期望所有的数据内容都能归集到同一个数仓里，方便关联。于是通过ETL (Extract-Transfer-Load) 工具，把服务端存储的结构化埋点日志分发存储到HDFS，可以使用LinkedIn的Camus，很容易做到将kafka消息转存到HDFS上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788373&quot; data-ratio=&quot;0.48880597014925375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhGJx3vSrJBBSxbvSo8EMoavFenLycEmJwaNmTRFWOw2Opicsx0b24DWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;指标4: Google Lighthouse Score&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到目前为止，我们已经有了自己定义的指标，而且很容易得到它们。但它们对用户体验的表达并不客观，因为我们基于一个假设，用户体验和某个页面执行周期的耗时有关。我们完全有理由可以质疑，假设这些自采指标优化得非常好看，真的就代表用户体验好了么？其实，这个问题的本质是如何定义用户体验？而“快”是我们通过共识和经验得出来的最容易的假设，但还是可能存在“幸存者偏差”的错误认知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这确实是一个不太好准确回答的问题，因为体验问题本质是一种主观感性认知，没有一种绝对的标量定义。但我们可以想办法通过对比的方法：找到一个大多数用户都觉得体验好的页面，用一套相对全面并且通用的标尺来衡量它，再用同样的标尺来衡量我们自己的页面，从中找到差异，这样我们就能靠近我们想要的答案。很庆幸，我们要的这个通用标尺Google给我们提供了解决方案，那就是Lighthouse（&lt;a target=&quot;_blank&quot; href=&quot;https://developers.google.com/web/tools/lighthouse/&quot; textvalue=&quot;https://developers.google.com/web/tools/lighthouse/&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://developers.google.com/web/tools/lighthouse/&lt;/a&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们最常用的Chrome浏览器默认集成了Lighthouse，只需要打开“开发者工具”，就能看到它，并直接让它生成一份可视化结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788377&quot; data-ratio=&quot;0.452991452991453&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhibG8BibHr6SWtYz3WFuGQWK8iapLN5DmWq0dFjxJc0dq0FUK87D8tGUGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;936&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;刚才有说到，要使用对比的方法，要找个大家公认的体验好的目标站点且业务性质相似，我们很快找到了携程&lt;/span&gt;&lt;span&gt;大住宿业务的&lt;/span&gt;&lt;span&gt;H5列表页。通过比对，很容易就能找到差距和入手点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788374&quot; data-ratio=&quot;0.4596774193548387&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhGaqNWyGUDAjNeLM3CWQCsibSP2H4HYFtx2YeMNic8Fr1kUVVbsFNGaSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;744&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但我们每次都只能通过浏览器手动对两个页面采集评分（audit），那显然是非常低效且不可持续的。要想办法自动化持续采集这些lighthouse的评分数据，而lighthouse提供了Nodejs的npm包，可以通过Nodejs脚本来执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在我们尝试使用node脚本来生成lighthouse评分的时候，发现lighthouse只能基于单个页面执行。整个audit过程相当于在浏览器里打开指定URL，这对我们的目标页面并不友好，因为我们有登录态，还有部分数据依赖前置页面产生的cookie和localstorage。也就是说，直接打开目标页面会造成被迫自动跳转至登录页或产生报错，导致audit的结果不是我们想要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解决这个问题其实也不难，借用UI自动化测试的思路，引入了puppeteer来模拟前置流程，到达目标页面后，执行lighthouse。为了让整个过程更易维护和运行在我们的调度系统上（支持自定义docker镜像），我们直接打包了一个docker镜像。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先建一个dockerfile，把相关依赖包都写进来（至于如何知道要加哪些依赖，就先假设没有依赖，然后在本地环境加载运行这个镜像，通过报错信息收集缺失的依赖包，直到我们的脚本在本地能够成功运行）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;centos&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;MAINTAINER&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;by Graviton&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;curl -sL https://rpm.nodesource.com/setup_12.x | bash -&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;sudo yum -y install nodejs at-spi2-atk libdrm libxkbcommon libXcomposite libXdamage libXrandr libgbm pango alsa-lib-devel&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;mkdir -p /home/lighthouse&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;cd /home/lighthouse&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;npm install --save puppeteer lighthouse&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;npm install --save-dev esm&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;COPY lighthouse-util.js /home/lighthouse&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面用到的 lighthouse-util.js 脚本如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; puppeteer &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;puppeteer&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; lighthouse &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;lighthouse&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;initBrowser&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; puppeteer.launch({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;args&lt;/span&gt;: [&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;--no-sandbox&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;audit&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;browser, targetUrl, options = { output: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;json&quot;&lt;/span&gt; }&lt;/span&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; endpoint = browser.wsEndpoint();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; url = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; URL(endpoint);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; lighthouse(targetUrl,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;.assign({},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__attr&quot;&gt;port&lt;/span&gt;: url.port&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      options)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    );&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了能让这个镜像更通用，我们并没有把audit某个页面的逻辑打包进来镜像，而是直接通过构建灵活的bash脚本来运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cat &amp;gt; audit.js &amp;lt;&amp;lt; _EOF_&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; { initBrowser, audit } &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/home/lighthouse/lighthouse-util.js&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fs&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; puppeteer &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;puppeteer&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;ms&lt;/span&gt;)&lt;/span&gt;{ &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;code-snippet__function&quot;&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;r&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{setTimeout(r, ms);})}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; iPhone = puppeteer.devices[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;iPhone X&#x27;&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; usr = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&amp;lt;username&amp;gt;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; pwd = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&amp;lt;password&amp;gt;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; browser = &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; initBrowser();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; page = &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; browser.newPage();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; page.emulate(iPhone);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; page.goto(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;https://mydomain.com/my_login_page&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; page.type(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;input.accout&#x27;&lt;/span&gt;, usr);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; page.type(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;input.pwd&#x27;&lt;/span&gt;, pwd);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; page.click(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;button.login&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; page.waitForNavigation();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; page.goto(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;https://mydomain.com/homepage&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; page.click(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;button.next&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; targetUrl = page.url();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ready to audit:&quot;&lt;/span&gt;, targetUrl);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; audit(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    browser,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    targetUrl,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        output: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;json&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        onlyCategories: [&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;performance&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  );&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fs.writeFileSync(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;report.json&quot;&lt;/span&gt;, result.report, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; browser.close();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;})()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .catch(&lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.error)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .then(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;done!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       process.exit(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;_EOF_&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# 本地执行audit.js&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;node -r esm audit.js&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# 生成一个上传到hive的脚本&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cat &amp;gt; hsql.sql &amp;lt;&amp;lt; _EOF_&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;drop table tmp_mytracedb.tmp_lighthouse_audit;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;create table tmp_mytracedb.tmp_lighthouse_audit(report &lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ROW FORMAT DELIMITED FIELDS TERMINATED BY &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\t&#x27;&lt;/span&gt; STORED AS TEXTFILE; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;load data local inpath &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;report.json&#x27;&lt;/span&gt; into table tmp_mytracedb.tmp_lighthouse_audit;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;_EOF_&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# 通过spark-sql执行&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spark-sql -f hsql.sql&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样我们就能灵活地模拟任何交互过程，达到目标页，定时且自动化获得我们想要的结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过一番折腾，我们终于可以自动并正确采集lighthouse评分了。最终，我们把对比的结果展示出来，如下图，可以每天采集多次，并计各分值的中位数变化和趋势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788380&quot; data-ratio=&quot;0.4065934065934066&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72Cxh1y1s8s1z5GKjVJh8wYSwH2iaqFAUDnMsg4ticXzzp7X9UnibrNib985AmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;819&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788378&quot; data-ratio=&quot;0.5814696485623003&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhSjSMygTvTxLK6iaht4FWUicQZSxl9c2UYj3Qg5fZcwEufyXcm2qXbH0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;626&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第三步：分析找到突破口&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;寻找主因&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过上述指标的报表，我们观察到自采TTI的95L在4.8s左右，自采FMP的95L在2.7s左右，自采BFF延迟的95L在1.8s左右。如下图，我们把几个自采指标示意放在一起看，很容易可以发现，客户端的FMP占了TTI近60%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788382&quot; data-ratio=&quot;0.23515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhOUZ53pmN60vJmzqQJHHyOaR7rwA8CT3B1kP1kszDumiaATbtOXxueQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，我们在 lighthouse上找到类似指标FCP (First Contentful Paint: First Contentful Paint marks the time at which the first text or image is painted.) ，发现我们认为体验好的大住宿的列表页，这个FCP的评分是我们列表页的7倍之多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788379&quot; data-ratio=&quot;0.43873517786561267&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhO897FR7rKdgP5QIiaU6vrJH2KOrU4UV4UVtE6jKOiciafJLQznFkP83HQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;759&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;显然，这是我们要找的主因的线索，知道这些数据后，接下来就好办了，无非就是找bad case，从详细的上下文日志中定位出具体慢的原因。由于存储的限制，历史详细日志往往会被自动清除或者archieve到难以查询的地方，所以我们期望bad case越新鲜越好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们的解决方案是将用户行为数据实时同步进clickhouse中，借助clickhouse强大的查询效率，可以从海量用户访问的日志数据中，近乎实时地找到足够新鲜的bad case，关键我们还可以用SQL去查询。下面是我们从clickhouse中找bad case的一个查询语句示例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; toDateTime(ts, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Asia/Shanghai&#x27;&lt;/span&gt;) ts,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       pageId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       userId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       JSONExtract(&lt;span class=&quot;code-snippet__keyword&quot;&gt;data&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;latency&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Int32&#x27;&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; latency&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; myckdb.corp_frontend_tracelog&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; ts &amp;gt;= toDateTime(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2021-09-01 12:00:00&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; ts &amp;lt; toDateTime(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2021-09-01 15:00:00&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;o_corp_htl_performance&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; pageId &lt;span class=&quot;code-snippet__keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;1234567890&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; JSONExtract(&lt;span class=&quot;code-snippet__keyword&quot;&gt;data&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;name&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;String&#x27;&lt;/span&gt;) = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;filterLoaded&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; latency &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; latency &lt;span class=&quot;code-snippet__keyword&quot;&gt;DESC&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;寻找其他机会（次因）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然BFF延迟不算主因，但这是个服务层面指标，从中应该可以找到其他的一些简单可行的机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们分析用户的访问轨迹，一般都是酒店查询首页跳转到酒店列表页。从点击查询按钮到用户看到列表，需要经历网络传输+列表资源下载，我们完全可以把服务端的列表处理提前，从而充分利用这块损耗。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788381&quot; data-ratio=&quot;0.46953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhRvMcolfCeYHgNVZ7Rs8PVibrEx2INGbj0jWPkS556mKPUYToTmFHzSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但这个过程引入了缓存，增加了整体复杂度，我们需要解决两个问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）缓存设多少过期时间合适？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）列表页的起价房型的房态房价和后续详情页看到房型的房价房态不一致的比例能否在可控范围内？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很明显，第1个问题其实影响着第2个问题。设太短的话和常规流程没有区别，设太长的话影响价格一致性（或者变价率）。从有效性角度来考虑，可以统计下历史上两个页面之间访问间隔的分布情况。我们利用HIVE中内置的UDAF函数 histogram_numeric() 可以很轻松地计算出结果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;;&lt;span class=&quot;code-snippet__keyword&quot;&gt;WITH&lt;/span&gt; dx &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; d, ts, userId, sessionId, pageId&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            , ROW_NUMBER() &lt;span class=&quot;code-snippet__keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; userId, sessionId &lt;span class=&quot;code-snippet__keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; ts) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; sortRank&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; mytracedb.edw_corp_frontend_tracelog&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; d = &lt;span class=&quot;code-snippet__keyword&quot;&gt;date_sub&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;current_date&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; histogram_numeric(&lt;span class=&quot;code-snippet__keyword&quot;&gt;duration&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; histo&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; a.d, b.ts - a.ts &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;duration&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; dx a&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;JOIN&lt;/span&gt; dx b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;ON&lt;/span&gt; a.d = b.d&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; a.sessionId = b.sessionId&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; b.sortRank - a.sortRank = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; pageId &lt;span class=&quot;code-snippet__keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;prePageId&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; pageId &lt;span class=&quot;code-snippet__keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;postPageId&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;histogram_numeric (col, n) 的作用是将col列里的数据分到n个桶里（对应柱状图的一根柱子），返回一个struct数组，数组中的每个元素的x代表分桶后每个桶的中心点的横坐标，y代表桶（柱子）的高度，y越大，说明x值附近范围内的占比越多。我们尝试n取20，从输出结果中看到，指定的两个页面间的间隔大多数在17s以内。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是对于问题1，有了一个可参考的值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;x&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;11428.630652725085&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;y&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;97453.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;x&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;63523.86956521735&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;y&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;92.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;x&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;165816.81585677728&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;y&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;391.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;x&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;278073.38000000006&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;y&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;150.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;x&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;375393.6851851851&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;y&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;54.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;x&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;448590.52380952373&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;y&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;42.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;x&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;524167.9024390245&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;y&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;41.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ... &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同理，对于问题2，可以从日志中计算出目前价格一致性（或者变价率）的数据。但需要在发布过程中，能够实时地发现价格一致率的变化情况，以尽量减少未知异常对生产的影响，所以我们需要做到对价格一致性（或者变价率）在发布阶段进行实时监控。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于一致性的计算需要两个页面间的数据计算，这不管在前端还是后端计算，都需要增加复杂度，增加开发和测试成本。事实上，列表页BFF接口输出的所有信息和详情页BFF接口输出的所有信息都以文本形式存在clickhouse的日志表里（只存几天），于是我们想到，仍旧通过clickhouse来尝试做两个接口日志报文间的关联计算，得到一个近实时的变价率。麻烦的是，详情页的数据结构是一个hotelid对应一个price list数组，而列表页的数据结构是n个hotelid一一对应n个price，我们还需要通过行列转换，找到对应的hotelid和price list里的第一个值（用户看到的第一个价格）。这里就需要用到clickhouse的高级查询语法“Array Join”，示例如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; toUInt32(toStartOfInterval(toDateTime(detailTS, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Asia/Shanghai&#x27;&lt;/span&gt;), &lt;span class=&quot;code-snippet__built_in&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;MINUTE&lt;/span&gt;)) * &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; t,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       countIf(priceDelta != &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) / &lt;span class=&quot;code-snippet__keyword&quot;&gt;count&lt;/span&gt;() &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`price changed %`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; b.t &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; listTS,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          a.t &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; detailTS,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          toInt32(a.t) - toInt32(b.t) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;duration&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          a.hotelid,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          a.price &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; detailPrice,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          b.price &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; listPrice,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          toFloat32OrZero(replaceRegexpAll(a.price,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;[^0-9\.]&#x27;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            - toFloat32OrZero(replaceRegexpAll(b.price,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;[^0-9\.]&#x27;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;)) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; priceDelta &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; ts &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; t, userId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;extract&lt;/span&gt;(requestBody, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&quot;hotel&quot;:&quot;([0-9]+)&quot;&#x27;&lt;/span&gt;) hotelid,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;extract&lt;/span&gt;(responseBody, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&quot;rooms&quot;:.*?&quot;price&quot;:([0-9\.]+)&#x27;&lt;/span&gt;) price&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; myckdb.corp_bff_tracelog&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; ts &amp;gt;= toDateTime(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2021-09-01 10:00:00&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; ts &amp;lt; toDateTime(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2021-09-01 12:00:00&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;length&lt;/span&gt;(hotelid) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     ) a&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;JOIN&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; t,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             idx,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             userId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             tupleElement(h_p,&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; hotelid,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             tupleElement(h_p,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; price&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; t,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            userId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                arrayMap((x,y)-&amp;gt; (x, y), hotels, prices) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; hotel_price_map&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; ts &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; t, userId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             extractAll(responseBody, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&quot;hotelid&quot;:([0-9]+)&#x27;&lt;/span&gt;) hotels,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               extractAll(responseBody, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&quot;hotelid&quot;:[0-9]+,.*?,&quot;price&quot;:&quot;([^&quot;]+)&quot;&#x27;&lt;/span&gt;) prices&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; myckdb.corp_bff_tracelog&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; ts &amp;gt;= toDateTime(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2021-09-01 10:00:00&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; ts &amp;lt; toDateTime(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2021-09-01 12:00:00&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; ....&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;length&lt;/span&gt;(hotels) = &lt;span class=&quot;code-snippet__keyword&quot;&gt;length&lt;/span&gt;(prices)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__built_in&quot;&gt;Array&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;JOIN&lt;/span&gt; hotel_price_map &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; h_p, arrayEnumerate(hotel_price_map) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; idx&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; t, idx&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ) b &lt;span class=&quot;code-snippet__keyword&quot;&gt;ON&lt;/span&gt; a.hotelid = b.hotelid&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; a.userId = b.userId&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; listTS &amp;lt; detailTS &lt;span class=&quot;code-snippet__keyword&quot;&gt;AND&lt;/span&gt; toInt32(a.t) - toInt32(b.t) &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;120&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; t, &lt;span class=&quot;code-snippet__keyword&quot;&gt;duration&lt;/span&gt;, hotelid&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; t&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后在Grafana上，我们就有了可观察的实时变价率看板。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788385&quot; data-ratio=&quot;0.29102564102564105&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72Cxhc2I8quOriaSICe0MVvmxw4DcTyroqp1WfsIlP1qfDRIDygWYGDdLWMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;780&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第四步：实施与监控&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有了前三步，很容易可以找到针对主因和次因的可尝试的方案。由于本文侧重点在“数据思维”，所以这里只是简述优化方案细节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对FMP，我们尝试了SSR、JS拆包、调用链优化等等。如下图FMP的趋势，在灰度测试结束后可以看到有明显的降低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788383&quot; data-ratio=&quot;0.4140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhkppQsESGUIibFEJNSPXvS15YgJZRicLjW80LlYcejWuZrZ7jW3H5kazw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对BFF的预加载方案，在灰度测试过程中，下面的自采TTI指标住逐步下降。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788384&quot; data-ratio=&quot;0.40703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72Cxhj7lybtiboQianzrzyp7GVMa5v1WTCeQibicLDFF6G8wYdlib9ylcWGCvvQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，通过实时的新老版本的指标比对，可以观察到明显的结果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从BFF接口视角，高峰时间段，命中预请求方案（B版）有大约500ms左右的优势，平均缓存命中率达92%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788387&quot; data-ratio=&quot;0.29624664879356566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhFSricS89p97nlB4vBnct4HVcDqxwl7q6xVicvPyfRfftJicyLaBkWDTwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;746&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788386&quot; data-ratio=&quot;0.2857142857142857&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72Cxhk7n36s9Np35YZ9UHFzgxEKicq1jLjtEglUdx17wlkATh5ZJgViaFKibIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;770&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从客户端视角，同样的高峰时间段，命中预请求方案（B版）有大约850ms左右的优势，其中包括了客户端其他优化点。而之前提到的变价率稍有变大，但并没有太大的变化，符合预期。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788388&quot; data-ratio=&quot;0.28991060025542786&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72CxhewoTdibVKT5zd4wNKDF19awgfUoQJbYtKmJv9zRovSbuxRXde8bgHJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;783&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788389&quot; data-ratio=&quot;0.29449423815621&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72Cxhib7sAOMSpI1QdF2EILSv2rDsibB2yaQQrFlm2yzY6dHtxohlcI6qic2zA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;781&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此，通过实时与非实时数据指标，论证了我们的实施措施是有效的。最后再补一个对比效果视屏，印证感官上的体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第五步：持续迭代&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回顾之前定义的目标，其中有个不完美的地方就是没有定义出针对某个指标的目标值。我理解这是一次用有限的资源做的一次尝试性的性能优化，也可以认为这一次尝试是在帮助我们指明下个明确的目标。在这次尝试后，我们就可以定义下一个优化目标，而且优化次数越是多，每次优化的目标应该更清晰，或者说应该有几个更具象的目标数字。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对本次优化，在几个自采指标上看到明显的正向变化，但和我们对标的大住宿的酒店列表相比，几个lighthouse指标还有明显的差距，于是我们定义下次迭代的优化目标：对齐大住宿的FCP评分达到75分以上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;549788390&quot; data-ratio=&quot;0.23630672926447574&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cRVr9YOxtskDsWTOib72Cxh0jSLsiagdsjL365L1CjtIToMoaXJVqsX93GWJOmXEy8TEb6oHXf3ZcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1278&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我认为“数据思维”中说的“数据”其实并不难，而大多数反对“数据论”者主要的理由或许是“如何用有限的成本并且快速得到正确的数据”。确实，我们在这次性能优化之前，其实已经花了近3个月时间去梳理、设计、coding近3000个埋点，随着业务迭代，仍旧存在遗漏，需要不断补充。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们在分析过程中，最痛苦的往往就是突然发现缺失埋点或者数据错误。另外，有些数据源自非自己领域可控的范畴，比如CDN访问日志、上面说的lighthouse评分之类，我们还需要花时间去定制脚本去采集。而在deadline的压力下，一些常规的技改或者业务迭代过程中，可能并没有引入“埋点设计”、“数据采集”、“数据分析”等步骤，或者预留足时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但事实上，我认为这些工作往往是一本万利的，一次投入持续受益。借用经济学中的一种说法，它的边际收益很高。所以如果认同数据的价值，那在一个体系内，完全可以自上而下地驱动做一些初期的技术投入和数据建设。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文花了大量篇幅陈述了一些相关的数据建设的工具使用、方法技巧，主要的技术栈也集中在SQL、Bash、Python等比较通用的脚本语言，目的也是想说明在理清思路后，技术的实现手段并没有那么复杂。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然而，真正难的是“思维”，我理解其“难”主要表现在:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;理解数据背后的意义&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不同数据之间的关系&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;从数据中发现潜在问题或者机会&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这就只能通过工作中的项目，不断地利用这个流程，实践我们的“数据思维”方法论，从而形成一种工作习惯，从而可以真正可靠、高效地达成我们的业务目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;团队招聘信息&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们是携程集团商旅事业部，是中国领先差旅管理公司（Travel Management Company），我们为企业客户提供一站式差旅产品出行及咨询服务并协助企业管理差旅费用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;携程商旅的技术团队深入B端技术架构生态，勇于尝试创新，乐于数据思维推进技术和业务并行发展。我们提倡工程师文化，热情开放，非常适合有想法的你来这个平台大展身手，期待与你共事。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前有前端/后端Java开发/测试开发等岗位正在火热招聘。简历投递邮箱：junyizhu@trip.com，邮件标题：【姓名】-【携程商旅研发部】- 【投递职位】&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;【推荐阅读】&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-fileid=&quot;549788397&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1dQeF7Gp0oleE7c4yagbuiaj4SJcYt5qCs9LXOibNWibasp1cHCPAYjOHK2KnDA8seicOoJOpZB45Aw7Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; “携程技术”公众号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;  分享，交流，成长&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>