<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>980c22408c7652a7d28dadf5309e0101</guid>
<title>15K Star！Github 上最火的低代码开发平台！</title>
<link>https://toutiao.io/k/3qv24va</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【导语】：用于构建管理面板、内部工具和仪表板的低代码平台。&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.521875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DSU8cv1j3ibRxk625TiaCcrttze4vRZCqYKlyFTIFWgUkUvD41FsnFKXv4qQW4o2KsRm0px9EyHGPCMeN9WszPtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;简介&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Appsmith 是一个用于构建管理面板、内部工具和仪表板的低代码平台，可以在几分钟内将任何数据源转换为内部应用程序，允许拖放 UI 组件来构建页面，连接到任何 API、数据库或 GraphQL 源，并使用 JavaScript 语言编写逻辑。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4955595026642984&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DSU8cv1j3ibRxk625TiaCcrttze4vRZCqYuYMT7H6eVfJSPHo3sU0ja1VR4QptLIUTPOVP4Hs39THhz5iaKjzFGMw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;563&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用现成的组件构建工作流，将表格、图表、表单等常见元素直接拖入应用程序，包括文本、表单、输入、按钮、表格、图像、复选框、开关、单选按钮、日期选择器、下拉列表、文件选择器、容器、地图、模式、富文本编辑器、选项卡和视频等。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/DSU8cv1j3ibRxk625TiaCcrttze4vRZCqY160klanwzJz8y98a9GibYDJ3rADlib4T59kuhnD13OgIoOXKuwOW7QXA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Appsmith 可以使用 15+ 种 DB、Rest API 或 GraphQL 作为数据源，支持 OAuth 2.0 协议和 CURL。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/DSU8cv1j3ibRxk625TiaCcrttze4vRZCqYHWNiaJCW29kibZdaLYibiaxoAQmOORR1ccOFG0E0Cmdy6NiaRS5WianyKaiaQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用 JavaScript 语言编写逻辑，元素之间的代码交互、更新数据源或操作 SQL 查询都可以使用。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/DSU8cv1j3ibRxk625TiaCcrttze4vRZCqYREt4KOGZBrucfIicYYwQuHzkibv7ZPfr2iaiaBicxyqo29S2p7fj9Bd0GWA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可以与团队共享创建的应用程序，为团队成员分配角色，限定角色的访问权限。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/DSU8cv1j3ibRxk625TiaCcrttze4vRZCqYx84FkIT8SyFkGnwRtFXCo5hibAOKHQEO7iaevzJel5ySKZ7HJtIYGPLA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可靠安全的加密传输。Appsmith 应用程序默认是安全的，所有连接都经过 TLS 加密，凭据使用 AES-256 加密，防止数据泄露。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目地址：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://github.com/appsmithorg/appsmith&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安装&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方最推荐两种方式，一种是直接使用 Appsmith Cloud 构建应用程序，一种是使用 Docker 进行安装。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Docker 进行安装要求 Docker 版本 20.10.7 或以上，Docker-Compose 版本 1.29.2 或以上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 appsmith 安装文件夹中添加以下 docker-compose.yml 文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;version: &lt;span&gt;&quot;3&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;services:&lt;br/&gt;  appsmith:&lt;br/&gt;    image: index.docker.io/appsmith/appsmith-ce&lt;br/&gt;    container_name: appsmith&lt;br/&gt;    ports:&lt;br/&gt;      - &lt;span&gt;&quot;80:80&quot;&lt;/span&gt;&lt;br/&gt;      - &lt;span&gt;&quot;443:443&quot;&lt;/span&gt;&lt;br/&gt;      - &lt;span&gt;&quot;9001:9001&quot;&lt;/span&gt;&lt;br/&gt;    volumes:&lt;br/&gt;      - ./stacks:/appsmith-stacks&lt;br/&gt;    labels:&lt;br/&gt;      com.centurylinklabs.watchtower.enable: &lt;span&gt;&quot;true&quot;&lt;/span&gt;&lt;br/&gt;    restart: unless-stopped&lt;br/&gt;&lt;br/&gt;  auto_update:&lt;br/&gt;    image: containrrr/watchtower:latest-dev&lt;br/&gt;    volumes:&lt;br/&gt;      - /var/run/docker.sock:/var/run/docker.sock&lt;br/&gt;    &lt;span&gt;# Update check interval in seconds.&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;command&lt;/span&gt;: --schedule &lt;span&gt;&quot;0 0 * ? * *&quot;&lt;/span&gt; --label-enable --cleanup&lt;br/&gt;    restart: unless-stopped&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是在远程机器上安装可以使用以下命令下载 docker-compose.yml 文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;curl -L https://bit.ly/32jBNin -o &lt;span&gt;$PWD&lt;/span&gt;/docker-compose.yml&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个配置文件会运行 Appsmith 示例和 Watchtower 实例，以便使 Appsmith 自动保持最新状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行以下命令启动 docker 容器，如果提示没有权限需要以 sudo 身份执行命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;docker-compose up -d&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以使用以下命令跟踪日志：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;docker logs -f appsmith&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动成功后，会看到 Appsmith is Running! 的消息，通过 http://localhost 访问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要进行应用程序的更新，可以到安装的根目录下执行以下命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;docker-compose pull&lt;br/&gt;docker-compose rm -fsv appsmith&lt;br/&gt;docker-compose up -d&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section/&gt;&lt;/section&gt;&lt;section&gt;视频对应的安装步骤文档官网地址为：&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://docs.appsmith.com/setup/docker&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;简单使用&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以数据库作为数据源简单介绍。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;连接到数据库&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Appsmith 会创建一个与数据库服务器连接的连接池，后续查询可以重用连接池中的连接，提高查询效率。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;点击 Datasources 旁边的 + 号&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;看到 Appsmith 可以连接的数据源列表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从支持的列表中选中一个数据库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;填写连接到数据库所需的配置信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;单击测试验证是否能连接成功&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;保存&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;显示数据&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Appsmith 拥有一系列可用于构建 UI 的小部件，数据显示需要和这些小部件结合起来。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;小部件可以用部件窗口中拖动防止到画布上，调整大小以适应他们需要显示的数据，具有可视化编辑的属性，可以设置数据、样式等。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;0.6832460732984293&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/DSU8cv1j3ibRxk625TiaCcrttze4vRZCqYaH6fuPuev9GDKibq17ufEjN542uibqtvwydVUkic4m5OiapibmNk2STPInw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1146&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在小部件中显示数据。可以打开属性窗口来编辑小部件属性，通过引用 Query 的名称（唯一标识符），可以在小部件属性中设置来自 Query 的数据。Appsmith 是响应式的，只要查询中的数据发生变化，小部件就会自动更新。例如，可以将查询的结果绑定如下：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{{ Table1.selectedRow.id }}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;0.7375132837407014&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/DSU8cv1j3ibRxk625TiaCcrttze4vRZCqYr7h7KVt0ZibhksW9XickSmpNRHR67E3BtSVIhOYfPv4icBKgXAIbKPCHw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;941&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyMzk0NA==&amp;amp;mid=2650830310&amp;amp;idx=1&amp;amp;sn=7b7b383c90d58d646f34e5fe786792e3&amp;amp;chksm=84ca4e61b3bdc777986a757015bcfc4a33daa85557cc336827dcc7f2fae830142c1037791f2b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;知名老牌刊物“计算机世界”停工停业；华为回应手机只能充电至 80%&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;再见！“计算机世界”&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyMzk0NA==&amp;amp;mid=2650830290&amp;amp;idx=1&amp;amp;sn=a9040c13e5f7bc670bd7e3b927ba974d&amp;amp;chksm=84ca4e55b3bdc743c8306e26eb8cb8ba30de2c14c5b5f799836c4dc69f851829b9bf20bbbd1b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;华为再次全球招天才少年，最高年薪超200万；市场监管总局称已关注知网涉嫌垄断问题&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;市场监管总局称已关注知网涉嫌垄断问题&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyMzk0NA==&amp;amp;mid=2650830277&amp;amp;idx=1&amp;amp;sn=45eeb8123089e2bc050e23e5ada904fc&amp;amp;chksm=84ca4e42b3bdc754ac31623058965e508487a226b987e4fc7933e7f3d4cdf662a90b5153d883&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;微信辟谣“分割上海的朋友圈”；苹果“杀死”macOS Server；机智号火星直升机首飞一周年&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;苹果“杀死”macOS Server；机智号火星直升机首飞一周年&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;觉得这条资讯有帮助？请转发给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;推荐关注 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;技术最前线&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;看 IT 要闻&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3MDMyMzk0NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/gDmjibFWrFyNNcKCx7SURQWib5e6XYy3wV3mSa4XCjRo4iazUcgB8UGWg410zrXvefSNCoF1Xx1HoW2BC2oY4ADyQ/0?wx_fmt=png&quot; data-nickname=&quot;技术最前线&quot; data-alias=&quot;topitnews&quot; data-signature=&quot;关注 IT 业界的新技术和新动态&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0ce40fc8ffb2902f5ee8392e07f804f5</guid>
<title>架构设计资料合集</title>
<link>https://toutiao.io/k/iqlrz7b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;logged-out env-production page-responsive page-blob&quot; id=&quot;readabilityBody&quot;&gt;
    

    

  &lt;p id=&quot;start-of-content&quot; class=&quot;show-on-focus&quot;/&gt;







    


    

  &lt;include-fragment class=&quot;js-notification-shelf-include-fragment&quot; data-base-src=&quot;https://github.com/notifications/beta/shelf&quot;/&gt;





  &lt;div class=&quot;application-main &quot; data-commit-hovercards-enabled=&quot;&quot; data-discussion-hovercards-enabled=&quot;&quot; data-issue-and-pr-hovercards-enabled=&quot;&quot;&gt;
        &lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SoftwareSourceCode&quot; class=&quot;&quot;&gt;
    &lt;main id=&quot;js-repo-pjax-container&quot; data-pjax-container=&quot;&quot;&gt;
      

    
    








  



&lt;div id=&quot;repo-content-pjax-container&quot; class=&quot;repository-content &quot;&gt;
  
  


  
      
  &lt;div class=&quot;clearfix container-xl px-3 px-md-4 px-lg-5 mt-4&quot;&gt;
    
    
&lt;div&gt;
  




    
&lt;a class=&quot;d-none js-permalink-shortcut&quot; data-hotkey=&quot;y&quot; href=&quot;/toutiaoio/weekly.manong.io/blob/9de8d0b1c1d02892af76f584466bb9731561a79c/archives/architecture.md?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;Permalink&lt;/a&gt;







    &lt;div id=&quot;spoof-warning&quot; class=&quot;mt-0 pb-3&quot; hidden=&quot;&quot; aria-hidden=&quot;&quot;&gt;
  &lt;div data-view-component=&quot;true&quot; class=&quot;flash flash-warn mt-0 clearfix&quot;&gt;
  
  
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert float-left mt-1&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;

      &lt;p class=&quot;overflow-hidden&quot;&gt;This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.&lt;/p&gt;


  
&lt;/div&gt;&lt;/div&gt;

    &lt;include-fragment src=&quot;/toutiaoio/weekly.manong.io/spoofed_commit_check/9de8d0b1c1d02892af76f584466bb9731561a79c&quot; data-test-selector=&quot;spoofed-commit-check&quot;/&gt;

    &lt;div class=&quot;Box d-flex flex-column flex-shrink-0 mb-3&quot;&gt;
  &lt;include-fragment src=&quot;/toutiaoio/weekly.manong.io/contributors/master/archives/architecture.md&quot; class=&quot;commit-loader&quot;&gt;
    

    &lt;div class=&quot;Box-body d-flex flex-items-center&quot;&gt;
      &lt;p class=&quot;Skeleton Skeleton--text col-1&quot;&gt; &lt;/p&gt;
      &lt;span class=&quot;color-fg-danger h6 loader-error&quot;&gt;Cannot retrieve contributors at this time&lt;/span&gt;
    &lt;/div&gt;
&lt;/include-fragment&gt;&lt;/div&gt;







    &lt;readme-toc&gt;

    &lt;div data-target=&quot;readme-toc.content&quot; class=&quot;Box mt-3 position-relative&quot;&gt;
      
  &lt;div class=&quot;Box-header js-blob-header blob-header js-sticky js-position-sticky top-0 p-2 d-flex flex-shrink-0 flex-md-row flex-items-center&quot;&gt;

      &lt;details data-target=&quot;readme-toc.trigger&quot; data-menu-hydro-click=&quot;{&amp;quot;event_type&amp;quot;:&amp;quot;repository_toc_menu.click&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;target&amp;quot;:&amp;quot;trigger&amp;quot;,&amp;quot;repository_id&amp;quot;:193332705,&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/toutiaoio/weekly.manong.io/blob/master/archives/architecture.md?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&amp;quot;,&amp;quot;user_id&amp;quot;:null}}&quot; data-menu-hydro-click-hmac=&quot;254204da5c660a71b13b6e6f1c0a2f8173b5db645f006610ab5622186dfe217e&quot; class=&quot;dropdown details-reset details-overlay&quot;&gt;
  &lt;summary class=&quot;btn btn-octicon m-0 mr-2 p-2&quot; aria-haspopup=&quot;true&quot; aria-label=&quot;Table of Contents&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-list-unordered&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M2 4a1 1 0 100-2 1 1 0 000 2zm3.75-1.5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zM3 8a1 1 0 11-2 0 1 1 0 012 0zm-1 6a1 1 0 100-2 1 1 0 000 2z&quot;/&gt;
&lt;/svg&gt;
  &lt;/summary&gt;


  &lt;details-menu class=&quot;SelectMenu&quot; role=&quot;menu&quot;&gt;
    
  &lt;/details-menu&gt;
&lt;/details&gt;


  &lt;p class=&quot;text-mono f6 flex-auto pr-3 flex-order-2 flex-md-order-1&quot;&gt;

      271 lines (259 sloc)
      &lt;span class=&quot;file-info-divider&quot;/&gt;
    38.7 KB
  &lt;/p&gt;

  

    
&lt;/div&gt;


        &lt;div id=&quot;readme&quot; class=&quot;Box-body readme blob js-code-block-container p-5 p-xl-6 gist-border-0&quot;&gt;
    &lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-架构设计---往期存档---码农周刊&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#架构设计---往期存档---码农周刊&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;架构设计 - 往期存档 - 码农周刊&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;本项目是《码农周刊》往期存档 &amp;amp; VIP会员专属邮件周报。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;#%E7%AE%80%E4%BB%8B&quot;&gt;码农周刊简介&lt;/a&gt;｜&lt;a href=&quot;#VIP%E4%BC%9A%E5%91%98%E7%89%B9%E6%9D%83&quot;&gt;VIP会员特权&lt;/a&gt;｜&lt;a href=&quot;#%E6%88%90%E4%B8%BA%E7%A0%81%E5%86%9C%E5%91%A8%E5%88%8AVIP%E4%BC%9A%E5%91%98&quot;&gt;成为码农周刊VIP会员&lt;/a&gt;｜&lt;a href=&quot;#VIP%E4%BC%9A%E5%91%98%E4%B8%93%E5%B1%9E%E9%82%AE%E4%BB%B6%E5%91%A8%E6%8A%A5&quot;&gt;VIP会员专属邮件周报&lt;/a&gt;｜&lt;a href=&quot;#%E5%BE%80%E6%9C%9F%E5%AD%98%E6%A1%A3&quot;&gt;往期存档&lt;/a&gt;&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-简介&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#简介&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;简介&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;/li&gt;
&lt;li&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万&lt;/li&gt;
&lt;li&gt;专业、简单、有用，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;/li&gt;
&lt;li&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「码农周刊VIP会员」服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-vip会员特权&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#vip会员特权&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;VIP会员特权&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;52 期码农周刊VIP会员专属邮件周报，让你及时掌握技术动向；&lt;/li&gt;
&lt;li&gt;只限VIP会员加入的交流圈子，让你与技术大牛切磋学习；&lt;/li&gt;
&lt;li&gt;VIP会员独享的工作机会，为你介绍好公司的好机会；&lt;/li&gt;
&lt;li&gt;更多会员特权，持续更新……&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-成为码农周刊vip会员&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#成为码农周刊vip会员&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;成为码农周刊VIP会员&lt;/h2&gt;
&lt;ol dir=&quot;auto&quot;&gt;
&lt;li&gt;微信扫描下方二维码，加入码农周刊VIP会员知识星球。&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/3bec7a23a8e3a8db753f5664ebe0979b29115a4dc348968d4acd1181bfdcff7a/68747470733a2f2f696d672e746f757469616f2e696f2f6164732f7669705f6769746875622e6a706567&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/3bec7a23a8e3a8db753f5664ebe0979b29115a4dc348968d4acd1181bfdcff7a/68747470733a2f2f696d672e746f757469616f2e696f2f6164732f7669705f6769746875622e6a706567&quot; data-canonical-src=&quot;https://img.toutiao.io/ads/vip_github.jpeg&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;加入码农周刊VIP会员知识星球后，客服会联系您，请留意知识星球内的私信。&lt;/li&gt;
&lt;li&gt;客服向您发送码农周刊VIP会员欢迎邮件，开启您的码农周刊VIP会员之旅。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-vip会员专属邮件周报&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#vip会员专属邮件周报&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;VIP会员专属邮件周报&lt;/h2&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-往期存档&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#往期存档&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;往期存档&lt;/h2&gt;

&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-程序设计&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#程序设计&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;程序设计&lt;/h2&gt;

&lt;/article&gt;
  &lt;/div&gt;

    &lt;/div&gt;

  &lt;/readme-toc&gt;

  

  &lt;details class=&quot;details-reset details-overlay details-overlay-dark&quot; id=&quot;jumpto-line-details-dialog&quot;&gt;
    &lt;summary data-hotkey=&quot;l&quot; aria-label=&quot;Jump to line&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast linejump&quot; aria-label=&quot;Jump to line&quot;&gt;
          &lt;/details-dialog&gt;
  &lt;/details&gt;


&lt;/div&gt;

  &lt;/div&gt;


&lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;

  &lt;/div&gt;

          &lt;footer class=&quot;footer width-full container-xl p-responsive&quot; role=&quot;contentinfo&quot;&gt;


  
  &lt;p class=&quot;d-flex flex-justify-center pb-6&quot;&gt;
    &lt;span class=&quot;f6 color-fg-muted&quot;/&gt;
  &lt;/p&gt;
&lt;/footer&gt;




  &lt;div id=&quot;ajax-error-message&quot; class=&quot;ajax-error-message flash flash-error&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;button type=&quot;button&quot; class=&quot;flash-close js-ajax-error-dismiss&quot; aria-label=&quot;Dismiss error&quot;&gt;
      &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
    &lt;/button&gt;&lt;p&gt;
    You can’t perform that action at this time.
  &lt;/p&gt;&lt;/div&gt;

  &lt;div class=&quot;js-stale-session-flash flash flash-warn flash-banner&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-in&quot; hidden=&quot;&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-out&quot; hidden=&quot;&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
  &lt;/div&gt;
    &lt;template id=&quot;site-details-dialog&quot;&gt;
  &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm&quot; open=&quot;&quot;&gt;
    &lt;summary role=&quot;button&quot; aria-label=&quot;Close dialog&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal&quot;&gt;
      &lt;button class=&quot;Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
        &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
      &lt;/button&gt;
      &lt;p class=&quot;octocat-spinner my-6 js-details-dialog-spinner&quot;/&gt;
    &lt;/details-dialog&gt;
  &lt;/details&gt;
&lt;/template&gt;

    

    &lt;template id=&quot;snippet-clipboard-copy-button&quot;&gt;
  
&lt;/template&gt;




  &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e73caf119fc8e677bb8f9e3a5810c19a</guid>
<title>聊聊并发编程的12种业务场景</title>
<link>https://toutiao.io/k/8ndch1f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大家好，我是苏三，又跟大家见面了。&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;文末留言送书啦！！！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并发编程是一项非常重要的技术，无论在面试，还是工作中出现的频率非常高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前我发表的一篇《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;amp;mid=2247492962&amp;amp;idx=1&amp;amp;sn=17ed1d2ed950b4e9160218b296d19d4e&amp;amp;chksm=c0e83d8af79fb49cc72fcafc8ed62822263106e54675ea8406a2e3daadb44e25364275af9082&amp;amp;token=245805875&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;聊聊并发编程的10个坑&lt;/a&gt;》，在全网广受好评。说明了这类文章还是比较有价值的，接下来，打算继续聊聊并发编程这个话题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并发编程说白了就是多线程编程，但多线程一定比单线程效率更高？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：不一定，要看具体业务场景。&lt;/p&gt;&lt;p&gt;毕竟如果使用了多线程，那么线程之间的竞争和抢占cpu资源，线程的上下文切换，也是相对来说比较耗时的操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面这几个问题在面试中，你必定遇到过：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;你在哪来业务场景中使用过多线程？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;怎么用的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;踩过哪些坑？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天聊聊我之前在项目中用并发编程的12种业务场景，给有需要的朋友一个参考。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0919324577861163&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5jOIBX6rOGfeJG9lIWN024tDV5fhA7w3HcZmAPpGhKX9dkficb7B5RbRWqE1bicR9vmLkCFA3gNju4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1066&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 简单定时任务&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各位亲爱的朋友，你没看错，&lt;code&gt;Thread&lt;/code&gt;类真的能做定时任务。如果你看过一些&lt;code&gt;定时任务框架&lt;/code&gt;的源码，你最后会发现，它们的底层也会使用Thread类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现这种定时任务的具体代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt; {&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                System.out.println(&lt;span&gt;&quot;下载文件&quot;&lt;/span&gt;);&lt;br/&gt;                Thread.sleep(&lt;span&gt;1000&lt;/span&gt; * &lt;span&gt;60&lt;/span&gt; * &lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;            } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;                log.error(e);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }).start();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用Thread类可以做最简单的定时任务，在run方法中有个while的死循环（当然还有其他方式），执行我们自己的任务。有个需要特别注意的地方是，需要用&lt;code&gt;try...catch&lt;/code&gt;捕获异常，否则如果出现异常，就直接退出循环，下次将无法继续执行了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这种方式做的定时任务，只能周期性执行，不能支持定时在某个时间点执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特别提醒一下，该线程建议定义成&lt;code&gt;守护线程&lt;/code&gt;，可以通过&lt;code&gt;setDaemon&lt;/code&gt;方法设置，让它在后台默默执行就好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景：比如项目中有时需要每隔5分钟去&lt;code&gt;下载某个文件&lt;/code&gt;，或者每隔10分钟去读取模板文件&lt;code&gt;生成静态html页面&lt;/code&gt;等等，一些简单的周期性任务场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;Thread&lt;/code&gt;类做定时任务的优缺点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;优点：这种定时任务非常简单，学习成本低，容易入手，对于那些简单的周期性任务，是个不错的选择。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺点：不支持指定某个时间点执行任务，不支持延迟执行等操作，功能过于单一，无法应对一些较为复杂的场景。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.监听器&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候，我们需要写个监听器，去监听某些数据的变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：我们在使用&lt;code&gt;canal&lt;/code&gt;的时候，需要监听&lt;code&gt;binlog&lt;/code&gt;的变化，能够及时把数据库中的数据，同步到另外一个业务数据库中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.526818515797208&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5jOIBX6rOGfeJG9lIWN024tedzurrHYLUvjC6XzZRPEaukSLZt1eTVVCaAohdCkFZ2PtehKHVr1ZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1361&quot;/&gt;如果直接写一个监听器去监听数据就太没意思了，我们想实现这样一个功能：在配置中心有个开关，配置监听器是否开启，如果开启了使用单线程异步执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; CanalService {&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; running = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Thread thread;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; CanalConnector canalConnector;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;handle&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//连接canal&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt;(running) {&lt;br/&gt;           &lt;span&gt;//业务处理&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       thread = &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;this&lt;/span&gt;::handle, &lt;span&gt;&quot;name&quot;&lt;/span&gt;);&lt;br/&gt;       running = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;       thread.start();&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;stop&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       &lt;span&gt;if&lt;/span&gt;(!running) {&lt;br/&gt;          &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;       }&lt;br/&gt;       running = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在start方法中开启了一个线程，在该线程中异步执行handle方法的具体任务。然后通过调用stop方法，可以停止该线程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，使用&lt;code&gt;volatile&lt;/code&gt;关键字控制的running变量作为开关，它可以控制线程中的状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，有个比较关键的点是：如何通过配置中心的配置，控制这个开关呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以&lt;code&gt;apollo&lt;/code&gt;配置为例，我们在配置中心的后台，修改配置之后，自动获取最新配置的核心代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CanalConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; CanalService canalService;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@ApolloConfigChangeListener&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;change&lt;/span&gt;&lt;span&gt;(ConfigChangeEvent event)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String value = event.getChange(&lt;span&gt;&quot;test.canal.enable&quot;&lt;/span&gt;).getNewValue();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(BooleanUtils.toBoolean(value)) {&lt;br/&gt;            canalService.start();&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            canalService.stop();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过&lt;code&gt;apollo&lt;/code&gt;的&lt;code&gt;ApolloConfigChangeListener&lt;/code&gt;注解，可以监听配置参数的变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果&lt;code&gt;test.canal.enable&lt;/code&gt;开关配置的true，则调用canalService类的start方法开启canal数据同步功能。如果开关配置的false，则调用canalService类的stop方法，自动停止canal数据同步功能。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.收集日志&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在某些高并发的场景中，我们需要收集部分用户的日志（比如：用户登录的日志），写到数据库中，以便于做分析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但由于项目中，还没有引入消息中间件，比如：&lt;code&gt;kafka&lt;/code&gt;、&lt;code&gt;rocketmq&lt;/code&gt;等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果直接将日志同步写入数据库，可能会影响接口性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，大家很自然想到了异步处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现这个需求最简单的做法是，开启一个线程，异步写入数据到数据库即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样做，可以是可以。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果用户登录操作的耗时，比异步写入数据库的时间要少得多。这样导致的结果是：生产日志的速度，比消费日志的速度要快得多，最终的性能瓶颈在消费端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，还有更优雅的处理方式，虽说没有使用消息中间件，但借用了它的思想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这套记录登录日志的功能，分为：日志生产端、日志存储端和日志消费端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3778337531486146&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5jOIBX6rOGfeJG9lIWN024t3LIpTBH15jFbic90S8A2ZC2jGvibpMOicOgiaCic9NGI5ibVpBHkzlMdsDTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;794&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先定义了一个阻塞队列。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LoginLogQueue&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; QUEUE_MAX_SIZE    = &lt;span&gt;1000&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; BlockingQueueblockingQueue queue = &lt;span&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;&amp;gt;(QUEUE_MAX_SIZE);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//生成消息&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;push&lt;/span&gt;&lt;span&gt;(LoginLog loginLog)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.queue.add(loginLog);&lt;br/&gt;    } &lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//消费消息&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; LoginLog &lt;span&gt;poll&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        LoginLog loginLog = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            loginLog = &lt;span&gt;this&lt;/span&gt;.queue.take();&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后定义了一个日志的生产者。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LoginSerivce&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; LoginLogQueue loginLogQueue;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(UserInfo userInfo)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//业务处理&lt;/span&gt;&lt;br/&gt;        LoginLog loginLog = convert(userInfo);&lt;br/&gt;        loginLogQueue.push(loginLog);&lt;br/&gt;    }  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，定义了日志的消费者。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LoginInfoConsumer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; LoginLogQueue queue;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@PostConstruct&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; voit init {&lt;br/&gt;       &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt; {&lt;br/&gt;          &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;) {&lt;br/&gt;              LoginLog loginLog = queue.take();&lt;br/&gt;              &lt;span&gt;//写入数据库&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        }).start();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这个例子中使用单线程接收登录日志，为了提升性能，也可以使用线程池来处理业务逻辑（比如：写入数据库）等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.excel导入&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可能会经常收到运营同学提过来的excel数据导入需求，比如：将某一大类下的所有子类一次性导入系统，或者导入一批新的供应商数据等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们以导入供应商数据为例，它所涉及的业务流程很长，比如：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;调用天眼查接口校验企业名称和统一社会信用代码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写入供应商基本表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写入组织表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;给供应商自动创建一个用户&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;给该用户分配权限&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自定义域名&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发站内通知&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果在程序中，解析完excel，读取了所有数据之后。用单线程一条条处理业务逻辑，可能耗时会非常长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了提升excel数据导入效率，非常有必要使用多线程来处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然在java中实现多线程的手段有很多种，下面重点聊聊java8中最简单的实现方式：&lt;code&gt;parallelStream&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;supplierList.parallelStream().forEach(x -&amp;gt; importSupplier(x));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;parallelStream&lt;/code&gt;是一个并行执行的流，它默认通过&lt;code&gt;ForkJoinPool&lt;/code&gt;实现的，能提高你的多线程任务的速度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ForkJoinPool&lt;/code&gt;处理的过程会分而治之，它的核心思想是：&lt;code&gt;将一个大任务切分成多个小任务&lt;/code&gt;。每个小任务都能单独执行，最后它会把所用任务的执行结果进行汇总。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面用一张图简单介绍一下ForkJoinPool的原理：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3388704318936877&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5jOIBX6rOGfeJG9lIWN024tqH2crKgzL8lGHs7nVJU5Pic4D6DmJVx95ibK6TF1cCUAh5D0uO3RRMOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1204&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然除了excel导入之外，还有类似的读取文本文件，也可以用类似的方法处理。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;温馨的提醒一下，如果一次性导入的数据非常多，用多线程处理，可能会使系统的cpu使用率飙升，需要特别关注。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.查询接口&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多时候，我们需要在某个查询接口中，调用其他服务的接口，组合数据之后，一起返回。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如有这样的业务场景：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在用户信息查询接口中需要返回：用户名称、性别、等级、头像、积分、成长值等信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而用户名称、性别、等级、头像在用户服务中，积分在积分服务中，成长值在成长值服务中。为了汇总这些数据统一返回，需要另外提供一个对外接口服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是，用户信息查询接口需要调用用户查询接口、积分查询接口 和 成长值查询接口，然后汇总数据统一返回。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用过程如下图所示：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.184049079754601&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5jOIBX6rOGfeJG9lIWN024tiaQAcj9hk2YjEmMiaN2vveBEqe73KHfWWLULzelK0ISn7nFUfL1Cut8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;326&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用远程接口总耗时 530ms = 200ms + 150ms + 180ms&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;显然这种串行调用远程接口性能是非常不好的，调用远程接口总的耗时为所有的远程接口耗时之和。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么如何优化远程接口性能呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然串行调用多个远程接口性能很差，为什么不改成并行呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5012285012285013&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5jOIBX6rOGfeJG9lIWN024tfLS0mahgDtUQvBjXSIXMp2ibvicv60ToqYTkDGUbasOowDiavw38YHcUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;814&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用远程接口总耗时 200ms = 200ms（即耗时最长的那次远程接口调用）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在java8之前可以通过实现&lt;code&gt;Callable&lt;/code&gt;接口，获取线程返回结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;java8以后通过&lt;code&gt;CompleteFuture&lt;/code&gt;类实现该功能。我们这里以CompleteFuture为例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; UserInfo &lt;span&gt;getUserInfo&lt;/span&gt;&lt;span&gt;(Long id)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException, ExecutionException &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; UserInfo userInfo = &lt;span&gt;new&lt;/span&gt; UserInfo();&lt;br/&gt;    CompletableFuture userFuture = CompletableFuture.supplyAsync(() -&amp;gt; {&lt;br/&gt;        getRemoteUserAndFill(id, userInfo);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Boolean.TRUE;&lt;br/&gt;    }, executor);&lt;br/&gt;&lt;br/&gt;    CompletableFuture bonusFuture = CompletableFuture.supplyAsync(() -&amp;gt; {&lt;br/&gt;        getRemoteBonusAndFill(id, userInfo);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Boolean.TRUE;&lt;br/&gt;    }, executor);&lt;br/&gt;&lt;br/&gt;    CompletableFuture growthFuture = CompletableFuture.supplyAsync(() -&amp;gt; {&lt;br/&gt;        getRemoteGrowthAndFill(id, userInfo);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Boolean.TRUE;&lt;br/&gt;    }, executor);&lt;br/&gt;    CompletableFuture.allOf(userFuture, bonusFuture, growthFuture).join();&lt;br/&gt;&lt;br/&gt;    userFuture.get();&lt;br/&gt;    bonusFuture.get();&lt;br/&gt;    growthFuture.get();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; userInfo;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;温馨提醒一下，这两种方式别忘了使用&lt;code&gt;线程池&lt;/code&gt;。示例中我用到了&lt;code&gt;executor&lt;/code&gt;，表示自定义的线程池，为了防止高并发场景下，出现线程过多的问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.获取用户上下文&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道你在项目开发时，有没有遇到过这样的需求：用户登录之后，在所有的请求接口中，通过某个公共方法，就能获取到当前登录用户的信息？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取的用户上下文，我们以&lt;code&gt;CurrentUser&lt;/code&gt;为例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;CurrentUser&lt;/code&gt;内部包含了一个&lt;code&gt;ThreadLocal&lt;/code&gt;对象，它负责保存当前线程的用户上下文信息。当然为了保证在线程池中，也能从用户上下文中获取到正确的用户信息，这里用了阿里的&lt;code&gt;TransmittableThreadLocal&lt;/code&gt;。伪代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CurrentUser&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; TransmittableThreadLocal&amp;lt;CurrentUser&amp;gt; THREA_LOCAL = &lt;span&gt;new&lt;/span&gt; TransmittableThreadLocal&amp;lt;&amp;gt;();&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String id;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String userName;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String password;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String phone;&lt;br/&gt;    ...&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; statis &lt;span&gt;void&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;(CurrentUser user)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      THREA_LOCAL.set(user);&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;getCurrent&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; THREA_LOCAL.get();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里为什么用了阿里的TransmittableThreadLocal，而不是普通的ThreadLocal呢？在线程池中，由于线程会被多次复用，导致从普通的ThreadLocal中无法获取正确的用户信息。父线程中的参数，没法传递给子线程，而TransmittableThreadLocal很好解决了这个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在项目中定义一个全局的spring mvc拦截器，专门设置用户上下文到ThreadLocal中。伪代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserInterceptor&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HandlerInterceptorAdapter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;br/&gt;   &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;   &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;preHandle&lt;/span&gt;&lt;span&gt;(HttpServletRequest request, HttpServletResponse response, Object handler)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;      CurrentUser user = getUser(request);&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt;(Objects.nonNull(user)) {&lt;br/&gt;         CurrentUser.set(user);&lt;br/&gt;      }&lt;br/&gt;   } &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户在请求我们接口时，会先触发该拦截器，它会根据用户cookie中的token，调用调用接口获取redis中的用户信息。如果能获取到，说明用户已经登录，则把用户信息设置到CurrentUser类的ThreadLocal中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，在api服务的下层，即business层的方法中，就能轻松通过CurrentUser.getCurrent();方法获取到想要的用户上下文信息了。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7435185185185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5jOIBX6rOGfeJG9lIWN024tvdmWzkneibjSYCmNRQoicfUDjquQbdWoyMY9ZQ0bR7triazysQhfb2Jaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这套用户体系的想法是很good的，但深入使用后，发现了一个小插曲：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;api服务和mq消费者服务都引用了business层，business层中的方法两个服务都能直接调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道在api服务中用户是需要登录的，而mq消费者服务则不需要登录。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8222222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5jOIBX6rOGfeJG9lIWN024tLBAwPjwCkfhLiaQXRzaxW0R8reL1LJGzOVEHkk14RTKxZic9B7HRe1GA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果business中的某个方法刚开始是给api开发的，在方法深处使用了CurrentUser.getCurrent();获取用户上下文。但后来，某位新来的帅哥在mq消费者中也调用了那个方法，并未发觉这个小机关，就会中招，出现找不到用户上下文的问题。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.05&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5jOIBX6rOGfeJG9lIWN024tZjoQPCFibsyXaUiboickOGOsHF9kfaQwiaWiaA4v0rDdKibOJYks6WRxo5jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;680&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我当时的第一个想法是：代码没做兼容处理，因为之前这类问题偶尔会发生一次。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要解决这个问题，其实也很简单。只需先判断一下能否从CurrentUser中获取用户信息，如果不能，则取配置的系统用户信息。伪代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; BusinessConfig businessConfig;&lt;br/&gt;&lt;br/&gt;CurrentUser user = CurrentUser.getCurrent();&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(Objects.nonNull(user)) {&lt;br/&gt;   entity.setUserId(user.getUserId());&lt;br/&gt;   entity.setUserName(user.getUserName());&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;   entity.setUserId(businessConfig.getDefaultUserId());&lt;br/&gt;   entity.setUserName(businessConfig.getDefaultUserName());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种简单无公害的代码，如果只是在一两个地方加还OK。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，众所周知，&lt;code&gt;SimpleDateFormat&lt;/code&gt;在java8以前，是用来处理时间的工具类，它是非线程安全的。也就是说，用该方法解析日期会有线程安全问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了避免线程安全问题的出现，我们可以把SimpleDateFormat对象定义成&lt;code&gt;局部变量&lt;/code&gt;。但如果你一定要把它定义成静态变量，可以使用ThreadLocal保存日期，也能解决线程安全问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. 传递参数&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前见过有些同事写代码时，一个非常有趣的用法，即：使用&lt;code&gt;MDC&lt;/code&gt;传递参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MDC是什么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;MDC&lt;/code&gt;是&lt;code&gt;org.slf4j&lt;/code&gt;包下的一个类，它的全称是&lt;code&gt;Mapped Diagnostic Context&lt;/code&gt;，我们可以认为它是一个线程安全的存放诊断日志的容器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;MDC&lt;/code&gt;的底层是用了&lt;code&gt;ThreadLocal&lt;/code&gt;来保存数据的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如现在有这样一种场景：我们使用&lt;code&gt;RestTemplate&lt;/code&gt;调用远程接口时，有时需要在&lt;code&gt;header&lt;/code&gt;中传递信息，比如：traceId，source等，便于在查询日志时能够串联一次完整的请求链路，快速定位问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种业务场景就能通过&lt;code&gt;ClientHttpRequestInterceptor&lt;/code&gt;接口实现，具体做法如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步，定义一个LogFilter拦截所有接口请求，在MDC中设置traceId：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LogFilter&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Filter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;(FilterConfig filterConfig)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; ServletException &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doFilter&lt;/span&gt;&lt;span&gt;(ServletRequest request, ServletResponse response, FilterChain chain)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException, ServletException &lt;/span&gt;{&lt;br/&gt;        MdcUtil.add(UUID.randomUUID().toString());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;记录请求日志&quot;&lt;/span&gt;);&lt;br/&gt;        chain.doFilter(request, response);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;记录响应日志&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;destroy&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步，实现&lt;code&gt;ClientHttpRequestInterceptor&lt;/code&gt;接口，MDC中获取当前请求的traceId，然后设置到header中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RestTemplateInterceptor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ClientHttpRequestInterceptor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; ClientHttpResponse &lt;span&gt;intercept&lt;/span&gt;&lt;span&gt;(HttpRequest request, &lt;span&gt;byte&lt;/span&gt;[] body, ClientHttpRequestExecution execution)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        request.getHeaders().set(&lt;span&gt;&quot;traceId&quot;&lt;/span&gt;, MdcUtil.get());&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; execution.execute(request, body);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三步，定义配置类，配置上面定义的RestTemplateInterceptor类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RestTemplateConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; RestTemplate &lt;span&gt;restTemplate&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        RestTemplate restTemplate = &lt;span&gt;new&lt;/span&gt; RestTemplate();&lt;br/&gt;        restTemplate.setInterceptors(Collections.singletonList(restTemplateInterceptor()));&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; restTemplate;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; RestTemplateInterceptor &lt;span&gt;restTemplateInterceptor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RestTemplateInterceptor();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中MdcUtil其实是利用MDC工具在&lt;code&gt;ThreadLocal&lt;/code&gt;中存储和获取traceId&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MdcUtil&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String TRACE_ID = &lt;span&gt;&quot;TRACE_ID&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String &lt;span&gt;get&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; MDC.get(TRACE_ID);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(String value)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        MDC.put(TRACE_ID, value);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这个例子中没有演示MdcUtil类的add方法具体调的地方，我们可以在&lt;code&gt;filter&lt;/code&gt;中执行接口方法之前，生成traceId，调用MdcUtil类的add方法添加到MDC中，然后在同一个请求的其他地方就能通过MdcUtil类的get方法获取到该traceId。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;能使用MDC保存traceId等参数的根本原因是，用户请求到应用服务器，&lt;code&gt;Tomcat&lt;/code&gt;会从线程池中分配一个线程去处理该请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么该请求的整个过程中，保存到&lt;code&gt;MDC&lt;/code&gt;的&lt;code&gt;ThreadLocal&lt;/code&gt;中的参数，也是该线程独享的，所以不会有线程安全问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9. 模拟高并发&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候我们写的接口，在低并发的场景下，一点问题都没有。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果一旦出现高并发调用，该接口可能会出现一些意想不到的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了防止类似的事情发生，一般在项目上线前，我们非常有必要对接口做一下&lt;code&gt;压力测试&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，现在已经有比较成熟的压力测试工具，比如：&lt;code&gt;Jmeter&lt;/code&gt;、&lt;code&gt;LoadRunner&lt;/code&gt;等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你觉得下载压测工具比较麻烦，也可以手写一个简单的模拟并发操作的工具，用&lt;code&gt;CountDownLatch&lt;/code&gt;就能实现，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;concurrenceTest&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 模拟高并发情况代码&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; AtomicInteger atomicInteger = &lt;span&gt;new&lt;/span&gt; AtomicInteger(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; CountDownLatch countDownLatch = &lt;span&gt;new&lt;/span&gt; CountDownLatch(&lt;span&gt;1000&lt;/span&gt;); &lt;span&gt;// 相当于计数器，当所有都准备好了，再一起执行，模仿多并发，保证并发量&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; CountDownLatch countDownLatch2 = &lt;span&gt;new&lt;/span&gt; CountDownLatch(&lt;span&gt;1000&lt;/span&gt;); &lt;span&gt;// 保证所有线程执行完了再打印atomicInteger的值&lt;/span&gt;&lt;br/&gt;    ExecutorService executorService = Executors.newFixedThreadPool(&lt;span&gt;10&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;1000&lt;/span&gt;; i++) {&lt;br/&gt;            executorService.submit(&lt;span&gt;new&lt;/span&gt; Runnable() {&lt;br/&gt;                &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;                    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                        countDownLatch.await(); &lt;span&gt;//一直阻塞当前线程，直到计时器的值为0,保证同时并发&lt;/span&gt;&lt;br/&gt;                    } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;                        log.error(e.getMessage(),e);&lt;br/&gt;                    }&lt;br/&gt;                    &lt;span&gt;//每个线程增加1000次，每次加1&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; &lt;span&gt;1000&lt;/span&gt;; j++) {&lt;br/&gt;                        atomicInteger.incrementAndGet();&lt;br/&gt;                    }&lt;br/&gt;                    countDownLatch2.countDown();&lt;br/&gt;                }&lt;br/&gt;            });&lt;br/&gt;            countDownLatch.countDown();&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        countDownLatch2.await();&lt;span&gt;// 保证所有线程执行完&lt;/span&gt;&lt;br/&gt;        executorService.shutdown();&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (Exception e){&lt;br/&gt;        log.error(e.getMessage(),e);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10. 处理mq消息&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在高并发的场景中，消息积压问题，可以说如影随形，真的没办法从根本上解决。表面上看，已经解决了，但后面不知道什么时候，就会冒出一次，比如这次：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有天下午，产品过来说：有几个商户投诉过来了，他们说菜品有延迟，快查一下原因。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次问题出现得有点奇怪。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么这么说？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先这个时间点就有点奇怪，平常出问题，不都是中午或者晚上用餐高峰期吗？怎么这次问题出现在下午？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据以往积累的经验，我直接看了&lt;code&gt;kafka&lt;/code&gt;的&lt;code&gt;topic&lt;/code&gt;的数据，果然上面消息有积压，但这次每个&lt;code&gt;partition&lt;/code&gt;都积压了十几万的消息没有消费，比以往加压的消息数量增加了几百倍。这次消息积压得极不寻常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我赶紧查服务监控看看消费者挂了没，还好没挂。又查服务日志没有发现异常。这时我有点迷茫，碰运气问了问订单组下午发生了什么事情没？他们说下午有个促销活动，跑了一个&lt;code&gt;JOB&lt;/code&gt;批量更新过有些商户的订单信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，我一下子如梦初醒，是他们在JOB中批量发消息导致的问题。怎么没有通知我们呢？实在太坑了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽说知道问题的原因了，倒是眼前积压的这十几万的消息该如何处理呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，如果直接调大&lt;code&gt;partition&lt;/code&gt;数量是不行的，历史消息已经存储到&lt;code&gt;4&lt;/code&gt;个固定的partition，只有新增的消息才会到新的partition。我们重点需要处理的是已有的partition。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接加服务节点也不行，因为&lt;code&gt;kafka&lt;/code&gt;允许同组的多个&lt;code&gt;partition&lt;/code&gt;被一个&lt;code&gt;consumer&lt;/code&gt;消费，但不允许一个partition被同组的多个consumer消费，可能会造成资源浪费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看来只有用&lt;code&gt;多线程&lt;/code&gt;处理了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了紧急解决问题，我改成了用线程池处理消息，核心线程和最大线程数都配置成了&lt;code&gt;50&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大致用法如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;先定义一个线程池：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThreadPoolConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${thread.pool.corePoolSize:5}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; corePoolSize;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${thread.pool.maxPoolSize:10}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxPoolSize;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${thread.pool.queueCapacity:200}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; queueCapacity;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${thread.pool.keepAliveSeconds:30}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; keepAliveSeconds;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${thread.pool.threadNamePrefix:ASYNC_}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String threadNamePrefix;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;(&lt;span&gt;&quot;messageExecutor&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Executor &lt;span&gt;messageExecutor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ThreadPoolTaskExecutor executor = &lt;span&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;br/&gt;        executor.setCorePoolSize(corePoolSize);&lt;br/&gt;        executor.setMaxPoolSize(maxPoolSize);&lt;br/&gt;        executor.setQueueCapacity(queueCapacity);&lt;br/&gt;        executor.setKeepAliveSeconds(keepAliveSeconds);&lt;br/&gt;        executor.setThreadNamePrefix(threadNamePrefix);&lt;br/&gt;        executor.setRejectedExecutionHandler(&lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor.CallerRunsPolicy());&lt;br/&gt;        executor.initialize();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; executor;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;再定义一个消息的consumer：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConsumerService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Executor messageExecutor;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@KafkaListener&lt;/span&gt;(id=&lt;span&gt;&quot;test&quot;&lt;/span&gt;,topics={&lt;span&gt;&quot;topic-test&quot;&lt;/span&gt;})&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;listen&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;收到消息：&quot;&lt;/span&gt; + message);&lt;br/&gt;        messageExecutor.submit(&lt;span&gt;new&lt;/span&gt; MyWork(message);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在定义的Runable实现类中处理业务逻辑：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyWork&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Runnable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String message;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;MyWork&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       &lt;span&gt;this&lt;/span&gt;.message = message;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(message);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;果然，调整之后消息积压数量确实下降的非常快，大约半小时后，积压的消息就非常顺利的处理完了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但此时有个更严重的问题出现：我收到了报警邮件，有两个订单系统的节点down机了。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更详细内容，请看看我的另一篇文章《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;amp;mid=2247490289&amp;amp;idx=1&amp;amp;sn=bc311da9f4a4d3f48ee5dc207bf31a8b&amp;amp;chksm=c0ebc219f79c4b0fc711116723b9df3a5531cda32f0f5d00f065910aa552af6ff03b3f1528fc&amp;amp;token=751314179&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;我用kafka两年踩过的一些非比寻常的坑&lt;/a&gt;》&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11. 统计数量&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在多线程的场景中，有时候需要统计数量，比如：用多线程导入供应商数据时，统计导入成功的供应商数有多少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这时候用count++统计次数，最终的结果可能会不准。因为count++并非原子操作，如果多个线程同时执行该操作，则统计的次数，可能会出现异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这个问题，就需要使用&lt;code&gt;concurent&lt;/code&gt;的&lt;code&gt;atomic&lt;/code&gt;包下面的类，比如：&lt;code&gt;AtomicInteger&lt;/code&gt;、&lt;code&gt;AtomicLong&lt;/code&gt;等。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Servcie&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ImportSupplierService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; AtomicInteger count = &lt;span&gt;new&lt;/span&gt; AtomicInteger(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;importSupplier&lt;/span&gt;&lt;span&gt;(List&amp;lt;SupplierInfo&amp;gt; supplierList)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       &lt;span&gt;if&lt;/span&gt;(CollectionUtils.isEmpty(supplierList)) {&lt;br/&gt;           &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;       }&lt;br/&gt;&lt;br/&gt;       supplierList.parallelStream().forEach(x -&amp;gt; {&lt;br/&gt;           &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;             importSupplier(x);&lt;br/&gt;             count.addAndGet(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;           } &lt;span&gt;catch&lt;/span&gt;(Exception e) {&lt;br/&gt;              log.error(e.getMessage(),e);&lt;br/&gt;           }&lt;br/&gt;       );&lt;br/&gt;&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; count.get();&lt;br/&gt;  }    &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AtomicInteger&lt;/code&gt;的底层说白了使用&lt;code&gt;自旋锁&lt;/code&gt;+&lt;code&gt;CAS&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;incrementAndGet&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (;;) {&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; current = get();&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; next = current + &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (compareAndSet(current, next))&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; next;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;自旋锁&lt;/code&gt;说白了就是一个&lt;code&gt;死循环&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;code&gt;CAS&lt;/code&gt;是&lt;code&gt;比较&lt;/code&gt;和&lt;code&gt;交换&lt;/code&gt;的意思。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的实现逻辑是：将内存位置处的&lt;code&gt;旧值&lt;/code&gt;与&lt;code&gt;预期值&lt;/code&gt;进行比较，若相等，则将内存位置处的值替换为&lt;code&gt;新值&lt;/code&gt;。若不相等，则不做任何操作。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12. 延迟定时任务&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们经常有延迟处理数据的需求，比如：如果用户下单后，超过30分钟还未完成支付，则系统自动将该订单取消。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里需求就可以使用&lt;code&gt;延迟定时任务&lt;/code&gt;实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ScheduledExecutorService&lt;/code&gt;是&lt;code&gt;JDK1.5+&lt;/code&gt;版本引进的定时任务，该类位于&lt;code&gt;java.util.concurrent&lt;/code&gt;并发包下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ScheduledExecutorService是基于多线程的，设计的初衷是为了解决&lt;code&gt;Timer&lt;/code&gt;单线程执行，多个任务之间会互相影响的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它主要包含4个方法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;schedule(Runnable command,long delay,TimeUnit unit)，带延迟时间的调度，只执行一次，调度之后可通过Future.get()阻塞直至任务执行完毕。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;schedule(Callable&lt;v&gt;callable,long delay,TimeUnit unit)，带延迟时间的调度，只执行一次，调度之后可通过Future.get()阻塞直至任务执行完毕，并且可以获取执行结果。&lt;/v&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;scheduleAtFixedRate，表示以固定频率执行的任务，如果当前任务耗时较多，超过定时周期period，则当前任务结束后会立即执行。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;scheduleWithFixedDelay，表示以固定延时执行任务，延时是相对当前任务结束为起点计算开始时间。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现这种定时任务的具体代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ScheduleExecutorTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(&lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;        scheduledExecutorService.scheduleAtFixedRate(() -&amp;gt; {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;doSomething&quot;&lt;/span&gt;);&lt;br/&gt;        },&lt;span&gt;1000&lt;/span&gt;,&lt;span&gt;1000&lt;/span&gt;, TimeUnit.MILLISECONDS);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用&lt;code&gt;ScheduledExecutorService&lt;/code&gt;类的&lt;code&gt;scheduleAtFixedRate&lt;/code&gt;方法实现周期性任务，每隔1秒钟执行一次，每次延迟1秒再执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种定时任务是阿里巴巴开发者规范中用来替代&lt;code&gt;Timer&lt;/code&gt;类的方案，对于多线程执行周期性任务，是个不错的选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;ScheduledExecutorService&lt;/code&gt;类做延迟定时任务的优缺点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;优点：基于多线程的定时任务，多个任务之间不会相关影响，支持周期性的执行任务，并且带延迟功能。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺点：不支持一些较复杂的定时规则。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，你也可以使用分布式定时任务，比如：xxl-job或者elastic-job等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，在实际工作中我使用多线程的场景远远不只这12种，在这里只是抛砖引玉，介绍了一些我认为比较常见的业务场景。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，如果你对并发编程中的一些坑，比较感兴趣的话，可以看看我的另一个文章《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;amp;mid=2247492962&amp;amp;idx=1&amp;amp;sn=17ed1d2ed950b4e9160218b296d19d4e&amp;amp;chksm=c0e83d8af79fb49cc72fcafc8ed62822263106e54675ea8406a2e3daadb44e25364275af9082&amp;amp;token=245805875&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;聊聊并发编程的10个坑&lt;/a&gt;》，里面写的非常详细。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>01eddb307419ef42995b9db03f26c4d5</guid>
<title>腾讯开源的，一个所见即所得的页面可视化编辑器</title>
<link>https://toutiao.io/k/7t2u6k4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Njk2NDAzMA==&amp;amp;mid=2660216927&amp;amp;idx=1&amp;amp;sn=5812b0bfb6aadf3d69e8b1cba6981870&amp;amp;chksm=84bbb20eb3cc3b18660e004091ea81d47114c5635dcd6a53444c16320611264ab76781168e59&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNav9oso6Gxia5jcD3Wgg3yvKNEpy1FkFVItdSic9wV0kdNVdZbLl1nID64c4NCC9U6Pmd1eNQKQmhSM2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Njk2NDAzMA==&amp;amp;mid=2660216927&amp;amp;idx=1&amp;amp;sn=5812b0bfb6aadf3d69e8b1cba6981870&amp;amp;chksm=84bbb20eb3cc3b18660e004091ea81d47114c5635dcd6a53444c16320611264ab76781168e59&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;码农周刊VIP会员专‍属邮件周报 Vol.089&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;码农周刊VIP会员专属邮件周报 Vol.089&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;腾讯tmagic-editor是&lt;strong&gt;一个所见即所得的页面可视化编辑器&lt;/strong&gt;，基于tmagic-editor可以快速搭建可视化页面生产平台，让非技术人员可以通过拖拽和配置，自助生成H5页面、PC页面、TV页面，大大降低页面生产成本，实现零代码/低代码生成页面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2106666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ4MkL7OttMxtibuQeVA4KGic7iaFNvUxqNQicQln1Mr5LXZykibAdq8iaz75J2nw9reHoMV6kuoibrbHpYxA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;编辑器&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;auto&quot;&gt;&lt;span&gt;通过安装和使用 @tmagic/editor，可以快速搭建起一个魔方编辑器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;463&quot; data-ratio=&quot;0.7151858853182105&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/t8lpVibticjQ4MkL7OttMxtibuQeVA4KGic7ic3tnMuO9ncXzwiby0G5QQiaBqZ9WbU6oEvTbd4EtVfYMsn4z7R9eLsuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1587&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;页面渲染&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;auto&quot;&gt;&lt;span&gt;runtime 是魔方提供的页面渲染环境。通过加载在编辑器中产出的 uiconfig，即可得到魔方编辑器希望拥有的最终产物，一个活动页面。我们提供了 vue2/vue3/react 几个版本的 runtime。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;auto&quot;&gt;&lt;span&gt;通过魔方编辑器和 runtime 渲染，以及通过自定义的复杂组件开发，可以在魔方项目上，搭建出复杂而精美的页面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;2.136125654450262&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/t8lpVibticjQ4MkL7OttMxtibuQeVA4KGic7hYCVfQ2XRIhwZBVpCiauQoHLica8cMNjp8Hc8uPQj3ibgaB1kQ3CKWDtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;764&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;表单渲染&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;auto&quot;&gt;&lt;span&gt;魔方的表单配置项，使用了我们开发的基于 element-ui 的 @tmagic/form，magic-form 也可以在其他地方单独使用。支持渲染 JS Schema 提供的表单描述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/t8lpVibticjQ4MkL7OttMxtibuQeVA4KGic7PGV79gcEk55JcktKMEwHicy7RLJhtLQpxtYGVHeS5ib0oLkvfdSu8u1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;755&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>da6b0fbe93418e783193d8922dba6987</guid>
<title>软件开发宣言</title>
<link>https://toutiao.io/k/i1o04ki</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section id=&quot;text-2&quot; class=&quot;widget mb-50 widget_text&quot;&gt;&lt;div class=&quot;textwidget&quot;&gt;&lt;p&gt;方俊贤; Ken Fang; A9 Atlas 工作室; &lt;strong&gt;@deva9ken&lt;/strong&gt;; &lt;strong&gt; kenfang@deva9.com&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;专利号: 201910652769.4&lt;/strong&gt;; 一种深度学习的算法, 预测微服务持续发布、持续部署后对产品整体质量的影响, 获得国家知识财产局专利; 符合专利法实施细则第 44 条的规定。&lt;/p&gt;
&lt;p&gt;主要专长: 运用深度学习, 预测微服务发布或部署后的质量, 以提升微服务开发的效率与质量。微服务架构设计与开发。探索性测试。有价值的产品特性挖掘。使用者行为 (场景) 分析。领域驱动设计。&lt;/p&gt;
&lt;p&gt;曾任职于: 腾讯科技 (深圳) 有限公司 软件开发过程改进专家; 雅各布森软件 (北京) 有限公司 首席谘询顾问; Rational 资深谘询顾问。&lt;/p&gt;
&lt;p&gt;有二十多年半导体、 电信产业、军事研究单位与互联网的产品研发与咨询服务等的经验。&lt;/p&gt;
&lt;p&gt;于 Illinois Institute of Technology, Chicago, USA 获得电子计算机科学硕士。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignnone size-full wp-image-2880&quot; src=&quot;https://i0.wp.com/www.deva9.com/wp-content/uploads/2022/01/IMG_0644.jpg?resize=640%2C640&amp;amp;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; srcset=&quot;https://i0.wp.com/www.deva9.com/wp-content/uploads/2022/01/IMG_0644.jpg?w=768&amp;amp;ssl=1 768w, https://i0.wp.com/www.deva9.com/wp-content/uploads/2022/01/IMG_0644.jpg?resize=150%2C150&amp;amp;ssl=1 150w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>