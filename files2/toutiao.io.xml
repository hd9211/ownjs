<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ceba7dbf098584c217905d79f98457fa</guid>
<title>如何撰写好技术方案设计-真实案例干货分享</title>
<link>https://toutiao.io/k/t1d9x3b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;一、 前言&lt;br/&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一个技术开发者，特别是高级、资深开发、架构师等，往往会遇到根据需求撰写技术方案。那么如何撰写一篇好的技术方案设计，我们今天就来聊一聊这个话题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;二、 技术方案是否有必要&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是肯定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我见过太多由于前期规划不到位（甚至是没有技术方案设计，开个技术讨论会口头沟通一下，就直接评工期开干的），这其中不乏很重要，工期很长的项目。而最后呢，到联调阶段各组串不起来，更可笑的是，产品和产品同学之间都没沟通清楚。导致最终很被动，到处挖坑补洞，而且花费了更多的时间和精力，甚至导致项目延期，后续扩张性不强等等问题。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我认为，技术方案是必不可少的一个环节。往往很多坑在这个阶段就可以避免的。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;古人云:&quot;磨刀不误砍柴工&quot;，技术方案就是磨刀的过程。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.282339707536558&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67WicOEAfAcyiaosXCicREoJVkCPrLdvThA88KIdpqSibJ3aiatGQqWRxbwfJ6kicGjaxZk3kSUCB5yUnWLOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;889&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;方案设计&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三、 如何写好技术方案&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;要贴合需求，满足需求是大方向。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可实施。要考虑当前条件下是否可落地，如：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;团队人员接受能力:技术选型的时候，要考虑团队成员接受能力，盲目引入新技术，可能造成不可预知的问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;时间成本:  一般来说Java 或者 PHP 后端项目(c语言项目可能会做一年甚至更长时间)，3个月时间周期算是比较长的了，假如按照此方案，需要半年甚至更长时间，那可能也不切实际。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;资源成本: 例如，项目可能需要引入Redis，Mysql，ES， MongoDB 等基础资源，那公司是否能提供这些资源(服务器是要钱的)。如果不能，在写技术方案时候，可能就需要考虑是否有替代方案。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;应急处理&amp;amp;可靠性保障
只要人能想到的问题，就一定会发生，不能有侥幸心理。所以要做好出现问题的应对策略，这里就必须做好如：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;四、技术方案模板&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是我总结的技术方案设计模板，希望对大家所有帮助。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、背景&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前的背景现状，简要说明以往业务所遇到的问题，给出本次项目迭代的原因，解决的技术痛点或业务痛点&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、目标&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过次方案要达到什么样的业务指标，例如，支撑多少QPS，性能相比现在提升多少倍，为后期水平扩展做铺垫&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3、整体方案&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1)架构图
2)流程图
3)时序图
4)调用链路图&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4、存储设计&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如Mysql表结构设计，缓存设计，ES存储设计等等，说明Schema、字段类型、默认值、描述信息等。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5、接口定义&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列举出接口的结构，参数，返回值等&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6、灰度方案&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按什么方式灰度，如何做灰度方案，用表格的形式列出分几个阶段灰度，每个阶段大概时间多长。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7、降级方案&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当出现问题如何降级操作，如何回滚。将风险降到最低程度。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8、关联系统(功能)影响&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重点需要各组注意的地方，相关人员需要特别关注，一一确认到位&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;9、资源分配情况&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;人力资源: 实现方案需要多少人力投入(开发人力，测试人力，运维人力)等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;硬件资源: 实现上述方案，列举需要哪些物理机器资源，运维人员需提前准备。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10、预估工期及时间节点&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列举出工期及关键时间节点，如，什么时候联调，什么时候提测，什么时候开始灰度上线，以及后续的迭代完善计划等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;五、温馨提示&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我也给大家总结了我之前做系统重构写的技术方案设计文档（线上真实版本，已脱敏)，给大家总结了2套， 有需要的朋友可以公众号后台留言&quot;方案&quot;即可获取，也欢迎有兴趣的朋友一起交流学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67WicS8obXBjC9RqxibSJcgOsnicwSlKjFSxuEECwjZjYS8Y9zpmCdyv6z4yeSicSQSDNz2XUzRppBjuGXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>56f5fa102c84fc2472b3f21f2bda1590</guid>
<title>Redis 在 vivo 推送平台的应用与优化实践</title>
<link>https://toutiao.io/k/on9i9p4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;24&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;作者：vivo互联网服务器团队-Yu Quan&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、推送平台特点&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;vivo推送平台是vivo公司向开发者提供的消息推送服务，通过在云端与客户端之间建立一条稳定、可靠的长连接，为开发者提供向客户端应用实时推送消息的服务，支持百亿级的通知/消息推送，秒级触达移动用户。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;推送平台的特点是并发高、消息量大、送达及时性较高。目前现状最高推送速度140w/s，单日最大消息量150亿，端到端秒级在线送达率99.9%。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、推送平台Redis使用介绍&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;基于vivo推送平台的特点，对并发和时效性要求较高，并且消息数量多，消息有效期短。所以，推送平台选择使用Redis中间件作为消息存储和中转，以及token信息存储。之前主要使用两个Redis集群，采用Redis Cluster 集群模式。两个集群如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;354&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6121031746031746&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt61MISdmib8iarUVnyVwJIWrlYMhhx39GkNPv8wzXVrcOiaEsuUB7MwF07mtGo4NvaOMU0fYlLDTzJgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对Redis的操作，主要包括如下几方面：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）推送环节，在接入层存储消息体到msg Redis集群，消息过期时间为msg Redis存储消息的过期时间。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）推送服务层经过一系列逻辑后，从msg Redis集群查出消息体，查询client Redis集群client信息，如果client在线，直接推送。如果client不在线，将消息id写到等待队列。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）如果连接上来，推送服务层，读取等待队列消息，进行推送。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）存储管理服务，会定期扫描cii索引，根据cii存储的最后更新时间，如果14天都没更新，说明是不活跃用户，会清理该token信息，同时清理该token对应的等待队列消息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;推送环节操作Redis流程图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;451&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7797001153402537&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt61MISdmib8iarUVnyVwJIWrlGVdosibibWtcMQzpWJa1y0FEvul4T5U2g5h3S3Q1pFxnTlLgxofV8icSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;867&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、推送平台线上问题&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;如上面介绍，推送平台使用Redis主要msg集群和client集群，随着业务的发展，系统对性能要求越来越高，Redis出现一些瓶颈问题，其中msg Redis集群在优化前，规模已达到220个master，4400G容量。随着集群规模变大，维护难度增加，事故率变高。特别是4月份，某某明星离婚事件，实时并发消息量5.2亿，msg Redis集群出现单节点连接数、内存暴增问题，其中一个节点连接数达到24674，内存达到23.46G，持续30分钟左右。期间msg Redis集群读写响应较慢，平均响应时间500ms左右，影响到整体系统的稳定性和可用性，可用性降到85%。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;56&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.0968096809680968&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt61MISdmib8iarUVnyVwJIWrlEiar0DEX3r1k5FaG2R6VeEocSIQ90z34ZYEnSdr8icoMLZCLmJU1XQNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;909&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、推送平台Redis优化&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Redis一般从以下几方面优化：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）&lt;/strong&gt;&lt;strong&gt;容量&lt;/strong&gt;：Redis属于内存型存储，相较于磁盘存储型数据库，存储成本较昂贵，正是由于内存型存储这个特性使得它读写性能较高，但是存储空间有限。因此，业务在使用时，应注意存储内容尽量是热数据，并且容量是可预先评估的，最好设置过期时间。在存储设计时，合理使用对应数据结构，对于一些相对大的value，可以压缩后存储。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）&lt;/strong&gt;&lt;strong&gt;热key倾斜&lt;/strong&gt;：Redis-Cluster把所有的物理节点映射到[0-16383]slot（槽）上，每个节点负责一部分slot。当有请求调用时，根据 CRC16(key) mod 16384的值，决定将key请求到哪个slot中。由于Redis-cluster这个特性，每个节点只负责一部分slot，因此，在设计key的时候应保证key的随机性，特别是使用一些hash算法映射key时，应保证hash值的随机分布。另外，控制热点key并发问题，可以采用限流降级或者本地缓存方式，防止热点key并发请求过高导致Redis热点倾斜。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）&lt;/strong&gt;&lt;strong&gt;集群过大&lt;/strong&gt;：Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态，每个节点都和其他所有节点连接。每个节点都保存所有节点与slot映射关系。当节点较多时，每个节点保存的映射关系也会变多。各节点之间心跳包的消息体内携带的数据越多。在扩缩容时，集群重新进行clusterSlots时间相对较长。集群会存在阻塞风险，稳定性受影响。因此，在使用集群时，应该尽量避免集群节点过多，最后根据业务对集群进行拆分。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里有个问题：为什么Redis-Cluster使用16384个slot，而不是更多，最多可以有多少个节点？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;官方作者给出了&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/redis/redis/issues/2576&quot; textvalue=&quot;解释&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;解释&lt;/a&gt;，并且在解释中说明，Redis-Cluster不建议超过1000个主节点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;394&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6818181818181818&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt61MISdmib8iarUVnyVwJIWrlGpuWhe62VVS87Xo1LXm5X2kH3W8lNBIGZCpYcNnSYE7erk2oicsjb1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;660&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;基于以上一些优化方向，和自身业务特性，推送平台从以下几方面开启Redis优化之路。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;msg Redis集群容量优化；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;msg Redis大集群根据业务属性拆分；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Redis热点key排查；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;client Redis集群并发调用优化。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.1 msg Redis集群容量优化&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;前文提及，msg Redis集群规模达到220个master、4400G容量，高峰期已使用容量达到3650G，使用了83%左右，如果后续推送提量，还需扩容，成本太高。于是对msg Redis集群存储内容进行分析，使用的分析工具是雪球开源RDB分析工具RDR 。&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/xueqiu/rdr&quot; textvalue=&quot;github网址&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;github网址&lt;/a&gt;：这里不多介绍，大家可以去github网址下载相应的工具使用。这个工具可以分析Redis快照情况，包括：Redis不同结构类型容量、key数量、top 100 largest keys、前缀key数量和容量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;分析后的结论：msg Redis集群中，mi：开头的结构占比80%左右，其中单推消息占比80%。说明：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;单推的特点是一对一推送，推送完或者推送失败（被管控、无效用户等）消息体就不再使用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;优化方案&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;经过这个优化后，缩容效果较明显。全量上线后容量缩小了2090G，原最高容量为3650G，&lt;strong&gt;容量缩小了58%&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;360&quot; data-backw=&quot;534&quot; data-cropselx1=&quot;5&quot; data-cropselx2=&quot;530&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;360&quot; data-ratio=&quot;0.6747211895910781&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCPb2Hicm0dbYgFtvQO6hsVrqicfa32ib849e1ZAYBicQvdch9FR1SPlF51g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;538&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.2 msg Redis大集群根据业务属性拆分&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;虽然进行了集群容量优化，但是高峰期msg Redis压力依然很大。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;主要原因&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）连接msg Redis的节点很多，导致高峰期连接数较高。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）消息体还有等待队列都存储在一个集群，推送时都需要操作，导致Redis并发很大，高峰期cpu负载较高，到达90%以上。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）老集群Redis版本是3.x，拆分后，新集群使用4.x版本。相较于3.x版本有如下优势：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;PSYNC2.0：优化了之前版本中，主从节点切换必然引起全量复制的问题。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提供了新的缓存剔除算法：LFU（Least Frequently Used），并对已有算法进行了优化。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提供了非阻塞del和flushall/flushdb功能，有效解决删除了bigkey可能造成的Redis阻塞。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提供了memory命令，实现对内存更为全面的监控统计。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; 更节约内存，存储同样多的数据，需要更少的内存空间。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可以做内存碎片整理，逐步回收内存。当使用Jemalloc内存分配方案的时候，Redis可以使用在线内存整理。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;拆分方案根据业务属性对msg Redis存储信息进行拆分，把消息体和等待队列拆分出来，放到独立的两个集群中去。这样就有两种拆分方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;方案一&lt;/strong&gt;：&lt;strong&gt;把等待队列从老集群拆分出来&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;只需推送节点进行修改，但是发送等待队列连续的，有状态，与clientId在线状态相关，对应的value会实时更新，切换会导致数据丢失。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;方案二&lt;/strong&gt;：&lt;strong&gt;把消息体从老集群拆分出来&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所有连接msg Redis的节点替换新地址重启，推送节点进行双读，等到老集群命中率为0时，直接切换读新集群。由于消息体的特点是只有写和读两个操作，没有更新，切换不用考虑状态问题，只要保证可以写入读取没问题。并且消息体容量具有增量属性，需要能方便快速的扩容，新集群采用4.0版本，方便动态扩缩容。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;方案一&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;方案二&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;优点&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;涉及节点少，改造只在推送节点&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;1、数据不会丢失&lt;/p&gt;&lt;p&gt;2、消息体容量具有增量属性，消息体存4.0新集群，性能更好，后续运维更方便&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;缺点&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;会丢失数据&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;涉及节点多，但除了推送节点需要考虑双读外，其他节点只需配置中心修改msg Redis地址到新集群服务重启即可&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;考虑到对业务的影响及服务可用性，保证消息不丢失，最终我们选择方案二。采用双读单写方案设计：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;由于将消息体切换到新集群，那在切换期间一段时间（最多30天），新的消息体写到新集群，老集群存储老消息体内容。这期间推送节点需要双读，保证数据不丢失。为了保证双读的高效性，需要支持不修改代码，不重启服务的动态规则调整措施。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;大致规则分为4个：只读老、只读新、先读老后读新、先读新后读老。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;32&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;设计思路：服务端支持4种策略，通过配置中心的配置决定走哪个规则。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;86&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;规则的判断依据：根据老集群的命中数和命中率决定。上线初期规则配置“先读老再读新”；当老集群命中率低于50%，切换成&quot;先读新后读老&quot;；当老集群命中数为0后，切换成“只读新”。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;老集群的命中率和命中数通过通用监控增加埋点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;方案二流程图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;290&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5016077170418006&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt61MISdmib8iarUVnyVwJIWrloZazQAK8hppS2az0cJcNmTVRa0dnClo9hhElGuUgzgz3R3Ueqo9Slg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1244&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;拆分后效果：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;712&quot; data-backw=&quot;523&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBC0KTfkWVp0Qs2tmfVcFjXzUFe5kK6ibSgUZ2ibrIexvDr4RuziaPlGg8wA/0?wx_fmt=png&quot; data-cropx1=&quot;1.095602294455067&quot; data-cropx2=&quot;570.8087954110899&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;732.9579349904398&quot; data-ratio=&quot;1.2864674868189807&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBC704HZ1rQn1OibB1bbxcXj9OAE2ibovxPZsHflxJib8WBZiaKU2d1a4tsug/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;569&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;拆分前，msg Redis集群同时期高峰期平均响应时间1.2ms，高峰期存在调用Redis响应慢情况。拆分后，平均响应时间降低到0.5ms，高峰期无响应慢问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.3 Redis热点key排查&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;前面有说过，4月某某明星热点事件，出现msg Redis单节点连接数、内存飙升问题，单节点节点连接数达到24674，内存达到23.46G。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;由于Redis集群使用的虚拟机，起初怀疑是虚拟机所在宿主机存在压力问题，因为根据排查发现出现问题的节点所在宿主机上挂载Redis主节点很多，大概10个左右，而其他宿主机挂载2-4个左右主节点，于是对master进行了一轮均衡化优化，使每台宿主机分配的主节点都比较均衡。均衡化之后，整体有一定改善。但是，在推送高峰期，尤其是全速全量推送时，还是会偶尔出现单节点连接数、内存飙升问题。观察宿主机网卡出入流量，都没出现瓶颈问题，同时也排除了宿主机上其他业务节点的影响。因此怀疑还是业务使用Redis存在热点倾斜问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过高峰期抓取调用链监控，从下图可以看到，我们11:49到12:59这期间调用msg Redis的hexists命令耗时很高，该命令主要是查询消息是否在mii索引中，链路分析耗时的key大都为mii:0。同时对问题节点Redis内存快照进行分析，发现mii:0容量占比很高，存在读取mii:0热点问题。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;265&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt61MISdmib8iarUVnyVwJIWrlPmDYicUtcou9MX1Xia7VPX6jma47hTxrS3nzjvklFNYF0deuLqaGHfOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;经过分析排查，发现生成消息id的雪花算法生成的messageId，存在倾斜问题，由于同一毫秒的序列值都是从0开始，并且序列长度为12位，所以对于并发不是很高的管理后台及api节点，生成的messageId基本都是最后12位为0。由于mii索引key是mi:${messageId%1024}，messageId最后12位为0，messageId%1024即为0，这样就导致msg Redis中mii:0这个key很大，查询时命中率高，因此导致了Redis的热key问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;173&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.2995090016366612&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt61MISdmib8iarUVnyVwJIWrl7je4YnjibsGAMAp9w0Hoo73Z9S1eFhKpQOXf23OK5taygUnA8vBvCfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;611&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;优化措施&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）雪花算法改造，生成消息id时使用的sequence初始值不再是0，而是从0~1023随机取一个数，防止热点倾斜问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）通过msg消息体中消息类型及消息体是否存在来替换调hexists命令。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;最终效果&lt;/strong&gt;：优化后，mii索引已分布均匀，Redis连接数很平稳，内存增长也较平稳，不再出现Redis单节点内存、连接数暴增问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.4 client Redis集群并发调用优化&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;上游节点调用推送节点是通过clientId进行一致性hash调用的，推送节点会缓存clientInfo信息到本地，缓存时间7天，推送时，优先查询本地缓存，判断该client是否有效。对于重要且经常变更的信息，直接查询client Redis获取，这样导致推送高峰期，client Redis集群压力很大，并发高，cpu负载高。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;优化前推送节点操作缓存和client Redis流程图：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.0589887640449438&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt61MISdmib8iarUVnyVwJIWrltGWOia4zaAnChdNe5oS4H9PynE2090p8PFzvKVxH6emToakYokqXAfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;712&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;优化方案&lt;/strong&gt;：对原有clientInfo缓存进行拆分，拆分成三个缓存，采取分级方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;cache还是保存原来clientInfo一些信息，这些信息是不经常变更的，缓存时间还是7天。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;cache1缓存clientInfo经常变更的信息，如：在线状态、cn地址等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;cache2缓存ci加密部分参数，这部分缓存只在需要加密时使用，变更频率没那么高，只有连接时才会变更。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;由于新增了缓存，需考虑缓存一致性问题，于是新增一下措施：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）推送缓存校验，调用broker节点，根据broker的返回信息，更新和清理本地缓存信息。broker新增不在线、aes不匹配错误码。下次推送或者重试时，会重新从Redis中加载，获取最新的client信息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）根据手机端上行事件，connect和disconnect时，更新和清理本地缓存信息，下次推送或者重试时，会重新从Redis中加载，获取最新的client信息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;整体流程：消息推送时，优先查询本地缓存，缓存不存在或者已过期，才从client Redis中加载。推送到broker时，根据broker返回信息，更新或失效缓存。上行，收到disconnect、connect事件，及时更新或失效缓存，再次推送时重新从client Redis加载。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;优化后推送节点操作缓存和client Redis流程图：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.2366522366522366&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt61MISdmib8iarUVnyVwJIWrlogzbxj2sJ7sIB9NcufEfztNDFfpKXyEVFd3gZia0afngm9QgUUoE5sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;693&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;优化后效果&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）新增cache1缓存命中率52%，cache2缓存命中率30%。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）client Redis并发调用量减少了近20%。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.41639871382636656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt61MISdmib8iarUVnyVwJIWrlDeibv73uK0LQ334zlFfyjSSQiaHlTdHibHSLFYAWkPnTONUYC56WRfJNQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;622&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3）高峰期Redis负载降低15%左右。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;202&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;202&quot; data-ratio=&quot;0.34962406015037595&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCgKXekSJje3CjKnNx1Rg12ibhLIx8BDEV3UeBBNnxMiajImLypTzhcnVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1064&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;192&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;192&quot; data-ratio=&quot;0.3330179754020814&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCknQZlWolMqU8BBiaHWjwzcMibdaHryg5Z3JHxynRY73Uu7yxxZM0iaFPw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1057&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Redis由于其高并发性能和支持丰富的数据结构，在高并发系统中作为缓存中间件是较好的选择。当然，Redis是否能发挥高性能，还依赖业务是否真的理解和正确使用Redis。有如下几点需要注意：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;120&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;1）由于Redis集群模式，每个主节点只负责一部分slot，业务在设计Redis key时要充分考虑key的随机性，均匀分散在Redis各节点上，同时应避免大key出现。另外，业务上应避免Redis请求热点问题，同一时刻请求打到少部分节点。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;138&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;2）Redis实际吞吐量还与请求Redis的包数据大小，网卡有关，&lt;a target=&quot;_blank&quot; href=&quot;http://www.redis.cn/topics/benchmarks.html&quot; textvalue=&quot;官方文档&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;官方文档&lt;/a&gt;有相关说明，单个包大小超过1000bytes时，性能会急剧下降。所以在使用Redis时应尽量避免大key。另外，最好根据实际业务场景和实际网络环境，带宽和网卡情况进行性能压测，对集群实际吞吐量做摸底。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;以我们client Redis集群为例：（仅供参考）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Network&lt;/strong&gt;：10000Mb；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Redis Version&lt;/strong&gt;：3.x；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Payload size&lt;/strong&gt;：250bytes avg；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;：hset（25%）、hmset（10%）、hget（60%）、hmget（5%）；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;性能情况&lt;/strong&gt;：连接数5500、48000/s、cpu 95%左右。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;180&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;180&quot; data-ratio=&quot;0.3121495327102804&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCGwaUnHnJZDzmKZ8gPKq62YPv0mx7TVvqVJUwdmOkU5clJiaTzt5gNnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1070&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;448&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;322&quot; data-ratio=&quot;0.71875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCDvZFZkOcyaxz26nNxZiaGwxzCQB2tibuvIlApOQm1gdKmsfoTSQjjRbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;448&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Redis在实时分析这块支持较少，除了基本指标监控外，实时内存数据分析暂不支持。在实际业务场景下如果出现Redis瓶颈，往往监控数据也会缺失，定位问题较难。对Redis的数据分析只能依赖分析工具对Redis快照文件进行分析。因此，对Redis的使用依赖业务对Redis的充分认知，方案设计的时候充分考虑。同时根据业务场景对Redis做好性能压测，了解瓶颈在哪，做好监控和扩缩容准备。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:77.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI4NjY4MTU5Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png&quot; data-nickname=&quot;vivo互联网技术&quot; data-alias=&quot;vivoVMIC&quot; data-signature=&quot;分享 vivo 互联网技术干货与沙龙活动，推荐最新行业动态与热门会议。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>58d7e74b673d4868c0a5f20aa933834d</guid>
<title>流量录制与回放在vivo的落地实践</title>
<link>https://toutiao.io/k/es8kiqb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;37&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;作者：vivo互联网服务器团队-Liu YanJiang、Xu Weiteng&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;本文根据Liu YanJiang老师在“2021 vivo开发者大会&quot;现场演讲内容整理而成。公众号回复【2021VDC】获取互联网技术分会场议题资料。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、为什么要使用流量录制与回放？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1.1 vivo业务状况&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;近几年，vivo互联网领域处于高速发展状态，同时由于vivo手机出货量一直在国内名列前茅，经过多年积累，用户规模非常庞大。因此，vivo手机出厂内置很多应用，如浏览器、短视频、直播、资讯、应用商店等都是直面用户的高并发、复杂系统。这些面向用户的系统对使用体验要求非常高，对这些业务的质量保障是重中之重。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.0040485829959513&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCvMVxeXtrVpWutUwVMicCCaIHc9HYy7OxyzVvpNib6jcD6vGpCXRvNz1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;494&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1.2 测试痛点&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;随着我们业务规模和复杂度不断提高，各种问题和挑战随之而来。其中“在业务迭代升级甚至重构时，如何保证系统修改后的原有业务正确性？”是我们正在着手解决的其中一大难题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;简单的业务系统通过常规的自动化测试工具加上人工测试即可解决，对于复杂系统，回归测试将变成一项艰难的工程。以我们推荐系统为例，一个推荐系统承担了数十个推荐场景。如何在修改某个推荐场景的情况下保证不影响其他场景呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之前，我们是通过编写自动化测试用例去解决，但是通过人工编写的测试用例存在较多痛点：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;测试用例编写难，数据构造难，用户真实的使用行为不容易模拟。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;部分代码逻辑通过测试脚本难以验证。例如发送消息无法验证消息内容没有问题。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;依靠人工构造用例难以考虑到系统所有场景，容易造成用例遗漏。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;随着系统部署复杂度上升，环境维护成本也比较高。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;针对这些复杂业务系统在迭代过程中回归测试效率低的问题，我们进行了一些持续性探索。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1.3 方案探索&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们结合vivo互联网体系特色对业界一些方案进行了广泛调研和参考并列举了如下要求：新方案要能简单高效，用户无需过多理解就能轻松上手；业务接入成本足够低，能够快速进行回归测试；新方案通用性、扩展性要足够好，能适应不断变更的系统架构。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们参考了一些头部互联网公司的技术方案，发现流量录制与回放是一个非常好的选择。业界内有不少头部公司基于这种技术取得了不错的进展和落地价值，为我们带来了一些参考和信心。因此，对于流量录制回放，我们进行了一些更加深入的探索和落地，也就是我们的月光宝盒平台。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;85&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.14765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCMiaY3NcXyTj7CYgiaVdRx4AZAt34WDCt4Xc4nMdc0sxdMo8lx2NtAhZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、什么是流量录制与回放？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在介绍具体实践之前，先简单介绍一下什么是流量录制与回放？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;流量录制回放是通过复制线上真实流量（录制）然后在测试环境进行模拟请求（回放）验证代码逻辑正确性。通过采集线上流量在测试环境回放逐一对比每个子调用差异和入口调用结果来发现接口代码是否存在问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;利用这种机制进行回归测试具备许多优势：首先，通过录制流量取代测试用例简单高效，易于形成丰富的测试用例；其次，回放线上流量能完美模拟用户真实行为，避免人工编写存在的差异性；另外通过对录制数据和回放数据采用对象对比方式能更深入、细微验证系统逻辑；最后录制的流量无需维护，随取随用，非常方便。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、月光宝盒平台&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;流量录制与回放这种创新性的机制理论上是非常优秀的，但是实现起来却不太容易，里面有诸多难题需要解决。下面将给大家介绍流量录制与回放在vivo互联网体系的落地方案和遇到的问题以及我们是如何解决这些问题的。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.1 底层架构&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;vivo月光宝盒平台借鉴了开源Jvm-Sandbox-Repeater项目经验，在Jvm-Sandbox-Repeater基础上做了二次开发和改造。月光宝盒平台包括了服务端和Java Agent两大模块，整体架构如下图所示。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.1.1 业务架构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;下图是我们服务端整体业务架构，整个服务端可以划分成任务管理、数据管理、覆盖率分析、配置管理、监控告警等模块。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;此外还有一些消息通知模块。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;351&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCMptZuMPD6pO9bGkCWDyedfJIUulHNYr1D6cIwEJLZleGibOBIykHgeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.1.2 Agent架构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;下图是Agent模块整体架构图，Agent是流量录制回放过程的核心。Agent是基于字节码机制实现，整体包括了四层结构：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;底层是基础容器层，这一层是标准的Java-Agent实现；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;容器层上面是依赖层，这一层引入了我们需要的第三方资源、实现了字节码插桩机制、类加载隔离、class元数据管理能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;依赖层之上是基础能力层，在这一层实现了基本的原子功能，如录制回放插件的管理、数据管理、数据对比、子调用Mokc、运行监控、配置加载等能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;最上层是业务逻辑层，这一层可以将基础逻辑功能组合在一起形成一个完整的业务单元。目前月光宝盒除了支持流量录制与回放外，还支持了类似依赖分析、数据Mock等功能。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;230&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBClkQlupuosPRzjH0VR0EC8B5wZtNJaoValwZ3FClhKUKiaIxZpD3IOmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.2 月光宝盒的启动流程&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;录制回放任务启动最重要是能无侵入的将我们Agent下发到指定业务机器上并且自动将Agent Attach到我们业务进程上去。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;月光宝盒的启动流程如下图所示，用户首先在月光宝盒平台配置录制回放任务。完成配置后，配置信息会入库并同时通过VCS（vivo自研的作业调度平台）将启动脚本、vivo-repeater-agent包下发至用户配置的机器上。然后会执行shell脚本并拉起sandbox，将agent attach至目标的JVM。随后agent便可以在目标JVM上通过反射创建jvm sandbox，sandbox会通过spi拉起多个模块。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其中最重要是vivo repeater module，它会通过spi加载多个插件，这些插件最终会以ASM的方式增强目标JVM上的代码，从而实现字节码插桩，而流量的录制与回放便是使用这些增强的插件进行流量拦截、下发存储完成的。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;256&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCJ2g0rsqg6D6EbjFVQQP8dubIRSckicMatu0Xg4ibDkMWvEgCKzFXR4nQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;上述的执行流程允许用户仅凭在控制台配置少量信息就能完成复杂的流量录制与回放功能，下面我们将对录制与回放的详细过程进行说明。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.3 流量录制过程&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;下面是一个流量录制的过程。一条流量的调用链路包括入口调用和若干次子调用，流量的录制过程就是把入口调用和子调用通过一个唯一ID绑定成一次完整的调用记录。月光宝盒找到入口调用和子调用合适的代码点（关键入口和出口），基于字节码插桩技术在该代码点进行代码增强，实现调用拦截，记录调用的入参和返回值，然后根据相应的调用类型（如dubbo、http）生成一个录制标识。当调用完成时，月光宝盒就采集到了整个流量的调用记录，之后月光宝盒进行数据脱敏、序列化等操作，最后加密发送到服务端进行储存。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.32734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCTibHAXxXJfIzwtqjklPky0nxWeHKqsEwrC7WMmWMtwZ3ZXvtkibTNREw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.2809917355371901&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCFFoXXQiaSBcy3FF2A4eS9icseufZm1cQFPJ8CcInPaVNtkiaZ5klpG0SQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1694&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;录制是一个比较复杂的过程，在这个过程中我们持续踩了一些坑和遇到了一些问题，下面我列举几个比较重要的问题和大家分享一下。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.3.1 难点一：Full GC&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;初期，vivo内部系统在使用月光宝盒时发生了Full GC的现象。经过分析得知是录制的接口对guava调用非常多，导致录制的请求流量太大从而造成了FULL GC。这是因为在完成一条接口流量的录制前，录制到的所有数据都在内存中，流量或者子调用一旦过大便容易导致频繁Full GC。另外还有一些高并发系统接口比较多，同时录制多个高并发接口存在性能压力。因此，我们当时针对月光宝盒的性能问题进行了如下优化：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;经过不断优化后，录制过程非常平稳，再也没有出现因为流量过大或者其他问题导致的Full GC现象。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.3.2 难点二：调用链路串联&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;流量录制和回放存在线程上下文标识，vivo有不少系统有自定义业务线程池或者使用第三方框架自带了线程池（例如Hystrix）会导致标识丢失导致无法串联整个调用链路问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;月光宝盒最开始是依赖Jvm-Sandbox-Repeater的基础能力，在未使用线程池时，可以将录制标识存放于ThreadLocal中串联整个调用链路；而使用线程池时，我们利用自身Agent对Java 线程池进行自动增强透传我们录制回放标识，但这么做会和公司的调用链Agent对线程池的增强产生冲突从而导致JVM异常崩溃，这种方式没有办法进行。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最终我们决定与公司调用链团队合作，借助调用链的Tracer上下文进行传递录制标识，双方都进行了一定程度改造特别是两个Agent对HTTP、Dubbo埋点位置进行了一定调整。目前我们还没有解决ForkJoinPoool这种线程池框架传递标识问题，后续会继续对这类线程池做支持。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.3.3 难点三：数据安全&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第三个是录制的流量如何保证数据安全，不少系统有一些铭感数据。对此，我们针对录制的数据进行了可配置化的脱敏处理，用户可以在月光宝盒平台配置待脱敏字段，Agent在录制流量的时候后会根据配置信息在内存中对这些字段进行脱敏处理，保证传输过程和存储过程的数据安全。另外，月光宝盒会严格控制流量详情的查看权限，防止跨项目的数据查询行为。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.3.4 难点四：流量去重&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第四个是流量去重问题。有时业务方在使用月光宝盒平台时可能录制到非常多的相同流量，造成后续回放耗时较长和问题排查效率低下。因此我们针对该现象思考如何能在保证接口覆盖率的情况下尽可能减少相同流量的数量。目前的方案是根据流量入参和执行调用栈作去重操作。在录制时，Agent会根据去重配置信息进行流量去重操作，保证入库的流量数据是唯一的。通过这种机制在一些场景大幅度减少了录制流量数量，提高了流量的使用效率。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.4 流量回放过程&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;下图是流量回放的过程。流量回放是通过获取录制流量的入口调用，再次对迭代后的系统发起调用，然后去验证系统逻辑正确性的过程。和录制不一样的是，回放对于外部的调用都是Mock的，这个过程不会真正的去访问数据库。回放过程会将录制子调用和回放子调用的入参进行对比，如果参数不一致那么会阻断回放流量，如果参数一致会使用录制子调用的结果进行Mock返回。回放完成同样会产生一个响应结果，这个时候我们会对比原始录制结果和回放响应结果，根据该对比结果和子调用的对比结果就能得出被测试系统的正确性了。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBC8hicickJsFc90CKVpmfY2modCOeFBqmyLHicexndtHFRmMZl18whd4BZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;回放是一个更加复杂的过程，因为录制和回放一般在不同环境的不同版本系统执行，可能存在较大差异，如果处理不当回放成功率会比较低。起初接入月光宝盒的应用成功率都比较低，后来经过长期优化和精细化运营，月光宝盒的回放成功率不断提升。下面将分享几个遇到的难点以及一些应对策略。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.4.1 难点一：时间差异&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第一个难点是时间差异的影响，一些系统业务逻辑里面存在和时间有关逻辑，由于录制和回放时间不一样导致不少场景有时间相关逻辑导致回放失败。针对这个问题我们进行了一些研究，并最终将回放时间和录制时间保持一致。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于System.currentTimeMillis() 这种native方法，Agent会动态修改方法体的字节码，代理掉业务对该方法的调用，动态替换为平台事先定义的获取时间方法从而保证时间替换。解决了这个问题对于Date这些类也就迎刃而解了。另外，JDK8中的LocalDateTime等非native时间方法就比较简单了，直接Mock掉时间方法调用即可。使用这些机制基本上消除了业务逻辑里面的时间差异问题，消除了因为时间导致的回放失败问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.4.2 难点二：系统降噪&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第二个难点是如何处理系统噪音。很多系统里面存在一些traceId、sequenceId等通用噪音字段，这些噪音字段也是导致回放失败的因素。初期业务接入时需要逐个排查，整体效率比较低。后来月光宝盒支持了全局级别、应用级别、接口级别的噪音字段配置，很多通用的噪音字段可以直接通过全局配置解决，业务接入只需要个性化配置噪音字段即可，通过这种分层次的降噪配置大幅提升业务接入效率。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.4.3 难点三：环境统一&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第三个难点是环境差异。以vivo互联网体系为例，一般在线上环境进行录制，在测试环境和预发环境进行回放，刚开始因为环境不一致导致回放失败的案例非常多，影响了整体回放成功率。针对这个问题，我们进行了一系列探索和解决。月光宝盒在线上录制时会同时录制一份线上环境配置，线下回放时会利用线上配置自动替换掉线下的环境配置，通过这种机制保证了配置中心数据一致性。另外对于一些系统内存性质的配置数据，月光宝盒支持配置接口同步内存数据。通过这些解决方案，我们基本上保证了线上、线下环境的一致性，大幅度减少了因为环境配置导致的回放失败数量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.4.4 难点四：子调用匹配&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第四个难点是子调用匹配问题。最开始指定的匹配策略无法满足复杂业务场景，经常出现匹不到流量或者匹配错误导致回放难以成功。后面我们针对不同的回放子调用指定不同的匹配策略：缓存类型按照缓存Key去匹配；HTTP类型按照URI匹配；Dubbo按照接口、方法名、参数类型匹配等。另外，如果匹配到多条相同子调用，我们会比较系统调用栈和入参请求参数，结合调用栈和请求参数两个维度寻找最可能匹配流量，通过这些精细化匹配策略提升了匹配成功率。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.4.5 难点五：问题排查&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第五个难点是问题排查了，录制和回放是非常复杂的过程，由于Agent运行在业务端机器出现任何问题去分析排查难度都很大。为了提升排查效率我们支持了若干手段：&lt;/p&gt;&lt;p&gt;1)、支持回放分析调用链路图，下面会详细讲解；&lt;/p&gt;&lt;p&gt;2)、任务启动详细命令和参数输出，通过输出任务启动命令参数，我们在本地非常方便启动和模拟线上运行的录制和回放任务，提高了排查效率。&lt;/p&gt;&lt;p&gt;3)、本地一键安装Agent，在本地修改了Agent代码后我们一键就可以将新的Agent在本地远程测试环境安装。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;除了这些功能外我们还开发了很多效率工具，这里就不一一展开说明了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.5 丰富的协议支持&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;vivo业务种类非常多，不同业务技术栈有差异。这些系统接入我们平台需要针对性的适配相应插件。通过我们不断完善插件，目前我们已经支持了下面数十种插件，基本已经覆盖了各种常见的中间件。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;266&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;267&quot; data-ratio=&quot;0.4608&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCJlQVI38jH5vMzCIb9bU1fRqziaz7fmAusfmXIHvNyBapk1iccUoIibia8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1250&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.6 月光宝盒平台其它特点&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.6.1 可视化调用链路&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;起初，业务回放失败只能依靠平台开发人员协助排查，整个排查过程费时费力。针对这种情况，我们提供了一些可视化的运维工具。其中一个就是链路调用分析图。我们对录制和回放过程进行详细跟踪和记录，通过调用链路图帮助用户分析执行过程。出现问题时，用户可以清晰看到具体异常位置和根本原因，提高了排查效率。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;294&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;294&quot; data-ratio=&quot;0.44112769485903813&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCibicBTQibkBL1tPrrKiaAfsBWQRtiarBswez2EtLcTSpVvoQWKcAOvKDYHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1809&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.6.2 回归代码覆盖率&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;月光宝盒的优势之一是具备很高的流量覆盖率很容易形成高覆盖率。如何去验证回放的流量确实覆盖了业务系统的各个场景，让使用人员使用了月光宝盒就不存在疑虑放心大胆的上线。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;针对这个问题，月光宝盒提供了代码回归覆盖率的统计能力，我们利用内部的CoCo-Server平台统计了系统全量覆盖率和增量代码覆盖率。为了识别覆盖率数据来自流量回放，我们在回放前需要调用接口清理机器内存里面的覆盖率数据，这种方式可能存在和其他流量冲突可能性，后续等CoCo-Server平台完成流量染色区分流量来源就没有这方面担忧了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;349&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6031496062992125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCxwm9ibDfMqx8Fl2rZOff0HhnribxHaCViaxn5zPu4cWFsFXWQb6ROuoMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;635&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.6.3 定时录制与回放&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;虽然流量录制和回放的操作流程已经非常简便了，但对于一些频繁使用的业务人员来说仍然较为繁琐，特别是有些版本涉及了过多的系统，同时录制回放多个系统效率比较低下。为了提高使用效率，月光宝盒支持了用户自定义定时录制、回放任务的能力。通过定时任务可以批量定时录制和回放，减小了人工操作成本，提高了平台使用体验。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;243&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;224&quot; data-ratio=&quot;0.420966865833786&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCplCzaz9H1QKiaeP3Nr8viar8twrYP6lrXaWxvGBXqFQHVc6FibFTX0DQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1841&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;3.7 月光宝盒其他应用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;除了自动化测试，我们在其他方面也进行了一些探索和应用。第一个是流量压测，用户可以通过月光宝盒平台分析录制的流量生成的压测模型。第二个是问题定位，使用月光宝盒平台在线下回放重现线上问题，帮助测试、开发人员复现问题现场。最后一个是安全分析，常态化录制测试环境流量可以帮助安全工程师提供流量素材，识别业务系统安全风险等。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、核心指标&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;月光宝盒平台的接入非常简单，业务初次接入基本上10分钟内就可以完成。平台上线不到一年就累计接入了近200个业务系统，很多都是vivo互联网体系中最为核心的应用。一年以来累计完成1W+次录制与回放。接入月光宝盒后，平台提前发现了不同业务的累计数十个线上问题，有效减少线上事故发生次数。在很多场景下，使用月光宝盒平台的流量录制回放功能可以提升测试、开发人员80%以上的工作效率，总体来看超出了我们的预期目标。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;366&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6331058020477816&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBC14SgpIxg3XUVn3J5C7TXZ2lMXlpryLddgia1HIawt6QicwHTOLVrIANA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;586&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、未来规划&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在未来规划上我们主要聚焦在两方面，一个是功能规划，第二个是协同开源。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;5.1、功能规划&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前我们完成了平台基础功能建设，但是还存在使用效率等问题，后续我们重点会在下面两个方向去优化：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）希望能够实现精准化测试，避免每次全量回放录制数据，进一步降低回放耗时。精准化测试需要分析变更代码，获得变更代码的影响范围，然后基于此筛选出对应的流量进行回放，这样就能减小回放覆盖范围。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）是希望能够与vivo互联网体系下的CI/CD结合，当业务系统发布到了预发环境后，能够自动触发录制和回放任务。这样在上线前能给系统进行一些风险识别同时提升用户使用效率。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;5.2 开源共创&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;开源是未来软件的发展趋势，对于开源，我们一直是受益者，我们也期望能积极参与到开源项目为社区贡献力量。我们参与了开源&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/alibaba/jvm-sandbox-repeater&quot; textvalue=&quot;https://github.com/alibaba/jvm-sandbox-repeater&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://github.com/alibaba/jvm-sandbox-repeater&lt;/a&gt;项目，成为了社区核心贡献者。第一期累计贡献了5个社区没有但是比较重要的插件。后续我们准备继续按照下面规划逐步向社区回馈月光宝盒的一些核心能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;140&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.24140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4lPKsCuKS2c7OSSUu1OdBCN4n1g7pM9udgw2UHTAYAOsRrUv9Yw4u4GR8WiagcvbcmWqulFdpEfbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:109.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a8b453da300c0ce325b15d4e0e90a2b0</guid>
<title>生还是不生？ SpringBoot3 版本有起飞前兆，最小依赖Java17！</title>
<link>https://toutiao.io/k/p23ymnd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一直以来，Java8都是Java社区心头的痛。&lt;/span&gt;&lt;span&gt;因为它代表着以稳定性为主的企业管理层，与拥抱变化为主的底层码农层之间的、爱的魔力拉锯战。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不生！少生！成为各大厂心照不宣的选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，这种平衡或将打破。因为Java届的霸主框架SpringBoot，选择了最小支持的Java lts版本，就是最新的Java17。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;坚信Java8成为永恒的同学，该用尿滋醒一下了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;怎么办？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到底用不用新的版本，这其实并没有什么意义。有需求才有变化，为了追求升级而升级，那是脑残才干的事。当广大从业者，越来越了解到自己是一个工具人的时候，就会放弃这些无意义的操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只有两种情况，无意义才会变成有意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一，是卷到极致的时候，不痛不痒的版本升级就会进入你的任务列表。第二，是落后社区太多的时候，羞愧感加上功能的驱使会让你选择升级。不过这也并不是绝对，因为如果你是管理层，脏活自然会有人干，你也不会有这么大的动力。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;哪些改变？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是先回到正题，看一下SpringBoot3都有哪些改变吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再次强调一下，SpringBoot3将强力合体Java17，采用全新的Spring6版本，Maven支持也提高到了3.5、Gradle提高到了7.3。版本管理器默认也换成了grandle，grandle的下载速度，国内要肉痛一下了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再次。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然我们现在使用JavaEE的功能越来越少，但很多巨无霸商业企业还是依然坚守着打下的江山。自从JavaEE改名为Jakarta EE，Jakarta EE9版本迎来了更大的改动，连javax这种包名都给改了（2019及以后）。SpringBoot3一琢磨，假如不追上的话，恐怕后面很快就要出SpringBoot4了，所以Jakarta EE的版本，也切成了9。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Jakarta是印尼首都雅加达，与斯巴达只差两字的距离。Jakarta EE 9 的版本应由 Eclipse Glassfish，Apache TomEE，Wildfly，Oracle WebLogic，JBoss 和 IBM Websphere Liberty 实施，并使用 Jakarta EE 的标志。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这通常没什么影响，因为新时代的互联网人，使用JavaEE的功能越来越少，就连JavaSE都嫌臃肿，所以这对很多人并没有什么影响。我建议你如无必要，永远不要使用它，因为里面全是坑哈哈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;移除了一些老掉牙的东西，比如 Apache ActiveMQ、Atomikos、EhCache 2、Hazelcast 3等。Apache ActiveMQ这种老掉牙的东西，实在是不推荐新项目使用了，高并发下它坑死了老多人；Hazelcast也在Redis的进攻下节节败退，虽然用上了先进的Raft也颓势尽显。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些不入流的东西们，最好的存在方式就是各种stater，而不是放在core包里面。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样被移除的还有下面这些：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;EhCache 3&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;H2’s web console&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Hibernate’s metrics&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Infinispan&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Jolokia&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Pooled JMS&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;REST Assured&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些名词背后，充满了商业的腐朽味道，以及销售的嘴脸和被忽悠的懵逼的老板们。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;怕不怕？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在SpringBoot3还是M1版本，Spring Boot团队将每两个月发布一个新的里程碑版本，所以M2版本预计将在3月24日发布。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，大家都不怕软件不更新，也不怕经过实践过的更新，最怕项目出生在这种不生不死的间隔时间。选新的吧，功能不稳定，要背锅；选旧的吧，心里不痛快，未来总有一天还得升级。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以大多数时候，时间就在这犹犹豫豫中流逝了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;保持系统的纯洁性，是一个非常好的习惯。哪怕官方为你贴心的提供了很多扩展功能，也不要随随便便去使用，否则你将尝到背叛的味道。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，一个普通程序员职业生涯，被定格在35岁的年代，在新时代农民工论调的大背景下，你并不需要为其他的阶级去着想，除非它影响到了你的面包。&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651501880&amp;amp;idx=1&amp;amp;sn=c8a2ce984f6f5faa1a1e49e6166eeae7&amp;amp;chksm=bd25d9478a5250510f423625de1ee7fae52076d4b161a4bf0cf44d421ac0902c4bfce43c0e55&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Java17，有史以来最快 JDK&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Java17，有史以来最快 JDK&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651496032&amp;amp;idx=1&amp;amp;sn=c1b8362c30809ccdd1d1185198c8cb68&amp;amp;chksm=bd25f21f8a527b0989814972f0a8682a5594a2bc61ee91ff291c5bb2c67b1b3e1052a78e2e53&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Java17 新特性确定，Java之父：终于可以和一个长达25年的漏洞说再见了&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java17 新特性确定，Java之父：终于可以和一个长达25年的漏洞说再见了&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ff9e339b91cece2fac2964c112ae211a</guid>
<title>Spring注入Bean的七种方式</title>
<link>https://toutiao.io/k/p279cks</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUyMzM2ODUwMA==&amp;amp;action=getalbum&amp;amp;album_id=1951643299048423427#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1951643299048423427&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#Java&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;70个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.20575131632239774&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hs540iaTKoaKPniafc8icFWanFqBKibEfLvQvxZs99SDAKpl4Fia8r5QQAwJxJD84kuribaLFNicy4eWDiawHu9BHMiayicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2469&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;来源：juejin.cn/post/6844903813753602056&lt;/em&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过注解注入Bean&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;背景&lt;/h3&gt;&lt;section&gt;我们谈到Spring的时候一定会提到IOC容器、DI依赖注入，Spring通过将一个个类标注为Bean的方法注入到IOC容器中，达到了控制反转的效果。那么我们刚开始接触Bean的时候，一定是使用xml文件，一个一个的注入，就例如下面这样。&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt; &amp;lt;bean id=&lt;span&gt;&quot;bean&quot;&lt;/span&gt; class=&lt;span&gt;&quot;beandemo.Bean&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;我们的项目一般很大的话，就需要成千上百个Bean去使用，这样写起来就很繁琐。那么Spring就帮我们实现了一种通过注解来实现注入的方法。只需要在你需要注入的类前面加上相应的注解，Spring就会帮助我们扫描到他们去实现注入。&lt;/section&gt;&lt;section&gt;xml扫描包的方式&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt; &amp;lt;context:component-scan base-package=&lt;span&gt;&quot;com.company.beandemo&quot;&lt;/span&gt;/&amp;gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过注解注入的一般形式&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;一般情况下，注入Bean有一个最直白，最易懂的方式去实现注入，下面废话先不多说，先贴代码。&lt;/section&gt;&lt;section&gt;&lt;strong&gt;Bean类&lt;/strong&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyBean&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;strong&gt;Configuration类&lt;/strong&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;//创建一个class配置文件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfiguration&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt; &lt;span&gt;//将一个Bean交由Spring进行管理&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; MyBean &lt;span&gt;myBean&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; MyBean();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;strong&gt;Test类&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;与xml有一点不同，这里在Test中，实例化的不再是&lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt;，而是获取的&lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;实例。&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;ApplicationContext context = &lt;span&gt;new&lt;/span&gt; AnnotationConfigApplicationContext(MyConfiguration&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;MyBean myBean = cotext.getBean(&lt;span&gt;&quot;myBean&quot;&lt;/span&gt;,MyBean&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;System.out.println(&lt;span&gt;&quot;myBean = &quot;&lt;/span&gt; + myBean);&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;上面的代码中MyBean也就是我们需要Spring去管理的一个Bean，他只是一个简单的类。而MyConfiguration中，我们首先用&lt;code&gt;@Configuration&lt;/code&gt;注解去标记了该类，这样标明该类是一个Spring的一个配置类，在加载配置的时候会去加载他。&lt;/section&gt;&lt;section&gt;在MyConfiguration中我们可以看到有一个方法返回的是一个MyBean的实例，并且该方法上标注着&lt;code&gt;@Bean&lt;/code&gt;的注解，标明这是一个注入Bean的方法，会将下面的返回的Bean注入IOC。&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过构造方法注入Bean&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;我们在生成一个Bean实例的时候，可以使用Bean的构造方法将Bean实现注入。直接看代码&lt;/section&gt;&lt;section&gt;&lt;strong&gt;Bean类&lt;/strong&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyBeanConstructor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;private&lt;/span&gt; AnotherBean anotherBeanConstructor;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;MyBeanConstructor&lt;/span&gt;&lt;span&gt;(AnotherBean anotherBeanConstructor)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.anotherBeanConstructor = anotherBeanConstructor;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;toString&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;MyBean{&quot;&lt;/span&gt; +&lt;br/&gt;         &lt;span&gt;&quot;anotherBeanConstructor=&quot;&lt;/span&gt; + anotherBeanConstructor +&lt;br/&gt;         &lt;span&gt;&#x27;}&#x27;&lt;/span&gt;;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;strong&gt;AnotherBean类&lt;/strong&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;@Component&lt;/span&gt;(value=&lt;span&gt;&quot;Bean的id，默认为类名小驼峰&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AnotherBean&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;strong&gt;Configuration类&lt;/strong&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@ComponentScan&lt;/span&gt;(&lt;span&gt;&quot;com.company.annotationbean&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfiguration&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;这里我们可以发现，和一般方式注入的代码不一样了，我们来看看新的注解都是什么意思：&lt;/section&gt;&lt;section&gt;&lt;strong&gt;@AutoWired&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;简单粗暴，直接翻译过来的意思就是自动装配:wrench:，还不理解为什么叫自动装配:wrench:？看了下一个注解的解释你就知道了。若是在这里注入的时候指定一个Bean的id就要使用&lt;code&gt;@Qualifier&lt;/code&gt;注解&lt;/section&gt;&lt;section&gt;&lt;strong&gt;@Component（默认单例模式）&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;什么？？这翻译过来是零件，怎么感觉像是修汽车？？是的，Spring管理Bean的方法就是修汽车的方式。我们在需要将一个类变成一个Bean被Spring可以注入的时候加上注解零件&lt;code&gt;@Conmonent&lt;/code&gt;，那么我们就可以在加载Bean的时候把他像零件一样装配:wrench:到这个IOC汽车上了&lt;/section&gt;&lt;section&gt;在这里我们还有几个其他的注解也可以实现这个功能，也就是细化的&lt;code&gt;@Component&lt;/code&gt;：&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;@Controller 标注在Controller层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;@Service 标注在Service层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;@Repository 标注在dao层&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;@ComponentScan(&quot;&quot;)&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;还是翻译，零件扫描，我们去看看括号里的“零件仓库”里面，哪些“零件”（类）需要被装载，Spring就会去扫描这个包，将里面所有标注了&lt;code&gt;@Component&lt;/code&gt;的类进行注入。&lt;/section&gt;&lt;section&gt;这里的通过构造方法进行注入就很好理解了，我们在装配MyBean这个零件的时候，突然发现他必须在AnotherBean的基础上才能安装到IOC里面，那么我们就在每次装配MyBean的时候自动装配:wrench:一个AnotherBean进去。举个:chestnut:吧：&lt;/section&gt;&lt;section&gt;还是以汽车为例，我们在踩油门出发之前，是不是必须发车？？这里的AutoWired的内容就像发车，你不发车，这个油门你踩断都没有用，他都不会走。&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过set方法注入Bean&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;我们可以在一个属性的set方法中去将&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTI4MjI0MQ==&amp;amp;mid=2247503330&amp;amp;idx=2&amp;amp;sn=5eded3136515e3376400d21d86022aee&amp;amp;chksm=fc79a04ccb0e295afa749472abbe4edd9c10b3afc2734af372284f400a4dfcdd95377a621e4c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Bean实现注入&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Bean实现注入&lt;/a&gt;，看代码吧&lt;/section&gt;&lt;section&gt;&lt;strong&gt;MyBean类&lt;/strong&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyBeanSet&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;private&lt;/span&gt; AnotherBean anotherBeanSet;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setAnotherBeanSet&lt;/span&gt;&lt;span&gt;(AnotherBean anotherBeanSet)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.anotherBeanSet = anotherBeanSet;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;toString&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;MyBeanSet{&quot;&lt;/span&gt; +&lt;br/&gt;         &lt;span&gt;&quot;anotherBeanSet=&quot;&lt;/span&gt; + anotherBeanSet +&lt;br/&gt;         &lt;span&gt;&#x27;}&#x27;&lt;/span&gt;;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;strong&gt;Configuration类 和 Test类&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;同上一个，就不贴了&lt;/section&gt;&lt;section&gt;这里我们发现在setter方法上我们有一个&lt;code&gt;@AutoWired&lt;/code&gt;,与上面不同的是，我们不会在实例化该类时就自动装配:wrench:这个对象，而是在显式调用setter的时候去装配。&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过属性去注入Bean&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;我们前面两种注入的方式诸如时间不同，并且代码较多，若是通过属性，即就是&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyBeanProperty&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt; &lt;span&gt;private&lt;/span&gt; AnotherBean anotherBeanProperty;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;toString&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;MyBeanProperty{&quot;&lt;/span&gt; +&lt;br/&gt;         &lt;span&gt;&quot;anotherBeanProperty=&quot;&lt;/span&gt; + anotherBeanProperty +&lt;br/&gt;         &lt;span&gt;&#x27;}&#x27;&lt;/span&gt;;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;这里我们可以看到我们这个类中需要使用AnotherBean这个实例对象，我们可以通过@AutoWired去自动装配它。&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;对于有些小伙伴问私有属性，Spring怎么去加载它到IOC的？推荐去看看反射&lt;/section&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过List注入Bean&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;strong&gt;MyBeanList类&lt;/strong&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyBeanList&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; stringList;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setStringList&lt;/span&gt;&lt;span&gt;(List&amp;lt;String&amp;gt; stringList)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.stringList = stringList;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span&gt;getStringList&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;return&lt;/span&gt; stringList;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;strong&gt;MyConfiguration类&lt;/strong&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@ComponentScan&lt;/span&gt;(&lt;span&gt;&quot;annoBean.annotationbean&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span&gt;stringList&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;       List&amp;lt;String&amp;gt; stringList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;br/&gt;       stringList.add(&lt;span&gt;&quot;List-1&quot;&lt;/span&gt;);&lt;br/&gt;       stringList.add(&lt;span&gt;&quot;List-2&quot;&lt;/span&gt;);&lt;br/&gt;       &lt;span&gt;return&lt;/span&gt; stringList;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;这里我们将MyBeanList进行了注入，对List中的元素会逐一注入。下面介绍另一种方式注入List&lt;/section&gt;&lt;section&gt;&lt;strong&gt;MyConfiguration类&lt;/strong&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//通过该注解设定Bean注入的优先级，不一定连续数字&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Order&lt;/span&gt;(&lt;span&gt;34&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;string1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;String-1&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Order&lt;/span&gt;(&lt;span&gt;14&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;string2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;String-2&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;注入与List中&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTI4MjI0MQ==&amp;amp;mid=2247490194&amp;amp;idx=2&amp;amp;sn=9e2f72ceb10174f5c8a55592e58fdc4e&amp;amp;chksm=fc7a773ccb0dfe2a73a83e7d61de434d87994fff364f8ef062c2b765d8bb099fb6f296f5f304&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;泛型&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;泛型&lt;/a&gt;一样的类型，会自动去匹配类型，及时这里没有任何List的感觉，只是String的类型，但他会去通过List的Bean的方式去注入。&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;第二种方式的优先级高于第一种，当两个都存在的时候，若要强制去使用第一种方式，则要去指定Bean的id即可&lt;/section&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过Map去注入Bean&lt;/span&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyBeanMap&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;private&lt;/span&gt; Map&amp;lt;String,Integer&amp;gt; integerMap;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; &lt;span&gt;getIntegerMap&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;return&lt;/span&gt; integerMap;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setIntegerMap&lt;/span&gt;&lt;span&gt;(Map&amp;lt;String, Integer&amp;gt; integerMap)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.integerMap = integerMap;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String,Integer&amp;gt; &lt;span&gt;integerMap&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    Map&amp;lt;String,Integer&amp;gt; integerMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt;();&lt;br/&gt;    integerMap.put(&lt;span&gt;&quot;map-1&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;    integerMap.put(&lt;span&gt;&quot;map-2&quot;&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; integerMap;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Integer &lt;span&gt;integer1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Integer &lt;span&gt;integer2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;同样这里也具有两种方式去注入Map类型Bean，且第二种的优先值高于第一种&lt;/section&gt;&lt;section&gt;以上就是Bean通过注解注入的几种方式，大家可以对比着xml注入的方式去看。&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;逆锋起笔&lt;/code&gt;是一个专注于程序员圈子的技术平台，你可以收获&lt;code&gt;最新技术动态&lt;/code&gt;、&lt;code&gt;最新内测资格&lt;/code&gt;、&lt;code&gt;BAT等大厂大佬的经验&lt;/code&gt;、&lt;code&gt;增长自身&lt;/code&gt;、&lt;code&gt;学习资料&lt;/code&gt;、&lt;code&gt;职业路线&lt;/code&gt;、&lt;code&gt;赚钱思维&lt;/code&gt;，微信搜索&lt;code&gt;逆锋起笔&lt;/code&gt;关注！&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;往期回顾&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494316&amp;amp;idx=2&amp;amp;sn=d1a3632d6afcb2dc05882193f781eacb&amp;amp;chksm=fa3f0bf7cd4882e12ebebb7f5a987c0ab3163af5f42ba521362d9de580de8292ee3911561d8f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Spring Boot 项目瘦身指南！&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494249&amp;amp;idx=1&amp;amp;sn=ac054aed5b717dbb89b56533c05a6c59&amp;amp;chksm=fa3f0b32cd488224f928334370d69b76797648af02422a563c7f7b61d7c25f1c9dd4b6c3d2ea&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;IntelliJ IDEA 2021.2 正式发布&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494219&amp;amp;idx=2&amp;amp;sn=d1ea2805bb8e694eab775ea934884928&amp;amp;chksm=fa3f0b10cd488206c655c9d1b446c0fb12cf23741abb9ecbebb20169ff76da1b0d9733875476&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;SpringBoot 实现登录拦截器（实战版）&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494241&amp;amp;idx=2&amp;amp;sn=3e0533abc22b58e6b46e47ca8c1670d7&amp;amp;chksm=fa3f0b3acd48822cbc77de3b9611bc7c01f7b91b3d2c4fd7e9c274bdabf7d2ac72d3c3220af0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Java 框架 Mybatis 插件开发指南，超详细！&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494249&amp;amp;idx=2&amp;amp;sn=81ee5cbc880d1c4c9e263fb7c7bd918d&amp;amp;chksm=fa3f0b32cd4882249d2e5f06fb5227b0380f3dfb629bf243a1cf69b198049fc30f1b093cfa0a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Spring Boot 这样优化，让你的项目飞起来！&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.470314318975553&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hs540iaTKoaKPniafc8icFWanFqBKibEfLvQBrT33HbNI3EpPlYjcnBsCKVT0DqfOhgQ3IGOfs3X2UDqeAtnDN3GSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1718&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>