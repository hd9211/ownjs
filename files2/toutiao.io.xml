<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>d90cb3e383e697cd0f22c88b91b938fe</guid>
<title>[推荐] 快速了解云原生架构</title>
<link>https://toutiao.io/k/zz0ckz0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrTqHIqOlDKibicA2Bv16xIRInVv8PLhMlXahuLickwL8JrduCXTsRf64Hw/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;64.22145328719724&quot; data-cropy2=&quot;752.9411764705883&quot; data-ratio=&quot;0.53828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHr96ZhP9W3udxwicdmic4tR7ciaK0Xf0pJicpt6mUBBCoN3f4wBzLHUpRia4Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;9a9bd2db5cdbf17c5037d8201ec1f4e1&quot;&gt;&lt;span&gt;作者 | 潘义文（空易）&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img data-type=&quot;gif&quot; class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;起源&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;/&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 云原生（Cloud Native）的由来&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;云原生的概念最早开始于 2010 年&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=http%3A%2F%2Fpzf.fremantle.org%2F2010%2F05%2Fcloud-native.html&amp;amp;title=%E5%9C%A8%E5%BD%93%E6%97%B6%20Paul%20Fremantle%20%E7%9A%84%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E4%B8%AD%E8%A2%AB%E6%8F%90%E5%8F%8A&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;在当时 Paul Fremantle 的一篇博客中被提及&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，他一直想用一个词表达一种架构，这种架构能描述应用程序和中间件在云环境中的良好运行状态。因此他抽象出了 Cloud Native 必须包含的属性，只有满足了这些属性才能保证良好的运行状态。当时提出云原生是为了能构建一种符合云计算特性的标准来指导云计算应用的编写。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后来到&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fdzone.com%2Farticles%2Fcloud-native-devops-your-world-to-new-possibilitie&amp;amp;title=2013%20%E5%B9%B4%20Matt%20Stine%20%E5%9C%A8%E6%8E%A8%E7%89%B9%E4%B8%8A%E8%BF%85%E9%80%9F%E6%8E%A8%E5%B9%BF%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A6%82%E5%BF%B5&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;2013 年 Matt Stine 在推特上迅速推广云原生概念&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，并&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fwww.oreilly.com%2Flibrary%2Fview%2Fmigrating-to-cloud-native%2F9781492047605%2F&amp;amp;title=%E5%9C%A8%202015%20%E5%B9%B4%E3%80%8A%E8%BF%81%E7%A7%BB%E5%88%B0%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84%E3%80%8B&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;在 2015 年《迁移到云原生架构》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;一书中定义了符合云原生架构的特征：&lt;strong&gt;12 因素、微服务、自服务、基于 API 协作、扛脆弱性&lt;/strong&gt;。而由于这本书的推广畅销，这也成了很多人对云原生的早期印象，同时云原生也被 12 要素变成了一个抽象的概念。Matt Stine 认为在单体架构向 Cloud Native 迁移的过程中，需要文化、组织、技术共同变革。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;解读&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;云原生架构本质上也是一种软件架构，最大的特点是在云环境下运行，也算是微服务的一种延伸&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;/&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. CNCF 基金会成立及云原生概念的演化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2015 年由 Linux 基金会发起了一个&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fwww.cncf.io%2F&amp;amp;title=The%20Cloud%20Native%20Computing%20Foundation%EF%BC%88CNCF%EF%BC%89%20%E5%9F%BA%E9%87%91%E7%BB%84%E7%BB%87&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;The Cloud Native Computing Foundation（CNCF） 基金组织&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，CNCF基金会的成立标志着云原生正式进入高速发展轨道，&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fwww.cncf.io%2Fannouncement%2F2015%2F12%2F17%2Fcloud-native-computing-foundation-announces-new-members-begins-accepting-technical-contributions%2F&amp;amp;title=google%E3%80%81Cisco%E3%80%81Docker%20%E5%90%84%E5%A4%A7%E5%8E%82%E7%BA%B7%E7%BA%B7%E5%8A%A0%E5%85%A5&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;Google、Cisco、Docker 各大厂纷纷加入&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，并逐步构建出围绕 Cloud Native 的具体工具，而云原生这个的概念也逐渐变得更具体化。因此，CNCF 基金最初对云原生定义是也是深窄的，当时把云原生定位为容器化封装+自动化管理+面向微服务：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The CNCF defines “cloud-native” a little more narrowly, to mean using open source software stack to be containerized, where each part of the app is packaged in its own container, dynamically orchestrated so each part is actively scheduled and managed to optimize resource utilization, and microservices-oriented to increase the overall agility and maintainability of applications.&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这主要因为 CNCF 基金会在当时的核心拳头软件就是 K8s，因此在概念定义上主要是围绕着容器编排建立起来的生态。其实这也是为什么我们可以看到 CNCF 定义云原生的时候有时感觉就是再说容器生态。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;到了 2017 年, 云原生应用提出者之一的&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fpivotal.io%2Fcloud-native&amp;amp;title=Pivotal%20%E5%9C%A8%E5%85%B6%E5%AE%98%E7%BD%91&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;Pivotal 在其官网&lt;/span&gt;&lt;/a&gt;&lt;span&gt;上将云原生的定义概括为 DevOps、持续交付、微服务、容器四大特征，这也成了很多人对 Cloud Native 的基础印象。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.35202492211838005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHreaXcAVicnVfn38TSu7IulAUjiax2ib9hhnc9plZq42kibca4xhbBF3f5ibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;642&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;而到 2018 年，随着 Service Mesh 的加入，&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fgithub.com%2Fcncf%2Ftoc%2Fblob%2Fmaster%2FDEFINITION.md&amp;amp;title=CNCF%20%E5%AF%B9%E4%BA%91%E5%8E%9F%E7%94%9F%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%91%E7%94%9F%E4%BA%86%E6%94%B9%E5%8F%98&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;CNCF 对云原生的定义发生了改变&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，而这也逐渐成为被大家认可的官方定义：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;The Cloud Native Computing Foundation seeks to drive adoption of this paradigm by fostering and sustaining an ecosystem of open source, vendor-neutral projects. We democratize state-of-the-art patterns to make these innovations accessible for everyone.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;总结一下就是：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于容器、服务网格、微服务、不可变基础设施和声明式 API 构建的可弹性扩展的应用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于自动化技术构建具备高容错性、易管理和便于观察的松耦合系统。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;构建一个统一的开源云技术生态，能和云厂商提供的服务解耦。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看出，CNCF 在当前定义基础上加上了&lt;strong&gt;服务网格 (service mesh) &lt;/strong&gt;和&lt;strong&gt;声明式 API&lt;/strong&gt;，这为云原生的概念阐述增加了更深一层的意义，也就是建立一个&lt;strong&gt;相对&lt;/strong&gt;&lt;strong&gt;中立的开源云生态&lt;/strong&gt;。这对云原生的生态定位是很重要的，也算 CNCF 最初成立的宗旨之一，打破云巨头的垄断。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5624249699879952&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHr2yk1c2T8iavABjUpQhDlMmmjCmabjssIic5Ev4G8Xp384URfjlM151Zg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;解读&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：概念随着新的技术发展而演化&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;77ac8027e509f1d5c1e3c84284749874&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一阶段：容器化封装+自动化管理+面向微服务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二阶段：DevOps、持续交付、微服务、容器&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第三阶段：DevOps、持续交付、容器、服务网格、微服务、声明式API&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 对云原生的解构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对一个词的解读，除了看其历史发展背景，还有一种偏向于语言学的方法解读，也就是我们常说的从“字面意思”来理解。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Cloud Native，从词面上拆解其实就是 Cloud 和 Native，也就是云计算和土著的意思——云计算上的原生居民，即天生具备云计算的亲和力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先从 Cloud 来理解，云可以看作是一种提供稳定计算存储资源的对象。为了实现这一点，云提供了像&lt;strong&gt;虚拟化、弹性扩展、高可用、高容错性、自恢复&lt;/strong&gt;等基本属性，这是云原生作为一种云计算所具备的第一层含义。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二层要从 Native 来看，云原生和在云上跑的&lt;span&gt;传统&lt;/span&gt;应用不同。一些基于公有云搭建的应用是基于传统的 SOA 架构来搭建的，然后再移植到云上去运行，那么这些应用和云的整合非常低。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为什么低呢？云作为一种&lt;strong&gt;分布式架构&lt;/strong&gt;，其“土著居民”也应该是基于分布式架构设计出来的，而微服务或 Serverless 这种将服务或函数拆分成一个个模块的松耦合系统，天然具备分布式设计的属性。这是 Native 的第一种表现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其次云作为一种 PaaS 服务，这位“土著居民”从出生(设计)到成长(开发)，再到生活(部署)都应该是基于云的理念来实现的，那么就需要一套自动化的开发流程 CI/CD 来实现。这是 Native 的第二种表现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而最后“土著居民”的特点希望做到能够适应所有云端，都能做到无缝的运行和连接。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;解读&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;strong&gt;前面三节都是来自《&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fblog.csdn.net%2Falitech2017%2Farticle%2Fdetails%2F104606956&amp;amp;title=%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%91%E5%8E%9F%E7%94%9F%EF%BC%9F%E8%81%8A%E8%81%8A%E4%BA%91%E5%8E%9F%E7%94%9F%E7%9A%84%E4%BB%8A%E7%94%9F&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;strong&gt;&lt;span&gt;什么是云原生？聊聊云原生的今生&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;span&gt;》这篇文章中&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img data-type=&quot;gif&quot; class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;关键点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;下面介绍云原生架构的一些关键技术点。涉及内容由微服务、分布式常见架构设计(性能、数据一致性、可扩展性、高可用)、研发流程、DevOps、组织文化等，可以根据目录选择性的看看，基本上都是一些介绍，详细的设计可以查看相关文档进一步了解。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 微服务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Martin Fowler 与 James Lewis 共同提出了微服务的概念，定义了微服务架构是以开发一组小型服务的方式来开发一个独立的应用系统，每个服务都以一个独立进程的方式运行，每个服务与其他服务使用轻量级（通常是 HTTP API）通信机制。这些服务是围绕业务功能构建的，可以通过全自动部署机制独立部署，同时服务会使用最小规模的集中管理（例如 Docker）能力，也可以采用不同的编程语言和数据库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）优势&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）什么时候开始微服务架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）如何决定微服务架构的拆分粒度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;微服务架构中的“微”字，并不代表足够小，应该解释为合适。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）单体架构 VS 微服务架构对比&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.3979974968710889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrGlfwAlqd83eMwFKjoFfEjFbvGYG9upIB2YcTPljQnHQrWZNIuoNIibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1598&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;流行的微服务框架：spring-cloud/dubbo。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 敏捷基础设施及公共基础服务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;敏捷基础设施及公共基础服务是微服务架构成败的关键因素之一，能够简化业务开发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）敏捷基础设施的目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;cb26dabfc8ecd717f52290758b62cf51&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;标准化：所有的基础设施最好都是标准的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可替换：任意节点都能够被轻易地创建、销毁、替换。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自动化：所有的操作都通过工具自动化完成，无须人工干预。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可视化：当前环境要做到可控，就需要对当前的环境状况可视。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可追溯：所有的配置统一作为代码进行版本化管理，所有的操作都可以追溯。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;快速：资源申请及释放要求秒级完成，以适应弹性伸缩和故障切换的要求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）基于公共基础服务的平台化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）常见的平台服务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;6be6f23ec3a54ea7d27ef4256498a8fc&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;监控告警服务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分布式消息中间件服务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分布式缓存服务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分布式任务调度服务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 分布式架构 - 可用性设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;可用性（Availability）是关于系统可以被使用的时间的描述，以丢失的时间为驱动（Be Driven by Lost Time）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可用性公式：A=Uptime /（Uptime+Downtime）。其中，Uptime 是可用时间，Downtime 是不可用时间。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）什么降低了可用性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）设计阶段考虑如下几个比较重要的方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;59aaf0d321d9d07f239d76133fadb010&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;20/10/5，设计系统的时候，以实际流量的 20 倍来设计；开发系统的时候，以实际流量的 10 倍来开发系统；发布系统的时候，以实际流量的 5 倍来部署。这只是一个通用的原则，可以根据实际情况来确定，不需要严格按照倍数来执行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Design for failure，预测可能发生的问题，做好预案。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）容错设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果说错误是不可避免或者难以避免的，那么我们应该换一个思路，保证错误发生时，我们可以从容应对。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）隔离策略&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;隔离是为了在系统发生故障时，限制传播范围和影响范围，特别要注意非核心系统的故障对核心系统的影响。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;9fffe5a38295dec2fdb0ba2f2247624a&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;线程池隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;进程隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;租户隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;逻辑隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;物理隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;混合隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5）熔断器&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;熔断器模式（Circuit Breaker Patten）的原理类似于家里的电路熔断器的原理。当发生短路或者超负荷时，熔断器能够主动熔断电路，以避免灾难发生。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Spring Cloud Hystrix 提供了熔断器、线程隔离等一系列服务保护的能力，使用起来非常简单，引入依赖的 JAR 包，通过简单的注解即可实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6）流控设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;ba88670b855919ad11af3d64b42a2932&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;限流算法。&lt;/span&gt;限流也就是调节数据流的平均速率，通过限制速率保护自己，常见的算法有：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt; 固定窗口算法（fixed window）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt; 漏桶算法（Leaky Bucket）：漏桶算法主要目的是控制数据注入网络的速率，平滑网络上的突发流量。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;令牌桶算法（token bucket）：令牌桶控制的是一个时间窗口内通过的数据量，通常我们会以 QPS、TPS 来衡量。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;   &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;7）容量预估&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;互联网公司普遍采用全链路压测的方式，来进一步预估容量。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;8）故障演练&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;5ce4e5ae07e08142caac9d0eda367eb0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;随机关闭生产环境中的实例。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;让某台机器的请求或返回变慢，观察系统的表现，可以用来测试上游服务是否有服务降级能力，当然如果响应时间特别长，也就相当于服务不可用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;模拟 AZ 故障，中断一个机房，验证是否跨可用区部署，业务容灾和恢复的能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;查找不符合最佳实践的实例，并将其关闭。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;9）数据迁移&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 分布式架构 - 可扩展设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;f293a8c13a5c02ceef465a50c254c144&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;水平扩展，指用更多的节点支撑更大量的请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;横向扩展通常是为了提升吞吐量，响应时间一般要求不受吞吐量影响即可。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-lake-id=&quot;94dbb33d171e9ba294d75df3fc266dbe&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）AKF 扩展立方体&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7142857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrwibnPUAjGb9fHOemGibG0G8krmoPCxiaibQ1etaUBqd7klQ1HF2Ehlmxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;665&quot; title=&quot;akf.png&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5418552036199095&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrgGYnlpB69qFEVXOicfKLuF3Klzjg2lgJMSLmN4ydEFWx8MzR6ef5TKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;884&quot; title=&quot;akf22.png&quot;/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;28612bfa072b3f0e736f0dfba8b6266a&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）如何扩展数据库&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;95c5ee49fcd11d567408bd67e6741679&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;X 轴扩展——主从复制集群&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Y 轴扩展——分库、垂直分表&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Z 轴扩展——分片（sharding）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-lake-id=&quot;455f113d7a11ff9dc217bf37fb515307&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5. 分布式架构 - 性能设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;0c822591e9fec1a32587bd1b593c7e13&quot;&gt;&lt;span&gt;性能指标&lt;/span&gt;&lt;/h4&gt;&lt;ul data-lake-id=&quot;f3b294c889e0765647913f63a9df0af4&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;响应时间（Latency），就是发送请求和返回结果的耗时。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;吞吐量（Throughput），就是单位时间内的响应次数。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;负载敏感度，是指响应时间随时间变化的程度。例如，当用户增加时，系统响应时间的衰减速度。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可伸缩性，是指向系统增加资源对性能的影响。例如，要使吞吐量增加一倍，需要增加多少服务器。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）如何树立目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4046997389033943&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrGBFp3mXVcuURFDlt9DiaVgOqaqvlY6hic8JMwcFmmFH32dkXXLXHGmNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1532&quot; title=&quot;image.png&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6. 分布式架构 - 一致性设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）事务的四大特征&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;36b035885fecdba8c20cfb621c86f4bf&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;原子性（Atomicity）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一致性（Consistency）是指通过事务保证数据从一种状态变化到另一种状态。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;隔离性（Isolation）是指事务内的操作不受其他操作影响，当多个事务同时处理同一个数据的时候，多个事务之间是互不影响的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;持久性（Durability）是指事务被提交后，应该持久化，永久保存下来。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）CPA 定理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;该定理认为对于一个分布式计算系统来说，不可能同时满足以下三点：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;c988abce13a328b653862a08064787a5&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一致性（Consistence）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可用性（Availability）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分区容错性（Partition tolerance）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分布式意味着必须满足分区容错性，也就是 P，因此一般只能是 AP 或 CP。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）BASE 理论&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;BASE 理论的核心思想是：如果无法做到强一致性，或者做到强一致性要付出很大的代价，那么应用可以根据自身业务特点，采用适当方式来使系统达到最终一致性，&lt;/span&gt;&lt;span&gt;只要对最终用户没有影响，或者影响是可接受的即可。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;74c7739a1267dbd82eb0b9c6e47ce307&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;BA:Basically Available，基本可用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;S:Soft state，软状态。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;E:Eventually consistent，最终一致。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）Quorum 机制（NWR 模型）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果多个服务分别向三个节点写数据，为了保证强一致，就必须要求三个节点全部写成功才返回；同步写三个节点的性能较低，如果换一个思路，一致性并不一定要在写数据的时候完成，可以在读的阶段再决策，只要每次能读到最新版本即可。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Quorum 机制就是要满足公式 W+R&amp;gt;N，式中 N 代表备份个数，W 代表要写入至少 W 份才认为成功，R 表示至少读取 R 个备份。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5）租约机制（Lease）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果现在我们有三个节点，为了实现一致性，要确保有且只有一个是 Leader，另外两个为 Follower，只有 Leader 是可写的，Follower 只能读。管理节点 M 通过心跳判断各个节点的状态，用 M 去指定 Leader，一旦 Leader 死掉，就可以重新指定一个 Leader。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6）脑裂问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;cb8dfb038f41c69891a9adaec6bebe16&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一种是采用投票机制（Paxos 算法）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一种是采用租约机制——Lease，租约机制的核心就是在一定时间内将权力下放。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;7）分布式系统的一致性分类&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;903ec50e6e760cf0928833b3f1659f85&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;建立多个副本。可以把副本放到不同的物理机、机架、机房、地域，当一个副本失效时，可以让请求转到其他副本。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对数据进行分区。复制多个副本解决了读的性能问题，但是无法解决写的性能问题。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;8）以数据为中心的一致性模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;从数据存储的角度出发的，包括数据库、文件等。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;f6c0fa8da2fb625fd4f7af4932335577&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;严格一致性（Strict Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;顺序一致性（Sequential Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;因果一致性（Causal Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;9）以用户为中心的一致性模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;以下一致性模型适应的场景为不会同时发生更新操作，或者同时发生更新操作时能够比较容易地化解。因为这里的数据更新默认有一个与之关联的所有者，此所有者拥有唯一被允许修改数据的权限，可以按照用户 ID 进行路由。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;76b352997219e3bd29433f3a3460d5f0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单调读一致性（Monotonic-read Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单调写一致性（Monotonic-write Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;写后读一致性（Read-your-writes Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;读后写一致性（Writes-follow-reads Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;10）业界常用的一致性模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;d6efaa1467083f63cf45f1ff611c85e9&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;弱一致性：写入一个数据 a 成功后，在数据副本上可能读出来，也可能读不出来。不能保证每个副本的数据一定是一致的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;最终一致性（Eventual Consistency）：写入一个数据 a 成功后，在其他副本有可能读不到 a 的最新值，但在某个时间窗口之后保证最终能读到。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;强一致性（Strong Consistency）：数据 a 一旦写入成功，在任意副本任意时刻都能读到 a 的最新值。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;11）如何实现强一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;e162c95c2e3b92323df5a1d7bb72656f&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;12）如何实现最终一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;f118fb80a546d767728a8bd6e4f43ac6&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;重试机制：超时时间，重试的次数，重试的间隔时间，重试间隔时间的衰减度。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;本地记录日志。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可靠事件模式。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Saga 事务模型：又叫 Long-running-transaction，核心思想是把一个长事务拆分为多个本地事务来实现，由一个 Process manager 统一协调。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TCC 事务模型：两阶段提交是依赖于数据库提供的事务机制，再配合外部的资源协调器来实现分布式事务。TCC（Try Confirm Cancel）事务模型的思想和两阶段提交虽然类似，但是却把相关的操作从数据库提到业务中，以此降低数据库的压力，并且不需要加锁，性能也得到了提升。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;7. 十二因素&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;12 因素应用是一系列云原生应用架构的模式集合。这些模式可以用来说明什么样的应用才是云原生应用，关注速度、安全、通过声明式配置扩展、可横向扩展的无状态/无共享进程以及部署环境的整体松耦合。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 12 因素的背景下，应用指的是独立可部署单元。组织中经常把一些互相协作的可部署单元称作一个应用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;42143ee4d9321bc3d182a067a9c468d7&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基准代码，一份基准代码，多份部署，使用 GIT 或者 SVN 管理代码，并且有明确的版本信息。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;依赖，显示声明依赖。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;配置：环境中存储配置。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;后端服务：把后端服务当作附加资源。后端服务是指程序运行所需要的通过网络调用的各种服务，如数据库（MySQL、CouchDB）、消息/队列系统（RabbitMQ、Beanstalkd）、SMTP 邮件发送服务（Postfix），以及缓存系统（Memcached）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;构建、发布、运行：严格分离构建和运行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;进程，以一个或多个无状态进程运行应用，如果存在状态，应该将状态外置到后端服务中，例如数据库、缓存等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;端口绑定，通过端口绑定提供服务，应用通过端口绑定来提供服务，并监听发送至该端口的请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;并发，通过进程模型进行扩展，扩展方式有进程和线程两种。进程的方式使扩展性更好，架构更简单，隔离性更好。线程扩展使编程更复杂，但是更节省资源。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;易处理，快速启动和优雅终止可最大化健壮性，只有满足快速启动和优雅终止，才能使服务更健壮。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;开发环境与线上环境等价，尽可能保持开发、预发布、线上环境相同。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;日志，把日志当作事件流，微服务架构中服务数量的爆发需要具备调用链分析能力，快速定位故障。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;管理进程，把后台管理任务当作一次性进程运行，一些工具类在生产环境上的操作可能是一次性的，因此最好把它们放在生产环境中执行，而不是本地。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;8. 研发流程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）为什么选择 DevOps&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;能提高交付速度、更新频率，这两点是衡量一个公司能力的重要指标。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5567129629629629&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHr3IOY2yejM8GROukTM8pMthicQlmYRKSJUVvuM7lWEyRqrx7WX59H9Cg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）Gartner 提出的 DevOps 模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;文化、技术、过程和人，其中团队文化才是最难改变的，技术方面包括基础设施即代码、全局监控、持续监控。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）自动化测试&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;b51f667fd14b5cee3d0ce6a8d59770dd&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自动化测试可以代替人工测试。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;测试成了全栈工程师的工作，因为不沟通才是最有效率的沟通。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）Code Review&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;51b08eb48f26e0dfedd3dce0aa1c51bb&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提升代码易读性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;统一规范、标准。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;技术交流，提升能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Code Review 原则：以发现问题为目标，团队开放、透明，整个 Code Review 的过程对事不对人，不设置惩罚。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;线上线下接合的方式，长期线上，定期线下。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5）流水线&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;持续交付：降低交付周期，通过自动化工具实现设计、开发、测试、发布、运维各个阶段的重复性工作，通过工具实现标准化、规范化，降低出错概率。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;53bdb22945cc08b1834eb4978b03b801&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6）开发人员自服务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于开发过程来说，少交流、少沟通、少开会就是最高效的。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;045835e6f3bb29994548f7adac97d62e&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;高覆盖率的自动化测试&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全面的监控&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;持续交付流水线&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;敏捷基础设施&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自动化/智能化运维&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;好的架构&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全栈工程师&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务型管理&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;工程师文化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;信任文化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分享文化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;7）代码即设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;9. 团队文化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;团队文化就好比土壤，要培养什么样的员工，就要有适合他的土壤。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）团队规模导致的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;208485f2f8caba34193343522cacfdf6&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缺乏信任。由于人数众多，难于管理，只能通过制度、流程、规范、绩效约束。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;没有责任感。高层管理者忙着开各种决策会议。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;部门墙。跨部门协调还不如与第三方合作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不尊重专业人士。当所有的生杀大权都掌握在少数人手中的时候。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;管理层级太深。管理层级太深导致的问题很多。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）组织结构 - 康威定律&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;设计系统的组织，其产生的设计和架构等价于组织间的沟通结构。通俗来讲，就是什么样的团队结构，就会设计出什么样的系统架构。如果将团队拆分为前端、后端、平台、数据库，那么系统也会按照前端、后端、平台、数据库结构隔离。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;4c2c2a3f5df182f10dd1388db78b52c2&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第一定律&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Communication dictates design，即组织沟通方式会通过系统设计呈现。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第二定律&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：There is never enough time to do something right,but there is always enough time to do it over，即时间再多，一件事情也不可能做得完美，但总有时间做完一件事情。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第三定律&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：There is a homomorphism from the linear graph of a system to the linear graph of its design organization，即线型系统和线型组织架构间有潜在的异质同态特性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第四定律&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：The structures of large systems tend to disintegrate during development,qualitatively more so than with small systems，即大的系统组织总是比小系统更倾向于分解。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）“沟通漏斗”是指工作中团队沟通效率下降的一种现象&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果一个人心里想表述事项目标的 100%，当你在众人面前、在开会的场合用语言表达时，你说出来的只剩下 80%。而进入别人的耳朵时，由于文化水平、知识背景等关系，只留存了 60%。实际上，真正被别人理解了大概只有 40%。等到这些人遵照领悟的 40% 具体行动时，只具备了当初事项目标的 20% 了。三个月后信息只剩下 5% 了。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6178107606679035&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrzL7j8mbPzn1BgicoCibDpiansnJ8nicjE6USD7XIdtQ4zII3SF1EOrt0iaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;539&quot; title=&quot;沟通漏洞模型.png&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）环境氛围&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;ccba9527e86b595a78b5c33f5d5634e0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;公开透明的工作环境.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;学习型组织：让团队拥有共同愿景、目标，并持续学习。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;减少无效的正式汇报。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;高效的会议：缩小会议范围，常规会议不应该超过 45 分钟；限制“意见领袖”的发言时长；会议中不允许开小差；会议中的分歧不应该延伸到会议之外。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;10. Serverless&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;随着以 Kubernetes 为代表的云原生技术成为云计算的容器界面，Kubernetes 成为云计算的新一代操作系统。面向特定领域的后端云服务 (BaaS) 则是这个操作系统上的服务 API，存储、数据库、中间件、大数据、 AI 等领域的大量产品与技术都开始提供全托管的云形态服务，如今越来越多用户已习惯使用云服务，而不是自己搭建存储系统、部署数据库软件。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当这些 BaaS 云服务日趋完善时，Serverless 因为屏蔽了底层设施的运维复杂度，让开发人员可以将更多精力用于业务逻辑设计与实现，而逐渐成为云原生主流技术之一。Serverless 计算包含以下特征：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;dcd514bfa3da01db0efffd44f192c972&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全托管的计算服务，客户只需要编写代码构建应用，无需关注同质化的、负担繁重的基础设施开发、运维、安全、高可用等工作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通用性，结合云 BaaS API 的能力，能够支撑云上所有重要类型的应用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自动的弹性伸缩，让用户无需为资源使用提前进行容量规划。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;按量计费，让企业使用成本得有效降低，无需为闲置资源付费。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;函数计算 (Function as a Service) 是 Serverless 中最具代表性的产品形态。通过把应用逻辑拆分多个函数，每个函数都通过事件驱动方式触发执行，例如当对象存储 (OSS) 中产生的上传 / 删除对象等事件， 能够自动、可靠地触发 FaaS 函数处理且每个环节都是弹性和高可用的，客户能够快速实现大规模数据的实时并行处理。同样的，通过消息中间件和函数计算的集成，客户可以快速实现大规模消息的实时处理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;2e566cd890be5139497cdaf3a9aea968&quot;&gt;&lt;strong&gt;&lt;span&gt;Serverless 不足的地方&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;5e1a5c8ebbc42085e1cc3e776f449b99&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;成功案例太少&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;很难满足个性化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缺乏行业标准&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;初次访问性能差&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缺乏开发调试工具&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;11. Service Mesh 技术&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Service Mesh 是分布式应用在微服务软件架构之上发展起来的新技术，旨在将那些微服务间的连接、安全、流量控制和可观测等通用功能下沉为平台基础设施，实现应用与平台基础设施的解耦。这个解耦意味着开发者无需关注 微服务相关治理问题而聚焦于业务逻辑本身，提升应用开发效率并加速业务探索和创新。换句话说，因为大量非功能性从业务进程剥离到另外进程中，Service Mesh 以无侵入的方式实现了应用轻量化，下图展示了 Service Mesh 的 典型架构：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6107226107226107&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrzR4UfyMt7tZerhyd3icrqWPibvVMKNCuzicBhtRzWLJtKV8ATHfdS7QFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1716&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这张架构图中，Service A 调用 Service B 的所有请求，都被其下的 Proxy(在 Envoy 中是 Sidecar) 截获， 代理 Service A 完成到 Service B 的服务发现、熔断、限流等策略，而这些策略的总控是在 Control Plane 上配置。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;服务网格的技术发展上数据平面与控制平面间的协议标准化是必然趋势。控制平面可以认为是注册中心及管理配置面板；数据平面可以认为是由服务化框架依赖的组件独立而成的一个进程，数据平面代理业务服务的注册发现、负载均衡、容错等能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为什么需要 Service Mesh：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;aaa041fe47087da2d99b835ce27f5dbe&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在微服务架构中，让开发人员感觉不到微服务之间的通信。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当服务数量越来越多，升级微服务框架变得越来越复杂的时候，微服务框架不可能一直不变且没有 bug。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Service Mesh 则从业务进程集成客户端的方式演进为独立进程的方式，客户端变成了一个独立进程。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对这个独立进程升级、运维要比绑在一起强得多。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;微服务架构更强调去中心化、独立自治、跨语言。Service Mesh 通过独立进程的方式进行隔离，低成本实现跨语言。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个服务独立占用一个容器，将服务、依赖包、操作系统、监控运维所需的代理打包成一个镜像。这种模式促成了 Service Mesh 的发展，让 Service Mesh 实现起来更容易。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;12. 云原生架构成熟度模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;由于云原生架构包含了 6 个关键架构维度(简写为 SESORA，Service + Elasticity + Serverless + &lt;/span&gt;&lt;span&gt;Observability + Resilience + Automation)，因此我们先定义关键维度的成熟度级别：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5498199279711885&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHroonu3bH4I0JeNvBiaPXKuT5CYamu5iavFUMVOA726svvrVcnBn6MjStQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.32232893157262904&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrmzRfiacthJmp2yXCJbcJ0ZDvjziahQr4xjkpiaTBdeEd9FJ7ms9OejOhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img data-type=&quot;gif&quot; class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;现状&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;容器的标准化使用改变了软件开发方式，基于云原生的开发能够帮助我们构建更灵活、更强大的应用。近日，CNCF（云原生计算基金会）就发布了云原生开发现状的报告解读。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该报告通过对 17,000 多位软件开发人员的调查数据，对云原生开发深入分析，希望能够帮助大家更好地掌握云原生开发生态系统的当前状况。其要点包括：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;927f51ab3af6786779d460f43d87ea43&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全球云原生开发人员超过 470 万。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 Kubernetes 的开发人员超过 170 万。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 Serverless 架构及云函数的开发人员超过 330 万。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Kubernetes 用户更有可能影响购买决策。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 市场规模&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;据估计，全球云原生开发人员数量超过 470 万，占后端开发的 36%。其中包括 290 万使用编排的用户，以及 330 万使用云函数或 Serverless 架构的开发人员。二者分别占据了后端开发的 22% 和 25%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该估算数据还考虑了 150 万同时使用编排和 Serverless 技术的开发人员。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 各个国家及地区的情况&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;全球范围内云原生技术的使用差异很大。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;总的来说，欧洲和北美的容器使用率远超亚洲。容器的使用已在东欧得到普及，54% 的后端开发人员使用容器。北美和西欧等发达地区的使用率也很高。在北美、西欧和以色列，一半后端开发人员都使用了容器。同时在三个地区内，25%-26% 的后端开发人员采用编排技术来管理这些容器。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大洋洲地区云原生技术的使用情况非常独特。尽管容器的使用在该地区并没有其他地区那么普遍，但与全球其他地区相比，Serverless 以及容器编排等技术在大洋洲的普及率最高。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;亚洲、中东和非洲地区的开发人员采用容器和云原生技术的速度较慢。中国的各大公司在向云的迁移方面一直滞后，并且云原生技术的使用也呈现同样的趋势。随着阿里巴巴的 CaaS 获得市场的青睐，相信将来东亚地区会涌现更多云原生开发人员。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 云原生开发人员掌握多种基础架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;云原生开发的灵活性让各个组织更灵活地操作分布式基础架构，并按需合理分配工作资源。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;与未参与云原生的开发人员相比，云原生开发人员掌握的计算基础架构确实更多。这些开发人员更加愿意在私有云、公共云、混合云和本地服务器等四种环境中运行代码，且平均使用了1.8种环境，而未参与云原生开发人员的平均值为1.5。数据显示，270万云原生开发人员（58%）在公共云上运行后端代码，220万开发人员（47%）选择了私有云，选择本地服务器的开发人员为220万（47%），而选择混合云的开发人员为170万（ 36%）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;无论是云原生开发人员还是传统开发人员，选择在本地服务器上运行代码的比例都相同。这表明，尽管云原生开发人员已经掌握了云的灵活性，但他们并未放弃本地服务器。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 云的使用在各个行业各不相同&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;虽然开发人员采用了云原生开发策略，但运行这些软件的计算资源在各个行业往往各不相同。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如，与本地服务器或私有云相比，软件公司更倾向于在公共云中运行代码。在软件公司工作的云原生开发人员中，近三分之二在公共云中运行代码，同时该行业一半的开发人员在私有云上运行代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据分析、商业智能以及硬件领域的开发人员更倾向于在公共云上运行软件。与其他行业的平均水平相比，这些行业中的云原生开发人员在公共云中运行代码的概率高 7%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在涉及敏感数据的行业工作的云原生开发人员更倾向于在本地服务器或私有云上运行代码。与其他行业相比，金融服务领域的云原生开发人员在本地服务器上运行代码的比例高 12%，而医疗保健领域的开发人员的比例高 8%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;他们希望通过本地计算，更好地控制敏感数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;市场营销、娱乐和房地产领域的云原生开发人员不太可能在本地服务器上运行代码。这些行业的重点是内容，因此需要轻松快速地访问。可访问性和性能对这些领域的成功至关重要，而本地服务器可能无法满足这些要求。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，电信和政府/国防领域的云原生开发人员使用私有云、公共云和本地服务器的比例大致相同。这些开发人员使用公共云的比例相对较低。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img data-type=&quot;gif&quot; class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;未来&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;“未来的软件一定是生长于云上的”&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，这是云原生理念的最核心假设。 &lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 容器技术发展趋势&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.3907563025210084&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrd7tY85nxa2wez8iahQIxiaiaczWtlwJux3qicmw3v82Ejw2qOXZCaibibPaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）趋势一：无处不在的计算催生新一代容器实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;随着互联网的发展到万物智联，5G、AIoT 等新技术的涌现，随处可见的计算需求已经成为现实。针对不同计算场景，容器运行时会有不同需求。KataContainer、Firecracker、gVisor、Unikernel 等新的容器运行时技术层出不穷，分别解决安全隔离性、执行效率和通用性三个不同维度要求。OCI(Open Container Initiative)标准的出现， 使不同技术采用一致的方式进行容器生命周期管理，进一步促进了容器引擎技术的持续创新。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）趋势二：云原生操作系统开始浮现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Kubernetes 已经成为云时代的操作系统。对比 Linux 与 Kubernetes 概念模型，两者都定义了开放的、&lt;/span&gt;&lt;span&gt;标准化的访问接口：向下封装资源，向上支撑应用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4963985594237695&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHr9ydh0eoE3qLeqgbrALiaxwPVt1OFTcGdLQ1hdjNsxXxoGF8F0X8xHvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;它们都提供了对底层计算、存储、网络、异构计算设备的资源抽象和安全访问模型，可以根据应用需求进行资源调度和编排。Linux 的计算调度单元是进程，调度范围限制在一台计算节点。而 Kubernetes 调度单位是 Pod， 可以在分布式集群中进行资源调度，甚至跨越不同云环境。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.3985594237695078&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrtBXlKib97sm1pSks4d7kOwTNQDraibxkmp8bJfAyd7Y8HASTs9Q44P2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;过往 Kubernetes 上主要运行着无状态的 Web 应用。随着技术演进和社区发展，越来越多有状态应用和大数据 / AI 应用负载逐渐迁移到 Kubernetes 上。Flink、Spark 等开源社区以及 Cloudera、Databricks 等商业公司都 开始加大对 Kubernetes 的支持力度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;统一技术栈提升资源利用率：多种计算负载在 Kubernetes 集群统一调度，可以有效提升资源利用率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;统一技能栈降低人力成本：Kubernetes 可以在 IDC、云端、边缘等不同场景进行统一部署和交付。云原生提 倡的 DevOps 文化和工具集可以有效提升技术迭代速度并降低人力成本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;加速数据服务的云原生化：由于计算存储分离具备巨大的灵活性和成本优势，数据服务的云原生化也逐渐成为 趋势。容器和 Serverless 的弹性可以简化对计算任务的容量规划。结合分布式缓存加速(比如 Alluxio 或阿里云 Jindofs)和调度优化，大大提升数据计算类和 AI 任务的计算效率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）趋势三：Serverless 容器技术逐渐成为市场主流&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Serverless 和容器技术也开始融合得到了快速的发展。通过 Serverless 容器，一方面根本性解决 Kubernetes 自身复杂性问题，让用户无需受困于 Kubernetes 集群容量规划、安全维护、故障诊断等运维工作; 一方面进一步释放云计算能力，将安全、可用性、可伸缩性等需求下沉到基础设施实现。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）趋势四：动态、混合、分布式的云环境将成为新常态&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上云已是大势所趋，但对于企业而言，有些业务出于对数据主权、安全隐私的考量，会采用混合云架构。一些企业为了满足安全合规、成本优化、提升地域覆盖性和避免云厂商锁定等需求，会选择多个云厂商。混合云 / 多云架构已成为企业上云新常态。Gartner 指出“到 2021，超过 75% 的大中型组织将采用多云或者混合 IT 战略。”&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 基于云原生的新一代应用编程界面&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Kubenetes 已经成为了云原生的操作系统，而容器成为了操作系统调度的基本单元，同时定义了应用交付的标准。但对于开发者来说，这些还远没有深入到应用的架构，改变应用的编程界面。但是这种变革已经在悄然发生了，而且有不断加速之势。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;7f7cec827e1b7f762e25ebc75b55e10e&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Sidecar 架构彻底改变了应用的运维架构&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。由于 Sidecar 架构支持在运行时隔离应用容器与其他容器，因此 原本在虚拟机时代和业务进程部署在一起的大量运维及管控工具都被剥离到独立的容器里进行统一管理。对于应用来说，仅仅是按需声明使用运维能力，能力实现成为云平台的职责。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;7f7cec827e1b7f762e25ebc75b55e10e&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;应用生命周期全面托管&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。在容器技术基础上，应用进一步描述清晰自身状态(例如通过 Liveness Probe)， 描述自身的弹性指标以及通过 Service Mesh 和 Serverless 技术将流量托管给云平台。云平台能够全面管理应用的生命周期，包括服务的上下线、版本升级、完善的流量调配、容量管理等保障业务稳定性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;7f7cec827e1b7f762e25ebc75b55e10e&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;用声明式配置方式使用云服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。云原生应用的核心特点之一就是大量依赖云服务(包括数据库、缓存、消息等) 构建，以实现快速交付。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;7f7cec827e1b7f762e25ebc75b55e10e&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;语言无关的分布式编程框架成为一种服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。为了解决分布式带来的技术挑战，传统中间件需要在客户端 SDK 编写大量的逻辑管理分布式的状态。我们看到很多项目在把这些内容下沉到 Sidecar 中，并通过语言无关的 API (基于 gRPC/HTTP) 提供给应用。这一变化进一步简化应用代码逻辑和应用研发的职责，例如配置绑定，身份认证和鉴权都可以在 Sidecar 被统一处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;综上，包括生命周期管理、运维管理、配置范围和扩展和管理、以及语言无关的编程框架，一起构成了崭新的应用与云之间的编程界面。这一变革的核心逻辑还是把应用中和业务无关的逻辑和职责，剥离到云服务，并在这一过程中形成标准，让应用开发者能够在专有云、公有云或者混合云的场景中，能有一致的研发运维体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Sidecar 架构模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;将应用程序的组件部署到单独的进程或容器中以提供隔离和封装。这种模式还可以使应用程序由异构组件和技术组成，该模式被命名为 Sidecar，因为它类似于连接到摩托车的辅助车，辅助车被附加到父应用程序并为应用程序提供支持功能。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.054635761589404&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrDhHv24VvIBaBraQjfwpkt0qTJUHBI1HjMuWZz1txEViabM5IUrFuojQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;604&quot; title=&quot;sidecar.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. Serverless 发展趋势&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;近年来，Serverless 一直在高速发展，呈现出越来越大的影响力。在这样的趋势下，主流云服务商也在不断丰&lt;/span&gt;&lt;span&gt;富云产品体系，提供更便捷的开发工具，更高效的应用交付流水线，更完善的可观测性，更丰富的产品间集成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）趋势一：Serverless 将无处不在&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;任何足够复杂的技术方案都可能被实现为全托管、Serverless 化的后端服务。不只是云产品，也包括来自合作 伙伴和三方的服务，云及其生态的能力将通过 API + Serverless 来体现。事实上，对于任何以 API 作为功能透出方式的平台型产品或组织，Serverless 都将是其平台战略中最重要的部分。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）趋势二：Serverless 将通过事件驱动的方式连接云及其生态中的一切&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;通过事件驱动和云服务连接，Serverless 能力也会扩展到整个云生态。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）趋势三:Serverless 计算将持续提高计算密度，实现最佳的性能功耗比和性能价格比&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;虚拟机和容器是两种取向不同的虚拟化技术，前者安全性强、开销大，后者则相反。Serverless 计算平台一方面要求兼得最高的安全性和最小的资源开销，另一方面要保持对原有程序执行方式的兼容，比如支持任意二进制文件， 这使得适用于特定语言 VM 的方案不可行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当 Serverless 计算的规模与影响力变得越来越大，在应用框架、语言、硬件等层面上根据 Serverless 负载特点进行端对端优化就变得非常有意义。新的 Java 虚拟机技术大幅提高了 Java 应用启动速度，非易失性内存帮助实例更快被唤醒，CPU 硬件与操作系统协作对高密环境下性能扰动实现精细隔离，新技术正在创造崭新的计算环境。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实现最佳性能功耗比和性能价格比的另一个重要方向是支持异构硬件。由于 x86 处理器的性能越来越难以提升，而在 AI 等对算力要求极高的场景，GPU、FPGA、TPU(Tensor Processing Units)等架构处理器的计算效率更具优势。随着异构硬件虚拟化、资源池化、异构资源调度和应用框架支持的成熟，异构硬件的算力也能通过 Serverless 的方式释放，大幅降低企业使用门槛。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 参考文献&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;更多企业落地实践内容，可下载云原生架构白皮书了解详情！点击&lt;/span&gt;&lt;span&gt;&lt;strong&gt;【阅读原文】&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;即可下载！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.7777777777777777&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvmR7Ej5WqAEUaNUTFia3D30mXERqtkhuznER96wDxRCAWK2DdcbMVu0BBEicc2HpXEkibBh27iaYGMibwQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/6aVaON9Kibf5ibKRPQgZ9XgbVNsIeQUnfKSiaErmr8dtdicicS3A8m6TiavR6ZB0Eah3pD0kjQg8ACyNb1x5ibdqRg2jA/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;戳原文，直达云原生架构白皮书详情页！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1626748d2776d79aeef8eeb4f49f08bb</guid>
<title>[推荐] 我对技术架构的理解与架构师角色的思考</title>
<link>https://toutiao.io/k/crw00du</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>99ec1024b0bade773167f86987580d08</guid>
<title>[推荐] Elasticsearch 聚合性能优化六大猛招</title>
<link>https://toutiao.io/k/otz7tnk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、问题引出&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;默认情况下，Elasticsearch 已针对大多数用例进行了优化，确保在写入性能和查询性能之间取得平衡。我们将介绍一些聚合性能优化的可配置参数，其中部分改进是以牺牲写入性能为代价的。目标是将聚合优化招数汇总到一个易于消化的短文中，为大家的 Elasticsearch 集群聚合性能优化提供一些指导。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、聚合实战问题&lt;br/&gt;&lt;/span&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;问题1：1天的数据 70W,聚合2次分桶正常查询时间是 200ms左右, 增加了一个去重条件, 就10-13秒了,有优化的地方不？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;问题2：请问在很多 terms 聚合的情况下，怎样优化检索？我的场景在无聚合时，吞吐量有 300，在加入 12 个聚合字段后，吞吐量不到20。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;问题3：哪位兄弟 帮忙发一个聚合优化的链接，我这个聚合 几千万 就好几秒了？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、认知前提&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;3.1 Elasticsearch 聚合是不严格精准的&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;原因在于：数据分散到多个分片，聚合是每个分片的取 Top X，导致结果不精准。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看一下之前的文章：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484963&amp;amp;idx=1&amp;amp;sn=bde824fd0d01b1deffe92c22ab717f4a&amp;amp;chksm=eaa82e0bdddfa71d26663b9ffb0a50c2a0247c72710d428f9456678e5934b23cd078680f3ce4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Elasticsearch 聚合数据结果不精确，怎么破？&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Elasticsearch 聚合数据结果不精确，怎么破？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;3.2 从业务层面规避全量聚合&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;聚合结果的精准性和响应速度之间是相对矛盾的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正常业务开发，产品经理往往要求：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第一：快速秒级或者毫秒级聚合响应。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第二：聚合结果精准。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;殊不知，二者不可兼得。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;遇到类似两者都要兼得的需求，建议从架构选型和业务层面做规避处理。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;3.3 刷新频率&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;如下图所示，Elasticsearch 中的 1 个索引由一个或多个分片组成，每个分片包含多个segment（段），每一个段都是一个倒排索引。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 lucene 中，为了实现高索引速度，使用了segment 分段架构存储。一批写入数据保存在一个段中，其中每个段最终落地为磁盘中的单个文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5511551155115512&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9axLPZGcvOzRLYEHKPs18ktKCiapicu0BwTcoPGdWMkAJHSvtcq0ibHp6Bu1Q5xnDNH1nZ9IG3NAWDQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;606&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如下图所示，将文档插入 Elasticsearch 时，它们会被写入缓冲区中，然后在刷新时定期从该缓冲区刷新到段中。刷新频率由 refresh_interval 参数控制，默认每1秒发生一次。也就是说，新插入的文档在刷新到段（内存中）之前，是不能被搜索到的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4216417910447761&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9axLPZGcvOzRLYEHKPs18ktm2Y7WeybYD9ugG64IcjmHUtguAPibAWiaFXtibvciaSZWvXmotCmQNAZBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;刷新的&lt;strong&gt;&lt;span&gt;本质&lt;/span&gt;&lt;/strong&gt;是：写入数据由内存 buffer 写入到内存段中，以保证搜索可见。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来看个例子，加深对 refresh_inteval  的理解，注释部分就是解读。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;PUT test_0001/_doc/1&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;just testing&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;# 默认一秒的刷新频率，秒级可见（用户无感知）&lt;/span&gt;&lt;br/&gt;GET test_0001/_search&lt;br/&gt;&lt;br/&gt;DELETE test_0001&lt;br/&gt;&lt;span&gt;# 设置了60s的刷新频率&lt;/span&gt;&lt;br/&gt;PUT test_0001&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;settings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;br/&gt;      &lt;span&gt;&quot;refresh_interval&quot;&lt;/span&gt;:&lt;span&gt;&quot;60s&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;PUT test_0001/_doc/1&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;just testing&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;# 60s后才可以被搜索到&lt;/span&gt;&lt;br/&gt;GET test_0001/_search&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;关于是否需要实时刷新：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于刷新频率对查询性能的影响：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;由于每刷新一次都会生成一个 Lucene 段，刷新频率越小就意味着同样时间间隔，生成的段越多。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;每个段都要消耗句柄和内存。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;每次查询请求都需要轮询每个段，轮询完毕后再对结果进行合并。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;也就意味着：refresh_interval 越小，产生的段越多，搜索反而会越慢；反过来说，加大 refresh_interval，会相对提升搜索性能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、聚合性能优化猛招&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.1    启用 eager global ordinals 提升高基数聚合性能&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;高基数聚合场景中的高基数含义：一个字段包含很大比例的唯一值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;global ordinals 中文翻译成&lt;span&gt;全局序号&lt;/span&gt;，是一种数据结构，应用场景如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于 keyword，ip 等字段的分桶聚合，包含：terms聚合、composite 聚合等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于text 字段的分桶聚合（前提条件是：fielddata 开启）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于父子文档 Join 类型的 has_child 查询和 父聚合。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;global ordinals 使用一个数值代表字段中的字符串值，然后为每一个数值分配一个 bucket（分桶）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;global ordinals 的&lt;strong&gt;&lt;span&gt;本质&lt;/span&gt;&lt;/strong&gt;是：启用 eager_global_ordinals 时，会在刷新（refresh）分片时构建全局序号。这将构建全局序号的成本从搜索阶段转移到了数据索引化（写入）阶段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;创建索引的同时开启：eager_global_ordinals。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;PUT my-index-000001&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;mappings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;tags&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;eager_global_ordinals&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;注意&lt;/span&gt;&lt;span&gt;：开启 eager_global_ordinals 会影响写入性能，因为每次刷新时都会创建新的全局序号。为了最大程度地减少由于频繁刷新建立全局序号而导致的额外开销，请调大刷新间隔 refresh_interval。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;动态调整刷新频率的方法如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;PUT my-index-000001/_settings&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;index&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;refresh_interval&quot;&lt;/span&gt;: &lt;span&gt;&quot;30s&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;该招数的&lt;/span&gt;&lt;span&gt;本质&lt;/span&gt;&lt;span&gt;是：以空间换时间。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.2 插入数据时对索引进行预排序&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Index sorting （索引排序）可用于在插入时对索引进行预排序，而不是在查询时再对索引进行排序，这将提高范围查询（range query）和排序操作的性能。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;在 Elasticsearch 中创建新索引时，可以配置如何对每个分片内的段进行排序。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;这是 Elasticsearch 6.X 之后版本才有的特性。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Index sorting 实战举例：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;PUT my-index-000001&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;settings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;index&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;sort.field&quot;&lt;/span&gt;: &lt;span&gt;&quot;cur_time&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;sort.order&quot;&lt;/span&gt;: &lt;span&gt;&quot;desc&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;mappings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;cur_time&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;date&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;如上示例是在：创建索引的设置部分设置待排序的字段：cur_time 以及 排序方式：desc 降序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意&lt;/span&gt;&lt;span&gt;：预排序将增加 Elasticsearch 写入的成本。在某些用户特定场景下，开启索引预排序会导致大约 40%-50% 的写性能下降。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是说，如果用户场景更关注写性能的业务，开启索引预排序不是一个很好的选择。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.3 使用节点查询缓存&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;节点查询缓存（Node query cache）可用于有效缓存过滤器（filter）操作的结果。如果多次执行同一 filter 操作，这将很有效，但是即便更改过滤器中的某一个值，也将意味着需要计算新的过滤器结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，由于 “now” 值一直在变化，因此无法缓存在过滤器上下文中使用 “now” 的查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那怎么使用缓存呢？通过在 now 字段上应用 &lt;/span&gt;&lt;span&gt;datemath &lt;/span&gt;&lt;span&gt;格式将其四舍五入到最接近的分钟/小时等，可以使此类请求更具可缓存性，以便可以对筛选结果进行缓存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于 datemath 格式及用法，举个例子来说明：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下的示例，无法使用缓存。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;PUT index/_doc/1&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;my_date&quot;&lt;/span&gt;: &lt;span&gt;&quot;2016-05-11T16:30:55.328Z&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;GET index/_search&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;query&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;constant_score&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;filter&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;range&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;my_date&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;gte&quot;&lt;/span&gt;: &lt;span&gt;&quot;now-1h&quot;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&quot;lte&quot;&lt;/span&gt;: &lt;span&gt;&quot;now&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;但是，下面的示例就可以使用节点查询缓存。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;GET index/_search&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;query&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;constant_score&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;filter&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;range&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;my_date&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;gte&quot;&lt;/span&gt;: &lt;span&gt;&quot;now-1h/m&quot;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&quot;lte&quot;&lt;/span&gt;: &lt;span&gt;&quot;now/m&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;上述示例中的“now-1h/m” 就是 datemath 的格式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更细化点说，如果当前时间 now 是：16:31:29，那么range query 将匹配 my_date 介于：15:31:00 和 15:31:59 之间的时间数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同理，聚合的前半部分 query 中如果有基于时间查询，或者后半部分 aggs 部分中有基于时间聚合的，建议都使用 datemath 方式做缓存处理以优化性能。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.4 使用分片请求缓存&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;聚合语句中，设置：size：0，就会使用分片请求缓存缓存结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;size = 0 的含义是：只返回聚合结果，不返回查询结果。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;GET /my_index/_search&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;size&quot;&lt;/span&gt;: 0,&lt;br/&gt;  &lt;span&gt;&quot;aggs&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;popular_colors&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;terms&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;field&quot;&lt;/span&gt;: &lt;span&gt;&quot;colors&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.5 拆分聚合，使聚合并行化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;这里有个认知前提：Elasticsearch 查询条件中同时有多个条件聚合，这个时候的多个聚合&lt;/span&gt;&lt;span&gt;不是并行&lt;/span&gt;&lt;span&gt;运行的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里就有疑问：是不是可以通过 msearch 拆解多个聚合为单个子语句来改善响应时间？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;什么意思呢，给个 Demo，toy_demo_003 数据来源：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247485927&amp;amp;idx=1&amp;amp;sn=23f46f436890627523abfbc6f65cda1d&amp;amp;chksm=eaa821cfdddfa8d93cc4fe2c9a655a65e5e21367f89be93ec79d0479936ee125a97811cb9b4d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;基于儿童积木玩具图解 Elasticsearch 聚合&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如下响应时间：15 ms。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;POST toy_demo_003/_search&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;size&quot;&lt;/span&gt;: 0,&lt;br/&gt;  &lt;span&gt;&quot;aggs&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;hole_terms_agg&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;terms&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;field&quot;&lt;/span&gt;: &lt;span&gt;&quot;has_hole&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;&quot;max_aggs&quot;&lt;/span&gt;:{&lt;br/&gt;      &lt;span&gt;&quot;max&quot;&lt;/span&gt;:{&lt;br/&gt;        &lt;span&gt;&quot;field&quot;&lt;/span&gt;:&lt;span&gt;&quot;size&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;如下响应时间：9 ms。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;POST _msearch&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt; : &lt;span&gt;&quot;toy_demo_003&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;size&quot;&lt;/span&gt;:0,&lt;span&gt;&quot;aggs&quot;&lt;/span&gt;:{&lt;span&gt;&quot;hole_terms_agg&quot;&lt;/span&gt;:{&lt;span&gt;&quot;terms&quot;&lt;/span&gt;:{&lt;span&gt;&quot;field&quot;&lt;/span&gt;:&lt;span&gt;&quot;has_hole&quot;&lt;/span&gt;}}}}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt; : &lt;span&gt;&quot;toy_demo_003&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;size&quot;&lt;/span&gt;:0,&lt;span&gt;&quot;aggs&quot;&lt;/span&gt;:{&lt;span&gt;&quot;max_aggs&quot;&lt;/span&gt;:{&lt;span&gt;&quot;max&quot;&lt;/span&gt;:{&lt;span&gt;&quot;field&quot;&lt;/span&gt;:&lt;span&gt;&quot;size&quot;&lt;/span&gt;}}}}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;来个对比验证吧：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5824742268041238&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9axLPZGcvOzRLYEHKPs18ktI1gRADkFXdFMyH8VSr3aeIJWY22ibcA9wTOqXawZkVKVneL7LC73jhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;582&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;蓝色：类似示例一，单个query 中包含多个聚合，聚合数分别是：1,2,5,10。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;红色：类似示例二，multi_search 拆解多个聚合，拆分子句个数分别为：1,2,5,10。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;横轴：蓝色对应聚合个数；红色对应子句个数；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;纵轴：响应时间，响应时间越短、性能越好。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;初步结论是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，在 CPU 资源不是瓶颈的前提下，如果想缩短响应时间，可以将多个聚合拆分为多个查询，借助：msearch 实现&lt;/span&gt;&lt;span&gt;并行聚合&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4.6 将聚合中的查询条件移动到 query 子句部分&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;示例一：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;POST my_index/_search&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;size&quot;&lt;/span&gt;: 0,&lt;br/&gt;  &lt;span&gt;&quot;aggregations&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;1&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;filter&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;match&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;search_field&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;aggregations&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;items&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;top_hits&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;size&quot;&lt;/span&gt;: 100,&lt;br/&gt;            &lt;span&gt;&quot;_source&quot;&lt;/span&gt;: {&lt;br/&gt;              &lt;span&gt;&quot;includes&quot;&lt;/span&gt;: &lt;span&gt;&quot;field1&quot;&lt;/span&gt;&lt;br/&gt;            }&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;&quot;2&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;filter&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;match&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;search_field&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;aggregations&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;items&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;top_hits&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;size&quot;&lt;/span&gt;: 100,&lt;br/&gt;            &lt;span&gt;&quot;_source&quot;&lt;/span&gt;: {&lt;br/&gt;              &lt;span&gt;&quot;includes&quot;&lt;/span&gt;: &lt;span&gt;&quot;field2&quot;&lt;/span&gt;&lt;br/&gt;            }&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;示例二：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;{&lt;br/&gt;  &lt;span&gt;&quot;query&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;bool&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;filter&quot;&lt;/span&gt;: [&lt;br/&gt;        {&lt;br/&gt;          &lt;span&gt;&quot;match&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;search_field&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      ]&lt;br/&gt;    }&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;size&quot;&lt;/span&gt;: 0,&lt;br/&gt;  &lt;span&gt;&quot;aggregations&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;1&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;top_hits&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;size&quot;&lt;/span&gt;: 100,&lt;br/&gt;        &lt;span&gt;&quot;_source&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;includes&quot;&lt;/span&gt;: &lt;span&gt;&quot;field1&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;&quot;2&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;top_hits&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;size&quot;&lt;/span&gt;: 100,&lt;br/&gt;        &lt;span&gt;&quot;_source&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;includes&quot;&lt;/span&gt;: &lt;span&gt;&quot;field2&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;示例一和示例二的本质区别：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二个查询已将此过滤器提取到较高级别，这应使聚合共享结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如下对比实验表明，由于 Elasticsearch 自身做了优化，示例一（蓝色）和示例二（红色）响应时间基本一致。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6020583190394511&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9axLPZGcvOzRLYEHKPs18ktGUjsH6k9Thb1GlcWmjJKuD9gYp01gZbictHzgPnD6IrpmsRZFHYibWNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;583&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更多验证需要结合业务场景做一下对比验证，精简起见，推荐使用第二种。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、更多优化参考&lt;/span&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;官方关于检索性能优化同样适用于聚合&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分片数设置多少合理？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.elastic.co/cn/blog/how-many-shards-should-i-have-in-my-elasticsearch-cluster&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;堆内存大小设置？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.elastic.co/cn/blog/a-heap-of-trouble&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;禁用 swapping&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6、小结&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;本文的六大猛招出自：Elastic 原厂咨询架构师 Alexander 以及 Coolblue 公司的软件开发工程师 Raoul Meyer。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;六大猛招中的 msearch 并行聚合方式，令人眼前一亮，相比我在业务实战中用的多线程方式实现并行，要“高级”了许多。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我结合自己的聚合优化实践做了翻译和扩展，希望对大家的聚合性能优化有所帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎留言写下您的聚合优化实践和思考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;和你一起，死磕 Elastic！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h1&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://qbox.io/blog/refresh-flush-operations-elasticsearch-guide&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://alexmarquardt.com/how-to-tune-elasticsearch-for-aggregation-performance/&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://www.elastic.co/cn/blog/index-sorting-elasticsearch-6-0&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;span&gt;《Elasticsearch 源码解析与优化实战》&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>752234ae02cac1d0d1b8d79acc1ca038</guid>
<title>[推荐] 每个程序员都应该知道的 latency time</title>
<link>https://toutiao.io/k/ol06bm3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;385&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/la8s6uvJibdR3AKJ73XnRn9lyCPwrmC0ibce9eHibks0xAkDsmzVA4512KV0BRFq4JVFdRzHR4JwntE5aIK9cFpfg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Photo by &lt;/span&gt;&lt;span&gt;Denny Müller&lt;/span&gt;&lt;span&gt; on &lt;/span&gt;&lt;span&gt;Unsplash&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你是计算机系毕业的，可以不会修电脑，但应该了解几组关于 &lt;/span&gt;&lt;span&gt;“Latency time” &lt;/span&gt;&lt;span&gt;的数字，&lt;/span&gt;&lt;span&gt;&lt;span&gt;诸如&lt;/span&gt;：&lt;/span&gt;&lt;span&gt;L1 cache reference&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; c&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;he &lt;/span&gt;&lt;span&gt;reference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Disk seek  &lt;/span&gt;&lt;span&gt;等操作的耗时情况。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2001 &lt;/span&gt;&lt;span&gt;年，&lt;/span&gt;&lt;span&gt;Peter Norvig&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;&lt;span&gt;曾任 &lt;/span&gt;&lt;span&gt;Google &lt;/span&gt;&lt;span&gt;搜索质量总监，经典教材《人工智能：一种现代方法》的作者之一&lt;/span&gt;&lt;/span&gt;&lt;span&gt;）在 “ &lt;/span&gt;&lt;span&gt;Teach Yourself Programming in Ten Years” &lt;/span&gt;&lt;span&gt;一文中，首次讨论了&lt;span&gt;计算机领域&lt;/span&gt;中 &lt;/span&gt;&lt;span&gt;memory&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Cache&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Disk&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;network&lt;/span&gt;&lt;span&gt; 等相关延时的数据（&lt;/span&gt;&lt;span&gt;&lt;span&gt;By the way&lt;/span&gt;&lt;span&gt;，“ &lt;span&gt;Teach Yourself Programming in Ten Years&lt;/span&gt;”这篇文章本身也是神文，&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt; 年过去了，依旧经典&lt;/span&gt;&lt;/span&gt;&lt;span&gt;）&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img data-backh=&quot;323&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5583333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/la8s6uvJibdR3AKJ73XnRn9lyCPwrmC0ibrUO2pRfus2ibFibUU5dic8e4ydkagbYzwUjmml1knpOYnONLFsXB7EEvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而让这些数字再次受关注的，是 &lt;span&gt;Google &lt;/span&gt;&lt;/span&gt;&lt;span&gt;的另一位&lt;/span&gt;&lt;span&gt;&lt;span&gt;大神。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;2010 &lt;/span&gt;&lt;span&gt;年，&lt;/span&gt;&lt;span&gt;Jeff  Dean &lt;/span&gt;&lt;span&gt;在斯坦福做了一次精彩的演讲：“&lt;/span&gt;&lt;span&gt;Building Software Systems at Google and
Lessons Learned”&lt;/span&gt;&lt;span&gt;，其中又讨论了这些计算机领域的&lt;/span&gt;&lt;span&gt; latency&lt;/span&gt;&lt;span&gt; 。毕竟，要做出优秀的架构，反而需要更加关注那些基础的领域知识。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;436&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7540500736377025&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdR3AKJ73XnRn9lyCPwrmC0ibpQicichemZ12aopG9xILdl6ZYiaK9ottzS5k0dxDeyzPvkcl3vq92ticBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;679&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;随后，&lt;/span&gt;&lt;span&gt;&lt;span&gt;一名 &lt;/span&gt;&lt;span&gt;UC Berkeley&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;的学生&lt;/span&gt;&lt;/span&gt;将这些计算机系统中的 &lt;span&gt;latency time &lt;/span&gt;做了一个可交互的网页，&lt;span&gt;得出这些指标的&lt;/span&gt;&lt;span&gt;计算公式也写在网页的&lt;/span&gt;&lt;span&gt;源码里&lt;/span&gt;（&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://colin-scott.github.io/personal_website/research/interactive_latency.html&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拖动标记年份的滚动条,  我们可以很直观地看到，不同年份下，&lt;/span&gt;&lt;span&gt;CPU cache&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;main memory&lt;/span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;network &lt;/span&gt;&lt;span&gt;这些技术发展&lt;/span&gt;&lt;span&gt;对系统延迟时间的影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;246&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4254016832440704&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdR3AKJ73XnRn9lyCPwrmC0ibLw0n7LrheFuicsLAeoCD2EvCf0VVGjFE5zlXILLn0HDWntRJlZJdaCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1307&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;下面是 &lt;/span&gt;&lt;span&gt;2020 &lt;/span&gt;&lt;span&gt;年&lt;/span&gt;的数据：&lt;/span&gt;&lt;/p&gt;&lt;table align=&quot;center&quot; interlaced=&quot;disabled&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;span&gt;L1 cache reference&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;读取&lt;/span&gt; CPU &lt;/span&gt;&lt;span&gt;一级缓存 &lt;span&gt;latency&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;1 ns&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1 &lt;/span&gt;&lt;span&gt;纳秒&lt;/span&gt;&lt;span&gt; = 10 亿分之一秒&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;L2 cache &lt;/span&gt;&lt;span&gt;reference&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;读取&lt;/span&gt;&lt;span&gt; CPU&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 二级&lt;/span&gt;&lt;span&gt;缓存 &lt;span&gt;latency&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;left&quot;&gt;&lt;span&gt;4 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;CPU Branch mispredict&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;CPU&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 分支错误&lt;/span&gt;&lt;span&gt;预&lt;/span&gt;&lt;span&gt;测耗时&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;3 ns&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Mutex Lo&lt;/span&gt;&lt;span&gt;ck / Unlock&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加互斥锁 / 解锁&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;17 n&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;Main memory &lt;span&gt;reference&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;读取主内存数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;100 ns&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;Compress 1 KB with Zippy&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1 k&lt;/span&gt;&lt;span&gt; 字节压缩&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;2000 ns = 2 &lt;/span&gt;&lt;span&gt;μs&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1 微秒 = 100 万分之一秒&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Read 1,000,000 bytes sequentially from main memory&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;从主内存中顺序读取 1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;&lt;span&gt; 字节数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;left&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;μs&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;Solid State Drive (SSD) random read&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;span&gt;从 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;SSD&lt;/span&gt;&lt;span&gt;&lt;span&gt; 中读取数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt;&lt;span&gt;16 &lt;/span&gt;&lt;span&gt;&lt;span&gt;μs&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Read 1,000,000 bytes sequentially from SSD&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;从 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;SSD&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 中顺序读取 1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;&lt;span&gt; 字节数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;μs&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Read 1,000,000 bytes sequentially from disk&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;从机械&lt;span&gt;硬&lt;/span&gt;盘&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;中顺序读取 1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;&lt;span&gt; 字节数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;25 &lt;/span&gt;&lt;span&gt;μs&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;Disk (Hard / magnetic drive) seek&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从机械硬盘中随机读取数&lt;/span&gt;&lt;span&gt;据&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;2 ms&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1 毫秒 &lt;/span&gt;&lt;span&gt;= 1000 分之一秒&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;2&quot; rowspan=&quot;1&quot;&gt;&lt;strong&gt;&lt;span&gt;网络&lt;/span&gt; &lt;span&gt;latency&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Send 2000 bytes over commodity &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;network&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过商用网络发送 &lt;/span&gt;&lt;span&gt;2k&lt;/span&gt;&lt;span&gt; 字节数据&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;left&quot;&gt;&lt;span&gt;44 ns&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Round trip network request in same &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;data centre&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在同一数据中心的&lt;span&gt;一&lt;/span&gt;&lt;span&gt;次&lt;/span&gt;&lt;span&gt;网&lt;/span&gt;&lt;span&gt;络请&lt;/span&gt;&lt;span&gt;求&lt;/span&gt;往返&lt;/span&gt;&lt;span/&gt;&lt;span&gt;耗时&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;left&quot;&gt;&lt;span&gt;500 &lt;span&gt;μs&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Packet roundtrip CA to Netherlands &lt;/span&gt;&lt;span&gt;从加拿大到荷兰的&lt;span&gt;一次&lt;/span&gt;网&lt;/span&gt;&lt;span&gt;&lt;span&gt;络请&lt;/span&gt;&lt;span&gt;求&lt;/span&gt;&lt;/span&gt;&lt;span&gt;往返耗时&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;left&quot;&gt;&lt;span&gt;150 ms&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;通过分析这些变化，可以发现一些有意思的事情：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.  &lt;/span&gt;&lt;span&gt;从&lt;/span&gt;&lt;span&gt; 2006&lt;/span&gt;&lt;span&gt; 年开始，前两列操作的数值（&lt;/span&gt;&lt;span&gt;L1 cache&lt;span&gt;，&lt;/span&gt;L2 cache&lt;/span&gt;&lt;span&gt;，解压缩）基本不再变化。从另一侧面反映了 &lt;/span&gt;&lt;span&gt;CPU&lt;/span&gt;&lt;span&gt; 芯片发展的时代烙印：从注重提升主频到往&lt;/span&gt;&lt;span&gt;多核方向发展；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.  &lt;/span&gt;&lt;span&gt;机械硬盘的&lt;/span&gt;&lt;span&gt;随机读写&lt;/span&gt;&lt;span&gt;性能&lt;/span&gt;&lt;span&gt;很差&lt;/span&gt;&lt;span&gt;，比内存慢 &lt;/span&gt;&lt;span&gt;1000 &lt;/span&gt;&lt;span&gt;倍。而异地访问的网络请求时延，又比硬盘读慢 &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt; 倍&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;span&gt;SSD&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;的随机读取速度 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;&lt;span&gt; 年间基本&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;没有提升，而顺序读取速度却从&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 50 ms&lt;/span&gt;&lt;span&gt;&lt;span&gt; 提升到 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;49 &lt;span&gt;μs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，提升了 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;&lt;span&gt; 倍。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;在某些场景下，基于 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;SSD&lt;/span&gt;&lt;span&gt;&lt;span&gt; 的顺序读性能甚至好于内存的随机读；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.  &lt;/span&gt;&lt;span&gt;不管是在同一数据中心还是异地数据中心，&lt;/span&gt;&lt;span&gt;RTT &lt;/span&gt;&lt;span&gt;基本不变，&lt;/span&gt;&lt;span&gt;一致保持 &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;μs&lt;/span&gt; 和 &lt;/span&gt;&lt;span&gt;150 ms&lt;/span&gt;&lt;span&gt;。假设信号在光纤中以近似光速传播，理论上 &lt;/span&gt;&lt;span&gt;RTT&lt;/span&gt;&lt;span&gt; 由物理规律决定。比如：&lt;/span&gt;&lt;span&gt;杭州到北京&lt;/span&gt;&lt;span&gt;距离大约为 &lt;/span&gt;&lt;span&gt;1500&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;km&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;RTT &lt;/span&gt;&lt;span&gt;延迟至少在： ( &lt;/span&gt;&lt;span&gt;2 * 1500 km&lt;/span&gt;&lt;span&gt; ) / (&lt;/span&gt;&lt;span&gt;300,000 &lt;/span&gt;&lt;span&gt;km/s&lt;/span&gt;&lt;span&gt;) = &lt;/span&gt;&lt;span&gt;10 &lt;/span&gt;&lt;span&gt;ms&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上， &lt;/span&gt;&lt;span&gt;Enjoy ~&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考资源：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;1. http://norvig.com/21-days.html&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;2. &lt;/span&gt;&lt;span&gt;https://static.googleusercontent.com/media/research.google.com/en//people/jeff/Stanford-DL-Nov-2010.pdf&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;3. &lt;/span&gt;&lt;span&gt;https://colin-scott.github.io/personal_website/research/&lt;span&gt;interactive_latency.html&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2db305b32a36fab589fcc945429cf6b7</guid>
<title>[推荐] Redis 集群搭建很 easy</title>
<link>https://toutiao.io/k/m4mw3sc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;h3&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;p&gt;哨兵模式虽然让读写分离更加高可用，但单台服务器由于本身的内存和CPU瓶颈，对于高并发和大数据业务的应用场景还是远远不能满足；对于这种情况，有点经验的小伙伴会毫不犹豫的想到集群，搞他好几个节点，负载均衡再加上故障转移，岂不美哉。是的，就是这个理，接下来玩玩。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;正文&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;集群&lt;/strong&gt;，相信这个词小伙伴应该听的耳朵起茧子了吧；多搞几台服务器，让请求/命令平均分发到各个服务器，避免单台服务器承载过大压力；对于Redis集群来说，为了实现自动故障转移，还需要在每个主节点上增加一个或多个从节点，当主节点发生故障时，从节点自动补上，实现高可用。&lt;/p&gt;&lt;p&gt;总的来说，Redis集群有以下作用：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;多主节点的实现可以&lt;strong&gt;应对高并发场景&lt;/strong&gt;，并发量增大，节点可以随时扩展满足需求；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;多主节点的实现可以&lt;strong&gt;存储更多的数据&lt;/strong&gt;，因为数据均匀分布到各个节点；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;多主节点搭配多从节点的实现让&lt;strong&gt;高可用更加稳定&lt;/strong&gt;，即当有主节点发生故障时，对应下面的从节点会升级为主节点，正常提供功能；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;老规矩不变，一边实操一边总结，接下来搭建一个3主3从的集群，这是最简单的。&lt;strong&gt;Redis集群中最少需要3个主节点&lt;/strong&gt;，再加上为了实现高可用，每个主节点至少得跟一个从节点，不然一个主节点挂了，找不到完整的数据，整个集群就不能用了；至于为什么会找不到完整的数据，下面会聊到。&lt;/p&gt;&lt;p&gt;接下来要搭建的集群环境如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4256410256410256&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtQUlE7QADIW0W9LxKETojVKZicLVYV9VcC0ezFJJOFKeNIxOn1LL3mXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;585&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;简要说明：&lt;/p&gt;&lt;p&gt;这里集群方案使用redis-cli自动指定主从关系(小伙伴的主从关系可能会和我这不一样哦)，也可以手动指定；反正思路都一样；&lt;/p&gt;&lt;p&gt;以下演示在同一台机器上，通过端口区分各个节点；在实际开发中，一般都是用不同的服务器。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;案例演示&lt;/span&gt;&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;准备六个节点的配置文件，开启集群相关配置&lt;/strong&gt;；&lt;/p&gt;&lt;p&gt;拷贝最初默认的配置文件，然后进行更改，主要更改以下项：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;port 6370 &lt;span&gt;# 指定Redis节点端口&lt;/span&gt;&lt;br/&gt;pidfile /var/run/redis_6370.pid &lt;span&gt;# 指定对应进程文件&lt;/span&gt;&lt;br/&gt;dbfilename dump6370.rdb &lt;span&gt;# 每个节点的rdb持久化文件&lt;/span&gt;&lt;br/&gt;cluster-enabled yes &lt;span&gt;# 开启集群，这个比较重要&lt;/span&gt;&lt;br/&gt;cluster-config-file nodes-6370.conf &lt;span&gt;#指定每个节点的集群配置文件，这个比较重要&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上配置文件内容在其他节点(6370,6371,6380,6381,6390,6391)都需要进行修改，只是将其中6370改为对应节点的端口即可，目的就是为了不同节点使用不同端口并区分用到的不同文件即可；比如需要修改6371节点的配置文件如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;port 6371 &lt;span&gt;# 指定Redis节点端口&lt;/span&gt;&lt;br/&gt;pidfile /var/run/redis_6371.pid &lt;span&gt;# 指定对应进程文件&lt;/span&gt;&lt;br/&gt;dbfilename dump6371.rdb &lt;span&gt;# 每个节点的rdb持久化文件&lt;/span&gt;&lt;br/&gt;cluster-enabled yes &lt;span&gt;# 开启集群，这个比较重要&lt;/span&gt;&lt;br/&gt;cluster-config-file nodes-6371.conf &lt;span&gt;#指定每个节点的集群配置文件，这个比较重要&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中&lt;strong&gt;cluster-enabled&lt;/strong&gt;和&lt;strong&gt;cluster-config-file&lt;/strong&gt;是集群配置的重点。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;启动六个节点，刚开始各个节点是相互独立的&lt;/strong&gt;；&lt;/p&gt;&lt;p&gt;准备好配置文件之后，就可以使用redis-server指定配置文件启动节点啦，如果节点多，小伙伴可以编写脚本哦；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./redis-server ZoeCluster/redis6370.conf &lt;span&gt;# 启动6370节点&lt;/span&gt;&lt;br/&gt;./redis-server ZoeCluster/redis6371.conf &lt;span&gt;# 启动6371节点&lt;/span&gt;&lt;br/&gt;./redis-server ZoeCluster/redis6380.conf &lt;span&gt;# 启动6380节点&lt;/span&gt;&lt;br/&gt;./redis-server ZoeCluster/redis6381.conf &lt;span&gt;# 启动6381节点&lt;/span&gt;&lt;br/&gt;./redis-server ZoeCluster/redis6390.conf &lt;span&gt;# 启动6390节点&lt;/span&gt;&lt;br/&gt;./redis-server ZoeCluster/redis6391.conf &lt;span&gt;# 启动6391节点&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动效果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.34392523364485983&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtCiak9JBXuAmYeRCZWnRYjplIYUC2QGLgo3gxKQgznic7Ps3HBgvZjOpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1070&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;这样只是将各个节点启动起来，集群关系还没创建呢，如果不信，可以使用redis-cli连接任意一个节点查看集群信息，如下：&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4627151051625239&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtCHAetSrvbMibwMP8VLrBGcTh5HRSPsraIyEuN7V9Z2ictQWLsXEjIk6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;523&quot;/&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;如上图，cluster-size为0，集群的关键，槽也还没有分配；那接下来肯定是要将各节点的集群关系搞起来；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;建立节点集群关系&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;由于我使用的Redis版本是5.0，直接可以使用&lt;strong&gt;redis-cli&lt;/strong&gt;就可以进行集群搭建，在此版本之前都推荐使用redis-trib.rb进行相关操作，这个是一个Ruby脚本，需要安装相关环境，小伙伴可以下来尝试；&lt;/p&gt;&lt;p&gt;使用命令如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./redis-cli --cluster create --cluster-replicas 1 127.0.0.1:6370 127.0.0.1:6380 127.0.0.1:6390 127.0.0.1:6371 127.0.0.1:6381 127.0.0.1:6391&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数简介：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;-- cluster&lt;/strong&gt; : 指定是用于创建集群环境；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;-a&lt;/strong&gt;：密码，即如果有密码，可以通过-a传参，这里没有设置密码；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;--cluster-replicas&lt;/strong&gt;：这里设置为1, 用于配置主节点上的从节点数，1就代表一主一从，2就代表一主二从，依次类推；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;后面的是节点IP:节点端口&lt;/strong&gt;，一般前面的是主节点，后面的是从节点；&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5256241787122208&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtCgspickZWrRVMc4dJcdXYibOIYQXSJZicbxkWTkT4lyJj1WWV7KN0szLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;761&quot;/&gt;&lt;br/&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;如果同意集群方案，然后就开始进行相关操作，如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6461748633879781&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtpVGql3GJlhoeXcaqPd7w7c3MyDbBhsU2mUUiaMVsWSwUDJvIh96oHzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;br/&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;同样，可以连接到任意一个节点，查看集群情况，如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.751937984496124&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtNVWeiaUHtXicsOl1JqkLiae6BC9FseMWvjaFZVo4XcdjQ6D8niarFwTOlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;645&quot;/&gt;&lt;br/&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;注：关于主从节点之间的主从复制过程就不在这说了，和之前说过的主从复制一样；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;演示访问操作&lt;/strong&gt;；&lt;/p&gt;&lt;p&gt;使用redis-cli连接任意节点写入数据，如果不指定集群连接的话，会写入数据失败，如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.160676532769556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtFN8ibRQHzrY5kplcq4am540YgbpeicjRIyLsURiaibjSibiaKuO7q7r9Mic2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;473&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;由于集群环境下，数据的存储位置是根据Key来计算而来的(这里牵涉到一致性哈希算法)，使得数据可以均匀分配到各节点上，所以在redis-cli连接的时候需要指定集群模式，如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.18149466192170818&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtUa2KAzicPLjOUcbzl5GKc0AMHutrJK9VweibVic1gNPuKnoicSkT7XDzMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;562&quot;/&gt;&lt;br/&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;如上图所示，指定集群模式之后就可以正常存取了；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;故障演示&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;既然集群环境，肯定少不了要好好测测；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;模拟从节点挂掉&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;找个从节点停掉试试，这里停掉6371节点，根据创建集群信息知道，它的主节点是6390；&lt;/p&gt;&lt;p&gt;主节点显示从节点断开连接，看看它的主节点反应：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.08100929614873838&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtTRnjq4pDfMtW003rmMIF22obdYtJKrIa2Yic4Y7CDAp6WCENUdCrHXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;753&quot;/&gt;&lt;br/&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;其他集群节点只是将从节点标记为failing状态，即下线状态，如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.077733860342556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtRNCljcXOAsD7NaDK7yAOiaMvY8fCos0MXujmhxI3xyaPAIovfI9Sgnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;759&quot;/&gt;&lt;br/&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;对于存取数据也不受影响，这里就不截图了，小伙伴自行尝试吧；&lt;/p&gt;&lt;p&gt;当故障的从节点6371重新连上时，主节点恢复主从关系，并进行主从复制操作；其他集群节点会清除原来标记的下线状态，将其改为上线；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;模拟主节点挂掉&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这里就手动将6390这个节点停掉，会有怎样的反应呢？&lt;/p&gt;&lt;p&gt;自身从节点会&lt;strong&gt;每隔一秒检测连接&lt;/strong&gt;，如果超时(默认是15秒)，&lt;strong&gt;会选举从节点做为集群的主节点来提供服务&lt;/strong&gt;，如下图：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6972477064220184&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibthwcA5LGWC6QPq3SnAVtkWmXyNRvWa5NMGdib6dgHWB5nicy2IawKGoBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;br/&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;数据存取最终还是不受影响；&lt;/p&gt;&lt;p&gt;对于其他集群节点，将故障节点标记为failing，让新上任的主节点提供服务，如下图：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.1874180865006553&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtR2IPDu32D0kqicNic4SojwVialAzyHlQVSQQTrXicr8eGWMk9KMvxGwNOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;br/&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;存取数据也是不受影响的；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;挂掉的主节点6390如果恢复，那它只能变为6371的从节点啦，并进行相关主从复制操作&lt;/strong&gt;；而集群的其他节点只是将其原有的Fail状态清除，表示可以正常连接；&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Redis集群就是这样简单，只要思路对，就是手工活；小伙伴可以编写脚本自动执行哦；&lt;/p&gt;&lt;p&gt;接下来说说集群数据的存储；&lt;/p&gt;&lt;h4&gt;&lt;span&gt;数据存储简单分析&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;在Redis集群环境中，数据的存储位置是根据对Key的Hash计算进行指定的；Redis集群为了在节点改变时保证数据分布均匀，引入了槽(slot)作为迁移的基本单位，槽解耦了数据和实际节点的关系，使得实际节点数的改变对系统影响较小；&lt;/p&gt;&lt;p&gt;在整个集群中，&lt;strong&gt;槽(slot)总共有16384，会将其均匀分配到集群的主节点上&lt;/strong&gt;，其中每一份槽对应一个存储空间(这里的存储空间可以理解为一个容器，是可以存很多数据的)，以上集群环境的槽分配如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.21913043478260869&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibt8w357o9Dibic0OcL8E6l9BwT451r6B3xiavvJvpGKJyvBBCM28MqBMibeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1150&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;存储数据的过程，如下：&lt;/p&gt;&lt;p&gt;连接6380主节点，执行如下操作：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.15849056603773584&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtdp49uOxKxooOrevwZEGzAf8AIO2ryljxMsSI5dG6W0gqMnPszLwSHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;530&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;具体过程如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6013289036544851&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibt7GeUEpmu1ictzxwtTWneNj4k2hFHDODRCjGzyCc9tS5lZYibgibibwdn3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;简要说明：&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;客户端发起命令；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务器将Key进行CRC16计算，并与总槽位计算出Key需要存储的位置；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;这里模拟的Key为zoe，计算出的槽位为14588，不在6380这个节点上，集群节点会将其重定向到对应槽位的节点上；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;然后找到6371上的14588槽位进行数据存储；（注，这里的6371已经是主节点了，因为上面做过一次故障转移模拟）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那集群节点是如何知道其他节点的槽范围和其他信息呢？&lt;/p&gt;&lt;p&gt;那是因为各节点之间有通讯，通讯端口是对应的redis端口+10000，比如节点6371的集群通讯端口为16371（如果多台机器，别忘了防火墙放开这个端口哦），可以通过&lt;strong&gt;cluster nodes&lt;/strong&gt;看到，如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2070524412296564&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtLFIV1jpvicMDnSpttMg8RtgiatUtMffJvPJKUkQ3Gvg4Q0HlSicJOMEkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1106&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;并且将各节点的信息保存在自己对应的集群配置文件中，这个集群文件名是通过配置项&lt;strong&gt;cluster-config-file&lt;/strong&gt;指定的，在集群节点启动时会检查该文件是否存在，如果不存在，会自动创建，如果存在，就加载里面的相关配置信息；里面有哪些信息，随便找个节点的配置文件看一下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2321270962047661&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtPj1iaViblBAx8feq4T9htzicHs7ic2GMwwhTMCuddictCDMHvnqSFWpROLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1133&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;如上图所示，各节点的配置文件中记录了其他节点的主从关系，分配的槽位，各节点的状态；这样的话，集群关系就算重新启动也还存在。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;集群伸缩(节点增删)演示&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;在实际应用场景中，会根据业务需要，对集群进行伸缩，即节点的增删；业务并发大了加节点进行扩展，  节点需要调整时可能需要进节点删除；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;加节点&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这里进行节点扩展，加一个6360主节点，6361作为6360的从节点；参照以上集群搭建时配置文件更改，然后将其都启动，如下：&lt;/p&gt;&lt;p&gt;6360节点&lt;/p&gt;&lt;pre&gt;&lt;code&gt;port 6360 &lt;span&gt;# 指定Redis节点端口&lt;/span&gt;&lt;br/&gt;pidfile /var/run/redis_6360.pid &lt;span&gt;# 指定对应进程文件&lt;/span&gt;&lt;br/&gt;dbfilename dump6360.rdb &lt;span&gt;# 每个节点的rdb持久化文件&lt;/span&gt;&lt;br/&gt;cluster-enabled yes &lt;span&gt;# 开启集群，这个比较重要&lt;/span&gt;&lt;br/&gt;cluster-config-file nodes-6360.conf &lt;span&gt;#指定每个节点的集群配置文件，这个比较重要&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6361节点&lt;/p&gt;&lt;pre&gt;&lt;code&gt;port 6361 &lt;span&gt;# 指定Redis节点端口&lt;/span&gt;&lt;br/&gt;pidfile /var/run/redis_6361.pid &lt;span&gt;# 指定对应进程文件&lt;/span&gt;&lt;br/&gt;dbfilename dump6361.rdb &lt;span&gt;# 每个节点的rdb持久化文件&lt;/span&gt;&lt;br/&gt;cluster-enabled yes &lt;span&gt;# 开启集群，这个比较重要&lt;/span&gt;&lt;br/&gt;cluster-config-file nodes-6361.conf &lt;span&gt;#指定每个节点的集群配置文件，这个比较重要&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;两个节点都启动，然后将6360加入到集群主节点中，执行以下命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./redis-cli --cluster add-node 127.0.0.1:6360 127.0.0.1:6370&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注：其中127.0.0.1:6360是需要加入的新增节点，127.0.0.1:6370是现有集群中的任意一个节点；&lt;/p&gt;&lt;p&gt;可以通过以下命令检测集群状态，如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./redis-cli --cluster check 127.0.0.1:6370  &lt;span&gt;# 后面的地址是任意的集群节点&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到6360已经加入到集群环境中，但现在还没有从节点和槽分配，所以接下来先将6361作为6360的从节点加入，如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./redis-cli --cluster add-node --cluster-slave --cluster-master-id eaa814dc56beb0d5edb6a4fbb14f1384e78d4764 127.0.0.1:6361 127.0.0.1:6370 &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;--cluster-slave :  意思就是加入的是从节点；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;--cluster-master-id：后面紧跟主节点的id，这里就是6360的节点id；通过cluster nodes可以查看到节点id；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;127.0.0.1:6361：需要加入的从节点；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;127.0.0.1:6370：现有集群的任意主节点；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;现在还差槽分配了，如果需要直接将16384个槽平均分配到所有节点话，直接执行以下命令即可：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./redis-cli --cluster rebalance --cluster-threshold 1 --cluster-use-empty-masters 127.0.0.1:6370&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用命令./redis-cli --cluster check 127.0.0.1:6370查看分配结果，如下图，只截了部分：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4025974025974026&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qQ1zuvjsChQGMXn5rDBSaZwDJ9AibYEibtjjPZyy9cgOvia1zukwsEBBsPrl47lwhqTb7LnYKEOfJSSOd1g3Du0EQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;847&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;如果不想均匀分配，根据自定义需要进行配置，可以执行以下命令，会提示一步一步配置；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./redis-cli --cluster reshard 127.0.0.1:6360 &lt;span&gt;#后面是新加入的主节点 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 也可以执行以下指令直接配置想要的数据&lt;/span&gt;&lt;br/&gt;./redis-cli --cluster reshard --cluster-from all --cluster-to 需要分配槽的节点id --cluster-slots 1000 --cluster-yes 127.0.0.1:6370 &lt;span&gt;# 1000 指分配的槽数&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里就不截图演示了，留给小伙伴自己动手操作吧；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;删除节点&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;先对节点进行分片工作，防止数据丢失，即将指定节点上的槽分配到其他节点；&lt;br/&gt;&lt;code&gt;./redis-cli --cluster reshard 要删除节点ip:port&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;移除节点，推荐先删除从节点，再删除主节点；&lt;/p&gt;&lt;p&gt;&lt;code&gt;./redis-cli --cluster del-node 节点ip:port 节点id&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;&lt;span&gt;集群配置项&lt;/span&gt;&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;cluster-enabled(是否开启集群模式)&lt;/strong&gt;：设置为yes，将该节点开启为集群模式；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;cluster-config-file(设置每个集群节点对应的配置文件名称)&lt;/strong&gt;：文件是自动生成的，不用手动创建；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;cluster-node-timeout(设置超时时间，即集群节点不可用的最大时间，如果超过这个时间就认为该节点不可用)&lt;/strong&gt;：默认为15000(以毫秒为单位)；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;cluster-migration-barrier(配置一个主机最少可用的从机的个数)&lt;/strong&gt;：默认是1,表示一个主机的从机迁移之后，至少得有一个从机可用，否则不进行节点迁移；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;cluster-require-full-coverage(配置集群服务的可用性)&lt;/strong&gt;：默认yes开启，即集群没完全覆盖所有slot，集群就挂了；设置为no，就算槽没有全分配，也能提供服务，需要自己保证槽分配；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;p&gt;到这集群的搭建就完啦，本来想着写着很简单的，没想到又干了4000字；对于集群，使用有一些限制，比如Keys命令只能针对当前节点，需要针对多节点的情况进行处理；集群中各节点只支持db0数据库，其他数据库不支持等等；所以使用要注意哦，后续抽时间单独整理一篇注意事项吧，篇幅有点长，不继续聊啦；  下篇说说熟悉的缓存穿透、缓存击穿、缓存雪崩吧；&lt;/p&gt;&lt;p&gt;一个被程序搞丑的帅小伙，关注&quot;Code综艺圈&quot;，跟我一起学~~~&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>