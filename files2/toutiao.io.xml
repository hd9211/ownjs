<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1436d84fc32717ffa34a1473a637e3d5</guid>
<title>前端哪需要自己设计页面？用现成的不就好了</title>
<link>https://toutiao.io/k/a5s1rfh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时需要做一个页面，不是设计师出身的我们肯定不想花大量的时间去构思如何设计一个漂亮的页面，那么此时有一些好看又免费的模板就再好不过啦，这里给你们推荐18个&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、React Blur Admin&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;React Blur Admin&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.899803536345776&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOcRGr0jFWzKm92nU8urZm39RupeTTpytFqcib92SEFe6vloJ3Pg3PtmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;509&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;React Blur admin&lt;/span&gt; 可用于在 React 应用程序上构建管理界面。这个模板有表格、表单、地图、图表、 UI 特性、配色方案、页面等等&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、NextJS Material Dashboard&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;NextJS Material Dashboard&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOLfv3Tibu2onJCiaDq4iagibA82LoAIxiaNibUiauIQQA6PeoxAAgiapkYXbwlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;NextJS Material Dashboard&lt;/span&gt; 是一个免费的 Material-UI、 NextJS 和 React Admin，其新颖的设计灵感来自谷歌的 Material Design。它是完全编码的，包括插件、元素、 SASS 文件等等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、WrapKit React Lite&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;WrapKit React Lite&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.6386554621848739&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOQQTXUia68WsB8wf7ibREg98RxRhPicPxNJxl39mQDraATnh9oCdqPyYQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;714&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;WrapKit React Lite&lt;/span&gt; 是一个免费的 React 网站模板，允许你创建令人惊叹的网站，登陆页面，主页，等等。它带有随时可用的用户界面块和元素，以帮助水平的设计和美学的项目。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、React JS Landing&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;React JS Landing&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.41363636363636364&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOqN0yticA0UhdWJlmjvOdPHnFdJ7QTQicXSwZ2xwEvEtYUibOOycTCUt0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;React JS Landing&lt;/span&gt; 是一个为初创公司、公司和数字代理商提供的单页浏览登陆模板。它有丰富的图标，画廊，定制的表单，等等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;五、Blueprint&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Blueprint&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeO0u6cUPqpy219W4LsN52ialRhFxlnkyPmwX6kLQ5RKhHC2icHEricRgiaAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Blueprint&lt;/span&gt; 是一个基于反应的 web 用户界面工具包。它是为桌面应用程序构建复杂、数据密集的 web 界面而优化的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;六、Light Bootstrap Dashboard React&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Light Bootstrap Dashboard&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.4340909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOSccEagqIMwmgtHiaicefed0RcPbJqSiaUPIJTkogiavibibEA2Qm5qhO83icg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Light Bootstrap Dashboard React&lt;/span&gt; 是一个管理仪表盘模板设计的美丽和简单。它建立在 Light Bootstrap Dashboard 和 React JS 之上，并且它完全是响应式的。它有一个大的元素集合，将为您提供多种可能性来创建应用程序，最适合您的需求。它可以用来创建管理面板，项目管理系统，网络应用程序后端，CMS 或 CRM。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;七、Rebass&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Rebass&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.4602272727272727&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOib7khf0EL4o5OpSYh9Zct8GvcEHtby0RCytGOTKsOf1yJEXFibloCh9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Rebass&lt;/span&gt; 是使用样式化系统构建的原始 UI 组件。这是众所周知的一个最好的反应组件库在那里。它是响应式的，支持样式-组件，flexbox，等等&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;八、React Reduction&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;React Reduction&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.48522727272727273&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeO2MzDeLpGGSKzJfCA8TgkxfgLr92wtMD5hKyw1o24dp8YZPKnWDKe6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;React Reduction 是一个免费的开源管理模板，使用 React 和 Bootstrap 4构建。它包括图表、小工具、页面、卡片、组件、排版等等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;九、Open&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Open&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.4875&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOJvxVacKvG4QBYSSPphxpDPib71pEpPx6J8NCmhKoCcc4Cqx7DsCw3Lg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Open 是一个登陆页面模板，旨在展示开源项目、 SaaS 产品、在线服务等等。它反应迅速，功能强大，并且有趣的动画效果。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十、Shards Dashboard Lite&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Shards Dashboard Lite&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.4681818181818182&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOTuRtyvgMicTDYibf6M7WKaZic5vwhibu8mbVm2ZjJN9ibzPN0ovSXbqZXqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Shards Dashboard Lite&lt;/span&gt; 是一个免费的反应管理仪表板模板包具有现代化的设计系统和许多自定义模板和组件。它是完全响应的，性能良好的，并遵循所有的最佳实践。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十一、Argon Design System&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Argon Design System&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.6431818181818182&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOGqgTDSxicFsicweyL8xxk9vRFKsxF1dCvrQa2y7KlyoUqqiapOf42Zd7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Argon Design System&lt;/span&gt; 由超过100个独立部件组成，你可以自由选择和组合。它提供了预先构建的示例，这将有助于确保开发过程是无缝的。有趣的是，所有组件在颜色上都可以有所不同。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十二、Datta Able&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Datta Able&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.7&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOicickicFgiaOddEctZiajF7qedxw1wX43drRUUvyYZwQhn5TCn0Hnv7yUwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个很酷的 React 仪表盘模板，使用 Redux 和 Bootstrap 4制作。下面是它的一些特性:  &lt;code&gt;Code splitting&lt;/code&gt;,&lt;code&gt;suspense&lt;/code&gt;, &lt;code&gt;lazyload&lt;/code&gt;, &lt;code&gt;different color styles&lt;/code&gt;等等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十三、MatX&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;MatX&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOibjLRsXCM4Q9uIxpCbFu5Wgnv3cr9kAaahCECozAKgXd6xIayJHXICg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;MatX&lt;/span&gt; 是一个功能特别全的的 React 后台模板，是用React、Redux、Material UI构建出来的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它具有启动新项目所需的各种特性: Material UI 组件、 Form 元素、 JWT 身份验证、登录页面、代码分割等等。请看现场演示&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十四、Notus React&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Notus React&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.475&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOdH7muib0pEKqYR2NlJhGVUeIvy1xSL2hG4kMWTmAWg1ETZXF4bKCjgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Notus React&lt;/span&gt; 是一个免费的开源模板。它是 TailwinCSS 的一个扩展，但是没有改变或添加任何 CSS 到已经从 Tailwind CSS。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它具有多个 HTML 元素，并附带了用于 ReactJS、 Vue 和 Angular 的动态组件&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十五、Now UI Kit React&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Now UI Kit React&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOHFC0dxqHwCiaoFXU4F6ibCjV5vlyAABCKhk6KMVVS0OqgM3zL3Hzb4GA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现在 &lt;/span&gt;&lt;span&gt;UI Kit React&lt;/span&gt;&lt;span&gt; 是一个免费的 Bootstrap 4，React，React Hooks，和 Reactstrap UI Kit，由 In&lt;/span&gt;&lt;span&gt;visio&lt;/span&gt;&lt;span&gt;n 和 Creative Tim 提供。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大约一年前发布，到目前为止已经有超过11,756次下载，Now UI Kit React 的特性是首屈一指的。你一定要去看看。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十六、Core UI&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Core UI&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeO3rmJHhUBnQ2EtURJSwLiaIXTAdrZPBdthxOROPiafwP2xKzB9lPV8FcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十七、Ant Design&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Ant Design&lt;/span&gt;&lt;sup&gt;[17]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.803409090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOQAwiaZlOd7qQeKtGIp6Sm4ic9OsSxKoibJEDHf2CIzhCDY90MXaVFLU8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Ant Design&lt;/span&gt; 是一个 React UI 库，它有大量易于使用的组件，这些组件对构建优雅的用户界面非常有用。由阿里巴巴创建的蚂蚁集团设计被几个大公司使用: 阿里巴巴、腾讯、百度等等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十八、Material UI&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go to &lt;span&gt;Material UI&lt;/span&gt;&lt;sup&gt;[18]&lt;/sup&gt;&lt;/p&gt;&lt;img data-ratio=&quot;0.4420454545454545&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/gMvNo9rxo42Igpgibcq4FRVFicaBJaQdeOUiaYuLSAmZzauLrn39HV0tSXIFwwiaGbniazaibNWeoWMbe5iaibQxejCH3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Material UI&lt;/span&gt; 是一个组件库，用于 React，其中充满了你应该在项目中使用的强大组件。如果你只是想创建一个好看的应用程序，Material UI 可以为你提供坚实的预先风格的组件，将完成工作。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;React Blur Admin: &lt;span&gt;https://github.com/knledg/react-blur-admin&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;NextJS Material Dashboard: &lt;span&gt;https://www.creative-tim.com/product/nextjs-material-dashboard&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;WrapKit React Lite: &lt;span&gt;https://davidgrzyb.com/tailwind-admin-dashboard-template&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;React JS Landing: &lt;span&gt;https://react-landing-page-template.herokuapp.com/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Blueprint: &lt;span&gt;https://blueprintjs.com/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;Light Bootstrap Dashboard: &lt;span&gt;https://www.creative-tim.com/product/light-bootstrap-dashboard-react&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;Rebass: &lt;span&gt;https://rebassjs.org/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;React Reduction: &lt;span&gt;https://reduction-admin.github.io/react-reduction/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;Open: &lt;span&gt;https://open.cruip.com/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;Shards Dashboard Lite: &lt;span&gt;https://designrevision.com/downloads/shards-dashboard-lite-react/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;Argon Design System: &lt;span&gt;https://www.creative-tim.com/product/argon-design-system&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;Datta Able: &lt;span&gt;https://bootstrapbay.com/theme/datta-able-free-reactjs-admin-dashboard-template-BFD950F&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;p&gt;MatX: &lt;span&gt;https://hashnode.com/post/matx-react.ui-lib.com&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14]&lt;/span&gt;&lt;p&gt;Notus React: &lt;span&gt;https://demos.creative-tim.com/notus-react/?_ga=2.146436855.253176018.1614889298-744974027.1614551768#/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15]&lt;/span&gt;&lt;p&gt;Now UI Kit React: &lt;span&gt;https://www.creative-tim.com/product/now-ui-kit-react&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[16]&lt;/span&gt;&lt;p&gt;Core UI: &lt;span&gt;https://coreui.io/react/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[17]&lt;/span&gt;&lt;p&gt;Ant Design: &lt;span&gt;https://ant.design/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[18]&lt;/span&gt;&lt;p&gt;Material UI: &lt;span&gt;https://material-ui.com/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>91bf93a34e7704bb508a3c39b96b31b0</guid>
<title>Spring 内存木马检测思路</title>
<link>https://toutiao.io/k/07t0av0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;DispatcherServlet.java&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   HttpServletRequest processedRequest = request;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   HandlerExecutionChain mappedHandler = null;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   boolean multipartRequestParsed = false;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   try {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      ModelAndView mv = null;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      Exception dispatchException = null;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      try {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         // Determine handler adapter for the current request.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         // Process last-modified header, if supported by the handler.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         // Actually invoke the handler.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         mv = ha.handle(processedRequest, response, mappedHandler.getHandler());&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         if (asyncManager.isConcurrentHandlingStarted()) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;            return;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         applyDefaultViewName(processedRequest, mv);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         mappedHandler.applyPostHandle(processedRequest, response, mv);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      catch (Exception ex) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         dispatchException = ex;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;....&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>63c8317f7bfe926a674cd3b3967e2fb3</guid>
<title>关于中台，聊聊我认为相对客观的三点认知</title>
<link>https://toutiao.io/k/4x0e8oq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h3 data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.33184855233853006&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;898&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRgzIV2YTLYP1C9K6m6ZesXIGMic8cBk5es1ZicMDfULrExGEw49a51icWhlYkA1pXmib62xNNUDrMgXA/640?wx_fmt=png&quot;/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着去年阿里去中台事情的刷屏，一时间，坊间对中台的质疑声四起，好多人都在盛传“中台”已凉。&lt;/span&gt;&lt;span&gt;一开始就对中台概念存疑的人，现在有点幸灾乐祸，“我早就说么...”; 甚至还有人发出“这世界变化太快，让我静静”的哀叹。那真实情况真的就是这样么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;面对这种情况，我们有必要回到事情的最开始，去看什么是中台以及为什么我们要建设中台。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6701570680628273&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSgYBhLlrS8sorotTsQzlIZw8Lx0HZpLwiap1vC2FicPQ6xcWIib4Cf420y20wlVoIp3pGpV2smudA0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1146&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;三点认知&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一，中台不是阿里的中台，也不是Supercell的中台。 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中台这个词是阿里造的没错，但其本质和形态早就存在， 国内银行在2005年左右就开始的产品工厂的建设，包含了费用组件，利率组件，透支组件等等这些开箱即用的组件，以方便快速地拼装支持对前台需求的快速响应，这就是早期的中台概念。 后来我们做渠道整合，同样也是对类似能力的一次整理和提炼，以达到多渠道协同作战的目的。 金融业尤其是银行业也意识到竖井式的开发造成了很大的资源浪费，在协同方面产生了严重的割裂。 所以要说本质上的中台，银行是走在阿里前面的，只是囿于部门制的掣肘，执行落地的效果不是那么明显。 局部性的中台早就存在。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第二，中台不仅仅是解决重复造轮子的问题，而恰恰是可以解决快速创新的问题。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;中台的确不能解决从0到1的问题，因为一开始它就没有这个使命，一件事情从来不能解决所有问题。 业界很多人对中台进行了误读并把架构理解归纳成“薄前台，厚中台和稳后台”，这是多么大的误解！前台是听得见炮火的地方，因此要负责从0到1的创新，所以当然不是薄前台， 而应该更加强调前台的灵动性吧。有一次我和一位银行业的朋友聊到中台，他做过科技部门的负责人后来做了网金部老总，他深有感触，怎么能把前台做薄？在做生态的时候，面对的商户和对接的其他第三方差异化这么大，前台怎么能薄得了？ 是的，前台和中台是不能以薄厚来区分的。随着前台创新的逐步累积，有些能力是需要被重复使用的，这时候应该将能力进行提炼，放进中台，所以中台是慢慢长出来的，而不是空穴来风地造出来的。 中台能力是个逐步演化的过程，承接前台逐渐成熟的共性能力，解决从1到100的创新过程。 因此中台当然不是反创新的，只是赋能的创新阶段不同。 中台适合的打仗，是全面开花式的打仗，而不是单刀赴会的打仗。 中台适合的打仗是前台的阿米巴单元迅速出击而中台为其迅速装上弹药的打仗。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三，把中台和垄断挂钩，中台表示冤枉。 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一方面我们可能对中台期望过高，让它背负了原不应该有的责任，再次重申，中台可以解决后期快速创新的问题，但不解决从无到有的问题。另一方面正本清源，中台为创新而来，而不是为了强管控和垄断而生，中台讲话，请把这顶不属于我的帽子摘掉！从中台神器到中台无用，这一切极左极右的思想都是要被反对的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中台不仅仅是阿里的中台，究其本质和形态其实很早就存在，例如银行系统中的费率组件、利率组件等等这些开箱即用的组件，所有这种能够快速支持前台需求的通用组件，就是最初的中台概念。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里拆中台，并不是因为中台不行了，而是场景的不同，它需要的是颠覆式的创新。而中台在提升组织效率、进行组合式创新等方面还是非常优秀的，这对于许多面临这方面问题的企业来说，中台依然适用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于有中台概念的架构来说，其实想想，用“灵前台，强中台，稳后台”来描述更为合适吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSgYBhLlrS8sorotTsQzlIZXKyO9u9uzQtLLNzpG3bmzB7qhxfb9GrJFia8k2dYVqENQ5Qnib8A5pNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1155&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;·················· &lt;/span&gt;&lt;span&gt;END&lt;/span&gt;&lt;span&gt; ··················&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;点击关注公众号，免费领取程序员成长大礼包&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3MDg5MDkzOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQmUQ0Aca9qSYNFn0tQEXQc5EibBkqQLYtibYBj1hXuagwXkNc3kVwplHxIl7KQfBIiagysgn9GDUUibw/0?wx_fmt=png&quot; data-nickname=&quot;架构精进之路&quot; data-alias=&quot;jiagou_jingjin&quot; data-signature=&quot;十年研发风雨路，大厂架构师，CSDN博客专家。专注软件架构研究，技术学习与职业成长，坚持分享接地气儿的架构技术干货文章！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;十年研发风雨路，大厂架构师，&lt;/span&gt;&lt;span&gt;CSDN博客专家&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;专注架构技术沉淀学习及分享，职业与认知升级&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;坚持分享接地气儿的干货文章，&lt;span&gt;期待与你一起成长&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;往期热文推荐：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98311&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTqLjdQBs7fV8zqHRaQhA2ibia13fFn6ibS5qr5PpmZoxd8nlhAyJu7d1CjLicAruicOEb7uxibEGM476xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87502&quot;&gt;&lt;p&gt;&lt;span&gt;「技术架构精进」专注架构研究，技术分享&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Thanks for reading!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;点“赞”和“在看”哦&lt;/span&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1.5925925925925926&quot; data-type=&quot;gif&quot; data-w=&quot;135&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/noz2jw2hPlWiaCrGuJxBicU5mcib3QapDLyo6eKnNVm9dPTV4Z1SicHLtrCCwOG9gblMBFlKf7p9cvwL6wIkZJvamg/640?wx_fmt=gif&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c18f27171a0b6965c3cadaf822407f54</guid>
<title>千亿级公司低代码平台的测试体系介绍</title>
<link>https://toutiao.io/k/frzkkqc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6666667&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR79PE4l6LL8jUWcdBYy5LpgK4iaCKhqM0heACgGpu24ob9CSFe9KthkuyIn9uQCoQJgrObS18psSXyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;点击关注“&lt;span&gt;有赞coder&lt;/span&gt;”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;获取更多技术干货哦～&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;314&quot; data-ratio=&quot;0.66484375&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/PfMGv3PxR7ibUoF5RvdbpsiclnWn0AzTkAjVOMypQC0I4bjoKvY6mNkopUqjicvVIIfgLuo4RUTvazqk5L5G94MoQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作者：景容&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;部门：技术中心/业务中台/测试开发&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;一、有赞低代码平台-bos介绍&lt;/h2&gt;&lt;h3&gt;1.1、什么是低代码平台&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;   低代码开发平台已经成为现在很多企业开发管理应用程序的重要工具，低代码平台的出现帮助企业降低了软件开发的成本，提高了软件开发的效率，越来越多的公司开始开发低代码平台，甚至基于低代码平台开始商业化，比如微软的Power Platform,Salesforce的Lightning，阿里的星环等，我在这里介绍一下有赞的低代码开发平台-BOS。&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;1.2、什么是BOS，解决什么问题&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;    商业操作系统（Business Operating System），商家的经营需要广告曝光，销售员，货品，快递，资产，营销策划，服务等要素，企业数字化前提是对经营要素进行数字化，现实世界承担执行和信息采集，而虚拟世界事前模拟推演得出最佳路径和步骤，从而提升商家经营效率。&lt;br/&gt;&lt;br/&gt;    BOS对经营要素进行数字化登记，并提供了搭建工具，用于集成数字化后的要素，按商家的意愿来调度要素，来构建企业数字化的各种业务链路，被数字化后的要素称之为”组件“。”组件“多来自生态，市场化运作方式商家可以集成优质的要素从而丰富货源，提升服务水平，内容得到精准的曝光，用户体验链路更加细腻。要素需要生态共识的”数据标准“才能被按需集成，而有赞则是标准的起草者，便于买家认知，也是组件接入和执行的依据，还能建立组件之间的通讯。&lt;br/&gt;&lt;br/&gt;     商业操作系统致力于用无代码编排替代传统编码方式来集成要素实现业务需求，来满足千差万别的企业数字化要求。另外，也降低了研发门槛，倡导“全民研发”的理念，让运营人员自行调整逻辑和交互，最大限度释放创造力还原一个点子，即时、高效、低成本验证数字化方案的可行性，并且全链路的逻辑一览无余。&lt;br/&gt;&lt;br/&gt;    接入的组件都依赖数据标准，彼此之间无依赖，这就让分布式独立开发组件变得可行，从而垂直业务，ISV，商家都能提供组件，运营按编排成为产品，多版本的迭代并相互隔离。&lt;br/&gt;&lt;br/&gt;    综上，BOS由数据标准，组件接入标准，应用层编排模型，规则引擎，数据连接器，组件扩展标准，自动测试/运维，产品授权和鉴权，产品模板，开发者准入、培训和认证体系，经营者商业关系管理，以及市场化运作方式构成。&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;1.3、以交易接入为例，讲述一下bos发展&lt;/h3&gt;&lt;p&gt;&lt;code&gt; &lt;img data-ratio=&quot;0.5362903225806451&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibUoF5RvdbpsiclnWn0AzTkAuD1Q7Aq1VGicI1bLOfGtsIOW1eQ5gDmG5leqfWEGlia71HicxMfOXWyCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;   &lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;小结：因为本文重点讲的是bos的测试体系，对于bos的内容不过多赘述了，有兴趣的小伙伴可以查看有赞coder的文章，里面有更多相关bos的内容。&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;二、业务代码接入低代码平台的测试用例设计和自动化介绍&lt;/h2&gt;&lt;h3&gt;2.1、bos测试case的设计思路&lt;/h3&gt;&lt;p&gt;&lt;code&gt;   bos主要的核心主要是将业务需求结构化，比如针对交易，先是把交易业务抽象成订单确认，下单等一个一个工作流，工作流是由一个一个业务产品组成，如这里的（订单基础产品，渠道数量产品，自提产品等），产品之间会有一些叠加互斥的关系，然后产品内部，又是由一个一个活动任务组成如（数据初始化，业务校验，业务装配等），再然后活动任务，又是由一个一个组件组成（组件由开发编码并上传到bos）。针对这样的结构化的需求，我们需要把对应的case也做结构化，需要针对不同组件改动设计组件的测试case，针对活动任务合在一起的产品设计针对产品的测试case，针对整个大的工作流设计工作流的测试case。我们的测试case，需要跟着业务代码的结构化，而做结构化，从而达到精准并且全面得测试到某个组件，某个产品，某个工作流的目的。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;img data-ratio=&quot;0.8001737619461338&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibUoF5RvdbpsiclnWn0AzTkAsSNDkfaZGu1tg7tuIlnic0zPN4aTNhlnTmqyeBWY58zJuEGqPwrsWfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2302&quot;/&gt;&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;2.2、bos测试case的自动化&lt;/h3&gt;&lt;p&gt;&lt;code&gt;   bos的产品是一个持续迭代的过程，其实对于测试同学来讲这就相当于一个大规模的重构项目，所以自动化回归是必不可少的手段，针对bos开发流程，我的自动化测试策略也做了一些适配，bos在开发之前会先做大量的需求结构化，然后把原来的需求拆分成一个一个组件，所以开始阶段，我们先对组件进行case的结构化梳理，并编写自动化case，在开发提测时，之前的自动化case可以作为开发的准入case，同时这部分case也可以赋能开发自测，然后进行qa测试，这个阶段主要执行之前编写自动化case执行，并在上预发之前，把全量针对组件的自动化case执行通过，作为上预发之前的准入执行。预发测试过程中除了必要的功能回归，这边还会执行全量的预发自动化case，以及流量回放（流量回放的具体策略在下一节详细描述），待这些都通过后开始发布组件。组件依次发布完成后，开发同学会把组件配置到bos上去，形成一个个可视化的产品，工作流。具体的测试策略和组件的测试一致，只是把之前组件级的自动化case换成了产品级和工作流级的自动化case。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;img data-ratio=&quot;0.8569989929506546&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibUoF5RvdbpsiclnWn0AzTkAvmN5BkxjlrobJ1c8QOia67MmjgSYa49NveREoFvaiby1dW0eYMq3Pv0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1986&quot;/&gt;&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;三、业务代码接入低代码平台的流量回放介绍&lt;/h2&gt;&lt;h3&gt;3.1、流量回放介绍&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;    先简要介绍一些有赞的流量回放平台，流量回放顾名思义就是采集线上的流量，在预发或者测试环境跑线上的流量，differ结果，找到差异的一种手段。有赞这边的流量回放，是基于开源的sandbox实现的，原理上是通过sandbox采集线上的流量，并通过消息的方式告知到流量回放平台，流量回放平台再把这部分流量到预发上跑（主要是读接口），或者把这部分流量到qa环境跑，不过需要mock外部依赖（读写都有）。有赞这里预发回放目前只支持读接口，因为如果是写接口，会写入线上db，变成脏数据，污染线上环境。&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;3.2、bos基于流量回放的测试&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;    前面说到业务接入bos，对测试来讲其实就类似于一个大规模的重构，如此大规模的重构，靠人工设计测试用例，势必很容易会有遗漏的地方，所以做完人工的自动化回归之后，我们引入流量回放的方式来辅助测试，来防治遗漏一些我们设计用例过程中场景比较偏比较容易遗漏的场景。针对于读接口，我们采用线上采集线下回放的方式，因为平台天然适配，取得了不错的效果。但是对于写接口，因为平台不支持，但是如果采用线上采集，qa环境回放，因为是外部依赖是mock，需要根据调用外部依赖的入参，去匹配mock的值，但是我们这边有很多借口是随机值，经常会导致回放失败，走不通，所以我们最后选择了一个中间方案。对于写接口（这边以订单创建接口为例），我们将订单创建接口剥离出了只读的部分（下单在[业务装配]活动任务前无数据写入），预发提供两套读接口，一套老流程无数据写入返回合同，一套bos流程无数据写入返回合同。抓取线上流量，在预发执行两个接口，比对返回值是否符合预期，主要实现如下图：&lt;br/&gt;&lt;img data-ratio=&quot;0.7796610169491526&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibUoF5RvdbpsiclnWn0AzTkApgiax62RpWghqNzibKJERDVjhMtwhf1WKl63tr4Djmnjf89c0SJ2VX5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1003&quot;/&gt;&lt;br/&gt;&lt;/code&gt;&lt;p&gt;&lt;code&gt;    这个方案目前仅仅是一个过渡方案，后面对于这样写接口，我们的初步想法，是利用影子链路，在写接口落库操作的时候带上影子标，进入影子表，然后比对生产和影子链路的数据，也可以比较接口的返回，初步设想如下图：&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;img data-ratio=&quot;0.9311551925320887&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibUoF5RvdbpsiclnWn0AzTkAke0XUgxxm1uqW8iarichaAPAmnpSCkGn8B26DqXeXvvoQibLuIdVYIpGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1714&quot;/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2&gt;四、业务代码接入低代码平台的压测方案介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;    对于压测方案，我们主要是希望，在进行bos化改造之后，系统的性能不要下降，所以我们这边的压测策略选择了单机压测，相同的qps，观察分别走新老链路的性能指标。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;img data-ratio=&quot;0.42229367631296894&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibUoF5RvdbpsiclnWn0AzTkAic8cic0Mib8zvwFG0QkWKPZJxZpp3sdSrZ8OiaRodM3oV7uc9l1SObGWMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1866&quot;/&gt;&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;五、业务代码接入低代码平台的兜底方案介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;   在上线过程中，为了防止接入bos出现bug，我们有一套比较详细的兜底方案，我们会针对在切流过程中，出现对各种由bos平台导致的异常进行降级兜底，触发兜底之后，会走到老的链路，同时配置监控告警，防止对线上业务产生影响。兜底方案如下图：&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;img data-ratio=&quot;1.2211796246648794&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibUoF5RvdbpsiclnWn0AzTkAkUIZ6EsCPt4o84Tkr3jmcPyGlmnPdGrYImArrbrs0dfTJP0GoMZ5icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;746&quot;/&gt;&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;六、总结&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;   bos在有赞是一个比较新的东西，针对bos的测试手段目前也在摸索当中，针对现有的业务，我们沉淀了一些测试策略，并在不断迭代改进中，比如我们设想在测试过程中，可以显式告诉我们组件的调用过程，帮助我们进行问题排查；比如目前无论是组件的，产品的，工作流级别的case入口，都是工作流的接口，是否可以将其拆分开来，做具有针对性的测试，等等。希望在不久的将来，我们可以有一套非常完备的业务接入bos的测试解决方案。&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;h2&gt;&lt;span&gt;招聘信息二维码如下：&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9466666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR79DvwicglNLWx1bMtnpictVNAiaK5QDxkia42XVYUxrL157YVBxM6Hn18ZkUZYaqLKTaibGwShk9vJLxCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxOTY5MDMxNA==&amp;amp;mid=2455760507&amp;amp;idx=1&amp;amp;sn=9996ae54503e9579ec33981a1f88a060&amp;amp;chksm=8c68685ebb1fe1488e253bbd0581c7f0794a1c74e0e71a73a881a5a10e2625f024dbf80bb5e9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;有赞iOS-基于二进制的编译提效策略&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxOTY5MDMxNA==&amp;amp;mid=2455760507&amp;amp;idx=1&amp;amp;sn=9996ae54503e9579ec33981a1f88a060&amp;amp;chksm=8c68685ebb1fe1488e253bbd0581c7f0794a1c74e0e71a73a881a5a10e2625f024dbf80bb5e9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;有赞iOS-基于二进制的编译提效策略&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxOTY5MDMxNA==&amp;amp;mid=2455760507&amp;amp;idx=1&amp;amp;sn=9996ae54503e9579ec33981a1f88a060&amp;amp;chksm=8c68685ebb1fe1488e253bbd0581c7f0794a1c74e0e71a73a881a5a10e2625f024dbf80bb5e9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;有赞iOS-基于二进制的编译提效策略&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span data-raw-text=&quot;V&quot; data-textnode-index=&quot;89&quot; data-index=&quot;3359&quot; class=&quot;character&quot;&gt;V&lt;/span&gt;&lt;span data-raw-text=&quot;o&quot; data-textnode-index=&quot;89&quot; data-index=&quot;3360&quot; class=&quot;character&quot;&gt;o&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;89&quot; data-index=&quot;3361&quot; class=&quot;character&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;.&quot; data-textnode-index=&quot;89&quot; data-index=&quot;3362&quot; class=&quot;character&quot;&gt;.&lt;/span&gt;&lt;span data-raw-text=&quot;3&quot; data-textnode-index=&quot;89&quot; data-index=&quot;3363&quot; class=&quot;character&quot;&gt;376&lt;/span&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index=&quot;89&quot; data-index=&quot;3365&quot; class=&quot;character&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;246&quot; data-ratio=&quot;0.43796296296296294&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR79w4ic3ib3qebZI7UYPETxDHmR4LeTtkEkp5kQgJI3LhAOt33dSAqEJxN0LaBeUR4a5f6iabXpjxYl2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;‍‍&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>31fadf00cc70637f2da4b4c3b9c7cd9b</guid>
<title>殷浩详解 DDD：如何避免写流水账代码？</title>
<link>https://toutiao.io/k/iwkig90</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                                    


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLkUTqbFoY1WeIwssRA5Vt9JcicHHgm1Oswcr6GSvoSk1LLibFVbnLEPp0bia5Ir2OTicNWAekhzHuWYw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在日常工作中我观察到，面对老系统重构和迁移场景，有大量代码属于流水账代码，通常能看到开发在对外的API接口里直接写业务逻辑代码，或者在一个服务里大量的堆接口，导致业务逻辑实际无法收敛，接口复用性比较差。所以本文主要想系统性的解释一下如何通过DDD的重构，将原有的流水账代码改造为逻辑清晰、职责分明的模块。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;一  案例简介&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里举一个简单的常见案例：下单链路。假设我们在做一个checkout接口，需要做各种校验、查询商品信息、调用库存服务扣库存、然后生成订单：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicCictGq3wX46rzGNnouXLjdhoqCjc3T8ZGu2gBiaia5Ghy02J0Kz4jxCCSgPNrdKu41CibdZfSJIIrLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.22407407407407406&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一个比较典型的代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;前言&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;还是要继续道歉，文章产出速度较慢，工作太忙，同时对文章质量有追求。但可以保证的是文章中的内容都经过了反复实践和踩坑。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在过去一年里我们团队做了大量的老系统重构和迁移，其中有大量的代码属于流水账代码，通常能看到是开发在对外的API接口里直接写业务逻辑代码，或者在一个服务里大量的堆接口，导致业务逻辑实际无法收敛，接口复用性比较差。所以这讲主要想系统性的解释一下如何通过DDD的重构，将原有的流水账代码改造为逻辑清晰、职责分明的模块。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1. 案例简介&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这里举一个简单的常见案例：下单链路。假设我们在做一个checkout接口，需要做各种校验、查询商品信息、调用库存服务扣库存、然后生成订单：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;97xrhg&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:51888,&amp;quot;width&amp;quot;:748,&amp;quot;height&amp;quot;:168,&amp;quot;rotation&amp;quot;:0,&amp;quot;src&amp;quot;:&amp;quot;https://ata2-img.oss-cn-zhangjiakou.aliyuncs.com/neweditor/528a4c15-ce3f-491a-945f-00f680ef0488.png&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;一个比较典型的代码如下：&amp;quot;]]]]&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@RequestMapping(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;/&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutController&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ItemService itemService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; InventoryService inventoryService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; OrderRepository orderRepository;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@PostMapping(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;checkout&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Result&amp;lt;OrderDO&amp;gt; checkout(&lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; itemId, Integer quantity) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; userId = SessionUtils.getLoggedInUserId();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (userId &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.fail(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Not Logged In&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (itemId &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; || quantity &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; || quantity &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.fail(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Invalid Args&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ItemDO item = itemService.getItem(itemId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (item == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.fail(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Item Not Found&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        boolean withholdSuccess = inventoryService.withhold(itemId, quantity);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!withholdSuccess) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.fail(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Inventory not enough&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; cost = item.getPriceInCents() * quantity;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        OrderDO order = new OrderDO();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setItemId(itemId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setBuyerId(userId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setSellerId(item.getSellerId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setCount(quantity);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setTotalCost(cost);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        orderRepository.createOrder(order);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.success(order);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;p&gt;&lt;span&gt;为什么这种典型的流水账代码在实际应用中会有问题呢？其本质问题是违背了SRP（Single Responsbility Principle）单一职责原则。这段代码里混杂了业务计算、校验逻辑、基础设施、和通信协议等，在未来无论哪一部分的逻辑变更都会直接影响到这段代码，当后人不断地在上面叠加新的逻辑时，会使代码复杂度增加、逻辑分支越来越多，最终造成bug或者没人敢重构的历史包袱。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以我们才需要用DDD的分层思想去重构一下以上的代码，通过不同的代码分层和规范，拆分出逻辑清晰，职责明确的分层和模块，也便于一些通用能力的沉淀。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主要的几个步骤分为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面会针对每个点做详细的解释。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;二  Interface接口层&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着REST和MVC架构的普及，经常能看到开发同学直接在Controller中写业务逻辑，如上面的典型案例，但实际上MVC Controller不是唯一的重灾区。以下的几种常见的代码写法通常都可能包含了同样的问题：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些的方法都有一个共同的点就是都有自己的网络协议，而如果我们的业务代码和网络协议混杂在一起，则会直接导致代码跟网络协议绑定，无法被复用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，在DDD的分层架构中，我们单独会抽取出来Interface接口层，作为所有对外的门户，将网络协议和业务逻辑解耦。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  接口层的组成&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接口层主要由以下几个功能组成：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然，如果有一个独立的网关设施/应用，则可以抽离出鉴权、Session、限流、日志等逻辑，但是目前来看API网关也只能解决一部分的功能，即使在有API网关的场景下，应用里独立的接口层还是有必要的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在Interface层，鉴权、Session、限流、缓存、日志等都比较直接，只有一个异常处理的点需要重点说下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  返回值和异常处理规范，Result vs Exception&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;注：这部分主要还是面向REST和RPC接口，其他的协议需要根据协议的规范产生返回值。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在我见过的一些代码里，接口的返回值比较多样化，有些直接返回DTO甚至DO，另一些返回Result。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接口层的核心价值是对外，所以如果只是返回DTO或DO会不可避免的面临异常和错误栈泄漏到使用方的情况，包括错误栈被序列化反序列化的消耗。所以，这里提出一个规范：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;Interface层的HTTP和RPC接口，返回值为Result，捕捉所有异常&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Application层的所有接口返回值为DTO，不负责处理异常&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Application层的具体规范等下再讲，在这里先展示Interface层的逻辑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举个例子：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@PostMapping(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;checkout&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Result&amp;lt;OrderDTO&amp;gt; checkout(&lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; itemId, Integer quantity) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        CheckoutCommand cmd = new CheckoutCommand();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        OrderDTO orderDTO = checkoutService.checkout(cmd);    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.success(orderDTO);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (ConstraintViolationException cve) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.fail(cve.getMessage());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.fail(e.getMessage());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当然，每个接口都要写异常处理逻辑会比较烦，所以可以用AOP做个注解&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;span&gt;当然，每个接口都要写异常处理逻辑会比较烦，所以可以用AOP做个注解：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/article&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Target(ElementType.METHOD)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;@interface&lt;/span&gt; ResultHandler {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ResultAspect&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Around(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;@annotation(ResultHandler)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Object logExecutionTime(ProceedingJoinPoint joinPoint) throws Throwable {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Object proceed = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            proceed = joinPoint.proceed();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (ConstraintViolationException cve) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.fail(cve.getMessage());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.fail(e.getMessage());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; proceed;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;然后最终代码则简化为：&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;span&gt;然后最终代码则简化为：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@PostMapping(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;checkout&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ResultHandler&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Result&amp;lt;OrderDTO&amp;gt; checkout(&lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; itemId, Integer quantity) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CheckoutCommand cmd = new CheckoutCommand();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    OrderDTO orderDTO = checkoutService.checkout(cmd);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.success(orderDTO);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  接口层的接口的数量和业务间的隔离&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在传统REST和RPC的接口规范中，通常一个领域的接口，无论是REST的Resource资源的GET/POST/DELETE，还是RPC的方法，是追求相对固定的，统一的，而且会追求统一个领域的方法放在一个领域的服务或Controller中。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是我发现在实际做业务的过程中，特别是当支撑的上游业务比较多时，刻意去追求接口的统一通常会导致方法中的参数膨胀，或者导致方法的膨胀。举个例子：假设有一个宠物卡和一个亲子卡的业务公用一个开卡服务，但是宠物需要传入宠物类型，亲子的需要传入宝宝年龄。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CardService&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;Result &lt;span class=&quot;code-snippet__title&quot;&gt;openCard&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; petType, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; babyAge&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;Result &lt;span class=&quot;code-snippet__title&quot;&gt;openCardV2&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;Result &lt;span class=&quot;code-snippet__title&quot;&gt;openPetCard&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; petType&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;Result &lt;span class=&quot;code-snippet__title&quot;&gt;openBabyCard&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; babyAge&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;可&lt;/span&gt;&lt;span&gt;以看出来，无论怎么操作，都有可能导致CardService这个服务未来越来越难以维护，方法越来越多，一个业务的变更有可能会导致整个服务/Controller的变更，最终变得无法维护。我曾经参与过的一个服务，提供了几十个方法，上万行代码，可想而知无论是使用方对接口的理解成本还是对代码的维护成本都是极高的。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，这里提出另一个规范：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;一个Interface层的类应该是“小而美”的，应该是面向“一个单一的业务”或“一类同样需求的业务”，需要尽量避免用同一个类承接不同类型业务的需求。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基于上面的这个规范，可以发现宠物卡和亲子卡虽然看起来像是类似的需求，但并非是“同样需求”的，可以预见到在未来的某个时刻，这两个业务的需求和需要提供的接口会越走越远，所以需要将这两个接口类拆分开：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;PetCardService&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;Result &lt;span class=&quot;code-snippet__title&quot;&gt;openPetCard&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; petType&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BabyCardService&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;Result &lt;span class=&quot;code-snippet__title&quot;&gt;openBabyCard&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; babyAge&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这个的好处是符合了Single Responsibility Principle单一职责原则，也就是说一个接口类仅仅会因为一个（或一类）业务的变化而变化。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;一个建议是当一个现有的接口类过度膨胀时，可以考虑对接口类做拆分，拆分原则和SRP一致。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;也许会有人问，如果按照这种做法，会不会产生大量的接口类，导致代码逻辑重复？答案是不会，因为在DDD分层架构里，接口类的核心作用仅仅是协议层，每类业务的协议可以是不同的，而真实的业务逻辑会沉淀到应用层。也就是说Interface和Application的关系是多对多的：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;jc&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;75rqpn&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:45232,&amp;quot;width&amp;quot;:446,&amp;quot;height&amp;quot;:266,&amp;quot;rotation&amp;quot;:0,&amp;quot;src&amp;quot;:&amp;quot;https://ata2-img.oss-cn-zhangjiakou.aliyuncs.com/neweditor/254f7876-98c6-43be-bb4c-bd4d5b792c93.png&amp;quot;,&amp;quot;uploadPercent&amp;quot;:100},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;因为业务需求是快速变化的，所以接口层也要跟着快速变化，通过独立的接口层可以避免业务间相互影响，但我们希望相对稳定的是Application层的逻辑。所以我们接下来看一下Application层的一些规范。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3. Application层&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3.1 Application层的组成部分&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Application层的几个核心类：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;cn64tlsh4b&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ApplicationService应用服务：最核心的类，负责业务流程的编排，但本身不负责任何业务逻辑&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;cn64tlsh4b&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DTO Assembler：负责将内部领域模型转化为可对外的DTO&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;cn64tlsh4b&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;,&amp;quot;extraData&amp;quot;:{}},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Command、Query、Event对象：作为ApplicationService的入参&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;cn64tlsh4b&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;,&amp;quot;extraData&amp;quot;:{}},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;返回的DTO：作为ApplicationService的出参&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Application层最核心的对象是ApplicationService，它的核心功能是承接“业务流程“。但是在讲ApplicationService的规范之前，必须要先重点的讲几个特殊类型的对象，即Command、Query和Event。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3.2 Command、Query、Event对象&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;从本质上来看，这几种对象都是Value Object，但是从语义上来看有比较大的差异：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;f0dl0yedam&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Command指令：指调用方明确想让系统操作的指令，其预期是对一个系统有影响，也就是写操作。通常来讲指令需要有一个明确的返回值（如同步的操作结果，或异步的指令已经被接受）。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;f0dl0yedam&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Query查询：指调用方明确想查询的东西，包括查询参数、过滤、分页等条件，其预期是对一个系统的数据完全不影响的，也就是只读操作。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;f0dl0yedam&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Event事件：指一件已经发生过的既有事实，需要系统根据这个事实作出改变或者响应的，通常事件处理都会有一定的写操作。事件处理器不会有返回值。这里需要注意一下的是，Application层的Event概念和Domain层的DomainEvent是类似的概念，但不一定是同一回事，这里的Event更多是外部一种通知机制而已。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;简单总结下：&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;span&gt;这个的好处是符合了Single Responsibility Principle单一职责原则，也就是说一个接口类仅仅会因为一个（或一类）业务的变化而变化。一个建议是当一个现有的接口类过度膨胀时，可以考虑对接口类做拆分，拆分原则和SRP一致。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;也许会有人问，如果按照这种做法，会不会产生大量的接口类，导致代码逻辑重复？答案是不会，因为在DDD分层架构里，接口类的核心作用仅仅是协议层，每类业务的协议可以是不同的，而真实的业务逻辑会沉淀到应用层。也就是说Interface和Application的关系是多对多的：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicCictGq3wX46rzGNnouXLjdNDyS8My6eHMtwU7xxQLQhr1JHDssAYNCc0u1lFve1nFMRahysbjibcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5977777777777777&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为业务需求是快速变化的，所以接口层也要跟着快速变化，通过独立的接口层可以避免业务间相互影响，但我们希望相对稳定的是Application层的逻辑。所以我们接下来看一下Application层的一些规范。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;三  Application层&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  Application层的组成部分&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Application层的几个核心类：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Application层最核心的对象是ApplicationService，它的核心功能是承接“业务流程“。但是在讲ApplicationService的规范之前，必须要先重点的讲几个特殊类型的对象，即Command、Query和Event。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  Command、Query、Event对象&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从本质上来看，这几种对象都是Value Object，但是从语义上来看有比较大的差异：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;简单总结下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.32233009708737864&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naLkUTqbFoY1WeIwssRA5Vt9O2KCUTKPOu8RnBibFfdqia2bjZGgnaEIdcEnR0DtT8kqoiaCS43kC4CuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;为什么要用CQE对象？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通常在很多代码里，能看到接口上有多个参数，比如上文中的案例：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;Result&amp;lt;OrderDO&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;checkout&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Long itemId, Integer quantity&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果需要在接口上增加参数，考虑到向前兼容，则需要增加一个方法：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;Result&amp;lt;OrderDO&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;checkout&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Long itemId, Integer quantity&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;Result&amp;lt;OrderDO&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;checkout&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Long itemId, Integer quantity, Integer channel&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;或者常见的查询方法，由于条件的不同导致多个方法：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;List&amp;lt;OrderDO&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;queryByItemId&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Long itemId&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;List&amp;lt;OrderDO&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;queryBySellerId&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Long sellerId&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;List&amp;lt;OrderDO&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;queryBySellerIdWithPage&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Long sellerId, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; currentPage, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; pageSize&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看出来，传统的接口写法有几个问题：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是另外一个最重要的问题是：&lt;/span&gt;&lt;span&gt;这种类型的参数罗列，本身没有任何业务上的”语意“，只是一堆参数而已，无法明确的表达出来意图。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;CQE的规范&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以在Application层的接口里，强力建议的一个规范是：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;ApplicationService的接口入参只能是一个Command、Query或Event对象，CQE对象需要能代表当前方法的语意。唯一可以的例外是根据单一ID查询的情况，可以省略掉一个Query对象的创建。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;按照上面的规范，实现案例是：&lt;/span&gt;&lt;/section&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可以看出来，传统的接口写法有几个问题：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;jy2er63wwls&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;decimal&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;DEC_LEN_LROM_P&amp;quot;},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;接口膨胀：一个查询条件一个方法&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;jy2er63wwls&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;decimal&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;DEC_LEN_LROM_P&amp;quot;},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;难以扩展：每新增一个参数都有可能需要调用方升级&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;jy2er63wwls&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;decimal&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;DEC_LEN_LROM_P&amp;quot;},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;难以测试：接口一多，职责随之变得繁杂，业务场景各异，测试用例难以维护&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;但是另外一个最重要的问题是：这种类型的参数罗列，本身没有任何业务上的”语意“，只是一堆参数而已，无法明确的表达出来意图。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CQE的规范：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;所以在Application层的接口里，强力建议的一个规范是：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;blockquote&amp;quot;:true,&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;规范：ApplicationService的接口入参只能是一个Command、Query或Event对象，CQE对象需要能代表当前方法的语意。唯一可以的例外是根据单一ID查询的情况，可以省略掉一个Query对象的创建&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;按照上面的规范，实现案例是：&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    OrderDTO checkout(&lt;span class=&quot;code-snippet__meta&quot;&gt;@Valid&lt;/span&gt; CheckoutCommand cmd);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    List&amp;lt;OrderDTO&amp;gt; query(OrderQuery query);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    OrderDTO getOrder(&lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; orderId); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutCommand&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; userId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; itemId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Integer quantity;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;OrderQuery&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; sellerId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; itemId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; int currentPage;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; int pageSize;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这个规范的好处是：提升了接口的稳定性、降低低级的重复，并且让接口入参更加语意化。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CQE vs DTO&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;从上面的代码能看出来，ApplicationService的入参是CQE对象，但是出参却是一个DTO，从代码格式上来看都是简单的POJO对象，那么他们之间有什么区别呢？&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;z4tddm6p1n9&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CQE：CQE对象是ApplicationService的输入，是有明确的”意图“的，所以这个对象必须保证其”正确性“。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;z4tddm6p1n9&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DTO：DTO对象只是数据容器，只是为了和外部交互，所以本身不包含任何逻辑，只是贫血对象。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;但可能最重要的一点：因为CQE是”意图“，所以CQE对象在理论上可以有”无限“个，每个代表不同的意图；但是DTO作为模型数据容器，和模型一一对应，所以是有限的。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CQE的校验&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CQE作为ApplicationService的输入，必须保证其正确性，那么这个校验是放在哪里呢？&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在最早的代码里，曾经有这样的校验逻辑，当时写在了服务里：&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;span&gt;这个规范的好处是：提升了接口的稳定性、降低低级的重复，并且让接口入参更加语意化。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;CQE vs DTO&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从上面的代码能看出来，ApplicationService的入参是CQE对象，但是出参却是一个DTO，从代码格式上来看都是简单的POJO对象，那么他们之间有什么区别呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但可能最重要的一点：因为CQE是”意图“，所以CQE对象在理论上可以有”无限“个，每个代表不同的意图；但是DTO作为模型数据容器，和模型一一对应，所以是有限的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;CQE的校验&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;CQE作为ApplicationService的输入，必须保证其正确性，那么这个校验是放在哪里呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在最早的代码里，曾经有这样的校验逻辑，当时写在了服务里：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (itemId &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;||&lt;/span&gt; quantity &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;||&lt;/span&gt; quantity &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.fail(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Invalid Args&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这种代码在日常非常常见，但其最大的问题就是大量的非业务代码混杂在业务代码中，很明显的违背了单一职责原则。但因为当时入参仅仅是简单的int，所以这个逻辑只能出现在服务里。现在当入参改为了CQE之后，我们可以利用java标准JSR303或JSR380的Bean Validation来前置这个校验逻辑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;CQE对象的校验应该前置，避免在ApplicationService里做参数的校验。可以通过JSR303/380和Spring Validation来实现。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;前面的例子可以改造为：&lt;/span&gt;&lt;/section&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这种代码在日常非常常见，但其最大的问题就是大量的非业务代码混杂在业务代码中，很明显的违背了单一职责原则。但因为当时入参仅仅是简单的int，所以这个逻辑只能出现在服务里。现在当入参改为了CQE之后，我们可以利用java标准JSR303或JSR380的Bean Validation来前置这个校验逻辑。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;blockquote&amp;quot;:true},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;规范：CQE对象的校验应该前置，避免在ApplicationService里做参数的校验。可以通过JSR303/380和Spring Validation来实现&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;前面的例子可以改造为：&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Validated&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutServiceImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    OrderDTO checkout(&lt;span class=&quot;code-snippet__meta&quot;&gt;@Valid&lt;/span&gt; CheckoutCommand cmd) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutCommand&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@NotNull(message = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;用户未登陆&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; userId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@NotNull&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Positive(message = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;需要是合法的itemId&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; itemId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@NotNull&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Min(value = 1, message = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;最少1件&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Max(value = 1000, message = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;最多不能超过1000件&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Integer quantity;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这种做法的好处是，让ApplicationService更加清爽，同时各种错误信息可以通过Bean Validation的API做各种个性化定制。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;避免复用CQE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;因为CQE是有“意图”和“语意”的，我们需要尽量避免CQE对象的复用，哪怕所有的参数都一样，只要他们的语意不同，尽量还是要用不同的对象。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;blockquote&amp;quot;:true},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;规范：针对于不同语意的指令，要避免CQE对象的复用&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;❌ 反例：一个常见的场景是“Create创建”和“Update更新”，一般来说这两种类型的对象唯一的区别是一个ID，创建没有ID，而更新则有。所以经常能看见有的同学用同一个对象来作为两个方法的入参，唯一区别是ID是否赋值。这个是错误的用法，因为这两个操作的语意完全不一样，他们的校验条件可能也完全不一样，所以不应该复用同一个对象。正确的做法是产出两个对象：&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;span&gt;这种做法的好处是，让ApplicationService更加清爽，同时各种错误信息可以通过Bean Validation的API做各种个性化定制。&lt;/span&gt;&lt;/section&gt;&lt;/article&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;避免复用CQE&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为CQE是有“意图”和“语意”的，我们需要尽量避免CQE对象的复用，哪怕所有的参数都一样，只要他们的语意不同，尽量还是要用不同的对象。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;规范：针对于不同语意的指令，要避免CQE对象的复用。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;反例：一个常见的场景是“Create创建”和“Update更新”，一般来说这两种类型的对象唯一的区别是一个ID，创建没有ID，而更新则有。所以经常能看见有的同学用同一个对象来作为两个方法的入参，唯一区别是ID是否赋值。这个是错误的用法，因为这两个操作的语意完全不一样，他们的校验条件可能也完全不一样，所以不应该复用同一个对象。正确的做法是产出两个对象：&lt;/span&gt;&lt;/section&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这种做法的好处是，让ApplicationService更加清爽，同时各种错误信息可以通过Bean Validation的API做各种个性化定制。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;避免复用CQE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;因为CQE是有“意图”和“语意”的，我们需要尽量避免CQE对象的复用，哪怕所有的参数都一样，只要他们的语意不同，尽量还是要用不同的对象。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;blockquote&amp;quot;:true},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;规范：针对于不同语意的指令，要避免CQE对象的复用&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;❌ 反例：一个常见的场景是“Create创建”和“Update更新”，一般来说这两种类型的对象唯一的区别是一个ID，创建没有ID，而更新则有。所以经常能看见有的同学用同一个对象来作为两个方法的入参，唯一区别是ID是否赋值。这个是错误的用法，因为这两个操作的语意完全不一样，他们的校验条件可能也完全不一样，所以不应该复用同一个对象。正确的做法是产出两个对象：&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    OrderDTO checkout(&lt;span class=&quot;code-snippet__meta&quot;&gt;@Valid&lt;/span&gt; CheckoutCommand cmd);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    OrderDTO updateOrder(&lt;span class=&quot;code-snippet__meta&quot;&gt;@Valid&lt;/span&gt; UpdateOrderCommand cmd);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UpdateOrderCommand&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@NotNull(message = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;用户未登陆&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; userId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@NotNull(message = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;必须要有OrderID&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; orderId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@NotNull&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Positive(message = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;需要是合法的itemId&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; itemId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@NotNull&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Min(value = 1, message = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;最少1件&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Max(value = 1000, message = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;最多不能超过1000件&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Integer quantity;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  ApplicationService&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ApplicationService负责了业务流程的编排，是将原有业务流水账代码剥离了校验逻辑、领域计算、持久化等逻辑之后剩余的流程，是“胶水层”代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;参考一个简易的交易流程：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicCictGq3wX46rzGNnouXLjdrpTC8DCl7Jicxq56Gg5Z9HJU8ibHFmJeckMBVEGKiaI5BSyqUbTdNuApA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.1574074074074074&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这个案例里可以看出来，交易这个领域一共有5个用例：下单、支付成功、支付失败关单、物流信息更新、关闭订单。这5个用例可以用5个Command/Event对象代替，也就是对应了5个方法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我见过3种ApplicationService的组织形态：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）一个ApplicationService类是一个完整的业务流程，其中每个方法负责处理一个Use Case。这种的好处是可以完整的收敛整个业务逻辑，从接口类即可对业务逻辑有一定的掌握，适合相对简单的业务流程。坏处就是对于复杂的业务流程会导致一个类的方法过多，有可能代码量过大。这种类型的具体案例如：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;h2&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3.3 ApplicationService&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ApplicationService负责了业务流程的编排，是将原有业务流水账代码剥离了校验逻辑、领域计算、持久化等逻辑之后剩余的流程，是“胶水层”代码。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;参考一个简易的交易流程：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;ov60zs&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:59158,&amp;quot;width&amp;quot;:836,&amp;quot;height&amp;quot;:131.72426141450313,&amp;quot;rotation&amp;quot;:0,&amp;quot;src&amp;quot;:&amp;quot;https://ata2-img.oss-cn-zhangjiakou.aliyuncs.com/neweditor/39edbd75-b2cb-4272-950a-f27b7649d50a.png&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在这个案例里可以看出来，交易这个领域一共有5个用例：下单、支付成功、支付失败关单、物流信息更新、关闭订单。这5个用例可以用5个Command/Event对象代替，也就是对应了5个方法。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我见过3种ApplicationService的组织形态：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1. 一个ApplicationService类是一个完整的业务流程，其中每个方法负责处理一个Use Case。这种的好处是可以完整的收敛整个业务逻辑，从接口类即可对业务逻辑有一定的掌握，适合相对简单的业务流程。坏处就是对于复杂的业务流程会导致一个类的方法过多，有可能代码量过大。这种类型的具体案例如：&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutService&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;checkout&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@Valid CheckoutCommand cmd&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;payReceived&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@Valid PaymentReceivedEvent &lt;span class=&quot;code-snippet__keyword&quot;&gt;event&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;payCanceled&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@Valid PaymentCanceledEvent &lt;span class=&quot;code-snippet__keyword&quot;&gt;event&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;packageSent&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@Valid PackageSentEvent &lt;span class=&quot;code-snippet__keyword&quot;&gt;event&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;delivered&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@Valid DeliveredEvent &lt;span class=&quot;code-snippet__keyword&quot;&gt;event&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;List&amp;lt;OrderDTO&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;OrderQuery query&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;getOrder&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Long orderId&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;针对于比较复杂的业务流程，可以通过增加独立的CommandHandler、EventHandler来降低一个类中的代码量：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2. 针对于比较复杂的业务流程，可以通过增加独立的CommandHandler、EventHandler来降低一个类中的代码量：&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutCommandHandler&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CommandHandler&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutCommand&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;OrderDTO&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(CheckoutCommand cmd)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutServiceImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; CheckoutCommandHandler checkoutCommandHandler;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(@Valid CheckoutCommand cmd)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; checkoutCommandHandler.handle(cmd);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;比较激进一点，通过CommandBus、EventBus，直接将指令或事件抛给对应的Handler，EventBus比较常见。具体案例代码如下，通过消息队列收到MQ消息后，生成Event，然后由EventBus做路由到对应的Handler：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;PaymentReceivedHandler&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;EventHandler&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;PaymentReceivedEvent&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(PaymentReceivedEvent event)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;OrderMessageListener&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MessageListenerOrderly&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; EventBus eventBus;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; ConsumeOrderlyStatus &lt;span class=&quot;code-snippet__title&quot;&gt;consumeMessage&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(List&amp;lt;MessageExt&amp;gt; msgs, ConsumeOrderlyContext context)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        PaymentReceivedEvent event = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; PaymentReceivedEvent();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        eventBus.dispatch(event); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; ConsumeOrderlyStatus.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{},[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;⚠️ 不建议：这种做法可以实现Interface层和某个具体的ApplicationService或Handler的完全静态解藕，在运行时动态dispatch，做的比较好的框架如AxonFramework。虽然看起来很便利，但是根据我们自己业务的实践和踩坑发现，当代码中的CQE对象越来越多，handler越来越复杂时，运行时的dispatch缺乏了静态代码间的关联关系，导致代码很难读懂，特别是当你需要trace一个复杂调用链路时，因为dispatch是运行时的，很难摸清楚具体调用到的对象。所以我们虽然曾经有过这种尝试，但现在已经不建议这么做了。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Application Service 是业务流程的封装，不处理业务逻辑&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;虽然之前曾经无数次重复ApplicationService只负责业务流程串联，不负责业务逻辑，但如何判断一段代码到底是业务流程还是逻辑呢？&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1.15,&amp;quot;lineRule&amp;quot;:&amp;quot;auto&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;举个之前的例子，最初的代码重构后：&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;span&gt;不&lt;/span&gt;&lt;span&gt;建议：&lt;/span&gt;&lt;span&gt;这种做法可以实现Interface层和某个具体的ApplicationService或Handler的完全静态解藕，在运行时动态dispatch，做的比较好的框架如AxonFramework。虽然看起来很便利，但是根据我们自己业务的实践和踩坑发现，当代码中的CQE对象越来越多，handler越来越复杂时，运行时的dispatch缺乏了静态代码间的关联关系，导致代码很难读懂，特别是当你需要trace一个复杂调用链路时，因为dispatch是运行时的，很难摸清楚具体调用到的对象。所以我们虽然曾经有过这种尝试，但现在已经不建议这么做了。&lt;/span&gt;&lt;/section&gt;&lt;/article&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Application Service 是业务流程的封装，不处理业务逻辑&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然之前曾经无数次重复ApplicationService只负责业务流程串联，不负责业务逻辑，但如何判断一段代码到底是业务流程还是逻辑呢？&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举个之前的例子，最初的代码重构后：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Validated&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutServiceImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; OrderDtoAssembler orderDtoAssembler = OrderDtoAssembler.INSTANCE;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ItemService itemService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; InventoryService inventoryService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; OrderRepository orderRepository;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(@Valid CheckoutCommand cmd)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ItemDO item = itemService.getItem(cmd.getItemId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (item == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Item not found&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; withholdSuccess = inventoryService.withhold(cmd.getItemId(), cmd.getQuantity());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!withholdSuccess) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Inventory not enough&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Order order = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Order();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setBuyerId(cmd.getUserId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setSellerId(item.getSellerId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setItemId(item.getItemId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setItemTitle(item.getTitle());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setItemUnitPrice(item.getPriceInCents());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        order.setCount(cmd.getQuantity());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Order savedOrder = orderRepository.save(order);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; orderDtoAssembler.orderToDTO(savedOrder);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;判断是否业务流程的几个点&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;不要有if/else分支逻辑&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;也就是说代码的Cyclomatic Complexity（循环复杂度）应该尽量等于1。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通常有分支逻辑的，都代表一些业务判断，应该将逻辑封装到DomainService或者Entity里。但这不代表完全不能有if逻辑，比如，在这段代码里：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; withholdSuccess = inventoryService.withhold(cmd.getItemId(), cmd.getQuantity());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!withholdSuccess) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Inventory not enough&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然CC &amp;gt; 1，但是仅仅代表了中断条件，具体的业务逻辑处理并没有受影响。可以把它看作为Precondition。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;不要有任何计算&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在最早的代码里有这个计算：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; cost = item.getPriceInCents() * quantity;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;order.setTotalCost(cost);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过将这个计算逻辑封装到实体里，避免在ApplicationService里做计算：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Order&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; itemUnitPrice;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Integer count;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Long&lt;/span&gt; getTotalCost() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; itemUnitPrice * count;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;order.setItemUnitPrice(item.getPriceInCents());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;order.setCount(cmd.getQuantity());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;一些数据的转化可以交给其他对象来做&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如DTO Assembler，将对象间转化的逻辑沉淀在单独的类中，降低ApplicationService的复杂度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;OrderDTO&lt;/span&gt; dto = orderDtoAssembler.orderToDTO(savedOrder);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;常用的ApplicationService“套路”&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们可以看出来，ApplicationService的代码通常有类似的结构：AppService通常不做任何决策（Precondition除外），仅仅是把所有决策交给DomainService或Entity，把跟外部交互的交给Infrastructure接口，如Repository或防腐层。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一般的“套路”如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果涉及到对多个外部系统（包括自身的DB）都有变更的情况，这个时候通常处在“分&lt;/span&gt;&lt;span&gt;布式事务”的场景里，无论是用分布式TX、TCC、还是Saga模式，取决于具体场景的设计，在此处暂时略过。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4  DTO Assembler&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一个经常被忽视的问题是 ApplicationService应该返回 Entity 还是 DTO？这里提出一个规范，在DDD分层架构中：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;ApplicationService应该永远返回DTO而不是Entity。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为什么呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为我们操作的对象是Entity，但是输出的对象是DTO，这里就需要一个专属类型的对象叫DTO Assembler。DTO Assembler的唯一职责是将一个或多个Entity/VO，转化为DTO。注意：DTO Assembler通常不建议有反操作，也就是不会从DTO到Entity，因为通常一个DTO转化为Entity时是无法保证Entity的准确性的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通常，Entity转DTO是有成本的，无论是代码量还是运行时的操作。手写转换代码容易出错，为了节省代码量用Reflection会造成极大的性能损耗。所以这里我还是不遗余力的推荐MapStruct这个库。MapStruct通过静态编译时代码生成，通过写接口和配置注解就可以生成对应的代码，且因为生成的代码是直接赋值，其性能损耗基本可以忽略不计。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过MapStruct，代码即可简化为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.mapstruct.Mapper;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Mapper&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;OrderDtoAssembler&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    OrderDtoAssembler INSTANCE = Mappers.getMapper(OrderDtoAssembler.class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;orderToDTO&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Order order)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutServiceImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; OrderDtoAssembler orderDtoAssembler = OrderDtoAssembler.INSTANCE;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(@Valid CheckoutCommand cmd)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Order order = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Order();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Order savedOrder = orderRepository.save(order);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; orderDtoAssembler.orderToDTO(savedOrder);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;结合之前的Data Mapper，DTO、Entity和DataObject之间的关系如下图：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicCictGq3wX46rzGNnouXLjdbPJPF6AWrZx7wEWRL96mCzJnDLJBWnb6cqsH0HkIC3qmyAbhq0VBpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.28425925925925927&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5  Result vs Exception&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，上文曾经提及在Interface层应该返回Result，在Application层应该返回DTO，在这里再次重复提出规范：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;Application层只返回DTO，可以直接抛异常，不用统一处理。所有调用到的服务也都可以直接抛异常，除非需要特殊处理，否则不需要刻意捕捉异常。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;异常的好处是能明确的知道错误的来源，堆栈等，在Interface层统一捕捉异常是为了避免异常堆栈信息泄漏到API之外，但是在Application层，异常机制仍然是信息量最大，代码结构最清晰的方法，避免了Result的一些常见且繁杂的Result.isSuccess判断。所以在Application层、Domain层，以及Infrastructure层，遇到错误直接抛异常是最合理的方法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6  Anti-Corruption Layer防腐层&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;本文仅仅简单描述一下ACL的原理和作用，具体的实施规范可能要等到另外一篇文章。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在ApplicationService中，经常会依赖外部服务，从代码层面对外部系统产生了依赖。比如上文中的：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;ItemDO&lt;/span&gt; item = itemService.getItem(cmd.getItemId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;boolean&lt;/span&gt; withholdSuccess = inventoryService.withhold(cmd.getItemId(), cmd.getQuantity());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;会发现我们的ApplicationService会强依赖ItemService、InventoryService以及ItemDO这个对象。如果任何一个服务的方法变更，或者ItemDO字段变更，都会有可能影响到ApplicationService的代码。也就是说，我们自己的代码会因为强依赖了外部系统的变化而变更，这个在复杂系统中应该是尽量避免的。那么如何做到对外部系统的隔离呢？需要加入ACL防腐层。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ACL防腐层的简单原理如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;无防腐层的情况：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicCictGq3wX46rzGNnouXLjdLLiapZuLDzpufV4A02mzriciccVamJiah6BtL1wbS50OwtSGnBmDYWC0qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.25925925925925924&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有防腐层的情况：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicCictGq3wX46rzGNnouXLjdCBB8QKxauEASkasialp5naQyzpmibCTJybxVv67oXsibTxibICl31d6vAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.3861111111111111&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;具体简单实现，假设所有外部依赖都命名为ExternalXXXService：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ItemDTO&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Long itemId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Long sellerId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; String title;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Long priceInCents;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ItemFacade&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;ItemDTO &lt;span class=&quot;code-snippet__title&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Long itemId)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ItemFacadeImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ItemFacade&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ExternalItemService externalItemService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; ItemDTO &lt;span class=&quot;code-snippet__title&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Long itemId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ItemDO itemDO = externalItemService.getItem(itemId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (itemDO != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ItemDTO dto = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ItemDTO();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            dto.setItemId(itemDO.getItemId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            dto.setTitle(itemDO.getTitle());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            dto.setPriceInCents(itemDO.getPriceInCents());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            dto.setSellerId(itemDO.getSellerId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; dto;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;InventoryFacade&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;withhold&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Long itemId, Integer quantity)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;InventoryFacadeImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;InventoryFacade&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ExternalInventoryService externalInventoryService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;withhold&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Long itemId, Integer quantity)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; externalInventoryService.withhold(itemId, quantity);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过ACL改造之后，我们ApplicationService的代码改为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutServiceImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CheckoutService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ItemFacade itemFacade;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; InventoryFacade inventoryFacade;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; OrderDTO &lt;span class=&quot;code-snippet__title&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(@Valid CheckoutCommand cmd)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ItemDTO item = itemFacade.getItem(cmd.getItemId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (item == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Item not found&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; withholdSuccess = inventoryFacade.withhold(cmd.getItemId(), cmd.getQuantity());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!withholdSuccess) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Inventory not enough&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很显然，这么做的好处是ApplicationService的代码已经完全不再直接依赖外部的类和方法，而是依赖了我们自己内部定义的值类和接口。如果未来外部服务有任何的变更，需要修改的是Facade类和数据转化逻辑，而不需要修改ApplicationService的逻辑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Repository可以认为是一种特殊的ACL，屏蔽了具体数据操作的细节，即使底层数据库结构变更，数据库类型变更，或者加入其他的持久化方式，Repository的接口保持稳定，ApplicationService就能保持不变。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在一些理论框架里ACL Facade也被叫做Gateway，含义是一样的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;四  Orchestration vs Choreography&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在本文最后想聊一下复杂业务流程的设计规范。在复杂的业务流程里，我们通常面临两种模式：Orchestration 和 Choreography。很无奈，这两个英文单词的百度翻译/谷歌翻译，都是“编排”，但实际上这两种模式是完全不一样的设计模式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Orchestration的编排（比如SOA/微服务的服务编排Service Orchestration）是我们通常熟悉的用法，Choreography是最近出现了事件驱动架构EDA才慢慢流行起来。网上可能会有其他的翻译，比如编制、编舞、协作等，但感觉都没有真正的把英文单词的意思表达出来，所以为了避免误解，在下文我尽量还是用英文原词。如果谁有更好的翻译方法欢迎联系我。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  模式简介&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  案例&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;用一个常见的例子：下单后支付并发货。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果这个案例是Orchestration，则业务逻辑为：下单时从一个预存的账户里扣取资金，并且生成物流单发货，从图上看是这样的：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicCictGq3wX46rzGNnouXLjdWFPEaGUDVeicOVTfPKciaX5XmCRpNkPlFrkhgsvFlOdlyAic1nrrFGddA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.3339587242026266&quot; data-w=&quot;1066&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果这个案例是Choreography，则业务逻辑为：下单，然后等支付成功事件，然后再发货，类似这样：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicCictGq3wX46rzGNnouXLjdHKT2fbsrWXnbmq9ibiccXicY4oTQY3x6msic7Cof8wXpyYUBUcTtEHPiahg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.21296296296296297&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  模式的区别和选择&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然看起来这两种模式都能达到一样的业务目的，但是在实际开发中他们有巨大的差异。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从代码依赖关系来看：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从代码灵活性来看：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从调用链路来看：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从业务职责来看：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;小结：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.589803012746234&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naLkUTqbFoY1WeIwssRA5Vt9zp3LNLrlRia6ByfVUxvaraIlzIaOMJ9YPSeaCBtUFgup8zLLb8wI03w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;863&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外需要重点明确的：“指令驱动”和“事件驱动”的区别不是“同步”和“异步”。指令可以是同步调用，也可以是异步消息触发（但异步指令不是事件）；反过来事件可以是异步消息，但也完全可以是进程内的同步调用。所以指令驱动和事件驱动差异的本质不在于调用方式，而是一件事情是否“已经”发生。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;所以在日常业务中当你碰到一个需求时，该如何选择是用Orchestration还是Choreography？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里给出两个判断方法：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）明确依赖的方向&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicCictGq3wX46rzGNnouXLjdGqKYFsTTYexAUhPaYoXNYDNmGmsCODkwQESLry0jP8nwfPxOq08vlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.4398148148148148&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在代码中的依赖是比较明确的：如果你是下游，上游对你无感知，则只能走事件驱动；如果上游必须要对你有感知，则可以走指令驱动。反过来，如果你是上游，需要对下游强依赖，则是指令驱动；如果下游是谁无所谓，则可以走事件驱动。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）找出业务中的“负责人”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicCictGq3wX46rzGNnouXLjdCXmkNhXE2S89Tt1tQUDL3TXb40ogyWf0CYTvY8CciabqTKa4uCuMQyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.3527777777777778&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二种方法是根据业务场景找出其中的“负责人”。比如，如果业务需要通知卖家，下单系统的单一职责不应该为消息通知负责，但订单管理系统需要根据订单状态的推进主动触发消息，所以是这个功能的负责人。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在一个复杂业务流程里，通常两个模式都要有，但也很容易设计错误。如果出现依赖关系很奇怪，或者代码里调用链路/负责人梳理不清楚的情况，可以尝试转换一下模式，可能会好很多。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;哪个模式更好？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很显然，没有最好的模式，只有最合适自己业务场景的模式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;反例：最近几年比较流行的Event-Driven Architecture（EDA）事件驱动架构，以及Reactive-Programming响应式编程（比如RxJava），虽然有很多创新，但在一定程度上是“当你有把锤子，所有问题都是钉子”的典型案例。他们对一些基于事件的、流处理的问题有奇效，但如果拿这些框架硬套指令驱动的业务，就会感到代码极其“不协调”，认知成本提高。所以在日常选型中，还是要先根据业务场景梳理出来是哪些流程中的部分是Orchestration，哪些是Choreography，然后再选择相对应的框架。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4  跟DDD分层架构的关系&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，讲了这么多O vs C，跟DDD有啥关系？很简单：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，虽然Orchestration 和 Choreography是两种完全不同的业务设计模式，但最终落到Application层的代码应该是一致的，这也是为什么Application层是“用例”而不是“接口”，是相对稳定的存在。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;五  总结&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;只要是做业务的，一定会需要写业务流程和服务编排，但不代表这种代码一定质量差。通过DDD的分层架构里的Interface层和Application层的合理拆分，代码可以变得优雅、灵活，能更快的响应业务但同时又能更好的沉淀。本文主要介绍了一些代码的设计规范，帮助大家掌握一定的技巧。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Interface层：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Application层：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;部分Infra层：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;业务流程设计模式：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;免费领取&lt;strong&gt;&lt;span&gt;电子书&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《Apache RocketMQ 从入门到实战》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《RocketMQ 技术内幕》作者推出，由浅入深地介绍了RocketMQ的架构与实现，并总结了多年线上超大规模集群开发运维经验。通过本书，不仅能够掌握分布式消息平台的设计原理，对线上疑难问题排查分析、性能调优与架构设计也大有帮助。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;扫码加阿里妹好友，回复“ar实战”获取吧~&lt;span&gt;(英文字母小写，若扫码无效，可通过微信号alimei4、alimei5、alimei6、alimei7直接添加)&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;275&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naL8IbUFicUtMrdMwwUmawhUkKhoPB9Fbjo3NqH9WyXCqKMtyWpRX0Iaewf6NeGkIxB8ALgJYIyHO9Q/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>