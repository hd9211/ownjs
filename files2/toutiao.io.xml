<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ee4b15e708027c32360dd304a4a03028</guid>
<title>工具 | 英伟达开源的一个新的 PyTorch 库</title>
<link>https://toutiao.io/k/5wg0hgp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d2d0064988616c08df006eb9f1615054</guid>
<title>[译] 用 tc qdisc 管理 Linux 网络带宽</title>
<link>https://toutiao.io/k/vssa6c4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post&quot;&gt;
  
  &lt;h1 class=&quot;postTitle&quot;&gt;[译] 《Linux 高级路由与流量控制手册（2012）》第九章：用 tc qdisc 管理 Linux 网络带宽&lt;/h1&gt;
  &lt;p class=&quot;meta&quot;&gt;Published at 2020-10-08 | Last Update 2020-10-08&lt;/p&gt;

  
  
  &lt;h3 id=&quot;译者序&quot;&gt;译者序&lt;/h3&gt;

&lt;p&gt;本文内容来自 &lt;a href=&quot;https://lartc.org/howto/index.html&quot;&gt;Linux Advanced Routing &amp;amp; Traffic Control HOWTO&lt;/a&gt; (2012) ，
这是一份在线文档（小书），直译为&lt;strong&gt;《Linux 高级路由与流量控制手册》&lt;/strong&gt;。
本文翻译第九章 &lt;a href=&quot;https://lartc.org/howto/lartc.qdisc.html&quot;&gt;Chapter 9. Queueing Disciplines for Bandwidth Management&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这份文档年代略久，但 qdisc 部分整体并未过时，并且是我目前看过的内容最详实、可读
性最好的 tc qdisc 教程。&lt;/p&gt;

&lt;p&gt;tc/qdisc 是 Cilium/eBPF 依赖的最重要的网络基础设施之一。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以下是译文。&lt;/p&gt;

&lt;hr/&gt;



&lt;hr/&gt;

&lt;p&gt;初次发现 Linux 的这些功能时，我感到无比震惊。Linux 的&lt;strong&gt;带宽管理&lt;/strong&gt;能力足以媲美许多
&lt;strong&gt;高端、专用的带宽管理系统&lt;/strong&gt;（high-end dedicated bandwidth management systems）。&lt;/p&gt;

&lt;h2 id=&quot;91-队列queues和排队规则queueing-disciplines&quot;&gt;9.1 队列（Queues）和排队规则（Queueing Disciplines）&lt;/h2&gt;

&lt;p&gt;通过对包进行&lt;strong&gt;排队&lt;/strong&gt;（queuing），我们可以决定数据的&lt;strong&gt;发送&lt;/strong&gt;方式（the way in
which data is SENT）。但理解下面这一点非常重要：我们&lt;strong&gt;只能对发送（transmit）的数
据进行整形&lt;/strong&gt;（shape the data）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;互联网的工作机制&lt;/strong&gt;决定了&lt;strong&gt;接收端无法直接控制发送端的行为&lt;/strong&gt;。这就像你家的
（实体！）邮箱一样：除非能联系到所有人（告诉他们未经同意不要寄信给你），否则
你无法控制别人寄多少东西过来。&lt;/p&gt;

&lt;p&gt;但与实际生活不同的是，互联网基于 TCP/IP 协议栈，这多少会带来一些帮助。TCP/IP
无法提前知道两台主机之间的网络带宽，因此开始时它会以越来越快的速度发送数据（慢启
动），直到开始出现丢包，这时它知道已经没有可用空间来存储这些待发送的包了，因此就会
降低发送速度。TCP/IP 的实际工作过程比这个更智能一点，我们后面会再讨论。&lt;/p&gt;

&lt;p&gt;这就好比你留下一半的信件在实体邮箱里不取，期望别人知道这个状况后会停止给你寄新的信件。
但不幸的是，&lt;strong&gt;这种方式只对互联网管用，对你的实体邮箱无效&lt;/strong&gt; :-)&lt;/p&gt;

&lt;p&gt;如果内网有一台路由器，你希望&lt;strong&gt;限制某几台主机的下载速度&lt;/strong&gt;，那你应该找到发送数据到
这些主机的路由器内部接口（inner interface of your router），然后在这些
&lt;strong&gt;路由器内部接口&lt;/strong&gt;上做 &lt;strong&gt;整流&lt;/strong&gt;（traffic shaping，流量整形）。&lt;/p&gt;

&lt;p&gt;此外，还要确保链路瓶颈（bottleneck of the link）也在你的控制范围内。例如，如果网
卡是 100Mbps，但路由器的链路带宽是 256Kbps，那首先应该确保不要发送过多数据给路由
器，因为它可能扛不住。否则，&lt;strong&gt;链路控制和带宽整形的决定权就不在主
机侧而到路由器侧了&lt;/strong&gt;。要达到限速目的，我们需要对&lt;strong&gt;“发送队列”&lt;/strong&gt;有完全的把控（”own the
queue”），这里的“发送队列”也就是&lt;strong&gt;整条链路上最慢的一段&lt;/strong&gt;（slowest link in the chain）。
幸运的是，大多数情况下这个条件都是能满足的。&lt;/p&gt;

&lt;h2 id=&quot;92-simple-classless-qdisc简单不分类排队规则&quot;&gt;9.2 Simple, classless qdisc（简单、不分类排队规则）&lt;/h2&gt;

&lt;p&gt;如前所述，&lt;strong&gt;排队规则（queueing disciplines）改变了数据的发送方式&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不分类（或称无类别）排队规则&lt;/strong&gt;（classless queueing disciplines）可以对某个网络
接口（interface）上的所有流量进行&lt;strong&gt;无差别整形&lt;/strong&gt;。包括对数据进行：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;重新调度（reschedule）&lt;/li&gt;
  &lt;li&gt;增加延迟（delay）&lt;/li&gt;
  &lt;li&gt;丢弃（drop）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;与 classless qdisc
对应的是 classful qdisc，即&lt;strong&gt;有类别（或称分类别）排队规则&lt;/strong&gt;，后者是&lt;strong&gt;一个排队规则中又包含其他
排队规则（qdisc-containing-qdiscs）&lt;/strong&gt;！先理解了 classless qdisc，才能理解
classful qdisc。&lt;/p&gt;

&lt;p&gt;目前最常用的 classless qdisc 是 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast qdisc&lt;/code&gt;，这也是默认排队规则&lt;/strong&gt;。
这也解释了为什么这些高级功能如此健壮：本质上来说，它们只不过是“另一个队列”而
已（nothing more than ‘just another queue’）。&lt;/p&gt;

&lt;p&gt;每种队列都有自己的优缺点。其中一些可能测试的并不全面。&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;pfifo_fast&quot;/&gt;&lt;/p&gt;

&lt;h3 id=&quot;921-pfifo_fast先入先出队列&quot;&gt;9.2.1 pfifo_fast（先入先出队列）&lt;/h3&gt;

&lt;p&gt;如名字所示，这是一个先入先出队列（First In, First Out），因此对所有包都一视同仁。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pfifo_fast 有三个所谓的 “band”&lt;/strong&gt;（可理解为三个队列），编号分别为 0、1、2：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;每个 band 上分别执行 FIFO 规则&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;但是，&lt;strong&gt;如果 band 0 有数据，就不会处理 band 1&lt;/strong&gt;；同理，band 1 有数据时，
不会去处理 band 2。&lt;/li&gt;
  &lt;li&gt;内核会检查数据包的 TOS 字段，&lt;strong&gt;将“最小延迟”的包放到 band 0&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不要将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast qdisc&lt;/code&gt; 与后面介绍的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIO qdisc&lt;/code&gt; 混淆，后者是 classful 的！
虽然二者行为类似，但 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast&lt;/code&gt; 是无类别的，这意味你无法通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc&lt;/code&gt; 命令向
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast&lt;/code&gt; 内添加另一个 qdisc&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;9211-参数与用法&quot;&gt;9.2.1.1 参数与用法&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast qdisc&lt;/code&gt; 默认配置是写死的（the hardwired default），因此无法更改。&lt;/p&gt;

&lt;p&gt;下面介绍这份写死的配置是什么样的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priomap&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priomap&lt;/code&gt; 决定了&lt;strong&gt;如何将内核设置的 packet priority 映射到 band&lt;/strong&gt;。priority
  位于包的 TOS 字段：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     0     1     2     3     4     5     6     7
  +-----+-----+-----+-----+-----+-----+-----+-----+
  |                 |                       |     |
  |   PRECEDENCE    |          TOS          | MBZ |
  |                 |                       |     |
  +-----+-----+-----+-----+-----+-----+-----+-----+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;TOS 字段占用 4 个比特，各 bit 含义如下：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Binary Decimcal  Meaning
  -----------------------------------------
  1000   8         Minimize delay (md)
  0100   4         Maximize throughput (mt)
  0010   2         Maximize reliability (mr)
  0001   1         Minimize monetary cost (mmc)
  0000   0         Normal Service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump -vv&lt;/code&gt; 会打印包的 TOS 字段，其中的 TOS 值对应下面的第一列：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  TOS     Bits  Means                    Linux Priority    Band
  ------------------------------------------------------------
  0x0     0     Normal Service           0 Best Effort     1
  0x2     1     Minimize Monetary Cost   1 Filler          2
  0x4     2     Maximize Reliability     0 Best Effort     1
  0x6     3     mmc+mr                   0 Best Effort     1
  0x8     4     Maximize Throughput      2 Bulk            2
  0xa     5     mmc+mt                   2 Bulk            2
  0xc     6     mr+mt                    2 Bulk            2
  0xe     7     mmc+mr+mt                2 Bulk            2
  0x10    8     Minimize Delay           6 Interactive     0
  0x12    9     mmc+md                   6 Interactive     0
  0x14    10    mr+md                    6 Interactive     0
  0x16    11    mmc+mr+md                6 Interactive     0
  0x18    12    mt+md                    4 Int. Bulk       1
  0x1a    13    mmc+mt+md                4 Int. Bulk       1
  0x1c    14    mr+mt+md                 4 Int. Bulk       1
  0x1e    15    mmc+mr+mt+md             4 Int. Bulk       1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;第二列是对应的十进制表示，第三列是对应的含义。例如，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;15&lt;/code&gt; 表示这个包期望
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Minimal Monetary Cost&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maximum Reliability&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maximum Throughput&lt;/code&gt; +
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Minimum Delay&lt;/code&gt;。我把这样的包称为“荷兰包”（a ‘Dutch Packet’。荷兰人比较
  节俭/抠门，译注）。&lt;strong&gt;第四列是对应到 Linux 内核的优先级；最后一列是
  映射到的 band&lt;/strong&gt;，从命令行输出看，形式为：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  1, 2, 2, 2, 1, 2, 0, 0 , 1, 1, 1, 1, 1, 1, 1, 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;例如，priority 4 会映射到 band 1。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priomap&lt;/code&gt; 还能列出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priority &amp;gt; 7&lt;/code&gt; 的那些
  不是由 TOS 映射、而是由其他方式设置的优先级。例如，下表列出了&lt;strong&gt;应
  用（application）是如何设置它们的 TOS 字段的&lt;/strong&gt;，来自 RFC 1349（更多信息可阅
  读全文），&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  TELNET                   1000           (minimize delay)
  FTP     Control          1000           (minimize delay)
          Data             0100           (maximize throughput)
    
  TFTP                     1000           (minimize delay)
    
  SMTP    Command phase    1000           (minimize delay)
          DATA phase       0100           (maximize throughput)
    
  DNS     UDP Query        1000           (minimize delay)
          TCP Query        0000
          Zone Transfer    0100           (maximize throughput)
    
  NNTP                     0001           (minimize monetary cost)
    
  ICMP    Errors           0000
          Requests         0000 (mostly)
          Responses        &amp;lt;same as request&amp;gt; (mostly)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;txqueuelen&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;发送队列长度，是一个网络接口（interface）参数，可以用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; 命令设置。例
  如，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig eth0 txqueuelen 10&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc&lt;/code&gt; 命令无法修改这个值。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;922-tbftoken-bucket-filter令牌桶过滤器&quot;&gt;9.2.2 TBF（Token Bucket Filter，令牌桶过滤器）&lt;/h3&gt;

&lt;p&gt;TBF 是一个简单 qdisc，对于&lt;strong&gt;没有超过预设速率的流量直接透传&lt;/strong&gt;，但也能容忍&lt;strong&gt;超过预
设速率的短时抖动&lt;/strong&gt;（short bursts in excess of this rate）。&lt;/p&gt;

&lt;p&gt;TBF 非常简洁，对网络和处理器都很友好（network- and processor friendly）。
&lt;strong&gt;如果只是想实现接口限速，那 TBF 是第一选择。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TBF 实现包括几部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A buffer (bucket)：bucket 最重要的参数是它的大小，即&lt;strong&gt;能容纳的 token 数量&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;Tokens：token 会以特定的速率（specific rate）填充 bucket 缓冲区。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当一个包到来时，会从 bucket 中拿到一个 token，然后收集这个包的信息，最后从
bucket 中删除这个 token。
这个算法和 token flow、data flow 结合起来，会产生三种可能的场景：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;数据速率 == token 速率&lt;/code&gt;：每个包都能找到一个对应的token，然后直接从队列出去，没有延时（delay）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;数据速率 &amp;lt; token 速率&lt;/code&gt;：正常到来的数据都能及时发送出去，然后删除一个 token。
由于 token 速率大于数据速率，&lt;strong&gt;会产生 bucket 积压&lt;/strong&gt;，极端情况会将
bucket 占满。&lt;strong&gt;如果数据速率突然高于 token 速率，就可以消耗这些积压的 token&lt;/strong&gt;
。因此积压的 token 有一个额外好处：&lt;strong&gt;能够容忍短时数据速率抖动（burst）&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;数据速率 &amp;gt; token 速率&lt;/code&gt;：token 很快就会用完，然后 &lt;strong&gt;TBF 会关闭（throttle ）一会&lt;/strong&gt;。这种
情况称为 &lt;strong&gt;overlimit&lt;/strong&gt;（超过限制）。如果包还是源源不断地到来，就会产生丢包。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第三种非常重要，因为它使我们能够&lt;strong&gt;对数据可用的带宽进行整形&lt;/strong&gt;（administratively shape the bandwidth）。&lt;/p&gt;

&lt;p&gt;积压的 token 使得超过限速的短时抖动数据仍然能发送，不会丢包，但持续的
overload 会导致数据不断被 delay，然后被丢弃。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：在实际的实现中，&lt;strong&gt;token 是基于字节数，而不是包数&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;9221-参数与用法&quot;&gt;9.2.2.1 参数与用法&lt;/h4&gt;

&lt;p&gt;虽然通常情况下并不需要修改 TBF 配置参数，但我们还是可以看一下有哪些。&lt;/p&gt;

&lt;p&gt;首先，永远可用的（always available）参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;limit or latency&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;limit：因等待可用 token 而被放入队列的字节数。&lt;/li&gt;
      &lt;li&gt;latency：每个包在 TBF 中停留的最长时间。随后会基于 latency、bucket size、rate 和 peakrate（如果设置了）来计算 limit。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;burst/buffer/maxburst&lt;/p&gt;

    &lt;p&gt;bucket 的大小，&lt;strong&gt;单位是字节&lt;/strong&gt;。这是累积可用的 token 所支持的最大字节数（
  maximum amount of bytes that tokens can be available for instantaneously）。总
  体来说，&lt;strong&gt;越大的整流速率（shaping rates）需要越大的缓冲区&lt;/strong&gt;。要在 Intel 网卡
  上实现 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10Mbps&lt;/code&gt; 整流，你至少需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10KB&lt;/code&gt; 缓冲区。&lt;/p&gt;

    &lt;p&gt;如果缓冲区太小，可能会丢包，因为 token 到来太快导致无法放入 bucket 中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;mpu&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;“零长度”的包占用的并不是零带宽&lt;/strong&gt;（A zero-sized packet does not use zero
  bandwidth）。例如对于以太网，任何一个包的字节数不会少于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64&lt;/code&gt;。
  Minimum Packet Unit（最小包单元）决定了一个包所使用的最小 token 量（the
  minimal token usage for a packet）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rate&lt;/p&gt;

    &lt;p&gt;速度旋钮（speedknob）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果当前 bucket 中有 token，并且没有禁止 bucket 的 token 删除动作，那默认情况下
，它会&lt;strong&gt;全速删除&lt;/strong&gt;。如果不期望这种行为，那可以设置下面几个参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;peakrate&lt;/p&gt;

    &lt;p&gt;如前所述，默认情况下，包到了之后只要有 token 就会被立即发送。这可能不是你期
  望的，尤其当 bucket 很大的时候。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;peakrate&lt;/code&gt; 可指定 &lt;strong&gt;bucket 发送数据的最快速度&lt;/strong&gt;。通常来说，这需要做的
  就是：放行一个包 - 等待恰当的时长 - 放行下一个包。通过计算等待时长，最终实现
  了 peakrate 效果。&lt;/p&gt;

    &lt;p&gt;但实际中，由于 Unix 默认的 10ms 定时器精读限制，如果平均每个包 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10K bits&lt;/code&gt; ，
  我们只能做到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1Mbps&lt;/code&gt; peakrate！（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10Kb/10ms = 1000Kbps = 1Mbps&lt;/code&gt;，译注）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;mtu/minburst&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1Mbit/s&lt;/code&gt; 的 peakrate 通常并不是很有用，因为实际中的带宽要远大于此。实现更高
  peakrate 的一种方式是：每个 timer tick 发送多个包，在效果上就好像我们创建
  了第二个 bucket！&lt;/p&gt;

    &lt;p&gt;这第二个 bucket 默认只有一个包（defaults to a single packet），完全算不上一个 bucket。&lt;/p&gt;

    &lt;p&gt;计算最大可能的 peakrate 时，用 MTU 乘以 100（更准确地说，乘以 HZ 数，例如
  Intel 上是 100，Alpha 上是 1024）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;9222-示例配置&quot;&gt;9.2.2.2 示例配置&lt;/h4&gt;

&lt;p&gt;一个简单但&lt;strong&gt;非常&lt;/strong&gt;有用的配置：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev ppp0 root tbf rate 220kbit latency 50ms burst 1540
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么说这个配置很有用呢？如果你有一个 queue 很大的网络设备，例如 DSL modem 或
cable modem，而且用一个快速设备（例如以太网接口）连接到这个网络设备，那你会发现
&lt;strong&gt;大文件上传会严重影响实时交互&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这是因为上传的数据会被缓存到 modem 的 queue 里，而且缓存的数据量很大（以提升吞吐）
。但这并不是期望的，你希望的是 queue 不要太大，这样能保证交换式数据的实时性，因
此能在上传数据过程中同时做其他事情。&lt;/p&gt;

&lt;p&gt;上面的配置&lt;strong&gt;将发送速率降低到了 modem 不会对数据进行排队缓存（queuing）的水平&lt;/strong&gt; ——
&lt;strong&gt;此时 queue 前移到了 Linux 中&lt;/strong&gt;，而我们可以将它控制在一个合理的范围内。&lt;/p&gt;

&lt;p&gt;这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;220kbit&lt;/code&gt; 是&lt;strong&gt;上行链路的真实带宽乘以一个系数&lt;/strong&gt;，如果你的 modem 足
够快，可以将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;burst&lt;/code&gt; 调大一些。&lt;/p&gt;

&lt;h3 id=&quot;923-sfqstochastic-fairness-queueing随机公平排队&quot;&gt;9.2.3 SFQ（Stochastic Fairness Queueing，随机公平排队）&lt;/h3&gt;

&lt;p&gt;随机公平排队（SFQ）是公平排队算法族的一个简单实现。相比其他算法，&lt;strong&gt;SFQ 精准性要差
一些，但它所需的计算量也更少&lt;/strong&gt;，而结果几乎是完全公平的（almost perfectly fair）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SFQ 中的核心是 conversion（会话）或 flow（流）&lt;/strong&gt;，大部分情况下都对应一个 TCP
session 或 UDP stream。&lt;strong&gt;每个 conversion 对应一个 FIFO queue&lt;/strong&gt;，然后将流量分到不
同 queue。发送数据时，按照 round robin 方式，每个 session 轮流发送。&lt;/p&gt;

&lt;p&gt;这种机制会产生非常公平的结果，不会因为单个 conversion 太大而把其他 conversion 的带宽都
挤占掉。&lt;strong&gt;SFQ 被称为“随机的”（stochastic）是因为它其实并没有为每个 session
分配一个 queue&lt;/strong&gt;，而是用算法&lt;strong&gt;将流量哈希到了一组有限的 queue&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;但这里会出现另一个问题：&lt;strong&gt;多个 session 会可能会哈希到同一个 bucket（哈希槽），
进而导致每个 session 的 quota 变小，达不到预期的整流带宽（或速度）&lt;/strong&gt;。为避免这个
问题过于明显，&lt;strong&gt;SFQ 会不断变换它使用的哈希算法&lt;/strong&gt;，最终任何两个会话冲突的持续时间
都不会很长，只会有几秒钟。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SFQ 只有在实际出向带宽已经非常饱和的情况下才有效&lt;/strong&gt;，这一点非常重要！否则，
Linux 机器上就不存在 queue，因此也就没用效果。稍后会看到&lt;strong&gt;如何将 SFQ 与其他
qdisc 相结合来实现一般情况下的公平排队&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;说的更明确一点：&lt;strong&gt;没用配套的整流配置的话，单纯在（连接 modem 的）以太网接口上配
置SFQ 是毫无意义的&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;9231-参数与用法&quot;&gt;9.2.3.1 参数与用法&lt;/h4&gt;

&lt;p&gt;SFQ 大部分情况下默认参数就够了，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;perturb&lt;/p&gt;

    &lt;p&gt;每隔多少&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;秒&lt;/code&gt;就重新配置哈希算法。如果这个参数没设，哈希算法就永远不会重新配置。
  建议显式设置这个参数，不要为空。&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10s&lt;/code&gt; 可能是个不错的选择。&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;quantum&lt;/p&gt;

    &lt;p&gt;在轮到下一个 queue 发送之前，当前 queue 允许出队（dequeue）的最大字节数。默认是
  一个 MTU。不建议设置为小于 MTU 的值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;limit&lt;/p&gt;

    &lt;p&gt;SFQ 能缓存的最大包数（超过这个阈值将导致丢包）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;9232-示例配置&quot;&gt;9.2.3.2 示例配置&lt;/h4&gt;

&lt;p&gt;如果你有一个带宽已经饱和的网络设备，例如一个电话调制解调器（phone modem），那下
面的配置有助于提高公平性：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev ppp0 root sfq perturb 10

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; qdisc &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;qdisc sfq 800c: dev ppp0 quantum 1514b limit 128p flows 128/1024 perturb 10sec 
 Sent 4812 bytes 62 pkts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dropped 0, overlimits 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;800c:&lt;/code&gt;：自动分配的 handle number（句柄编号）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit 128p&lt;/code&gt;：最大缓存 128 个包&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flows 128/1024&lt;/code&gt;：这个 sfq 有 1024 个哈希槽（hash buckets），其中 128 个当前有
数据待发送。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perturb 10sec&lt;/code&gt;：每隔 10s 换一次哈希算法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;93-使用建议何时选择哪种队列&quot;&gt;9.3 使用建议：何时选择哪种队列？&lt;/h2&gt;

&lt;p&gt;总结起来，上面几种都是简单的 qdisc，通过重排序（reordering）、降速（slowing）或
丢包（dropping）来实现流量管理。&lt;/p&gt;

&lt;p&gt;选择使用哪种 qdisc 时，下面几点可供参考。其中提到了几种在第 14
章才会介绍到的 qdisc。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;单纯对出向流量限速&lt;/strong&gt;（slow down outgoing traffic），推荐&lt;strong&gt;使用 TBF&lt;/strong&gt;。如果是
针对大带宽进行限速，需要将 bucket 调大。&lt;/li&gt;
  &lt;li&gt;如果带宽已经打满，想&lt;strong&gt;确保带宽没有被任何单个 session 占据&lt;/strong&gt;，推荐&lt;strong&gt;使用 SFQ&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;If you have a big backbone and know what you are doing, consider Random Early Drop (see Advanced chapter).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对（不再转发的）入向流量整形，使用 Ingress Policer&lt;/strong&gt;。顺便说一句，入向整形称为 ‘policing’，而不是 ‘shaping’。&lt;/li&gt;
  &lt;li&gt;对需要本机转发的流量整形，
    &lt;ul&gt;
      &lt;li&gt;如果目的端是单个设备，那在目的端设备上使用 TBF。&lt;/li&gt;
      &lt;li&gt;如果目的端是多个设备（同一个入向设备分流到多个目的设备），使用 Ingress
Policer。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如果你不需要整形，只是想看看网络接口（interface）是否过载（so loaded that it has to queue），
使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo&lt;/code&gt; queue（注意不是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast&lt;/code&gt;）。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo&lt;/code&gt; 内部没有 bands，但会记录
backlog 的大小。&lt;/li&gt;
  &lt;li&gt;最后 —— 你还可以尝试“社会学整形”（”social shaping”）。有时候一些问题是无法单纯
用技术解决的。用户会对技术限制充满敌意。和气地对别人说几句好话，也许你需要的
带宽就解决了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;94-术语&quot;&gt;9.4 术语&lt;/h2&gt;

&lt;p&gt;为方便理解接下来更复杂的配置，我们需要先引入一些概念。由于这项技术本身比较复杂，
发展也还处在较为早期的阶段，因此大家可能会用不同的术语描述同一样东西。&lt;/p&gt;

&lt;p&gt;下列术语大体上来自 &lt;a href=&quot;http://www.ietf.org/internet-drafts/draft-ietf-diffserv-model-06.txt&quot;&gt;draft-ietf-diffserv-model-06.txt, An Informal Management Model for Diffserv Routers&lt;/a&gt;。想进一步了解一些术语的定义，可参考这份文档。&lt;/p&gt;

&lt;p&gt;我们接下来会用到下列术语：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Queueing Discipline (qdisc，排队规则)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;管理设备队列（queues of devices）的算法&lt;/strong&gt;，可以是管理入向（incoing/ingress
  ）队列，也可以是管理出向队列（outgoing/egress）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;root qdisc（根排队规则）&lt;/p&gt;

    &lt;p&gt;attach 到网络设备的那个 qdisc。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Classless qdisc（无类别排队规则）&lt;/p&gt;

    &lt;p&gt;对所有包一视同仁，同等对待。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Classful qdisc（有类别排队规则）&lt;/p&gt;

    &lt;p&gt;一个 classful qdisc 会包含多个类别（classes）。每个类别（class）可以进一步包
  含其他 qdisc，可以是 classful qdisc，也可以是 classless qdisc。&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;严格按定义来说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast&lt;/code&gt; 属于有类别排队规则（classful），因为它内部包
  含了三个 band，而这些 band 实际上是 class&lt;/strong&gt;。但从用户配置的视角来说，它是
  classless 的，因为这三个内部 class 用户是无法通过 tc 命令配置的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Classes（类别）&lt;/p&gt;

    &lt;p&gt;每个 classful qdisc 可能会包含几个 class，这些都是 qdisc 内部可见的。对于每
  个 class，也是可以再向其添加其他 class 的。因此，&lt;strong&gt;一个 class 的 parent 可以
  是一个 qdisc，也可以是另一个 class&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;Leaf class 是没有 child class 的 class。&lt;strong&gt;这种 class 中 attach 了一个 qdisc
  ，负责该 class 的数据发送&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;创建一个 class 时会自动 attach 一个 fifo qdisc。而当向这个 class 添加 child
  class 时，这个 fifo qdisc 会被自动删除。对于 leaf class，可以用一个更合适的
  qdisc 来替换掉这个fifo qdisc。你甚至能用一个 classful qdisc 来替换这个 fifo
  qdisc，这样就可以添加其他 class了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Classifier（分类器）&lt;/p&gt;

    &lt;p&gt;每个 classful qdisc 需要&lt;strong&gt;判断每个包应该放到哪个 class&lt;/strong&gt;。这是通过分类器完成的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Filter（过滤器）&lt;/p&gt;

    &lt;p&gt;分类过程（Classification）可以通过过滤器（filters）完成。过滤器包含许多的判
  断条件，匹配到条件之后就算 filter 匹配成功了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scheduling（调度）&lt;/p&gt;

    &lt;p&gt;在分类器的协助下，一个 qdisc 可以&lt;strong&gt;判断某些包是不是要先于其他包发送出去，这
  个过程称为调度&lt;/strong&gt;，可以通过例如前面提到的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast&lt;/code&gt; qdisc 完成。&lt;strong&gt;调度也被
  称为重排序&lt;/strong&gt;（reordering），但后者容易引起混淆。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Shaping（整形）&lt;/p&gt;

    &lt;p&gt;在包发送出去之前进行延迟处理，以达到预设的最大发送速率的过程。&lt;strong&gt;整形是在
  egress 做的&lt;/strong&gt;（前面提到了，ingress 方向的不叫 shaping，叫 policing，译者注）。
  不严格地说，丢弃包来降低流量的过程有时也称为整形。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Policing（执行策略，决定是否丢弃包）&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;延迟或丢弃&lt;/strong&gt;（delaying or dropping）包来达到预设带宽的过程。 在 Linux 上，
  policing &lt;strong&gt;只能对包进行丢弃，不能延迟 —— 没有“入向队列”（”ingress queue”）&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Work-Conserving qdisc（随到随发 qdisc）&lt;/p&gt;

    &lt;p&gt;work-conserving qdisc &lt;strong&gt;只要有包可发送就立即发送&lt;/strong&gt;。换句话说，只要网卡处于可
  发送状态（对于 egress qdisc 来说），它&lt;strong&gt;永远不会延迟包的发送&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;non-Work-Conserving qdisc（非随到随发 qdisc）&lt;/p&gt;

    &lt;p&gt;某些 qdisc，例如 TBF，可能会延迟一段时间再将一个包发送出去，以达到期望的带宽
  。这意味着它们有时即使有能力发送，也不会发送。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有了以上概念，我们来看它们都是在哪里用到的。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                Userspace programs
                     ^
                     |
     +---------------+-----------------------------------------+
     |               Y                                         |
     |    -------&amp;gt; IP Stack                                    |
     |   |              |                                      |
     |   |              Y                                      |
     |   |              Y                                      |
     |   ^              |                                      |
     |   |  / ----------&amp;gt; Forwarding -&amp;gt;                        |
     |   ^ /                           |                       |
     |   |/                            Y                       |
     |   |                             |                       |
     |   ^                             Y          /-qdisc1-\   |
     |   |                            Egress     /--qdisc2--\  |
  ---&amp;gt;-&amp;gt;Ingress                       Classifier ---qdisc3---- | -&amp;gt;
     |   Qdisc                                   \__qdisc4__/  |
     |                                            \-qdiscN_/   |
     |                                                         |
     +----------------------------------------------------------+

Thanks to Jamal Hadi Salim for this ASCII representation.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上图中的框代表 Linux 内核。最左侧的箭头表示流量从外部网络进入主机。然后进入
Ingress Qdisc，这里会对包进行过滤（apply Filters），根据结果&lt;strong&gt;决定是否要丢弃这个
包&lt;/strong&gt;。这个过程称为 “Policing”。&lt;strong&gt;这个过程发生在内核处理的很早阶段&lt;/strong&gt;，在穿过大部
分内核基础设施之前。&lt;strong&gt;因此在这里丢弃包是很高效的&lt;/strong&gt;，不会消耗大量 CPU。&lt;/p&gt;

&lt;p&gt;如果判断允许这个包通过，那它的目的端可能是本机上的应用（local application），这
种情况下它会进入内核 IP 协议栈进行进一步处理，最后交给相应的用户态程序。另外，这
个包的目的地也可能是其他主机上的应用，这种情况下就需要通过这台机器 Egress
Classifier 再发送出去。主机程序也可能会发送数据，这种情况下也会通过 Egress
Classifier 发送。&lt;/p&gt;

&lt;p&gt;Egress Classifier 中会用到很多 qdisc。&lt;strong&gt;默认情况下只有一个：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast&lt;/code&gt; qdisc&lt;/strong&gt;
，它永远会接收包，这称为“入队”（”enqueueing”）。&lt;/p&gt;

&lt;p&gt;此时包位于 qdisc 中了，等待内核召唤，然后通过网络接口（network interface）发送出去。
这称为“出队”（”dequeueing”）。&lt;/p&gt;

&lt;p&gt;以上画的是单网卡的情况。&lt;strong&gt;在多网卡的情况下，每个网卡都有自己的 ingress 和 egress hooks&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;95-classful-qdisc分类别排队规则&quot;&gt;9.5 Classful qdisc（分类别排队规则）&lt;/h2&gt;

&lt;p&gt;如果想&lt;strong&gt;对不同类型的流量做不同处理&lt;/strong&gt;，那 classful qdisc 非常有用。其中一种是 CBQ（
Class Based Queueing，基于类别的排队），由于这种类型的 qdisc 使用太广泛了，导致
大家将广义上基于类别的排队等同于 CBQ（identify queueing with classes solely with
CBQ），但实际并非如此。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CBQ 只是其中最古老 —— 也是最复杂 —— 的一种&lt;/strong&gt;。它的行为有时可能在你的意料之外。
那些钟爱 “sendmail effect” 的人可能感到震惊。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sendmail effect：对于任何复杂的技术，没有文档的实现一定是最好的实现。&lt;/p&gt;

  &lt;p&gt;Any complex technology which doesn’t come with documentation must be the best available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接下来介绍更多关于 CBQ 及其类似 qdisc 的信息。&lt;/p&gt;

&lt;h3 id=&quot;951-classful-qdisc--class-中的-flow&quot;&gt;9.5.1 Classful qdisc &amp;amp; class 中的 flow&lt;/h3&gt;

&lt;p&gt;当流量进入一个 classful qdisc 时，该 qdisc 需要将其发送到内部的某个 class —— 即
需要&lt;strong&gt;对这个包进行“分类”&lt;/strong&gt;。而要这个判断过程，，实际上是&lt;strong&gt;查询所谓的“过滤器”&lt;/strong&gt;（
‘filters’）。&lt;strong&gt;过滤器是在 qdisc 中被调用的，而不是其他地方&lt;/strong&gt;，理解一点非常重要！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;过滤器返回一个判决结果给 qdisc，qdisc 据此将包 enqueue 到合适的 class&lt;/strong&gt;。
每个 subclass 可能会进一步执行其他 filters，以判断是否需要进一步处理。如果没有
其他过滤器，这个 class 将把包 enqueue 到它自带的 qdisc。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;除了能包含其他 qdisc，大部分 classful qdisc 还会执行流量整形&lt;/strong&gt;。这对包调
度（packet scheduling，例如，基于 SFQ）和速率控制（rate control）都非常有用。
当高速设备（例如，以太网）连接到一个低速设备（例如一个调制解调器）时，会用到这个
功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果只运行 SFQ，那将什么事情都不会发生&lt;/strong&gt;，因为包会无延迟地进入和离开你的路由
器：&lt;strong&gt;网卡的发送速度要远大于真实的链路速度。瓶颈不在主机中，就无法用“队列”（queue
）来调度这些流量&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;952-qdisc-大家庭roots-handles-siblings-and-parents&quot;&gt;9.5.2 qdisc 大家庭：roots, handles, siblings and parents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;每个接口都有一个 egress “root qdisc”&lt;/strong&gt;。默认情况下，这个 root qdisc 就是前
面提到的 classless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast&lt;/code&gt; qdisc。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;每个 qdisc 和 class 都会分配一个相应的 handle（句柄）&lt;/strong&gt;，可以指定 handle 对 qdisc 进行配置。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;每个接口可能还会有一个 ingress qdisc&lt;/strong&gt;，用来对入向流量执行策略（which polices traffic coming in）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 handle：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每个 &lt;strong&gt;handle 由两部分组成，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;major&amp;gt;:&amp;lt;minor&amp;gt;&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;按照惯例，root qdisc 的 handle 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:&lt;/code&gt;，这是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:0&lt;/code&gt; 的简写。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;每个 qdisc 的 minor number 永远是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 class：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每个 class 的 major number 必须与其 parent 一致。&lt;/li&gt;
  &lt;li&gt;major number 在一个 egress 或 ingress 内必须唯一。&lt;/li&gt;
  &lt;li&gt;minor number 在一个 qdisc 或 class 内必须唯一。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;上面的解释有点模糊，可对照 &lt;a href=&quot;https://man7.org/linux/man-pages/man8/tc.8.html&quot;&gt;tc(8) man page&lt;/a&gt; 的解释：&lt;/p&gt;

  &lt;p&gt;所有 qdiscs、classes 和 filters 都有 ID，这些 ID 可以是指定的，也可以是自动分的。&lt;/p&gt;

  &lt;p&gt;ID 格式 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;major:minor&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;major&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minor&lt;/code&gt; 都是 16 进制数字，不超过 2 字节。
两个特殊值：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;major&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minor&lt;/code&gt; 初始化全 1。&lt;/li&gt;
    &lt;li&gt;省略未指定的部分将为全 0。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;下面分别介绍以上三者的 ID 规范。&lt;/p&gt;

  

  &lt;p&gt;译者注。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;9521-如何用过滤器filters-对流量进行分类&quot;&gt;9.5.2.1 如何用过滤器（filters ）对流量进行分类&lt;/h4&gt;

&lt;p&gt;综上，一个典型的 handle 层级如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                     1:   root qdisc
                      |
                     1:1    child class
                   /  |  \
                  /   |   \
                 /    |    \
                 /    |    \
              1:10  1:11  1:12   child classes
               |      |     | 
               |     11:    |    leaf class
               |            | 
               10:         12:   qdisc
              /   \       /   \
           10:1  10:2   12:1  12:2   leaf classes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但不要被这棵树迷惑！不要以为内核位于树的顶点，网络位于下面。&lt;strong&gt;包只会通过 root
qdisc 入队或出队&lt;/strong&gt;（get enqueued and dequeued），这也是内核唯一与之交互的部分（
the only thing the kernel talks to）。&lt;/p&gt;

&lt;p&gt;一个包可能会被链式地分类如下（get classified in a chain）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: -&amp;gt; 1:1 -&amp;gt; 1:12 -&amp;gt; 12: -&amp;gt; 12:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后到达 attach 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class 12:2&lt;/code&gt; 的 qdisc 的队列。在这个例子中，树的每个“节点”（
node）上都 attach 了一个 filter，每个 filter 都会给出一个判断结果，根据判断结果
选择一个合适的分支将包发送过去。&lt;strong&gt;这是常规的流程&lt;/strong&gt;。但下面这种流程也是有可能的：&lt;/p&gt;



&lt;p&gt;在这种情况下，attach 到 root qdisc 的 filter 决定直接将包发给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12:2&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;9522-包是如何从-qdisc-出队dequeue然后交给硬件的&quot;&gt;9.5.2.2 包是如何从 qdisc 出队（dequeue）然后交给硬件的&lt;/h3&gt;

&lt;p&gt;当内核决定从 qdisc dequeue packet 交给接口（interface）发送时，它会&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;向 root qdisc &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:&lt;/code&gt; 发送一个 dequeue request&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:&lt;/code&gt; 会将这个请求转发给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:1&lt;/code&gt;，后者会进一步向下传递，转发给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10:&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11:&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;每个 qdisc 会查询它们的 siblings，并尝试在上面执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dequeue()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;在这个例子中，内核需要遍历整棵树，因为只有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12:2&lt;/code&gt; 中有数据包&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;简单来说，&lt;strong&gt;嵌套类（nested classes）只会和它们的 parent qdiscs 通信，而永远不会直
接和接口交互&lt;/strong&gt;。&lt;strong&gt;内核只会调用 root qdisc 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dequeue()&lt;/code&gt; 方法！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最终结果是，&lt;strong&gt;classes dequeue 的速度永远不会超过它们的 parents 允许的速度&lt;/strong&gt;。而这正
是我们所期望的：这样就能在内层使用一个 SFQ 做纯调度，它不用做任何整形的工作
；然后在外层使用一个整形 qdisc 专门负责整形。&lt;/p&gt;

&lt;h3 id=&quot;953-prio-qdisc优先级排队规则&quot;&gt;9.5.3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIO&lt;/code&gt; qdisc（优先级排队规则）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIO&lt;/code&gt; qdisc 实际上不会整形，只会根据设置的过滤器对流量进行分类&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可以将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIO&lt;/code&gt; qdisc 理解为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast&lt;/code&gt; qdisc 的升级版&lt;/strong&gt;，它也有多个 band，但
每个 band 都是一个独立的 class，而不是简单的 FIFO。&lt;/p&gt;

&lt;p&gt;当一个包 enqueue 到 PRIO qdisc 之后，它会根据设置的 filters 选择一个 class
，并将包送到这个 class。默认情况下会创建三个 class。每个 class 默认情况下都包含一
个纯 FIFO qdisc，没有其他内部结构，但你可以用其他类型的 qdisc 替换掉 FIFO。&lt;/p&gt;

&lt;p&gt;当从 PRIO qdisc 取出（dequeue）一个包时，会先尝试 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:1&lt;/code&gt;。只有 lower bands/classes
没有数据包可取时，才会尝试 higher classes。&lt;/p&gt;

&lt;p&gt;如果想&lt;strong&gt;基于 tc filters 而不仅仅是 TOS flags 做流量优先级分类&lt;/strong&gt;时，这个 qdisc 会非常
有用。还可以向这三个预置的 classes 添加额外的 qdisc，毕竟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfifo_fast&lt;/code&gt; 只能提供简
单的 FIFO qdisc。&lt;/p&gt;

&lt;p&gt;由于 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIO&lt;/code&gt; 没有流量整形功能&lt;/strong&gt;，因此针对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SFQ&lt;/code&gt; 的忠告也适用于这里：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果你的物理链路已经打满了，可以用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIO&lt;/code&gt; qdisc （对流量进行分类），或者&lt;/li&gt;
  &lt;li&gt;在外层嵌套一个 classful qdisc，后者负责流量整形。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;用正式的术语来说，&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIO&lt;/code&gt; qdisc 是一个 work-conserving 调度器&lt;/strong&gt;（随到随发）。&lt;/p&gt;

&lt;h4 id=&quot;9531-参数与用法&quot;&gt;9.5.3.1 参数与用法&lt;/h4&gt;

&lt;p&gt;下面几个参数能被 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc&lt;/code&gt; 识别：&lt;/p&gt;



&lt;p&gt;PRIO qdisc 里面的 band 都是 class，默认情况下名字分别为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;major:1&lt;/code&gt;、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;major:2&lt;/code&gt;、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;major:3&lt;/code&gt;，
因此如果你的 PRIO qdisc 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12:&lt;/code&gt;，那 tc filter 送到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12:1&lt;/code&gt; 的流量就有更高的优先级。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重复一遍：band 0 对应的 minor number 是 1！&lt;/strong&gt; band 1 对应的 minor number 是 2
，以此类推。&lt;/p&gt;

&lt;h4 id=&quot;9532-示例配置&quot;&gt;9.5.3.2 示例配置&lt;/h4&gt;

&lt;p&gt;我们将创建一棵如下所示的树：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          1:   root qdisc
         / | \ 
        /  |  \
       /   |   \
     1:1  1:2  1:3    classes
      |    |    |
     10:  20:  30:    qdiscs    qdiscs
     sfq  tbf  sfq
band  0    1    2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;高吞吐流量（Bulk traffic）将送到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30:&lt;/code&gt;，交互式流量（interactive traffic）将送到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20:&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10:&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;命令行：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 root handle 1: prio &lt;span class=&quot;c&quot;&gt;# This *instantly* creates classes 1:1, 1:2, 1:3&lt;/span&gt;
  
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 parent 1:1 handle 10: sfq
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 parent 1:2 handle 20: tbf rate 20kbit buffer 1600 limit 3000
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 parent 1:3 handle 30: sfq                                
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后查看创建出来的 qdisc：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# tc -s qdisc ls dev eth0 &lt;/span&gt;
qdisc sfq 30: quantum 1514b 
 Sent 0 bytes 0 pkts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dropped 0, overlimits 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 

 qdisc tbf 20: rate 20Kbit burst 1599b lat 667.6ms 
 Sent 0 bytes 0 pkts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dropped 0, overlimits 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 

 qdisc sfq 10: quantum 1514b 
 Sent 132 bytes 2 pkts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dropped 0, overlimits 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 

 qdisc prio 1: bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1
 Sent 174 bytes 3 pkts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dropped 0, overlimits 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到，band 0 已经有了一些流量，而且在执行这条命令的过程中，刚好又发送了一个
包！&lt;/p&gt;

&lt;p&gt;现在我们来用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt; 命令传输一些数据，它会自动设置 TOS flags：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ scp tc ahu@10.0.0.11:./
ahu@10.0.0.11&#x27;s password: 
tc                   100% |*****************************|   353 KB    00:00    

$ tc -s qdisc ls dev eth0
qdisc sfq 30: quantum 1514b 
 Sent 384228 bytes 274 pkts (dropped 0, overlimits 0) 

 qdisc tbf 20: rate 20Kbit burst 1599b lat 667.6ms 
 Sent 2640 bytes 20 pkts (dropped 0, overlimits 0) 

 qdisc sfq 10: quantum 1514b 
 Sent 2230 bytes 31 pkts (dropped 0, overlimits 0) 

 qdisc prio 1: bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1
 Sent 389140 bytes 326 pkts (dropped 0, overlimits 0) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到，所有的流量都进入了优先级最低的 handle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30:&lt;/code&gt;，这正是我们期望的。为了验
证交互式流量会进入优先级更高的 bands，我们可以生成一些交互式流量。
然后再来查看统计：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# tc -s qdisc ls dev eth0&lt;/span&gt;
qdisc sfq 30: quantum 1514b 
 Sent 384228 bytes 274 pkts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dropped 0, overlimits 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 

 qdisc tbf 20: rate 20Kbit burst 1599b lat 667.6ms 
 Sent 2640 bytes 20 pkts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dropped 0, overlimits 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 

 qdisc sfq 10: quantum 1514b 
 Sent 14926 bytes 193 pkts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dropped 0, overlimits 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 

 qdisc prio 1: bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1
 Sent 401836 bytes 488 pkts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dropped 0, overlimits 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正如预期 —— 所有额外流量都进入了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10:&lt;/code&gt;，这是我们优先级最高的 qdisc。handle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30:&lt;/code&gt;
的流量这次没有增长，而刚才它吸收了所有的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt; 流量。&lt;/p&gt;

&lt;h3 id=&quot;954-著名的-cbqclass-based-queueingqdisc&quot;&gt;9.5.4 著名的 CBQ（Class Based Queueing）qdisc&lt;/h3&gt;

&lt;p&gt;前面提到，&lt;strong&gt;CBQ（Class Based Queueing，基于类的排队） 是最复杂、最花哨、最少被理
解、也可能是最难用对的 qdisc&lt;/strong&gt;。这并非因为它的发明者都是魔鬼或者能力不够，而是
因为 CBQ 算法经常不够精确，而这是由于&lt;strong&gt;它与 Linux 的工作方式不是太匹配&lt;/strong&gt;造成的。&lt;/p&gt;

&lt;p&gt;除了是 classful qdisc 之外，CBQ 还是一个整流器（shaper），作为一个整流器来说，
其实它工作地并不是非常理想。理想的工作方式应该是这样的：如果想将一个 10Mbps 的连
接整形为 1Mbps，那这条链路应该有 90% 的时间是空闲的。否则，我们就需要 throttle
来确保链路 90% 的时间是空闲的。&lt;/p&gt;

&lt;p&gt;但&lt;strong&gt;空闲时间是很难测量的&lt;/strong&gt;，CBQ 的方式是：用硬件层连续两次请求数据的时间间隔（
毫秒）来推算。这可以用来近似估计链路的空闲状态（how full or empty the link is）。&lt;/p&gt;

&lt;p&gt;这种测量方式是非常间接的，因此结果并不总是很准确。例如，接口的物理带宽是 100Mbps
，但它可能永远打不到 100Mbps，而原因可能是网卡驱动写的太烂。另一个例子，PCMCIA 网
卡永远打不到 100Mbps，这是由于其总线设计导致的 —— 因此，又回到那个问题：&lt;strong&gt;应该
如何计算空闲时间&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;当考虑到非纯物理网络设备（not-quite-real network devices）时，例如
PPP over Ethernet 或 PPTP over TCP/IP，情况会更加糟糕。在这些场景中，有效带
宽可能是由到用户空间的管道（pipe）效率决定的 —— 这个值可能很高。&lt;/p&gt;

&lt;p&gt;真正测量过的人会发现，CBQ 并不是永远很精确，有时甚至完全偏离了真实值。&lt;/p&gt;

&lt;p&gt;但在某些场景下，CBQ 能很好地满足需求。基于本文的介绍，你应该能恰当地配置 CBQ，使
其在大部分情况下都工作良好。&lt;/p&gt;

&lt;h4 id=&quot;9541-cbq-shaping-详解&quot;&gt;9.5.4.1 CBQ shaping 详解&lt;/h4&gt;

&lt;p&gt;如前所述，CBQ 的工作原理是：在发送包之前等待足够长的时间，以将带宽控制到期望
的阈值。为实现这个目标，它需要计算包之间的等待间隔。&lt;/p&gt;

&lt;p&gt;系统在运行过程中会计算一个&lt;strong&gt;有效空闲时间&lt;/strong&gt;（effective idletime）：用&lt;strong&gt;指数加权移动平均&lt;/strong&gt;（
exponential weighted moving average，EWMA）来计算，这个算法假设包的优先级大小
是指数变化的，越近的包（recent packets）优先级越高。UNIX 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadaverage&lt;/code&gt; 指标
就是用的这个算法。&lt;/p&gt;

&lt;p&gt;平均空闲时间（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avgidle&lt;/code&gt;）的定义：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avgidle = 有效空闲时间（EWMA）- 计算出的空闲时间&lt;/code&gt;，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;理想的未过载链路（loaded link）：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avgidle = 0&lt;/code&gt;&lt;/strong&gt;，每经过精确地计算出的时间间隔，就有一个数据
包到来（packets arrive exactly once every calculated interval）。&lt;/li&gt;
  &lt;li&gt;过载链路（overloaded link）：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avgidle &amp;lt; 0&lt;/code&gt;，如果这个负值变得太大，CBQ 会关闭一
会，表示超出限制了（overlimit）。&lt;/li&gt;
  &lt;li&gt;空闲链路（idle link）：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avgidle &amp;lt; 0&lt;/code&gt;，而且这个值可能会非常大，这可能会导致
累积几个小时之后，算法允许无限大的带宽（infinite bandwidths after a few hours of silence）。
为防止这种情况发生，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avgidle&lt;/code&gt; 会设置一个上限（maxidle）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果发生 overlimit，理论上 CBQ 会严格等待 calculated_idletime，然后才发生下一个
包，然后再次 throttle 自己。但此时也要注意 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minburst&lt;/code&gt; 参数，见下面。&lt;/p&gt;

&lt;p&gt;下面是整形（shaping）相关的配置参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;avpkt&lt;/p&gt;

    &lt;p&gt;平均包长，单位是字节。计算 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxidle&lt;/code&gt; 时会用到。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;bandwidth&lt;/p&gt;

    &lt;p&gt;设备的物理带宽，计算 idle time 时会用到。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cell&lt;/p&gt;

    &lt;p&gt;包长的增长步长。设备发送不同长度的包时，耗时可能是不一样的，与包长有关。
  例如，一个 800Byte 和一个 806Byte 的包所花的发送时间可能是一样的。默认值通常是
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;，必须是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; 的幂次。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxburst&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;计算 maxidle 时用到，单位：包数（number of packets）。&lt;/p&gt;

    &lt;p&gt;当 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avgidle == maxidle&lt;/code&gt; 时，可以并发发送 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxburst&lt;/code&gt; 个包，直到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avgidle == 0&lt;/code&gt;。
  注意 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxidle&lt;/code&gt; 是无法直接设置的，只能通过这个参数间接设置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;minburst&lt;/p&gt;

    &lt;p&gt;前面提到，overlimit 情况下 CBQ 要执行 throttle。理想情况下是精确 throttle
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculated idel time&lt;/code&gt;，然后发送一个包。但对 Unix 内核来说，通常很难调度
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10ms&lt;/code&gt; 以下精度的事件，因此最好的方式就是 throttle 更长一段时间，然后一次发
  送 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minburst&lt;/code&gt; 个包，然后再睡眠 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minburst&lt;/code&gt; 倍的时间。&lt;/p&gt;

    &lt;p&gt;The time to wait is called the offtime。从较长时间跨度看，更大的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minburst&lt;/code&gt;
  会使得整形更加精确，但会导致在毫秒级别有更大的波动性。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;minidle&lt;/p&gt;

    &lt;p&gt;如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avgidle &amp;lt; 0&lt;/code&gt;，那说明 overlimits，需要等到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avgidle&lt;/code&gt; 足够大才能发送下一个包。 
  为防止突然的 burst 打爆链路带宽，当 avgidle 降到一个非常小的值之后，会 reset 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minidle&lt;/code&gt;。
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minidle&lt;/code&gt; 的单位是负微秒（negative microseconds），因此 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt; 就表示 idle
  time 下限是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-10us&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;mpu&lt;/p&gt;

    &lt;p&gt;最小包长（Minimum packet size）—— 需要这个参数是因为，即使是零字节的包在以太
  网上传输时也会被填充到 64 字节，因此总会有一个发送耗时。 
  CBQ 需要这个参数来精确计算 idle time。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rate&lt;/p&gt;

    &lt;p&gt;期望的离开这个 qdisc 的流量速率（rate of traffic）——  这就是“速度旋钮”（speed knob）！&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在内部，CBQ 有很多优化。例如，在 dequeue 包时，已经明确知道没有数据的 class 都会跳过。
Overlimit 的 class 会通过降低其有效优先级（effective priority）的方式进行惩罚。
所有这些都是很智能也很复杂的。&lt;/p&gt;

&lt;h4 id=&quot;9542-cbq-classful-behaviour&quot;&gt;9.5.4.2 CBQ classful behaviour&lt;/h4&gt;

&lt;p&gt;除了整形之外，基于前面提到的 idletime 近似，CBQ 也能完成类似 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIO&lt;/code&gt; queue 的功能
，因为 class 可以有不同优先级，优先级高的总是限于优先级低的被 poll。&lt;/p&gt;

&lt;p&gt;每次硬件层请求一个数据包来发送时，都会开启一个 weighted round robin （WRR）过程，
从优先级最高的 class 开始（注意，优先级越高对应的 priority number 越小）。&lt;/p&gt;

&lt;p&gt;优先级相同的 class 会作为一组，依次判断它们是否有数据要发送。&lt;/p&gt;

&lt;p&gt;下列参数控制 WRR 过程：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;allot&lt;/p&gt;

    &lt;p&gt;当外层 CBQ 收到网卡要发送一个数据包的请求后，它会按照 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prio&lt;/code&gt; 参数指定的
  优先级，尝试依次 classes 内 attach 的所有内部 qdiscs。 每个 class 被轮到时，
  它只能发送有限的一些数据。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alloct&lt;/code&gt; 就是这个数据量的一个基本单位。更多信息参见
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weight&lt;/code&gt; 参数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;prio&lt;/p&gt;

    &lt;p&gt;CBQ 也能执行与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIO&lt;/code&gt; 设备一样的行为。内部 classes 都有一个优先级 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prio&lt;/code&gt;，高
  优先级的会先于低优先级的被 poll。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;weight&lt;/p&gt;

    &lt;p&gt;这个参数用于 WRR 过程。每个 class 都有机会发送数据。如果要指定某个 class 使
  用更大的带宽，就调大其 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weight&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;CBQ 会将一个 class 内的所有权重归一化，因此指定用整数还是小数都没关系：重要
  的是比例。大家的经验值是 “rate/10”，这个值看上去工作良好。归一化后的
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weight&lt;/code&gt; 乘以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allot&lt;/code&gt;，决定了每次能发送的数据量。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意：CBQ 层级内的所有 class 要共享同一个 major number！&lt;/p&gt;

&lt;h4 id=&quot;9543-决定-link-sharing--borrowing-的-cbq-参数&quot;&gt;9.5.4.3 决定 link sharing &amp;amp; borrowing 的 CBQ 参数&lt;/h4&gt;

&lt;p&gt;除了限制特定类型的流量，还能指定哪些 class 能从另外哪些 class 借容量（borrow
capacity）或者说，借带宽（对前一种 class 来说是借入，对后一种 class 来说就是借出）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isolated&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sharing&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;配置了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isolated&lt;/code&gt; 的 class 不会向 sibling classes 借出带宽。如果多个应用
  之间在链路利用上是竞争或互斥的，彼此不想给对方带宽，那可以用这个配置。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc&lt;/code&gt; 工具还有一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sharing&lt;/code&gt; 配置，作用于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isolated&lt;/code&gt; 相反。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bounded&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;borrow&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;也可以配置 class 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bounded&lt;/code&gt;，这表示它不会向其他 siblings 借带宽。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc&lt;/code&gt; 工具还支持一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;borrow&lt;/code&gt; 选项，作用于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bounded&lt;/code&gt; 相反。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个典型场景可能是：同一个链路上有两个应用，二者都是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isolated&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bounded&lt;/code&gt;
，这表示二者都只会限制在它们各自分配的速率内，不会互相借带宽。&lt;/p&gt;

&lt;p&gt;有了这样的 agency class（代理类），可能还会有其他允许交换带宽的 class。&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;cbq_sample_config&quot;/&gt;&lt;/p&gt;

&lt;h4 id=&quot;9544-示例配置&quot;&gt;9.5.4.4 示例配置&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;               1:           root qdisc
               |
              1:1           child class
             /   \
            /     \
          1:3     1:4       leaf classes
           |       |
          30:     40:       qdiscs
         (sfq)   (sfq)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个例子将&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;webserver 限制为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5Mbps&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;SMTP 流量限制到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3Mbps&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;webserver + SMTP 总共不超过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6Mbps&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;物理网卡是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100Mbps&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;每个 class 之间可以互借带宽。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;命令：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 root handle 1:0 cbq bandwidth 100Mbit         &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  avpkt 1000 cell 8
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev eth0 parent 1:0 classid 1:1 cbq bandwidth 100Mbit  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  rate 6Mbit weight 0.6Mbit prio 8 allot 1514 cell 8 maxburst 20      &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  avpkt 1000 bounded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面两条命令创建了 root qdisc 和相应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:1&lt;/code&gt; class。这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:1&lt;/code&gt; class 是
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bounded&lt;/code&gt; 类型，因此总带宽不会超过设置的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6Mbps&lt;/code&gt; 限制。如前所述，CBQ 需要很多
速度选项（knobs，旋钮式开关）。但用到的参数前面都介绍过了。&lt;strong&gt;如果 HTB 来实现这个
功能，就会简单很多&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev eth0 parent 1:1 classid 1:3 cbq bandwidth 100Mbit  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  rate 5Mbit weight 0.5Mbit prio 5 allot 1514 cell 8 maxburst 20      &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  avpkt 1000                       
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev eth0 parent 1:1 classid 1:4 cbq bandwidth 100Mbit  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  rate 3Mbit weight 0.3Mbit prio 5 allot 1514 cell 8 maxburst 20      &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  avpkt 1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面两个创建的是叶子节点（leaf classes）。注意其中是如何配置速率的。两个
class 都没有配置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bounded&lt;/code&gt; 参数，但它们都连着到了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:1&lt;/code&gt; class，后者是有限速不超
过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6Mbps&lt;/code&gt; 的。因此这两个 leaf class 的总带宽不会超过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6Mbps&lt;/code&gt;。另外需要注意，
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;classid&lt;/code&gt; 中的 major number 必须要和 parent qdisc 中的 major number 一样！&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 parent 1:3 handle 30: sfq
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 parent 1:4 handle 40: sfq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每个 class 默认都有一个 FIFO qdisc。但我们将其替换成了 SFQ 这样每条 flow 都能被
独立、平等对待了。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth0 parent 1:0 protocol ip prio 1 u32 match ip &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  sport 80 0xffff flowid 1:3
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth0 parent 1:0 protocol ip prio 1 u32 match ip &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  sport 25 0xffff flowid 1:4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这些过滤规则直接作用在 root qdisc 上&lt;/strong&gt;，作用是将流量分类到下面正确的 qdisc。&lt;/p&gt;

&lt;p&gt;注意其中是&lt;strong&gt;先用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc class add&lt;/code&gt; 命令往 qdisc 内添加 class，然后又用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc qdisc
add&lt;/code&gt;命令向 class 内添加 qdisc&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;你可能会好奇：&lt;strong&gt;没有匹配到以上两条规则的流量怎么办？&lt;/strong&gt;在本例中，它们会进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:0&lt;/code&gt;
接受处理，而这里是没有限速的。&lt;/p&gt;

&lt;p&gt;如果 SMTP+web 的总带宽超过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6Mbps&lt;/code&gt;，那总带宽将根据给定的权重参数分为两部分，
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5/8&lt;/code&gt; 给 webserver，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3/8&lt;/code&gt; 给邮件服务。也可以说，在这个配置下，&lt;strong&gt;webserver 流量在
任何时候至少能获得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5/8 * 6Mbps = 3.75Mbps&lt;/code&gt; 带宽&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;9545-cbq-其他参数split--defmap&quot;&gt;9.5.4.5 CBQ 其他参数：split &amp;amp; defmap&lt;/h3&gt;

&lt;p&gt;如前所述，classful qdisc 需要调用过滤器（filters）来判断应该将包送到那个 class
里面。&lt;/p&gt;

&lt;p&gt;除了调用过滤器，CBQ 还提供了其他选项：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defmap&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;split&lt;/code&gt;。这一块非常复杂，很难
理解，而且并不是非常重要。但考虑到这是目前已知的关于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defmap &amp;amp; split&lt;/code&gt; 最完善的文
档，我将尽我可能来介绍一下。&lt;/p&gt;

&lt;p&gt;As you will often want to filter on the Type of Service field only, a special
syntax is provided. Whenever the CBQ needs to figure out where a packet needs to
be enqueued, it checks if this node is a ‘split node’. If so, one of the
sub-qdiscs has indicated that it wishes to receive all packets with a certain
configured priority, as might be derived from the TOS field, or socket options
set by applications.&lt;/p&gt;

&lt;p&gt;The packets’ priority bits are and-ed with the defmap field to see if a match
exists. In other words, this is a short-hand way of creating a very fast filter,
which only matches certain priorities. A defmap of ff (hex) will match
everything, a map of 0 nothing. A sample configuration may help make things
clearer:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth1 root handle 1: cbq bandwidth 10Mbit allot 1514 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  cell 8 avpkt 1000 mpu 64
 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev eth1 parent 1:0 classid 1:1 cbq bandwidth 10Mbit    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  rate 10Mbit allot 1514 cell 8 weight 1Mbit prio 8 maxburst 20        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  avpkt 1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Standard CBQ preamble. I never get used to the sheer amount of numbers required!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defmap&lt;/code&gt; 会用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TC_PRIO&lt;/code&gt; bits，后者定义如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TC_PRIO..          Num  Corresponds to TOS
-------------------------------------------------
BESTEFFORT         0    Maximize Reliablity        
FILLER             1    Minimize Cost              
BULK               2    Maximize Throughput (0x8)  
INTERACTIVE_BULK   4                               
INTERACTIVE        6    Minimize Delay (0x10)      
CONTROL            7                               
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于 TOS bits 如何映射到 priorities，参考 &lt;a href=&quot;#pfifo_fast&quot;&gt;pfifo_fast&lt;/a&gt; 小结。&lt;/p&gt;

&lt;p&gt;现在看交互式和批量 classes：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev eth1 parent 1:1 classid 1:2 cbq bandwidth 10Mbit     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  rate 1Mbit allot 1514 cell 8 weight 100Kbit prio 3 maxburst 20        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  avpkt 1000 &lt;span class=&quot;nb&quot;&gt;split &lt;/span&gt;1:0 defmap c0

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev eth1 parent 1:1 classid 1:3 cbq bandwidth 10Mbit     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  rate 8Mbit allot 1514 cell 8 weight 800Kbit prio 7 maxburst 20        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  avpkt 1000 &lt;span class=&quot;nb&quot;&gt;split &lt;/span&gt;1:0 defmap 3f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“split qdisc” 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:0&lt;/code&gt;，表示在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:0&lt;/code&gt; 进行判断。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C0&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11000000&lt;/code&gt; 的二进制表示，
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3F&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00111111&lt;/code&gt;，因此这二者足以匹配任何东西。第一个 class 匹配第 6 &amp;amp; 7 位，因
此对应的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTERACTIVE&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTROL&lt;/code&gt; 流量。第二个 class 匹配的是其他所有流量。&lt;/p&gt;

&lt;p&gt;节点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:0&lt;/code&gt; 此时有一个如下的映射表：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;priority  send to
0         1:3
1         1:3
2         1:3
3         1:3
4         1:3
5         1:3
6         1:2
7         1:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果对此有进一步兴趣，还可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc class change&lt;/code&gt; 命令传递一个 “change mask” 参
数，精确地指定你期望的优先级映射关系。例如，要将 best effort 流量转到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:2&lt;/code&gt;，执
行命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tc class change dev eth1 classid 1:2 cbq defmap 01/01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:0&lt;/code&gt; 处的 priority map 将变成下面这样：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;priority  send to
0         1:2
1         1:3
2         1:3
3         1:3
4         1:3
5         1:3
6         1:2
7         1:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;FIXME: did not test ‘tc class change’, only looked at the source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;955-htbhierarchical-token-bucket层级令牌桶&quot;&gt;9.5.5 HTB（Hierarchical Token Bucket，层级令牌桶）&lt;/h3&gt;

&lt;p&gt;Martin Devera (devik) 意识到 CBQ 太复杂了，并且没有针对很多典型的场景进
行优化。因此他设计了 HTB，这种层级化的方式对下面这些场景很适用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有一个固定总带宽，想将其分割成几个部分，分别用作不同目的&lt;/li&gt;
  &lt;li&gt;每个部分的带宽是有保证的（guaranteed bandwidth）&lt;/li&gt;
  &lt;li&gt;还可以指定每个部分向其他部分借带宽&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HTB 的工作方式与 CBQ 类似，但不是借助于计算空闲时间（idle time）来实现整形&lt;/strong&gt;。
在内部，它其实是一个 classful TBF（令牌桶过滤器）—— 这也是它叫层级令牌桶（HTB）
的原因。HTB 的参数并不多，在它的&lt;a href=&quot;http://luxik.cdi.cz/~devik/qos/htb/&quot;&gt;网站&lt;/a&gt;文档
里都已经写的很明确了。&lt;/p&gt;

&lt;p&gt;即使发现你的 HTB 配置越来越复杂，这些配置还是能比较好地扩展（scales well）。而使
用 CBQ 的话，即使在简单场景下配置就很复杂了！
HTB3（HTB 的不同版本参见其&lt;a href=&quot;http://luxik.cdi.cz/~devik/qos/htb/&quot;&gt;官方文档&lt;/a&gt;）现在
已经并入正式内核了（from 2.4.20-pre1 and 2.5.31 onwards）。但你可能还是要应用一
个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc&lt;/code&gt; 的 patch：HTB 内核和用户空间模块的主版本号必须相同，否则 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc&lt;/code&gt; HTB 无法正
常工作。&lt;/p&gt;

&lt;p&gt;如果使用的内核版本已经支持 HTB，那非常建议用用看。&lt;/p&gt;

&lt;h4 id=&quot;9551-示例配置&quot;&gt;9.5.5.1 示例配置&lt;/h4&gt;

&lt;p&gt;功能几乎与 &lt;a href=&quot;#cbq_sample_config&quot;&gt;前面的 CBQ 示例配置&lt;/a&gt; 一样的 HTB 配置：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 root handle 1: htb default 30

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev eth0 parent 1: classid 1:1 htb rate 6mbit burst 15k

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev eth0 parent 1:1 classid 1:10 htb rate 5mbit burst 15k
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev eth0 parent 1:1 classid 1:20 htb rate 3mbit ceil 6mbit burst 15k
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev eth0 parent 1:1 classid 1:30 htb rate 1kbit ceil 6mbit burst 15k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HTB 作者推荐在这些 class 内部使用 SFQ：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 parent 1:10 handle 10: sfq perturb 10
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 parent 1:20 handle 20: sfq perturb 10
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev eth0 parent 1:30 handle 30: sfq perturb 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后，将流量导向这些 class 的过滤器（filters）：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ U32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ $U32&lt;/span&gt; match ip dport 80 0xffff flowid 1:10
&lt;span class=&quot;nv&quot;&gt;$ $U32&lt;/span&gt; match ip sport 25 0xffff flowid 1:20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这就是 HTB 的配置了 —— 没有看上去不知道是什么意思的数字（unsightly unexplained
numbers），没有查文档都查不到的参数。
HTB 显然看上去非常棒 —— 如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10:&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20:&lt;/code&gt; 都获得了保证的带宽（guaranteed
bandwidth），并且总带宽中还有很多剩余，它们还可以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5:3&lt;/code&gt; 的比例借用额外带宽，正如
我们所期望的。&lt;/p&gt;

&lt;p&gt;未分类的流量（unclassified traffic）会进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30:&lt;/code&gt;，这个 band 只有很小的带宽，但能
够从剩余的可用带宽中借带宽来用。由于我们用了的 SFQ（随机公平调度），我们还获得了
公平调度而没有增加额外成本！&lt;/p&gt;

&lt;h2 id=&quot;96-用过滤器对流量进行分类&quot;&gt;9.6 用过滤器对流量进行分类&lt;/h2&gt;

&lt;p&gt;每次要判断将包送到哪个 class 进行处理时，都会调用所谓的“classifier chain”（分类
器链）。这个 chain 由 attach 到 classful qdisc 的所有 filter 构成。&lt;/p&gt;

&lt;p&gt;还是前面那个例子（包最终到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12:2&lt;/code&gt;）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                    root 1:
                      |
                    _1:1_
                   /  |  \
                  /   |   \
                 /    |    \
               10:   11:   12:
              /   \       /   \
           10:1  10:2   12:1  12:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当 enqueue 一个包时，在每一个分叉的地方都需要查询相关的过滤规则。&lt;/p&gt;

&lt;p&gt;一种典型的配置是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:1&lt;/code&gt; 配置一个 filter，将包送到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12:&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12:&lt;/code&gt; 配置一个 filter，将包送到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12:2&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外一种配置：将两个 filters 都配置在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:1&lt;/code&gt;，但&lt;strong&gt;将更精确的 filter 下放到更下面
的位置有助于提升性能&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;需要注意的是，包是无法向上过滤的（filter a packet ‘upwards’）。
另外，&lt;strong&gt;使用 HTB 时，所有的 filters 必须 attach 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;包只能向下 enqueue！当 dequeue 时，它们会重新上来，到达要发送它的网络接口。
包并不是一路向下，最后从叶子节点到达网卡的！&lt;/p&gt;

&lt;h3 id=&quot;961-一些简单的流量过滤filtering示例&quot;&gt;9.6.1 一些简单的流量过滤（filtering）示例&lt;/h3&gt;

&lt;p&gt;正如在 Classifier 章节中介绍的，匹配语法非常复杂，但功能强大，可以对几乎任
何东西进行匹配。&lt;/p&gt;

&lt;p&gt;这里先从简单的开始。假设有一个名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10:&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIO&lt;/code&gt; qdisc，其中包含了三个
class，我们想将所有端口 22 的流量都导向优先级最高的 band，那 filters 将如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth0 protocol ip parent 10: prio 1 u32 match &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
  ip dport 22 0xffff flowid 10:1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth0 protocol ip parent 10: prio 1 u32 match &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  ip sport 80 0xffff flowid 10:1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth0 protocol ip parent 10: prio 2 flowid 10:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这几行命令是什么意思？第一条命令：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc filter add dev eth0&lt;/code&gt;：attach 到 eth0 设备。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parent 10:&lt;/code&gt;：父设备是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10:&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prio 1&lt;/code&gt;：优先级为 1（数字越小，优先级越高）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u32 match ip dport 22 0xffff&lt;/code&gt; filter：精确匹配 dst port 22，并将匹配的包发送到 band &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10:1&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第二条命令与第一条类似，不过匹配的源端口 80。第三条命令表示所有未匹配到上面的包
，都发送到优先级次高的 band &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10:2&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;上面的命令中需要指定网络接口（interface），因为每个接口都有自己独立的 handle 空间。&lt;/p&gt;

&lt;p&gt;要&lt;strong&gt;精确匹配单个 IP 地址&lt;/strong&gt;，使用下面的命令：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth0 parent 10:0 protocol ip prio 1 u32 &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
  match ip dst 4.3.2.1/32 flowid 10:1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth0 parent 10:0 protocol ip prio 1 u32 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  match ip src 1.2.3.4/32 flowid 10:1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth0 protocol ip parent 10: prio 2      &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  flowid 10:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这会将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dst_ip=4.3.2.1&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src_ip=1.2.3.4&lt;/code&gt; 的流量送到优先级最高的队列，其他流量
送到优先级次高的队列。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;还可以将多个 match 级联起来，同时匹配源 IP 和 port&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth0 parent 10:0 protocol ip prio 1 u32 match ip src 4.3.2.1/32 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  match ip sport 80 0xffff flowid 10:1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;962-常用-filtering-命令&quot;&gt;9.6.2 常用 filtering 命令&lt;/h3&gt;

&lt;p&gt;大部分整形的命令都会以这样的命令开头：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth0 parent 1:0 protocol ip prio 1 u32 ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这种是所谓的 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u32&lt;/code&gt; 匹配&lt;/strong&gt;，特点是能匹配包的任何部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;匹配源/目的 IP 地址&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match ip src 1.2.3.0/24&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match ip dst 4.3.2.0/24&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;匹配单个 IP：指定掩码 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/32&lt;/code&gt;，或者直接省略掩码部分&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;匹配源/目的端口，任何 IP 协议&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match ip sport 80 0xffff&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match ip dport 80 0xffff&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;匹配 ip protocol（tcp, udp, icmp, gre, ipsec）&lt;/p&gt;

    &lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/protocols&lt;/code&gt; 里面的协议号，例如，ICMP 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match ip protocol 1 0xff&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;匹配 fwmark&lt;/p&gt;

    &lt;p&gt;可以用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipchains&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; 等工具对包打标（mark），这些 mark 在不同接口
  之间路由时是不会丢失的（survive routing across interfaces）。这非常有用，例
  如，实现“只对从 eth0 进入 eth1 的流量进行整形”的功能。语法：&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev eth1 protocol ip parent 1:0 prio 1 handle 6 fw flowid 1:1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;注意这里用的已经不是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u32&lt;/code&gt; 匹配了！&lt;/p&gt;

    &lt;p&gt;对包打标（mark）：&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; mangle &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; MARK &lt;span class=&quot;nt&quot;&gt;--set-mark&lt;/span&gt; 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;上面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; 只是本例随便设置的一个数字，可以是任意值。&lt;/p&gt;

    &lt;p&gt;如果不想理解完整的 tc filter 语法，那可以选择用 iptables 来打标，根据fwmark 完成分类功能。&lt;/p&gt;

    &lt;p&gt;iptables 还可以打印统计信息，有助于判断你设置的规则是否生效。下面的命令会打
  印 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mangle&lt;/code&gt; 表内所有的 mark 规则，已经每个规则已经匹配到多少包和字节数：&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; mangle &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;匹配 TOS 字段&lt;/p&gt;

    &lt;p&gt;选择交互式、最小延迟（interactive, minimum delay）流量：&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev ppp0 parent 1:0 protocol ip prio 10 u32 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    match ip tos 0x10 0xff flowid 1:4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;高吞吐流量（bulk traffic）对应的过滤条件是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x08 0xff&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多过滤相关的命令（filtering commands），见 Advanced Filters 章节。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;IMQ 并不是一种 qdisc，但其使用是与 qdisc 紧密关联的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在 Linux 中，所有 qdisc都是 attach 到网络设备上的，&lt;strong&gt;所有 enqueue 到设备的东西都
是先 enqueue 到设备 qdisc 上&lt;/strong&gt;。从概念上来说，这会存在两个限制：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;只有出方向（egress）能做整形&lt;/strong&gt;：入方向的 qdisc 实际上也是有的，但与
classful qdiscs 相比，其发挥空间非常有限。&lt;/li&gt;
  &lt;li&gt;任何一个 qdisc 只能看到一个接口（interface）的流量，&lt;strong&gt;没有全局限流功能&lt;/strong&gt;（global
limitations can’t be placed）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;IMQ 就是用来解决以上两点限制的&lt;/strong&gt;。简单来说，你可以将选中的任何东西放到 qdisc
里面。打了标的包在经过 netfilter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NF_IP_PRE_ROUTING&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NF_IP_POST_ROUTING&lt;/code&gt;
hook 点时会被捕获，送到 IMQ 设备上 attach 的 qdisc。&lt;/p&gt;

&lt;p&gt;因此对外部进来的包先打上标记（mark），就能实现&lt;strong&gt;入向整型&lt;/strong&gt;（ingress shaping），
；将接口们作为 classes（treat interfaces as classes），就能设置&lt;strong&gt;全局限速&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;你还可以做很多其他事情，例如将 http 流量放到一个 qdisc，将新连接请求放到另一个
qdisc，等等。&lt;/p&gt;

&lt;h3 id=&quot;971-示例配置&quot;&gt;9.7.1 示例配置&lt;/h3&gt;

&lt;p&gt;首先能想到的例子就是用入向整形（ingress shaping）给自己一个受保证的高带宽 ;)&lt;/p&gt;

&lt;p&gt;配置如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev imq0 root handle 1: htb default 20

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev imq0 parent 1: classid 1:1 htb rate 2mbit burst 15k

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev imq0 parent 1:1 classid 1:10 htb rate 1mbit
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc class add dev imq0 parent 1:1 classid 1:20 htb rate 1mbit

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev imq0 parent 1:10 handle 10: pfifo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc qdisc add dev imq0 parent 1:20 handle 20: sfq

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tc filter add dev imq0 parent 10:0 protocol ip prio 1 u32 match &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  ip dst 10.0.0.230/32 flowid 1:10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个例子用的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u32&lt;/code&gt; 做分类，用其他分类器也行。&lt;/p&gt;

&lt;p&gt;接下来，需要选中流量，给它们打上标记，以便能被正确送到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imq0&lt;/code&gt; 设备：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ iptables -t mangle -A PREROUTING -i eth0 -j IMQ --todev 0

$ ip link set imq0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 mangle 表内的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PREROUTING&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POSTROUTING&lt;/code&gt; chain，IMQ 都是有效的 target。
语法：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IMQ [ --todev n ]n : number of imq device
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意，流量并不是在命中 target 的时候放入 imq 队列的，而是在更后面一点（not
enqueued when the target is hit but afterwards）。流量进入 imq 设备的精确位置与
流量方向（in/out）有关。下面这些是预定义的 netfilter hooks，iptables 会用到它们：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nf_ip_hook_priorities&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NF_IP_PRI_FIRST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NF_IP_PRI_CONNTRACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NF_IP_PRI_MANGLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NF_IP_PRI_NAT_DST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NF_IP_PRI_FILTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NF_IP_PRI_NAT_SRC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NF_IP_PRI_LAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;对于 ingress 流量，imq 会将自己注册为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NF_IP_PRI_MANGLE + 1&lt;/code&gt; 优先级，这意味包
经过 PREROUTING chain 之后就会直接进入 imq 设备后。&lt;/li&gt;
  &lt;li&gt;对于 egress 流量，imq 使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NF_IP_PRI_LAST&lt;/code&gt;，which honours the fact that packets dropped by the filter table won’t occupy bandwidth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IMQ patch 及其更多信息见 &lt;a href=&quot;http://luxik.cdi.cz/~patrick/imq/&quot;&gt;&lt;del&gt;IMQ 网站&lt;/del&gt;&lt;/a&gt;（原始
链接已失效，可移步参考&lt;a href=&quot;https://github.com/imq/linuximq&quot;&gt;这篇&lt;/a&gt;，译者注）。&lt;/p&gt;


  
  
&lt;/div&gt;


          

      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e1c845b78f399151d8a25ec10b36fc5e</guid>
<title>困在内卷里的软件测试工程师</title>
<link>https://toutiao.io/k/5w3mqsq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;本文共计 6898 字，读起来有点辛苦。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;业务测试还是测试开发？&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;三十五岁的老陈，在某不知名测试社区 TesterHome 匿名版看到一个帖子，帖子的作者而立之年，接到了两个 OFFER，一个是功能岗最多只是写写脚本，不累。一个是测开是平台或工具的开发，996。公司规模差不多，工资业务测试低一点。作者问大家会怎么选？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老陈看看屏幕左上的时间，还有几分钟就到 9 点了。收拾下打车回家。在专车上，老陈又想起那个帖子。年轻人还是太幼稚了，老陈脑子里想了一堆话，手机打开网页想去回帖，页面打开的一霎那，突然泄气，心想管那么多干嘛？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老陈刚开始做测试那年，还没有那么多差别，团队里就几个人，每天做些点点点的事情。那时候用例是用 excel 记录，缺陷是用 matis 管理，没啥流程管理，敏捷刚进国内，每天早上站着乱扯几句，一周没几个会，几个月一个版本，每天能准时下班，从来不焦虑，一直以为干着业务能做一辈子。卧槽，啥时候突然变了？老陈捋了捋稀疏的头发，怎么也想不起来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TesterHome 社区的公众号第二天就这个话题发起了投票，你觉得楼主应该选测开还是业务点工？出乎老陈意料的是，选择业务居然超过了选择测开的。老陈想这是业务测试们的意淫么？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.24861441013460014&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCCedG5xew4ibYmArMbyJ4WcWG42ibc3cUXYqTibR0SWaA9AwsQRodUxnY6w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2526&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“业务路线，测开发展空间越往后和开发方向越像，成长空间会变窄，做业务从长远来看，可以快速转向其他方向或领域，当业务扩大分裂时，做业务的上位机率更大一些。TesterHome 社区公众号的受众大多数是 26 岁到 35 岁，这个年纪正是工作的黄金年龄，26 岁的已经工作三年，打好了基础，35 岁基本达到了工作生涯的顶峰，如果在这黄金 10 年里没有成长为管理者，那么基本算是失败的了”，TesterHome 的老徐说，这位 35 岁的老兵离开北京的汽车之家之后，去了西部淘金。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6826347305389222&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCC4kN6uSMSGWLsjTZW3iczpSk2npLCTp3UwAks5QczJMvKqMHiarm4K9Ow/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1002&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看了投票的数据，支持测开的票数并没有落后太多。“基本上持平吧，其实我是支持测开的，测试工程师的发展路线往往都是功能测试-&amp;gt;自动化测试-&amp;gt;测试开发-&amp;gt;测试专家/测试经理，无论怎样，测试开发是测试工程师职业道路上无法回避的。”某入行三年的年轻专家说，他是沿着这条路一步步走过来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“测试开发更加有市场！培养自己的代码能力，往测试开发方向发展，这可能是更宽的一条道路。这条路的市场接纳度相比前面两条来说更高，机会也会更多。” 公众号博主程序员一凡说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近有个综艺，叫做演员请就位，里面有个市场定位，你有市场，市场足够大，就能定位 S 级（最厉害的级别）。听说脸书一开始就没有测试，谷歌已经没有了 TE，都改成了 SETI，而阿里巴巴早就把所有的测试 title 调整为测试开发，无论你是做业务的，还是做测试工具的，统统都叫测试开发。在知乎搜索测试开发，会出来许许多多培训公司，传统的达内，51testing，新兴的小公司或者个人培训，我们发现现在主打的课程清一色都是测试开发。培训是最好的市场洞察机，当你看到哪个东西培训最多，那说明这个东西最火。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“市场教育了培训公司，让培训公司重点投入测开的课程。培训公司在向社会输出测试开发的时候，其实也教育了市场，提高了行业水平。这是一个良性的循环，大家都希望软件测试工程师的环境越来越好。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前国内大部分的测试团队还是以功能测试为主。从 TesterHome 2018 年，2019 年发起的问卷调查来看，测试开发的比例依旧不高。&lt;br/&gt;&lt;img data-ratio=&quot;0.7868649318463445&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCCpE4nqTH7FOV4PJgO5gJynS69hDKxJmfOf20mlKbfgIQvOCuE8icL9Xg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1614&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“大比例的手工测试工程师说明国内研发质量依然很渣，但现在大厂们开始带头提升生产力和研发效能的时候，说明风向开始变了，如果传统测试人员不及时地学习进步，逐渐就失去了竞争力甚至被淘汰。”公众号读者 MAX GK 留言道。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个月从培训机构走出来的测试开发不计其数，不断地去填补大大小小的公司的质量团队的梯队。我们可以确定一个良性发展的测试团队，它必然是有着各种维度的梯队的。“测试工作必须分层次和梯度，手工测试可能没必要淘汰，但是这并不代表测试工作不需要往精深的方向发展。”读者周杰偷在公众号里回复说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;误解。对于业务测试一直有着误解，就是手工测试，这感觉好像手工就是不动脑子。业内人士常常自嘲是&lt;span&gt;点点工程师&lt;/span&gt;。长久以来，软件测试工程师群体内部认为测开是代表技术的，而业务不需要技术。某测试工程师在匿名版写：“能做测开就做测开。看招聘，现在互联网大厂 hc title 基本上都是测试开发。功能测试更偏向于传统行业，意味着发展会越来越窄。技术才能安身立命。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们不得不重新来定义一下业务测试的范畴。一个完整的业务测试应该包括且不止：质量标准的制定，质量流程的搭建，业务的深度理解，引入技术手段改进效能，帮助产品成功。这些不需要技术吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，业务测试和测试开发冲突吗？是测试开发在淘汰业务测试么？在其他业务方看来，业务测试和测试开发都是测试，在有限的资源下帮助业务成功即可，而你究竟是业务还是测开，does not matter。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次投票还有一个干扰因素，业务测试比测试开发工资高，在为五斗米折腰的社会里，钱多往往是更好的选择。“做测试有几个不缺钱的，99%的情况默认楼主缺钱就对了”，TesterHome 社区成员 scu-zrb 说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;996&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“我在 Boss 直聘上刷了几个月了，就想找一个不需要 996，但是薪水还过得去的职位，跳槽不说加薪，总不能降太多”，老杨是某 BAT 的员工，过了而立之年，晋升失败了几次后，对层级观念也淡了不少，每次都笑谈，等着被优化吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“今天中国 BAT（百度、阿里、腾讯）这些公司能够 996，我认为是我们这些人修来的福报”，2019 年 4 月 11 日，马爸爸一句话，阿里成了福报厂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2019 年 3 月 27 日，一个名为 996ICU 的项目在 GitHub 上传开——一名程序员在 GitHub 社区上建立了一个“996.icu”（即工作 996，生病 ICU）的项目，披露部分互联网公司“996”工作制现象，大量“996 工作者”涌入并控诉。4 月中旬关闭，发起人说由于项目接近失控，不得不关闭。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随后，又出了一个 955wlb（https://github.com/formulahendry/955.WLB）的项目，该项目记录不加班的公司名单 - 工作 955，work–life balance (工作与生活的平衡)。可惜的是，名单列表里几乎都是外企。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“通勤两小时，公司里 12 小时，8 小时睡眠，还有 2 小时留给家人。自己呢？自己就算了吧”，老杨苦笑道。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当下，996，007，大小周的奋斗氛围盛行，身处互联网里的人无一幸免，测试工程师亦不例外。据 Boss 直聘 2019 年加班调查，加班已成常态，仅一成的职场人可以基本不加班，24.7%的职场人每天都加班。&lt;br/&gt;&lt;img data-ratio=&quot;1.1757754800590843&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCCqCA7cibdff4sY1vcYfwCeCfClcHryUV33MqiaRlC8DibicgL311NibrRGJw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1354&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;饿了么星选联合拉勾网，发起《互联网职场“追星人”观察报告》中，北京地区加班最晚的 top10，其中加班到凌晨的比比皆是。&lt;br/&gt;&lt;img data-ratio=&quot;0.5838150289017341&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCCc4ibKwOgdHibf8XRPkIHAx9UPFBdcgRqTbeNHQia7bWQZFK2MPXvTczeg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1038&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“这有什么？”，长期混迹脉脉职言的老胡说，“职言里整天骂 996，骂奋斗逼。问题是人家不走，你还不能走。”，随即他扔给我们几张截图，阿里和有赞等国内公司分别躺枪。&lt;br/&gt;&lt;img data-ratio=&quot;0.684596577017115&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCCyLiccEZPOPnw4oL9ibkuiafBPZxch4UgWGWUuHw50K7LemVTpST9wVwVA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;818&quot;/&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.8265682656826568&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCCKWrm4ZjZFmd9wAYcge5rCb8OTKgJnoBPlGZcN0FRZTlrTatQ02KN5w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1084&quot;/&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.2965722801788376&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCCcULF016wySff4ueprag6hxI19tszbanA34l1JdSkXnqJBYs6KJCqBg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1342&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们也采访了一些一线的测试工程师，听到几种不同的声音，1. “其实哪有那么忙，大部分人都是到了下班点，不下班，坐在那里，不知道在干嘛。” 2. “真的很忙，忙着开会，需求宣讲，系分宣讲，测分，方案讨论，白天都是会，到了晚上才能安静下来做点自己的工作。” 3. “事情太多了，不加班做不完。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们总结了一下，对于测试工程师而言，造成加班的原因，除去受奋斗逼影响外，无非以下几种原因：1. 开发测试比不合理，正常的比例通常为 4 比 1 到 8 比 1。但也有很多公司，10 比 1，甚至 20 比 1，这种情况下，测试工程师不加班都难了。2. 受伪敏捷模式荼毒，一个月七八个迭代，疲于奔命。3. 保姆式服务，很多团队把测试当做保姆，什么杂事都丢给测试。4. 项目管理缺失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“我们毫无项目管理，排期中从来不考虑测试时间，好像一提测，测试就能立刻上手测试一样。”支付宝的某个外包测试和我们说，“测分也不给时间，用例设计不给时间，提测都是晚上提测，我们那一屋就测试加班最多。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“真加不动了，我现在对猎头就说帮我找少加班的，离家近的”，老杨说，“30 好几了，虽说心态还跟 20 多岁小伙一样，但是身体实实在在摆在那里，真加不过那群小年轻了。老了，老了。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在接受 Boss 直聘 2019 年加班调研的人群中，90 后和 95 后面临的加班情况最为严重。其中在“每天都加班”的职场人中，年龄越小的群体比例越高，95 后所占比例高居榜首，有 31.28%的 95 后在此之列。&lt;br/&gt;&lt;img data-ratio=&quot;1.1400894187779433&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCClSSs8af8hwgOlIPHSVCSMruIicaw02r6ufQ2icmWsF8sicwhMl5XSBo1Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1342&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，像老杨，老胡这样还在头部公司一线和年轻人拼体力加班的人，也许离开大公司，去外企或者国企才是最好的选择。“断离舍吧，本来有点不甘心的，但是把这份不甘心也给断了，对自己宽容一点，轻松一点。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;35 岁&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一段时间，老白很焦虑，自从带团队之后，接收到很多来自管理层关于人才培养，人才储备的消息，虽然自己已经上了管理岗，暂时上岸，但是年龄的危机感依然存在。“组织要淘汰你的时候，才不会管你在什么职位，更何况一线的团队 leader。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道什么时候开始，35 岁突然成了 IT 人职业生涯的终结年龄。2020 年 7 月，华为开始了大裁员，清退 35 岁后的人员。随之腾讯也开始劝退高龄员工。相信随着新冠疫情的深远影响，未来裁员会越来越多。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1841216216216217&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCCZOORQbf1IWlu7lU2JiacgJTniaNlsFr4pdBiaEpHLbcyfaMcBiczM9GuHA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1184&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于职场人来说，有两条线横竖我们是绕不过去的。一条是年龄生死线，也就是被现代社会普遍默认的“35 岁”（公务员的录取也是 35 岁截止），另一条是职级天花板。“都 35 岁了，还没混到个管理岗位，也是挺失败的”，作为一线头部公司的大头兵，老张常常自嘲。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;年龄问题，是共性问题，不是软件测试工程师特有的。这个年龄段是 85 年之前出生的一批 80 后，向上的空间越来越窄，少部分人上去占了位置，大部分人还在一线，凭借着丰富的工作经验，和不错工作态度（打一巴掌，伸左脸）在公司企业里依然占据着较为核心的地位。但是他们已经没有了晋升的机会，而且激励也会越来越少。知乎上有一个帖子“海归 35 岁，阿里 P7offer, 是否接受？”，其中有个网友回复，“阿里内部高潜 p7 至少得是 30 以内的”。意思就是，到了 35 岁，你的潜力已经用完了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;天花板，太容易了。而测试工程师的天花板，就像入门一样，低的不得了。“说句打脸的话，如果行业领先者的薪资也就是一线 30-40K，学校好点的科班真没愿意来的。。。” TesterHome 社区匿名版有人说。我们看其他工种的，无论是研发，还是产品，走上高管的比比皆是，而质量出生的屈指可数。“35 岁是道坎，如果还是升不上去，被优化的可能性是比较大的。” 社区成员 xuewuhe 说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“我年轻时候，换工作特别容易，学校好，履历好，这几年没动，一不小心 35 了，再出去溜达一圈，都没人要了”，老张说，“难不成真要开专车了？”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“我们现在也不看 30 岁以后的候选人了”，猎头凯西和我们说，她专业从事互联网技术方向的人才挖掘，“现在的公司基本要求 30 岁左右能到专家水平的，你去看招聘网站，都要年轻厉害的。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;市场就是资本市场，没有任何感情和怜悯。35 岁的测试工程师，不是小学生的爸爸就是小学生的妈妈，在学校，家庭，老人之间连轴转，早就失去了和年轻人竞争的能力，没有竞争力，就要被淘汰，市场淘汰你的时候，不会说一声抱歉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;内卷&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前不知道内卷，2020 年内卷这个词突然火了。内卷最早出现在农业，后来到了人口。最近内卷的含义变成了：存量竞争下的互相内耗，导致竞争中的个体付出增多，而实际收益未变的过程。尤其是在奋斗逼出现之后，内卷和奋斗逼就形影不离，知乎上一致认为奋斗逼导致了内卷。本来 2 个人每天 8 小时，2 天才能完成的事情，奋斗逼一个人一天花 16 个小时完成了。老板一看，不加班的那个人特别多余，于是就开了他，这就是奋斗逼内卷了不加班的同事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2020 年 10 月 3 日，TesterHome 社区匿名版，突然有了个帖子引发热议：“测试人的内卷，从左移右移开始”，文中描述了测试成为万金油后，又能干开发又能干运维，给老板节省了人力成本，同时也抢了开发和运维的活。10 月 5 日，TesterHome 专家高飞针对该贴，阐述了自己的看法“我们真的知道测试行业的内卷是什么吗？”，高飞指出左移，右移以及自动化的出现拉高了行业的技术水平，本来大家在不用学习技术，不用做这些就可以活的好好的。但是现在门槛变高了，大家就业更难了。但这不是内卷，这是正常的技术发展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“而我要表达的是，内卷跟这些没关系，至少不是主要因素，这是正常的技术发展。相反的是如果测试行业没有门槛了， 大家不需要学技术了。那才是内卷的加剧的开始。因为门槛低，待遇高（在北京手工测试的 10 几,20K 的薪资也是超越其他行业的存在），会导致数以十万计的行业外的人群涌入测试行业。因为谁都想轻轻松松的挣高薪， 你要公平那就是所有人都公平，这钱你能挣得其他人就也能挣得。过量的就业人群会迅速破坏测试行业的供需关系。在激烈的竞争下 10 几 K 的平均工资会被快速拉平到可能只有几 K。而且只有几 K 的工资大家还得拼命加班，还会有大量人员失业， 因为市场上岗位就这么多，突然多了几十万消化不了。到那个时候大家日子绝对比现在要凄惨。可能很多人不信，但是这是经济规律， 市场一定会在供需关系上找到平衡点。可以参考当初外卖行业刚兴起的时候， 外卖小哥的月薪平均在 10K 左右，做的好的 15K。导致大量的工厂工人和社会上的年轻人迅速涌入外卖行业。大家可以搜搜当时的新闻， 工厂的老板在斥责外卖行业吸社会的血，年轻人都去做外卖没人去工厂做实体经济了。然后大量人员进去了， 你再看看外卖小哥们现在的待遇是什么样的？前几天沸沸扬扬的事件大家都还记得。当初外卖骑手就是门槛低，待遇高， 一个人，一件衣服，一辆电动车就可以入行了，几乎就是没什么门槛。所以如果我们拒绝技术发展， 那今天的外卖骑手，就是我们的明天。这就是我的观点， 造成内卷的反而是楼主这样不希望技术发展，而导致海量人员无门槛的进入测试行业带来的。推广技术发展的人，反而是阻止内卷的那一批人，因为他们造成的技术水平的增高才阻止了非常多的人进入这个行业跟大家竞争。”——来自高飞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们很高兴，有人开始思考测试人目前的处境。我们可以肯定的是，目前软件测试的环境内卷的十分严重，但是像那个匿名贴的楼主一样，我们无解。正如资深测试专家槽神所说，“感觉楼主是个指望社会生产力不进步来保住自身利益的人，可惜历史的车轮从没停止过前进。你们在上下左右前后移的问题上争论可能说出来所有行业都要面临的现状，而且是维持了上万年从未间断过的现状……可惜我们谁都改变不了”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“测试人的内卷有很多，业务卷测开，测开卷业务，年轻人卷中年人，中年人卷老年人。我们很焦虑，TesterHome 社区的管理员们都过了 30 岁，和大家一样，焦虑不堪。但是我们不认为这个算是太坏的事情，思考才能带来进步，我们需要辩证的看待这个问题”，社区管理员俊哥说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;匿名贴里点赞最多回帖这样写到：“这件事，站在不同的维度，宏观和微观，不同的角度，得到的结论是截然不同的。大家看过《外卖骑手，困在系统里》这篇文章没有？还有《算法即剥削》。从技术的角度看，建立外卖平台，用算法提高生产效率，创造价值，有错吗？KPI 完成了，大家分奖金，不香吗？技术人说，我不过是个打工仔，完成老板的要求而已。那外卖骑手怎么看呢？我相信大家看过这篇文章，就有自己的看法。我与大佬的观点区别在于，他是以一个行业从业者的维度来解释当前行业环境的合理性。号召大家把蛋糕做大，去扩张。然而这个蛋糕在我看来还是在一个很小的维度，开发，测试，运维，在这样的一个框架内，大家内卷而已。测试人说，我们要左移要右移，去抢开发，运维的活儿吧。开发也说，我们要全栈，运维也说，我们要自动化，要大包大揽。技术的圈子，在我看来并没有突破。只是从个体的角度来说，他全才了，相对来说收益提高了。拔高了他这个群体的标准要求。可以对比一下 10 年前和现在的行业门槛，这年头不会写两行代码还敢撑自己是个测试？你可以解释说，这是技术发展的客观规律，历史的车轮从不因个体的抗争而停摆。但是放在宏观的角度，这就是一个严重的社会问题。还用外卖骑手来举例，终有一天，算法会将骑手的时间压缩到极限，人工再也不可能完成这样的要求，人工智能取代人力是大势所趋。那么这些被榨干了的骑手何去何从，有人 care 吗？某一个倒数第一嫉妒尖子生，可以解释为个例，但是倒数第一太多了，数量达到一定规模后，这个桌子就有可能被掀翻的问题。因此，外卖行业要被监管，算法要被约束，技术和人性必须要有一个平衡点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试人其实是一个很独特的群体，通常看来，这个职位不生产价值，而是通过 QA 来减少 bug 造成的价值损失，形成一种测试越给力，就越没有存在感的表象。于是大佬们开始行动了，通过左移和右移，实现自己的角色转换，但是这一切的大前提，是你的测试能力本身是过硬的。而不是说，你连基本的测试都做不好，而是先要靠代码，算法，linux 等运维技术来获取一张入场门票——老板在各种技术大会上看到了大佬的演讲，于是要求人力部门：以后我们招 QA，就按这个标准招，不会代码的不要，不会 xx 的不要。久而久之，就形成了“面试造火箭，入职拧螺丝”的现象。活儿还是那个活儿，但是测试人不得不花大价钱参加各种培训（TesterHome 的大会很便宜啊），去提升获得岗位的机会。这里面有少数人天赋异禀加后天努力，可能成为了大佬，大部分人不过是苦苦挣扎在这个行业混口饭吃。我认为，这个过程，是内卷的体现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实我们争论了半天，不解决任何问题。从个体的角度来看，提高自己的水平，去争取成为那 20%的大佬，是没有任何问题的。但是从 80%的平庸测试人来说，或许需要一个契机，去推动国家力量出台相关政策，规范行业的发展。这一天可能会很漫长，但是作为平庸的大部分人群体，需要发出自己的声音。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到大家都在拿外卖骑手的处境作对比，（可能大家都想好了，35 岁之后去送外卖），我们想和大家分享下数据，网上估算全国有 500 万的程序员，而测试工程师估计不到 20 万。全国所有的外卖骑手加起来有超过一千万。而外卖骑手的月收入 2018 年为 7000+，而程序员（包括测试工程师）这个群体的平均工资是 14000+。在国家看来，程序员（包括测试工程师）已经是高收入的中产阶级了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，我们不应该用宏观的视角去审判个人，很多事情，大家一起承担就没事，放到个人身上就天塌下来，认识个人，并且充分尊重个人，是社会文明的进步。“每个人都有选择自己生活的权利，有的人一路奔跑只为了尽快接近自己的目标，有的人选择放慢脚步欣赏路边的美景，这两者都没有过错。一方非得要求另一方遵循自己的原则去做事是不现实的，大家恐惧奋斗比主要是因为怕鲶鱼搅乱了现在的环境氛围，把节奏带坏了。然而资本逐利的本质下，不随波逐流的人可以选择明哲保身，但是不应该攻击那些奔跑的人，大家处境不一样，有的人家里几套房父母健康儿女双全，没有贷款，你非得让一个北漂的人，上有老下有小的青年跟你一样看看风景拍拍照生活小资，有点不讲理”，俊哥说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何摆脱内卷&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内卷是大环境，身处在这个环境，无论如何都会受到影响，我们所能做的就是保持年轻心态，终身学习。在 BOSS 直聘分别针对求职者和雇主的《2020 求职需求趋势调查》和《2020 企业人才需求趋势调查》中，当被问及“最希望提升哪些素质型能力”时，“自主学习”能力在雇主端和求职者端的重要性分别排第一和第三。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8422664624808576&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCCIyVsnXx2FbXtRb78jdFiaD5xiar8yh9s8kLTdslhb10vYyOCRFiciclVbQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1306&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“不论什么时候都要提升自己的能力，作为测试人员，掌握更多的技能，才能走得更远。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;广告时间&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件测试工程师的学习之路离不开 TesterHome，那更要来 TesterHome 举办的 MTSC 深圳大会看看了。目前议题已经差不多都就位了。议题一如既往的优秀，讲师一如既往的大咖，票价一如既往的打骨折。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;2.1670020120724347&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/EKs3bvt0w0J9OPG2xIMZXCRoJVjlZbCCXQys7euJvthu7FJZtZfACdkT6eBws2icu8ubC1t7AWoBfHXmDwqibClg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;497&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a241f0be67f2ed0e2a3df5ddb57ec6f4</guid>
<title>严选数仓规范和评价体系</title>
<link>https://toutiao.io/k/jnnb24f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;p&gt;&lt;span&gt;实时部分由Atom平台提供支持，Atom是严选产技自研的一款实时数据管理和开发平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;246&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;246&quot; data-height=&quot;234px&quot; data-ratio=&quot;0.51621271076524&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1OAQOBn95MjGhSq1TYqDIlfAYQRbbWUUibIqib5diaYbCia8VdU9vD228ialvCTicLUNN5012nN9YzwY8GxpoQ9Vn2Rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1542&quot; data-width=&quot;553px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;严选数据仓库规范&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在其他工种开发的眼里，数据仓库的入门门槛非常低，低到技术鄙视链的最末端：“噢……，他们就是写SQL的，他们整个团队都是写SQL的……”，顿时天空飘过一万匹神兽。曾经和未来都有很多人会来挑战数仓工程师存在的意义：“我也能干！”，但是实际情况是：naive！具体可参见严选数据仓库的架构图，这其中的每一个icon背后都有一套工具、平台，甚至于一个团队来支撑运转。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;严选数据仓库是一套方法论，从规范定义、模型设计到数据服务，再到数据可管理、可追溯、可复用。严选数据仓库遵循维度建模理论，参考了阿里巴巴的Onedata建模理论，核心框架由三个规范组成：《严选-指标定义规范》 ，《严选-模型设计规范》和《严选-数据开发规范》，外层由辅助规范落地的若干工具、平台组成：仓颉-指标管理系统、燧人-指标地图系统、UDS-数据质量中心、EasyDesign-模型设计中心等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;490&quot; data-height=&quot;364px&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1OAQOBn95MjGhSq1TYqDIlfAYQRbbWUU2wC9eX63b6OLLMSiaJI9paZwYPy33f23rpOSRbdw3TOVZN7RUDqkqXg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-width=&quot;429px&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、指标定义规范&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;指标定义规范，目的是统一开发&amp;amp;产品对指标的定义。通过对原子指标的命名规则、派生指标的命名规则和派生词的定义来完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;指标定义体系，是数据建设体系的基础和内核，为了杜绝产品经理命名引起的歧义，以及后续带来的使用和维护以及解释成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;490&quot; data-height=&quot;364px&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1OAQOBn95MjGhSq1TYqDIlfAYQRbbWUUL8LSOYqI2ftnVfImlf01lXp37XBYGyQ0DhcHx8OStKCNwq9icyyLR4g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-width=&quot;429px&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、模型设计规范&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;模型设计规范，目的是统一数据开发对模型的命名定义。通过域+更新方式，域+维度+更新周期的方式来完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;652&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-height=&quot;364px&quot; data-ratio=&quot;1.1274834437086092&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1OAQOBn95MjGhSq1TYqDIlfAYQRbbWUUBZNjJZeunwTtD2UGz2bJqVyNwrMt1g3rYc3ZUWhdAlm9QJP34vWlgw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1208&quot; data-width=&quot;429px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、数据开发规范&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据开发规范，目的是提高数据开发的SQL开发能力。通过限制各级子查询的缩进形式，子查询的规范等来完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据仓库评价体系&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近期的一些思考跟大家做一个交流，一家之言，欢迎拍砖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;基本要求&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据安全和数据质量是数据仓库的生命线！不可逾越、不可触犯。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;评价体系&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图是近期整理的严选数据仓库的6个评价角度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-height=&quot;576px&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1OAQOBn95Mj1jtxsdD01ScmYrIWe6ZicF5dlBhNcVwP9dEeqyVl21caMpKW2ia4XCq2IFJxzr9icicX9vPVV2w9WaQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-width=&quot;1024px&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.数据规范&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据规范，最终目的是提高开发的整体水平。遵循严选数据规范：《严选-指标定义规范》、《严选-模型设计规范》和《严选-数据开发规范》，同时由工具和平台来保障规范的落地并监督评估规范落地的效果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.数据安全&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据安全，这个命题怎么强调都不为过，特别是近期数据安全问题频发，51信用卡，大大小小的放贷公司。因此作为数据从业者，遵循《网易商业行为准则》，不对外泄露业务数据，时刻做到数据指间过，安全心中留。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.数据质量&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据质量由&lt;strong&gt;数据本身的质量&lt;/strong&gt;和&lt;strong&gt;数据建设质量&lt;/strong&gt;两部分组成：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;231&quot; data-backw=&quot;578&quot; data-height=&quot;409px&quot; data-ratio=&quot;0.39974779319041615&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1OAQOBn95Mj1jtxsdD01ScmYrIWe6ZicFTHMDgfd5YmHlibHLzGTL33DiboOdz8K6DCLQb8AltUHumtIC3pE17hibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1586&quot; data-width=&quot;1024px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.数据稳定性&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.持续建设机制&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.数据开发效率&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;较前5个角度对比，数据开发效率较难量化，可以从两个方面来考量：开发规范的自动化程度和平台使用体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;严选数仓评价实践&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;依照前文提到的6个角度，严选分别有与之对应的工具来支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.数据规范&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所有的数据规范，最终目的都是用来提高开发者的水平、提高代码的质量。在开发水平参差不齐的情况下，需要有平台工具保障规范的落地。在过去的一年中，我们和网易杭州研究院一起规划落地了Easydesign平台：辅助《严选-指标定义规范》和《严选-模型定义规范》的落地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图是依托Easydesign实现的模型设计线上化产品界面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5901098901098901&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1OAQOBn95Mj78Hf6VIpncrtibjyhnfKVc79McB9Hl4zcpqcpQyh1azXicfrfav13oTXCmxFBzutzZkt8Y75BMx1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;衡量数仓建设水平可以通过以下3个指标：&lt;strong&gt;总ods表被跨层依赖率&lt;/strong&gt;，&lt;strong&gt;被跨层依赖的ods表数量&lt;/strong&gt;，&lt;strong&gt;有下游ods表被跨层依赖率&lt;/strong&gt;三个指标来完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.43231441048034935&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1OAQOBn95Mj78Hf6VIpncrtibjyhnfKVciap1CK9Z2GU1klsOf6icehjETndK0uLYsxqQLGJrkWASpiaic3qficJqibhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;687&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;174&quot; data-backw=&quot;578&quot; data-height=&quot;309px&quot; data-ratio=&quot;0.3015245623941276&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1OAQOBn95Mj1jtxsdD01ScmYrIWe6ZicFe2Avv3Moicl8ldVVuSc76evFu5ouSenhiaMfic6sG2SpHlkyXgEoFia5bQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1771&quot; data-width=&quot;1024px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.数据安全&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每年有很多因数据导致的资损问题产生，我们从数据的上线流程、测试工具、测试环境等三个方面入手，让过程合规，结果合法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-height=&quot;576px&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1OAQOBn95Mj1jtxsdD01ScmYrIWe6ZicFDJQtr0av029dDTb3081jt0KXgoS5ibGBNialnhJlMZzXwS6Pg7496sZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-width=&quot;1024px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.数据稳定性&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;严选和杭研共建的任务运维中心EasyTaskOps，实现智能基线预警，多基线精细化运维；目前我们4条基线完成率超过90%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2020年上半年，严选和杭研共建了数据运维中心，上线了以下内容：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基线管理：通过任务历史执行情况，自动判断基线内任务逾期可能性，进行破线预警。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;失败和逾期报警：对于失败和逾期的任务，可以配置电话、短信or邮件报警。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;评价指标：基线完成率、出错任务数、处理及时率等来评价任务的稳定性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.持续建设机制&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;迭代更新、持续建设，这是衡量一个数据仓库活力的一个重要机制，我们通过指标一致性项目，梳理了数仓持续建设机制，数据紧跟业务成长，数据仓库才会保持活力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-height=&quot;576px&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1OAQOBn95Mj1jtxsdD01ScmYrIWe6ZicFVOicjE2tsgNsPuLU5E2XyEB1pjyRxjMHfO0MXyWHQb2NOrN8nJlB9zA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-width=&quot;1024px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过和杭研一起推动Easycost升级，通过梳理存储相关规则、规范相关规则、计算相关规则、质量相关规则，上半年一共下线3.4w张表，节约了1.2PB的存储。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.数据开发质量&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过Easydesign平台承接规范的落地，整个上半年数据开发通过平台新建200+dw层表，强有力的保障了规范的落地；我们的最终目标是通过各种方法策略来提高数据开发的素质，使用工具目的是帮助大家养成遵循规范的习惯。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.数据开发效率&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;持续建设机制、数据规范的落地，最直接的反应就是数据开发效率的提升。严选全渠道数据基建项目中，交易域+商品域的离线+实时数据校验一次性通过，大大降低了数据开发的迭代修复成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;严选数据仓库以上6个方面沉淀了丰富的经验，从产品到实践。我们数据团队在2019年Q3完成了严选数据规范和SOP流程的制定，2020的Q1-Q2在积极推进相关产品迭代落地。我们相信在Q3-Q4会呈现一个数据更丰富，使用更便捷，保障更有力，响应更及时的数据仓库！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作者简介&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;乙峰：多年数据领域工作经验，专注数据架构、模型设计和规范执行落地等。严选数仓交易域负责人，负责交易域模型设计落地和对外服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;本文由作者授权严选技术团队发布&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;182&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1OAQOBn95MiaqUuqOg4IBr0llsEs4NLkMDvcZWticy5ibCoiaUG4eRMrzS1FFD1sh7QBrp6DAHsIGujD6HJZtzLD3Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.44533333333333336&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1OAQOBn95MiaqUuqOg4IBr0llsEs4NLkMLUp1bVLaXrVoMluSlG5uHMVLsDcGeZJjWZ48lusSu8GwAes57Pne0w/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5262dfa23f77f6af54ea64b69d788024</guid>
<title>引入适用于双屏和可折叠设备的 Web API</title>
<link>https://toutiao.io/k/lr9hl1w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;span&gt;点击上方&lt;/span&gt;&lt;span&gt;蓝字&lt;/span&gt;&lt;span&gt;关注这个脱发、摆摊、卖货、持续学习的程序员&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WYoaOn5t0AMoJoWCXNWibKn7sjmx3OzBLRsK46ys5nrZjkurMLanrYpFEibyVxe9npQNZcv40cDsp5IQgdL2bkWA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来源：https://blogs.windows.com/msedgedev/&lt;br/&gt;作者：Microsoft Edge Team&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;浏览器是所有设备上使用最广泛的应用之一，如今，它运行在全新的硬件类别上：&lt;strong&gt;双屏和可折叠设备&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着各种新的双屏和可折叠设备进入市场，包括微软 &lt;span&gt;Surface Duo&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;，现在再没有比现在更好的时间来考虑你的网站如何采用这些外形。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天，我们很高兴地宣布推出两项新的实验性功能，这两项功能将帮助Web开发人员有效地在跨越多个显示区域的浏览器窗口中布局内容，并创建响应式网站，以自然地适应这一类新设备。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;可折叠设备类&lt;/h2&gt;&lt;section&gt;&lt;span&gt;广义上讲，可折叠设备有两种变体：双屏设备和利用柔性显示技术的单屏设备。两者有很多共同点：它们是便携式的多姿势设备，允许用户旋转，翻转和折叠。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3974609375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMoJoWCXNWibKn7sjmx3OzBLXYJVMG85d1sejbKNLPjfENiaCItrlzUKWtPvuJ6FfRQvAWUR1F2Y5Ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;按照这种尺寸，应用程序可以位于一侧，也可以跨两个显示区域。响应这种跨越状态的网站与逻辑上划分呈现内容的语义和意图集成在一起。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.546875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMoJoWCXNWibKn7sjmx3OzBLiaENT9cTwJ6VTQByVZhqUbJY545Xib3NaczFmXGPccHz4jAT8ZVm8KKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;这类设备所实现的广阔的屏幕空间和独特的姿态，让Web开发者可以在一个可以装进口袋或钱包的设备中开启前所未有的网络体验。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;从传统的连续屏幕过渡到双屏和可折叠屏&lt;/h2&gt;&lt;section&gt;&lt;span&gt;虽然现有的网站会继续使用开箱即用的方式，但让网站意识到设备的可折叠性，可以大大提升用户体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了更好地说明这个机会，并展示新创建的浏览器特性是如何工作的，我们将带你增强一个电子邮件客户端布局示例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;并排显示收件箱的列表视图和电子邮件的内容是一种常见的模式，自然适合较大的查看区域。当浏览器窗口跨越双屏设备上的两个显示区域时，总的视口宽度很可能与传统的水平平板电脑设备相当。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMoJoWCXNWibKn7sjmx3OzBLIjQcufv3BRH70TunhcJSOFAqv8icIGrIZMvich0HT3Wia567E2D43MTicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;未经修改，电子邮件客户端将继续像往常一样工作。然而，如果我们能够将收件箱和邮件栏与折页对齐，将每个栏目都保持在一个显示区域的边界内，那么体验将得到极大的改善。这样，内容区域都不会被设备铰链切割或遮盖，也不会在柔性显示器的折叠区域上呈现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了实现理想的布局，我们引入了一个新的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;screen-spanning&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 媒体功能和一组预先定义的环境变量，允许Web开发人员将可折叠设备作为另一个响应式Web设计目标。开发人员现在可以创建适用于每种设备类别的布局，而无需严格依赖特定的硬件参数。这种灵活性提高了可扩展性，因为它不需要为每个新设备类型重复工作。&lt;/span&gt;&lt;/section&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1601741126124&quot; data-category_id_list=&quot;48|26|49|1|55|8|47|35|5|31|6|7|24|37|11|50|54|53|52|42|29|43|16|51|36&quot; data-id=&quot;1601741126124&quot;/&gt;&lt;section&gt;&lt;span&gt;检测显示区域&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;CSS &lt;/span&gt;&lt;code&gt;&lt;span&gt;screen-spanning&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 媒体功能将帮助Web开发人员测试根视口是否被跨越到多个相邻的显示区域，并提供关于这些相邻显示区域的配置细节（如堆叠或并排）。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;screen-spanning&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 媒体功能被指定为一个值，该值描述设备具有的折叠（或铰链）数量及其姿势。如果该设备不是可折叠设备，则该值为none。如果它是可折叠的，则可以具有以下两个值之一：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;Single-fold-vertical&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：匹配具有单个折叠（两个显示区域）且折叠姿势为垂直的设备。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;Single-fold-horizontal&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：匹配具有单个折叠（两个显示区域）且折叠姿势为水平的设备。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.55078125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMoJoWCXNWibKn7sjmx3OzBLQ5dBOLu7Q5XWWSxBHP9cN2mG5HHy38k5Oib7lTkhHtUXV11wulA6sug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;计算显示区域的几何形状&lt;/h2&gt;&lt;section&gt;&lt;span&gt;假设当处于 &lt;/span&gt;&lt;code&gt;&lt;span&gt;screen-spanning&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 状态时，折叠总是要把视口正好分成两半，这是不安全的。此外，某些窗口管理器可能会选择隐藏首屏后的Web内容。为了帮助Web开发人员计算每个显示区域的大小，并确保他们知道他们的内容（如果有的话）需要填充多少以避免遮罩，我们正在添加四个预定义的CSS环境变量。&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;env(fold-top)&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;env(fold-left)&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;env(fold-width)&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;env(fold-height)&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;这些变量的值是以CSS像素表示的，并且是相对于布局视口而言的（即在客户端坐标中，如CSSOM视图所定义）。当对不处于跨越状态的内容进行评估时，这些值将被视为不存在，并且浏览器将使用传递给env()函数的回退值。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;增强我们的电子邮件示例应用程序，以实现双屏和可折叠的体验&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4052734375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMoJoWCXNWibKn7sjmx3OzBLibbMOEXWVNsVicaFUJhx8LvGTyLjibgfzIWDV4TVicET0gq7sj8XLHR9Mw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;让我们将CSS的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;screen-spanning&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 媒体功能和折叠几何环境变量付诸实践，增强我们电子邮件客户端的读者视图。&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@media&lt;/span&gt; screen &lt;span&gt;and&lt;/span&gt; (&lt;span&gt;min-width:&lt;/span&gt; &lt;span&gt;799px&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;/* 特定于平板电脑屏幕的规则 */&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@media&lt;/span&gt; screen &lt;span&gt;and&lt;/span&gt; (&lt;span&gt;min-width:&lt;/span&gt; &lt;span&gt;799px&lt;/span&gt;) &lt;span&gt;and&lt;/span&gt; (&lt;span&gt;screen-spanning:&lt;/span&gt; single-fold-vertical) {&lt;br/&gt;  &lt;span&gt;/* 主要是一个元素，其中包含上图中突出显示的3个flex项目 */&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;main&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;display&lt;/span&gt;: flex;&lt;br/&gt;    &lt;span&gt;flex-direction&lt;/span&gt;: row;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;.navigation&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;/*&lt;br/&gt;    ** flex方向是行，因此flex-basis的行为类似于此flex项的宽度&lt;br/&gt;    **根据设计，可折叠/双屏上的所需宽度为60px&lt;br/&gt;    */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;flex-basis&lt;/span&gt;: &lt;span&gt;60px&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;flex-grow&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;flex-shrink&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;.inbox&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;/*&lt;br/&gt;    ** 收件箱宽度会占用第一个显示区域的整个宽度，例如&lt;br/&gt;    ** 收件箱宽度=显示区域1宽度-60像素（导航列宽度）&lt;br/&gt;    */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;flex-basis&lt;/span&gt;: &lt;span&gt;calc&lt;/span&gt;( env(fold-left) - &lt;span&gt;60px&lt;/span&gt; );&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/*&lt;br/&gt;    ** 有些设备具有遮罩，因此我们需要在此列之后添加边距或间隙&lt;br/&gt;    ** env(fold-width) = surface Duo上的28个CSS像素。&lt;br/&gt;    ** env(fold-width) = 0不屏蔽内容的设备上的CSS像素。&lt;br/&gt;    */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;margin-inline-end&lt;/span&gt;: &lt;span&gt;env&lt;/span&gt;(fold-width);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;flex-grow&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;flex-shrink&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;.email-content&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;/*&lt;br/&gt;    ** 电子邮件内容栏应 &quot;增长 &quot;以填满其余空间。&lt;br/&gt;    ** 但要演示如何计算第2个显示区域的宽度。&lt;br/&gt;    ** 我们将手动设置宽度&lt;br/&gt;    */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;flex-basis&lt;/span&gt;: &lt;span&gt;calc&lt;/span&gt;( &lt;span&gt;100vw&lt;/span&gt; - (env(fold-left) + &lt;span&gt;env&lt;/span&gt;(fold-width)) );&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;flex-grow&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;flex-shrink&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;在JavaScript中枚举窗口段&lt;/h2&gt;&lt;section&gt;&lt;span&gt;当使用非DOM目标（如Canvas2d或WebGL）时，你可以使用新的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Window Segments Enumeration API&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 获得每个显示区域的几何体。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;getWindowSegments()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是Window对象上的一个方法，它返回一个由1个或多个DOMRects组成的数组，这些DOMRects代表每个显示区域的几何形状和位置。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;返回的数组是该方法被调用时显示区域状态的不可改变的快照。如果用户从跨接状态过渡到非跨接状态，或者旋转设备，则之前检索到的窗口段将无效。&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; segments = &lt;span&gt;window&lt;/span&gt;.getWindowSegments();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 案例1：台式机、传统触屏设备、可折叠设备不跨越的问题&lt;/span&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(segments.length) &lt;span&gt;// 1&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 案例2：双屏和可折叠&lt;/span&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(segments.length) &lt;span&gt;// 2&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;页面应该监听窗口调整大小(&lt;/span&gt;&lt;code&gt;&lt;span&gt;resize&lt;/span&gt;&lt;/code&gt;&lt;span&gt;)事件或方向改变(&lt;/span&gt;&lt;code&gt;&lt;span&gt;orientationchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;)事件，以检测浏览器是否被调整大小，或设备是否被旋转，并检索更新的显示区域。&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; segments = &lt;span&gt;window&lt;/span&gt;.getWindowSegments();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 状态1：浏览器横跨2个显示器，且折叠为垂直。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(segments.length); &lt;span&gt;// 2&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 状态2：用户决定旋转设备，浏览器仍然是跨越的，但现在折叠是水平的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 在窗口调整大小时，调整大小和方向改变事件都会被触发&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 当用户进入或退出跨屏状态时，调整大小事件也会触发。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;window&lt;/span&gt;.addEventListener(&lt;span&gt;&#x27;resize&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;  &lt;span&gt;// 我们最初检索的片段已不复存在&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 当折叠为水平时，用表示片段2的最新信息进行更新&lt;/span&gt;&lt;br/&gt;  segments = &lt;span&gt;window&lt;/span&gt;.getWindowSegments();&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;没有明确的方法来了解折叠姿势是垂直还是水平，因为可以从返回的DOMRects中轻松计算出此信息：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isSingleFoldHorizontal&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; segments = &lt;span&gt;window&lt;/span&gt;.getWindowSegments();&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 单折叠式是指设备有1折叠式和2个显示区域&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;( segments.length !== &lt;span&gt;2&lt;/span&gt; ) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 横折指第一段顶部小于第二段顶部&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;( segments[&lt;span&gt;0&lt;/span&gt;].top &amp;lt; segments[&lt;span&gt;1&lt;/span&gt;].top ) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// if we reach this point, the fold is vertical&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;同样适用于折叠宽度，Web开发人员可以使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;getWindowSegments()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 提供的信息来了解窗口管理器是否掩盖了呈现在折叠后面的内容，以及折叠宽度是否大于零像素。&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;foldWidth&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; segments = &lt;span&gt;window&lt;/span&gt;.getWindowSegments();&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 如果有1段，折叠蒙版不适用，返回0&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 如果有超过2个段，我们不处理这种设备，但返回0&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;( segments.length !== &lt;span&gt;2&lt;/span&gt; ) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 折叠是垂直的&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 设备看起来像这样 [][]&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;( segments[&lt;span&gt;0&lt;/span&gt;].top === segments[&lt;span&gt;1&lt;/span&gt;].top ) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; segments[&lt;span&gt;1&lt;/span&gt;].left - segments[&lt;span&gt;0&lt;/span&gt;].right;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// if we reach this point, the fold is horizontal&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; segments[&lt;span&gt;1&lt;/span&gt;].top - segments[&lt;span&gt;0&lt;/span&gt;].bottom;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;面向未来&lt;/h2&gt;&lt;section&gt;&lt;span&gt;作为开发者，我们在为今天创造的时候，往往会对未来进行规划，所以需要进行最低限度的重构，以解锁未来可能出现的场景。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4560546875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMoJoWCXNWibKn7sjmx3OzBLlCoMbud5IgZCqlnQXH49wPCLe5YibqCGmyjIP7eU2944sDgu3ziaTH3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;具有2折和3个屏幕的假想设备&lt;/figcaption&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;与CSS不同，JavaScript有数组、循环和条件的概念，这使得窗口段枚举API和有N个显示区域的设备之间的映射更加直接。对于上图所示的假想设备，当浏览器横跨3个显示区域时，调用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;getWindowSegments()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法将返回一个由3个DOMRects组成的数组，使用简单的语言基元，如循环或内置的数组方法，你可以了解更多关于显示区域的配置情况（例如屏幕都是相同的宽度？等）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在CSS中，目前的计划是简单地在代表新的屏幕拓扑结构的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;screen-spanning&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 媒体功能中添加新的值。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;立即开始增强你的网站的可折叠体验&lt;/h2&gt;&lt;section&gt;&lt;span&gt;CSS screen-spanning 媒体功能和 Window Segment Enumeration API是可以在实验性标志后面使用的，你可以在edge://flags/#enable-experimental-web-platform-features处启用它们。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从Microsoft Edge 86开始，Web开发者可以使用&lt;span&gt;Microsoft Edge DevTools&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;在Windows和Mac桌面平台上模拟双屏&amp;amp;可折叠设备。另外，你也可以下载并安装新的&lt;span&gt;Surface Duo模拟器预览版&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;（2020.806.1或更新版本），在启用实验性平台功能标志后，使用内置的Edge浏览器进行测试和调试。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JavaScript Window Segments Enumeration API和 CSS screen-spanning媒体功能均以 Origin Trials 的形式提供，你可以获得代币并在生产中安全地试用这些新基元，以换取我们对 API 的反馈。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;前方的路&lt;/h2&gt;&lt;section&gt;&lt;span&gt;这些API在Chromium项目、Google、Intel、W3C的CSSWG、第二屏WG等多方合作下，经过多次迭代和改进后，今天就可以供你实验了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们将桌面平台的CSS和JavaScript基元都贡献给了Chromium开源项目，现在DevTools的可折叠和双屏设备仿真不仅可以在Edge中使用，还可以在Chrome中使用，很快就可以在其他基于Chromium的浏览器中使用。目前，我们正在努力提升Android的实现，使所有基于Chromium的浏览器在Android操作系统上都能支持Web开发人员为这个灵活的设备类别提供令人兴奋的新体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;文中链接请点击&lt;/span&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;相关阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/h3&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676494264&amp;amp;idx=1&amp;amp;sn=f5f0c9cdbbf068c28041f6eafd6bdc98&amp;amp;chksm=f362c45bc4154d4da7e79db93b9526f256e064b5b537834835df92f551677ae49a283279d201&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;听说你熟练使用Vue.js，这9种Vue技术你掌握了吗？&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676494781&amp;amp;idx=1&amp;amp;sn=2fb0bda4ff81555636a79ccffe9cd0f0&amp;amp;chksm=f362da5ec4155348554479d038c347b32904a809af430e40399d99f6f9281110d1a1c530d80f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;在Vue Vite应用程序中实现暗/亮模式&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676494703&amp;amp;idx=1&amp;amp;sn=093342b1a624576187ec4a89d033082b&amp;amp;chksm=f362da8cc415539a021116a15dd7fac850140bb67977faca591ee65c0ee37ce03dd2ec13642f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;2020 开发人员生态系统现状&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676493889&amp;amp;idx=1&amp;amp;sn=bf85d210efffb7952d0753bd9cd4d6e8&amp;amp;chksm=f362c5a2c4154cb48f0c4ea6421c6a8f27fcc82809c8dff5464a9aa8ab36eab95f522581e9e9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;Vue技巧 | 在Vue3中使元素在滚动视图时淡入&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676492928&amp;amp;idx=1&amp;amp;sn=6614d02412872db83687f22c24550085&amp;amp;chksm=f362c163c41548758d6baef1823216bf1b516cf9f20a3237f5e0702fdb970430a053280ce8db&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;Vue.js中编写更好的v-for循环的6种技巧&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676492896&amp;amp;idx=1&amp;amp;sn=9f4133d0288d454eaaae836d5ef4eef3&amp;amp;chksm=f362c183c415489577b1b8d9d05b9503b1ed3f932d2037fc20a93c62ad2f8f2b6799d33228ff&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;我总结了12个Vue.js开发技巧和窍门&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676492460&amp;amp;idx=2&amp;amp;sn=f2a9017614371a8f742bb3adb4a2cc35&amp;amp;chksm=f362c34fc4154a59cc6f705c93a801a44a73f0e1f4d4a6e400f82a9ec5c555627fbb614fa0fe&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;Vue.js嵌套组件生命周期执行顺序&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676492162&amp;amp;idx=1&amp;amp;sn=f9e18b23b1289064d194af9a13d49e14&amp;amp;chksm=f362cc61c4154577368715e797d404e9921a6f260c3934f182e2176c3de6752ae2b57906db5a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;Vue.js中侦听器（watch）的高级用法&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;粉丝福利&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;临走前留下，&lt;span&gt;今天的福利&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;福利1：&lt;/span&gt;&lt;span&gt;某慕网课程《React Hooks重构去哪网购票》&lt;/span&gt;&lt;span&gt;获取地址和密码请在公众号中回复关键字：&lt;/span&gt;&lt;span&gt;002&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;福利2：&lt;/span&gt;&lt;span&gt;在看+留言&lt;/span&gt;&lt;span&gt;，张张会在留言区随机抽取一位认真留言的小伙伴，给他发一个红包奖励&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;a class=&quot;weapp_text_link js_weapp_entry&quot; data-miniprogram-appid=&quot;wxe43f931b4099b39c&quot; data-miniprogram-path=&quot;__plugin__/wx34345ae5855f892d/pages/productDetail/productDetail?productId=263622&quot; data-miniprogram-nickname=&quot;张张的小铺&quot; href=&quot;&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-servicetype=&quot;10&quot;&gt;【全新】Flutter技术入门与实战（第2版）&lt;/a&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;走心的分享更容易被抽中~&lt;br/&gt;开奖时间 下期文末&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞 + 在看 + 留言&lt;br/&gt;下一个幸运儿就是你&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;p&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>