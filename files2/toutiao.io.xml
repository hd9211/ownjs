<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6d4e7fde7e38175ee1f35304d2906448</guid>
<title>我是如何阅读 JDK 源码的？</title>
<link>https://toutiao.io/k/5kuu7cq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前断断续续读过一部分 JDK 常用类的源码，这里想把过程中的一些心得和方法记录下来，如果能帮到需要的小伙伴就再好不过了！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文主要分享一下我的阅读工具和阅读顺序。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;PS: 由于当前主流使用的 JDK 版本仍是 1.8，因此源码阅读主要是 1.8 版本，有些地方可以参考 1.7（面试可能问到）。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 工具&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工欲善其事，必先利其器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要的工具不多，IDE + Google 翻译足够了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 IDE 的主要目的是可以写一些测试代码以便跟踪调试。这个还是很有必要的，跟进代码的执行流程更容易理解它的实现原理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接在 IDE 打开源码文件，源码中的注释通常很详细，遇到不懂的地方 Google 翻译一下。也可以加上官方文档，其实源码里面注释跟文档是一样的，有些地方可能更详细，只不过官方文档排版更漂亮一些。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;JDK 1.8 官方文档链接：https://docs.oracle.com/javase/8/docs/api/&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，阅读的先后顺序也很重要，下面介绍下我的阅读顺序。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 阅读顺序&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 整体顺序&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK 中的代码非常多，不可能、也没必要全部读完，因此要有的放矢。从整体上来讲，顺序大概是：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;集合框架类&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;主要包括 Collection、Map、Queue 等组成的一系列常用类和接口，包括 ArrayList、LinkedList、HashMap 等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这部分内容日常开发使用较多，而且面试高频出现，因此可以先从这里入手。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;并发包&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;即 java.util.concurrent (J.U.C) 包下的常用类，包括 ReentrantLock、ThreadPoolExecutor、AQS 等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;该部分提供了并发编程的常用工具类，也是面试高频。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;其他常用类&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;例如 ThreadLocal、String、StringBuilder、StringBuffer 等。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整体概览如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.1453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ophTb90oYCQsrOKbYh3h4jxRnE1J0oQdQoZF7ialbaic44U7TkrJddCHcPQjTdfBicvTuquRtE41SVORTVMb7kHiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体到某一个类，如何去阅读它的源码实现呢？下面继续介绍。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 具体顺序&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.1 类和接口&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何阅读一个类的源码呢？主要步骤大概是：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先读接口代码。包括接口说明文档、各个方法的定义和说明文档。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;再去读实现类的主要方法实现，通常有以下两条主线入口：&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;构造方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;常用方法&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Java 中，接口通常意味着是一种“标准”、或者“协议”。一个接口可以有多个实现类，它们都会按照接口的这种标准来实现接口的各个方法。因此，理解了一个方法的定义，再去看它的实现会更容易理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面以常用的 ArrayList 为例，分析如何去阅读它的源码。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.2 ArrayList 源码分析&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先看下 ArrayList 的继承结构：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.45610034207525657&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ophTb90oYCQsrOKbYh3h4jxRnE1J0oQdvOcVj6Q7zO9UgLXKQ4wicW8B1vQjIXLl5icfFO6P1Ldib6PjQx3Aj5LWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到它实现了很多接口，其中三个接口 Cloneable、RandomAccess、Serializable 都是空的，可以暂时忽略。主要去看 Iterable、Collection 以及 List 接口的方法定义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Iterable 接口：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.44970414201183434&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ophTb90oYCQsrOKbYh3h4jxRnE1J0oQd5cBIF0zQbsSsLMN2xKmIWs77SCQSmQEsia6KEe4QNqBIMahuibLkKKUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;676&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Collection 接口：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.5351351351351352&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ophTb90oYCQsrOKbYh3h4jxRnE1J0oQdrCXvZqAzI6JsI9DAR0YicRIgMrEZrGRle5H6fkQMreILFjpOGj4Zib6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;740&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;List 接口：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;2.035532994923858&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ophTb90oYCQsrOKbYh3h4jxRnE1J0oQd7DicyiacTZ4Bf98czbicZWibCD5KGgx9u8WTFvkNPCs2ROtyGZXLO8OvyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;788&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看起来方法挺多，其实不少都是我们平时会用到的，大部分理解起来并不困难，而且方法也都有注释。这部分难度不大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来根据前面提到的两条主线入口，分析 ArrayList 的源码如何阅读。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分析一个类的源码时，构造器通常是一个好的切入点。比如 ArrayList 的三个构造器如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ArrayList&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ArrayList&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; initialCapacity)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.elementData = &lt;span&gt;new&lt;/span&gt; Object[initialCapacity];&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (initialCapacity == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.elementData = EMPTY_ELEMENTDATA;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;Illegal Capacity: &quot;&lt;/span&gt;+&lt;br/&gt;                                           initialCapacity);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ArrayList&lt;/span&gt;&lt;span&gt;(Collection&amp;lt;? extends E&amp;gt; c)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    elementData = c.toArray();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; ((size = elementData.length) != &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;// c.toArray might (incorrectly) not return Object[] (see 6260652)&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (elementData.getClass() != Object[].class)&lt;br/&gt;            elementData = Arrays.copyOf(elementData, size, Object[].class);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// replace with empty array.&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.elementData = EMPTY_ELEMENTDATA;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构造器中有不少成员变量，比如 elementData、EMPTY_ELEMENTDATA、DEFAULTCAPACITY_EMPTY_ELEMENTDATA 等，继续跟进这几个变量：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object[] EMPTY_ELEMENTDATA = {};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;transient&lt;/span&gt; Object[] elementData; &lt;span&gt;// non-private to simplify nested class access&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此可以得知，当我们写了 &lt;code&gt;new ArrayList()&lt;/code&gt; 时，它的内部到底做了些什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了构造器，常用方法也是一个主要的入口，比如 add、remove 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;add 方法实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(E e)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    ensureCapacityInternal(size + &lt;span&gt;1&lt;/span&gt;);  &lt;span&gt;// Increments modCount!!&lt;/span&gt;&lt;br/&gt;    elementData[size++] = e;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;ensureCapacityInternal&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; minCapacity)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以一行行跟进代码，查看 add 方法内部到底做了什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他方法的套路也是如此，不再一一说明。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照这样一条条主线走下来，就可以对 ArrayList 的实现原理有个整体的认知了。整体部分搞清楚之后，接下来还可以去读一些不太常用的方法，包括剩余的所有部分。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;PS: 这里只是以常用的 ArrayList 为例，其他包下的类的阅读步骤也大同小异。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3 做笔记&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，做笔记也很重要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以用思维导图梳理整体脉络，用笔记工具记录一个类的核心部分实现原理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，如果自己整理和写出来笔记更好，许多时候总觉得自己知道了，但是别人一问就懵了，可能还是没理解到位吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有句话说得好：”教是最好的学“。当你能把某个知识点通俗易懂的讲给一个外行人，才是真的懂了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.4 注意点&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚开始读时，可能会遇到某些地方难以理解，可以尝试写测试代码断点跟踪调试，或者参考别人的博客。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果遇到某个点实在难以理解，也可以先跳过，过段时间再重新思考也许就豁然开朗了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;PS:&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;以上内容纯属个人见解，仅供参考。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;此外，我把之前文章的笔记整理成了电子书，后台回复「JDK源码」即可获取。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;mp-qa class=&quot;js_uneditable custom_select_card qa_iframe&quot; data-pluginname=&quot;insertquestion&quot; data-id=&quot;1548110088865939457&quot; data-bizuin=&quot;MzU4NzYyMDE4MQ==&quot; data-title=&quot;大家有好的方法或吐槽欢迎提出来讨论（我也体验下这个功能😀）&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/ophTb90oYCR6eOZrkKMnznEahtiajNrSAicJDk24paw3VDzbZRLXgyibXWEuZ4qhuSgXoeFaqj1gpV96gVpZCHc7g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6041e47fb7388c0bad13cc3c6447177d</guid>
<title>高性能网关设计实践</title>
<link>https://toutiao.io/k/7579qvt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前的&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MTU1MzM3MQ==&amp;amp;mid=2247483977&amp;amp;idx=1&amp;amp;sn=9f932e774b680d06d105f495b96bb933&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;高性能短链设计&lt;/a&gt;一文颇受大家好评，共被转载 &lt;strong&gt;「47」&lt;/strong&gt; 次，受宠若惊，在此感谢大家的认可！在文末简单提了一下 OpenResty，一些读者比较感兴趣，刚好我们接入层网关也是用的 OpenResty，所以希望通过对网关设计的介绍来简单总结一下 OpenResty 的相关知识点，争取让大家对 OpenResty 这种高性能 Web 平台有一个比较全面的了解。本文会从以下几个方面来讲解。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;网关的作用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接入层网关架构设计与实现&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;技术选型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;OpenResty 原理剖析&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;网关的作用&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网关作为所有请求的流量入口，主要承担着安全，限流，熔断降级，监控，日志，风控，鉴权等功能，网关主要有两种类型&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;一种是接入层网关（access gateway），主要负责路由，WAF（防止SQL Injection, XSS, 路径遍历, 窃取敏感数据,CC攻击等），限流，日志，缓存等，这一层的网关主要承载着将请求路由到各个应用层网关的功能&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;另一种是应用层网关，比如现在流行的微服务，各个服务可能是用不同的语言写的，如 PHP，Java 等，那么接入层就要将请求路由到相应的应用层集群，再由相应的应用层网关进行鉴权等处理，处理完之后再调用相应的微服务进行处理，应用层网关也起着路由，超时，重试，熔断等功能。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前市面上比较流行的系统架构如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3899905571293673&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYR6XbHeLXs3z9UAOfdicwIMEvyI9uiakDWraUSILW291G6cZjO9LW5RPFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1059&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到接入层网关承载着公司的所有流量，对性能有很高的要求，它的设计决定着整个系统的上限。所以我们今天主要谈谈接入层网关的设计。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;接入层网关架构设计与实现&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们要明白接入层网关的核心功能是：&lt;strong&gt;「根据路由规则将请求分发到对应的后端集群」&lt;/strong&gt;，所以要实现如下几个功能模型 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、 路由：根据请求的 host, url 等规则转发到指定的上游（相应的后端集群）
2、 路由策略插件化：这是网关的&lt;strong&gt;「灵魂所在」&lt;/strong&gt;，路由中会有身份认证，限流限速，安全防护（如 IP 黑名单，refer异常，UA异常，需第一时间拒绝）等规则，这些规则以插件的形式互相组合起来以便只对某一类的请求生效，每个插件都即插即用，互不影响，这些插件应该是&lt;strong&gt;「动态可配置」&lt;/strong&gt;的，动态生效的（无须重启服务），为啥要可动态可配置呢，因为每个请求对应的路由逻辑，限流规则，最终请求的后端集群等规则是不一样的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0770465489566614&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYRlVRYaicH8DvefIeNYALbJYpiaaLTm6NBh5AicXaeozGHThVGh8P8PKBQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;623&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图示，两个请求对应的路由规则是不一样的，它们对应的路由规则（限流，rewrite）等通过各个规则插件组合在一起，可以看到，光两个请求 url 的路由规则就有挺多的，如果一个系统大到一定程度，url 会有不少，就会有不少规则，这样每个请求的规则就必须&lt;strong&gt;「可配置化」&lt;/strong&gt;，&lt;strong&gt;「动态化」&lt;/strong&gt;，最好能在管理端集中控制，统一下发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、后端集群的动态变更&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;路由规则的应用是为了确定某一类请求经过这些规则后最终到达哪一个集群，而我们知道请求肯定是要打到某一台集群的 ip 上的，而机器的扩缩容其实是比较常见的，所以必须支持动态变更，总不能我每次上下线机器的时候都要重启系统让它生效吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、监控统计，请求量、错误率统计等等&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个比较好理解，在接入层作所有流量的请求，错误统计，便于打点，告警，分析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要实现这些需求就必须对我们采用的技术：OpenResty 有比较详细的了解，所以下文会简单介绍一下 OpenResty 的知识点。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;技术选型&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有人可能第一眼想到用 Nginx,没错，由于 Nginx 采用了 epoll 模型（非阻塞 IO 模型），确实能满足大多数场景的需求（经过优化 100 w + 的并发数不是问题），但是 Nginx 更适合作为静态的 Web 服务器，因为对于 Nginx 来说，如果发生任何变化，都需要修改磁盘上的配置，然后重新加载才能生效，它并没有提供 API 来控制运行时的行为，而如上文所述，动态化是接入层网关非常重要的一个功能。所以经过一番调研，我们选择了 OpenResty，啥是 OpenResty 呢，来看下官网的定义：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。OpenResty® 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以简单理解为，OpenResty = Nginx + Lua, 通过 Lua 扩展 Nginx 实现的可伸缩的 Web 平台
。它利用了 Nginx 的高性能，又在其基础上添加了 Lua 的脚本语言来让 Nginx 也具有了动态的特性。通过 OpenResty 中 lua-Nginx-module 模块中提供的 Lua API，我们可以动态地控制路由、上游、SSL 证书、请求、响应等。甚至可以在不重启 OpenResty 的前提下，修改业务的处理逻辑，并不局限于 OpenResty 提供的 Lua API。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于静态和动态有一个很合适的类比：如果把 Web 服务器当做是一个正在高速公路上飞驰的汽车，Nginx 需要停车才能更换轮胎，更换车漆颜色，而 OpenResty 中可以边跑边换轮胎，更换车漆，甚至更换发动机，直接让普通的汽车变成超跑！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了以上的动态性，还有两个特性让 OpenResty 独出一格。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「1.详尽的文档和测试用例」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为开源项目，文档和测试毫无疑问是其是否靠谱的关键，它的文档非常详细，作者把每个注意的点都写在文档上了，多数时候只要看文档即可，每一个测试案例都包含完整的 Nginx 配置和 lua 代码。以及测试的输入数据和预期的输出数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「2.同步非阻塞」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OpenResty 在诞生之初就支持了协程，并且基于此实现了同步非阻塞的编程模型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「画外音：协程（coroutine）我们可以将它看成一个用户态的线程，只不过这个线程是我们自己调度的，而且不同协程的切换不需要陷入内核态，效率比较高。（一般我们说的线程是要指内核态线程，由内核调度，需要从用户空间陷入内核空间，相比协程，对性能会有不小的影响）」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;啥是同步非阻塞呢。假设有以下两个两行代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;local&lt;/span&gt; res, err  = query-mysql(sql)&lt;br/&gt;&lt;span&gt;local&lt;/span&gt; value, err = query-redis(key)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「同步」&lt;/strong&gt;：必须执行完查询 mysql，才能执行下面的 redis 查询，如果不等 mysql 执行完成就能执行 redis 则是异步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「阻塞」&lt;/strong&gt;：假设执行 sql 语句需要 1s，如果在这 1s 内，CPU 只能干等着不能做其它任何事，那就是阻塞，如果在 sql 执行期间可以做其他事（注意由于是同步的，所以不能执行以下的 redis 查询），则是非阻塞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同步关注的是语句的先后执行顺序，如果上一个语句必须执行完才能执行下一个语句就是同步，如果不是，就是异步，阻塞关注的是线程是 CPU 是否需要在 IO 期间干等着，如果在 IO（或其他耗时操作期间）期间可以做其他事，那就是非阻塞，不能动，则是阻塞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么 OpenResty 的工作原理是怎样的呢，又是如何实现同步非阻塞的呢。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;OpenResty 原理剖析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;工作原理剖析&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 OpenResty 基于 Nginx 实现的，我们先来看看 Nginx 的工作原理&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7869415807560137&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYR56Uv0OeVibs6qu7pMyrD2WwODOeU24WYfmckf3cdp01exEia15ygz1pw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1164&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Nginx 启动后，会有一个 master 进程和多个 worker 进程 ， master 进程接受管理员的信号量（如 Nginx -s reload, -s stop）来管理 worker 进程，master 本身并不接收 client 的请求，主要由 worker 进程来接收请求，不同于 apache 的每个请求会占用一个线程，且是同步IO，Nginx 是异步非阻塞的，每个 worker 可以同时处理的请求数只受限于内存大小，这里就要简单地了解一下 nginx 采用的 epoll 模型：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;epoll 采用多路复用模型，即同一时间虽然可能会有多个请求进来， 但只会用一个线程去监视，然后哪个请求数据准备好了，就调用相应的线程去处理，就像图中所示，如同拨开关一样，同一时间只有一个线程在处理， Nginx 底层就是用的 epoll ，基于事件驱动模型，每个请求进来注册事件并注册 callback 回调函数，等数据准入好了，就调用回调函数进行处理，它是异步非阻塞的，所以性能很高。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2975&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYRYbNPicgOHBWWvhjicriaIDayYvicuVJAicicdsm0fXyZAnAt95cCnBlO7Rsw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打个简单的比方，我们都有订票的经验，当我们委托酒店订票时，接待员会先把我们的电话号码和相关信息等记下来（注册事件），挂断电话后接待员在操作期间我们就可以去做其他事了（非阻塞），当接待员把手续搞好后会主动打电话给我们通知我们票订好了（回调）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;worker 进程是从  master fork  出来的，这意味着 worker 进程之间是互相独立的，这样不同 worker 进程之间处理并发请求几乎没有同步锁的限制，好处就是一个 worker 进程挂了，不会影响其他进程，我们一般把 worker 数量设置成和 CPU 的个数，这样可以减少不必要的 CPU 切换，提升性能，每个 worker 都是单线程执行的。那么 LuaJIT 在 OpenResty 架构中的位置是怎样的呢。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7406779661016949&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYRWJM9Yicib5gTYnO2q3oiajc3bxIFQRaYtue0lLmC0aCq2iavlCPmyiccAwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1180&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先启动的 master 进程带有 LuaJIT 的机虚拟，而 worker 进程是从 master 进程 fork 出来的，在 worker 内进程的工作主要由 Lua 协程来完成，也就是说在同一个 worker 内的所有协程，都会共享这个 LuaJIT 虚拟机，每个 worker 进程里 lua 的执行也是在这个虚拟机中完成的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同一个时间点，worker 进程只能处理一个用户请求，也就是说只有一个 lua 协程在运行，那为啥 OpenResty 能支持百万并发请求呢，这就需要了解 Lua 协程与 Nginx 事件机制是如何配合的了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.44212962962962965&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYRf6iaxtA6nYxicoibbYDqvVJaXcMeBInzNSK1OnkHsmGX8xOxQAOrjp5oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1728&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图示，当用 Lua 调用查询 MySQL 或 网络 IO 时，虚拟机会调用 Lua 协程的 yield 把自己挂起，在 Nginx 中注册回调，此时 worker 就可以处理另外的请求了（非阻塞），等到 IO 事件处理完了， Nginx 就会调用 resume 来唤醒 lua 协程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上，由 OpenResty 提供的所有 API，都是非阻塞的，下文提到的与 MySQL，Redis 等交互，都是非阻塞的，所以性能很高。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;OpenResty 请求生命周期&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Nginx 的每个请求有 11 个阶段，OpenResty 也有11 个 *_by_lua 的指令，如下图示:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9054726368159204&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYRhPmBh7drKKhs7EzBFo749o0vRKVtBmNvv7QSlGZic6qAFR6GGEGicOlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1005&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各个阶段 *_by_lua 的解释如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;set_by_lua：设置变量；&lt;br/&gt;rewrite_by_lua：转发、重定向等；&lt;br/&gt;access_by_lua：准入、权限等；&lt;br/&gt;content_by_lua：生成返回内容；&lt;br/&gt;header_filter_by_lua：应答头过滤处理；&lt;br/&gt;body_filter_by_lua：应答体过滤处理；&lt;br/&gt;log_by_lua：日志记录。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样分阶段有啥好处呢，假设你原来的 API 请求都是明文的&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;# 明文协议版本&lt;br/&gt;location /request {&lt;br/&gt;    content_by_lua &#x27;...&#x27;;       # 处理请求&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在需要对其加上加密和解密的机制，只需要在 access 阶段解密， 在 body filter 阶段加密即可，原来 content 的逻辑无需做任务改动，有效实现了代码的解藕。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;# 加密协议版本&lt;br/&gt;location /request {&lt;br/&gt;    access_by_lua &#x27;...&#x27;;        # 请求体解密&lt;br/&gt;    content_by_lua &#x27;...&#x27;;       # 处理请求，不需要关心通信协议&lt;br/&gt;    body_filter_by_lua &#x27;...&#x27;;   # 应答体加密&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如我们不是要要上文提到网关的核心功能之一不是要监控日志吗，就可以统一在 log_by_lua 上报日志，不影响其他阶段的逻辑。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;worker 间共享数据利器: shared dict&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;worker 既然是互相独立的进程，就需要考虑其共享数据的问题， OpenResty 提供了一种高效的数据结构: shared dict ,可以实现在 worker 间共享数据，shared dict 对外提供了 20 多个 Lua API，都是原子操作的，避免了高并发下的竞争问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;路由策略插件化实现&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了以上 OpenResty 点的铺垫，来看看上文提的网关核心功能 「路由策略插件化」,「后端集群的动态变更」如何实现&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先针对某个请求的路由策略大概是这样的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5445026178010471&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYR15ic2oCkicU4fQrG83TMVVbjG4GmbrHk0Z4iaias7fuXMvUvE9FyK7zzCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;764&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个插件化的步骤大致如下&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、每条策略由 url ,action, cluster 等组成，代表请求 url 在打到后端集群过程中最终经历了哪些路由规则，这些规则统一在我们的路由管理平台配置，存在 db 里。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、OpenResty 启动时，在请求的 init 阶段 worker 进程会去拉取这些规则，将这些规则编译成一个个可执行的 lua 函数，这一个个函数就对应了一条条的规则。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2373134328358209&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYRwSL7sMjA8Viaia5OtEKUgtHbwibJY1bEo9dOnpH4KGeW4NLR1pnIB5Drg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;670&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是为了避免重复去 MySQL 中拉取数据，某个 worker 从 MySQL 拉取完规则（此步需要加锁，避免所有 worker 都去拉取）或者后端集群等配置信息后要将其保存在 shared dict 中，这样之后所有的 worker 请求只要从 shared dict 中获取这些规则，然后将其映射成对应模块的函数即可，如果配置规则有变动呢，配置后台通过接口通知 OpenResty 重新加载一下即可&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7426160337552743&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYRE1y6rRic4kf21nnBO6GaG3kRRic3aHDJaKQIZpLu1HdOWUk3L3AA3icCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;474&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过路由规则确定好每个请求对应要打的后端集群后，就需要根据 upstream 来确定最终打到哪个集群的哪台机器上，我们看看如何动态管理集群。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;后端集群的动态配置&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Nginx 中配置 upstream 的格式如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;upstream backend {&lt;br/&gt;    server backend1.example.com weight=&lt;span&gt;5&lt;/span&gt;;&lt;br/&gt;    server backend2.example.com;&lt;br/&gt;    server &lt;span&gt;192.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt; backup;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上这个示例是按照权重（weight）来划分的，6 个请求进来，5个请求打到 backend1.example.com, 1 个请求打到 backend2.example.com,如果这两台机器都不可用，就打到 192.0.0.1，这种静态配置的方式 upstream 的方式确实可行，但我们知道机器的扩缩容有时候比较频繁，如果每次机器上下线都要手动去改，并且改完之后还要重新去 reload 无疑是不可行的，出错的概率很大，而且每次配置都要 reload 对性能的损耗也是挺大的，为了解决这个问题，OpenResty 提供了一个 dyups 的模块来解决此问题， 它提供了一个 dyups api,可以动态增，删，创建 upsteam，所以在 init 阶段我们会先去拉取集群信息，构建 upstream，之后如果集群信息有变动，会通过如下形式调用 dyups api 来更新 upstream&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;-- 动态配置 upstream 接口站点&lt;/span&gt;&lt;br/&gt;server {&lt;br/&gt;     listen &lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;:&lt;span&gt;81&lt;/span&gt;;&lt;br/&gt;      location / {&lt;br/&gt;          dyups_interface;&lt;br/&gt;     }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;-- 增加 upstream:user_backend&lt;/span&gt;&lt;br/&gt;curl -d &lt;span&gt;&quot;server 10.53.10.191;&quot;&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;:&lt;span&gt;81&lt;/span&gt;/upstream/user_backend&lt;br/&gt;&lt;br/&gt;&lt;span&gt;-- 删除 upstream:user_backend&lt;/span&gt;&lt;br/&gt;curl -i -X DELETE &lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;:&lt;span&gt;81&lt;/span&gt;/upstream/user_backend&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 dyups 就解决了动态配置 upstream 的问题&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;网关最终架构设计图&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5574412532637075&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYRU7OUERPAjCUs66XkNwg1hIC18MIwUrn3VFkqRWl2RFFnzaSaEVO4CA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;766&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过这样的设计，最终实现了网关的配置化，动态化。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网关作为承载公司所有流量的入口，对性能有着极高的要求，所以技术选型上还是要慎重，之所以选择 OpenResty，一是因为它高性能，二是目前也有小米，阿里，腾讯等大公司在用，是久经过市场考验的，本文通过对网关的总结简要介绍了 OpenResty 的相关知识点，相信大家对其主要功能点应该有所了解了，不过 OpenResty 的知识点远不止以上这些，大家如有兴趣，可以参考文末的学习教程深入学习，相信大家会有不少启发的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;题外话&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;「码海」历史精品文章已经做成电子书了，如有需要欢迎添加我的个人微信，除了发你电子书外，也可以加入我的读者群，一起探讨问题，共同进步！里面有不少技术总监等大咖，相信不管是职场进阶也好，个人困惑也好，都能对你有所帮助哦&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0225225225225225&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLUMiaGVniaicPvJeN6G8SXFPYRKknvTeoScgA19PpnyRFhoMFotpa4KBWp6471bvUH5F8aibmVRNQibaXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;222&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;巨人的肩膀&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;谈谈微服务中的 API 网关 https://www.cnblogs.com/savorboard/p/api-gateway.html&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Openresty动态更新(无reload)TCP Upstream的原理和实现 https://developer.aliyun.com/article/745757&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;http://www.ttlsa.com/Nginx/Nginx-modules-ngx_http_dyups_module/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;极客时间 OpenResty 从入门到实战&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>456245b8fc628e2966d1bbcca4da5466</guid>
<title>面试官：祖玛游戏玩过么？我来拷拷你</title>
<link>https://toutiao.io/k/k7iseh7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;题目地址（488. 祖玛游戏）&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://leetcode-cn.com/problems/zuma-game/&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;题目描述&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;回忆一下祖玛游戏。现在桌上有一串球，颜色有红色(R)，黄色(Y)，蓝色(B)，绿色(G)，还有白色(W)。 现在你手里也有几个球。&lt;br/&gt;&lt;br/&gt;每一次，你可以从手里的球选一个，然后把这个球插入到一串球中的某个位置上（包括最左端，最右端）。接着，如果有出现三个或者三个以上颜色相同的球相连的话，就把它们移除掉。重复这一步骤直到桌上所有的球都被移除。&lt;br/&gt;&lt;br/&gt;找到插入并可以移除掉桌上所有球所需的最少的球数。如果不能移除桌上所有的球，输出 -1 。&lt;br/&gt;&lt;br/&gt;示例:&lt;br/&gt;输入: &lt;span&gt;&quot;WRRBBW&quot;&lt;/span&gt;, &lt;span&gt;&quot;RB&quot;&lt;/span&gt;&lt;br/&gt;输出: -1&lt;br/&gt;解释: WRRBBW -&amp;gt; WRR[R]BBW -&amp;gt; WBBW -&amp;gt; WBB[B]W -&amp;gt; WW （翻译者标注：手上球已经用完，桌上还剩两个球无法消除，返回-1）&lt;br/&gt;&lt;br/&gt;输入: &lt;span&gt;&quot;WWRRBBWW&quot;&lt;/span&gt;, &lt;span&gt;&quot;WRBRW&quot;&lt;/span&gt;&lt;br/&gt;输出: 2&lt;br/&gt;解释: WWRRBBWW -&amp;gt; WWRR[R]BBWW -&amp;gt; WWBBWW -&amp;gt; WWBB[B]WW -&amp;gt; WWWW -&amp;gt; empty&lt;br/&gt;&lt;br/&gt;输入:&lt;span&gt;&quot;G&quot;&lt;/span&gt;, &lt;span&gt;&quot;GGGGG&quot;&lt;/span&gt;&lt;br/&gt;输出: 2&lt;br/&gt;解释: G -&amp;gt; G[G] -&amp;gt; GG[G] -&amp;gt; empty&lt;br/&gt;&lt;br/&gt;输入: &lt;span&gt;&quot;RBYYBBRRB&quot;&lt;/span&gt;, &lt;span&gt;&quot;YRBGB&quot;&lt;/span&gt;&lt;br/&gt;输出: 3&lt;br/&gt;解释: RBYYBBRRB -&amp;gt; RBYY[Y]BBRRB -&amp;gt; RBBBRRB -&amp;gt; RRRB -&amp;gt; B -&amp;gt; B[B] -&amp;gt; BB[B] -&amp;gt; empty&lt;br/&gt;标注:&lt;br/&gt;&lt;br/&gt;你可以假设桌上一开始的球中，不会有三个及三个以上颜色相同且连着的球。&lt;br/&gt;桌上的球不会超过20个，输入的数据中代表这些球的字符串的名字是 &lt;span&gt;&quot;board&quot;&lt;/span&gt; 。&lt;br/&gt;你手中的球不会超过5个，输入的数据中代表这些球的字符串的名字是 &lt;span&gt;&quot;hand&quot;&lt;/span&gt;。&lt;br/&gt;输入的两个字符串均为非空字符串，且只包含字符 &lt;span&gt;&#x27;R&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Y&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;B&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;G&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;W&#x27;&lt;/span&gt;。&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前置知识&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;公司&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;思路&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试题困难难度的题目常见的题型有：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本题就是游戏类题目。如果你是一个前端， 说不定还会考察你如何实现一个 zuma 游戏。这种游戏类的题目，可以简单可以困难， 比如力扣经典的石子游戏，宝石游戏等。这类题目没有固定的解法。我做这种题目的思路就是先暴力模拟，再尝试优化算法瓶颈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意下数据范围球的数目 &amp;lt;= 5，因此暴力法就变得可行。基本思路是暴力枚举手上的球可以消除的地方， 我们可以使用回溯法来完成暴力枚举的过程，在回溯过程记录最小值即可。由于回溯树的深度不会超过 5，因此这种解法应该可以 AC。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到的&lt;code&gt;可以消除的地方&lt;/code&gt;，指的是&lt;strong&gt;「连续相同颜色 + 手上相同颜色的球大于等于 3」&lt;/strong&gt;，这也是题目说明的消除条件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我们只需要两个指针记录连续相同颜色球的位置，如果可以消除，消除即可。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36055276381909546&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfmibwdYznHMvkiabPX3H3absiaBGBIXdRotPk0FBjMw7rediaVkWvrSePibZnUIetTBAgMCyNUCojBusw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1592&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图，我们记录了连续红球的位置， 如果手上有红球， 则可以尝试将其清除，这一次决策就是回溯树（决策树）的一个分支。之后我们会撤回到这个决策分支， 尝试其他可行的决策分支。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以 board = RRBBRR ， hand 为 RRBB 为例，其决策树为：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0777777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfmibwdYznHMvkiabPX3H3absVNZl4sSeOv1QUM8KbOTMpLwGG4TA1icQgH399OXOQQro5ibPib1fTJGQw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中虚线表示无需手动干预，系统自动消除。叶子节点末尾的黄色表示全部消除需要的手球个数。路径上的文字后面的数字表示此次消除需要的手球个数&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;如果你对回溯不熟悉，可以参考下我之前写的几篇题解：比如 46.permutations&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出， 如果选择先消除中间的蓝色，则只需要一步即可完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于计算连续球位置的核心代码(Python3):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;i = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; i &amp;lt; len(board):&lt;br/&gt;    j = i + &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; j &amp;lt; len(board) &lt;span&gt;and&lt;/span&gt; board[i] == board[j]: j += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 其他逻辑&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;# 更新左指针&lt;/span&gt;&lt;br/&gt;    i = j&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5412844036697247&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfmibwdYznHMvkiabPX3H3absAO5Mspl7z3GCZuljHWZo9uicNF0URZC83U8dtwzBR8bwXp76bZhcsXQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1526&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体算法：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;用哈希表存储手上的球的种类和个数，这么做是为了后面&lt;strong&gt;「快速判断连续的球是否可以被消除」&lt;/strong&gt;。由于题目限制手上求不会超过 5，因此哈希表的最大容量就是 5，可以认为这是一个常数的空间。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;回溯。&lt;/p&gt;&lt;p&gt;2.1 确认可以消除的位置，算法参考上面的代码。&lt;/p&gt;&lt;p&gt;2.2 判断手上是否有足够相同颜色的球可以消除。&lt;/p&gt;&lt;p&gt;2.3 回溯的过程记录全局最小值。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;代码&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码支持：Python3&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python3 Code:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;findMinStep&lt;/span&gt;&lt;span&gt;(self, board: str, hand: str)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;backtrack&lt;/span&gt;&lt;span&gt;(board)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; board: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;            i = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;            ans = &lt;span&gt;6&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;while&lt;/span&gt; i &amp;lt; len(board):&lt;br/&gt;                j = i + &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;while&lt;/span&gt; j &amp;lt; len(board) &lt;span&gt;and&lt;/span&gt; board[i] == board[j]: j += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;                balls = &lt;span&gt;3&lt;/span&gt; - (j - i)&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; counter[board[i]] &amp;gt;= balls:&lt;br/&gt;                    balls = max(&lt;span&gt;0&lt;/span&gt;, balls)&lt;br/&gt;                    counter[board[i]] -= balls&lt;br/&gt;                    ans = min(ans, balls + backtrack(board[:i] + board[j:]))&lt;br/&gt;                    counter[board[i]] += balls&lt;br/&gt;                i = j&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; ans&lt;br/&gt;&lt;br/&gt;        counter = collections.Counter(hand)&lt;br/&gt;        ans = backtrack(board)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ans &amp;gt; &lt;span&gt;5&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; ans&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「复杂度分析」&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;时间复杂度：&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(2^(min(C, 5)))&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -893.3 7060.7 1143.3&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(500, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1977.1, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2855.1, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3200.1, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3800.1, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4189.1, 0)&quot;&gt;&lt;path data-c=&quot;43&quot; d=&quot;M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4949.1, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(5393.7, 0)&quot;&gt;&lt;path data-c=&quot;35&quot; d=&quot;M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5893.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6282.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6671.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，其中 C 为连续相同颜色球的次数，比如 WWRRRR， C 就是 2， WRBDD， C 就是 4。min(C, 5) 是因为题目限定了手上球的个数不大于 5。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;空间复杂度：&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(min(C, 5) * Board)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 9535.1 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2030, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2375, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2975, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3364, 0)&quot;&gt;&lt;path data-c=&quot;43&quot; d=&quot;M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4124, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(4568.7, 0)&quot;&gt;&lt;path data-c=&quot;35&quot; d=&quot;M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5068.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5679.9, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6402.1, 0)&quot;&gt;&lt;path data-c=&quot;42&quot; d=&quot;M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7161.1, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7646.1, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8175.1, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8626.1, 0)&quot;&gt;&lt;path data-c=&quot;64&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(9146.1, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，其中 C 为连续相同颜色球的次数，Board 为 Board 的长度。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关键点解析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;mp-qa class=&quot;js_uneditable custom_select_card qa_iframe&quot; data-pluginname=&quot;insertquestion&quot; data-id=&quot;1549597229076758529&quot; data-bizuin=&quot;MzI4MzUxNjI3OA==&quot; data-title=&quot;大家对此有何看法，欢迎给我留言，我有时间都会一一查看回答。&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更多算法套路可以访问我的 LeetCode 题解仓库：https://github.com/azl397985856/leetcode 。目前已经 36K star 啦。大家也可以关注我的公众号《力扣加加》带你啃下算法这块硬骨头。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;46.permutations: &lt;span&gt;https://github.com/azl397985856/leetcode/blob/master/problems/46.permutations.md&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484695&amp;amp;idx=1&amp;amp;sn=d4781ed21edf9d8fd040bf313ba059ff&amp;amp;chksm=eb88c90edcff4018ee81f4de1c961dd99d9009b001955c258d119c1dc5dc2aeebf78abb79734&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;算法萌新如何学好动态规划（第一弹）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484650&amp;amp;idx=1&amp;amp;sn=4ca30b668b8ffa8aede203b760028cc3&amp;amp;chksm=eb88c8f3dcff41e5e8a7bb11809ba95cc2ba7bdba0d7d84b22080087f88006361318da69531a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;字节跳动的算法面试题是什么难度？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484692&amp;amp;idx=1&amp;amp;sn=9d1d1169d682d842310155f16966a23e&amp;amp;chksm=eb88c90ddcff401b952892e136dd4a36bcfd0e961c1507d80085ee281d42865e137c65736b92&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;字节跳动的算法面试题是什么难度？（第二弹）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;4、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484805&amp;amp;idx=1&amp;amp;sn=76b934121cbb3630f9bad391fb9b1789&amp;amp;chksm=eb88c99cdcff408a262cd45c270e42a50628593d782a57a85f6a7247b6356fd4715f2b2fde54&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【西法带你学算法】一次搞定前缀和&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484738&amp;amp;idx=1&amp;amp;sn=7693c31667a3125b90f9e4bf6b4ccdef&amp;amp;chksm=eb88c95bdcff404d82289dcb8e076a30af7140b250e08c2f022c580e5f8a83e0e42bbf280495&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;5、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484618&amp;amp;idx=1&amp;amp;sn=833079c3e342f66327280510f6bb3691&amp;amp;chksm=eb88c8d3dcff41c5b01b6a70284235983b727141c7fb78117c6c42045bd98f9db9d02cfc4a8d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;用最优雅的方式打开终端&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTclibysFKoffSHbUSQUXUKVjhv3ZCYnE74nsVJFicxjV6F3qqT8IPg0YMjc0wHvlfIoCO7Z7jYTnL4g/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;如果觉得文章不错，帮忙点个在看呗&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0d87dafc5e1ba2cb0791383c15c58ae3</guid>
<title>姐姐问我什么是变基操作 (git-rebase)</title>
<link>https://toutiao.io/k/fra0mkp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;哈喽，everybody，不知不觉8天的小长假也接近了尾声，玩耍了这么多天，今天也要收一收心，开始学习了呦～。明天就要上班啦，今天姐姐突然问我git-rebase指令是干什么的，怎么用？其实我是不想给他讲的，但是还是没有逃过姐姐的软磨硬泡，那么我们就一起来看一看什么是git-rebase吧！！！&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;缘起&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;话说，我和姐姐的缘分是在那一个月黑风高的晚上，啪，姐姐一巴掌打在了我的脸上并说了一句：能不能讲重点～～～。哈哈，不开玩笑了，直接说重点吧。我们先来看一个场景，我查看了一下我github上的个人仓库，&lt;code&gt;commit&lt;/code&gt;提交次数很多，提交内容如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.63013698630137&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPO6cVUd9mGMcjj9RsO5jjGNcoU5IvJj60lqOTM1u0XPeG8NbUbI7jYqzT4cclaEaaZoGFuQbmGz1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么多的提交，有很多没有规范的命名，因为是自己使用，就随便开整了，这确实不好，还有一些没有必要的提交，其实是可以合并到一起的，这样会导致如下问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;造成分支污染，项目中充满了许多&lt;code&gt;commit&lt;/code&gt;记录，当出现紧急问题需要回滚代码时，就只能一条条的查看了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;代码&lt;code&gt;review&lt;/code&gt;不方便，当你要做&lt;code&gt;code review&lt;/code&gt;时，一个很小的功能却提交了很多次，看起来就不是很方便了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一篇文章我们先不讲&lt;code&gt;git&lt;/code&gt;提交规范，我们先来解决一下如何合并多次提交记录。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;rebase作用一：合并提交记录&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面的场景，我们可以引申出&lt;code&gt;git-rebase&lt;/code&gt;的第一个作用：合并提交记录。现在我们想合并最近5次的提交记录，执行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; git rebase -i HEAD~2&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行该指令后会自动弹出&lt;code&gt;vim&lt;/code&gt;编辑模式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pick e2c71c6 update readme&lt;br/&gt;pick 3d2c660 wip: merge`&lt;br/&gt;&lt;br/&gt;# Rebase 5f47a82..3d2c660 onto 5f47a82 (2 commands)&lt;br/&gt;#&lt;br/&gt;# Commands:&lt;br/&gt;# p, pick &amp;lt;commit&amp;gt; = use commit&lt;br/&gt;# r, reword &amp;lt;commit&amp;gt; = use commit, but edit the commit message&lt;br/&gt;# e, edit &amp;lt;commit&amp;gt; = use commit, but stop for amending&lt;br/&gt;# s, squash &amp;lt;commit&amp;gt; = use commit, but meld into previous commit&lt;br/&gt;# f, fixup &amp;lt;commit&amp;gt; = like &quot;squash&quot;, but discard this commit&#x27;s log message&lt;br/&gt;# x, exec &amp;lt;command&amp;gt; = run command (the rest of the line) using shell&lt;br/&gt;# b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)&lt;br/&gt;# d, drop &amp;lt;commit&amp;gt; = remove commit&lt;br/&gt;# l, label &amp;lt;label&amp;gt; = label current HEAD with a name&lt;br/&gt;# t, reset &amp;lt;label&amp;gt; = reset HEAD to a label&lt;br/&gt;# m, merge [-C &amp;lt;commit&amp;gt; | -c &amp;lt;commit&amp;gt;] &amp;lt;label&amp;gt; [# &amp;lt;oneline&amp;gt;]&lt;br/&gt;# .       create a merge commit using the original merge commit&#x27;s&lt;br/&gt;# .       message (or the oneline, if no original merge commit was&lt;br/&gt;# .       specified). Use -c &amp;lt;commit&amp;gt; to reword the commit message.&lt;br/&gt;#&lt;br/&gt;# These lines can be re-ordered; they are executed from top to bottom.&lt;br/&gt;#&lt;br/&gt;# If you remove a line here THAT COMMIT WILL BE LOST.&lt;br/&gt;#&lt;br/&gt;# However, if you remove everything, the rebase will be aborted.&lt;br/&gt;#&lt;br/&gt;# Note that empty commits are commented out&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这里我们可以看出前面5行是我们要合并的记录，不过前面都带了一个相同的指令：&lt;code&gt;pick&lt;/code&gt;，这是什么指令呢，不要慌，这不，下面已经给出了&lt;code&gt;commands&lt;/code&gt;:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pick：保留该commit（缩写:p）&lt;br/&gt;&lt;br/&gt;reword：保留该commit，但我需要修改该commit的注释（缩写:r）&lt;br/&gt;&lt;br/&gt;edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）&lt;br/&gt;&lt;br/&gt;squash：将该commit和前一个commit合并（缩写:s）&lt;br/&gt;&lt;br/&gt;fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）&lt;br/&gt;&lt;br/&gt;exec：执行shell命令（缩写:x）&lt;br/&gt;&lt;br/&gt;drop：我要丢弃该commit（缩写:d）&lt;br/&gt;&lt;br/&gt;label：用名称标记当前HEAD(缩写:l)&lt;br/&gt;&lt;br/&gt;reset：将HEAD重置为标签(缩写:t)&lt;br/&gt;&lt;br/&gt;merge：创建一个合并分支并使用原版分支的commit的注释(缩写:m)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据这些指令，我们可以进行修改，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pick e2c71c6 update readme&lt;br/&gt;s 3d2c660 wip: merge`&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改好后，我们点击保存退出，就会进入注释界面:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; This is a combination of 2 commits.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; This is the 1st commit message:&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;update readme&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; This is the commit message &lt;span&gt;#2:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;wip: merge`&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; Please enter the commit message &lt;span&gt;for&lt;/span&gt; your changes. Lines starting&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; with &lt;span&gt;&#x27;#&#x27;&lt;/span&gt; will be ignored, and an empty message aborts the commit.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Date:      Thu Sep 17 22:03:52 2020 +0800&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; interactive rebase &lt;span&gt;in&lt;/span&gt; progress; onto 5f47a82&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Last commands &lt;span&gt;done&lt;/span&gt; (2 commands &lt;span&gt;done&lt;/span&gt;):&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;    pick e2c71c6 update readme&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;    squash 3d2c660 wip: merge`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; No commands remaining.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; You are currently rebasing branch &lt;span&gt;&#x27;master&#x27;&lt;/span&gt; on &lt;span&gt;&#x27;5f47a82&#x27;&lt;/span&gt;.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Changes to be committed:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/.idea/.gitignore&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/.idea/hash.iml&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/.idea/misc.xml&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/.idea/modules.xml&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/.idea/vcs.xml&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/go.mod&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/&lt;span&gt;hash&lt;/span&gt;/main.go&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       modified:   snowFlake/Readme.md&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面把每一次的提交的&lt;code&gt;meassage&lt;/code&gt;都列出了，因为我们要合并这两次的&lt;code&gt;commit&lt;/code&gt;，所以提交注释可以修改成一条，最终编辑如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; This is a combination of 2 commits.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; This is the 1st commit message:&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;fix: merge update and wip: merge`&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; Please enter the commit message &lt;span&gt;for&lt;/span&gt; your changes. Lines starting&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; with &lt;span&gt;&#x27;#&#x27;&lt;/span&gt; will be ignored, and an empty message aborts the commit.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Date:      Thu Sep 17 22:03:52 2020 +0800&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; interactive rebase &lt;span&gt;in&lt;/span&gt; progress; onto 5f47a82&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Last commands &lt;span&gt;done&lt;/span&gt; (2 commands &lt;span&gt;done&lt;/span&gt;):&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;    pick e2c71c6 update readme&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;    squash 3d2c660 wip: merge`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; No commands remaining.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; You are currently rebasing branch &lt;span&gt;&#x27;master&#x27;&lt;/span&gt; on &lt;span&gt;&#x27;5f47a82&#x27;&lt;/span&gt;.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Changes to be committed:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/.idea/.gitignore&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/.idea/hash.iml&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/.idea/misc.xml&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/.idea/modules.xml&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/.idea/vcs.xml&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/go.mod&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       new file:   &lt;span&gt;hash&lt;/span&gt;/&lt;span&gt;hash&lt;/span&gt;/main.go&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;       modified:   snowFlake/Readme.md&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编辑好后，保存退出就可以了。这样就完成了一次合并&lt;code&gt;commit&lt;/code&gt;。我们来验证一下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; git &lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;15ace34 (HEAD -&amp;gt; master) fix: merge update and wip: merge`&lt;br/&gt;5f47a82 update snowFlake code&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这里我们可以看到，两次提交变成了一次，减少了无用的提交信息。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;作用二：分支合并&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个作用我们使用的很少，但是还是要知道，下面我们一起来看一下使用场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设我们现在有一个新项目，现在我们要从&lt;code&gt;master&lt;/code&gt;分支切出来一个&lt;code&gt;dev&lt;/code&gt;分支，进行开发：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; git checkout -b dev&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，你的同事完成了一次 &lt;code&gt;hotfix&lt;/code&gt;，并合并入了 &lt;code&gt;master&lt;/code&gt; 分支，此时 &lt;code&gt;master&lt;/code&gt; 已经领先于你的 &lt;code&gt;dev&lt;/code&gt; 分支了：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0100671140939597&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPO6cVUd9mGMcjj9RsO5jjGNlyBjv9h1qQwgE9ZIVbZOcGp3uz9I8ossbhpiaBeYKLkzJJsiaTVvsg6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;596&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同事修复完事后，在群里通知了一声，正好是你需要的部分，所以我们现在要同步&lt;code&gt;master&lt;/code&gt;分支的改动，使用&lt;code&gt;merge&lt;/code&gt;进行合并：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; git merge master&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.532258064516129&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPO6cVUd9mGMcjj9RsO5jjGNgowzNib7b97QlbqWicLcGlesUMhGdwdCFQ7DzaWMPqicHibTCg6PvNiap3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;992&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图中绿色的点就是我们合并之后的结果，执行&lt;code&gt;git log&lt;/code&gt;就会在记录里发现一些 &lt;code&gt;merge&lt;/code&gt; 的信息，但是我们觉得这样污染了 &lt;code&gt;commit&lt;/code&gt; 记录，想要保持一份干净的 &lt;code&gt;commit&lt;/code&gt;，怎么办呢？这时候，&lt;code&gt;git rebase&lt;/code&gt; 就派上用场了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以现在我们来试一试使用&lt;code&gt;git rebase&lt;/code&gt;，我们先回退到同事 &lt;code&gt;hotfix&lt;/code&gt; 后合并 &lt;code&gt;master&lt;/code&gt; 的步骤，我现在不使用&lt;code&gt;merge&lt;/code&gt;进行合并了，直接使用&lt;code&gt;rebase&lt;/code&gt;指令&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; git rebase master&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，&lt;code&gt;git&lt;/code&gt;会把&lt;code&gt;dev&lt;/code&gt;分支里面的每个&lt;code&gt;commit&lt;/code&gt;取消掉，然后把上面的操作临时保存成 &lt;code&gt;patch&lt;/code&gt; 文件，存在 &lt;code&gt;.git/rebase&lt;/code&gt; 目录下；然后，把 &lt;code&gt;dev&lt;/code&gt; 分支更新到最新的 &lt;code&gt;master&lt;/code&gt; 分支；最后，把上面保存的 &lt;code&gt;patch&lt;/code&gt; 文件应用到 &lt;code&gt;dev&lt;/code&gt; 分支上；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5342741935483871&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPO6cVUd9mGMcjj9RsO5jjGN0SazPpicu2qO9PA4iciacGZ1pGv52xDBIyiayvUhdTg5UL4EflanaeS41A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;992&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从 &lt;code&gt;commit&lt;/code&gt; 记录我们可以看出来，&lt;code&gt;dev&lt;/code&gt; 分支是基于 &lt;code&gt;hotfix&lt;/code&gt; 合并后的 &lt;code&gt;master&lt;/code&gt; ，自然而然的成为了最领先的分支，而且没有 &lt;code&gt;merge&lt;/code&gt; 的 &lt;code&gt;commit&lt;/code&gt; 记录，是不是感觉很舒服了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在使用&lt;code&gt;rebase&lt;/code&gt;合并分支时，也会出现&lt;code&gt;conflict&lt;/code&gt;，在这种情况下，&lt;code&gt;git&lt;/code&gt; 会停止 &lt;code&gt;rebase&lt;/code&gt; 并会让你去解决冲突。在解决完冲突后，用 &lt;code&gt;git add&lt;/code&gt; 命令去更新这些内容。然后再次执行&lt;code&gt;git rebase --continue&lt;/code&gt;，这样&lt;code&gt;git&lt;/code&gt; 会继续应用余下的 &lt;code&gt;patch&lt;/code&gt; 补丁文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如我们现在不想在执行这次&lt;code&gt;rebase&lt;/code&gt;操作了，都可以通过&lt;code&gt;--abort&lt;/code&gt;回到开始前状态：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;git rebase --abort&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;code&gt;rebase&lt;/code&gt;是存在危险的操作 - 慎用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们现在使用&lt;code&gt;rebase&lt;/code&gt;操作看起来是完美的，但是他也是存在一定危险的，下面我们就一起来看一看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在假设我们在&lt;code&gt;dev&lt;/code&gt;分支进行开发，执行了&lt;code&gt;rebase&lt;/code&gt;操作后，在提交代码到远程之前，是这样的：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.889589905362776&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPO6cVUd9mGMcjj9RsO5jjGN3ia5BNX83icgpgb3GHwUer1HYarNxxys4u9tuFkwQyggIj676aticibo5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提交&lt;code&gt;dev&lt;/code&gt;分支到远程代码仓库后，就变成了这样：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6490384615384616&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPO6cVUd9mGMcjj9RsO5jjGN65E34LpRNIphnLkSsz2HxhHACLbVNYX1kkFUzJpAiaRNq8cYpfOU7mA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;832&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而此时你的同事也在 &lt;code&gt;dev&lt;/code&gt; 上开发，他的分支依然还是以前的&lt;code&gt;dev&lt;/code&gt;，并没有进行同步&lt;code&gt;master&lt;/code&gt;：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6348448687350835&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k5430ljpYPO6cVUd9mGMcjj9RsO5jjGNsPOucwwz8zJ9mEEibYfLwy7ScHoL7WN5oMnMBcp8tsp4G0z07zXueqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;838&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么当他 &lt;code&gt;pull&lt;/code&gt; 远程 &lt;code&gt;master&lt;/code&gt; 的时候，就会有丢失提交记录。这就是为什么我们经常听到有人说 &lt;code&gt;git rebase&lt;/code&gt; 是一个危险命令，因为它改变了历史，我们应该谨慎使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，如果你的分支上需要 &lt;code&gt;rebase&lt;/code&gt; 的所有 &lt;code&gt;commits&lt;/code&gt; 历史还没有被 &lt;code&gt;push&lt;/code&gt; 过，就可以安全地使用 &lt;code&gt;git-rebase&lt;/code&gt;来操作。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;asong&lt;/code&gt;的细心讲解下，姐姐完全搞懂了怎么使用&lt;code&gt;git rebase&lt;/code&gt;，我们来看一下姐姐的总结：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;当我们在一个过时的分支上面开发的时候，执行 &lt;code&gt;rebase&lt;/code&gt; 以此同步 &lt;code&gt;master&lt;/code&gt; 分支最新变动；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假如我们要启动一个放置了很久的并行工作，现在有时间来继续这件事情，很显然这个分支已经落后了。这时候需要在最新的基准上面开始工作，所以 &lt;code&gt;rebase&lt;/code&gt; 是最合适的选择。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git-rebase&lt;/code&gt; 很完美，解决了我们的两个问题：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;合并 &lt;code&gt;commit&lt;/code&gt; 记录，保持分支整洁；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;相比 &lt;code&gt;merge&lt;/code&gt; 来说会减少分支合并的记录；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;使用&lt;code&gt;rebase&lt;/code&gt;操作要注意一个问题，如果你的分支上需要 &lt;code&gt;rebase&lt;/code&gt; 的所有 &lt;code&gt;commits&lt;/code&gt; 历史还没有被 &lt;code&gt;push&lt;/code&gt; 过，就可以安全地使用 &lt;code&gt;git-rebase&lt;/code&gt;来操作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看来姐姐是真的学会了，那你们呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有学会不要紧，亲自试验一下才能更好的理解呦～～～。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好啦这一篇文章到这里就结束了，我们下期见。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考文章链接：http://jartto.wang/2018/12/11/git-rebase/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;结尾给大家发一个小福利吧，最近我在看[微服务架构设计模式]这一本书，讲的很好，自己也收集了一本PDF，有需要的小伙可以到自行下载。获取方式：关注公众号：[Golang梦工厂]，后台回复：[微服务]，即可获取。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;我翻译了一份GIN中文文档，会定期进行维护，有需要的小伙伴后台回复[gin]即可下载。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;我是asong，一名普普通通的程序猿，让我一起慢慢变强吧。我自己建了一个&lt;code&gt;golang&lt;/code&gt;交流群，有需要的小伙伴加我&lt;code&gt;vx&lt;/code&gt;,我拉你入群。欢迎各位的关注，我们下期见~~~&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/k5430ljpYPO6cVUd9mGMcjj9RsO5jjGNYKBlxicCnO8HuVSo8KPGCxFicPqxpJjMwE6LAGWRSlT7Cy2NbYbJbxeQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐往期文章：&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>521f0a59de2b3edb376969a2a322262e</guid>
<title>使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源（二）</title>
<link>https://toutiao.io/k/mnyfc4d</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-source-line=&quot;8&quot;&gt;之前写过一篇 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwMDA3ODQzNA==&amp;amp;mid=2459863293&amp;amp;idx=1&amp;amp;sn=1b736b88c356d4dbc1addaebc43a8aa2&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源&lt;/a&gt;，在那之后，又陆续想到并实施了几点利用 jsDelivr 进一步加速静态资源加载的措施，新起一篇作为记录和分享。&lt;/p&gt;&lt;p data-source-line=&quot;10&quot;&gt;继上一轮改造过后，比较拖页面加载速度的主要有三点：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;页面首个请求响应时间；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;图片资源加载时间；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;站内搜索引用的 JSON 资源加载时间。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;16&quot;&gt;第 1 点在页面仍然托管在 GitHub Pages 的前提下，似乎没有什么好办法能产生质的飞跃；本篇主要改善了第 2 点和第 3 点。&lt;/p&gt;&lt;h2 data-source-line=&quot;18&quot;&gt;0x01 图片资源加速&lt;/h2&gt;&lt;p data-source-line=&quot;20&quot;&gt;这里所说的图片主要是指文章里引用的图片。&lt;/p&gt;&lt;p data-source-line=&quot;22&quot;&gt;我一直将图片放在博客源码根目录的 images 文件夹下，引用图片的习惯写法是这样的：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;![&lt;span&gt;after use cdn&lt;/span&gt;](&lt;span&gt;/images/posts/github/cdn-after.png&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-source-line=&quot;28&quot;&gt;如果想将这个图片地址替换为 jsDelivr 的地址，需要做的就是将 &lt;code&gt;/images&lt;/code&gt; 替换为 &lt;code&gt;https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images&lt;/code&gt;。&lt;/p&gt;&lt;p data-source-line=&quot;30&quot;&gt;一处一处替换行不行？当然也行，但后面写新文章时要引用图片，还得手动写这一长串，不方便；万一 jsDeliver 出状况，也不好一键切换回来。有没有一劳永逸的方法？当然也有，我们从 Jekyll 的 layout 机制来想办法。&lt;/p&gt;&lt;p data-source-line=&quot;32&quot;&gt;Jekyll 的 layout 可以理解为页面模板，它是可以继承的，比如我的博客的所有页面模板有一个共同的祖先模板 _layouts/default.html，模板里可以使用 Liquid 语法对内容进行处理，我们可以利用这一点，来自动完成批量替换的工作。&lt;/p&gt;&lt;p data-source-line=&quot;34&quot;&gt;关键代码如下：&lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;{% &lt;span&gt;assign&lt;/span&gt; assets_base_url = site.url %}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;{% &lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt; site.cdn.jsdelivr.enabled %}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;{% &lt;span&gt;assign&lt;/span&gt; assets_base_url = &quot;https://cdn.jsdelivr.net/gh/&quot; | append: site.repository | append: &#x27;@master&#x27; %}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;{% &lt;span&gt;&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt; %}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;{% &lt;span&gt;assign&lt;/span&gt; assets_images_url = &#x27;src=&quot;&#x27; | append: assets_base_url | append: &quot;/images&quot; %}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;{% &lt;span&gt;&lt;span&gt;include&lt;/span&gt;&lt;/span&gt; header.html %}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;{{ content | replace: &#x27;src=&quot;/images&#x27;, assets_images_url }}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;{% &lt;span&gt;&lt;span&gt;include&lt;/span&gt;&lt;/span&gt; footer.html %}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-source-line=&quot;47&quot;&gt;大意就是，如果打开了启用 jsDelivr 加速的开关，就将 &lt;code&gt;content&lt;/code&gt; 里的 &lt;code&gt;src=&quot;/images&quot;&lt;/code&gt; 替换为 &lt;code&gt;src=&quot;https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images&quot;&lt;/code&gt;，否则替换为 &lt;code&gt;src=&quot;https://mazhuang.org/images&quot;&lt;/code&gt;。&lt;/p&gt;&lt;p data-source-line=&quot;49&quot;&gt;以上便达成了我们的目的。&lt;/p&gt;&lt;h2 data-source-line=&quot;51&quot;&gt;0x02 站内搜索引用的 JSON 资源加速&lt;/h2&gt;&lt;p data-source-line=&quot;53&quot;&gt;我是使用 Simple-Jekyll-Search 这个 JavaScript 库来实现站内搜索的，它的搜索数据是来自一个动态生成的 JSON 文件。&lt;/p&gt;&lt;p data-source-line=&quot;55&quot;&gt;这个 JSON 文件编译前长这样：&lt;/p&gt;&lt;p data-source-line=&quot;57&quot;&gt;https://github.com/mzlogin/mzlogin.github.io/blob/master/assets/search_data.json&lt;/p&gt;&lt;p data-source-line=&quot;59&quot;&gt;Jekyll 编译后长这样：&lt;/p&gt;&lt;p data-source-line=&quot;61&quot;&gt;https://mazhuang.org/assets/search_data.json&lt;/p&gt;&lt;p data-source-line=&quot;63&quot;&gt;这样的资源是没有办法直接通过替换网址来用 jsDelivr 加速的，因为 jsDelivr 上缓存的是编译前的文件，而我们需要的是编译后的。&lt;/p&gt;&lt;p data-source-line=&quot;65&quot;&gt;那我们就想办法：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;将博客源码编译；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将编译结果保存到另一个分支；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 jsDelivr 引用新分支上的这个文件。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;71&quot;&gt;这些步骤可以通过 GitHub 去年推出的新特性 Actions 来完成，在我们每一次向博客源码仓库 push 代码时自动触发。&lt;/p&gt;&lt;p data-source-line=&quot;73&quot;&gt;关键步骤如下：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-source-line=&quot;75&quot;&gt;在 GitHub 新建一个 Personal access Token：&lt;/p&gt;&lt;p data-source-line=&quot;77&quot;&gt;Settings --&amp;gt; Developer settings --&amp;gt; Personal access tokens --&amp;gt; Generate new token --&amp;gt; 填写 note，勾选 public_repo，生成之后复制 token 值备用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-source-line=&quot;79&quot;&gt;在博客源码仓库的 Settings --&amp;gt; Secrets --&amp;gt; New secret，Name 填 &lt;code&gt;ACCESS_TOKEN&lt;/code&gt;，Value 填第 1 步里复制的 token 值；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-source-line=&quot;81&quot;&gt;在博客源码根目录下新建文件 .github/workflows/ci.yml，内容如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;name:&lt;/span&gt; &lt;span&gt;Build&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;Deploy&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;on:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  push:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    branches:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt; &lt;span&gt;master&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;jobs:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  build-and-deploy:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    runs-on:&lt;/span&gt; &lt;span&gt;ubuntu-latest&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    steps:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      - name:&lt;/span&gt; &lt;span&gt;Checkout&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        uses:&lt;/span&gt; &lt;span&gt;actions/checkout@v2.3.1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        with:&lt;/span&gt; &lt;br/&gt;&lt;span&gt;          persist-credentials:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;      - name:&lt;/span&gt; &lt;span&gt;Set&lt;/span&gt; &lt;span&gt;Ruby&lt;/span&gt; &lt;span&gt;2.7&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        uses:&lt;/span&gt; &lt;span&gt;actions/setup-ruby@v1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        with:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          ruby-version:&lt;/span&gt; &lt;span&gt;2.7&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;      - name:&lt;/span&gt; &lt;span&gt;Install&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;Build&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        run:&lt;/span&gt; &lt;span&gt;|&lt;br/&gt;          gem install bundler&lt;br/&gt;          bundle install&lt;br/&gt;          bundle exec jekyll build&lt;br/&gt;        &lt;br/&gt;&lt;/span&gt;&lt;span&gt;      - name:&lt;/span&gt; &lt;span&gt;Deploy&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        uses:&lt;/span&gt; &lt;span&gt;JamesIves/github-pages-deploy-action@3.6.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        with:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          ACCESS_TOKEN:&lt;/span&gt; &lt;span&gt;${{&lt;/span&gt; &lt;span&gt;secrets.ACCESS_TOKEN&lt;/span&gt; &lt;span&gt;}}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          BRANCH:&lt;/span&gt; &lt;span&gt;built&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          FOLDER:&lt;/span&gt; &lt;span&gt;_site&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          CLEAN:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-source-line=&quot;119&quot;&gt;大意就是在向 master 分支 push 代码时，自动执行 checkout、初始化 ruby 环境、安装 Jekyll 并编译博客源码的工作，最后将编译生成的 _site 目录里的内容推送到 built 分支。对 GitHub Actions 感兴趣的同学可以自行参考官方说明学习。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-source-line=&quot;121&quot;&gt;修改引用 JSON 文件的地方，比如我的 _includes/sidebar-search.html 里的写法由：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;json: &lt;span&gt;&#x27;{{ site.url }}/assets/search_data.json&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-source-line=&quot;127&quot;&gt;改为了&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;span&gt;{% &lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt; site.cdn.jsdelivr.enabled and site.url contains &#x27;mazhuang.org&#x27; %}&lt;/span&gt;&lt;span&gt;&lt;br/&gt;  json: &#x27;https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@built/assets/search_data.json&#x27;,&lt;br/&gt;&lt;/span&gt;&lt;span&gt;{% &lt;span&gt;&lt;span&gt;else&lt;/span&gt;&lt;/span&gt; %}&lt;/span&gt;&lt;span&gt;&lt;br/&gt;  json: &#x27;&lt;/span&gt;&lt;span&gt;{{ site.url }}&lt;/span&gt;&lt;span&gt;/assets/search_data.json&#x27;,&lt;br/&gt;&lt;/span&gt;&lt;span&gt;{% &lt;span&gt;&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt; %}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-source-line=&quot;137&quot;&gt;将以上更改推送到源码仓库，等待处理完成即可。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-source-line=&quot;139&quot;&gt;0x03 结语&lt;/h2&gt;&lt;p data-source-line=&quot;141&quot;&gt;经过以上改造，博客页面的加载速度又得到了小小的提升，所有相关源码可以在 https://github.com/mzlogin/mzlogin.github.io 找到，有相关心得或建议的朋友欢迎交流指正。&lt;/p&gt;&lt;p data-source-line=&quot;143&quot;&gt;相关文章：&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>