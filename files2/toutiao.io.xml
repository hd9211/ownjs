<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>8be99ddcfdbb2710de197f1f8ec6f6b7</guid>
<title>直播预告｜一线专家邀你共话：数据科学赋能多元应用场景价值</title>
<link>https://toutiao.io/k/hrmynfw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;container app-preview post-body&quot;&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;p&gt;▌本期活动背景&lt;/p&gt;

&lt;p&gt;21世纪的数据就像18世纪的石油，是一笔巨大的、尚未开发的宝贵财富。随着产业数字化转型浪潮迭起，各行各业都需要建立与自身商业模式适配的AI大脑，以实现智慧商业、智能决策。而数据科学则是AI大脑组成中的重要一环，影响着商业化应用价值的高低。
当前，机器学习技术已在大量的是实际场景中落地应用，本期将邀请到来自亚马逊、蚂蚁金服/谷歌开发者社区以及MobTech袤博科技等多位技术专家聚焦机器学习技术赋能多元应用场景价值的话题，探讨数据科学如何拓宽产业边界。&lt;/p&gt;

&lt;p&gt;▌本期议程&lt;/p&gt;

&lt;p&gt;⏰时间：3月3日（周四）20:00 —21:30&lt;/p&gt;

&lt;p&gt;📝报名方式：点击报名链接报名 &lt;a href=&quot;https://www.slidestalk.com/m/668&quot;&gt;https://www.slidestalk.com/m/668&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;20:00—20:25&lt;/p&gt;

&lt;p&gt;《MLOps、TFX pipelines 及大规模机器学习的应用》&lt;/p&gt;

&lt;p&gt;江骏|   蚂蚁集团高级技术专家、谷歌开发者机器学习专家&lt;/p&gt;

&lt;p&gt;介绍MLOps概念，以及Google、TensorFlo在这方面生产级别的端到端方案，如何让大规模机器学习服务搜索推荐、科学研究等领域。帮助听众从中受到启发，为自己的企业或是项目架设机器学习平台，并在业务中得到运用。&lt;/p&gt;

&lt;p&gt;20:25—20:50&lt;/p&gt;

&lt;p&gt;《借助业务数据快速构建个性化推荐引擎》&lt;/p&gt;

&lt;p&gt;王宇博|   Amazon Head of Developer Relations GCR&lt;/p&gt;

&lt;p&gt;一直以来，对于推荐系统的需求可以说无处不在，从电商购物、新闻阅读、音视频到在线应用的推荐。现在，开发者能够使用基于亚马逊电商技术的推荐服务，快速开启个性化推荐之旅，以普惠AI助力实现商业价值。&lt;/p&gt;

&lt;p&gt;20:50—21:15&lt;/p&gt;

&lt;p&gt;《机器学习赋能商业地产决策进阶——商场客流和职住地分析》&lt;/p&gt;

&lt;p&gt;叶秋|   MobTech袤博科技资深数据挖掘工程师&lt;/p&gt;

&lt;p&gt;随着疫情逐渐消退和经济增长驱动转向国内消费，线下消费迎来了新一轮的增长风潮。商场商圈作为线下消费的重要组成部分引起了广泛关注，商场的开发和运营成为了地产开发商关注的核心议题。在这其中，客流决定着商场的基本盘，而职住地的分布情况又间接影响着主力客群的消费水平和频次。因此，如何准确且快速得了解客流及职住地分布是商场经营决策中的重要一环。MobTech通过丰富的数据成果积累、多维规则及前沿算法分析处理，精准得出客流和职住地分布，全方位赋能商业地产决策进阶&lt;/p&gt;

&lt;p&gt;21:15—21:30&lt;/p&gt;

&lt;p&gt;学习迷你Talk：未来数据科学赋能商业应用场景的高地在哪儿？&lt;/p&gt;

&lt;p&gt;王宇博、江骏&lt;/p&gt;

&lt;p&gt;▌直播福利&lt;/p&gt;

&lt;p&gt;1、成功推荐5位技术同事/朋友报名直播，即有机会获取技术书籍一本。&lt;/p&gt;

&lt;p&gt;2、成功推荐10位技术同事/朋友报名直播，即有机会获取极客背包一个。&lt;/p&gt;

&lt;p&gt;▌活动Tips：&lt;/p&gt;

&lt;p&gt;1、点击链接基本信息提交报名表单，主办方将在24小时内进行审核。&lt;/p&gt;

&lt;p&gt;2、审核成功后，您会在活动前通过短信、邮件、公众号等渠道收取报名成功通知及直播链接。&lt;/p&gt;

&lt;p&gt;3、添加小助手入移动端技术交流群，学习抽奖两不误！&lt;/p&gt;

&lt;p&gt;▌Coder Park直播&lt;/p&gt;

&lt;p&gt;为增强开发者间的技术交流，促进企业间的技术和业务合作，MobTech袤博科技联动各知名企业、社区平台、技术协会、优秀技术专家等，共同打造一档线上技术直播分享栏目【Coder Park】。 第一季联动华为、中国信通院、阿里等知名平台10位+讲师，围绕大数据平台架构、数据安全、移动开发等方向展开精彩分享，收获近50000+参会者关注，，积极推动业内交流和技术布道。&lt;/p&gt;

&lt;p&gt;▌第二季介绍&lt;/p&gt;

&lt;p&gt;【Coder Park】第二季将聚焦数据智能领域，联动中国信通院、亚马逊、快手等一线企业，以及谷歌开发者社区、掘金、开源中国、火山引擎开发者社区、TechParty等社区组织合作，围绕数据科学算法、数据治理、数据中台以及数据存储等技术领域展开主题分享，帮助更多企业快速推进数字化转型进程。第二季嘉宾阵容与合作伙伴全新升级，更多精彩内容和礼品惊喜等你来探索。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c8b8ac120eb9a0d5b660fd60b242c793</guid>
<title>多账号统一登陆，账号模块的系统设计</title>
<link>https://toutiao.io/k/4i5otyu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;来源：&lt;/span&gt;&lt;span&gt;dustyblog.cn&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4911297852474323&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/iaHzRIndsicSl4CloGISFtFgq1AB18R7rJ33l0edDfw0bKtWr7p9upIZoBDlCU4YD1tYkvake1EeGww1VVTAZX3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1071&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在几乎大部分的 &lt;code&gt;App&lt;/code&gt; 都支持使用多个第三方账号进行登录，如：微信、QQ、微博等，我们把此称为多账号统一登陆。而这些账号的表设计，流程设计至关重要，不然后续扩展性贼差。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文不提供任何代码实操，但是梳理一下博主根据我司账号模块的设计，提供思路，仅供参考。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;一、 自建的登陆体系&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.1.1 手机号登陆注册&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;该设计的思路是每个手机号对应一个用户，手机号为必填项。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;流程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;首先输入手机号，然后发送到服务端。先判断该手机号是否存在账号，如果没有，就会生成随机验证码，将手机号和验证码绑定到 &lt;code&gt;Redis&lt;/code&gt;中，并设置一定的过期时间（过期时间一般是5分钟，这就是我们一般手机验证码的有效期），最后将验证码通过短信发送给用户。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户接收到验证码后，在界面填写验证码以及密码等基础信息，然后将这些数据发送服务端。服务端收到后，先判断在 &lt;code&gt;Redis&lt;/code&gt;里面这个手机号对应的验证码是否一致，，失败就返回错误码，成功就给用户创建一个账号和保存密码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;注册成功后，用户即可通过自己的 &lt;code&gt;手机号+密码&lt;/code&gt;进行登陆。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用户体验差，需要完成获取验证码，填写验证码/密码/用户名等诸多的信息完成注册，然后才能使用；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;容易遗忘密码，遗忘后，只能通过忘记密码来重新设置密码。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.1.2 优化注册登陆&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;该方案的思路是弱化密码的必填性，即无论用户是否注册过，可通过 &lt;code&gt;手机号+验证码&lt;/code&gt; 直接进行登陆(保留 &lt;code&gt;手机号+密码&lt;/code&gt;登录的方式)。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;流程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;输入手机号，然后发送到服务端。服务端生成随机验证码，将手机号和验证码绑定到 &lt;code&gt;Redis&lt;/code&gt;中，并设置一定的过期时间（过期时间一般是5分钟，这就是我们一般手机验证码的有效期），最后将验证码通过短信发送给用户。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户接收到验证码后，在界面只需填写收到的验证码，提交到服务端。服务端收到后，先判断在 &lt;code&gt;Redis&lt;/code&gt;里面这个手机号对应的验证码是否一致，失败就返回错误码，成功就直接登录。如果是老用户，直接拉取用户信息；如果是新用户，则提示他可以完善用户信息（不强制）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户通过 &lt;code&gt;手机号+验证码&lt;/code&gt;登录后，也可选择设置密码，然后就可以通过 &lt;code&gt;手机号+密码&lt;/code&gt;的方式登录，即：密码是非必填项。&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNjM3MDEyMg==&amp;amp;mid=2247517463&amp;amp;idx=1&amp;amp;sn=39841b9fb02e185d4cb06df7f5b7cc02&amp;amp;chksm=e8da24b2dfadada4eea431a3df5ea184203cdc1cf4f833549f80956328901c5e005f8d388583&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;关注顶级架构师&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;关注顶级架构师&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户表设计：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;user_name&lt;/th&gt;&lt;th&gt;user_password&lt;/th&gt;&lt;th&gt;user_mobile&lt;/th&gt;&lt;th&gt;state&lt;/th&gt;&lt;th&gt;more&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;用户id&lt;/td&gt;&lt;td&gt;用户名&lt;/td&gt;&lt;td&gt;用户密码&lt;/td&gt;&lt;td&gt;手机号码&lt;/td&gt;&lt;td&gt;账号状态&lt;/td&gt;&lt;td&gt;其他信息&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.2 引入第三方账户方案&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.2.1 微博登录&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入 &lt;code&gt;Web2.0&lt;/code&gt; 时代 ,微博开放了第三方网站登录, 产品说, 这个我们得要, 加个用微博帐号就能登录我们的 &lt;code&gt;App&lt;/code&gt;吧，而且得和我们自己的用户表关联。&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247564615&amp;amp;idx=1&amp;amp;sn=d6920797897668c689df66d80a79ad8d&amp;amp;chksm=ecabb6a9dbdc3fbffd2439e30c797f6817e2a13b8468cda9eb637312f95885fa9b1b270585ca&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;关注编程技术圈&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;关注编程技术圈&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;流程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端调用微博登录的界面，进行输入用户名、密码，登录成功后，会返回 &lt;code&gt;access_token&lt;/code&gt;,通过 &lt;code&gt;access_token&lt;/code&gt;调取 &lt;code&gt;API&lt;/code&gt;接口获取用户信息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端通过用户信息在我们用户表创建一个账号，以后，该第三方账号即可通过该微博账号直接进行登陆。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微博用户信息表设计：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;user_id&lt;/th&gt;&lt;th&gt;uid&lt;/th&gt;&lt;th&gt;access_token&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;主键id&lt;/td&gt;&lt;td&gt;用户id&lt;/td&gt;&lt;td&gt;微博唯一id&lt;/td&gt;&lt;td&gt;授权码&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.2.2 噩梦来临&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;紧接着, QQ又开放用户登录了, 微信开放用户登录了，网易开发用户登录了。。。。。。一下子要接入好多家第三方登录了, 只能按照 “微博用户信息表” 新建一个表，重写一套各个第三方登录。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;二、 优化账号体系&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.1 原账号体系分析&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;自建登陆体系：无论 &lt;code&gt;手机号+密码&lt;/code&gt; , 还是 &lt;code&gt;手机号+验证码&lt;/code&gt; , 都是一种 &lt;code&gt;用户信息+密码&lt;/code&gt; 的验证形式；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三方登录：也是 &lt;code&gt;用户信息+密码&lt;/code&gt; 的形式, 用户信息即第三方系统中的 &lt;code&gt;ID&lt;/code&gt;(第三方系统中的唯一标识), 密码即 &lt;code&gt;access_token&lt;/code&gt;, 只不过是一种有使用时效定期修改的密码。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.2 新的账号体系&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.2.1 数据表设计&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户基础信息表：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;nickname&lt;/th&gt;&lt;th&gt;avatar&lt;/th&gt;&lt;th&gt;more&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;用户id&lt;/td&gt;&lt;td&gt;昵称&lt;/td&gt;&lt;td&gt;头像&lt;/td&gt;&lt;td&gt;其他信息&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户授权信息表：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;user_id&lt;/th&gt;&lt;th&gt;identity_type&lt;/th&gt;&lt;th&gt;identifier&lt;/th&gt;&lt;th&gt;credential&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;主键id&lt;/td&gt;&lt;td&gt;用户id&lt;/td&gt;&lt;td&gt;登录类型(手机号/邮箱) 或第三方应用名称 (微信/微博等)&lt;/td&gt;&lt;td&gt;手机号/邮箱/第三方的唯一标识&lt;/td&gt;&lt;td&gt;密码凭证 (自建账号的保存密码, 第三方的保存 token)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用户表分为 &lt;code&gt;用户基础信息表&lt;/code&gt; + &lt;code&gt;用户授权信息表&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户信息表不保存任何密码, 不保存任何登录信息(如用户名, 手机号, 邮箱), 只留有昵称、头像等基础信息; 所有和授权相关,都放在用户信息授权表, &lt;strong&gt;用户信息表和用户授权表是一对多的关系&lt;/strong&gt; 。微信搜索公众号：Java项目精选，回复：java 领取资料 。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.2.2 登录流程&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;沿用之前的方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户填写 &lt;code&gt;邮箱/手机号+密码&lt;/code&gt;; 请求登录的时候, 先判断类型, 如手机号登录为例：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;type=&#x27;phone&#x27;&lt;/code&gt; 结合 &lt;code&gt;identifier=&#x27;手机号&#x27;&lt;/code&gt; 查找, 如有, 取出并判断 &lt;code&gt;password_hash&lt;/code&gt;(密码)是否和该条目的 &lt;code&gt;credential&lt;/code&gt; 相符, 相符则通过验证, 随后通过 &lt;code&gt;user_id&lt;/code&gt; 获取用户信息;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询 &lt;code&gt;type=&#x27;weixin&#x27;&lt;/code&gt; 结合 &lt;code&gt;identifier=&#x27;微信 openId&#x27;&lt;/code&gt;, 如果有记录, 则直接登录成功, 并更新 &lt;code&gt;token&lt;/code&gt;; 假设与微信服务器通信不被劫持的情况下无需判断凭证问题。另外，搜索公众号Linux就该这样学后台回复“电子书”，获取一份惊喜礼包。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.2.3 优缺点&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;登录类型无限扩展, 新增登录类型的开发成本显著降低;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;原来条件下, 应用需要验证手机号是否已验证和邮箱是否已验证, 需要相对应多一个字段如 &lt;code&gt;phone_verified&lt;/code&gt; 和 &lt;code&gt;email_verified&lt;/code&gt;, 如今只要在 &lt;code&gt;用户授权信息表&lt;/code&gt; 表中增加一个统一的 &lt;code&gt;verified&lt;/code&gt;字段, 每种登录方式都可以直观看到是否已验证情况;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在 &lt;code&gt;用户授权信息表&lt;/code&gt; 添加相应的时间和 &lt;code&gt;IP&lt;/code&gt; 地址, 就可以更加完整地跟踪用户的使用习惯, 比如:已经不使用微博登录两年多, 已经绑定微信 300天;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你说邮箱和手机号就是用户信息的组成部分, users 表尽管拓展, users 表里依然有email , phone , 但他们仅仅作为“展示用途”,和昵称,头像或者性别这些属性没有本质区别;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可按需绑定任意数量的同类型登录方式, 即一个用户可以绑定多个微信, 可以有多个邮箱, 可以有多个手机号。当然你也可以限制一种登录方式只有一条记录;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点 :&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;用户同时存在邮箱、用户名、手机号等多种站内登录方式时, 改密码时必须一起改, 否则就变成了 &lt;code&gt;邮箱+新密码&lt;/code&gt;, &lt;code&gt;手机号+旧密码&lt;/code&gt;都可以登录, 肯定是很诡异的情况;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;代码量增加了, 有些情况下逻辑判断增加了, 难度增大了; 举个例子, 无论用户是否已登录, 无论用户是否已注册过, 都是点击同一链接前往微博第三方授权后返回, 可能出现几种情况:&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;该微博在本站未注册过, 很好, 直接给他注册关联并登录；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;该微博已经在本站存在, 当前用户未登录, 直接登录成功；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;该微博未在本站注册, 但当前用户已经登录并关联的是另一个微博帐号, 作何处理取决于是否允许绑定多个微博帐号；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;该微博未在本站注册过, 当前用户已登录, 尝试进行绑定操作；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;该微博已经注册, 用户又已使用该帐号登录, 为何他重复绑定自己;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;该微博已经在本站存在, 但当前用户已经登录并关联的是另一个微博帐号, 作何处理?&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;三、 一键登陆&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.1 背景&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回顾一下 &lt;code&gt;手机号+验证码&lt;/code&gt; 的登录方式：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;输入手机号、等待验证码短信、输入验证码、点击登录。整个流程走完可能需要 20 秒以上，操作也比较繁琐；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它是依赖短信网络的，因为如果收不到短信，也就登录不了了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从安全角度考虑，还存在验证码泄漏的风险。如果有人知道了你的手机号，并且窃取到了验证码，那他也能登录你的账号了。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但回过头来想一下，为什么我们需要验证码？验证码的作用就是确定这个手机号是你的，那除了使用短信，是否还有别的方式对手机号进行认证？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果能获取到当前使用的手机号，就能对用户输入的号码进行验证了。但出于安全考虑，客户端是无法直接获取到手机号的，运营商则可以通过 &lt;code&gt;SIM&lt;/code&gt; 卡数据查询到。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;现在运营商已经开放了相关的能力，现在我们可以在用户输入手机号后，通过调用运营商的接口，判断用户输入的手机号是否和本地号码一致。这样一来，用户就省去了等待验证码短信、输入验证码的过程，也不受短信网络的限制，简化了登录流程。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但再进一步想，如果运营商可以把当前的号码直接返回给我们，而不只是用于验证，那用户连手机号都不需要填了。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是该部分的主角：&lt;strong&gt;一键登录&lt;/strong&gt; 。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.2 本机号码认证&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取到当前手机使用的手机卡号，直接使用这个号码进行登录，这就是一键登录。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种登录方式的好处是显而易见的。它可以更方便、快捷地完成注册、登录流程，将原本可能需要 20 秒的流程，缩短到了 2 秒左右，很大程度上提升了登录的用户体验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要步骤如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;SDK 初始化：调用 SDK 的初始化方法，传入项目在平台上的 AppKey 和 AppSecret。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;唤起授权页：调用 SDK 唤起授权接口。SDK 会先向运营商发起获取手机号验码的请求，请求成功后跳转到授权页。授权页会显示手机号掩码以及运营商协议给用户确认。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同意授权并登录：用户同意相关协议，点击授权页面的登录按钮，SDK 会请求本次取号的 token，请求成功后将 token 返回给客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;取号：将获取到的 token 发送到我们自己的服务器，由服务器携带 token 调用运营商一键登录的接口，调用成功就返回手机号码了。服务器用手机号进行登录或注册操作，返回操作结果给客户端，完成一键登录。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前阿里云已经提供了该方式并可兼容三大运营商的号码，详见 阿里云SDK:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://help.aliyun.com/document_detail/121113.html&lt;span/&gt;&lt;/p&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PS：如果觉得我的分享不错，欢迎大家随手点赞、在看。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUzMDE4NjE4Mg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Kp4CFraY7DjqmY12sz2MDPOyJwgtWxCyxXyd7bJLkHQZAee6dgZ4vsKlzU3ib4icg6xpYFOpcibjZIWrj52ABEUibg/0?wx_fmt=png&quot; data-nickname=&quot;写代码的渣渣鹏&quot; data-alias=&quot;mcdys_100&quot; data-signature=&quot;关注我，学好Java.让Spring Boot, 微服务,高并发，包括多线程、JVM、Spring Cloud不再有难题，让java不再难懂。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;推荐关注&lt;/p&gt;&lt;/pre&gt;&lt;/pre&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>043fd9bf9c81cfc91c120c1a3ef9958c</guid>
<title>贝壳找房一站式报警平台建设实践</title>
<link>https://toutiao.io/k/jobtx78</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.10546875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Rcon9f6LyEtnuNrHVVOILKpt8Fhmlfzg4sPusv1FyNPPUia4By47iaNGwPRYugWxgtkoliaJm2TQBXE3LA7OzAdVw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;背景介绍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;KeMonitor是贝壳找房服务端一站式监控报警平台。2018年～2020年是业务的快速发展阶段，在这期间陆陆续续研发了基于CAT、Prometheus、ELK、Skywalking、以及部分自研专有数据监控平台，大大小小攻击十余个监控系统，各系统均自行建设了各自的报警能力。报警发生之后，一线研发同学就会同时打开多个平台，去看基础设施监控、应用监控、日志等，五花八门的报警也给用户带来了最多的痛点。在此背景下具有一站式体验的KeMonitor平台就应运而生了。在2021年，由贝壳找房人店技术中心牵头，联合了多个部门，针对在报警环节进行了系统性的治理，治理报警的过程中也沉淀了一套完善的报警中心以及配套的报警响应SOP机制，下面会为大家详细介绍整体的建设经验。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;问题及挑战&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在2020年年底进行了一次面向公司范围全体研发的用户调研，用户的诉求主要是希望项目组牵头对公司范围的研发侧同学日常收到的报警进行系统性治理。分析用户调研问卷的问题集合，一类是是报警太分散，缺少一站式平台化的能力来系统性的根治报警漏报、报警风暴、误报等问题；另外一大类问题就是在研发习惯层面对于如何补齐监控项以及报警如何治理的经验的缺失。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;平台治理能力问题&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;主要是涉及到报警的一系列“灵魂拷问”，该如何解决？&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;报警入口/触达太分散，报警不统一五花八门&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;报警太多，每一天，需要很大的精力来响应报警&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;关键的报警漏掉了，没发对人，也没有人及时跟进&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;发给我的的报警，本身就不合理，并不适合我的系统特点，我应该如何治理？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;技术运营层面问题&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;如何快速推进大家补齐监控？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何形成一套标准的报警处理SOP机制？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解决思路&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;报警治理需要按照事前、事中、事后进行全生命周期的管理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;事前，主要关注报警的完备度，要尽可能全的补齐监控，这一点我们在今年的健康分技术运营活动，重新梳理定义了监控的范式，建立了一套度量机制来度量报警的完备程度。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;事中，主要是指报警发生后，要第一时间进行处理——跟进/解决、止损恢复、信息同步通报，也就是对于关键的报警，要做到“件件有着落，事事有回音”，这样才能避免问题处理不及时，转化成故障。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;事后，主要是针对已经发生的报警，进行总结、复盘解决隐患，持续关注，形成长效机制。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;基于一线业务研发团队实践中的总结，监控/报警的成熟度，分为三个阶段：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;初阶：&lt;/p&gt;&lt;p&gt;主要对应完善监控/报警，提升覆盖面&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;进阶：&lt;/p&gt;&lt;p&gt;主要对应报警规则补全之后，需要对于已经发生的报警，保持关注度，同时要及时识别出来报警的有效性，及时消灭无意义的报警，研发资源是宝贵的，要避免把过多的精力花在处理无意义/无关紧要的报警上。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;稳定：&lt;/p&gt;&lt;p&gt;监控/报警已经体系化，能够召回绝大多数问题，也是一个成熟技术团队良好技术习惯养成的标志之一。&lt;/p&gt;&lt;p&gt;对应前两个阶段已经做到位了，系统监控范围已经足够完备，团队内各成员已经养成了良好的技术习惯。&lt;/p&gt;&lt;p&gt;同时，组织结构以及系统是会不断迭代演进的，因此还需要持续治理。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;详细的报警分阶段治理以及报警成熟度模型，如图1所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.562963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26brGaJYQ1T8pmNXnpfvbSicyVpyte04PIKLDTGzwJACkdp9fliceUEQZiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图1 报警生命周期&amp;amp; 报警成熟度阶段&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;报警治理到成熟阶段的数据表现如图2所示，该案例节选自人店技术中心的某技术团队，从图中我们可以清楚的看出，随着一段时间的报警治理、Review、复盘，报警量整体上会呈一个下降的趋势。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5046296&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26b1v7qicwtWIbAalx6OsG4YTgrDOhN9BmTeibZNHOLOoz7vRyKZpIBOQFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;图2 报警治理趋势图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实现上述效果，在工具层面，则需要针对报警全生命周期管控的线上化平台——KeMonitor报警中心。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;平台能力介绍&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;KeMonitor报警中心主要给大家提供完善的工具端的支持以及一套标准的报警SOP处理范式，以便大家能够更好的将报警治理进行落地。图3是报警中心的全景图，报警中心主要起到连接用户（研发——管理者&amp;amp;一线研发、DBA）以及监控能力提供方的衔接作用，核心解决在研发过程中，对于报警事件已经发生之后的最后一公里投递给到研发同学的痛点。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6157407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bz64sziccTgGCOWMicJNL2NIibkzWq29KzEWwLOyXFjLgA1wpPv2RNzpibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图3 报警中心能力全景图&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、统一配置（事前）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）报警元信息标准化&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在治理之前，大部分报警规则除了触发阈值之外，仅有触达方式一项可以进行配置，为了更好的治理报警，我们在报警规则元信息配置中增加了如下信息：&lt;/p&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;报警来源：&lt;/p&gt;&lt;p&gt;报警能力提供方&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;报警等级：&lt;/p&gt;&lt;p&gt;提供了0级、1级、2级、未分级四种，详细可以参见报警分级章节&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;报警场景：&lt;/p&gt;&lt;p&gt;依据报警健康分报警完备度的约束，可以标注该条报警，具体归属于那一类场景。&lt;/p&gt;&lt;p&gt;如：&lt;/p&gt;&lt;p&gt;慢查询、慢调用、业务指标报警&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;背景知识：&lt;/p&gt;&lt;p&gt;可以填写该条报警设置的背景&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;定位知识：&lt;/p&gt;&lt;p&gt;可以填写，该条报警定位问题对应的详细操作步骤&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;止损建议：&lt;/p&gt;&lt;p&gt;可以填写，该条报警对应的下一步的止损回恢复的操作步骤&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如图4所示，用户以及通用报警能力提供方，均可针对报警规则添加的元信息，便于在事中阶段的问题止损&amp;amp;问题定位环节提效。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4517375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bChqwjKa5KJ2iaETC5u7P6hOjtrKsVDDpgFtMNlMicYqAehLRaBcv8DibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;518&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图4 报警元信息标注&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;完成元信息标准化之后，报警内容中可以携带更多的定位、止损信息，减少用户上下文切换操作其他各平台的时间损耗，详细如图5所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6010017&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26b4o2CvGO8VzuScaMsXy0rTPG9AbJ6oD6gviaSo8v2ehA6hAMYLQoDezA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;599&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图5 标准化报警文案&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）报警分级&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;根据不同等级的服务，报警也需要设定为按照轻重缓急去有针对性的报警，不同的报警需要研发同学投入的关注度也是不同的，因此通过合理的分级机制。&lt;/p&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;0级报警：&lt;/p&gt;&lt;p&gt;大概率会导致线上产生故障，一般对应核心服务不可用，或者关键业务指标受损。&lt;/p&gt;&lt;p&gt;如：&lt;/p&gt;&lt;p&gt;服务大量报错，或者核心业务指标归零等。&lt;/p&gt;&lt;p&gt;同时针对0级报警中关键业务指标受损的情况，还需要进行进一步的细分，主要是去细分这个影响面，是公司级、业务级（如：&lt;/p&gt;&lt;p&gt;新房、房源、客源等核心系统的作业问题）、服务级这几类。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;1级报警：&lt;/p&gt;&lt;p&gt;如果处理不及时，积累到一定程度，会导致核心服务或者重要服务线上故障。&lt;/p&gt;&lt;p&gt;一般对应资源使用不合理，如：&lt;/p&gt;&lt;p&gt;MySQL慢查询、慢服务、慢请求，线程池满等场景。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;详细分级标准细则参考健康分的约束，0级报警共计2款，1级报警共计12款：健康分-监控/报警分规则&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6504425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bAjibIwTj42icO1obuhYjbRg8MMXxzn7iaf9ou3g6TYiakA4jVZlBeQf0Pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;452&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图6 报警等级&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）报警完备度度量机制&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;报警规则覆盖完备度，是应用建设完善的监控体系，需要首先关注的点，因为你只有覆盖的报警场景足够全面，才能够提前发现更多的隐患。在前文元信息标准化度量的功能，标注报警场景，即可具备度量能力。&lt;/p&gt;&lt;p&gt;通过Top健康分技术运营活动，我们也梳理出来了，能够符合绝大多数应用的监控范式：这也能够回答一系列的灵魂拷问，什么时候应该加监控？日志需要怎么记？应用监控应该注意什么？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;报警场景如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5203252&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26b4Dm32HYwpGGBD0k0QTD7xTvCv8ib1Z4GMVf35skvxNl5vTIDM9myw8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;615&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图7 必选报警场景&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.603928&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26b81IC1iaricD6Vib5rd57jY1a3aV1SnPaR7znScTS0v6nczge5EemhTAaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;611&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图8 可选报警场景&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、报警订阅（事中）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;报警的触达，并不是只有我给用户发短信、发邮件、发企微、发机器人消息，关键在于怎么合理的使用上述触达方式，避免漏报问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）统一报警接收人&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;提供的资源监控统一串联编排逻辑，以根治漏报。由于公司的监控体系众多，公司范围内发给研发的报警有8个以上（日后还有可能继续增加）的监控报警能力提供方，如果有多套报警接收主体或者如果有人员的入离调转，或者组织结构调整。这些都会产生潜在的漏报问题，实际生产过程中2021年上半年也出现过此类问题导致的故障。这里通过服务视角的应用监控|日志监控(hawk、metric-dog-dog、fast、ketrace)、服务关联的基础设施（Redis、MySQL）监控|报警体系，建立：应用、人、组织、资源的监控|报警关联关系，来系统性的解决这样的问题。编排逻辑，如图4所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.537963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bUkuk4ezfkSDvjuUCKrhb0ZHOXqib1MH8I9AvGDibUoUuUlZ19uYNLxdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图9 统一报警接收人编排机制&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;关于服务和实际的维护人员的组织关系的映射的长效治理机制，我们在健康分规则机制进行约束，考察一个服务的报警接收人，必须包含当&amp;gt;=2个当前部门的研发人员。这样即可保障，不会出现最低级报警人员的遗漏的问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;承接这一数据能力的系统，由私有云以及服务云来完成，如图8所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4311718&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bSibkvndGUOKKHpJFqS9KDPnDEkgibA04gSytG530Sa4cvuw31l3JFGHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;879&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图10 应用视角报警接收人&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）统一报警触达方式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;报警规则覆盖面不齐，同时设计的足够灵敏之后，带来的一个问题就是报警量过多，在触达通道中如果都混在一起，很难保证能够看完每一条报警，这往往会导致报警漏报；同时，报警平台多还会伴随而来的问题，就是报警触达应用号多（10个以上），这也会导致大家难以兼顾看每一个号，这就又产生了漏报。因此在触达方式层面，有分级应用号、报警机制人两种新机制来收口触达，避免漏报。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.1）触达应用号分级&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;针对第一个问题，主要通过设定不同等级的报警，不同等级的报警发送到不同应用号，这样报警的组织是按照重要性来划分，不是按照报警类型来划分，这样即可减少用户的理解成本。大家日常仅需要把主要精力投入在最关键的报警应用号，对于非关键的报警应用号，可以采取定期筛查的方式来进行处理。图9、图10、图11是分级报警应用号的截图示意：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1829268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bOy4jCIKEAl9cuibSKo9iaWbQ5gHRjb3ibOAT1FpIPwkOG6QNRL5JpSMZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;328&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1891892&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bKs1fL9JWYc0LTCGLJIgVgwAosKshruPia4TVzicQcUZslkhuGgPOZpvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;333&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1993865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26b4icic6L6wOGsC8S5Sm50bZA9D9icUMmNK6EVwJBYXBoJOq99N1uIEMRAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;326&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图11  分级报警应用号&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.2）报警机器人提醒&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;机器人提醒的机制，最核心的价值是，机器人所在的群，在组织结构上对齐了生产过程中物理组织——研发小组（5～20人）、部门（20～50人）、业务线（50～100人）；同时形成了从总监、经理、一线员工的报警管理互相监督的管理动作，是一种精细化触达的机制，研发同学如图12所示配置完成开启哪些种类的报警之后，在报警触发之后即可出现如图13所示的机器人消息提醒。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5352324&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bT8AMV9MJk0GLzlYcmzx2JROxqib26BDyMhCzt6c5ksUm5ibUaSGJ2ZHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;667&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图12 报警机器人提醒配置&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5913313&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26b7poY1L6BLKiaIIYKdE2ichK7QZcdDDhMXJBdib9SLBJvDMFJEvsuIhgmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;646&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图13报警机器人提醒文案&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;机器人消息提醒机制，不仅只是简单的增加一种触达方式，而且还增加了@人跟进报警、处理误报、填写报警解决纪要、定位问题的快捷入口、解决问题的快捷入口等智能提醒机制，这些机制会在下文详细介绍。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）报警值班&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;报警联动值班机制，也是降低漏报问题的一种最佳实践，同时也能够提高跟进效率。&lt;/p&gt;&lt;p&gt;有了值班机制之后，每天都有专人来跟进稳定性保障。在报警响应方面，该同学会第一时间响应报警，确保报警第一时间有人相应。这样的机制，除了保证报警不会遗漏之外，还能够更高效利用研发资源，不至于研发同学都同时跟进报警，造成不必要的浪费。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2305732&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bEfvib36dq1tu6jfYsqlvY5INNLlATVzGkPkUw3aNdO6WUZOOcaqbodA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;785&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图14 关联keOnes值班表&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6860465&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bGuaoTZEgbyUw9HBlaw8pPIAFiboVHRjvXfY7nCt45lb1RvNiahj5wh9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图15 报警联动值班&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、报警响应（事中）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;事中阶段，最重要的是针对已经发生的报警，第一时间进行响应，并且将处理结论进行及时同步，对应如下几种情况：&lt;/p&gt;&lt;p&gt;1、如果是问题需要立即进行解决&lt;/p&gt;&lt;p&gt;2、如果是误报或者报警阈值设计不合理，则需要及时调整下线报警规则，或者调整阈值，或者进行消息免打扰操作&lt;/p&gt;&lt;p&gt;3、如果报警是合理的，但是影响十分轻微，只是一般性的提醒，则需要对报警级别进行调整修正，修正成2级报警&lt;/p&gt;&lt;p&gt;4、如果是正在处理中的报警，预计需要处理一段时间，期间会持续产生报警，则无需过多的占用大家的关注度，可以设置临时性的设置报警屏蔽，做消息免打扰操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;strong&gt;报警跟进&lt;/strong&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这一系列机制，都通过绑定了精确的研发部门的报警机器人来承载此项能力，下面是报警跟进的流程详细操作步骤，供大家参考：&lt;/p&gt;&lt;p&gt;（1）报警发生时，会通过appId找到对应的企微机器人发送消息，发送如下消息，表明报警类型、内容、@人（值班人、服务负责人按优先顺序决定）&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1647727&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bqkbRDub0ictwRz7C5nTY7GrjoWsiamm0ic4mC2PIalm4tMkFhCQa1JibnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;352&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图16 机器人提醒【我来跟进】&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（2）消息中可点击【我来跟进】按钮（请在当天内点击，过了当天点击无效），点下即进行了跟进（默认为当天以来到未来5分钟的当前标题都会自动跟进），在弹出的页面可以修改上述默认值（其他标题、未来时间段）。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3723176&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26b1lZGEqywCFqo3dOSvygM2eBuWP12Y0vKuibTaPpdK5LAfE1AZIoEWnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;932&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图17 填写跟进明细&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（3）同时机器人会立即发送如下消息，让群内周知跟进情况：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5181058&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bn1JL7ZfmZoThCK60lHMPvjQ700icKZ59rbZXicYrgMd1mv6ZPrwqXDCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;359&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图18 报警已跟进消息通知&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（4）被跟进范围涵盖的新来的报警（follow步骤2中的跟进时效），会显示这样的样式，说明无需再跟进：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4197183&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bJswHFL59XMQJ2xTsSAicUiblMTA0P9kX3sTicJMuO1LxZ44bHP6oGIaibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;355&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图19 已经跟进报警再次触发&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（5）如果在步骤（1）中点击的是【误报】，则会对该次报警标记成无效类型，同时可进行消息【免打扰】，临时或者永久屏蔽该报警。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bF8BW3iacsGk09cso83o9SxRuickicfCYURhotibx9FcnbvG4sXCDmHSONg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图20 标注无效报警&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（6）报警解决&lt;/p&gt;&lt;p&gt;从上述报警跟进通知的企微消息（步骤3）“填写处理结论”可以进入报警历史页面。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在该appId的报警历史中，按照报警类型+报警标题+是否已处理 聚合展示条目&lt;/p&gt;&lt;p&gt;可判断哪几类报警是同一件事情、同一个原因、同一种解决方案，可以勾选上，点击“批量处理”，从而创建了一个处理，关联上了多个报警&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bXLibogRojE9QRPHvruS618G3dtpG78jTKTAH6cbnCticiaKric4QiaEk9aA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图21 批量处理报警&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;创建的当时可填写结论：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6796117&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26b3ZwCrJGV8CfNo2krOs6Mo9od5umzBRq1qb1B2EAJKkkMt24Pt82Kpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;515&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图22 填写处理结论&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;结论目前有这么几种可选，能够描述大家碰到的绝大部分情况：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;待排查 &lt;/strong&gt;：还待排查定位原因&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;报警不合理 &lt;/strong&gt;：正常现象，报警阈值或口径不合理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;外部故障&lt;/strong&gt; ：本部门范围外的已知原因的故障、事件引起的联动报警，外部恢复之后自动恢复。无需处理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;计划内&lt;/strong&gt; ：计划内操作引起的（例如压测），无需处理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;即将下线 &lt;/strong&gt;：即将下线，暂不处理。此时建议填写计划解决时间&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;无影响 &lt;/strong&gt;：已知原因，无影响，暂不处理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;未排期&lt;/strong&gt; ：已知原因，应该生产变更，还未有排期或技术方案不明&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;已有排期&lt;/strong&gt; ：已知原因，应该生产变更，已有排期，还未开发完成或上线。此时建议填写计划解决时间&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;已处理 &lt;/strong&gt;：已通过生产变更解决&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;填写结论并且提交之后，企微机器人会发送通知：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6657224&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bOujYK0EtwxNx8Pb6O7niajIMCtohJia7NE7talbaI3YRurCsicCU7WRJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;353&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图23 报警已解决群提醒&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）多级onCall机制&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;多级onCall机制主要针对最重要的报警，这类要保持足够的关注度，是保证最核心的报警不会发生漏报的“核武器”，如未能保证在规定的时效内跟进动作的完成，则开始通过精细化的按照组织结构层级进行逐级电话通知，第一级oncall通知【值班人】/【服务owner】，第二级通知经理，第三级通知总监，每一级默认3分钟。通过这样的机制，即可保证从一线研发再到以上的研发组长、研发经理、研发总监以及各稳定性保障角色，均能够第一时间知晓潜在，保持信息通畅。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）报警屏蔽&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;报警屏蔽，主要解决的问题是治理无效报警、减少误报，或者用于减小报警信息对于研发的不必要打扰。报警屏蔽，业务层面适用于临时的屏蔽掉由于某些原因，临时不收报警机器人群提醒或者报警消息（定点给某个人发送的，短信、邮件、企微应用消息、回调等），典型案例如下所示&lt;/p&gt;&lt;p&gt;1、某台机器下线，先临时屏蔽这个报警，避免轰炸&lt;/p&gt;&lt;p&gt;   如：企业微信和短信收到报警，只想屏蔽该服务这条类型的报警 5分钟&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bxN2ry0rdt4SeNcuiaQTTLqCEgIdRQutSsCeg9AwTu2TFXptrDb5zWlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图24 临时屏蔽报警&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2、由于某些原因，某些发送到群内的消息提醒，如：业务报警、或者提醒类型的报警，无需转发到大群&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3、某些通用型的报警规则，由于业务特点，不适用该应用的所有的应用场景。比如：GC STW时长的报警、或者kafka消费积压超过2000报警&lt;/p&gt;&lt;p&gt;   如：服务操作的传统机器“停服”，之后越来越多项目上云后应该会有同样操作。这应该是预期内的正常停服下线，不用报警，所有相关的通用报警信息全部屏蔽&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5712963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bf2Zx4mFBlu1MhIq5dmoO0ZSMDY6Qbw3bo76SZwlub6OECEK13AtC7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图25 字段屏蔽报警&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4、上线过程中，比如：KeMonitor上面有个checkServicePort的检测，默认是3分钟，我们有的服务起来要大于3分钟，导致就会在监控群里误报，可以进行字段粒度的屏蔽。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）报警自愈&lt;/p&gt;&lt;p&gt;如果报警期间，已经出现了故障，此时最重要的举措就是执行预案，做止损/恢复的动作。绝大多数情况，一个系统的常见的止损/恢复动作，都是固定的，有固定的操作步骤，如：重启、摘流、熔断、开关等；同时，一般情况也能够从一些报警能够反映出来，如系统依赖下游长时间响应慢，这种需要执行降级。在报警文案内叠加上止损恢复的快捷入口，能够大幅减少上下文切换（浏览器输入地址切换专有止损/恢复系统）的时间，从而达到提效的效果。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8108108&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26biaNwjX0RpZUhNQh64V29ficRNicFiajcuCJD3NWktKD064PxFpN54ZqTxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;407&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图26 报警自愈快捷入口&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、报警复盘（事后）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;事后阶段，主要是用来系统性的分析，一个长跨度时间范围的报警以及解决情况，分析系统瓶颈点，这里就需要在报警解决环节，填写完备的原因以及举措，详细如图26所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4166667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bvIwW4JOcUk5Wl1UTPvYDGHLdp97jUQZQQyrGFhFfxMetjicqM00XeGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图27 报警解决纪要&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、自助化接入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;报警中心面向监控/报警能力提供方（如：DBA、SRE等基础服务提供方等角色），还提供了报警规则等的一键导入、报警消息触达的一站式联调能力。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5722222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rcon9f6LyEtKSZWeTlrHGCicXhrxNQ26bwCyghqraIKk76LfSv3IicHKNT3gicjVMFrMsiaz5EmDttRgJdqGSevGUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图28 报警自助化接入&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在接入平台化改造之前，需要一人周时间的报警规则列表、报警触达的对接集成，目前最快仅需要10分钟即可完成自助化接入。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过对于报警的系统性治理，沉淀而来的报警中心，系统性解决的治理漏报、治理误报/报警风暴等问题，同时提升了报警响应、止损恢复、定位问题等环节的效率。下面三点，是最具贝壳特色的几点举措。&lt;/p&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;统一报警接收人，建立了以应用为中心的应用——资源——组织/人的关联报警，可以有效避免漏报&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;报警机器人，贯穿事中阶段全流程报警SOP机制，同时以管理的视角来对报警进行标准化处理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;报警套餐环节，针对常见的基础设施、中间件、应用内SDK组件最容易出问题的场景，给出了默认的报警策略，能有有效减轻业务同学建设监控稳定性的复杂度。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;KeMonitor平台的下一步建设重点就在于进一步提升平台体验体验。在报警报警套餐的基础之上，进一步对监控指标进行模版化、”傻瓜化“的治理，会基于贝壳技术体系的基础设施以及技术栈进一步细化梳理指标口径定义、指标释义、报警阈值设定建议、定位问题、快速止损恢复专家建议，以及增加模版化配置能力，形成完备监控指标集市，便于用户更方便获取全面的监控能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.44533333333333336&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Rcon9f6LyEtnuNrHVVOILKpt8FhmlfzgLrBGIvxlEYWR60LLyciayjG8DNIzcu5G9UxZzvFf6VAu8BxPicIdbcYg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1875&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1692e0935152c2bb3aab490fbb17ed77</guid>
<title>B站基于Iceberg的湖仓一体架构实践</title>
<link>https://toutiao.io/k/cfss22w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwNzE5NDM5Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/fp3oqPBibTAe2zagKvDricd3IMWC9fqQBKtDjjXJCHsgWQ8HuO7TUicEnveY3VsDYiajUiaACY0DPqfsia9RP8ypdWcQ/0?wx_fmt=png&quot; data-nickname=&quot;BAT大数据架构&quot; data-alias=&quot;&quot; data-signature=&quot;专注大数据、数据仓库、数据分析、数据科学，Hadoop、Spark、Flink、ClickHouse，BAT大厂技术与架构，还有我们的故事。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;背景&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;在B站，每天都有PB级的数据注入到大数据平台，经过离线或实时的ETL建模后，提供给下游的分析、推荐及预测等场景使用。面对如此大规模的数据，如何高效低成本地满足下游数据的分析需求，一直是我们重点的工作方向。&lt;/section&gt;&lt;section&gt;我们之前的数据处理流程基本上是这样的：采集端将客户端埋点、服务端埋点、日志、业务数据库等数据收集到HDFS、Kafka等存储系统中，然后通过Hive、Spark、Flink等离线和实时引擎对数据进行ETL处理及数仓建模，数据存储使用ORC列式存储格式，用户可以通过Presto、Spark等引擎对数仓建模后的数据进行数据探索以及构建BI报表。对于大部分的数据服务和部分BI报表，Presto、Spark访问ORC格式数据可能无法满足用户对于查询响应时间的要求，这时需要将数据写入ClickHouse等这种专门的OLAP引擎或者进一步处理数据后写入HBase、Redis等KV存储系统中等方式解决。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3834355828220859&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Zp5qolPqxIzo4SUB1oJ0Q48rewBCia6AapdjBsU5iaicdgyBan6wHB52wml46yhvopGIOA0fGFWVVViapCfbypDq9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1956&quot;/&gt;&lt;/p&gt;&lt;section&gt;当前的数据处理流程虽然在一定程度上可以满足目前的业务需求，但是整个流程的效率和成本都还有很大的提升空间，主要体现在：&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;为了提升查询效率，从Hive表出仓到ClickHouse、HBase、Redis、ElasticSearch、Mysql等外部系统中，需要额外的数据开发工作，额外的存储冗余，但同时拥有了更少的数据灵活性，复杂的组件支持增加了数据服务开发的成本，更长的数据处理流程也降低了稳定性和可靠性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于未出仓的数据，用户无论是进行数据探索还是使用BI报表，都还受SQL on Hadoop本身性能所限，和用户期望的交互式响应有很大差距。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;本文主要介绍为了应对以上挑战，我们在湖仓一体方向上的一些探索和实践。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;为什么需要湖仓一体&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在讨论这个问题前，我们可能首先要明确两个概念：什么是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;数据湖&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;？什么是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据仓库&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;？这两个概念在业界都有大量的讨论，每个人的说法也不尽相同，我们尝试总结如下，对于&lt;/span&gt;&lt;strong&gt;&lt;span&gt;数据湖&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;使用统一的分布式存储系统，可假设为无限容量。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有统一的元数据管理系统。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用开放的数据存储格式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用开放的数据处理引擎对数据进行加工和分析。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;我们之前的大数据架构基本上是一个典型的数据湖架构，使用HDFS作为统一的存储系统，Hive metastore提供统一的Schema元数据管理，数据以CSV、JSON、&lt;span&gt;ORC等开放存储格式存储在HDFS上，用户可以使用SQL、DataSet、FileSystem等各个层次的API使用Hive、Spark、Presto、Python等框架或语言访问数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;数据湖架构的好处是有非常大的灵活性，结构化、半结构化、非结构化数据都可以放在数据湖中，用户可以使用任意合适的引擎对所有的数据进行灵活的数据探索，几乎没有任何限制，但是它也存在很大的缺陷，最主要的就是数据管理和查询效率的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;对于&lt;strong&gt;&lt;span&gt;数据仓库&lt;/span&gt;&lt;/strong&gt;：&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;自定义的数据存储格式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自己管理数据的组织方式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;强Schema数据，对外提供标准的SQL接口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;具有高效的计算存储一体设计和丰富的查询加速特性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;数据仓库（OLAP引擎）对于数据的要求相对更加严格，以ClickHouse为例，必须是预先定义的强Schema数据通过JDBC写入ClickHouse中，ClickHouse使用自己的存储格式存储数据，并且会对数据文件进行排序或者文件合并之类的数据组织优化，对外提供SQL接口，不会暴露内部的数据文件，提供索引等高级的查询加速特性，内部的计算引擎和存储格式也会有很多的一体协同优化，一般认为专门的数据仓库查询效率会优于数据湖架构，在B站的实践上，大部分场景，像ClickHouse对比Spark、Presto也确实有量级上的性能提升。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.35917901938426455&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Zp5qolPqxIzo4SUB1oJ0Q48rewBCia6AaQd9NBOwrFpFE0kcampWzrB9SM9gkvDf8Tchw5o0Okuk8bKuCSAvAiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/p&gt;&lt;section&gt;在我们实际的数据处理场景中，除了AI和数据探索等场景，探索未知数据的未知问题，比较依赖数据湖架构的灵活性，其实大部分的场景是基于已知数据的，即我们的数据开发同学，实际上是基于Hive表的强Schema数据，进行从ODS，DWD，DWB到ADS等各个业务数仓的分层建设，本质上我们是主要是基于数据湖的架构进行业务数仓的建设，如何提升这部分场景的查询效率，使用成本和用户体验是我们在这方面工作的核心内容。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;湖仓一体是近两年大数据一个非常热门的方向，如何在同一套技术架构上同时保持湖的灵活性和仓的高效性是其中的关键。常见的是两条技术路线：一条是从分布式数仓向湖仓一体演进，在分布式数仓中支持CSV、JSON、ORC、PARQUET等开放存储格式，将数据的处理流程从ETL转换为ELT，数据注入到分布式数仓后，在分布式数仓中进行业务数仓的建模工作，比如AWS RedShift及SnowFlake等；另外一条是从数据湖向湖仓一体演进，基于开放的查询引擎和新引入的开放表存储格式达到分布式数仓的处理效率，这方面闭源商业产品的代表是DataBricks SQL，他们基于兼容Spark API的闭源Photon内核和DeltaLake存储格式以及S3对象存储的湖仓一体架构，宣称在TPC-DS Benchmark上性能超过专门的云数据仓库SnowFlake。在开源社区领域，Iceberg、Hudi、DeltaLake等项目的出现也为在SQL on Hadoop的数据湖技术方案上实现湖仓一体提供了基础的技术储备。在B站，基于我们之前的技术栈和实际的业务场景，我们选择了第二个方向，从数据湖架构向湖仓一体演进。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;B站的湖仓一体架构&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;对于B站的湖仓一体架构，我们想要解决的问题主要有两个：一是鉴于从Hive表出仓到外部系统（ClickHouse、HBase、ES等）带来的复杂性和存储开发等额外代价，尽量减少这种场景出仓的必要性。二是对于基于SQL on Hadoop的分析查询场景，提升查询效率，降低成本。我们基于Iceberg构建了我们的湖仓一体架构，在具体介绍B站的湖仓一体架构之前，我觉得有必要先讨论清楚两个问题，为什么Iceberg可以构建湖仓一体架构，以及我们为什么选择Iceberg？&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1. 为什么基于Iceberg可以构建湖仓一体架构？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;对比开放的SQL引擎、存储格式如：Presto、Spark、ORC、Parquet和分布式数仓如：ClickHouse、SnowFlake对应层的实现，其实差别不大，开源分布式引擎一直在逐渐补足SQL Runtime和存储层的一些影响性能的高级特性，比如Runtime CodeGen，向量化执行引擎，基于statistic的CBO，索引等等，当前两者最大的一个不同在于对于数据组织的管理能力。对于数据湖架构来说，数据文件在HDFS的分布组织是由写入任务决定的，而对于分布式数仓来说，数据一般是通过JDBC写入，数据的存储组织方式是由数仓本身决定的，所以数仓可以按照对于查询更加友好的方式组织数据的存储，比如对数据文件定期compact到合适的大小或者对数据进行合理排序和分组，对于大规模的数据来说，数据的优化组织可以大大提高查询的效率。Iceberg、Hudi、DeltaLake等新的表存储格式的出现，最主要的特性就是可以在HDFS上自组织管理表的metadata信息，从而提供了表数据的Snapshot及粗粒度的事务支持能力，基于此，我们可以在开放的查询引擎之外，异步地，透明地对Iceberg、Hudi、DeltaLake格式的数据进行重新的数据组织优化，从而达到了分布式数仓类似的效果。&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2. 为什么选择Iceberg？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;Iceberg、Hudi以及DeltaLake是基本同时期出现的开源表存储格式项目，整体的功能和定位也是基本相同，网上已经有很多相关对比介绍的文章，这里就不详细比较了，我们选择Iceberg的主要原因是：Iceberg在三个里面是表存储格式抽象的最好的，包括读写引擎、Table Schema、文件存储格式都是pluggable的，我们可以进行比较灵活的扩展，并保证和开源以及之前版本的兼容性，基于此我们也比较看好该项目的长远发展。&lt;/section&gt;&lt;section&gt;下图是我们整体的湖仓一体架构，支持开放的Spark、Flink等引擎从Kafka、HDFS接入数据，然后Magnus服务会异步地拉起Spark任务对Iceberg数据进行重新的存储组织优化，我们主要是用Trino作为查询引擎，并引入Alluxio做Iceberg的元数据和索引数据的缓存加速。&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4533333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Zp5qolPqxIzo4SUB1oJ0Q48rewBCia6AaDzLHPtBzOMduVdHEI9DowC3pOEHkLyOrUdJ8ONJegJUJUdVPtBcsicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2400&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Magnus：Iceberg智能管理服务&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;Magnus是我们湖仓一体架构的核心组件，它负责管理优化所有的Iceberg表中的数据。Iceberg本身是一个表存储格式，虽然其项目本身提供了基于Spark、Flink等用于合并小文件，合并metadata文件或者清理过期Snapshot数据等Action Job，但是要依赖外部服务调度这些Action Job，而Magnus正是承担这个角色。我们对Iceberg进行了扩展，当Iceberg表发生更新的时候，会发送一个event信息到Magnus服务中，Magnus服务维护一个队列用于保存这些commit event信息，同时Magnus内部的Scheduler调度器会持续消费event队列，并根据对应Iceberg表的元数据信息及相关的策略决定是否及如何拉起Spark任务优化Iceberg表的数据组织。&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4813519813519814&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Zp5qolPqxIzo4SUB1oJ0Q48rewBCia6Aae1joMxLarxXyZ4807ljVicbwLOukUqU9jjsxjIMpicPdbybdhQciakIZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1716&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;strong&gt;Iceberg内核增强&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;对于丰富的多维分析场景，我们也有针对性的在Iceberg内核和其他方面进行了定制化增强，这里简要介绍两个方面：Z-Order排序和索引。&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Z-Order排序&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;Iceberg在表的metadata中记录了文件级别每个列的MinMax信息，并且支持小文件合并以及全局Linear排序(即Order By)，这两者配合起来，我们可以在很多查询场景实现非常好的DataSkiping效果，比如我们对于某个Iceberg表的数据文件按照字段a进行全局排序后，如果后续查询带有a的过滤条件，查询引擎会通过PredictePushDown把过滤条件下推到文件访问层，我们就可以根据MinMax索引把所有不需要的文件直接跳过，只访问数据所在的文件即可。&lt;/section&gt;&lt;section&gt;在多维分析的实际场景中，一般都会有多个常用的过滤字段，Linear Order只对靠前字段有较好的Data Skip效果，通常会采用将低基数字段作为靠前的排序字段，从而才能保证对于后面的排序字段在过滤时也有一定的Data Skipping效果，但这无法从根本上解决问题，需要引入一种新的排序机制，使得多个常用的过滤字段均能够获得比较好的Data Skipping效果。&lt;/section&gt;&lt;section&gt;Interleaved Order(即Z-Order)是在图像处理以及数仓中使用的一种排序方式，Z-ORDER曲线可以以一条无限长的一维曲线，穿过任意维度的所有空间，对于一条数据的多个排序字段，可以看作是数据的多个维度，多维数据本身是没有天然的顺序的，但是Z-Order通过一定规则将多维数据映射到一维数据上，构建z-value，从而可以基于一维数据进行排序，此外Z-Order的映射规则保证了按照一维数据排序后的数据同时根据多个排序字段聚集。&lt;/section&gt;&lt;section&gt;参考wikipedia中的Z-Order介绍，可以通过对两个数据比特位的交错填充来构建z-value，如下图所示，对于(x, y)两维数据，数据值 0 ≤ x ≤ 7, 0 ≤ y ≤ 7，构建的z-values以及z-order顺序如下：&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.985&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Zp5qolPqxIzo4SUB1oJ0Q48rewBCia6AaFGeKgUodnOQkiaFrUt1cfGknEEIBXw4OlBz7nu2nWC8q2stiaxVZbbsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;可以看到，如果根据z-values的顺序对数据进行排序，并平均分为4个文件，无论我们在查询中使用x还是y字段过滤进行点查询，都可以skip一半的不相干文件，如果数据量更大，效果会更好，也就是说，基于Z-Order分区存储的文件，可以在多个字段上拥有比较好的Data Skipping效果。我们对Spark进行了增强，支持Z-Order Range Partitioner用于对Iceberg数据进行文件间的排序组织，扩展了Iceberg表的元信息，用户可以自定义期望的Iceberg表的Distribution信息，支持按照Hash、Range、Z-Order等方式进行文件间数据排序，以及对应的OptimizeAction用于拉起Spark任务，按照用户定义的Distribution信息对Iceberg表进行重组织。具体详情可查询参考文献[1]（&lt;span&gt;通过数据组织加速大规模数据分析&lt;/span&gt;）。&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;索引&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;Iceberg默认存储文件级别每列的Min、Max信息，并用于TableScan阶段的文件过滤，基本等价于分布式数仓中的MinMax索引，MinMax索引对于排序后的字段DataSkipping效果很好，但是对于非排序字段，数据随机散布于各个文件，使用该字段过滤时，MinMax索引基本很难有文件Skip的效果，BloomFilter索引在这种场景下可以更好地发挥作用，尤其是当字段基数较大的时候。布隆过滤器实际上是一个很长的二进制向量和多个Hash函数，数据通过多个函数映射到二进制向量的比特位上，布隆过滤器的空间效率和查询时间都非常高效，非常适合用于检索一个元素是否存在于一个集合中。&lt;/section&gt;&lt;section&gt;布隆过滤器的空间效率和查询时间都非常高效，但是在使用上也有局限之处，主要是它能够支持的过滤条件是有限的，只适用于：=、IN、NotNull等等值表达式，对于常见的Range过滤，比如&amp;gt;、&amp;gt;=、&amp;lt;、&amp;lt;=等是不支持的。为了支持更丰富的过滤表达式，我们引入了BitMap索引。BitMap也是一个非常常见的数据结构，将一组正整形数据映射到比特位，相比于BloomFilter，不存在Hash冲突的情况，所以不会出现False-Positive，但是一般需要更多的存储空间。对于高基数字段的BitMap索引，落地实现主要的问题在于：&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;需要存储字段基数对应个BitMap，存储代价太大。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在Range过滤时，使用BitMap判断是否可以Skip文件时，需要访问大量BitMap，读取代价太大。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;为了解决以上问题，我们引入了Bit-sliced Encoded Bitmap实现。具体详情可查询参考文献[2]（&lt;span&gt;通过索引加速湖仓一体分析&lt;/span&gt;）。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;在B站的落地&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;基于Iceberg的湖仓一体方案在B站的数据分析场景正逐渐落地，我们目前已经支撑PB级的数据量，每天响应几万个查询，其中P90的查询可以在1s内响应，满足了多个运营分析数据服务交互式分析的需求。接下来，我们希望能够将湖仓一体架构作为我们OLAP数仓建模的基础，统一大部分的业务数仓分析层数据的存储和查询，简化技术架构，提升查询效率，节省资源成本。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;总结和展望&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;相比于传统的SQL on Hadoop技术栈，基于Iceberg的湖仓一体架构，在保证了和已有Hadoop技术栈的兼容性情况下，提供了接近分布式数仓的分析效率，兼顾了湖的灵活性和仓的高效性，从我们落地实践的经验看，对于用户基本透明，只是一种新的Hive表存储格式，没有更多使用和认知的门槛，和已有的大数据平台工具和服务也能非常小代价地集成。为了进一步提高在不同场景的查询效率和使用体验，我们还在以下方向对Iceberg进行进一步的增强：&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;星型模型的数据分布组织，支持按照维度表字段对事实表数据进行排序组织和索引。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;预计算，通过预计算对固定查询模式进行加速。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;智能化，自动采集用户查询历史，分析查询模式，自适应调整数据的排序组织和索引等。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;后续的进展我们会持续更新，欢迎感兴趣的小伙伴来和我们一起交流沟通。&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;了解更多湖仓一体的内容，欢迎点击阅读：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwNzE5NDM5Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/fp3oqPBibTAe2zagKvDricd3IMWC9fqQBKtDjjXJCHsgWQ8HuO7TUicEnveY3VsDYiajUiaACY0DPqfsia9RP8ypdWcQ/0?wx_fmt=png&quot; data-nickname=&quot;BAT大数据架构&quot; data-alias=&quot;&quot; data-signature=&quot;专注大数据、数据仓库、数据分析、数据科学，Hadoop、Spark、Flink、ClickHouse，BAT大厂技术与架构，还有我们的故事。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&amp;lt;END&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;大家都在看：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-recommend-type=&quot;list-title&quot; data-recommend-tid=&quot;6&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;往期推荐&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487317_1&quot; data-recommend-article-time=&quot;1644190620&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAcHCPKaJx9ARt0ngx214AwVesmpmfZLtvLqneXqYtnNJk0gv4xtyt64f7mLKicYuQYria9vhUibw79ng/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;详解数据仓库分层架构&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487317&amp;amp;idx=1&amp;amp;sn=6250f312bb68fb7357d8b38553787927&amp;amp;chksm=c0ddb627f7aa3f318605b9532665de31ea3a59867505120b13cb37da3839f12d49e2883bc6d7#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487317&amp;amp;idx=1&amp;amp;sn=6250f312bb68fb7357d8b38553787927&amp;amp;chksm=c0ddb627f7aa3f318605b9532665de31ea3a59867505120b13cb37da3839f12d49e2883bc6d7&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;详解数据仓库分层架构&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487278_1&quot; data-recommend-article-time=&quot;1643240220&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAdrGFzpq4Bxuh9uia2ay7Jziaicj3Y71gAibwvyNUlwicu3NicG6YibYOGbJVLPZoIfCvxlhxx6h6MkC1RVg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;电商行业业务指标体系&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487278&amp;amp;idx=1&amp;amp;sn=47aeb2d1e650d870ef9014c9c21f23d0&amp;amp;chksm=c0ddb65cf7aa3f4ad525807dae0ef59d6591de073570bb0e6c7746af47b623d0866fc281eca6#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487278&amp;amp;idx=1&amp;amp;sn=47aeb2d1e650d870ef9014c9c21f23d0&amp;amp;chksm=c0ddb65cf7aa3f4ad525807dae0ef59d6591de073570bb0e6c7746af47b623d0866fc281eca6&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;电商行业业务指标体系&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487246_1&quot; data-recommend-article-time=&quot;1643067420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAdrGFzpq4Bxuh9uia2ay7Jzia1uqXnrmtLZjuAuHTwCU6KjWO7WHtIAVxTpLnskOtEB6EP5kv8smmkw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数据分析知识图谱&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487246&amp;amp;idx=1&amp;amp;sn=32572625f8d11855d884af209ae4d92f&amp;amp;chksm=c0ddb67cf7aa3f6a624ef81c2d627ac72e1213a15be7de1af0392ca14bf5aa4b8369386faa6e#rd&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487246&amp;amp;idx=1&amp;amp;sn=32572625f8d11855d884af209ae4d92f&amp;amp;chksm=c0ddb67cf7aa3f6a624ef81c2d627ac72e1213a15be7de1af0392ca14bf5aa4b8369386faa6e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;数据分析知识图谱&lt;/a&gt;导图&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487385_1&quot; data-recommend-article-time=&quot;1645054620&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAcs54tPNEgtBSYv5r5wnmAs9kx5Jk3hIwicfYYPYIGg2kvtrvw49YTPACkMIM6FjlnqqibOOp0UZptg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;元数据管理&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487385&amp;amp;idx=1&amp;amp;sn=6f9d088ef0be7b930761c01a0466afeb&amp;amp;chksm=c0ddb6ebf7aa3ffd66d0cb467323205932b48498d071bab85e213ff20a071fbf6569670df5b1#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487385&amp;amp;idx=1&amp;amp;sn=6f9d088ef0be7b930761c01a0466afeb&amp;amp;chksm=c0ddb6ebf7aa3ffd66d0cb467323205932b48498d071bab85e213ff20a071fbf6569670df5b1&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;数据服务之元数据管理&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487375_1&quot; data-recommend-article-time=&quot;1644881820&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAdV3WcUENfmXOSms2gEBt4xwFXDWKt06WTTy9ia69lIKn3WZNxAqcWicXOtg98fVw191xmHldibHk31A/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;指标管理与元数据管理平台&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487375&amp;amp;idx=1&amp;amp;sn=5dcd4ee7f208f1a40a5751a164ba7e36&amp;amp;chksm=c0ddb6fdf7aa3feb82f966d48c589b79dedf400e084dcf01cfa025daae9f3c8e21e5e9fd2e74#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487375&amp;amp;idx=1&amp;amp;sn=5dcd4ee7f208f1a40a5751a164ba7e36&amp;amp;chksm=c0ddb6fdf7aa3feb82f966d48c589b79dedf400e084dcf01cfa025daae9f3c8e21e5e9fd2e74&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;指标与元数据管理平台&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487112_1&quot; data-recommend-article-time=&quot;1641944220&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfwIrlZgvaJeBmDiaa3icEib3zmoh2RyMyWsyaKianSbu6UYzh8wtkv7vz2WmpmRP2cfjribEgBY56SfEg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;实时数仓项目架构分层&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487112&amp;amp;idx=1&amp;amp;sn=d57ffbe52e59ce585a154215d209e0ee&amp;amp;chksm=c0ddb7faf7aa3eec9a76cb43e7557331a1539cd9540f7212c6006bca71b70f4d4a2c4689b176#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487112&amp;amp;idx=1&amp;amp;sn=d57ffbe52e59ce585a154215d209e0ee&amp;amp;chksm=c0ddb7faf7aa3eec9a76cb43e7557331a1539cd9540f7212c6006bca71b70f4d4a2c4689b176&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;实时数仓项目架构分层&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487111_1&quot; data-recommend-article-time=&quot;1641857820&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfwIrlZgvaJeBmDiaa3icEib3zLBYTcbc1HzmTabiafGiay0t3Tdibiat6MXFQAwmI06GTShbQdgZricf7SEw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;贝壳数据治理中台实践&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487111&amp;amp;idx=1&amp;amp;sn=ed6dc95085559bc702cbf496feef38e1&amp;amp;chksm=c0ddb7f5f7aa3ee33b7b3251dc39eb22a5ea660626367b268ce11ff3acf945766506268ce453#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487111&amp;amp;idx=1&amp;amp;sn=ed6dc95085559bc702cbf496feef38e1&amp;amp;chksm=c0ddb7f5f7aa3ee33b7b3251dc39eb22a5ea660626367b268ce11ff3acf945766506268ce453&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;贝壳数据治理中台实践&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247486776_1&quot; data-recommend-article-time=&quot;1640648220&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/nhlGsolibOWGPX7xbvJ7vXAB6kZfaKBjHfhB51VbKBIE7GIPzs9exoSPksSrBUDjtHel4X9dSRbmFicopMJYcmCQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;我在美团的八年&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247486776&amp;amp;idx=1&amp;amp;sn=28f577dff778c2e1504ee7e081d469b3&amp;amp;chksm=c0ddb44af7aa3d5caa4ea7464afa882203091bd5dfe07709d19f09bce42c326219f8643626d0#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247486776&amp;amp;idx=1&amp;amp;sn=28f577dff778c2e1504ee7e081d469b3&amp;amp;chksm=c0ddb44af7aa3d5caa4ea7464afa882203091bd5dfe07709d19f09bce42c326219f8643626d0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;我在美团的8年&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487373_1&quot; data-recommend-article-time=&quot;1644449820&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/WXn1rTCjkJxlPYKcZyQVZy2j5s5icF3Gr791RiaxwrFOBSric1JUoib7nJoGjc87PSEDp6nTaMicTMPSG9WxQkFcE0w/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;在腾讯待了 9 年，还是离了职！&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487373&amp;amp;idx=1&amp;amp;sn=a9178ae2e0dad90eb3e6da2e9b456d6c&amp;amp;chksm=c0ddb6fff7aa3fe913366c78ec110f5a08bcb693aa52b5798274733403df8f0d65a03f4761e4#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487373&amp;amp;idx=1&amp;amp;sn=a9178ae2e0dad90eb3e6da2e9b456d6c&amp;amp;chksm=c0ddb6fff7aa3fe913366c78ec110f5a08bcb693aa52b5798274733403df8f0d65a03f4761e4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;在腾讯待的9年&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247486770_1&quot; data-recommend-article-time=&quot;1640302620&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAeDXFPqxtboKEWibfUvHbRZ8U8vqycrjwHI7ibX59oPh2nLbtl7oYd5vzI6WQhO80tuu5FWgV5XnBtw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;聊一聊我眼中的阿里P8、P9及以上人的水平&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247486770&amp;amp;idx=1&amp;amp;sn=8dae336bd6f9d45cfd8934aba384226f&amp;amp;chksm=c0ddb440f7aa3d561bfd5024203f0c42d70b80de75fa309abc67b25e76ab1798a0fd9c87935e#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247486770&amp;amp;idx=1&amp;amp;sn=8dae336bd6f9d45cfd8934aba384226f&amp;amp;chksm=c0ddb440f7aa3d561bfd5024203f0c42d70b80de75fa309abc67b25e76ab1798a0fd9c87935e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;聊聊阿里P8、P9&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487331_1&quot; data-recommend-article-time=&quot;1644277020&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAcHCPKaJx9ARt0ngx214AwVyCYLr2uBHVSSZiaPoPhIko0wFAsE0feUCmBRZGiaq8arxgn6YxO63bMQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;湖仓一体架构构建与平台应用实践（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487331&amp;amp;idx=1&amp;amp;sn=46d6d60d3d9f4406e617d55e5c4ab344&amp;amp;chksm=c0ddb611f7aa3f07519fa7f27753273b9f1faec582bb3bf756f936ce3960b4cbbf0ef2776e64#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487331&amp;amp;idx=1&amp;amp;sn=46d6d60d3d9f4406e617d55e5c4ab344&amp;amp;chksm=c0ddb611f7aa3f07519fa7f27753273b9f1faec582bb3bf756f936ce3960b4cbbf0ef2776e64&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;湖仓一体与平台应用实践（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487235_1&quot; data-recommend-article-time=&quot;1642981020&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAdrGFzpq4Bxuh9uia2ay7JziaEibWlUlAWkyJiaACvplYcv9MuxQluaViaRSdo8L6BDicoZLFuyeNgmAINA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数据仓库实施步骤与建模体系（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487235&amp;amp;idx=1&amp;amp;sn=ea135ae7c55abdf79b1882c4b4ca45ae&amp;amp;chksm=c0ddb671f7aa3f67c45e52c90c0da5b07c60ca564e93cbde30b7e24eb3668b96dcdd7ddfe6eb#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487235&amp;amp;idx=1&amp;amp;sn=ea135ae7c55abdf79b1882c4b4ca45ae&amp;amp;chksm=c0ddb671f7aa3f67c45e52c90c0da5b07c60ca564e93cbde30b7e24eb3668b96dcdd7ddfe6eb&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;数据仓库实施与建模体系（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487224_1&quot; data-recommend-article-time=&quot;1642721820&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAe1h904ceGcXVmVR0FjTMZ18RNiaAPibsdpcNjDTTmlzvdHn9TkItJ9MH7l9mm7Tj7ApwJr54xa74BQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;主数据管理方法论与实践（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487224&amp;amp;idx=1&amp;amp;sn=d3f1aac37815d02ed5770d3c3dabb264&amp;amp;chksm=c0ddb78af7aa3e9c483c2372d9dac19b64cc4dcdc30075e8968392b59c95323d7f22c7ac2e05#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487224&amp;amp;idx=1&amp;amp;sn=d3f1aac37815d02ed5770d3c3dabb264&amp;amp;chksm=c0ddb78af7aa3e9c483c2372d9dac19b64cc4dcdc30075e8968392b59c95323d7f22c7ac2e05&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;主数据管理方法论与实践（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247487208_1&quot; data-recommend-article-time=&quot;1642635420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAe1h904ceGcXVmVR0FjTMZ19cogK2ZibUEUiaRFBgw6CMsVAl2eicOxFic5dE6Uic3MUKEdz7CBPian79wQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;阿里大数据OneData体系架构（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487208&amp;amp;idx=1&amp;amp;sn=133ba448d0fd9d62a1c2d8cef41f15fe&amp;amp;chksm=c0ddb79af7aa3e8cf633040a1de015247084c46522f7b4a2e0b031e5b5e6bf267b29570296d9#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247487208&amp;amp;idx=1&amp;amp;sn=133ba448d0fd9d62a1c2d8cef41f15fe&amp;amp;chksm=c0ddb79af7aa3e8cf633040a1de015247084c46522f7b4a2e0b031e5b5e6bf267b29570296d9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据OneData体系架构（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247486862_1&quot; data-recommend-article-time=&quot;1641339420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAdLeU2ycRCskoqiasH9n7NlNATC3s0pWC2PUVG64Z5NM8RyPzDyibOpI2icGJZNGee3miaPOv9djzZDkw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;主数据管理解决方案（PPT完整版）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247486862&amp;amp;idx=1&amp;amp;sn=761fce44946233b9d258f1aa3399f067&amp;amp;chksm=c0ddb4fcf7aa3deae32f9c21e310138a79a4b3a75f04ca799bae529ea3141a5afc5df4adc568#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247486862&amp;amp;idx=1&amp;amp;sn=761fce44946233b9d258f1aa3399f067&amp;amp;chksm=c0ddb4fcf7aa3deae32f9c21e310138a79a4b3a75f04ca799bae529ea3141a5afc5df4adc568&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;主数据管理解决方案完整（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/fp3oqPBibTAfwibwr4KTfAGVcicxIyZQFOTibOFaQpvHtNpxXD5IMytsGNvVU71ZmLz0UGsib9Tv1fE9IeiaxkBdtulQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8e190c218bd09cdb7e0659b73ca91989</guid>
<title>138  python|第八部分：并发网络编程（三）多任务编程上--进程</title>
<link>https://toutiao.io/k/2z3c7um</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ps -aux&lt;/span&gt;&lt;/section&gt;&lt;table interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;命令&amp;amp;进程信息&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;6&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;查看进程信息&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;ps -aux&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;USER&lt;/strong&gt;&lt;/span&gt;：进程的创建者&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;PID&lt;/strong&gt;&lt;/span&gt;：操作系统分配给进程的编号（大于0的整数），每个进程的PID都不重复，PID是重要的区分进程的标志&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;%CPU,%MEM&lt;/strong&gt;&lt;/span&gt;：占有的CPU和内存&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;STAT&lt;/strong&gt;&lt;/span&gt;：进程状态信息&lt;br/&gt;D：无法中断的休眠状态（通常IO的进程）&lt;br/&gt;R : 正在执行中&lt;br/&gt;S：静止状态&lt;br/&gt;T：暂停执行&lt;br/&gt;Z：不存在但暂时无法消除（僵尸进程）&lt;br/&gt;W：没有足够的记忆体分页可分配&lt;br/&gt;&amp;lt;：优先级较高的进程&lt;br/&gt;N：优先级较低的进程&lt;br/&gt;L：有记忆体分页分配并锁在记忆体内&lt;br/&gt;s：进程的领导者&lt;br/&gt;+：前台的进程组（可以通过终端展示和控制的进程，root用户创建的进程大多是后台进程）&lt;br/&gt;I：以线程的方式运行&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;START&lt;/strong&gt;&lt;/span&gt;：进程启动时间&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;COMMAND&lt;/strong&gt;&lt;/span&gt;：通过什么程序启动的进程&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.596130592503023&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXWP2Kia1sMnc3iadtA5V9rMZ8yOeOia5X6kvmzpeq7UuvmPvUDqpfXkjWNjGLibUFmJeic5kzu1GMttng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;827&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;实时监控系统状态&lt;/strong&gt;：(通过&amp;gt; 或&amp;lt;翻页，按q退出)&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;top&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5104808877928483&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUVyyJ1lcXTTo44H1vVAaoiaFw1dSZS7gVm7tffUv0UcLnbVdNicUX4zNLIkCLxx7Py7OYd5cTZlNiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;811&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;kill 命令&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;语法：&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;kill [-s &amp;lt;信息名称或编号&amp;gt;][程序]　或　kill [-l &amp;lt;信息编号&amp;gt;]&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;常用命令：&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;kill -l  列出全部信息名称&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;kill -9 pid 强行杀死进程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;kill -15 pid 正常结束&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;示例：&lt;/section&gt;&lt;section&gt;kill -l&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.35537190082644626&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUVyyJ1lcXTTo44H1vVAaoiaFlibY0ra0hcEaZIGoqOniaXC3nVEQ6WsqfEpSZJInJbMBZJUJqMFAeyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;726&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;启动进程（python3 文件名）并查看进程的PID（ps -aux）&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8147651006711409&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUVyyJ1lcXTTo44H1vVAaoia93cXO21rNtRkXAVpSicNQG0vuicicciaQvicn9FfumWhDYRCB7Wwadf43Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;745&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;kill -9 PID&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4343163538873995&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUVyyJ1lcXTTo44H1vVAaoiaT7KnQHKJxrYN31jEa0Qa9rfGsJVDdsoU7qr2tDDhG8jM5UJfD5VZhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;746&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;kill -15 PID&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7368421052631579&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUVyyJ1lcXTTo44H1vVAaoiaiaY5h4iaA6RohwkKZjOXepiaVV7qmCUoTxMBmlibTmCyPa3ZULNDliaxib6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;741&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt; 多进程编程&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;18&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;25&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUQ2ORiaDHIlr4Xw64zhj0RpicIt7q38C2p7EVuCvOoOutGuaPFXd4HBUnftjrfh8R3TtuKwZdWrkaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;strong&gt;        &lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;20&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;20&quot; data-ratio=&quot;0.9927884615384616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXWP2Kia1sMnc3iadtA5V9rMZExSkibv2eb9mYDKuOextUVT4IwvM4dIx4nn0Fkr1PyOfKu30owEqNyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;416&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;3.1 fork()函数&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;linux和unix操作&lt;/span&gt;&lt;span&gt;系统下的os模块可以&lt;/span&gt;&lt;span&gt;通过fork函数&lt;/span&gt;&lt;span&gt;&lt;span&gt;来创建子进程，而&lt;/span&gt;&lt;span&gt;windows系统&lt;/span&gt;&lt;/span&gt;&lt;span&gt;的os模块中没有fork函数&lt;/span&gt;&lt;span&gt;，需要导入&lt;/span&gt;&lt;span&gt;multiprocessing包&lt;/span&gt;&lt;span&gt;的方式来创建子进程。首先我们来了解一下fork函数的使用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍os.fork()&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;1.功能&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;创建当前进程的子进程&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;2.参数和返回值&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;em&gt;没有参数&lt;/em&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;em&gt;返回值：&lt;/em&gt;&lt;/section&gt;&lt;section&gt;    &lt;strong&gt;0&lt;/strong&gt;：代表&lt;strong&gt;执行&lt;/strong&gt;&lt;strong&gt;子进程&lt;/strong&gt;代码获取的fork&lt;strong&gt;返回值&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;   &lt;strong&gt; &amp;gt;0&lt;/strong&gt;：&lt;span&gt;子进程的PID号&lt;/span&gt;，代表要&lt;strong&gt;执行&lt;/strong&gt;&lt;strong&gt;父进程&lt;/strong&gt;代码得到的fork&lt;strong&gt;返回值&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;    &lt;strong&gt;-1&lt;/strong&gt;：代表&lt;strong&gt;调用出错&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;▍实例&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;一般来说，if-elif-else语句应该是任选其一来执行，再加上代码最后一句，按理说最终结果应该返回两句。但实际结果却返回4句，这是什么原因呢？&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pid = os.fork()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;if pid &amp;lt; 0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;Create process failed&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;elif pid == 0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;The new process&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;else:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;The old process&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(&quot;fock test over&quot;)&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;运行结果：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3309203722854188&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUVyyJ1lcXTTo44H1vVAaoiagIOD3P3N4FS5W1v1753wB8wRFJxYDsIwaSGjbYN1iaou5uFLiangEYmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;967&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;os.fork()&lt;/span&gt;向操作系统发出申请创建新的进程，新进程（子进程）和原有进程（父进程）一样拥有相同的内存空间和代码段，会执行相同的内容（子进程是从&lt;span&gt;os.fork()&lt;/span&gt;之后的代码开始执行的），假设操作系统给子进程分配的PID是123，因为父进程fork的返回值是&lt;span&gt;子进程的PID，所以父进程的返回值也是&lt;/span&gt;123。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;由于PID是一个大于0的整数，所以无论子进程的PID是多少，父进程的返回值一定&amp;gt;0，也就是说父进程执行的一定是以下两句：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;The old process&lt;/span&gt;和&lt;span&gt;fock test over&lt;/span&gt;&lt;/section&gt;&lt;section&gt;子进程的返回值固定是0，所以执行的一定是以下两句：&lt;/section&gt;&lt;section&gt;&lt;span&gt;The new process&lt;/span&gt;和&lt;span&gt;fock test over&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;父进程和子进程的执行是抢占式的，谁先谁后并不一定，一般情况下父进程会先被打印出来。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.41935483870967744&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUVyyJ1lcXTTo44H1vVAaoiaGDbZsuWH8bagycM4GbRArBHDGHjoUlaY2QBCyxXMQ3iaFqtbQfS9ibJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1364&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;如果把if结构去掉，会发现父子进程执行的代码是相同的，&lt;span&gt;If语句可以让fork发挥更大的作用，让父子进程执行不同的程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6707193515704154&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUVyyJ1lcXTTo44H1vVAaoiaLMd1TU2LKIWplGrWq5dK1AxIc40PTRTrFJ2tcv9lgHsfiaKY16bIiaFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;987&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍&lt;strong&gt;fork创建进程要点&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;子进程会复制父进程全部代码段，包括fork之前产生的内存空间&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;子进程从fork下一句开始执行，所以不会再创建进程&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7688787185354691&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfAp3wC6EMLSxLVXdNBOuAyuFuFp6diacvxSCmmfwarag4h0icDTBHPRE0Dg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;874&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;父子进程通常会根据fork返回值的差异选择执行不同的代码，if结构也几乎是固定结构&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;子进程虽然复制父进程的代码空间，但有自己的特有属性，比如：PID、PCB等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;父子进程在执行上互不干扰，执行顺序不确定&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.48066298342541436&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfApnOIXwRDddpqMAJyh32UPwoJkcKIxPZKwVQia9PPibw4ERHlIMics82hNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1267&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;父子进程空间独立，在本进程中对空间的操作不会影响到其他进程&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5289389067524116&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfApxjutBE6FhKCn0DmDibuSotiaib1kYubTR4dVUpXDWk7CZPhGxWwaQ2YOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1244&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4609250398724083&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfApX8LFHWOz4cXNvFluczCDib5QbhPNoyQECcQr03snMibycqujs62jZUJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1254&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;当if语句实现的功能代码量较大时,可以单独封装成函数,在if语句里调用&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from time import sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;def func01():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(2)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;func01 over&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;def func02():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(3)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;func02 over&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pid = os.fork()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#当if语句实现的功能代码量较大时,可以单独封装成函数,在if语句里调用&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;if pid&amp;lt;0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;error&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;elif pid==0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    func01()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;else:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    func02()&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;终端运行：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8193224592220828&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfApPjMdtPLuW0Z6BpvIwPucrQ6icJKdP6B9jU7QJbFdp5EibyPIlw6bzViag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;797&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;20&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;20&quot; data-ratio=&quot;0.9927884615384616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXWP2Kia1sMnc3iadtA5V9rMZExSkibv2eb9mYDKuOextUVT4IwvM4dIx4nn0Fkr1PyOfKu30owEqNyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;416&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;3.2 进程相关函数&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;以下函数在multiprocessing包中也能用&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（一）获取进程ID的函数：&lt;/strong&gt;&lt;strong&gt;os.getpid()  os.getppid()&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍os.getpid()&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;1.功能&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;获取当前进程的进程号&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;2.返回值&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;返回当前进程的进程号&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍os.getppid()&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;1.功能&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;获取父进程的进程号&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;2.返回值&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;返回父进程的进程号&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;▍实例&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pid = os.fork()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;if pid&amp;lt;0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;error&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#子进程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;elif pid==0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;child pid:&quot;,os.getpid())#获取当前进程(子进程)的进程号&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;parent pid&quot;, os.getppid())#获取父进程的进程号&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#父进程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;else:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;parent pid&quot;,os.getpid())#获取当前进程(父进程)的进程号&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;child pid:&quot;,pid)#父进程的返回值是子进程的 pid&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;执行结果：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.28378378378378377&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfApIvMib8klFF6kzVVDBoicxibFS20Lgsvht2t5uHT3br11eIa2Ob2piaibcPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;962&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（二）结束进程的函数：&lt;/strong&gt;&lt;strong&gt;os._exit(status)  sys.exit([status])&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍os._exit(status)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;1.功能&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;退出进程&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;2.参数&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;一个整数，表示进程的退出状态（一般默认0为退出状态）&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍sys.exit([status])&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;1.功能&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;退出进程&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;2.参数&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;不写默认为0&lt;/section&gt;&lt;section&gt;传入一个整数表示进程的退出状态&lt;/section&gt;&lt;section&gt;传入一个字符串，在进程退出时会打印这个字符串&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;sys模块&lt;/strong&gt;是python的标准库模块之一，&lt;span&gt;负责程序与python解释器的交互，提供了一系列的函数和变量，用于操控python的运行时环境&lt;/span&gt;。在https://www.cnblogs.com/xixi18/p/8406301.html里可以查看sys模块的具体用法。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;▍实例&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import os,sys&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;os._exit(0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# sys.exit(&quot;进程结束&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(&quot;process exit&quot;) #这句不会执行,进程在这之前结束&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;20&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;20&quot; data-ratio=&quot;0.9927884615384616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXWP2Kia1sMnc3iadtA5V9rMZExSkibv2eb9mYDKuOextUVT4IwvM4dIx4nn0Fkr1PyOfKu30owEqNyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;416&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;3.3 孤儿进程和僵尸进程&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍概念&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;1.孤儿进程&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;一个&lt;span&gt;父进程退出&lt;/span&gt;，它的一个或多个&lt;span&gt;子进程还在运行&lt;/span&gt;，那些子进程将成为孤儿进程。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;孤儿进程会&lt;span&gt;被特定的系统进程收养&lt;/span&gt;，并由该进程对它们完成状态收集工作。&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6465753424657534&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfApDt8cdNguVYUa4XSOTn6J14e9JAhUbBYFWwBj39xERicfsBpvQmeDqFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;730&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#子进程代码调整，其他部分不变&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;elif pid==0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(1)#给子进程设置等待时间,确保父进程先结束&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;child pid:&quot;,os.getpid())#获取当前进程(子进程)的进程号&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;parent pid&quot;, os.getppid())#获取父进程的进程号&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4228395061728395&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfAprccubcK6xdv7CLJC56v01Re4iboIRdEoibGnxEBZiaWcDKhIAj8u3qQaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1296&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;2.僵尸进程&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;一个进程创建子进程，如果&lt;span&gt;子进程退出&lt;/span&gt;，而&lt;span&gt;父进程并没有处理&lt;/span&gt;子进程的状态信息，那么子进程的进程部分信息仍然保存在系统中，这种进程被称为僵尸进程。僵尸进程会浪费一定的系统资源。&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;示例：在终端通过ps -aux查看pid=22750的子进程，进程的状态显示为Z+，即僵尸进程。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pid = os.fork()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; pid &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; pid==&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;child process&quot;&lt;/span&gt;,os.getpid())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    os._exit(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;终端运行：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46565495207667734&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfApXk2kmoxgS4TTx9D3F37C0uYclrB18pPBnQYzPPoIFJWKb7ib5A5iaicag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1252&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;▍如何避免僵尸进程产生？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;1.确保父进程先退出&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;2.父进程处理子进程的退出状态&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;▍僵尸进程处理方法&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;1.通过wait()函数处理  os.wait()&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;功能：&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;wait函数属于阻塞函数，会一直等待，直到子进程退出。&lt;span&gt;wait函数会等待任何一个子进程退出。（这也是wait函数的局限，因为创建子进程的目的是让父子进程一起执行，现在为了解决僵尸进程问题，子进程先于父进程执行，效率并没有得到提升）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;参数：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;无&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;返回值：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;返回一个元组（pid,status）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;pid:退出子进程的进程号&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;status:&lt;span&gt;退出子进程的进程状态（用户可以在结束进程时设置，设置为几，就返回几x256），&lt;/span&gt;&lt;/span&gt;可以通过宏函数 os.WEXITSTATUS(status)得到子进程退出的值。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    p,status = os.wait()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;pid:&quot;&lt;/span&gt;,p)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;status:&quot;&lt;/span&gt;,status)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;status:&quot;&lt;/span&gt;, os.WEXITSTATUS(status))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;终端运行：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4334847501622323&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfApGQsjYKwFMwHqAMVvB4qume4FQyp88oXctUUFGD149poRE15QnibCSjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1541&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;2.创建二级子进程&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;（1）父进程创建子进程等待子进程退出&lt;br/&gt;&lt;/section&gt;&lt;section&gt;（2）子进程创建二级子进程后马上退出&lt;/section&gt;&lt;section&gt;（3）二级子进程成为孤儿处理具体事件&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.741514360313316&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfApfvxq2sjFOAjOaWqufqReA9Pl2ib61g7XIc8MxEnc3jcXiakib9icqXlcxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;766&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#创建二级子进程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from time import sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;def func01():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(2)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;func01&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;def func02():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(3)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;func02&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pid = os.fork()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;if pid&amp;lt;0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;error&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;elif pid==0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pid_0 = os.fork()#二级子进程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    if pid_0 ==0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        func01()#执行二级子进程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    else:#一级子进程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        os._exit(0)#在创建完二级子进程后直接退出&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;else:#父进程创建完一级子进程后进入等待状态&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    os.wait()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    func02()#等一级子进程结束,执行这句&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;终端运行：大概花费3秒就能结束运行，而且不会产生僵尸进程&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.17269906928645296&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfAp50iaJfYLwrX6iawqFzrtVht3TCXCiayYjWWgWHXWsBibsWaY8ibFgbPajoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;967&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;3.通过信号处理子进程退出&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;原理&lt;/strong&gt;：子进程退出时会发送信号给父进程，如果父进程忽略子进程的信号，系统就会自动处理子进程退出。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;方法&lt;/strong&gt;：使用signal模块在父进程创建子进程前写出以下语句：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;import signal&lt;/section&gt;&lt;section&gt;&lt;span&gt;signal.&lt;span&gt;signal(&lt;span&gt;signal.SIGCHLD,&lt;span&gt;signal.SIG_IGN&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;特点&lt;/strong&gt;：非阻塞，不会影响父进程运行，可以处理所有子进程退出。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import signal&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#信号方法处理僵尸进程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;signal.signal(signal.SIGCHLD,signal.SIG_IGN)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pid = os.fork()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;if pid &amp;lt; 0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;error&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;elif pid==0:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&quot;child process&quot;,os.getpid())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    os._exit(0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;else:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    while True:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        pass&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;运行：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4657243816254417&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXW6oavWG5fMJhEH1rp1sfApmZHcULQnbUTqmUMxIsia8EhISiblwcLladr3ypAadqru1J3ibOdiaA83ew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1415&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;20&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;20&quot; data-ratio=&quot;0.9927884615384616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXWP2Kia1sMnc3iadtA5V9rMZExSkibv2eb9mYDKuOextUVT4IwvM4dIx4nn0Fkr1PyOfKu30owEqNyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;416&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;3.4 multiprocessing模块&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▍概述&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;前文提到过，windows系统下需要通过&lt;span&gt;multiprocessing来创建子进程，实现多进程。&lt;/span&gt;准确来说，multiprocessing不是一个模块，&lt;/span&gt;&lt;span&gt;它是python多进程管理的一个包。&lt;/span&gt;&lt;span&gt;使用它创建进程的内部原理和fork函数相同，&lt;/span&gt;&lt;span&gt;只是做了进一步的封装,&lt;/span&gt;&lt;span&gt;在这种封装下，&lt;/span&gt;&lt;span&gt;更方便同时创建多个子进程。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍使用模块&amp;amp;流程&lt;/span&gt;&lt;/section&gt;&lt;section&gt;使用模块：multiprocessing&lt;/section&gt;&lt;section&gt;&lt;strong&gt;创建流程：&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1.将需要新进程执行的事件封装成函数&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2.通过模块的Process类创建进程对象，关联函数&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3.通过进程对象调用start启动进程&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍主要类和函数使用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;多进程的主要类和函数&lt;/span&gt;&lt;/section&gt;&lt;table interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;类和函数&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;功能&amp;amp;说明&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Process()&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;功能：&lt;/strong&gt;&lt;/span&gt;创建进程对象&lt;br/&gt;&lt;span&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;name&lt;/span&gt;：给创建进程对象起一个名字，默认Process-1&lt;br/&gt;&lt;span&gt;target&lt;/span&gt;：绑定要执行的目标函数&lt;br/&gt;&lt;span&gt;args&lt;/span&gt;：元组，用于给target函数位置传参&lt;br/&gt;&lt;span&gt;kwargs&lt;/span&gt;：字典，给target函数键值传参&lt;br/&gt;&lt;span&gt;daemon&lt;/span&gt;：bool值，让子进程随父进程退出&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;p.start()&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/span&gt;：启动进程&lt;br/&gt;&lt;span&gt;&lt;strong&gt;注&lt;/strong&gt;&lt;/span&gt;：&lt;span&gt;调用start()时进程才真正被创建&lt;/span&gt;，子进程复制父进程空间，之后有自己独立的执行空间，互不干扰&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;p.join([timeout])&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/span&gt;：阻塞等待对应子进程的退出，回收子进程&lt;br/&gt;&lt;span&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/span&gt;：赶超时间&lt;br/&gt;&lt;span&gt;&lt;strong&gt;注&lt;/strong&gt;&lt;/span&gt;：&lt;span&gt;如果不使用join,子进程会变成僵尸进程。&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▍multiprocessing创建进程要点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;新的进程是原有进程的子进程，子进程复制父进程全部内存空间代码段，&lt;span&gt;一个进程可以创建多个子进程。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;子进程只执行指定的函数，其余内容均是父进程执行内容，但是子进程也拥有其他父进程资源。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;各个进程在执行上互不影响，也没有先后顺序关系。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;进程创建后，各个进程空间独立，相互没有影响。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;multiprocessing 创建的子进程中&lt;span&gt;无法使用标准输入&lt;/span&gt;（即无法使用input）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;相对于通过fork函数创建进程，使用&lt;span&gt;multiprocessing创建进程不用再通过if-elif-else语句实现，变得更为简单，&lt;span&gt;一般父进程的功能就是创建子进程等待回收，不做过多其他事情，如果想要做多件事，可以创建多个子进程。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0382848392036754&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXWs7o4CkiaxIlQDo1y9I6asb3OXyGKjhzibh4H664kib8rUicfbPTuhicm0MibKbD66Exq3G48bpYYjkXMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;653&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42448979591836733&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXWs7o4CkiaxIlQDo1y9I6asbMiaVriajeUGO8uqicG5ibtMibgCqHcaNh2IaDUTbZpWicVdG5AazJI6FuLLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;490&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实例1：创建多个子进程&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Process&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;fun1()&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(os.getppid(),&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;---&quot;&lt;/span&gt;,os.getpid(),&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;吃饭&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;fun2()&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(os.getppid(),&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;---&quot;&lt;/span&gt;,os.getpid(),&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;睡觉&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;fun3()&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(os.getppid(),&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;---&quot;&lt;/span&gt;,os.getpid(),&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;打豆豆&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jobs = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; th &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [fun1,fun2,fun3]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    p = Process(target=th)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    jobs.append(p)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    p.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#用新列表jobs存储三个进程对象,等它们都启动之后,再统一回收&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; jobs:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    i.join()&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;运行：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.39918533604887985&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXWs7o4CkiaxIlQDo1y9I6asbwyibzZpIUPbv4BgO3ISicibmeBWt2aGgibibI23NrEYXIf4SvKT5Hf0G6Eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;491&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实例2：含有参数的进程函数&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from multiprocessing import Process&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from time import sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#含有参数的进程函数&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;def worker(sec,name):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    for i in range(3):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sleep(sec)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&quot;I&#x27;m %s&quot;%name)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&quot;I&#x27;m working...&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# p = Process(target=worker,args=(2,&#x27;Tom&#x27;))#位置传参&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# p = Process(target=worker,kwargs={&#x27;name&#x27;:&#x27;peiqi&#x27;,&#x27;sec&#x27;:2})#键值传参&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p = Process(target=worker,args=(2,),kwargs={&#x27;name&#x27;:&#x27;John&#x27;})#位置+键值传参,注意位置传参要放前面,逗号不能省略&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p.join()&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;运行：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.34151128557409227&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXWs7o4CkiaxIlQDo1y9I6asbyTj7YbC1qgv4Uqwvl9jNqb2zPNxDHviaOuhTEsjpugapW0QxtakTwEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1019&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实例3：创建两个子进程拆分文件&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;假设有一个大文件，将其拆分为两份，分别为上半部分和下半部分。为提高拆分速度要求&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;上下两个部分的拆分过程同时进行。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;os.path.getsize()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;seek()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Process&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;filename = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/home/huanhuan/myfile/testing.py&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;size = os.path.getsize(filename)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#复制上半部分&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;top()&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fr = open(filename,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;rb&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fw = open(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;top.py&#x27;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;wb&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    n = size // &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fw.write(fr.read(n))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fr.close()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fw.close()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#复制下半部分&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;bot()&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fr = open(filename,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;rb&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fw = open(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;bot.py&#x27;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;wb&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fr.seek(size//&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fw.write(fr.read())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fr.close()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fw.close()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p1 = Process(target=top)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p2 = Process(target=bot)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p1.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p2.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p1.join()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p2.join()&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍进程对象属性&amp;amp;函数&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;进程对象属性&amp;amp;函数&lt;/span&gt;&lt;/section&gt;&lt;table interlaced=&quot;enabled&quot; align=&quot;left&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;属性&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;pid&lt;/span&gt;：创建的子进程的PID&lt;br/&gt;&lt;span&gt;name&lt;/span&gt;：创建的进程名称，进程中name的作用不如pid大，主要是对进程基本信息的一个说明&lt;br/&gt;&lt;span&gt;daemon&lt;/span&gt;：默认为False 父进程退出不会影响子进程&lt;br/&gt;如果设置为True 父进程退出会让所有的子进程一起退出。需要在start()之前使用&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;is_alive()&lt;/span&gt;：查看进程状态&lt;br/&gt;&lt;span&gt;multiprocessing.current_process()&lt;/span&gt;：获取当前进程对象&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;实例：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8917808219178082&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXWs7o4CkiaxIlQDo1y9I6asbmZtJzoP3cick3r1xA1UgpwIWPj0qwwy7tGoqGXS5JJcCArLQlxgRgqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;730&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;pid&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8101571946795647&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXWs7o4CkiaxIlQDo1y9I6asbxdLIxxR2nUKaxjUib1GlcrRSS8Wshxhj2rJL4ZY4Lvo5PwDWBf6QbYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;827&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;daemon&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7048832271762208&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXWs7o4CkiaxIlQDo1y9I6asb0K75ZZuTsq6fEibxgPYOfDPFMwEm1PJCoQKUM3u46bUE1ontmYlosyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;942&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;is_alive()  ；&lt;span&gt;multiprocessing.current_process()&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0109204368174727&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXWhVrP4GvZYOOvd36DS7JO5EQkqcIiaFSBgibATp3R1ib85ulKhY8sDsnQGC78iaBpVBUuhtt82iaaHMNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;641&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍创建进程类&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;进程的基本创建方法是将子进程执行的内容封装成函数，如果用面向对象的思想来实现，可以使用类来封装进程内容。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1.创建步骤&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;继承Process类&lt;br/&gt;&lt;/section&gt;&lt;section&gt;重写__init__方法添加自己的属性，使用super()加载父类属性&lt;/section&gt;&lt;section&gt;重写run()方法&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2.使用方法&lt;/span&gt;&lt;/section&gt;&lt;section&gt;实例化对象&lt;/section&gt;&lt;section&gt;调用start自动执行run方法&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;实例：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from multiprocessing import Process&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MyProcess&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;Process&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;,value)&lt;/span&gt;:#重写__init__方法添加自己的属性&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.value = value &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;().__init_&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt;() &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;func01(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;工作步骤1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;func02(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;工作步骤2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;:#重写run()方法&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.func01()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.func02()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; __name_&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt; == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;__main__&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    p = MyProcess(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    p.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    p.join()&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;下面代码&lt;span&gt;‍&lt;/span&gt;实现中用到的python自定义装饰器可以看下面这篇&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMjU5ODM1Mg==&amp;amp;mid=2247492657&amp;amp;idx=1&amp;amp;sn=1671e1350e1f20c6195521c90f13c398&amp;amp;chksm=f9cbc68ecebc4f981f953909f3d7ee6d9aabc9187c5894d42aabaf44c92fe64c900b134d808d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;130 python|第三部分：python高级（三）函数式编程&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;130 python|第三部分：python高级（三）函数式编程&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实例：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;需求:分别使用单进程,4个进程和10个进程计算100000以内质数的和所用时间,对比运行效率&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1. 求100000以内质数之和，并且计算这个求和过程的时间(单进程)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2. 将100000分成4份，创建4个进程，每个进程求其中一份的&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;质数之和，统计4个进程执行完的时间&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2. 将100000分成10份，创建10个进程，每个进程求其中一份的&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;质数之和，统计10个进程执行完的时间&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;提示：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;质数: 只能被1和其本身整除的整数 &amp;gt;1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import  multiprocessing&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import time&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#自定义一个计算经过时间的装饰器&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;timeit(f)&lt;/span&gt;:#外函数&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;wrapper(*args,**kwargs)&lt;/span&gt;:#内函数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        start_time = time.time()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        res=f(*args,**kwargs)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        end_time=time.time()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%s函数运行时间:%.8f&quot;&lt;/span&gt; % (f.__name_&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt;,end_time -start_time))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; wrapper&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ifprime(n)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; n&amp;lt;=&lt;span class=&quot;code-snippet__number&quot;&gt;1:#n的范围&amp;gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,int(n))&lt;span class=&quot;code-snippet__symbol&quot;&gt;:#从2开始遍历,到n-1结束&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; n % i ==&lt;span class=&quot;code-snippet__number&quot;&gt;0:#数字n和2~(n-1)的数字取余,余数为0,说明除了1和它本身还有其他因数,数字n是合数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; True&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@timeit&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;no_multi_process()&lt;/span&gt;:#单进程函数&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    prime = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;100001&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ifprime(i)&lt;span class=&quot;code-snippet__symbol&quot;&gt;:#调用ifprime函数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            prime.append(i)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sum(prime)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;prime2&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;multiprocessing&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Process&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;,prime,&lt;span class=&quot;code-snippet__keyword&quot;&gt;begin&lt;/span&gt;,&lt;span class=&quot;code-snippet__keyword&quot;&gt;end&lt;/span&gt;)&lt;/span&gt;:#重写__init__方法添加自己的属性&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;().__init_&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.prime = prime&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;begin&lt;/span&gt; = &lt;span class=&quot;code-snippet__keyword&quot;&gt;begin&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;end&lt;/span&gt; = &lt;span class=&quot;code-snippet__keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;:#重写run()方法&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;begin&lt;/span&gt;,&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;end&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ifprime(i):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.prime.append(i)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sum(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.prime)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@timeit&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;use4_multi_process()&lt;/span&gt;:#4个子进程函数&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    prime = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    processes = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;100001&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;25000&lt;/span&gt;)&lt;span class=&quot;code-snippet__symbol&quot;&gt;:#步长是25000,for循环会创建4个进程&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        p = prime2(prime,i,i+&lt;span class=&quot;code-snippet__number&quot;&gt;25000&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        p.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        processes.append(p)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    [process.join() &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; process &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; processes]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@timeit&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;use10_multi_process()&lt;/span&gt;:#10个子进程函数,和4个进程类似&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    prime = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    processes = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;100001&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;code-snippet__symbol&quot;&gt;:#步长设置为1000,for循环会创建10个进程&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f = prime2(prime,i,i+&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        processes.append(f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    [process.join() &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; process &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; processes]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; __name_&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt; == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;__main__&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    use10_multi_process()&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;20&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;20&quot; data-ratio=&quot;0.9927884615384616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXWP2Kia1sMnc3iadtA5V9rMZExSkibv2eb9mYDKuOextUVT4IwvM4dIx4nn0Fkr1PyOfKu30owEqNyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;416&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;3.5 进程池&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍进程的局限性&lt;/span&gt;&lt;/section&gt;&lt;section&gt;虽然多进程编程可以有效利用计算机的多核，提高程序的执行效率，但进程也是有&lt;strong&gt;缺点&lt;/strong&gt;的。首先，&lt;span&gt;创建和销毁进程都需要消耗时间&lt;/span&gt;；其次，即使开启多进程，操作系统也&lt;span&gt;不会让它们同时执行&lt;/span&gt;，反而会影响程序的效率。&lt;span&gt;进程更适合&lt;em&gt;长时间执行&lt;/em&gt;和&lt;em&gt;比较大的独立的事件。&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;而进程池能够有效地解决这一问题。&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍进程池&lt;/span&gt;&lt;/section&gt;&lt;section&gt;进程池的意思是，定义一个池子，在池子里放上固定数量的进程，需求来了，就拿池子中的一个进程来处理任务，等到处理完，&lt;span&gt;进程并不关闭&lt;/span&gt;，而是将进程放入进程池继续等待。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;如果有许多任务需要执行，而池中的进程数量不够，就要等待之前的进程执行任务完毕，拿到空闲进程后才执行。&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46864951768488744&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXWhVrP4GvZYOOvd36DS7JO5AppTGtAFhjb1mNajUOCOtvECF0hCXAcQCvhj3jHNXrbZRdunKiaHbsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1244&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;进程池的&lt;strong&gt;好处&lt;/strong&gt;是，池中的&lt;/span&gt;&lt;span&gt;进程数量相对固定&lt;/span&gt;&lt;span&gt;，不会增加操作系统的调度难度，同时&lt;/span&gt;&lt;span&gt;节省了开闭进程的时间&lt;/span&gt;&lt;span&gt;，一定程度上能够实现并发效果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;multiprocessing中的&lt;/span&gt;&lt;span&gt;Pool类&lt;/span&gt;&lt;span&gt;可以实现以上的功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用方法：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;先定义进程池事件，然后再进行以下操作：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.创建进程池，在池内放入适当的进程&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.将封装好的函数事件加入进程池队列&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.事件不断运行，所有事件运行完成&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.关闭进程池，回收进程&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍Pool类创建进程池&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;Pool类创建进程池&lt;br/&gt;&lt;/section&gt;&lt;table align=&quot;center&quot; interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;strong&gt;类和函数&lt;/strong&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;语法&amp;amp;说明&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Pool(processes)&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;功能：&lt;/span&gt;创建进程池对象&lt;br/&gt;&lt;span&gt;参数：&lt;/span&gt;processes表示进程池中的进程数，可以不写，默认计算机内核数量&lt;br/&gt;&lt;span&gt;返回值：&lt;/span&gt;进程池对象&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;pool.apply_async(func,args,kwds)&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;section&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;span&gt;从进程池里取出一个进程并异步执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;参数：&lt;br/&gt;&lt;/span&gt;&lt;span&gt;func &lt;/span&gt;要放入进程池的事件函数&lt;br/&gt;&lt;span&gt;args &lt;/span&gt;给func函数以元组形式位置传参&lt;br/&gt;&lt;span&gt;kwds&lt;/span&gt; 给func函数以字典形式位置传参&lt;br/&gt;&lt;span&gt;返回值：&lt;/span&gt;&lt;span&gt;返回一个事件对象&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;pool.map(func,iter)&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;span&gt;将要做的事件加入进程池&lt;/span&gt;&lt;br/&gt;&lt;span&gt;参数：&lt;br/&gt;&lt;/span&gt;&lt;span&gt;func&lt;/span&gt; 事件函数&lt;br/&gt;&lt;span&gt;iter &lt;/span&gt;迭代对象&lt;br/&gt;&lt;span&gt;返回值&lt;/span&gt;&lt;span&gt;：函数的返回值列表&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;pool.close()&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;功能&lt;/span&gt;&lt;span&gt;：关闭进程池，不能再添加新事件&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;pool.join()&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;功能：&lt;/span&gt;回收进程池&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;span&gt;实例：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;进程池 pool.apply_async&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Pool&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#定义进程池事件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;fun(msg)&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(os.getpid(),&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;:&quot;&lt;/span&gt;,msg)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; msg&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#在windows中使用时,要把创建和添加放到main里&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#创建进程池对象&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pool = Pool()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#添加进程事件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    msg = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;huanhuan%d&quot;&lt;/span&gt;%i&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    r = pool.apply_async(func=fun,args=(msg,))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#父进程结束,进程池中的进程会随之结束&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#关闭进程池&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pool.close()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#回收进程池&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pool.join()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(r.get())&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;运行：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.966&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrRyckvewhCagekcibzUCsZF4CCA7RmSzShUsO3eOnkglDEFlvcIfoYYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实例：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;进程池 pool.map&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Pool&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#定义进程池事件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;fun(n)&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;执行事件&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; n * n&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#创建进程池对象&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pool = Pool()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#将事件加入进程池&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;r = pool.map(func=fun,iterable=[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#关闭进程池&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pool.close()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#回收进程池&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pool.join()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(r)&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;运行：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6459016393442623&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrFnvf7JDO34RKIcUsbAiaIE95xHWrKneqCtVW7VKhJmxyMKwEpTANkmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;610&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;20&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;20&quot; data-ratio=&quot;0.9927884615384616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXWP2Kia1sMnc3iadtA5V9rMZExSkibv2eb9mYDKuOextUVT4IwvM4dIx4nn0Fkr1PyOfKu30owEqNyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;416&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;3.6 进程间通信&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍概念&lt;/span&gt;&lt;/section&gt;&lt;section&gt;进程间通信（&lt;strong&gt;IPC&lt;/strong&gt;，Interprocess communication）是一组编程接口，让程序员能够协调不同的进程，使之在一个操作系统里&lt;span&gt;同时运行，并相互传递，交换信息。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;进程间通信是必要的，因为进程间空间独立，资源不共享，需要进程间数据传输时需要特定的手段进行数据通信。IPC接口提供了这种可能。常用进程间通信方法有&lt;em&gt;消息队列，套接字&lt;/em&gt;等。本文&lt;span&gt;主要梳理消息队列的使用&lt;/span&gt;。&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍消息队列&lt;/span&gt;&lt;/section&gt;&lt;section&gt;消息队列是利用multiprocessing完成进程间通信的一种常用方法，用法是&lt;span&gt;在内存中建立队列模型，进程通过队列（Queue）将消息传入，或者从队列取出完成进程间通信。&lt;/span&gt;（消息满足先进先出的关系）&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;消息队列&lt;br/&gt;&lt;/section&gt;&lt;table align=&quot;center&quot; interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;语法&amp;amp;说明&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;Queue(maxsize=0)&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;功能：&lt;/span&gt;创建队列对象（要在父进程中创建）&lt;br/&gt;&lt;span&gt;参数：&lt;/span&gt;最多存放消息个数，默认表示根据系统分配空间存储消息&lt;br/&gt;&lt;span&gt;返回值：&lt;/span&gt;队列对象&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;put(data,[block,timeout])&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;section&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;span&gt;向队列存入消息&lt;/span&gt;&lt;br/&gt;&lt;span&gt;参数：&lt;br/&gt;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;要存入的消息（列表、元组、字符串等python数据类型）&lt;br/&gt;&lt;span&gt;block  &lt;/span&gt;默认为True 表示当队列&lt;span&gt;满&lt;/span&gt;的时候阻塞，False表示非阻塞&lt;br/&gt;&lt;span&gt;timeout&lt;/span&gt; 当block为True表示超时时间&lt;br/&gt;注：block和timeout二选一&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;get([block,timeout])&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;span&gt;从队列取出消息&lt;br/&gt;&lt;/span&gt;&lt;span&gt;参数：&lt;br/&gt;&lt;/span&gt;&lt;span&gt;block &lt;/span&gt;&lt;span&gt;默认为True 表示当队列&lt;/span&gt;&lt;span&gt;空&lt;/span&gt;&lt;span&gt;的时候阻塞，False表示非阻塞&lt;br/&gt;&lt;/span&gt;&lt;span&gt;timeout &lt;/span&gt;&lt;span&gt;当block为True表示超时时间&lt;/span&gt;&lt;br/&gt;&lt;span&gt;返回值&lt;/span&gt;&lt;span&gt;：返回获取到的内容&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;full()&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;判断队列是否为满&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;empty()&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;判断队列是否为空&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;qsize()&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;获取队列中消息个数&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;strong&gt;close()&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;关闭队列&lt;br/&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7171717171717171&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrE8z4k8PZicqiatxRnyUgBBuOnSQ4JGvLsln7TsFwJ84bhzWeNTqarPww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;693&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7612809315866085&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcreGIVe7xAaN1Dsw0q04OrrOnMJyiaN7qWYnhniaXMjuEQ4Z07pndR6ic7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;687&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.348&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrFDfACOMIib0ibGAIJNbuB31aXSRYY35H4TmtBxXLLM9iabsmhO4NKx8yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2752659574468085&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrAHKmzKAibjOx3FNhqxNnaic8EwYvPQFxH3vZkvR2nT2mLHScCd2EDDxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;752&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实例：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Process,Queue&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;q = Queue(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        q.put(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hi&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            print(q.get(timeout=&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;except&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p1 = Process(target=bar)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p2 = Process(target=foo)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p1.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p2.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p1.join()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p2.join()&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实例：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;使用进程池拷贝一个目录及目录中的所有内容&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;目录中的内容均为普通文件;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;进程池中执行的每个进程事件拷贝一个文件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;实时显示拷贝的百分比&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;拷贝目录:/home/huanhuan/myfile/target&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;运行：定义main函数后&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6734902763561924&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrMSFaMkiabYKGY5FEZiaiadNYEW184o5euBbAFVuVCEOP5QVxn66eb4aXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;977&quot;/&gt;&lt;/section&gt;&lt;section&gt;此时创建了一个新的空目录&lt;span&gt;target_备份，&lt;/span&gt;里面还没有原target中的文件：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3021582733812949&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrHoCYQWePKOsHQ4q0vJx4p5oqS68icQqXTiccNVzderReP3iaE5X4D3XuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;278&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5248538011695907&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrLv2Rge2Hss00OcYQ1Ob4jIibwqcV3HmnPGaQ4HaDo7C0Zby1StJZBvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;684&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5341009743135519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrILt5tgSoH4469aZNiaEic6cUvwtic2icOTBY9Zfia8vjyoEibPFpryhHg1oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1129&quot;/&gt;&lt;/section&gt;&lt;section&gt;原目录中的文件此时已全部被拷贝到新目录&lt;span&gt;target_备份中：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4103671706263499&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrG4Qpgb7g2CrLIjiaROmTLicwxrENnUPLN6pPsvmC9tFSuGWD3jds2deg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;463&quot;/&gt;&lt;/section&gt;&lt;section&gt;创建消息队列：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7481389578163772&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrAXNsbIwglF8qVLGmKeFYjBo4jaCR7ZgrHP1bOo7BdbHic4l528mGOKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;806&quot;/&gt;&lt;/section&gt;&lt;section&gt;计算目录大小：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.49731471535982813&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcr1ToJznnbowrFmb9C8D7iaiamSX231ERh689m4f6exHP693FxgVl6oPHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;931&quot;/&gt;&lt;/section&gt;&lt;section&gt;显示拷贝文件的百分比：&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5357941834451901&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXXPXwsCia4shGCfaIxYdjGcrywSrc2iaymPU40soibcqo04yvVY8oV4G7NKrHjuOhaYGfSojy37k3TkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;894&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;注：1.使用fork函数和multiprocessing包两种方式实现的简单聊天室功能，可以在公众号后台输入“聊天室f”和“聊天室m”获取代码；2.上面这个实例（拷贝目录）的代码可以在后台输入“拷贝目录”获取。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍下期预告：线程&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>