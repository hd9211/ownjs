<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6f278d01c451a92987df11012b832a75</guid>
<title>美团民宿跨端复用框架设计与实践</title>
<link>https://toutiao.io/k/qf5akmk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1. 背景&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1.1 美团民宿业务介绍&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1.2 美团民宿移动端现状&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2. 美团民宿跨端复用框架设计&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3. 美团民宿跨端复用实践&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.1 跨端复用场景下的问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.2 跨端复用应用架构&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.3 跨端复用方式设计&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.4 跨端复用流程规范&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.5 跨端复用质量保障&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.6 成果&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4. 总结&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 背景&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.1 美团民宿业务介绍&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;美团民宿专注为消费者提供“住得不一样”的旅居体验，提供的服务包括民宿、酒店、公寓、客栈、短租、宾馆、旅行住宿等，同时包括树屋、房车、INS 风等新奇的网红民宿。美团民宿自上线之后，业务发展迅猛，在供给侧，房源类型不断丰富，各类分销、直销、直连、境外陆续推出，房源信息维度不断扩展，筛选、推荐、信息呈现也不断变得复杂。同时伴随着营销方式的丰富、房东管理、经营、服务的不断扩充，民宿的业务也越来越复杂。美团民宿大前端伴随业务的发展不断自我迭代，移动端整体架构也随之不断调整、升级，以寻求匹配业务多样化、复杂化的发展诉求。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.2 美团民宿移动端现状&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;业务的发展和跨端复用技术的不断演化，让美团民宿客户端从业务刚起步的单端 Native App，到跨  App（&lt;/span&gt;&lt;span&gt;民宿 App、美团 App、点评 App&lt;/span&gt;&lt;span&gt; ）的 Native 复用和以 SSR 弥补性能差距的 Hybrid 的结合方案，在这场性能和效率的博弈中，客户端最终落脚以 React Native（&lt;/span&gt;&lt;span&gt;以下简称 RN&lt;/span&gt;&lt;span&gt;）为核心的复用框架。在此同时，民宿小程序端也随着微信小程序的诞生、生态壮大、多平台化的趋势不断成长，逐渐形成多平台复用的小程序架构。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;521&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;269&quot; data-ratio=&quot;0.4502698535080956&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXa6EDq2MxRzKchoxKMjR8xKnQDJLLku5q9NFsUia5ic6Z4I8Lu1mia8gAiaiaEUWvKovoWiaS9oVZ8UMGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2594&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图1 美团民宿移动端原始架构图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上图是美团民宿移动端原始架构图，左侧是客户端的技术架构，iOS 和 Android 系统层之上是独立的 Native 基建层，再往上通过了 RN 打开双端的复用之门，接着以 RN 容器标准化屏蔽了宿主应用间差异，保障了容器化的一致性，进而实现了业务层的复用和跨 App 的复用。右侧是民宿小程序当前简化的架构图，我们在基建层做了多端适配，通过多平台复用构建工具实现了各平台小程序的复用。当前客户端和小程端相关独立，开发维护也相互独立，团队各司其职。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;尽管美团民宿 App 已经通过 RN 实现 iOS 和 Android 的跨端复用，但是由于 App 和小程序仍然需要投入双倍的人力成本进行业务迭代，所以我们思考一个问题：&lt;strong&gt;是否可以更进一步，使用一套代码解决多端，把 iOS App、Android App、小程序进行大一统。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 美团民宿跨端复用框架设计&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.1 行业现状&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;近几年，在微信小程序产品牵头下，业界也随之诞生出各种小程序应用，各端技术差异使得开发和维护成本都成倍增加。为了抹平原生开发、小程序开发、Web 开发等技术差异，一些优秀多端框架也就此诞生了。比如 Taro、uni-app、Rax、Remax 等，这些框架都是以自身定义 DSL （&lt;/span&gt;&lt;span&gt;一般是 React DSL、Vue DSL&lt;/span&gt;&lt;span&gt;）转换成各端应用（&lt;/span&gt;&lt;span&gt;微信小程序、RN、H5等&lt;/span&gt;&lt;span&gt;），从而实现一套代码，多端运行。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在美团民宿业务中，App 的交易占比较大，从业务角度出发需优先保障 App 的性能体验和需求开发效率，而当前的民宿 App 已迁移至 RN 技术栈。基于这两点，我们希望跨端复用方案的是：RN 转到小程序平台方案，所以上述的多端框架并不能满足我们的 RN-小程序跨端复用的诉求，为此美团民宿参考了业界多端设计方案，实现了基于 RN 转小程序复用的方案。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;RN 采用的是 React 语法，因此如何将 RN 转换为小程序，首先要思考如何将 React 代码转换成小程序可运行的代码（&lt;/span&gt;&lt;span&gt;简称小程序代码&lt;/span&gt;&lt;span&gt;），其次是 RN 基础组件库的适配。随着这几年的发展， React 代码转换成小程序代码在业界实践也是层出不穷，业界方案分为编译时与运行时两类，以下是这两类方案的简单对比：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWSMBnq3BwE0XbbCRpPOv6KPqCjdKbwSaTEIhXVvWGyXniaDdM1Tcz8cSoSm0lRkMAXVXbzVOtGdbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;768&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对比来看，重编译方案有一个严重的问题：语法限制。因为大部分前端开发者们已经对灵活的语法有一定的依赖性，比如会使用高阶组件、在条件判断的时候写很多 return 等等，这种写法很难在编译过程被准确命中。因此，编译时方案就会制定一些语法规则来限制开发者的写法。重运行方案则没有语法限制问题，可以随意使用各种 React 特性。它的实现原理是通过 react-reconciler 实现小程序平台对应的 React 渲染器（&lt;/span&gt;&lt;span&gt;以下简称 MP-Renderer&lt;/span&gt;&lt;span&gt;），从而来渲染虚拟 DOM 树。不过小程序没有 DOM API 可以更新界面，所以生成的虚拟 DOM 树数据是通过小程序的 setData 触发渲染层的更新，在渲染层里有一个通用模板可以用来渲染这些数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因重编译语法限制的问题，我们决定采用重运行时方案来实现 RN 转小程序。但重运行方案存在性能问题，难以满足业务的要求，我们经不断探索后设计了对应的方案极大提升了性能，下文会详细描述如何解决这个问题的。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2 整体方案设计&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2.1 RN 与小程序复用的技术方案&lt;/span&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.47518382352941174&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWSMBnq3BwE0XbbCRpPOv6KOMK6w9LVGywUS97jsx1ianM3vzzDepFSJ4Hib21aUQicaGIce5S6mU7Jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2176&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图2 RN与小程序复用技术方案图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整体架构分为两个部分：编译过程、运行过程。它的渲染方式与上文描述重运行时方案类似，都是通过 MP-Renderer 来处理 React 代码。下面我们来简要分析这两个过程：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;(1) &lt;strong&gt;编译过程&lt;/strong&gt;：该阶段对 RN 源码进行一定的转换处理，用于运行过程，编译后主要产生有以下产物：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;编译后的 RN&lt;/strong&gt; ：经过编译后产生 RN 代码，本质上还是 React 代码。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;适配组件库&lt;/strong&gt;：RN 基础组件的适配库，是使用小程序自定义组件实现的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;通用模板&lt;/strong&gt;：由于小程序没有像 Web 有 DOM API 操作节点操作方法，所以这里通过一个通用模板来渲染 React 渲染出来的 TreeData （&lt;span&gt;页面虚拟 DOM 树序列化后的 UI 数据&lt;/span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;合并模板&lt;/strong&gt;：主要用于性能优化的，下文会详细分析这个模板的作用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;WXSS&lt;/strong&gt;：将 RN 代码的 Style 转换为 WXSS，这样可以减少页面的 TreeData 数据量，从而优化性能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;(2) &lt;strong&gt;运行过程&lt;/strong&gt;：运行过程分为逻辑层和视图层两部分。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;逻辑层&lt;/strong&gt;：编译后的 RN 源码包含 RN 业务组件和适配组件库，适配组件库是通过小程序自定义组件来进行适配。这样的方式既可以灵活使用小程序原生代码对齐 RN 组件功能，也可以提升转换后小程序的性能，因为小程序原生代码不会产生 TreeData 数据，从而使性能上得到提升。逻辑层有一个 MP-Renderer ，实现方式和上文讲述的是一样的，RN 代码经过渲染后，便产生对应的虚拟 DOM 树，虚拟 DOM 树数据再经过序列化便产生对应的 TreeData（&lt;/span&gt;&lt;span&gt;描述页面的 UI 数据&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;渲染层&lt;/strong&gt;：当页面需要更新的时候，逻辑层通过 setData 将 TreeData 传输到渲染层里，TreeData 与通用模板、合并模板和对应样式结合在一起，便可以渲染出对应的 UI。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;综上所述，上述整体设计与业界多端框架有点类似，但是也有不同点，主要体现在适配组件库和合并模板。适配组件库上文有解释比较好理解，而合并模板这里可能大家还是比较有疑惑的。其实这个合并模板内容是由编译过程的 “静态编译” 转换生成的，这样的处理方式是为提升转换后的小程序性能，接下来，我们会着重来讲述这个性能解决方案。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2.2 性能解决方案&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;重运行时方案性能损耗原因是什么？正如上文所说，重运行时方案会将所有 React 代码对应的 TreeData，再通过小程序 setData 传输到渲染层，当页面初始化或者大数据更新的话，setData 就需要传递比较大的一个数据，因此也就会造成对应的性能问题。所以要解决这种方案的性能问题，核心就是要减少 TreeData 数据量。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在上述 RN 转小程序方案，有提到适配组件库、样式转换等是可以起到对应性能优化作用的，它的优化原理正是通过减少 TreeData 数据的方式。尽管这些方式可以优化性能，但是在页面比较复杂的时候，TreeData 数据量仍然会保留比较大，因此优化效果并不明显。为此，我们思考一种新的方式来进一步压缩 TreeData 的数据量，也就是前文所提到的结合静态合并树节点方案，在讲述该方案前我们先来看下一个 RN 代码转换为 TreeData 的例子：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.39194139194139194&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWSMBnq3BwE0XbbCRpPOv6KIRlNian0C0RSO0QA4VyTCuwC7TfDUlvNrp6DmLVmdAocbIM0MBqhCHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2184&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图3 RN代码转换TreeData示例图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如上图所示，RN 代码转换后的 TreeData 是一个描述 UI 树的 JSON 数据，等同于右侧的 UI 树，将这颗树的节点进行分类，可以分为静态数据和动态数据，比如 View、Text 节点就是静态数据，而 “Hello”、“World” 则是动态数据。所谓静态数据，就是编译过程可预知的，因此这些数据是不是可以转换另一种形式来描述 UI 呢，从而减少 TreeData 的数据量。答案是肯定的，静态编译合并树节点正是通过这样的原理来实现的，如下流程所示：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4139834406623735&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWSMBnq3BwE0XbbCRpPOv6KPvKIsbzrgNTAEeaNL2UiaOGBDZkPLnb0eFrjuXTQG7PumcwaSBQCbAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2174&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图4 静态编译合并树节点原理图-1&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个方案有两个动作，分别是静态编译和合并树节点，静态编译就将 RN 代码的转换成合并模板，如上图序号 2 代码所示，合并模板的名称为 “b1”，内容就是一段与 RN JSX 代码对应的 WXML 结构片段。而合并节点是将已经静态编译的节点进行合并，如上图序号 2 至序号 3 流程所示，原本五个节点被合并到顶层的 View 节点，这个 View 节点称为合并节点，合并节点需要记录合并模板的名称和相关的动态数据，目的是为了渲染时让合并节点可以找到对应的合并模板进行渲染，经过这样合并节点后，最终生成的 TreeData，如上图序号 4 所示。可以看到 TreeData 相比之前的数据量就减少了 60% 左右！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看到这里，是不是有同学就有疑问了，上文不是提到静态编译会有语法限制，那这里是否会有语法限制？确实，如果是完全静态编译，是会有语法限制，而这里所说的结合静态编译是有选择性的编译，即在编译过程，首先会通过 AST 分析节点是否静态数据，如果是的话，再转换成对应的合并模板。如果遇到不可预测的动态节点，则按照运行时方案去处理。因此，最终生成的 UI 树节点即会包含合并节点、也会包含原本的组件节点，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.42234848484848486&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWSMBnq3BwE0XbbCRpPOv6KtGe3O8WqdiaQaGB5eibkcuVloIibdeKWDqPYiaBqB2DcJbmWAX3ZPYMRww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2112&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图5 静态编译合并树节点原理图-2&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过这样的方式，既可以保证语法无限制，又能通过编译结合的手段最大化优化性能。当然了这种方案也是有缺点，因为这种方案其实是用空间换性能的方式，生成的合并模板会影响会影响包大小，不过对于一些需要追求性能的页面，这点包大小的增加是值得付出的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了更好地衡量解决方案对性能的提升程度，我们参考 Taro 官网的实验（&lt;/span&gt;&lt;a href=&quot;https://github.com/NervJS/taro-benchmark&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;实验内容&lt;/span&gt;&lt;/a&gt;&lt;span&gt;），对优化前后以及原生和 Taro 3.0 运行后的性能指标进行采集与比较。经过实验，统计出各框架在初始化、加载数据、加载大量数据的操作耗时，如下表所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2793594306049822&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXa6EDq2MxRzKchoxKMjR8xj5VRsicXyrFBIicov0jJ1w4xz2spUxNDoiangORvHYSia2WRx4RZLxibXBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1124&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从上表中可以看出：性能优化后，得益于更少的渲染数据与更精简的节点树，加载数据的操作耗时比优化前减少 80% ，初始化耗时减少了 52%。与同类型的框架 Taro 3.0 相比，也有更好的性能表现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;与原生相比，优化后性能差距明显减少，但是由于运行时方案相对于原生需要更多的 setData 数据开销和更复杂渲染流程，所以从原理上运行时方案和原生性能差距客观存在。尽管如此，业务实践上两者差距并不会那么明显，因为在测评实验中测试数据比较纯粹，setData 数据使用率较高，但在业务实践中原生开发 setData 数据难免冗余且难以优化，而运行时方案会默认优化冗余数据使得两者性能差距更接近，从我们历史业务实践数据上看，性能与原生差距在 10% 左右。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 美团民宿跨端复用实践&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在跨端复用探索中，我们用创新的方案解决了性能和特性限制的难题，设计了 RN-小程序跨端复用框架。虽然跨端复用属于“利器在手”，但是这是一把“双刃剑”，用得其所则事半功倍，处理不当则隐患丛生。那么，如何在业务实践中驾驭好这把利刃呢？我们先介绍在业务实践中遇到的问题，然后介绍解决这些问题的方案。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 跨端复用场景下的问题&lt;/span&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;复用场景下的问题&lt;/strong&gt;：小程序产品形态以轻、快、便为旨，用户可快速使用，用完即走，客户端产品相对全、精、稳，可以满足更多的用户需求，以用户留存、用户认知、用户体验为主，两者在产品功能上存在较大的差异，如何恰当地处理产品差异化问题是跨端复用的场景下的一个重要挑战。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;跨端复用质量隐患&lt;/strong&gt;：实现了复用便要考虑两端的各种兼容性问题，这就会产生各种质量上的隐患。如何在复用组件不断迭代中，保障组件接口、输入、输出的兼容性问题？如何保障各个复用组件底层依赖的统一、适配层接口的统一？双端复用场景下，如何更好的做测试和监控？双端同学存在各自技术认知的边界，如何在出现问题时快速排查、及时止损？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;跨端复用流程规范问题&lt;/strong&gt;：新的技术革命，必然打破旧的秩序，在当前跨端复用场景下，各种包括工程管理、代码规范、分支管理、需求同步的问题也会孕育而生，同需解决。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 跨端复用应用架构&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了解决跨端复用在业务实践中遇到的各种问题，我们重新设计了跨端复用应用架构，从架构分层管理、复用方式设计、流程规范、质量保障方面入手，重点解决跨端差异化、质量隐患、流程规范各种问题，并寻求复用的最大化和性能上的均衡。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2.1 跨端复用应用架构演进&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这里，先贴出动态的架构演进过程，让大家有一个宏观的认识。我们先简单地描述下演进过程，后续会基于最终的架构图再做详细的介绍。大致演进过程如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.562962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/hEx03cFgUsWSMBnq3BwE0XbbCRpPOv6KTiaEwh7yh2LtU1MPA8tt7VxUR5pic74DiciajL9qYCPCZsIMUlmiaWTCxKw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt;图6 跨端复用架构演进动画图&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;起初，客户端分 Android App 和 iOS App 单独开发，引入 RN 技术实现了 Android 和 iOS 跨端复用，但是小程序端依然需要单独维护迭代。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为了跟进一步实现 RN-小程序跨端复用，我们接入了自研的 RN-小程序跨端复用框架，并基于框架的适配规范，以 RN 的基建为基准，打造出一个和 RN 基建统一接口的小程序适配层。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;完成小程序渲染器接入（&lt;/span&gt;&lt;span&gt;MP-Render&lt;/span&gt;&lt;span&gt;）和小程序适配层后，React-Reconciler 这一层就可以打通到小程序侧，实现了 React 代码复用到小程序的能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;实现 RN 与小程序间的复用后，就可以对存量的 RN 代码进行抽象、适配、整理，进而抽取出一个组件复用层，这个复用层可直接供上层业务层直接使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;最后，为了解决跨端复用场景下各种流程、协作和质量隐患，我们配套了相应的流程规范和质量保障措施。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2.2 跨端复用应用架构整体介绍&lt;/span&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5076810534016094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWSMBnq3BwE0XbbCRpPOv6Kia7n5cRYQ2ZHu9AM5umeqIA1hftPXM1EmEGYCrppzdn0A6D4AZcpUAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2734&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图7 跨端复用应用架构图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整个民宿的 RN-小程序跨端复用架构图如上，我们按照从下到上，从左到右的视角进行解读：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;系统层&lt;/strong&gt;：最底层是系统服务，除了 iOS 系统和 Android 系统外，我们把小程序视为一个单独的系统模块。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基础服务层&lt;/strong&gt;：系统服务之上是基础服务层，这一层主要是集团基于 Native 和小程序建设的基建，全公司通用，覆盖了研发工程中方方面面的基础服务。在此基础上，我们在小程序基建中引入了基于 react-reconciler 实现的小程序运行时渲染器（&lt;span&gt;MP-Render&lt;/span&gt;），这个渲染器能在运行时动态更新 vnode 以匹配编译转化的小程序 UI 模板，调用小程序原生 API，最终渲染出小程序组件，有了这个基于 React 的小程序渲染器便使得跨端复用成为可能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基建层&lt;/strong&gt;：基础服务层之上是基建层，这块主要包括 MRN 基建和小程序适配层，我们以 MRN 的基建为标准，适配出一个统一标准和统一接口的小程序适配库，通过这一层适配，上层可以无感知、无差异地以同一标准实现复用组件。其中适配层分为 2 块，下半部分主要适配 RN 基础服务，上层是民宿业务独立封装的基础库和第三方库，这块我们单独引入一个名为 Mapping 的适配库。一个独立的适配库可以让 RN 和小程序在业务迭代和技术变革过程中相互独立，互不干扰，如此就能保障技术的推进完全不会影响业务的迭代。基建层的最上方是 react-reconciler，React 框架本身就是把协调过程和渲染过程分开的，react-reconciler 是实现跨端复用的核心，所以我们把它单独展示出来，它真正打通了客户端和小程序的隔阂，只要有了一个独立的小程序渲染器，就可以全面、无限制的把 React 代码复用到小程序。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;复用层&lt;/strong&gt;：基建层再往上是复用层，复用层主要以组件维度做复用，复用组件是基于存量 RN 组件做抽象和适配，然后抽取独立出来，复用层的组件以统一的标准和接口供上层业务使用。复用层是很重要的一块，好的复用机制能帮助我们解决前面提到的产品差异化问题和复用最大化问题。这块我们单独放到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;3.3 跨端复用方式设计&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 来详细讲解。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;业务层&lt;/strong&gt;：复用层之上就是业务层，业务层的各模块主要以页面容器来承接复用组件，基于不同的端和产品差异，可以灵活、动态配置页面的组件来满意业务的差异化需求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3 跨端复用方式设计&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;差异化问题，一直是跨端复用场景中的一个痛点，双端的产品上、平台上、代码上的差异如何妥善的处理、适配，也是我们一直思考的问题。而好的差异化处理方案可以提升代码的可维护性、降低质量隐患、提升开发效率。我们从复用设计层面出发，探索出页面复用模式、组件复用模式、“组件+逻辑复用”模式等三种复用设计方式，并且根据不同的场景下采用不同的复用模式，可以较好地处理跨端差异化问题，同时能兼顾效率提升、性能体验和可维护性。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3.1 差异化下的复用方式&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们自研的复用框架提供两种复用模式，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5927889713679746&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWSMBnq3BwE0XbbCRpPOv6KXskU07ZbXZeCJOOJILTg3vgF5mPWCujiaoI4pZD2KP7l1MEoAccrc2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1886&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图8 小程序复用方式原理图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;页面复用模式&lt;/strong&gt;：页面模式基于页面维度的，可以直接把页面的网络层、逻辑层、数据层以及页面内的组件集全部转换复用，这样可以达到复用的最大化，代码复用率能达到 90% 以上，人效提升明显。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;组件复用模式&lt;/strong&gt;：组件模式是基于组件维度的，复用以页面中的业务组件为目标，把页面的所有组件抽象、解耦、规范化之后抽取为复用组件。组件模式只能复用组件内代码，对于页面容器的逻辑交互、网络层都需要小程序自己实现，代码复用率相对较低，但是组件复用更灵活、可控，可随意插拔、拼接、定制。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以下是两种复用模式的优劣分析。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;页面复用模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提效明显：整个页面包括所有组件、页面逻辑层网络层一并打包转换复用，代码复用率极高，开发效率提升幅度更大。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;接入成本低：整个页面直接转化同步复用，无需小程序同学协助接入，减少双端协助、接口沟通带来的出错风险。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;劣势&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;灵活性低：业务差异和小程序特性不易处理，双端差异适配只能在 RN 上做，代码易出错，维护成本高。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;性能劣势：整体页面由 RN 转换复用而来，页面一次性渲染，性能上会略差一些，而且做页面级的性能优化困难。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;包大小风险大：整页复用情况下包大小较大，且不能动态调配（&lt;/span&gt;&lt;span&gt;比如页面内某一模块需求迭代较少，不想复用，但是页面模式做不到动态移除&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;组件复用模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;轻便灵活：组件如插件般可随意插拔、拼接、定制，可较好解决 App 和小程序双端的差异性问题，针对差异点双端可以独立实现，提高项目的可维护性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;性能较好：页面容器依然是小程序原生组件，如滚动、滑动组件采用原生可减少性能损耗，另外组件分布式 setData 渲染有更好的性能，不会像整页一次性渲染导致 setData 数据量较大影响首屏加载性能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;性能优化空间大：不会影响做页面维度的性能优化（&lt;/span&gt;&lt;span&gt;如首屏优先、请求前置&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;包大小可控：组件是否复用可以动态调配，比如把页面中迭代较少的组件不复用以减少包大小。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;劣势&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提效有限：组件模式只能复用组件内的代码，代码复用率较低，页面容器、逻辑层、网络层小程序依然要自己维护一份代码。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;复用组件维护成本高：组件的接口要考虑组件升级迭代的兼容性、可维护性问题，管理不当，容易产生质量隐患。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;接入成本较高：小程序需要实现 RN 的页面逻辑，然后按照组件接口进行接入，有更高的接入成本。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;两组复用模式各有利弊，页面模式复用率高，但是灵活性低、性能欠佳；组件模式轻便灵活，性能可控，能较好的处理平台差异化问，但是复用率低、维护成本高。我们在想有没有一种方案能保留组件模式的灵活性，又能降低组件维护成本、提高复用程度。在业务实践中，我们探索出一套“组件+逻辑复用”的模式，可以较好地解决上面提到的问题。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3.2 差异化下的逻辑复用&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“组件+逻辑复用”模式依然保留组件复用的方式，但是在组件复用基础上增加了逻辑层（&lt;/span&gt;&lt;span&gt;包括页面逻辑、网络、数据层&lt;/span&gt;&lt;span&gt;）的复用，这样保留了组件灵活性，也增加了复用性。具体设计如下图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5669835782195333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWSMBnq3BwE0XbbCRpPOv6KsT5hcntDPvT1JZp4aJQiabVJeWfkxhcppI1ydjAr22p5DqZOgl2c5xQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1157&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图9 组件+逻辑复用模式原理图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整个组件+逻辑复用模式设计图如上，我们按照图片标注的序号进行一一解读：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;逻辑复用接口实例&lt;/strong&gt;：在小程序的页面容器中，通过注入的方式获取逻辑层复用的接口实例，通过这个实例便可以调用接口实现获取、更改、监听 Redux 的状态，实质上就达到了逻辑复用的效果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;页面复用组件集&lt;/strong&gt;：页面可以自由使用复用组件，复用组件可大可小，可以虽然拼装布局，保留了组件模式良好的灵活性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;小程序原生组件&lt;/strong&gt;：页面既可以使用复用组件，也可以用小程序原生组件来实现小程序差异化的功能和特性，这样能较好的处理双端差异性。小程序原生组件可以通过 逻辑复用接口实例 来调用逻辑层功能，进而达到逻辑复用的效果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;弹窗复用组件&lt;/strong&gt;：弹窗复用组件和页面复用组件同理，这边主要说明可以按照各类维度把复用组件分类，进而更好的做复用组件管理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;复用组件库&lt;/strong&gt;：复用组件库的复用组件可多可少，可大可小，如果页面双端差异性小，一个大组件即可满足。每个复用组件集外层包一层 Reudx-Provider 并设置相同的 Store，便可以和逻辑层自动绑定上。因为 RN 组件本身就是基于 Redux 的，所以复用过程相对容易。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;业务逻辑层&lt;/strong&gt;：最右侧的业务逻辑层可以简单理解成3块，一块是基于 Redux Store 的数据层，这里存放整个页面模块所有的数据和操作、监听数据的接口，一块是包含页面内所有网络请求的网络层，另外就是用来流转状态和处理复用的 Reducer、Redux-Saga，以及配套的各种工具类。业务逻辑层可以根据双端的差异把 Reducer 与 Saga 分拆更小的单元实现差异化的逻辑复用，提升逻辑复用层的代码可维护性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;封装复用接口&lt;/strong&gt;：业务逻辑层包含整个页面的业务逻辑，只要针对性开放接口给小程序，让小程序可能获取、更改、监听 Redux 的状态，那实质上就达到了逻辑复用的效果。开放接口给小程序有 2 种方式：逻辑 API 接口 和 Store。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;逻辑API接口&lt;/strong&gt;：基于 Store 给小程序提供小程序真正需要的逻辑 API 接口，通过这些 API 小程序可以来获取数据来渲染 UI（&lt;/span&gt;&lt;span&gt;如：渲染没有复用的组件&lt;/span&gt;&lt;span&gt;），也可以更新数据，也能监听复用组件内部的数据变化。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Store&lt;/strong&gt;：把 Redux Store 暴露出去，小程序便利用 Store 实例可以通过 getState、dispatch、subscribe来操作、监听状态机了，也就达到逻辑层复用的目的了。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这种方案的优势很明显，它保留组件模式的灵活特性，可以比较方便做差异化处理和性能优化。而逻辑复用层把 Redux 包含进来了，这样不仅转化容易、不易出错，而且逻辑复用接口基于 Redux 的 Store，接口较好设计，容易维护、不易出错。而对于逻辑层，可以根据业务上一些差异做 Reducer 与 Saga 分拆，把不需要复用的代码逻辑排查在外，逻辑层复用也可以做到像组件一样热插拔，按需引入，这样也比较好做差异化代码管理，挺高项目的可维护性，同时也能优先减少包大小风险。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.4 跨端复用流程规范&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为在代码跨端复用过程中尽可能提升开发效率并避免引入质量问题，我们制定了差异化编码规范、需求同步规范、复用组件规范等开发流程规范，以下将通过 RN 到小程序产品需求同步过程进行简单的介绍。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.09295774647887324&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWSMBnq3BwE0XbbCRpPOv6Kok8te1ibsV4vJ4U9FB3iaS5s2AMJYvic24wxEZ5m8GQGe0ykcEVokj0dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1065&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图10 跨端复用流程规范图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;1. 评估业务需求是否需要同步&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;针对 PM 提出需要同步的需求，客户端尽量将 RN 业务代码复用至小程序，以提升开发效率。无需同步的需求将通过差异编码规范进行控制，避免同步至小程序后增加潜在风险与测试成本。通常可使用平台判断（&lt;/span&gt;&lt;span&gt;如 iOS、Android、WX_Platform&lt;/span&gt;&lt;span&gt;）的方式控制业务代码是否打入复用组件包，也可通过 module.rn.js、module.wx.js 不同后缀文件方式完成相同接口不同逻辑的实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;2. 评估是否有关联依赖需求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如明确业务需求需要同步，先判断该需求是否有前置需求依赖，再评估技术方案。如无依赖可直接开始复用适配工作；如有依赖，需判断前置需求能否一起同步或做适当降级，以此递推，避免因前置依赖需求未同步出现不符合预期的问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;3. 制定 RN 组件适配与小程序接入方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;明确需求同步范围评估工作后，需完成以下技术评估工作：（1）明确需求是否需要新建复用组件还是在原有的复用组件上进行迭代。如需新建复用组件 NPM 包，需根据组件复用规范进行技术选型，确定使用“组件+逻辑复用模式”、“页面模式”还是“组件模式”，并制定相应的复用组件接口协议；（2）明确该需求是否需要开发 RN-小程序映射方法、组件，并评估相应的开发量。完成技术评估后需提前与小程序侧沟通接入排期。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;4. RN 组件适配开发&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;客户端完成 RN 侧需求开发后，便可进行复用组件适配小程序开发。完成适配开发工作后需在 RN 页面与小程序 Demo 页面中对复用组件同时进行测试，避免在适配小程序过程中引入 RN 页面 Bug。复用组件测试完毕后将 NPM 包以及相应的接口文档提供给小程序接入，但在打包前需严格审查当前版本与上个版本间的 diff，避免不符合预期的代码也被同步至小程序。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;5. 小程序接入 RN 适配组件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;适配完成后将组件打包提供给小程序侧接入，接入后需在美团民宿小程序环境下再次进行自测。原则上客户端同学提供适配好的 RN 组件后，由小程序侧同学接入并测试，但我们也鼓励客户端在完成 RN 组件开发与复用适配后，一并完成小程序侧的组件接入工作，这样需求开发完整度更高，并能有效减少跨端开发下的沟通成本。后续随着大前端融合推进，RN-小程序代码复用率将逐步提升，客户端（&lt;/span&gt;&lt;span&gt;iOS、Android&lt;/span&gt;&lt;span&gt;）与 小程序代码将倾向由一名同学完成多端开发。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;6. RN 适配代码合入迭代分支&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;需求在小程序测试完毕后，将 RN 组件适配 Feature 分支代码合入 Release 迭代分支，并在客户端（&lt;/span&gt;&lt;span&gt;iOS、Android&lt;/span&gt;&lt;span&gt;）打包上线。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.5 跨端复用质量保障&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;跨端复用场景下存在包括复用组件接口兼容性问题、组件间的依赖隐患问题、测试和监控的缺失问题，以及故障排查困难等各种质量隐患，我们在业务实践中，也探索出一系列解决这些隐患的质量保障措施，包括组件接口维护、组件依赖管理、双重自测卡控、异常监控融合、双端故障 SOP、跨端复用流程规范 。这些措施能有效保障复用场景下双端的线上质量，民宿业务在跨端复用推进中，因为这些措施的保障护航，没有出现任何的线上故障。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;1. 组件接口维护&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;复用组件随着业务迭代会不断更新升级，组件升级过程中便会带来的组件接口、输入、输出的变动，进而产生兼容性隐患，比如组件输入参数类型变动，而小程序端或RN端没有及时兼容或者未知晓，非常容易引发线上质量问题。为此，我们制定了组件接口维护计划，包括复用组件接口规范、组件版本管理规范、组件接口文档建设等。复用组件接口规范要求复用组件接口、参数必须严格按照规范来，如参数类型使用基础类型、只增少减原则、接口命名清晰、参数个数限制等等，减少双端的接入组件难度，避免参数频繁变动产生质量隐患。组件版本管理规范要求组件版本升级必须遵循語意化 2.0，并且有相应的版本升级文档。组件接口文档建设也是很重要的一环，每个复用组件都有相应的文档维护，记录参数的增删改查，接入方对组件接口变动一目了然，自然减少了接入风险。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;2. 组件依赖管理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;组件依赖主要存在两个问题，第一，复用框架本身也在不断升级优化、新的复用组件可能用新的编译版本转化而来并且依赖新的运行时渲染器，但是旧的复用组件可能会出现不兼容问题，因此我们开发相关的工具，如果组件依赖的运行时渲染器版本和小程序内置的不一致就会发出警告，提示组件兼容性问题。第二，因为不同的复用组件来自不同的RN模块，它们可能依赖不同版本的第三方库，容易产生版本不一致的质量问题。目前的解决方案是把这些依赖库分别打入各自的包里，这样复用组件间依赖相互独立，互不影响。再结合 Tree-Sharking 的优化，打入的依赖的真实包大小并不大，用小量的包大小换取更稳健的质量保证。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;3. 双重自测卡控&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在跨端复用场景下，一个复用模块的改动要考虑双端兼容和新旧版兼容问题，相比与之前有更高的出错风险，更全面的自测能帮我们尽早暴露问题，减少故障风险。所以我们在 App 侧和小程序侧做了代码自测覆盖率卡控，要求改动代码执行覆盖率超过 90% 才能提测和上线。复用组件既在 RN 侧自测过一遍，在小程序接入后又强制要求再自测一遍，双重自测卡控更能保障组件质量和线上质量。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;4. 异常监控融合&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;RN 和小程序侧都有单独的异常监控机制，包括 JS 异常监控、API 异常监控、自定义异常监控等。但是双端的异常监控机制差别较大，在复用场景下两者交叉混用导致异常监控体系混乱，上报数据格式、策略、日志不统一而造成监控体系误告、漏告、排查困难、运维混乱等问题。所以我们把双端的异常监控模块打通，适配了底层异常上报逻辑，统一了双端的上报规范，告警策略、日志、处理流程。异常监控体系双端融合后，异常上报、监控、运维都顺畅许多，也帮我们发现不少的线上异常，是 RN-小程序跨端复用场景线上质量的坚固屏障。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;5. 双端故障SOP&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;鉴于双端同学存在技术上的隔阂和信息不对称，当出现复用组件的故障或异常时，如何快速排查问题成为一个痛点，小程序的错误日志 RN 同学不熟悉，小程序同学不熟悉 RN 的业务代码实现，框架层面的错误更难排查。为此，我们整体了梳理双端故障 SOP，这里面包括常见日志分析帮助鉴别是复用组件、小程序端、底层复用框架的问题和相应的解决方案，同时开发了 Source Map 错误反解工具协助RN同学反解小程序日志帮助快速排错等等。这些 SOP 和工具能够在第一时间帮助双端同学自主或协助排查相关故障，快速止损。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;6. 跨端复用流程规范&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;流程规范包括前面提到的复用组件规范、编码规范、需求同步规范、分支管理规范等等也是质量保障的重要的一环，它让研发流水线每一环都有严格的法律约束，保障整条研发流水线最终能把完整的产品交付到用户手里。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.6 成果&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;RN-小程序跨端复用的设计方案在业务实践中不断完善，探索出效率相对最大化的复用模式。从开发效率角度来看，提升显著。我们总结了代码复用率与人效提升率来评估效率的提升，两个指标具体计算公式如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;代码复用率&lt;/strong&gt;：∑（RN 复用模块代码行数-模块中 RN 与小程序平台分支判断代码行数）/ ∑（RN 代码总行数+小程序原生代码行数）；其中，RN 复用模块代码行数是根据框架转换生成的组件来确定。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;人效提升率&lt;/strong&gt;：∑（RN 开发耗时 + 小程序开发耗时 - （RN 开发耗时 + 转换适配耗时）） / ∑（RN 开发耗时 + 小程序开发耗时）；复用前需要RN与小程序侧两端的开发耗时，复用后只需要 RN 开发与复用组件转换适配的耗时，根据复用前后的耗时可以得出人效提升率公式。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据转换采用的模式不同，可以得出代码复用率与人效提升率，如下表所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3136729222520107&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXa6EDq2MxRzKchoxKMjR8xG9ZohB3EFic891Q0s221j4PI9W6VibykHbXHxhrQx7NVWUysibnvkqlicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;746&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从表中可以看出，页面转换模式复用了页面与组件的代码，代码复用率可以达到 90% 以上；组件复用模式复用了组件与部分业务逻辑代码，复用率也可以达到 76%。在人效提升方面，所有模式都能达到较高的人效提升率，代码复用率越高人效提升率也越高，页面转换模式可以复用页面与数据状态处理逻辑人效提升比组件转换模式更高。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. 总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;民宿大前端团队为解双端研发效率之痛，倾力而寻跨端之技，浅尝百草、深谙其理而后自建之，举偏补弊、终解跨端框架性能之桎梏，青出蓝而胜于蓝。而后践于实业，瑕弊昭然若揭。为此，重设框架以谋其变（&lt;/span&gt;&lt;span&gt;复用架构设计&lt;/span&gt;&lt;span&gt;），寻之新式以尽其效（&lt;/span&gt;&lt;span&gt;复用模式设计&lt;/span&gt;&lt;span&gt;），立之新法以固其序（&lt;/span&gt;&lt;span&gt;跨端复用流程规范&lt;/span&gt;&lt;span&gt;），磨之利器以护其城（&lt;/span&gt;&lt;span&gt;跨端复用质量保障&lt;/span&gt;&lt;span&gt;），至此成果初成。然朝夕变化不休，路漫远兮，吾当持之求索以适其变、顺其道。跨端复用前行之鉴，故记以文，望有启示，文毕。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作者简介&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;凯林、森伟、熙辰、戈弋、少元等，均为美团民宿前端团队研发工程师。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e17216dd6269a666c9091523942352d2</guid>
<title>.NET Core 服务在 ARM64 服务器中的部署</title>
<link>https://toutiao.io/k/9obl8ig</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;p&gt;Linux 服务器 CPU 架构主要可分为：&lt;code&gt;X86_64/AMD64&lt;/code&gt;、&lt;code&gt;ARM64/AARCH64&lt;/code&gt; 两大类，大多情况使用的都是基于 AMD64 CPU 架构的服务器。但随着国产操作系统、CPU 等自主生态打造的应用产品得到越来越多的用户认可和应用，如：华为鲲鹏、统信 UOS 这类服务器不断被采购使用，而它们均有采用 ARM64 CPU 架构，所以 .NET 程序如果需要在更多的国产服务器中运行，适配 ARM64 CPU 架构将是开始的第一步。&lt;/p&gt;&lt;p&gt;本文的介绍并不是一个简单的 Demo 示例，而是基于一个较大项目适配 ARM64 架构改造的经验分享。&lt;/p&gt;&lt;p&gt;该项目的大概背景如下：&lt;/p&gt;&lt;p&gt;当时提出整个项目需要支持在 ARM64 CPU 架构的服务器中进行部署时，其实并没有太多担忧，因为 .NET Core 的跨平台能力与生俱来，所以随便找了个服务来测试，结果马上被打脸了，跑不起来。接着一度怀疑是运行环境的问题，尝试多次重装 .NET Core SDK，并测试了多个版本，结果还是失败。经过一番研究与确认，主要是以下3个问题：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;服务启动时加载 &lt;code&gt;Confluent.Kafka&lt;/code&gt;（Kafka 操作的封装库）会出现如下错误：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Unhandled exception. System.DllNotFoundException: Failed to load the librdkafka native library.&lt;br/&gt;  at Confluent.Kafka.Impl.Librdkafka.Initialize(String userSpecifiedPath)&lt;br/&gt;  at Confluent.Kafka.Consumer`2..ctor(ConsumerBuilder`2 builder)&lt;br/&gt;  at Confluent.Kafka.ConsumerBuilder`2.Build()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该问题的原因是在发布代码中并不包含在 &lt;code&gt;linux-arm64&lt;/code&gt; 运行所需的 &lt;code&gt;librdkafka.so&lt;/code&gt;，解决方法其实比较简单，因为我们的项目引用的 &lt;code&gt;Confluent.Kafka&lt;/code&gt; NuGet 包版本相对较低，在高版本中已包含对 &lt;code&gt;linux-arm64&lt;/code&gt; 的支持，所以只需要对引用了 &lt;code&gt;Confluent.Kafka&lt;/code&gt; 的项目基础包进行升级，然后相关服务升级基础包即可。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.10914927768860354&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SK0Jmub4Fkhbv70YBOaMiasonZZL7hQjUuJYmFRyJZ1KUiaK7uoBXIqVRKwZ4S6hGMCaPbQ2twHTb7LkrxOEMghQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;623&quot;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务启动时加载 &lt;code&gt;Grpc.Core&lt;/code&gt;（gRPC 核心实现）会出现如下错误：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Unhandled exception. System.IO.IOException: Error loading native library &quot;/usr/local/temp/program/publish/runtimes/linux/native/libgrpc_csharp_ext.x64.so&quot;. &lt;br/&gt;  at Grpc.Core.Internal.UnmanagedLibrary..ctor(String[] libraryPathAlternatives)&lt;br/&gt;  at Grpc.Core.Internal.NativeExtension.LoadUnmanagedLibrary()&lt;br/&gt;  at Grpc.Core.Internal.NativeExtension.LoadNativeMethods()&lt;br/&gt;  at Grpc.Core.Internal.NativeExtension..ctor()&lt;br/&gt;  at Grpc.Core.Internal.NativeExtension.Get()&lt;br/&gt;  at Grpc.Core.Internal.NativeMethods.Get()&lt;br/&gt;  at Grpc.Core.GrpcEnvironment.GrpcNativeInit()&lt;br/&gt;  at Grpc.Core.GrpcEnvironment..ctor()&lt;br/&gt;  at Grpc.Core.GrpcEnvironment.AddRef()&lt;br/&gt;  at Grpc.Core.Channel..ctor(String target, ChannelCredentials credentials, IEnumerable`1 options)&lt;br/&gt;  at Grpc.Core.Channel..ctor(String target, ChannelCredentials credentials)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该问题相对复杂很多，引用 &lt;code&gt;Grpc.Core&lt;/code&gt; 后，程序在发布时也会生成对应运行平台的 runtime 文件 &lt;code&gt;libgrpc_csharp_ext.x86.so&lt;/code&gt;、&lt;code&gt;libgrpc_csharp_ext.x64.so&lt;/code&gt;，很显然也是没有对应 &lt;code&gt;linux-arm64&lt;/code&gt; 的版本。与 &lt;code&gt;Confluent.Kafka&lt;/code&gt; 不同，官方并没有打算默认支持的意思，只是提到如果需要可自行基于源代码编译。在 Github 的 Issue 讨论中也看到另外一种解决方案，可是将 &lt;code&gt;Grpc.Core&lt;/code&gt; 替换成 &lt;code&gt;dotnet-grpc&lt;/code&gt; ，&lt;code&gt;dotnet-grpc&lt;/code&gt; 是官方随 .NET Core 3.0 一起发布的一个 gRPC 扩展组件，没有额外的 runtime 文件的依赖，但是替换成  &lt;code&gt;dotnet-grpc&lt;/code&gt; 的时间成本相对较高（虽然这条路看上去之后还是得走，&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNTMxMzg1MA==&amp;amp;mid=2654083863&amp;amp;idx=1&amp;amp;sn=09f25e5940475b195f22e5e329ccf9ff&amp;amp;chksm=80d83f42b7afb654023c5c4a0aca7bbebea2d04832b76b67ceb518d8f08bad4492c2488deac1&amp;amp;xtrack=1&amp;amp;scene=21&amp;amp;subscene=93&amp;amp;sessionid=1620348840&amp;amp;clicktime=1620348850&amp;amp;enterid=1620348850&amp;amp;ascene=56&amp;amp;devicetype=android-29&amp;amp;version=28000339&amp;amp;nettype=WIFI&amp;amp;abtest_cookie=AAACAA==&amp;amp;lang=zh_CN&amp;amp;exportkey=ARmQKNOe/W7USRyKA4ef7to=&amp;amp;pass_ticket=8hzLAjpxEWLkjiCES6BDHXUvFqzQPN6ZVBvy6xQF3VIcfktUGdR9saYCaFWLqSbe&amp;amp;wx_header=1#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;gRPC 在 C# 中的未来属于grpc-dotnet &lt;/a&gt;），所以当前选择了自编译的方式。&lt;/p&gt;&lt;p&gt;以下是基于 Debian ARM64 CPU 架构服务器上编译操作。&lt;/p&gt;&lt;p&gt;安装基础依赖组件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential autoconf libtool pkg-config&lt;br/&gt;sudo apt-get install libgflags-dev libgtest-dev&lt;br/&gt;sudo apt-get install clang libc++-dev&lt;br/&gt;sudo apt-get install cmake&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;拉取 grpc 源码（项目当前使用是 v1.22.1）&lt;/p&gt;&lt;pre&gt;&lt;code&gt;git clone -b v1.22.1 https://github.com/grpc/grpc&lt;br/&gt;cd grpc&lt;br/&gt;&lt;br/&gt;# 获取依赖的子模块&lt;br/&gt;git submodule update --init&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mkdir -p cmake/build&lt;br/&gt;cd cmake/build&lt;br/&gt;cmake -DgRPC_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=&quot;${MSBUILD_CONFIG}&quot; ../..&lt;br/&gt;make -j4 grpc_csharp_ext&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取 libgrpc_csharp_ext.so&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cp libgrpc_csharp_ext.so ../../../libgrpc_csharp_ext.x86.so&lt;br/&gt;cp libgrpc_csharp_ext.so ../../../libgrpc_csharp_ext.x64.so&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到 &lt;code&gt;libgrpc_csharp_ext.x86.so&lt;/code&gt;、&lt;code&gt;libgrpc_csharp_ext.x64.so&lt;/code&gt; 之后，在 CI 工具中对发布的程序文件进行二次替换即可解决报错问题。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.12534818941504178&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SK0Jmub4Fkhbv70YBOaMiasonZZL7hQjUib8oWX4fK90D615LCnTy9t0LwncDibP7ruH0fpItwS0y02kybCluhWaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;718&quot;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ASP.NET Core Runtime 版本问题，官方并没有提供 ASP.NET Core Runtime 2.2.x 对应的 ARM64 版本&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6146616541353384&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SK0Jmub4Fkhbv70YBOaMiasonZZL7hQjUoGg7aBGN0YvKbYdtsIXIZHFTPicxHcFicZgmRAGhPZaDicGaOaiaH6RZHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;532&quot;/&gt;&lt;/figure&gt;&lt;p&gt;针对此问题的处理方式还是比较果断的，那就是全面升级到 3.1，首先 3.1 是 LTS 版本，且提供了 ARM64 对应的 runtime，另外因为之前已经升级过一波，目前基于 2.2 的服务残留的并不多，当然整个升级改造过程还是需要谨慎，可参考：&lt;span&gt;从 ASP.NET Core 2.2 迁移到 3.0 &lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 和 &lt;span&gt;从 ASP.NET Core 3.0 迁移到 3.1&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;以上主要是 .NET Core 服务本身适配 ARM64 服务器部署遇到的一些问题，不过不同的项目还是会面对不一样的情况，解决后目前来看一切正常。当然这还不包含其他配套组件的改造，比如：MySQL 替换成 MariaDB 等。&lt;/p&gt;&lt;h3&gt;参考资料&lt;/h3&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;从 ASP.NET Core 2.2 迁移到 3.0 : &lt;em&gt;https://docs.microsoft.com/zh-cn/aspnet/core/migration/22-to-30?view=aspnetcore-5.0&amp;amp;tabs=visual-studio&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;从 ASP.NET Core 3.0 迁移到 3.1: &lt;em&gt;https://docs.microsoft.com/zh-cn/aspnet/core/migration/30-to-31?view=aspnetcore-5.0&amp;amp;tabs=visual-studio&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/SK0Jmub4FkhPFiaHIFUg3Pic7DB1zzMuiaEehib5NoBb8oGCS2kR9sGjHkMAp9h2OMia4glr6qO8zv2bYGviaqMpsWKw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享、&lt;/span&gt;&lt;/strong&gt;点赞&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;、&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;再看&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;，三连走一波&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>66da66e28376eb9658c9eb43c59a2a49</guid>
<title>想听世界上最懂 JavaScript 的人和你讲 JavaScript 吗？</title>
<link>https://toutiao.io/k/c0rc5oi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body detail-content&quot;&gt;&amp;#13;
                &amp;#13;
                &lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21066e52bbd72c21dc13&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;p&gt;&lt;strong&gt;本文作者《JavaScript 二十年》译者  王译锋&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;hr/&gt;&amp;#13;
&lt;p&gt;一门科学的历史，就是这门科学本身。&lt;br/&gt;——歌德&lt;br/&gt;时至今日，JavaScript 对前端工程师的重要性已无需多言。甚至有些同学已经达到了通读语言标准，对 ECMA-262 规范熟捻于心的水平。&amp;#13;
&lt;/p&gt;&lt;p&gt;然而即便如此，很多同学仍然将编程语言作为一种源自权威的、教条式的、纯应用层面的工具来看待，对背后所能延伸出的广阔领域不求甚解，更不认为自己有条件参与到这项技术的演化之中。这其实是颇有些遗憾的。&lt;/p&gt;&amp;#13;
&lt;p&gt;那么，怎样才能做到对语言规范祛魅，用发展的眼光来看待 JavaScript 呢？&lt;/p&gt;&amp;#13;
&lt;p&gt;显然，此时单纯地知道某项语言特性「是什么」是不够的，我们更要理解这背后许多的「为什么」。&lt;/p&gt;&amp;#13;
&lt;p&gt;这需要知道的除了编程语言的基础知识外，更有一项不可或缺的部分，亦即 JavaScript 的演化历史——规范为什么要这么定义？TC39 为什么要这样决策？&lt;/p&gt;&amp;#13;
&lt;p&gt;要解答这些问题，我们必须回到当时的历史背景下，方能理清来龙去脉，看透个中取舍。&lt;/p&gt;&amp;#13;
&lt;hr/&gt;&amp;#13;
&lt;p&gt;要讲述这样的历史，无疑需要真正深度参与过 JavaScript 演化的前辈。&lt;/p&gt;&amp;#13;
&lt;p&gt;幸运的是，这样的人一来就来了两个。&lt;/p&gt;&amp;#13;
&lt;p&gt;他们一位是JavaScript 的发明者，前端祖师爷 Brendan Eich；另一位是 ES5 和 ES6 标准的主编兼首席作者，堪称 JavaScript 甘道夫的 Allen Wirfs-Brock——论起对 JavaScript 的贡献和对历史标准的理解，他们认第二，恐怕就没人敢认第一了。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/210626caf020ee3f86ce&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;可是，这两位早已在前端江湖归隐的老神仙，为什么会突然相聚一堂，联名回忆起 JavaScript 的峥嵘岁月呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;这里的渊源同样极有来头，乃是原定于 2020 年举行的 History of Programming Languages（HOPL）学术会议。&lt;/p&gt;&amp;#13;
&lt;p&gt;这项会议是编程语言界「华山论剑」级的顶会，每隔十年以上才举行一次，只有极少数重要编程语言的核心贡献者有资格主笔。像 C、C++、Lisp、Smalltalk、Haskell 等如雷贯耳语言的作者，都曾是会议的座上宾。&lt;/p&gt;&amp;#13;
&lt;p&gt;所以，两位大佬这次讲的故事，就是他们为此次会议所提供的 JavaScript 历史研究成果——尽在名为&lt;strong&gt;《JavaScript 二十年》&lt;/strong&gt;（JavaScript the First 20 Years）的新书之中。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21067ce6901e65adf3cc&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;p&gt;以两位作者的履历和 HOPL 会议的背景，相信我们已经无需担心本书的权威性了。&lt;/p&gt;&amp;#13;
&lt;p&gt;但提到学术著作，我们往往会下意识地将其与晦涩难懂联系起来。所幸 HOPL 毕竟不同于狭义的编程语言学术研究，它鼓励作者除了技术细节之外，一并尽可能多地写进那些影响语言演化的非技术部分（俗称八卦）。&lt;/p&gt;&amp;#13;
&lt;p&gt;在这种驱动力之下，本书的题材与传统的《JavaScript 入门指南》式语言教科书几乎全然不同。它别具一格地以 JavaScript 二十年来的几个主要发展阶段为界，分四大部分梳理出了语言的发展历程。&lt;/p&gt;&amp;#13;
&lt;p&gt;下面就为大家简单介绍一下吧。&lt;/p&gt;&amp;#13;
&lt;p&gt;首先是第一部分&lt;strong&gt;「语言诞生」&lt;/strong&gt;，它讲的是 JavaScript 发明之初的故事。&lt;/p&gt;&amp;#13;
&lt;p&gt;如果把现在的 JavaScript 当作一家上市公司，那么这部分就是创业期从零到一的打拼历程，大致解答了这么些问题：&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;1.在 JavaScript 发明之前，互联网处于怎样的状态？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;2.JavaScript 也是需要立项的商业项目，它是怎么拍板决定上马的？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;3.我们都知道 Brendan Eich 花了十天实现了世界上第一个 JS 引擎，他是怎么做到的？这个引擎的技术细节是什么样的呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;4.JavaScript 最早的语法是怎么设计出来的？尤其是那个曾经把很多人绕晕的原型设计，到底是怎么一回事呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;5.有哪些 JavaScript 的特性，是当时十天冲刺里留下的坑呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;6.浏览器大战里的微软，为什么要决定兼容非自家的 JavaScript 呢？他们是如何搞出 JScript 引擎的呢？难道真的做了逆向工程吗？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;7.Brendan Eich 除了十天写出 JS 引擎，后来还花两周彻底重写了引擎。这次重写的目标是让JavaScript「成为一门更干净的语言」，到底有多干净呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;8.JavaScript 诞生之初，舆论是怎么（激烈地）评价它的呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;然后是第二部分&lt;strong&gt;「创立标准」&lt;/strong&gt;，它介绍的是从 JavaScript 到 ECMAScript 标准的历程。这部分介绍了很多标准化组织的运作方式，同时也解答了很多问题：&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;1.为什么要选择 Ecma 作为第三方标准组织呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;2.第一次 TC39 会议可不简单，最主要的两个巨头 Netscape 和微软都有着自己的心思。双方在台前幕后到底都做了些什么呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;3.最早的 JavaScript 标准（ES1）的制定过程是怎么样的？这里面有什么对现代 JS 产生长远影响的决策呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;4.ECMAScript 这个名字是如何确定出来的？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;5.JavaScript 是如何从 Ecma 标准发展为 ISO 国际标准的呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;6.在 ES5 之前占据江湖十余年的 ES3 标准，又是怎么制定出来的呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;7.为什么只有 ES1 和 ES3，中途没有 ES2 呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;8.JavaScript 是怎么样从「Java 的附庸」这个定位中逐渐独立出来，成为 Web 前端开发事实标准的呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;对了，在第二部分的尾声，两位作者还提出了一个名为「浏览器博弈论」的理论，它能很好地解释 JavaScript 诞生以来，围绕它各项技术创新的成败缘由。&lt;/p&gt;&amp;#13;
&lt;p&gt;接下来是第三部分&lt;strong&gt;「改革失败」&lt;/strong&gt;，它复盘了一段经典的历史公案，也就是 ES4 的失败。这段故事既牵扯到了当时前沿的编程语言学术研究，又涉及到了微软、Adobe、雅虎等巨头背后的商业利益，在技术和商业层面都有许多看点：&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;1.TC39 为什么想要研发下一代语言标准？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;2.TC39 除了折腾 JavaScript 以外，还发布过一些失败的标准，怎么回事呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;3.Adobe 的 Flash 和 ActionScript，和 ES4 有什么渊源呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;4.2004 年，原本已经淡出语言设计的 Brendan Eich 又加入了 TC39，是什么促使他回归了呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;5.当时 ES4 的设计目标是怎样的一门语言呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;6.ES4 的设计遭遇了哪些技术和商业上的阻力呢？对此 Ecma 是如何协调解决的呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;7.ES4 搁浅后，委员会是如何本着「和谐」理念达成共识的呢？&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;在这部分的时间线结束之际，JavaScript 的重要性已经获得了普遍的认可。因此本部分末尾介绍了当时的「新气象」，比如 JavaScript 性能革命、模块系统、Node.js，以及「万物均可编译到 JS」的现象等。&lt;/p&gt;&amp;#13;
&lt;p&gt;最后的第四部分&lt;strong&gt;「继往开来」&lt;/strong&gt;，讲述了 JavaScript 的现代化之路。它介绍了 2009 年 ES5 与 2015 年 ES2015 这两个成功标准背后的故事。这一部分详细地介绍了很多对现代 JS 而言重要的技术内容，相对而言是更需要「啃」的：&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;ES5 的开发背景，以及其中各项主要语言特性的介绍，如 defineProperty 和严格模式等。&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Test262 测试套件的从零到一之路。&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;从 Harmony 项目（ES2015 前身）到 ES2015 落地之间的社区协作模式演化历程。包括委员会组织与运作机制的更新、若干设计理念的形成过程，以及这中途最有影响力的若干社区技术思潮。&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;ES2015 中各项重磅语言特性的设计概述，包括 Proxy、块级作用域、类、模块、箭头函数等。&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;hr/&gt;&amp;#13;
&lt;p&gt;作为一本&lt;strong&gt;兼备技术细节与历史八卦&lt;/strong&gt;的书籍，《JavaScript 二十年》的阅读体验是奇妙的。&lt;/p&gt;&amp;#13;
&lt;p&gt;阅读它的感受就像是在听一位技术功底深厚的前辈分享过往经历一样，表面上平铺直叙，但时不时总能穿插着引出各种专业的技术概念。&lt;/p&gt;&amp;#13;
&lt;p&gt;对于基础扎实的同学，相信本书在阅读时既能让你保持着听故事时的畅快感，又能给你串联起技术点时的惊喜。&lt;/p&gt;&amp;#13;
&lt;p&gt;当然，就算对于偏入门阶段的同学，阅读本书时应当也不会遇到多少阻碍。&lt;/p&gt;&amp;#13;
&lt;p&gt;这是因为作为一份&lt;strong&gt;严谨的研究作品&lt;/strong&gt;，本书附带了不少辅助资料，比如专业术语表。这份术语表相当于一份简易的「JavaScript 词典」，连续回答了 100 个左右的「什么是函数」和「什么是 JS 引擎」一类的灵魂拷问式问题，对这些概念作出了直接的科普式定义。另外，本书中还有近 500 条参考文献、加入了约 100 条脚注，以及附带了约 400 项的 JavaScript 演化时间线表格。这也算是内容严谨度的一种体现吧。&lt;/p&gt;&amp;#13;
&lt;p&gt;顺便一提，《JavaScript 二十年》的&lt;strong&gt;推荐阵容&lt;/strong&gt;也是相当强大的。&lt;/p&gt;&amp;#13;
&lt;p&gt;如《JavaScript 语言精粹》的作者&lt;strong&gt; Douglas Crockford（老道）&lt;/strong&gt;其实就是两位作者当年在 TC39 的老熟人，他为本书撰写了推荐语。&lt;/p&gt;&amp;#13;
&lt;p&gt;而《JavaScript 语言精髓与编程实践》的作者&lt;strong&gt;周爱民老师&lt;/strong&gt;也为本书作了序。&lt;/p&gt;&amp;#13;
&lt;p&gt;另外还有 &lt;a href=&quot;https://github.com/justjavac&quot; title=&quot;@justjavac&quot; class=&quot;at-link&quot;&gt;@justjavac&lt;/a&gt;、@死月、@月影、@李玉北、@张云龙、@顾轶灵、@黄轶、@于航、@沈毅、@黄玄、@工业聚、@小爝、@一丝、@题叶、@染陌、@叶俊星、@侯策、@寒雁、@太狼、@敖天羽、&lt;a href=&quot;https://github.com/xcatliu&quot; title=&quot;@xcatliu&quot; class=&quot;at-link&quot;&gt;@xcatliu&lt;/a&gt;、&lt;a href=&quot;https://github.com/Himself65&quot; title=&quot;@Himself65&quot; class=&quot;at-link&quot;&gt;@Himself65&lt;/a&gt; 等国内前端社区知名的开发者们撰写推荐语力荐，不容错过噢。&lt;/p&gt;&amp;#13;
&lt;p&gt;最后，作为这本书的中文版译者，我很希望本书所讲述的 JavaScript 演化故事，能帮助大家对技术与标准有更好的理解。&lt;/p&gt;&amp;#13;
&lt;p&gt;毕竟今天的 JavaScript 标准已经是集体智慧的结晶，其未来并不掌握在某个权威个体手中，是由社区的共识所决定的。&lt;/p&gt;&amp;#13;
&lt;p&gt;而即便不在标准委员会中，我们每一次有价值的技术讨论，也都在无形中影响着社区的共识。&lt;/p&gt;&amp;#13;
&lt;p&gt;在这个日新月异的领域，我很期待未来能看到更多来自中国的声音。&lt;/p&gt;&amp;#13;
&lt;p&gt;上一个二十年已经尘埃落定，该由我们这一代开发者们来书写自己的故事了。&lt;/p&gt;&amp;#13;
&lt;p&gt;让我们一同见证 Web 在下一个二十年里的发展吧！&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21060d3b13f8fd7537f3&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;《JavaScript 二十年》&lt;/strong&gt;&lt;br/&gt;Allen，Wirfs-Brock，Brendan，Eich 著&lt;br/&gt;王译锋 译&amp;#13;
&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一个是语言发明人，一个是标准制定者&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;世界上最了解内幕的人书写的JS趣味技术史&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;跟随当事人穿梭于 JavaScript 二十年发展史之间，从十天发明 JavaScript 的历史故事再到 ES1 标准化的合纵连横，再到 ES4 的失意、ES5 的妥协与 ES6 的成功，本书将为你解答种种“语言为什么要设计成这样”的问题。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2106836cf86ae2821ed8&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;（京东满100减50，快快扫码抢购吧！）&amp;#13;
&amp;#13;
            &lt;/p&gt;&lt;/div&gt;&amp;#13;
&amp;#13;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>651fc0f7390dcdacaf9ec8da62f974bf</guid>
<title>ANR 日志分析全面解析</title>
<link>https://toutiao.io/k/eb4zh6p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;prio=5 tid=1 Native&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;group=&quot;main&quot; sCount=1 dsCount=0 flags=1 obj=0x727851e8 self=0x78d7060e00&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;sysTid=4894 nice=0 cgrp=default sched=0/0 handle=0x795cc1e9a8&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;state=S schedstat=( 8292806752 1621087524 7167 ) utm=707 stm=122 core=5 HZ=100&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;stack=0x7febb64000-0x7febb66000 stackSize=8MB&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;held mutexes=&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;kernel&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;__switch_to+0x90/0xc4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;kernel&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;binder_thread_read+0xbd8/0x144c&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;kernel&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;binder_ioctl_write_read.constprop.58+0x20c/0x348&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;kernel&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;binder_ioctl+0x5d4/0x88c&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;kernel&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;do_vfs_ioctl+0xb8/0xb1c&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;kernel&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;SyS_ioctl+0x84/0x98&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;kernel&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;cpu_switch_to+0x34c/0x22c0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;native&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;#00 pc 000000000007a2ac  /system/lib64/libc.so (__ioctl+4)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;native&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;#01 pc 00000000000276ec  /system/lib64/libc.so (ioctl+132)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;native&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;#02 pc 00000000000557d4  /system/lib64/libbinder.so (android::IPCThreadState::talkWithDriver(bool)+252)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;native&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;#03 pc 0000000000056494  /system/lib64/libbinder.so (android::IPCThreadState::waitForResponse(android::Parcel*, int*)+60)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;native&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;#04 pc 00000000000562d0  /system/lib64/libbinder.so (android::IPCThreadState::transact(int, unsigned int, android::Parcel const&amp;amp;, android::Parcel*, unsigned int)+216)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;native&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;#05 pc 000000000004ce1c  /system/lib64/libbinder.so (android::BpBinder::transact(unsigned int, android::Parcel const&amp;amp;, android::Parcel*, unsigned int)+72)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;native&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;#06 pc 00000000001281c8  /system/lib64/libandroid_runtime.so (???)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;native&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;#07 pc 0000000000947ed4  /system/framework/arm64/boot-framework.oat (Java_android_os_BinderProxy_transactNative__ILandroid_os_Parcel_2Landroid_os_Parcel_2I+196)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;android.os.BinderProxy.transactNative(Native method) ————————————————关键行！！！&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;android.os.BinderProxy.transact(Binder.java:804)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;android.net.IConnectivityManager$Stub$Proxy.getActiveNetworkInfo(IConnectivityManager.java:1204)—关键行！&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;android.net.ConnectivityManager.getActiveNetworkInfo(ConnectivityManager.java:800)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;com.xiaomi.NetworkUtils.getNetworkInfo(NetworkUtils.java:2)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;com.xiaomi.frameworkbase.utils.NetworkUtils.getNetWorkType(NetworkUtils.java:1)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;  at com.xiaomi.frameworkbase.utils.NetworkUtils.isWifiConnected(NetworkUtils.java&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;1)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b5cf891fbb4dcef635d275d4f7ad3ada</guid>
<title>ClickHouse 物化视图在微信的实战经验</title>
<link>https://toutiao.io/k/dn8ypx4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ClickHouse广泛用于用户和系统日志查询场景中，借助腾讯云提供基础设施，微信也在分阶段逐步推进clickhouse的建设和应用，目前作为基础建设的一部分，主要针对于OLAP场景，为业务方提供稳定高效的查询服务。在业务场景下，实时事件流上报可能会在不同的日志，以不同的格式、途径写入到clickhouse。在之前的使用中，通过查询多个日志表join实现多个指标的整合。用传统JOIN方式，我们遇到如下困难:
1.每个查询会有非常长的代码，有的甚至1500行、2000行sql，使用和理解上特别痛苦;
2.性能上无法满足业务诉求，日志量大会爆内存不足;
如何将这些数据进行整合，以ClickHouse宽表的方式呈现给上层使用，用户可以在一张表中查到所需的所有指标，避免提供多表带来的代码复杂度和性能开销问题？本文将重点介绍如何通过物化视图有效解决上述场景的问题。在介绍之前，先铺垫一下物化视图的简单使用，包括如何创建，如何增加维度和指标，如何结合字典增维等场景。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;准备工作&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多情况下，没有场景和数据，就很难感同身受的去了解整个过程，所以在写这篇文章前，利用python的Faker库先生成一些模拟数据，模拟真实场景，以数据入手，来介绍关于物化视图的一些使用经验。环境：wsl单节点 centos7
版本：21.3.12.2-lts
数据库: ods,dim,dwm,dws,test
环境相关配置以及本文后续提到代码和模拟数据，均已上传到github的个人项目中 https://github.com/IVitamin-C/clickhouse-learning，供参考。如有问题，可以提issues或者私信我。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;用户维度数据&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过代码生成15000个用户，其中Android 10000，ios 5000。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; ods.user_dim_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;br/&gt;(&lt;br/&gt; &lt;span&gt;day&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据分区-天&#x27;&lt;/span&gt;,&lt;br/&gt; uid UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;uid&#x27;&lt;/span&gt;,&lt;br/&gt; platform &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;平台 android/ios&#x27;&lt;/span&gt;,&lt;br/&gt; country &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;国家&#x27;&lt;/span&gt;,&lt;br/&gt; province &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;省及直辖市&#x27;&lt;/span&gt;,&lt;br/&gt; isp &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;运营商&#x27;&lt;/span&gt;,&lt;br/&gt; app_version &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;应用版本&#x27;&lt;/span&gt;,&lt;br/&gt; os_version &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;系统版本&#x27;&lt;/span&gt;,&lt;br/&gt; mac &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;mac&#x27;&lt;/span&gt;,&lt;br/&gt; ip &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;ip&#x27;&lt;/span&gt;,&lt;br/&gt; gender &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;性别&#x27;&lt;/span&gt;,&lt;br/&gt; age Int16 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;年龄&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;engine&lt;/span&gt; = ReplicatedMergeTree(&lt;span&gt;&#x27;/clickhouse/tables/{layer}-{shard}/ods.user_dim_local&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;{replica}&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;PARTITION&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;PRIMARY &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;TTL &lt;span&gt;day&lt;/span&gt; + toIntervalDay(&lt;span&gt;3&lt;/span&gt;) + toIntervalHour(&lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;SETTINGS&lt;/span&gt; index_granularity = &lt;span&gt;8192&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;--drop table dim.user_dim_dis on cluster cluster;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dim.user_dim_dis &lt;span&gt;on&lt;/span&gt; cluster cluster&lt;br/&gt;&lt;span&gt;as&lt;/span&gt; ods.user_dim_local&lt;br/&gt;&lt;span&gt;engine&lt;/span&gt;=&lt;span&gt;Distributed&lt;/span&gt;(cluster,ods,user_dim_local,&lt;span&gt;rand&lt;/span&gt;());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;物品维度数据&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过代码生成100个物品。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; ods.item_dim_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;br/&gt;(&lt;br/&gt; &lt;span&gt;day&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据分区-天&#x27;&lt;/span&gt;,&lt;br/&gt; item_id UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;item_id&#x27;&lt;/span&gt;,&lt;br/&gt; type_id UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;type_id&#x27;&lt;/span&gt;,&lt;br/&gt; price UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;price&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;engine&lt;/span&gt; = ReplicatedMergeTree(&lt;span&gt;&#x27;/clickhouse/tables/{layer}-{shard}/ods.item_dim_local&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;{replica}&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;PARTITION&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;PRIMARY &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;TTL &lt;span&gt;day&lt;/span&gt; + toIntervalDay(&lt;span&gt;3&lt;/span&gt;) + toIntervalHour(&lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;SETTINGS&lt;/span&gt; index_granularity = &lt;span&gt;8192&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;--drop table dim.item_dim_dis on cluster cluster;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dim.item_dim_dis &lt;span&gt;on&lt;/span&gt; cluster cluster&lt;br/&gt;&lt;span&gt;as&lt;/span&gt; ods.item_dim_local&lt;br/&gt;&lt;span&gt;engine&lt;/span&gt;=&lt;span&gt;Distributed&lt;/span&gt;(cluster,ods,item_dim_local,&lt;span&gt;rand&lt;/span&gt;());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;action_001行为数据&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过代码生成最近3小时的数据，模拟用户的实际访问，主要是曝光、点击、和曝光时间3个指标&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;--drop table ods.action_001_local on cluster cluster;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; ods.action_001_local &lt;span&gt;on&lt;/span&gt; cluster cluster (&lt;br/&gt;&lt;span&gt;day&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; toDate(&lt;span&gt;second&lt;/span&gt;) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据分区-天(Date)&#x27;&lt;/span&gt;&lt;br/&gt;,&lt;span&gt;hour&lt;/span&gt; DateTime &lt;span&gt;default&lt;/span&gt; toStartOfHour(&lt;span&gt;second&lt;/span&gt;) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据时间-小时(DateTime)&#x27;&lt;/span&gt;&lt;br/&gt;,&lt;span&gt;second&lt;/span&gt; DateTime &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;1970-01-01 08:00:00&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据时间-秒&#x27;&lt;/span&gt;&lt;br/&gt;,insert_second DateTime &lt;span&gt;default&lt;/span&gt; &lt;span&gt;now&lt;/span&gt;() &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据写入时间&#x27;&lt;/span&gt;&lt;br/&gt;,platform &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;平台 android/ios&#x27;&lt;/span&gt;&lt;br/&gt;,ip &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;client-ip&#x27;&lt;/span&gt;&lt;br/&gt;,isp &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;运营商&#x27;&lt;/span&gt;&lt;br/&gt;,uid UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;uid&#x27;&lt;/span&gt;&lt;br/&gt;,ver &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;版本&#x27;&lt;/span&gt;&lt;br/&gt;,item_id UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;物品id&#x27;&lt;/span&gt;&lt;br/&gt;,show_cnt UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光次数&#x27;&lt;/span&gt;&lt;br/&gt;,click_cnt UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;点击次数&#x27;&lt;/span&gt;&lt;br/&gt;,show_time UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光时间&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;engine&lt;/span&gt;=ReplicatedMergeTree(&lt;span&gt;&#x27;/clickhouse/tables/{layer}-{shard}/ods.action_001_local&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;{replica}&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;PARTITION&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;day&lt;/span&gt;,&lt;span&gt;hour&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; (&lt;span&gt;day&lt;/span&gt;,&lt;span&gt;hour&lt;/span&gt;,platform,item_id)&lt;br/&gt;TTL &lt;span&gt;day&lt;/span&gt; + toIntervalDay(&lt;span&gt;10&lt;/span&gt;) + toIntervalHour(&lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;SETTINGS&lt;/span&gt; index_granularity = &lt;span&gt;8192&lt;/span&gt;&lt;br/&gt;;&lt;br/&gt;&lt;span&gt;--drop table dws.action_001_dis on cluster cluster;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dws.action_001_dis &lt;span&gt;on&lt;/span&gt; cluster cluster&lt;br/&gt;&lt;span&gt;as&lt;/span&gt; ods.action_001_local&lt;br/&gt;&lt;span&gt;engine&lt;/span&gt;=&lt;span&gt;Distributed&lt;/span&gt;(cluster,ods,action_001_local,&lt;span&gt;rand&lt;/span&gt;());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;action_002 行为数据&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过代码生成最近3小时的数据，模拟用户点击之后的一些其他操作。这里对指标简单命名。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;--drop table ods.action_002_local on cluster cluster;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; ods.action_002_local &lt;span&gt;on&lt;/span&gt; cluster cluster (&lt;br/&gt;&lt;span&gt;day&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; toDate(&lt;span&gt;second&lt;/span&gt;) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据分区-天(Date)&#x27;&lt;/span&gt;&lt;br/&gt;,&lt;span&gt;hour&lt;/span&gt; DateTime &lt;span&gt;default&lt;/span&gt; toStartOfHour(&lt;span&gt;second&lt;/span&gt;) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据时间-小时(DateTime)&#x27;&lt;/span&gt;&lt;br/&gt;,&lt;span&gt;second&lt;/span&gt; DateTime &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;1970-01-01 08:00:00&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据时间-秒&#x27;&lt;/span&gt;&lt;br/&gt;,insert_second DateTime &lt;span&gt;default&lt;/span&gt; &lt;span&gt;now&lt;/span&gt;() &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据写入时间&#x27;&lt;/span&gt;&lt;br/&gt;,platform &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;平台 android/ios&#x27;&lt;/span&gt;&lt;br/&gt;,ip &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;client-ip&#x27;&lt;/span&gt;&lt;br/&gt;,isp &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;运营商&#x27;&lt;/span&gt;&lt;br/&gt;,uid UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;uid&#x27;&lt;/span&gt;&lt;br/&gt;,ver &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;版本&#x27;&lt;/span&gt;&lt;br/&gt;,item_id UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;商品id&#x27;&lt;/span&gt;&lt;br/&gt;,action_a_cnt UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actionA次数&#x27;&lt;/span&gt;&lt;br/&gt;,action_b_cnt UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actionB次数&#x27;&lt;/span&gt;&lt;br/&gt;,action_c_cnt UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actionC次数&#x27;&lt;/span&gt;&lt;br/&gt;,action_a_time UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actionA时间&#x27;&lt;/span&gt;&lt;br/&gt;,action_b_time UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actionA时间&#x27;&lt;/span&gt;&lt;br/&gt;,action_c_time UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actionA时间&#x27;&lt;/span&gt;&lt;br/&gt;,action_d_sum UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;action_d_sum&#x27;&lt;/span&gt;&lt;br/&gt;,action_e_sum UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;action_e_sum&#x27;&lt;/span&gt;&lt;br/&gt;,action_f_sum UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;action_f_sum&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;engine&lt;/span&gt;=ReplicatedMergeTree(&lt;span&gt;&#x27;/clickhouse/tables/{layer}-{shard}/ods.action_002_local&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;{replica}&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;PARTITION&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;day&lt;/span&gt;,&lt;span&gt;hour&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; (&lt;span&gt;day&lt;/span&gt;,&lt;span&gt;hour&lt;/span&gt;,platform,item_id)&lt;br/&gt;TTL &lt;span&gt;day&lt;/span&gt; + toIntervalDay(&lt;span&gt;10&lt;/span&gt;) + toIntervalHour(&lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;SETTINGS&lt;/span&gt; index_granularity = &lt;span&gt;8192&lt;/span&gt;&lt;br/&gt;;&lt;br/&gt;&lt;span&gt;--drop table dws.action_002_dis on cluster cluster;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dws.action_002_dis &lt;span&gt;on&lt;/span&gt; cluster cluster&lt;br/&gt;&lt;span&gt;as&lt;/span&gt; ods.action_002_local&lt;br/&gt;&lt;span&gt;engine&lt;/span&gt;=&lt;span&gt;Distributed&lt;/span&gt;(cluster,ods,action_002_local,&lt;span&gt;rand&lt;/span&gt;());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里准备两份日志，主要是为了文章后半部分提到的物化视图的进阶用法，解决某些join场景。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;物化视图的简单case&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;场景&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在action_log接入到clickhouse之后，就可以直接通过分布式表去查询了。但是，随着数据量的慢慢积累，比如action_001，它是主页的曝光和点击的数据，一天可能会非常大，百亿级别。这个时候，查一天的去重uv可能还能勉强接受，但是查一周，查一月可能就没法玩了，耗时上巨大，有些也可能超过内存限制。得提速，业务不管你实现方案，要看数据结果，这个时候，物化视图就派上用场了。A产品整理后提了一个诉求，希望可以看到每小时的每个商品的主页统计指标。有时也可能要查1周，1月。经过梳理得到了下面这个需求&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;时间(最细小时)&lt;/th&gt;&lt;th&gt;商品id&lt;/th&gt;&lt;th&gt;平台&lt;/th&gt;&lt;th&gt;版本&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;曝光人数&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;曝光次数&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;点击人数&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;点击次数&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;人均曝光时间&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;每次平均曝光时间&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;人均点击次数&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ctr&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，在创建物化视图前评估一下数据量。物化视图会计算当前批次的数据汇总一次，然后根据维度自动merge聚合统计的指标，但是不会跨节点和分区，所以理想状况下，数据量的估算sql为&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; uniqCombined(hostName(),&lt;span&gt;hour&lt;/span&gt;,item_id,platform,ver)&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; dws.action_001&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过计算发现，数据量只是原表的1/n，主要取决于数据的重合度，这个只是最完美的理想状态，但是实际上差距也不会很大，已经比原表少很多数据量了。现在需求明确，也估算完数据量了，在这个数据量下，查询1周或者1月的数据是完全可以接受的。开搞物化视图。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;创建过程&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先贴下官方文档https://clickhouse.tech/docs/en/sql-reference/statements/create/view/物化视图的创建有两种方式，一种是&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;MATERIALIZED&lt;/span&gt; &lt;span&gt;VIEW&lt;/span&gt; [&lt;span&gt;IF&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;] [db.]table_name [&lt;span&gt;ON&lt;/span&gt; CLUSTER]&lt;br/&gt;&lt;span&gt;ENGINE&lt;/span&gt; = &lt;span&gt;engine&lt;/span&gt;&lt;br/&gt;&lt;span&gt;AS&lt;/span&gt; &lt;span&gt;SELECT&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种创建物化视图的好处是创建简单，避免自己写错聚合函数类型带来数据上的写入失败。缺点是alter有局限性，每次更改都需要替换或者修改物化视图的计算逻辑，而且也不能实现文章后续的有限替代join场景。第二种方式是先创建一个存储表，存储表是[Replicated]AggregatingMergeTree，然后通过创建的物化视图使用to的方式写入到存储表中，相当于存储的数据和计算的逻辑分为了两张表分别处理。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;MATERIALIZED&lt;/span&gt; &lt;span&gt;VIEW&lt;/span&gt; [&lt;span&gt;IF&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;] [db.]table_name [&lt;span&gt;ON&lt;/span&gt; CLUSTER] &lt;span&gt;TO&lt;/span&gt; db.]&lt;span&gt;name&lt;/span&gt;&lt;br/&gt;&lt;span&gt;AS&lt;/span&gt; &lt;span&gt;SELECT&lt;/span&gt; &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为已经指定了存储的表，所以物化视图的创建也不需要指定engine，在查询中，查物化视图和查实际的存储表得到一样的数据，因为都是来自于同一份存储数据。在建表之前还有个细节，TO db.name 后面的表不一定是本地表对本地表，还可以本地表对分布式表，可以基于shard_key处理一些分桶策略，但是会存在写放大的问题，导致集群写入频率增大，负载提高，可以但是慎用。&lt;strong&gt;必须要注意的是，from的表一定是本地表。&lt;/strong&gt;&lt;strong&gt;这里大家区分下存储表和计算表两个名词，后续的场景会用到。&lt;/strong&gt;以下为完整的建表sql
创建ReplicatedAggregatingMergeTree作为数据存储表和分布式表&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;--drop table dwm.mainpage_stat_mv_local on cluster cluster;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster&lt;br/&gt;(&lt;br/&gt;&lt;span&gt;day&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据分区-天&#x27;&lt;/span&gt;&lt;br/&gt;,&lt;span&gt;hour&lt;/span&gt; DateTime &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据时间-小时(DateTime)&#x27;&lt;/span&gt;&lt;br/&gt;,platform &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;平台 android/ios&#x27;&lt;/span&gt;&lt;br/&gt;,ver &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;版本&#x27;&lt;/span&gt;&lt;br/&gt;,item_id UInt32 &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;物品id&#x27;&lt;/span&gt;&lt;br/&gt;,shown_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光人数&#x27;&lt;/span&gt;&lt;br/&gt;,shown_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光次数&#x27;&lt;/span&gt;&lt;br/&gt;,click_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;点击人数&#x27;&lt;/span&gt;&lt;br/&gt;,click_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;点击次数&#x27;&lt;/span&gt;&lt;br/&gt;,show_time_sum  SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;总曝光时间/秒&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;engine&lt;/span&gt;=ReplicatedAggregatingMergeTree(&lt;span&gt;&#x27;/clickhouse/tables/{layer}-{shard}/dwm.mainpage_stat_mv_local&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;{replica}&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;PARTITION&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;day&lt;/span&gt;,&lt;span&gt;hour&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; (&lt;span&gt;day&lt;/span&gt;,&lt;span&gt;hour&lt;/span&gt;,platform,ver,item_id)&lt;br/&gt;TTL &lt;span&gt;day&lt;/span&gt; + toIntervalDay(&lt;span&gt;92&lt;/span&gt;) + toIntervalHour(&lt;span&gt;5&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;SETTINGS&lt;/span&gt; index_granularity = &lt;span&gt;8192&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;--drop table dws.mainpage_stat_mv_dis on cluster cluster&lt;/span&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dws.mainpage_stat_mv_dis &lt;span&gt;on&lt;/span&gt; cluster cluster&lt;br/&gt;&lt;span&gt;as&lt;/span&gt; dwm.mainpage_stat_mv_local&lt;br/&gt;&lt;span&gt;engine&lt;/span&gt;=&lt;span&gt;Distributed&lt;/span&gt;(cluster,dwm,mainpage_stat_mv_local,&lt;span&gt;rand&lt;/span&gt;());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建物化视图作为计算逻辑并使用to将数据流向ReplicatedAggregatingMergeTree&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt;  &lt;span&gt;MATERIALIZED&lt;/span&gt; &lt;span&gt;VIEW&lt;/span&gt; dwm.mv_main_page_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;to&lt;/span&gt; dwm.mainpage_stat_mv_local (&lt;br/&gt;&lt;span&gt;day&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据分区-天&#x27;&lt;/span&gt;&lt;br/&gt;,&lt;span&gt;hour&lt;/span&gt; DateTime &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据时间-小时(DateTime)&#x27;&lt;/span&gt;&lt;br/&gt;,platform &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;平台 android/ios&#x27;&lt;/span&gt;&lt;br/&gt;,ver &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;版本&#x27;&lt;/span&gt;&lt;br/&gt;,item_id UInt32 &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;物品id&#x27;&lt;/span&gt;&lt;br/&gt;,shown_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光人数&#x27;&lt;/span&gt;&lt;br/&gt;,shown_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光次数&#x27;&lt;/span&gt;&lt;br/&gt;,click_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;点击人数&#x27;&lt;/span&gt;&lt;br/&gt;,click_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;点击次数&#x27;&lt;/span&gt;&lt;br/&gt;,show_time_sum  SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;总曝光时间/秒&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;AS&lt;/span&gt; &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;     ,&lt;span&gt;hour&lt;/span&gt;&lt;br/&gt;     ,platform&lt;br/&gt;     ,ver&lt;br/&gt;     ,item_id&lt;br/&gt;     ,uniqCombinedStateIf(uid,a.show_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; shown_uv&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(a.show_cnt) &lt;span&gt;as&lt;/span&gt; show_cnt&lt;br/&gt;     ,uniqCombinedStateIf(uid,a.click_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; click_uv&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(a.click_cnt) &lt;span&gt;as&lt;/span&gt; click_cnt&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(toUInt64(show_time/&lt;span&gt;1000&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt; show_time_sum&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; ods.action_001_local &lt;span&gt;as&lt;/span&gt; a&lt;br/&gt;&lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;     ,&lt;span&gt;hour&lt;/span&gt;&lt;br/&gt;     ,platform&lt;br/&gt;     ,ver&lt;br/&gt;     ,item_id&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询数据&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;day&lt;/span&gt;,&lt;br/&gt;    platform,&lt;br/&gt;    uniqCombinedMerge(shown_uv) &lt;span&gt;AS&lt;/span&gt; shown_uv,&lt;br/&gt;    &lt;span&gt;sum&lt;/span&gt;(shown_cnt) &lt;span&gt;AS&lt;/span&gt; shown_cnt,&lt;br/&gt;    uniqCombinedMerge(click_uv) &lt;span&gt;AS&lt;/span&gt; click_uv,&lt;br/&gt;    &lt;span&gt;sum&lt;/span&gt;(click_cnt) &lt;span&gt;AS&lt;/span&gt; click_cnt,&lt;br/&gt;    &lt;span&gt;sum&lt;/span&gt;(show_time_sum) &lt;span&gt;AS&lt;/span&gt; show_time_sum&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; dws.mainpage_stat_mv_dis&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;day&lt;/span&gt;,&lt;br/&gt;    platform&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: f6d4d3dd&lt;span&gt;-33&lt;/span&gt;f1&lt;span&gt;-408e-92&lt;/span&gt;a7&lt;span&gt;-4901&lt;/span&gt;fcad50aa&lt;br/&gt;&lt;br/&gt;┌────────&lt;span&gt;day&lt;/span&gt;─┬─platform─┬─shown_uv─┬─shown_cnt─┬─click_uv─┬─click_cnt─┬─show_time_sum─┐&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ ios      │     &lt;span&gt;5000&lt;/span&gt; │         &lt;span&gt;0&lt;/span&gt; │     &lt;span&gt;4509&lt;/span&gt; │    &lt;span&gt;554927&lt;/span&gt; │        &lt;span&gt;781679&lt;/span&gt; │&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-05&lt;/span&gt; │ android  │     &lt;span&gt;9613&lt;/span&gt; │         &lt;span&gt;0&lt;/span&gt; │     &lt;span&gt;5249&lt;/span&gt; │    &lt;span&gt;342910&lt;/span&gt; │        &lt;span&gt;491502&lt;/span&gt; │&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ android  │     &lt;span&gt;9995&lt;/span&gt; │         &lt;span&gt;0&lt;/span&gt; │     &lt;span&gt;8984&lt;/span&gt; │   &lt;span&gt;1126905&lt;/span&gt; │       &lt;span&gt;1570323&lt;/span&gt; │&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-05&lt;/span&gt; │ ios      │     &lt;span&gt;4819&lt;/span&gt; │         &lt;span&gt;0&lt;/span&gt; │     &lt;span&gt;2636&lt;/span&gt; │    &lt;span&gt;175932&lt;/span&gt; │        &lt;span&gt;248274&lt;/span&gt; │&lt;br/&gt;└────────────┴──────────┴──────────┴───────────┴──────────┴───────────┴───────────────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.013&lt;/span&gt; sec. Processed &lt;span&gt;58.70&lt;/span&gt; thousand &lt;span&gt;rows&lt;/span&gt;, &lt;span&gt;14.38&lt;/span&gt; MB (&lt;span&gt;4.42&lt;/span&gt; million &lt;span&gt;rows&lt;/span&gt;/s., &lt;span&gt;1.08&lt;/span&gt; GB/s.)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;处理中的细节&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个地方再细描述下物化视图的处理逻辑，先贴一下官方说明&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Important
Materialized views in ClickHouse are implemented more like insert triggers. If there’s some aggregation in the view &amp;gt;query, it’s applied only to the batch of freshly inserted data. Any changes to existing data of source table (like update, &amp;gt;delete, drop partition, etc.) does not change the materialized view.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据说明，物化视图是计算每批次写入原表的数据，假设一批写入了10w,那么物化视图就计算了这10w的数据，然后可能聚合之后就剩1w了写入到表中，剩下的过程就交给后台去merge聚合了，这个时候就要去理解物化视图的核心字段类型，AggregateFunction和SimpleAggregateFunction了。这里主要讲两个场景的计算，去理解这个字段类型，一个是uniqCombined计算uv，一个是sum计算pv。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;首先是uv计算场景&lt;/strong&gt;在大数据量下，使用uniqExact去计算精确uv，存储开销大，不便于网络传输数据，查询耗时长，还容易爆内存。除非个别情况下，不推荐使用。uniqCombined(HLL_precision)(x[, ...])
官方说明
1.为聚合中的所有参数计算一个散列(为String计算64位散列，否则为32位散列)，然后在计算中使用它。这里只当输入1个或者多个参数时，会先计算一个hash散列，这里的hash随着基数的增大，会发生碰撞。2.使用三种算法的组合:数组、哈希表和带纠错表的HyperLogLog。对于少量不同的元素，使用数组。当数据量较大时，使用哈希表。对于大数量的元素集，使用HyperLogLog，它将占用固定数量的内存。3.确定地提供结果(它不依赖于查询处理顺序)。所以在使用这个函数时，误差主要来源于两个地方，一个是计算散列时的hash碰撞，一个是在基数较大时的HyperLogLog的本身误差。但是从生产使用的表现来说，计算高效且稳定，计算结果确定且误差较小，值得使用。毕竟主要针对分析场景而不是金融等对数据准确性要求非常高的情况。正常计算uniqCombined时返回的是UInt64计算好的结果，因为是uv去重的计算场景，所以在使用物化视图计算每批次数据结果后，这个结果是无法迭代累加得到正确结果的(这里的累加不是加法运算哈)。所以要存储成为可以累加的状态，这个时候就要使用-State函数组合器，并使用AggregateFunction字段存储聚合函数提供的这个可以累加的中间状态而不是结果值。uniqCombinedState会得到AggregateFunction(uniqCombined,[String,UInt,Int])这样的一个字段类型。同时，uniqCombined是一个聚合函数，那么我们在group by之后会得到一个元素的组合，同时不管进行了多少个批次的数据计算，每个批次的计算结果不外乎是上面arr，set，hyperLogLog中的一种（具体会涉及序列化和反序列化，更复杂一些，这里简单理解），本身是支持添加元素或者合并多个的操作的，那么每个批次的计算结果也是可以合并的。以集合举例，我们在两次计算分别得到了&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;批次&lt;/th&gt;&lt;th&gt;platform&lt;/th&gt;&lt;th&gt;ver&lt;/th&gt;&lt;th&gt;uv&lt;/th&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;android&lt;/td&gt;&lt;td&gt;1.1&lt;/td&gt;&lt;td&gt;{1001,1002,1003,1004}&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;android&lt;/td&gt;&lt;td&gt;1.2&lt;/td&gt;&lt;td&gt;{1009,1010,1130,1131}&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;android&lt;/td&gt;&lt;td&gt;1.1&lt;/td&gt;&lt;td&gt;{2001,3002,1003,3004}&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;android&lt;/td&gt;&lt;td&gt;1.2&lt;/td&gt;&lt;td&gt;{2009,1010,2130,2131}&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在写入到表之后没有merge之前，存储的实际是4个批次的数据，在这个时候进行计算时，计算过程会聚合，这个中间状态会合并，但是这个时候如果直接使用uniqCombined计算这个中间状态会得到什么样的结果呢，我们举例说明下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    platform,&lt;br/&gt;    ver,&lt;br/&gt;    uniqCombined(xx)&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver,&lt;br/&gt;        uniqCombinedState(uid) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;            a&lt;span&gt;.1&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;            a&lt;span&gt;.2&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; ver,&lt;br/&gt;            a&lt;span&gt;.3&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; uid&lt;br/&gt;        &lt;span&gt;FROM&lt;/span&gt; system.one&lt;br/&gt;        &lt;span&gt;ARRAY&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; [(&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;1001&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;1002&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;1004&lt;/span&gt;)] &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver&lt;br/&gt;    &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;ALL&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver,&lt;br/&gt;        uniqCombinedState(uid) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;            a&lt;span&gt;.1&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;            a&lt;span&gt;.2&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; ver,&lt;br/&gt;            a&lt;span&gt;.3&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; uid&lt;br/&gt;        &lt;span&gt;FROM&lt;/span&gt; system.one&lt;br/&gt;        &lt;span&gt;ARRAY&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; [(&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;1009&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;1010&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;1130&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;1131&lt;/span&gt;)] &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver&lt;br/&gt;    &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;ALL&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver,&lt;br/&gt;        uniqCombinedState(uid) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;            a&lt;span&gt;.1&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;            a&lt;span&gt;.2&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; ver,&lt;br/&gt;            a&lt;span&gt;.3&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; uid&lt;br/&gt;        &lt;span&gt;FROM&lt;/span&gt; system.one&lt;br/&gt;        &lt;span&gt;ARRAY&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; [(&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;2001&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;3002&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;3004&lt;/span&gt;)] &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver&lt;br/&gt;    &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;ALL&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver,&lt;br/&gt;        uniqCombinedState(uid) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;            a&lt;span&gt;.1&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;            a&lt;span&gt;.2&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; ver,&lt;br/&gt;            a&lt;span&gt;.3&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; uid&lt;br/&gt;        &lt;span&gt;FROM&lt;/span&gt; system.one&lt;br/&gt;        &lt;span&gt;ARRAY&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; [(&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;2009&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;1010&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;2130&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;2131&lt;/span&gt;)] &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;    platform,&lt;br/&gt;    ver&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;09069556&lt;/span&gt;&lt;span&gt;-65&lt;/span&gt;a8&lt;span&gt;-42&lt;/span&gt;a2&lt;span&gt;-9&lt;/span&gt;b0b-c002264a1bb4&lt;br/&gt;&lt;br/&gt;┌─platform─┬─ver─┬─uniqCombined(xx)─┐&lt;br/&gt;│ android  │ &lt;span&gt;1.2&lt;/span&gt; │                &lt;span&gt;2&lt;/span&gt; │&lt;br/&gt;│ android  │ &lt;span&gt;1.1&lt;/span&gt; │                &lt;span&gt;2&lt;/span&gt; │&lt;br/&gt;└──────────┴─────┴──────────────────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.007&lt;/span&gt; sec.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个结果是明显不对的，因为他将这个中间状态也作为了计算的输入重新计算了，所以在使用上一定要注意AggregateFunction中的State状态使用Merge解析才能得到正确的结果。正确的sql&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    platform,&lt;br/&gt;    ver,&lt;br/&gt;    uniqCombinedMerge(xx) &lt;span&gt;AS&lt;/span&gt; uv&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver,&lt;br/&gt;        uniqCombinedState(uid) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;            a&lt;span&gt;.1&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;            a&lt;span&gt;.2&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; ver,&lt;br/&gt;            a&lt;span&gt;.3&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; uid&lt;br/&gt;        &lt;span&gt;FROM&lt;/span&gt; system.one&lt;br/&gt;        &lt;span&gt;ARRAY&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; [(&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;1001&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;1002&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;1004&lt;/span&gt;)] &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver&lt;br/&gt;    &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;ALL&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver,&lt;br/&gt;        uniqCombinedState(uid) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;            a&lt;span&gt;.1&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;            a&lt;span&gt;.2&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; ver,&lt;br/&gt;            a&lt;span&gt;.3&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; uid&lt;br/&gt;        &lt;span&gt;FROM&lt;/span&gt; system.one&lt;br/&gt;        &lt;span&gt;ARRAY&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; [(&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;1009&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;1010&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;1130&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;1131&lt;/span&gt;)] &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver&lt;br/&gt;    &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;ALL&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver,&lt;br/&gt;        uniqCombinedState(uid) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;            a&lt;span&gt;.1&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;            a&lt;span&gt;.2&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; ver,&lt;br/&gt;            a&lt;span&gt;.3&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; uid&lt;br/&gt;        &lt;span&gt;FROM&lt;/span&gt; system.one&lt;br/&gt;        &lt;span&gt;ARRAY&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; [(&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;2001&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;3002&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.1&#x27;&lt;/span&gt;, &lt;span&gt;3004&lt;/span&gt;)] &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver&lt;br/&gt;    &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;ALL&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver,&lt;br/&gt;        uniqCombinedState(uid) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;            a&lt;span&gt;.1&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;            a&lt;span&gt;.2&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; ver,&lt;br/&gt;            a&lt;span&gt;.3&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; uid&lt;br/&gt;        &lt;span&gt;FROM&lt;/span&gt; system.one&lt;br/&gt;        &lt;span&gt;ARRAY&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; [(&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;2009&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;1010&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;2130&lt;/span&gt;), (&lt;span&gt;&#x27;android&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1.2&#x27;&lt;/span&gt;, &lt;span&gt;2131&lt;/span&gt;)] &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;        platform,&lt;br/&gt;        ver&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;    platform,&lt;br/&gt;    ver&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;a7137a7-f8fb&lt;span&gt;-4&lt;/span&gt;b36-a37f&lt;span&gt;-642348&lt;/span&gt;ab3ac6&lt;br/&gt;&lt;br/&gt;┌─platform─┬─ver─┬─uv─┐&lt;br/&gt;│ android  │ &lt;span&gt;1.2&lt;/span&gt; │  &lt;span&gt;7&lt;/span&gt; │&lt;br/&gt;│ android  │ &lt;span&gt;1.1&lt;/span&gt; │  &lt;span&gt;7&lt;/span&gt; │&lt;br/&gt;└──────────┴─────┴────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.009&lt;/span&gt; sec.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里使用union all 模拟的是每个批次的写入数据。通过这个case主要是介绍uniqCombined生成中间态和解中间态的过程，避免大家错误使用哈。通过刚才的错误sql也侧面说明了，中间态存储的记录数要小于原表写入的数据，主要是按照group by的字段进行聚合计算得到的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;接着讲第二个场景，pv的计算。&lt;/strong&gt;一般情况下，pv通常采用sum进行计算，sum计算和uv计算存在一个比较大的差异，那就是结果值可以累加。所以从逻辑上来讲，每批次计算可以直接是结果值，那么在聚合的时候可以再次进行sum操作可以得到正确的结果。那么这个时候除了采用AggregateFunction外存储中间态外也可以选择SimpleAggregateFunction存储每次计算结果，存储开销是不一样的&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; byteSize(xx)&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt; sumSimpleState(a) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;1001&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;        &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;ALL&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;1002&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    )&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: ac6c5354-d59e&lt;span&gt;-49&lt;/span&gt;a0-a54f-ea480acc8f3f&lt;br/&gt;&lt;br/&gt;┌─byteSize(xx)─┐&lt;br/&gt;│            &lt;span&gt;8&lt;/span&gt; │&lt;br/&gt;└──────────────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; byteSize(xx)&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt; sumState(a) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;1001&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;        &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;ALL&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;1002&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    )&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;01&lt;/span&gt;b2ecb5&lt;span&gt;-9e14&lt;/span&gt;&lt;span&gt;-4&lt;/span&gt;f85&lt;span&gt;-8&lt;/span&gt;cc6&lt;span&gt;-5033671560&lt;/span&gt;ac&lt;br/&gt;&lt;br/&gt;┌─byteSize(xx)─┐&lt;br/&gt;│           &lt;span&gt;16&lt;/span&gt; │&lt;br/&gt;└──────────────┘&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2倍的存储差距，再来简单测试下查询效率&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;--SimpleAggregateFunction&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(xx)&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        a % &lt;span&gt;1000&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; b,&lt;br/&gt;        sumSimpleState(a) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;number&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;        &lt;span&gt;FROM&lt;/span&gt; numbers(&lt;span&gt;1000000000&lt;/span&gt;)&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; b&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;7&lt;/span&gt;c8f4b77&lt;span&gt;-1033&lt;/span&gt;&lt;span&gt;-4184&lt;/span&gt;-ad2f&lt;span&gt;-1e6719723&lt;/span&gt;aca&lt;br/&gt;&lt;br/&gt;┌────────────&lt;span&gt;sum&lt;/span&gt;(xx)─┐&lt;br/&gt;│ &lt;span&gt;499999999500000000&lt;/span&gt; │&lt;br/&gt;└────────────────────┘&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;4.140&lt;/span&gt; sec. Processed &lt;span&gt;1.00&lt;/span&gt; billion &lt;span&gt;rows&lt;/span&gt;, &lt;span&gt;8.00&lt;/span&gt; GB (&lt;span&gt;241.58&lt;/span&gt; million &lt;span&gt;rows&lt;/span&gt;/s., &lt;span&gt;1.93&lt;/span&gt; GB/s.)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;--AggregateFunction&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; sumMerge(xx)&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        a % &lt;span&gt;1000&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; b,&lt;br/&gt;        sumState(a) &lt;span&gt;AS&lt;/span&gt; xx&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;    (&lt;br/&gt;        &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;number&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;        &lt;span&gt;FROM&lt;/span&gt; numbers(&lt;span&gt;1000000000&lt;/span&gt;)&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; b&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;401&lt;/span&gt;c0a9f&lt;span&gt;-30&lt;/span&gt;fe&lt;span&gt;-4&lt;/span&gt;d9a&lt;span&gt;-88&lt;/span&gt;b0&lt;span&gt;-1&lt;/span&gt;a33ffcf4f43&lt;br/&gt;&lt;br/&gt;┌───────sumMerge(xx)─┐&lt;br/&gt;│ &lt;span&gt;499999999500000000&lt;/span&gt; │&lt;br/&gt;└────────────────────┘&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;3.201&lt;/span&gt; sec. Processed &lt;span&gt;1.00&lt;/span&gt; billion &lt;span&gt;rows&lt;/span&gt;, &lt;span&gt;8.00&lt;/span&gt; GB (&lt;span&gt;312.42&lt;/span&gt; million &lt;span&gt;rows&lt;/span&gt;/s., &lt;span&gt;2.50&lt;/span&gt; GB/s.)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询上有些许差距，这里的数据是通过numbers()函数生成，但是如果是写入和查询完全通过磁盘io的话，这个差距理论上会非常小，SimpleAggregateFunction会读数据更少，写数据更少，存储差距为刚好一半。其中，几乎所有的聚合函数都可以使用AggregateFunction，而只有某些场景可以使用SimpleAggregateFunction，所以在于推广使用和上层查询统一时，可以只选择使用AggregateFunction。根据业务场景自行取舍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了uniqCombined和sum外，还有非常多的聚合函数通过物化视图可以实现，这里主要列举一下uv和pv使用的案例，其他的函数也是相同的用法。这个里有个注意事项，需要注意，AggregateFunction严格要求输入字段的类型，比如1就是UInt8，不能是UInt16，AggregateFunction(sum,UInt32)不能被写入到AggregateFunction(sum,UInt8)里，这个错误在创建物化视图的时候是不会感知到的(建表校验问题，已提issues)，但是在写入的时候是会报错的，所以在错误感知上要弱一些，数据一致性会受到影响。SimpleAggregateFunction和AggregateFunction在sum场景有些不一样，它的输入参数如果是UInt或者Int行，那么它的输入参数只能是UInt64或者Int64，而不是必须按照输入字段。可能的事SimpleAggragateFunction的输出又是下个过程的输入，所以SimpleAggregateFunction(sum,type)中的type是按照输出参数类型去创建，max，min等输入输出同类型的没有这个情况。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;物化视图的进阶使用&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面是物化视图的一个简单case，主要针对一些单日志的固化场景处理，减少数据量级，提高查询效率。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;背景&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实在实际使用的场景下，经常会遇到一个维度关联的问题，比如将物品的类别带入，用户的画像信息带入等场景。这里简单列举下在clickhouse中做维度补全的操作。主要用到了用户维度数据和物品维度数据两个本地表，基于这两个本地表去生成内存字典，通过内存字典去做关联(字典有很多种存储结构，这里主要列举hashed模式)。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;字典处理过程&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过离线导入将数据写入了ods.user_dim_local和ods.item_dim_local两个本地表，然后通过查询dim.user_dim_dis和dim.item_dim_dis两个表提供完整数据(这里只是单机列举案例，集群模式同理)。通过从clickhouse查询数据写入到内存字典中，创建字典的sql如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;--创建user字典&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; DICTIONARY dim.dict_user_dim &lt;span&gt;on&lt;/span&gt; cluster cluster (&lt;br/&gt; uid UInt64 ,&lt;br/&gt; platform &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; ,&lt;br/&gt; country &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; ,&lt;br/&gt; province &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; ,&lt;br/&gt; isp &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; ,&lt;br/&gt; app_version &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; ,&lt;br/&gt; os_version &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt; mac &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; ,&lt;br/&gt; ip &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt; gender &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt; age Int16 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;) PRIMARY &lt;span&gt;KEY&lt;/span&gt; uid &lt;br/&gt;&lt;span&gt;SOURCE&lt;/span&gt;(&lt;br/&gt;  CLICKHOUSE(&lt;br/&gt;    HOST &lt;span&gt;&#x27;localhost&#x27;&lt;/span&gt; PORT &lt;span&gt;9000&lt;/span&gt; &lt;span&gt;USER&lt;/span&gt; &lt;span&gt;&#x27;default&#x27;&lt;/span&gt; &lt;span&gt;PASSWORD&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; DB &lt;span&gt;&#x27;dim&#x27;&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;&#x27;user_dim_dis&#x27;&lt;/span&gt;&lt;br/&gt;  )&lt;br/&gt;) LIFETIME(&lt;span&gt;MIN&lt;/span&gt; &lt;span&gt;1800&lt;/span&gt; &lt;span&gt;MAX&lt;/span&gt; &lt;span&gt;3600&lt;/span&gt;) LAYOUT(HASHED());&lt;br/&gt;&lt;br/&gt;&lt;span&gt;--创建item字典&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; DICTIONARY dim.dict_item_dim &lt;span&gt;on&lt;/span&gt; cluster cluster (&lt;br/&gt; item_id UInt64 ,&lt;br/&gt; type_id UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt; price UInt32 &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;) PRIMARY &lt;span&gt;KEY&lt;/span&gt; item_id &lt;br/&gt;&lt;span&gt;SOURCE&lt;/span&gt;(&lt;br/&gt;  CLICKHOUSE(&lt;br/&gt;    HOST &lt;span&gt;&#x27;localhost&#x27;&lt;/span&gt; PORT &lt;span&gt;9000&lt;/span&gt; &lt;span&gt;USER&lt;/span&gt; &lt;span&gt;&#x27;default&#x27;&lt;/span&gt; &lt;span&gt;PASSWORD&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; DB &lt;span&gt;&#x27;dim&#x27;&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;&#x27;item_dim_dis&#x27;&lt;/span&gt;&lt;br/&gt;  )&lt;br/&gt;) LIFETIME(&lt;span&gt;MIN&lt;/span&gt; &lt;span&gt;1800&lt;/span&gt; &lt;span&gt;MAX&lt;/span&gt; &lt;span&gt;3600&lt;/span&gt;) LAYOUT(HASHED())&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里创建字典的语法不做详细介绍，想要更深了解可以参考官方文档。如果使用clickhouse查询分布式表提供字典数据来源，建议Host为一个查询代理，避免对某个节点产生负面效应。DB和table也可以使用view封装一段sql实现。字典的数据是冗余在所有节点的，默认字典的加载方式是惰性加载，也就是需要至少一次查询才能将字典记载到内存，避免一些不使用的字典对集群带来影响。也可以通过hash分片的方式将用户指定到某个shard，那么字典也可以实现通过hash分片的方式存储在每个节点，间接实现分布式字典，减少数据存储，篇幅有限不展开介绍。在创建字典之后，可以有两种模式使用字典，一种是通过dictGet，另外一种方式是通过join，如果只查询一个key建议通过dictGet使用，代码复杂可读性高，同时字典查的value可以作为另一个查询的key，如果查多个key，可以通过dictGet或者join。类似于 select 1 as a,a+1 as b,b+1 as c from system.one这样。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;--单value方法1：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    dictGet(&lt;span&gt;&#x27;dim.dict_user_dim&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;platform&#x27;&lt;/span&gt;, toUInt64(uid)) &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;    uniqCombined(uid) &lt;span&gt;AS&lt;/span&gt; uv&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; dws.action_001_dis&lt;br/&gt;&lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;day&lt;/span&gt; = &lt;span&gt;&#x27;2021-06-05&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; platform&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;52234955&lt;/span&gt;&lt;span&gt;-2&lt;/span&gt;dc9&lt;span&gt;-4117&lt;/span&gt;&lt;span&gt;-9&lt;/span&gt;f2a&lt;span&gt;-45&lt;/span&gt;ab97249ea7&lt;br/&gt;&lt;br/&gt;┌─platform─┬───uv─┐&lt;br/&gt;│ android  │ &lt;span&gt;9624&lt;/span&gt; │&lt;br/&gt;│ ios      │ &lt;span&gt;4830&lt;/span&gt; │&lt;br/&gt;└──────────┴──────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.009&lt;/span&gt; sec. Processed &lt;span&gt;49.84&lt;/span&gt; thousand &lt;span&gt;rows&lt;/span&gt;, &lt;span&gt;299.07&lt;/span&gt; KB (&lt;span&gt;5.37&lt;/span&gt; million &lt;span&gt;rows&lt;/span&gt;/s., &lt;span&gt;32.24&lt;/span&gt; MB/s.)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;--多value方法1：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    dictGet(&lt;span&gt;&#x27;dim.dict_user_dim&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;platform&#x27;&lt;/span&gt;, toUInt64(uid)) &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;    dictGet(&lt;span&gt;&#x27;dim.dict_user_dim&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;gender&#x27;&lt;/span&gt;, toUInt64(uid)) &lt;span&gt;AS&lt;/span&gt; gender,&lt;br/&gt;    uniqCombined(uid) &lt;span&gt;AS&lt;/span&gt; uv&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; dws.action_001_dis&lt;br/&gt;&lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;day&lt;/span&gt; = &lt;span&gt;&#x27;2021-06-05&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;    platform,&lt;br/&gt;    gender&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: ed255ee5&lt;span&gt;-9036&lt;/span&gt;&lt;span&gt;-4385&lt;/span&gt;&lt;span&gt;-9&lt;/span&gt;a51&lt;span&gt;-35923&lt;/span&gt;fef6e48&lt;br/&gt;&lt;br/&gt;┌─platform─┬─gender─┬───uv─┐&lt;br/&gt;│ ios      │ 男     │ &lt;span&gt;2236&lt;/span&gt; │&lt;br/&gt;│ android  │ 女     │ &lt;span&gt;4340&lt;/span&gt; │&lt;br/&gt;│ android  │ 未知   │  &lt;span&gt;941&lt;/span&gt; │&lt;br/&gt;│ android  │ 男     │ &lt;span&gt;4361&lt;/span&gt; │&lt;br/&gt;│ ios      │ 女     │ &lt;span&gt;2161&lt;/span&gt; │&lt;br/&gt;│ ios      │ 未知   │  &lt;span&gt;433&lt;/span&gt; │&lt;br/&gt;└──────────┴────────┴──────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.011&lt;/span&gt; sec. Processed &lt;span&gt;49.84&lt;/span&gt; thousand &lt;span&gt;rows&lt;/span&gt;, &lt;span&gt;299.07&lt;/span&gt; KB (&lt;span&gt;4.70&lt;/span&gt; million &lt;span&gt;rows&lt;/span&gt;/s., &lt;span&gt;28.20&lt;/span&gt; MB/s.)&lt;br/&gt;&lt;span&gt;--单value方法2:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    t2.platform &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;    uniqCombined(t1.uid) &lt;span&gt;AS&lt;/span&gt; uv&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; dws.action_001_dis &lt;span&gt;AS&lt;/span&gt; t1&lt;br/&gt;&lt;span&gt;INNER&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; dim.dict_user_dim &lt;span&gt;AS&lt;/span&gt; t2 &lt;span&gt;ON&lt;/span&gt; toUInt64(t1.uid) = t2.uid&lt;br/&gt;&lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;day&lt;/span&gt; = &lt;span&gt;&#x27;2021-06-05&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; platform&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;8906e637&lt;/span&gt;&lt;span&gt;-475e-4386&lt;/span&gt;&lt;span&gt;-946e-29&lt;/span&gt;e1690f07ea&lt;br/&gt;&lt;br/&gt;┌─platform─┬───uv─┐&lt;br/&gt;│ android  │ &lt;span&gt;9624&lt;/span&gt; │&lt;br/&gt;│ ios      │ &lt;span&gt;4830&lt;/span&gt; │&lt;br/&gt;└──────────┴──────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.011&lt;/span&gt; sec. Processed &lt;span&gt;49.84&lt;/span&gt; thousand &lt;span&gt;rows&lt;/span&gt;, &lt;span&gt;299.07&lt;/span&gt; KB (&lt;span&gt;4.55&lt;/span&gt; million &lt;span&gt;rows&lt;/span&gt;/s., &lt;span&gt;27.32&lt;/span&gt; MB/s.)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;--多value方法2:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    t2.platform &lt;span&gt;AS&lt;/span&gt; platform,&lt;br/&gt;    t2.gender &lt;span&gt;AS&lt;/span&gt; gender,&lt;br/&gt;    uniqCombined(t1.uid) &lt;span&gt;AS&lt;/span&gt; uv&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; dws.action_001_dis &lt;span&gt;AS&lt;/span&gt; t1&lt;br/&gt;&lt;span&gt;INNER&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; dim.dict_user_dim &lt;span&gt;AS&lt;/span&gt; t2 &lt;span&gt;ON&lt;/span&gt; toUInt64(t1.uid) = t2.uid&lt;br/&gt;&lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;day&lt;/span&gt; = &lt;span&gt;&#x27;2021-06-05&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;    platform,&lt;br/&gt;    gender&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;88&lt;/span&gt;ef55a6-ddcc&lt;span&gt;-42&lt;/span&gt;f8&lt;span&gt;-8&lt;/span&gt;ce3&lt;span&gt;-5e3&lt;/span&gt;bb639b38a&lt;br/&gt;&lt;br/&gt;┌─platform─┬─gender─┬───uv─┐&lt;br/&gt;│ ios      │ 男     │ &lt;span&gt;2236&lt;/span&gt; │&lt;br/&gt;│ android  │ 女     │ &lt;span&gt;4340&lt;/span&gt; │&lt;br/&gt;│ android  │ 未知   │  &lt;span&gt;941&lt;/span&gt; │&lt;br/&gt;│ android  │ 男     │ &lt;span&gt;4361&lt;/span&gt; │&lt;br/&gt;│ ios      │ 女     │ &lt;span&gt;2161&lt;/span&gt; │&lt;br/&gt;│ ios      │ 未知   │  &lt;span&gt;433&lt;/span&gt; │&lt;br/&gt;└──────────┴────────┴──────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.015&lt;/span&gt; sec. Processed &lt;span&gt;49.84&lt;/span&gt; thousand &lt;span&gt;rows&lt;/span&gt;, &lt;span&gt;299.07&lt;/span&gt; KB (&lt;span&gt;3.34&lt;/span&gt; million &lt;span&gt;rows&lt;/span&gt;/s., &lt;span&gt;20.07&lt;/span&gt; MB/s.)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从查询结果来看，dictGet要更快一些，同时在代码可读性上也要更好一些，可以结合场景使用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;业务场景&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;产品随着分析的不断深入，提了一个新的诉求，希望增加1个维度(通过字典获得)，1个指标(这里只是列举下物化视图的维度和指标的添加过程)。维度：gender
指标: 曝光时长中位数&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;创建过程&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为涉及到新增维度和指标，所以需要对原表进行ddl操作。首先新增维度，新增维度比较麻烦一些，因为不光需要新增字段，还可能需要将新增的字段加到索引里面提高查询效率。操作sql如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;--新增维度并添加到索引&lt;/span&gt;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; gender &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;性别&#x27;&lt;/span&gt; &lt;span&gt;after&lt;/span&gt; item_id,&lt;span&gt;modify&lt;/span&gt; &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; &lt;br/&gt;(&lt;span&gt;day&lt;/span&gt;,&lt;span&gt;hour&lt;/span&gt;,platform,ver,item_id,gender);&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;modify&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; gender &lt;span&gt;String&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&#x27;未知&#x27;&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;性别&#x27;&lt;/span&gt; &lt;span&gt;after&lt;/span&gt; item_id;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dws.mainpage_stat_mv_dis &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; gender &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;性别&#x27;&lt;/span&gt; &lt;span&gt;after&lt;/span&gt; item_id;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;--新增指标&lt;/span&gt;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; show_time_median AggregateFunction(medianExact,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光时长中位数&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dws.mainpage_stat_mv_dis &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; show_time_median AggregateFunction(medianExact,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光时长中位数&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改物化视图计算逻辑&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;drop&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; dwm.mv_main_page_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;MATERIALIZED&lt;/span&gt; &lt;span&gt;VIEW&lt;/span&gt; dwm.mv_main_page_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;to&lt;/span&gt; dwm.mainpage_stat_mv_local (&lt;br/&gt;&lt;span&gt;day&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据分区-天&#x27;&lt;/span&gt;&lt;br/&gt;,&lt;span&gt;hour&lt;/span&gt; DateTime &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据时间-小时(DateTime)&#x27;&lt;/span&gt;&lt;br/&gt;,platform &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;平台 android/ios&#x27;&lt;/span&gt;&lt;br/&gt;,ver &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;版本&#x27;&lt;/span&gt;&lt;br/&gt;,item_id UInt32 &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;物品id&#x27;&lt;/span&gt;&lt;br/&gt;,gender &lt;span&gt;String&lt;/span&gt;  &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;性别&#x27;&lt;/span&gt;&lt;br/&gt;,shown_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光人数&#x27;&lt;/span&gt;&lt;br/&gt;,shown_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光次数&#x27;&lt;/span&gt;&lt;br/&gt;,click_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;点击人数&#x27;&lt;/span&gt;&lt;br/&gt;,click_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;点击次数&#x27;&lt;/span&gt;&lt;br/&gt;,show_time_sum  SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;总曝光时间/秒&#x27;&lt;/span&gt;&lt;br/&gt;,show_time_median AggregateFunction(medianExact,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光时长中位数&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;AS&lt;/span&gt; &lt;br/&gt; &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;     ,&lt;span&gt;hour&lt;/span&gt;&lt;br/&gt;     ,platform&lt;br/&gt;     ,ver&lt;br/&gt;     ,item_id&lt;br/&gt;     ,dictGet(&lt;span&gt;&#x27;dim.dict_user_dim&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;gender&#x27;&lt;/span&gt;,toUInt64(uid)) &lt;span&gt;as&lt;/span&gt; gender&lt;br/&gt;     ,uniqCombinedStateIf(uid,a.show_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; shown_uv&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(a.show_cnt) &lt;span&gt;as&lt;/span&gt; show_cnt&lt;br/&gt;     ,uniqCombinedStateIf(uid,a.click_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; click_uv&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(a.click_cnt) &lt;span&gt;as&lt;/span&gt; click_cnt&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(toUInt64(show_time/&lt;span&gt;1000&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt; show_time_sum&lt;br/&gt;     ,medianExactState(toUInt32(show_time/&lt;span&gt;1000&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt; show_time_median&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; ods.action_001_local &lt;span&gt;as&lt;/span&gt; a&lt;br/&gt;&lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;     ,&lt;span&gt;hour&lt;/span&gt;&lt;br/&gt;     ,platform&lt;br/&gt;     ,ver&lt;br/&gt;     ,item_id&lt;br/&gt;     ,gender&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过这个case主要讲了三个方面，一是外部字典的创建和使用，二是物化视图的增加维度和指标，三物化视图结合字典进行增维。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;物化视图的再进阶&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文在创建log的时候创建了2个log，在上面的case中只用到了一个，接下来的case主要讲一个物化视图的进一步用法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;背景&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多时候，我们的日志上报并不是在一个日志中的，比如上文中创建的action_001和action_002，一个是主页物品的曝光和点击，一个是点击进行物品详情的其他行为。这个时候，产品提了一个诉求，希望可以知道曝光到点击，点击到某个更一步的行为的用户转换率。我们最常规的方法是，使用join去将结果关联，这里只是两个log，那么后续有非常多的log，写起join来就会相当麻烦，甚至会有上千行代码去作逻辑处理，效率上也会差很多。所以就衍生了接下来主要讲的用法，基于物化视图实现有限join场景。主要是多个不同日志指标的合并。其实更应该理解为union all max。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;可行性分析&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;物化视图在每批次写入数据之后，后台会按照聚合key进行merge操作，将相同维度的数据的记录聚合在一起，降低数据量，提高查询效率。如果在这一批数据，没有满足条件的列(if组合器)或者并没有写这一指标(指定字段写)，那么指标会怎么存，如果下一批数据写入数据，那么这两批数据的这个指标，会怎么样？答案是存可迭代的空数据(&lt;strong&gt;注意这里的不写，存的数据不能理解为null&lt;/strong&gt;)，同时可以和其他批数据进行合并，没有数据的行会被忽略。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; test.mv_union_max&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;`id`&lt;/span&gt; UInt32,&lt;br/&gt;    &lt;span&gt;`m1`&lt;/span&gt; AggregateFunction(uniqCombined, UInt32),&lt;br/&gt;    &lt;span&gt;`m2`&lt;/span&gt; AggregateFunction(&lt;span&gt;sum&lt;/span&gt;, UInt32)&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;ENGINE&lt;/span&gt; = AggregatingMergeTree&lt;br/&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;20&lt;/span&gt;dcd6cb-e336&lt;span&gt;-4&lt;/span&gt;da8&lt;span&gt;-9033&lt;/span&gt;-de42527d2bf0&lt;br/&gt;&lt;br/&gt;Ok.&lt;br/&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.103&lt;/span&gt; sec.&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 写入数据(这里需要注意指定字段写)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; test.mv_union_max (&lt;span&gt;id&lt;/span&gt;, m1) &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;id&lt;/span&gt;,&lt;br/&gt;    uniqCombinedState(uid) &lt;span&gt;AS&lt;/span&gt; m1&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        a1&lt;span&gt;.1&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;,&lt;br/&gt;        toUInt32(a1&lt;span&gt;.2&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; uid&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt; system.one&lt;br/&gt;    &lt;span&gt;ARRAY&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; [(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;10001&lt;/span&gt;), (&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;10002&lt;/span&gt;), (&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;10003&lt;/span&gt;), (&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;10001&lt;/span&gt;)] &lt;span&gt;AS&lt;/span&gt; a1&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: f04953f6&lt;span&gt;-3&lt;/span&gt;d8a&lt;span&gt;-40&lt;/span&gt;a6-bf7e&lt;span&gt;-5&lt;/span&gt;b15fe936488&lt;br/&gt;&lt;br/&gt;Ok.&lt;br/&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.003&lt;/span&gt; sec.&lt;br/&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; *&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; test.mv_union_max&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: af592a63-b17d&lt;span&gt;-4764&lt;/span&gt;&lt;span&gt;-9&lt;/span&gt;a65&lt;span&gt;-4&lt;/span&gt;ab33e122d81&lt;br/&gt;&lt;br/&gt;┌─&lt;span&gt;id&lt;/span&gt;─┬─m1──┬─m2─┐&lt;br/&gt;│  &lt;span&gt;1&lt;/span&gt; │ l��&lt;br/&gt;               │    │&lt;br/&gt;│  &lt;span&gt;2&lt;/span&gt; │ $a6� │    │&lt;br/&gt;│  &lt;span&gt;3&lt;/span&gt; │ ��Gwl��&lt;br/&gt;                 │    │&lt;br/&gt;└────┴─────┴────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.002&lt;/span&gt; sec.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在写入m1指标后显示有3条记录，其中m2为空数据（这里需要注意的是，m2不是null)，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; isNotNull(m2)&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; test.mv_union_max&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: b1ac77df-af77&lt;span&gt;-4&lt;/span&gt;f2e&lt;span&gt;-9368&lt;/span&gt;&lt;span&gt;-2573&lt;/span&gt;a7214c99&lt;br/&gt;&lt;br/&gt;┌─isNotNull(m2)─┐&lt;br/&gt;│             &lt;span&gt;1&lt;/span&gt; │&lt;br/&gt;│             &lt;span&gt;1&lt;/span&gt; │&lt;br/&gt;│             &lt;span&gt;1&lt;/span&gt; │&lt;br/&gt;└───────────────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.002&lt;/span&gt; sec.&lt;br/&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; toTypeName(m2)&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; test.mv_union_max&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: fcb15349&lt;span&gt;-4&lt;/span&gt;a33&lt;span&gt;-4253&lt;/span&gt;-bf64&lt;span&gt;-37&lt;/span&gt;f5dc7078ea&lt;br/&gt;&lt;br/&gt;┌─toTypeName(m2)─────────────────┐&lt;br/&gt;│ AggregateFunction(&lt;span&gt;sum&lt;/span&gt;, UInt32) │&lt;br/&gt;│ AggregateFunction(&lt;span&gt;sum&lt;/span&gt;, UInt32) │&lt;br/&gt;│ AggregateFunction(&lt;span&gt;sum&lt;/span&gt;, UInt32) │&lt;br/&gt;└────────────────────────────────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.002&lt;/span&gt; sec.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时候再写入m2指标，不写入m1指标，那么会发生什么情况。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; *&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; test.mv_union_max&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;7&lt;/span&gt;eaa2d42-c50e&lt;span&gt;-4467&lt;/span&gt;&lt;span&gt;-9&lt;/span&gt;dca&lt;span&gt;-55&lt;/span&gt;a0b5eab579&lt;br/&gt;&lt;br/&gt;┌─&lt;span&gt;id&lt;/span&gt;─┬─m1──┬─m2─┐&lt;br/&gt;│  &lt;span&gt;1&lt;/span&gt; │ l��&lt;br/&gt;               │    │&lt;br/&gt;│  &lt;span&gt;2&lt;/span&gt; │ $a6� │    │&lt;br/&gt;│  &lt;span&gt;3&lt;/span&gt; │ ��Gwl��&lt;br/&gt;                 │    │&lt;br/&gt;└────┴─────┴────┘&lt;br/&gt;┌─&lt;span&gt;id&lt;/span&gt;─┬─m1─┬─m2─┐&lt;br/&gt;│  &lt;span&gt;1&lt;/span&gt; │    │ �   │&lt;br/&gt;│  &lt;span&gt;2&lt;/span&gt; │    │ &lt;span&gt;&#x27;  │&lt;br/&gt;│  3 │    │ &#x27;&lt;/span&gt;  │&lt;br/&gt;└────┴────┴────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.003&lt;/span&gt; sec.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;存了6条记录，分别上两次写入的数据。在手动触发merge之前先确认下，查询的数据是否是正确的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;id&lt;/span&gt;,&lt;br/&gt;    uniqCombinedMerge(m1) &lt;span&gt;AS&lt;/span&gt; m1,&lt;br/&gt;    sumMerge(m2) &lt;span&gt;AS&lt;/span&gt; m2&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; test.mv_union_max&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;f92106a&lt;span&gt;-1&lt;/span&gt;b72&lt;span&gt;-4&lt;/span&gt;d86-ab74&lt;span&gt;-59&lt;/span&gt;c7ac53c202&lt;br/&gt;&lt;br/&gt;┌─&lt;span&gt;id&lt;/span&gt;─┬─m1─┬────m2─┐&lt;br/&gt;│  &lt;span&gt;3&lt;/span&gt; │  &lt;span&gt;2&lt;/span&gt; │ &lt;span&gt;10001&lt;/span&gt; │&lt;br/&gt;│  &lt;span&gt;2&lt;/span&gt; │  &lt;span&gt;1&lt;/span&gt; │ &lt;span&gt;10001&lt;/span&gt; │&lt;br/&gt;│  &lt;span&gt;1&lt;/span&gt; │  &lt;span&gt;1&lt;/span&gt; │  &lt;span&gt;2003&lt;/span&gt; │&lt;br/&gt;└────┴────┴───────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.003&lt;/span&gt; sec.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据完全正确，首先可以确认的是，就算不后台merge，查询数据是完全符合需求的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;OPTIMIZE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; test.mv_union_max &lt;span&gt;FINAL&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;62465025&lt;/span&gt;-da30&lt;span&gt;-4&lt;/span&gt;df0-a597&lt;span&gt;-18&lt;/span&gt;c0c4eb1b2f&lt;br/&gt;&lt;br/&gt;Ok.&lt;br/&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.001&lt;/span&gt; sec.&lt;br/&gt;&lt;br/&gt;cluster-shard1-ck01 :) &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test.mv_union_max ;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; *&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; test.mv_union_max&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: f7fb359f&lt;span&gt;-3860&lt;/span&gt;&lt;span&gt;-4598&lt;/span&gt;-b766&lt;span&gt;-812&lt;/span&gt;ac2f65755&lt;br/&gt;&lt;br/&gt;┌─&lt;span&gt;id&lt;/span&gt;─┬─m1──┬─m2─┐&lt;br/&gt;│  &lt;span&gt;1&lt;/span&gt; │ l��&lt;br/&gt;               │ �   │&lt;br/&gt;│  &lt;span&gt;2&lt;/span&gt; │ $a6� │ &lt;span&gt;&#x27;  │&lt;br/&gt;│  3 │ ��Gwl��&lt;br/&gt;                 │ &#x27;&lt;/span&gt;  │&lt;br/&gt;└────┴─────┴────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.002&lt;/span&gt; sec.&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;id&lt;/span&gt;,&lt;br/&gt;    uniqCombinedMerge(m1) &lt;span&gt;AS&lt;/span&gt; m1,&lt;br/&gt;    sumMerge(m2) &lt;span&gt;AS&lt;/span&gt; m2&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; test.mv_union_max&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;2543&lt;/span&gt;a145-e540&lt;span&gt;-43&lt;/span&gt;dc&lt;span&gt;-8754&lt;/span&gt;&lt;span&gt;-101&lt;/span&gt;ebb294b5d&lt;br/&gt;&lt;br/&gt;┌─&lt;span&gt;id&lt;/span&gt;─┬─m1─┬────m2─┐&lt;br/&gt;│  &lt;span&gt;3&lt;/span&gt; │  &lt;span&gt;2&lt;/span&gt; │ &lt;span&gt;10001&lt;/span&gt; │&lt;br/&gt;│  &lt;span&gt;2&lt;/span&gt; │  &lt;span&gt;1&lt;/span&gt; │ &lt;span&gt;10001&lt;/span&gt; │&lt;br/&gt;│  &lt;span&gt;1&lt;/span&gt; │  &lt;span&gt;1&lt;/span&gt; │  &lt;span&gt;2003&lt;/span&gt; │&lt;br/&gt;└────┴────┴───────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.003&lt;/span&gt; sec.&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据是可以后台merge在一起的。所以说通过这个case能简单了解到实现原理和可行性。通过这种方式就可以避免了两个log之间的查询关联，可以通过一个物化视图存储表组织好维度和指标，查询基于一张宽表实现。众所周知，clickhouse的单表性能非常强，能不join就尽量不join，这个场景可以减少一部分join的场景(维度补全通过字典，如果维度基数特别大，可以借用flink或者redis字典或者高并发接口补全，这里不做细述)，便于使用和上层平台的查询规范，另一方面这样也可以减少存储占用，将相同维度的数据尽可能压在一起。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;业务场景&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着需求的进一步细化，上报了新的action_002，用来分析用户在进入商品页面后的行为。产品希望可以实现基础指标统计和用户的漏斗分析，(简化一下，对维度没有发生变化)。结合对需求的了解，对原有的物化视图增加了一些指标。这里uv，pv，bitmap3个场景都进行了列举，bitmap也可以实现uv，但是效率上慢一些。新增指标：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;指标名&lt;/th&gt;&lt;th&gt;指标解释&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;acta_uv&lt;/td&gt;&lt;td&gt;行为A用户数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;acta_cnt&lt;/td&gt;&lt;td&gt;行为A记录数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;actb_uv&lt;/td&gt;&lt;td&gt;行为B用户数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;actb_cnt&lt;/td&gt;&lt;td&gt;行为B记录数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;actc_uv&lt;/td&gt;&lt;td&gt;行为C用户数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;actc_cnt&lt;/td&gt;&lt;td&gt;行为C记录数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;show_bm&lt;/td&gt;&lt;td&gt;曝光Bitmap&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;click_bm&lt;/td&gt;&lt;td&gt;点击Bitmap&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;acta_bm&lt;/td&gt;&lt;td&gt;行为A Bitmap&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;actb_bm&lt;/td&gt;&lt;td&gt;行为B Bitmap&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;actc_bm&lt;/td&gt;&lt;td&gt;行为C Bitmap&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;actd_bm&lt;/td&gt;&lt;td&gt;行为D Bitmap&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;action_002从生成逻辑上假设了一条用户交互路径。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;a-&amp;gt;b-&amp;gt;c-&amp;gt;d&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;action_001从生成逻辑上假设了一条用户路径。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;show-&amp;gt;click&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是为了降低代码复杂度 click-&amp;gt;a并没有强制关联(主要讲方法，这个细节忽略)。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;操作过程&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要对原有物化视图存储表新增上述所有指标，同时对物化视图计算表001新增show_bm、click_bm，物化视图计算表002为新建的计算表，都会写入到最开始建的物化视图存储表中。操作过程如下(sql有些长):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;--物化视图存储表新增指标&lt;/span&gt;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; acta_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;acta_uv&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; acta_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;acta_cnt&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; actb_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actb_uv&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; actb_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actb_cnt&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; actc_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actc_uv&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; actc_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actc_cnt&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; show_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;show_bm&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; click_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;click_bm&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; acta_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;acta_bm&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; actb_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actb_bm&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; actc_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actc_bm&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mainpage_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; actd_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actd_bm&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;--物化视图计算表重建 因为medianExact 耗时较大，接下来的case里去掉了。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;drop&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; dwm.mv_main_page_stat_mv_local &lt;span&gt;on&lt;/span&gt; cluster cluster;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;MATERIALIZED&lt;/span&gt; &lt;span&gt;VIEW&lt;/span&gt; dwm.mv_main_page_stat_mv_001_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;to&lt;/span&gt; dwm.mainpage_stat_mv_local (&lt;br/&gt;&lt;span&gt;day&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据分区-天&#x27;&lt;/span&gt;&lt;br/&gt;,&lt;span&gt;hour&lt;/span&gt; DateTime &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据时间-小时(DateTime)&#x27;&lt;/span&gt;&lt;br/&gt;,platform &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;平台 android/ios&#x27;&lt;/span&gt;&lt;br/&gt;,ver &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;版本&#x27;&lt;/span&gt;&lt;br/&gt;,item_id UInt32 &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;物品id&#x27;&lt;/span&gt;&lt;br/&gt;,gender &lt;span&gt;String&lt;/span&gt;  &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;性别&#x27;&lt;/span&gt;&lt;br/&gt;,shown_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光人数&#x27;&lt;/span&gt;&lt;br/&gt;,shown_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;曝光次数&#x27;&lt;/span&gt;&lt;br/&gt;,click_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;点击人数&#x27;&lt;/span&gt;&lt;br/&gt;,click_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;点击次数&#x27;&lt;/span&gt;&lt;br/&gt;,show_time_sum  SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;总曝光时间/秒&#x27;&lt;/span&gt;&lt;br/&gt;,show_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;show_bm&#x27;&lt;/span&gt;&lt;br/&gt;,click_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;click_bm&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;AS&lt;/span&gt; &lt;br/&gt; &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;     ,&lt;span&gt;hour&lt;/span&gt;&lt;br/&gt;     ,platform&lt;br/&gt;     ,ver&lt;br/&gt;     ,item_id&lt;br/&gt;     ,dictGet(&lt;span&gt;&#x27;dim.dict_user_dim&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;gender&#x27;&lt;/span&gt;,toUInt64(uid)) &lt;span&gt;as&lt;/span&gt; gender&lt;br/&gt;     ,uniqCombinedStateIf(uid,a.show_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; shown_uv&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(a.show_cnt) &lt;span&gt;as&lt;/span&gt; show_cnt&lt;br/&gt;     ,uniqCombinedStateIf(uid,a.click_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; click_uv&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(a.click_cnt) &lt;span&gt;as&lt;/span&gt; click_cnt&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(toUInt64(show_time/&lt;span&gt;1000&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt; show_time_sum&lt;br/&gt;     ,groupBitmapStateIf(uid,a.show_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; show_bm&lt;br/&gt;     ,groupBitmapStateIf(uid,a.click_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; click_bm&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; ods.action_001_local &lt;span&gt;as&lt;/span&gt; a&lt;br/&gt;&lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;     ,&lt;span&gt;hour&lt;/span&gt;&lt;br/&gt;     ,platform&lt;br/&gt;     ,ver&lt;br/&gt;     ,item_id&lt;br/&gt;     ,gender&lt;br/&gt;&lt;br/&gt;&lt;span&gt;drop&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; dwm.mv_main_page_stat_mv_002_local &lt;span&gt;on&lt;/span&gt; cluster cluster;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;MATERIALIZED&lt;/span&gt; &lt;span&gt;VIEW&lt;/span&gt; dwm.mv_main_page_stat_mv_002_local &lt;span&gt;on&lt;/span&gt; cluster cluster &lt;span&gt;to&lt;/span&gt; dwm.mainpage_stat_mv_local (&lt;br/&gt;&lt;span&gt;day&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据分区-天&#x27;&lt;/span&gt;&lt;br/&gt;,&lt;span&gt;hour&lt;/span&gt; DateTime &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;数据时间-小时(DateTime)&#x27;&lt;/span&gt;&lt;br/&gt;,platform &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;平台 android/ios&#x27;&lt;/span&gt;&lt;br/&gt;,ver &lt;span&gt;String&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;版本&#x27;&lt;/span&gt;&lt;br/&gt;,item_id UInt32 &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;物品id&#x27;&lt;/span&gt;&lt;br/&gt;,gender &lt;span&gt;String&lt;/span&gt;  &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;性别&#x27;&lt;/span&gt;&lt;br/&gt;,acta_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;acta_uv&#x27;&lt;/span&gt;&lt;br/&gt;,acta_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;acta_cnt&#x27;&lt;/span&gt;&lt;br/&gt;,actb_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actb_uv&#x27;&lt;/span&gt;&lt;br/&gt;,actb_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actb_cnt&#x27;&lt;/span&gt;&lt;br/&gt;,actc_uv AggregateFunction(uniqCombined,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actc_uv&#x27;&lt;/span&gt;&lt;br/&gt;,actc_cnt SimpleAggregateFunction(&lt;span&gt;sum&lt;/span&gt;,UInt64) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actc_cnt&#x27;&lt;/span&gt;&lt;br/&gt;,acta_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;acta_bm&#x27;&lt;/span&gt;&lt;br/&gt;,actb_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actb_bm&#x27;&lt;/span&gt;&lt;br/&gt;,actc_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actc_bm&#x27;&lt;/span&gt;&lt;br/&gt;,actd_bm AggregateFunction(groupBitmap,UInt32) &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;actd_bm&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;AS&lt;/span&gt; &lt;br/&gt; &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;     ,&lt;span&gt;hour&lt;/span&gt;&lt;br/&gt;     ,platform&lt;br/&gt;     ,ver&lt;br/&gt;     ,item_id&lt;br/&gt;     ,dictGet(&lt;span&gt;&#x27;dim.dict_user_dim&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;gender&#x27;&lt;/span&gt;,toUInt64(uid)) &lt;span&gt;as&lt;/span&gt; gender&lt;br/&gt;     ,uniqCombinedStateIf(uid,a.action_a_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; acta_uv&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(a.action_a_cnt) &lt;span&gt;as&lt;/span&gt; acta_cnt&lt;br/&gt;     ,uniqCombinedStateIf(uid,a.action_b_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; actb_uv&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(a.action_b_cnt) &lt;span&gt;as&lt;/span&gt; actb_cnt&lt;br/&gt;     ,uniqCombinedStateIf(uid,a.action_c_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; actc_uv&lt;br/&gt;     ,&lt;span&gt;sum&lt;/span&gt;(a.action_c_cnt) &lt;span&gt;as&lt;/span&gt; actc_cnt&lt;br/&gt;     ,groupBitmapStateIf(uid,a.action_a_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; acta_bm&lt;br/&gt;     ,groupBitmapStateIf(uid,a.action_b_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; actb_bm&lt;br/&gt;     ,groupBitmapStateIf(uid,a.action_c_cnt&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; actc_bm&lt;br/&gt;     ,groupBitmapStateIf(uid,a.action_d_sum&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; actd_bm&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; ods.action_002_local &lt;span&gt;as&lt;/span&gt; a&lt;br/&gt;&lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;day&lt;/span&gt;&lt;br/&gt;     ,&lt;span&gt;hour&lt;/span&gt;&lt;br/&gt;     ,platform&lt;br/&gt;     ,ver&lt;br/&gt;     ,item_id&lt;br/&gt;     ,gender&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;操作完成之后就得到了一个物化视图的指标宽表(假设它很宽)。就可以用它来解决一些查询场景。查询场景1：多个日志指标的合并&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;day&lt;/span&gt;,&lt;br/&gt;    gender,&lt;br/&gt;    uniqCombinedMerge(shown_uv) &lt;span&gt;AS&lt;/span&gt; shown_uv,&lt;br/&gt;    uniqCombinedMerge(click_uv) &lt;span&gt;AS&lt;/span&gt; click_uv,&lt;br/&gt;    uniqCombinedMerge(acta_uv) &lt;span&gt;AS&lt;/span&gt; acta_uv,&lt;br/&gt;    uniqCombinedMerge(actb_uv) &lt;span&gt;AS&lt;/span&gt; actb_uv,&lt;br/&gt;    uniqCombinedMerge(actc_uv) &lt;span&gt;AS&lt;/span&gt; actc_uv&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; dws.mainpage_stat_mv_dis&lt;br/&gt;&lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;day&lt;/span&gt; = &lt;span&gt;&#x27;2021-06-06&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;day&lt;/span&gt;,&lt;br/&gt;    gender&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;d4eed47&lt;span&gt;-78&lt;/span&gt;f1&lt;span&gt;-4&lt;/span&gt;c22-a2cd&lt;span&gt;-66&lt;/span&gt;a6a4db14ab&lt;br/&gt;&lt;br/&gt;┌────────&lt;span&gt;day&lt;/span&gt;─┬─gender─┬─shown_uv─┬─click_uv─┬─acta_uv─┬─actb_uv─┬─actc_uv─┐&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ 男     │     &lt;span&gt;6845&lt;/span&gt; │     &lt;span&gt;6157&lt;/span&gt; │    &lt;span&gt;6845&lt;/span&gt; │    &lt;span&gt;5824&lt;/span&gt; │    &lt;span&gt;4826&lt;/span&gt; │&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ 未知   │     &lt;span&gt;1421&lt;/span&gt; │     &lt;span&gt;1277&lt;/span&gt; │    &lt;span&gt;1421&lt;/span&gt; │    &lt;span&gt;1232&lt;/span&gt; │    &lt;span&gt;1029&lt;/span&gt; │&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ 女     │     &lt;span&gt;6734&lt;/span&gt; │     &lt;span&gt;6058&lt;/span&gt; │    &lt;span&gt;6733&lt;/span&gt; │    &lt;span&gt;5776&lt;/span&gt; │    &lt;span&gt;4826&lt;/span&gt; │&lt;br/&gt;└────────────┴────────┴──────────┴──────────┴─────────┴─────────┴─────────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.025&lt;/span&gt; sec. Processed &lt;span&gt;48.70&lt;/span&gt; thousand &lt;span&gt;rows&lt;/span&gt;, &lt;span&gt;24.23&lt;/span&gt; MB (&lt;span&gt;1.98&lt;/span&gt; million &lt;span&gt;rows&lt;/span&gt;/s., &lt;span&gt;983.52&lt;/span&gt; MB/s.)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;--如果使用join的话 这里因为没有分开创建物化视图，只列举语法，所以也不对性能进行对比。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    t1.day,&lt;br/&gt;    t1.gender,&lt;br/&gt;    shown_uv,&lt;br/&gt;    click_uv,&lt;br/&gt;    acta_uv,&lt;br/&gt;    actb_uv,&lt;br/&gt;    actc_uv&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;day&lt;/span&gt;,&lt;br/&gt;        dictGet(&lt;span&gt;&#x27;dim.dict_user_dim&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;gender&#x27;&lt;/span&gt;, toUInt64(uid)) &lt;span&gt;AS&lt;/span&gt; gender,&lt;br/&gt;        uniqCombinedIf(uid, a.show_cnt &amp;gt; &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; shown_uv,&lt;br/&gt;        uniqCombinedIf(uid, a.click_cnt &amp;gt; &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; click_uv&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt; dws.action_001_dis &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    &lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;day&lt;/span&gt; = &lt;span&gt;&#x27;2021-06-06&#x27;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;day&lt;/span&gt;,&lt;br/&gt;        gender&lt;br/&gt;) &lt;span&gt;AS&lt;/span&gt; t1&lt;br/&gt;&lt;span&gt;LEFT&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;day&lt;/span&gt;,&lt;br/&gt;        dictGet(&lt;span&gt;&#x27;dim.dict_user_dim&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;gender&#x27;&lt;/span&gt;, toUInt64(uid)) &lt;span&gt;AS&lt;/span&gt; gender,&lt;br/&gt;        uniqCombinedIf(uid, a.action_a_cnt &amp;gt; &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; acta_uv,&lt;br/&gt;        uniqCombinedIf(uid, a.action_b_cnt &amp;gt; &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; actb_uv,&lt;br/&gt;        uniqCombinedIf(uid, a.action_c_cnt &amp;gt; &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; actc_uv&lt;br/&gt;    &lt;span&gt;FROM&lt;/span&gt; dws.action_002_dis &lt;span&gt;AS&lt;/span&gt; a&lt;br/&gt;    &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;day&lt;/span&gt;,&lt;br/&gt;        gender&lt;br/&gt;) &lt;span&gt;AS&lt;/span&gt; t2 &lt;span&gt;USING&lt;/span&gt; (&lt;span&gt;day&lt;/span&gt;, gender)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;ab32451-e373&lt;span&gt;-4757&lt;/span&gt;&lt;span&gt;-9e25&lt;/span&gt;-f089aef1e9f4&lt;br/&gt;&lt;br/&gt;┌────────&lt;span&gt;day&lt;/span&gt;─┬─gender─┬─shown_uv─┬─click_uv─┬─acta_uv─┬─actb_uv─┬─actc_uv─┐&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ 男     │     &lt;span&gt;6845&lt;/span&gt; │     &lt;span&gt;6209&lt;/span&gt; │    &lt;span&gt;6845&lt;/span&gt; │    &lt;span&gt;5824&lt;/span&gt; │    &lt;span&gt;4826&lt;/span&gt; │&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ 未知   │     &lt;span&gt;1421&lt;/span&gt; │     &lt;span&gt;1283&lt;/span&gt; │    &lt;span&gt;1421&lt;/span&gt; │    &lt;span&gt;1232&lt;/span&gt; │    &lt;span&gt;1029&lt;/span&gt; │&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ 女     │     &lt;span&gt;6734&lt;/span&gt; │     &lt;span&gt;6096&lt;/span&gt; │    &lt;span&gt;6733&lt;/span&gt; │    &lt;span&gt;5776&lt;/span&gt; │    &lt;span&gt;4826&lt;/span&gt; │&lt;br/&gt;└────────────┴────────┴──────────┴──────────┴─────────┴─────────┴─────────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.032&lt;/span&gt; sec. Processed &lt;span&gt;360.36&lt;/span&gt; thousand &lt;span&gt;rows&lt;/span&gt;, &lt;span&gt;5.85&lt;/span&gt; MB (&lt;span&gt;11.11&lt;/span&gt; million &lt;span&gt;rows&lt;/span&gt;/s., &lt;span&gt;180.47&lt;/span&gt; MB/s.)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询场景2：基于bitmap的用户行为分析。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;day&lt;/span&gt;,&lt;br/&gt;    gender,&lt;br/&gt;    bitmapCardinality(groupBitmapMergeState(show_bm)) &lt;span&gt;AS&lt;/span&gt; shown_uv,&lt;br/&gt;    bitmapAndCardinality(groupBitmapMergeState(show_bm), groupBitmapMergeState(click_bm)) &lt;span&gt;AS&lt;/span&gt; show_click_uv,&lt;br/&gt;    bitmapAndCardinality(groupBitmapMergeState(show_bm), bitmapAnd(groupBitmapMergeState(click_bm), groupBitmapMergeState(acta_bm))) &lt;span&gt;AS&lt;/span&gt; show_click_a_uv,&lt;br/&gt;    bitmapAndCardinality(groupBitmapMergeState(show_bm), bitmapAnd(bitmapAnd(groupBitmapMergeState(click_bm), groupBitmapMergeState(acta_bm)), groupBitmapMergeState(actb_bm))) &lt;span&gt;AS&lt;/span&gt; show_click_ab_uv,&lt;br/&gt;    bitmapAndCardinality(groupBitmapMergeState(show_bm), bitmapAnd(bitmapAnd(bitmapAnd(groupBitmapMergeState(click_bm), groupBitmapMergeState(acta_bm)), groupBitmapMergeState(actb_bm)), groupBitmapMergeState(actc_bm))) &lt;span&gt;AS&lt;/span&gt; show_click_abc_uv,&lt;br/&gt;    bitmapAndCardinality(groupBitmapMergeState(show_bm), bitmapAnd(bitmapAnd(bitmapAnd(bitmapAnd(groupBitmapMergeState(click_bm), groupBitmapMergeState(acta_bm)), groupBitmapMergeState(actb_bm)), groupBitmapMergeState(actc_bm)), groupBitmapMergeState(actd_bm))) &lt;span&gt;AS&lt;/span&gt; show_click_abcd_uv&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; dws.mainpage_stat_mv_dis&lt;br/&gt;&lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;day&lt;/span&gt; = &lt;span&gt;&#x27;2021-06-06&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;day&lt;/span&gt;,&lt;br/&gt;    gender&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Query&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;: b79de70f&lt;span&gt;-6091&lt;/span&gt;&lt;span&gt;-4&lt;/span&gt;d0a&lt;span&gt;-9&lt;/span&gt;a33&lt;span&gt;-12&lt;/span&gt;af8f210931&lt;br/&gt;&lt;br/&gt;┌────────&lt;span&gt;day&lt;/span&gt;─┬─gender─┬─shown_uv─┬─show_click_uv─┬─show_click_a_uv─┬─show_click_ab_uv─┬─show_click_abc_uv─┬─show_click_abcd_uv─┐&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ 男     │     &lt;span&gt;6845&lt;/span&gt; │          &lt;span&gt;6157&lt;/span&gt; │            &lt;span&gt;6157&lt;/span&gt; │             &lt;span&gt;5244&lt;/span&gt; │              &lt;span&gt;4341&lt;/span&gt; │&lt;br/&gt;  &lt;span&gt;4341&lt;/span&gt; │&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ 未知   │     &lt;span&gt;1421&lt;/span&gt; │          &lt;span&gt;1277&lt;/span&gt; │            &lt;span&gt;1277&lt;/span&gt; │             &lt;span&gt;1113&lt;/span&gt; │               &lt;span&gt;928&lt;/span&gt; │&lt;br/&gt;   &lt;span&gt;928&lt;/span&gt; │&lt;br/&gt;│ &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt;&lt;span&gt;-06&lt;/span&gt; │ 女     │     &lt;span&gt;6734&lt;/span&gt; │          &lt;span&gt;6058&lt;/span&gt; │            &lt;span&gt;6057&lt;/span&gt; │             &lt;span&gt;5211&lt;/span&gt; │              &lt;span&gt;4367&lt;/span&gt; │&lt;br/&gt;  &lt;span&gt;4367&lt;/span&gt; │&lt;br/&gt;└────────────┴────────┴──────────┴───────────────┴─────────────────┴──────────────────┴───────────────────┴────────────────────┘&lt;br/&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; set. Elapsed: &lt;span&gt;0.052&lt;/span&gt; sec. Processed &lt;span&gt;48.70&lt;/span&gt; thousand &lt;span&gt;rows&lt;/span&gt;, &lt;span&gt;54.89&lt;/span&gt; MB (&lt;span&gt;944.42&lt;/span&gt; thousand &lt;span&gt;rows&lt;/span&gt;/s., &lt;span&gt;1.06&lt;/span&gt; GB/s.)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一些其他用法篇幅有限不展开了，大家自由探索。因为bitmap函数只支持同时输入两个bitmap，所以层级越深需要不断进行合并。不过这个也整合到一个指标，会对基于superset这样的上层平台，配置指标时方便许多，不用通过join实现，也不需要非常多的子查询了，从查询性能上，存储上，都是一个很友好的方案。同时不管是多log分开写多个指标，也可以进行合并写在一个指标，都可以很方便的进行指标整合。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;物化视图是clickhouse一个非常重要的功能，同时也做了很多优化和函数扩展，虽然在某些情况可能会带来一定的风险（比如增加错误字段导致写入失败等问题），但是也是可以在使用中留意避免的，不能因噎废食。本文主要讲解了&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;物化视图的创建、新增维度和指标，聚合函数的使用和一些注意事项；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;物化视图结合字典的使用；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过物化视图组合指标宽表。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎大家指出文章中的问题，我会及时修改。感兴趣的可以顺着文章或者下载代码尝试，同时也欢迎交流clickhouse的相关使用经验和案例分享，一起学习，一起进步。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>