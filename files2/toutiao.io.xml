<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>120e47da5d2ff84c5135eea5eebc3303</guid>
<title>巧用符号链接迁移 HDFS 数据，业务完全无感知！</title>
<link>https://toutiao.io/k/aogsbx6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post_content markdown&quot;&gt;&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;&lt;p&gt;JuiceFS 是一个基于对象存储的分布式文件系统，在之前跟对象存储比较的&lt;a href=&quot;https://juicefs.com/blog/cn/posts/globalegrow-big-data-platform-user-case&quot;&gt;文章&lt;/a&gt;中已经介绍了 JuiceFS 能够保证数据的强一致性和极高的读写性能，因此完全可以用来替代 HDFS。但是数据平台整体迁移通常是一个费时费力的大工程，需要做到迁移超大规模数据的同时尽量不影响上层业务。下面将会介绍如何通过 JuiceFS 的迁移工具来实现平滑迁移 HDFS 中的海量数据到 JuiceFS。&lt;/p&gt;&lt;h2 id=&quot;平滑迁移方案&quot;&gt;平滑迁移方案&lt;/h2&gt;&lt;p&gt;数据平台除了我们在 HDFS 上实际看到的文件以外，其实还有一些同样重要的信息，也就是所谓的「元数据」，这些元数据存储在类似 Hive Metastore 这样的系统里。因此当我们谈论数据迁移时不能把这两种数据拆分开来，必须同时考虑，迁移完数据以后需要同时更新 Hive 表或者分区的位置（&lt;code&gt;LOCATION&lt;/code&gt;）信息，如果任何一种数据出了问题都会对业务方造成影响。&lt;/p&gt;&lt;p&gt;为了保证数据和元数据的一致性，通常的做法是在迁移完数据以后同步更新元数据中的位置信息，但当数据规模比较大，并且业务又可能更新数据时，很难保证数据拷贝和更新位置信息是个原子操作，迁移过程中可能导致数据丢失，影响整体迁移的可靠性。甚至需要以暂停业务为代价来实现，或者在业务中采用双写等机制来实现在线迁移，侵入业务逻辑，费时费力。&lt;/p&gt;&lt;p&gt;如果能够在迁移过程中为数据访问提供统一的路径来屏蔽实际的数据位置，实现元数据和真实数据位置的解耦，将会大大降低整体迁移的风险。文件系统的符号链接就可以达到这个效果，JuiceFS 也支持符号链接，并且支持跨文件系统的符号链接，借助它可以为多个文件系统提供统一的访问入口，形成统一命名空间。&lt;/p&gt;&lt;p&gt;符号链接是操作系统中广泛应用的概念，你可以通过符号链接实现在一个目录树中管理分散在各个地方的数据。对应的，我们也可以通过 JuiceFS 的符号链接特性实现在一个文件系统中管理多个存储系统。其实符号链接这个功能早在 2013 年 Hadoop 社区就已经想要在 HDFS 上实现（&lt;a href=&quot;https://issues.apache.org/jira/browse/HADOOP-10019&quot;&gt;HADOOP-10019&lt;/a&gt;），但遗憾的是目前为止还没完整支持。借助符号链接即可在 JuiceFS 上管理包括但不限于 HDFS、对象存储在内的各种存储系统，表面上看起来访问的是 JuiceFS，但实际访问的是底层真实的存储。&lt;/p&gt;&lt;p&gt;同时，JuiceFS 的原子重命名（rename）操作也能在数据迁移过程中发挥关键作用。JuiceFS 通过符号链接来跳转回原始数据，但当数据完全拷贝过来以后需要覆盖这个符号链接，这个时候原子重命名就能保证数据的安全性和可靠性，避免出现数据丢失和损坏。&lt;/p&gt;&lt;p&gt;此外，JuiceFS 还可以通过配置文件和特殊的标志文件来动态感知到迁移过程，并在新增和删除文件时进行额外的检查，确保新创建的文件也会出现在迁移后的目录中，并且确保要删除的文件也能从新系统中删掉。对于更复杂的重命名操作，也有类似的机制来保证正确性。&lt;/p&gt;&lt;p&gt;有了刚才介绍的 JuiceFS 的这些特性，就可以实现在数据迁移时分别迁移数据和元数据，同时整个迁移过程对于业务是完全透明的。下面讲解具体的迁移操作步骤。&lt;/p&gt;&lt;h2 id=&quot;操作步骤&quot;&gt;操作步骤&lt;/h2&gt;&lt;h3 id=&quot;步骤一-将-juicefs-作为-hdfs-的访问入口&quot;&gt;步骤一：将 JuiceFS 作为 HDFS 的访问入口&lt;/h3&gt;&lt;p&gt;在 JuiceFS 上给 HDFS 的所有第一级目录（或文件）创建对应的符号链接（假定不会再在 HDFS 根目录创建内容），之后通过 &lt;code&gt;jfs://name/&amp;lt;path&amp;gt;&lt;/code&gt; 就能完整访问 HDFS 里面的内容，两者是完全等价的。如下图所示。&lt;/p&gt;&lt;h3 id=&quot;步骤二-使用-juicefs-来访问-hdfs-中的数据&quot;&gt;步骤二：使用 JuiceFS 来访问 HDFS 中的数据&lt;/h3&gt;&lt;p&gt;这一步有两种实现方法。第一种是修改 Hive Metastore 中表或者分区的 &lt;code&gt;LOCATION&lt;/code&gt; 为对应的 JuiceFS 路径，例如之前是 &lt;code&gt;hdfs://ns/user/test.db/table_a&lt;/code&gt;，新路径则为 &lt;code&gt;jfs://name/user/test.db/table_a&lt;/code&gt;。第二种方法是将 &lt;code&gt;fs.hdfs.impl&lt;/code&gt; 修改为 &lt;code&gt;com.juicefs.MigratingFileSystem&lt;/code&gt;，这样可以维持 &lt;code&gt;LOCATION&lt;/code&gt; 不变。&lt;/p&gt;&lt;p&gt;这两种方法的目的都是为了将所有访问 HDFS 的入口改成访问 JuiceFS，因为步骤一已经创建了指向 HDFS 的符号链接，所以不会影响现有业务访问 HDFS。&lt;/p&gt;&lt;h3 id=&quot;步骤三-迁移目录结构&quot;&gt;步骤三：迁移目录结构&lt;/h3&gt;&lt;p&gt;从这一步开始我们会正式进行迁移工作，不过先不着急把数据拷贝过来，我们需要先把目录结构从 HDFS 中映射过来。你可以选择你想要迁移的表或目录，然后通过 JuiceFS 提供的工具快速将 HDFS 上的目录结构迁移到 JuiceFS 上。以迁移 &lt;code&gt;hdfs://ns/user/test.db/table_a&lt;/code&gt; 为例，这个目录中的所有子目录将会逐级在 JuiceFS 中创建。因为这一步仅涉及元数据操作，没有数据拷贝，因此可以以极快的速度将历史数据的目录结构从 HDFS 迁移到 JuiceFS 上。同时需要注意的是，所有文件仍然通过符号链接的方式指向 HDFS 中的路径。如下图所示，红色部分即表示在 JuiceFS 上新创建的目录。&lt;/p&gt;&lt;p&gt;同样的，完成这一步以后不会影响现有业务访问 HDFS，但是新写入的数据将会直接存储到 JuiceFS 中。&lt;/p&gt;&lt;h3 id=&quot;步骤四-迁移数据&quot;&gt;步骤四：迁移数据&lt;/h3&gt;&lt;p&gt;这一步将会真正开始拷贝数据，通过 JuiceFS 的迁移工具并发地将上一步遗留的指向 HDFS 中普通文件的符号链接替换为真实的数据。最终迁移目录中将不再会有符号链接，也就表示这个目录已经迁移完成。如下图所示，红色部分已经从符号链接变成了普通文件。&lt;/p&gt;&lt;h3 id=&quot;步骤五-删除-hdfs-中的数据&quot;&gt;步骤五：删除 HDFS 中的数据&lt;/h3&gt;&lt;p&gt;经过前面几个步骤，已经完成数据和元数据的整体迁移，因此可以放心删除 HDFS 中的数据。&lt;/p&gt;&lt;h3 id=&quot;反向迁移&quot;&gt;反向迁移&lt;/h3&gt;&lt;p&gt;在数据迁移过程中也可以通过反向迁移随时回滚，来撤销迁移操作。如果已经修改了元数据中的位置信息，JuiceFS 迁移工具能确保反向迁移时恢复回原来的状态。如果已经有新增的数据写入到 JuiceFS 中，也能把这些新增数据拷贝回原始的存储系统。&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;通过前面的操作步骤介绍，可以看到整个迁移过程完全不会影响现有业务继续访问 HDFS，从开始到结束对于业务来说都是无感知的。JuiceFS 提供了完善的工具来简化迁移流程，详细的操作指南请参考 JuiceFS &lt;a href=&quot;https://juicefs.com/docs/zh/migrate-data-from-hdfs-to-jfs.html&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;本篇文章以将 HDFS 迁移到 JuiceFS 为例说明了 JuiceFS 的符号链接特性，其实你完全可以发挥脑洞，把 JuiceFS 的符号链接应用在更多更广的场景，例如在不同 HDFS 集群之间进行数据迁移、跨云跨区的数据迁移等。正是因为有了强大的符号链接特性，通过 JuiceFS 来提供统一的数据访问层和视图，才使得很多时候无法平滑操作的事情成为了可能。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>228f461028e177909957824627b332fc</guid>
<title>别吵吵内卷了，看看人家虚拟人：连续直播70天都没工资</title>
<link>https://toutiao.io/k/12qvwce</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;虚拟人界有多卷？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近几年国内外火山喷发般的虚拟人可以说明这一点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上个月，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;扎克伯格&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;挑战光剑变身，右手藏剑，左手亮剑：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.4025157232704402&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDQSkj9zaLLDAf9ib4AKLZAczEk3XAIYmMDuwbIdWLNjMGQZcTPjgIRug/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;318&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是Meta一直在开展的Codec Avatars项目，目前已经能创建出逼真的虚拟角色，连头发丝都根根分明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;据了解，该项目使用的是&lt;strong&gt;3D捕捉和AI技术&lt;/strong&gt;，最初以高质量的头像演示开始，后来逐渐实现构建全身的虚拟化身。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然而，采用这种方式，动作捕捉拍摄三秒钟所记录的数据，就足以装满一个512G的磁盘。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是说，采用这么多摄像头是对存储硬件的一种极大的挑战，需要极多的数据才能创造出一小段demo。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;效果是很不错了，但卷也是真的卷啊，卷的不是虚拟人，是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;设备&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;啊。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;脸书之后，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;“英伟达发布会里有几秒钟的黄仁勋是假的”&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;这个话题，又引起了大众的激烈讨论。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个真假难辨的黄仁勋，是由英伟达在2019年正式发布的一个计算机图形与仿真模拟平台，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5722222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDHyrovvDpH3Kg0aseLI15Kdn9ey3iaZbNWAWtu2goibkMicH9N1zg00teg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在身体表现的部分，英伟达研究团队聘请了一位演员，让他穿上动态捕捉装备，并且记录下该演员模仿黄仁勋演讲的身体姿态。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过名为&lt;/span&gt;&lt;span&gt;&lt;strong&gt;Audio to Gesture&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;的技术，使得演讲的音频作为身体动作表现的独特传输驱动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;据悉，该团队一共做了21个版本的“黄仁勋”。最后，再通过CG动画渲染技术，才得以实现短短15秒的虚拟“黄仁勋”演示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5657894736842105&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDEFaKUoF0bdIWmTwyYa71ib5Q2SXAgQzbabdMAwRfVH5vqjPMrUaoHNQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;912&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;效果是很不错了，但卷的除了设备，还有背后的人类团队啊。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中国的虚拟人也如浪潮一波又一波汹涌而来。比如，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;近日爆火的柳夜熙&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;柳夜熙是一个虚拟美妆博主，一夜涨粉上百万不仅仅和她的画面技术有关系，故事精彩，画面精致给用户带来新颖感，让人忍不住驻足观望。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4795918367346939&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDNiasTwsuqS0z4Pl6ibKdNl58iaHcU9F8myBzk9j3ibzHicSK2cog95U0H4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;784&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然啦，涨粉和点赞和虚拟人物柳夜熙的颜值也有很大的关系，柳夜熙的捏脸数据算得上是捏脸界的颜值天花板。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;她的穿搭妆发都充斥着东方元素，有着现代和古代文化的碰撞感，脸型是带有棱角的鹅蛋脸，温柔中带着一丝英气，面部饱满轮廓清晰流畅，有自己的特色。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而这次的卷不是柳夜熙，是背后的CG、设备、美术等庞大的人类团队。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就在前两天，一个新的虚拟人，终于突破了虚拟人界的天花板！&lt;/span&gt;&lt;strong&gt;&lt;span&gt;堪称虚拟人届的卷王！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先来猜一猜，上下两边哪个是真人，哪个是虚拟人？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.565625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDVmYdD2yA7s4StjsjicqnCXqr1A0IKVP1tqgiadicIyZSDz8tpdofpTUlA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.565625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYD3QQOUP7Tk8Hk086es8MBzGm127PvepdC83CqLf9y6mclwAjy2dQcYg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;都是虚拟人。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他是全球首批和真人原型真假莫辨的&lt;strong&gt;数字孪生人——N小黑&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，N小黑的「制造者」小冰公司，还公布了他的数字孪生人搭档：N小白。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.565625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDTX7RgQd7XFF9Z9mkCBwVFtvDfdvNHE0Rv8T2zxibYFicYMFy9tt45KJw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这也是人工智能虚拟人类的整体自然度，首次被提升到和真实人类几乎无法分辨的程度。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我们谈起「数字孪生」——这个用技术复刻现实的新概念时，似乎总是十分遥远，过去几年，它在工业制造的热度不断攀升，现在，它终于离我们的想象更近了——&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;N小黑和N小白，作为真人的数字化身，在「每日经济新闻」直播新闻 70 天，几乎没人看出来，这是两个虚拟人。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当播报新闻的虚拟人在眼前真假难辨，恰恰证明了技术的飞速演进，正为我们的生活带来了更‍多新可能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，卷也是真的卷啊，直播70天还没工资。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-form=&quot;0&quot; data-num=&quot;1&quot;&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;首批数字孪生虚拟人，怎么做到真假难辨？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;各式各样的虚拟人，我们已经并不陌生。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;N小黑和N小白这次最大的突破，用一句话来概括就是：&lt;strong&gt;真实，高效，无人化&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;真实之处，我们已经能从画面上轻易感受——&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;屏幕前，N小黑正铿锵有力地播报着今日的热点资讯。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他双手握在身前，眼睛自然眨动，嘴唇轻启，口型会根据每个字的发音而变化，眉毛也随着情绪上下摆动，甚至脸上可以看到因吐字而波动的肌肤纹理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.565625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDOicC7aQwvAmazMwTvzNgqMR2Sbs2rqnibmuefjTkbYSaqPaTLicEsQdXA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要做到这一点，必须得先说说小冰&lt;/span&gt;&lt;strong&gt;&lt;span&gt;深度神经网络渲染技术（&lt;/span&gt;&lt;span&gt;Xiaoice Neural Rendering, XNR&lt;/span&gt;&lt;span&gt;）了。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这项技术，主要是通过深度学习，从大量数据中提取数据先验，就能实现快速渲染。要知道，传统的 CG 和动作捕捉不仅耗时很长，而且成本极高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比方说，一部 CG 电影里，最难制作的特效之一就是头发。每当虚拟人的几十万根发丝在飘，那就是经费在疯狂燃烧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5518945634266886&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDlpXR9XkUM1lvRa3Fswe1hDITNbhPN3Grg4beybZJqxAoaum767lzBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1214&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小冰这项技术，首先就解决了低效率、高成本的问题。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接着，该技术还能基于深度学习的三维场景表达和对应的神经渲染管线，在特定场景中发挥作用，虚拟人的视觉形象、表情、肢体动作就都能「复刻」且还原。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样，他们看起来就更加真实了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们总是能清晰分辨出 CG 或 CG+动作捕捉制造出来的虚拟人，因为他们要不长得跟漫画里一样，要不就是一副扑克脸，一说话或微笑就露出破绽，生硬的动作也让人感到隐隐不适。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以虚拟人的制造者们，需要花很多功夫去弥补其中的不自然之处。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前阵子很火的虚拟人柳夜熙，其实是由「真人身体+虚拟面部+酷炫特效」结合呈现，只看柳夜熙脸的话，还是能看到她在表情管理上的不足。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数字孪生人，与其说是让虚拟人变得更真实，不如说是让虚拟人变得更自然。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种整体的自然度，具有更多「人情味」，而不是带给人「似像非像」的诡异感觉。「自然」能让人感觉到惊喜，也能让虚拟人更亲近人，且更容易进入我们的日常生活。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从最开始，小冰通过知名财经主播N小黑（&lt;/span&gt;&lt;span&gt;N小黑财经&lt;/span&gt;&lt;span&gt;）和N小白（&lt;/span&gt;&lt;span&gt;每经小白基金&lt;/span&gt;&lt;span&gt;）获取训练数据，到通过深度神经网络渲染技术改善数据，最后通过小冰框架小样本学习技术——&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只要一周，两个虚拟数字人就诞生了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他们不仅能干人干的活，还能干人难以干的活，以及其他虚拟人干不了的活。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这次小冰公司还在全球范围内，首次实现了视频采编播全流程的无人化操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是说，他们不仅形象是AI建模生成的，从金融资讯的文本生成，到通过预训练的虚拟主播实现音画同步播报，再结合同步场景动态绘制，最终生成完整的直播推流，全都是由 AI 完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5561056105610561&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDAco7JZV4Xbnhju5W1sCNUw35SdZ7vUeWbCjEKNziaLwrQFAibFUD1ONQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1212&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍小冰与每日经济新闻联合推出的「每经AI电视」，也成了全球首个7x24小时不间断播出的AI视频直播产品。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以说，无论对于虚拟行业或是大众层面，小冰公司都提出了一个新的解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-form=&quot;0&quot; data-num=&quot;1&quot;&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;虚拟人越来越流行，也离生活越来越近&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在虚拟人的道路上，小冰已经尝试过很多种可能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从最初的聊天机器人，到能写诗写歌的 AI少女小冰、再到后来的小冰虚拟男/女友，今年还推出了虚拟偶像 MERROR，以及由千千万万虚拟人和人类混居的新平台——小冰岛。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.18421052631578946&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYD4cLHJ4evrTHdZVK98icuTufPP72CosjoxGaEqeibs8QAia7d1bRnpLjMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1216&quot;/&gt;&lt;/p&gt;&lt;h6&gt;&lt;span&gt;‍△图片依次为少女小冰、MERROR、小冰岛虚拟人&lt;/span&gt;&lt;/h6&gt;&lt;h6&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h6&gt;&lt;p&gt;&lt;span&gt;这些虚拟人背后，都基于小冰框架，本质也就是「AI beings」，它将能定制各类人工智能个体，也会在未来带来更多元的可能性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;N小黑和N小白，是小冰在 AI being 时代的最新探索。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过要想走得长久，走进人们日常生活，还是得靠「内容」说话。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最早我们对虚拟人传达内容的期待，可能就是人工客服的回应，或者喊一声小爱同学对方回复「我在呢」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在，几乎市场上的虚拟人都还有点儿才艺，因为有了中之人，所以他们开始会唱歌、拍视频、和人交互。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而N小黑和N小白已经能从视觉、声音、文字上都自由表达，还能实现实时音视频流。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数字孪生、框架全能力、多模态交互，以及实时音视频上，小冰都跨出了领先的一步。这些能力，能让虚拟人打破虚拟和真实的界限，更自然无形地融入我们的生活空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来正在迪拜世博会中国馆参展的夏语冰可能也将营业，这又是小冰团队的一个力作，虚拟数字主播接下来还能帮人们讲解网课、播报天气预报、科教科普……‍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5397350993377483&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDz7Quu6iaYeczrhYLwibZ254QhGuu2JicZylRSczPBpveXeRqic5IM8WECw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1208&quot;/&gt;&lt;/p&gt;&lt;h6&gt;&lt;span&gt;‍△图片为夏语冰&lt;/span&gt;&lt;/h6&gt;&lt;h6&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h6&gt;&lt;p&gt;&lt;span&gt;未来的虚拟人，其实还有更多的想象空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但当下要让他们离我们更近，就是真正走进我们生活，添补我们现有的需求，真正解决一些实际问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;16853&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-form=&quot;0&quot; data-num=&quot;1&quot;&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;虚拟未来，得更实在&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;随着虚拟数字浪潮一波波袭来，我们会越来越习惯虚拟人和真人共存的社会&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;艾媒咨询《2021 中国虚拟偶像行业发展及网民调查研究报告》指出，2020年中国虚拟偶像核心产业规模为34.6亿元，预计2021年达到62.2亿元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就在前几天，索尼才联手B站开启了全球虚拟偶像「Virtual Cinderella Project」项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5562913907284768&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDmfAicIpaE2w8oOlKUxGkeO287zvwJX4CFLQc2KFh7ME4P39sm253mDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1208&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍未来几年，虚拟人也会和人类建立更多元和深层的商业关系及情感纽带。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过当下，虚拟人要在我们日常生活中普及，每个挑战都是一座山。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如，内容不足、表现不佳、周期太长、成本太高、运营不足，都是虚拟人如昙花一现，随后一波波倒下的原因。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虚拟人已经从娱乐、时尚、社交，慢慢应用到教育、医疗、金融的各个领域，但真正做出商业化成绩的还不多，走进用户心里的并不多，真正给我们日常生活带来帮助的也不多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而随着乐华娱乐与华纳音乐纷纷推出虚拟偶像，互联网大厂如腾讯系、网易、快手、B 站、阿里系都开始涉足虚拟人，又预示着他们未来的潜力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6821192052980133&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDWqfIsqiaGh4GHhzJdbBfOqmrZwtcgjSDa6AxW6AkicffFhPUJjXhZkWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1208&quot;/&gt;&lt;/p&gt;&lt;h6&gt;&lt;span&gt;△图片为韩国女团Aespa的专属虚拟角色&lt;/span&gt;&lt;/h6&gt;&lt;h6&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h6&gt;&lt;p&gt;&lt;span&gt;当然，不能否认，&lt;strong&gt;元宇宙、NFT、区块链&lt;/strong&gt;等系列新概念的火爆，也推动了资本的行动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但空谈和幻想，只会让虚拟人的好处离我们越来越远。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今年11月的《中国计算机学会通讯》，封面专题就是「计算机图形学与人工智能融合」，探讨了CG和AI从技术到应用的广泛融合，希望技术还能够有更大的突破。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5478547854785478&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtB0YoCWOIwHa2ORXbJhsGYDP7cBfW53IVNt01uV9Zj0pOOZ84Q4CY6nlLIicOvUcKo1aXy9J7z6daQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1212&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而小冰的数字孪生虚拟人，让我们看到了 CG 和 AI 融合的新面貌。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事实上，小冰一直很少赶热潮争风头，而是慢慢建立着自己数字资产的壁垒，持续改善着人工智能的赛道。在大众还在围观的时候，其实更重要的是用实实在在的好产品，去解决人们生活的负担，建立起人们信任的纽带。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;放远来看，虚拟人商业化的未来，就只是时间问题了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在虚拟之风盛行时，我们同样需要实干兴邦。虚拟人背后的基层技术，决定了虚拟人的落地程度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;当一个个想象踏实落地后，虚拟才能成为新的现实。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对此你有什么看法呢？&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;*期待你的评论！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100013281&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/2nWKZibVcKggPJLq5TBibLINmpibSHoKiaWJuOO9HZB6GWxYZ4t4PwaoicbxzZd565kxnk6iaxVXXG1H1dnyTTM2hD8Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;300&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在此也推荐一门&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;0基础玩转Python数据分析&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;非常适合新手小白&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;全网已有30w+学员加入学习！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;👇👇👇点击图片，查看详情👇👇👇&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://study.163.com/course/introduction/1212125809.htm?utm_source=weixin.qq.com&amp;amp;utm_medium=service_picpush&amp;amp;utm_campaign=business&amp;amp;utm_content=study163Micro_1223&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5626423690205011&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2nWKZibVcKgh2y5og1ewjSWq1jDv01ltswmpzr0LkAzCzYuiaJk8jtdHVZ1gR13kCVSVtPhKZ3n9EYnSH2xYXaGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;439&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;万水千山总是情&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点个&lt;/span&gt;&lt;span&gt;&lt;strong&gt;赞&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;行不行~~👇&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ab346c25cbff89cadc215b0f4a249ff5</guid>
<title>整洁架构设计分析--架构设计的本质是什么?</title>
<link>https://toutiao.io/k/10u1cak</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信很多同学也看过整洁架构之道这本书啦，我之前也是查阅过网上的一些读书笔记，大部分都是简短总结性的，看了之后记忆不是很深刻(一方面看得次数不够)。So土拨鼠决定好好读一下Bob大叔的 &lt;strong&gt;《Clean Architecture-A CRAFTSMAN’S GUIDE TO SOFTWARE STRUCTURE AND DESIGN》&lt;/strong&gt; ，土拨鼠这里看的在线双语版的（主要是便于做笔记、方便回顾），中文翻译版参考的是福哥创建的&lt;span&gt;书栈网&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;的上&lt;span&gt;《架构整洁之道》中文翻译版&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;。发现书中的一些图是缺失的，土拨鼠就拿着英文版本的对照着看。暂时先阅读了第一部分，其中Bob大叔也举了几个现实中真真切切的例子。下面主要记录一下第一部分的关于整洁架构的概述内容。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Bob大叔的站点介绍&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;bob大叔的个人简介&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;The Clean Code Blog&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Uncle Bob Martin 博客&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;曹大的《clean architecture》读书笔记&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;曹大笔记中评价还是很犀利的。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;书评：《Clean Architecture》 写的很好，就是有点反反复复。最核心的观点实际上就是借助 interface 实现的多态和依赖反转。不过能把软件工程发展史串起来还是挺不错的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;clean architecture(上)&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;clean architecture(下)&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;lailin的架构整洁之道阅读笔记&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;lailin总结的也很细致，主要对书中的每个章节做了总结。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;第一部分的主题内容&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一部分主要是关于本书的概述，概述中Bob大叔通过软件系统好坏的简短例子说明了一个好的架构的重要性（节省成本、简单稳定、易于实施维护、灵活）。两个章节主要解释了设计和架构关系、介绍了行为和架构两个价值维度。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Chap1. WHAT IS DESIGN AND ARCHITECTURE? &lt;strong&gt;设计与架构到底是什么&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;The Signature Of A Mess  一个混乱系统的特点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;The Executive View 管理层视角&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;What Went Wrong? 问题到底在哪里&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;The Goal? 目标是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Case Study 案例分析&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Conclusion 小结&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;Chap2.  A Tale of Two Value &lt;strong&gt;两个价值维度&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Behavior  行为的价值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Architecture  架构的价值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;The Greater Value   哪个价值维度更重要&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Eisenhower’s Matrix  艾森豪威尔矩阵&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Fight for the Architecture 为好的软件架构而持续斗争&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Chap1.设计与架构到底是什么&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本书的一个重要的目标就是要清晰、明确地对设计（Design）与架构（Architecture）进行定义。Bob大叔看来二者没有任何区别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;架构&lt;/strong&gt;一般使用于“高层级”的讨论中，然而往往会把“底层”的实现细节排除在外。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;设计往往用来指代具体的系统底层组织结构和实现的细节&lt;/strong&gt;。但对于一个真正的系统架构师的日常工作来看，这样的区分是根本不成立的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿新房子来说应该包括房屋的形状、外观设计、垂直高度、房间的布局等等，还有每个插座、开关以及每个电灯具体的安装位置等具体的说明。总的来说，架构图里实际上包含了所有的底层设计细节，底层设计信息和顶层架构设计共同组成了整个房屋的架构文档。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件设计也是如此。底层设计细节和高层架构信息是不可分割的。它们组合在一起，共同定义了整个软件系统，缺一不可。所谓的底层和高层本身就是一系列决策组成的连续体，并没有清晰的分界线。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;目标&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个好的软件设计的终极目标是什么呢：&lt;strong&gt;软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个软件架构的优劣，可以用它满足用户需求所需要的成本来衡量。&lt;strong&gt;如果该系统的每次发布都会提升下一次变更的成本，那么这个设计就是不好的。&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;案例分析&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图1.1展示的是 &lt;strong&gt;工程师团队规模随着产品的增长&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6340579710144928&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1104&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lkYNiaZsfpqYqgGubZaKwfdzaYLaQxicIfF0NHYYuEUd4CyHR3ZUM28NibfjqfkwqDdYc7Y2wic9Qfw14lkMW2eUsA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图1.2展示的是 &lt;strong&gt;公司同期的生产效率（productivity）&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;纵坐标KLOC：&lt;/strong&gt;千行代码（&lt;strong&gt;KLOC&lt;/strong&gt;）是一种用于评估软件程序大小的度量。&lt;strong&gt;KLOC&lt;/strong&gt;通常用于估计团队构建项目所需的时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6848739495798319&quot; data-type=&quot;png&quot; data-w=&quot;952&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lkYNiaZsfpqYqgGubZaKwfdzaYLaQxicIfgqVbDg2R5W0dibjz9XeH7xtO2uVfnpvwfvQaXMLh6I1dg19yPqqg4MA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图 1.3 展示的是&lt;strong&gt;同期内每行代码的变更成本&lt;/strong&gt;。可以看出变更代码成本越来越高，按这个趋势下去，公司的利润甚至会被一点点榨干。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7982832618025751&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;932&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lkYNiaZsfpqYqgGubZaKwfdzaYLaQxicIfrYsgOle4pogdXaWZzWtdG9DvReFe7EEOdnncoKrS5TSptRdNNs8pEg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一个混乱系统的特点&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;混乱系统一般都是&lt;/span&gt;&lt;strong&gt;没有经过设计&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;strong&gt;匆匆忙忙被构建起来的&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;然后为了加快发布的速度，拼命地往团队里加入新人，同时加上决策层对代码质量提升和设计结构优化存在着持续的、长久的忽视。&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图 1.4 展示了&lt;strong&gt;系统开发者的生产力的切身体会&lt;/strong&gt;。他们一开始的效率都接近 100%，然而伴随着每次产品的发布，他们的生产力直线下降。到了产品的第 4 版本时，很明显大家的生产力已经不可避免地趋近为零了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7393075356415478&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;982&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lkYNiaZsfpqYqgGubZaKwfdzaYLaQxicIfibOOibpOyzCPlE2wqYUicvM3xBRJsLD7NqOxeicwMfP6ogyI7icuklUJ3ww/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工程师的大部分时间都消耗在对现有系统的修修补补上，而不是真正完成实际的新功能。这些工程师真正的任务是：拆了东墙补西墙，周而复始。偶尔有精力能顺便实现一点小功能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;管理层视角&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图 1.5展示的是&lt;strong&gt;该部门同期的月工资图&lt;/strong&gt;。也许我们可以指望该公司的营收增长远远超出成本增长，这样公司就还能维持正常运转。但是这么惊人的曲线还是值得我们深入挖掘其中存在的巨大问题的。是什么造成了工程师生产力的直线下降？高管们除了跺脚、发飙，还能做什么呢？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6428571428571429&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;952&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lkYNiaZsfpqYqgGubZaKwfdzaYLaQxicIfMbvSgpKZXKibv9x3nsDxrgiaYiayoZibkg2ibOSAJTwrHoibicQDtfdXKksow/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;问题到底出在了哪里&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里Bob大叔举了一个龟兔赛跑的例子，这里归纳了一下主题思想：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;慢而稳，才是成功的秘诀。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;该比赛并不是拼谁开始跑得快，也不是拼谁更有力气。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;心态越急，反而跑得越慢。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个故事本身揭露的是过度自信的愚蠢行为。这和现代软件研发工作有点类似，现在的软件研发工程师都有点过于自信。但他们确实不会偷懒。但是他们真正偷懒的地方在于——&lt;strong&gt;持续低估那些精心设计的、整洁的代码的重要性&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而工程师们常常会这样欺骗自己：“我们可以未来再重构代码，产品上线最重要！”但是结果大家都知道，产品上线以后重构工作就再没人提起了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工程师们经常相信的另外一个错误观点是：“在项目中容忍糟糕的代码存在可以在短期内加快该工程上线的速度，未来这些代码会造成一些额外的工作量，但并没有什么大不了。”相信这些鬼话的工程师对自己清理混乱代码的能力过于自信了。但是更重要的是，他们还忽视了一个自然规律：&lt;strong&gt;无论是从短期还是长期来看，胡乱编写代码的工作速度其实比循规蹈矩更慢。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图 1.6 展示的是 &lt;strong&gt;Jason Gorman 进行的一次为期 6 天的实验&lt;/strong&gt;。可以看出往后完成工作所需的时间越来越少。同时，也可以看到当采用了 TDD 方法编程后，比未采用 TDD 方法编程少用 10%的时间，并且采用 TDD 方法编程时最差的一天也比未采用 TDD 方法编程时最好的一天用时要短。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于这个结果，它其实揭示了软件开发的一个核心特点：&lt;strong&gt;要想跑得快，先要跑得稳。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以管理层扭转局面的唯一选择就是扭转开发者的观念，让他们从过度自信的兔子模式转变回来，为自己构建的混乱系统负起责任来。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8013100436681223&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;916&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lkYNiaZsfpqYqgGubZaKwfdzaYLaQxicIfe0NTt2Pyib0nc14XYiawBzVSicpw0icjKkh8NoFSVWB27ZhQBZB6T7DkZQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本书的主题就是为读者描述了什么是优秀的、整洁的软件架构与设计，读者可以参考这些设计来构建一个长期稳定的、持久优秀的系统。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;不管怎么看，研发团队最好的选择是清晰地认识并避开工程师们过度自信的特点，开始认真地对待自己的代码架构，对其质量负责。&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;要想提高自己软件架构的质量，就需要先知道什么是优秀的软件架构。而为了在系统构建过程中采用好的设计和架构以便减少构建成本，提高生产力，就需要先了解系统架构的各种属性与成本和生产力的关系。&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Chap2.两个价值维度&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于每个软件系统，我们都对以通过行为和架构两个维度来体现它的实际价值。然而工程师往往只关注一个维度，而忽视了另外一个维度。而且常常关注的还是错误的维度，这导致了系统的价值最终趋降为零。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;行为价值&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;软件系统的行为是其最直观的价值维度。&lt;/strong&gt; 大部分程序员认为他们的工作是且仅是：按照需求文档编写代码，并且修复任何 Bug。这真是大错特错。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;架构价值&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;软件系统的第二个价值维度&lt;/strong&gt;，就体现在软件这个英文单词上：software。“ware” 的意思是“产品”，而 “soft” 的意思，不言而喻，是指&lt;strong&gt;软件的灵活性。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件系统必须保持灵活。软件发明的目的，就是让我们可以以一种灵活的方式来改变机器的工作行为。对机器上那些很难改变的工作行为，我们通常称之为硬件（hardware）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了达到软件的本来目的，软件系统必须够“软” 也就是说，软件应该容易被修改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;需求变更的范畴与形状，是决定对应软件变更实施成本高低的关键。&lt;/strong&gt; 这就是为什么有的代码变更的成本与其实现的功能改变不成比例。这也是为什么第二年的研发成本比第一年的高很多，第三年又比第二年更高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题的实际根源当然就是系统的架构设计。如果系统的架构设计偏向某种特定的“形状”，那么新的变更就会越来越难以实施。所以，好的系统架构设计应该尽可能做到与“形状”无关。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;哪个价值维度更重要呢？&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务部门来回答，他们通常认为系统正常工作很重要。系统开发人员常常也就跟随采取了这种态度。bob大叔这里用了下面简单的逻辑推导来证明这个态度的错误性。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果某程序可以正常工作，但是无法修改，那么当需求变更的时候它就不再能够正常工作了，我们也无法通过修改让它能继续正常工作。因此，这个程序的价值将成为 0。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果某程序目前无法正常工作，但是我们可以很容易地修改它，那么将它改好，并且随着需求变化不停地修改它，都应该是很容易的事。因此，这个程序会持续产生价值。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你问业务部门，是否想要能够变更需求，他们的回答一般是肯定的，而且他们会增加一句：完成现在的功能比实现未来的灵活度更重要。但讽刺的是，如果事后业务部门提出了一项需求，而你的预估工作量大大超出他们的预期，这帮家伙通常会对你放任系统混乱到无法变更的状态而勃然大怒。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;艾森豪威尔矩阵&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图2.1展示的是&lt;strong&gt;美国前总统艾森豪威尔的紧急/重要矩阵&lt;/strong&gt;。面对这个矩阵，艾森豪威尔曾说道：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我有两种难题：紧急的和重要的，而紧急的难题永远是不重要的，重要的难题永远是不紧急的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确实，紧急的事情常常没那么重要，而重要的事情则似乎永远也排不上优先级。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件系统的第一个价值维度：&lt;strong&gt;系统行为，是紧急的，但是并不总是特别重要。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件系统的第二个价值维度：&lt;strong&gt;系统架构，是重要的，但是并不总是特别紧急。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出软件的系统架构——那些重要的事情——占据了该列表的前两位，而系统行为——那些紧急的事情——只占据了第一和第三位。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6603375527426161&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;948&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lkYNiaZsfpqYqgGubZaKwfdzaYLaQxicIfT8TaAesxZVFSiaPxhJHvw70328icUfWAic3pzgFXLGMuhN7lGaf0moKvg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;平衡系统架构的重要性与功能的紧急程度这件事，是软件研发人员自己的职责。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;为好的软件架构而持续斗争&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了做好上述职责，软件团队必须做好斗争的准备——或者说“长期抗争”的准备。现状就是这样。研发团队必须从公司长远利益出发与其他部门抗争，这和管理团队的工作一样，甚至市场团队、销售团队、运营团队都是这样。公司内部的抗争本来就是无止境的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是软件架构师，那么这项工作就加倍重要了。软件架构师这一职责本身就应更关注系统的整体结构，而不是具体的功能和系统行为的实现，&lt;strong&gt;软件架构师必须创建出一个可以让功能实现起来更容易、修改起来更简单、扩展起来更轻松的软件架构&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;记住：如果忽视软件架构的价值，系统将会变得越来越难以维护，终会有一天，系统将会变得再也无法修改。如果系统变成了这个样子，那么说明软件开发团队没有和需求方做足够的抗争，没有完成自己应尽的职责。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;名言警句：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;底层设计和高层架构是密不可分的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无论是从短期还是长期来看，胡乱编写代码的工作速度其实比循规蹈矩更慢。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要想跑得快，先要跑得稳。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;软件系统两个价值维度：系统行为，是紧急的，但是并不总是特别重要。系统架构，是重要的，但是并不总是特别紧急。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为好的软件架构而持续斗争。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于整洁架构之道的第一部分关于本书的概述读书笔记土拨鼠今天就介绍到这里了。第二部分从编程范式开始，敬请期待。如果有不同见解欢迎留言讨论。&lt;/p&gt;&lt;section&gt;&lt;mpcps frameborder=&quot;0&quot; class=&quot;js_editor_cps&quot; data-datakey=&quot;1640181116488_0.7938122147892885&quot; data-uid=&quot;1640181116397&quot; data-type=&quot;1&quot; data-product=&quot;&quot; data-templateid=&quot;list&quot; data-pid=&quot;12447192&quot; data-categoryid=&quot;3&quot; data-appuin=&quot;3208869061&quot;/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;书栈网: &lt;span&gt;https://www.bookstack.cn/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;《架构整洁之道》中文翻译版: &lt;span&gt;https://www.bookstack.cn/books/Clean-Architecture-zh&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;bob大叔的个人简介: &lt;span&gt;http://cleancoder.com/files/about.md&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;The Clean Code Blog: &lt;span&gt;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Uncle Bob Martin 博客: &lt;span&gt;http://cleancoder.com/products&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;clean architecture(上): &lt;span&gt;https://xargin.com/clean-architecture-1/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;clean architecture(下): &lt;span&gt;https://xargin.com/clean-architecture-2/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;Go工程化(一) 架构整洁之道阅读笔记: &lt;span&gt;https://lailin.xyz/post/go-training-week4-clean-arch.html&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>caab671cdc4041e12a58e565add9d8c4</guid>
<title>1万字详解 python logging日志模块</title>
<link>https://toutiao.io/k/g6hs782</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;这篇文章熬了一周，终于写完了。一个知识点自己理解可能只需要花半个小时，而要想把它写出来让别人理解，要花十倍甚至更多的时间。所以说写技术文是真的不容易。而它的价值在于它的生命力更长久。即使三五年后给别人看依然会有收获。对写作者自己而言，写的过程也是对知识的一次更通透的理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下为正文&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到日志，无论是写框架代码还是业务代码，都离不开日志的记录，他能给我们定位问题带来极大的帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;记录日志最简单的方法就是在你想要记录的地方加上一句 print ， 我相信无论是新手还是老鸟都经常这么干。在简单的代码中或者小型项目中这么干一点问题都没有。但是在一些稍大一点的项目，有时候定位一个问题，需要查看历史日志定位问题，用print就不合时宜了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;print 打印出来的日志没有时间，不知道日志记录的位置，也没有可读的日志格式， 还不能把日志输出到指定文件。。。。除非这些你都全部自己重复造一遍轮子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最佳的做法是使用内置的logging模块， 因为 logging 模块给开发者提供了非常丰富的功能。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2403846153846154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rO1ibUkmNGMlyASvLaJQHMlkiaft6WlvZaYJowyDIIUPicTlnx0iazicaFrL6dE1oLuFuC6wuTkLznt1Y3QaicYVial6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;832&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如上图就是用标准库logging模块记录生成的日志，有日志的具体时间、日志发生的模块、有日志级别和日志的具体内容等等&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么用呢，来看个例子&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47804878048780486&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rO1ibUkmNGMlyASvLaJQHMlkiaft6WlvZaV55zYeHR4lj1zaT8vk2tpqjTf7jORKia7fYhSCLuNQU82BC7oGOo3yA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;615&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;导入logging模块，然后直接使用logging提供的日志消息记录方法就可以。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;日志级别&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日志级别分为以下5个级别&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0585106382978724&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rO1ibUkmNGMlyASvLaJQHMlkiaft6WlvZaV5CnknP1mfsWa2u5osKUCvKoOHXQRw8LZFGZH9eAdbvQaK5iaX0RoMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;376&quot;/&gt;&lt;/figure&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;日志级别&lt;/th&gt;&lt;th&gt;使用场景&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;DEBUG&lt;/td&gt;&lt;td&gt;debug级别用来记录详细的信息，方便定位问题进行调试，在生产环境我们一般不开启DEBUG&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;INFO&lt;/td&gt;&lt;td&gt;用来记录关键代码点的信息，以便代码是否按照我们预期的执行，生产环境通常会设置INFO级别&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;WARNING&lt;/td&gt;&lt;td&gt;记录某些不预期发生的情况，如磁盘不足&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ERROR&lt;/td&gt;&lt;td&gt;由于一个更严重的问题导致某些功能不能正常运行时记录的信息&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CRITICAL&lt;/td&gt;&lt;td&gt;当发生严重错误，导致应用程序不能继续运行时记录的信息&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日志级别重要程度逐次提高，python提供了5个对应级别的方法。默认情况下日志的级别是WARGING, 低于WARING的日志信息都不会输出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面代码中可以看到loging.warging以后的日志内容都打印在标准输出流，也就是命令行窗口，但是logging.debug和info记录的日志不会打印出来。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;修改日志级别&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何让debug级别的信息也输出？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然是修改默认的日志级别，在开始记录日志前可以使用&lt;code&gt;logging.basicConfig&lt;/code&gt;方法来设定日志级别&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; logging&lt;br/&gt;logging.basicConfig( level=logging.DEBUG)&lt;br/&gt;logging.debug(&lt;span&gt;&quot;this is debug&quot;&lt;/span&gt;)&lt;br/&gt;logging.info(&lt;span&gt;&quot;this is info&quot;&lt;/span&gt;)&lt;br/&gt;logging.error(&lt;span&gt;&quot;this is error&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置为debug级别后，所有的日志信息都会输出&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;DEBUG:root:this &lt;span&gt;is&lt;/span&gt; debug&lt;br/&gt;INFO:root:this &lt;span&gt;is&lt;/span&gt; info&lt;br/&gt;ERROR:root:this &lt;span&gt;is&lt;/span&gt; error&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;日志记录到文件&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面的日志默认会把日志输出到标准输出流，就是只在命令行窗口输出，程序重启后历史日志没地方找，所以把日志内容永久记录是一个很常见的需求。同样通过配置函数logging.basicConfig可以指定日志输出到什么地方&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; logging&lt;br/&gt;logging.basicConfig(filename=&lt;span&gt;&quot;test.log&quot;&lt;/span&gt;, level=logging.INFO)&lt;br/&gt;logging.debug(&lt;span&gt;&quot;this is debug&quot;&lt;/span&gt;)&lt;br/&gt;logging.info(&lt;span&gt;&quot;this is info&quot;&lt;/span&gt;)&lt;br/&gt;logging.error(&lt;span&gt;&quot;this is error&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我指定日志输出到文件test.log中，日志级别指定为了 INFO，最后文件中记录的内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;INFO:root:this is info&lt;br/&gt;ERROR:root:this is error&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次重新运行时，日志会以追加的方式在后面， 如果每次运行前要覆盖之前的日志，则需指定 filemode=&#x27;w&#x27;， 这个和 &lt;code&gt;open&lt;/code&gt; 函数写数据到文件用的参数是一样的。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;指定日志格式&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认输出的格式包含3部分，日志级别，日志记录器的名字，以及日志内容，中间用“:”连接。如果我们想改变日志格式，例如想加入日期时间、显示日志器名字，我们是可以指定format参数来设置日志的格式&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; logging&lt;br/&gt;logging.basicConfig(format=&lt;span&gt;&#x27;%(asctime)s %(levelname)s %(name)s %(message)s&#x27;&lt;/span&gt;)&lt;br/&gt;logging.error(&lt;span&gt;&quot;this is error&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;2021-12-15 07:44:16,547 ERROR root this is error&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日志格式化输出提供了非常多的参数，除了时间、日志级别、日志消息内容、日志记录器的名字外，还可以指定线程名，进程名等等&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33877038895859474&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rO1ibUkmNGMlyASvLaJQHMlkiaft6WlvZacscI6guCux5okSs2Z8DSprv0WiciayjmanWOsROGNgej3OlexzgZCqyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;797&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里为止，日志模块的基本用法就这些了，也能满足大部分应用场景，更高级的方法接着往下看，可以帮助你更好的处理日志&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;记录器（logger）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面介绍的日志记录，其实都是通过一个叫做日志记录器（Logger）的实例对象创建的，每个记录器都有一个名称，直接使用logging来记录日志时，系统会默认创建 名为 root 的记录器，这个记录器是根记录器。记录器支持层级结构，子记录器通常不需要单独设置日志级别以及Handler（后面会介绍），如果子记录器没有单独设置，则它的行为会委托给父级。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;记录器名称可以是任意名称，不过最佳实践是直接用模块的名称当作记录器的名字。命名如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;logger = logging.getLogger(__name__)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认情况下，记录器采用层级结构，上句点作为分隔符排列在命名空间的层次结构中。层次结构列表中位于下方的记录器是列表中较高位置的记录器的子级。例如，有个名叫 foo 的记录器，而名字是 foo.bar，foo.bar.baz，和 foo.bam 的记录器都是 foo 的子级。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;├─foo&lt;br/&gt;│  │  main.py&lt;br/&gt;│  │  __init__.py&lt;br/&gt;│  │  &lt;br/&gt;│  ├─bam&lt;br/&gt;│  │  │  __init__.py&lt;br/&gt;│  │  │  &lt;br/&gt;│  │          &lt;br/&gt;│  ├─bar&lt;br/&gt;│  │  │  __init__.py&lt;br/&gt;│  │  │  &lt;br/&gt;│  │  ├─baz&lt;br/&gt;│  │  │  │  __init__.py&lt;br/&gt;│  │  │  │  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.3972602739726026&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rO1ibUkmNGMlyASvLaJQHMlkiaft6WlvZa4xxz9h6g8aIfWyvkBA7fico0xWlia3W65ibj2JzicRNramsNkmXM1pKl2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;146&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;main.py&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import foo&lt;br/&gt;from foo import bar&lt;br/&gt;from foo import bam&lt;br/&gt;from foo.bar import baz&lt;br/&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&#x27;__main__&#x27;&lt;/span&gt;:&lt;br/&gt;    pass&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;foo.py&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import logging&lt;br/&gt;&lt;br/&gt;logging.basicConfig()&lt;br/&gt;logger = logging.getLogger(__name__)&lt;br/&gt;logger.setLevel(logging.INFO)&lt;br/&gt;&lt;br/&gt;logger.info(&lt;span&gt;&quot;this is foo&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我只设置foo这个记录器的级别为INFO&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;bar.py&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import logging&lt;br/&gt;&lt;br/&gt;logger = logging.getLogger(__name__)&lt;br/&gt;logger.info(&lt;span&gt;&quot;this is bar&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其它子模块都是像bar.py一样类似的代码，都没有设置日志级别，最后的输出结果是&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;INFO:foo:this &lt;span&gt;is&lt;/span&gt; foo&lt;br/&gt;INFO:foo.bar:this &lt;span&gt;is&lt;/span&gt; bar&lt;br/&gt;INFO:foo.bam:this &lt;span&gt;is&lt;/span&gt; bam&lt;br/&gt;INFO:foo.bar.baz:this &lt;span&gt;is&lt;/span&gt; baz&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是因为 foo.bar 这个记录器没有设置日志级别，就会向上找到已经设置了日日志级别的祖先，这里刚好找到父记录器foo的级别为INFO，如果foo也没设置的&lt;span&gt;话&lt;/span&gt;，就会找到根记录器root，root默认的级别为WARGING。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;处理器（Handler）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;记录器负责日志的记录，但是日志最终记录在哪里记录器并不关心，而是交给了另一个家伙--处理器（Handler）去处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如一个Flask项目，你可能会将INFO级别的日志记录到文件，将ERROR级别的日志记录到标准输出，将某些关键日志（例如有订单或者严重错误）发送到某个邮件地址通知老板。这时候你的记录器添加多个不同的处理器来处理不同的消息日志，以此根据消息的重要性发送的特定的位置。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6054545454545455&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rO1ibUkmNGMlyASvLaJQHMlkiaft6WlvZabI9IOs9bs5opAWp0UFabfGMwGnyL7iaJlFY983xxPbCkiakD8eZXZGSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;550&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python内置了很多实用的处理器，常用的有：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、StreamHandler 标准流处理器，将消息发送到标准输出流、错误流&lt;br/&gt;2、FileHandler 文件处理器，将消息发送到文件&lt;br/&gt;3、RotatingFileHandler  文件处理器，文件达到指定大小后，启用新文件存储日志&lt;br/&gt;4、TimedRotatingFileHandler 文件处理器，日志以特定的时间间隔轮换日志文件&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;处理器操作&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7002237136465325&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rO1ibUkmNGMlyASvLaJQHMlkiaft6WlvZa06gtdvTLibGqME9V5Um33hxNmMzx4vq3F6tT6Buct2G9FKlWTAKmtfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;447&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Handler 提供了4个方法给开发者使用，细心的你可以发现了，logger可以设置level，Handler也可以设置Level。通过setLevel可以将记录器记录的不同级别的消息发送到不同的地方去。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; logging&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; logging &lt;span&gt;import&lt;/span&gt; StreamHandler&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; logging &lt;span&gt;import&lt;/span&gt; FileHandler&lt;br/&gt;&lt;br/&gt;logger = logging.getLogger(__name__)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 设置为DEBUG级别&lt;/span&gt;&lt;br/&gt;logger.setLevel(logging.DEBUG)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 标准流处理器，设置的级别为WARAING&lt;/span&gt;&lt;br/&gt;stream_handler = StreamHandler()&lt;br/&gt;stream_handler.setLevel(logging.WARNING)&lt;br/&gt;logger.addHandler(stream_handler)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 文件处理器，设置的级别为INFO&lt;/span&gt;&lt;br/&gt;file_handler = FileHandler(filename=&lt;span&gt;&quot;test.log&quot;&lt;/span&gt;)&lt;br/&gt;file_handler.setLevel(logging.INFO)&lt;br/&gt;logger.addHandler(file_handler)&lt;br/&gt;&lt;br/&gt;logger.debug(&lt;span&gt;&quot;this is debug&quot;&lt;/span&gt;)&lt;br/&gt;logger.info(&lt;span&gt;&quot;this is info&quot;&lt;/span&gt;)&lt;br/&gt;logger.error(&lt;span&gt;&quot;this is error&quot;&lt;/span&gt;)&lt;br/&gt;logger.warning(&lt;span&gt;&quot;this is warning&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行后，在命令行窗口输出的日志内容是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;this is error&lt;br/&gt;this is warning&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出在文件的日志内容是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;this is info&lt;br/&gt;this is error&lt;br/&gt;this is warning&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尽管我们将logger的级别设置为了DEBUG，但是debug记录的消息并没有输出，因为我给两个Handler设置的级别都比DEBUG要高，所以这条消息被过滤掉了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;格式器（formatter）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;格式器在文章的前面部分其实已经有所介绍，不过那是通过logging.basicConfig来指定的，其实格式器还可以以对象的形式来设置在Handler上。格式器可以指定日志的输出格式，要不要展示时间，时间格式什么，要不要展示日志的级别，要不要展示记录器的名字等等，都可以通过一个格式器对消息进行格式化输出。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; logging&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; logging &lt;span&gt;import&lt;/span&gt; StreamHandler&lt;br/&gt;&lt;br/&gt;logger = logging.getLogger(__name__)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 标准流处理器&lt;/span&gt;&lt;br/&gt;stream_handler = StreamHandler()&lt;br/&gt;stream_handler.setLevel(logging.WARNING)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 创建一个格式器&lt;/span&gt;&lt;br/&gt;formatter = logging.Formatter(&lt;span&gt;&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;# 作用在handler上&lt;/span&gt;&lt;br/&gt;stream_handler.setFormatter(formatter)&lt;br/&gt;&lt;span&gt;# 添加处理器&lt;/span&gt;&lt;br/&gt;logger.addHandler(stream_handler)&lt;br/&gt;&lt;br/&gt;logger.info(&lt;span&gt;&quot;this is info&quot;&lt;/span&gt;)&lt;br/&gt;logger.error(&lt;span&gt;&quot;this is error&quot;&lt;/span&gt;)&lt;br/&gt;logger.warning(&lt;span&gt;&quot;this is warning&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，格式器只能作用在处理器上，通过处理器的&lt;code&gt;setFromatter&lt;/code&gt;方法设置格式器。而且一个Handler只能设置一个格式器。是一对一的关系。而 logger 与 handler 是一对多的关系，一个logger可以添加多个handler。handler 和 logger 都可以设置日志的等级。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3233695652173913&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rO1ibUkmNGMlyASvLaJQHMlkiaft6WlvZaot0HWBa0NP7ibaGBG9GyibRrSFnHPkxfPPtu2xjN6dkqQoXzAf3n5yuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;736&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;logging.basicConfig&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到最开始的地方，logging.basicConfig() 方法为我们干了啥？现在你大概能猜出来了。来看python源码中是怎么说的&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Do basic configuration for the logging system.&lt;/p&gt;&lt;p&gt;This function does nothing if the root logger already has handlers
configured. It is a convenience method intended for use by simple scripts
to do one-shot configuration of the logging package.&lt;/p&gt;&lt;p&gt;The default behaviour is to create a StreamHandler which writes to
sys.stderr, set a formatter using the BASIC_FORMAT format string, and
add the handler to the root logger.&lt;/p&gt;&lt;p&gt;A number of optional keyword arguments may be specified, which can alter
the default behaviour.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、创建一个root记录器&lt;br/&gt;2、设置root的日志级别为warning&lt;br/&gt;3、为root记录器添加StreamHandler处理器&lt;br/&gt;4、为处理器设置一个简单格式器&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;logging.basicConfig()&lt;br/&gt;logging.warning(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两行代码其实就等价于：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; sys&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; logging&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; logging &lt;span&gt;import&lt;/span&gt; StreamHandler&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; logging &lt;span&gt;import&lt;/span&gt; Formatter&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;logger = logging.getLogger(&lt;span&gt;&quot;root&quot;&lt;/span&gt;)&lt;br/&gt;logger.setLevel(logging.WARNING)&lt;br/&gt;handler = StreamHandler(sys.stderr)&lt;br/&gt;logger.addHandler(handler)&lt;br/&gt;formatter = Formatter(&lt;span&gt;&quot; %(levelname)s:%(name)s:%(message)s&quot;&lt;/span&gt;)&lt;br/&gt;handler.setFormatter(formatter)&lt;br/&gt;logger.warning(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;logging.basicConfig 方法做的事情是相当于给日志系统做一个最基本的配置，方便开发者快速接入使用。它必须在开始记录日志前调用。不过如果 root 记录器已经指定有其它处理器，这时候你再调用basciConfig，则该方式将失效，它什么都不做。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;日志配置&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日志的配置除了前面介绍的将配置直接写在代码中，还可以将配置信息单独放在配置文件中，实现配置与代码分离。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日志配置文件 logging.conf&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[loggers]&lt;br/&gt;keys=root&lt;br/&gt;&lt;br/&gt;[handlers]&lt;br/&gt;keys=consoleHandler&lt;br/&gt;&lt;br/&gt;[formatters]&lt;br/&gt;keys=simpleFormatter&lt;br/&gt;&lt;br/&gt;[logger_root]&lt;br/&gt;level=DEBUG&lt;br/&gt;handlers=consoleHandler&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;[handler_consoleHandler]&lt;br/&gt;class=StreamHandler&lt;br/&gt;level=DEBUG&lt;br/&gt;formatter=simpleFormatter&lt;br/&gt;args=(sys.stdout,)&lt;br/&gt;&lt;br/&gt;[formatter_simpleFormatter]&lt;br/&gt;format=%(asctime)s - %(name)s - %(levelname)s - %(message)s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加载配置文件&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import logging&lt;br/&gt;import logging.config&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 加载配置&lt;/span&gt;&lt;br/&gt;logging.config.fileConfig(&lt;span&gt;&#x27;logging.conf&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 创建 logger&lt;/span&gt;&lt;br/&gt;logger = logging.getLogger()&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 应用代码&lt;/span&gt;&lt;br/&gt;logger.debug(&lt;span&gt;&quot;debug message&quot;&lt;/span&gt;)&lt;br/&gt;logger.info(&lt;span&gt;&quot;info message&quot;&lt;/span&gt;)&lt;br/&gt;logger.warning(&lt;span&gt;&quot;warning message&quot;&lt;/span&gt;)&lt;br/&gt;logger.error(&lt;span&gt;&quot;error message&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;2021-12-23 00:02:07,019 - root - DEBUG - debug message&lt;br/&gt;2021-12-23 00:02:07,019 - root - INFO - info message&lt;br/&gt;2021-12-23 00:02:07,019 - root - WARNING - warning message&lt;br/&gt;2021-12-23 00:02:07,019 - root - ERROR - error message&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里算是对logging的一次比较完整的介绍，当然，还有很多细节并没有涉及到，因此我给了几个链接供参考。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考链接：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://docs.python.org/3/library/logging.html#&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://docs.python.org/3/howto/logging.html#logging-advanced-tutorial&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://awaywithideas.com/python-logging-a-practical-guide/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://rmcomplexity.com/article/2020/12/01/introduction-to-python-logging.html&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;温馨提示：&lt;/span&gt;&lt;span&gt;文章为有偿阅读，单篇1元即可支持&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>31f1b4a09334f42611abdfc306fbbcdf</guid>
<title>Kafka集群突破百万partition 的技术探索</title>
<link>https://toutiao.io/k/4lw8h50</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHXohrAwRjLmn4EpPFJFoGDjVmFjzY5GzHRC9mhdKiaAocsyf8asib81ibLN4gRYUc7d0eciaONx10WibPA/640?&quot; data-ratio=&quot;0.062037037037037036&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section label=&quot;powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;导语：&lt;/span&gt;&lt;span&gt;本篇文章主要从元数据，controller 逻辑等方面介绍了如何解决支撑百万 partition 的问题，运营大规模集群其实还涉及到磁盘故障、冷读、数据均衡等数据方面的问题，监控和报警服务同样非常的重要。（编辑：中间件小Q妹）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;01&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于小业务量的业务，往往多个业务共享 kafka 集群，随着业务规模的增长需要不停的增加 topic 或者是在原 topic 的基础上扩容 partition 数，另外一些后来大体量的业务在试水阶段也可能不会部署独立的集群，当业务规模爆发时，需要迅速扩容扩容集群节点。在不牺牲稳定性的前提下单集群规模有限，常常会碰到业务体量变大后无法在原集群上直接进行扩容，只能让业务创建新的集群来支撑新增的业务量，这时用户面临系统变更的成本，有时由于业务关联的原因，集群分开后涉及到业务部署方案的改变，很难短时间解决。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了快速支持业务扩容，就需要我们在不需要业务方做任何改动的前提下对集群进行扩容，大规模的集群，往往意味着更多的 partition 数，更多的 broker 节点，下面会描述当集群规模增长后主要面临哪些方面的挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;02&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;挑战&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. ZK 节点数&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Kafka 的 topic 在 broker 上是以 partition 为最小单位存放和进行复制的, 因此集群需要维护每个 partition 的 Leader 信息，单个 partition 的多个副本都存放在哪些 broker 节点上，处于复制同步状态的副本都有哪些。为了存放这些元数据，kafka 集群会为每一个 partition 在 zk 集群上创建一个节点，partition 的数量直接决定了 zk 上的节点数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设集群上有 1 万个 topic，每个 topic 包含 100 个 partition，则 ZK 上节点数约为 200 多万个，快照大小约为 300MB，ZK 节点数据变更，会把数据会写在事务日志中进行持久化存储，当事务日志达到一定的条目会全量写入数据到持久化快照文件中，partition 节点数扩大意味着快照文件也大，全量写入快照与事务日志的写入会相互影响，从而影响客户端的响应速度，同时 zk 节点重启加载快照的时间也会变长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. Partition 复制&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kafka 的 partition 复制由独立的复制线程负责，多个 partition 会共用复制线程，当单个 broker 上的 partition 增大以后，单个复制线程负责的 partition 数也会增多，每个 partition 对应一个日志文件，当大量的 partition 同时有写入时，磁盘上文件的写入也会更分散，写入性能变差，可能出现复制跟不上，导致 ISR 频繁波动，调整复制线程的数量可以减少单个线程负责的 partition 数量，但是也加剧了磁盘的争用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. Controller 切换时长&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于网络或者机器故障等原因，运行中的集群可能存在 controller 切换的情况，当 controller 切换时需要从 ZK 中恢复 broker 节点信息、topic 的 partition 复制关系、partition 当前 leader 在哪个节点上等，然后会把 partition 完整的信息同步给每一个 broker 节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在虚拟机上测试，100 万 partition 的元数据从 ZK 恢复到 broker 上约需要 37s 的时间，100 万 partition 生成的元数据序列化后大约 80MB（数据大小与副本数、topic 名字长度等相关），其他 broker 接收到元数据后，进行反序列化并更新到本机 broker 内存中，应答响应时间约需要 40s（测试时长与网络环境有关）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Controller 控制了 leader 切换与元数据的下发给集群中其他 broker 节点，controller 的恢复时间变长增加了集群不可用风险，当 controller 切换时如果存在 partition 的 Leader 需要切换，就可能存在客户端比较长的时间内拿不到新的 leader，导致服务中断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. broker 上下线恢复时长&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;日常维护中可能需要对 broker 进行重启操作，为了不影响用户使用，broker 在停止前会通知 controller 进行 Leader 切换，同样 broker 故障时也会进行 leader 切换，leader 切换信息需要更新 ZK 上的 partition 状态节点数据，并同步给其他的 broker 进行 metadata 信息更新。当 partition 数量变多，意味着单个 broker 节点上的 partitiion Leader 切换时间变长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过上述几个影响因素，我们知道当 partition 数量增加时会直接影响到 controller 故障恢复时间；单个 broker 上 partition 数量增多会影响磁盘性能，复制的稳定性；broker 重启 Leader 切换时间增加等。当然我们完全可以在现有的架构下限制每个 broker 上的 partition 数量，来规避单 broker 上受 partition 数量的影响，但是这样意味着集群内 broker 节点数会增加，controller 负责的 broker 节点数增加，同时 controller 需要管理的 partition 数并不会减少，如果我们想解决大量 partition 共用一个集群的场景，那么核心需要解决的问题就是要么提升单个 controller 的处理性能能力，要么增加 controller 的数量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;03&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;解决方案&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 单 ZK 集群&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从提升单个 controller 处理性能方面可以进行下面的优化：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Controller 在拉取 zk 上的元数据时，虽然采用了异步等待数据响应的方式，请求和应答非串行等待，但是单线程处理消耗了大约 37s，我们可以通过多线程并行拉取元数据，每个线程负责一部分 partition，从而缩减拉取元数据的时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在虚拟机上简单模拟获取 100 万个节点数据，单线程约花费 28s，分散到 5 个线程上并行处理，每个线程负责 20 万 partition 数据的拉取，总时间缩短为 14s 左右（这个时间受虚拟机本身性能影响，同虚拟机上如果单线程拉取 20 万 partition 约只需要 6s 左右），因此在 controller 恢复时，并行拉取 partition 可以明显缩短恢复时间。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上文中提到 100 万 partition 生成的元数据约 80MB，如果我们限制了单 broker 上 partition 数量，意味着我们需要增加 broker 的节点数，controller 切换并行同步给大量的 broker，会给 controller 节点带来流量的冲击，同时同步 80MB 的元数据也会消耗比较长的时间。因此需要改变现在集群同步元数据的方式，比如像存放消费位置一样，通过内置 topic 来存放元数据，controller 把写入到 ZK 上的数据通过消息的方式发送到内置存放元数据的 topic 上，broker 分别从 topic 上消费这些数据并更新内存中的元数据，这类的方案虽然可以在 controller 切换时全量同步元数据，但是需要对现在的 kafka 架构进行比较大的调整（当然还有其他更多的办法，比如不使用 ZK 来管理元数据等，不过这不在本篇文章探讨的范围内）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那有没有其他的办法，在对 kafka 架构改动较小的前提下来支持大规模 partition 的场景呢？我们知道 kafka 客户端与 broker 交互时，会先通过指定的地址拉取 topic 元数据，然后再根据元数据连接 partition 相应的 Leader 进行生产和消费，我们通过控制元数据，可以控制客户端生产消费连接的机器，这些机器在客户端并不要求一定在同一个集群中，只需要客户端能够拿到这些 partition 的状态信息，因此我们可以让不同的 topic 分布到不同的集群上，然后再想办法把不同集群上的 topic 信息组合在一起返回给客户端，就能达到客户端同时连接不同集群的效果，从客户端视角来看就就是一个大的集群。这样不需要单个物理集群支撑非常大的规模，可以通过组合多个物理集群的方式来达到支撑更大的规模，通过这种方式，扩容时不需要用户停机修改业务，下面我们就来描述一下怎么实现这种方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 小&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;集群组建逻辑集群&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;当我们需要组建逻辑集群时，有几个核心问题需要解决：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、当客户端需要拉取元数据时，怎么把多个小的物理集群上的元数据组装在一起返回给客户端；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、不同集群上的元数据变更时怎么及时地通知变更；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、多个集群上保存消费位置和事务状态的 topic 怎么分布。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面针对这些问题一一进行讲解：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4491758241758242&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHWdQ8Ns3uPkgUHI2mBHibI8dK7q3XMIyHGZpDBGicd1fnLyFicCp3pvDPLt5Qhlc1HIiafJToCyhhKduw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对 metadata 组装问题，我们可以在逻辑集群里的多个物理集群中选一个为主集群，其他集群为扩展集群，由主集群负责对外提供 metadata、消费位置、事务相关的服务，当然主集群也可以同时提供消息的生产消费服务，扩展集群只能用于业务消息的生产和消费。我们知道当 partition 的 Leader 切换时需要通过集群中的 controller 把新的 metadata 数据同步给集群中的 broker。当逻辑集群是由多个相互独立的物理集群组成时，controller 无法感知到其他集群中的 Broker 节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以对主集群中的 metada 接口进行简单的改造，当客户端拉取 metadata 时，我们可以跳转到其他的集群上拉取 metadata, 然后在主集群上进行融合组装再返回给客户端。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然跳转拉取 metadata 的方式有一些性能上的消耗，但是正常情况下并不在消息生产和消费的路径上，对客户端影响不大。通过客户端拉取时再组装 metadata，可以规避跨物理集群更新 metadata 的问题，同时也能够保证实时性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当消费分组之间的成员需要协调拉取数据的 partition 时，服务端会根据保存消费位置 topic 的 partition 信息返回对应的协调节点，因此我们在一个逻辑集群中需要确定消费位置 topic 分布的集群，避免访问不同物理集群的节点返回的协调者不一样，从不同集群上拉取到的消费位置不一样等问题。我们可以选主集群的 broker 节点提供消费和事务协调的服务，消费位置也只保存在主集群上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过上述的一些改造，我们就可以支持更大的业务规模，用户在使用时只需要知道主集群的地址就可以了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;组建逻辑集群除了上述的核心问题外，我们也需要关注 topic 的分配，由于腾讯云的 ckafka 本身就会把 broker 上创建 topic 的请求转发给管控模块创建，因此可以很方便的解决 topic 在多个物理集群的分布，也可以规避同一逻辑集群上，不同物理集群内可能出现同名 topic 的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4783821478382148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHWdQ8Ns3uPkgUHI2mBHibI8dyoU88EcJKSriadaCqEGzDcal1tbdWTHrXtaLLkuuhgibDqmmVNoo3fKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;717&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;前面讲述了多个物理集群怎么组建成单个逻辑集群，有时可能面临一个问题，就是单个物理集群由于一些原因需要在现有的 topic 上不断的扩充 partition，如果多个 topic 同时需要扩容可能出现单个物理集群过大的情况，因此需要对现有的集群进行分裂，一个物理集群拆分成两个物理集群。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进行集群的分裂涉及到 ZK 集群的分裂和对 broker 节点进行分组拆分，首先对集群中的 broker 节点分成两组，每组连接不同的 ZK 节点，比如我们可以在原来的 zk 集群中增加 observer 节点，新增的 broker 为一组，原来集群中的 broker 为一组，我们让新 broker 只填写 observer 的地址。ZK 集群分裂前，通过 KAFKA 内置迁移工具可以很方便地把不同的 topic 迁移到各自的 broker 分组上，同一个 topic 的 partition 只会分布在同一个分组的 broker 节点上，后续把 observer 节点从现有的 ZK 集群中移除出去，然后让 observer 与别的 ZK 节点组成新的 ZK 集群，从而实现 kafka 集群的分裂。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;04&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;结束语&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;通过提升 controller 的性能，和通过把多个物理集群组装成一个逻辑集群的做法都可以提升单集群承载 partition 的规模。但是相比而言，通过组建多个物理集群的方式对 kafka 现有的架构改动更小一些，故障恢复的时间上更有保障一些，服务更稳定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然业务在使用 kafka 服务时，如果业务允许保持一个 partition 数量适度的集群规模，通过业务拆分的方式连接不同的集群也是一种很好的实践方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;30&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;作者介绍&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;丁俊，&lt;/span&gt;腾讯云消息队列Ckafka负责人，拥有多年消息、缓存、NOSQL 等基础设施的研发经验。腾讯云 CKafka 团队一直在不断探索，致力于为用户提供可靠的消息服务。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;05&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;福利&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0029154518950438&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHVsf6A0mzk3uo1zj2O2gOdica4hiaeEAtCWf5VRicNynBtsB6ycMulqyF1B06N85Io8ftRgJN3iar6Nuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;686&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95098&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;50%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.37423312883435583&quot; data-type=&quot;gif&quot; data-w=&quot;163&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/7QRTvkK2qC6aqek98EtTHUKcyP8jibR2dMpmVDlnHv7DyMlWaib0sO2Qib2XtVPL8wictxAoKMch1iancskn5BpaYcg/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;50%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTQ2NTA1Mg==&amp;amp;mid=2247483846&amp;amp;idx=1&amp;amp;sn=bfe1d7e3843e0499a1738f54008e5a15&amp;amp;chksm=9b41f9f5ac3670e37f559a49de1d8e853edca063536c1b7cf0b6c97e10021f70cb3e40b31557&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《JS引擎中的Inline Cache技术内幕，你知道多少？》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;span&gt;《JS引擎中的Inline Cache技术内幕，你知道多少？》&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTQ2NTA1Mg==&amp;amp;mid=2247483805&amp;amp;idx=1&amp;amp;sn=35acc7c7811ab162acba28815f6b9b9d&amp;amp;chksm=9b41f9aeac3670b896a730043d6f9625b7376fb51c62ab108ced90d736e7ba2e0d4fba6ffc52&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《揭秘Kafka的硬盘设计方案，快速完成PB级数据扩容需求！》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《&lt;/span&gt;&lt;span&gt;揭秘Kafka的硬盘设计方案，快速完成PB级数据扩容需求！&lt;/span&gt;&lt;span&gt;》&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTQ2NTA1Mg==&amp;amp;mid=2247483773&amp;amp;idx=1&amp;amp;sn=ab5d5788cd4a894e79101af15075613b&amp;amp;chksm=9b41f94eac367058ce2412eae50a1a8096c965dbe34d53b91b305fa571825dc3e81c73e381e7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《腾讯课堂百万师生同时在线，如何实现消息的稳定互动？》&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《腾讯课堂百万师生同时在线，如何实现消息的稳定互动？&lt;/span&gt;&lt;span&gt;》&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTQ2NTA1Mg==&amp;amp;mid=2247483763&amp;amp;idx=1&amp;amp;sn=f90f34ba2592fd32b5d8385bf7500587&amp;amp;chksm=9b41f940ac36705646bf4a0a1159c25fb9ae946cb15b1bfc1c21b1363ccec3418c1956a13870&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《宅家学习，如何进行Kubernetes Ingress控制器的技术选型》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《&lt;span&gt;宅家学习，如何进行Kubernetes Ingress控制器的技术选型》&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTQ2NTA1Mg==&amp;amp;mid=2247483693&amp;amp;idx=1&amp;amp;sn=10650f9217806c18b301d41155cb5752&amp;amp;chksm=9b41f91eac3670083756ffe540d9baaf857e29d833bd1a9a1127556afcc10467504e5e26d5db&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《趣谈GC技术，解密垃圾回收的玄学理论》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《趣谈GC技术，解密垃圾回收的玄学理论》&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93679&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95428&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.7272727272727273&quot; data-type=&quot;gif&quot; data-w=&quot;55&quot; data-width=&quot;100%&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/7QRTvkK2qC4wGnbF5amRQQKTVrzcJtD7ZQwDcQRLs9LnN4HDVzlgmraiaeHnVbkhZZC9UroxSoQfxOe646XIjhg/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;扫描下方二维码&lt;/span&gt;&lt;span&gt;关注本公众号&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;了解更多有关腾讯云中间件的相关信息&lt;/span&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5560488346281909&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;901&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHXWa3qntCtcsFhOnLP26ERNdoiaX1SVaa3fWKpxLFQmBgwc9UOz5hoRzPicnvW7Fjyh3TianDRVbbic5Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87578&quot;&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yqVAqoZvDibHW4ynpBjRrolMxOZtKTiaYgT0HG1BkTeIUjfS0zrwEYVMy6Fj54m58z6pH9yWNOnFkbflRtKVicx0w/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;戳原文，了解&lt;span&gt;更多&lt;/span&gt;腾讯云CKafka的相关信息&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;！&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87578&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94252&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.0740740740740742&quot; data-type=&quot;png&quot; data-w=&quot;81&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7QRTvkK2qC5ricrpxA0Tln6U4mt6c9God8owkFMgicqnvogW8znAX84Syp3PSlsnkPKnE2n4ZyZs8E73qZj6XgyA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;点亮&lt;span&gt;在看&lt;/span&gt;，你最好看&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>