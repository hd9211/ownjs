<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1941349ddcfa927ae4e22ebf51c96bde</guid>
<title>超实用的 IDEA 插件推荐！百万级下载量</title>
<link>https://toutiao.io/k/47wemjf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.41904761904761906&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicUuYVbjEVKuL0Njick5MmyWdciaXI6fA99tze61HBK2T7hQjPHBCSvW6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;超实用的30多款idea插件，有百万级下载量的优秀插件，你值得拥有！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好的工具助你事半功倍，快速协助敲出更漂亮更有效率的代码。搬运工这里收集了很不错的&lt;strong&gt;IDEA插件&lt;/strong&gt;，相信你一定会喜欢的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;〓&lt;span&gt;必备插件列表：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.5592592592592592&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8CibwU2StkgKG5V3QF1fardlB1rR3TcHRBUiclcoib96EjIwqnMwAENxFnCMQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.5675925925925925&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8CibwxpEAMLhCVPeESPIPSSgD5I8ea3LEuibcPadJlwJ9Y1okKmxM24Fc4hQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.2712962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8CibwOLPZoa9Oy5H1sQic2sYa4BGTVJ4X2aNP1RAqkakNUBLMic6yuNeNY4PA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.27054545454545453&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjickhdACR6aek3tC7jiaAKLpDquPfLUtz8DCty0OxXaRk5fyMtkibZpxnJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1375&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.5055555555555555&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8Cibw4toUcC4XXxETyXbD2CjNdhG2JDIArHgQ6gfkCErtNy1pmJ5nnaEsUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.17777777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8CibwWsIl7Qne22X8dEXWuZpdND3QSTVuwofG0iaicdOrh0vt239lmWSNliaRg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.7484407484407485&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8CibwWTmjvxhjm2oGv4BI0h5tSJo8KgNbupb6lQFwSQibgibwlia1pFbuVDANA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;962&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.5617740232312566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8CibwEWSEoFazqpGJ1dCdvC59Ae0piaDsC7256b1DkX1flibDOGM5OkNO6eYw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;947&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.6888888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8Cibw7jXVQQX1TVkBuX4hqAJj4v3aRxv30WG5P7TqticWD1JGMe6EtoAq1aw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.4623955431754875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8CibwKIWaCibAZOr3PsVcEnCib0RxxC1qKHicCozcOZcc3zQXEUQDx3P5g2Qmw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1077&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.9332591768631813&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8CibwN3OCkOKDWWzul2nDsrDr1zXaIZTJBbec9p4Wkz101EovRjljtwpvyg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;899&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Properties &lt;/strong&gt;&lt;strong&gt;to &lt;/strong&gt;&lt;strong&gt;YAML &lt;/strong&gt;&lt;strong&gt;Converter &lt;/strong&gt;：Properties 转 YAML 格式插件&lt;span&gt;，&lt;span&gt;下载量3.7W+，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;推荐指数：&lt;/span&gt;&lt;span&gt;☆&lt;/span&gt;&lt;span&gt;☆&lt;/span&gt;&lt;span&gt;☆&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Git &lt;/strong&gt;&lt;strong&gt;Flow &lt;/strong&gt;&lt;strong&gt;Integration &lt;/strong&gt;：Git Flow 集成插件，&lt;span&gt;下载量55W+，&lt;/span&gt;&lt;strong&gt;推荐指数：☆&lt;span&gt;☆&lt;/span&gt;&lt;span&gt;☆&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.49490835030549896&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicHHRDL9cILZH1ib6tcRqzJlDrhkXicjCkkdnicMGMNibGvvSQdDTSAaJdyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;491&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9141221374045801&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicdzeJyFdztQQibjfdfMERCuOJdupwpicjzxHic08w61JAYvSlg8NdeZZ8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;524&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Custom &lt;/strong&gt;&lt;strong&gt;Postfix &lt;/strong&gt;&lt;strong&gt;Templates&lt;/strong&gt;：自定义Postfix模板，&lt;span&gt;下载量7W+，&lt;/span&gt;&lt;strong&gt;推荐指数：☆☆☆&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5543478260869565&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicUsG6FkdjH3DzvBgyvbC8GezAD0WhtYRibouY3YXE9x20L4FniaxMSXiag/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;736&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Lombok &lt;/strong&gt;&lt;strong&gt;Plugin&lt;/strong&gt;：注解自动生成代码&lt;span&gt;，&lt;span&gt;下载量804W+，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;推荐指数：☆☆☆&lt;/strong&gt;&lt;span/&gt;&lt;strong&gt;☆&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;217&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3743218806509946&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicwRoVcpibdicEhskSEOLy0c5GP6QVWxFNApibjEd7gu6DXEl0wUMDvONAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1106&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.25&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicic3WOrFTuyIsbpp3j0cjXlgKJnYMMbWpVJFYedLiaUuCM4hq5o8eES7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7485493230174082&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjic1J8rJ8gqZb0RoibQnE8HTOebWR7VYHcWvia8C7jbHxia0pGpzEAFreKFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;517&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicndmpdZibjRC4iapgUCfHdFRia4NcZQicUNaz1Je3wvorJ88HLECLglxciaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicSaLFp8JmTeibwBdft34Z2zcb39eDpOcXv24KoJJmnGJN75mMR2bibmMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjiclLPOhCjNY7UAWDbV0bqIicIEnicqZtNdV5lY8mGwcibCA6P8TZJWomWbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1609465111069&quot; data-category_id_list=&quot;1|11|16|17|22|24|26|27|28|29|3|31|32|35|36|37|39|41|42|43|45|46|47|48|49|5|50|51|52|53|54|55|6|7|8&quot; data-id=&quot;1609465111069&quot;/&gt;&lt;span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.609375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicXFo5fh0hY5VT20XHgEF87j3icYGTSsskyF29dRcfdCjia2iaDHblNyxmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5703063629222309&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicjOKguaIznl5DkCtpTKB8ossubNEmxDAdicibjuXsa9Np2dBhAiawVCIibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1273&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.4972273567467653&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicyMlvIas6dacQJTs1spJ7zPytZBFP3qNQc4ztgW8OdA0bk4WRMyjD8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;541&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;0.7534537725823592&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9TCVSBCAJ36O3ib1icbYq8CibwqMzRG5xHicGejBz9zMMZBxyG4I6LicQmTibe7UQ8OytJY6DrRibX3RO8Rw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;941&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.590521327014218&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjic64u4ocMRxiabIMeuWO6GrAiasmmmfQCN6XS9T1faI6BuqBqlKEbT0WrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1055&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.43521594684385384&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicc7Jw9ibPWTWFqXDf4mhANG7qmlUqxqFolJyTlJcF75uLlMDl7FFcA1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.565&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicKvwPszTHTiaZd852ZTQqhF5WkeZPnEzuVbC4neictr5q779073IAc2dw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.34609375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicibelicCibVof86x5DxonBFEJaDgd3IM6XFrc9XAicnJNV0iagbejtTgEbwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-source-line=&quot;63&quot;&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7092846270928462&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9T580MUuCniazhJQAnIywiceleXYWFrLG58X78GBEnRIiaQVvicN4Fuuu38UgFYWvBytsskiccldzxafDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;657&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;63&quot;&gt;&lt;br/&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicraZrgKUykXUm6e5PTiaFjIvMYlK8cESiaycI7hZziaY9aEdWWgbyYvkaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.37265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicVy2EVMznfULKD8kymVbFVke8MbibvEpJBuM8ndISHlMzLxlndouv6Gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-source-line=&quot;67&quot;&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4741591468416735&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9Q25YpPAcQTDwknUQmiahRjicdiawJnUH2ImZUIuk4gAMtAJZBpSBpEvuNiboLl0T6qOLwRNDMsUyuDHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1219&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;LeetCode editor&lt;/strong&gt;：LeetCode刷算法神器，可以拉取到LeetCode题，提交代码到LeetCode帮忙执行，&lt;/span&gt;&lt;span&gt;非常赞。&lt;/span&gt;&lt;span&gt;下载量5.8w+，&lt;/span&gt;&lt;strong&gt;推荐指数：☆☆☆&lt;strong&gt;☆&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;283&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.490625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9QlG1zx26ehRoLx19dV9qrPntRd4lxNcspNbVEzAswukOBRDjNY8Pwmx4BKOqicfvJRWAgic51td4rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;中文使用文档：&lt;/span&gt;&lt;span&gt;https://github.com/shuzijun/leetcode-editor/blob/master/README_ZH.md&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.475&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9RJmlRRbGXIqiay7JG3wwicDrAph3NhCYdJs8OEq590Nj0gL3QRmCxAl4DtM3HNPlOgOdunzvGBEbyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5462408516300732&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9SCFZAdxPaPfUfY26jiclzVfAzRRTk3jiaM23kxtouMby0Y8tccyAOqywH5TYkCEHfoYEeFdRPsxrrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1503&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ps:以上数据统计于2020.05&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;花了不少时间收集，并且找到对应的图片，太难了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说了这么多，大家觉得这几款插件怎么样？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果有觉得也不错的插件欢迎留言，大家一起共享^_^。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;附2018版-》&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5NTUzNTA2Mw==&amp;amp;mid=2454932251&amp;amp;idx=1&amp;amp;sn=e69867ba84a8307a61ab9f2b3ceba32a&amp;amp;chksm=871a01a3b06d88b55e18267f4b243f4ce3647e4d31979d6ce7d6f34676837be405427e82df5f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;必备瑞士军刀IDEA插件，你使用了哪些？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐好文&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、&lt;/strong&gt;&lt;strong/&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5NTUzNTA2Mw==&amp;amp;mid=2454933881&amp;amp;idx=1&amp;amp;sn=4f2bdecf4596d24559ebc519363e6639&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;互联网Code Review最佳实践分享&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;互联网Code Review最佳实践分享&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5NTUzNTA2Mw==&amp;amp;mid=2454932968&amp;amp;idx=1&amp;amp;sn=f85707232789cbb41c2bebffcb67507b&amp;amp;chksm=871a0750b06d8e467e49858d7c1d64604a84d1316324e30976071fd30347813d490ef4e175b5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;dubbo面试题！会这些，说明你看懂了dubbo源码&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;dubbo面试题！会这些，说明你看懂了dubbo源码&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、&lt;/strong&gt;&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3MTUzOTcxOQ==&amp;amp;mid=2452969933&amp;amp;idx=1&amp;amp;sn=ab685b2cee2b9d1dc3a1996ab3621b49&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span/&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5NTUzNTA2Mw==&amp;amp;mid=2454933508&amp;amp;idx=1&amp;amp;sn=f993f90fd83c0eca8cd1b15a9b6db017&amp;amp;chksm=871a1abcb06d93aa36ebe2ff761193030d3f886f5b6ee894bab49eaccbc0cf30986d078e8e66&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Kafka面试题！掌握它才说明你真正懂Kafka&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Kafka面试题！掌握它才说明你真正懂Kafka&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span/&gt;&lt;br/&gt;&lt;strong&gt;4、&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5NTUzNTA2Mw==&amp;amp;mid=2454932288&amp;amp;idx=1&amp;amp;sn=149a790e4d3d6b2722ccdb677e54a666&amp;amp;chksm=871a01f8b06d88eeac9200e146c3d3de70351b2deb4e85339a037a6f21c06d8a7b0b299880eb&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Netty 5.0为啥被舍弃？原因竟然是...&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Netty 5.0为啥被舍弃？原因竟然是...&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span/&gt;&lt;br/&gt;&lt;strong&gt;5、&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5NTUzNTA2Mw==&amp;amp;mid=2454933647&amp;amp;idx=1&amp;amp;sn=7021d7c3d4a02de5178c86b7af85be52&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;中台之上——业务架构系列【汇总】&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;中台之上——业务架构系列【汇总】&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;6、&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5NTUzNTA2Mw==&amp;amp;mid=2454932251&amp;amp;idx=1&amp;amp;sn=e69867ba84a8307a61ab9f2b3ceba32a&amp;amp;chksm=871a01a3b06d88b55e18267f4b243f4ce3647e4d31979d6ce7d6f34676837be405427e82df5f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;必备瑞士军刀IDEA插件，你使用了哪些&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;span&gt;必备瑞士军刀IDEA插件，你使用了哪些&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;7、&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5NTUzNTA2Mw==&amp;amp;mid=2454934195&amp;amp;idx=1&amp;amp;sn=62869742d0cdebcef26a0732c9bb03ec&amp;amp;chksm=871a180bb06d911d4da8ab7c3b7699f033d0f0ede1d2eab5263e273ad08c8d1837facd809ae9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;线上热更新代码只需3步 Arthas实战&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;线上热更新代码只需3步 Arthas实战&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;8、&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5NTUzNTA2Mw==&amp;amp;mid=2454934176&amp;amp;idx=1&amp;amp;sn=b94dd05ecff649c73a89ef191208c0f0&amp;amp;chksm=871a1818b06d910ecdee7d912abb31b3b6bb4efe7cfbc6241b517193f1c4523c075188c724c2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Eureka源码剖析之七：架构&amp;amp;面试题【总结】&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Eureka源码剖析之七：架构&amp;amp;面试题【总结】&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;9、&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5NTUzNTA2Mw==&amp;amp;mid=2454933958&amp;amp;idx=1&amp;amp;sn=fcb60a3e46cdff2684fef0e864eee94b&amp;amp;chksm=871a1b7eb06d92680136868aef9a35d59e6c071dda30e67bad75c9c44a0fccba2229d7536ce6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;互联网工程师应该用这种姿势打印日志&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;互联网工程师应该用这种姿势打印日志&lt;br/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5hLBZVCyG9TSaWN1KPgU0HGEM8uPibRI0xaL9KEnrpjk93rg8UeYsv7G4LVicvD8EOxfDq9rPfUSibarNsLZ5u0Vg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-关注搬运工来架构，与优秀的你一同进步-&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果喜欢这篇文章可以点在看哦↘&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b67617176033599844183940578e98ed</guid>
<title>如何吃透一个 Java 项目？（附学习实践）</title>
<link>https://toutiao.io/k/cifpaoe</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages __bg_gif&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot; data-backw=&quot;578&quot; data-backh=&quot;96&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/33P2FdAnju95xNQaJWFlU3fWicicxBac5nuOMtveZ6lxCCnoZU1Xd6ITUVhoibJib5eyx6d2hePhGFNbQ4nT3Gicgpg/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;88287&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;先说一下自己的情况：&lt;/span&gt;&lt;span&gt;就是对着视频敲Java项目，其中遇到的BUG还能解&lt;/span&gt;&lt;span&gt;决，但就是&lt;/span&gt;&lt;span&gt;每次敲完一个项目，就感觉很空虚，项目里面的知识点感觉懂了但又好像没懂，我应该怎样才能掌握一个项目所用的知识点呢？&lt;/span&gt;&lt;span&gt;至少不至于过了一头半个月就想不起来这个项目是什么东西了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;写博客记录？&lt;/span&gt;&lt;span&gt;，画思维导图？&lt;/span&gt;&lt;span&gt;还是怎么样呢？&lt;/span&gt;&lt;span&gt;有没有过来人能给点经验呢？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;71b219af727f4f9c1ecdc5a25d7f12de&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;首先，尝试分析下题主感到空虚、似懂非懂的原因，从问题描述来看原因可能有以下几方面：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;71b219af727f4f9c1ecdc5a25d7f12de&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;目标不&lt;/span&gt;&lt;span&gt;清&lt;/span&gt;&lt;span&gt;晰&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;71b219af727f4f9c1ecdc5a25d7f12de&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;在项目学习之前，是否有认真梳理和思考过，希望通过项目学习到哪些技术、&lt;/span&gt;&lt;span&gt;重点需掌握哪些知识点？&lt;/span&gt;&lt;span&gt;这些知识点又属于自己技术体系中哪个环节，是需要必须熟练掌握还是了解原理即可？&lt;/span&gt;&lt;span&gt;相信只有明确目标之后才有学习侧重&lt;/span&gt;&lt;span&gt;点和方向。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;71b219af727f4f9c1ecdc5a25d7f12de&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  学习方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;项目学习过程中，是否有带着问题和思考？比如项目核心需要解决的问题场景、使用了哪些技术方案，为什么需要这些技术，方案选择考虑主要有哪些？系统模块这样分层和实现的好处是？这个方法的实现，性能是否可以进一步优化等等。&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;如果只是纯粹跟着视频将项目代码机械敲一遍，我认为跟练习打字没任何区别，写出来的代码也是没有灵魂如行尸走肉。我相信只有结合自己的思考和理解，才可能赋予新的灵魂，做到知其然知其所以然，相关知识点也才能真正转化为自己的技术。&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;复习与应用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;纸上得来终觉浅，绝知此事要躬行，相信对编程而言更是如此，唯有实践才能出真知。对项目中学到的相关技术、知识点需要在不同场景反复练习和应用，并对过程中遇到的问题不断总结和反思。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95401&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;80%&quot;&gt;&lt;img data-ratio=&quot;0.0397489539748954&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/33P2FdAnjuiccUgnPh8mN61ImRu6ibO9SM59BYV8yapap1rP2jHKDKPOlkjlthrHckF0HCk95kNEXxA5OZ0pdfHg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;478&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;04512c184ebe4ec4f854593a029bf69c&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;其次，回到题主问题，如何吃透一个Java项目？从个人经验来看，大致可以从以下几方面入手：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;04512c184ebe4ec4f854593a029bf69c&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;项目背景了解&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p data-lake-id=&quot;04512c184ebe4ec4f854593a029bf69c&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;学习之前，先对项目业务背景和技术体系做大致的了解，这点非常重要，一是为了解项目核心要解决问题域，二是知道系统涉及哪些技术体系，这样在学习之前可以有相关技术知识准备，以便更轻松高效学习。&lt;/span&gt;&lt;span&gt;另外，学习完之后也可以清楚知道，什么样问题可以使用什么技术、什么方案来解决、如何解决的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;系统设计文档学习&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对项目和系统大概了解之后，可以开始对系统设计文档熟悉，建议按照架构文档、概要设计、详细设计方式递进。&lt;/span&gt;&lt;span&gt;通过设计文档的学习，可以快速对各系统模块有个框架性认识，知道各系统职责、边界、如何交互、系统核心模型等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于设计文档的学习，切不可走马观花，一定要带着问题和思考。&lt;/span&gt;&lt;span&gt;比如项目背景中的核心业务问题，架构师是如何转化成技术落地，方案为什么要这样设计，模型为什么要这样抽象，这样做的好处是什么等等？&lt;/span&gt;&lt;span&gt;同时，对不理解的问题做需好笔记，以便后续向老师或其他同事请教或讨论等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;系统熟悉和代码阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过设计文档的学习，对系统设计有整体了解之后，接下来就可以结合业务场景、相关问题去看代码如何实现了。&lt;/span&gt;&lt;span&gt;不过代码阅读，也需要注意方式方法，切不可陷入代码细节，应该自顶向下、分层分模块的阅读，以先整体、后模块、单功能点的方式层层递进。&lt;/span&gt;&lt;span&gt;先快速走读整个代码模块逻辑，然后再精读某个类、方法的实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码阅读过程中，建议一边阅读一边整理相关代码模块、流程分支、交互时序，以及类图等，以便更好理解，有些IDE工具也可根据代码自动生成，比如IntelliJ IDEA。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码阅读除了关注具体功能的实现之外，更重要的是需要关心代码设计上的思路和原理、性能考究、设计模式、以及设计原则的应用等。&lt;/span&gt;&lt;span&gt;同样，阅读代码注释也非常重要，在研究一个API或方法实现时，先认真阅读代码注释会让你事半功倍，尽可能不要做从代码中反推逻辑和功能的事情。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，对于核心功能代码建议分模块精读，不明白部分可借助代码调试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95401&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;80%&quot;&gt;&lt;img data-ratio=&quot;0.0397489539748954&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/33P2FdAnjuiccUgnPh8mN61ImRu6ibO9SM59BYV8yapap1rP2jHKDKPOlkjlthrHckF0HCk95kNEXxA5OZ0pdfHg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;478&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;05c06dbb9068eb17b0de1659a4a8b3f4&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;然后，对于技术学习这块我给几点个人建议，以供题主参考：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;05c06dbb9068eb17b0de1659a4a8b3f4&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;制定学习规划&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;梳理一份适合自己的技术规划，并制定明确的学习路线和计划，让学习更有方向和重点。&lt;/span&gt;&lt;span&gt;同样在视频课程的选择上也会更清晰，知道什么样视频该学、什么不该学，也不容易感到迷茫和空虚。&lt;/span&gt;&lt;span&gt;如今网上各种学习资料、视频汗牛充栋，学会如何筛选有效、适合自己的信息非常重要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;思考与练习&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于技术编程，无捷径可言，思考和练习都非常重要，需要不断学习、思考、实践反复操练。&lt;/span&gt;&lt;span&gt;从了解、会用、知原理、优化不断演进。&lt;/span&gt;&lt;span&gt;结合学习计划，可以给自己制定不同挑战，比如学习spring可以尝试自己实现一个ioc容器等等。&lt;/span&gt;&lt;span&gt;另外，工作或学习过程中遇到的问题，也是你快速提升技术能力的一个好方法，也请珍惜你遇到的每个问题的机会。&lt;/span&gt;&lt;span&gt;时间允许的话，也请尽可能去帮助别人解答问题，像stackoverflow就是个非常不错的选择，帮助别人的同时提升自己。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享与交流&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;保持思考总结的习惯，将学到的技术多与人分享交流，教学相长。&lt;/span&gt;&lt;span&gt;多与优秀的程序员一起、多参与优秀的开源项目等。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;09da967442c70d45037f2659cea6698c&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a48a500c0c584df4ed6ba893f6367273&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;最后，我再以我们团队Dubbo核心开发@哲良 大神的另一开源框架&lt;/span&gt;&lt;span&gt;TransmittableThreadLocal(TTL)&lt;/span&gt;&lt;span&gt;为例，来讲解下我们该如何学习和快速掌握一个项目。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a48a500c0c584df4ed6ba893f6367273&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95401&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;80%&quot;&gt;&lt;img data-ratio=&quot;0.0397489539748954&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/33P2FdAnjuiccUgnPh8mN61ImRu6ibO9SM59BYV8yapap1rP2jHKDKPOlkjlthrHckF0HCk95kNEXxA5OZ0pdfHg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;478&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;a48a500c0c584df4ed6ba893f6367273&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;结合上文所述，首先我会将TTL项目相关&lt;/span&gt;&lt;span&gt;文档&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;issues列表&lt;/span&gt;&lt;span&gt;认真阅读一遍，让自己对项目能有个大体的认识，并梳理出项目一些关键信息，比如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;核心要解决的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用于解决「在线程池或线程会被复用情况下，如何解决线程ThreadLocal传值问题」&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;有哪些典型业务场景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;4e057aa3f3f41daf9713eb0ef3267447&quot; lake-indent=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;ul data-lake-id=&quot;6fe468b24fe82873984803e438ed802d&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分布式跟踪系统或全链路压测（即链路打标）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;日志收集记录系统上下文&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Session级Cache&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应用容器或上层框架跨应用代码给下层SDK传递信息&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;使用到的技术&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有线程、线程池、ThreadLocal、InheritableThreadLocal、并发、线程安全等。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;bd0875b2a4618e003c765b6ba249df1d&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;24c4c6281e9a805fe0f60241983eb6dc&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;然后，再结合使用文档编写几个测试demo，通过程序代码练习和框架使用，一步步加深对框架的理解。比如我这里首先会拿TTL与原生JDK InheritableThreadLocal进行不同比较，体验两者的核心区别。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ThreadLocalTest&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; final AtomicInteger ID_SEQ = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AtomicInteger();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; final ExecutorService EXECUTOR = Executors.newFixedThreadPool(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, r -&amp;gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Thread(r, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;TTL-TEST-&quot;&lt;/span&gt; + ID_SEQ.getAndIncrement()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ThreadLocal&amp;lt;String&amp;gt; THREAD_LOCAL = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; InheritableThreadLocal&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;testThreadLocal&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;) throws InterruptedException&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            THREAD_LOCAL.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;set-task-init-value&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Runnable task1 = () -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    String manTaskCtx = THREAD_LOCAL.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;task1:&quot;&lt;/span&gt; + Thread.currentThread() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;, get ctx:&quot;&lt;/span&gt; + manTaskCtx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    THREAD_LOCAL.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;task1-set-value&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    THREAD_LOCAL.&lt;span class=&quot;code-snippet__keyword&quot;&gt;remove&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            EXECUTOR.submit(task1);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            TimeUnit.SECONDS.sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            THREAD_LOCAL.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;main-task-value&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Runnable task2 = () -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                String manTaskCtx = THREAD_LOCAL.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;task2:&quot;&lt;/span&gt; + Thread.currentThread() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;, get ctx :&quot;&lt;/span&gt; + manTaskCtx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            EXECUTOR.submit(task2);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            THREAD_LOCAL.&lt;span class=&quot;code-snippet__keyword&quot;&gt;remove&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String[] args&lt;/span&gt;) throws InterruptedException&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        testThreadLocal();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;task1:Thread[TTL-TEST&lt;span class=&quot;code-snippet__number&quot;&gt;-0&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,main], &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt; ctx:&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;-task-init-&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;task2:Thread[TTL-TEST&lt;span class=&quot;code-snippet__number&quot;&gt;-0&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,main], &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt; ctx :&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;task1:Thread[TTL-TEST&lt;span class=&quot;code-snippet__number&quot;&gt;-0&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,main], &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt; ctx:&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;-task-init-&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;task2:Thread[TTL-TEST&lt;span class=&quot;code-snippet__number&quot;&gt;-0&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,main], &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt; ctx :main-task-&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;b69de778c03291ab01ba379324c08199&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;通过代码运行结果，我们可以直观看到使用JDK原生InheritableThreadLocal，在task2异步任务中是无法正确获取代码⑵处所设置的上下文参数，只有改用TransmittableThreadLocal之后，程序才如我们预期正常获取。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3903912d8b56f62d55d0d514ad1dc367&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;70eb0c559a868cd9bb99fea4bf1c6715&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;不难发现，由JDK原生ThreadLocal切换到TransmittableThreadLocal，只需要做极少量的代码适配即可。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ThreadLocal&amp;lt;String&amp;gt; THREAD_LOCAL = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TransmittableThreadLocal&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;task2 = TtlRunnable.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(task2);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;5537d42cb37993447800edf6b013bf70&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;相信看到这里我们都会不禁想问，为什么只需要简单的更改两行代码，就可以平滑实现上下文透传？TTL框架背后具体都做了哪些工作，到底是怎么实现的呢？相信你和我一样都会比较好奇，也一定有想立马阅读源码一探究竟的冲动。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;15dd59f9c2decd26f205e5d18f1014f9&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5b7a8ed07958191ac76642568a3b0584&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;不过，通常这个时候，我并不会一头扎进源码，一般都会先做几项准备工作，一是回到设计文档再仔细的阅读下相关实现方案，把关键流程和原理了解清楚；二是把涉及到的技术体相关的基础知识再复习或学习一遍，以避免由于一些基础知识原理的不了解，导致源码无法深入研究或花费大量精力。像这里如果我对Thread、ThreadLocal、InheritableThreadLocal、线程池等相关知识不熟悉的话，一定会把相关知识先学习一遍，比如ThreadLocal基本原理、底层数据结构、InheritableThreadLocal如何实现父子线程传递等等。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;eab151de7abd09b21972c726d14719ae&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9e71ca56a918f754c60bea7f879d1bca&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;假设这里你对这些知识都已掌握，如果不熟悉，网上相关介绍文章也早已是汗牛充栋，你搜索学习下即可。这里我们先带着到底如何实现的这个疑问，一起来探究下核心源码实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;25df6d09eb63b6dbaf111836abaec5f4&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;440cde2a139b27f1840e26e5046970b5&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;首先把源码clone下来导入IDE，然后结合文档把系统工程结构和各功能模块职责快速熟悉一遍，然后结合文档和Demo找到关键接口和实现类，利用IDE把相关类图结构生成出来，以便快速理解类之间关系。非常不错，TTL整体代码非常精练、命名和包信息描述也都非常规范和清晰，我们可以快速圈出来。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;440cde2a139b27f1840e26e5046970b5&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2883263009845288&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuiccUgnPh8mN61ImRu6ibO9SMaFibsa2wrdk0fdF1yhA24zhraGvFSoCtzdaPv0uiak8dGiaLFicrPsibQIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2844&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2aad6cfd374aa6581d76b7572bd81a57&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;从类图中我们可以清晰看到核心关键类TransmittableThreadLocal是从ThreadLocal继承而来，这样的好处是不破坏ThreadLocal原生能力的同时还可增强和扩展自有能力，也可保证业务代码原有互操作性和最小改动。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e1c588447b51a107bad37c23ed1c2b1c&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e3ba314eb2145f338d94fcb752cbb4d1&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;然后结合Demo代码，&lt;/span&gt;&lt;span&gt;我们不难发现使用TTL主要有三个步骤，&lt;/span&gt;&lt;span&gt;TransmittableThreadLocal声明、set、remove方法的调用。根据整个使用流程和方法调用栈，&lt;/span&gt;&lt;span&gt;我们也可以很方便梳理出整&lt;/span&gt;&lt;span&gt;个代码处理初始化、调用时序。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e3ba314eb2145f338d94fcb752cbb4d1&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b109be6e69722d3b11f502ff8b06b3f0&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;(这里借用官方原图)&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7405446293494705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuiccUgnPh8mN61ImRu6ibO9SMSstwq2827H8dOAz96EOKCfw8hGFGmymbMkqG4cgEl1s8HeibDKZAtYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2644&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过流程图，我们可以清晰看到TTL核心流程和原理是通过TransmittableThreadLocal.Transmitter 抓取当前线程的所有TTL值并在其他线程进行回放，然后在回放线程执行完业务操作后，再恢复为回放线程原来的TTL值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;186&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;TransmittableThreadLocal.Transmitter提供了所有TTL值的抓取、回放和恢复方法（即CRR操作）： &lt;/p&gt;&lt;p&gt;capture方法：抓取线程（线程A）的所有TTL值。 &lt;/p&gt;&lt;p&gt;replay方法：在另一个线程（线程B）中，回放在capture方法中抓取的TTL值，并返回 回放前TTL值的备份 &lt;/p&gt;&lt;p&gt;restore方法：恢复线程B执行replay方法之前的TTL值（即备份）&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;弄明白核心流程和原理后，我们现在来分析下相关核心代码，在声明TransmittableThreadLocal变量时，我们会发现框架初始化了一个类级别的变量holder用于存储用户设置的所有ttl上下文，也是为了后续执行capture抓取时使用。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; final InheritableThreadLocal&amp;lt;WeakHashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, ?&amp;gt;&amp;gt; holder =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; InheritableThreadLocal&amp;lt;WeakHashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, ?&amp;gt;&amp;gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; WeakHashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, ?&amp;gt; initialValue() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WeakHashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; WeakHashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, ?&amp;gt; childValue(WeakHashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, ?&amp;gt; parentValue) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WeakHashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;(parentValue);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; final &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(T value) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!disableIgnoreNullValueSemantics &amp;amp;&amp;amp; &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; == value) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            remove();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.set(value);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            addThisToHolder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; addThisToHolder() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!holder.get().containsKey(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            holder.get().put((TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;542aa277f8715430b1a0a6bb0f81be22&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;结合set方法实现来看，我们会发现holder变量设计的非常巧妙，业务设置的上下文value部分继续复用ThreadLocal原有数据结构ThreadLocalMap来存储( super.set(value))；capture的数据源利用holder进行引用存储(addThisToHolder put this)。这样的好处是既可保持ThreadLocal数据存储原有的封装性，又很好实现扩展。除此之外，holder还有其他设计考究，这里抛出来大家可以思考下：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;542aa277f8715430b1a0a6bb0f81be22&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-lake-id=&quot;8637cca786d61530d4a95efa2cf91ca5&quot; start=&quot;1&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;为什么holder需要设计成static final类级别变量？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ttl变量的存储为什么需要使用WeakHashMap，而不是hashmap或其他？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-lake-id=&quot;cb97a548305ff54d8acdc905391a6387&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;beb2658fc2e41504715607c88e792aa2&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;然后我们再来看异步task转换 TtlRunnable.get(task2) 核心代码实现，代码整体实现相对比较简单，get方法是一个静态工厂方法，主要作用是将业务传入的普通Runnable task装饰成TtlRunable类，并在TtlRunable构造方法中进行线程capture动作(具体实现我们后面再分析)，然后将结果存储到对象属性capturedRef中。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; TtlRunnable &lt;span class=&quot;code-snippet__title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(@Nullable Runnable runnable, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; releaseTtlValueReferenceAfterRun, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; idempotent)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; == runnable) &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (runnable &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; TtlEnhanced) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (idempotent) &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (TtlRunnable) runnable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Already TtlRunnable!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TtlRunnable(runnable, releaseTtlValueReferenceAfterRun);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;　　&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TtlRunnable&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Runnable&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;TtlWrapper&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Runnable&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;TtlEnhanced&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;TtlAttachments&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; AtomicReference&amp;lt;Object&amp;gt; capturedRef;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Runnable runnable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; releaseTtlValueReferenceAfterRun;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TtlRunnable&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(@NonNull Runnable runnable, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; releaseTtlValueReferenceAfterRun)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.capturedRef = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AtomicReference&amp;lt;Object&amp;gt;(capture());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.runnable = runnable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.releaseTtlValueReferenceAfterRun = releaseTtlValueReferenceAfterRun;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Object captured = capturedRef.get();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (captured == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; || releaseTtlValueReferenceAfterRun &amp;amp;&amp;amp; !capturedRef.compareAndSet(captured, &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;TTL value reference is released after run!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Object backup = replay(captured);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            runnable.run();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            restore(backup);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }　&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; 　&lt;span class=&quot;code-snippet__comment&quot;&gt;//........   &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; ｝&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;f695b16e952984b11d9315ccf0653674&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;然后是run方法，这也是核心关键的CRR操作了。这里通过模板方法将CRR操作编排在业务逻辑执行的前后了，也即业务逻辑执行前会将capturer的值进行replay恢复，执行后进行复原restore操作。同样这里也有几个问题很值我们思考：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f695b16e952984b11d9315ccf0653674&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-lake-id=&quot;5f1473e039fcb2576bb851eadb6b4c29&quot; start=&quot;1&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;capture操作为什么需要放到TtlRunnable构造方法中，而不能在run方法中？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;代码中使用了哪两个设计模式，使用设计模式的好处是什么？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务执行完之后为什么还需要restore操作？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-lake-id=&quot;bec1cba666e1efb630fc42ee645314e6&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;29c06b31f2667ec84e5c57d1764869e9&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;接下来，我们再分别对capture、replay、restore方法实现做个一一分析。首先是capture方法，我们可以看到capture操作整体比较简单，主要是将set操作保存到holder变量中的值进行遍历并以Snapshot结构进行存储返回。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;         * Capture all {@link TransmittableThreadLocal} and registered {@link ThreadLocal} values in the current thread.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;         *&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;         * @return the captured {@link TransmittableThreadLocal} values&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;         * @since 2.3.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; capture() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Snapshot(captureTtlValues(), captureThreadLocalValues());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; HashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; captureTtlValues() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            HashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; ttl2Value = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; threadLocal : holder.get().keySet()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ttl2Value.put(threadLocal, threadLocal.copyValue());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; ttl2Value;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; HashMap&amp;lt;ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; captureThreadLocalValues() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            final HashMap&amp;lt;ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; threadLocal2Value = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, TtlCopier&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;&amp;gt; entry : threadLocalHolder.entrySet()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                final ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; threadLocal = entry.getKey();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                final TtlCopier&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; copier = entry.getValue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                threadLocal2Value.put(threadLocal, copier.copy(threadLocal.get()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; threadLocal2Value;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另一个captureThreadLocalValues，主要是用于将一些已有ThreadLocal中的上下文一起复制，已有ThreadLocal需要通过registerThreadLocal方法来单独注册。相关代码如下&lt;/span&gt;：&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; Transmitter {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;//....&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; volatile WeakHashMap&amp;lt;ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, TtlCopier&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;&amp;gt; threadLocalHolder = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WeakHashMap&amp;lt;ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, TtlCopier&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; final &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; threadLocalHolderUpdateLock = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;//......&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; registerThreadLocal(&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; ThreadLocal&amp;lt;T&amp;gt; threadLocal, &lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; TtlCopier&amp;lt;T&amp;gt; copier, &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; force) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (threadLocal &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; TransmittableThreadLocal) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            logger.warning(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;register a TransmittableThreadLocal instance, this is unnecessary!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        synchronized (threadLocalHolderUpdateLock) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!force &amp;amp;&amp;amp; threadLocalHolder.containsKey(threadLocal)) &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            WeakHashMap&amp;lt;ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, TtlCopier&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;&amp;gt; newHolder = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WeakHashMap&amp;lt;ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, TtlCopier&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;&amp;gt;(threadLocalHolder);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            newHolder.put((ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;) threadLocal, (TtlCopier&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;) copier);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            threadLocalHolder = newHolder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;//......&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里代码有个非常关键的处理，由于WeakHashMap非线程安全，为了避免并发问题安全加上了synchronized锁操作。这里有可以思考下除了synchronized关键字还有什么保障线程安全的方法。另外，实现threadLocal注册时为已经在锁块中了，为什么还要做new copy重新替换操作，这样做目的是什么？大家可以想想看。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;5d1bed666144b50936b724f9272fa579&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;eccf9ab1c4b81f8edb320605b42f853d&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;最后就是replay和restore方法，整体实现逻辑非常清晰，主要是将captured的值在当前线程ThreadLocal中进行重新赋值初始化，以及业务执行后恢复到原来。这里很佩服作者对不同情况的细致考虑，不是直接将当前holder中的上下文直接备份，而是与之前已capture的内容比较，将业务后set的上下文进行剔除，以免在恢复restore时出现前后不一致的情况。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;eccf9ab1c4b81f8edb320605b42f853d&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; replay(&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; captured) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    final Snapshot capturedSnapshot = (Snapshot) captured;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Snapshot(replayTtlValues(capturedSnapshot.ttl2Value), replayThreadLocalValues(capturedSnapshot.threadLocal2Value));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; HashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; replayTtlValues(&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; HashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; captured) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    HashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; backup = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (final Iterator&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;&amp;gt; iterator = holder.get().keySet().iterator(); iterator.hasNext(); ) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; threadLocal = iterator.next();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// backup&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        backup.put(threadLocal, threadLocal.get());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// clear the TTL values that is not in captured&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// avoid the extra TTL values after replay when run task&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!captured.containsKey(threadLocal)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            iterator.remove();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            threadLocal.superRemove();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// set TTL values to captured&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    setTtlValuesTo(captured);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// call beforeExecute callback&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    doExecuteCallback(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; backup;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; setTtlValuesTo(&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; HashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; ttlValues) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; entry : ttlValues.entrySet()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; threadLocal = entry.getKey();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        threadLocal.set(entry.getValue());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; restore(&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; backup) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    final Snapshot backupSnapshot = (Snapshot) backup;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    restoreTtlValues(backupSnapshot.ttl2Value);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    restoreThreadLocalValues(backupSnapshot.threadLocal2Value);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; restoreTtlValues(&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; HashMap&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; backup) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// call afterExecute callback&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    doExecuteCallback(&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (final Iterator&amp;lt;TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt;&amp;gt; iterator = holder.get().keySet().iterator(); iterator.hasNext(); ) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        TransmittableThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&amp;gt; threadLocal = iterator.next();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// clear the TTL values that is not in backup&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// avoid the extra TTL values after restore&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!backup.containsKey(threadLocal)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            iterator.remove();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            threadLocal.superRemove();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// restore TTL values&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    setTtlValuesTo(backup);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;eccf9ab1c4b81f8edb320605b42f853d&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8a9a614e7b8aa959c53569ef71f444a4&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;核心代码分析完之后，再来简单总结下项目中学习到的知识点：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8a9a614e7b8aa959c53569ef71f444a4&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-lake-id=&quot;6343d6400492f93f8b4cdc537f4d7154&quot; start=&quot;1&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对ThreadLocal、InheritableThreadLocal有了更加系统和深入的理解，包括两者继承关系、底层数据结构ThreadLocalMap与Thread关联关系等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面向gc编程(gc相关)、WeakHashMap(Java对象引用类型强、软、弱等)、线程安全、并发等等&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;设计模式相关，装饰模式、工厂、模板方法、代理等&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;TTL虽然代码量不算多，但短小精悍，也处处体现了作者超高的设计和编程能力，每行代码都值得学习和反复琢磨。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-lake-id=&quot;b4e7598e524c61c5210e1bd24ffd9fea&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;我相信通过类似这样的一个项目学习流程下来，把每个环节都能踏踏实实做好，且过程中有贯穿自己思考和理解。相信你一定能把每个项目吃透，并把项目中的每个技术点都牢牢掌握。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;623ceb5bd6b465859e31e27c9383da20&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3dac5874d686ae3c54c21c694b702ab7&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;最后，我所在团队是淘系技术部淘系架构团队，主要在负责一站式serverless研发平台建设，为业务不断提升研发效率和极致体验。平台已平稳支撑淘系互动、淘宝人生、金币庄园、特价版、闲鱼、拍卖、品牌轻店等多个业务的6.18、双11、双12、春晚等多个大促活动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  阿里巴巴集团淘系技术部招聘啦~  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎加入淘系架&lt;/span&gt;&lt;span&gt;构团队，团队成员大牛云集，有阿里移动中间件的创始人员、Dubbo核心成员、更有一群热爱技术，期望用技术推动业务的小伙伴。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f779404ce7c3882dd541a09432741303&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f779404ce7c3882dd541a09432741303&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;淘系架构团队，推进淘系（淘宝、天猫等）架构升级，致力于为淘系、整个集团提供基础核心能力、产品与解决方案：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f779404ce7c3882dd541a09432741303&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;38db22bc8a7b2fc66d84c8fd1ff68bbe&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务高可用的解决方案与核心能力（精细化流量管控Marconi平台：为业务提供自适应流控、隔离与熔断的柔性高可用解决方案，站点高可用：故障自愈、多机房与异地容灾与快速切流恢复&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一站式serverless研发平台GAIA，为业务提供高效研发效率和极致体验。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;下一代网络协议QUIC实现与落地&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;移动中间件（API网关MTop、接入层AServer、消息/推送、配置中心等等）&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-lake-id=&quot;276336dfe0598e6708c16f7135f3a9c7&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;期待一起参与加入淘系基础平台的建设~&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;67cb9ddab766585a196f5e905a36e2de&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1185f002863ed61a11e4ff950d20913a&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;简历投递至少千&lt;span&gt;📮 &lt;/span&gt;&lt;span&gt;：&lt;/span&gt;zhiheng.gao@alibaba-inc.com&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;✿ &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;&lt;span&gt;拓展阅读&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650423937&amp;amp;idx=1&amp;amp;sn=3f7dddabb1f4775b17c1237518e33cad&amp;amp;chksm=83968a99b4e1038f81e5fed1f27e2aa91b3c6d865b6360b2f80dce54fd3d9ab302c01b2003d5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;103&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;103&quot; data-ratio=&quot;0.179&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9I4FcCLVbcs5JicK2GFwSG5rR1x7yOefNxxIzibPaoX4jWxlibWTuhFmyXJS10ia8KiaalB1cwB7AugdA/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650423868&amp;amp;idx=1&amp;amp;sn=b5215326020d4296c8caf0fa8293d110&amp;amp;chksm=83968a24b4e10332302eec4e21da4ad17d334c80a3fa4b2e0674cce9bfdae6da3c4b01dc49dd&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;103&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;103&quot; data-ratio=&quot;0.179&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9I4FcCLVbcs5JicK2GFwSG5P2F0tuldiaQB7btj8LYJz6H5AZJaDlVQA0iaRfkzg1GQdnd628BeRNyA/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650423936&amp;amp;idx=1&amp;amp;sn=cec85496cb16c867594ceb8880e75f99&amp;amp;chksm=83968a98b4e1038e0c0df410d7a0b1f96f2280a9efa42489f513f30188c4552bee899e10316a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;103&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;105&quot; data-ratio=&quot;0.179&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9I4FcCLVbcs5JicK2GFwSG5x962XZiaC2iacDWrMIibTXGTKA1lwlzSs9K91kwolJzwWvBzZFnDAopbw/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;作者&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;少千&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;编辑|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;橙子君&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;阿里巴巴新零售淘系技术&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;331&quot; data-backw=&quot;578&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOiboFmk6AE4WC0UFUU2MfXQS9E9ibVUdVZoMpic6wE97ylUl6r4olNpDow/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;720&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;412.318339100346&quot; data-ratio=&quot;0.5722222222222222&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOmYpQKzz1XI7PlgmOA3cPARTxwZuKFw6osZsksibeH7HrS9oiaVooQSZQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;94&quot; data-backw=&quot;562&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9I3TY9EP8M3D7oDuMfTuEh37yxribyjc3viaicCKBT9nJhqBcib36SSRaib3vIobcZbx93RYyf9QvgzOA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a174c440a56e2a497feedf2d3fb5f669</guid>
<title>集群管理系统 Mesos 的设计原理</title>
<link>https://toutiao.io/k/tpmw10f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article-content&quot;&gt;&lt;blockquote&gt;&lt;p&gt;『看看论文』是一系列分析计算机和软件工程领域论文的文章，我们在这个系列的每一篇文章中都会阅读一篇来自 OSDI、SOSP 等顶会中的论文，这里不会事无巨细地介绍所有的细节，而是会筛选论文中的关键内容，如果你对相关的论文非常感兴趣，可以直接点击链接阅读原文。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;本文要介绍的是 2011 年 NSDI 期刊中的论文 —— &lt;a href=&quot;https://www.usenix.org/legacy/events/nsdi11/tech/full_papers/Hindman.pdf&quot;&gt;Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote-ref&quot; role=&quot;doc-noteref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，该论文实现的 Mesos 能够在集群中管理不同的计算框架，例如 Hadoop 和 MPI 等。虽然 Mesos 集群管理系统是 10 多年前发布的技术，今天已经逐渐被更主流、更通用的容器编排系统 Kubernetes 取代，但是它确实可以解决集群管理上的部分问题。&lt;/p&gt;&lt;p&gt;Apache Mesos 和 Kubernetes 都是优秀的开源框架，也都支持大规模的集群管理，但是它们两个管理的集群规模仍然差一个数量级，单个 Mesos 集群可以管理 50,000 节点，而 Kubernetes 集群却只能管理 5,000 节点，需要做很多优化和限制，才能达到相同的数量级。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/apache-mesos-and-kubernetes-2021-03-20-16162121718145.png&quot; alt=&quot;apache-mesos-and-kubernetes&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图 1 - Kubernetes 和 Mesos 集群&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;虽然 Kubernetes 是今天集群管理的主流技术，但是 Mesos 在刚刚出现时也是很先进的集群管理系统，它想要取代的是当时更为常见的静态分片集群。静态分片集群虽然可以同时运行属于不同框架的工作负载（例如：Hadoop、MPI），但是因为框架的异构性，使用静态分片技术会将集群中的机器预先分配给不同的框架，再由这些框架分配和管理资源。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/static-partitioning-2021-03-20-16162121718194.png&quot; alt=&quot;static-partitioning&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图 2 - 静态分片&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Mesos 在最初设计时并不会直接管理和调度开发者提交的工作负载，而是提供一组接口暴露集群的资源，并通过这组轻量级的接口同时对接 Hadoop、MPI 等框架。&lt;/p&gt;&lt;h2 id=&quot;架构&quot;&gt;架构&lt;/h2&gt;&lt;p&gt;如下图所示的 Mesos 集群同时运行了 Hadoop 和 Mesos 两个框架，如果忽略图中与 Hadoop、MPI 框架的相关模块，我们会发现架构会变得非常简单，它仅由 Zookeeper 集群、Mesos 主节点和工作节点组成。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/mesos-architecture-diagram-2021-03-20-16162121718200.png&quot; alt=&quot;mesos-architecture-diagram&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图 3 - Mesos 架构图&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Zookeeper 集群提供了高可用的数据存储和选举等功能；&lt;/li&gt;&lt;li&gt;Mesos 主节点收集工作节点上报的数据并向框架的调度器提供资源；&lt;/li&gt;&lt;li&gt;Mesos 工作节点上报数据并通过框架的执行者在本地启动任务；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;每个 Mesos 集群中运行的框架都由调度器和执行者两部分组成，调度器会处理主节点提供的资源，与 Kubernetes 的调度器有着相同的作用，当调度器接受主节点提供的资源后，它会返回待运行任务的相关信息；而执行者会在工作节点上运行框架创建的任务。&lt;/p&gt;&lt;p&gt;Mesos 为了保证更好的可扩展性，它定义了一套能够满足资源共享的最小接口，将任务调度和执行的控制权都通过如下所示的接口交给框架，其本身仅保留较粗粒度的调度和资源管理功能。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/mesos-api-2021-03-20-16162121718206.png&quot; alt=&quot;mesos-api&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图 4 - Mesos 接口&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;因为 Mesos 中的任务调度是分布式的过程，所以为了保证该过程的效率和可靠性，它引入了下面的这三种机制：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;节点过滤器：框架使用过滤器剔除集群中不满足自身调度条件的节点；&lt;/li&gt;&lt;li&gt;资源主动分配：为了提高框架的调度速度，会将预先提供给框架的资源计入框架的总分配资源，直到框架完成调度，这能激励框架实现更快的调度器；&lt;/li&gt;&lt;li&gt;资源撤回：如果框架在一段时间内没有处理主节点提供的资源，Mesos 会撤回资源并提供给其他框架；&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;除了提供良好的扩展性和性能之外，作为集群调度管理系统，Mesos 也面临着隔离不同任务资源的问题。在 Mesos 刚刚发布时，容器技术还没有像今天这么普及，但是它也利用操作系统的容器隔离不同工作负载的影响&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote-ref&quot; role=&quot;doc-noteref&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;，并利用可插拔式的隔离模块支持多种隔离机制。&lt;/p&gt;&lt;h2 id=&quot;调度模型&quot;&gt;调度模型&lt;/h2&gt;&lt;p&gt;我们在文章开篇就已经介绍过 Mesos 和 Kubernetes 能够管理的集群规模有数量级的差距，这里简单对比分析下两者在调度器上的差异，这能帮助我们理解 Kubernetes 调度器在设计时做出的决策，以及这些决策是如何影响它的可扩展性。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;需要注意的是，提升系统可扩展性往往都是复杂的问题，而在 Kubernetes 这样庞大的系统中会显得更加复杂，Kubernetes 的调度器不是影响其可扩展性的唯一因素，想要提升单个集群的规模要从多个方面入手。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Mesos 的调度器选择了两层的调度设计，其中顶层调度器仅会根据底层框架调度器的需求&lt;strong&gt;粗粒度地过滤集群中的节点&lt;/strong&gt;，而框架调度器会&lt;strong&gt;执行真正的任务调度&lt;/strong&gt;，将任务绑定到相应的节点上。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/two-level-scheduler-2021-03-20-16162121718212.png&quot; alt=&quot;two-level-scheduler&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图 5 - 两层调度器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这种两层的调度器设计看起来虽然很复杂，但是实际上它能够降低 Mesos 调度器的复杂度并提高了它的可扩展性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;降低复杂度：顶层调度器不需要处理真正的调度过程，它仅通过资源提供（Resource Offer）机制将一组节点交给底层调度器控制；&lt;/li&gt;&lt;li&gt;提高可扩展性：两层调度器设计可以更方便地接入新的框架调度器，兼容不同复杂的调度策略，不同框架调度器内部可以串行为任务选择节点，提高整体调度的吞吐量；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;虽然 Mesos 通过两层调度器设计提供了很强的扩展性，但是它却不能为调度决策提供&lt;strong&gt;全局最优解&lt;/strong&gt;。这是因为所有的调度决策都是在整个集群中的一部分节点中做出的，所有的调度决策都只是局部最优的，而这也是多调度器中的常见问题&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote-ref&quot; role=&quot;doc-noteref&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;&lt;p&gt;在调度系统中，想要实现更好的扩展性就一定面临着分片，分片必然导致调度器无法提供全局最优解并且显著地增加系统的复杂性。我们从 Linux、Go 语言等 CPU 调度器的演进可以观察到这点，最初的调度器大多数都是单线程的，为了提高调度器的性能，会使用多调度器并引入工作窃取机制处理多调度器中待调度任务队列的不平衡。&lt;/p&gt;&lt;p&gt;Kubernetes v1.21 版本的内置调度器仍然是单线程的，它为了在全局 5,000 个节点中做出最优的调度决策，需要使用不同的插件遍历这 5,000 个节点并排序，而这也是影响其扩展性的重要原因之一。全局最优解听起来是非常美好的设计，但是在调度这种比较复杂的场景中，局部最优解往往也都可以满足需求，在业务上不需要保证该约束时，就可以通过多调度器来提升性能了。&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;当对比 Mesos 和静态分片集群的资源利用率时，我们会发现 Mesos 在 CPU 和内存的集群资源利用率上都明显高于使用静态分片的集群，而这个结果也不会造成太多的意外，因为动态的资源分配策略一般都能够提高集群的资源利用率。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/mesos-avg-utilization-2021-03-20-16162121718218.png&quot; alt=&quot;mesos-avg-utilization&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图 6 - Mesos 和静态集群的资源利用率对比&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;了解 Mesos 出现时解决的问题以及它的设计可以让我们更好地理解今天面临的挑战，Mesos 在刚刚出现时是非常新颖的技术，与同期的其他产品来讲确实提供了很强的灵活性，但是随着 Yarn、Kubernetes 等技术的出现，它的很多场景也都被新技术取代，而这也是技术发展的必然趋势。&lt;/p&gt;&lt;h2 id=&quot;推荐阅读&quot;&gt;推荐阅读&lt;/h2&gt;&lt;section class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;Benjamin Hindman, Andy Konwinski, Matei Zaharia, Ali Ghodsi, Anthony D. Joseph, Randy Katz, Scott Shenker, and Ion Stoica. 2011. Mesos: a platform for fine-grained resource sharing in the data center. In Proceedings of the 8th USENIX conference on Networked systems design and implementation (NSDI&#x27;11). USENIX Association, USA, 295–308. &lt;a href=&quot;#fnref:1&quot; class=&quot;footnote-backref&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;What’s LXC? &lt;a href=&quot;https://linuxcontainers.org/lxc/introduction/&quot;&gt;https://linuxcontainers.org/lxc/introduction/&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;footnote-backref&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;调度系统设计精要 &lt;a href=&quot;https://draveness.me/system-design-scheduler/&quot;&gt;https://draveness.me/system-design-scheduler/&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;footnote-backref&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;img src=&quot;https://img.draveness.me/2020-03-11-15839264230785-wechat-qr-code.png&quot; alt=&quot;wechat-account-qrcode&quot;/&gt;&lt;h3&gt;转载申请&lt;/h3&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by/4.0/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; src=&quot;https://img.draveness.me/creative-commons.png&quot;/&gt;&lt;/a&gt;&lt;p&gt;本作品采用&lt;/p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by/4.0/&quot;&gt;知识共享署名 4.0 国际许可协议&lt;/a&gt;&lt;p&gt;进行许可，转载时请注明原文链接，图片在使用时请保留全部内容，可适当缩放并在引用处附上图片所在的文章链接。&lt;/p&gt;&lt;h3&gt;文章图片&lt;/h3&gt;&lt;p&gt;你可以在 &lt;/p&gt;&lt;a href=&quot;/sketch-and-sketch&quot;&gt;技术文章配图指南&lt;/a&gt;&lt;p&gt; 中找到画图的方法和素材。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2a198840009fd4cd089958581336dde2</guid>
<title>Spring Boot 第一弹，问候一下世界</title>
<link>https://toutiao.io/k/uaiufr5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/Springboot2.x/Springboot-learning-helloword/springboot_cover01.png&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;什么是Spring boot？？？&lt;/h2&gt;

&lt;p&gt; 从事Java开发的朋友想必都听说过&lt;code&gt;SSM&lt;/code&gt;、&lt;code&gt;SSH&lt;/code&gt;框架吧，虽然说现在有不少公司都还在用，但不得不说他们已经是比较老的框架了。这些用&lt;code&gt;SSM&lt;/code&gt;、&lt;code&gt;SSH&lt;/code&gt;框架写的项目要么已经重构，要么在重构的路上。&lt;br/&gt;
 当然无论是&lt;code&gt;SSM&lt;/code&gt;还是&lt;code&gt;SSH&lt;/code&gt;都不是今天的重点，今天要说的是&lt;code&gt;Spring Boot&lt;/code&gt;，一个令人眼前一亮的框架。&lt;br/&gt;
 &lt;code&gt;Spring Boot&lt;/code&gt;是一个基于&lt;code&gt;Java的开源框架&lt;/code&gt;，用于创建&lt;code&gt;微服务&lt;/code&gt;。它由Pivotal Team开发，用于构建独立的生产就绪Spring应用。&lt;br/&gt;
 &lt;code&gt;Spring Boot&lt;/code&gt;为&lt;code&gt;Java开发人员&lt;/code&gt;提供了一个很好的平台，可以开发一个可以运行的独立和生产级Spring应用程序。可以开始使用&lt;code&gt;最少的配置&lt;/code&gt;，而无需进行整个Spring配置设置。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Spring Boot&lt;/code&gt;的主要特点&lt;br/&gt;&lt;/strong&gt;
 创建独立的&lt;code&gt;Spring应用程序&lt;/code&gt;直接嵌入Tomcat，Jetty或Undertow（无需部署WAR文件）提供“初始”的POM文件内容，以简化Maven配置尽可能时自动配置Spring提供生产就绪的功能，如指标，健康检查和外部化配置绝对无代码生成，也&lt;code&gt;不需要XML配置&lt;/code&gt;。&lt;/p&gt;

&lt;h2&gt;让我们来进入Spring boot的大门&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;创建Spring boot项目比较常见的方式有3种&lt;/strong&gt;&lt;br/&gt;
1. 创建Maven项目，自己引入依赖，创建启动类和配置文件。&lt;code&gt;不建议初学者使用&lt;/code&gt;&lt;br/&gt;
2. 去&lt;a href=&quot;https://start.spring.io/&quot;&gt;官网&lt;/a&gt;创建。&lt;code&gt;不建议初学者使用&lt;/code&gt;&lt;br/&gt;
3. 用IDEA中的&lt;code&gt;Spring Initializr&lt;/code&gt;创建项目。&lt;code&gt;强烈建议初学者使用&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开始创建Spring boot项目&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开IDEA
&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/article/springboot-multi/01.png&quot; alt=&quot;&amp;quot;公众号:Madison龙少&amp;quot;&quot; title=&quot;公众号:Madison龙少&quot;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在IDEA中选择File--&amp;gt;New--&amp;gt;Project，选择Spring Initializr，指定JDK版本1.8，然后Next
&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/article/springboot-multi/03.png&quot; alt=&quot;&amp;quot;公众号:Madison龙少&amp;quot;&quot; title=&quot;公众号:Madison龙少&quot;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定Maven坐标、包名、JDK版等信息，然后Next
&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/Springboot2.x/Springboot-learning-helloword/03.jpg&quot; alt=&quot;&amp;quot;公众号:Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择自己所需要的依赖、Spring Boot的版本，Spring Boot与各个框架适配都是以starter方式，这里我们选择WEB开发的所需的starter即可
&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/Springboot2.x/Springboot-learning-helloword/04.jpg&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定项目的名称，路径即可完成，点击Finish等待创建成功
&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/Springboot2.x/Springboot-learning-helloword/05.jpg&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;项目结构
&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/Springboot2.x/Springboot-learning-helloword/06.jpg&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;主程序：SpringbootHellowordApplication&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt; @SpringBootApplication
 public class SpringbootHellowordApplication {
    public static void main(String[] args) {
       SpringApplication.run(SpringbootHellowordApplication.class, args);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;其中的SpringbootHellowordApplication是项目的启动类，里面有一个main()方法就是用来启动Spring Boot。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;配置文件：application.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre lang=&quot;yaml&quot;&gt;&lt;code&gt;server:
  port: 8080
  servlet:
    context-path: /springboot-helloword
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;application.yml&lt;/code&gt;是&lt;code&gt;Spring Boot&lt;/code&gt;的配置文件。(创建完项目后默认生成的是&lt;code&gt;application.properties&lt;/code&gt;，我这里使用的是&lt;code&gt;application.yml&lt;/code&gt;。可自行选择)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;启动项目，找到SpringbootHellowordApplication运行main方法即可启动。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/Springboot2.x/Springboot-learning-helloword/07.jpg&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/Springboot2.x/Springboot-learning-helloword/08.jpg&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;由于SpringBoot默认内置了Tomcat，因此启动的默认端口就是8080。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;其他启动方式&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the Maven plugin&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;$ mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running As a Packaged application&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;$ java -jar target/springboot-helloword-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;第一个程序HelloWord&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;我们每学习一种语言的时候，都要先问候一下世界。。。咳咳。&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;世界:我招谁惹谁了。。。emmm&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;编写HelloWordController&lt;/code&gt;&lt;/p&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@RestController
public class HelloWordController {
    /**
     * Hello，World
     *
     * @param what 参数，非必须
     * @return &quot;Hello,{what}!
     */
    @GetMapping(&quot;hello&quot;)
    public String sayHello(@RequestParam(required = false, name = &quot;what&quot;) String what) {
        if (StrUtil.isBlank(what)) {
            what = &quot;Word&quot;;
        }
        return StrUtil.format(&quot;Hello,{}!&quot;, what);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@RestController&lt;/code&gt;:标记这是一个&lt;code&gt;controller&lt;/code&gt;，是&lt;code&gt;@Controller&lt;/code&gt;和 &lt;code&gt;@ResponseBody&lt;/code&gt;这两个注解的集合。&lt;br/&gt;
&lt;code&gt;@GetMapping&lt;/code&gt;:指定一个映射。这里表示是Get请求的映射。&lt;br/&gt;
这里就不详细说明注解了，可以看我后面出的&lt;code&gt;源码分析文章&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;访问接口&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;springboot&lt;/code&gt;项目内置的&lt;code&gt;Tomcat默认端口是8080&lt;/code&gt;（可以根据情况修改端口），所以启动项目，访问&lt;code&gt;http://127.0.0.1:8080/springboot-helloword/hello&lt;/code&gt;或者&lt;code&gt;http://127.0.0.1:8080/springboot-helloword/hello?what=Word&lt;/code&gt;即可。&lt;br/&gt;
 注：127.0.0.1可以换成localhost
 &lt;strong&gt;&lt;code&gt;/springboot-helloword&lt;/code&gt;&lt;/strong&gt;:Spring Boot上下文（默认是&lt;code&gt;/&lt;/code&gt;，可修改：修改applicaiton.yml文件中的&lt;code&gt;server.servlet.context-path&lt;/code&gt;属性即可）&lt;br/&gt;
&lt;strong&gt;&lt;code&gt;/hello&lt;/code&gt;&lt;/strong&gt;:@GetMapping(&quot;hello&quot;)映射接口路径&lt;/p&gt;

&lt;h2&gt;结束语&lt;/h2&gt;

&lt;p&gt; 感谢阅读小生文章。祝大家早日富可敌国，实现财富自由。&lt;br/&gt;
 记得&lt;code&gt;点赞、评论、收藏哦&lt;/code&gt;。&lt;br/&gt;
 有任何问题可以在微信搜索&lt;code&gt;公众号&lt;/code&gt;：&lt;code&gt;Madison龙少&lt;/code&gt;进行咨询&lt;br/&gt;
 或者微信扫描下面二维码进行咨询&lt;br/&gt;
&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9af8ae383ef40249747bb2278c064d9%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b10595d147a8737f79b568a6a61c40a0</guid>
<title>使用 FFmpeg 与 WebAssembly 实现纯前端视频截帧</title>
<link>https://toutiao.io/k/7as4kva</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;前期调研&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;视频截帧，首先想到的是 video + canvas 方案，毕竟接触最多的就是它了，不过后面的深入分析，可以发现他们的局限性还是挺多的。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;下面主要对比了不同截帧方案，每种方案都是可以走通的，也有不同的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 腾讯云视频上传转换能力&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;腾讯云“数据万象”，图片上传和存储服务都基于对象存储服务（COS），同时官网上提供了媒体截图接口 GenerateSnapshot，可以获取某个时刻的截图，输出的截图统一为 jpeg 格式，同时在我们的内部库也封装基础的 JS 操作。视频上传和每个时刻的截图处理分成多个异步任务，上传任务返回结果后才能执行下一个截图处理。&lt;span&gt;但是目前这种方案需要服务端配合实现鉴权，比较麻烦，而且只有在上传视频后再进行截图，整个耗时会非常长。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;2. video + canvas 视频截图&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;可以看下网上的demo： &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6293622141997594&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCvib2yVu9WGc0XLNVypRSM1had5iclY2ZdRBcCEicNajjDiaEJL8NgWiayyToL4e3kWjCRciab3ic06kkibSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;demo地址：https://zzarcon.github.io/video-snapshot/&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;主体实现代码如下：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;async&lt;/span&gt; takeSnapshot(time?: VideoTime): &lt;span&gt;Promise&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// 首先通过createElement，创建video,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 在video上设置src后，通过currentTime方法，将视频设置到指定时间戳&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; video = &lt;span&gt;await&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.loadVideo(time);&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; canvas = &lt;span&gt;document&lt;/span&gt;.createElement(&lt;span&gt;&#x27;canvas&#x27;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 获取video标签的尺寸，作为画布的长宽&lt;/span&gt;&lt;br/&gt;    canvas.width = video.videoWidth;&lt;br/&gt;    canvas.height = video.videoHeight;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; context = canvas.getContext(&lt;span&gt;&#x27;2d&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!context) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;error creating canvas context&#x27;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 当前时间戳下的video作为图像源，在canvas上绘制图像&lt;/span&gt;&lt;br/&gt;    context.drawImage(video, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, canvas.width, canvas.height);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; dataURL = canvas.toDataURL();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; dataURL;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;首先利用video标签播放视频，再设置 &lt;/span&gt;&lt;span&gt;videoObject.currentTime&lt;/span&gt;&lt;span&gt; 指定时刻播放，最后放 canvas 中进行截图，也可以同上面的 demo 类似，提供一个操作界面，让用户选择截图时刻。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;缺点主要在 video 支持视频封装格式和编码有限，而且只支持下面几种：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;H.264 编码的 MP4 视频（MPEG-LA公司）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;VP8 编码的 webm 格式的视频（Google公司）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Theora 编码的 ogg 格式的视频（iTouch开发）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;用户制作上传的其它封装格式和编码组合的视频没法播放，平台上传支持 4 和 flv 格式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. wasm + FFfmpeg 实现截取视频截帧&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;主要看到这篇文章 wasm + FFmpeg 实现前端截取视频帧功能，直接利用 FFmpeg 提供的 lib  库，用 c 语言写好视频截帧功能，最后通过 Emscripten 编译器打包成 wasm + JS 的形式，在浏览器里面跑截图任务。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;FFmpeg 是功能强大的开源软件，能够运行音视频多种格式，几乎包括了现存所有的视音频编码标准。至于 wasm 的浏览器支持情况，对比看了下大概在 90% 左右，有不支持的情况以手动上传兜底，最后跟产品讨论可以接受。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. FFmpeg 截图任务队列&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;了解到我们服务端已经有一套 FFmpeg 截图方案，不过是异步任务队列的形式，耗时也在分钟级别，可能在视频上传完成后，也没法得到截图结果，所以没法满足需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结论&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;从这次需求出发，主要想实现的功能点是上传视频过程中能快速截帧，提供给用户选择，不阻塞流程，同时需要支持 MP4,FLV 格式，以及 WMV3,H.264 等常见的编码格式截图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面的几种方案里面 FFmpeg 才能满足。另一方面，b站使用这套方案已经在线上运行，具有可行性，所以最后决定用 wasm + &lt;span&gt;FFmpeg&lt;/span&gt; 方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开发踩坑&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;开发编译 &lt;span&gt;FFmpeg &lt;/span&gt;到后面实现截帧功能，遇到的问题挺多，网上资料相对比较少，这里尽量还原整个实践过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基础概念解释&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;wasm + &lt;span&gt;FFmpeg&lt;/span&gt; 的方案里面涉及到很多之前没有接触过的概念，下面一一介绍。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;FFmpeg&lt;/span&gt;：优秀的音视频处理库，可以实现视频截图，&lt;strong&gt;没有 &lt;/strong&gt;&lt;strong&gt;JS 版本&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;webAssembly：体积小且加载快的全新二进制格式，已经得到了主流浏览器厂商的支持。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3214990138067061&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtLib7cqm8JKrkub4yic1SlBLr2ENH1yC7NG7r9c5PnD43xQa2DzXJ6vuHdoXUL7iaatkEibgU8OJ3Oicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Emscripten：用来把 c/c++ 代码编译成 asm.js 和 WebAssembly 的工具链。编译流程先把c/c++ 代码编译成 LLVM 字节码，然后根据不同的目标语言编译成 asm.js 或者 wasm。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面我们从如何安装 Emscripten 开始讲起，到编译 FFmpeg，构建出 ffmpeg.wasm，从而可以在浏览器执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;文章整体篇幅比较长，而且整体构建也有比较简单的方式，如果你已经了解到网上有很多现成的构建包，可以直接拿来用，那么你就不用太关注整个编译过程及最后的 C语言方案如何实现，直接跳转到部署上线部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，如果想追求极致，根据自己的业务需求，来调整包大小，或者用新版本的 FFmpeg 来打包，就需要看完 C 语言部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;安装 Emscripten&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编译之前需要手动安装 Emscripten 编译器，安装提供了两种方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 根据官网指导安装&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;官方文档：https://emscripten.org/docs/getting_started/downloads.html#download-and-install&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;Fetch the latest version of the emsdk (not needed the first time you clone)&lt;br/&gt;git pull&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Download and install the latest SDK tools.&lt;/span&gt;&lt;br/&gt;./emsdk install latest&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Make the &quot;latest&quot; SDK &quot;active&quot; for the current user. (writes .emscripten file)&lt;/span&gt;&lt;br/&gt;./emsdk activate latest&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Activate PATH and other environment variables in the current terminal&lt;/span&gt;&lt;br/&gt;source ./emsdk_env.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;上面的 latest 可以替换成指定的版本号进行安装，需要安装 Python，make 等依赖环境。而且会&lt;/span&gt;&lt;span&gt;通过 googlesource.com 源下载依赖，需要保证访问外网。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;最后安装成功，运行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;emcc -v&lt;/span&gt;&lt;/code&gt;&lt;span&gt;查看结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 安装 Emscripten 的 docker 镜像&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不用安装其它的依赖环境，通过运行容器的方式使用别人已经搭建好的 Emscripten 环境。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Emscripten 镜像地址：https://hub.docker.com/r/trzeci/emscripten&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;也可以设置 cache wasm 缓存，加速第二次运行速度。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/bin/bash -x&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 指定emscripten版本号&lt;/span&gt;&lt;br/&gt;EM_VERSION=1.39.18-upstream&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 运行成功后，开始执行./build.sh里面的脚本编译ffmpeg。&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;docker pull trzeci/emscripten:$EM_VERSION&lt;br/&gt;docker run \&lt;br/&gt;  -v $PWD:/src \&lt;br/&gt;  -v $PWD/cache-wasm:/emsdk_portable/.data/cache/wasm \&lt;br/&gt;  trzeci/emscripten:$EM_VERSION \&lt;br/&gt;  sh -c &#x27;bash ./build.sh&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;编译 FFmpeg&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;编译过程跟gcc编译类似，后面的编译推荐使用ubuntu系统，其它系统遇到问题比较多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 配置 FFmpeg 参数，生成 MakeFile 等配置文件&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;运行命令&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;emconfigure ./configure ...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;后面加上配置参数，可以运行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;./configure --help&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 查看所有可以用的配置。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;下面列出了配置示例，我们的需求是要支持 MP4，FLV 视频格式，及常见的 H.264，HEVC，WMV3 编码。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;具体每个配置含义：https://cloud.tencent.com/developer/article/1393972&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;section&gt;&lt;h3&gt;&lt;span&gt;2. 构建依赖&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;emmake make -j4&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;后面 &lt;/span&gt;&lt;code&gt;&lt;span&gt;-j&lt;/span&gt;&lt;/code&gt;&lt;span&gt;设置启用多个内核并行去构建，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果在配置中没有传递参数 &lt;/span&gt;&lt;code&gt;&lt;span&gt;--disable-programs&lt;/span&gt;&lt;/code&gt;&lt;span&gt;, 在这一步就会把安装依赖和构建产物走完，所以如果要构建阶段加上一些额外的参数，或者自己写c方案去引入ffmpeg lib库自定义构建，可以在配置时加上 &lt;/span&gt;&lt;code&gt;&lt;span&gt;--disable-programs&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 构建 ffmpeg.wasm&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;通过 Emscripten 构建 FFmpeg.wasm，目前主流的方案有两种：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(1) 整体编译 FFmpeg, 加上 pre.js post.js 包裹胶水代码，跟 wasm 通信&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;具体方案是把上面第二步编译得到的二进制产物 FFmpeg，重命名为 &lt;span&gt;ffmpeg&lt;/span&gt;.bc，然后经过 emcc 构建出 ffmpeg.wasm+&lt;span&gt;ffmpeg&lt;/span&gt;.js 胶水代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在网上&lt;/span&gt;&lt;span&gt;搜索一下 &lt;/span&gt;&lt;span&gt;ffmpeg.js，也可以发现已经有现成的库：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;ffmpeg.js: https://github.com/Kagami/ffmpeg.js &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;videoconverter.js: https://github.com/bgrins/videoconverter.js&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;span&gt;不过该方案目前尝试只在 &lt;span&gt;Emscripten&lt;/span&gt;@1.39.15 之前的版本可以实现，在之后的版本产物只有libavcodec.a libswscale.a libavutil.a etc…， 生成的 &lt;span&gt;FFmpeg &lt;/span&gt;文件也是可执行的 &lt;span&gt;FFmpeg &lt;/span&gt;文件，无法作为 emcc 的输入内容。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;具体解释可以看：https://github.com/emscripten-core/emscripten/issues/11977&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;如果想走通整体编译方案，需要使用 &lt;span&gt;Emscripten&lt;/span&gt;@1.39.15 之前的版本，对应 ffmpeg@3.x 老版本进行编译,或者直接找现成编译好的库。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;知道构建出来的产物是什么，那如何跟它进行通信？可以想到应该是胶水代码 ffmpeg.js 内部会导出函数或者全局变量，供外部使用，结果放在回调函数中。其实可以利用Emscripten提供的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;--pre-js &amp;lt;file&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;--post-js &amp;lt;file&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;两个可选参数。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;用户传入自定义的 pre.js 和 post.js，包裹住最后生成的胶水代码 ffmpeg.js，在wasm被执行之前，运行 pre.js 中的代码，方便在 pre.js 中导出自定义函数(后面提到的 ffmpeg_run 函数)供外部使用，完成通信。代码示例可以参考 videoconverter 中的文件：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;ffmpeg_post.js: https://github.com/bgrins/videoconverter.js/blob/master/build/ffmpeg_post.js&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ffmpeg_pre.js: https://github.com/bgrins/videoconverter.js/blob/master/build/ffmpeg_pre.js&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;外部调用方式是：&lt;/span&gt;&lt;span&gt;js 代码通过 postmessage 传递截帧任务参数和 File 实例对象，参数经过处理后，执行 pre.js 中定义的 ffmpeg_run 函数，截帧任务成功后执行回调返回结果。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 外部js业务代码&lt;/span&gt;&lt;br/&gt;workers[i].postMessage({&lt;br/&gt;  fps,&lt;br/&gt;  files,&lt;br/&gt;  &lt;span&gt;// 这里的截帧任务参数，跟ffmpeg命令行用法参数一致&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;arguments&lt;/span&gt;: [&lt;br/&gt;      &lt;span&gt;&#x27;-ss&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1&#x27;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&#x27;-i&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;/input/&#x27;&lt;/span&gt; + files[i].name,&lt;br/&gt;      &lt;span&gt;&#x27;-vframes&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;1&#x27;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&#x27;-q:v&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;2&#x27;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&#x27;/output/01.jpg&#x27;&lt;/span&gt;&lt;br/&gt;  ],})&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;ommessage 接受到任务，传递给内部函数 ffmpeg_run 执行任务。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// web worker中运行截帧任务，引入ffmpeg.js&lt;/span&gt;&lt;br/&gt;onmessage = &lt;span&gt;function (e) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; { fps, files, &lt;span&gt;arguments&lt;/span&gt; } = e.data;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; params = [];&lt;br/&gt;   ...&lt;span&gt;// ffmpeg_run在ffmpeg.js里面是全局函数，引入后可以直接用&lt;/span&gt;&lt;br/&gt;  ffmpeg_run({&lt;br/&gt;      &lt;span&gt;outputDir&lt;/span&gt;: &lt;span&gt;&#x27;/output&#x27;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;inputDir&lt;/span&gt;: &lt;span&gt;&#x27;/input&#x27;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;arguments&lt;/span&gt;: &lt;span&gt;arguments&lt;/span&gt;,&lt;br/&gt;      files,&lt;br/&gt;  }, (res) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 返回所有图片的arrayBuffe二进制数据数组，&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 二进制转换为base64格式，展示在页面中展示&lt;/span&gt;&lt;br/&gt;      self.postMessage(res);&lt;br/&gt;  })}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;最后总结一下整体的命令：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 配置&lt;/span&gt;&lt;br/&gt;emconfigure ./configure \&lt;br/&gt;    --prefix=./lib/ffmpeg-emcc \&lt;br/&gt;  ...&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 构建依赖，生成ffmpeg.bc二进制产物&lt;/span&gt;&lt;br/&gt;emmake make -j4&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 构建ffmpeg.wasm&lt;/span&gt;&lt;br/&gt;emcc &lt;br/&gt;  -O2 &lt;br/&gt;  -s ASSERTIONS=1 &lt;br/&gt;  -s VERBOSE=1 &lt;br/&gt;  -s TOTAL_MEMORY=33554432 &lt;br/&gt;  -lworkerfs.js \&lt;br/&gt;  -s ALLOW_MEMORY_GROWTH=1 &lt;br/&gt;  -s WASM=1 &lt;br/&gt;  -v ffmpeg.bc \ # 上一步生成产物，重命名后作为emcc的输入内容&lt;br/&gt;  -o ./ffmpeg.js --pre-js ./ffmpeg_pre.js --post-js ./ffmpeg_post.js&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;实际上这种方案跟 FFmpeg 没有特别复杂通信，整体的调用方法都封装到了 ffmpeg_run 里面了，不用关注 FFmpeg 内部的实现细节，唯一的缺点是体积太大 12M 以上，里面的功能不可控，偶现截图失败，浏览器崩溃的问题，也没法快速定位。&lt;/span&gt;&lt;span&gt;我们线上主要用后面 c方案实现，大小在 3.7M（可以根据实际业务需求变化），相比整体编译更加灵活，所以这里主要介绍 c方案实现&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(2) 引入自定义的 c 文件，暴露出接口函数供 JS 调用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;FFmpeg 内部分别有不同的库文件，提供不同功能。可以自己写一份 c 代码，通过头文件引入的方式，用 FFmpeg 提供的内部库，实现截帧功能。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;这种方式非常考验对 &lt;span&gt;FFmpeg &lt;/span&gt;的理解，而且 &lt;span&gt;FFmpeg &lt;/span&gt;里面很多功能库没有提供完备的文档，不过有一篇教程非常详细的讲述每一步怎么做 An ffmpeg and SDL Tutorial，文章里面用的 api 在 2015 年更新过一遍，但是相比现在的&lt;span&gt; FFmpeg &lt;/span&gt;版本，还是有很多 api 废弃了。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;An ffmpeg and SDL Tutorial：http://dranger.com/ffmpeg/tutorial01.html&lt;/p&gt;&lt;p&gt;最新的文章可以看：https://zhuanlan.zhihu.com/p/40786748&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;这两篇在原文章的基础上更新了api，其中最后一篇应该算是比较新的版本，用到了ffmpeg@3.4.8 + emscripten@1.39.18可以编译成功。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;在前面第二步编译 make 基础上，再执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;make install&lt;/span&gt;&lt;/code&gt;&lt;span&gt;, 将 &lt;span&gt;FFmpeg &lt;/span&gt;构建到 prefix 参数指定的目录下，然后执行 emcc, 引入 c 文件和 &lt;span&gt;FFmpeg &lt;/span&gt;的库文件，生成最终产物。所以整体命令总结一下&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 配置ffmpeg参数&lt;/span&gt;&lt;br/&gt;emconfigure ./configure \&lt;br/&gt;    --prefix=/data/web-catch-picture/lib/ffmpeg-emcc \&lt;br/&gt;    ...&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 构建make，安装依赖&lt;/span&gt;&lt;br/&gt;make  # 或者emmake make -j4,&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 安装ffmpeg及相关lib到指定目录&lt;/span&gt;&lt;br/&gt;make install&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 构建目标产物&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; capture.c是我们自定义的c代码&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; libavformat.a libavcodec.a libswscale.a... 是前一步编译安装ffmpeg后生成的库文件&lt;/span&gt;&lt;br/&gt;emcc ${CLIB_PATH}/capture.c ${FFMPEG_PATH}/lib/libavformat.a ${FFMPEG_PATH}/lib/libavcodec.a ${FFMPEG_PATH}/lib/libswscale.a ${FFMPEG_PATH}/lib/libavutil.a \&lt;br/&gt;    -O3 \&lt;br/&gt;    -I &quot;${FFMPEG_PATH}/include&quot; \&lt;br/&gt;    -s WASM=1 \&lt;br/&gt;    -s TOTAL_MEMORY=${TOTAL_MEMORY} \&lt;br/&gt;    -s EXPORTED_FUNCTIONS=&#x27;[&quot;_main&quot;, &quot;_free&quot;, &quot;_capture&quot;, &quot;_setFile&quot;]&#x27; \&lt;br/&gt;    -s ASSERTIONS=0 \&lt;br/&gt;    -s ALLOW_MEMORY_GROWTH=1 \&lt;br/&gt;    -s MAXIMUM_MEMORY=-1 \&lt;br/&gt;    -lworkerfs.js&lt;br/&gt;    -o /data/web-capture/wasm/capture.js&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;最后编译用到的参数不多，这里简单解释一下：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;WASM=1：指定我们想要的 wasm 输出形式。如果我们不指定这个选项，Emscripten 默认将只会生成asm.js。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;TOTAL_MEMORY=33554432：可以通过 TOTAL_MEMORY 参数控制内存容量，值必须为 64KB 的整数倍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;EXPORTED_FUNCTIONS Emscripten：为了减少代码体积，会删除无用的函数，类似 treeshaking 的 DCE，我们自定义的函数暴露给外部使用，需要同通过 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;EXPORTED_FUNCTIONS：保证不被删除，参数的命名形式为 &#x27;_funcName&#x27;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ASSERTIONS=1：用于为内存分配错误启用运行时检查，ASSERTIONS 默认是开启的，在存在编译优化参数 (-O1+) 的时候会被关闭&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ALLOW_MEMORY_GROWTH=1：设置可变内存，初始化后内存容量固定，在可变内存模式下，空间不足可以实现自动扩容&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MAXIMUM_MEMORY=-1：设置成 -1，意味着没有额外的内存限制，浏览器会尽可能的允许内存增加。从这篇文章看 https://v8.dev/blog/4gb-wasm-memory， v8 目前允许 WebAssembly 应用的最大内存也是 4GB，这里也可以设置成 4G。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-I &quot;${FFMPEG_PATH}/include&quot;：指定了引用的头文件&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;涉&lt;/span&gt;&lt;span&gt;及到的 FFmpeg 库&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;libavcodec：音视频各种格式的编解码&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;libavformat：用于各种音视频封装格式的生成和解析，包括获取解码所需信息以生成解码上下文和读取音视频帧等功能&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;libavutil：包含一些公共的工具函数的使用库，包括算数运算，字符操作等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;libswscale：提供原始视频的比例缩放、色彩映射转换、图像颜色空间或格式转换的功能。libswscale 常用的函数数量很少，一般情况下就 3 个：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;sws_getContext()：初始化一个SwsContext。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;sws_scale()：处理图像数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;sws_freeContext：释放一个SwsContext。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;常用FFmpeg数据结构&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;AVFormatContext：描述了媒体文件的构成及基本信息，是统领全局的基本结构体，贯穿程序始终，很多函数都要用它作为参数；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;AVCodecContext：描述编解码器上下文的数据结构，包含了众多编解码器需要的参数信息；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;AVCodec：编解码器对象，每种编解码格式(例如H.264、AAC等）对应一个该结构体，如libavcodec/aacdec.c的ff_aac_decoder。每个AVCodecContext中含有一个AVCodec；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;AVPacket：存放编码后、解码前的压缩数据，即ES数据；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;AVFrame：存放编码前、解码后的原始数据，如YUV格式的视频数据或PCM格式的音频数据等；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;C 代码逻辑梳理&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;截帧功能的实现，重点在解封装和解码，先从下面的代码流程图看下整个过程：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.27420814479638&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtLib7cqm8JKrkub4yic1SlBLg0ib4L1abRgDgbKxe8AxddicZlmls16ZcYdCsnseRT8UNYynzpj9L0Jw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1105&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;对照上面的流程图，进行具体解释：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;h3&gt;&lt;span&gt;1. main 主函数&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;注册所有可用的文件格式和编解码器，在后面打开相应的格式文件时会自动使用。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#include &amp;lt;libavcodec/avcodec.h&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#include &amp;lt;libavformat/avformat.h&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#include &amp;lt;libavutil/imgutils.h&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#include &amp;lt;libswscale/swscale.h&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;int main(int argc, charg *argv[]) &lt;/span&gt;{&lt;br/&gt;  av_register_all();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;2. 读取视频文件&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;文件读取主要通过读取文件到内存，然后传递首地址指针到c文件中，完成内存文件传递。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;具体实现拆解：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;JS 部分实现&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;设置 type=&quot;file&quot; 属性的 input 标签，触发 change 事件，获取File对象&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;检查如果file文件之前没有缓存过，则new FileReader()，利用readAsArrayBuffer方法，转换为ArryaBuffer&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;const filePtr = Module._malloc(fileBuffer.length): 建立视图，方便插入和读取内存中的数据&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Module是emscripten编译出的ffmpeg.js中暴露出来的全局变量，接着通过Module._malloc分配同等大小的内存空间，Module.HEAP8.set(fileBuffer, filePtr)，将数据填充进去，最后将内存首地址指针，及长度传给c文件暴露出来的方法。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;C 部分实现&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;到 c 文件里面全局变量定义数据结构 BufferData 存放文件位置指针和长度，保存前面 JS 部分传入的变量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;typedef&lt;/span&gt; &lt;span&gt;struct {&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;uint8_t&lt;/span&gt; *ptr;  &lt;span&gt;// 文件中对应位置指针&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;size_t&lt;/span&gt; size;   &lt;span&gt;// 内存长度&lt;/span&gt;&lt;br/&gt;} BufferData;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分配更视频文件同等大小的内存区域，后面在 av_read_frame 读取数据包时，会调用avio_alloc_contex t中的 read_packet 方法读取流数据，readPacket 里面主要根据前面传入的 size，拷贝 BufferData 结构体中的数据，&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;  &lt;span&gt;uint8_t&lt;/span&gt; *avioCtxBuffer = (&lt;span&gt;uint8_t&lt;/span&gt; *)av_malloc(avioCtxBufferSize);&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;// avio_alloc_context 开头会读取部分数据探测流的信息，不会全部读取，除非设置的缓存过大。&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// av_read_frame 会在读帧的时候，调用avio_alloc_context中的read_packet方法读取流数据，&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 每隔avioCtxBufferSize调用一次，直到读完。&lt;/span&gt;&lt;br/&gt;  avioCtx = avio_alloc_context(avioCtxBuffer, avioCtxBufferSize, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, readPacket, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;// -&amp;gt;pb 指向有效实例，pb是用来读写数据的，它把媒体数据当做流来读写&lt;/span&gt;&lt;br/&gt;    pFormatCtx-&amp;gt;pb = avioCtx;&lt;br/&gt;    &lt;span&gt;// AVFMT_FLAG_CUSTOM_IO,表示调用者已指定了pb（数据获取的方式）&lt;/span&gt;&lt;br/&gt;    pFormatCtx-&amp;gt;flags = AVFMT_FLAG_CUSTOM_IO;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;打开文件，读取文件头，同时存储文件信息到 pFormatCtx 机构中，后面的三个参数，描述了文件格式，缓冲区大小和格式参数，简单指明 NULL 和 0，告诉 libavformat 去自动探测文件格式并使用默认的缓冲区大小。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;avformat_open_input(&amp;amp;pFormatCtx, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;h3&gt;&lt;span&gt;3. 解封装和解码&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;大部分音视频格式的原始流的数据中，不同类型的流会按时序先后交错在一起，形成多路复用，这样的数据分布，既有利于播放器打开本地文件，读取某一时段的音视频；也有利于网络在线观看视频，从某一刻开始播放视频。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;视频文件中包含数个音频和视频流，并且他们各自被分开存储不同的数据包里面，我们要做的是使用 libavformat 依次读取这些包，只提取出我们需要的视频流，并把它们交给 libavcodec 进行解码处理&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;解码整体流程，再对比看下这张流程图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7372962607861937&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtLib7cqm8JKrkub4yic1SlBLkI2v6IyjMia4oy08TnOcqiaBvdU8Ahaicv4cGlId9pHtrBud50GPlQesQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1043&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;大体的实现思路基本一致。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;获取文件主体的流信息，保存到 pFormatCtx 结构体中，遍历 pFormatCtx -&amp;gt; streams 数组类型的指针，大小为 pFormatCtx -&amp;gt; nb_streams，找到视频流 AVMEDIA_TYPE_VIDEO：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; (avformat_find_stream_info(pFormatCtx, &lt;span&gt;NULL&lt;/span&gt;) &amp;lt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;fprintf&lt;/span&gt;(&lt;span&gt;stderr&lt;/span&gt;, &lt;span&gt;&quot;avformat_find_stream_info failed\n&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; videoStream = &lt;span&gt;-1&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; pFormatCtx-&amp;gt;nb_streams; i++) {&lt;br/&gt;    &lt;span&gt;// 找出视频流&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (pFormatCtx-&amp;gt;streams[i]-&amp;gt;codecpar-&amp;gt;codec_type == AVMEDIA_TYPE_VIDEO) {&lt;br/&gt;        videoStream = i;&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;通过 pFormatCtx -&amp;gt; streams[videoStream] -&amp;gt; codec，获取编解码器上下文，后面读取视频流，解码数据包，获取原始的帧数据需要用到。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;这里可以通过上下文拿到解码器 id(pCodecCtx -&amp;gt; codec_id 枚举类型)，通过 id 获取解码器：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pCodec = avcodec_find_decoder(pCodecCtx -&amp;gt; codec_id);&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;打开解码器,开始循环读取视频流：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;avcodec_open2&lt;br/&gt;av_read_frame&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;原始流中读取的每一个 packet 的流可能是不一样的，需要判断 packet 的流索引，按类型处理，找到视频流：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; (packet.stream_index == videoStream)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;解码数据包，获取原始的 YUV 格式帧数据， 大多数编码器返回 YUV420 格式的图片,然后使用 sws_scale 将 YUV 格式帧数据转换成 RGB24 格式数据：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;avcodec_send_packet&lt;br/&gt;avcodec_receive_frame&lt;br/&gt;sws_scale&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;4. 错误信息捕获&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;FFmpeg 错误管理是在 C 运行时库的基础上扩展，根据函数的返回值 int 进行判断，成功返回值大于或等于 0(&amp;gt;=0),错误的返回值为负数，错误值继承 c 运行时库的错误值，扩展自己的错误值定义在 libavcodec/error.h 或者 libavutil/error.h (较新版本位置)头文件中。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;需要使用 FFmpeg 提供的函数：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;int av_strerror(int errnum, char *errbuf, size_t errbuf_size)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;对 int 类型的返回值翻译成字符串，比如：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;br/&gt; ret = avcodec_receive_frame(dec, frame);&lt;br/&gt; fprintf(stderr, &lt;span&gt;&quot;Error during decoding (%s)\n&quot;&lt;/span&gt;, av_err2str(ret));&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;h3&gt;&lt;span&gt;5. 读取视频文件优化&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;文件传递本来是将原始的视频数据，&lt;span&gt;通过 js 的 readAsArrayBuffer 方法文件转换为 ArrayBuffer，传递内存地址进去，占用了很大空间，同时在读取数据包时，又会额外开辟空间，截帧过程中，内存占用可以达到文件本身大小的 3 倍多&lt;/span&gt;。测试上传一个 1.8G 左右的视频文件，运行任务时内存占用达到了 5.4G。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要修改文件的传递方式，利用 Emscripten 提供的 File System API。默认支持 MEMFS 模式，所有文件存在内存中，显然不满足我们在需求。WORKERFS 模式必须运行在 worker 中，在 worker 中提供对 File 和 Blob 对象的只读访问，不会将整个数据复制到内存中，可以用于大型文件，加上参数 &lt;/span&gt;&lt;code&gt;&lt;span&gt;-lworkerfs.js&lt;/span&gt;&lt;/code&gt;&lt;span&gt;才能包括进来。而且在 FFmpeg 配置需要加上&lt;/span&gt;&lt;code&gt;&lt;span&gt;--enable-protocol=file&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，输入的文件也属于协议，不加入 file 的支持是不能读入文件的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;C 文件修改：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;ImageData *capture(int ms, const char* path) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// 文件路径作为avformat_open_input函数第二个参数，文件流读取交给ffmpeg完成，&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 不用再设置pFormatCtx-&amp;gt;pb读取方式。&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; ret = avformat_open_input(&amp;amp;pFormatCtx, path, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;);&lt;br/&gt;  ...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;JS 入口文件修改：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; MOUNT_DIR  = &lt;span&gt;&#x27;/working&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// createFolder只需要在初始化执行一次&lt;/span&gt;&lt;br/&gt;FS.createFolder(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, MOUNT_DIR.slice(&lt;span&gt;1&lt;/span&gt;), &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 这里直接传入视频文件的File对象实例。不需要做其他读buffer内存操作。&lt;/span&gt;&lt;br/&gt;FS.mount(WORKERFS, { &lt;span&gt;files&lt;/span&gt;: [file] }, MOUNT_DIR)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// JavaScript调用C/C++时只能使用Number作为参数, 这里的虚拟路径字符串传递要用Module.cwrap包裹一层&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; c_capture = Module.cwrap(&lt;span&gt;&#x27;capture&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;number&#x27;&lt;/span&gt;, [&lt;span&gt;&#x27;number&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;string&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;c_capture(timeStamp, &lt;span&gt;`${MOUNT_DIR}/${file.name}`&lt;/span&gt;);&lt;br/&gt;FS.unmount(MOUNT_DIR)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;修改后运行任务时，无论视频文件的体积多大，内存占用基本稳定在 200M-400M。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;看&lt;/span&gt;&lt;span&gt;到这里，整个需求中最困难的阶段已经结束了，编译构建过程可能在实际操作时非常曲折，后面讲到的错误捕获及内存优化方案对于实现截帧的帮助会非常大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来会讲一下&lt;/span&gt;&lt;span&gt;比较简单的部署及线上情况。&lt;/span&gt;&lt;span&gt;读者可以根据一些线上数据，来权衡是否能应用到自己的业务场景中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;部署上线&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;本地开发可以跑通，接下来进行部署上线，项目使用 webpack 打包，假设项目中相关的目录结构如下：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;src&lt;br/&gt;├─ffmpeg &lt;br/&gt;│  ├─wasm&lt;br/&gt;│  │ ├─ffmpeg.wasm&lt;br/&gt;│  │ ├─ffmpeg.min.js     &lt;br/&gt;│  ├─ffmpeg.worker.js  // 封装截帧功能，同时引入并初始化ffmpeg.min.js，并引入ffmpeg.wasm&lt;br/&gt;│  ├─index.js          // 截图功能入口文件，初始化web worker并引入ffmpeg.worker，&lt;br/&gt;    ...&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;需要结合两个 loader 使用：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;file-loader: 通过 webpack 默认加载方式，没法在 worker 中引入 wasm 文件，而且我们得到的 ffmpeg.js 经过了压缩，不需要其它loader再次处理，可以直接利用file-loader得到文件路径，加载 ffmpeg.wasm，ffmpeg.js 文件&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;worker-loader: 专门用来处理 web worker 文件引入和初始化操作的 loader，可以直接引入worker 文件，不用担心路径问题。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;最后看下 webpack.config:&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  configChain.module&lt;br/&gt;    .rule(&lt;span&gt;&#x27;worker&#x27;&lt;/span&gt;)&lt;br/&gt;    .test(&lt;span&gt;/\.worker\.js/&lt;/span&gt;)&lt;br/&gt;    .use(&lt;span&gt;&#x27;worker-loader&#x27;&lt;/span&gt;)&lt;br/&gt;    .loader(&lt;span&gt;&#x27;worker-loader&#x27;&lt;/span&gt;)&lt;br/&gt;  &lt;br/&gt;  configChain.module&lt;br/&gt;    .rule(&lt;span&gt;&#x27;wasm&#x27;&lt;/span&gt;)&lt;br/&gt;    .test(&lt;span&gt;/\.wasm$|ffmpeg.js$/&lt;/span&gt;)&lt;br/&gt;    .type(&lt;span&gt;&quot;javascript/auto&quot;&lt;/span&gt;) &lt;span&gt;/** this disabled webpacks default handling of wasm */&lt;/span&gt;&lt;br/&gt;    .use(&lt;span&gt;&#x27;file-loader&#x27;&lt;/span&gt;)&lt;br/&gt;    .loader(&lt;span&gt;&#x27;file-loader&#x27;&lt;/span&gt;)&lt;br/&gt;    .options({&lt;br/&gt;      &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;assets/wasm/[name].[hash].[ext]&#x27;&lt;/span&gt;&lt;br/&gt;    })&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;另外，通常我们线上的 JS，css 等资源都放在 cdn 上面，如果不进行特殊处理，这里配置打包出来的 worker.js 文件引入的路径也是 cdn 域名，但是 web worker 严格限制了 worker 初始化时引入的 worker.js 必须跟当前页面同源,所以需要重写 __webpack_public_path__ 的路径。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;index.js&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import &lt;span&gt;&#x27;./rewritePublicPath&#x27;&lt;/span&gt;;&lt;br/&gt;import ffmpegWork from &lt;span&gt;&#x27;./ffmpeg.worker&#x27;&lt;/span&gt;;&lt;br/&gt;const worker = new ffmpegWork();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;rewritePublicPath.js&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// 这里需要跟页面的url保持一致&lt;br/&gt;__webpack_public_path__ = &lt;span&gt;&quot;//ke.qq.com/admin/&quot;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;worker-loader 的相关配置里面也提供了 publicPath 参数，不过跟我们理解的不一样,&lt;br/&gt;worker-loader.options.publicPath 只会影响在 worker 代码里面，再次 import 其他文件的情况，而我们在初始化 worker.js 时，webpack 默认会使用外部的 __webpack_public_path__ 去替换路径，所以需要重写 path。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现网效果&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;数据上报到 elk,通过 Grafana 查看整体数据情况，从不同维度收集了线上情况，下面对比过去 7 天的数据：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1. 整体支持 FFmpeg 截图的情况，必须同时支持 Webassembly 和 Web Worker，整体支持情况达到 90.87%，对于不支持截帧的情况，我们会引导用户进行手动上传图片并提供裁剪功能。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5135135135135135&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtLib7cqm8JKrkub4yic1SlBLrUIEukZhORad1FAlQNq08A7veicp3BE2jGhOhZyQql9icegscP2MibADQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;962&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;2. 首帧耗时平均在 467ms，整体截取 8 帧耗时在 2.47s 左右，主要在 window 上的 qq 浏览器截帧耗时明显慢很多，偶现最长到了 36.56s。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.20078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtLib7cqm8JKrkub4yic1SlBLPDId51ndtdeOdC6RpxWBdusmKWeBQtZibL5vLmts2PM1JpcNDicayg2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;3. 截帧成功率达到 99.86%，设置了首帧任务超时 18s，出现超时及失败的情况目前看非常少。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5481171548117155&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtLib7cqm8JKrkub4yic1SlBLyLG3gL5lTmrYefvPE2DTnfUzJHP1InviaXyibLD4l3nhPDT3dU0EVe4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;956&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;最开始对音视频相关技术了解几乎为零，所以整个方案从前期调研，到后面落地，上线部署，遇到的问题还是挺多。目前的 c 方案根据视频总时长，平均截取 8 帧实际上是串行执行，这块需要优化，在 c 代码中支持同时截帧多次，返回结果数组。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Webassembly 是由主流浏览器厂商制定的规范，目前来看支持情况还可以（除了IE），很大程度增强了浏览器的功能，把 c/c++ 等功能库搬到浏览器上面跑，减轻了服务器压力。应用场景非常广泛，除了 FFmpeg 解析视频，还有很多算法模型训练，文件 MD5 计算等功能都可以借助 &lt;span&gt;Webassembly&lt;/span&gt; 在浏览器里面去做。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI2MjcxNTQ0Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V0dLQzNJW15CVaCoNjposvTpccciaj05o5nPiaqfLRRfTQiaYFYPN41Etrrqt8jPOWukPmJWt3lYxwuA/0?wx_fmt=png&quot; data-nickname=&quot;全栈修仙之路&quot; data-alias=&quot;FerRoad&quot; data-signature=&quot;上百篇文章原创作者，全网 100W+ 阅读。聚焦全栈，专注分享 TS、Vue3、源码解析等技术干货。&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>