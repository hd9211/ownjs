<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>93d053f1562c3d16e3356acb74f59b36</guid>
<title>Docker 镜像瘦身</title>
<link>https://toutiao.io/k/t92f0ah</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;Docker 是一个用于开发，交付和运行应用程序的开发平台。它能够将应用程序和基础架构分开，保证开发，测试， 部署的环境完全一致，从而达到快速交付的目的。但是在实际项目中，会对项目中的模块或者服务进行细分， 导致部署的镜像过多（50+ 个），过大（打包压缩后的镜像达 50G+），这给部署带来了不小的隐患，特别是私有化部署（通过移动介质拷贝镜像进行部署）。本文从多篇镜像瘦身的文章入手，并进行实践验证，结合&lt;span&gt;官方的Dockerfile最佳实践&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; 总结了镜像压缩的4种方法和日常实践的多个技巧。&lt;/p&gt;&lt;h2&gt;镜像构建&lt;/h2&gt;&lt;h3&gt;构建方式&lt;/h3&gt;&lt;p&gt;镜像构建的方式有两种，一种是通过 &lt;code&gt;docker build&lt;/code&gt; 执行 Dockerfile 里的指令来构建镜像，另一种是通过 &lt;code&gt;docker commit&lt;/code&gt; 将存在的容器打包成镜像。通常我们都是使用第一种方式来构建容器，二者的区别就像批处理和单步执行一样。&lt;/p&gt;&lt;h3&gt;体积分析&lt;/h3&gt;&lt;p&gt;Docker镜像是由很多镜像层（Layers）组成的（最多127层）， Dockerfile 中的每条指定都会创建镜像层，不过&lt;strong&gt;只有 &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;COPY&lt;/code&gt;, &lt;code&gt;ADD&lt;/code&gt; 会使镜像的体积增加&lt;/strong&gt;。这个可以通过命令 &lt;code&gt;docker history image_id&lt;/code&gt; 来查看每一层的大小。这里我们以官方的 &lt;span&gt;alpine:3.12&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt; 为例看看它的镜像层情况。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;dockerfile&quot;&gt;&lt;code&gt;&lt;span&gt;FROM&lt;/span&gt; scratch&lt;br/&gt;&lt;span&gt;ADD&lt;/span&gt; alpine-minirootfs-&lt;span&gt;3&lt;/span&gt;.&lt;span&gt;12&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-x86_64.tar.gz /&lt;br/&gt;&lt;span&gt;CMD&lt;/span&gt; [&lt;span&gt;&quot;/bin/sh&quot;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.0849762066621346&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bDCibGAYVPCxbjV3DvkW6y2z9rEBuDUkyPTdjcNP7a5oqEARTgxQYWUAiaicPK1Xh2GR0Jmpib1caibw2clkL0wicu1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1471&quot; title=&quot;null&quot;/&gt;对比 Dockerfile 和镜像历史层数发现 &lt;code&gt;ADD&lt;/code&gt; 命令层占据了 5.57M 大小，而 &lt;code&gt;CMD&lt;/code&gt; 命令层并不占空间。&lt;/p&gt;&lt;p&gt;镜像的层就像 &lt;code&gt;Git&lt;/code&gt; 的每一次提交 &lt;code&gt;Commit&lt;/code&gt;, 用于保存镜像的上一个版本和当前版本之间的差异。所以当我们使用 &lt;code&gt;docker pull&lt;/code&gt; 命令从公有或私有的 Hub 上拉取镜像时，它只会下载我们尚未拥有的层。这是一种非常高效的共享镜像的方式，但是有时会被错误使用，比如反复提交。&lt;img data-ratio=&quot;0.3433734939759036&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bDCibGAYVPCxbjV3DvkW6y2z9rEBuDUkyhPabhhoRZY9dctKhy0UoGEuRPuPESbpmqQRE5fCgABSbibkj8g7Wx4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1494&quot; title=&quot;null&quot;/&gt;从上图看出，基础镜像 alpine:3.12 占据了 5.57M 大小，idps_sm.tar.gz 文件占据了 4.52M。但是命令 &lt;code&gt;RUN rm -f ./idps_sm.tar.gz&lt;/code&gt; 并没有降低镜像大小， 镜像大小由一个基础镜像和两次 &lt;code&gt;ADD&lt;/code&gt; 文件构成。&lt;/p&gt;&lt;h3&gt;瘦身方法&lt;/h3&gt;&lt;p&gt;了解了镜像构建中体积增大的原因，那么就可以对症下药：&lt;strong&gt;精简层数&lt;/strong&gt;或&lt;strong&gt;精简每一层大小&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;精简层数的方法有如下几种：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;   •&lt;/span&gt;RUN指令合并&lt;/span&gt;&lt;span&gt;&lt;span&gt;   •&lt;/span&gt;多阶段构建&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;     •&lt;/span&gt;精简每一层的方法有如下几种：&lt;/span&gt;&lt;span&gt;&lt;span&gt;         •  使用合适的基础镜像（首选 alpine）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;         • &lt;/span&gt;&lt;span&gt; 删除 RUN 的缓存文件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;镜像瘦身&lt;/h2&gt;&lt;p&gt;关于镜像瘦身这块的实际操作以打包 redis 镜像为例，在打包之前我们先拉取官方 redis 的镜像， 发现标签为6的镜像大小为 104M， 标签为 6-alpine 的镜像大小为 31.5M。打包的流程如下:&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;选择基础镜像，更新软件源，安装打包工具&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;下载源码并进行打包安装&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;清理不需要的安装文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;按照上述的流程，我们编写如下的&lt;span&gt;Dockerfile&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;，该镜像使用命令 &lt;code&gt;docker build --no-cache -t optimize/redis:multiline -f redis_multiline .&lt;/code&gt; 打包后镜像大小为 441M。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;dockerfile&quot;&gt;&lt;code&gt;&lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;ubuntu&lt;/span&gt;&lt;span&gt;:focal&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; REDIS_VERSION=&lt;span&gt;6&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; REDIS_URL=http://download.redis.io/releases/redis-&lt;span&gt;$REDIS_VERSION&lt;/span&gt;.tar.gz&lt;br/&gt;&lt;br/&gt;# &lt;span&gt;update&lt;/span&gt; &lt;span&gt;source&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; tools&lt;br/&gt;RUN sed -i &lt;span&gt;&quot;s/archive.ubuntu.com/mirrors.aliyun.com/g; s/security.ubuntu.com/mirrors.aliyun.com/g&quot;&lt;/span&gt; /etc/apt/sources.&lt;span&gt;list&lt;/span&gt; &lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt; apt update &lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt; apt install -y curl make gcc&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# download source code and install redis&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt; curl -L &lt;span&gt;$REDIS_URL&lt;/span&gt; | tar xzv&lt;br/&gt;&lt;span&gt;WORKDIR&lt;/span&gt; redis-&lt;span&gt;$REDIS_VERSION&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt; make&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt; make install&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# clean up&lt;/span&gt;&lt;br/&gt;RUN rm  -rf &lt;span&gt;/var/lib/apt/lists/&lt;/span&gt;* &lt;br/&gt;&lt;br/&gt;&lt;span&gt;CMD&lt;/span&gt; [&lt;span&gt;&quot;redis-server&quot;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3&gt;RUN指令合并&lt;/h3&gt;&lt;p&gt;指令合并是最简单也是最方便的降低镜像层数的方式。该操作节省空间的原理是在同一层中清理“缓存”和工具软件。还是打包 redis 的需要，指令合并的&lt;span&gt;Dockerfile&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;如下，打包后的镜像大小为 292M。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;dockerfile&quot;&gt;&lt;code&gt;&lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;ubuntu&lt;/span&gt;&lt;span&gt;:focal&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; REDIS_VERSION=&lt;span&gt;6&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; REDIS_URL=http://download.redis.io/releases/redis-&lt;span&gt;$REDIS_VERSION&lt;/span&gt;.tar.gz&lt;br/&gt;&lt;br/&gt;# &lt;span&gt;update&lt;/span&gt; &lt;span&gt;source&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; tools&lt;br/&gt;RUN sed -i &lt;span&gt;&quot;s/archive.ubuntu.com/mirrors.aliyun.com/g; s/security.ubuntu.com/mirrors.aliyun.com/g&quot;&lt;/span&gt; /etc/apt/sources.&lt;span&gt;list&lt;/span&gt; &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;apt&lt;/span&gt; update &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;apt&lt;/span&gt; install -y curl make gcc &amp;amp;&amp;amp;\&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# download source code and install redis&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;curl&lt;/span&gt; -L &lt;span&gt;$REDIS_URL&lt;/span&gt; | tar xzv &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;cd&lt;/span&gt; redis-&lt;span&gt;$REDIS_VERSION&lt;/span&gt; &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;make&lt;/span&gt; &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;make&lt;/span&gt; install &amp;amp;&amp;amp;\&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# clean up&lt;/span&gt;&lt;br/&gt;    apt remove -y --&lt;span&gt;auto&lt;/span&gt;-remove curl make gcc &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;apt&lt;/span&gt; clean &amp;amp;&amp;amp;\&lt;br/&gt;    rm  -rf &lt;span&gt;/var/lib/apt/lists/&lt;/span&gt;* &lt;br/&gt;&lt;br/&gt;&lt;span&gt;CMD&lt;/span&gt; [&lt;span&gt;&quot;redis-server&quot;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;使用 &lt;code&gt;docker history &lt;/code&gt;分析 optimize/redis:multiline 和 optimize/redis:singleline 镜像，得到如下情况：&lt;img data-ratio=&quot;0.6377952755905512&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bDCibGAYVPCxbjV3DvkW6y2z9rEBuDUkySK0CKFsTot5zMh9M4Mynaic4eGlKPxLuvdXHBmx9QwxPdREb8eCTcag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1524&quot; title=&quot;null&quot;/&gt;分析上图发现，镜像 optimize/redis:multiline 中清理数据的几层并没有降低镜像的大小，这就是上面说的共享镜像层带来的问题。所以指令合并的方法是通过在同一层中将缓存和不用的工具软件清理掉，以达到减小镜像体积的目的。&lt;/p&gt;&lt;h3&gt;多阶段构建&lt;/h3&gt;&lt;p&gt;多阶段构建方法是官方打包镜像的最佳实践，它是将精简层数做到极致的方法。通俗点讲它是将打包镜像分成两个阶段，一个阶段用于开发，打包，该阶段包含构建应用程序所需的所有内容；一个用于生产运行，该阶段只包含你的应用程序以及运行它所需的内容。这被称为“建造者模式”。两个阶段的关系有点像JDK和JRE的关系。使用多阶段构建肯定会降低镜像大小，但是瘦身的粒度和编程语言有关系，对编译型语言效果比较好，因为它去掉了编译环境中多余的依赖，直接使用编译后的二进制文件或jar包。而对于解释型语言效果就不那么明显了。&lt;/p&gt;&lt;p&gt;依然还是上面打包 redis 镜像的需求，使用多阶段构建的 &lt;span&gt;Dockerfile&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;，打包后的进行大小为135M。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;dockerfile&quot;&gt;&lt;code&gt;&lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;ubuntu&lt;/span&gt;&lt;span&gt;:focal&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;build&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; REDIS_VERSION=&lt;span&gt;6&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; REDIS_URL=http://download.redis.io/releases/redis-&lt;span&gt;$REDIS_VERSION&lt;/span&gt;.tar.gz&lt;br/&gt;&lt;br/&gt;# &lt;span&gt;update&lt;/span&gt; &lt;span&gt;source&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; tools&lt;br/&gt;RUN sed -i &lt;span&gt;&quot;s/archive.ubuntu.com/mirrors.aliyun.com/g; s/security.ubuntu.com/mirrors.aliyun.com/g&quot;&lt;/span&gt; /etc/apt/sources.&lt;span&gt;list&lt;/span&gt; &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;apt&lt;/span&gt; update &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;apt&lt;/span&gt; install -y curl make gcc &amp;amp;&amp;amp;\&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# download source code and install redis&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;curl&lt;/span&gt; -L &lt;span&gt;$REDIS_URL&lt;/span&gt; | tar xzv &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;cd&lt;/span&gt; redis-&lt;span&gt;$REDIS_VERSION&lt;/span&gt; &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;make&lt;/span&gt; &amp;amp;&amp;amp;\&lt;br/&gt;    &lt;span&gt;make&lt;/span&gt; install&lt;br/&gt;&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;ubuntu&lt;/span&gt;&lt;span&gt;:focal&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# copy&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; REDIS_VERSION=&lt;span&gt;6&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;&lt;br/&gt;COPY --from=build /usr/&lt;span&gt;local&lt;/span&gt;/bin/redis* /usr/&lt;span&gt;local&lt;/span&gt;/bin/&lt;br/&gt;&lt;br/&gt;&lt;span&gt;CMD&lt;/span&gt; [&lt;span&gt;&quot;redis-server&quot;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;相比 optimize/redis:singleline 改动有以下三点：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;第一行多了As build, 为后面的COPY做准备&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;第一阶段中没有了清理操作，因为第一阶段构建的镜像只有编译的目标文件（二进制文件或jar包）有用，其它的都无用&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;第二阶段直接从第一阶段拷贝目标文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;同样的，使用 &lt;code&gt;docker history&lt;/code&gt; 查看镜像体积情况：&lt;img data-ratio=&quot;0.5051880674448768&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bDCibGAYVPCxbjV3DvkW6y2z9rEBuDUkyUZPmJPSyS2QyialtIrTYBibnd12ej2l6OmOBtkBj0iaggQFsmp5xYmRsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1542&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;比较我们使用多阶段构建的镜像和官方提供 redis:6（无法和 redis:6-alpine 相比，因为 redis:6 和 ubuntu:focal 都是基于 debain 的镜像），发现二者有 30M 的空间。研究 redis:6 的 &lt;span&gt;Dockerfile&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt; 发现如下&quot;骚操作&quot;:&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;serverMd5=&lt;span&gt;&quot;&lt;span&gt;$(md5sum /usr/local/bin/redis-server | cut -d&#x27; &#x27; -f1)&lt;/span&gt;&quot;&lt;/span&gt;; &lt;span&gt;export&lt;/span&gt; serverMd5; \&lt;br/&gt;find /usr/&lt;span&gt;local&lt;/span&gt;/bin/redis* -maxdepth 0 \&lt;br/&gt;        -type f -&lt;span&gt;not&lt;/span&gt; -name redis-server \&lt;br/&gt;        -&lt;span&gt;exec&lt;/span&gt; sh -eux -c &lt;span&gt;&#x27; \&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;md5&lt;/span&gt;=&lt;span&gt;&quot;$(md5sum &quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot; | cut -d&quot;&lt;/span&gt; &lt;span&gt;&quot; -f1)&quot;&lt;/span&gt;; \&lt;br/&gt;            &lt;span&gt;test&lt;/span&gt; &lt;span&gt;&quot;&lt;span&gt;$md5&lt;/span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;span&gt;$serverMd5&lt;/span&gt;&quot;&lt;/span&gt;; \&lt;br/&gt;        &lt;span&gt;&#x27; -- &#x27;&lt;/span&gt;{}&lt;span&gt;&#x27; &#x27;&lt;/span&gt;;&lt;span&gt;&#x27; \&lt;/span&gt;&lt;br/&gt;        -&lt;span&gt;exec&lt;/span&gt; ln -svfT &lt;span&gt;&#x27;redis-server&#x27;&lt;/span&gt; &lt;span&gt;&#x27;{}&#x27;&lt;/span&gt; &lt;span&gt;&#x27;;&#x27;&lt;/span&gt; \&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;编译 redis 的源码发现二进制文件 redis-server 和 redis-check-aof(aof持久化), redis-check-rdb（rdb持久化）, redis-sentinel（redis哨兵）是相同的文件，大小为 11M。官方镜像通过上面的脚本将后三个通过 ln 来生成。&lt;/p&gt;&lt;h3&gt;使用合适的基础镜像&lt;/h3&gt;&lt;p&gt;基础镜像，推荐使用 Alpine。Alpine 是一个高度精简又包含了基本工具的轻量级 Linux 发行版，基础镜像只有 4.41M，各开发语言和框架都有基于 Alpine 制作的基础镜像，强烈推荐使用它。进阶可以尝试使用scratch和busybox镜像进行基础镜像的构建。从官方镜像 redis:6（104M） 和 redis:6-alpine（31.5M） 就可以看出 alpine 的镜像只有基于debian镜像的 1/3。&lt;/p&gt;&lt;p&gt;使用 Alpine镜像有个注意点，就是它是基于 muslc的（glibc的替代标准库），这两个库实现了相同的内核接口。其中 glibc 更常见，速度更快，而 muslic 使用较少的空间，侧重于安全性。在编译应用程序时，大部分都是针对特定的 libc 进行编译的。如果我们要将它们与另一个 libc 一起使用，则必须重新编译它们。换句话说，基于 Alpine 基础镜像构建容器可能会导致非预期的行为，因为标准 C 库是不一样的。不过，这种情况比较难碰到，即使碰到也有&lt;span&gt;解决方法&lt;sup&gt;[7]&lt;/sup&gt;&lt;/span&gt;。&lt;/p&gt;&lt;h3&gt;删除RUN的缓存文件&lt;/h3&gt;&lt;p&gt;linux中大部分包管理软件都需要更新源，该操作会带来一些缓存文件，这里记录了常用的清理方法。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;基于debian的镜像&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span&gt;# 换国内源，并更新&lt;/span&gt;&lt;br/&gt;sed -i “s&lt;span&gt;/deb.debian.org/mirrors.aliyun.com/g&lt;/span&gt;” /etc/apt/sources.list &amp;amp;&amp;amp; apt update&lt;br/&gt;&lt;span&gt;# --no-install-recommends 很有用&lt;/span&gt;&lt;br/&gt;apt &lt;span&gt;install&lt;/span&gt; -y &lt;span&gt;--no-install-recommends a b c &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;   •&lt;/span&gt;alpine镜像&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span&gt;# 换国内源，并更新&lt;/span&gt;&lt;br/&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;&#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27;&lt;/span&gt; /etc/apk/repositories&lt;br/&gt;&lt;span&gt;# --no-cache 表示不缓存&lt;/span&gt;&lt;br/&gt;apk add --&lt;span&gt;no&lt;/span&gt;-cache a b c &amp;amp;&amp;amp; rm -rf &lt;span&gt;/var/cache/apk/&lt;/span&gt;*&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;  •&lt;/span&gt;centos镜像&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span&gt;# 换国内源并更新&lt;/span&gt;&lt;br/&gt;&lt;span&gt;curl&lt;/span&gt; -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo &amp;amp;&amp;amp; yum makecache&lt;br/&gt;yum &lt;span&gt;install&lt;/span&gt; -y a b &lt;span&gt;c&lt;/span&gt;  &amp;amp;&amp;amp; yum clean al&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Dockfile实践&lt;/h2&gt;&lt;h3&gt;最佳实践点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;编写.dockerignore文件&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;一个容器只运行单个应用&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;基础镜像和生产镜像的标签不要使用latest&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;设置WORKDIR和CMD&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;使用ENTRYPOINT，并用exec启动命令（可选）&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;相比ADD，优先使用COPY&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;设置默认的环境变量，映射端口和数据卷&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;使用LABEL设置镜像元数据&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;添加HEALTHCHECK&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;多阶段构建样例&lt;/h3&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;dockerfile&quot;&gt;&lt;code&gt;&lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;golang&lt;/span&gt;&lt;span&gt;:1.11-alpine&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;build&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 安装项目所需工具&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# Run `docker build --no-cache .` to update dependencies&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt; apk add --&lt;span&gt;no&lt;/span&gt;-cache git&lt;br/&gt;RUN go &lt;span&gt;get&lt;/span&gt; github.com/golang/dep/cmd/dep&lt;br/&gt;&lt;br/&gt;# 安装项目的依赖库（&lt;span&gt;GO&lt;/span&gt;使用 &lt;span&gt;Gopkg&lt;/span&gt;&lt;span&gt;.toml&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;Gopkg&lt;/span&gt;&lt;span&gt;.lock&lt;/span&gt;）&lt;br/&gt;&lt;span&gt;# These layers are only re-built when Gopkg files are updated&lt;/span&gt;&lt;br/&gt;COPY Gopkg.lock Gopkg.toml &lt;span&gt;/go/src/project/&lt;/span&gt;&lt;br/&gt;WORKDIR &lt;span&gt;/go/src/project/&lt;/span&gt;&lt;br/&gt;# &lt;span&gt;Install&lt;/span&gt; &lt;span&gt;library&lt;/span&gt; dependencies&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt; dep ensure -vendor-only&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 拷贝项目并进行构建&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# This layer is rebuilt when a file changes in the project directory&lt;/span&gt;&lt;br/&gt;COPY . &lt;span&gt;/go/src/project/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt; go build -o /bin/project&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 精简的生成环境&lt;/span&gt;&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; scratch&lt;br/&gt;COPY --&lt;span&gt;from&lt;/span&gt;=build /bin/project /bin/project&lt;br/&gt;&lt;span&gt;ENTRYPOINT&lt;/span&gt; [&lt;span&gt;&quot;/bin/project&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;CMD&lt;/span&gt; [&lt;span&gt;&quot;--help&quot;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;常见问题&lt;/h2&gt;&lt;h3&gt;alpine基础镜像使用&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;解决glic问题&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span&gt;ENV&lt;/span&gt; ALPINE_GLIBC_VERSION=&lt;span&gt;&quot;2.31-r0&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; LANG=C.UTF-&lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;RUN &lt;span&gt;set&lt;/span&gt; -x \&lt;br/&gt;    &amp;amp;&amp;amp; sed -i &lt;span&gt;&#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27;&lt;/span&gt; /etc/apk/repositories \&lt;br/&gt;    &amp;amp;&amp;amp; apk add --&lt;span&gt;no&lt;/span&gt;-cache wget \&lt;br/&gt;    &amp;amp;&amp;amp; wget -q -O &lt;span&gt;/etc/apk/keys/sgerrand.rsa.pub https:/&lt;/span&gt;/alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \&lt;br/&gt;    &amp;amp;&amp;amp; wget -O &lt;span&gt;https:&lt;/span&gt;/&lt;span&gt;/github.com/sgerrand&lt;/span&gt;&lt;span&gt;/alpine-pkg-glibc/releases&lt;/span&gt;&lt;span&gt;/download/&lt;/span&gt;$ALPINE_GLIBC_VERSION/glibc-$ALPINE_GLIBC_VERSION.apk \&lt;br/&gt;    &amp;amp;&amp;amp; wget -O &lt;span&gt;https:&lt;/span&gt;/&lt;span&gt;/github.com/sgerrand&lt;/span&gt;&lt;span&gt;/alpine-pkg-glibc/releases&lt;/span&gt;&lt;span&gt;/download/&lt;/span&gt;$ALPINE_GLIBC_VERSION/glibc-$ALPINE_GLIBC_VERSION.apk \&lt;br/&gt;    &amp;amp;&amp;amp; wget -O &lt;span&gt;https:&lt;/span&gt;/&lt;span&gt;/github.com/sgerrand&lt;/span&gt;&lt;span&gt;/alpine-pkg-glibc/releases&lt;/span&gt;&lt;span&gt;/download/&lt;/span&gt;$ALPINE_GLIBC_VERSION/glibc-bin-$ALPINE_GLIBC_VERSION.apk \&lt;br/&gt;    &amp;amp;&amp;amp; wget -O &lt;span&gt;https:&lt;/span&gt;/&lt;span&gt;/github.com/sgerrand&lt;/span&gt;&lt;span&gt;/alpine-pkg-glibc/releases&lt;/span&gt;&lt;span&gt;/download/&lt;/span&gt;$ALPINE_GLIBC_VERSION/glibc-i18n-$ALPINE_GLIBC_VERSION.apk \&lt;br/&gt;    &amp;amp;&amp;amp; apk add --&lt;span&gt;no&lt;/span&gt;-cache glibc-$ALPINE_GLIBC_VERSION.apk  \&lt;br/&gt;                    glibc-bin-&lt;span&gt;$ALPINE_GLIBC_VERSION&lt;/span&gt;.apk \&lt;br/&gt;                    glibc-i18n-&lt;span&gt;$ALPINE_GLIBC_VERSION&lt;/span&gt;.apk \&lt;br/&gt;    &amp;amp;&amp;amp; /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 &lt;span&gt;&quot;&lt;span&gt;$LANG&lt;/span&gt;&quot;&lt;/span&gt; || &lt;span&gt;true&lt;/span&gt; \&lt;br/&gt;    &amp;amp;&amp;amp; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;export LANG=&lt;span&gt;$LANG&lt;/span&gt;&quot;&lt;/span&gt; &amp;amp;gt; /etc/profile.d/locale.sh \&lt;br/&gt;    &amp;amp;&amp;amp; apk &lt;span&gt;del&lt;/span&gt; glibc-i18n \&lt;br/&gt;    &amp;amp;&amp;amp; rm glibc-&lt;span&gt;$ALPINE_GLIBC_VERSION&lt;/span&gt;.apk glibc-bin-&lt;span&gt;$ALPINE_GLIBC_VERSION&lt;/span&gt;.apk glibc-i18n-&lt;span&gt;$ALPINE_GLIBC_VERSION&lt;/span&gt;.apk&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;Dockerfile最佳实践&lt;sup&gt;[8]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;docker多阶段构建&lt;sup&gt;[9]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;&lt;span&gt;三个技巧，将 Docker 镜像体积减小 90%&lt;sup&gt;[10]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;&lt;span&gt;精简Docker镜像的五种通用方法&lt;sup&gt;[11]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;5.&lt;/span&gt;&lt;span&gt;优化Dockerfile最佳实践&lt;sup&gt;[12]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;6.&lt;/span&gt;&lt;span&gt;alpine3.12镜像&lt;sup&gt;[13]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; 官方的Dockerfile最佳实践: &lt;em&gt;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; alpine:3.12: &lt;em&gt;https://github.com/alpinelinux/docker-alpine/blob/90788e211ec6d5df183d79d6cb02e068b258d198/x86_64/Dockerfile&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; Dockerfile: &lt;em&gt;https://blog.haojunyu.com/atts/redis_multiline&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[4]&lt;/code&gt; Dockerfile: &lt;em&gt;https://blog.haojunyu.com/atts/redis_singleline&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; Dockerfile: &lt;em&gt;https://blog.haojunyu.com/atts/redis_multistage&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[6]&lt;/code&gt; Dockerfile: &lt;em&gt;https://blog.haojunyu.com/atts/redis_official_buster&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[7]&lt;/code&gt; 解决方法: &lt;em&gt;#alpine基础镜像使用&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[8]&lt;/code&gt; Dockerfile最佳实践: &lt;em&gt;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[9]&lt;/code&gt; docker多阶段构建: &lt;em&gt;https://docs.docker.com/develop/develop-images/multistage-build/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[10]&lt;/code&gt; 三个技巧，将 Docker 镜像体积减小 90%: &lt;em&gt;https://www.infoq.cn/article/3-simple-tricks-for-smaller-docker-images&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[11]&lt;/code&gt; 精简Docker镜像的五种通用方法: &lt;em&gt;https://zhuanlan.zhihu.com/p/42815689&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[12]&lt;/code&gt; 优化Dockerfile最佳实践: &lt;em&gt;https://blog.csdn.net/xyz_dream/article/details/89741751?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[13]&lt;/code&gt; alpine3.12镜像: &lt;em&gt;https://github.com/alpinelinux/docker-alpine/blob/90788e211ec6d5df183d79d6cb02e068b258d198/x86_64/Dockerfile&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5584e3d4a6d16695cd32e7f7eb811a54</guid>
<title>分布式任务调度系统之任务编排及工作流实现原理与 Golang 实践</title>
<link>https://toutiao.io/k/cpo3wsw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section&gt;&lt;strong&gt;&lt;span&gt;I.内容提要&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;定时调度系统（定时任务、定时执行）算是工作中经常依赖的中间件系统，简单使用操作系统的 crontab，或基于 Quartz，xxl-job 来搭建任务调度平台，行业有很多优秀的开源产品和中间件。&lt;/span&gt;&lt;span&gt;了解其工作和设计原理，有助于我们完善或定制一套适合公司业务场景的任务调度中间件，之前写了两篇文章介绍了调度负载均衡和定时延时任务的内容，可以参考。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;今天我们探讨另一话题，对调度任务的&lt;/span&gt;&lt;span&gt;&lt;strong&gt;依赖关系及编排&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;展开分析，实现一套&lt;/span&gt;&lt;span&gt;工作流&lt;/span&gt;&lt;span&gt;，来满足任务间的复杂依赖的场景。本章内容提要：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;任务调度依赖 &amp;amp; 工作流&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;图相关知识&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;golang 并发相关&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;II.任务调度依赖&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;什么是任务依赖？&lt;/span&gt;&lt;span&gt;比如 “&lt;span&gt;任务 a&lt;/span&gt;” 执行的前提是 “&lt;span&gt;任务 b&lt;/span&gt;” 先执行完成，“&lt;/span&gt;&lt;span&gt;任务b&lt;/span&gt;&lt;span&gt;” 又依赖于 “&lt;span&gt;任务 c&lt;/span&gt;” 先执行，那么就形成如下依赖关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.36123348017621143&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd942pyNZBeib49zhWia23HomyX4DKnia7gcxtnWmRTqeoJcvWraMaedicqYHWHTlRxAWq4TNg4E4ceSYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;227&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个还比较简单，如果复杂点的如下图所示，形成一个工作流，Azkaban 大数据调度器就实现了工作流模式调度依赖，这是一个典型的图应用案例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9347079037800687&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd942pyNZBeib49zhWia23HomyH4eha8y4M7qcSibzoHItySiaOuGFuJfDTOb7x33PyibcsLicUXWUicE7X8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;291&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;III.图数据结构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;提到图数据结构，大部分人既熟悉又陌生，因为大学基本都学过，但一般工作场景都不会用到，这里就先简单回顾一下图相关的知识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 graph&lt;/span&gt;&lt;span&gt; ，图中的元素称为&lt;/span&gt;&lt;span&gt;顶点 vertex&lt;/span&gt;&lt;span&gt;。图中任一顶点可以与其他顶点建立连线关系，叫做&lt;/span&gt;&lt;span&gt;边 edge&lt;/span&gt;&lt;span&gt;。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6433566433566433&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd942pyNZBeib49zhWia23HomySGNuj7RLF0X67qTiahibvNfTHjeR4xwgPsnv6yiaiceNvSNAS5tDAHMf8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;286&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面图叫 “&lt;span&gt;无向图&lt;/span&gt;”，如果边有 “方向” ，那么就是 “&lt;span&gt;有向图&lt;/span&gt;” 了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7426160337552743&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd942pyNZBeib49zhWia23Homy9ibSfyTMibocEMd8C6d41ebxsrQBPiaEziaWVrdX3RgiafDIqmRcE7Vpu4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;237&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;无向图中，顶点有几条边就叫几&lt;/span&gt;&lt;span&gt;度&lt;/span&gt;&lt;span&gt;；有向图中，顶点有&lt;span&gt;入度&lt;/span&gt;，表示有多少边指向此顶点，顶点的&lt;span&gt;出度&lt;/span&gt;表示该顶点有多少边指向 “&lt;span&gt;远方&lt;/span&gt;” 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图中 a 指向 b，b 指向 d，d 又指向 a， a、b、d 之间形成一个环，如果将顶点比作调度的任务，那么任务 a 完成必须依赖任务 b，任务 b 又依赖任务 d，任务 d 又依赖任务 a，那么最终肯定无法完成，因此调度问题使用的是&lt;span&gt;有向无环图 （DAG）&lt;/span&gt;，比如我们最早那张图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9347079037800687&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd942pyNZBeib49zhWia23HomyH4eha8y4M7qcSibzoHItySiaOuGFuJfDTOb7x33PyibcsLicUXWUicE7X8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;291&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;了解了图的基本概念，那么图结构如何用代码表示出来？这里涉及到图的两种存储方式：&lt;span&gt;邻接矩阵、邻接表&lt;/span&gt;。&lt;br/&gt;邻接矩阵底层为&lt;/span&gt;&lt;span&gt;二维数据&lt;/span&gt;&lt;span&gt;，如果有一条边顶点为 x 和 y，对无向图来说，对应的数据 Array[x][y] 和 Array[y][x] 标记为 1；对有向图 x-&amp;gt;y ，只将 Array[x][y] 标记为 1 即可，下图为使用邻接矩阵表示的无向图和有向图。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5584415584415584&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbdiburicibjibT7WQwoSPRB8hsLV0bsPerPsz8ZiaicYiaWPID2zzibqlicZCSPsdsibX0h9AialhiaQoqQbMT1S7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;385&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5792349726775956&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbdiburicibjibT7WQwoSPRB8hsLVyOvzyGtswic8zzF7pLWUiax1R4Xe0rr8tIJbbTZiaiay1Fic1zODjZ2ibIdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;366&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对于无向图来说，邻接矩阵沿着红色对角线两边是对称的，如果图的顶点连线比较少，这种叫&lt;/span&gt;&lt;span&gt;稀疏图&lt;/span&gt;&lt;span&gt;，将存储大量的 0 ，浪费存储空间，这时候可以选择使用邻接表表示，相对稀疏图的叫&lt;/span&gt;&lt;span&gt;稠密图&lt;/span&gt;&lt;span&gt;，使用邻接矩阵可以更好地查询连通性，其原理也是&lt;/span&gt;&lt;span&gt;用空间换时间&lt;/span&gt;&lt;span&gt;。下图为使用邻接表表示的无向图和有向图。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.29381443298969073&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbdiburicibjibT7WQwoSPRB8hsLV8dibSib5Jw57LEoic00ZTsHqpl04vaLMjsLOk0dAKAOrQwR560Z7bJ8fw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;776&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2793522267206478&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbdiburicibjibT7WQwoSPRB8hsLVWEiaNUWKN4RCn9fzIJNMAWkzUlib0C9C1Bx66XQgH7vIZPASAO4qD7eQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;741&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;最后说下图的遍历，和遍历树一样分为&lt;span&gt;广度优先 BFS&lt;/span&gt; 和 &lt;span&gt;深度优先 DFS&lt;/span&gt;，但图如果存在成环的情况，访问的节点要做记录，同时可用辅助队列存放待访问的邻接节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拓扑排序&lt;/span&gt;&lt;span&gt;，对有向无环图的顶点进行遍历，将所有顶点形成一个线性序列，可以用数组（切片）或链表存储，如下图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.30514096185737977&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbdiburicibjibT7WQwoSPRB8hsLVretA6EtVfsGpZLq1Idzia682icYA77gv6whvucKiaLILXrDbxqdWg5LJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;603&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;IV.golang 代码实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;回顾了图的相关知识，那么回到最开始的任务依赖工作流中，将每个任务看成图的顶点，任务 a 依赖 任务 b，使用一条有向线从 a 指向 b，最后将所有任务顶点连线形成一个图，这个图是一个有向无环图 DAG，对 DAG 进行拓扑排序，形成一个任务执行链表，反向执行即可解决依赖问题。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9347079037800687&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd942pyNZBeib49zhWia23HomyH4eha8y4M7qcSibzoHItySiaOuGFuJfDTOb7x33PyibcsLicUXWUicE7X8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;291&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;首先定义一个图结构体，这里使用邻接矩阵方式存储，图的顶点结构体存储 Key 和 Value 代表任务的相关执行信息。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; DAG &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Vertexs []*Vertex&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Vertex &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Key      &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Value    &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Parents  []*Vertex&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Children []*Vertex&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;为图添加顶点和添加边，这里是有向图，from 代表边的起始顶点， to 代表边的终止顶点。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(dag *DAG)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AddVertex&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(v *Vertex)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    dag.Vertexs = &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt;(dag.Vertexs, v)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(dag *DAG)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AddEdge&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(from, to *Vertex)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    from.Children = &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt;(from.Children, to) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    to.Parents = &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt;(to.Parents, from)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;建立 a - i 所有顶点，再对每个顶点&lt;span&gt;连线&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; dag = &amp;amp;DAG{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;va := &amp;amp;Vertex{Key: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;a&quot;&lt;/span&gt;, Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;vb := &amp;amp;Vertex{Key: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;b&quot;&lt;/span&gt;, Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;vc := &amp;amp;Vertex{Key: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;c&quot;&lt;/span&gt;, Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;3&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;vd := &amp;amp;Vertex{Key: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;d&quot;&lt;/span&gt;, Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;4&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ve := &amp;amp;Vertex{Key: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;e&quot;&lt;/span&gt;, Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;5&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;vf := &amp;amp;Vertex{Key: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;f&quot;&lt;/span&gt;, Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;6&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;vg := &amp;amp;Vertex{Key: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;g&quot;&lt;/span&gt;, Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;7&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;vh := &amp;amp;Vertex{Key: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;h&quot;&lt;/span&gt;, Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;8&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;vi := &amp;amp;Vertex{Key: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;i&quot;&lt;/span&gt;, Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;9&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(va, vb)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(va, vc)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(va, vd)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(vb, ve)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(vb, vh)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(vb, vf)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(vc, vf)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(vc, vg)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(vd, vg)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(vh, vi)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(ve, vi)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(vf, vi)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dag.AddEdge(vg, vi)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对该图进行广度优先遍历，通过引入队列来减少时间复杂度，遍历后生成一个包含所有顶点的 slice 。&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;104&quot; data-source-title=&quot;&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;选择起始节点入队列&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;节点出队列&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;2.1 &lt;span&gt;队列空了，说明遍历完毕返回&lt;br/&gt;&lt;/span&gt;&lt;span&gt;       2.2 已访问跳过，未访问顶点放入输出 slice 中&lt;/span&gt;&lt;/p&gt;&lt;section&gt;2.3 &lt;span&gt;将节点的所有未访问邻接节点 Children 放入队列&lt;/span&gt;&lt;/section&gt;&lt;p&gt;   3. 重复执行 2 &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;注意 slice 加入顺序，因为执行要从 i 到 a 的顺序，所以将每次遍历后的元素放到 slice 第一个位置。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BFS&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(root *Vertex)&lt;/span&gt; []*&lt;span class=&quot;code-snippet__title&quot;&gt;Vertex&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    q := queue.New()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    q.Add(root)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    visited := &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]*Vertex)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    all := &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;([]*Vertex, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; q.Length() &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        qSize := q.Length()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; qSize; i++ {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            currVert := q.Remove().(*Vertex)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; _, ok := visited[currVert.Key]; ok {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            visited[currVert.Key] = currVert&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            all = &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt;([]*Vertex{currVert}, all...)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, val := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; currVert.Children {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; _, ok := visited[val.Key]; !ok {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    q.Add(val) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; all&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;最后就是对所有任务进行执行，这里假定每个任务执行需要 5 秒，然后输出执行结果。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;doTasks&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(vertexs []*Vertex)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; vertexs {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        time.Sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.Printf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;do %v, result is %v \n&quot;&lt;/span&gt;, v.Key, v.Value)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.15841584158415842&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbdiburicibjibT7WQwoSPRB8hsLV1bYewIalo2KHGG38MIeKqtt9tAqpdOKdVkXZnu8FWlTpZcvgSaXyHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;606&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过执行测试用例，可以看到执行按上述生成的 slice 顺序，从左向右逐个执行，满足任务依赖关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8380281690140845&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd942pyNZBeib49zhWia23HomyT6x3jMPbGXA87pQkk2WwxX9YurE6GxXudStBsFMxz1ibic09Yv0r1VXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;284&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong/&gt;&lt;span&gt;但这里有个问题就是执行时间过长，因为每一个都是串行执行，9 个任务要执行 45 秒。那么并行不就解决了？但任务有依赖关系又如何并行呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5983772819472617&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd942pyNZBeib49zhWia23Homy8MJSRqbichf8rQFFyz1O7T6P9h1OXiaWSIicpyGibgothyDNdnYEafpXCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;493&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这个图即可一目了然明白了，&lt;span&gt;分层执行&lt;/span&gt;，上层任务依赖下层，但每一层的任务相互独立可以并发执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先在 BFS 遍历生成顶点的时候，需要生成双层切片：&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;42&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;[0] [] { i } &lt;/p&gt;&lt;p&gt;[1] [] { h, e, f, g } &lt;/p&gt;&lt;p&gt;[2] [] { b, c, d } &lt;/p&gt;&lt;p&gt;[3] [] { a }&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BFSNew&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(root *Vertex)&lt;/span&gt; [][]*&lt;span class=&quot;code-snippet__title&quot;&gt;Vertex&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    q := queue.New()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    q.Add(root)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    visited := &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]*Vertex)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    all := &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;([][]*Vertex, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; q.Length() &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        qSize := q.Length()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        tmp := &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;([]*Vertex, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; qSize; i++ {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            currVert := q.Remove().(*Vertex)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; _, ok := visited[currVert.Key]; ok {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            visited[currVert.Key] = currVert&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            tmp = &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt;(tmp, currVert)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, val := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; currVert.Children {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; _, ok := visited[val.Key]; !ok {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    q.Add(val) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        all = &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt;([][]*Vertex{tmp}, all...)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; all &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;同时执行时候按每一层并发执行。这里通过 sync.WaitGroup 保障并发同步等待&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, layer := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; all {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;------------------&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        doTasksNew(layer)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;doTasksNew&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(vertexs []*Vertex)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; vertexs {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        wg.Add(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(v *Vertex)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            time.Sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            fmt.Printf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;do %v, result is %v \n&quot;&lt;/span&gt;, v.Key, v.Value)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }(v) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    wg.Wait()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;上述代码注意，遍&lt;/span&gt;&lt;span&gt;历变量被并发调度必须进行&lt;/span&gt;&lt;span&gt;绑定&lt;/span&gt;，如果按下面这样写将会有问题。&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;52&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;for _, v := range vertexs {
 &lt;/p&gt;&lt;p&gt;  go func() {&lt;/p&gt;&lt;p&gt;          //...            &lt;/p&gt;&lt;p&gt;          fmt.Printf(v)
        &lt;/p&gt;&lt;p&gt;   }()&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;这是因为 for k, v := rang xx  语句中，每次循环变量 k 和 v 是重新赋值，并非生成新的变量，如果循环中启动协程并引用变量 k 和 v 很可能在循环结束时才开启协程执行，这时所有协程中的变量 k 和 v 都是同一个变量，输出内容也会完全相同。所以这里将 v 加入函数参数中，因为 go 函数都是值传递，会重新绑定到新的变量中。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;通过并发改造后，执行时间只有 20 秒了，大大提高了任务执行的效率。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8369829683698297&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd942pyNZBeib49zhWia23Homy39w7VooMoVRZ43aIgfKWO0JrdPia8B3O7IH3tFUWHicwZY6qCcfRtuDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;411&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过本章内容，我们实现了任务调度的工作流模式，&lt;span&gt;文章相关代码请关注公众号  &lt;strong&gt;&lt;span&gt;技术岁月&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;，发送关键字 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;任务编排&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;获取，欢迎大家点赞、分享、转发。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-type=&quot;png&quot; data-ratio=&quot;1&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd8xnrzVoibMJU5ANalBUqBzuW7mZnCWFhYC94LpYATpCpIU9nDJiaDvqcf3PzctAFK61PgxWic8S5Axg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>afce2883ab861a1b98284e2d19022ba7</guid>
<title>《HelloGitHub》第 58 期</title>
<link>https://toutiao.io/k/4f2rzse</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.42567567567567566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efvSCTD1HicQ3yfmDjWbbcZjRIxGFzx11QM50bdFCT5sdPJDApWk8XczA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;888&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HelloGitHub 分享 GitHub 上有趣、入门级的开源项目。欢迎大家：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本月刊是&lt;span&gt;每月 28 号&lt;/span&gt;更新，再见月刊就是年后了。HelloGitHub 提前祝大家：&lt;strong&gt;新年快乐！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面便是第 58 期的内容啦，希望大家喜欢~&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p&gt;C# 项目&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、EverythingToolbar：把搜索和启动应用等功能整合到 Windows taskbar 的工具。效果如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0025641025641026&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efZobh02MPo1Z6nasHgsJ0WN2ibgWplM2EcNfVMqGchXTVOks5xZW6plQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;780&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5619047619047619&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6ef0aTzJqEW6UbveBakSt0KpxoeB6Efe5yM1gshYrbrQ5qnN04vRy1e0g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;C++ 项目&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、ChordNova：一款开源免费的和弦生成工具。我不懂乐理，但单从这个软件的界面就感受到了专业，因为有很多乐理的名词😅&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6eft3S5ic7GB7deiaCx10La2XD9dGFO3xkeGXEP7mIzNec4zt47wgguyPyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5619047619047619&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efECe7boTS6DlmMcc7iayQGtvk7uZUnLQWdAML6slO1lA86HlyKqazMdg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Go 项目&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、containers-the-hard-way：用 Go 实现迷你 Docker，包含 Docker 核心功能的开源项目。该项目仅用 Linux 系统接口实现了类似容器的功能，这些能够帮助你更好地了解容器的工作方式。如果你想更深入地理解容器，就参考本项目写一个迷你 Docker 吧&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7017841971112999&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efkeFPS40ZSTlKPlwGgYtSCkGQFHfxDdMXKrE8Zr202U4JkH3yfrZRng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1177&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efTHI03EoaFwyXFe0g8OBVCGOd5dibcAgjgZ59Tz1c4R23L18Va7Zly0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、vegeta：基于 Go 语言的 HTTP 压测工具。目前市面上的压测工具已经很多了，但是今天推荐的这款惊艳到我点是下面这条命令执行后的效果（vegeta+jaggr+jplot），让我们一起来感受下吧&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&#x27;GET http://localhost:8080&#x27;&lt;/span&gt; | \&lt;br/&gt;    vegeta attack -rate 5000 -duration 10m | vegeta encode | \&lt;br/&gt;    jaggr @count=rps \&lt;br/&gt;          hist\[100,200,300,400,500\]:code \&lt;br/&gt;          p25,p50,p95:latency \&lt;br/&gt;          sum:bytes_in \&lt;br/&gt;          sum:bytes_out | \&lt;br/&gt;    jplot rps+code.hist.100+code.hist.200+code.hist.300+code.hist.400+code.hist.500 \&lt;br/&gt;          latency.p95+latency.p50+latency.p25 \&lt;br/&gt;          bytes_in.sum+bytes_out.sum&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6237623762376238&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efGW21NhwgBslugcgiaryqiblCibokic6CMwNWYsre7NKnM9mmItsZ7FYwbg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;2020&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6ef3575SJ8IlOl1x5sa6Abic3yFicxJsZqOx9t2oenZnnHpLYsWpINw6DBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、delve：一款 Go 语言的调试工具。如果你还在像我一样用 &lt;code&gt;fmt.Println&lt;/code&gt; 调试 go 的代码，就试试这个工具吧。万星的开源项目可不是开玩笑的，它上手简单并且支持多种方式调用，助你快速找到 Bug&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.28828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efiavG05OjH86ORq9orkgPRnatMmLF5FVfgAlykuCIUiatPt0rWQ2iaeDcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efLM2icEzBbmTricwTc5JHg9uyF6dLSX7orF9ToHN8Too59WficM2D9lZnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6、rqlite：用 Go 实现的基于 SQLite 轻量级、分布式关系数据库。如果你对分布式数据库的原理及实现感兴趣的话，这个项目真的是你入门这方面的不二之选，这个项目用 SQLite 作为存储引擎，让你可以把更多的精力放在理解分布式的知识上，尝试阅读下这个项目的文档，相信你会对它感兴趣的。设计图如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.717948717948718&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efxHibXAY8iaSiahbkKMibyD8JZC6iauqJVRBzokwdfpYLA4g4FDNCpLRyaog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1248&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efNwWzJEwyj5AYsPJm6HEj1S1aBiaSSrb1NicuxK6cB14sfF1bnyK82exA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Java 项目&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7、JustAuth：帮你搞定第三方登陆的 Java 开源组件。使用简单、接入方便，帮你随心所欲地接入第三方登陆，让登陆变得简单。目前已经支持十多个平台，还在持续扩充中&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.61796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efJ35DmqN2j9XNjp6Jkkdc5SfpXURe2P1qNCYXyMwMlZrYvdCY2c0xibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efiag6HQQB6NLHUwRVLLY4XSCCUSGOMK28CNYYoFCahS6ic01W6ttL0ctg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;8、java-design-patterns：设计模式 Java 的最佳实践，出自开源社区大佬们之手。作为有梦想和追求的 Java 程序员，当然需要会一些设计模式啦。这个项目虽然是英文的但是先看代码和图，尝试理解含义那么英文描述也就能猜得八九不离十了。不要让英语作为你不努力的借口，努力变强吧！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efcI5NnZEV2RhnhNjaWGsSfXj1nDPECK9HR1sDiclB9mWvMnATEJC4PDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;9、apollo：携程开源的分布式配置中心。开箱即用理念发挥到极致，比如：服务器部分基于 Spring Boot 和 Spring Cloud 开发，运行方便无需额外的 Tomcat 应用容器。并且具备配置修改后即时生效、规范的权限、流程治理等特性，适用于微服务配置管理场景&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.73359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6ef1D4m4aaS4ibkogRA5kBKibibzXe6fC5QgoSdNicYbfDldIgLJktHFUeaibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efl0y7x0zrCM1TWcWwN53RPfsHsibU6n6icmmYkpbkiahKaEZaZXg5HjzJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;10、Logi-KafkaManager：功能强大的 Kafka 集群监控和运维管理平台。强大到我一度以为它是付费的，如果你的公司用 Kafka 的话，可以试试主导把这个项目在公司内部用起来，那你离升职和加薪就不远了&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.571875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efgCtHQicKFCAm4v1bmpSdfmPQMJ0mjDAGCr2xCSAwHAvYqBu1icibqVWlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efoeaiarqVic5UCZxLHNj6o4pQFhsXr6lnrOI4MfJzhyOWCDtibFwEuB3BQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;11、Anki-Android：高效学习神器 Anki 安卓客户端。Anki 是一个帮助学习的记忆卡片软件，卡片正面是问题背面是答案，然后根据记忆公式帮你复习和记牢。下载地址 如果下载后不会用的话，本文点赞过 100 我出一份小白教程给大家上手这个神器&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.57890625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efxb8GRxEB90L5P2HVr7autcibgerwLrtn1VzGDXr8LpRYpKv9D0Op2bQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efLVicNWDP8GgTPqs78kYibYv4OyGxKicibrnV9NQMhXOZCia2OsKMay1rqpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;JavaScript 项目&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;12、cloudbase-framework：腾讯开源的云原生一体化部署工具。一键将项目部署上云，不限制框架和语言&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.48125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efm1VJiaiaeKJ2VnEbBCQLmtFQ8icxNvzgwfKamTXPrJWgWAsuXExcwUmSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efdMge7zXKRWibYTdK4oevcJugx5vmozCYx6HXLmTd10FrEZvFWxQ0Jzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;13、newbee-mall-vue3-app：基于 Vue 3.0 技术栈的电商网站前端开源项目。它麻雀虽小五脏俱全，包含模块：首页、类型分类、搜索、地址管理、登录注册等等，该有的基本上都有涉及到。对新手友好，在熟悉 Vue 3.x 的朋友也可以来看看&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.27109375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efojPxaUnQtKmaich9aCU88vIZViaIOicOzk5kVc83R9nD31GjrDmljicBFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efIsXO3LFyELakkNyuUfh8C9zFVu0ZETXECKXjwE2jXXHzS8zZodR0IA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;14、X6：AntV 旗下的图编辑引擎。提供了开箱即用的交互组件和简单易用的节点定制能力，从而能够快速完成流程图、DAG 图、ER 图等图应用。示例代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { Graph } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@antv/x6&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; graph = &lt;span&gt;new&lt;/span&gt; Graph({&lt;br/&gt;  &lt;span&gt;container&lt;/span&gt;: &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;container&#x27;&lt;/span&gt;),&lt;br/&gt;  &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;800&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;600&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;background&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;color&lt;/span&gt;: &lt;span&gt;&#x27;#fffbe6&#x27;&lt;/span&gt;, &lt;span&gt;// 设置画布背景颜色&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;grid&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;size&lt;/span&gt;: &lt;span&gt;10&lt;/span&gt;,      &lt;span&gt;// 网格大小 10px&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;visible&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;// 渲染网格背景&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efkdrNl20P01tL7f07OAeictWEH2hOkwjspibbhIWSeuMXvOtT6RGZLYHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efgZPzHghqJOb0wmBODUfjKoqABAk3b34dz1Bf7zmkQ4zkGIkmDs12sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;15、hearthstone-battlegrounds-tools：暴雪炉石传说游戏的记牌插件。不懂编程的小伙伴拿去用就好了，支持 Windows 和 macOS 系统。开发者的话，这是一整套完整的 Electronjs 开发流程，从多个渲染进程的管理、不同平台的差异化处理、版本的控制与发布等方面都做了细致的封装，学起来吧。功能上她还具有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;🌴 当天战绩统计，历史战绩查询&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;🎉 统计你所使用过的英雄，自动计算每个英雄的平均排名、选择率&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;🙈 选择英雄时展示可选英雄的大数据选择率、平均排名等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;🃏 对局信息记录，记录对局过的对手阵容&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;✈️ 一键拔线（可怕）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;等等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efytEeV8eibahGvsSAN4cdv39FcI1BrMyQkWFnUbdddicFiay7zoiakzYKOQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efKUylDcDGRMun81Zh8lzYUcp6C8Vmib37H47gAQw1bJDGMj0VVyfnGvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;16、Multiavatar：生成人物头像的 JS 库。支持随机生成一个好看、独特、多文化的头像&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5476477683956574&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efA9FSujpbDiafnSvDXt1fBzGicv5fMd8vhjzSTUGh7E4CZCIZbzRDdfXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;829&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efvKSLT0Vnso1MuQmRRx6coIx3ckWF0YiabNqYfib8VFmiaScDDRU6pRpXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;PHP 项目&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;17、mochat：一套开源的企业微信开发框架和管理系统。基于 PHP 开发的前后端分离、功能强大的企业微信管理平台&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.28203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efwIyNFeZTDlAiahWQkjVuqkjKGyvx9y4zxRzlZ7KSfF7lunrUlBSAxZA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efu8dNs7KHXB9PWFFyCBjRicH13tC6cAmwu4XWtfpfoDibnaJPVAfGGvpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;18、easy-sms：短信发送 PHP 组件。特点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持目前市面多家服务商&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一套写法兼容所有平台&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;简单配置即可灵活增减服务商&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内置多种服务商轮询策略、支持自定义轮询策略&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;等等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Overtrue&lt;/span&gt;\&lt;span&gt;EasySms&lt;/span&gt;\&lt;span&gt;EasySms&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;$config = [&lt;br/&gt;    &lt;span&gt;// HTTP 请求的超时时间（秒）&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&#x27;timeout&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;5.0&lt;/span&gt;,&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 默认发送配置&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&#x27;default&#x27;&lt;/span&gt; =&amp;gt; [&lt;br/&gt;        &lt;span&gt;// 网关调用策略，默认：顺序调用&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&#x27;strategy&#x27;&lt;/span&gt; =&amp;gt; \Overtrue\EasySms\Strategies\OrderStrategy::class,&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 默认可用的发送网关&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&#x27;gateways&#x27;&lt;/span&gt; =&amp;gt; [&lt;br/&gt;            &lt;span&gt;&#x27;yunpian&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;aliyun&#x27;&lt;/span&gt;,&lt;br/&gt;        ],&lt;br/&gt;    ],&lt;br/&gt;    &lt;span&gt;// 可用的网关配置&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&#x27;gateways&#x27;&lt;/span&gt; =&amp;gt; [&lt;br/&gt;        &lt;span&gt;&#x27;errorlog&#x27;&lt;/span&gt; =&amp;gt; [&lt;br/&gt;            &lt;span&gt;&#x27;file&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;/tmp/easy-sms.log&#x27;&lt;/span&gt;,&lt;br/&gt;        ],&lt;br/&gt;        &lt;span&gt;&#x27;yunpian&#x27;&lt;/span&gt; =&amp;gt; [&lt;br/&gt;            &lt;span&gt;&#x27;api_key&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;824f0ff2f71cab52936axxxxxxxxxx&#x27;&lt;/span&gt;,&lt;br/&gt;        ],&lt;br/&gt;        &lt;span&gt;&#x27;aliyun&#x27;&lt;/span&gt; =&amp;gt; [&lt;br/&gt;            &lt;span&gt;&#x27;access_key_id&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&#x27;access_key_secret&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&#x27;sign_name&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;        ],&lt;br/&gt;        &lt;span&gt;//...&lt;/span&gt;&lt;br/&gt;    ],&lt;br/&gt;];&lt;br/&gt;&lt;br/&gt;$easySms = &lt;span&gt;new&lt;/span&gt; EasySms($config);&lt;br/&gt;&lt;br/&gt;$easySms-&amp;gt;send(&lt;span&gt;13188888888&lt;/span&gt;, [&lt;br/&gt;    &lt;span&gt;&#x27;content&#x27;&lt;/span&gt;  =&amp;gt; &lt;span&gt;&#x27;您的验证码为: 6379&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;template&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;SMS_001&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;data&#x27;&lt;/span&gt; =&amp;gt; [&lt;br/&gt;        &lt;span&gt;&#x27;code&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;6379&lt;/span&gt;&lt;br/&gt;    ],&lt;br/&gt;]);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efR4RMumDuRkzeS7FMJWiccaub9QgzUjmnlogVpqlG7VFXxVJN2tVhK6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Python 项目&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;19、Zappa：Python 无服务框架，功能即服务（serverless）。你知道 serverless 是什么吗？不懂的老铁扣 1 🤝 我摊牌了我不懂这个玩意儿。直到我看到了 Zappa 这个项目，然后我的脑海里就几个字：甩手掌柜。用它开发完功能，几个命令打包上传到云服务平台，然后就不用管啦！不仅程序员喜欢它，老板也喜欢因为能够降低服务器成本（省钱）。来感受下“知识”的力量吧&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5444444444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6ef96RE20QTGAMN7j3vRQ2nbMwzJLibG1wGyTQPCXpfFAPw3yFzafY3qow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efqaWe3DWX92z4BMbxqwIEfyqUwDLWrTHqzibSibgwY0M6Uemer9GMJZ5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;20、streamlit：能够快速地把数据制作成可视化、交互页面的 Python 框架。分分钟让你的数据变成图表，并且该项目提供免费的共享服务平台帮你的项目上线，方便数据的共享和讨论&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efyL1NVmzzXicNH1ShKRezO79xqrNh2ZMdiaibSRFl24NEK5I9RRtbXX4Qw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1920&quot;/&gt;&lt;/figure&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6ef9sJ8TicnW2iaGKiaNSxtq3Q2MHjhicBFDUDiaZWicvQZYnKTyPWvNBEGQl7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;21、lastversion：帮你找到库或者软件最新版本的 Python 工具。它可以避开不同项目作者使用的不同风格的版本号，获取一个项目的最新版本号，下载或安装它们。本项目可用于 build system，比如自动更新脚本。支持从这些网站搜索：GitHub、GitLab、PyPI 等，确保版本最新和稳定&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 获取最新的 Linux 版本号和最新的 Wordpress 版本号&lt;/span&gt;&lt;br/&gt;lastversion linux&lt;br/&gt;&lt;span&gt;# 作者的版本标签：v5.10&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 本项目提供的版本标签：5.10&lt;/span&gt;&lt;br/&gt;lastversion wordpress&lt;br/&gt;&lt;span&gt;# 作者的版本标签：5.6&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 本项目提供的版本标签：5.6&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.23582766439909297&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efiaEI6KianG7SEH1tG0PwNK8EWMwiaxp3vT29UUwzEul6vUg76uSgbfGbQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1323&quot;/&gt;&lt;/figure&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6eftXdgC3KwmnRzXPDrm8ugGj3g6RYzh5k17CkLzKxxZVMqknicfShTsNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;22、xonsh：支持 Python 赋能的 shell。如果你不会编写 shell 脚本，但是会 Python。那通过这个项目可以让你混用 shell 命令和 Python 语法，高效快速地完成你想要的功能&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6283687943262412&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6ef1qpIyXHeLb1rg6L14JfLHvCzKIK7mJ2WmxsxibHoV5Oxohp08uxntvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1410&quot;/&gt;&lt;/figure&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efr04t5ZtVJk8icIy36B2MpC3JzUJzibIicBKAIdGib75OT5eKjraHcAGQDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Ruby 项目&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;23、spree：基于 Ruby on Rails 实现的大而全的电子商城开源项目。功能齐全项目结构清晰：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;spree_api：REST API 接口&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spree_frontend：移动优先，可自定义的店面&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spree_backend：功能丰富的管理面板&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spree_cmd：开发人员的命令行工具&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spree_core：数据层、服务和邮件、基本组件&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efD7KHl5fjtnqe9uNYVfjaib7nUhUM7n1IbyeAWqcwcVLaQrIHmld8yMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efp7oyy4hLMiamlwS2sqzy9N8JxIoKIONlmD0oWuj7wLKtC9y57AQ3eEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;span/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Swift 项目&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;24、mas：Mac App Store 命令行版&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.30666666666666664&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efOgAXxjHOM6Yw4CWlXia2WkuRTBo50vjDKRjibzpibGw4CuHfZwbEF0Nfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6eff0HSFMZ1l30gU8ia2D4iaeiad2oGs7CGb5YlkAn9gibfuSy0xoR0Uk4wXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;25、Moya：基于 Alamofire 的轻量级 Swift 网络层框架。它提供了网络抽象层，使用起来足够简单，能够方便地与 RXSwift、PromiseKit、ObjectMapper 结合，轻松地应对常见的开发任务。同时也非常全面，应对复杂任务也同样容易。最后 Moya 有一个很棒的社区，贡献者们提供了很多实用的扩展&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;provider = &lt;span&gt;MoyaProvider&lt;/span&gt;&amp;lt;&lt;span&gt;GitHub&lt;/span&gt;&amp;gt;()&lt;br/&gt;provider.request(.zen) { result &lt;span&gt;in&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; result {&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; .success(moyaResponse):&lt;br/&gt;        &lt;span&gt;let&lt;/span&gt; data = moyaResponse.data&lt;br/&gt;        &lt;span&gt;let&lt;/span&gt; statusCode = moyaResponse.statusCode&lt;br/&gt;        &lt;span&gt;// do something with the response data or statusCode&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; .failure(error):&lt;br/&gt;        &lt;span&gt;// this means there was a network failure - either the request&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// wasn&#x27;t sent (connectivity), or no response was received (server&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// timed out).  If the server responds with a 4xx or 5xx error, that&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// will be sent as a &quot;.success&quot;-ful response.&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7635869565217391&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efzMkbrmckgKpfyecsYIcHL3H5e2ddJmUoKrSQ2BmOshsDdu0ygpaVFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1472&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efArSyvMtOhjuKInlHSFicHA6ia8o53ict3J268icnXxSCibLSXbRElA8zmkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;26、MTMR：自定义 TouchBar 的应用。你问我体验如何？我没钱买带 TouchBar 的电脑啊，你装上我看看就行了&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3869582194455291&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efYwrNnEUfBiavUNfmv9syshJvQFIYEU5XFbhia1abStblYuHwUFzQvSWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2561&quot;/&gt;&lt;/figure&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6eftibU3m3nkBaWeKicNSfTNKp8IiavVdicSibdSBzCS7CNjpIPZE6JFrLrh9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;其它&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;27、game-programmer：游戏程序员的学习路径图。一位游戏开发大神开源的项目，希望能够帮助向往游戏开发的你 or 你的孩子，走上游戏开发这条“不归路”&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4895977808599168&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efyp015Gcny1xoYY4JJ03xUYs45ePaQNeRGjxZs2Ck5sibLed8icRoopkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1442&quot;/&gt;&lt;/figure&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efPUw6niaziaWCbY9puYtK8W0rgX5PCUwayEKw2WCiaEhTib5R2KSE22sTpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;28、theia：Eclipse 开源的 IDE 工具。我岁数大了，用惯了一个 IDE 就不想换了，喜欢尝鲜的小伙伴可以去把玩一下。看介绍像是一个拥抱开源，与 VS Code 功能相近的开发工具&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7073825503355705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efo849icvGhiaicFXYib1wibgsbu5O2lOajrrx3GOiascOGQh2kJcAL4X7yOGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2980&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efJzIyHhr3wgkOCN3CLeXXtmT3LXiabI2saaYgaLqjE3BkFmub3KzsTEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;29、luarocks：Lua 包管理工具。支持三大平台，安装和使用如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ wget https://luarocks.org/releases/luarocks-3.5.0.tar.gz&lt;br/&gt;$ tar zxpf luarocks-3.5.0.tar.gz&lt;br/&gt;$ &lt;span&gt;cd&lt;/span&gt; luarocks-3.5.0&lt;br/&gt;$ ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install&lt;br/&gt;$ sudo luarocks install luasocket&lt;br/&gt;$ lua&lt;br/&gt;Lua 5.3.5 Copyright (C) 1994-2018 Lua.org, PUC-Rio&lt;br/&gt;&amp;gt; require &lt;span&gt;&quot;socket&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efN7BpUT4aB2Spl1EJJ87zkTMybXnxe5vUuRusCxN2icKNsNIlOLwwUFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;30、Ad-papers：计算广告相关论文、学习资料和业界分享集合&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efKga6LVoNDjDHaKujHJzV4uJEm2sFwfXOY9ZPrzzFyFrRuS58YwC28w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;31、awesome-seo：有关 Google SEO 和流量变现资料的项目。该项目是作者学习 SEO 过程中整理的权威资料，推荐给有个人网站的小伙伴们&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6eflobgYPnhGeHBpcg9YdniaiarQibc0ylLzYCQUVzyOHYzhap9LQgNOyX2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efKB7PMy6n4A518LwJTNufRX4WTSSsAAaO5kbIRrpiad3t3R5bzPZfPCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;32、makeaplan_public：使用 Flutter 和 Go 开发的「制定计划 APP」。帮助用户记录和追踪自己的计划，辅助用户完成自己的目标。手机端用的是 Flutter 后端用 Go 实现，服务器和客户端通过 ProtoBuffer+grpc 进行通信。可作为学习 Flutter 和 Go 的实战项目&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3471563981042654&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efozwrhI5r41utPDibrMYibaOdKVtQQfKOfHOnLkVvJs5tHpwn2E6VAU9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1688&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efCH81eGpEiael4u9qUF4O1h1yyElAsgQ4NvgRhCEicuicagHzI1X3lHx7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;33、free-font：免费可商用的字体集合。这个项目收录的都是免费可商用的字体，并且仔细地标记出了商用时是否需要获取授权等细节&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efxZXxD0WmvkupbgBsApNpYG0a3hswWU8z5TnYlY3tiby1ibos5TBEIo8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;开源书籍&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;34、DeepLearning-500-questions：《深度学习 500 问》AI 工程师面试知识点的书籍。内容涵盖深度学习的知识点及各大公司常见的笔试题&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6eficADm7ZwpTHQKMlzUmeDNwTAX3XCic6zNicHpSsooKuc1puSUrwS18mXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;机器学习&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;35、nanodet：移动端的轻量级 Anchor-Free 目标检测模型。具有体积小（1.8 MB）、速度快（10.23 ms）、便于训练（硬件要求低）、部署简单（安卓示例）等优点&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.18623962040332148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efaicPTOctGvzCCPMyGaSMqngYdE1gGrhSWm109MEMhbSBIKB5MnPORLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1686&quot;/&gt;&lt;/figure&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efcciaoffZnOIYibPvz4Y1aia9LRwwIsZgP8w11LepD5cFSVEyPJnQhtbaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;长按识别二维码，可直达项目&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;36、DeepMoji：通过深度学习把自然语言转化成 emoji 表情的项目。用机器学习来了解文字表达的情感，最后返回几个感情相近的 emoji 表情。该项目有趣且易于学习，包含机器学习项目该有的所有内容：示例、模型、数据、测试、源码等&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.49635036496350365&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6efSfmPEOmLXougFuFkAZnSekVPqicN40oYFpHYL93FMbr7lt2f6328JfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;685&quot;/&gt;&lt;/figure&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOofwib9ytc5NXib5BLibNh6ef2iaEaa0wibckPTSzTVzqJJ955wXIZAicDxmJu02xIY9CSicV3w0s2Cm7Dg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6b0241622c8dd3496a849a0f3a08058d</guid>
<title>来了解一下 K8S 的 Operator 模式</title>
<link>https://toutiao.io/k/rdqdv6v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面的文章介绍了 Kubernetes 自带的管理有状态应用的控制器 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247486737&amp;amp;idx=1&amp;amp;sn=e7d0689fa74b108bae734515837c68e1&amp;amp;chksm=fa80dc86cdf755909f2f29ee8cb9dce930b95a837cb045be5c9700a9000743c9cb7f8eed6731&amp;amp;token=480855145&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;StatefulSet&lt;/a&gt; ，它能够完成应用的拓扑顺序状态管理 （比如，重启时按照顺序重建 Pod）以及结合 PVC 完成应用的存储状态管理。不过在 Kubernetes 生态中还有一种更灵活、编程友好的解决方案 -- Operator， 它能让使用者根据自己应用的特性定义应用对象和管理对象的控制器。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;53&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;这篇文章都是一些概念性的文字描述，阅读起来比较轻松，后面会再专门写怎么编码自己实现一个Operator。&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么是Operator&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Operator 概念是由 CoreOS 的工程师于2016年提出的，它让工程师可以根据应用独有的领域逻辑为应用编写自定义的控制器。这句话说的有点虚空，我们通过一个简单的例子理解一下 Operator 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设有一个连接数据库的 Java Web程序。你想将其部署到您的k8s集群。理想情况下，你会希望用 Deployment 部署应用然后暴露给 Service，对于应用服务的后端则是使用 StatuflSet 部署数据库。所以需要完成两部分的部署才能把整个应用服务部署完成：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;无状态部分：Java Web 应用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有状态部分：数据库。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上面的例子中，我们可以应用我们对应用程序与数据库之间的关系的了解，创建一个控制器，该控制器将以某种特定方式运行时执行某些操作。比如备份、更新、数据还原这些任务该如何完成取决于应用程序本身和业务限制（领域知识）。这些与应用强相关的操作就是 Kubernetes Operator要做的：代替原本需要由SRE（Site Reliability Engineers）和运维工程师来完成操作的执行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;自定义资源和控制器&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Operator 模型基于 Kubernetes 中的两个概念结合而成：自定义资源和自定义控制器。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;自定义资源&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Kubernetes中，资源是 Kubernetes API中的一个端点，用于存储一堆特定类型的API对象。它允许我们通过向集群添加更多种类的对象来扩展Kubernetes。添加新种类的对象之后，我们可以像其他任何内置对象一样，使用 kubectl 来访问我们自定义的 API 对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以 Pod 或 Deployment 为例。编写清单时，必须在 YAML 文件中指定一种类型（是 Pod 还是 Deployment）。自定义资源就是不由 Kubernetes 原生提供的资源对象。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;自定义控制器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kubernetes 的所有控制器，都有一个控制循环，负责监控集群中特定资源的更改，并确保特定资源在集群里的当前状态与控制器自身定义的期望状态保持一致。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举例来说有一个 Deployment 控制器管控值集群里的一组 Pod ，当你 Kill 掉一个 Pod 。控制器发现定义中期望的Pod数量与当前的数量不匹配，它就会马上创建一个 Pod 让当前状态与期望状态匹配。控制器这种让关联资源的当前状态向期望状态迈进的过程叫做调谐（reconcile）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5295629820051414&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f5CZyzIGHmNkU4wLRquicGNmMGBbO5ibdXWdLBovicWmLz765FG9YPliaWYr5fibT8HagkOIMtMssWzyCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;778&quot;/&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，像 Deployment 这样的内置控制器也叫做 Operator 吗？其实不是，因为这些控制器不是特定于特定的应用程序的，而是内置类型资源的上游控制器。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么时候应该用 Operator&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重要的是要知道所有的 Operator 都是控制器，但并非所有的控制器都是 Operator。对于被视作 Operator 的控制器，它必须知道应用程序的业务逻辑，才能代表用户（SRE / Ops工程师）执行自动化任务。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;当需要封装有状态的应用程序业务逻辑（使用Kubernetes API控制所有内容）时，都可以使用 Operator 。这使围绕 Kubernetes 生态系统内置的应用程序的自动化成为可能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每当需要创建工具来监视应用程序的更改并在发生某些事情时执行某些SRE / Ops任务时，都应使用 Operator。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关于 Operator 的使用建议&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;K8S内置控制器用于群集本身，而 Operator 是用于部署有状态应用程序的控制器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建 Operator 时，请遵循以下最佳模式实践：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;要站在巨人的肩膀上--利用内置资源种类在它们的基础上创建你自定义的资源种类。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;确保控制器不需要其他外部代码即可正常工作，只需运行kubectl install即可部署你定义的控制器。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你准备好为特定应用程序创建自定义资源，该资源可以与自定义控制器进行协调，从而可以扩展 Kubernetes 的正常行为时，就是时候开始使用 Operator了。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;点在看支持我的创作&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>07457c91619c4955158eae54e001331f</guid>
<title>Go 优雅追踪堆栈错误包</title>
<link>https://toutiao.io/k/5r0gx7i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;&lt;code&gt;&lt;span class=&quot;lnt&quot;&gt; 1
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 2
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 3
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 4
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 5
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 6
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 7
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 8
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 9
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;10
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;11
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;12
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;13
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;14
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;file:1.how_test.go, line:13, func:foo
file:1.how_test.go, line:18, func:TestFoo.func1
file:discovery.go, line:80, func:parseAction.func1
file:context.go, line:261, func:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;*context&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.conveyInner
file:context.go, line:110, func:rootConvey.func1
file:context.go, line:97, func:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;*ContextManager&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.SetValues.func1
file:gid.go, line:24, func:EnsureGoroutineId.func1
file:stack_tags.go, line:108, func:_m
file:stack_tags.go, line:56, func:github_com_jtolds_gls_markS
file:stack_tags.go, line:49, func:addStackTag
file:gid.go, line:24, func:EnsureGoroutineId
file:context.go, line:63, func:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;*ContextManager&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.SetValues
file:context.go, line:105, func:rootConvey
file:doc.go, line:75, func:Convey
file:1.how_test.go, line:17, func:TestFoo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>