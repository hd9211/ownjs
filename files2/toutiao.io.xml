<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ecaa187a114f6fd99e6851bcd31c79a9</guid>
<title>有了这款运维自动化神器，可以抛弃 Ansible 了</title>
<link>https://toutiao.io/k/d139zzl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;span&gt;△点击上方“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;Python猫&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”关注 ，回复“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”领取电子书&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5820568927789934&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LLRiaS9YfFTOMxUibn1y4x16tmFKvia0O6Wm3aSVibvTT02x5NKGQxmPV1ezLcOluTz5iavAQ44BvibFxichCAlZTqEicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;文末赠书&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作者：九净&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来源：NetDevOps加油站&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天开始一个新的大坑，绝对是巨坑了，给大家安利一款网络运维自动化工具Nornir（北欧神话里的命运女神三姐妹的名字）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提起运维自动化的工具，扛把子目前还是ansible。究其原因还是高度的封装，良好的生态，基于这两个大杀器，简单写个yaml文件就可以编排出一个符合我们预期的自动化场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，看过我文章的小伙伴都知道，我对ansible是爱恨交加，大爱无言，就此掠过，我就说说“恨”：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;国产网络设备的适配之路，难于上青天，说多了都是泪，国产的除了华为官方支持，其他的我真是见不到了。基于ssh采集设备信息时没大问题，但是配置起来，那就是几乎不敢用，因为网络配置回显提示不断在变化，low level的调用，无法加以分情况的判断。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;性能问题，逻辑设计过于复杂，层层的调用等各种原因导致其性能不佳，主要体现在并发不行，执行效率略低，大家对之诟病不少。如果网络设备多点，就得多弄几台服务器了。也有人提出ansible可以调优，但是对于大多数用户来说，过于复杂。性能问题也主要针对一个中大型的网络环境，其实几台设备，无所谓效率，for循环就可以了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它想简化或者弱化编程语言的内容，倡导低代码开发，但是在一些复杂场景，个人觉得适得其反，循环判断等的使用，让人感觉犬牙交错，不如if else while for等简单快捷易读。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ansible是基于Python开发的，我感觉是有点矛盾的，有时候刻意的弱化Python，某些情况下debug及其麻烦，如果能用pycharm debug一个脚本该多好；有时候又宣称是Python开发的，可以二次开发，自己写一些module，但是这个过程又是debug麻烦，且封装的过于高深，用户自己开发的时候，我觉得门槛过高。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不一一列举了，再写，这篇文章又偏了，可以改成细数ansible在略微复杂的网络中运维自动化的N种罪状。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Nornir简介&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回归主题，介于以上种种，作为一个懂点Python的网络工程师，我们有没有一个更好的工具呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是有的，开题就告诉了大家，我们今天的主角闪亮登场——Nornir！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Nornir是一个用python编写的自动化框架，主要是针对网络运维自动化，只要你懂一点点Python，就可以非常方便的使用nornir了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于Nornir允许用户使用纯Python代码，所以我们可以使用与其他Python代码相同的方法对其进行故障排除和调试，这就解决了那些低代码的自动化工具的调试和排障困难的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Nornir自比是自动化界的Flask，侧面反映它的强大与灵活。（笔者是一个django的死忠粉，手动狗头）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;flask是一个Python的web开发框架，flask没有限制过多的接口，所以用户可以基于恰到好处的接口，基于自己的方式构建一个功能强大的web网站。nornir也是同样的事情，它无外乎实现了几种核心的功能，比如管理好资产、变量，内置一些与设备的常见的连接方式，自动关联并批量执行、支持插件这些自动化框架最基本的功能，你可以写自己的各种插件，实现任何你想实现的功能，而且是基于Python的，想想就让人很兴奋，再也不用去看那些过于复杂的playbook或者类似的配置文件了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说了这么多，我们来看看nornir的runbook长什么样子吧。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; nornir &lt;span&gt;import&lt;/span&gt; InitNornir&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; nornir_utils.plugins.functions &lt;span&gt;import&lt;/span&gt; print_result&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; nornir_napalm.plugins.tasks &lt;span&gt;import&lt;/span&gt; napalm_get&lt;br/&gt;&lt;br/&gt;nr = InitNornir(&lt;br/&gt;    config_file=&lt;span&gt;&quot;nornir.yaml&quot;&lt;/span&gt;, dry_run=&lt;span&gt;True&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;results = nr.run(&lt;br/&gt;    task=napalm_get, getters=[&lt;span&gt;&quot;facts&quot;&lt;/span&gt;, &lt;span&gt;&quot;interfaces&quot;&lt;/span&gt;]&lt;br/&gt;)&lt;br/&gt;print_result(results)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上是一个简单的官方示例，通过一个官方的内置插件nornir_napalm（其实需要单独安装，并不在本体里），集成了napalm（这又是一个我要吐槽的工具包，功能甚少，缺乏高层构建，改天再写写文章）。通过napalm获取了端口和基本的fact信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从代码上来看，清晰易读，加载了nornir的yaml配置文件，获取设备的清单及其他变量分组等等，然后全部设备批量执行信息获取，输出结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个代码，核心逻辑实际只有1行，获取信息，比ansible的，我觉得要简单好多，对于一个稍微懂点Python的网工而言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于绝大多数的使用，nornir不需要用户知道过多的python知识，什么并发、异步、写log、回调，统统都走开，你只需要会最基本的Python技能即可，知晓基本的&lt;strong&gt;数据类型、定义变量、循环、判断、函数的定义与使用&lt;/strong&gt;，基本就足够了。Noinir也是这样主张的，Python其实是一门易上手的语言，但是任务编程语言的精通都是需要时间和精力的。但是幸运的是，作为网络工程师，我们只是想写一些脚本，实现自动化，并不是要成为一位master。所以Nornir认为我们掌握基本的Python知识即可。（对于绝大多数网络运维工程师，我觉得这个是适用的，有意精通此道的，仍需不断努力精进）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说实话，作为一名NetDevOps工程师，多进程、多线程、协程等等这些我在日常中几乎没有使用过，包括我也从来没写过这方面的内容，因为我认为这块对于一个网络运维工程师来说，过于深奥，使用起来坑很多，其实是过于简单的使用并发推配置，我都是坚决反对的，无知者无畏，对于生产中的网络配置，我从来都是怀揣着一颗敬畏之心。我也推荐大家使用一些自动化框架或者其他工具实现并发，同时如果是推送配置，一定要慎重，可以的话尽量设计的是有检查机制或者可以终止的，防止手抖了后没有后悔的机会，不行连并发都别用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Nornir的安装、版本及插件说明&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方是建议大家使用虚拟环境安装的，我也建议大家使用虚拟环境安装，因为它里面的很多版本管理的比较精细，不建议放到我们的系统或者自己常用的Python环境中去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它支持3.6.2及以上的Python版本，这点我表示很赞，就不该给python2活路，赶紧演进。我建议大家使用3.7、3.8的版本。之前也讲过，我们用的Python都是最基础的Python知识，所以脚本的版本兼容会比较好一些。笔者使用的是3.8.3的版本，究竟原因，是因为我懒，装了一个anaconda。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本系列讲的是基于Nornir3.0.0这个版本，同时解释一下，网上关于Nornir的讲解本来就少（基本都是国外的），大多数是基于2.4和2.5的版本，3.0版本今年才发布（2020年），发生了一些变化，导致了一些配置文件的不兼容，所以大家不管是看我的还是其他人的视频或者文章也好，一定要留意版本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老规矩，&lt;code&gt;pip install nornir&lt;/code&gt;即可安装&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; pip install nornir&lt;/span&gt;&lt;br/&gt;Collecting nornir&lt;br/&gt;  Downloading nornir-3.0.0-py3-none-any.whl (28 kB)&lt;br/&gt;Requirement already satisfied: typing_extensions&amp;lt;4.0,&amp;gt;=3.7 in /home/dbarroso/.virtualenvs/tmp-nornir/lib/python3.8/site-packages (from nornir) (3.7.4.2)&lt;br/&gt;Requirement already satisfied: mypy_extensions&amp;lt;0.5.0,&amp;gt;=0.4.1 in /home/dbarroso/.virtualenvs/tmp-nornir/lib/python3.8/site-packages (from nornir) (0.4.3)&lt;br/&gt;Collecting ruamel.yaml&amp;lt;0.17,&amp;gt;=0.16&lt;br/&gt;  Using cached ruamel.yaml-0.16.10-py2.py3-none-any.whl (111 kB)&lt;br/&gt;Collecting ruamel.yaml.clib&amp;gt;=0.1.2; platform_python_implementation == &quot;CPython&quot; and python_version &amp;lt; &quot;3.9&quot;&lt;br/&gt;  Using cached ruamel.yaml.clib-0.2.0-cp38-cp38-manylinux1_x86_64.whl (578 kB)&lt;br/&gt;Installing collected packages: colorama, ruamel.yaml.clib, ruamel.yaml, nornir&lt;br/&gt;Successfully installed nornir-3.0.0 ruamel.yaml-0.16.10 ruamel.yaml.clib-0.2.0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装之后，可以打开ipython试试，没报错即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ python&lt;br/&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; nornir &lt;span&gt;import&lt;/span&gt; InitNornir&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于插件，我们也得唠唠，2.4 2.5的时候，很多东西都是内置的，但是3.0版本发生了很大的变化，官方把一些插件，分拆了出去，nornir变得更加纯粹了。比如以前的时候nornir支持netmiko和napalm等，现在统统分拆出去了，创建了新工具包，比如nornir_napalm就是nornir的一个对napalm封装，同样的也有nornir_netmiko，很多很多工具包都被这样分解出去了。有点像flask，它只提供最基础的web开发框架，如果想实现一些admin后台或者表单相关的，需要安装对应的flask工具包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;nornir的官方网站是https://nornir.tech/ 在https://nornir.tech/nornir/plugins/ 我们可以看到官方的插件list，插件list分成几种：任务类的、连接类的、资源管理类的、进程管理、函数功能等等，比如netmiko就是一个任务类和连接类的插件包&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.3020565552699228&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Y7BXgWR9x8bxI4XYcviaZnUdoOVvv3iaWsIF9exq9iaPAkBGIvFGoZ6SS1wRiaVNvmHm4l7xEQQZojmTicDBbFr9dXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;778&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个都会连接到github上，非常棒的是nornir_netmiko的作者就是netmiko的作者。所以回归到我们之前说的第一个问题，国产化问题，ansible的大难题（开源版本至少是这样的，不知道有没有收费的隐藏资源），在nornir面前就不再是问题了，因为netmiko对国产设备支持的还是比较好的，目前ruijieos都支持了，撒花！所以nornir可以非常方便的对国产设备进行批量操作，包含配置下发。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一个简单的Nornir runbook&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;讲了这么多，我们赶紧来简简单单看看nornir是如何简单的开发出一个runbook的吧。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Nornir的文件组织架构及基本配置&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个nornir的runbook，类似ansible的，也有配置和设备清单及playbook的类似概念。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9463722397476341&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Y7BXgWR9x8bxI4XYcviaZnUdoOVvv3iaWssibgN9LQyGYSK4XFGQTULPjibL7TMXVibo9iaO1KWia2WXqmsm2a2HlqGtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;317&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是一个nornir的文件结构。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;配置文件 config.yaml&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先看看它的配置文件,nornir的配置文件使用的是可读性和书写便利性比较好的yaml文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们打开config.yaml文件，当然你也可以改成其他名称。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;---&lt;/span&gt;&lt;br/&gt;&lt;span&gt;inventory:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;plugin:&lt;/span&gt; &lt;span&gt;SimpleInventory&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;options:&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;host_file:&lt;/span&gt; &lt;span&gt;&quot;inventory/hosts.yaml&quot;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;group_file:&lt;/span&gt; &lt;span&gt;&quot;inventory/groups.yaml&quot;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;defaults_file:&lt;/span&gt; &lt;span&gt;&quot;inventory/defaults.yaml&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;runner:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;plugin:&lt;/span&gt; &lt;span&gt;threaded&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;options:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;num_workers:&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从配置上来看，我们也可以看出它的两个主要功能：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;指定加载资产的方式和路径&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;指定运行的方式，比如默认的线程及并发量&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;资产清单相关配置&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;plugin: SimpleInventory，我们就用默认的即可，它的意思是用SimpleInventory这个插件来加载清单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以重写这个插件来对接我们的CMDB或者是csv文件都可以，只要按标准格式返回资产数据即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认它有几个重要的参数就是资产相关的文件的path。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;资产清单相关配置，一般放到inventory的文件夹内，内含三个文件：&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;host.yaml&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设备清单，字典的方式梳理所有设备，key值为设备名称，value值是个字典，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设备的属性分为三个大部分：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;设备基本信息：包含设备的IP或者hostname，用户名密码，连接的端口，设备的platform，这些参数都可以无缝对接netmiko和napalm。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;所属组groups，list形式，每个组都有很多属性，比如接入交换机有些基本的配置，类似的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;参数data，字典格式，用户可以根据需求自己定义，比如定义一个role后续筛选，或者自己的一些配置预定义等等&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6822107081174439&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Y7BXgWR9x8bxI4XYcviaZnUdoOVvv3iaWs6icjUQH04pT8RkMvOdkdgqso5RnMyhICwUibmLDKeGiaVr1dpQiaUyntpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;579&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;groups.yaml&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设备会划拨给一些组，组里会有一些公用的属性，这个后续我们再详细分解&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;default.yaml&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全局默认的一些参数，按下不表，后续章节我们再详细分解&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这三个最最核心的我觉得是hosts，资产清单是最最核心的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;初始化对象，尝试打印出资产清单&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们通过引入InitNornir初始化一个Nornir对象&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; nornir &lt;span&gt;import&lt;/span&gt; InitNornir&lt;br/&gt;nr = InitNornir(&lt;br/&gt;    config_file=&lt;span&gt;&quot;nornir.yaml&quot;&lt;/span&gt;&lt;br/&gt;    )&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后我们就可以直接打印出我们的设备清单了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# list hosts&lt;/span&gt;&lt;br/&gt;print(nr.inventory.hosts)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;{&#x27;dev01&#x27;: Host: dev01, &#x27;dev02&#x27;: Host: dev02, &#x27;dev03&#x27;: Host: dev03}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它返回的是一个字典，key是设备名称，value是一个复杂的nornir内置的host对象，可以获取yaml文件内的一切，甚至更多。后续我也会尝试讲解一下Nornir的内置的一些重要的基本类。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;给每台设备一个自定义task运行&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多自动化框架的逻辑，基本就是有设备清单，然后在设备清单中做出筛选（默认全部），然后每台设备去执行自己的task。nornir也是这个逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们已经有了资产清单，我们想给每个设备安排一个任务，该怎么处理呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以自己定义一个灵活的task，它的写法如下。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; nornir &lt;span&gt;import&lt;/span&gt; InitNornir&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; nornir_utils.plugins.functions &lt;span&gt;import&lt;/span&gt; print_result&lt;br/&gt;&lt;br/&gt;devices = InitNornir(&lt;br/&gt;    config_file=&lt;span&gt;&quot;nornir.yaml&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;hi&lt;/span&gt;&lt;span&gt;(task)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    words = &lt;span&gt;f&quot;Hi!I&#x27;m a network device. My name is &lt;span&gt;{task.host.name}&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; words&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;results = devices.run(task=hi,name=&lt;span&gt;&#x27;A task for saying hi!&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;print_result(results)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;自定义函数|task&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重点是hi这个函数，它的第一个参数是task，这个地方可以简单理解成一个任务的上下文。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续是我们自己定义的参数，第一个，我们写的简单点，默认就让每台设备介绍一下自己。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每台设备都可以从task中取出自己的name，如上task.host.name&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后我们把想要返回的打印到屏幕上的return即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际过程中，我们可以写成每个设备执行自己的业务逻辑，比如信息采集、配置推送、起关端口等等，这个逻辑内部的很多都是可以受我们控制的，比如基本设备信息都可以从task中获取，然后调用netmiko或者ncclient等等，当然netmiko都有官方的插件包。这样就非常灵活了，我们简单写几个代码，借助netmiko批量配置就非常简单，后续也会展开介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Nornir的灵活有一部分就体现在task里，可以非常灵活的定制自己的业务逻辑。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;批量执行自定义的task&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二个重点来了，devices.run，devices就是我们初始化的Nornir对象，早期版本及官方版本会使用nr作为代替，类似pd代替pandas，有一些博主的视频代码里会写成筛选出来的设备，比如路由就写routers作为Nornir对象的变量名，这样可读性更好，有点所有设备执行任务的感觉。这个run有几个重要参数，我们今天初步介绍，最重要的是task，就是我们要调用哪个函数，这个时候我们传入自己定义函数（本例是hi），name是打印的时候显示的会比较好的而设计的，不写也没事。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;漂亮的打印出来&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们调用官方的插件包nornir_utils，这个需要pip安装。引入print_result，直接打印返回的结果即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看看效果&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4220472440944882&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Y7BXgWR9x8bxI4XYcviaZnUdoOVvv3iaWsYWWcVbbUB8dx05vFVUc1b86fzbh1vdAOiaIhz3DPV1lyvm7WN9tbznw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;635&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非常仿Ansible，有木有，每台设备并发执行，结果统统显示出来。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;小结与脑洞大开&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是一个Nornir的最最基础的使用方式了，在定义好hosts文件之后，我们可以写自己的task函数，可以写的很简单，也可以写的很复杂，开个脑洞，比如基于netmiko或者paramiko，配置备份，传到指定FTP，或者git仓库，作为一个版本备份及管理的脚本；中间的设备可以不停的筛选，同时根据返回的信息不停的判断，从而执行一些复杂场景，比如一些应急场景，或者涉及到多台设备的联动配置等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再奉上一段代码，我们后续也会深入讲解，基于官方netmiko插件包写的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对设备进行一个批量执行，我们之前也讲过很多netmiko的例子，这个官方的插件包与Nornir无缝对接，我们不用再去构建连接，Nornir自动帮我们创建连接&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; nornir &lt;span&gt;import&lt;/span&gt; InitNornir&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; nornir_utils.plugins.functions &lt;span&gt;import&lt;/span&gt; print_result&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; nornir_netmiko &lt;span&gt;import&lt;/span&gt; netmiko_send_command&lt;br/&gt;&lt;br/&gt;nr = InitNornir(&lt;br/&gt;    config_file=&lt;span&gt;&quot;nornir.yaml&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;show_cmds&lt;/span&gt;&lt;span&gt;(task)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    cmds = task.host.data[&lt;span&gt;&#x27;cmds&#x27;&lt;/span&gt;]&lt;br/&gt;    outputs = []&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; cmd &lt;span&gt;in&lt;/span&gt; cmds:&lt;br/&gt;        outputs.append(task.run(netmiko_send_command,command_string=cmd))&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; outputs&lt;br/&gt;results = nr.run(task=show_cmds)&lt;br/&gt;print_result(results)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码也比较简单，我们就是获取了设备里配置的data中的cmds命令行列表，然后执行了官方插件的netmiko_send_command命令，传入了cmd命令，并将结果放入outputs返回，这中间可以做的实际非常多，我们可以用textfsm解析归档，可以show run 备份，可以下发配置，看看结果，每台设备执行的情况我们都可以一目了然。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个设备是一台华为的ce系列交换机（模拟器），我们都知道，netmiko对国产化设备支持目前是比较好的，我们通过这种方式，对华为华三的配置都可以实现，ansible支持的网络设备实在有限，且和设备软件版本有一定关联，但是基于netmiko，我们使用ssh加命令行即可，目前为止，在一个中大型或者是不单纯的网络环境中，我个人习惯称之超融合网络，命令行辅之以其他方式，有能力的上层封装统一，能力暂时不足或者没特殊想法的单纯命令行一梭子到底即可，这是我认为的，&lt;strong&gt;目前&lt;/strong&gt;NetDevOps的最佳实现。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6198473282442748&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Y7BXgWR9x8bxI4XYcviaZnUdoOVvv3iaWseID7EkJx3uO9qaN0dXgI9WInwKEkOwKz3WcBjZCCWK6PM3oJxV2dQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;655&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在国外，NetDevOps的使用比较广泛的还有napalm、netbox，Nornir与之都可以很方便对接，它也是有一定生态的，同时也可以非常方便的自己写插件扩展，或者硬编码连接方式到task中非常暴力的执行命令等等。nornir的核心代码据说5000+，我看了看，真的是非常简单，但是考虑的很周全灵活，灵活我们讲了，简单的设计，还有一个非常好的结果就是执行效率高，在中大型网络环境中，真的是可以秒杀ansible，大家如果写过ansible，也应该深有体会，我们就是想执行一个show version，结果要等很长时间处理一堆东西，返回的巨慢，但是nornir就非常赞，很快就完成与设备的交互返回结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时之前也说过，它是pure python写的，所以我们可以非常灵活的定制很多内容。这其实是一把双刃剑，根据使用者能力和脑洞，用好了可以帮我们解决很多问题，但是python本身就对使用者的Python有了一定要求，无法像ansible那样去低代码开发，所以Nornir的目标用户还是NetDevOps工程师多一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好吧，今天的分享就到这里结束了，后续有机会也与大家继续分享，毕竟这也是一个大坑。关于Nornir的相关博文非常少，中文的应该是没，也不成体系，本系列后续会不断给大家分享一些nornir的分析与讲解，希望在国内网工界引入这个非常棒的网络运维自动化框架，网络人专属的“ansible”，喷完了ansible，又碰瓷ansible，手动狗头！&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.8095238095238095&quot; data-type=&quot;svg&quot; data-w=&quot;21&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/lpHDr05YrIRQgT2sib9SWGE99gWsPW7x8FP6LoMYvgkmO9jSQjFqfcMVBUsiaSKickqickc7k2Kwah52tbzMnA316k2WA88rXLAX/640?wx_fmt=svg&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.4074074074074074&quot; data-type=&quot;svg&quot; data-w=&quot;27&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/ibKHP1TZZeXLuZkD53jFWzc8iauhHlerlWDib9Dgm1JiaSF9LB4RGxxD4cSFrUoIeI4fvic7VPGpKGv8AqCJgcUeqLoOAXBW6kKov/640?wx_fmt=svg&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;送书活动&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2185501066098081&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/LLRiaS9YfFTOMxUibn1y4x16tmFKvia0O6WTSXVDxF5MX4UpLNJSpybT3RFBhWia7r7jVj6C0czDEsK9xIJMAHforQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;938&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;新一期的赠书活动，感谢北京大学出版社赞助。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、内容全面:借助5大 Python工具库,实现数据分析从获取到建模全流程覆&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、贴合实际:不空讲 Python语法,清晰简明地介绍如何用Python来处理、分析数据&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、热点案例:覆盖6大热点应用领域,可直接参考研发,实现数据变现&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;赠书规则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;赠书本数&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：本次共包邮送书 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3 &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;本&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参与方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：在&lt;strong&gt;Python猫&lt;/strong&gt;读者群抽奖，&lt;strong&gt;仅限群友&lt;/strong&gt;参与。后台发“&lt;/span&gt;&lt;span&gt;交流群&lt;/span&gt;&lt;span&gt;”，获取入群方式。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;开奖时间&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：2021年5月30日18:00&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;section&gt;&lt;mpcps frameborder=&quot;0&quot; class=&quot;js_editor_cps&quot; data-datakey=&quot;1622033712513_0.7636753855311949&quot; data-uid=&quot;1622033712515&quot; data-type=&quot;1&quot; data-product=&quot;&quot; data-templateid=&quot;list&quot; data-pid=&quot;29122980&quot; data-categoryid=&quot;3&quot; data-appuin=&quot;3084391334&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.45454545454545453&quot; data-w=&quot;22&quot; title=&quot;音符&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/cZV2hRpuAPiaJQXWGyC9wrUzIicibgXayrgibTYarT3A1yzttbtaO0JlV21wMqroGYT3QtPq2C7HMYsvicSB2p7dTBg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Python猫技术交流群开放啦！&lt;/span&gt;&lt;/strong&gt;群里既有国内一二线大厂在职员工，也有国内外高校在读学生，既有十多年码龄的编程老鸟，也有中小学刚刚入门的新人，学习氛围良好！想入群的同学，请在公号内回复『&lt;strong&gt;&lt;span&gt;交流群&lt;/span&gt;&lt;/strong&gt;』，获取猫哥的微信&lt;span&gt;（谢绝广告党，非诚勿扰！）&lt;/span&gt;~&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;还不过瘾？试试它们&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▲&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247492392&amp;amp;idx=1&amp;amp;sn=b0c7f15697c043eaf043730a0f9639cb&amp;amp;chksm=fa5ba4adcd2c2dbbf47059091d6a535bab4b14a7265bc9014a646780f556c2618f2c780472b4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;坚持原创很难，但我不会放弃！&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▲&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247485430&amp;amp;idx=1&amp;amp;sn=f27591dfb2fc4a30a411f370182cd5ef&amp;amp;chksm=fa584073cd2fc965c812ed3a697f0302c422fbc8f66acbcabec186eb291374dc7af6e05ac85b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Python 的缩进是不是反人类的设计？&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▲&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247488237&amp;amp;idx=1&amp;amp;sn=cf0c6860c751934f531b4dd460ba9780&amp;amp;chksm=fa585568cd2fdc7edcd3dfc1025401f0cbe16af1d56421518fece3dc450756eab641a841af67&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;冗长的 Python 代码，如何重构？&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▲&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247486931&amp;amp;idx=1&amp;amp;sn=93fff422b7b8b9f06019ef0562ed4d84&amp;amp;chksm=fa584a56cd2fc340220656d88a1da5554367786e8d375ec4fce74197c32995264fc0984a42fd&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;耗时两年，我终于出了一本电子书！&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▲&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247491934&amp;amp;idx=1&amp;amp;sn=880cb94ca57f37f3994202e9519b54d8&amp;amp;chksm=fa5ba6dbcd2c2fcda8b378b67eba0b71a18d7ab010d31420b43cd4e0169be39e6ec9582c48de&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Python 性能测试工具 Locust 极简入门&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▲&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247484794&amp;amp;idx=1&amp;amp;sn=53fae7b1274734a299e1e81b110c7e1c&amp;amp;chksm=fa5842ffcd2fcbe9b641f62b5212fda821f31258df58607c85ccd7f0d260074e3a58b1a756b4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;由浅入深：Python 中如何实现自动导入缺失的库？&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如果你觉得本文有帮助&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;请慷慨&lt;/span&gt;&lt;span&gt;分享&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;和&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;点赞&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;，感谢啦&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>438941fdf751e46aebd839656ffe093d</guid>
<title>JVM 进阶之路（十三）：类加载过程</title>
<link>https://toutiao.io/k/exb3tei</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwODE5ODM0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWeFt08hV3N1706WTzfhoTNoXm5LXRV0XibppmeNR4zSNMa3QOJJ7ib4O21P5yohibwuD26Tp9ETWZAqA/0?wx_fmt=png&quot; data-nickname=&quot;三分恶&quot; data-alias=&quot;Fighter3FullStack&quot; data-signature=&quot;一个全栈开发。分享Java后端、Web前端、计算机基础知识。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过前面的学习，我们了解了Class文件的结构，在Class文件中描述的各类信息，最终都需要加载到虚拟机中之后才能被运行和使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们开始学习JVM的类加载。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个类从被加载到虚拟机内存中开始，到从内存中卸载，整个生命周期需要经过七个阶段：加载 （Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化 （Initialization）、使用（Using）和卸载（Unloading），其中验证、准备、解析三个部分统称为连接（Linking）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.39303482587064675&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWfTeSZ3GWTEI2Aq4yTahy8cFba2pnScwnfXmhhhp84bNK9fWw8UwD8IAOnWOZIjicuvs5WWMpqEdUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;figcaption&gt;类的生命周期&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《Java虚拟机规范》 严格规定了有且只有六种情况必须立即对类进行“初始化”：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1）遇到new、getstatic、putstatic或invokestatic这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2）使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则需要先触发其初始化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3）当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;4）当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;5）当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;6）当一个接口中定义了JDK 8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这六种场景中的行为称为对一个类型进行主动引用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们来详细学习Java虚拟机中类加载的全过程，即加载、验证、准备、解析和初始化。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、加载&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加载是JVM加载的起点，具体什么时候开始加载，《Java虚拟机规范》中并没有进行强制约束，可以交给虚拟机的具体实现来自由把握。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在加载过程，JVM要做三件事情：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.5132450331125828&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWfTeSZ3GWTEI2Aq4yTahy8cNjgPgic0MibcRqHc4g2kfEtJ8nnRf0ge3ZKapQLhaZkFpSpxtiacGoOibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;302&quot;/&gt;&lt;figcaption&gt;加载&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;1）通过一个类的全限定名来获取定义此类的二进制字节流。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;3）在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加载阶段结束后，Java虚拟机外部的二进制字节流就按照虚拟机所设定的格式存储在方法区之中了，方法区中的数据存储格式完全由虚拟机实现自行定义，《Java虚拟机规范》未规定此区域的具体数据结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类型数据妥善安置在方法区之后，会在Java堆内存中实例化一个java.lang.Class类的对象， 这个对象将作为程序访问方法区中的类型数据的外部接口。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;方法区在JDK不同版本的具体实现就不再详细说了。在JDK1.8中，类型数据存储在元空间中。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、验证&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;验证是连接阶段的第一步，这一阶段的目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;验证阶段大致上会完成下面四个阶段的检验动作：文件格式验证、元数据验证、字节码验证和符号引用验证。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.20724094881398253&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWfTeSZ3GWTEI2Aq4yTahy8cBuDTWyVsn0QUI8w3J5q6khuUlpUibe0HrJYicwicgibDJpHrE4WVLEHCicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;801&quot;/&gt;&lt;figcaption&gt;验证阶段&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一阶段要验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。需要验证魔数、版本号、常量池常量类型是否支持、指向常量的索引值等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合《Java语言规范》的要求，包括类是否有父类、父类是否继承了final修饰的类、非抽象类是否实现了父类定义的方法、类是否与父类有矛盾等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三阶段是整个验证过程中最复杂的一个阶段，主要目的是通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;符号引用验证主要验证类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、准备&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;准备阶段是给静态变量分配内存并设置类变量初始值的阶段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在JDK 7及之前，这些变量的内存在方法区（永久代）中分配，在JDK 8及之后，静态变量则会随着Class对象一起存放在Java堆中。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7387820512820513&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWfTeSZ3GWTEI2Aq4yTahy8c5DNVIuTicia7d6akzQ7WQQX45JD6gIoKZbUFe6ys84DXMySAdQiaXoVfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;624&quot;/&gt;&lt;figcaption&gt;准备&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、解析&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;直接引用（Direct References）：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.46687211093990755&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWfTeSZ3GWTEI2Aq4yTahy8cs6smUScMl9iaOM9ZTibjMr8z6T5iarSTLeic2mmdicicykCuFOEp95FVXNog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;649&quot;/&gt;&lt;figcaption&gt;解析过程&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5、初始化&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类的初始化阶段是类加载过程的最后一个步骤，在这个阶段，会根据程序员通过程序编码制定的主观计划去初始化类变量和其他资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;准备阶段，变量被赋的是系统要求的零值，在初始化阶段，赋的是代码里编写的值。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4349315068493151&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWfTeSZ3GWTEI2Aq4yTahy8cibTSXPVDMwDnSuSRkNdUYicpkhEWqIsvOCG0aZjVibyTYXp3vBGeKmVCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;584&quot;/&gt;&lt;figcaption&gt;初始化阶段&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，基本的类加载过程已经了解完了，接下来，我们将学习负责完成加载阶段的类加载器。&lt;/p&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;big&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/big&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;【1】：《深入理解Java虚拟机：JVM高级特性与最佳实践（第3版）》&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwODE5ODM0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWeFt08hV3N1706WTzfhoTNoXm5LXRV0XibppmeNR4zSNMa3QOJJ7ib4O21P5yohibwuD26Tp9ETWZAqA/0?wx_fmt=png&quot; data-nickname=&quot;三分恶&quot; data-alias=&quot;Fighter3FullStack&quot; data-signature=&quot;一个全栈开发。分享Java后端、Web前端、计算机基础知识。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;204&quot; data-backw=&quot;558&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWdBLml8yqRnW8SzBIzu9h5RZaLdMfqqUt3mXMbX3bO0nu0FyfqotEfYm56F1xTqoqsmrQn3icGJ6Dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b12f03c05c032dd1380989221a0634cf</guid>
<title>细谈 Go 变量的内存分布</title>
<link>https://toutiao.io/k/u9wqg6f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content has_line_number&quot;&gt;
          &lt;p&gt;我们程序中的变量大多被分配在内存的两个区域：&lt;code&gt;statck&lt;/code&gt;和&lt;code&gt;heap&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;stack和heap&quot;&gt;&lt;a href=&quot;#stack和heap&quot; class=&quot;headerlink&quot; title=&quot;stack和heap&quot;/&gt;&lt;code&gt;stack&lt;/code&gt;和&lt;code&gt;heap&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;首先让我们一起来回顾一下进程的内存分配：&lt;br/&gt;我们写的程序代码跑起来后，会是一个进程；OS会给我们的进程分配内存；内存结构大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/stack_heap/mem_total.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;OS给一个进程分配的内存空间大致可以分为：&lt;code&gt;代码区&lt;/code&gt;、&lt;code&gt;全局数据区&lt;/code&gt;、&lt;code&gt;栈(stack)&lt;/code&gt;、&lt;code&gt;堆(heap)&lt;/code&gt;、&lt;code&gt;环境变量区域&lt;/code&gt;以及中间空白的&lt;code&gt;缓冲区&lt;/code&gt;六个部分。其中，数据的增长路径除&lt;code&gt;栈(stack)&lt;/code&gt;是由高到低之外，其余的均是由低到高(可看图中数据箭头)。&lt;/p&gt;
&lt;p&gt;我们思考一下，为什么&lt;code&gt;栈(stack)区&lt;/code&gt;这么特殊和其他区域路径相反？还有，进程内存中&lt;code&gt;stack&lt;/code&gt;和&lt;code&gt;heap&lt;/code&gt;和数据结构中的&lt;code&gt;stack&lt;/code&gt;和&lt;code&gt;heap&lt;/code&gt;名字都相同，是有什么联系吗？请带着问题往下看：&lt;/p&gt;
&lt;h3 id=&quot;进程内存中的stack和heap&quot;&gt;&lt;a href=&quot;#进程内存中的stack和heap&quot; class=&quot;headerlink&quot; title=&quot;进程内存中的stack和heap&quot;/&gt;进程内存中的&lt;code&gt;stack&lt;/code&gt;和&lt;code&gt;heap&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; : 是由程序侧通过&lt;code&gt;系统调用&lt;/code&gt;向操作系统申请的，由操作系统管理和释放，不需要程序员手动管理；一般用于存放线程和函数中产生的临时变量。这块区域的数据使用速度较快，不用手动管理，省心省力。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;heap&lt;/code&gt;：是由程序侧通过&lt;code&gt;系统调用&lt;/code&gt;向操作系统申请的，但是需要程序员自行管理的内存区域，因为此区域的定位是&lt;code&gt;global variable&lt;/code&gt;，用于存放全局的变量(虽然很多编程语言中不这么利用)； 程序员需要手动或者通过GC及时free或者delete此内存区域中的数据，但是也要注意：如果频繁的进行删除和添加，会导致内存碎片。&lt;/p&gt;
&lt;h3 id=&quot;数据结构stack和heap&quot;&gt;&lt;a href=&quot;#数据结构stack和heap&quot; class=&quot;headerlink&quot; title=&quot;数据结构stack和heap&quot;/&gt;数据结构&lt;code&gt;stack&lt;/code&gt;和&lt;code&gt;heap&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;我们再来看看数据结构中的&lt;code&gt;stack&lt;/code&gt;和&lt;code&gt;heap&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;/img/stack_heap/stack.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;后进先出LIFO的数据结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Heap&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;/img/stack_heap/heap.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;堆的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全二叉树&lt;/li&gt;
&lt;li&gt;每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根节点是最大数的叫做“大顶堆”，根节点是最小数的叫做“小顶堆”。&lt;/p&gt;
&lt;p&gt;堆&lt;code&gt;heap&lt;/code&gt;这种数据结构经常利用在“如何快速定位并获取到Top N最热门的xxx”，通常的做法如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/stack_heap/heap1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;内存中的”stack和heap“与数据结构中的”stack和heap“的联系&quot;&gt;&lt;a href=&quot;#内存中的”stack和heap“与数据结构中的”stack和heap“的联系&quot; class=&quot;headerlink&quot; title=&quot;内存中的”stack和heap“与数据结构中的”stack和heap“的联系&quot;/&gt;内存中的”&lt;code&gt;stack&lt;/code&gt;和&lt;code&gt;heap&lt;/code&gt;“与数据结构中的”&lt;code&gt;stack&lt;/code&gt;和&lt;code&gt;heap&lt;/code&gt;“的联系&lt;/h3&gt;&lt;p&gt;一句话总结：进程内存中的&lt;code&gt;栈区(stack)&lt;/code&gt;使用的数据结构就是&lt;code&gt;stack&lt;/code&gt;，内存中的&lt;code&gt;heap&lt;/code&gt;和数据结构中的&lt;code&gt;heap&lt;/code&gt;则毫无关系。&lt;/p&gt;
&lt;p&gt;看如下C代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   ret = add(a, b);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, ret);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   reuturn &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   sum = x + y;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;以上代码在栈区中的数据是这样的：&lt;br/&gt;&lt;img src=&quot;/img/stack_heap/stack1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还及得上文中提到的：“进程内存中只有&lt;code&gt;栈区(stack)&lt;/code&gt;数据是由高位向低位增长的，其余的均为由低位向高位增长吗？”&lt;/p&gt;
&lt;p&gt;栈区用的数据结构是栈，函数变量的销毁和返回顺序用逆恰好符合stack先进后出的特点，我觉得这是&lt;code&gt;栈区(stack)&lt;/code&gt;逆序增长很重要的一点。&lt;/p&gt;
&lt;p&gt;但是，最根本的原因还是在于：历史遗留问题。请看下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/stack_heap/stack2.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;在当初那个内存空间及其短缺的年代，你认为左图还是右图更适合“缓冲区”？因为&lt;code&gt;stack&lt;/code&gt;区域和&lt;code&gt;heap&lt;/code&gt;区域大小都是动态分配的，都有“不确定性”，很显然，左图发生&lt;code&gt;堆栈重叠&lt;/code&gt;更小，且更适合内存的充分利用。&lt;/p&gt;
&lt;h2 id=&quot;Go变量的位置&quot;&gt;&lt;a href=&quot;#Go变量的位置&quot; class=&quot;headerlink&quot; title=&quot;Go变量的位置&quot;/&gt;Go变量的位置&lt;/h2&gt;&lt;p&gt;我们在写C、PHP、Java的时候，可以很容易的知道，所写的变量所在的位置：带&lt;code&gt;new&lt;/code&gt;、&lt;code&gt;malloc&lt;/code&gt;等字段的，那一定是在堆上分配了，至于后续GC怎么处理，有没有引用继续关联，堆有没与释放，程序是否存在内存泄露…这都是后续处理的问题了；变量的存储位置是妥妥的堆上了。但是，在用Go的时候要注意，&lt;code&gt;new&lt;/code&gt;、&lt;code&gt;make&lt;/code&gt;等等关键字都不好使，Go变量的位置不是由写程序的程序员来决定的，而是Go自行处理；所以可能你的变量是&lt;code&gt;new&lt;/code&gt;出来的，但是，最终也不一定分配到堆上，很可能是分配在栈上。&lt;/p&gt;
&lt;p&gt;Go把变量的位置在哪儿这件事对程序员“隐藏”了，Go自行处理；因为Go认为：变量的存储位置，会对程序的性能有一定影响，而Go是计划打造对性能有极致要求的程序，因而自己管了。&lt;br/&gt;Go是这么管的：&lt;br/&gt;首先，栈&lt;code&gt;stack&lt;/code&gt;上的效率肯定是比堆要高的，这算是常识；Go在编译期会对每一个函数变量做判断，如果不能够判断此函数中的变量在返回之后是否仍被引用到，就给把变量扔堆&lt;code&gt;heap&lt;/code&gt;上，否则，就扔栈&lt;code&gt;stack&lt;/code&gt;上。但是注意：如果变量非常大，还是会扔到堆&lt;code&gt;heap&lt;/code&gt;上。&lt;/p&gt;
&lt;h3 id=&quot;逃逸分析&quot;&gt;&lt;a href=&quot;#逃逸分析&quot; class=&quot;headerlink&quot; title=&quot;逃逸分析&quot;/&gt;逃逸分析&lt;/h3&gt;&lt;p&gt;我们是否有办法知道我们写的Go程序中变量的位置呢？&lt;br/&gt;答案是有的，Go向开发者提供了变量逃逸分析的工具 &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; build -gcflags &lt;span class=&quot;string&quot;&gt;&#x27;-m -l&#x27;&lt;/span&gt; main.&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 这里的main.go也可以是某个具体的二进制应用程序&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面对如下代码进行逃逸分析：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    a:= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    b := &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    ret := add(a, b)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(ret)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    sum := x + y&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;分析结果:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./main.&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;: main ... argument does not escape&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;./main.&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;: ret escapes to heap&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


        &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e8d149cbb551a743be3a0505de8095db</guid>
<title>通过海量数据挖掘新兴领域需求</title>
<link>https://toutiao.io/k/1j6tho5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p cid=&quot;n0&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;&lt;img data-backh=&quot;204&quot; data-backw=&quot;247&quot; data-ratio=&quot;0.8259109311740891&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSxbx7RS5MIpGHSTl0Ub7Alomf3fU7Tg5gMSIXOkvNt1j1Rb85icAlaGw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;247&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n0&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;挖掘需求的重要性不必多说，有需求才会有市场。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;创业者在进入一个新兴领域时会思考这个问题：如何挖掘出用户需求，并做出用户愿意付费的产品。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n3&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;本文提供一种挖掘新兴领域需求的思路：长尾搜索词。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n4&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;搜索引擎的搜索框作为用户主动搜索的入口，用户的每个输入都可能是痛点，这些痛点更大概率能转化为需求和产品。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n5&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;所以我们可以通过收集用户的这些长尾搜索词，并结合一些关键指标，找出需求点。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n6&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;接下来，我们通过挖掘&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;区块链领域&lt;/span&gt;&lt;/strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;相关需求的例子来讲讲如何操作。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n7&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;最近比特币等各种虚拟货币大涨，相信大伙或多或少听说过。那么问题来了，区块链经过这些年的发展，作为一个还算新兴的领域，它到底衍生出了哪些产业，创业者进入这个行业能提供哪些服务。&lt;/span&gt;&lt;/p&gt;&lt;h5 cid=&quot;n8&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;步骤一：确定领域词&lt;/span&gt;&lt;/h5&gt;&lt;p cid=&quot;n9&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;首先我们需要确定领域词，领域词的选择至关重要。需要有足够的特征和代表性，不然在后续的扩展挖掘中会越偏越远。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n10&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;比如区块链行业相关的领域词 「比特币」「Defi」 「以太坊」。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n11&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;获取行业的领域词，可以有如下办法：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot; start=&quot;&quot; cid=&quot;n12&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n14&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;寻找别人整理好的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n16&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;向相关行业人员请教&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n18&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;自己写程序抓取挖掘&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p cid=&quot;n19&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;1 和 2 不在本文的讨论中，新兴领域的词层出不穷，整理好的词库有它的滞后性，特别是区块链相关的，项目更新日新月异。还不如自己动手丰衣足食，构建自己的领域词库。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n20&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;首先找到该领域比较权威的网站或者导航站，比如区块链相关的新闻站有「巴比特」「区块律动」，导航站有 qkl123.com ，我们将导航站收录的项目以及相关的描述都抓取下来。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n21&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-ratio=&quot;0.40694444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSibAAjdaGbmb1Hefn9h0B5oc7CaT0jcoCmD997vjjlYGnlZMRVbLeMicw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n22&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;抓取方式如下&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot; start=&quot;&quot; cid=&quot;n23&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n25&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;直接用 web scraper 插件（教程可参考我之前写的：&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1Njc3Njc0MA==&amp;amp;mid=2247483822&amp;amp;idx=1&amp;amp;sn=4cd58d6a481c6bbb317c76a2059cb5fe&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如何 5 分钟零代码实现豆瓣小组爬虫&lt;/span&gt;&lt;/a&gt;&lt;span md-inline=&quot;plain&quot;&gt; ）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n27&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;用 Python 写个程序。伪代码如下：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;python&quot; cid=&quot;n28&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;URL&lt;/span&gt; = &lt;span&gt;https&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;webapi&lt;/span&gt;&lt;span&gt;.8&lt;/span&gt;&lt;span&gt;btc&lt;/span&gt;.&lt;span&gt;com&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;qkl&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;navigation&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;sites&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;slug&lt;/span&gt;=&lt;span&gt;%&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;tag_id&lt;/span&gt;=&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;page_size&lt;/span&gt;=&lt;span&gt;50&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;=&lt;span&gt;%&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;循环&lt;/span&gt; &lt;span&gt;slug&lt;/span&gt; &lt;span&gt;和&lt;/span&gt; &lt;span&gt;page&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;  &lt;/span&gt;&lt;span&gt;    url&lt;/span&gt; = &lt;span&gt;URL&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;slug&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;page&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;  &lt;/span&gt;&lt;span&gt;    返回内容&lt;/span&gt; = &lt;span&gt;请求数据（url）&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;  &lt;/span&gt;&lt;span&gt;    抽取返回内容的标题&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;描述&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span role=&quot;presentation&quot; cm-text=&quot;&quot;&gt;  &lt;/span&gt;&lt;span&gt;    保存到&lt;/span&gt; &lt;span&gt;txt&lt;/span&gt; &lt;span&gt;文件中&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n30&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;最终得到一份 标题+描述 的文本，里面基本能涵盖大部分的领域词，如果觉得这部分不够，可以在其他网站上再采集一些数据。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n31&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;&lt;img data-ratio=&quot;0.5006944444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHS5YVuiaEBtQKq5M0cMlkdpPfrL811iaYib0P7D005GkVTVbicszZcQ7dsHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1440&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n32&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;然后需要从文件中将领域词分离出来，方法就是 分词 + 计算词频 + 抽出 topN 的关键词&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n33&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们先尝试使用结巴分词对内容进行分词，一般情况下结巴分词能够比较好的处理中文分词，但是却不适用于我们这种场景。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n34&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;原因是结巴分词靠的是词典，对于新兴领域词典有滞后性，比如我们测试 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;区块链是一个伟大的革新&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt;，很明显&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;区块链&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 没有很好的被识别出来。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n35&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSlGHHBjmqqnmfdyOiceVlt6RsYscD5FJibba9ehZ3URGpj2yCibDntSvjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.13670886075949368&quot; data-w=&quot;395&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n36&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;所以问题变成了如何能够在词库不健全的情况下发现新词（也叫未登录词），解决的方案有很多，下面介绍其中一种算法：&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;左右互信息 + 信息熵&lt;/span&gt;&lt;/strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n37&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们只用通俗的方式去解释原理，具体的公式和代码不涉及。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n38&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们先思考什么样的文本片段能够组成一个词，一般会想到文本片段在语料中出现的次数足够多。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n39&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这种方式很容易实现，只要把所有最小单位的片段提取出来，然后计算片段在语料中出现的频数就行。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n40&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;但光是出现频数高还不够，一个经常出现的文本片段有可能不是一个词，而是多个词构成的词组。比如 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;赚钱的本质是什么&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt;，&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;赚钱&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 出现的频数高，&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;赚钱的&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt;出现的频数也不低，但 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;赚钱的&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 并不能成为一个词。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n41&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;成词标准一：所处语境的丰富程度 - 信息熵&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n42&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如果一个文本片段在很多的语境中被提到，那么它更有可能成为一个词。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n43&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;熵就是一个用来衡量这个维度的指标。熵越高就意味着信息含量越大，不确定性越高，越难以预测。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n44&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;举个例子，&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;被子&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 是一个词，它可以在各种语境中见到 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;晒被子&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;盖被子&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;被子湿了&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 但 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;辈子&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 只能和 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;一辈子&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;半辈子&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 几个固定搭配，那么 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;被子&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 所在语境更加丰富，熵越大，更容易成词。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n45&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;成词标准二：内部聚合程度 - 互信息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n46&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;举例说明，我们已经知道 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;电影&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt;是个词，那么 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;的电影院&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 拆分两个片段 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;的电影&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;电影院&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt;，哪个更容易成词呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n47&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;假设在 5000 万字的样本中, &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;电影&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 出现了 150 万次， &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;院&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 出现了 4 万次。那 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;电影&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 出现的概率为 0.03, &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;院&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 出现的概率为 0.0008。如果两个片段出现是个独立事件的话，&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;电影&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt;、&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;院&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 一起出现的期望概率是 0.03 * 0.0008 = 2.4e-05。如果 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;电影院&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 出现了 3 万次,  &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;电影&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;院&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 一起出现的概率是 6e-03, 是期望概率的 250 倍。这通常被成为凝合度，数值越大表示两个片段一起出现的概率越大。而相反 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;的电影&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 出现的概率远小于 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;电影院&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; ，所以 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;电影院&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 更易成词。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n48&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;综上，想要成为一个词，这两个标准缺一不可。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n49&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;大概原理讲完了，程序写起来较复杂，我们直接看下运行效果。下图截取部分通过此算法发现的关键词，其中很多是结巴分词没法识别的。看起来效果还不错，基本能涵盖区块链领域的关键词。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n50&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSt4ibaPxsnbt95k3qYCYVU70kPy9HoN6P4q7zPunOrkszypO53eokcUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;4.739837398373984&quot; data-w=&quot;246&quot;/&gt;&lt;/p&gt;&lt;h5 cid=&quot;n51&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;步骤二：拓展长尾词&lt;/span&gt;&lt;/h5&gt;&lt;p cid=&quot;n52&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;关键词确定后，我们可以围绕关键词扩展出更长尾的词。比如围绕&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;挖矿&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt;，可能的需求有 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;怎么挖矿&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n53&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;挖矿多长时间能回本&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;挖矿真的能赚钱吗&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n54&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;那么如何快速拓展出这些长尾词呢，可以思考下，如果我们有类似的问题，会怎么获取信息。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n55&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;答案是主动搜索 - 问百度，问知乎，问各种搜索引擎。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n56&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;主动搜索真切的表达了自己当时的需求。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n57&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;比如我们在百度搜索 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;挖矿&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt;，百度会有一系列的下拉联想词出来，绝大部分是人主动搜索形成的，而这些词背后恰恰体现人们最迫切的需求。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n58&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHS3GXaXWUrnDO4BTkqCobEYCu0CicRDhUiaD8TqTHAONuVgcRib1bu2KrXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.42567567567567566&quot; data-w=&quot;740&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p cid=&quot;n60&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;那么接下来问题就简单了，我们只需将步骤一拿到的领域词循环获取下拉词，就能获取到更多的长尾词。获取的方式不赘述，跟上文关键词方式一样，会技术的几行代码就能搞定。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n61&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;同样我们不用局限于百度，其他的搜索引擎都有类似的功能，另外我们也可以对我们的关键词做下加工，比如加一些情绪词，会有不一样的收获。&lt;/span&gt;&lt;/p&gt;&lt;h5 cid=&quot;n63&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;步骤三：挖掘长尾词&lt;/span&gt;&lt;/h5&gt;&lt;p cid=&quot;n64&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;接下来我们需要寻找出更有价值的长尾词，比如搜索量还行，但竞争不激烈的长尾词。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n65&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这个做 seo, sem 的同学都很熟悉，可通过百度关键词规划工具挖掘。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n66&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;输入相关的关键词，就能看到这个词的月均搜索量，竞争激烈程度。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n67&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSqswIatzOb8XUXCic7WlcC6TRNeSLbKnN0G8jspbbMeJrP0RDE83yYrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5657407407407408&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n68&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;通过上图我们可以看到 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;挖矿&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt; 每个月搜索量很高。说明在区块链领域中 ，&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;挖矿&lt;/code&gt;&lt;span md-inline=&quot;plain&quot;&gt;需求真实存在。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n69&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;很多人可能会执着于挖掘搜索量很高但竞争小的词，会进入一些误区。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n70&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;不是所有满足条件的关键词就一定能转化成需求，并最终完成变现，它可能是蓝海，也可能不满足需求本身。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n140&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;反过来，如果你的资源足够，哪怕竞争再激烈，进入一个需求量足够大的市场，也能够分一杯羹。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n71&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;采用上文同样的方法，我们可循环遍历抓取百度规划师的那部分数据。有一些现成的拓词工具能直接使用，附带搜索量结果。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n72&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;至此，我们完成了长尾词的挖掘，接下来就是怎么分析这些数据了。&lt;/span&gt;&lt;/p&gt;&lt;h5 cid=&quot;n74&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;步骤四：聚类长尾词&lt;/span&gt;&lt;/h5&gt;&lt;p cid=&quot;n75&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们总共跑出了 30w 区块链相关的长尾词，这些词需要做个归类，人工整理耗时耗力，可以写程序帮我们处理大部分工作。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n76&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这里介绍一种简单的聚类算法 K-means ，属于&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;无监督算法（Unsupervied learning）&lt;/span&gt;&lt;/strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;，即我们手上没有明确的类别，通过算法把相似的东西分到一个组，来寻找其中的规律。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n77&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;网上有一些很好用的 Python 库，如 scikit-learn 能直接实现 K-means 算法聚类&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n78&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHS8gZF5C4b0QBjHLSIZCHcRBekJ3KDHP5p3PQbLfniaMXqaiaRmyzEvb0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.15925925925925927&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n79&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们预估分 200个类别，30w 数据 3分钟就能跑完。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n80&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;效果如下图，我们发现以太币相关的需求已经聚合到同一个文件中&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n81&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSzKfaJfsNazr6AUQb85ffxXlAYshESJTbqiamPjsq6RjvqOOFGkNWIIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7388888888888889&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n83&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n142&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;简单分析下数据，区块链行业目前搜索的长尾词用户画像大概分几类 （以下仅供娱乐）&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n87&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSL4r9z7BA12bBibsshkiazPwYVUv6OTc6qI9lWnk4nhx9DsIynfia3DIbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.35185185185185186&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n91&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSicZKQUTSvxbWLtexiafRSr64MfvEY9LTIZCx1socwZ8mPT3HHv8q8Biaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5333333333333333&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n95&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSX4AJoEwgJSYYGsFiaDeGJZ2Hpf0BNKWjxLjzEN25CshoJ03oGVhkNbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.2972222222222222&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n99&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSpxxVicub8TCtOoQMeYLTYEohwib41icj1ibeib8N82TEsON7PicsSmbRTaiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.2388888888888889&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n100&quot; mdtype=&quot;list&quot; data-mark=&quot;*&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n102&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;王者级别 （不愿只做韭菜，直接当镰刀）&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n103&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoZSEBywbtmicHJiakapXoghHSbn6FrelbibwGibhpxnYTCq2kibBOXZzftuRyfJMBBkQvFbugk3OsJv6XQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.42685185185185187&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n104&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n105&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在分析的过程中，我们也发现程序处理流程的几个问题&lt;/span&gt;&lt;/p&gt;&lt;h5 cid=&quot;n113&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;回顾&lt;/span&gt;&lt;/h5&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n114&quot; mdtype=&quot;list&quot; data-mark=&quot;*&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n116&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;有些做技术的同学可能纠结算法的准确率。这里面我的观点是，技术用来给工作提效，但不能纯依赖技术。如果一个算法准确率在 70% 左右，已经能提升一半以上的效率，但再优化这个算法耗费的精力指数级上升，那么可先不优化。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n118&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;「信息熵+互信息」 算法是我之前的反作弊团队在识别恶意品牌营销上用到的。换个思路，发现它在挖掘需求上面也是把利器。再拓展下，此算法可以挖掘出各行业的品牌词，也能给结巴分词自定义行业词库，细做下去应该也挺有趣。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n120&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;通过关键词挖掘需求，只是作为一个维度去判断市场，不是万金油。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n122&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;最后我整理了下此次区块链领域相关的长尾词，如有需要可关注微信公众号「&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;程序化思维&lt;/span&gt;&lt;/strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;」回复&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;区块链&lt;/span&gt;&lt;/strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;获取。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI1Njc3Njc0MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/d0AF6miaeiaoYLvy1znzazicDrrJjHicISYcry3HklACzQnvgich4a1ib0IMZELYeNq5uIJ6IRhxoPCmz8xC1ibmscHoQ/0?wx_fmt=png&quot; data-nickname=&quot;程序化思维&quot; data-alias=&quot;&quot; data-signature=&quot;用程序化的思维去看世界&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;h5 cid=&quot;n124&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;参考链接&lt;/span&gt;&lt;br/&gt;&lt;/h5&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n125&quot; mdtype=&quot;list&quot; data-mark=&quot;*&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n127&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如何在百万级的数据里找到别人正在赚钱的项目&lt;/span&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://zhuanlan.zhihu.com/p/157846204&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n129&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;反作弊基于左右信息熵和互信息的新词挖掘 &lt;/span&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://zhuanlan.zhihu.com/p/25499358&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n131&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;互联网时代的社会语言学：基于SNS的文本数据挖掘 &lt;/span&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;http://www.matrix67.com/blog/archives/5044&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d13d66f2e936de23d02130fb06439f14</guid>
<title>携程 Web CI/CD 实践</title>
<link>https://toutiao.io/k/xgjagkk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:0.title1&quot;&gt;&lt;p&gt;&lt;strong&gt;作者简介&lt;/strong&gt;&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;西杰，携程软件技术专家，关注前端技术及其生态，致力于提升前端开发效能及质量。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、背景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在携程的日常Web开发生命周期中，本地代码开发阶段可通过NFES框架（携程内部一个支持SSR框架，其中还包含许多公共基础业务模块及UI组件）来快速完成项目需求。但开发完代码之后常常会遇到如下几点问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;环境问题：Web/Node资源本&lt;/span&gt;&lt;span&gt;地构建/测试环境和生&lt;/span&gt;&lt;span&gt;产环境差异化大，导致有些问题无法及时发现 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;QA流程：Web/Node端提交代码流程没有规范的QA环节，代码质量不可控&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;构建流程：资源本地构建与镜像构建是独立的，版本易混淆 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;代码开发完后的各个步骤比较分散，难集中管理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、目标&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过引入CI/CD解决方案，建立完善的准备环境/测试/资源构建/镜像构建一整个流程的链路，使它可帮助项目以更快的速度和更高的质量来交付。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、实现与实践&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;NFES 的 Web CI/CD 的实现，简单来说就是通过管道化 (GitDev Pipeline) 的执行过程来完成持续集成和持续交付，这篇文章先不涉及持续部署。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其管道 (Pipeline) 中集成QA，资源构建，生成镜像等多个Stage，而每个Stage中都包含详细的Step来完成其功能。接下来我们来详细从管道 (Pipeline) 中的Stage/Step的角度来介绍下NFES的Web CI/CD。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;管道在这里可以理解为实现目标的顶层组件，整个NFES Web CI/CD就是这样的组件组合而成。目前Web/Node相关的管道分为三个Stage：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.10173160173160173&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1fwmwnuQo5cEYpxHzmJPDwibSvTI4qEJ1BolmECN4N6ibyN7mzPqN3r8gYjaQ2FibSBI201YiaicBEAtPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;924&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）Install Stage&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;a. Install Step，安装用户项目下的依赖模块&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）Verify Stage&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;这里集成了三个Step：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;a. Lint Step，静态代码检测&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;b. Test Step，单元测试/UI测试&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;c. Build Step，资源构建&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）SonarAndImage Stage&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;a. Sonar Step，Sonar代码检测并上传，此步骤依赖于Verify Stage中的Lint/Test Step&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;b. Image Step，构建Docker镜像，此步骤依赖于Verify Stage中的Build Step&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面三个Stage是依次顺序执行，而在同个Stage中的多个Step则是并发执行的。这些执行顺序的控制可通过编写.gitlab-ci.yml文件来完成。&lt;/span&gt;&lt;span&gt;这里先简单介绍下.gitlab-ci.yml CI/CD配置的编写。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;.gitlab-ci.yml是放在仓库根目录中的文件，默认仓库会去这个文件中读取CI/CD的相关配置。&lt;/span&gt;&lt;span&gt;在此文件配置中你可以定义如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;定义环境变量 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;需要顺序或者并行运行的脚本命令 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;前后Step依赖关系 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;此Step所需使用缓存和设置缓存 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;触发的条件分支&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;具体常用配置代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;xxxxxxxxx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;variables&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;PROXY&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;http://proxy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;HTTP_PROXY&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;$PROXY&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;stages&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;Install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;Verify&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;......&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Test&lt;/span&gt;:          &lt;span class=&quot;code-snippet__string&quot;&gt;#Step的名称&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;stage&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;Verify  #属于哪个Stage&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;artifacts&lt;/span&gt;:      &lt;span class=&quot;code-snippet__string&quot;&gt;#配置产物存档文件,可在Pipeline运行界面取到配置的文件,但此存档只能保存默认一周&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;paths&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;reports/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;exclude&lt;/span&gt;:      &lt;span class=&quot;code-snippet__string&quot;&gt;#忽略某些文件不作为产物存档文件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;.git&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;.git/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;when&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;always &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;cache&lt;/span&gt;:          &lt;span class=&quot;code-snippet__string&quot;&gt;#配置缓存&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;keyName&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;paths&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;node_modules  #所需缓存的文件/文件夹&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;policy&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;pull      #如需获取缓存的文件,这里定制policy属性为pull&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;allow_failure&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;true #此步骤是否允许失败,如果允许,即使步骤执行失败,仍旧可执行下个Stage&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;dependencies&lt;/span&gt;:       &lt;span class=&quot;code-snippet__string&quot;&gt;#配置此Step依赖哪个Step&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;Install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;script&lt;/span&gt;:             &lt;span class=&quot;code-snippet__string&quot;&gt;#配置所需执行的命令&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;cd /testFolder  &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;node index&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;only&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;master          #配置分支 只有配置的分支才会执行相关的Pipeline&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;......&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在日常开发使用中，携程的GitDev CI/CD则提供公用的配置模版，如用户没有特殊Step的需求，可通过选择Step模版或者选择应用类型模版来自动生成上面的配置文件，无需关注yml的详细配置。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;接下来我们详细看下NFES Web CI/CD的Install，Verify和SonarAndImage三个Stage做了哪些事情？&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1 Install Stage&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Install Stage中只包含一个Step，即执行安装用户项目下的模块依赖。此阶段安装结束后的nodemodules则会作为缓存给之后的Step使用，可节省很多不必要的重复安装模块的时间。当然如果在同一个commitID的情况下，多次执行这个Install Stage，则后面几次安装的nodemodules其实就是取第一次安装的缓存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 Verify Stage&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Verify Stage默认会包含三个步骤Lint，Test，Build。这个Stage其实是一个规范的QA环节，而Build的Step为什么要放在此处，就是想构建与测试并发执行，从而缩短整个Pipeline的运行时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详细的各个Step的实现如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）Lint Step集成了eslint静态代码检测功能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;静态代&lt;/span&gt;&lt;span&gt;码检测功能通过封装的全局模块来完成代码检测，其默认使用eslint:recommended推&lt;/span&gt;&lt;span&gt;荐规则。如用户需要自定义eslint规则可以直接把规则写在当前项目的eslintrc.json文件中，模块会自动整合其默认规则。如想要忽略检查某些文件，则把规则写在.eslintignore文件中。执行完成后会生成eslint-report.json，此文件会作为artifacts可在pipeline的step任务页面中直接下载查看，也会通过后面的Sonar Step上传到Sonar。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）Test Step集成了单元测试以及UI测试 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;集成的单测框架又可分为mocha和jest，Web端统一使用jest，NFES测试镜像中默认已有jest相关模块，如无特殊需求则不需要在用户项目的依赖中安装测试相关依赖的模块。如需自定义jest相关配置可写在用户项目下的jest.config.js中。单元测试的运行命令统一为：npm run test，其执行结果会以html/json/clover/lcov输出，输出结果中lcov和clover.xml文件与GitDev做集成，使其结果与代码的commitID进行绑定，这样每次代码提交就可在界面上直接查看本次提交代码的具体单测运行结果。这里也可设置对每次代码提交的单元测试覆盖率的要求，如其覆盖率不低于60%，否则不能进行下一步骤。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每次代码提交的CommitID的单元测试结果展示如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.28125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dhMBCbd58DvKgONiaA6qvG8X7spo0BdQxIrgfuSqBgt0Fq3EQDW7zYFwRicx5Gm2R6swdUsR2OwQcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;集成的UI测试是作为一个可选Step，我们提供了集成puppeteer/cucumber的镜像，用户如有UI测试的需求可自行在Test Stage中添加该UI Test Step。在UI测试中增加了视频录制的功能，每个Case对应一个视频，等用户的UI Cases执行完成后，则会自动生成报表并发布到资源站点上，方便用户查看及排查问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;UI测试报表结果中录制视频（部分截图）展示如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.04093567251462&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dhMBCbd58DvKgONiaA6qvG8PptQH3N8G08owXFsybqicUpsno4llDpGzZD6jsEicoBNYjibbRbrm4ISQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1026&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）Build Step集成页面的资源构建 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里的构建其实就是把在线构建搬到了Pipeline的Build Step中。首先是构建环境的搭建，分为两块：框架所需的依赖模块环境和用户项目依赖的模块环境。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于NFES框架的依赖模块环境，Build Step使用的构建镜像中已经集成了NFES项目所需的开发态模块（我们对开发态模块加载做了些优化，把如Babel插件，webpack，loader等通用的模块全都集成到cli的全局模块中，然后预装到构建镜像)。执行构建时，更改构建时项目所需开发态模块路径指向预装路径，这样就可以不需要安装框架依赖模块。而对于用户项目依赖的模块环境则可以重用Install Stage中的node_modules中的缓存，这两点使用户项目安装模块的时间大幅度减少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;搭建完构建环境后，执行相关在线构建命令开始构建，构建的过程及日志都可通过Pipeline界面得到。构建完成后接下来是构建产物的处理。这里的NFES项目构建产物可分为Web端资源/node服务端资源&lt;/span&gt;&lt;span&gt;。Web端的资源可以直接发布并获得相应的资源地址，此Web资源地址也会及时更新到node服务端资源中的资源路径。最后通过配置中artifacts属性来确定哪&lt;/span&gt;&lt;span&gt;些node端的资源文件需要上传给下一步Image Stage来构建发布镜像。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 SonarAndImage Stage&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SonarAndImage包含了Sonar和Image两个Step， 这个Stage是目前管道中最后一个专门收集与处理前面依赖Step产物的Stage。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）Sonar Step &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此步骤是依赖于Test和Lint这两个Step， 用来收集依赖的这两个Step执行的结果并上传至Sonar中。用户可以在sonarqube的网站查看历史的代码质量报告。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）Image Step &lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此步骤是依赖于Build Step，它是获取Build的构建产物与基础镜像一起构建出发布镜像并推送到Hub中，为接下来的应用发布做准备。到此步骤整个NFES Web CI/CD的流程就结束了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、小结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上就是整个NFES Web CI/CD的实现与实践。目前几乎所有的NFES项目都已经切到CI/CD的流程上，它带来了集中式流程化管理，一站式对用户透明的资源构建与镜像构建更简单快捷，开发效率得到了很大的提高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;团队招聘信息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们是平台研发中心，一个为携程快速发展提供各类基础产品和服务的平台，我们以技术驱动提升客户体验，提升跨团队协作效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们拥有优秀而强大的团队，引导你学习业内领先的开发技术，与技术高手交流对话，学习切磋。在亿级用户严苛的品质要求中，激发你脑中不断涌现的创新思维，带领你体验飞速成长的惊喜快乐，并在各种机遇与挑战中发展自我，成就自身。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前我们前端、后台、算法、测试等技术岗位均有职位。简历投递：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;tech@trip.com&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，邮件标题：【姓名】-【携程平台研发中心】-【投递职位】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;【推荐阅读】 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1dhMBCbd58DvKgONiaA6qvG8l7ibbMrgR3PQIXAKiaaZF1BqyKWoEhQS8pLl2vDR34Fx9ricKOQpVIaHQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; “携程技术”公众号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;  分享，交流，成长&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>