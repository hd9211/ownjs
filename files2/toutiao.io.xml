<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c53799d4f38d30e933bcde9aab1453f0</guid>
<title>分布式事务实战，用 Go 轻松完成一个 TCC</title>
<link>https://toutiao.io/k/4t8lwxs</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;TCC分布式事务来源于 2007 年Pat Helland发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文，TCC分别是Try、Confirm、Cancel的手写字母。&lt;/p&gt;&lt;h3&gt;组成&lt;/h3&gt;&lt;p&gt;TCC有三个分支&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Try 分支：预留锁定业务相关资源，如果资源不够，则返回失败&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Confirm 分支：如果前面的Try全部成功，则进入Confirm，进行数据变更，这个阶段不会返回失败&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Cancel 分支：如果前面的Try没有全部成功，有返回失败的，则进入Cancel。Cancel解冻Try锁定的资源，也类似Confirm是不会返回失败的。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;假设有一个银行跨行转账的业务，因为不同银行，数据不在同一个数据库，而更可能在不同微服务下的数据库里。这是一个典型的分布式事务场景，我们看看一个成功的TCC时序图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.169179229480737&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9m9OfQX94VvJvhjNGBvp23oCHMicZHFfWZ9zwPQIlhiabFoTcTE9W4pPePuiahLmkCyDctJceps7ic68qWBgeV3hbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1194&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3&gt;实践&lt;/h3&gt;&lt;p&gt;A转账给B的跨行转账操作，如果转账不成功，我们不想让用户看到自己账上的余额变动过，因此我们在Try阶段冻结相关的余额，Confirm阶段进行转账，Cancel阶段进行余额解冻。这样可以避免A看到自己的存款减少了，但是最后转账又失败的情况。&lt;/p&gt;&lt;p&gt;下面是具体的开发详情&lt;/p&gt;&lt;p&gt;我们采用go语言，使用https://github.com/yedf/dtm这个功能强大又简单易用的分布式事务框架&lt;/p&gt;&lt;p&gt;创建两张表，一个用户余额表，另一个是冻结资金表，语句如下：&lt;/p&gt;&lt;pre&gt;&lt;span&gt;CREATE&lt;/span&gt; TABLE dtm_busi.&lt;span&gt;`user_account`&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;`id`&lt;/span&gt; int(&lt;span&gt;11&lt;/span&gt;) AUTO_INCREMENT &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`user_id`&lt;/span&gt; int(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;UNIQUE&lt;/span&gt; ,&lt;br/&gt;  &lt;span&gt;`balance`&lt;/span&gt; decimal(&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; DEFAULT &lt;span&gt;&#x27;0.00&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`create_time`&lt;/span&gt; datetime DEFAULT now(),&lt;br/&gt;  &lt;span&gt;`update_time`&lt;/span&gt; datetime DEFAULT now()&lt;br/&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; TABLE dtm_busi.&lt;span&gt;`user_account_trading`&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;`id`&lt;/span&gt; int(&lt;span&gt;11&lt;/span&gt;) AUTO_INCREMENT &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`user_id`&lt;/span&gt; int(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;UNIQUE&lt;/span&gt; ,&lt;br/&gt;  &lt;span&gt;`trading_balance`&lt;/span&gt; decimal(&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; DEFAULT &lt;span&gt;&#x27;0.00&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`create_time`&lt;/span&gt; datetime DEFAULT now(),&lt;br/&gt;  &lt;span&gt;`update_time`&lt;/span&gt; datetime DEFAULT now()&lt;br/&gt;);&lt;/pre&gt;&lt;p&gt;trading表中trading_balance记录的是交易中的金额。&lt;/p&gt;&lt;p&gt;最重要的业务代码包括冻结/解冻资金和调整余额，代码如下&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;adjustTrading&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(uid &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, amount &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}, error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  幂等、悬挂处理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  dbr := sdb.Exec(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;update dtm_busi.user_account_trading t join dtm_busi.user_account a on t.user_id=a.user_id and t.user_id=? set t.trading_balance=t.trading_balance + ? where a.balance + t.trading_balance + ? &amp;gt;= 0&quot;&lt;/span&gt;, uid, amount, amount)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; dbr.Error == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; dbr.RowsAffected == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, fmt.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;update error, balance not enough&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  其他情况检查及处理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;adjustBalance&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(uid &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, amount &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(ret &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}, rerr error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  幂等、悬挂处理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  这里略去进行相关的事务处理，包括开启事务，以及在&lt;span class=&quot;code-snippet__keyword&quot;&gt;defer&lt;/span&gt;中处理提交或回滚&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  dbr := db.Exec(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;update dtm_busi.user_account_trading t join dtm_busi.user_account a on t.user_id=a.user_id and t.user_id=? set t.trading_balance=t.trading_balance + ?&quot;&lt;/span&gt;, uid, -amount)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; dbr.Error == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; dbr.RowsAffected == &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    dbr = db.Exec(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;update dtm_busi.user_account set balance=balance+? where user_id=?&quot;&lt;/span&gt;, amount, uid)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  其他情况检查及处理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;业务有个重要约束balance+trading_balance &amp;gt;= 0，表示用户最终的余额不能为负。如果约束不成立，返回失败&lt;/p&gt;&lt;p&gt;然后是Try/Confirm/Cancel的处理函数，他们比较简单&lt;/p&gt;&lt;pre&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransInTry&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; (&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Trading(1, &lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransInConfirm&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; TransInConfirm(&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Balance(1, &lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransInCancel&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; TransInCancel(&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Trading(1, -&lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransOutTry&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; TransOutTry(&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Trading(2, -&lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransOutConfirm&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; TransInConfirm(&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Balance(2, -&lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransOutCancel&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; TransInCancel(&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Trading(2, &lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;到此各个子事务的处理函数已经OK了，然后是开启TCC事务，进行分支调用&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;err := dtmcli.TccGlobalTransaction(DtmServer, gid, func(tcc *dtmcli.Tcc) (*resty.Response, error) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    resp, err := tcc.CallBranch(&amp;amp;TransRe&lt;span class=&quot;code-snippet__string&quot;&gt;q{Amount: 30}&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransOutTry&quot;&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransOutConfirm&quot;&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransOutCancel&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != nil {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; resp, err&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; tcc.CallBranch(&amp;amp;TransRe&lt;span class=&quot;code-snippet__string&quot;&gt;q{Amount: 30}&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransInTry&quot;&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransInConfirm&quot;&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransInCancel&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  })&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;至此，一个TCC分布式事务全部完成。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;yedf/dtm项目中有完整的示例，您可以访问该项目，通过下面命令运行上述的示例&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;go run app/main.go tcc_barrier&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;回滚&lt;/h3&gt;&lt;p&gt;跨行转账有可能出现失败，例如A转账给B，但是B的账户由于各类原因异常，返回无法转入，这种情况会怎么样？我们可以修改代码，让我们的示例处理这种情况：&lt;/p&gt;&lt;pre&gt;RegisterPost(app, &lt;span&gt;&quot;/api/TransInTry&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *gin.Context)&lt;/span&gt; &lt;span&gt;(&lt;span&gt;interface&lt;/span&gt;{}, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; gin.H{&lt;span&gt;&quot;dtm_result&quot;&lt;/span&gt;:&lt;span&gt;&quot;FAILURE&quot;&lt;/span&gt;}, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;})&lt;/pre&gt;&lt;p&gt;因为B账户的异常，会导致整个全局事务的回滚，时序图如下：&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.219430485762144&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9m9OfQX94VvJvhjNGBvp23oCHMicZHFfWSnf5utwia7X1VIzY6HVnDTAVnqHHiahTnT6pvYXicx3nickq8rIy61Sj7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1194&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个时序图与成功的时序图非常相近，主要差别在于TransIn返回了失败，后续的操作由Confirm变成了Cancel。&lt;/p&gt;&lt;h3&gt;小结&lt;/h3&gt;&lt;p&gt;这篇文章完整的介绍了TCC事务的全过程，包括TCC事务的业务设计要点、一个成功完成的例子、一个成功回滚的例子。相信读者到这里，已经对TCC有了很清晰的理解。&lt;/p&gt;&lt;p&gt;全局事务进行过程中，可能出现各类网络异常，例如收到重复的Cancel或者未收到Try却收到Cancel等。这类难题的处理技巧，以及其他分布式事务模式如SAGA、XA等，可以参考我的另一篇文章《分布式事务最经典的七种解决方案》，里面有全面的讲解&lt;/p&gt;&lt;p&gt;文中使用的例子节选自github.com/yedf/dtm，该框架功能强大又简单易用。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;支持多种事务模式：TCC、SAGA、XA、事务消息； &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;跨语言支持，已支持 golang、python、PHP、nodejs等语言的客户端。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提供子事务屏障功能，优雅解决幂等、悬挂、空补偿等问题。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;阅读完此篇干货，欢迎大家访问https://github.com/yedf/dtm项目，给颗星星支持！&lt;/p&gt;&lt;p&gt;您可以点击左下角的“阅读原文”，直接访问项目&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0f95ec923378a255b6f997782028bf36</guid>
<title>一名架构师，他要如何做微服务技术选型？</title>
<link>https://toutiao.io/k/r3xffsg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一名架构师，需要规划产品技术路线，负责技术选型。而技术栈选型主要参考以下几个标准：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;安全稳定，不能经常被爆出安全漏洞&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;开源社区活跃度，加入Apache的组件优先考虑&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一线互联网公司落地产品，有大公司为其背书&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文档阅读性好&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇为大家带来微服务架构的后端技术选型，当你需要进行技术选型时，可以参照他来设计自己的决策树。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开发语言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;JAVA&lt;br/&gt;&lt;/span&gt;主流编程语言，适合构建大型后台服务&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Golang&lt;br/&gt;&lt;/span&gt;Go语言是谷歌2009发布的第二款开源编程语言。专门针对多处理器系统应用程序的编程进行了优化，使用Go编译的程序可以媲美C或C++代码的速度，而且更加安全、支持并行进程。Google对Go寄予厚望。其设计是让软件充分发挥多核心处理器同步多工的优点，并可解决面向对象程序设计的麻烦。目前作为云计算领域的不二之选！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开发IDE&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;IntelliJ IDEA&lt;br/&gt;&lt;/span&gt;jetbrains公司旗下产品，智能代码助手、J2EE支持、各类版本工具(git、svn、github等)、JUnit、CVS整合等。多语言支持，免费版只支持JAVA等少数语言。旗舰版为收费版本，同时提供免费版（功能上较旗舰版有减少）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;VS Code&lt;br/&gt;&lt;/span&gt;VS Code是一款免费的、开源的、高性能的、跨平台的、轻量级的代码编辑器，同时，在性能，语言支持、开源社区方面也做的很不错！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开发技术&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;微服务框架&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Spring Cloud / Spring Cloud alibaba&lt;br/&gt;&lt;/span&gt;Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，提供了全套微服务解决方案。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;RPC框架&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;RestTemplate&amp;amp;WebClient&lt;br/&gt;&lt;/span&gt;Spring RestTemplate 是 Spring 提供的用于访问 Rest 服务的客户端&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;gRPC&lt;br/&gt;&lt;/span&gt;GRPC是google开源的一个高性能、跨语言的RPC框架，基于HTTP2协议，基于protobuf 3.x的一款rpc框架。多种语言支持；支持链接复用，集群内可采用长链接；性能简单调优后，可满足多数业务场景需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Dubbo&lt;br/&gt;&lt;/span&gt;&lt;span&gt;阿里巴巴&lt;/span&gt;开源项目，&lt;span&gt;提供了六大核心能力：面向接口代理的高性能RPC调用，智能容错和负载均衡，服务自动注册和发现，高度可扩展能力，运行期流量调度，可视化的服务治理与运维。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;分布式事务&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Seata&lt;br/&gt;&lt;/span&gt;阿里巴巴重点开源项目、Java开发、性能高、无锁、代码无侵入AT模式0代码、支持MT模式非事务型存储、社区活跃，版本更新快，使用简单！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;流量控制、熔断降级&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Sentinel&lt;br/&gt;&lt;/span&gt;阿里巴巴重点开源项目、Java开发、二次开发方便、社区活跃&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;API网关&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Spring Cloud Gateway&lt;br/&gt;&lt;/span&gt;Spring首选、方便二次开发、支持异步非阻塞&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Kong&lt;br/&gt;&lt;/span&gt;Kong是一款基于Nginx_Lua模块写的高可用，易扩展由Mashape公司开源的API Gateway项目。性能优异，插件丰富基本开箱即用，二开有一定的使用门槛。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;配置中心&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Nacos&lt;br/&gt;&lt;/span&gt;阿里巴巴重点开源项目、可同时作为注册/中心配置中心，简化技术栈、有完善管理界面、Java开发、二次开发方便、社区活跃、还在不断更新迭代。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Apollo&lt;br/&gt;&lt;/span&gt;是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;服务发现&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Nacos&lt;br/&gt;&lt;/span&gt;阿里巴巴重点开源项目、可同时作为注册/中心配置中心，简化技术栈、有完善管理界面、Java开发、二次开发方便、社区活跃、AP/CP模式，还在不断更新迭代。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Zookeeper&lt;br/&gt;&lt;/span&gt;ZooKeeper 是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件；性能可以满足较大规模的服务发现和配置中心，生效实时性高，不适合大规模实时数据同步场景；CP模式。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;监控&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Prometheus&lt;br/&gt;&lt;/span&gt;功能较为全面的开源监控系统，CNCF技术栈、社区活跃&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Grafana&lt;br/&gt;&lt;/span&gt;Grafana是一个开源的度量分析与可视化套件。纯 Javascript 开发的前端工具，通过访问库（如InfluxDB），展示自定义报表、显示图表等。大多使用在时序数据的监控方面，如同Kibana类似。Grafana的UI更加灵活，有丰富的插件，功能强大。界面简洁美观，支持自由定制，社区有丰富的Dashboard支持。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SkyWalking&lt;br/&gt;&lt;/span&gt;分布式追踪系统，国产链路跟踪、社区文档丰富，Apache顶级项目。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;日志&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;ELK&lt;br/&gt;&lt;/span&gt;分布式服务日志处理，围绕elasticsearch构建的日志生态系统。使用广泛，扩展方便。配合kibana可以很方便对日志进行检索，定位线上问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;数据库中间&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;ShardingSphere&lt;br/&gt;&lt;/span&gt;Apache ShardingSphere 定位为关系型数据库中间件，支持数据分片、读写分离、多数据副本、数据加密、影子库压测等功能；社区文档丰富，目前已经成为Apache顶级项目。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;序列化&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Jackson&lt;br/&gt;&lt;/span&gt;Spring首选、稳定&lt;span&gt;安全&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;protobuf&lt;br/&gt;&lt;/span&gt;Protocol Buffer( 简称Protobuf) 是google开源的一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或RPC 数据交换格式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不建议使用fastjson&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开发工具&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;构建工具&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Maven&lt;br/&gt;&lt;/span&gt;主流的项目构建和管理工具，Maven是 Apache 下的一个纯 Java 开发的开源项目，是一个项目构建和管理的工具；它提供了帮助管理 构建、文档、报告、依赖、scms、发布、分发的方法。可以方便的编译代码、进行依赖管理、管理二进制库等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Gradle&lt;br/&gt;&lt;/span&gt;Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。Gradle 构建脚本使用的是 Groovy 或 Kotlin 的特定领域语言来编写,它可以自动处理包相依关系，自动处理布署问题，条件判断写法直觉。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;接口请求工具&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;postman&lt;br/&gt;&lt;/span&gt;postman是一款功能强大的网页调试和模拟发送HTTP请求的Chrome插件，支持几乎所有类型的HTTP请求，操作简单且方便。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;容器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Docker&lt;br/&gt;&lt;/span&gt;是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。使用Docker可以带来以下几个优势：1. 更快速的交付和部署；2. 高效的部署和扩容；3. 更高的资源利用率；4. 简单的管理&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;集群管理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Kubernetes&lt;br/&gt;&lt;/span&gt;Kubernetes一个用于容器集群的自动化部署、扩容以及运维的开源平台。通过Kubernetes,你可以快速有效地响应用户需求;快速而有预期地部署你的应用;极速地扩展你的应用;无缝对接新应用功能;节省资源，优化硬件资源的使用。为容器编排管理提供了完整的开源方案。生态丰富，易扩展；功能丰富稳定，大公司背书；易上手。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;镜像管理工具&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Harbor&lt;br/&gt;&lt;/span&gt;Harbor是个开源制品（artifact）仓库，是首个原创于中国、并且成为 CNCF 毕业级的开源项目。用户可通过策略和基于角色的访问控制来保护制品（如容器镜像、Helm Chart等），扫描镜像并避免受安全漏洞的危害。Harbor扩展了开源项目 Docker Distribution，添加了用户所需的功能（例如安全性，身份，漏洞扫描和管理）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;运行环境&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;操作系统：&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Linux&amp;lt;CentOS 7+&amp;gt;&lt;br/&gt;&lt;/span&gt;Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Web服务器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Tomcat&amp;lt;8+&amp;gt;&lt;/span&gt;&lt;br/&gt;Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Nginx&lt;/span&gt;&lt;br/&gt;轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;NodeJs&lt;br/&gt;&lt;/span&gt;服务端JavaScript环境&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>255b09cb9affaf22a863dbfc14846a60</guid>
<title>字节跳动开源的，运行在 macOS 上，专注于移动端研发的工具链应用</title>
<link>https://toutiao.io/k/8v20436</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b1e89bbd2feff26c2c2bce6c4739fde0</guid>
<title>问题排查神器：Git Bisect 命令实战分享</title>
<link>https://toutiao.io/k/8gt9dxn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;摘要：前段时间 Git 发布正式版本 2.33.0 遇到一个客户端与服务端不兼容的一个问题，在排查问题的过程中又一次用到了 Git bisect 命令，解决问题的同时结合近期的一些认知，又刷新了自己对 bisect 命令的认识，bisect 可以结合一些场景发挥其妙用，借此分享下 bisect 命令以及 bisect 命令的一些其它使用方式的思考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;背景&lt;/h3&gt;&lt;p&gt;Git 于 8 月 17 号发布了 2.33.0 正式版本，本次的发布内容可以参见：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;https://gitee.com/mirrors/git/blob/master/Documentation/RelNotes/2.33.0.txt&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;不幸的是，在 2.33.0 版本发布没多久，就有用户反馈 2.33.0 版本的 Git 在使用 SSH 通信协议的时候无法进行正常的 Clone/Fetch/Push 操作，具体的现象如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;p&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Cloning into &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;xxxxxx&#x27;&lt;/span&gt;...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fetch-&lt;span class=&quot;code-snippet__keyword&quot;&gt;pack&lt;/span&gt;: unexpected disconnect &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; reading sideband packet&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fatal: early EOF&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fatal: fetch-&lt;span class=&quot;code-snippet__keyword&quot;&gt;pack&lt;/span&gt;: invalid &lt;span class=&quot;code-snippet__keyword&quot;&gt;index&lt;/span&gt;-&lt;span class=&quot;code-snippet__keyword&quot;&gt;pack&lt;/span&gt; output&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;看到这个提示第一时间就想到 Git 2.33.0 的更新日志里面好像是有关于 Fetch 和 Sideband 相关的更新，于是前往更新日志发现了如下的两个信息：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;p&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; * &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;git fetch&quot;&lt;/span&gt; over protocol v2 left its side of the &lt;span class=&quot;code-snippet__keyword&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;open&lt;/span&gt; after&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   it finished speaking, which unnecessarily wasted the resource on&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   the other side.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   (merge ae1a7eefff jk/fetch-&lt;span class=&quot;code-snippet__keyword&quot;&gt;pack&lt;/span&gt;-v2-half-&lt;span class=&quot;code-snippet__keyword&quot;&gt;close&lt;/span&gt;-early later to maint).&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; * The side-band demultiplexer that is used to display progress output&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   from the remote end did &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; clear the line properly &lt;span class=&quot;code-snippet__keyword&quot;&gt;when&lt;/span&gt; the end of&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   line hits at a packet boundary, which has been corrected.&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;但是，为了进一步定位此问题的源头，方便精准的定位问题，所以使用了 Git Bisect 命令进行测试，找到具体的原因，才能够更好的去排查分析问题并加以解决。&lt;/p&gt;&lt;h3&gt;Git Bisect 介绍&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;git bisect 官方文档：https://git-scm.com/docs/git-bisect&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;git bisect&lt;/code&gt; 命令的作用是使用二分查找法找到具体引起问题的 Commit。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.31954887218045114&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdLecUwnIj1q5SJgic6zVgFOK30w8MFYrzT7g8SIsMuh2x8FZWtGucnCeemOjC144ZHrfDH4iaq5pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;532&quot; title=&quot;在这里输入图片标题&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;上图引自阮一峰的网络日志：http://www.ruanyifeng.com/blog/2018/12/git-bisect.html&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;简单来说就是我们给到 &lt;code&gt;bisect&lt;/code&gt; 命令一个范围，它会自动的帮我们确认当前范围的中点，在这个中点上进行测试，并且告诉它这是一个好的提交（good commit）还是一个坏的提交（bad commit），进而来缩小查找范围，通过二分查找，我们就可以很快的定位到出问题的 Commit 以方便我们针对性的解决问题。&lt;/p&gt;&lt;h3&gt;问题排查&lt;/h3&gt;&lt;p&gt;由于我们已经确定了这个问题是 Git 2.33.0 版本引起的（因为测试了 Git 2.32.0没问题呀 :D），所以在使用 &lt;code&gt;bisect&lt;/code&gt; 命令的时候，这个版本范围就是&lt;code&gt;v2.32.0&lt;/code&gt; ~ &lt;code&gt;v2.33.0&lt;/code&gt;，我们只要找到具体引入这个问题的提交，就能够更精准的定位问题，从而避免盲目的猜测和常识。&lt;/p&gt;&lt;h4&gt;进入 bisect 模式&lt;/h4&gt;&lt;p&gt;我们下载 Git 最新源码，并且使用 &lt;code&gt;git bisect start&lt;/code&gt; 命令来进入 bisect 模式&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.11171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdLecUwnIj1q5SJgic6zVgFvWwnAXYUUfbiaias3HwQPEHVyu8lwicvOOlVD1hCiaUice4HqjklDZ4ISeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;git bisect start&lt;/code&gt; 命令指定了一个范围，并且 bisect 命令告诉我们，在这两个版本之间一共有304个提交，大概需要8步就可以定位到具体的 commit，这就是二分查找的好处。&lt;/p&gt;&lt;h4&gt;开始第一次测试&lt;/h4&gt;&lt;p&gt;我们使用 &lt;code&gt;make&lt;/code&gt; 命令进行 Git 源码编译构建，编译构建完成后，就可以使用 Git 提供的一个 wrapper 进行 Git 命令的调用，这里我们可以加上 &lt;code&gt;-j4&lt;/code&gt; 参数来增加编译构建的速度。命令完成后，我们就可以使用 &lt;code&gt;./bin-wrappers/git&lt;/code&gt; 来进行测试：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.16875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdLecUwnIj1q5SJgic6zVgFhhtU1DicXgTWoXE2t64NANtKWXedjiamdJpLZLj6yYibTVlZria0J33oDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;哦吼，还是不行，那么我们可以确定导致问题出现的 Commit 是出现在这次提交之后的提交里面。当然，这些不用我们自己来去记，使用 &lt;code&gt;git bisect bad&lt;/code&gt; 命令标记即可：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.11171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdLecUwnIj1q5SJgic6zVgFtSHLaNgogTPDeT86wI5e5BXaWLL3IDA5clfUic1sBkoNbmuYcNicpPYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;标记完成后 Git 就告诉我们，接下来还有大概7次的测试就可以定位到引发问题的 Commit，如果遇到的提交是可以通过的，那么需要使用 &lt;code&gt;git bisect good&lt;/code&gt; 命令标记。&lt;/p&gt;&lt;h4&gt;自动化的 bisect&lt;/h4&gt;&lt;p&gt;以上的步骤我们只需要重复的进行即可，但是很明显根本不需要人为的去跟进，作为一个新生代农民工，我们需要能够自动化可自动化的一切，所以一方面是为了省时间，另一方面是为了避免人为的失误，我们可以使用 &lt;code&gt;git bisect run&lt;/code&gt; 命令来自动化的进行执行。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;p&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;git bisect run my_script &lt;span class=&quot;code-snippet__built_in&quot;&gt;arguments&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code&gt;bisect&lt;/code&gt; 命令是以 &lt;code&gt;my_script&lt;/code&gt; 脚本的返回值来确定当前的提交是好是坏，来看看官方的介绍：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note that the script (my_script in the above example) should exit with code 0 if the current source code is good/old, and exit with a code between 1 and 127 (inclusive), except 125, if the current source code is bad/new.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;简单来说就是：&lt;/p&gt;&lt;p&gt;所以我们来根据这个规则写个脚本，但首先我们需要看看 Clone 失败的返回值是多少&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.20625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdLecUwnIj1q5SJgic6zVgFJ91oICuEeH3cwI5OxSenzvX0ibaM8422UdVdMhhfOoiaAcM8Nmy8TLcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;OK, let&#x27;s do it via Shell Scripts ~~~&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;p&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#!/bin/zsh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;make -j4 &amp;amp;&amp;amp; ./bin-wrappers/git &lt;span class=&quot;code-snippet__built_in&quot;&gt;clone&lt;/span&gt; git@gitee.com:/kesin/taskover.git `git &lt;span class=&quot;code-snippet__built_in&quot;&gt;log&lt;/span&gt; -n 1 --pretty=format:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%H&quot;&lt;/span&gt;`&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s=$?&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;code-snippet__variable&quot;&gt;$s&lt;/span&gt; -eq 0 ]; &lt;span class=&quot;code-snippet__keyword&quot;&gt;then&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__built_in&quot;&gt;exit&lt;/span&gt; 0;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; [ &lt;span class=&quot;code-snippet__variable&quot;&gt;$s&lt;/span&gt; -eq 128 ]; &lt;span class=&quot;code-snippet__keyword&quot;&gt;then&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__built_in&quot;&gt;exit&lt;/span&gt; 1;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__built_in&quot;&gt;exit&lt;/span&gt; 128;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;然后我们来执行这个脚本自动的进行二分查找定位：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.28203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdLecUwnIj1q5SJgic6zVgF3JNq3cpTUWDcUPibcJnckOnibAYK21DN7dDhaP22P3PKtCicWxjweH3rA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;这个时候 &lt;code&gt;bisect&lt;/code&gt; 命令就会自动的执行编译构建和 Clone 过程，并且根据返回值自动的确定 Commit 的范围：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdLecUwnIj1q5SJgic6zVgF60wBqrsQXp2a7c9T48IuwLnvjAguoLmDWwAlUM8zvIdBlQIZeaWOKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;这里是 &lt;code&gt;bisect run&lt;/code&gt; 命令根据我们写的脚本自动的判定当前提交是一个坏提交，进而自动的进行下一步。当然，在二分查找的过程中也会遇到好的提交，&lt;code&gt;bisect&lt;/code&gt; 命令将会根据我们提供的返回值自动的缩小范围： &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdLecUwnIj1q5SJgic6zVgFAFbiaVE6lCpeMJ1IFBJYLKTHlG49vN7hiaUeeaTDCqwVPiaGiaYhicuE3LQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;最终，&lt;code&gt;bisect&lt;/code&gt; 将会为我们定位到第一个出现此问题的提交：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdLecUwnIj1q5SJgic6zVgFuJ1WbrXlGHmfqSibQ8QWvaaibvGMA9Xf5Ynf8cywX8HoxX8XrCsW8Lsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ae1a7eefffe60425e6bf6a2065e042ae051cfb6c is the first bad commit&lt;/span&gt;&lt;/p&gt;&lt;p&gt;并且 &lt;code&gt;bisect&lt;/code&gt; 命令也把这个导致此问题的提交的详细信息打印了出来，接下来我们就可以根据这个提交相关的改动来分析我们的问题。&lt;/p&gt;&lt;h3&gt;分析并解决问题&lt;/h3&gt;&lt;p&gt;上面我们使用 &lt;code&gt;bisect&lt;/code&gt; 命令找到出问题的提交：https://gitee.com/mirrors/git/commit/ae1a7eefffe60425e6bf6a2065e042ae051cfb6c&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;p&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;close&lt;/span&gt;(fd[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fd[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;分析下提交的变更我们可以知道，这次变更主要是为了优化网络连接的占用，Git V2 via SSH 在传输的过程中，当客户端接收完数据后，还需要进行一系列的本地操作，这个操作过程已经不需要再维持跟服务端的链接了，所以需要在客户端发送完数据后就给服务端发送 FIN，进入半双工状态，等待服务端发送完数据后关闭连接即可，而无需经过漫长的本地操作后才关闭连接，从而避免了不必要的网络资源占用。&lt;/p&gt;&lt;p&gt;知道问题的原因之后，我们分析 Gitee 的 SSH 分发代理，发现我们的 SSH 代理在接收到客户端的 FIN 之后马上就会关闭这个 SSH 链接，进而导致上面的问题：客户端还没有接收完数据链接就提前断开了&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.1875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdLecUwnIj1q5SJgic6zVgF6BOaAWtlLKRfLH62IGDAic4yU6cgMb9ZlWMmMkibRJyzmHTk2WxEROlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;解决的方式也很简单，在收到客户端的 FIN 之后不马上进行网络连接的关闭，而是等数据发送完之后才进行关闭。&lt;/p&gt;&lt;h3&gt;Git Bisect 使用的思考&lt;/h3&gt;&lt;p&gt;现在的组织都在推崇提升研发效能，推崇 DevOps 文化及工具，是不是可以把 Bisect 这种逻辑用到整个流程中呢？&lt;/p&gt;&lt;p&gt;比如在自动化测试中，我们遇到一些测试不通过的 Case 的时候是直接失败的，虽然告知了具体的用例以及相关的输入输出，但是如果能够通过 Bisect 命令自动的找出第一个出现此问题的提交，那么对于组织无疑是有价值的：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Case 不通过的同时直接给出了 Bad Case 的 Owner，精准通知，快速修复&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在集中测试中，可以避免过度的通知，从而干扰到本来无关的人员&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;避免问题不明确，相互推诿，产生不良情绪，影响团队气氛&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;...&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;关于算法思想的思考&lt;/h3&gt;&lt;p&gt;Git Bisect 所采用的二分查找思想我们耳熟能详，在 Git 源码中，同样采用二分查找算法的地方还有 Git Pack &lt;code&gt;idx&lt;/code&gt; 文件的查找，通过精妙的扇区划分，加上二分查找算法快速定位到&lt;code&gt;object&lt;/code&gt;的偏移量。除此之外，Git 中还采用了 SHA-1 Hash 算法、不同的 Diff 算法、大量的递归等。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;p&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;bsearch_hash&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *hash, &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint32_t&lt;/span&gt; *fanout_nbo,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *table, &lt;span class=&quot;code-snippet__keyword&quot;&gt;size_t&lt;/span&gt; stride, &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint32_t&lt;/span&gt; *result)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint32_t&lt;/span&gt; hi, lo;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    hi = ntohl(fanout_nbo[*hash]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    lo = ((*hash == &lt;span class=&quot;code-snippet__number&quot;&gt;0x0&lt;/span&gt;) ? &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; : ntohl(fanout_nbo[*hash - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (lo &amp;lt; hi) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; mi = lo + (hi - lo) / &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; cmp = hashcmp(table + mi * stride, hash);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!cmp) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (result)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                *result = mi;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (cmp &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            hi = mi;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            lo = mi + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (result)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        *result = lo;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;但是在实际编码的过程中，有多少开发者能够拍着胸脯说：在编码过程中，我脑中有模型，心中有算法，能够以高效的方式、采用合理的逻辑去编写代码。&lt;/p&gt;&lt;p&gt;这个答案我想不言自明吧。&lt;/p&gt;&lt;p&gt;研究开源项目是一个很好的学习路径，能够从大量优秀的代码中学习到优秀的实践和思想，从研究学习到参与贡献，相比于这个过程，结果倒显得不那么重要了。&lt;/p&gt;&lt;h3&gt;最后&lt;/h3&gt;&lt;p&gt;善用工具，乐于思考，多多来 Gitee（https://gitee.com ）学习研究开源项目并贡献代码。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.33046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bcma1ubkXrKdvDicelJ4KaAmLsSJA5QeIxZ6lOln6xFUGw6SeXWegPGq6rGnNiaEhrzDlLQFsmzdo4gvksYLv8DA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;转载请保留出处：微信公众号「Zoker 随笔」（zokersay）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>30ad837142420053be60b29d6191126f</guid>
<title>第七届 RTE 大会开启报名！20+ 论坛及活动展露实时互联网万象</title>
<link>https://toutiao.io/k/1qqzb3i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                                    


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;8 月 26 日，由声网Agora 及 RTC 开发者社区主办的第七届 RTE 实时互联网大会正式启动报名，本届大会以“万象频道”为主题，并将于 10 月 22 日- 23 日在北京望京凯悦酒店举办。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBG5HjcSLUtWayMEb3TeZABCraN9iaica0LA4VwGh2HX9jz67M2AFbqmOicM0pJg5Z1zEg8TMXjsVXLHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2015 年，我们决定在国内推出第一个针对实时音视频的技术大会——“RTC 大会”，由 2 个论坛和 1 个 Workshop 组成。犹记得那天，我们交作业的忐忑心情在开发者们的热情回应下消散，并约定：一年一会，万象更新。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;六年间，随着实时音视频渗透各个行业，以 RTC 技术为支撑的实时互联网场景、产品在全球各地万象涌现。在这样的背景下，去年我们把 RTC 大会更名为“RTE 大会”并以全直播形式展现。今年我们将持续全方位升级议程，推出实时互联网全生态的线下论坛及活动共计 &lt;span&gt;&lt;strong&gt;&lt;span&gt;20&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; 余场，&lt;strong&gt;&lt;span&gt;覆盖技术开发、行业观察、创业投资、趋势洞察等多维度话题，更有 Metaverse、VR、AR 等时下最热门场景的现场体验。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;活动现场将邀请来自&lt;strong&gt;&lt;span&gt;中国信息通信研究院泰尔终端实验室、&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;Google、微软中国、AWS 亚马逊云科技、小米、HTC Vive、OPPO、咪咕音乐、奇虎 360、金山办公、NVIDIA、雅乐集团、微帧科技、五源资本、GGV Capital、顺为资本、高瓴创投、多鲸资本、奇绩创坛&lt;/span&gt;&lt;/strong&gt;等政府机构、国内外知名企业、三方机构的 150+ 技术领袖、200+ 创业者及投资人、500+ 实时互联网领域产品经理、数千名开发者一起探索实时互联网未来发展新机遇。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近年来，实时互联网带来的变革正在快速发酵，社交直播、游戏语音、教育信息化、智能穿戴等场景迅速崛起，让实时互动渗透进人们生活娱乐的方方面面。而在今年，全景教室、智能作业灯、实时合唱、Watch Party、互动播客以及 Metaverse 元宇宙等基于实时互联网打造的全新场景应运而生，展现出实时互联网所蕴藏的无穷创造力与想象空间，一个森罗万象的全新世界已初现雏形，这与本次 RTE 大会的主题“万象频道”寓意也不谋而合。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBG5HjcSLUtWayMEb3TeZABCFZTEgpvvG2EZesCTLVkkBuuTey9PCVON2GmNMe8xwMprloicbfOlScQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBG5HjcSLUtWayMEb3TeZABCoOH0w0XIFnUHGrtCxzNtNYDGKeLsK9kXxOvQaw3PU34ALd29OvnBqA/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;ikka&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本届 RTE 大会围绕不同技术内容和维度设置了&lt;strong&gt;&lt;span&gt;五场技术分论坛&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;、一场技术生态 Workshop、一场开发者 Party，&lt;/span&gt;&lt;/strong&gt;让与会开发者不仅能听到技术专家干货分享，还能在Workshop 上进行 RTC 技术实操，更能在开发者 Party 之夜上与同行进行技术深度交流与探讨。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术分享一直都是 RTE 大会的核心，也最受开发者关注。本次大会设置了&lt;strong&gt;&lt;span&gt;音频技术、大前端与应用开发、网络架构、视频技术、AI 技术&lt;/span&gt;&lt;/strong&gt;共五场技术论坛，将云集 150+ 极具前瞻性的技术专家和全球互联网公司技术领袖，进行前沿技术和实践分享。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;音频技术专场将主要围绕实时互动场景下的音频处理、质量优化，以及目前最受关注的 AI Codec 话题，邀请一线的技术专家进行分享；在视频技术专场，开发者不仅会听到主流视频编解码标准的技术现状与未来计划，还会看到 HDR、VR 、人像分割等技术在实时互动场景下的落地实践；网络传输与架构专场则会邀请资深架构师分享从传输层到架构设计、AI Ops 等不同层面的技术经验；AI 技术应用专场会深度剖析应用在不同实时互动场景中的 AI 算法；大前端与应用开发，则会聚焦实时互动应用中的前端、移动端技术的实践。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了干货分享外，23 日下午和晚上分别有 RTE 技术生态 Workshop 和开发者 Party。Workshop 将会邀请声网资深 SDK 架构师与开发者一起在现场进行编写代码的实际操作，帮助开发者更加灵活的应对不同实时互动场景下的需求；晚上的开发者 Party，则是具有轻松氛围的深度技术交流平台，近百名音视频实时互动领域的开发者一起交流互动、结识同行，共同探索实时音视频技术边界。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBG5HjcSLUtWayMEb3TeZABCZiaakIkRR0pA5EXd1EM7VqXHv1M28t1zL1dcbWrFp65DfbIvx9QPdyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在为期 2 天的 RTE 大会期间，将有泛娱乐&amp;amp;出海、IoT、教育三场行业论坛，和一场创新论坛。泛娱乐&amp;amp;出海论坛将聚焦在实时互动的助力下泛娱乐平台如何释放声音新力量以及社交、游戏企业如何在出海中提升竞争壁垒；IoT 论坛围绕“ RTE+IoT ”话题，邀请 XR、智能机器人、智能家居等领域的企业与专家一起探讨 RTE 如何打破虚拟与现实的边界，与 5G、XR、AI、IoT等技术擦出火花；教育论坛则针对不同赛道的教育创新场景，共同探讨实时互动对未来教育场景和形态带来的改变和助力，这3场行业论坛都将输出各自领域最新的深度洞察和思考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;创新专场则由&lt;strong&gt;&lt;span&gt;“创新场景大赛决赛”&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;“Startup 创新论坛”&lt;/span&gt;&lt;/strong&gt;组成，其中“创新场景大赛决赛”有 8 家来自超音速计划脱颖而出的企业，在现场将展示在实时互动赛道最前沿的新场景产品和创业计划。现场晋级的企业将获得由声网Agora、五源资本、GGV Capital 、北京朝阳海外学人中心、上海杨浦知识创新区投资发展有限公司设立的多项大奖；前三名更有机会获得五源资本的百万美元投资。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时在下午的创新论坛上，声网Agora 将发布与众多创业者一同成长过程中总结出的RTE新场景创业洞察和预判，并邀请行业内的专家、学者共同探讨实时音视频技术能够对未来场景带来的巨大变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBG5HjcSLUtWayMEb3TeZABCNyicbTThdzSWGPf05oiaFFLFhgD0MNoMUVmALeqz3xD4Z6JMHzvAuWkg/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;WKly&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今年 RTE 大会，现场还将通过 Metaverse &amp;amp;万物互联、RTE 2 大展台，以及 Product Channel 专场集中展示基于实时音视频技术的未来生活、新应用场景、新产品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;元宇宙概念爆发受到企业追捧，强调虚实结合体验的 Metaverse 被寓为下一代互联网形态，但这过程的实现需要实时音视频技术的支撑。此次大会  Metaverse &amp;amp;万物互联展台上，将会有最炫酷的 VR、AR、IoT 设备及虚拟偶像，让与会观众真切实意体验下未来万物互联的新生活场景和娱乐场景。RTE 展台上将展示声网Agora 及合作伙伴在各行业的解决方案、落地场景以及声网Agora 自身最新的技术产品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不仅如此，随着 RTE 行业迎来爆发期，面对持续增长的线上实时互动需求，声网Agora 也在不断探索前沿技术，丰富 RTE 产品版图，以契合开发者与客户多样化的创新需求。在 10 月 22 日下午的&lt;strong&gt;&lt;span&gt;“ Product Channel ”&lt;/span&gt;&lt;/strong&gt;专场，声网Agora 在实时互联网行业的前沿产品及场景解决方案将集中发布亮相，现场还将分享 RTE-PaaS 未来发展的思考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBG5HjcSLUtWayMEb3TeZABCTMplTB9m9Pia2s0mVTUNo1zt6hKQzE9I7yFm9KeOCuPUOYo9mUorVaQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为实时互动云赛道的开创者和引领者，声网Agora 一直以来都在身体力行地积极推进 RTE 开发者生态和行业生态的构建，并靠着对技术布道的热忱和开发者们的热情，已经连续成功举办了六届 RTE 大会，截止目前共吸引了数万名全球开发者、行业大咖、技术专家、投资人参会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这七年间，RTE 大会快速发展并受到开发者和行业内的高度关注。2020 年 RTE 大会因疫情采取线上线下结合方式，并开启了“  9 天 12 场”的技术前瞻分享，吸引了数千名全球开发者参与，现场更是邀请了来自美团、搜狗、爱奇艺、饿了么、掌门教育、豌豆思维、 伯索云学堂、伊对、Rokid、驭势科技等超过 40 家企业与组织机构的 70+ 技术专家、行业大咖、投资人等带来干货十足的实时互联网前瞻分享。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBG5HjcSLUtWayMEb3TeZABCbFp9toUlct3C6AKoLev5c69fWrCzQLCRArpNg5c0P99Hu3EGtqnIGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBG5HjcSLUtWayMEb3TeZABC0dib8rtkh6aKPHF0w1Zwc3ZGRRLXiasvPe2TAtxsFGd5dhtPKqMGX9TQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2019 年 RTC 大会吸引了超过 3000 人次参会，现场邀请了万维网联盟 (W3C) 技术项目总经理Philippe Le Hégaret、华为媒体技术实验室首席科学家王田等 100 余名技术领袖、音视频技术大咖、产品创新专家，以及来自全球不同地区的 3000 多名开发者一同交流分享，共同探讨、定义实时音视频技术的未来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBG5HjcSLUtWayMEb3TeZABC6JzBOgTch1UIdV31ib931QnpkPiabnmMia9fDkwDyDe048Qp6b03Dp7HA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBG5HjcSLUtWayMEb3TeZABCfzBNO8mxM0Ll7hVTSw1tRYGoUicObHicYoKIqunTuzeDSgTcy97CFmKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;七年时间，从 RTC 到 RTE ，声网Agora 凭借对实时音视频技术的深耕和热忱打造了实时互联网行业盛宴。未来RTE大会，相信将会有越来越多的开发者、创业者、合作伙伴参与进来，共同推动实时互动行业的繁荣发展。同时，我们后面将陆续解锁重磅嘉宾、公布十三大论坛议程以及大会亮点，敬请期待。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YO07vjlZVBEpKWxnOzkkA70T6zIZUj9USEFFncicSZSGMOHSUbvH5XSQfmmOptTQlKTmOicQVL999ib0cEGEg7g0g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;695&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>