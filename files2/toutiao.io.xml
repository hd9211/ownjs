<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f8028b4fcba6fdffdceecadd411cf538</guid>
<title>欢迎加入读者圈子，一起交流！</title>
<link>https://toutiao.io/k/mtrqmru</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;strong&gt;欢迎加入读者圈子，一起交流！&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;圈子剧透&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、600+圈子成员，以中高级程序员为主，更有架构师、CTO坐镇交流；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、1000+优质主题，数十G独家资料，每日分享，精挑细选；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、全年52期专属邮件周报，让你轻松掌握业界资讯、技术干货，提升认知水平；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、全年52本好书共读，让你花最少的时间，获取更好的知识；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;心动不如行动，赶快加入吧！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6b3d7937e0590aa1774f4ed47d47b3c0</guid>
<title>我们用了一个周末，将 370 万行代码迁移到了 TypeScript</title>
<link>https://toutiao.io/k/f0k1f3t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6546875&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkXxRibhFyECpxpL8zzEgiay6xr4cCALjHuObKCg8sWAibMQNLuXdt3GqtyyZrIVdY5CFFj7Kgh1S6srQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;作者 | Andrew Lunny&lt;/section&gt;&lt;section&gt;译者 | 核子可乐&lt;/section&gt;&lt;section&gt;策划 | Tina&lt;/section&gt;&lt;p&gt;TypeScript 是增长最快的语言之一，最近几年逐渐成为很多大厂的首选工具。最近，Stripe 将最大的 JavaScript 代码库（用于支持 Stripe Dashboard 功能）从 Flow 迁移到了 TypeScript。于是通过单一 PR 请求，转换了超过 370 万行代码。第二天，几百名工程师快速跟进，开始为自己的项目编写 TypeScript。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4329896907216495&quot; data-type=&quot;png&quot; data-w=&quot;485&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VMWOb2bsib7H0UAXEqAHYibibYbFuzUbib1KmzUGiabRk6dlTSyyzasD5hOnTicYY9hFn5EsLjaib3lTdibzA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;TypeScript 目前已经成为 JavaScript 类型检查的客观标准，Stripe 已经把这次使用的 TypeScript 转换工具分享到 GitHub&lt;span&gt;（https://github.com/stripe-archive/flow-to-typescript-codemod）&lt;/span&gt;，希望帮助更多朋友能够轻松完成类似的大规模迁移。&lt;/p&gt;&lt;p&gt;以下是他们迁移的具体步骤：&lt;/p&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;Stripe 的 JavaScript 类型检查简史&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;Stripe 是一款诞生于 2012 年的大规模前端应用程序，共包含 stripe.com、Stripe JS 和 Stripe Dashboard 几大组成部分。随着业务的发展，我们开始对 JS 代码进行类型检查以提高产品质量和可靠性。2016 年，我们率先采用了 Flow——这是 Facebook 当时专门开发的 JavaScript 类型检查系统。之后几年间，Flow 一直为我们大部分前端应用程序的类型安全保驾护航。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4693140794223827&quot; data-type=&quot;png&quot; data-w=&quot;554&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VMWOb2bsib7H0UAXEqAHYibibYjCrsdsiaYpkOq4zEpGeZU2SvLxRvicOIy6uRG2la3THnfqUibuOuk02wA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为 API 资源和关联端点生成的 Flow 类型示例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;然而，工程师们在实际使用中发现 Flow 仍有诸多不足。首先，这款类型检查器会轻松耗尽笔记本电脑的内存，而编辑器内集成也速度缓慢、可靠性低下。与此同时，微软开发的另外一种类型系统 TypeScript 却在异军突起，凭借着完善的工具组合和强大社区而广受好评。于是，越来越多的 Stripe 工程师呼吁转向 TypeScript。&lt;/p&gt;&lt;p&gt;Stripe 拥有专门的开发者生产力团队，职责就是为工程师们提供最高效、最顺手的开发环境，所以他们的满意度就是生产力团队的使命。我们一直在努力确定开发者们最关心的紧迫问题：例如，我们在全部开发工具中都集成了上报错误 / 不便的功能，确保将情况快速发送给相关团队以评判优先级。对 TypeScript 的支持已经相当紧迫，于是支持团队决定在整个公司内帮助前端工程师转向 TypeScript。&lt;/p&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;选择正确的迁移策略&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;在所有前端代码库中，最大的那个负责为 Stripe Dashboard 和其他一些面向用户的产品提供支持。Dashboard 代码库中的不同组件保持着紧密耦合，而且没有清晰拆分的依赖图表。如果选择面向 TypeScript 开展增量迁移，就意味着开发人员在一段时间内必须同时使用两种语言来完成常见任务。此外，我们还需要一个互操作层来同步两种语言之间的类型定义，并在整个开发过程中始终保持二者一致。&lt;/p&gt;&lt;p&gt;2020 年末，我们组建了一支新的横向 JavaScript 基础设施团队：在这里，工程师们只关注一项工作——提升 Stripe 编写 JS 代码时的体验。而团队的首要挑战之一，就是用 TypeScript 替换掉 Flow，同时回避掉漫长且充满不确定性的迁移过程。&lt;/p&gt;&lt;p&gt;我们首先与其他开展过类似迁移的企业进行交谈，并参考了 Airtable 和 Zapier 的经历回顾文章。这两家企业都开发出自动化脚本，用于将一种语言转换成另一种语言、贯穿整个代码库运行，再把输出结果合并成单一提交。Airtable 已经把自己的转换脚本以“codemod”源到源转换工具的形式上传至 GitHub，它就完全能够解析 Flow 代码并生成相应的 TypeScript。&lt;/p&gt;&lt;p&gt;这种迁移方式大大降低了工程师们的工作负担，也不需要为相同的产品维护两套类型系统。这么一看，从 Flow 到 TypeScript 的道路顿时平坦了起来。&lt;/p&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;规划、筹备和迭代&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;Airtable 工具那出色的代码转换质量给我们留下了深刻印象，于是 Stripe 决定把它作为迁移工作的基础。这里要感谢 Airtable 团队开发并分享的这份工作成果——开源社区正是在无数这类案例的支持下，才变得如此兴盛蓬勃。&lt;/p&gt;&lt;p&gt;我们首先将 Airtable 的 codemod 复制到 Stripe 的 monorepo 当中，从而指向内部代码来运行。我们的 JS 项目中大量用到了 Sail——一个由严格类型化 React 组件构成的共享设计系统，所以我们决定在迁移之初先从 Sail 入手。我们为 Sail 生成了 TypeScript 定义，而非直接把代码转换成 TypeScript，这样就能保证它同时支持用 Flow 和 TypeScript 编写的应用程序。为了安全支持这两种类型系统，我们编写了测试来验证 TypeScript 定义对于底层 Flow 代码做出的具体更改。这种方法对于大规模代码库来说可能太过麻烦，好在 Sail 组件拥有明确且严格的接口，所以我们的测试倒是相当顺遂。&lt;/p&gt;&lt;p&gt;还有个问题，codemod 的底子很好、但功能并不全面：对于很多文件，它在转换中可能发生崩溃，输出结果也不够完善。所以在几个月时间里，我们通过一次次迭代解决了这些较为极端的句法和语义案例。&lt;/p&gt;&lt;p&gt;举个简单的例子，JS 箭头函数可以在没有 return 语句时直接返回单一表达式，如下所示：&lt;/p&gt;&lt;p&gt;const linesOfCode = () =&amp;gt; 7;&lt;/p&gt;&lt;p&gt;JS 对象字面量会使用大括号来体现属性定义。但因为大括号也被用于描述语句块，所以要从箭头函数返回对象字面量，还需要引入一组额外的括号来消除歧义：&lt;/p&gt;&lt;p&gt;const currencyMap = () =&amp;gt; ({ca:&#x27;CAD&#x27;,us:&#x27;USD&#x27;});&lt;/p&gt;&lt;p&gt;我们注意到，codemod 会错误删除掉箭头函数中这些额外的括号，但这个问题只发生在泛型函数（接受类型参数的函数）当中。可一旦删除，结果语法在标准 JS 中将不再可用：&lt;/p&gt;&lt;p&gt;// bad!&lt;/p&gt;&lt;p&gt;const wrapper = (arg:T) =&amp;gt; {wrapped: T};&lt;/p&gt;&lt;p&gt;于是我们修复了这个问题，并添加测试以防止其再次发生。整个迁移过程中，我们进行了大量类似的语法修复，才最终让之前庞大的代码库“旧月的换新颜”。&lt;/p&gt;&lt;p&gt;在确保 Sail 能够在 TypeScript 中正常起效之后，我们又开发了几个包含数百个 JS 模块的内部应用程序。我们还向 codemod 中添加二次检查，希望进一步减少生成代码中的错误，同时使用 TypeScript 的 @ts-expect-error 注释来标记这些错误。可以看到，我们的基本思路并不是提前解决掉每个错误，而是尽快替换掉 Flow，并在过程当中跟踪实际发生的 TypeScript 错误抑制并加以解决。&lt;/p&gt;&lt;p&gt;Dashboard 代码库的初始阶段共引发超过 97000 个错误抑制。在更新了 codemod 的迭代方法之后，这个数字被控制到了 37000 个，相当于每千行代码有 1 个错误抑制。相比之下，Flow 代码这边的错误抑制大概是 5000 个。Flow 和 TypeScript 都支持对类型覆盖率进行测量，而我们惊喜地发现虽然 TypeScript 这边的抑制数字更大，但这主要是因为其报告覆盖率要比 Flow 更高。这应该是因为 TypeScript 中的可用第三方类型定义在数量和质量上都优于 Flow，而后者则因为缺少这些定义而导致类型覆盖率不足。&lt;/p&gt;&lt;p&gt;不过面对包含数万个模块的 Dashboard 时，我们的方法对 TypeScript 编译器产生了巨大的内存压力。而解决这个问题的主要工具，就是 TypeScript 项目引用：尽管 Dashboard 并不进行模块区分，但我们还是正确推断出了它的模块结构，并据此建立起项目引用。通过这种方式，我们得以直接在代码库之上运行 TypeScript，且无需重构大量应用程序代码。&lt;/p&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;正式上线&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;每周，都有数百名工程师在奋力推进 Dashboard 项目的迁移工作。但如此彻底的变动不容小觑，我们也不想在周内工作量合并这些更新。因此，团队决定选择 3 月 6 日星期天锁定 Stripe monorepo，同时上线我们的新分支。&lt;/p&gt;&lt;p&gt;在合并前一周，我们开始通过 CI 系统将 build 传递并部署到 QA 环境当中。毕竟除了 TypeScript 对项目本体的检查之外，我们还得更新 ESLint、Jest、Webpack、Metro 等负责处理源代码的其他工具。&lt;/p&gt;&lt;p&gt;这里出现了一个特别的痛点：Jest 快照测试。Jest 生成的快照文件中，会包含一条对快照生成文件的硬编码引用。由于 codemod 会给 TypeScript 文件生成.ts 或者.tsx 的扩展名，所以快照文件所引用的测试源将直接失效。为此，我们决定把生成文件的扩展名统一成.tsx，这样就可以批量重写快照并保证测试 100% 通过。&lt;/p&gt;&lt;p&gt;此外，我们还发现对某些 TypeScript 兼容代码的修复会带来不少工作量，甚至把日程安排推迟数周。其中的典型案例就是我们自定义的 ESLint 规则：其中一项规则会重新排序导入以强制保证各文件间的一致性，但该规则是针对 Babel 的 Flow 解析器编写的，所以生成的抽象语法树与 TypeScript 解析器会略有不同。在这种情况下，我们决定先禁用某些检查，并在转换完成后再行恢复。&lt;/p&gt;&lt;p&gt;通过手动上传 build，我们在 Dashboard 中与面向用户功能的产品团队成功会合。尽管 Dashboard 拥有广泛的单元和功能测试，但端到端测试覆盖率却比较有限。因此，各产品相关方就必须有能力开展手动测试。测试中同样暴露出不少小 bug，我们抢在最后一周成功将其解决：例如，由于翻译加载代码中存在一个硬编码.js 扩展名，因此我们无法为非英文版 Dashboard 用户正确加载翻译内容。&lt;/p&gt;&lt;p&gt;整个过程给了我们很大信心，但这种颠覆性的变更还是让大家有点忐忑：虽然我们牢牢掌握着开发工具和构建过程，但毕竟代码库中的每个文件都发生了变化。转换脚本中的任何一点细微错误（例如从多个组件间共享的对象中删除一个空字段）都有可能引发面向用户的错误，而任何现有自动化测试都发现不了这样的错误。另外，这类故障可能会有多种表现方式，例如引发下游开发工具报错、或者导致构建失败等。为了及时发现这些意外状况，我们只能依靠自动化与环境监控工具，同时建立了专门的协调部署 Slack 频道，保证面向用户的团队能够及时收到报告并快速着手修复。&lt;/p&gt;&lt;p&gt;3 月 5 日星期六，团队生成了新的迁移分支并运行了我们的自动化脚本。之后，我们将该分支部署到 QA 环境并重复验证过程，包括产品团队提议的手动测试。期间没有发现任何新问题，看起来一切合并准备均已就绪。&lt;/p&gt;&lt;p&gt;3 月 6 号星期天一大早，我们就锁定了 Stripe monorepo，又对迁移分支进行卫次 QA 测试，之后果断提交了变更。整个合并过程干净利落，我们的自动化测试也全部通过。就这样，TypeScript 顺顺当当进入了生产部署。&lt;/p&gt;&lt;p&gt;凭借这一年来的细心调整与严谨测试，新代码在接收生产流量后没有发生任何意外。我们随后解锁了 repo，让开发者们看到现在的 Dashboard 已经运行在 TypeScript 当中了。&lt;/p&gt;&lt;p&gt;有一天我正在面新员工，碰巧听说公司打算从 Flow 迁移到 TypeScript。&lt;/p&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;95&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;其实我是有点怀疑的，毕竟之前不少团队在小型代码库上都身陷泥潭、纠缠不清，这么大规模的迁移能顺利完成吗？但礼拜一的现实证明我想多了——一切如常。&lt;/section&gt;&lt;section&gt;&lt;strong&gt;Eric Clemmons&lt;/strong&gt;, Stripe 软件工程师&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;迁移一结束，公司内可以说是好评如潮。完善顺畅的迁移给工程师们留下了深刻印象，甚至有人认为这是 Stripe 多年以来最成功的一次开发者生产力提升。我们很高兴这一年的付出没有白费，Stripe 的代码库终于获得了显著、甚至可以说是颠覆性的改进。&lt;/p&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;TypeScript……两个月之后&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;转换当然不可能毫无瑕疵。在接下来的几周内，我们的 JS 基础设施团队又先后解决了几个意外问题。但最让人吃惊的，是有工程师报告 CI 和本地 TypeScript 运行间存在不一致。在 TypeScript 中，我们直接使用由 npm 安装的各种第三方类型定义，而如果定义被更新，工程师们就得安装新版本。而这明显跟我们的 Flow 配置不同，其中的依赖更新很少会改变具体类型，因此我们只能提醒工程师们运行 yarn install 进行调试。&lt;/p&gt;&lt;p&gt;此外还有其他工作要做：我们知道更细粒度的项目引用可以进一步提高性能，更好的缓存设计则能加快 CI 运行速度。然而，这么点好处并不值得大费周章。工程师们喜欢使用自动依赖导入和代码补齐之类的功能，也离不开 TypeScript 社区中广泛的第三方类型定义和集成语料库。这也保证了当有新工程师加入 Stripe 编写前端代码时，他们能第一时间使用自己最熟悉的语言、把全部精力都投入到功能设计上。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6750902527075813&quot; data-type=&quot;png&quot; data-w=&quot;554&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VMWOb2bsib7H0UAXEqAHYibibYpngnnyL7QxiaXaF6m46aDZ07O3uaxCHcA1jThjcbyrP1QzFF41v2KicA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;随着 Dashboard 迁移工作的完成，JS 基础设施团队开始进一步提高 TypeScript 在整个公司内的采用率。我们使用相同的工具又先后转移了不少其他代码库，包括我们的全部支付 UI Stripe Checkout。Stripe 的前端工程师们很快就适应了这一切，开始用 TypeScript 编写所有开发项目。&lt;/p&gt;&lt;p&gt;而且我们从迁移计划立项之初就在发布更新，相当于搞了个全程直播，反响同样热烈。来自整个行业的开发者纷纷给予关注，并在自己的代码库中尝试应用相同的改进。为了支持大家，我们决定在 GitHub 上分享 Stripe 的 TypeScript 转换代码&lt;span&gt;（https://github.com/stripe-archive/flow-to-typescript-codemod）&lt;/span&gt;，希望能起到些许积极作用。&lt;/p&gt;&lt;p&gt;除了关于 JavaScript、Flow 和 TypeScript 的种种细节之外，我们还从此次迁移中总结出另一条重要经验：只要勤奋、专注、乐观，对大规模代码库做出显著改进并非不可能。我们将保持住这份热情，为 Stripe 乃至整个行业内的工程师带来更高的生产效率与更丝滑的工作体验。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;原文链接：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://stripe.com/blog/migrating-to-typescript&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ad5592f9cb68f2937f5944650a81ad4e</guid>
<title>C# 中多态底层 (虚方法调用) 是怎么玩</title>
<link>https://toutiao.io/k/lwi1osh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在看 &lt;/span&gt;&lt;code&gt;&lt;span&gt;C++&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的虚方法调用实现原理，大概就是说在 class 的首位置存放着一个指向 &lt;/span&gt;&lt;code&gt;&lt;span&gt;vtable array&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 指针数组 的指针，而 &lt;/span&gt;&lt;code&gt;&lt;span&gt;vtable array&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中的每一个指针元素指向的就是各自的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;虚方法&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，实现方式很有意思，哈哈，现在我很好奇 C# 中如何实现的。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、C# 中的多态玩法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、一个简单的 C# 例子&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了方便说明，我就定义一个 Person 类和一个 Chinese 类，详细代码如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Program&lt;/span&gt;  &lt;br/&gt;{  &lt;br/&gt;    &lt;span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;Main&lt;/span&gt;(&lt;span&gt;&lt;span&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;  &lt;br/&gt;    {  &lt;br/&gt;        Person person = &lt;span&gt;new&lt;/span&gt; Chinese();  &lt;br/&gt;&lt;br/&gt;        person.SayHello();  &lt;br/&gt;&lt;br/&gt;        Console.ReadLine();  &lt;br/&gt;    }  &lt;br/&gt;}  &lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;  &lt;br/&gt;{  &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;SayHello&lt;/span&gt;()&lt;/span&gt;  &lt;br/&gt;    {  &lt;br/&gt;        Console.WriteLine(&lt;span&gt;&quot;sayhello&quot;&lt;/span&gt;);  &lt;br/&gt;    }  &lt;br/&gt;}  &lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Chinese&lt;/span&gt;: &lt;span&gt;Person&lt;/span&gt;  &lt;br/&gt;{  &lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;SayHello&lt;/span&gt;()&lt;/span&gt;  &lt;br/&gt;        {  &lt;br/&gt;            Console.WriteLine(&lt;span&gt;&quot;chinese&quot;&lt;/span&gt;);  &lt;br/&gt;        }  &lt;br/&gt;    }  &lt;br/&gt;}  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、汇编代码分析&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接下来用 windbg 在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;person.SayHello()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 处下一个断点，观察一下它的反汇编代码：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;D:\net6\ConsoleApplication2\ConsoleApp1\Program.cs @ &lt;span&gt;9&lt;/span&gt;:  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21b3 b93c5dce05      mov     ecx,&lt;span&gt;5&lt;/span&gt;CE5D3Ch (MT: ConsoleApp1.Chinese)  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21b8 e8030f89fa      call    &lt;span&gt;005830&lt;/span&gt;c0 (JitHelp: CORINFO_HELP_NEWSFAST)  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21bd &lt;span&gt;8945f&lt;/span&gt;4          mov     dword ptr [ebp&lt;span&gt;-0&lt;/span&gt;Ch],eax  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21c0 &lt;span&gt;8b&lt;/span&gt;4df4          mov     ecx,dword ptr [ebp&lt;span&gt;-0&lt;/span&gt;Ch]  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21c3 e820fbffff      call    &lt;span&gt;05&lt;/span&gt;cf1ce8 (ConsoleApp1.Chinese..ctor(), mdToken: &lt;span&gt;0600000&lt;/span&gt;A)  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21c8 &lt;span&gt;8b&lt;/span&gt;4df4          mov     ecx,dword ptr [ebp&lt;span&gt;-0&lt;/span&gt;Ch]  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21cb &lt;span&gt;894&lt;/span&gt;df8          mov     dword ptr [ebp&lt;span&gt;-8&lt;/span&gt;],ecx  &lt;br/&gt;  &lt;br/&gt;D:\net6\ConsoleApplication2\ConsoleApp1\Program.cs @ &lt;span&gt;11&lt;/span&gt;:  &lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;05&lt;/span&gt;cf21ce &lt;span&gt;8b&lt;/span&gt;4df8          mov     ecx,dword ptr [ebp&lt;span&gt;-8&lt;/span&gt;]  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21d1 &lt;span&gt;8b&lt;/span&gt;45f8          mov     eax,dword ptr [ebp&lt;span&gt;-8&lt;/span&gt;]  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21d4 &lt;span&gt;8b&lt;/span&gt;00            mov     eax,dword ptr [eax]  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21d6 &lt;span&gt;8b&lt;/span&gt;4028          mov     eax,dword ptr [eax+&lt;span&gt;28&lt;/span&gt;h]  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21d9 ff5010          call    dword ptr [eax+&lt;span&gt;10&lt;/span&gt;h]  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf21dc &lt;span&gt;90&lt;/span&gt;              nop  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从汇编代码看，逻辑非常清晰，大体步骤如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、&lt;/span&gt;&lt;code&gt;&lt;span&gt;eax,dword ptr [ebp-8]&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从栈上(ebp-8)处获取 person 在堆上的首地址，如果不相信的话，可以用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;!do 027ea88c&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 试试看。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;000&lt;/span&gt;&amp;gt; dp ebp&lt;span&gt;-8&lt;/span&gt; L1  &lt;br/&gt;&lt;span&gt;0057f&lt;/span&gt;300  &lt;span&gt;027&lt;/span&gt;ea88c  &lt;br/&gt;  &lt;br/&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;000&lt;/span&gt;&amp;gt; !&lt;span&gt;do&lt;/span&gt; &lt;span&gt;027&lt;/span&gt;ea88c  &lt;br/&gt;Name:        ConsoleApp1.Chinese  &lt;br/&gt;MethodTable: &lt;span&gt;05&lt;/span&gt;ce5d3c  &lt;br/&gt;EEClass:     &lt;span&gt;05&lt;/span&gt;cd3380  &lt;br/&gt;Size:        &lt;span&gt;12&lt;/span&gt;(&lt;span&gt;0xc&lt;/span&gt;) bytes  &lt;br/&gt;File:        D:\net6\ConsoleApplication2\ConsoleApp1\bin\x86\Debug\net6&lt;span&gt;.0&lt;/span&gt;\ConsoleApp1.dll  &lt;br/&gt;Fields:  &lt;br/&gt;None  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、&lt;/span&gt;&lt;code&gt;&lt;span&gt;eax,dword ptr [eax]&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果大家了解 &lt;/span&gt;&lt;code&gt;&lt;span&gt;实例&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 在堆上的内存布局的话，应该知道，这个首地址存放的就是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;methodtable&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 指针,我们可以用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;!dumpmt 05ce5d3c&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 来验证下。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;000&lt;/span&gt;&amp;gt; dp &lt;span&gt;027&lt;/span&gt;ea88c L1  &lt;br/&gt;&lt;span&gt;027&lt;/span&gt;ea88c  &lt;span&gt;05&lt;/span&gt;ce5d3c  &lt;br/&gt;  &lt;br/&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;000&lt;/span&gt;&amp;gt; !dumpmt &lt;span&gt;05&lt;/span&gt;ce5d3c  &lt;br/&gt;EEClass:         &lt;span&gt;05&lt;/span&gt;cd3380  &lt;br/&gt;Module:          &lt;span&gt;05&lt;/span&gt;addb14  &lt;br/&gt;Name:            ConsoleApp1.Chinese  &lt;br/&gt;mdToken:         &lt;span&gt;02000007&lt;/span&gt;  &lt;br/&gt;File:            D:\net6\ConsoleApplication2\ConsoleApp1\bin\x86\Debug\net6&lt;span&gt;.0&lt;/span&gt;\ConsoleApp1.dll  &lt;br/&gt;BaseSize:        &lt;span&gt;0xc&lt;/span&gt;  &lt;br/&gt;ComponentSize:   &lt;span&gt;0x0&lt;/span&gt;  &lt;br/&gt;DynamicStatics:  &lt;span&gt;false&lt;/span&gt;  &lt;br/&gt;ContainsPointers &lt;span&gt;false&lt;/span&gt;  &lt;br/&gt;Slots &lt;span&gt;in&lt;/span&gt; VTable: &lt;span&gt;6&lt;/span&gt;  &lt;br/&gt;Number of IFaces &lt;span&gt;in&lt;/span&gt; IFaceMap: &lt;span&gt;0&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、&lt;/span&gt;&lt;code&gt;&lt;span&gt;eax,dword ptr [eax+28h]&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那这句话是什么意思呢？如果你了解 CoreCLR 的话，你应该知道 methedtable 是由一个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;class MethodTable&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 类来承载的，所以它取了 methodtable 偏移 &lt;/span&gt;&lt;code&gt;&lt;span&gt;0x28&lt;/span&gt;&lt;/code&gt;&lt;span&gt;  位置的一个字段，那这个偏移字段是什么呢？我们先用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;dt&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 把 methodtable 结构给导出来。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;000&lt;/span&gt;&amp;gt; dt &lt;span&gt;05&lt;/span&gt;ce5d3c MethodTable  &lt;br/&gt;coreclr!MethodTable  &lt;br/&gt;   =&lt;span&gt;7&lt;/span&gt;ad96bc8 s_pMethodDataCache : &lt;span&gt;0x00639ec8&lt;/span&gt; MethodDataCache  &lt;br/&gt;   =&lt;span&gt;7&lt;/span&gt;ad96bc4 s_fUseParentMethodData : &lt;span&gt;0&lt;/span&gt;n1  &lt;br/&gt;   =&lt;span&gt;7&lt;/span&gt;ad96bcc s_fUseMethodDataCache : &lt;span&gt;0&lt;/span&gt;n1  &lt;br/&gt;   +&lt;span&gt;0x000&lt;/span&gt; m_dwFlags        : &lt;span&gt;0xc&lt;/span&gt;  &lt;br/&gt;   +&lt;span&gt;0x004&lt;/span&gt; m_BaseSize       : &lt;span&gt;0x74088&lt;/span&gt;  &lt;br/&gt;   +&lt;span&gt;0x008&lt;/span&gt; m_wFlags2        : &lt;span&gt;5&lt;/span&gt;  &lt;br/&gt;   +&lt;span&gt;0x00a&lt;/span&gt; m_wToken         : &lt;span&gt;0&lt;/span&gt;  &lt;br/&gt;   +&lt;span&gt;0x00c&lt;/span&gt; m_wNumVirtuals   : &lt;span&gt;0x5ccc&lt;/span&gt;  &lt;br/&gt;   +&lt;span&gt;0x00e&lt;/span&gt; m_wNumInterfaces : &lt;span&gt;0x5ce&lt;/span&gt;  &lt;br/&gt;   +&lt;span&gt;0x010&lt;/span&gt; m_pParentMethodTable : IndirectPointer&amp;lt;MethodTable *&amp;gt;  &lt;br/&gt;   +&lt;span&gt;0x014&lt;/span&gt; m_pLoaderModule  : PlainPointer&amp;lt;Module *&amp;gt;  &lt;br/&gt;   +&lt;span&gt;0x018&lt;/span&gt; m_pWriteableData : PlainPointer&amp;lt;MethodTableWriteableData *&amp;gt;  &lt;br/&gt;   +&lt;span&gt;0x01c&lt;/span&gt; m_pEEClass       : PlainPointer&amp;lt;EEClass *&amp;gt;  &lt;br/&gt;   +&lt;span&gt;0x01c&lt;/span&gt; m_pCanonMT       : PlainPointer&amp;lt;unsigned &lt;span&gt;long&lt;/span&gt;&amp;gt;  &lt;br/&gt;   +&lt;span&gt;0x020&lt;/span&gt; m_pPerInstInfo   : PlainPointer&amp;lt;PlainPointer&amp;lt;Dictionary *&amp;gt; *&amp;gt;  &lt;br/&gt;   +&lt;span&gt;0x020&lt;/span&gt; m_ElementTypeHnd : &lt;span&gt;0&lt;/span&gt;  &lt;br/&gt;   +&lt;span&gt;0x020&lt;/span&gt; m_pMultipurposeSlot1 : &lt;span&gt;0&lt;/span&gt;  &lt;br/&gt;   +&lt;span&gt;0x024&lt;/span&gt; m_pInterfaceMap  : PlainPointer&amp;lt;InterfaceInfo_t *&amp;gt;  &lt;br/&gt;   +&lt;span&gt;0x024&lt;/span&gt; m_pMultipurposeSlot2 : &lt;span&gt;0x5ce5d68&lt;/span&gt;  &lt;br/&gt;   =&lt;span&gt;7&lt;/span&gt;ad04c78 c_DispatchMapSlotOffsets : [&lt;span&gt;0&lt;/span&gt;]  &lt;span&gt;&quot; $ (System.Private.CoreLib.dll&quot;&lt;/span&gt;  &lt;br/&gt;   =&lt;span&gt;7&lt;/span&gt;ad04c70 c_NonVirtualSlotsOffsets : [&lt;span&gt;0&lt;/span&gt;]  &lt;span&gt;&quot; $ ($((, $ (System.Private.CoreLib.dll&quot;&lt;/span&gt;  &lt;br/&gt;   =&lt;span&gt;7&lt;/span&gt;ad04c60 c_ModuleOverrideOffsets : [&lt;span&gt;0&lt;/span&gt;]  &lt;span&gt;&quot; $ ($((,$((,(,,0 $ ($((, $ (System.Private.CoreLib.dll&quot;&lt;/span&gt;  &lt;br/&gt;   =&lt;span&gt;7&lt;/span&gt;ad12838 c_OptionalMembersStartOffsets : [&lt;span&gt;0&lt;/span&gt;]  &lt;span&gt;&quot;(((((((,(((,(,,0(((,(,,0(,,0,004&quot;&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从 methodtable 的布局图来看, &lt;/span&gt;&lt;code&gt;&lt;span&gt;eax+28h&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;m_pMultipurposeSlot2&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 结构的第二个字段了，因为第一个字段是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;虚方法表指针&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，如果要验证的话，也很简单，用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;!dumpmt -md 05ce5d3c&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 把所有的方法给导出来，然后结合 &lt;/span&gt;&lt;code&gt;&lt;span&gt;dp 05ce5d3c&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 看下 0x5ce5d68 之后是不是许多的方法。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;000&lt;/span&gt;&amp;gt; !dumpmt -md &lt;span&gt;05&lt;/span&gt;ce5d3c  &lt;br/&gt;EEClass:         &lt;span&gt;05&lt;/span&gt;cd3380  &lt;br/&gt;Module:          &lt;span&gt;05&lt;/span&gt;addb14  &lt;br/&gt;Name:            ConsoleApp1.Chinese  &lt;br/&gt;mdToken:         &lt;span&gt;02000007&lt;/span&gt;  &lt;br/&gt;File:            D:\net6\ConsoleApplication2\ConsoleApp1\bin\x86\Debug\net6&lt;span&gt;.0&lt;/span&gt;\ConsoleApp1.dll  &lt;br/&gt;BaseSize:        &lt;span&gt;0xc&lt;/span&gt;  &lt;br/&gt;ComponentSize:   &lt;span&gt;0x0&lt;/span&gt;  &lt;br/&gt;DynamicStatics:  &lt;span&gt;false&lt;/span&gt;  &lt;br/&gt;ContainsPointers &lt;span&gt;false&lt;/span&gt;  &lt;br/&gt;Slots &lt;span&gt;in&lt;/span&gt; VTable: &lt;span&gt;6&lt;/span&gt;  &lt;br/&gt;Number of IFaces &lt;span&gt;in&lt;/span&gt; IFaceMap: &lt;span&gt;0&lt;/span&gt;  &lt;br/&gt;--------------------------------------  &lt;br/&gt;MethodDesc Table  &lt;br/&gt;   Entry MethodDe    JIT Name  &lt;br/&gt;&lt;span&gt;02610028&lt;/span&gt; &lt;span&gt;02605568&lt;/span&gt;   NONE System.Object.Finalize()  &lt;br/&gt;&lt;span&gt;02610030&lt;/span&gt; &lt;span&gt;02605574&lt;/span&gt;   NONE System.Object.ToString()  &lt;br/&gt;&lt;span&gt;02610038&lt;/span&gt; &lt;span&gt;02605580&lt;/span&gt;   NONE System.Object.Equals(System.Object)  &lt;br/&gt;&lt;span&gt;02610050&lt;/span&gt; &lt;span&gt;026055&lt;/span&gt;ac   NONE System.Object.GetHashCode()  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;CF1CE0 &lt;span&gt;05&lt;/span&gt;ce5d24   NONE ConsoleApp1.Chinese.SayHello()  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;CF1CE8 &lt;span&gt;05&lt;/span&gt;ce5d30    JIT ConsoleApp1.Chinese..ctor()  &lt;br/&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;000&lt;/span&gt;&amp;gt; dp &lt;span&gt;05&lt;/span&gt;ce5d3c L10  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;ce5d3c  &lt;span&gt;00000200&lt;/span&gt; &lt;span&gt;0000000&lt;/span&gt;c &lt;span&gt;00074088&lt;/span&gt; &lt;span&gt;00000005&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;ce5d4c  &lt;span&gt;05&lt;/span&gt;ce5ccc &lt;span&gt;05&lt;/span&gt;addb14 &lt;span&gt;05&lt;/span&gt;ce5d7c &lt;span&gt;05&lt;/span&gt;cd3380  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;ce5d5c  &lt;span&gt;05&lt;/span&gt;cf1ce8 &lt;span&gt;00000000&lt;/span&gt; &lt;span&gt;05&lt;/span&gt;ce5d68 &lt;span&gt;02610028&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;ce5d6c  &lt;span&gt;02610030&lt;/span&gt; &lt;span&gt;02610038&lt;/span&gt; &lt;span&gt;02610050&lt;/span&gt; &lt;span&gt;05&lt;/span&gt;cf1ce0 &lt;/span&gt;&lt;span&gt; &lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;仔细看输出，上面的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;05ce5d68&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 后面的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;02610028&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 就是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;System.Object.Finalize()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法，&lt;/span&gt;&lt;code&gt;&lt;span&gt;02610030&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对应着 &lt;/span&gt;&lt;code&gt;&lt;span&gt;System.Object.ToString()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、&lt;/span&gt;&lt;code&gt;&lt;span&gt;call dword ptr [eax+10h]&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有了前面的基础，这句话就好理解了，它是从 &lt;/span&gt;&lt;code&gt;&lt;span&gt;m_pMultipurposeSlot2&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 结构中找 &lt;/span&gt;&lt;code&gt;&lt;span&gt;SayHello&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 所在的单元指针位置，然后做 call 调用。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;000&lt;/span&gt;&amp;gt; !U &lt;span&gt;05&lt;/span&gt;cf1ce0  &lt;br/&gt;Unmanaged code  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf1ce0 e88f9dde74      call    coreclr!PrecodeFixupThunk (&lt;span&gt;7&lt;/span&gt;aadba74)  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf1ce5 &lt;span&gt;5&lt;/span&gt;e              pop     esi  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf1ce6 &lt;span&gt;0001&lt;/span&gt;            &lt;span&gt;add&lt;/span&gt;     &lt;span&gt;byte&lt;/span&gt; ptr [ecx],al  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf1ce8 e913050000      jmp     &lt;span&gt;05&lt;/span&gt;cf2200  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf1ced &lt;span&gt;5f&lt;/span&gt;              pop     edi  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf1cee &lt;span&gt;0300&lt;/span&gt;            &lt;span&gt;add&lt;/span&gt;     eax,dword ptr [eax]  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf1cf0 &lt;span&gt;245&lt;/span&gt;d            and     al,&lt;span&gt;5&lt;/span&gt;Dh  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf1cf2 ce              &lt;span&gt;into&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf1cf3 &lt;span&gt;0500000000&lt;/span&gt;      &lt;span&gt;add&lt;/span&gt;     eax,&lt;span&gt;0&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf1cf8 &lt;span&gt;0000&lt;/span&gt;            &lt;span&gt;add&lt;/span&gt;     &lt;span&gt;byte&lt;/span&gt; ptr [eax],al &lt;/span&gt;&lt;span&gt; &lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从汇编看，它还是一段 &lt;/span&gt;&lt;code&gt;&lt;span&gt;桩代码&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，言外之意就是该方法没有被 JIT 编译，如果编译完了，这里的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;05CF1CE0 05ce5d24 NONE ConsoleApp1.Chinese.SayHello()&lt;/span&gt;&lt;/code&gt;&lt;span&gt;  的 Entry (05CF1CE0) 也会被同步修改，验证一下很简单，我们继续 go 代码让其编译完成，然后再 dumpmt 。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;008&lt;/span&gt;&amp;gt; !dumpmt -md &lt;span&gt;05&lt;/span&gt;ce5d3c  &lt;br/&gt;EEClass:         &lt;span&gt;05&lt;/span&gt;cd3380  &lt;br/&gt;Module:          &lt;span&gt;05&lt;/span&gt;addb14  &lt;br/&gt;Name:            ConsoleApp1.Chinese  &lt;br/&gt;mdToken:         &lt;span&gt;02000007&lt;/span&gt;  &lt;br/&gt;File:            D:\net6\ConsoleApplication2\ConsoleApp1\bin\x86\Debug\net6&lt;span&gt;.0&lt;/span&gt;\ConsoleApp1.dll  &lt;br/&gt;BaseSize:        &lt;span&gt;0xc&lt;/span&gt;  &lt;br/&gt;ComponentSize:   &lt;span&gt;0x0&lt;/span&gt;  &lt;br/&gt;DynamicStatics:  &lt;span&gt;false&lt;/span&gt;  &lt;br/&gt;ContainsPointers &lt;span&gt;false&lt;/span&gt;  &lt;br/&gt;Slots &lt;span&gt;in&lt;/span&gt; VTable: &lt;span&gt;6&lt;/span&gt;  &lt;br/&gt;Number of IFaces &lt;span&gt;in&lt;/span&gt; IFaceMap: &lt;span&gt;0&lt;/span&gt;  &lt;br/&gt;--------------------------------------  &lt;br/&gt;MethodDesc Table  &lt;br/&gt;   Entry MethodDe    JIT Name  &lt;br/&gt;&lt;span&gt;02610028&lt;/span&gt; &lt;span&gt;02605568&lt;/span&gt;   NONE System.Object.Finalize()  &lt;br/&gt;&lt;span&gt;02610030&lt;/span&gt; &lt;span&gt;02605574&lt;/span&gt;   NONE System.Object.ToString()  &lt;br/&gt;&lt;span&gt;02610038&lt;/span&gt; &lt;span&gt;02605580&lt;/span&gt;   NONE System.Object.Equals(System.Object)  &lt;br/&gt;&lt;span&gt;02610050&lt;/span&gt; &lt;span&gt;026055&lt;/span&gt;ac   NONE System.Object.GetHashCode()  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;CF2270 &lt;span&gt;05&lt;/span&gt;ce5d24    JIT ConsoleApp1.Chinese.SayHello()  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;CF1CE8 &lt;span&gt;05&lt;/span&gt;ce5d30    JIT ConsoleApp1.Chinese..ctor()  &lt;br/&gt;  &lt;br/&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;008&lt;/span&gt;&amp;gt; dp &lt;span&gt;05&lt;/span&gt;ce5d3c L10  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;ce5d3c  &lt;span&gt;00000200&lt;/span&gt; &lt;span&gt;0000000&lt;/span&gt;c &lt;span&gt;00074088&lt;/span&gt; &lt;span&gt;00000005&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;ce5d4c  &lt;span&gt;05&lt;/span&gt;ce5ccc &lt;span&gt;05&lt;/span&gt;addb14 &lt;span&gt;05&lt;/span&gt;ce5d7c &lt;span&gt;05&lt;/span&gt;cd3380  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;ce5d5c  &lt;span&gt;05&lt;/span&gt;cf1ce8 &lt;span&gt;00000000&lt;/span&gt; &lt;span&gt;05&lt;/span&gt;ce5d68 &lt;span&gt;02610028&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;ce5d6c  &lt;span&gt;02610030&lt;/span&gt; &lt;span&gt;02610038&lt;/span&gt; &lt;span&gt;02610050&lt;/span&gt; &lt;span&gt;05&lt;/span&gt;cf2270  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此时可以看到它由 &lt;/span&gt;&lt;code&gt;&lt;span&gt;05cf1ce0&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 变成了 &lt;/span&gt;&lt;code&gt;&lt;span&gt;05cf2270&lt;/span&gt;&lt;/code&gt;&lt;span&gt;， 这个就是 JIT 编译后的方法代码，我们用 !U 反编译下。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;008&lt;/span&gt;&amp;gt; !U &lt;span&gt;05&lt;/span&gt;cf2270  &lt;br/&gt;Normal JIT generated code  &lt;br/&gt;ConsoleApp1.Chinese.SayHello()  &lt;br/&gt;ilAddr &lt;span&gt;is&lt;/span&gt; &lt;span&gt;05E720&lt;/span&gt;D5 pImport &lt;span&gt;is&lt;/span&gt; &lt;span&gt;008F&lt;/span&gt;6E88  &lt;br/&gt;Begin &lt;span&gt;05&lt;/span&gt;CF2270, size &lt;span&gt;27&lt;/span&gt;  &lt;br/&gt;  &lt;br/&gt;D:\net6\ConsoleApplication2\ConsoleApp1\Program.cs @ &lt;span&gt;28&lt;/span&gt;:  &lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;05&lt;/span&gt;cf2270 &lt;span&gt;55&lt;/span&gt;              push    ebp  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2271 &lt;span&gt;8b&lt;/span&gt;ec            mov     ebp,esp  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2273 &lt;span&gt;50&lt;/span&gt;              push    eax  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2274 &lt;span&gt;894&lt;/span&gt;dfc          mov     dword ptr [ebp&lt;span&gt;-4&lt;/span&gt;],ecx  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2277 &lt;span&gt;833&lt;/span&gt;d74dcad0500  cmp     dword ptr ds:[&lt;span&gt;5&lt;/span&gt;ADDC74h],&lt;span&gt;0&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf227e &lt;span&gt;7405&lt;/span&gt;            je      &lt;span&gt;05&lt;/span&gt;cf2285  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2280 e8cb2bf174      call    coreclr!JIT_DbgIsJustMyCode (&lt;span&gt;7&lt;/span&gt;ac04e50)  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2285 &lt;span&gt;90&lt;/span&gt;              nop  &lt;br/&gt;  &lt;br/&gt;D:\net6\ConsoleApplication2\ConsoleApp1\Program.cs @ &lt;span&gt;29&lt;/span&gt;:  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2286 &lt;span&gt;8b&lt;/span&gt;0d74207e04    mov     ecx,dword ptr ds:[&lt;span&gt;47E2074&lt;/span&gt;h] (&lt;span&gt;&quot;chinese&quot;&lt;/span&gt;)  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf228c e8dffbffff      call    &lt;span&gt;05&lt;/span&gt;cf1e70  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2291 &lt;span&gt;90&lt;/span&gt;              nop  &lt;br/&gt;  &lt;br/&gt;D:\net6\ConsoleApplication2\ConsoleApp1\Program.cs @ &lt;span&gt;30&lt;/span&gt;:  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2292 &lt;span&gt;90&lt;/span&gt;              nop  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2293 &lt;span&gt;8b&lt;/span&gt;e5            mov     esp,ebp  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2295 &lt;span&gt;5&lt;/span&gt;d              pop     ebp  &lt;br/&gt;&lt;span&gt;05&lt;/span&gt;cf2296 c3              ret  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;终于这就是多态下的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ConsoleApp1.Chinese.SayHello&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法啦。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三、总结&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本质上来说，CoreCLR 也是 C++ 写的，所以也逃不过用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;虚表&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 来实现多态的玩法， 不过玩法也稍微复杂了一些，希望本篇对大家有帮助。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4e66f57bb68817719a3140a3e497f773</guid>
<title>基于深度学习的恶意软件分类器</title>
<link>https://toutiao.io/k/g13yb0x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;345&quot; data-fileid=&quot;100035992&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/1UG7KPNHN8GQwqtumxDQOVRxvV7jIcVpWoAV6Pjg7LGxplib4WibEooF258yYTSz6a3qQbwETFWgT1U2sBdzKP6Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文为看雪论坛优秀文章&lt;br/&gt;看雪论坛作者ID：1900&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-none-contnet=&quot;t&quot;&gt;一&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;1、实验内容&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;参考论文：&lt;/span&gt;&lt;span&gt;IMCFN: Image-based Malware Classification using Fine-tuned Convolutional Neural Network Architecture（https://www.sciencedirect.com/science/article/pii/S1389128619304736）&lt;/span&gt;&lt;span&gt;构建的恶意软件分类器，&lt;/span&gt;&lt;span&gt;本文所用的数据集为在&lt;/span&gt;&lt;span&gt;基于深度学习的恶意软件分类器（一）【&lt;span&gt;https://bbs.pediy.com/thread-271558.htm&lt;/span&gt;】&lt;/span&gt;&lt;span&gt;文中介绍过的微软公开数据&lt;/span&gt;&lt;span&gt;集，与论文中所用数据集并不相同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图为分类器的构建过程，首先通过applyColorMap将灰度图转为彩图作为输入数据，接着用这些来微调(fine-tuning)加载了预训练模型的VGG16模型来完成分类器的训练。此外，还通过数据增强(Data Augmentation, DA)来缓解数据不足的问题，增加训练集样本多样性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/1UG7KPNHN8EC5uDbKzSFD2BXQpWp1Ywmh5ictpyicFgsJhibdPN0ASUHZ6fENRMmrlZjH5162LXSAxCib9YBKd3CVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;2、实验环境&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Python版本：3.6.13&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Pytorch版本：1.8.1&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;CUDA版本：11.4&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-none-contnet=&quot;t&quot;&gt;二&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;数据处理&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图显示了将一张恶意软件可视化为灰度图后，resize成（224*224）大小后在应用applyColor转换为彩图的结果，从转换结果可以看出转换的彩图依然具有清晰的图像纹理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5011682242990654&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/1UG7KPNHN8EC5uDbKzSFD2BXQpWp1YwmcafxkI1hjLK4KZ9jicPhcHGLiazSbNiaZwpJt7JzuXP3CSCI4x551ThjQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;856&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;                           &lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在深度学习的任务中，都会希望样本数量可以足够多，且类型丰富。这样的数据集训练出来的模型具有更好的泛化能力，分类器的性能将会更高。但是，实际训练过程中，很有可能无法得到满意的样本数量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此，需要通过数据增强来丰富样本数。数据增强的方法有很多，本文选用了其中3种，分别是垂直翻转，水平翻转和随机旋转一定角度(-45度到45度)，下面的图图分别对应三种数据增强方法后生成的图片。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4372623574144487&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/1UG7KPNHN8EC5uDbKzSFD2BXQpWp1YwmR2odN1eokBfyHDYXicWDlwyWwaziafkG2VPM7hUcDC3ZyPnTy18nmEcQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1052&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.41306266548984993&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/1UG7KPNHN8EC5uDbKzSFD2BXQpWp1YwmhkVibnibJt1BroKicUQBZgDF6BP3kJ0kK0xdFBvLsVSXhaeQoHs7KQdiag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1133&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过数据增强，此时拥有了类别更丰富，数量更多的训练样本来构建分类器，此时的数据类代码如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from torch.utils.data import Dataset&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import glob&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import pandas as pd&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import torch&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from torchvision import transforms&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import cv2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from torchvision.transforms import InterpolationMode&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from PIL import Image&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MalwareDataset&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;Dataset&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, file_path, is_train)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_train = is_train&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.file_path = glob.glob(os.path.join(file_path, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;*.png&quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.len = len(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.file_path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.transforms_data = transforms.Compose([transforms.ToTensor()])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__symbol&quot;&gt;is_train:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            train_label_path = os.path.join(file_path, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;..&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;trainLabels.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            df = pd.read_csv(train_label_path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.y_data = get_train_label(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.file_path, df)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.y_data = torch.Tensor(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.y_data)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            transforms_choice = transforms.RandomChoice([transforms.RandomRotation(degrees=&lt;span class=&quot;code-snippet__number&quot;&gt;45&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                                                   interpolation=InterpolationMode.NEAREST,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                                                   expand=True),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                         transforms.RandomHorizontalFlip(p=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                         transforms.RandomVerticalFlip(p=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;)])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.transforms_data = transforms.Compose([transforms_choice,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                       transforms.Resize((&lt;span class=&quot;code-snippet__number&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;224&lt;/span&gt;), interpolation=InterpolationMode.NEAREST),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                       transforms.ToTensor()])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, index)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        image = cv2.imread(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.file_path[index])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        image = cv2.resize(image, (&lt;span class=&quot;code-snippet__number&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;224&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        image = cv2.applyColorMap(image, cv2.COLORMAP_RAINBOW)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        image = Image.fromarray(image)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        image = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.transforms_data(image)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__symbol&quot;&gt;is_train:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; image, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.y_data[index]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__symbol&quot;&gt;else:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            file_name = get_file_name(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.file_path[index])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; image, file_name&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__len__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.len&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;get_file_name&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(file_path)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    file_name_begin = file_path.rfind(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/&quot;&lt;/span&gt;) + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    file_name_end = file_path.rfind(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; file_path[&lt;span class=&quot;code-snippet__symbol&quot;&gt;file_name_begin:&lt;/span&gt;file_name_end]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;get_train_label&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(file_path, df)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    train_label = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; fp &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;code-snippet__symbol&quot;&gt;file_path:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        file_name = get_file_name(fp)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        train_label.append(df[df[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Id&quot;&lt;/span&gt;] == file_name][&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Class&quot;&lt;/span&gt;].astype(int).values[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; train_label&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;h1&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-none-contnet=&quot;t&quot;&gt;三&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;模型&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;1、卷积神经网络&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;卷积神经网络(Convolutional Neural NetWorks, CNN)是一类包含卷积计算且具有深度结构的前馈神经网络，具有良好的表征学习能力。卷积层和池化层是卷积神经网络的关键内容，这两个层都是通过滑动窗口实现的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图是一个卷积层的实例，此时输入的图像是一个5*5大小的矩阵，卷积核的大小为3 * 3，此时滑动窗口的大小就是3 * 3，滑动窗口的步长为1，该滑动窗口会向下或向右移动，对应的窗口中的数值与卷积核的数值进行卷积运算(对应相乘后相加)作为输出结果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以下图为例，第一个输出结果就是输入图像深色部分核卷积核中的每一个对应数字相乘得到的结果，也就是0 * 0 + 1 * 1 + 2 * 2 + 5 * 1 + 6 * 2 + 7 * 0 + 0 * 2 + 1 * 1 + 0 * 0 =23。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第一个结果计算完成后，滑动窗口会向右移动一个步幅，第二个输出结果的计算就是1 * 0 + 2 * 1 + 3 * 2 + 6 * 1 + 7 * 2+ 8 * 0 +1 * 2 + 2 * 1 + 3 * 0 = 32。以此类推，最终输入图像经过运算以后会得到最终的输出结果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38293216630196936&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/1UG7KPNHN8EC5uDbKzSFD2BXQpWp1YwmGuO8T39MBjMrVd2HsnU0WI9iciazBUviazDBodicGAjvaa6rbKKBGia99Gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;卷积层的输出结果会在经过池化层处理，如下图所示，池化层分别平均池化层和最大池化层两种。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;和卷积层一样，池化层也是通过滑动窗口来实现的，图中对应的滑动窗口大小为2*2，每次也是移动一个步长。池化层的计算很简单，最大池化层就是对窗口中的数值取最大值作为输出，平均池化层就是对窗口中的数值求平均数后最为输出。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过池化层可以减少输入数据，从而减少特征的尺寸以便更快地计算，同时池化层可以保留最重要的信息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4663173652694611&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/1UG7KPNHN8EC5uDbKzSFD2BXQpWp1YwmtUF0sTFicIakOmz2wU13FY3jiaZcsJO4Ny7IbreOH9tqRwMYuuBwiam3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1336&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通常，一个卷积神经网络架构具有一组或多组卷积和池化层，最后通过一组全连接层输出结果。在卷积层和池化层的支持下，CNN可以进行局部的特征学习，专注于输入数据的局部部分，抽取出图像中的有效特征。全连接层就会接收到这些高级别的特征作为输入，因此能够准确地处理复杂数据，在图像识别和分类方面有良好的性能。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;2、VGG16&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;下图是VGG16的网络架构，该网络共有5个Block，包含13个卷积层和5个池化层来抽取图像特征，最终通过全连接层来输出分类结果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后的一层全连接层为任务的类别数，这里的1000是ImageNet数据集的类别数，需要修改为本文的分类任务数。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.61328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/1UG7KPNHN8EC5uDbKzSFD2BXQpWp1YwmDvXeFVzDemzxiaII2RKmIBmVkVyWqHOgKyeIVOM0d1S4vnRYF2iaTthw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3、微调模型&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;CNN的卷积层和池化层提取的特征一般都是比较通用的特征，一个图像分类任务训练得到的参数可以迁移到其他任务中去使用。而后面的全连接层是用来输出分类结果，这些层的参数往往因为任务的不同有较大差别。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此，可以将模型在其他任务中训练得到的参数迁移到本任务中，通过冻结前面的一些卷积层，仅调整后面的全连接层的参数来微调模型构建分类器。此时，需要训练的参数量就会减少，模型训练速度会有所加快。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文的分类器是通过使用VGG16模型在ImageNet数据集预训练得到的参数，进行微调得到的，模型代码依然如下：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; torch.nn &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; nn&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; torch.hub &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; load_state_dict_from_url&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;__all__ = [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;VGG&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;vgg16&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;vgg16_bn&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;model_urls = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;vgg16&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;https://download.pytorch.org/models/vgg16-397923af.pth&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;vgg16_bn&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;https://download.pytorch.org/models/vgg16_bn-6c64b313.pth&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;VGG&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(nn.Module)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, features, num_classes=&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;, init_weights=True)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        super(VGG, self).__init__()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.features = features&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.avgpool = nn.AdaptiveAvgPool2d((&lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.classifier1 = nn.Sequential(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nn.Linear(&lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4096&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nn.ReLU(&lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nn.Dropout(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nn.Linear(&lt;span class=&quot;code-snippet__number&quot;&gt;4096&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4096&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nn.ReLU(&lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nn.Dropout(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nn.Linear(&lt;span class=&quot;code-snippet__number&quot;&gt;4096&lt;/span&gt;, num_classes),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; init_weights:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            self._initialize_weights()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x = self.features(x)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x = self.avgpool(x)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x = x.view(x.size(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x = self.classifier1(x)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;_initialize_weights&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; m &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; self.modules():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; isinstance(m, nn.Conv2d):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                nn.init.kaiming_normal_(m.weight, mode=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;fan_out&#x27;&lt;/span&gt;, nonlinearity=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;relu&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; m.bias &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    nn.init.constant_(m.bias, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; isinstance(m, nn.BatchNorm2d):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                nn.init.constant_(m.weight, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                nn.init.constant_(m.bias, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; isinstance(m, nn.Linear):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                nn.init.normal_(m.weight, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0.01&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                nn.init.constant_(m.bias, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;make_layers&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(cfg, batch_norm=False)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    layers = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    in_channels = &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; cfg:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; v == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;M&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            layers += [nn.MaxPool2d(kernel_size=&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, stride=&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            conv2d = nn.Conv2d(in_channels, v, kernel_size=&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, padding=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; batch_norm:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                layers += [conv2d, nn.BatchNorm2d(v), nn.ReLU(inplace=&lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                layers += [conv2d, nn.ReLU(inplace=&lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            in_channels = v&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; nn.Sequential(*layers)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cfgs = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;D&#x27;&lt;/span&gt;: [&lt;span class=&quot;code-snippet__number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;M&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;M&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;M&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;M&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;M&#x27;&lt;/span&gt;],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;_vgg&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(arch, cfg, batch_norm, pretrained, progress, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; pretrained:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        kwargs[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;init_weights&#x27;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    model = VGG(make_layers(cfgs[cfg], batch_norm=batch_norm), **kwargs)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; pretrained:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        state_dict = load_state_dict_from_url(model_urls[arch],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                              progress=progress)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        model.load_state_dict(state_dict, strict=&lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; model&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;vgg16&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(pretrained=False, progress=True, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; _vgg(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;vgg16&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;D&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;, pretrained, progress, **kwargs)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;vgg16_bn&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(pretrained=False, progress=True, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; _vgg(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;vgg16_bn&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;D&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;, pretrained, progress, **kwargs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;需要微调的层是Block5和之后的全连接层，因此，需要将前面的Block1到Block4全部冻结，以下代码分别是冻结相应的层以及打印需要训练的参数的代码：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;set_parameter_requires_grad&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    count = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; param &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; model.parameters():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        param.requires_grad = &lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; param.size()[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            count += &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; count == &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;train_param_number&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    train_num = sum(param.numel() &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; param &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; model.parameters() &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; param.requires_grad)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;train_num:%d&quot;&lt;/span&gt; % train_num)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过调用这两个函数，就可以看到在冻结后需要训练的参数量有所减少&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;model = vgg16(num_classes=9)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;train_param_number(model)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;set_parameter_requires_grad(model)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;train_param_number(model.classifier1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;train_num:134297417&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;train_num:119582729&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-none-contnet=&quot;t&quot;&gt;四&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于通过数据增强丰富了训练集样本，此时有了数量更多的训练集样本，因此需要更多的epoch才能让模型拟合，此时相关的参数设定如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;os&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;Configure:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;base_path&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;train_gray_path&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;os.path.join(base_path, &quot;train_gray_images&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;test_gray_path&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;os.path.join(base_path, &quot;test_gray_images&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;submit_path&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;os.path.join(base_path, &quot;submit.csv&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;is_train&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;True     # 用来设置是训练模型还是测试模型&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;batch_size&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;num_workers&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;epochs&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;40&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;lr&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;1e-3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;decay&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;0.0005&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;momentum&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;0.9&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;model_path&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;IMCFN.pth&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;num_classes&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-none-contnet=&quot;t&quot;&gt;五&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;分类结果&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对分类器进行训练和测试的代码如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; MalwareDataset &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; MalwareDataset&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; torch.utils.data &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; DataLoader&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; torch.nn.functional &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; F&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; Configure &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Configure&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; VGG &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; vgg16&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;set_parameter_requires_grad&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    count = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; param &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; model.parameters():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        param.requires_grad = &lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; param.size()[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            count += &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; count == &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;train_param_number&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    train_num = sum(param.numel() &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; param &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; model.parameters() &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; param.requires_grad)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;train_num:%d&quot;&lt;/span&gt; % train_num)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;load_model&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(model_path)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; os.path.exists(model_path):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;模型路径错误，模型加载失败&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sys.exit(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; torch.load(model_path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;save_model&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(target_model, model_path)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; os.path.exists(model_path):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        os.remove(model_path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    torch.save(target_model, model_path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(epoch)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; batch_idx, data &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; enumerate(train_loader, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        optimizer.zero_grad()                                   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        inputs, labels = data&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        inputs, labels = inputs.to(device), labels.to(device)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        y_pred = modeler(inputs)                                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        loss = F.cross_entropy(y_pred, labels.long())           &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; batch_idx % &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt; == &lt;span class=&quot;code-snippet__number&quot;&gt;99&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;epoch=%d, loss=%f&quot;&lt;/span&gt; % (epoch, loss.item()))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        loss.backward()                                         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        optimizer.step()                                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    df = pd.read_csv(conf.submit_path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;with&lt;/span&gt; torch.no_grad():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; inputs, file_name &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; test_loader:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            inputs = inputs.to(device)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            outputs = modeler(inputs)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            predicted = F.softmax(outputs.data, dim=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            data_len = len(inputs)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(data_len):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                dict_res = {&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Id&quot;&lt;/span&gt;: file_name[i], &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Prediction1&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Prediction2&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Prediction3&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Prediction4&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Prediction5&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Prediction6&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Prediction7&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Prediction8&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Prediction9&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;9&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    dict_res[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Prediction&quot;&lt;/span&gt; + str(j + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)] = predicted[i][j].item()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                df = df.append(dict_res, ignore_index=&lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    df.to_csv(conf.submit_path, index=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;__main__&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    os.environ[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;CUDA_DEVICE_ORDER&quot;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;PCI_BUS_ID&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    os.environ[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;CUDA_VISIBLE_DEVICES&quot;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    device = torch.device(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;cuda:0&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; torch.cuda.is_available() &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;cpu&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    conf = Configure()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    test_dataset = MalwareDataset(conf.test_gray_path, &lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    test_loader = DataLoader(test_dataset, batch_size=conf.batch_size,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                             shuffle=&lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;, num_workers=conf.num_workers)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; conf.is_train:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        train_dataset = MalwareDataset(conf.train_gray_path, &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        train_loader = DataLoader(train_dataset, batch_size=conf.batch_size,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                  shuffle=&lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;, num_workers=conf.num_workers)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        modeler = vgg16(pretrained=&lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;, num_classes=conf.num_classes)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;=====================开始加载模型================&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        modeler = load_model(conf.model_path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;=====================模型加载完成================&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    set_parameter_requires_grad(modeler)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    modeler.to(device)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; conf.is_train:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        optimizer = torch.optim.SGD(modeler.parameters(), lr=conf.lr,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    weight_decay=conf.decay, momentum=conf.momentum)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;=====================开始训练模型================&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(conf.epochs):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            train(i)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;=====================模型训练完成================&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        save_model(modeler, conf.model_path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;=====================开始测试模型================&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    test()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;=====================模型测试完成================&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面图是模型在不同epoch情况下的损失，由图可以看出，当epoch等于40时，损失最小，分类器的性能最好。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/1UG7KPNHN8EC5uDbKzSFD2BXQpWp1YwmicShpXhHeQOBdplv38j9kticsIsiasVicTQwQsNOkgQ1eQhh3Qicq2kRORg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;68&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;68&quot; data-fileid=&quot;100035993&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/1UG7KPNHN8EC5uDbKzSFD2BXQpWp1YwmqrY1HibfCcbibKqHk3l7AU8Nxy9eW86nHQYsPzTyOibo82wa5pIZiaEwVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;128&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;看雪ID：1900&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://bbs.pediy.com/user-home-835440.htm&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;*本文由看雪论坛 1900 原创，转载请注明来自看雪社区&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;amp;mid=2458451170&amp;amp;idx=4&amp;amp;sn=ef65e89e69e1c3e99ab2ddab109410bc&amp;amp;chksm=b18fcc6886f8457ec99c947a8f8303678edfe4fe14aea1d6788a2a4660dff5e1af0d3efaadf7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.40390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/1UG7KPNHN8G8Afib4u3yW6GmribqAjIQ9TrAo3zicsk8OdOZgApIF9lGNY8M4ibYtPia3QAabKdJooVOL3G3h4RRv0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;#&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt; 往期推荐&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;amp;mid=2458451170&amp;amp;idx=1&amp;amp;sn=268d133649c845d8f062866cf94e7c95&amp;amp;chksm=b18fcc6886f8457e2daaa55cdbdd6c39047ae997da3454fa35b8e8ee07da3b450cbae5b32bda&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Android APP漏洞之战——调试与反调试详解&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Android APP漏洞之战——调试与反调试详解&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;amp;mid=2458451152&amp;amp;idx=2&amp;amp;sn=4abbf7a643b93027529e12442608aca2&amp;amp;chksm=b18fcc5a86f8454cb6051aab6a45751ad736285e3f46e92436edb2b963b46bee27da5e0c9922&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Fuzzm: 针对WebAssembly内存错误的模糊测试&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Fuzzm: 针对WebAssembly内存错误的模糊测试&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;amp;mid=2458449720&amp;amp;idx=1&amp;amp;sn=d3e33c568fee745ef1ad6334443c2eac&amp;amp;chksm=b18fc7b286f84ea479599f079963ab9b9e199717629c8d0636cd87341b552823a01f995a18c3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2022腾讯游戏安全初赛一题解析&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;2022腾讯游戏安全初赛一题解析&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;amp;mid=2458449573&amp;amp;idx=1&amp;amp;sn=cfab5d8030041ed7d6d4ed0eb84619fc&amp;amp;chksm=b18fc62f86f84f3901d3bfa087c6b0ceb1882ad1682d155e01107cc4b0d09c8359445c624a84&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一文读懂PE文件签名并手工验证签名有效性&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一文读懂PE文件签名并手工验证签名有效性&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;amp;mid=2458448087&amp;amp;idx=1&amp;amp;sn=3595bf9bf964f546f0126d25482570e1&amp;amp;chksm=b18fc05d86f8494bbdb90f94263ecb483db007b87b31127ac396851d1ee68e84f7e28beffae6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一道pwn题目2e4zu的深入分析&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一道pwn题目2e4zu的深入分析&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;amp;mid=2458446970&amp;amp;idx=1&amp;amp;sn=fe5fd9a5dd5b284114eec6b391c0ac1a&amp;amp;chksm=b18fdcf086f855e6357dc286aabe7a97b9cb48214018c7f316f59e2a95c2ce982efe6167c773&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;CNVD-2018-01084 漏洞复现报告（service.cgi 远程命令执行漏洞）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;CNVD-2018-01084 漏洞复现报告（service.cgi 远程命令执行漏洞）&lt;/a&gt;&lt;/span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-copyright=&quot;0&quot; data-fileid=&quot;100035996&quot; data-ratio=&quot;0.46875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Uia4617poZXP96fGaMPXib13V1bJ52yHq9ycD9Zv3WhiaRb2rKV6wghrNa4VyFR2wibBVNfZt3M5IuUiauQGHvxhQrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100035998&quot; data-ratio=&quot;0.8808777&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/1UG7KPNHN8EbEJaHl4j4oA4ejnuzPAicdP7bNEwt8Ew5l2fRJxWETW07MNo7TW5xnw60R9WSwicicxtkCEFicpAlQg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;球分享&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100035999&quot; data-ratio=&quot;0.8808777&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/1UG7KPNHN8EbEJaHl4j4oA4ejnuzPAicdP7bNEwt8Ew5l2fRJxWETW07MNo7TW5xnw60R9WSwicicxtkCEFicpAlQg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;球点赞&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100035997&quot; data-ratio=&quot;0.8808777&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/1UG7KPNHN8EbEJaHl4j4oA4ejnuzPAicdP7bNEwt8Ew5l2fRJxWETW07MNo7TW5xnw60R9WSwicicxtkCEFicpAlQg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;球在看&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6197183&quot; data-type=&quot;gif&quot; data-w=&quot;71&quot; data-fileid=&quot;100036000&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/1UG7KPNHN8EbEJaHl4j4oA4ejnuzPAicd7icG69uHMQX9DaOnSPpTgamYf9cLw1XbJLEGr5Eic62BdV6TRKCjWVSQ/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;点击“阅读原文”，了解更多！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>85f107e085cc5f9eff9ba0e4fa826783</guid>
<title>实时预览组件效果，这个库让你方便到哭</title>
<link>https://toutiao.io/k/iwcb0r0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是&lt;strong&gt;零一&lt;/strong&gt;，看到一个好东西，忍不住来分享一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在写需求时都会封装一些组件，然后会为该组件定义一些 &lt;code&gt;props&lt;/code&gt; ，使其跟业务分离，变得更通用。写完组件后需要验证一下组件的效果，也就需要简单 &lt;code&gt;mock&lt;/code&gt; 一下数据传进去，然后跑一下项目看一下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// components/card/index.tsx  Card 组件 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 咱先来写个组件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Card&lt;/span&gt; (&lt;span&gt;props&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; { name } = props&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;    &amp;lt;div&amp;gt;{name}&amp;lt;&lt;span&gt;/div&amp;gt;&lt;br/&gt;  )&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// index.tsx  项目根目录&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 组件写好了，找个地方引入一下，传点数据进去，免得项目崩了&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; Card form &lt;span&gt;&#x27;card&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; (&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;    &amp;lt;Card name=&lt;span&gt;&quot;零一&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;  )&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;# 跑一下项目，看看刚才写的组件的效果&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; yarn dev&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这套流程，你是不是很熟悉？大家可能都是这么干的，看完效果后还要回过头去把刚刚不要的测试代码都删掉&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而，我找到了一个非常好用的 &lt;strong&gt;Vscode 插件&lt;/strong&gt; 大大简化了这个流程！！！！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它就是 &lt;strong&gt;Preview.js&lt;/strong&gt; ，一个用于项目中组件实时预览的插件&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它有什么&lt;strong&gt;优点&lt;/strong&gt;？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;支持 &lt;code&gt;React（v16+）&lt;/code&gt;、&lt;code&gt;Vue2&lt;/code&gt;、&lt;code&gt;Vue3&lt;/code&gt;、&lt;code&gt;SolidJS&lt;/code&gt;，并即将支持 &lt;code&gt;Preact&lt;/code&gt; 和 &lt;code&gt;Svelte&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无需启动项目，直接静态预览组件效果&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动识别组件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动生成 props 的 mock 数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实时刷新，无需疯狂点保存触发&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以针对同一个组件生成多个预览，并可快速切换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持调整页面比例，以及切换不同分辨率的设备&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;暗黑模式切换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;直接搜索项目中的其它组件，快速切换&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;香不香？我反正已经上手使用过了，是真的香！之前我自己也做过组件库的项目，写完一个组件，就需要写一个 &lt;code&gt;example&lt;/code&gt; 去看看效果，要是用了这个插件，项目也不用跑，实时预览，该有多爽啊（正在开发组件库的同学看过来，福利啊）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再讲一下这个插件的&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;插件是刚出的，可能会有一些bug，这是难免的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;上述优点中，6、7、8都是需要付费的，不过目前可以白嫖，等会讲&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;待发现...&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但我目前用下来是没啥问题的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;接下来带大家体验一下&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;安装&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接在 VsCode 的插件市场搜索：&lt;code&gt;Preview.js&lt;/code&gt;，安装即可&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23484848484848486&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgHVurTfTczSTEMHXML94icmpicms8BanXlbZzZIGH5UyREr8fOEkMfMgjUyxpZQX1lSvj8OX6ia86rnUT7XAqREQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;528&quot;/&gt;&lt;figcaption&gt;安装插件&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后最好重启一下 VsCode&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;emmmm，大多数同学应该会收到这样一条报错信息：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16373056994818652&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgHVurTfTczSTEMHXML94icmpicms8BanXxY4e33SNicjW1noGK6tiarvb99RgfiaZEyCJFaL1XoictCpKrJUb01PBdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1930&quot;/&gt;&lt;figcaption&gt;npm 版本过低&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为重启后的初始化阶段，&lt;code&gt;Preview.js&lt;/code&gt; 插件会安装一些依赖包，并且它们最低支持的 &lt;code&gt;npm&lt;/code&gt; 版本是 &lt;code&gt;7+&lt;/code&gt;，估摸着大部分同学的 &lt;code&gt;npm&lt;/code&gt; 包都是小于 7 的，所以还是建议大家想要使用时切换一下 &lt;code&gt;node&lt;/code&gt; 版本，比如用 &lt;code&gt;nvm use 17.5.0&lt;/code&gt;，此时的 &lt;code&gt;npm&lt;/code&gt; 版本就到了 &lt;code&gt;8+&lt;/code&gt; 了，满足了需求，此时还需要重启一次&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;稍微耐心等待几秒钟，等它的依赖包都装好就ok了&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40804597701149425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgHVurTfTczSTEMHXML94icmpicms8BanXuX0AZo3VoefWCxYy9p5YYIsgVGj7NaUsaBPFLXR8QSImZTptU0YqOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1044&quot;/&gt;&lt;figcaption&gt;preview.js 依赖包安装成功&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;基本使用&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;为了方便起见，我就拿 &lt;code&gt;React&lt;/code&gt; 的代码来做示例了，但刚才提到那些库也都是支持的哈，大家可以自行尝试&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;咱们随便找到项目中的一个组件打开&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6751968503937008&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgHVurTfTczSTEMHXML94icmpicms8BanXK4KX5F4EhzyiaDMV1IPicT0FgLGreUmoOHUG69juxXYzjYCb0A3Xszicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1016&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，插件自动识别到了我的 &lt;code&gt;Card&lt;/code&gt; 组件，并在上方悬浮了一个 &lt;code&gt;Open Card in Preview.js&lt;/code&gt; 的灰色按钮，点击以后右边就会出来一个预览窗口了（此时咱们都还没启动项目）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4347442680776014&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lgHVurTfTczSTEMHXML94icmpicms8BanXLAGZicvdPVzrjIlxGymV1g7OEFfjnmmL2VhFVggQFribK03ia9Lo1A9Bg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1134&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还能看到，右下角也帮我们生成了该组件需要的 &lt;code&gt;props&lt;/code&gt; 的 mock 数据，不过这个前提条件是你项目是 TS 的，并且给 props 限定了类型才行，否则是不行的（我试过了）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一切（新增组件、修改文本、修改样式...）的修改都是实时的（除了修改 props 类型），我们来看一下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43562610229276894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lgHVurTfTczSTEMHXML94icmpicms8BanXvmkEichQYP8fLzz1Iq50uh6CrpkSCucN6oTobdT72yAD5rQBIIr5XJw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1134&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类型修改不能实时也算是一个小缺点，希望后续可以改进一下。如果咱们改了类型，目前只需重启预览窗口就可以了，点底部的刷新是没用的&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Pro 级别的功能&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来是高级用户可以使用的功能，我看到他们官网是有申请 30 天免费体验资格的，为了本文的效果，我先申请了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;申请网址：https://previewjs.com/checkout&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;填一下自己的邮箱，就申请成功了&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44224037339556593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgHVurTfTczSTEMHXML94icmpicms8BanXHcz0lmrJtPyr4wujjruNAhPicIjcomuYdaVJqRzLlc7syPxicGjd8XsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1714&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后它会把一个兑换码发到你的邮箱里&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.834319526627219&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgHVurTfTczSTEMHXML94icmpicms8BanX3KicO7kaAmxEO4NvHJPMiazSKE26N0j4yTzkQ7aVeVmyxqAPD7SYFp4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿着这个码去 VsCode 的 Preview.js 预览窗口里填写即可&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.875438596491228&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgHVurTfTczSTEMHXML94icmpicms8BanXRhI7Zscv7Gq4yiaKibqIvmOg0yfrtQlTlnpBUTMzAVhe9SknibDribsZZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1140&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6686991869918699&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgHVurTfTczSTEMHXML94icmpicms8BanXbstpk3ETvKM8mHBKwTpgxyouGUqIrpXhniaib7iclSUQqNjYtib69pG4KQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;984&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后就成功了，页面现在多了一堆功能&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8880994671403197&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgHVurTfTczSTEMHXML94icmpicms8BanXH6QuCYGplYleMibCLJ0W0LJk034bdOtgwiaYw0kbgXSPEJ2ZXWj4NiaZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1126&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来统一体验一下吧&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8774422735346359&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lgHVurTfTczSTEMHXML94icmpicms8BanXATlTnfBrDE2VzbZIUWAKlmgTRCgz9ib4KEUPF30okR0IHe5KXfsfpKg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;563&quot;/&gt;&lt;figcaption&gt;体验pro付费功能&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总体来说这个插件已经很 nice 了，即使不用付费版本的功能，也可以满足基本的需求，而且这个功能在写业务时非常有用，大大提高工作效率，&lt;strong&gt;真的真的强烈推荐！！！！&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;Preview.js&lt;/strong&gt;: https://previewjs.com/&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;296&quot; data-ratio=&quot;0.5299270072992701&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/5Q3ZxrD2qNDvxh93JHfZD80m7GhBmGicoYpnLCanxmxvpVm4ACYNms63xnCgKt1Py5rvMCEDkWebYCTpfDVBq7g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;685&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong/&gt;&lt;strong&gt;&lt;span&gt;彦祖，亦菲，&lt;/span&gt;&lt;span&gt;点个&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;「在看」&lt;/strong&gt;&lt;span&gt;吧&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>