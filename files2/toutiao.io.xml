<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>32c0be23ac1ba8584e610f6b3146567c</guid>
<title>工具 | 阿里巴巴开源的，轻量、高性能、可集成、可扩展的流程引擎</title>
<link>https://toutiao.io/k/xuszkb1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>efe6bc9098fc48244fc3b25344706160</guid>
<title>Java 进阶：IO 流核心模块与基本原理</title>
<link>https://toutiao.io/k/n2zrxie</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1&gt;&lt;span&gt;一、IO流与系统&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;IO技术在JDK中算是极其复杂的模块，其复杂的一个关键原因就是IO操作和系统内核的关联性，另外网络编程，文件管理都依赖IO技术，而且都是编程的难点，想要整体理解IO流，先从Linux操作系统开始。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Linux空间隔离&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Linux使用是区分用户的，这个是基础常识，其底层也区分用户和内核两个模块：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;User space：用户空间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kernel space：内核空间&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;常识用户空间的权限相对内核空间操作权限弱很多，这就涉及到用户与内核两个模块间的交互，此时部署在服务上的应用如果需要请求系统资源，则在交互上更为复杂：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2202797202797203&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwnamePU9YDJ6sdKTR2X3mTw8JIQHlmJlSfy5OPL6apicWaJedHLLsgXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1144&quot;/&gt;&lt;/p&gt;&lt;p&gt;用户空间本身无法直接向系统发布调度指令，必须通过内核，对于内核中数据的操作，也是需要先拷贝到用户空间，这种隔离机制可以有效的保护系统的安全性和稳定性。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;参数查看&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;可以通过Top命令动态查看各项数据分析，进程占用资源的状况：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.33276157804459694&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwlHBibxXfeRauaxJ1gqsDNxEum8UkQXVG7Rp30cMJm2N0BvSaeicLPlnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1166&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;us&lt;/code&gt;：用户空间占用CPU的百分比;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;sy&lt;/code&gt;：内核空间占用CPU的百分比；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;id&lt;/code&gt;：空闲进程占用CPU的百分比；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;wa&lt;/code&gt;：IO等待占用CPU的百分比；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对&lt;code&gt;wa&lt;/code&gt;指标，在大规模文件任务流程里是监控的核心项之一。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IO协作流程&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;此时再看上面图【1】的流程，当应用端发起IO操作的请求时，请求沿着链路上的各个节点流转，有两个核心概念：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;节点交互模式：同步与异步；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IO数据操作：阻塞与非阻塞；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里就是文件流中常说的：【同步/异步】IO,【阻塞/非阻塞】IO，下面看细节。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、IO模型分析&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、同步阻塞&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;用户线程与内核的交互方式，应用端请求对应一个线程处理，整个过程中accept(接收)和read(读取)方法都会阻塞直至整个动作完成：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwrahFIgiaicP09sTMGpn1PsIGtYSI4hEXhzia0ycYdcewuwMeltdWpXokw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;在常规CS架构模式中，这是一次IO操作的基本过程，该方式如果在高并发的场景下，客户端的请求响应会存在严重的性能问题，并且占用过多资源。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、同步非阻塞&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;在同步阻塞IO的基础上进行优化，当前线程不会一直等待数据就绪直到完成复制：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6689536878216124&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwURgRHrTiahdibRA3D7OCG0nibDV5ichFOYV4KDNuOccLxT5QtXHRYY9yyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1166&quot;/&gt;&lt;/p&gt;&lt;p&gt;在线程请求后会立即返回，并不断轮询直至拿到数据，才会停止轮询，这种模式的缺陷也是显而易见的，如果数据准备好，在通知线程完成后续动作，这样就可以省掉很多中间交互。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、异步通知模式&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;在异步模式下，彻底摒弃阻塞机制，过程分段进行交互，这与常规的第三方对接模式很相似，本地服务在请求第三方服务时，如果请求过程耗时很大，会异步执行，第三方第一次回调，确认请求可以被执行；第二次回调则是推送处理结果，这种思想在处理复杂问题时，可以很大程度的提高性能，节省资源：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwsYCn7kX2ibtDvDX0CheE15m5arjTFqszQibqJWP5XLNMc6Wf4z9nIicBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;异步模式对于性能的提升是巨大的，当然其相应的处理机制也更复杂，程序的迭代和优化是无止境的，在NIO模式中再次对IO流模式进行优化。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、File文件类&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基础描述&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;File类作为文件和目录路径名的抽象表示，用来获取磁盘文件的相关元数据信息，例如：文件名称、大小、修改时间、权限判断等。&lt;/p&gt;&lt;p&gt;注意：File并不操作文件承载的数据内容，文件内容称为数据，文件自身信息称为元数据。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;File01&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1、读取指定文件&lt;/span&gt;&lt;br/&gt;        File speFile = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;fileio-03.text&quot;&lt;/span&gt;) ;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!speFile.exists()){&lt;br/&gt;            &lt;span&gt;boolean&lt;/span&gt; creFlag = speFile.createNewFile() ;&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;创建：&quot;&lt;/span&gt;+speFile.getName()+&lt;span&gt;&quot;; 结果：&quot;&lt;/span&gt;+creFlag);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 2、读取指定位置&lt;/span&gt;&lt;br/&gt;        File dirFile = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH) ;&lt;br/&gt;        &lt;span&gt;// 判断是否目录&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;boolean&lt;/span&gt; dirFlag = dirFile.isDirectory() ;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (dirFlag){&lt;br/&gt;            File[] dirFiles = dirFile.listFiles() ;&lt;br/&gt;            printFileArr(dirFiles);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 3、删除指定文件&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (speFile.exists()){&lt;br/&gt;            &lt;span&gt;boolean&lt;/span&gt; delFlag = speFile.delete() ;&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;删除：&quot;&lt;/span&gt;+speFile.getName()+&lt;span&gt;&quot;; 结果：&quot;&lt;/span&gt;+delFlag);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printFileArr&lt;/span&gt; &lt;span&gt;(File[] fileArr)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (fileArr != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; fileArr.length&amp;gt;&lt;span&gt;0&lt;/span&gt;){&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (File file : fileArr) {&lt;br/&gt;                printFileInfo(file) ;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printFileInfo&lt;/span&gt; &lt;span&gt;(File file)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;名称：&quot;&lt;/span&gt;+file.getName());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;长度：&quot;&lt;/span&gt;+file.length());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;路径：&quot;&lt;/span&gt;+file.getPath());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;文件判断：&quot;&lt;/span&gt;+file.isFile());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;目录判断：&quot;&lt;/span&gt;+file.isDirectory());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;最后修改：&quot;&lt;/span&gt;+&lt;span&gt;new&lt;/span&gt; Date(file.lastModified()));&lt;br/&gt;        System.out.println();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述案例使用了File类中的基本构造和常用方法（读取、判断、创建、删除）等，JDK源码在不断的更新迭代，通过类的构造器、方法、注释等去判断类具有的基本功能，是作为开发人员的必备能力。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5751748251748252&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwQcvN7IOHmicWY9FZHicWJ2ibb6JtNmCWJbzo8U96cAr6TvCVkib3BA9Ung/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1144&quot;/&gt;&lt;/p&gt;&lt;p&gt;在File文件类中缺乏两个关键信息描述：&lt;strong&gt;类型和编码&lt;/strong&gt;，如果经常开发文件模块的需求，就知道这是两个极其复杂的点，很容易出现问题，下面站在实际开发的角度看看如何处理。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、文件业务场景&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;如图所示，在常规的文件流任务中，会涉及【文件、流、数据】三种基本形式的转换：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5220729366602687&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwxTUBSwe05vAqCMuLHxKcGhF7ZQVfT66KlZC3YX8uqGf0dRzvdQPYkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1042&quot;/&gt;&lt;/p&gt;&lt;p&gt;基本过程描述：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;源文件生成，推送文件中心；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通知业务使用节点获取文件；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务节点进行逻辑处理；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;很显然的一个问题，任何节点都无法适配所有文件处理策略，比如类型与编码，面对复杂场景下的问题，&lt;code&gt;规则约束&lt;/code&gt;是常用的解决策略，即在约定规则之内的事情才处理。&lt;/p&gt;&lt;p&gt;上面流程中，源文件节点通知业务节点时的数据主体描述：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BizFile&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 文件任务批次号&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String taskId ;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 是否压缩&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Boolean zipFlag ;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 文件地址&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String fileUrl ;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 文件类型&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String fileType ;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 文件编码&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String fileCode ;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 业务关联：数据库&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String bizDataBase ;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 业务关联：数据表&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String bizTableName ;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把整个过程当做一个任务进行封装，即：任务批次、文件信息、业务库表路由等，当然这些信息也可以直接标记在文件命名的策略上，处理的手段类似：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 基于约定策略读取信息&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;File02&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        BizFile bizFile = &lt;span&gt;new&lt;/span&gt; BizFile(&lt;span&gt;&quot;IN001&quot;&lt;/span&gt;,Boolean.FALSE, IoParam.BASE_PATH,&lt;br/&gt;                &lt;span&gt;&quot;csv&quot;&lt;/span&gt;,&lt;span&gt;&quot;utf8&quot;&lt;/span&gt;,&lt;span&gt;&quot;model&quot;&lt;/span&gt;,&lt;span&gt;&quot;score&quot;&lt;/span&gt;);&lt;br/&gt;        bizFileInfo(bizFile) ;&lt;br/&gt;        &lt;span&gt;/*&lt;br/&gt;         * 业务性校验&lt;br/&gt;         */&lt;/span&gt;&lt;br/&gt;        File file = &lt;span&gt;new&lt;/span&gt; File(bizFile.getFileUrl());&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!file.getName().endsWith(bizFile.getFileType())){&lt;br/&gt;            System.out.println(file.getName()+&lt;span&gt;&quot;：描述错误...&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;bizFileInfo&lt;/span&gt; &lt;span&gt;(BizFile bizFile)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        logInfo(&lt;span&gt;&quot;任务ID&quot;&lt;/span&gt;,bizFile.getTaskId());&lt;br/&gt;        logInfo(&lt;span&gt;&quot;是否解压&quot;&lt;/span&gt;,bizFile.getZipFlag());&lt;br/&gt;        logInfo(&lt;span&gt;&quot;文件地址&quot;&lt;/span&gt;,bizFile.getFileUrl());&lt;br/&gt;        logInfo(&lt;span&gt;&quot;文件类型&quot;&lt;/span&gt;,bizFile.getFileType());&lt;br/&gt;        logInfo(&lt;span&gt;&quot;文件编码&quot;&lt;/span&gt;,bizFile.getFileCode());&lt;br/&gt;        logInfo(&lt;span&gt;&quot;业务库&quot;&lt;/span&gt;,bizFile.getBizDataBase());&lt;br/&gt;        logInfo(&lt;span&gt;&quot;业务表&quot;&lt;/span&gt;,bizFile.getBizTableName());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;基于主体描述的信息，也可以转化到命名规则上：&lt;strong&gt;命名策略：编号_压缩_Excel_编码_库_表&lt;/strong&gt;，这样一来在业务处理时，不符合约定的文件直接排除掉，降低文件异常导致的数据问题。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、基础流模式&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、整体概述&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;IO流向&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;基本编码逻辑：&lt;code&gt;源文件-&amp;gt;输入流-&amp;gt;逻辑处理-&amp;gt;输出流-&amp;gt;目标文件&lt;/code&gt;；&lt;/p&gt;&lt;p&gt;基于不同的角度看，流可以被划分很多模式：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.23062381852551986&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwhlec5NU6QuUYic1IDZIbMcqOVM0ibMfuHtj40Db85TpaaicYMbM0egYEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;流动方向：输入流、输出流；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;流数据类型：字节流、字符流；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;IO流的模式有很多种，相应的API设计也很复杂，通常复杂的API要把握住核心接口与常用的实现类和原理。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;基础API&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;字节流：InputStream输入、OutputStream输出；数据传输的基本单位是字节；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;read()：输入流中读取数据的下一个字节；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;read(byte b[])：读数据缓存到字节数组；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;write(int b)：指定字节写入输出流；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;write(byte b[])：数组字节写入输出流；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;字符流：Reader读取、Writer写出；数据传输的基本单位是字符；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;read()：读取一个单字符；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;read(char cbuf[])：读取到字符数组；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;write(int c)：写一个指定字符；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;write(char cbuf[])：写一个字符数组；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;缓冲模式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;IO流常规读写模式，即读取到数据然后写出，还有一种缓冲模式，即数据先加载到缓冲数组，在读取的时候判断是否要再次填充缓冲区：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3996023856858847&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwLJdH8ALM9M7ySUu8EiaIoUDeibkKFichjIy6HuC3RpCND0rCUhWQYCUdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1006&quot;/&gt;&lt;/p&gt;&lt;p&gt;缓冲模式的优点十分明显，保证读写过程的高效率，并且与数据填充过程隔离执行，在BufferedInputStream、BufferedReader类中是对缓冲逻辑的具体实现。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、字节流&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;API关系图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.47578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwJ3IABuXs3YJugteiaLfV7d3tNSav9quAL743YP6ePZD0PBXVkohJTCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;字节流基础API：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IoByte01&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 源文件 目标文件&lt;/span&gt;&lt;br/&gt;        File source = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;fileio-01.png&quot;&lt;/span&gt;) ;&lt;br/&gt;        File target = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;copy-&quot;&lt;/span&gt;+source.getName()) ;&lt;br/&gt;        &lt;span&gt;// 输入流 输出流&lt;/span&gt;&lt;br/&gt;        InputStream inStream = &lt;span&gt;new&lt;/span&gt; FileInputStream(source) ;&lt;br/&gt;        OutputStream outStream = &lt;span&gt;new&lt;/span&gt; FileOutputStream(target) ;&lt;br/&gt;        &lt;span&gt;// 读入 写出&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;byte&lt;/span&gt;[] byteArr = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;1024&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; readSign ;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; ((readSign=inStream.read(byteArr)) != -&lt;span&gt;1&lt;/span&gt;){&lt;br/&gt;            outStream.write(byteArr);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 关闭输入、输出流&lt;/span&gt;&lt;br/&gt;        outStream.close();&lt;br/&gt;        inStream.close();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字节流缓冲API：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IoByte02&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 源文件 目标文件&lt;/span&gt;&lt;br/&gt;        File source = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;fileio-02.png&quot;&lt;/span&gt;) ;&lt;br/&gt;        File target = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;backup-&quot;&lt;/span&gt;+source.getName()) ;&lt;br/&gt;        &lt;span&gt;// 缓冲：输入流 输出流&lt;/span&gt;&lt;br/&gt;        InputStream bufInStream = &lt;span&gt;new&lt;/span&gt; BufferedInputStream(&lt;span&gt;new&lt;/span&gt; FileInputStream(source));&lt;br/&gt;        OutputStream bufOutStream = &lt;span&gt;new&lt;/span&gt; BufferedOutputStream(&lt;span&gt;new&lt;/span&gt; FileOutputStream(target));&lt;br/&gt;        &lt;span&gt;// 读入 写出&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; readSign ;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; ((readSign=bufInStream.read()) != -&lt;span&gt;1&lt;/span&gt;){&lt;br/&gt;            bufOutStream.write(readSign);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 关闭输入、输出流&lt;/span&gt;&lt;br/&gt;        bufOutStream.close();&lt;br/&gt;        bufInStream.close();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字节流应用场景：数据是文件本身，例如图片，视频，音频等。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、字符流&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;API关系图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwgiarEV9QMJEhbsjSGPgtzPyiarfsea6JchnibXbn8SSXQq30nIuh8XyzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;字符流基础API：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IoChar01&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 读文本 写文本&lt;/span&gt;&lt;br/&gt;        File readerFile = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;io-text.txt&quot;&lt;/span&gt;) ;&lt;br/&gt;        File writerFile = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;copy-&quot;&lt;/span&gt;+readerFile.getName()) ;&lt;br/&gt;        &lt;span&gt;// 字符输入输出流&lt;/span&gt;&lt;br/&gt;        Reader reader = &lt;span&gt;new&lt;/span&gt; FileReader(readerFile) ;&lt;br/&gt;        Writer writer = &lt;span&gt;new&lt;/span&gt; FileWriter(writerFile) ;&lt;br/&gt;        &lt;span&gt;// 字符读入和写出&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; readSign ;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; ((readSign = reader.read()) != -&lt;span&gt;1&lt;/span&gt;){&lt;br/&gt;            writer.write(readSign);&lt;br/&gt;        }&lt;br/&gt;        writer.flush();&lt;br/&gt;        &lt;span&gt;// 关闭流&lt;/span&gt;&lt;br/&gt;        writer.close();&lt;br/&gt;        reader.close();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字符流缓冲API：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IoChar02&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 读文本 写文本&lt;/span&gt;&lt;br/&gt;        File readerFile = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;io-text.txt&quot;&lt;/span&gt;) ;&lt;br/&gt;        File writerFile = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;line-&quot;&lt;/span&gt;+readerFile.getName()) ;&lt;br/&gt;        &lt;span&gt;// 缓冲字符输入输出流&lt;/span&gt;&lt;br/&gt;        BufferedReader bufReader = &lt;span&gt;new&lt;/span&gt; BufferedReader(&lt;span&gt;new&lt;/span&gt; FileReader(readerFile)) ;&lt;br/&gt;        BufferedWriter bufWriter = &lt;span&gt;new&lt;/span&gt; BufferedWriter(&lt;span&gt;new&lt;/span&gt; FileWriter(writerFile)) ;&lt;br/&gt;        &lt;span&gt;// 字符读入和写出&lt;/span&gt;&lt;br/&gt;        String line;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; ((line = bufReader.readLine()) != &lt;span&gt;null&lt;/span&gt;){&lt;br/&gt;            bufWriter.write(line);&lt;br/&gt;            bufWriter.newLine();&lt;br/&gt;        }&lt;br/&gt;        bufWriter.flush();&lt;br/&gt;        &lt;span&gt;// 关闭流&lt;/span&gt;&lt;br/&gt;        bufWriter.close();&lt;br/&gt;        bufReader.close();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字符流应用场景：文件作为数据的载体，例如Excel、CSV、TXT等。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;4、编码解码&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;EnDeCode&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        String &lt;span&gt;var&lt;/span&gt; = &lt;span&gt;&quot;IO流&quot;&lt;/span&gt; ;&lt;br/&gt;        &lt;span&gt;// 编码&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;byte&lt;/span&gt;[] enVar = &lt;span&gt;var&lt;/span&gt;.getBytes(StandardCharsets.UTF_8) ;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;byte&lt;/span&gt; encode:enVar){&lt;br/&gt;            System.out.println(encode);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 解码&lt;/span&gt;&lt;br/&gt;        String deVar = &lt;span&gt;new&lt;/span&gt; String(enVar,StandardCharsets.UTF_8) ;&lt;br/&gt;        System.out.println(deVar);&lt;br/&gt;        &lt;span&gt;// 乱码&lt;/span&gt;&lt;br/&gt;        String messyVar = &lt;span&gt;new&lt;/span&gt; String(enVar,StandardCharsets.ISO_8859_1) ;&lt;br/&gt;        System.out.println(messyVar);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.40344168260038243&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwPqdwpVhtb39W5WSqy9ib3u65dbTcVibGONCc33HlhuMg4yQNUyF7Dic8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1046&quot;/&gt;&lt;/p&gt;&lt;p&gt;乱码出现的根本原因，就是在编码与解码的两个阶段使用的编码类型不同。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;5、序列化&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;序列化：对象转换为流的过程；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;反序列化：流转换为对象的过程；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SerEntity&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Serializable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer id ;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String name ;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Seriali01&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 序列化对象&lt;/span&gt;&lt;br/&gt;        OutputStream outStream = &lt;span&gt;new&lt;/span&gt; FileOutputStream(&lt;span&gt;&quot;SerEntity.txt&quot;&lt;/span&gt;) ;&lt;br/&gt;        ObjectOutputStream objOutStream = &lt;span&gt;new&lt;/span&gt; ObjectOutputStream(outStream);&lt;br/&gt;        objOutStream.writeObject(&lt;span&gt;new&lt;/span&gt; SerEntity(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;Cicada&quot;&lt;/span&gt;));&lt;br/&gt;        objOutStream.close();&lt;br/&gt;        &lt;span&gt;// 反序列化对象&lt;/span&gt;&lt;br/&gt;        InputStream inStream = &lt;span&gt;new&lt;/span&gt; FileInputStream(&lt;span&gt;&quot;SerEntity.txt&quot;&lt;/span&gt;);&lt;br/&gt;        ObjectInputStream objInStream = &lt;span&gt;new&lt;/span&gt; ObjectInputStream(inStream) ;&lt;br/&gt;        SerEntity serEntity = (SerEntity) objInStream.readObject();&lt;br/&gt;        System.out.println(serEntity);&lt;br/&gt;        inStream.close();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：引用类型的成员对象也必须是可被序列化的，否则会抛出&lt;code&gt;NotSerializableException&lt;/code&gt;异常。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、NIO模式&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基础概念&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;NIO即（NonBlockingIO），面向数据块的处理机制，同步非阻塞模型，服务端的单个线程可以处理多个客户端请求，对IO流的处理速度有极高的提升，三大核心组件：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Buffer(缓冲区)：底层维护数组存储数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Channel(通道)：支持读写双向操作；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Selector(选择器)：提供Channel多注册和轮询能力；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;API使用案例&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IoNew01&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 源文件 目标文件&lt;/span&gt;&lt;br/&gt;        File source = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;fileio-02.png&quot;&lt;/span&gt;) ;&lt;br/&gt;        File target = &lt;span&gt;new&lt;/span&gt; File(IoParam.BASE_PATH+&lt;span&gt;&quot;channel-&quot;&lt;/span&gt;+source.getName()) ;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 输入字节流通道&lt;/span&gt;&lt;br/&gt;        FileInputStream inStream = &lt;span&gt;new&lt;/span&gt; FileInputStream(source);&lt;br/&gt;        FileChannel inChannel = inStream.getChannel();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 输出字节流通道&lt;/span&gt;&lt;br/&gt;        FileOutputStream outStream = &lt;span&gt;new&lt;/span&gt; FileOutputStream(target);&lt;br/&gt;        FileChannel outChannel = outStream.getChannel();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 直接通道复制&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// outChannel.transferFrom(inChannel, 0, inChannel.size());&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 缓冲区读写机制&lt;/span&gt;&lt;br/&gt;        ByteBuffer buffer = ByteBuffer.allocateDirect(&lt;span&gt;1024&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;// 读取通道中数据到缓冲区&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; in = inChannel.read(buffer);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (in == -&lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;// 读写切换&lt;/span&gt;&lt;br/&gt;            buffer.flip();&lt;br/&gt;            &lt;span&gt;// 写出缓冲区数据&lt;/span&gt;&lt;br/&gt;            outChannel.write(buffer);&lt;br/&gt;            &lt;span&gt;// 清空缓冲区&lt;/span&gt;&lt;br/&gt;            buffer.clear();&lt;br/&gt;        }&lt;br/&gt;        outChannel.close();&lt;br/&gt;        inChannel.close();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述案例只是NIO最基础的文件复制能力，在网络通信中，NIO模式的发挥空间十分宽广。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、网络通信&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;服务端的单线程可以处理多个客户端请求，通过轮询多路复用器查看是否有IO请求，这样一来，服务端的并发能力得到极大的提升，并且显著降低了资源的消耗。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4643423137876387&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCAsA1Rwgbyic33jsDtLpSHwPae57LHdhw3mEicSaRGtCwjEGGDX91C3WrXAicIRf9Pzzc4aCQgW5acg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1262&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;API案例：服务端模拟&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SecServer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;//启动服务开启监听&lt;/span&gt;&lt;br/&gt;            ServerSocketChannel socketChannel = ServerSocketChannel.open();&lt;br/&gt;            socketChannel.socket().bind(&lt;span&gt;new&lt;/span&gt; InetSocketAddress(&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span&gt;8089&lt;/span&gt;));&lt;br/&gt;            &lt;span&gt;// 设置非阻塞，接受客户端&lt;/span&gt;&lt;br/&gt;            socketChannel.configureBlocking(&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;// 打开多路复用器&lt;/span&gt;&lt;br/&gt;            Selector selector = Selector.open();&lt;br/&gt;            &lt;span&gt;// 服务端Socket注册到多路复用器，指定兴趣事件&lt;/span&gt;&lt;br/&gt;            socketChannel.register(selector, SelectionKey.OP_ACCEPT);&lt;br/&gt;            &lt;span&gt;// 多路复用器轮询&lt;/span&gt;&lt;br/&gt;            ByteBuffer buffer = ByteBuffer.allocateDirect(&lt;span&gt;1024&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;while&lt;/span&gt; (selector.select() &amp;gt; &lt;span&gt;0&lt;/span&gt;){&lt;br/&gt;                Set&amp;lt;SelectionKey&amp;gt; selectionKeys = selector.selectedKeys();&lt;br/&gt;                Iterator&amp;lt;SelectionKey&amp;gt; selectionKeyIter = selectionKeys.iterator();&lt;br/&gt;                &lt;span&gt;while&lt;/span&gt; (selectionKeyIter.hasNext()){&lt;br/&gt;                    SelectionKey selectionKey = selectionKeyIter.next() ;&lt;br/&gt;                    selectionKeyIter.remove();&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt;(selectionKey.isAcceptable()) {&lt;br/&gt;                        &lt;span&gt;// 接受新的连接&lt;/span&gt;&lt;br/&gt;                        SocketChannel client = socketChannel.accept();&lt;br/&gt;                        &lt;span&gt;// 设置读非阻塞&lt;/span&gt;&lt;br/&gt;                        client.configureBlocking(&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;                        &lt;span&gt;// 注册到多路复用器&lt;/span&gt;&lt;br/&gt;                        client.register(selector, SelectionKey.OP_READ);&lt;br/&gt;                    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (selectionKey.isReadable()) {&lt;br/&gt;                        &lt;span&gt;// 通道可读&lt;/span&gt;&lt;br/&gt;                        SocketChannel client = (SocketChannel) selectionKey.channel();&lt;br/&gt;                        &lt;span&gt;int&lt;/span&gt; len = client.read(buffer);&lt;br/&gt;                        &lt;span&gt;if&lt;/span&gt; (len &amp;gt; &lt;span&gt;0&lt;/span&gt;){&lt;br/&gt;                            buffer.flip();&lt;br/&gt;                            &lt;span&gt;byte&lt;/span&gt;[] readArr = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[buffer.limit()];&lt;br/&gt;                            buffer.get(readArr);&lt;br/&gt;                            System.out.println(client.socket().getPort() + &lt;span&gt;&quot;端口数据:&quot;&lt;/span&gt; + &lt;span&gt;new&lt;/span&gt; String(readArr));&lt;br/&gt;                            buffer.clear();&lt;br/&gt;                        }&lt;br/&gt;                    }&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;API案例：客户端模拟&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SecClient&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// 连接服务端&lt;/span&gt;&lt;br/&gt;            SocketChannel socketChannel = SocketChannel.open();&lt;br/&gt;            socketChannel.connect(&lt;span&gt;new&lt;/span&gt; InetSocketAddress(&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span&gt;8089&lt;/span&gt;));&lt;br/&gt;            ByteBuffer writeBuffer = ByteBuffer.allocate(&lt;span&gt;1024&lt;/span&gt;);&lt;br/&gt;            String conVar = &lt;span&gt;&quot;[hello-8089]&quot;&lt;/span&gt;;&lt;br/&gt;            writeBuffer.put(conVar.getBytes());&lt;br/&gt;            writeBuffer.flip();&lt;br/&gt;            &lt;span&gt;// 每隔5S发送一次数据&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;) {&lt;br/&gt;                Thread.sleep(&lt;span&gt;5000&lt;/span&gt;);&lt;br/&gt;                writeBuffer.rewind();&lt;br/&gt;                socketChannel.write(writeBuffer);&lt;br/&gt;                writeBuffer.clear();&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SelectionKey绑定Selector和Chanel之间的关联，并且可以获取就绪状态下的Channel集合。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IO流同系列文章&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4Njg0MzYwNw==&amp;amp;mid=2247484956&amp;amp;idx=1&amp;amp;sn=d75de7979a198a288352b54385759e75&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;IO流概述&lt;/a&gt; | &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4Njg0MzYwNw==&amp;amp;mid=2247484728&amp;amp;idx=1&amp;amp;sn=4d27ea1c1d2811b3bb5c1bc0c8e241dd&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;MinIO中间件&lt;/a&gt; | &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4Njg0MzYwNw==&amp;amp;mid=2247483918&amp;amp;idx=1&amp;amp;sn=189b6f4360c46ca816de85a3205a9fb3&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;FastDFS中间件&lt;/a&gt; | &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4Njg0MzYwNw==&amp;amp;mid=2247484404&amp;amp;idx=1&amp;amp;sn=608b50c913d6713af18f4aa9ac7b5cd5&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Xml和CSV文件&lt;/a&gt; | &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4Njg0MzYwNw==&amp;amp;mid=2247484398&amp;amp;idx=1&amp;amp;sn=20f7225122d03a2e1395df5a5f8dd3e2&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Excel和PDF文件&lt;/a&gt; | &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4Njg0MzYwNw==&amp;amp;mid=2247483868&amp;amp;idx=1&amp;amp;sn=ef3b1fe7668c7a1065cb9910a12da66d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;文件上传逻辑&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;六、源代码地址&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https://github.com/cicadasmile/java-base-parent&lt;br/&gt;GitEE·地址&lt;br/&gt;https://gitee.com/cicadasmile/java-base-parent&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4Njg0MzYwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBCuF3zfJnqPKpUia4wfn1FUtTHpxxkR5HvbicPgOjibPicX0goMOkny1NdkLAJvBaqrYh3UdwMjiaDQMA/0?wx_fmt=png&quot; data-nickname=&quot;知了一笑&quot; data-alias=&quot;cicada_smile&quot; data-signature=&quot;积累是一个孤独且枯燥的过程&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4d96cc52344e9b39a655b66283a71479</guid>
<title>字节跳动内部 Golang RPC 框架开源</title>
<link>https://toutiao.io/k/jhujxgy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h1&gt;&lt;a id=&quot;user-content-cloudwego-kitex&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#cloudwego-kitex&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;CloudWeGo-Kitex&lt;/h1&gt;
&lt;p&gt;Kitex 字节跳动内部的 Golang 微服务 RPC 框架，具有&lt;strong&gt;高性能&lt;/strong&gt;、&lt;strong&gt;强可扩展&lt;/strong&gt;的特点，针对字节内部做了定制扩展。如今越来越多的微服务选择使用 Golang，我们考虑将 Kitex 开源出来丰富开源社区。如果对微服务性能有要求，又希望定制扩展融入自己的治理体系，Kitex 会是一个不错的选择。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-框架特点&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#框架特点&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;框架特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用自研的高性能网络库 &lt;a href=&quot;https://github.com/cloudwego/netpoll&quot;&gt;Netpoll&lt;/a&gt;，性能相较 go net 具有显著优势。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扩展性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提供了较多的扩展接口以及默认扩展实现，使用者也可以根据需要自行定制扩展，具体见下面的框架扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多消息协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RPC 消息协议默认支持 &lt;strong&gt;Thrift&lt;/strong&gt;、&lt;strong&gt;Kitex Protobuf&lt;/strong&gt;、&lt;strong&gt;gRPC&lt;/strong&gt;。Thrift 支持 Buffered 和 Framed 二进制协议；Kitex Protobuf 是 Kitex 自定义的 Protobuf 消息协议，协议格式类似 Thrift；gRPC 是对 gRPC 消息协议的支持，可以与 gRPC 互通。除此之外，使用者也可以扩展自己的消息协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多传输协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传输协议封装消息协议进行 RPC 互通，传输协议可以额外透传元信息，用于服务治理，Kitex 支持的传输协议有 &lt;strong&gt;TTHeader&lt;/strong&gt;、&lt;strong&gt;HTTP2&lt;/strong&gt;。TTHeader 可以和 Thrift、Kitex Protobuf 结合使用；HTTP2 目前主要是结合 gRPC 协议使用，后续也会支持 Thrift。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多交互方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持 &lt;strong&gt;PingPong&lt;/strong&gt;、&lt;strong&gt;Oneway&lt;/strong&gt;、&lt;strong&gt;双向 Streaming&lt;/strong&gt;。其中 Oneway 目前支对 Thrift 协议支持，双向 Streaming 只对 gRPC 支持，后续会考虑支持 Thrift 的双向 Streaming。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务治理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持服务注册/发现、负载均衡、熔断、限流、重试、监控、链路跟踪、日志、诊断等服务治理模块，大部分均已提供默认扩展，使用者可选择集成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码生成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kitex 内置代码生成工具，可支持生成 &lt;strong&gt;Thrift&lt;/strong&gt;、&lt;strong&gt;Protobuf&lt;/strong&gt; 以及脚手架代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-框架性能&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#框架性能&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;框架性能&lt;/h2&gt;
&lt;p&gt;性能测试只能提供相对参考，工业场景下，有诸多因素可以影响实际的性能表现。&lt;/p&gt;
&lt;p&gt;由于开源社区缺少支持 thrift 的优秀 RPC 框架，当前对比项目为 &lt;a href=&quot;https://github.com/grpc/grpc&quot;&gt;grpc&lt;/a&gt;, &lt;a href=&quot;https://github.com/smallnest/rpcx&quot;&gt;rpcx&lt;/a&gt;, 均使用 protobuf 协议。&lt;/p&gt;
&lt;p&gt;我们通过 &lt;a href=&quot;https://github.com/cloudwego/kitex-benchmark&quot;&gt;测试代码&lt;/a&gt; 比较了它们的性能，测试表明 &lt;a href=&quot;https://github.com/cloudwego/kitex&quot;&gt;Kitex&lt;/a&gt; 具有明显优势。&lt;/p&gt;
&lt;h3&gt;&lt;a id=&quot;user-content-测试环境&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#测试环境&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;测试环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU:    Intel(R) Xeon(R) Gold 5118 CPU @ 2.30GHz, 4 cores&lt;/li&gt;
&lt;li&gt;Memory: 8GB&lt;/li&gt;
&lt;li&gt;OS:     Debian 5.4.56.bsk.1-amd64 x86_64 GNU/Linux&lt;/li&gt;
&lt;li&gt;Go:     1.15.4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id=&quot;user-content-并发表现-echo-1kb-改变并发量&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#并发表现-echo-1kb-改变并发量&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;并发表现 (Echo 1KB, 改变并发量)&lt;/h3&gt;

&lt;h3&gt;&lt;a id=&quot;user-content-吞吐表现-并发-100-改变包大小&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#吞吐表现-并发-100-改变包大小&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;吞吐表现 (并发 100, 改变包大小)&lt;/h3&gt;

&lt;h2&gt;&lt;a id=&quot;user-content-详细文档&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#详细文档&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;详细文档&lt;/h2&gt;

&lt;h2&gt;&lt;a id=&quot;user-content-相关项目&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#相关项目&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;相关项目&lt;/h2&gt;

&lt;h2&gt;&lt;a id=&quot;user-content-相关文章&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#相关文章&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;相关文章&lt;/h2&gt;

&lt;h2&gt;&lt;a id=&quot;user-content-贡献代码&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#贡献代码&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;贡献代码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/cloudwego/kitex/blob/develop/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-开源许可&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#开源许可&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;开源许可&lt;/h2&gt;
&lt;p&gt;Kitex 基于&lt;a href=&quot;/cloudwego/kitex/blob/develop/LICENSE&quot;&gt;Apache License 2.0&lt;/a&gt; 许可证，其依赖的三方组件的开源许可见 &lt;a href=&quot;/cloudwego/kitex/blob/develop/licenses&quot;&gt;Licenses&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-联系我们&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#联系我们&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;联系我们&lt;/h2&gt;

&lt;/article&gt;
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7a8ce0b547722372f6ed2119854335b0</guid>
<title>如何当一个好的技术面试官？</title>
<link>https://toutiao.io/k/td2y5l7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post__content typography&quot;&gt;
      &lt;p&gt;从 09 年开始，我自己做了十一年的研发工作，大概在2011年起就开始做技术面试官，这些年积累下来也有小1500余人的面试经验。一开始也是跟大家一样，甚至比候选人还紧张到后面略有心得。在这里跟大家分享一下经验。&lt;/p&gt;
&lt;p&gt;开始前，我们先来回顾一下面试的核心目标是什么。技术面试的目标很明确：招聘到你自己部门或公司需要的人才，这个人才你很乐意与之共事，未来可以长期发展。&lt;/p&gt;
&lt;p&gt;所以，面试的第一步，是弄清楚自己需要什么样的人才，把人才画像定义的越清晰，面试起来越有针对性。比如，我们公司预算有限，允许一定程度的培养，我们就需要去挖掘一些潜力性的人才，聪明好学的。如果需要马上能上手工作，就需要非常有针对性安排面试问题，把工作中一些内容抽离成问题进行面试。&lt;/p&gt;
&lt;h2&gt;平等交流是核心&lt;/h2&gt;
&lt;p&gt;面试最易犯的错误是利用面试官的主动优势，把对方考倒，甚至是刁难。因为候选人未来是要加入团队的，面试过程其实是双向的。你考察对方的同时，对方也在观察你们的表现，可以说也代表了公司的表现。所以，我们首先上要从态度上端正，尊重对方就是尊重自己。平和平等与对方交流相关问题。&lt;/p&gt;
&lt;h2&gt;引导挖掘对方的潜力&lt;/h2&gt;
&lt;p&gt;一场优异的面试，是一场让候选人把自己真实能力表达出来的面试。我们很容易利用自己的主场优势，不断就自己熟悉的技术问题进行提问。其实在一开场，一定要经历一个主动挖掘对方擅长技能的过程，比如以下几个问题就是很好的开端：&lt;/p&gt;
&lt;p&gt;非常感谢来我司进行面试，可否先介绍一下自己近期的一份工作经历？&lt;/p&gt;
&lt;p&gt;中间完成了什么工作? 你的工作职责是什么? 为什么选择某个框架作为主力开发?&lt;/p&gt;
&lt;p&gt;你在编写你模块的时候，其中有哪些关键决策？决策的原因是什么？&lt;/p&gt;
&lt;p&gt;大家可以看到，上面这些问题全是关于对方的思考决策的分析，这特别有助于推断候选人在入职后的表现及成长力。因为一个人除非经历大事件，否则认知决策能力不会发生大的变化。&lt;/p&gt;
&lt;h2&gt;开始结构化面试&lt;/h2&gt;
&lt;p&gt;通过上述信息，可以宏观了解候选人的综合情况，也基本上了解了对方擅长的技能方向。如果表现尚可，便可以进入实际的技术能力考察环节。这个环节对于技术人员来讲，占到70%以上的比重。&lt;/p&gt;
&lt;p&gt;这里的考察原则，最好是对方了解，在工作中又比较重要的内容。常见的错误是，不管对方怎么样，全是一模一样的考察内容。对于咱们面试官来说，这个时候掌握更多技术和深度就比较有意义，可以尽可能多的了解对方的表现。&lt;/p&gt;
&lt;p&gt;考察的方式，一般是先从某一个工作中的问题开始，逐步深入到底层原理，了解对方解决具体的问题能力，并且对原理理解到什么层次。&lt;/p&gt;
&lt;p&gt;以此为基础，不断从编程语言，框架，计算机原理，算法等进行询问交流，值得注意的是，一定要以平等、平和的方式进行交流，就算总是无法正确回答你的问题，在最终放弃之后，也需要认真想一想和试一试，对方是否还有擅长的优势技能没有发挥出来。&lt;/p&gt;
&lt;p&gt;这里我提几个技术工程师的重要判断点：&lt;/p&gt;
&lt;p&gt;编程语言的掌握程度（语法、语言特点）、编程框架的掌握情况、编程基本功（建议通过编程白板查看）、计算机基础（进程/线程、锁、数据库、网络编程模型等）&lt;/p&gt;
&lt;p&gt;值得提一下，不要过于纠结某一个问题是否答的正确，而是看整体的系统理解力，借此判断对方的成长能力。&lt;/p&gt;
&lt;h2&gt;其他软技能&lt;/h2&gt;
&lt;p&gt;下面这个能力也很重要，一般不需要技术面试官进行专门考察，但也非常值得从细节上留意观察。&lt;/p&gt;
&lt;p&gt;沟通和理解能力：通过跟对方沟通某一个具体的问题中感受，技术工程师只要能够准确理解和表达问题，就可以了。反而要留意那些特别能讲的人，除非是技术布道师，否则太能讲反而要减分。&lt;/p&gt;
&lt;p&gt;学习能力：了解对方最近学习的内容和深度，是否爱好分享。如果能从侧面了解到对方的学习能力最好。因为刻意的询问，反而让对方有了包装自己的机会。&lt;/p&gt;
&lt;p&gt;个人动机：了解对方的成长动力，判断对方的潜力。&lt;/p&gt;
&lt;p&gt;个人价值观：一定要是一个以诚信为本，相信一分努力一分收获的人。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;通过以上维度，可以比较准确考察候选人的能力，平等、平和沟通是最重要的。永远要记住，你在面试别人的时候，别人也要面试你所在的团队。&lt;/p&gt;
&lt;p&gt;最后，适当选择一些面试工具，也可以明显加强在技术面试中的准确率。目前在线技术面试日益兴起，如果约面比较难，可以先用一些专门的在线技术面试工具约一轮，后续面试效果可以提升很多。对于候选人来讲，到公司做一场面试，时间成本极高，一场更有可能的面试机会，才值得专门跑一趟。&lt;/p&gt;

    &lt;/div&gt;


    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6829cacc46f2370f9f0d3339f1f848c3</guid>
<title>BPF 进阶笔记（二）：BPF Map 类型详解-使用场景、程序示例</title>
<link>https://toutiao.io/k/bvy2u33</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post&quot;&gt;
  
  &lt;h1 class=&quot;postTitle&quot;&gt;BPF 进阶笔记（二）：BPF Map 类型详解：使用场景、程序示例&lt;/h1&gt;
  &lt;p class=&quot;meta&quot;&gt;Published at 2021-07-13 | Last Update 2021-07-13&lt;/p&gt;

  
  
  &lt;h2 id=&quot;关于本文&quot;&gt;关于本文&lt;/h2&gt;

&lt;p&gt;内核目前支持 &lt;a href=&quot;https://github.com/torvalds/linux/blob/v5.8/include/uapi/linux/bpf.h#L122&quot;&gt;30 来种&lt;/a&gt;
BPF map 类型。对于主要的类型，本文将介绍其：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：适合用来做什么？&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;程序示例&lt;/strong&gt;：一些实际例子。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本文参考：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.oracle.com/linux/notes-on-bpf-3&quot;&gt;notes-on-bpf-3&lt;/a&gt;，内容较老，基于内核 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.14&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;关于-bpf-进阶笔记-系列&quot;&gt;关于 “BPF 进阶笔记” 系列&lt;/h2&gt;

&lt;p&gt;平时学习使用 BPF 时所整理。由于是笔记而非教程，因此内容不会追求连贯，有基础的
同学可作查漏补缺之用。&lt;/p&gt;

&lt;p&gt;文中涉及的代码，如无特殊说明，均基于内核 &lt;strong&gt;&lt;mark&gt;5.8/5.10&lt;/mark&gt;&lt;/strong&gt; 版本。&lt;/p&gt;



&lt;hr/&gt;



&lt;hr/&gt;

&lt;h1 id=&quot;基础&quot;&gt;基础&lt;/h1&gt;

&lt;h2 id=&quot;bpf-map-类型完整列表&quot;&gt;BPF map 类型：完整列表&lt;/h2&gt;

&lt;p&gt;所有 map 类型的&lt;a href=&quot;https://github.com/torvalds/linux/blob/v5.8/include/uapi/linux/bpf.h#L122&quot;&gt;定义&lt;/a&gt;：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// include/uapi/linux/bpf.h&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_map_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_UNSPEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_HASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 哈希表&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// 数组&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_PROG_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 存放 BPF 程序的数组&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_PERF_EVENT_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_PERCPU_HASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_PERCPU_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_STACK_TRACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_CGROUP_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_LRU_HASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_LRU_PERCPU_HASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_LPM_TRIE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_ARRAY_OF_MAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_HASH_OF_MAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_DEVMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_SOCKMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_CPUMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_XSKMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_SOCKHASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_CGROUP_STORAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_REUSEPORT_SOCKARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_QUEUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_SK_STORAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_DEVMAP_HASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_STRUCT_OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_RINGBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;————————————————————————&lt;/h1&gt;
&lt;h1 id=&quot;hash-maps&quot;&gt;Hash Maps&lt;/h1&gt;
&lt;h1 id=&quot;-1&quot;&gt;————————————————————————&lt;/h1&gt;

&lt;p&gt;Hash map 的实现见
&lt;a href=&quot;https://github.com/torvalds/linux/blob/v5.8/kernel/bpf/hashtab.c&quot;&gt;kernel/bpf/hashtab.c&lt;/a&gt;。
五种类型共用一套代码：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_HASH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_PERCPU_HASH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_LRU_HASH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_LRU_PERCPU_HASH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_HASH_OF_MAPS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hash map 的特点：&lt;/p&gt;



&lt;p&gt;不带与带 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PERCPU&lt;/code&gt; 的 map 的区别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;前者是 global 的，只有一个实例；后者是 cpu-local 的，每个 CPU 上都有一个 map 实例；&lt;/li&gt;
  &lt;li&gt;多核并发访问时，global map 要加锁；per-cpu map 无需加锁，每个核上的程序访问
local-cpu 上的 map；最后将所有 CPU 上的 map 汇总。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-bpf_map_type_hash&quot;&gt;1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_HASH&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;最简单的哈希 map。&lt;/p&gt;

&lt;p&gt;初始化时需要指定&lt;strong&gt;&lt;mark&gt;支持的最大条目数&lt;/mark&gt;&lt;/strong&gt;（max_entries）。
满了之后继续插入数据时，会报 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;E2BIG&lt;/code&gt; 错误。&lt;/p&gt;

&lt;h2 id=&quot;使用场景&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一将内核态得到的数据传递给用户态程序&quot;&gt;场景一：将内核态得到的数据，传递给用户态程序&lt;/h3&gt;

&lt;p&gt;这是非常典型的&lt;strong&gt;&lt;mark&gt;在内核态和用户态传递数据&lt;/mark&gt;&lt;/strong&gt;场景。&lt;/p&gt;

&lt;p&gt;例如，BPF 程序过滤网络设备设备上的包，统计流量信息，并将其写到 map。
用户态程序从 map 读取统计，做后续处理。&lt;/p&gt;

&lt;h3 id=&quot;场景二存放全局配置信息供-bpf-程序使用&quot;&gt;场景二：存放全局配置信息，供 BPF 程序使用&lt;/h3&gt;

&lt;p&gt;例如，对于防火墙功能的 BPF 程序，将过滤规则放到 map 里。用户态控制程序通过
bpftool 之类的工具更新 map 里的配置信息，BPF 程序动态加载。&lt;/p&gt;

&lt;h2 id=&quot;程序示例&quot;&gt;程序示例&lt;/h2&gt;

&lt;p&gt;&lt;a name=&quot;sockex2&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-将内核态数据传递到用户态samplesbpfsockex2&quot;&gt;1. 将内核态数据传递到用户态：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/sockex2&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;这个例子用 BPF 程序 &lt;strong&gt;&lt;mark&gt;过滤网络设备设备上的包&lt;/mark&gt;&lt;/strong&gt;，统计包数和字节数，
并以目的 IP 地址为 key 将统计信息写到 map：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// samples/bpf/sockex2_kern.c&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_HASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// BPF map 类型&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__be32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// 目的 IP 地址&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 包数和字节数&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 最大 entry 数量&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;socket2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bpf_prog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sk_buff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flow_dissector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 目的 IP 地址&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_map_lookup_elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 如果已经存在，则更新相应计数&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__sync_fetch_and_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__sync_fetch_and_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 否则，新建一个 entry&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bpf_map_update_elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2-bpf_map_type_percpu_hash&quot;&gt;2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_PERCPU_HASH&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景-1&quot;&gt;使用场景&lt;/h2&gt;

&lt;p&gt;基本同上。&lt;/p&gt;

&lt;h2 id=&quot;程序示例-1&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-samplesbpfmap_perf_test_kernc&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/map_perf_test_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;h1 id=&quot;3-bpf_map_type_lru_hash&quot;&gt;3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_LRU_HASH&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;普通 hash map 的问题是有大小限制，超过最大数量后无法再插入了。LRU map 可以避
免这个问题，如果 map 满了，再插入时它会自动将&lt;strong&gt;&lt;mark&gt;最久未被使用（least
recently used）&lt;/mark&gt;&lt;/strong&gt;的 entry 从 map 中移除。&lt;/p&gt;

&lt;h2 id=&quot;使用场景-2&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一连接跟踪conntrack表nat-表等固定大小哈希表&quot;&gt;场景一：连接跟踪（conntrack）表、NAT 表等固定大小哈希表&lt;/h3&gt;

&lt;p&gt;满了之后最老的 entry 会被踢出去。&lt;/p&gt;

&lt;h2 id=&quot;程序示例-2&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-samplesbpfmap_perf_test_kernc-1&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/map_perf_test_kern.c&lt;/code&gt;&lt;/h3&gt;



&lt;p&gt;&lt;strong&gt;&lt;mark&gt;TODO: update this.&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-bpf_map_type_lru_percpu_hash&quot;&gt;4 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_LRU_PERCPU_HASH&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;基本同上。&lt;/p&gt;

&lt;h1 id=&quot;5-bpf_map_type_hash_of_maps&quot;&gt;5 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_HASH_OF_MAPS&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;map-in-map：&lt;strong&gt;&lt;mark&gt;第一个 map 内的元素是指向另一个 map 的指针&lt;/mark&gt;&lt;/strong&gt;。
与后面将介绍的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_ARRAY_OF_MAPS&lt;/code&gt; 类似，但外层 map 使用的是哈希而不是数组。&lt;/p&gt;

&lt;p&gt;相关 &lt;a href=&quot;https://www.mail-archive.com/netdev@vger.kernel.org/msg159383.html&quot;&gt;commit message&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;使用场景-3&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一map-in-map&quot;&gt;场景一：map-in-map&lt;/h3&gt;

&lt;h2 id=&quot;程序示例-3&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-samplesbpftest_map_in_map_kernc&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/test_map_in_map_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;测试了如下两级查找场景:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Array of array&lt;/li&gt;
  &lt;li&gt;Hash of array&lt;/li&gt;
  &lt;li&gt;Hash of hash&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;-2&quot;&gt;————————————————————————&lt;/h1&gt;
&lt;h1 id=&quot;array-maps&quot;&gt;Array Maps&lt;/h1&gt;
&lt;h1 id=&quot;-3&quot;&gt;————————————————————————&lt;/h1&gt;

&lt;h1 id=&quot;1-bpf_map_type_array&quot;&gt;1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_ARRAY&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;最大的特点：&lt;strong&gt;&lt;mark&gt;key 就是数组中的索引（index）&lt;/mark&gt;&lt;/strong&gt;（因此 key 一定
是整形），因此无需对 key 进行哈希。&lt;/p&gt;

&lt;h2 id=&quot;使用场景key-是整形&quot;&gt;使用场景：key 是整形&lt;/h2&gt;

&lt;h2 id=&quot;程序示例-4&quot;&gt;程序示例&lt;/h2&gt;

&lt;p&gt;&lt;a name=&quot;sockex1&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-根据协议类型proto-as-key统计流量samplesbpfsockex1&quot;&gt;1. 根据协议类型（proto as key）统计流量：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/sockex1&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// samples/bpf/sockex1_kern.c&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;// L4 协议类型（长度是 uint8），例如 IPPROTO_TCP，范围是 0~255&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 累计包长（skb-&amp;gt;len）&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;socket1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bpf_prog1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sk_buff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ETH_HLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iphdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// L4 协议类型&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PACKET_OUTGOING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 注意：在用户态程序和这段 BPF 程序里都没有往 my_map 里插入数据；&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   * 如果这是 hash map 类型，那下面的 lookup 一定失败，因为我们没插入过任何数据；&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   * 但这里是 array 类型，而且 index 表示的 L4 协议类型，在 IP 头里占一个字节，因此范围在 255 以内；&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//     又 map 的长度声明为 256，所以这里的 lookup 一定能定位到 array 的某个位置，即查找一定成功。&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_map_lookup_elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__sync_fetch_and_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2-bpf_map_type_percpu_array&quot;&gt;2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_PERCPU_ARRAY&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;基本同上。&lt;/p&gt;

&lt;h1 id=&quot;3-bpf_map_type_prog_array&quot;&gt;3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_PROG_ARRAY&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;程序数组，尾调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_tail_call()&lt;/code&gt; 时会用到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;key：任意整形（因为要作为 array index），具体表示什么由使用者设计（例如表示协议类型 proto）。&lt;/li&gt;
  &lt;li&gt;value：&lt;strong&gt;&lt;mark&gt;BPF 程序的文件描述符（fd）&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用场景尾调用tail-call&quot;&gt;使用场景：尾调用（tail call）&lt;/h2&gt;

&lt;h2 id=&quot;程序示例-5&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-根据协议类型尾调用到下一层-parsersamplesbpfsockex3&quot;&gt;1. 根据协议类型尾调用到下一层 parser：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/sockex3&lt;/code&gt;&lt;/h3&gt;

&lt;h1 id=&quot;4-bpf_map_type_perf_event_array&quot;&gt;4 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_PERF_EVENT_ARRAY&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景保存-tracing-结果&quot;&gt;使用场景：保存 tracing 结果&lt;/h2&gt;

&lt;h2 id=&quot;程序示例-6&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-保存-perf-eventsamplesbpftrace_output_kernc&quot;&gt;1. 保存 perf event：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/trace_output_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// samples/bpf/trace_output_kern.c&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_map_def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_PERF_EVENT_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kprobe/sys_write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bpf_prog1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt_regs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_get_current_pid_tgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x12345678&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bpf_perf_event_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;5-bpf_map_type_array_of_maps&quot;&gt;5 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_ARRAY_OF_MAPS&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景map-in-map&quot;&gt;使用场景：map-in-map&lt;/h2&gt;

&lt;p&gt;map-in-map，values 是指向内层 map 的 fd。只支持两层 map。
two levels of map，也就是一层 map 嵌套另一层 map。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_PROG_ARRAY&lt;/code&gt; 类型的 BPF 程序&lt;strong&gt;&lt;mark&gt;不支持 map-in-map 功能&lt;/mark&gt;&lt;/strong&gt;
，因为这会使 tail call 的 verification 更加困难。
详见 &lt;a href=&quot;https://www.mail-archive.com/netdev@vger.kernel.org/msg159387.html&quot;&gt;patch&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;程序示例-7&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-samplesbpfmap_perf_test_kernc-2&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/map_perf_test_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&quot;2-samplesbpftest_map_in_map_kernc&quot;&gt;2. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/test_map_in_map_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a name=&quot;bpf_map_type_cgroup_array&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;6-bpf_map_type_cgroup_array&quot;&gt;6 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_CGROUP_ARRAY&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;在用户空间存放 cgroup fds，用来 &lt;strong&gt;&lt;mark&gt;检查给定的 skb 是否与 cgroup_array[index] 指向的 cgroup 关联&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;使用场景-4&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一cgroup-级别的包过滤拒绝放行&quot;&gt;场景一：cgroup 级别的包过滤（拒绝/放行）&lt;/h3&gt;

&lt;h3 id=&quot;场景二cgroup-级别的进程过滤权限控制等&quot;&gt;场景二：cgroup 级别的进程过滤（权限控制等）&lt;/h3&gt;

&lt;h2 id=&quot;程序示例-8&quot;&gt;程序示例&lt;/h2&gt;



&lt;p&gt;程序功能：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;将 cgroupv2 array pin 到 BPFFS&lt;/mark&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;更新 pinned cgroupv2 array&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// samples/bpf/test_cgrp2_array_pin.c&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;array_fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_create_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_CGROUP_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;array_fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_obj_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinned_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bpf_map_update_elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cg2_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_obj_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinned_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-cgroup-级别的包过滤samplesbpftest_cgrp2_tc_kernc&quot;&gt;2. CGroup 级别的包过滤：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/test_cgrp2_tc_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;核心是&lt;strong&gt;&lt;mark&gt;调用 &lt;code&gt;bpf_skb_under_cgroup()&lt;/code&gt; 判断 skb 是否在给定 cgroup 中&lt;/mark&gt;&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// samples/bpf/test_cgrp2_tc_kern.c&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_elf_map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_cgrp2_array_pin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_CGROUP_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_key&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_value&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinning&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIN_GLOBAL_NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_elem&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_egress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sk_buff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bpf_skb_under_cgroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_cgrp2_array_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bpf_trace_printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pass_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pass_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TC_ACT_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-判断进程是否在给定-cgroup-中samplesbpftest_current_task_under_cgroup_kernc&quot;&gt;3. 判断进程是否在给定 cgroup 中：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/test_current_task_under_cgroup_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_current_task_under_cgroup()&lt;/code&gt; &lt;strong&gt;&lt;mark&gt;判断当前进程是否在给定 cgroup 中&lt;/mark&gt;&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_map_def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgroup_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_CGROUP_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_size&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_size&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Writes the last PID that called sync to a map at index 0 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kprobe/sys_sync&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bpf_prog1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt_regs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bpf_current_task_under_cgroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgroup_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;-4&quot;&gt;————————————————————————&lt;/h1&gt;
&lt;h1 id=&quot;cgroup-maps&quot;&gt;CGroup Maps&lt;/h1&gt;
&lt;h1 id=&quot;-5&quot;&gt;————————————————————————&lt;/h1&gt;

&lt;h1 id=&quot;1-bpf_map_type_cgroup_array&quot;&gt;1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_CGROUP_ARRAY&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;#bpf_map_type_cgroup_array&quot;&gt;上面&lt;/a&gt; 已经有详细介绍。&lt;/p&gt;

&lt;h1 id=&quot;2-bpf_map_type_cgroup_storage&quot;&gt;2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_CGROUP_STORAGE&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;Attach 到一个 cgroup 的所有 BPF 程序，会共用一组 cgroup storage，包括：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BPF_CGROUP_STORAGE_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;storages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_cgroup_storage_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里的 types 目前只有两种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;shared&lt;/li&gt;
  &lt;li&gt;per-cpu&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;使用场景-5&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一cgroup-内所有-bpf-程序的共享存储&quot;&gt;场景一：cgroup 内所有 BPF 程序的共享存储&lt;/h3&gt;

&lt;h2 id=&quot;程序示例-9&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-samplesbpfhbm_kernhhost-bandwidth-manager&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/hbm_kern.h&lt;/code&gt;：host bandwidth manager&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_CGROUP_STORAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_cgroup_storage_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hbm_vqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_state&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-bpf_map_type_percpu_cgroup_storage&quot;&gt;3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;同上。&lt;/p&gt;

&lt;h1 id=&quot;-6&quot;&gt;————————————————————————&lt;/h1&gt;
&lt;h1 id=&quot;tracing-maps&quot;&gt;Tracing Maps&lt;/h1&gt;
&lt;h1 id=&quot;-7&quot;&gt;————————————————————————&lt;/h1&gt;

&lt;h1 id=&quot;1-bpf_map_type_stack_trace&quot;&gt;1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_STACK_TRACE&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;内核程序能通过 bpf_get_stackid() helper 存储 stack 信息。
将 stack 信息关联到一个 id，而这个 id 是&lt;strong&gt;&lt;mark&gt;对当前栈的
指令指针地址（instruction pointer address）进行 32-bit hash&lt;/mark&gt;&lt;/strong&gt; 得到的。&lt;/p&gt;

&lt;h2 id=&quot;使用场景-6&quot;&gt;使用场景&lt;/h2&gt;
&lt;h3 id=&quot;场景一存储-profiling-信息&quot;&gt;场景一：存储 profiling 信息&lt;/h3&gt;

&lt;p&gt;在内核中获取 stack id，用它作为 key 更新另一个 map。
例如通过对指定的 stack traces 进行 profiling，统计它们的出现次数，或者将 stack
trace 信息与当前 pid 关联起来。&lt;/p&gt;

&lt;h2 id=&quot;程序示例-10&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-打印调用栈samplesbpfoffwaketime_kernc&quot;&gt;1. 打印调用栈：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/offwaketime_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;h1 id=&quot;2-bpf_map_type_stack&quot;&gt;2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_STACK&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景-7&quot;&gt;使用场景&lt;/h2&gt;
&lt;h3 id=&quot;场景一&quot;&gt;场景一：&lt;/h3&gt;

&lt;h1 id=&quot;3-bpf_map_type_ringbuf&quot;&gt;3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_RINGBUF&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景-8&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一-1&quot;&gt;场景一：&lt;/h3&gt;

&lt;h1 id=&quot;4-bpf_map_type_perf_event_array-1&quot;&gt;4 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_PERF_EVENT_ARRAY&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景-9&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一perf-events&quot;&gt;场景一：Perf events&lt;/h3&gt;

&lt;p&gt;BPF 程序将数据存储在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap()&lt;/code&gt; 共享内存中，用户空间程序可以访问。&lt;/p&gt;

&lt;p&gt;场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;非固定大小数据（不适合 map）&lt;/li&gt;
  &lt;li&gt;无需与其他 BPF 程序共享数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;程序示例-11&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-samplesbpftrace_outputtrace-write-系统调用&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/trace_output&lt;/code&gt;：trace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt; 系统调用&lt;/h3&gt;

&lt;h1 id=&quot;-8&quot;&gt;————————————————————————&lt;/h1&gt;
&lt;h1 id=&quot;socket-maps&quot;&gt;Socket Maps&lt;/h1&gt;
&lt;h1 id=&quot;-9&quot;&gt;————————————————————————&lt;/h1&gt;

&lt;h1 id=&quot;1-bpf_map_type_sockmap&quot;&gt;1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_SOCKMAP&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;主要用于 socket redirection：将 sockets 信息插入到 map，后面执行到
bpf_sockmap_redirect() 时，用 map 里的信息触发重定向。&lt;/p&gt;

&lt;h2 id=&quot;使用场景-10&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一socket-redirection重定向&quot;&gt;场景一：socket redirection（重定向）&lt;/h3&gt;

&lt;h2 id=&quot;程序示例-12&quot;&gt;程序示例&lt;/h2&gt;

&lt;p&gt;TODO.&lt;/p&gt;

&lt;h1 id=&quot;2-bpf_map_type_reuseport_sockarray&quot;&gt;2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_REUSEPORT_SOCKARRAY&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;配合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_PROG_TYPE_SK_REUSEPORT&lt;/code&gt; 类型的 BPF 程序使用，加速 socket 查找。&lt;/p&gt;

&lt;h2 id=&quot;使用场景-11&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一配合-_sk_reuseport-类型-bpf-程序加速-socket-查找&quot;&gt;场景一：配合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_SK_REUSEPORT&lt;/code&gt; 类型 BPF 程序，加速 socket 查找&lt;/h3&gt;

&lt;h1 id=&quot;3-bpf_map_type_sk_storage&quot;&gt;3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_SK_STORAGE&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景-12&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一per-socket-存储空间&quot;&gt;场景一：per-socket 存储空间&lt;/h3&gt;

&lt;h2 id=&quot;程序示例-13&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-在内核定期-dump-socket-详情samplesbpftcp_dumpstats_kernc&quot;&gt;1. 在内核定期 dump socket 详情：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/tcp_dumpstats_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_next_dump&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_SK_STORAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_F_NO_PREALLOC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sockops&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_sockops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_sock_ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_tcp_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_SOCK_OPS_TCP_CONNECT_CB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bpf_sock_ops_cb_flags_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_SOCK_OPS_RTT_CB_FLAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_SOCK_OPS_RTT_CB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;next_dump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_sk_storage_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bpf_next_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_SK_STORAGE_GET_F_CREATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_ktime_get_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;tcp_sk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_tcp_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_dump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bpf_printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dsack_dups=%u delivered=%u&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsack_dups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delivered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bpf_printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delivered_ce=%u icsk_retransmits=%u&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delivered_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;icsk_retransmits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;-10&quot;&gt;————————————————————————&lt;/h1&gt;
&lt;h1 id=&quot;xdp-maps&quot;&gt;XDP Maps&lt;/h1&gt;
&lt;h1 id=&quot;-11&quot;&gt;————————————————————————&lt;/h1&gt;

&lt;h1 id=&quot;1-bpf_map_type_sockhash&quot;&gt;1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_SOCKHASH&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景-13&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一xdp-重定向&quot;&gt;场景一：XDP 重定向&lt;/h3&gt;

&lt;h2 id=&quot;程序示例-14&quot;&gt;程序示例&lt;/h2&gt;



&lt;h1 id=&quot;2-bpf_map_type_devmap&quot;&gt;2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_DEVMAP&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;mark&gt;功能与 sockmap 类似，但用于 XDP 场景&lt;/mark&gt;&lt;/strong&gt;，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_redirect()&lt;/code&gt; 时触发。&lt;/p&gt;

&lt;h2 id=&quot;使用场景-14&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一存放-xdp-配置信息&quot;&gt;场景一：存放 XDP 配置信息&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;mark&gt;对于 TC BPF 程序，配置信息放到普通的 hash 或 array map 里就行了&lt;/mark&gt;&lt;/strong&gt;。但对于
XDP 程序来说，由于它们开始执行的位置非常靠前，此时大部分网络基础设施它们都是用
不了的。因此引入了一些专门针对 XDP 的基础设施，例如这里的 DEVMAP（对应 TC 场景
下的普通 BPF MAP）。&lt;/p&gt;

&lt;h3 id=&quot;场景二xdp-redirection&quot;&gt;场景二：XDP redirection&lt;/h3&gt;

&lt;h2 id=&quot;程序示例-15&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-存储-xdp-配置信息samplesbpfxdp_fwd_kernc&quot;&gt;1. 存储 XDP 配置信息：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/xdp_fwd_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;这个例子里，将允许通过哪些网卡发送数据的配置信息放到了一个 DEVMAP 里，&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_DEVMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// key 表示 ifindex，即网卡 ID&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// val 表示是否允许从这个网卡发送（TX）数据&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xdp_tx_ports&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主逻辑里查询这个 map，判断是否能通过这个网卡发送数据：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_FIB_LKUP_RET_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Verify egress index has been configured as TX-port.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bpf_map_lookup_elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xdp_tx_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fib_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XDP_PASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dmac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ETH_ALEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ETH_ALEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_redirect_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xdp_tx_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-xdp-重定向samplesbpfxdp_redirect_map_kernc&quot;&gt;2. XDP 重定向：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/xdp_redirect_map_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;将包从指定网卡重定向出去：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_DEVMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// virtual port index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// physical port index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx_port&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xdp_redirect_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xdp_redirect_map_prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xdp_md&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;swap_src_dst_mac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* send packet out physical port */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_redirect_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-极简-xdp-路由器samplesbpfxdp_router_ipv4_kernc&quot;&gt;3. 极简 XDP 路由器：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/xdp_router_ipv4_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;用到了多种类型的 MAP，实现 IPv4 路由功能：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Map for trie implementation*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_LPM_TRIE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trie_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_F_NO_PREALLOC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpm_map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Map for ARP table*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_HASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__be32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__be64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arp_table&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Map to keep the exact match entries in the route table*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_HASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__be32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direct_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exact_match&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_DEVMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx_port&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-bpf_map_type_devmap_hash&quot;&gt;3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_DEVMAP_HASH&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;同上。&lt;/p&gt;

&lt;h1 id=&quot;4-bpf_map_type_xskmap&quot;&gt;4 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_XSKMAP&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;都是 XDP map，都可用于 XDP socket 重定向，&lt;strong&gt;&lt;mark&gt;与 DEVMAP 有什么区别？&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用场景xdp&quot;&gt;使用场景：XDP&lt;/h2&gt;

&lt;h2 id=&quot;程序示例-16&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-xdp-socket-重定向samplesbpfxdpsock_kernc&quot;&gt;1. XDP socket 重定向：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/xdpsock_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_XSKMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_SOCKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xsks_map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xdp_sock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xdp_sock_prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xdp_md&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_SOCKS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_redirect_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xsks_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XDP_DROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;-12&quot;&gt;————————————————————————&lt;/h1&gt;
&lt;h1 id=&quot;其他-maps&quot;&gt;其他 Maps&lt;/h1&gt;
&lt;h1 id=&quot;-13&quot;&gt;————————————————————————&lt;/h1&gt;

&lt;h1 id=&quot;1-bpf_map_type_cpumap&quot;&gt;1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_CPUMAP&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景-15&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一-2&quot;&gt;场景一：&lt;/h3&gt;

&lt;h1 id=&quot;2-bpf_map_type_queue&quot;&gt;2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_QUEUE&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景-16&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一-3&quot;&gt;场景一：&lt;/h3&gt;

&lt;h1 id=&quot;3-bpf_map_type_struct_ops&quot;&gt;3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_STRUCT_OPS&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;使用场景-17&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一-4&quot;&gt;场景一：&lt;/h3&gt;

&lt;h1 id=&quot;4-bpf_map_type_lpm_trie&quot;&gt;4 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_MAP_TYPE_LPM_TRIE&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;支持高效的 longest-prefix matching。&lt;/p&gt;

&lt;h2 id=&quot;使用场景-18&quot;&gt;使用场景&lt;/h2&gt;

&lt;h3 id=&quot;场景一存储-ip-路由等&quot;&gt;场景一：存储 IP 路由等&lt;/h3&gt;

&lt;h2 id=&quot;程序示例-17&quot;&gt;程序示例&lt;/h2&gt;

&lt;h3 id=&quot;1-samplesbpfmap_perf_test_kernc-3&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/map_perf_test_kern.c&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&quot;2-samplesbpfxdp_router_ipv4_kernc&quot;&gt;2. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples/bpf/xdp_router_ipv4_kern.c&lt;/code&gt;&lt;/h3&gt;



&lt;h1 id=&quot;-14&quot;&gt;————————————————————————&lt;/h1&gt;
&lt;h1 id=&quot;其他相关内容&quot;&gt;其他相关内容&lt;/h1&gt;
&lt;h1 id=&quot;-15&quot;&gt;————————————————————————&lt;/h1&gt;



&lt;p&gt;BPF map 是内核对象，为方便从用户空间对 map 进行操作，
&lt;a href=&quot;https://github.com/torvalds/linux/blob/v5.8/tools/lib/bpf/bpf.c&quot;&gt;tools/lib/bpf/bpf.c&lt;/a&gt;
封装了一些通用 API。例如，&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# 带 _node 字样的函数或类型都表示感知 NUMA 结构
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bpf_create_map_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_map_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bpf_create_map_in_map_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_map_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_map_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;二者最后都会执行到 bpf 系统调用：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;sys_bpf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPF_MAP_CREATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;声明创建-bpf-map-的方式&quot;&gt;声明/创建 BPF map 的方式&lt;/h2&gt;

&lt;h3 id=&quot;常规方式&quot;&gt;常规方式&lt;/h3&gt;

&lt;p&gt;下面是来自 samples/bpf 中的一个例子：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// samples/bpf/lathist_kern.c&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_map_def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_size&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_size&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_CPU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上声明了一个 BPF map，&lt;/p&gt;



&lt;p&gt;建议声明 map 时优先使用这种封装好的方式，不要重复造轮子。&lt;/p&gt;

&lt;h3 id=&quot;tciproute2-方式&quot;&gt;tc/iproute2 方式&lt;/h3&gt;

&lt;p&gt;如果使用的是 tc/iproute2，那声明和创建 map 的过程会稍有不同，见 iproute2
&lt;a href=&quot;https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/tree/include/bpf_elf.h?h=v4.14.1&quot;&gt;源码&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// samples/bpf/tc_l2_redirect_kern.c&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// key 结构体需要 64bit 对其，否则内核校验器会拒绝加载程序&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_elf_map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_elf_map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tun_iface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_MAP_TYPE_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIN_GLOBAL_NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;map-pinning&quot;&gt;Map pinning&lt;/h2&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Object pinning settings */&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define PIN_NONE        0
#define PIN_OBJECT_NS   1
#define PIN_GLOBAL_NS   2 // 绑定到 `/sys/fs/bpf/tc/globals/` 下面
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个选项决定了&lt;strong&gt;&lt;mark&gt;以何种文件系统方式将 map 暴露出来&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;例如，如果使用的是 libbpf 库，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_obj_pin(fd, path)&lt;/code&gt; &lt;strong&gt;&lt;mark&gt;将 map fd 绑定到文件系统中的指定文件&lt;/mark&gt;&lt;/strong&gt;；&lt;/li&gt;
  &lt;li&gt;接下来，其他程序&lt;strong&gt;&lt;mark&gt;获取这个 fd&lt;/mark&gt;&lt;/strong&gt;，只需执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_obj_get(pinned_file)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;


  
  
&lt;/div&gt;


          

      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>