<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>703bc943c52e64d02bf3e9160c501dd3</guid>
<title>编程中的这些坑，给你挖好了</title>
<link>https://toutiao.io/k/l0ppjmu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是贺同学。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;昨天，北京迎来初雪，气温急剧下降，感觉北京秋天还没怎么过，就要“一秒入冬”了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今年北京确实冷得比较早，由于前期入秋偏晚，国庆假期又赶上持续的雨水将气温拉低，这次的冷空气势力确实很强，大幅度降低了气温，在北京的朋友们注意保暖呀。&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAApAsSbNtpBAAAAAstQy6ubaLX4KHWvLEZgBPE7KNIYjVnWNv9zNPgMIsBRLsy7oqhAtwWSgBV8Deq&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=XGocBFxVWK5dcyOOqpEU47RpBHQIvlhnUVRbkqUyibRRWwCgtHW8vesASFqROVc2eER92iaiaz0qS0yzyqico8YC0xdylFSiaKQm3rYJ5DYVILs1IMaq58s1FZW5ypJ1BUeX4UVs7GwnYTsDvfXEodgeRibUZLoSbERu7qqH9MZHPsMAVaMaXHZxsEFQ&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=76cd08d18cccd61292ae81b93230f195&amp;amp;token=x5Y29zUxcibDjdNeOqgBhia6IZ6Tu20RWe0Y59Vic5lUN7XroIpAYrTGK4zjlicrAF862E3IJLDABAg&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM4aIQETOXhVyt4dg0Tuyf2B34NuAxw2I1JGsOOzHD1bVQ/0&quot; data-username=&quot;v2_060000231003b20faec8c5e78d11c2d1cc04ef3db0779a97b932f7592ff3dda9012109c43751@finder&quot; data-nickname=&quot;herongwei&quot; data-desc=&quot;#北京下雪了 北国风光，千里冰封，万里雪飘。望长城内外，惟馀莽莽@微信时刻 @微信视频号创造营 @微信派&quot; data-nonceid=&quot;2710061295726460971&quot; data-type=&quot;video&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，咳咳，言归正传，咋们来讲讲编程中的那些小坑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于一个编程初学者来说，常犯错是很正常的，就算是有了一定功底的人也会犯一些低级错误，总结一下平时工作中经常也容易犯错的编程小坑，希望大家以后多多注意。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为小贺工作中主要用 C++/Go/Python，所以下面的经验主要是以这三种语言举例，其它语言也没关系，编程思想都是相通的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100005954&quot; data-ratio=&quot;0.5890625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j5D4MI5U9vUibFaWAF4qBoyMEIo44uuaia7CQlaWoPQOJ3g5A6d3mYayf4JbatP9NliayhdiaAedZlc1jmL8qyJXMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;循环遍历中删除原先容器本身&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 for 发起任何形式的遍历时，它的遍历顺序都是从最初就确定的，而在遍历中删除了原先遍历容器本身，会导致当前索引的变化，这样会带来两个危害：一是会导致漏删元素，二是会导致遍历超过链表的长度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个小坑，尤其对于初学者，很容易不知不觉就跳进去了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100005952&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j5D4MI5U9vUibFaWAF4qBoyMEIo44uuaianCRZpcA6AqpT6I7icPIX6usypvicRiciaEMvROr2zWe5Xic5n6jNfBIPemw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如下面这段 Python 代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 每个词中间是空格，用正则过滤掉英文和数字，最终输出&quot;每一天 你&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; re&lt;br/&gt;a = &lt;span&gt;&quot;I cherish 每一天 with 你 for 10000&quot;&lt;/span&gt;&lt;br/&gt;list1 = a.split(&lt;span&gt;&quot; &quot;&lt;/span&gt;)&lt;br/&gt;print(list1)&lt;br/&gt;res = re.findall(&lt;span&gt;r&#x27;\d+|[a-zA-Z]+&#x27;&lt;/span&gt;,a)&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; list1:&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; res:&lt;br/&gt;        list1.remove(i)&lt;br/&gt;print(list1) &lt;span&gt;#输出是 [&#x27;cherish&#x27;, &#x27;每一天&#x27;, &#x27;你&#x27;, &#x27;10000&#x27;]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原先用正则匹配出来的四个要删除的字符分别是 [&#x27;I&#x27;, &#x27;cherish&#x27;, &#x27;with&#x27;, &#x27;for&#x27;, &#x27;10000&#x27;] ，在原先空格分隔索引之后分别对应[0 1 3 5 6] 可以验证发现每次 for 循环遍历删除了原先列表里的元素之后这个索引就变化了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，对于上面的代码，优雅的做法是用 join 重新拼接字符串，或者以英文字符和数字作为分隔符，得到一个空字符和中文的列表，再用 join 来拼接。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;迭代器失效问题&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个知识点对 C++ 代码的初学者来说，包括老选手，都是容易犯的错误。对 C++ STL 中迭代器的删除需要慎重，稍有不慎，就会造成迭代器失效的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100005956&quot; data-ratio=&quot;0.9866666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j5D4MI5U9vUibFaWAF4qBoyMEIo44uuaiagAesGkeicyeHIvZzfVPN1EL4WsHSNIBSlX4HYHPCnO8UMPlE7aibM4ibg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;迭代器的失效问题：对容器的操作影响了元素的存放位置，称为迭代器失效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在之前的 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzg5MDg0OA==&amp;amp;mid=2247485881&amp;amp;idx=1&amp;amp;sn=9dfdb74748edb8b8527595b8df8d48b2&amp;amp;chksm=e8c0f5f6dfb77ce0e9b41edb82b0058eea012833a234336fe235cc3e534fc6b7690d0474b0d5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;万字长文炸裂！手撕 STL 迭代器源码与 traits 编程技法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;万字长文炸裂！手撕 STL 迭代器源码与 traits 编程技法&lt;/a&gt; 中，其实已经深入讲解了一部分，那这里在简单提一下吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;失效情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;当容器调用erase()方法后，当前位置到容器末尾元素的所有迭代器全部失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当容器调用insert()方法后，当前位置到容器末尾元素的所有迭代器全部失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果容器扩容，在其他地方重新又开辟了一块内存。原来容器底层的内存上所保存的迭代器全都失效了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;迭代器失效的原因是：因为 vetor、deque 使用了连续分配的内存，erase 操作删除一个元素导致后面所有的元素都会向前移动一个位置，这些元素的地址发生了变化，所以当前位置到容器末尾元素的所有迭代器全部失效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;分三种情况：&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于序列式容器（如 vector, deque）的迭代器失效示例如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 在这里想把大于2的元素都删除&lt;/span&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;auto&lt;/span&gt; it = q.begin(); it != q.end(); it++) {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (*it &amp;gt; &lt;span&gt;2&lt;/span&gt;)&lt;br/&gt;   q.erase(it); &lt;span&gt;// 这里就会发生迭代器失效&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决方法是利用 erase 方法可以返回下一个有效的 iterator，所以代码做如下修改即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 在这里想把大于 2 的元素都删除&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;auto&lt;/span&gt; iter=vec.begin();iter!=vec.end();){&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(*iter&amp;gt;&lt;span&gt;2&lt;/span&gt;) {&lt;br/&gt;     iter=vec.erase(iter); &lt;span&gt;// 这里会返回指向下一个元素的迭代器，因此不需要再自加了&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;     iter++;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于链表式容器(如 list)，删除当前的 iterator，仅仅会使当前的 iterator 失效，这是因为 list 之类的容器，使用了链表来实现，插入、删除一个结点不会对其他结点造成影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要在 erase 时，递增当前 iterator 即可，并且 erase 方法可以返回下一个有效的 iterator。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; (iter = dataList.begin(); iter != dataList.end();)&lt;br/&gt;{&lt;br/&gt;   (*it)-&amp;gt;doSomething();&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; (shouldDelete(*iter))&lt;br/&gt;      iter = dataList.erase(iter);  &lt;span&gt;//erase删除元素，返回下一个迭代器&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;      ++iter;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于关联容器(如 map, set,multimap,multiset)，只要在 erase 时，递增当前 iterator 即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是因为 map 之类的容器，使用了红黑树来实现，插入、删除一个结点不会对其他结点造成影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;erase 迭代器只是被删元素的迭代器失效，但是返回值为 void，所以要采用 erase(iter++) 的方式删除迭代器，因为传给 erase 的是 iter 的一个副本，iter++ 是下一个有效的迭代器。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; (iter = dataMap.begin; iter != dataMap.end();)&lt;br/&gt;{&lt;br/&gt;   (*it)-&amp;gt;doSomething();&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; (shouldDelete(*iter))&lt;br/&gt;      dataMap.erase(iter++);  &lt;span&gt;//erase删除元素，返回下一个迭代器&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;      ++iter;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;资源关闭&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的资源包括文件、数据库连接和 socket 连接等，我们以文件操作为例，说明一下常见的资源关闭错误。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来以 Go 举例，文件操作的一个代码示例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;file, err := os.Open(&lt;span&gt;&quot;file.go&quot;&lt;/span&gt;) &lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;open file failed:&quot;&lt;/span&gt;, err)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能你写到这就开始专注业务代码了，最后“忘记”了写关闭文件操作的代码。殊不知，在这里埋下了一个入坑的隐患。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100005957&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j5D4MI5U9vUibFaWAF4qBoyMEIo44uuaiaWTaLrF1KXSmiao8W6Q6Znq0mwXzjq5lxFhFlgJpY0VFOpDjU4DqMaNA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;225&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Linux 中，一切皆文件，当打开的文件数过多时，就会触发 &quot;too many open files“ 的系统错误，从而让整个系统陷入崩溃。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们增加上关闭文件操作的代码，如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;file, err := os.Open(&lt;span&gt;&quot;file.go&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; file.Close()&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;open file failed:&quot;&lt;/span&gt;, err)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Golang 提供了一个很好用的关键字 defer，defer 语句的含义是不管程序是否出现异常，均在函数退出时自动执行相关代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但值得注意的是上面的修改又引入了新问题，即如果文件打开错误，调用 file.Close 会导致程序抛出异常（panic），所以正确的修改应该将 file.Close 放到错误检查之后，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;file, err := os.Open(&lt;span&gt;&quot;file.go&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;open file failed:&quot;&lt;/span&gt;, err)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; file.Close()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;变量的大小写/初始化&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;变量的大小写&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 C++，Python等语言中对于关键字的增加没有 Golang那么严格，相比之下，Golang 对关键字的增加非常吝啬，其中没有 private、protected 和 public 这样的关键字。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要使某个符号对其他包（package）可见（即可以访问），需要将该符号定义为以大写字母开头，这些符号包括接口，类型，函数和变量等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外对于未使用的变量，在其他语言，可能会警告，但在 Go 语言里，如果存在未使用的变量会导致编译失败。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100005958&quot; data-ratio=&quot;0.9188034188034188&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j5D4MI5U9vUibFaWAF4qBoyMEIo44uuaia5CNZyFickRGgeSxn2DFNtxiclBHuLw1ia4UkvFQQ1q0Ljf9VYhPKuzYbg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;234&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;变量的初始化&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个变量未初始化就开始使用（如果定义在全局，变量会自动初始化，不在此列），&lt;span&gt;在 G&lt;/span&gt;&lt;span&gt;o 里面，另一个常见错误是，局部变量有可能遮盖或隐藏全局变量，因为通过 “:=” 方式初始化的局部变量看不到全局变量。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;精度转化&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在对一些数据做处理的时候，也会遇到一些特殊 case 情况需要排查，最终你会发现精度转化函数调用的不对也会掉坑里了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如在 C++ 里面，string to float and double Conversion 就提供了三个函数，那么具体到实战层面来说，每个函数的保留的位数也是不一样的。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;std::stof() - convert string to float&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;std::stod() - convert string to double&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不同等级的精度转化不一样。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;string&lt;/span&gt; s = &lt;span&gt;&quot;116.8&quot;&lt;/span&gt;&lt;br/&gt;// 若调用 stof 转化为 &lt;span&gt;float&lt;/span&gt; 则结果是  &lt;span&gt;116.80000305175781&lt;/span&gt;&lt;br/&gt;// 若调用 stod 转化为 &lt;span&gt;double&lt;/span&gt; 则结果是 &lt;span&gt;116.8&lt;/span&gt; &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果转换的数在后续需要进一步的数学运算，比如每个数乘以 1e6，可想而知导致的结果肯定是不一样的，如果这里没注意，涉及广告等业务的代码上线出了事故，那损失可就不是一笔小数目啊。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100005959&quot; data-ratio=&quot;0.898989898989899&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j5D4MI5U9vUibFaWAF4qBoyMEIo44uuaiaaiaZt7wKrCbmggqtzdUukYB3r6QhB4Wic7hu6qdkRugxw4f6v1A4Bdog/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;198&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;其它小坑&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;忽略了“=”与“==”的区别，在大部分语言的语法规则里，“=”是赋值运算符，“==”是关系运算符。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外对于 Python 来说。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;误以为 Python 是弱类型语言，其实是强类型语言；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;误以为 True/False 是常量值，在 Pytho2.7是两个内建（built-in）变量；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于两个等值数字比如 a = 88, b =88, 误以为 a is b 返回 True，其实返回 False；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;误以为函数不是对象，其实函数也是对象，也可以像其他类型的对象一样被赋值，传递，作为返回值。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然了，上面举得例子只是我个人工作中的一些总结，限于篇幅，肯定没有涵盖所有的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家呢，还是要在平时的工作业务中积累经验，如果大家有比较印象深刻的小坑也可以留言评论一起交流学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好啦，本周的唠嗑就是这样了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我是小贺，我们下期再见。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section label=&quot;Copyright © 2014 playhudong All Rights Reserved.&quot; donone=&quot;shifuMouseDownOther(&#x27;shifu_o_028&#x27;)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100005953&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/7ibzJsmgW5wguO21SlkBAdxJgAicEOVCzDiaObyzEAEMTI527clib7gHvKfBtDu8MJZLwwEIVuVBmqfn01fmLDdTfQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;·················END·················&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你好，我是 herongwei&lt;/span&gt;&lt;span&gt;，一个精神小伙&amp;amp;鹅厂&lt;/span&gt;&lt;span&gt;程序猿，热爱编程，热爱生活，热爱分享，在&lt;span&gt;平凡的人生中追求一点不平凡&lt;/span&gt;，&lt;/span&gt;&lt;span&gt;欢迎关注，一起加油，点击下方名片，了解更多。&lt;/span&gt;&lt;/section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;534&quot; data-backw=&quot;578&quot; data-fileid=&quot;100005955&quot; data-ratio=&quot;0.9241071428571429&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYLlRAMuUvibvHyyKRdGqDEZDaic2RSg3C0sdNStEwXYdrBx03VBsocVpHwCRj8uRlLh7EwjnM2Kja2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;448&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c228759122b80bbf3d51655b791d0464</guid>
<title>技术必备：推荐一款接口自动化测试数据校验神器</title>
<link>https://toutiao.io/k/41qnq6p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/k2FwYYrGoDk8LMBdsK6cic2zlwGLpXAtxmXuWvN5PbPibrttVgdaiaTTb4NsMSHkSDYiargFzhOclNanDdGFRg5AsA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是狂师。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在之前分享中，给大家介绍过一篇：&lt;strong&gt;如何快速审核接口返回值全部字段解决方案&lt;/strong&gt;，详见原文：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4NDUyNzA0Ng==&amp;amp;mid=2247488111&amp;amp;idx=1&amp;amp;sn=6045aa960803e8309109acbbd40acfa4&amp;amp;chksm=9fe480c6a89309d0b29ce721d781a44e839d0c44b595c6e5e55240d8bb2534ae92b07aca5740&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;接口自动化测试，一键快速校验接口返回值全部字段&lt;/a&gt; 。当时，提到解决这类问题，市面上常见的解决方案有两种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;根据业务校验需求，自定义开发校验规则库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;借助现有的第三方库&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而文章中介绍到的方案，就是借助现有的第三方库来实现：&lt;code&gt;DeepDiff&lt;/code&gt; 。对于一些特殊业务或者复杂的测试场景来说，这类&lt;strong&gt;通用方案&lt;/strong&gt;，总会有一些需求无法满足。因此往往还需要根据这类业务校验需求，自定义开发校验规则库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们今天不讲如何开发一款自定义开发校验规则库，而是给大家分享一款在开发自定义校验规则库或者常规的接口自动化测试时，经常会用到的一款数据提取神器：&lt;code&gt;JSonPath&lt;/code&gt;。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. JSonPath介绍&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;JSonPath&lt;/strong&gt;是一种简单的方法来提取给定&lt;code&gt;JSON&lt;/code&gt;文档的部分内容。JSonPath有许多编程语言，如&lt;code&gt;Javascript&lt;/code&gt;，&lt;code&gt;Python&lt;/code&gt;和&lt;code&gt;PHP&lt;/code&gt;，&lt;code&gt;Java&lt;/code&gt;等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JSonPath提供的json解析非常强大，它提供了类似正则表达式的语法，基本上可以满足所有你想要获得的JSON内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目地址：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;https://github.com/json-path/JsonPath&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一句话概括：&lt;strong&gt;JsonPath就是用来解析提取Json数据用的&lt;/strong&gt;。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. JSonPath语法&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;JSONPath&lt;/code&gt; 是参照，Xpath表达式来解析XML文档的方式，JSON数据结构通常是匿名的并且不一定需要有根元素。JSONPaht 用一个抽象的名字$来&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 10623.1 950&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1277.8, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;/&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(934.5, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;表&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(1869.1, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;示&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(2803.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;最&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(3738.1, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;外&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(4672.7, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;层&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(5607.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;对&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(6541.7, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;象&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(7476.3, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;，&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(8410.8, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;即&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; $代表整个JSON数据的值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JSonpath的语法如下：&lt;strong&gt;jsonpath.jsonpath()&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;参数：json对象，jsonpath表达式&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;返回值：列表&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JSONPath 表达式可以使用.  符号如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$.store.book[&lt;span&gt;0&lt;/span&gt;].title&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者使用[] 符号&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$[&lt;span&gt;&#x27;store&#x27;&lt;/span&gt;][&lt;span&gt;&#x27;book&#x27;&lt;/span&gt;][&lt;span&gt;0&lt;/span&gt;][&lt;span&gt;&#x27;title&#x27;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JSONPath 允许使用通配符 * 表示所以的子元素名和数组索引，还允许使用 &#x27;..&#x27;  。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;表达式在下面的脚本语言中可以使用显示的名称或者索引：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$.store.book[(@.length&lt;span&gt;-1&lt;/span&gt;)].title&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&#x27;@&#x27;符号表示当前的对象，?(&amp;lt;判断表达式&amp;gt;) 使用逻辑表达式来过滤。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$.store.book[?(@.price &amp;gt; &lt;span&gt;100&lt;/span&gt;)].title&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中&lt;strong&gt;XPath&lt;/strong&gt;和&lt;strong&gt;JSONPath&lt;/strong&gt;语法区别如下:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.42581423401688784&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/k2FwYYrGoDk8LMBdsK6cic2zlwGLpXAtxqFMYia2qM2PibyMmR5t2ZQq7w5z5XVhBmoXH31v9yQ2KuAFnjIxJIm7w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1658&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;需要额外注意的是&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;[]在xpath表达式总是从前面的路径来操作数组，索引是从1开始。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用JOSNPath的[]操作符操作一个对象或者数组，索引是从0开始。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. JsonPath实战使用&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;安装：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pip install jsonpath&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：待提取的json数据变量名为: &lt;code&gt;json_datas&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;json_datas = {&lt;span&gt;&quot;store&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;book&quot;&lt;/span&gt;: [&lt;br/&gt;      { &lt;span&gt;&quot;category&quot;&lt;/span&gt;: &lt;span&gt;&quot;测试开发技术&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;author&quot;&lt;/span&gt;: &lt;span&gt;&quot;狂师&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;关注公众号：测试开发技术&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;price&quot;&lt;/span&gt;: &lt;span&gt;129&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;      { &lt;span&gt;&quot;category&quot;&lt;/span&gt;: &lt;span&gt;&quot;自动化测试&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;author&quot;&lt;/span&gt;: &lt;span&gt;&quot;狂师1&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;《自动化测试实战宝典》&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;price&quot;&lt;/span&gt;: &lt;span&gt;109&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;      { &lt;span&gt;&quot;category&quot;&lt;/span&gt;: &lt;span&gt;&quot;Python&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;author&quot;&lt;/span&gt;: &lt;span&gt;&quot;狂师2&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;Python实战教程&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;isbn&quot;&lt;/span&gt;: &lt;span&gt;&quot;0-110-234567-30&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;price&quot;&lt;/span&gt;: &lt;span&gt;99&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;      { &lt;span&gt;&quot;category&quot;&lt;/span&gt;: &lt;span&gt;&quot;Java&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;author&quot;&lt;/span&gt;: &lt;span&gt;&quot;狂师3&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;小白学Java&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;isbn&quot;&lt;/span&gt;: &lt;span&gt;&quot;0-13095-19295-8&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;price&quot;&lt;/span&gt;: &lt;span&gt;89&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    ],&lt;br/&gt;    &lt;span&gt;&quot;info&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;color&quot;&lt;/span&gt;: &lt;span&gt;&quot;red&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;price&quot;&lt;/span&gt;: &lt;span&gt;88&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;1. 查找book下面所有的author&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; jsonpath&lt;br/&gt;datas = jsonpath.jsonpath(json_datas, &lt;span&gt;&#x27;$.store.book[*].author&#x27;&lt;/span&gt;)&lt;br/&gt;print(datas)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果为：&lt;code&gt;[&#x27;狂师&#x27;, &#x27;狂师1&#x27;, &#x27;狂师2&#x27;, &#x27;狂师3&#x27;]&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述提取表达式，可以改为如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;datas = jsonpath.jsonpath(json_datas, &lt;span&gt;&#x27;$..author&#x27;&lt;/span&gt;)&lt;br/&gt;print(datas)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具备同等效果，输出所有author，结果同样为:&lt;code&gt;[&#x27;狂师&#x27;, &#x27;狂师1&#x27;, &#x27;狂师2&#x27;, &#x27;狂师3&#x27;]&lt;/code&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;2. 查找store下面book所有节点数据&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;datas = jsonpath.jsonpath(json_datas, &lt;span&gt;&#x27;$.store.book.*&#x27;&lt;/span&gt;)&lt;br/&gt;print(datas)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[{&#x27;category&#x27;: &#x27;测试开发技术&#x27;, &#x27;author&#x27;: &#x27;狂师&#x27;, &#x27;title&#x27;: &#x27;关注公众号：测试开发技术&#x27;, &#x27;price&#x27;: 129}, {&#x27;category&#x27;: &#x27;自动化测试&#x27;, &#x27;author&#x27;: &#x27;狂师1&#x27;, &#x27;title&#x27;: &#x27;《自动化测试实战宝典》&#x27;, &#x27;price&#x27;: 109}, {&#x27;category&#x27;: &#x27;Python&#x27;, &#x27;author&#x27;: &#x27;狂师2&#x27;, &#x27;title&#x27;: &#x27;Python实战教程&#x27;, &#x27;isbn&#x27;: &#x27;0-110-234567-30&#x27;, &#x27;price&#x27;: 99}, {&#x27;category&#x27;: &#x27;Java&#x27;, &#x27;author&#x27;: &#x27;狂师3&#x27;, &#x27;title&#x27;: &#x27;小白学Java&#x27;, &#x27;isbn&#x27;: &#x27;0-13095-19295-8&#x27;, &#x27;price&#x27;: 89}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;3. 查找book下面第三个book&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;datas = jsonpath.jsonpath(json_datas, &lt;span&gt;&#x27;$.store.book[2]&#x27;&lt;/span&gt;)&lt;br/&gt;print(datas)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果为:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[{&#x27;category&#x27;: &#x27;Python&#x27;, &#x27;author&#x27;: &#x27;狂师2&#x27;, &#x27;title&#x27;: &#x27;Python实战教程&#x27;, &#x27;isbn&#x27;: &#x27;0-110-234567-30&#x27;, &#x27;price&#x27;: 99}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;4. 查找book下面最后个book,返回的是一个列表&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;datas = jsonpath.jsonpath(json_datas, &lt;span&gt;&#x27;$.store.book[(@.length-1)]&#x27;&lt;/span&gt;)&lt;br/&gt;print(datas)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[{&#x27;category&#x27;: &#x27;Java&#x27;, &#x27;author&#x27;: &#x27;狂师3&#x27;, &#x27;title&#x27;: &#x27;小白学Java&#x27;, &#x27;isbn&#x27;: &#x27;0-13095-19295-8&#x27;, &#x27;price&#x27;: 89}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;5.查找 book下面前3本书&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;datas = jsonpath.jsonpath(json_datas, &lt;span&gt;&#x27;$.store.book[0,2]&#x27;&lt;/span&gt;)&lt;br/&gt;print(datas)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果为:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[{&#x27;category&#x27;: &#x27;测试开发技术&#x27;, &#x27;author&#x27;: &#x27;狂师&#x27;, &#x27;title&#x27;: &#x27;关注公众号：测试开发技术&#x27;, &#x27;price&#x27;: 129}, {&#x27;category&#x27;: &#x27;Python&#x27;, &#x27;author&#x27;: &#x27;狂师2&#x27;, &#x27;title&#x27;: &#x27;Python实战教程&#x27;, &#x27;isbn&#x27;: &#x27;0-110-234567-30&#x27;, &#x27;price&#x27;: 99}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;6. 查找所有的包含isbn这个键的所有book&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;datas = jsonpath.jsonpath(json_datas, &lt;span&gt;&#x27;$.store.book[?(@.isbn)]&#x27;&lt;/span&gt;)&lt;br/&gt;print(datas)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果为:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[{&#x27;category&#x27;: &#x27;Python&#x27;, &#x27;author&#x27;: &#x27;狂师2&#x27;, &#x27;title&#x27;: &#x27;Python实战教程&#x27;, &#x27;isbn&#x27;: &#x27;0-110-234567-30&#x27;, &#x27;price&#x27;: 99}, {&#x27;category&#x27;: &#x27;Java&#x27;, &#x27;author&#x27;: &#x27;狂师3&#x27;, &#x27;title&#x27;: &#x27;小白学Java&#x27;, &#x27;isbn&#x27;: &#x27;0-13095-19295-8&#x27;, &#x27;price&#x27;: 89}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;7. 查找价格大于100的所有书&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;datas = jsonpath.jsonpath(json_datas, &lt;span&gt;&#x27;$.store.book[?(@.price&amp;gt;100)]&#x27;&lt;/span&gt;)&lt;br/&gt;print(datas)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[{&#x27;category&#x27;: &#x27;测试开发技术&#x27;, &#x27;author&#x27;: &#x27;狂师&#x27;, &#x27;title&#x27;: &#x27;关注公众号：测试开发技术&#x27;, &#x27;price&#x27;: 129}, {&#x27;category&#x27;: &#x27;自动化测试&#x27;, &#x27;author&#x27;: &#x27;狂师1&#x27;, &#x27;title&#x27;: &#x27;《自动化测试实战宝典》&#x27;, &#x27;price&#x27;: 109}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. 最后，JsonPath小技巧&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后再给大家推荐一个技巧，如果一开始对JSONPath表达式不太熟悉，可以将需要提取的JSON数据，通过jsonpath在线解析工具测试一下，在线解析JSONPath网址很多，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;http://www.e123456.com/aaaphp/online/jsonpath/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5397301349325337&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/k2FwYYrGoDk8LMBdsK6cic2zlwGLpXAtxqHojyQfQiartZvaYnHptI63zVBRibRIKMdU9lpxeNVAHcEadLSNjiaaoA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2001&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在接口自动化测试中，只有你懂得利用好&lt;code&gt;JSONPath&lt;/code&gt;，那么至少可以让你在自动化测试数据提取这块，随心所欲的提取自己要想的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的干货分享就到这了，你学会了吗?&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>291cbc6d19fcf3ce13ef231a68a73362</guid>
<title>如何写好年度总结 PPT？</title>
<link>https://toutiao.io/k/7o8m67l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNDI0ODY1OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBsbESO4ibFCDqef4scQ0d37tBp3meC5icozRdMAmCZgNG0NTJnMXn3pVne9cibHIqibWzmQXeCeQRkONg/0?wx_fmt=png&quot; data-nickname=&quot;与数据同行&quot; data-alias=&quot;ysjtx_fyp&quot; data-signature=&quot;傅一平博士创办的大数据公众号，分享数据相关的技术干货、思考感悟和学习体会！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到年底了，大家估计都要写年度总结了，但这个PPT不是那么好写，即使只写一两页，也并不是那么容易。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PPT作为呈现业绩的主要方式，是职场人士需要掌握的一个技能，特别是对于管理人士，那就更重要了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在讲PPT方法论的很多了，但大道至简，我这里只给你展示一页PPT范例，如果你能理解其精髓，举一反三，那一定能提升自己的职场表现力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img custom_select_img&quot; data-fileid=&quot;508462908&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBvAibkiaaFKofHBZAoAQNGsibGmhaMaQRvlH5vawmF1jmuyiaDthGAbztoD2hxgRpW8EGI4EbGcoJo67g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;总体来讲，要写好总结PPT，要符合“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;四个标准&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”，遵循“&lt;/span&gt;&lt;strong&gt;&lt;span&gt;两个原则&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;”。&lt;/span&gt;&lt;span&gt;这里先讲“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;四个标准&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”，即&lt;/span&gt;&lt;strong&gt;&lt;span&gt;方向准确&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;、&lt;/span&gt;&lt;strong&gt;&lt;span&gt;标题清晰&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;、&lt;/span&gt;&lt;strong&gt;&lt;span&gt;架构严谨&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;和&lt;/span&gt;&lt;strong&gt;&lt;span&gt;描述有力&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、方向准确&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每页PPT的主题内容要跟组织的战略尽量相关，不管你处在什么样的部门，就是在最不起眼的维护等岗位，也要寻找这种相关性，因为如果不是别人关注的，就会弃之如敝履。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多人的总结PPT写不好，根子不在形式而在方向上，比如你会认为自己在做的工作对于组织很重要，但很多情况不是，这也是OKR在创新领域兴起的原因，即要随时随地保持个人目标与组织目标的一致。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在示例PPT里，快客产品目的是为了让数据直达一线，看起来似乎很普通，不就是开放数据嘛，但只要跟组织的目标匹配，意义就大了，比如这里“网格化改革”属于公司的战略，而为一线减负是这项战略重点关注的内容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，即使&lt;span&gt;你&lt;/span&gt;由于各种原因只花了10%的精力在公司重点关注的工作上，那你也只能写这10%，放弃那90%，在PPT上讲苦劳是无力的，而有了放弃的痛，才会更深刻的领会组织的目标，而总结PPT是这种矛盾和冲突的放大镜。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、标题清晰&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每页PPT只能表达一个主题内容，一般用简单明了的标题点明，标题既要有一定的高度，也要有具体内涵，否则会显得空洞无力，比如这里的“&lt;/span&gt;&lt;span&gt;百万标签下网格，数智能力到一线&lt;/span&gt;&lt;span&gt;”，不仅是有高度的，而且是具体的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了降低理解门槛，PPT的标题要能一望而知，即标题中的任何一个关键词，都处在上级的专业认知范围内，或者就是一个常识，任何一个不在领导认知范围内出现的名词都会极大影响其对这页PPT的理解，进而对PPT的内容产生怀疑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;搞过公众号的都知道，坏标题毁一生，这个道理也适用PPT，在PPT页数很多的情况下，能留给领导的往往就是一个清晰的有观点的标题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、架构严谨&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有了正确的方向和吸引的标题，接下来就要搭建PPT的信息框架，也就是如何更好的展开描述。这个时候就要遵循金字塔原理，即“&lt;/span&gt;&lt;strong&gt;&lt;span&gt;自顶向下，分层结构，相互独立，完全穷尽&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;”等原则，结构化让人表达事物的时候有逻辑，够全面，而所有的领导都是被结构化思维训练出来的，你需要用PPT的结构化来适应上级的思维方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;示例PPT遵循了这个原则，基于主题内容，从&lt;/span&gt;&lt;span&gt;普及程度&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;使用规模&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;取数效率&lt;/span&gt;&lt;span&gt;及&lt;/span&gt;&lt;span&gt;业务价值&lt;/span&gt;&lt;span&gt;4个方面了描述具体的贡献，这些贡献之间还有一定的逻辑关系，比如从用户规模（XX%渗透）到使用规模（增长XX倍），从管理价值（流程缩短）到业务价值（效率提升）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、描述有力&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;信息架构完成以后，需要针对每个模块进行具体描述，要遵循三个原则：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第一，言简意赅的说清楚采用的手段&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。切忌太技术的语言，这个示例PPT的子模块没讲手段，直接讲效果，那是因为快客产品就是手段，而且唯一，不再重复说明，但一般都要讲，比如下面这个总结PPT，在讲节能的效果时，提到了符号关断、载波关断等创新手段，只讲效果不带手段，一般很难让人信服。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;508462887&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBvAibkiaaFKofHBZAoAQNGsibGMiaibE1aHAcXjLmP4icVOIJRcs8Qcict7wibOqXlUoRiaOSibQpDLzaxUb9wg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二，用数据说清楚业务效果&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。能量化的尽量量化，不能量化的要用其他方式来证明价值，比如获奖，示例PPT的说服力在于全部用数据说话，并且采用比较的分析手段，比如场均业务量提升XX%，而写绝对值一般是没有力量的，除非这个绝对值有特殊的含义，比如双11交易额突破XXX元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三，图文并茂让人印象深刻&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。在描述每个模块具体内容时，一般都辅之于相应的图表说明，一方面人对图形化的表达跟更容易接受，这在进化学上有依据，另一方面有些内容无法用文字表述清楚，描述业务发展过程用趋势图就很合适，再有就是全是文字的表达会让PPT失去美感，因为人皆爱美，否则就不需要艺术了，PPT是一种工作艺术，即使是纯粹形式上的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上四个标准可以确保总结PPT在形式上表现完美，也是能在短期内提升的，但大多数人的总结PPT还是难令人满意，因为好的总结PPT还要遵循两个原则，即“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;说人话，言有物&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”，这是好PPT的根本，也是最难的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、说人话&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结PPT不是给自己看的，而是给别人看的，其需要在有限次接触的前提下解决上下级之间的信息不对称问题，为什么是有限次呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为如果上下级每天都可以见面，那信息不对称问题可以通过频繁的沟通解决，比如你的办公室就在下属座位的旁边，下属有问题直接跑过来跟你讲就可以了，不需要PPT这种东西，但假如下属需要向部门或公司老大汇报，那就需要正式的PPT形式，因为只有有限次机会，留给后续解释的机会不多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在有限次接触机会中，第一要务就是确保老板能理解，PPT要能切换到老板熟悉的语境。比如&lt;/span&gt;&lt;span&gt;给一位业务出身的老板汇报IT技术方案，就&lt;/span&gt;&lt;span&gt;要善于用业务的语言表达要做的事情，&lt;/span&gt;&lt;span&gt;只讲业务价值，输入和输出，不多讲过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但即使你知道了切换语境的道理，也不代表就能写好，因为要从你的语境自由切换到老板的语境，前提是对PPT的内容有本质的理解，但你写在PPT上的内容，不管是你做的，或者是你让别人做的，不一定都是你真正理解的，没有真正理解就很难切换语境换种说法。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有点能力的老板，一般都会有些完美主义的倾向吧，比如对不懂的东西刨根问底，这让&lt;span&gt;不求甚解&lt;/span&gt;的下级管理者很不适应。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、言有物&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你做到了以上所有，仍然写不出领导需要的效果，那大致有三个原因：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一，你做了很多事情，但的确不善于总结，所谓的做了100分的工作，但仅写出了20%的成果，但这种情况其实不多，怀才不遇其实很少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二，你认为自己做了很多事情，但由于格局太小，比如都是螺丝钉的工作，因此总结出来的效果很难上得了台面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第三，的确没做出什么值得show的工作，比如日复一日的取数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要能够让年终的总结PPT言之有物，首先要&lt;/span&gt;&lt;span&gt;确保工作的价值和意义&lt;/span&gt;&lt;span&gt;，这个前面已经讲过，做正确的事比正确的事重要的多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以做这么一个思想实验，在开始一项工作前，就把总结PPT写好，把所有能想到的效果都写出来，如果你都想像不出几个上得了台面的效果，那可能就要斟酌下干这个事情的必要性了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次就是要&lt;/span&gt;&lt;span&gt;把工作做深做透&lt;/span&gt;&lt;span&gt;，总结能写多少效果取决于工作的深度，因为越有深度就越少人能够达到，就越可能得到差异化的结果，也就越能言之有物。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就拿取数来讲吧，如果只是用SQL从常规的一些表里提取些数据，那总结的时候就会言之无物，但如果你深入一点，想着如何把取数做的快一点，比如优化一下宽表，那可能总结的时候就有点料了，如果再深入一点，从被动接收取数到主动帮助业务去做些分析，那么总结的时候就可以讲业务的故事了，那格局就上来了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，上级如果抱怨你的总结写得不好，要先想想到底是自己真的有货不会写呢，还是没货写不了？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果没货，就多反思自己问题所在，如果有货，就多看看这篇文章，&lt;/span&gt;&lt;span&gt;希望我的分享于你有帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;508462893&quot; data-ratio=&quot;0.11052631578947368&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBsBYSDtf5PsebibaWibPrb2pJgqibG1Ofib3ygwnPkDQ7zZnzONLyKjuoAy0nrsvux6pC8ibialk2n3gHCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;380&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNDI0ODY1OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBsbESO4ibFCDqef4scQ0d37tBp3meC5icozRdMAmCZgNG0NTJnMXn3pVne9cibHIqibWzmQXeCeQRkONg/0?wx_fmt=png&quot; data-nickname=&quot;与数据同行&quot; data-alias=&quot;ysjtx_fyp&quot; data-signature=&quot;傅一平博士创办的大数据公众号，分享数据相关的技术干货、思考感悟和学习体会！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;508462890&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.11052631578947368&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBvelVDaaECmibKwBQzYWNl0picKDW2SVG0x8ZLO79NPSHfUeyu1c22j9RcZrxbvNmn1rJvIYXdSuVVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;380&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;508462892&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBvelVDaaECmibKwBQzYWNl0phMcwdicuLTbTN6eYGf4qUvIccIScFH1NJ4GicibNykk16iaicdeVetVvqFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;443&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;508462891&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.10789473684210527&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;380&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBvelVDaaECmibKwBQzYWNl0pS95nEJT8H5pQa2Fhibgic3gLcIfeweqeqmgVyOdCjyQfmzYyeD41ViaKw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;508462894&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1085714285714285&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBvelVDaaECmibKwBQzYWNl0piakr9hOHIQcIp7IdxCN9prg55iaUYNuicpLlPLvBhQyQ5SYWnzMibau76A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/ol&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;38&quot; data-backw=&quot;278&quot; data-fileid=&quot;508462895&quot; data-ratio=&quot;0.13421052631578947&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;380&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hFm2L5m7fBu17iaEWDibxVATAq6l4UyeUs6GCy780B6EX0z5qiagCNLStYCX6cUYDWleXP1PpNg0ZtHh4xokz8picg/640?wx_fmt=png&quot;/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655944411&amp;amp;idx=1&amp;amp;sn=2eaf13104ef0995131e34b3971dc0fd9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655945684&amp;amp;idx=1&amp;amp;sn=9ab863d619be6d55e4057a0db4fd83ee&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;数据新人做到这5件事，才算真的会工作&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655945623&amp;amp;idx=1&amp;amp;sn=b948c57d9d1e1f927471efdef1e135c2&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;人人都想做模型而非数据工作，这很危险 by 傅一平&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655944793&amp;amp;idx=1&amp;amp;sn=46c2eb2bd54a35ad7ed953dde65d81e8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;我的数据人才观 by 大鱼先生&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655944058&amp;amp;idx=1&amp;amp;sn=9641d417a5ba4bee4072701f4d48429a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;数据领域，甲方和乙方分工的18个原则&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655943565&amp;amp;idx=1&amp;amp;sn=9b8e5b1b8feca9cbaf3efb4f3a9abc14&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;为什么我说OKR与KPI没有本质区别？（万字长文解读） by 大鱼先生&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655942190&amp;amp;idx=1&amp;amp;sn=deae26fc9e097198da4ef3e2f46be4c9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;技术人员近业务，会困死在一条船上吗？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655941657&amp;amp;idx=1&amp;amp;sn=a955a5fc7aac83bee2024bd696e1cc8b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;从“懂管理的IT人”，到“懂IT的管理者”&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNDI0ODY1OA==&amp;amp;mid=2655940503&amp;amp;idx=1&amp;amp;sn=cdf11452c92808499c96fe9b3685c50f&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;数据管理的实践：我的一周工作和反思&lt;/span&gt;&lt;span/&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;点击左下角“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;阅读原文&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”查看更多精彩文章，公众号推送规则变了，如果您想及时收到推送，麻烦右下角点个&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;或者把本号&lt;/span&gt;&lt;span&gt;&lt;strong&gt;置顶&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;！&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;&lt;/ol&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ccb087ddc57de1492bce52d9c012daf2</guid>
<title>eBPF：让云原生运维拥有超能力</title>
<link>https://toutiao.io/k/w3ebvhd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;eBPF给Linux内核带来了可编程性，由于其安全、灵活、对应用无侵入的特点，在云原生网络、安全、可观测性方面带来了很多创造性的应用。本文基于Cilium项目的首席开源官Liz Rice在InfoQ Live上的分享整理。原文：eBPF - Superpowers for Cloud Native Operations&lt;span&gt;[1]&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000610&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRBUu5PDTBydtAEVcKCMfJHZyO8v09UGIBJIvfcN4qV1NpCuMC2s8Gfg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Liz Rice是Isovalent的首席开源官，Isovalent是云原生网络和安全专家，是基于eBPF的Cilium项目的创建者。她是CNCF技术监督委员会主席，并于2018年担任KubeCon + CloudNativeCon联合主席。她是O&#x27;Reilly出版的《容器安全（Container Security）》一书的作者。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我叫Liz Rice，是Isovalent的首席开源官，这家公司是Cilium网络项目的幕后推手。我也是CNCF技术监督委员会主席。今天我想和你们谈谈eBPF，这是一项让我兴奋了一段时间的技术。我想和大家分享的是，为什么它真正革命性的改变了为网络、可观察性和安全性而构建工具的方式，尤其是在云原生的世界中。&lt;/p&gt;&lt;h1&gt;什么是eBPF？&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000608&quot; data-ratio=&quot;0.5375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRCO6XFMJxToQIf2I2V2bItygXHjCicaEibia2iaCsHZ5BlvY4mJlxHFRX7A/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;让我们从了解eBPF开始。我们一般会完整拼出这个缩写，它代表了扩展的伯克利包过滤器（Extended Berkeley Packet Filter）。作为一个名字，它并不是非常有用，提供不了多少信息，你真正需要知道的是，eBPF允许你编写在内核中运行的自定义代码。你不再需要编写新的内核模块，可以根据需要动态加载和卸载eBPF程序。你可能知道，我们编写的应用程序通常是在用户空间中运行，用户空间应用程序能做的事情很有限，需要通过系统调用接口来请求内核帮它做一些事情。实际上，只要应用程序想做什么有意思的事情，内核就会参与进来。例如每次你想在屏幕上显式字符或打开一个文件或发送一个网络数据包，都将涉及到内核。&lt;/p&gt;&lt;h1&gt;在内核中运行用户代码&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000606&quot; data-ratio=&quot;0.5575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRYXGjhKspJdyqOlmYoicUB9jVIPpSNHRpeKC3h0ECzjD8s9ApvUt0V0g/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于eBPF程序，我们必须编写两个部分，eBPF程序本身通过C语言编写，另外需要编写一个用户空间应用程序，它将通过系统调用接口来加载eBPF程序，并将其附加到某个将触发我们eBPF程序运行的事件上。我们可以将eBPF程序附加到许多不同类型的事件上。最早实现的事件是收到网络数据包的时候，这就是包过滤这个名字的由来。此外还可以附加到其他事件上，例如kprobe，它是内核中函数的入口，kretprobe，它是内核中函数的返回值。它们在用户空间中也有等价的接口，uprobe和uretprobe。你还可以将eBPF程序附加在跟踪点（trace point）上。几乎可以将eBPF程序插入内核中的任何位置，只要你知道事件发生时涉及到的内核函数，这样就可以将eBPF程序附加到代码中的正确位置。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000609&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoR4FemHbtGwqeBnXhtoXPTcF2AA7icickur5KoWUibBlKcazhuBIw0CcGibQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;按照传统，我们要写一个Hello World，这是我的Hello World。我们很快过一下makefile，可以看到我们要构建一个应用程序和一个object文件。有许多不同的方法可以组合eBPF对象程序和eBPF用户空间应用程序。在这个例子中使用的框架允许我单独构建对象文件，然后加载它，并在用户空间应用程序中运行它。实际上我构建了两个目标，可执行文件本身和作为目标文件的eBPF代码。eBPF代码非常简单，只是Hello World。bpf_printk这个函数很方便，可以输出消息以及相关的上下文信息。这个程序将由系统调用execve触发，每次运行新程序，这个系统调用都会被触发或调用，任何新程序都会触达调用点（kprobe），从而触发eBPF程序运行。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000607&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoREODRlSOKUCKo0SlNOFX6IxgcUqMAU2B4Wp7m7BqBkTDKQ2aAOELH0Q/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是将在内核中运行的部分&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000613&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRqYkr4t0DhaWzmqaYiaico0f0dNXvz2MS3EKPtQuwvZggqZo51bkp9p8w/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go代码运行在用户空间&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;上面的C代码运行在内核中，Go代码运行在用户空间。用户空间程序主要是将目标文件加载到内核中，从对象文件中获取Hello World程序，并将其附加到系统调用，然后还将负责实际获取输出并打印到屏幕上。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000614&quot; data-ratio=&quot;0.29475100942126514&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRcvJISa1XghWx5OW7iaJGPadibAdhKlyibsbXmbgBJ7qjZhVUic3CLicln3A/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;743&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果执行make，编译系统会分别编译C代码和Go代码。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000611&quot; data-ratio=&quot;0.46715328467153283&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRiafIynXMYPRc642pyiaOib5JZuuHSjf6CPnsx7SoJOanswfw1qR0arAnw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;548&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果以非特权用户身份运行程序，系统会报错，因为需要一个叫做CAP_BPF的功能，这是一个特权功能，需要作为root用户执行，或者也可以给个别用户权限，但作为普通无特权的用户没有权限执行。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000615&quot; data-ratio=&quot;0.27073552425665104&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRJRHNOU0e1OZAzkyWsPRQVmeWXMOhWmxdvpxx8aNaLbpWyxRxjYNxDA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以root用户身份运行，可以看到一些跟踪消息。这台机器上正在进行很多操作，有很多node和shell在运行。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000612&quot; data-ratio=&quot;0.2330259849119866&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRp4lFiatSDQTBJbMdbYyBuSRFaNgu9Oakia4tzAVdCvqYAgJSAK8DOJTg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1193&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我在另一个bash shell中运行ps，可以看到我的bash-22005，对应于运行ps的进程ID。指出这一点的原因是这个非常简单的eBPF Hello World可以看到所有这些不同的进程调用的执行。谁执行的，从哪发起的执行，都不重要，只要它们是发生在这个虚拟机上，发生在这个内核中，那么我的eBPF程序就会被触发。这是eBPF的强大功能之一，它连接到内核，而虚拟机上只有一个内核。这个Hello World非常简单，如果你想深入了解，我在GitHub上提供了一些更高级的例子：github.com/lizrice/ebpf-beginners。&lt;/p&gt;&lt;h1&gt;Kubernetes的可编程内核&lt;/h1&gt;&lt;p&gt;让我们来看看Kubernetes的世界，想想当我们在容器和pod中运行应用程序代码时，能够将eBPF程序附加到内核中意味着什么。我们的容器化应用程序主要在用户空间中运行，像任何其他应用程序一样，如果它想做一些有用的事情，不得不请求内核代表它去做。在Kubernetes中，这些容器被包含在称为pod的抽象中，但它们仍然共享一个内核。每个主机（Kubernetes节点）只有一个内核，可以是物理机，也可以是虚拟机。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000617&quot; data-ratio=&quot;0.5441666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRnfZwtjkqb756z7Iic0XfcP0XbWGFTPFhl7uMSwRyEWyOwasaGC9ibdQQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果运行在pod中的应用程序尝试做一些有趣的事情，比如读写文件，或发送/接收网络流量，或者创建一个新的容器，都会涉及到内核，内核知道机器上运行的所有应用程序中发生的所有事情。这意味着，如果我们将eBPF程序连接到内核中适当的点上，就可以知道在用户空间中运行的所有pod、所有应用程序中发生的所有事情。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000616&quot; data-ratio=&quot;0.5583333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRT1XGsRXwzSh6krdE91hmttPGgQKichn7mERaGDbBJv1u369gQqqnbog/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;Kubernetes可识别的网络流量&lt;/h1&gt;&lt;p&gt;让我们特别考虑一下网络，以及Kubernetes对网络的感知能力。当我们在Kubernetes运行pod时，每个pod都有一个唯一的IP地址。pod的生命周期非常短暂，可以动态的创建销毁，根据需求动态缩放pod是很常见的。每次创建pod时，都要给它分配一个IP地址，这意味着IP地址的生命周期也是短暂的。传统上，我们会监控网络流量，看到它们从一个IP地址流向另一个IP地址，这是很有用的。但在Kubernetes的世界里，这会很难处理，因为这些pod的地址一直在变化。&lt;/p&gt;&lt;p&gt;下面我想快速演示一下Cilium是如何跟踪endpoint的。每次创建pod时，Kubernetes都会向网络插件请求一个IP地址。我们把Kubernetes集群里的所有pod都显示出来，有许多不同的应用pod，网络是通过Cilium建立的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000620&quot; data-ratio=&quot;0.7125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRwFJeUwG5jgYeug2uJ1a5T6Ofias1fJdAic4HtSNkVkT7t7oIk0TFhoXg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个集群有两个node，每个node上都有一个Cilium代理。Cilium代理负责获取每个pod在节点上创建时的IP地址。如果访问其中一个pod (hqk94)，可以获取该代理知道的endpoint列表，可以看到标签信息和endpoint信息。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000619&quot; data-ratio=&quot;0.06333333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoR3QfBJ7U4F3dhHgJNMXEvB9F9yObH2LXQCnIONTUVAmGluvYK9U4niaw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000618&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRr9D625vM5kNIPMJftK6FAibVhvqExYotFWibXy038TxrlmCYe9VKwh6g/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于每个endpoint，我们都知道与之相关的Kubernetes标签、命名空间，知道它在哪个服务帐户下运行。对于代理知道的每个endpoint，可以将IP地址与pod和在该pod中运行的应用程序关联起来。把这些信息放在一起，就可以提取出与这些应用程序相关的网络信息。这是Cilium用户界面的截图，显示了不同服务之间的流量。因为有IP地址和pod之间的映射，所以它知道每个消息涉及哪个pod。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000625&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRMibD7QDickCwWYQzld1FO15gKTAQ98krNJzpDJUoIhNGHFyKpSn5ptwA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这是监控Kubernetes网络流量的一种非常强大的方法。这种方式之所以可能，是因为包括Cilium在内的eBPF应用程序可以知道整个节点上发生的所有事情。需要注意，eBPF可以看到在其他pod中运行的所有应用程序，而无需更改这些应用程序。这不涉及任何指令，不需要更改应用程序配置，eBPF代码可以自动识别它们。&lt;/p&gt;&lt;h1&gt;Sidecar模式&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000623&quot; data-ratio=&quot;0.5286697247706422&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRQKVS2Aaq1UO9sj3GkC1sQ8bEmMB4MJ6GGZJDqbA0MEPXAyO6QLjoicw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;872&quot;/&gt;&lt;/p&gt;&lt;p&gt;Nathan LeClaire最近在Twitter上发了这个非常棒的保险杠贴纸原型，我认为它很好的包装了使用eBPF的可观察性和安全工具的强大能力（到目前为止，通常被实现为sidecar模型）。在sidecar模型中，可观察性或安全工具作为sidercar容器注入到每个pod中。sidecar也是一个容器，pod中的所有容器都可以共享网络命名空间和卷信息等内容，所以sidecar可以看到pod中其他容器中发生的事情。为了在pod里部署sidecar，必须在YAML中进行配置。这项操作可能是手动的，也可能是自动的。你可以将sidecar定义注入应用程序YAML，从而实现自动化部署。它可以在部署之前定义，或者是通过接入控制webhook动态完成。无论如何，sidecar模式要求将sidecar容器注入到每个pod中。如果sidecar没有得到正确的配置，就无法在pod中运行。这是sidecar脆弱的一点，如果恶意用户设法运行了一个pod，并避免了sidecar的注入，那就无法看到该pod中发生了什么。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000621&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRaqG6jQ01GspOeibZcxxRtlyfnVhte0qS7lzt7v2DfQzNJpgw1An2ezA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;eBPF的真正好处之一是我们不需要做任何更改，就可以让程序在内核中运行，知道所有的容器和pod中发生的所有事情，不需要在任何地方修改任何YAML，也不需要在应用程序中添加任何工具。这就是为什么有许多新项目基于eBPF以及这种技术令人兴奋的原因之一，使用eBPF来实现可观察性和安全性工具，当然还有孕育了这种技术的网络场景。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000624&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRf5JoaMUvNzREmkJibQPJqEuoYTskTXNgA259pZ2R4xQuqroyR94xUibg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;云原生中的eBPF&lt;/h1&gt;&lt;p&gt;接下来我们快速浏览一下云原生环境中的一些eBPF项目。我已经讲了一些关于Cilium的内容，它是基于eBPF的网络。实际上，我们可以使用eBPF使网络中的某些部分更加高效。Falco是CNCF酝酿的一个安全工具项目，用来监视安全事件，并在这些事件发生时发出警报。Tracee是另一个类似Falco的项目，但可能更容易安装和配置。比Falco更轻量，但也更不成熟。最后是Pixie，这是一个新产品，最近被New Relic收购后提出将其贡献给CNCF沙箱。Cilium的孵化申请也在进行中。所有这些项目都在利用eBPF在云原生上做一些非常有趣和强大的事情。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000622&quot; data-ratio=&quot;0.3541666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRtoKW5jXEcqoOqzHy7YvUJevKzZ1Pe0iaKl8k60R5Y82aVgfBaIic51iaw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;h1&gt;进程可视化&lt;/h1&gt;&lt;p&gt;我想展示一些我们在Cilium中进行的实验，结合了之前展示的两个概念。在Hello World演示中，可以看到进程ID和调用进程的名称。eBPF可以访问有关进程和在这些进程中运行的程序的信息，也有关于Cilium的网络流量的信息。如果我们将这两种类型的信息结合在一起，就会得到这样的信息：我们可以确切的看到哪个进程、在哪个节点上、在哪个pod中、在哪个命名空间、正在运行什么可执行文件、在处理哪个特定的网络连接。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000626&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0X9icyRvZ7moKJcQzoQfZNoRfHiaInFibwWLV7B7fxVdfB3IicC1AlYVplCkiawjSxCWXXXgISv9rvyGCQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在这个例子中，有Twitter和Elasticsearch的网络连接，这看起来完全合理。假设还存在与加密货币矿机的连接，或某个恶意应用程序的已知命令和控制中心。有了这些信息，就能够准确的追踪到哪个可执行文件负责打开该连接，以及是从哪个pod打开的。这将给你提供所有可能需要的证据来追溯漏洞是在哪里发生的或者攻击是如何发生的。&lt;/p&gt;&lt;h1&gt;总结&lt;/h1&gt;&lt;p&gt;希望这能让你对eBPF的强大功能有所了解。eBPF不是魔法，需要我们编写代码。为了有效的访问信息，其中一些代码将需要大量的内核数据结构知识。编写eBPF代码不是一件容易的事，但它确实提供了非常强大的好处。到目前为止，我已经讨论了如何使Linux内核可编程。但eBPF不仅限于Linux，微软最近宣布了Windows上的eBPF，采用相同的概念和相同的通用抽象，但不会是一模一样的。你没法将一个在Linux上运行的eBPF应用程序直接在Windows上运行，因为它们在内核中查看的数据结构并不相同，只是尽量保持概念的一致。不仅仅适用于Linux，我认为这是eBPF生态系统真正令人兴奋的事情。&lt;/p&gt;&lt;h1&gt;资源&lt;/h1&gt;&lt;p&gt;希望上面的介绍能让你了解为什么我对eBPF如此兴奋。如果你想了解更多，在eBPF网站&lt;span&gt;[2]&lt;/span&gt;上有一些很棒的资源。当然，如果你想了解更多关于Cilium网络的知识，可以访问Cilium&lt;span&gt;[3]&lt;/span&gt;和Isovalent&lt;span&gt;[4]&lt;/span&gt;的官网。Slack上还有一个非常有用的关于Cilium和eBPF的频道。&lt;/p&gt;&lt;h1&gt;Q&amp;amp;A&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Ruckle&lt;/span&gt;：我在云原生领域工作已经有一段时间了。Linux内核并不总是能让人想到创新的地方。正如你所描述的，有许多非常聪明的工程师试图找到提高内核可编程性的方法，并最终打开了巨大的可能性。从你最后描述的使用这种技术的开源项目和事物的成熟度来看，这种技术可能会比人们想象的更快的进入Kubernetes生产集群。eBPF进展如何？我知道Netflix最近有一篇关于他们如何使用它的博客文章。你怎么看我们现在的状况？这是创新者的事情吗？还是已经进入早期使用者阶段了？你认为这项技术在成熟度范围内属于哪个位置？&lt;/p&gt;&lt;p&gt;&lt;span&gt;Rice&lt;/span&gt;：由于Linux内核支持的成熟，对于eBPF来说，这是一个非常有趣和令人兴奋的时刻。当某些东西第一次进入Linux内核时，一切都很好，只是没人用它。实际上，人们倾向于使用已经发布几年的内核。内核需要一段时间才能进入所有不同的Linux发行版。如果你运行的是Red Hat Linux，或者是长期支持的Ubuntu发行版，那么它可能使用的是几个月前，甚至是一两年前的内核。现在，eBPF的支持在内核中已经存在了很长时间，已经相当成熟了，大多数人在生产环境中使用的内核都具有运行eBPF的能力。这就意味着我们突然从一个有趣的实验变成了一个潜在的框架。平台实际上存在于每个人的生产环境中，对于基于eBPF的工具来说，当前是一个非常好的时机。&lt;/p&gt;&lt;p&gt;其中一些工具已经存在一段时间了。你提到的Netflix，来自Netflix的Brendan Gregg是eBPF领域的真正创新者之一。多年来，他一直在谈论、展示和使用eBPF，特别是在性能测量和调优方面。Netflix已经在生产环境中用了很长时间了。Facebook也参与了eBPF的创新，并且一直在使用并公开谈论他们已经使用了很长时间的一些事情。如果我们考虑采用曲线（在CNCF中被称为跨越鸿沟曲线），我们很喜欢把不同项目的成熟度阶段映射到这条曲线上。也许沙盒是为创新者准备的，孵化是为早期采用者准备的，毕业是为早期的大多数准备的。现在我们开始看到处于孵化阶段的eBPF项目。事实上，如果你现在正在使用这些工具，其实你并没有完全处于前沿位置。希望这能够说明关于成熟度的问题。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Ruckle&lt;/span&gt;：我认为你说得很有道理，比如Netflix和Facebook，所有这些和云有关的变化，都倾向于从符合这种类型的公司开始。如果这些公司在生产环境上自信的使用这种技术，这可能意味着成熟度和工具开始发挥作用，其他类型的工程组织也会开始利用这种技术。&lt;/p&gt;&lt;p&gt;然后，如果你有一个水晶球，你认为eBPF在五年内会如何发展？你对这项技术的目标和期望是什么？我知道你在几个月前将eBPF和Docker进行了比较，思考它如何真正改变了一些事情。如果可以的话，请告诉我们你对未来五年的看法。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Rice&lt;/span&gt;：即使是最谨慎的估计，我也认为我们将看到基于eBPF的工具被非常广泛的采用，正如我试图传达的那样，它们不需要以任何方式修改应用程序，甚至不需要改变应用的配置方式，更不用说添加任何工具了。我认为这使得它在所有这些可观察性工具中非常强大，我们在基于微服务的环境中更需要这些工具，需要大规模的工具。在我看来，我们很可能看到这些工具逐渐成熟并被广泛采用。我们最终会看到eBPF被大规模的用于许多基于网络的功能。例如，Facebook和Cloudflare，都发表过关于他们如何使用eBPF来帮助解决拒绝服务攻击等问题。如果使用eBPF，可以在一个数据包实际出现在你的机器上的时候，很早就把它钩住，实际上，当它还在网卡中的时候，如果你能看到这个数据包并说&quot;我不喜欢这个样子。这是恶意的&quot;，然后就可以直接丢弃。对于某些类型的攻击，这是一个非常强大的保护机制。&lt;/p&gt;&lt;p&gt;另一方面，我们会在五年内看到什么？我们会看到很多内核功能在eBPF中被重写吗？我们是否可以看到内核的一些特性被更高效或更可定制的eBPF实现所取代？这是我们开始看到的一些东西。例如，在网络数据路径中，如果有一个确切知道往哪里发送网络数据包的eBPF程序，那就不必遍历整个IP协议栈以及内核中的所有IP表。我不认为我们会用eBPF取代整个Linux内核，但我们可能会看到内核的很多领域都有这些替代实现。看到这些发展将会非常有趣。&lt;/p&gt;&lt;p&gt;最后，我对eBPF在Windows上所发生的事情感到兴奋。如果我们有可以跨操作系统使用的eBPF功能，会发生什么？这可能是非常强大和有趣的。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Ruckle&lt;/span&gt;：我认为这个问题的答案总是视情况而定。我很欣赏你对不同情况分别进行了谨慎、乐观的分析。从成本优化，弹性以及其他方面，都可以从eBPF中得到很多好处，因此似乎不可避免会在接下来的几年里在所有场景中扮演某种角色。那么几个监听相同事件的eBPF程序是否会相互冲突？&lt;/p&gt;&lt;p&gt;&lt;span&gt;Rice&lt;/span&gt;：在某些情况下，不可能，因为根据正在运行的程序的类型，可能只能观察信息，不一定能改变状态。例如，如果你连接到一个系统调用，可以看到该系统调用的参数，但不能更改它们。从这个意义上说，不同程序中哪个最先出现并不重要，他们不应该互相影响。如果你正在处理网络数据包，并且可能会将它们丢弃，这显然会产生影响，你肯定需要能够对它们进行优先级排序，我不太确定怎么决定顺序。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Ruckle&lt;/span&gt;：我们可以说eBPF是服务网格的进化吗？&lt;/p&gt;&lt;p&gt;&lt;span&gt;Rice&lt;/span&gt;：我不能说它本身就是服务网格的进化。我确实认为有一些有趣的东西，一些服务网格的功能可以在eBPF中实现，其中一个例子就是加密。你可以用服务网格在这两个服务之间设置mTLS，确保不同服务之间的流量是加密的。通过使用网络层加密可以获得相同的效果，Cilium支持这一功能，我相信其他的网络层也一样。如果你能感知服务，知道两端都可以加密和解密，就可以使用IPsec或WireGuard之类的东西在网络层加密，尽管并不完全相同，但都可以实现加密通信的目的。还有一些与服务网格相关的其他功能，也可以在eBPF中实现。我想说的是，将eBPF更多的看作是一个可以构建工具的环境，而不是工具本身。我不会说它是服务网格，但它使你能够构建服务网格功能。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Ruckle&lt;/span&gt;：我认为看看社区如何利用这一点，以及其他一些服务网格社区如何开始使用eBPF，如何聚合，随着时间的推移有一些真正有趣的eBPF应用，这将是一件很酷的事情。&lt;br/&gt;&lt;span&gt;Rice&lt;/span&gt;：完全正确。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Ruckle&lt;/span&gt;：除了网络、安全性和可观察性，我们还看到eBPF可以用在哪些场景？&lt;br/&gt;&lt;span&gt;Rice&lt;/span&gt;：还有什么？&lt;br/&gt;&lt;span&gt;Ruckle&lt;/span&gt;：研发，研发人员会在这方面乱作一团。&lt;br/&gt;&lt;span&gt;Rice&lt;/span&gt;：我不认为会看到用户空间应用程序进入内核领域。也许我错了，但我倾向于认为，我们更有可能看到在eBPF中实现内核中现有的功能。我在想，一定还有其他一些有趣的方面，并不是网络、安全性和可观察性的一部分。网络、安全性和可观察性涵盖了相当多的内容。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Ruckle&lt;/span&gt;：内核的范围很大，都可以考虑可编程性。其中有大量的技术，以及可能被技术改进或颠覆的东西。让我们继续关注，看看社区会出现什么。&lt;/p&gt;&lt;p&gt;您认为用C编写eBPF代码的抽象层对新程序员有帮助吗？这方面有什么想法或动力吗？&lt;/p&gt;&lt;p&gt;&lt;span&gt;Rice&lt;/span&gt;：现在，我们用一个受限的C版本编写eBPF程序。虽然是C代码，但有些事情是不被允许的。比如，在解引用指针之前，必须检查指针是否为空，因为不想让内核崩溃。现在，我们还是用C写这些代码。我在这里展示了一个Hello World，我认为它很有趣，可以解释正在发生的事情。我真的不认为会有一个应用程序开发人员突然编写大量eBPF代码的世界，就像我不认为会看到人们对内核做出贡献一样。大多数时候，我们依靠内核维护者来代表我们完成这些工作。我想对于eBPF来说也是一样的，我们可能会看到一些eBPF功能库，人们可以将其用作构建块。&lt;/p&gt;&lt;p&gt;我们已经有了一个抽象，即bpftrace，这是一种更高级别的工具，允许你表示希望在何处挂钩eBPF程序，还提供了一些基本功能，如事件计数。最近发生的另一件事是Rust编译器，它合并了一个PR来支持BPF作为编译目标，这样就可以在Rust中编写eBPF代码，将其编译并加载到内核中。这将是一个有趣的尝试。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Ruckle&lt;/span&gt;：有没有号召所有人采取行动？他们应该用eBPF做什么？跟他们信任的供应商谈一谈？对社区做出贡献？在你分享了这些信息后，你会建议人们做什么？&lt;/p&gt;&lt;p&gt;&lt;span&gt;Rice&lt;/span&gt;：我认为，从运维角度来看，eBPF是一种新的平台技术，一种新的做事方式，对大多数Kubernetes集群的运维人员来说可能非常有用。我100%鼓励有兴趣的人参与进来，尝试一下，看看eBPF初学者指南。对大多数人来说，我们不需要真正深入细节。也许一个新的可观察性工具是用Rust编写的，或者一个新的安全工具是用Rust编写的，我们可能会想，“这真是一种很酷的语言。我对这个工具感兴趣是因为它是用Rust编写的”，因为也许我们意识到Rust具有安全优势。我只是以Rust为例。我想我们可能会以同样的方式对待eBPF，eBPF作为一个平台有一些优势，当我们考虑在环境中需要什么工具时，不要因为它不是用eBPF编写的而忽略任何东西。就像你不会说我使用的每个工具都必须用Rust编写一样。你可能会说，我想研究一些基于eBPF的工具，因为它们提供了一些优势。我们可以一起来探索。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;References:&lt;/span&gt;&lt;br/&gt;[1] https://www.infoq.com/presentations/ebpf-cloud-native/&lt;br/&gt;[2] https://ebpf.io/&lt;br/&gt;[3] https://cilium.io/&lt;br/&gt;[4] https://www.isovalent.com/&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1004a6bac82113f6b35faf687f32c855</guid>
<title>MySQL 默认隔离级别是 RR，为什么阿里这种大厂会改成 RC？</title>
<link>https://toutiao.io/k/txy7uyv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;article-content&quot;&gt;
&lt;p&gt;我之前写过一篇文章《&lt;a href=&quot;https://www.hollischuang.com/archives/6427&quot;&gt;为什么MySQL选择REPEATABLE READ作为默认隔离级别？&lt;/a&gt;》介绍过MySQL 的默认隔离级别是 Repeatable Reads以及背后的原因。&lt;/p&gt;
&lt;p&gt;主要是因为MySQL在主从复制的过程是通过bin log 进行数据同步的，而MySQL早期只有statement这种bin log格式，这种格式下，bin log记录的是SQL语句的原文。&lt;/p&gt;
&lt;p&gt;当出现事务乱序的时候，就会导致备库在 SQL 回放之后，结果和主库内容不一致。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，MySQL采用了Repetable Read这种隔离级别，因为在 RR 中，会在更新数据的时候增加记录锁的同时增加间隙锁。可以避免这种情况的发生。&lt;/p&gt;
&lt;p&gt;关于MySQL的加锁方式及加锁原则，可以参考我写的另外一篇《&lt;a href=&quot;https://www.hollischuang.com/archives/6575&quot;&gt;求你了，别再说数据库锁的只是索引了！&lt;/a&gt;》，这里就不再赘述了。&lt;/p&gt;
&lt;p&gt;在我知道MySQL 默认隔离级别是RR后，很长一段时间都以为应该不会有人去修改这个默认配置。&lt;/p&gt;
&lt;p&gt;但是直到有一天，我们线上发生了一次死锁的问题，我在排查的过程中，才发现我们的数据库用的隔离级别没有使用默认的 RR，而是修改成了Read Committed 。（关于那次死锁排查过程，可以参考：&lt;a href=&quot;https://www.hollischuang.com/archives/3461&quot;&gt;一次数据库的死锁问题排查过程&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;大家可以通过这个命令查看数据库当前的隔离级别：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select @@tx_isolation;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么，这里不禁就有疑问了，&lt;strong&gt;为啥阿里要把这个数据库隔离级别修改成 RC 呢，背后有什么思考吗？&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;RR 和 RC 的区别&lt;/h3&gt;
&lt;p&gt;想要搞清楚这个问题，我们需要先弄清楚 RR 和 RC 的区别，分析下各自的优缺点。&lt;/p&gt;
&lt;h4&gt;一致性读&lt;/h4&gt;
&lt;p&gt;一致性读，又称为快照读。快照即当前行数据之前的历史版本。快照读就是使用快照信息显示基于某个时间点的查询结果，而不考虑与此同时运行的其他事务所执行的更改。&lt;/p&gt;
&lt;p&gt;在MySQL 中，只有READ COMMITTED 和 REPEATABLE READ这两种事务隔离级别才会使用一致性读。&lt;/p&gt;
&lt;p&gt;在 RC 中，每次读取都会重新生成一个快照，总是读取行的最新版本。&lt;/p&gt;
&lt;p&gt;在 RR 中，快照会在事务中第一次SELECT语句执行时生成，只有在本事务中对数据进行更改才会更新快照。&lt;/p&gt;
&lt;p&gt;在数据库的 &lt;strong&gt;RC 这种隔离级别中，还支持”半一致读”&lt;/strong&gt; ，一条update语句，如果 where 条件匹配到的记录已经加锁，那么InnoDB会返回记录最近提交的版本，由MySQL上层判断此是否需要真的加锁。&lt;/p&gt;
&lt;h4&gt;锁机制&lt;/h4&gt;
&lt;p&gt;数据库的锁，在不同的事务隔离级别下，是采用了不同的机制的。在 MySQL 中，有三种类型的锁，分别是Record Lock、Gap Lock和 Next-Key Lock。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Record Lock表示记录锁，锁的是索引记录。&lt;/p&gt;
&lt;p&gt;Gap Lock是间隙锁，锁的是索引记录之间的间隙。&lt;/p&gt;
&lt;p&gt;Next-Key Lock是Record Lock和Gap Lock的组合，同时锁索引记录和间隙。他的范围是左开右闭的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 RC 中，只会对索引增加Record Lock，不会添加Gap Lock和Next-Key Lock。&lt;/p&gt;
&lt;p&gt;在 RR 中，为了解决幻读的问题，在支持Record Lock的同时，还支持Gap Lock和Next-Key Lock；&lt;/p&gt;
&lt;h4&gt;主从同步&lt;/h4&gt;
&lt;p&gt;在数据主从同步时，不同格式的 binlog 也对事务隔离级别有要求。&lt;/p&gt;
&lt;p&gt;MySQL的binlog主要支持三种格式，分别是statement、row以及mixed，但是，RC 隔离级别只支持row格式的binlog。如果指定了mixed作为 binlog 格式，那么如果使用RC，服务器会自动使用基于row 格式的日志记录。&lt;/p&gt;
&lt;p&gt;而 RR 的隔离级别同时支持statement、row以及mixed三种。&lt;/p&gt;
&lt;h3&gt;为什么互联网公司选择使用 RC&lt;/h3&gt;
&lt;h4&gt;提升并发&lt;/h4&gt;
&lt;p&gt;互联网公司和传统企业最大的区别是什么？&lt;/p&gt;
&lt;p&gt;高并发！&lt;/p&gt;
&lt;p&gt;没错，互联网业务的并发度比传统企业要高处很多。2020年双十一当天，订单创建峰值达到 58.3 万笔/秒。&lt;/p&gt;
&lt;p&gt;很多人问，要怎么做才能扛得住这么大的并发量。其实，这背后的优化多到几个小时都讲不完，因为要做的、可以做的事情实在是太多了。&lt;/p&gt;
&lt;p&gt;而有一个和我们今天这篇文章有关的优化，那就是通过修改数据库的隔离级别来提升并发度。&lt;/p&gt;
&lt;p&gt;为什么 RC 比 RR 的并发度要好呢？&lt;/p&gt;
&lt;p&gt;首先，RC 在加锁的过程中，是不需要添加Gap Lock和 Next-Key Lock 的，只对要修改的记录添加行级锁就行了。&lt;/p&gt;
&lt;p&gt;这就使得并发度要比 RR 高很多。&lt;/p&gt;
&lt;p&gt;另外，因为 RC 还支持”半一致读”，可以大大的减少了更新语句时行锁的冲突；对于不满足更新条件的记录，可以提前释放锁，提升并发度。&lt;/p&gt;
&lt;h4&gt;减少死锁&lt;/h4&gt;
&lt;p&gt;因为RR这种事务隔离级别会增加Gap Lock和 Next-Key Lock，这就使得锁的粒度变大，那么就会使得死锁的概率增大。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;死锁：一个事务锁住了表A，然后又访问表B；另一个事务锁住了表B，然后企图访问表A；这时就会互相等待对方释放锁，就导致了死锁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;本文介绍了一些 MySQL数据库的 RR 和 RC 两种事务隔离级别。他们主要在加锁机制、主从同步以及一致性读方面存在一些差异。&lt;/p&gt;
&lt;p&gt;而很多大厂，为了提升并发度和降低死锁发生的概率，会把数据库的隔离级别从默认的 RR 调整成 RC。&lt;/p&gt;
&lt;p&gt;当然，这样做也不是完全没有问题，首先使用 RC 之后，就需要自己解决幻读的问题，这个其实还好，很多时候幻读问题其实是可以忽略的，或者可以用其他手段解决。&lt;/p&gt;
&lt;p&gt;还有就是使用 RC 的时候，不能使用statement格式的 binlog，这种影响其实可以忽略不计了，因为MySQL是在5.1.5版本开始支持row的、在5.1.8版本中开始支持mixed，后面这两种可以代替 statement格式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有的技术方案的选择，都是一种权衡的艺术！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考资料： &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read&quot;&gt;Transaction Isolation Levels&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/digdeep/p/4968453.html&quot;&gt;MySQL 中隔离级别 RC 与 RR 的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1651628&quot;&gt;什么是半一致性读？&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;b&gt;(全文完)&lt;/b&gt;&lt;/center&gt;&lt;hr/&gt;&lt;center&gt;&lt;b&gt;扫描二维码，关注作者微信公众号&lt;/b&gt;&lt;/center&gt;&lt;img src=&quot;http://www.hollischuang.com/wp-content/uploads/2019/04/二维码.png&quot;/&gt;
&lt;/article&gt;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>