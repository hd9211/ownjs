<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3dcd3cbcd08f8a20ae9e2eece5ba3ad3</guid>
<title>详解内存对齐</title>
<link>https://toutiao.io/k/1zldbav</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;欢迎大家点击上方文字「Golang梦工厂」关注公众号，设为星标，第一时间接收推送文章。&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;哈喽，大家好，我是&lt;code&gt;asong&lt;/code&gt;。好久不见，上周停更了一周，因为工作有点忙，好在这周末闲了下来，就赶紧来肝文喽。今天我们来聊一聊一道常见的面试八股文——内存对齐，我们平常在业务开发中根本不&lt;code&gt;care&lt;/code&gt;内存对齐，但是在面试中，这就是一个高频考点，今天我们就一起来看一看到底什么是内存对齐。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前情概要&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在了解内存对齐之前，先来明确几个关于操作系统的概念，更加方面我们对内存对齐的理解。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;内存管理：我们都知道内存是计算中重要的组成之一，内存是与&lt;code&gt;CPU&lt;/code&gt;进行沟通的桥梁，用于暂存&lt;code&gt;CPU&lt;/code&gt;中的运算数据、以及与硬盘等外部存储器交换的数据。早期，程序是直接运行在物理内存上的，直接操作物理内存，但是会存在一些问题，比如使用效率低、地址空间不隔离等问题，所以就出现了虚拟内存，虚拟内存就是在程序和物理内存之间引入了一个中间层，这个中间层就是虚拟内存，这样就达到了对进程地址和物理地址的隔离。在&lt;code&gt;linux&lt;/code&gt;系统中，将虚拟内存划分为&lt;code&gt;用户空间&lt;/code&gt;和&lt;code&gt;内核空间&lt;/code&gt;，用户进程只能访问用户空间的虚拟地址，只有通过系统调用、外设中断或异常才能访问内核空间，我们主要来看一下用户空间，用户空间被分为&lt;code&gt;5&lt;/code&gt;个不同内存区域：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.46234676007005254&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMoiaaYb1rbeEtysEZhxVIoskuWkaebZqribrRmftrqTzpWl0qXZIchj6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1142&quot;/&gt;&lt;/figure&gt;&lt;p&gt;内存的知识先介绍个大概，对于本文的理解应该够了，我们接着介绍操作系统几个其他概念。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;代码段：存放可执行文件的操作指令，只读&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据段：用来存放可执行文件中已初始化全局变量，存放静态变量和全局变量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BSS段：用来存未初始化的全局变量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;栈区：用来存临时创建的局部变量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;堆区：用来存动态分配的内存段&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt;：中央处理单元（Cntral Pocessing Unit）的缩写，也叫处理器；&lt;code&gt;CPU&lt;/code&gt;是计算机的运算核心和控制核心，我们人类靠着大脑思考，电脑就是靠着&lt;code&gt;CPU&lt;/code&gt;来运算、控制，起到协调和控制作用，从功能来看，CPU 的内部由寄存器、控制器、运算器和时钟四部分组成，各部分之间通过电信号连通。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt;和内存的工作关系：当我们执行一个程序时，首先由输入设备向&lt;code&gt;CPU&lt;/code&gt;发出操作指令，&lt;code&gt;CPU&lt;/code&gt;接收到操作指令后，硬盘中对应的程序就会被直接加载到内存中，此后，CPU 再对内存进行寻址操作，将加载到内存中的指令翻译出来，而后发送操作信号给操作控制器，实现程序的运行或数据的处理。存在于内存中的目的就是为了&lt;code&gt;CPU&lt;/code&gt;能够过总线进行寻址，取指令、译码、执行取数据，内存与寄存器交互，然后&lt;code&gt;CPU&lt;/code&gt;运算，再输出数据至内存。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3391384051329056&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjM8Vmq6HlGKz3VIFeYvuJZyRgplno6v2s7WsxKqzY0haxAtibFBzuKMYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2182&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;os&lt;/code&gt;：&lt;code&gt;os&lt;/code&gt;全称为&lt;code&gt;Operating System&lt;/code&gt;，也就是操作操作系统，是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务组织用户交互的相互关联的系统软件，同时也是计算机系统的内核与基石。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;编译器：编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。一个现代编译器的主要工作流程：源代码 (source code) → 预处理器(preprocessor) → 编译器 (compiler) → 目标代码 (object code) → 链接器 (Linker) → 可执行程序(executables)。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写在最后的一个知识点：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;计算机中，最小的存储单元为字节，理论上任意地址都可以通过总线进行访问，每次寻址能传输的数据大小就跟&lt;code&gt;CPU&lt;/code&gt;位数有关。常见的&lt;code&gt;CPU&lt;/code&gt;位数有8位，16位，32位，64位。位数越高，单次操作执行的数据量越大，性能也就越强。&lt;code&gt;os&lt;/code&gt;的位数一般与&lt;code&gt;CPU&lt;/code&gt;的位数相匹配，&lt;code&gt;32&lt;/code&gt;位&lt;code&gt;CPU&lt;/code&gt;可以寻址&lt;code&gt;4&lt;/code&gt;GB内存空间，也可以运行&lt;code&gt;32&lt;/code&gt;位的&lt;code&gt;os&lt;/code&gt;，同样道理，&lt;code&gt;64&lt;/code&gt;位的&lt;code&gt;CPU&lt;/code&gt;可以运行&lt;code&gt;32&lt;/code&gt;位的&lt;code&gt;os&lt;/code&gt;，也可以运行64位的&lt;code&gt;os&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;何为内存对齐&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下内容来源于网络总结：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;现代计算机中内存空间都是按照字节(byte)进行划分的，所以从理论上讲对于任何类型的变量访问都可以从任意地址开始，但是在实际情况中，在访问特定类型变量的时候经常在特定的内存地址访问，所以这就需要把各种类型数据按照一定的规则在空间上排列，而不是按照顺序一个接一个的排放，这种就称为内存对齐，内存对齐是指首地址对齐，而不是说每个变量大小对齐。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;为何要有内存对齐&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要原因可以归结为两点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;有些&lt;code&gt;CPU&lt;/code&gt;可以访问任意地址上的任意数据，而有些&lt;code&gt;CPU&lt;/code&gt;只能在特定地址访问数据，因此不同硬件平台具有差异性，这样的代码就不具有移植性，如果在编译时，将分配的内存进行对齐，这就具有平台可以移植性了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;CPU&lt;/code&gt;每次寻址都是要消费时间的，并且&lt;code&gt;CPU&lt;/code&gt; 访问内存时，并不是逐个字节访问，而是以字长（word size）为单位访问，所以数据结构应该尽可能地在自然边界上对齐，如果访问未对齐的内存，处理器需要做两次内存访问，而对齐的内存访问仅需要一次访问，内存对齐后可以提升性能。举个例子：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;假设当前&lt;code&gt;CPU&lt;/code&gt;是&lt;code&gt;32&lt;/code&gt;位的，并且没有内存对齐机制，数据可以任意存放，现在有一个&lt;code&gt;int32&lt;/code&gt;变量占&lt;code&gt;4byte&lt;/code&gt;，存放地址在&lt;code&gt;0x00000002 - 0x00000005&lt;/code&gt;(纯假设地址，莫当真)，这种情况下，每次取&lt;code&gt;4&lt;/code&gt;字节的&lt;code&gt;CPU&lt;/code&gt;第一次取到&lt;code&gt;[0x00000000 - 0x00000003]&lt;/code&gt;，只得到变量&lt;code&gt;1/2&lt;/code&gt;的数据，所以还需要取第二次，为了得到一个&lt;code&gt;int32&lt;/code&gt;类型的变量，需要访问两次内存并做拼接处理，影响性能。如果有内存对齐了，&lt;code&gt;int32&lt;/code&gt;类型数据就会按照对齐规则在内存中，上面这个例子就会存在地址&lt;code&gt;0x00000000&lt;/code&gt;处开始，那么处理器在取数据时一次性就能将数据读出来了，而且不需要做额外的操作，使用空间换时间，提高了效率。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有内存对齐机制：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3530571992110454&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMoBTElIUZQ88mXf13t0WNUhFDIaynjlQPJ6vuiaQRqvkEYpWI22YR7EA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2028&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内存对齐后：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5077821011673151&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMPbm8rWME4MIElD0s8LvaibpH3Aat2Ykf9RoS7ha4DzBFyVn2rwLLEcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1028&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;对齐系数&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个特定平台上的编译器都有自己的默认&quot;对齐系数&quot;，常用平台默认对齐系数如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这只是默认对齐系数，实际上对齐系数我们是可以修改的，之前写&lt;code&gt;C&lt;/code&gt;语言的朋友知道，可以通过预编译指令&lt;code&gt;#pragma pack(n)&lt;/code&gt;来修改对齐系数，因为&lt;code&gt;C&lt;/code&gt;语言是预处理器的，但是在&lt;code&gt;Go&lt;/code&gt;语言中没有预处理器，只能通过&lt;code&gt;tags&lt;/code&gt;和&lt;code&gt;命名约定&lt;/code&gt;来让&lt;code&gt;Go&lt;/code&gt;的包可以管理不同平台的代码，但是怎么修改对齐系数，感觉&lt;code&gt;Go&lt;/code&gt;并没有开放这个参数，找了好久没有找到，等后面再仔细看看，找到了再来更新！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然对齐系数无法更改，但是我们可以查看对齐系数，使用&lt;code&gt;Go&lt;/code&gt;语言中的&lt;code&gt;unsafe.Alignof&lt;/code&gt;可以返回相应类型的对齐系数，使用我的mac（64位）测试后发现，对齐系数都符合&lt;code&gt;2^n&lt;/code&gt;这个规律，最大也不会超过&lt;code&gt;8&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;  {&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;string alignof is %d\n&quot;&lt;/span&gt;, unsafe.Alignof(&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;&quot;a&quot;&lt;/span&gt;)))&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;complex128 alignof is %d\n&quot;&lt;/span&gt;, unsafe.Alignof(&lt;span&gt;complex128&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;)))&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;int alignof is %d\n&quot;&lt;/span&gt;, unsafe.Alignof(&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;)))&lt;br/&gt;}&lt;br/&gt;运行结果&lt;br/&gt;&lt;span&gt;string&lt;/span&gt; alignof is &lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span&gt;complex128&lt;/span&gt; alignof is &lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; alignof is &lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：不同硬件平台占用的大小和对齐值都可能是不一样的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结构体的内存对齐规则&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一提到内存对齐，大家都喜欢拿结构体的内存对齐来举例子，这里要提醒大家一下，不要混淆了一个概念，其他类型也都是要内存对齐的，只不过拿结构体来举例子能更好的理解内存对齐，并且结构体中的成员变量对齐有自己的规则，我们需要搞清这个对齐规则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;C语言&lt;/code&gt;的对齐规则与&lt;code&gt;Go&lt;/code&gt;语言一样，所以&lt;code&gt;C语言&lt;/code&gt;的对齐规则对&lt;code&gt;Go&lt;/code&gt;同样适用：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对于结构体的各个成员，第一个成员位于偏移为&lt;code&gt;0&lt;/code&gt;的位置，结构体第一个成员的偏移量(offset)为&lt;code&gt;0&lt;/code&gt;，以后每个成员相对于结构体首地址的&lt;code&gt;offset&lt;/code&gt;都是该成员大小与有效对齐值中较小那个的整数倍，如有需要编译器会在成员之间加上填充字节。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;除了结构成员需要对齐，结构本身也需要对齐，结构的长度必须是编译器默认的对齐长度和成员中最长类型中最小的数据大小的倍数对齐。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;举个例子&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上面的对齐规则，我们来分析一个例子，加深理解：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 64位平台，对齐参数是8&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; User &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; A &lt;span&gt;int32&lt;/span&gt; &lt;span&gt;// 4&lt;/span&gt;&lt;br/&gt; B []&lt;span&gt;int32&lt;/span&gt; &lt;span&gt;// 24&lt;/span&gt;&lt;br/&gt; C &lt;span&gt;string&lt;/span&gt; &lt;span&gt;// 16&lt;/span&gt;&lt;br/&gt; D &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;// 1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;  {&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; u User&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;u1 size is &quot;&lt;/span&gt;,unsafe.Sizeof(u))&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 运行结果&lt;/span&gt;&lt;br/&gt;u size is  &lt;span&gt;56&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我的&lt;code&gt;mac&lt;/code&gt;是&lt;code&gt;64&lt;/code&gt;位的，对齐参数是&lt;code&gt;8&lt;/code&gt;，&lt;code&gt;int32&lt;/code&gt;、&lt;code&gt;[]int32&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt;、&lt;code&gt;bool&lt;/code&gt;对齐值分别是&lt;code&gt;4&lt;/code&gt;、&lt;code&gt;8&lt;/code&gt;、&lt;code&gt;8&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;，占用内存大小分别是&lt;code&gt;4&lt;/code&gt;、&lt;code&gt;24&lt;/code&gt;、&lt;code&gt;16&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;，我们先根据第一条对齐规则分析&lt;code&gt;User&lt;/code&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一个字段类型是&lt;code&gt;int32&lt;/code&gt;，对齐值是4，大小为4，所以放在内存布局中的第一位.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二个字段类型是&lt;code&gt;[]int32&lt;/code&gt;，对齐值是8，大小为&lt;code&gt;24&lt;/code&gt;，按照第一条规则，偏移量应该是成员大小&lt;code&gt;24&lt;/code&gt;与对齐值&lt;code&gt;8&lt;/code&gt;中较小那个的整数倍，那么偏移量就是&lt;code&gt;8&lt;/code&gt;，所以&lt;code&gt;4-7&lt;/code&gt;位会由编译进行填充，一般为&lt;code&gt;0&lt;/code&gt;值，也称为空洞，第&lt;code&gt;9&lt;/code&gt;到&lt;code&gt;32&lt;/code&gt;位为第二个字段&lt;code&gt;B&lt;/code&gt;.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三个字段类型是&lt;code&gt;string&lt;/code&gt;，对齐值是&lt;code&gt;8&lt;/code&gt;，大小为&lt;code&gt;16&lt;/code&gt;，所以他的内存偏移值必须是8的倍数，因为&lt;code&gt;user&lt;/code&gt;前两个字段就已经排到了第&lt;code&gt;32&lt;/code&gt;位，所以&lt;code&gt;offset&lt;/code&gt;为&lt;code&gt;32&lt;/code&gt;正好是&lt;code&gt;8&lt;/code&gt;的倍数，不要填充，从&lt;code&gt;32&lt;/code&gt;位到&lt;code&gt;48&lt;/code&gt;位是第三个字段&lt;code&gt;C&lt;/code&gt;.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第四个字段类型是&lt;code&gt;bool&lt;/code&gt;，对齐值是&lt;code&gt;1&lt;/code&gt;，大小为&lt;code&gt;1&lt;/code&gt;，所以他的内存偏移值必须是&lt;code&gt;1&lt;/code&gt;的倍数，因为&lt;code&gt;user&lt;/code&gt;前两个字段就已经排到了第&lt;code&gt;48&lt;/code&gt;位，所以下一位的偏移量正好是&lt;code&gt;48&lt;/code&gt;，正好是字段&lt;code&gt;D&lt;/code&gt;的对齐值的倍数，不用填充，可以直接排列到第四个字段，也就是从&lt;code&gt;48&lt;/code&gt;到第&lt;code&gt;49&lt;/code&gt;位是第三个字段&lt;code&gt;D&lt;/code&gt;.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据第一条规则分析后，现在结构所占大小为&lt;code&gt;49&lt;/code&gt;字节，我们再来根据第二条规则分析：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;根据第二条规则，默认对齐值是&lt;code&gt;8&lt;/code&gt;，字段中最大类型程度是&lt;code&gt;24&lt;/code&gt;，所以求出结构体的对齐值是&lt;code&gt;8&lt;/code&gt;，我们目前的内存长度是&lt;code&gt;49&lt;/code&gt;，不是&lt;code&gt;8&lt;/code&gt;的倍数，所以需要补齐，所以最终的结果就是&lt;code&gt;56&lt;/code&gt;，补了&lt;code&gt;7&lt;/code&gt;位。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2578890097932535&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMg0rYBwBDVQgicPibhiaCGCgqGBYc4KVRkV4O4riceF6O0OPl2zSYm9dnYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1838&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;成员变量顺序对内存对齐带来的影响&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上面的规则我们可以看出，成员变量的顺序也会影响内存对齐的结果，我们先来看一个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; test1 &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; a &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;// 1&lt;/span&gt;&lt;br/&gt; b &lt;span&gt;int32&lt;/span&gt; &lt;span&gt;// 4&lt;/span&gt;&lt;br/&gt; c &lt;span&gt;string&lt;/span&gt; &lt;span&gt;// 16&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; test2 &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; a &lt;span&gt;int32&lt;/span&gt; &lt;span&gt;// 4&lt;/span&gt;&lt;br/&gt; b &lt;span&gt;string&lt;/span&gt; &lt;span&gt;// 16&lt;/span&gt;&lt;br/&gt; c &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;// 1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;  {&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; t1 test1&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; t2 test2&lt;br/&gt;&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;t1 size is &quot;&lt;/span&gt;,unsafe.Sizeof(t1))&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;t2 size is &quot;&lt;/span&gt;,unsafe.Sizeof(t2))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;t1 size is  &lt;span&gt;24&lt;/span&gt;&lt;br/&gt;t2 size is  &lt;span&gt;32&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;test1&lt;/code&gt;的内存布局：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.44967880085653106&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMpQJYpb7jA3dozbqjibKibevxb8ycvibO6OjJv1ibDWvTk4aDOClQWQMZUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;934&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;test2&lt;/code&gt;的内存布局：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.335559265442404&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMETZF8SZLlday73gL8XtRz6nwmPuRCjZHJUA9qZdZUErAfx3ygu7E7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1198&quot;/&gt;)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过以上分析，我们可以看出，结构体中成员变量的顺序会影响结构体的内存布局，所以在日常开发中大家要注意这个问题，可以节省内存空间。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;空结构体字段对齐&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Go&lt;/code&gt;语言中空结构体的大小为&lt;code&gt;0&lt;/code&gt;，如果一个结构体中包含空结构体类型的字段时，通常是不需要进行内存对齐的，举个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; demo1 &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; a &lt;span&gt;struct&lt;/span&gt;{}&lt;br/&gt; b &lt;span&gt;int32&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;  {&lt;br/&gt; fmt.Println(unsafe.Sizeof(demo1{}))&lt;br/&gt;}&lt;br/&gt;运行结果：&lt;br/&gt;&lt;span&gt;4&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从运行结果可知结构体&lt;code&gt;demo1&lt;/code&gt;占用的内存与字段&lt;code&gt;b&lt;/code&gt;占用内存大小相同，所以字段&lt;code&gt;a&lt;/code&gt;是没有占用内存的，但是空结构体有一个特例，那就是当 &lt;code&gt;struct{}&lt;/code&gt; 作为结构体最后一个字段时，需要内存对齐。因为如果有指针指向该字段, 返回的地址将在结构体之外，如果此指针一直存活不释放对应的内存，就会有内存泄露的问题（该内存不因结构体释放而释放），所以当&lt;code&gt;struct{}&lt;/code&gt;作为结构体成员中最后一个字段时，要填充额外的内存保证安全。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; demo2 &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; a &lt;span&gt;int32&lt;/span&gt;&lt;br/&gt; b &lt;span&gt;struct&lt;/span&gt;{}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;  {&lt;br/&gt; fmt.Println(unsafe.Sizeof(demo2{}))&lt;br/&gt;}&lt;br/&gt;运行结果：&lt;br/&gt;&lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;考虑内存对齐的设计&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在之前的文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkyNzI1NzM5NQ==&amp;amp;mid=2247484784&amp;amp;idx=1&amp;amp;sn=368be2e2003b85f0e26337b566d0ebde&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;源码剖析sync.WaitGroup&lt;/strong&gt;&lt;/a&gt;分析&lt;code&gt;sync.waitgroup&lt;/code&gt;的源码时，使用&lt;code&gt;state1&lt;/code&gt;来存储状态：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// A WaitGroup must not be copied after first use.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; WaitGroup &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; noCopy noCopy&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 64-bit value: high 32 bits are counter, low 32 bits are waiter count.&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// 64-bit atomic operations require 64-bit alignment, but 32-bit&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// compilers do not ensure it. So we allocate 12 bytes and then use&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// the aligned 8 bytes in them as state, and the other 4 as storage&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// for the sema.&lt;/span&gt;&lt;br/&gt; state1 [&lt;span&gt;3&lt;/span&gt;]&lt;span&gt;uint32&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;state1&lt;/code&gt;这里总共被分配了&lt;code&gt;12&lt;/code&gt;个字节，这里被设计了三种状态：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;其中对齐的&lt;code&gt;8&lt;/code&gt;个字节作为状态，高&lt;code&gt;32&lt;/code&gt;位为计数的数量，低&lt;code&gt;32&lt;/code&gt;位为等待的&lt;code&gt;goroutine&lt;/code&gt;数量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其中的&lt;code&gt;4&lt;/code&gt;个字节作为信号量存储&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供了&lt;code&gt;(wg *WaitGroup) state() (statep *uint64, semap *uint32)&lt;/code&gt;帮助我们从&lt;code&gt;state1&lt;/code&gt;字段中取出他的状态和信号量，为什么要这样设计呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为&lt;code&gt;64&lt;/code&gt;位原子操作需要&lt;code&gt;64&lt;/code&gt;位对齐，但是&lt;code&gt;32&lt;/code&gt;位编译器不能保证这一点，所以为了保证&lt;code&gt;waitGroup&lt;/code&gt;在&lt;code&gt;32&lt;/code&gt;位平台上使用的话，就必须保证在任何时候，&lt;code&gt;64位&lt;/code&gt;操作不会报错。所以也就不能分成两个字段来写，考虑到字段顺序不同、平台不同，内存对齐也就不同。因此这里采用动态识别当前我们操作的&lt;code&gt;64&lt;/code&gt;位数到底是不是在&lt;code&gt;8&lt;/code&gt;字节对齐的位置上面，我们来分析一下&lt;code&gt;state&lt;/code&gt;方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// state returns pointers to the state and sema fields stored within wg.state1.&lt;br/&gt;func (wg *WaitGroup) state() (statep *uint64, semap *uint32) {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; uintptr(unsafe.Pointer(&amp;amp;wg.state1))%8 == 0 {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (*uint64)(unsafe.Pointer(&amp;amp;wg.state1)), &amp;amp;wg.state1[2]&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (*uint64)(unsafe.Pointer(&amp;amp;wg.state1[1])), &amp;amp;wg.state1[0]&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当数组的首地址是处于一个&lt;code&gt;8&lt;/code&gt;字节对齐的位置上时，那么就将这个数组的前&lt;code&gt;8&lt;/code&gt;个字节作为&lt;code&gt;64&lt;/code&gt;位值使用表示状态，后&lt;code&gt;4&lt;/code&gt;个字节作为&lt;code&gt;32&lt;/code&gt;位值表示信号量(&lt;code&gt;semaphore&lt;/code&gt;)。同理如果首地址没有处于&lt;code&gt;8&lt;/code&gt;字节对齐的位置上时，那么就将前&lt;code&gt;4&lt;/code&gt;个字节作为&lt;code&gt;semaphore&lt;/code&gt;，后&lt;code&gt;8&lt;/code&gt;个字节作为&lt;code&gt;64&lt;/code&gt;位数值。画个图表示一下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5285935085007728&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjM3DoUBJgfiaYyv0tiaHXhzzjqgbBsaibIEPgtsN999mvicyXUuob9fIAH3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1294&quot;/&gt;)&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;终于接近尾声了，内存对齐一直面试中的高频考点，通过内存对齐可以了解面试者对操作系统知识的了解程度，所以这块知识还是比较重要的，希望这篇文章能帮助大家答疑解惑，更好的忽悠面试官～。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中代码已上传github：https://github.com/asong2020/Golang_Dream/tree/master/code_demo/memory 欢迎star;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中有任何问题欢迎留言区探讨～；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;素质三连（分享、点赞、在看）都是笔者持续创作更多优质内容的动力！我是&lt;code&gt;asong&lt;/code&gt;，我们下期见。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;创建了一个Golang学习交流群，欢迎各位大佬们踊跃入群，我们一起学习交流。入群方式：关注公众号获取。更多学习资料请到公众号领取。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.31875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB8rxL8DUy5BbjNyggRGwIWE7Y2icLH12dMCLvlJ3AG8PR7qVOBWj2mVrxbJdYibAILPRGVo32XlnXJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkyNzI1NzM5NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB96zTfSmymj9jWokyhvSIXMRcLRAfFJsrB4uz6HBsml4T6iaia3yyCSB4aicX97icT7xBUCgw4O1PsKFQ/0?wx_fmt=png&quot; data-nickname=&quot;Golang梦工厂&quot; data-alias=&quot;AsongDream&quot; data-signature=&quot;asong是一名后端程序员，目前就职于一家电商外企，专注于Golang技术，定期分享Go语言、MySQL、Redis、Elasticsearch、计算机基础、微服务架构设计、面试等知识。这里不仅有技术，还有故事！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐往期文章：&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c7910739adc6e30e9f4cbc0a2d594adb</guid>
<title>2.3 万 Star 的国产装机神器，制作可启动 U 盘</title>
<link>https://toutiao.io/k/oloat5s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-hnrfcf&quot; options=&quot;[object Object]&quot;&gt;&lt;h2&gt;&lt;b&gt;简介&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;通过可启动的 U 盘装机，是一部分人喜欢纯净部署新系统熟悉的方法。&lt;/p&gt;&lt;p&gt;此类工具主要包括借助 WinPE、老毛桃、UltraISO 等软件，或者专门的 U 盘量产工具。&lt;/p&gt;&lt;p&gt;今天给大家介绍一款同类新工具 Ventoy，是国内开发者 longpanda 的作品，已经在 Github 上开源，目前已有 2.3 万 Star。最新版本更新于 8 月 14 日。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ce283c9261dd576bddac7bf46d6ef0c3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;844&quot; data-rawheight=&quot;330&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-ce283c9261dd576bddac7bf46d6ef0c3_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;844&quot; data-rawheight=&quot;330&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-ce283c9261dd576bddac7bf46d6ef0c3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-ce283c9261dd576bddac7bf46d6ef0c3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;有了 Ventoy，你就无需反复地格式化 U 盘，你只需要把 ISO/WIM/IMG/VHD(x)/EFI 等类型的文件拷贝到 U 盘里面就可以启动了，无需其他操作。&lt;/p&gt;&lt;p&gt;你可以一次性拷贝很多个不同类型的镜像文件，Ventoy 会在启动时显示一个菜单来供你进行选择，参见如下截图。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d8f3ef2b4ef4b831a15534509b0bc6f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;480&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-d8f3ef2b4ef4b831a15534509b0bc6f4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;480&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-d8f3ef2b4ef4b831a15534509b0bc6f4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d8f3ef2b4ef4b831a15534509b0bc6f4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6bc81f37869c521ae2a3d0ff94ebc2d2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;639&quot; data-rawheight=&quot;481&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-6bc81f37869c521ae2a3d0ff94ebc2d2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;639&quot; data-rawheight=&quot;481&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-6bc81f37869c521ae2a3d0ff94ebc2d2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6bc81f37869c521ae2a3d0ff94ebc2d2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;主要特性：&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;完全开源&lt;/li&gt;&lt;li&gt;使用简单&lt;/li&gt;&lt;li&gt;快速（拷贝文件有多快就有多快）&lt;/li&gt;&lt;li&gt;超过 720+ 个镜像文件；&lt;/li&gt;&lt;li&gt;支持大部分常见类型的操作系统：Windows/WinPE/Linux/Unix/VMware/Xen；&lt;/li&gt;&lt;li&gt;同一个 U 盘可以同时支持 x86 Legacy BIOS、IA32 UEFI、x86_64 UEFI、ARM64 UEFI 和 MIPS64EL UEFI 模式&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;此外，Ventoy 还不影响 U 盘日常普通使用。经常装机或者爱折腾的朋友，不妨试试看。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>116328d28ccfd86213ee7052db22b6d3</guid>
<title>伴随我经历过三家公司优化过各种线程执行效率代码示例</title>
<link>https://toutiao.io/k/suqkxqh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;header class=&quot;post-header&quot;&gt;
        &lt;h1 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;
          伴随我经历过三家公司优化过各种线程执行效率代码示例
        &lt;/h1&gt;

        &lt;p class=&quot;post-meta&quot;&gt;
            &lt;span class=&quot;post-meta-item&quot;&gt;
              &lt;span class=&quot;post-meta-item-icon&quot;&gt;
                &lt;i class=&quot;far fa-calendar&quot;/&gt;
              &lt;/span&gt;
              &lt;span class=&quot;post-meta-item-text&quot;&gt;发表于&lt;/span&gt;

              &lt;time title=&quot;创建时间：2021-08-14 00:00:00&quot; itemprop=&quot;dateCreated datePublished&quot; datetime=&quot;2021-08-14T00:00:00+00:00&quot;&gt;2021-08-14&lt;/time&gt;
            &lt;/span&gt;

          
            &lt;span class=&quot;post-meta-item&quot; title=&quot;本文字数&quot;&gt;
              &lt;span class=&quot;post-meta-item-icon&quot;&gt;
                &lt;i class=&quot;far fa-file-word&quot;/&gt;
              &lt;/span&gt;
                &lt;span class=&quot;post-meta-item-text&quot;&gt;本文字数：&lt;/span&gt;
              &lt;span&gt;6.3k&lt;/span&gt;
            &lt;/span&gt;
            &lt;span class=&quot;post-meta-item&quot; title=&quot;热度&quot; id=&quot;busuanzi_container_page_pv&quot;&gt;
              &lt;span class=&quot;post-meta-item-icon&quot;&gt;
                &lt;i class=&quot;fa fa-eye&quot;/&gt;
              &lt;/span&gt;
              &lt;span class=&quot;post-meta-item-text&quot;&gt;热度&lt;/span&gt;
              &lt;span id=&quot;busuanzi_value_page_pv&quot;/&gt;℃
            &lt;/span&gt;

        &lt;/p&gt;
      &lt;/header&gt;

    
    
    
    &lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;/&gt;前言&lt;/h3&gt;&lt;p&gt;之前呆过一家公司做的生鲜配送，有个业务要针对每个用户的购买信息给他打上标签便于更好的营销&lt;/p&gt;
&lt;p&gt;有一堆用户集合，然后去查询每个用户的最近购买、购买频次、下单金额等，再去计算他的标签&lt;/p&gt;
&lt;p&gt;这是一个复杂的业务，只能对用户一个一个的去生成&lt;/p&gt;
&lt;p&gt;我们当然能想到开定时任务去处理，每天或周一凌晨去执行&lt;/p&gt;
&lt;p&gt;但是在海量用户下，每次生成一个用户标签肯定是很慢的&lt;/p&gt;
&lt;p&gt;由此我们可以想到开多个线程，每次处理多条数据&lt;a id=&quot;more&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比如每次开10个线程，每个同时处理10条数据，这样的话一次就能处理100条数据，大大提高生产力&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;/&gt;思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对要处理的数据集合进行分页获取数据&lt;/li&gt;
&lt;li&gt;根据自己设置的值创建线程集合，将分页后的数据传到对应线程去执行&lt;/li&gt;
&lt;li&gt;执行线程集合收集结果&lt;/li&gt;
&lt;li&gt;校验结果为有效值，继续执行；无效值为（分页后的数据为空或size&amp;lt;pagesize）认为执行完成&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;/&gt;代码&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;批量线程处理器核心代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.mwk.thread.task;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cn.hutool.core.date.DateUtil;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cn.hutool.core.date.TimeInterval;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.mwk.utils.Pager;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.*;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 批量线程处理器&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; MinWeikai&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2021/7/22 11:03&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThreadPoolTaskExecutorBatch&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Logger log = LoggerFactory.getLogger(ThreadPoolTaskExecutorBatch&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 每轮线程数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; poolSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 每页数量，每轮处理数据量&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pageSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxPoolSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxPageSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Class abstractBatchCallable;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 自动分配线程数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; autoPoolSize = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 需要批量处理的数据集&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List list;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolTaskExecutorBatch();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setAbstractBatchCallable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class abstractBatchCallable)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.abstractBatchCallable = abstractBatchCallable;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;  AbstractBatchCallable &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class batchCallable)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (AbstractBatchCallable) batchCallable.newInstance();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List list)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list = list;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setPoolSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; poolSize)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.poolSize = poolSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setPageSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pageSize)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pageSize = pageSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setAutoPoolSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; autoPoolSize)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.autoPoolSize = autoPoolSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setMaxPoolSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxPoolSize)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize = maxPoolSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setMaxPageSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxPageSize)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPageSize = maxPageSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        TimeInterval timer = DateUtil.timer();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        log.info(&lt;span class=&quot;string&quot;&gt;&quot;----开始生成数据----&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.autoPoolSizeByList()){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        log.debug(&lt;span class=&quot;string&quot;&gt;&quot;批任务处理信息：autoPoolSize={} poolSize={} pageSize={} maxPoolSize={} maxPageSize={}&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.autoPoolSize, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.poolSize, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pageSize, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPageSize);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//是否继续&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; proceed = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//线程创建轮数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rounds = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//起始页数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; page = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Callable&amp;lt;Integer&amp;gt;&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    Pager pager;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (proceed) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            rounds++;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.poolSize; k++) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                page++;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            pager = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Pager&amp;lt;&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list, page, pageSize);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pager.getContent().size() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            list.add(getInstance(abstractBatchCallable).setPager(pager));&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                ExecutorService executor = Executors.newFixedThreadPool(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.poolSize);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                List&amp;lt;Future&amp;lt;Integer&amp;gt;&amp;gt; results = executor.invokeAll(list);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                executor.shutdown();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Future&amp;lt;Integer&amp;gt; result : results) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    temp += result.get();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                log.error(&lt;span class=&quot;string&quot;&gt;&quot;生成数据出错&quot;&lt;/span&gt; + e.getMessage(), e);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            log.info(&lt;span class=&quot;string&quot;&gt;&quot;----线程创建轮【&quot;&lt;/span&gt; + rounds + &lt;span class=&quot;string&quot;&gt;&quot;】，页数：&quot;&lt;/span&gt; + page + &lt;span class=&quot;string&quot;&gt;&quot;，当前轮结束状态&quot;&lt;/span&gt; + temp);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (temp &amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.poolSize) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                proceed = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            list.clear();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        log.info(&lt;span class=&quot;string&quot;&gt;&quot;----总轮数：&quot;&lt;/span&gt; + rounds + &lt;span class=&quot;string&quot;&gt;&quot;，总页数：&quot;&lt;/span&gt; + page + &lt;span class=&quot;string&quot;&gt;&quot;，耗时：&quot;&lt;/span&gt; + timer.intervalMs());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 自动计算批任务执行线程数、每线程执行任务数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;autoPoolSizeByList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.autoPoolSize){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; allSize = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list.size();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(allSize == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 任务总数小于等于最大线程数，则创建任务数线程，每线程执行1任务&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(allSize &amp;lt;= &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setPoolSize(allSize);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setPageSize(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 任务总数小于等于最大线程数*最大线程执行任务数，则线程数最大值，每线程执行任务总数除以线程数最大值进位值&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rem = allSize % &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = allSize / &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(allSize &amp;lt;= &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize * &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPageSize){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setPoolSize(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setPageSize(rem == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? value : (value + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程批量处理执行抽象类，需要批量处理数据的任务都可以继承此抽象类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.mwk.thread.task;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.mwk.utils.Pager;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.util.CollectionUtils;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.Callable;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 线程批量处理执行抽象类，需要批量处理数据的任务都可以继承此抽象类&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; MinWeikai&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2021/8/7 10:44&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractBatchCallable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Callable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Integer&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 需要批量处理的数据集&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; List list;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Pager pager;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (CollectionUtils.isEmpty(list)) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.exec();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list.size() &amp;lt; pager.getPageSize() ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 自定义的执行方法&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; AbstractBatchCallable &lt;span class=&quot;title&quot;&gt;setPager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Pager pager)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pager = pager;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list = pager.getContent();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试任务类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.mwk.thread.task;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 测试任务类&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; MinWeikai&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2021/8/7 10:48&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MytBatchCallableTest&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractBatchCallable&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Logger log = LoggerFactory.getLogger(MytBatchCallableTest&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; list = (List&amp;lt;Integer&amp;gt;) &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;log.debug(&lt;span class=&quot;string&quot;&gt;&quot;集合值:{}&quot;&lt;/span&gt;, list);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试处理集合调用方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.mwk.thread.task;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.stream.Collectors;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.stream.IntStream;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 测试处理集合调用方法&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; MinWeikai&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2021/8/13 22:04&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThreadPoolTaskExecutorBatchTest&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; list = IntStream.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1995&lt;/span&gt;).boxed().collect(Collectors.toList());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;待执行集合：&quot;&lt;/span&gt; + list);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;ThreadPoolTaskExecutorBatch&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;.build()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;.setAbstractBatchCallable(MytBatchCallableTest&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;title&quot;&gt;setList&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;list&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;//.&lt;span class=&quot;title&quot;&gt;setAutoPoolSize&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;//.&lt;span class=&quot;title&quot;&gt;setPoolSize&lt;/span&gt;(10)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;//.&lt;span class=&quot;title&quot;&gt;setPageSize&lt;/span&gt;(50)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;/&gt;代码&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://gitee.com/mwk719/spring-learn/tree/master/src/main/java/com/mwk/thread/task&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客代码路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/mwk719/spring-learn/blob/master/src/main/java/com/mwk/utils/Pager.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用到的分页工具&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;

    
    
    

 

      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>934aca3cb945d803f60c1a76ad52859b</guid>
<title>京东 App 后台多端融合架构代码重构实战</title>
<link>https://toutiao.io/k/o00zl8u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97617&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;重构是一个非常常见且古老的课题，涉及重构的文章、书更是不可胜数。&lt;/p&gt;&lt;p&gt;但其实做程序做久了就会知道，想把一个复杂的系统做好，尤其是参与人数较多的中大型项目，靠看几本设计模式的书，去试图寻找设计模式的奥秘，其实是不够的。很多时候，看书时觉得很有道理，例子也能理解，但到实际开发时，却无从下手，不知道怎么灵活套用。&lt;/p&gt;&lt;p&gt;很多项目，在持续的版本迭代中，还伴随着人员的更替过程，往往为了解决眼前的需求，最常见的就是直接复制类似的逻辑，或者就是在末尾追加逻辑。同时，受限于对老版本的需求理解，很容易出现新需求覆盖老需求的参数值，无意识的更改老版本结果等。那么倘若系统的隔离性做的不好，则极易产生A功能的改动，影响BCD等一大堆功能的正确性。&lt;/p&gt;&lt;p&gt;以京东App的后台为例，就是一个典型的复杂系统，涉及开发人员众多，模块巨多，迭代时间很长（已近10年），很多业务逻辑已无从考证，开发人员也已经换了好几轮，那么对于这样的系统，如何让开发人员做的需求、功能隔离开，互不影响，各小模块又能各自健壮、系统又具备相当的扩展性、配置化率又高（仅通过配置即可完成功能的变更），就成了一个不得不深入考虑的问题。&lt;/p&gt;&lt;p&gt;本篇主要是我在实际工作中，对一个复杂系统做了一些改造，并从中总结的一些经验，做的分享。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97617&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;案例&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;近期京东App后台核心模块发生了较大的逻辑改动，主要原因是新增了一些接入来源，从之前的独苗京东App，到后来的京东PC站、京东极速版、老年版、小程序等等，都接入了原App后台。通过完成统一接入，避免了多个后台共存，重复开发的问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4223918575063613&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9JJpmqTElNwFL0NWvhd2IY3iaVUqma0XufNTAiaoGw26X3FqMY2Pd0uqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1572&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而这些不同的来源，逻辑就有较多不同。&lt;/p&gt;&lt;p&gt;有的来源需要执行逻辑ABC，有的来源需要执行BCD，有的只需要执行BC，并且不同的来源返回值也有所不同，这就对之前的单一来源的系统架构产生了较大的冲击，如果处理不当，则不可避免地出现大量的if-else逻辑，以及扩展上的混乱。&lt;/p&gt;&lt;p&gt;那么针对这种情况，以及对提高系统整体配置化率的诉求，我们对后台架构做了一次重构。本文就是对重构内容做的一个浓缩后的抽象讲解，线上实战性质，非单纯设计模式类的demo。&lt;/p&gt;&lt;p&gt;如下图，我尽可能简化了细节，和小模块内的逻辑，仅保留了最外层的大模块。&lt;/p&gt;&lt;p&gt;我们来看背景，之前只有主App客户端来源的请求，譬如refer=1，该请求到达后，需要触发&quot;运费&quot;、&quot;优惠券&quot;等数十个上游rpc调用，之后聚合各上游系统结果，返回给客户端对应结果。&lt;/p&gt;&lt;p&gt;现在新增的接入方，譬如&quot;老年版&quot;，refer=5，就删减了组件层一些复杂的促销逻辑、凑单、白条之类，结果层也有相应删改。我们该如何支撑这种可能随时增删改模块和来源的业务架构呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1303538175046555&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda966ktIEFFLTcssS2vg6LkADnwcqy8vNbC31cI5mS09icia8RxjJXHicOSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1074&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97617&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;原始问题点——复杂的排列组合&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当多个层级均出现了多个变量时，这个系统的逻辑就变成了一个复杂的排列组合问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1229050279329609&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9zZXEtKKFqxI5OEPAblR16oaiakPUJFkRxhIDCOsdVbLq4pOSZWMon9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1074&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们假如用户的入参是User对象，里面有一个字段refer表明了来源。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.684931506849315&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9TdDPD74FiaessGtpGVZ2jBRo8OmSWKjkg1ia6oo4B4koiaLxxI3fZqISw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;730&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在重构前，代码进入主流程后，如下图，就是简单地根据refer来决定是否走哪些模块、返回哪些参数。&lt;/p&gt;&lt;p&gt;图中仅作为示例，实际情况，每个 fetch模块都有数千数万行代码，逻辑之复杂，各种if、else运用之嵌套，各种与或非使用之犀利，实属鲁班再世，也要夸赞几句鬼斧神工的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.752411575562701&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9iafX2NryDXfBymLg3ZMYiaykgbJj6ibJYsuy8Um9KWOIBS7N08Am5ictbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;622&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;大家都能看出来的问题，就是业务模块与入参变量的强耦合，如果入参refer=1，则执行业务模块A、B、C，不执行E、F、G，且返回值包含X、Y、Z，不包含U、V、W。&lt;/p&gt;&lt;p&gt;这样的设计不可避免带来了极大的维护的麻烦与混乱，到处都在判断是否是它，是他还是她？&lt;/p&gt;&lt;p&gt;那么该如何隔离层级，解耦模块与来源、来源与返回值之间的关联呢。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97617&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;简化判断让职责单一&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面提到了最大的问题，我们用通俗的话来讲就是：如果是A，我就做A1、A2、A3；如果是B，我就做A2，A3，A4。&lt;/p&gt;&lt;p&gt;那么问题就是这个主逻辑器做了太多的事情，日后被修改的概率极大，每个逻辑变动，都会导致主逻辑器的改动。&lt;/p&gt;&lt;p&gt;我们主要优化的点就是将这个逻辑给去掉，让主逻辑器职责单一，每个业务单元也职责单一。将上面的逻辑变成如果是A1，则来源是A时我工作，是B时我不工作，如果是A2，则来源A、B我都工作，如果是A4，则来源A我不工作，来源B我工作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0604914933837428&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9JXmrjUaFHluAJaicwM4cI7l2roFiby8rlaBicL743XYgF5ATLegOMrs1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可以看到，做的事情就是当有一堆条件判断，要决定执行N个逻辑中的M个时，调用者不应该关心调用逻辑，而应由这N个逻辑自行判断自己要不要执行。&lt;/p&gt;&lt;p&gt;从代码实现来看，就是调用者不关心有多少个逻辑块，也不必关心日后的增减，从而实现调用的解耦。那么代码该如何写呢？&lt;/p&gt;&lt;p&gt;原来的是在一个方法里，fetchStock，fetchDiscount等等，首先我们要把这些实现全部去除，并统一为对接口的遍历。&lt;/p&gt;&lt;p&gt;改造后的代码是这样：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3150984682713347&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9D33icuQicfq1tOjaWGOscrIp89H3JgiakqnRLHCLrItOw9y5TSksh8iaGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;代码很简单，注入一个接口的集合，并遍历这个集合，根据实现类返回的true、false决定是否要执行这个实现类的业务逻辑。&lt;/p&gt;&lt;p&gt;接口定义如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.156441717791411&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda90FpD2EcBibibdiaTeyRqibicerUyjTE4SHpRR0C3v5L2HoN8iadHL75xIO2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;652&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;单个逻辑单元代码如下：&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6428571428571429&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9ofia2ziaHJhQnzNz6p37Ajuntm6iczBOBnoqfHzsy4yJPeH7XZSgmR9MQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1260&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;以上主流程的逻辑很清晰，后续随着各模块的扩展或缩减，都不需要动主逻辑，而只需要各个子模块根据自己的情况返回是否要执行自己即可。&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97617&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;动态配置避免硬编码&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过以上的改造，我们已经完成了模块间的隔离，当有新增、删减模块时，可以做到不影响主流程，且将代码修改、影响范围控制在一个类里。&lt;/p&gt;&lt;p&gt;但是需求的变化总是很频繁，仅仅做到互不影响还不满足需求，我们还需要做到能够动态的控制各个模块的启用和关闭。&lt;/p&gt;&lt;p&gt;譬如『如果是A，我就做A1、A2、A3；如果是B，我就做A2，A3，A4』。希望能做到随时仅通过修改配置，不改代码不重新发布而做到『如果是A，我就做A1、A2；如果是B，我就做A3，A4』，完成对模块的启停。&lt;/p&gt;&lt;p&gt;动态配置该如何实现呢？&lt;/p&gt;&lt;p&gt;其实很简单，我们只需要修改execute方法，将refer==1这种规则存放于配置中心，将execute方法里的硬编码判断变成根据配置中心的配置进行判断即可。如下图：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6351981351981352&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda98PGy954pUmwD2kcLYXOrxZI5PxHibJTsEzAGcl4DGaj5nqBYPZZIMgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1716&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那么ConfigCenter就是配置中心工具类，里面提供了根据key获取value的方法。配置中心大抵如注释所描述的，在应用启动时，全量从zk、etcd等拉取配置并保存在本地内存，并开启监听，当配置中心内容有变化时，更新到本地内存里。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.45921052631578946&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9WXxBaaWaFEg7WO0AtR1X6Z1IVLUb9d3egfEHJ6lCfiakqaZeVsyGxNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1520&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过观察各个模块的execute类，可以进一步发现，倘若配置中心里我们将类名作为key，模块所支持的refer集合为value时，各模块的execute方法就是完全一样的代码。那么整个方法又可以进一步抽成一个抽象类，由该抽象类来完成这个判断逻辑，如图：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3573008849557522&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9V5hicLFboONYLvCFk50rG6dSXfHcB40dVXAOzXgQoMUsHcowpDMLdQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1808&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当有了统一完成&quot;开关&quot;的父类后，则各个模块的逻辑单元就更加简单了，只需要关注自己的业务逻辑即可。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4608294930875576&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9CMKO36bYLxAAc23oecyWvMp7OC3xj1ZmZErNAVicCwxlY7EARF259bg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1302&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;至此，最小业务单元职责则回归到纯粹的业务逻辑，不再参与流程控制的逻辑判断。同理，主流程也不再参与对各个子业务单元的判断和控制，只关注于对接口的遍历，各模块也不再产生相互影响。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97617&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;结果层字段隔离控制&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上我们完成了业务逻辑单元的隔离，那么对于结果层该如果控制呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9815837937384899&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda96cmVOyKU0Z9FQuYXWjonticMxz0ic1IHUrgBLkoAGX3WF1OSncKXMHicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1086&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;原始代码是这样的，在主流程中对各个变量进行判断，然后设置结果的值。从原始代码可以看到，即便只有一个变量refer就已经让代码可维护性变的很差，更别提真实场景下变量可能有多个时，要维护不同变量场景下返回不同的参数该多少困难。&lt;/p&gt;&lt;p&gt;通过对上面业务层控制的实现，我们同样可以采用类似的方式来处理结果层。&lt;/p&gt;&lt;p&gt;定义一个接口如下，定义boolean型方法，让各字段决定自己要不要返回。定义key、value，用来存放字段名和value。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0951086956521738&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9M4GysfHOa7VIOz7CEVl1DC9LdApKjsiahQfeCqBqZgCYsJzeECMRy4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;736&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;修改主流程如下，当需要返回时，才能待返回字段的key、value存起来。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.3996789727126806&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9mvvLkXbUkxN2iaWkonicQlZQrmkvAboPn3atP0p2OWPWkiakx3jwsoWbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;623&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;实现类如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7462962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9VDepGv2zPe3bDSh5LRqvmRdiaqPhzOdyz4p77ddeuOAd1H6rNgOGqKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上方式展示了对结果层进行精细化控制的简单方案，实际场景中，可能涉及结果层数据结构并不是单层、对key、value的判断需要额外的属性等，其实思路都是一样的。&lt;/p&gt;&lt;p&gt;如果要增加入参的判断，在接口的needOut里追加要参加逻辑判断的入参即可。如果返回的结构不是单层的key-value，则在复合结构的实现类里再嵌套一层新定义的接口的遍历也可。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97617&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;长逻辑相关处理&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;长逻辑这种最常见，也是最好处理的。我们经常在写一处逻辑时，刚开始很简单，几行就解决了，后来随着业务越来越膨胀，这个方法也是越来越长。终于有一天，代码长到显示器装不下它了，后面的逻辑开始出现对前面的逻辑产生影响了，这个方法就开始变的有&quot;坏味道&quot;。&lt;/p&gt;&lt;p&gt;这种相信大家都不少见，尤其在老系统中，从1千到8千行的我都见过，编辑器右边的滚动条都要看不到了。当然仅仅是长倒还好说，主要的问题是相互影响，前面赋的值，后面就被覆盖了，这种问题往往还比较隐蔽，极其影响系统的健康。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;2.9823529411764707&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9Llic0Lmd49MKNQKxLLPic0Xg5ezaz1O418n1nsFQZLxdpuicQMXA3CCcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;340&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;解决这种长逻辑，其实很简单，做好两件事即可，1-将方法的顺序执行变成接口遍历，2-封装。&lt;/p&gt;&lt;p&gt;1 如何将方法的顺序执行变成遍历呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.4483362521891419&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9WHFXEskCE9VOMxliaugjSNH26YaRQMJgowTP20aEW55c8zvVqQHqtPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;571&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个其实在上面已经讲了，是类似的做法。将一大堆在同一个大方法里的小方法全部变成某个接口的实现类，从而将方法的顺序执行，变成对接口集合的遍历执行。后续增加或删减方法时，只操作对应的类即可，而不需要对这个大流程做修改。&lt;/p&gt;&lt;p&gt;一个单独的实现类就是这样的：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4114002478314746&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9A49AK2pojCZXrnWB3yYicVRCcb2XVBBNzTTLQU9t3JYKe5OQbicZ4F6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1614&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可能有人会问，我的各个方法是有先后顺序的，你用了接口集合，该怎么控制顺序呢，从上图的Order注解可以看到，这个就是控制在接口实现类的顺序的，值越小，在List里越靠前。&lt;/p&gt;&lt;p&gt;2 如何理解封装呢？&lt;/p&gt;&lt;p&gt;这个更简单，之前不是说代码长了易出现值被后面的逻辑覆盖，那么就以某个最小参数为一个类，所有对他的增删改都控制在一个类，完成对某参数、对象的封装控制。而不要散落各地去修改一个参数的值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97617&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;带中断的长逻辑处理&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后一个问题，如果带有流程中断的情况。如图，一个长逻辑，在某些条件被中断了，中断后后面的逻辑自然是走不到了。那么之前的对接口集合遍历方式还能用吗？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0502008032128514&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9TicQbw0tqv9nyTNicrLEiaEzV0aNpibticdauj8KialyUG3ZQXx52RCNOkHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;996&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;自然是可以用的，不过就要稍加改造，让实现类的方法返回一个boolean值，当false时，中断这个循环流程即可，这样后面的逻辑就走不到了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5049115913555993&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda96CUI9V0dKLptTQjmFyr8yzhoFEvEc6NsZQibp6jB89iaiaoOYvBBwsskA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1018&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果不是要中断，而是某条件下执行自己，某条件下跳过自己，这个就往上看看文章的第4段。&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97617&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;最后&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt; 本文通过一些例子，描述了一些场景下对系统的改造方式，由于京东APP后台逻辑复杂，以上场景仅覆盖了部分典型场景，未全部写出改造点，当然还有一部分是特有的非典型问题，可能大部分用户碰不到的场景，也未写出。&lt;/p&gt;&lt;p&gt;如果有遇到类似场景，可参考文中的一些方式进行处理。&lt;/p&gt;&lt;section data-id=&quot;97593&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2173913043478262&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9X6oO5gacIibTjqqmBxzda9CqJce3IEB4lpBdN1zCX1VFCOmTIAuhJdXCZb2IjTIdnUcJOcjxxjNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;23&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;如果有问题，或有建议，可联系作者wuweifeng10@jd.com，文章会发布于京东零售公号及作者csdn博客https://blog.csdn.net/tianyaleixiaowu。&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>85c20036d7dc8b36ebd3c1a20a0c97fe</guid>
<title>Go Modules 使用不了公司内的私有依赖，该怎么办？</title>
<link>https://toutiao.io/k/gh1hl07</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go语言官方的依赖包管理工具Go Modules已经发布很久，从1.14版本开始更是默认自动开启了Go Modules的支持，相信很多人公司里的项目都从go vendor、dep 之类的依赖管理切换到Go Modules上了吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go Modules 号称是&lt;strong&gt;语言原生的、零配置开箱即用的&lt;/strong&gt;包依赖管理工具，当然零配置只有我们项目依赖的都是相互之间没有冲突的外部公共包时这个条件才能成立。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在之前的文章《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247486789&amp;amp;idx=1&amp;amp;sn=6eec6f80625b6ddf019423a5889e19c6&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;项目改用GoModules管理依赖的方法和经验总结&lt;/a&gt;》里给大家总结了项目切换到Go Modules进行包依赖管理的一些步骤，也介绍了怎么用 replace 指令解决 etcd 和 grpc 的版本不兼容这个比较令人费解的问题的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过我发现一些朋友在第一次切换到Go Modules的时候在怎么让Go Modules使用私有代码仓库的包作为依赖模块时都会遇到些问题。这篇文章帮大家总结一下&lt;strong&gt;让Go Modules使用私有代码仓库做模块&lt;/strong&gt;时，两个需要配置的地方。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;配置Git使用SSH拉取私有依赖&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不做任何设置，当我们的项目通过Go Modules 引用私有仓库的代码包时会发生以下错误：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go: downloading code.lazycorp.com/privaterepo v0.0.0-20200408100711-ed766a2975ce&lt;br/&gt;go get code.lazycorp.com/privaterepo: code.lazycorp.com/privaterepo@v0.0.0-20200408100711-ed766a2975ce: verifying module: code.lazycorp.com/privaterepo@v0.0.0-20200408100711-ed766a2975ce: reading https://sum.golang.org/lookup/code.lazycorp.com/privaterepo@v0.0.0-20200408100711-ed766a2975ce: 410 Gone&lt;br/&gt;        server response:&lt;br/&gt;        not found: code.lazycorp.com/privaterepo@v0.0.0-20200408100711-ed766a2975ab: invalid version: git fetch -f origin refs/heads/*:refs/heads/* refs/tags/*:refs/tags/* in /tmp/gopath/pkg/mod/cache/vcs/13e63a509893edc19353a80fa2c6e28db213d146f72fe43ba65c1ec86624027b: exit status 128:&lt;br/&gt;                fatal: could not read Username for &#x27;https://code.lazycorp.com&#x27;: terminal prompts disabled&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;导致这个问题的原因是Go Moduels 默认通过 HTTPs 的方式下载 git 仓库上的代码，我们希望（而不是使用 HTTPS）通过 SSH 下载这些私有依赖，这样我们就可以使用本地设置的 SSH 密钥来访问git 仓库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为解决这个问题我们可以做的是配置 git 将所有 HTTPs URL 重写为等效的 git SSH URL：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;git config --add --global url.&quot;git@code.lazycorp.com:&quot;.insteadOf https://code.lazycorp.com&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;code.lazycorp.com&lt;/code&gt;是我随便起的名字，这里应该替换成你们公司的git仓库的域名，如果是使用GitHub上的私有仓库就配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;git config --add --global url.&lt;span&gt;&quot;git@github.com:&quot;&lt;/span&gt;.insteadOf https://github.com&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;配置GOPRIVATE环境变量&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个环境变量就是为私有依赖准备的，一般是设置成代码仓库站点的域名。还是假如公司内部代码仓库站点的域名是&lt;code&gt;code.lazycorp.com&lt;/code&gt;，那么我们就把这个环境变量设置成&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; GOPRIVATE=code.lazycorp.com&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样设置的话，所有路径前缀为&lt;code&gt;code.lazycorp.com&lt;/code&gt;的模块都不会再经过&lt;code&gt;GOPROXY&lt;/code&gt;指定的镜像站点拉取模块对应的软件包，转而去&lt;code&gt;code.lazycorp.com&lt;/code&gt;拉取软件包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里提一个小技巧，假如你自己开发的时候不想污染电脑系统里的全局环境变量，可以选择在&lt;code&gt;GoLand&lt;/code&gt;里开启Go Modules支持和设置环境变量，这样在&lt;code&gt;GoLand&lt;/code&gt;内编译运行程序时也能正常使用Go Modules。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7361111111111112&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f6cWfJ9mBRJJ9djdHn9upUWOPhMcVvKfGE85u10icv7ibaluMVlbTj8fbZ6dIIMM5ZbkkrwPY0zLXjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;Goland配置&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过上面两步配置就能顺利让Go Modules使用上私有依赖，如果还有Go Modules使用上的问题，欢迎各位留言讨论，相信读者里一定隐藏着不少大佬能一起解决这些问题。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUzNTY5MzU2MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4pGhLz2xEbRFHnAQon2QLYgbBibCJo1ibJHesLWshPJeRibateRtAqkaf6BgjlbhYiaxHLq6Zu07CRPw/0?wx_fmt=png&quot; data-nickname=&quot;网管叨bi叨&quot; data-alias=&quot;kevin_tech&quot; data-signature=&quot;分享软件开发和系统架构设计基础、Go 语言和Kubernetes。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;相关阅读&lt;/h3&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247486789&amp;amp;idx=1&amp;amp;sn=6eec6f80625b6ddf019423a5889e19c6&amp;amp;chksm=fa80dcd2cdf755c4fcca87a2c2bfa45cff0f36373658250ea2b5a5617e69e361dc5c960f7f86&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;项目改用GoModules管理依赖的方法和经验总结&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;点在看支持我的创作&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>