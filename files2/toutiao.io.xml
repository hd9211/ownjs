<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>300d4735d3a0c4edeefa6fabbb91dfa3</guid>
<title>双非渣本后端三个月逆袭字节</title>
<link>https://toutiao.io/k/faz5prg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-topic-des nc-post-content&quot;&gt;
&lt;h2 id=&quot;个人背景介绍&quot;&gt;个人背景介绍&lt;/h2&gt; 
&lt;p&gt;2017年毕业于一所不知名双非本科大学，毕业时就有着一颗想进大厂的心，但又想留在成都，不愿意去北上广，现在其实相当后悔。当年在成都的大厂少之又少，再加上校招时非常努力地玩耍，导致投的几个大厂面试都全部挂掉。也错失了进大厂最好的机会，所以我奉劝大三的同学如果对自己的职业有追求，有进大厂的梦想，在大三的时候一定要好好准备，在校招的时候拿offer。&lt;br/&gt;&lt;span&gt;最后我在成都一家本地科技公司做了Java开发，中间也跳过一次槽，也是做的Java。但这几年时间里总感觉公司能给的成长太慢，虽然自己也在学习，还是免不了焦虑，特别是像自己这种学历和公司背景都一般的程序员，要保证自己以后不被淘汰，必须得做点什么。所以在听到一个前同事被公司裁掉，最后进入大厂这个事情之后，彻底点燃了我心中想进大厂的那把火，我也准备内推试试&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8&quot; target=&quot;_blank&quot;&gt;字节跳动&lt;/a&gt;。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;因为疫情原因，很多企业生存困难。我也保持了理智，没有辞职进行面试。而是给自己制定了学习计划，不得不说，在职的情况下复习确实很难，因为可能加班打乱计划。于是我把所有能利用的个人时间全部利用了起来，比如早上十点上班，我六点钟就会起床，刷两个小时LeetCode，八点钟洗漱之后去上班。晚上如果有时间就会把早上刷过的题拿出来继续复习，花了两个月的时间，一边复习（预习）数据结构，一边做题，LeetCode上面的高频题基本都过了一遍。花了那么多时间&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%88%B7%E9%A2%98&quot; target=&quot;_blank&quot;&gt;刷题&lt;/a&gt;，都是因为自己&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;太菜，以前没有进行专门的练习。题做得差不多之后，就开始复习专业知识了，具体内容我都会总结出来。前前后后准备了三个月，我才敢进行内推，经历了八次面试之后，面试时间又持续三个月，皇天不负有心人，终于在这个月等到了oc。&lt;/span&gt;&lt;br/&gt;下面是面试内容，时间太久了，可能记得不太全，但基本上包含了所有问题，白天上班，我都是选择晚上进行面试，哈哈&lt;/p&gt; 
&lt;h2 id=&quot;一面a部门&quot;&gt;一面A部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;讲&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，串起来讲，可能遇到的问题，怎么解决，怎么实现，讲了发送客服消息&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Spring里面的bean怎么回事&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;HashMap和ConcurrentHashMap，HashMap中的&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%BA%A2%E9%BB%91%E6%A0%91&quot; target=&quot;_blank&quot;&gt;红黑树&lt;/a&gt;，两者rehash的区别&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Mysql的一致性是什么，数据库redolog，undo log，MySQL的索引结构，为什么二级索引叶子节点不能直接存储行数据的指针，这样可以不回表，怎么考虑的？&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=redis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt;里面的zset，跳表怎么实现，怎么增删，&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=redis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt;是怎么rehash的&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;，&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91&quot; target=&quot;_blank&quot;&gt;二叉树&lt;/a&gt;转双向&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;二面a部门&quot;&gt;二面A部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;自我介绍&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;再一次聊&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，功能，架构，角色，量级&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Spring里面有哪些设计模式&lt;/li&gt; 
 &lt;li&gt;SpringMVC和SpringBoot有什么区别&lt;/li&gt; 
 &lt;li&gt;SpringBoot的自动配置是怎么实现的&lt;/li&gt; 
 &lt;li&gt;刚刚你说了线程池，你线程池是用的什么，参数有哪些，为什么这么设置 &lt;/li&gt; 
 &lt;li&gt;线程池核心线程满了怎么办，里面的阻塞队列是干什么的&lt;/li&gt; 
 &lt;li&gt;说说ThreadLocal是什么&lt;/li&gt; 
 &lt;li&gt;CAP理论知道吗，为什么不能同时满足&lt;/li&gt; 
 &lt;li&gt;Redis里面的数据结构有什么场景&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;Redis怎么实现锁（&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=redis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt;锁的所有坑都说了一遍）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;分布式事务知道吗，有哪些方案（说了2PC，3PC，TCC，MQ）&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;，&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84&quot; target=&quot;_blank&quot;&gt;树的直径&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;有什么要问我的&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;三面a部门&quot;&gt;三面A部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;场景题，设计一个朋友圈，读QPS 1000w，写QPS 10w&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;LFU&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;你有什么问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;这个面试官是个leader，比较强势，很多细节回答的不是很好，所以脸色一直不好，给人压力较大，面完就觉得凉了。果然面完之后和前两次不一样，HR那里就没有任何通知了，到这里还是很失落，准备了那么久，因为最后一面没表现好导致挂掉。之后等了一个月，这一个月没有任何消息，一个月过后又接到字节HR的电话，说我之前两面面评都不错，让我试试他们部门，我就同意了。&lt;/p&gt; 
&lt;h2 id=&quot;一面b部门&quot;&gt;一面B部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;怎么做服务拆分，边界怎么划分的&lt;/li&gt; 
 &lt;li&gt;分布式之后会遇到什么问题，CAP的各个情况介绍一下&lt;/li&gt; 
 &lt;li&gt;dubbo调用过程是怎样的，PB知道吗&lt;/li&gt; 
 &lt;li&gt;thrift了解过吗&lt;/li&gt; 
 &lt;li&gt;zk介绍一下，有哪些节点类型，特点&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;怎么知道&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;中接口的重要性，怎么做监控，你说的自动化测试是怎么做到的（这个问题回答完，他笑了。。。）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;你所理解的SLA是什么，要达到什么等级&lt;/li&gt; 
 &lt;li&gt;说说你理解的k8s&lt;/li&gt; 
 &lt;li&gt;nginx的upstream是干什么的&lt;/li&gt; 
 &lt;li&gt;nginx有哪些负载均衡策略&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;：&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F&quot; target=&quot;_blank&quot;&gt;岛屿数量&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;你有什么问题要问我&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;二面b部门&quot;&gt;二面B部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;锁有哪些实现方式&lt;/li&gt; 
 &lt;li&gt;分布式锁的实现方式&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;JVM的内存模型，垃圾回收&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;MySQL的事务介绍，ACID的实现原理是什么（想问MySQL的日志）&lt;/li&gt; 
 &lt;li&gt;HashMap的原理，其他线程安全的Map&lt;/li&gt; 
 &lt;li&gt;Redis的高可用，有哪些持久化方式&lt;/li&gt; 
 &lt;li&gt;Redis的数据结构，线程模型&lt;/li&gt; 
 &lt;li&gt;用过什么消息队列，有什么特点&lt;/li&gt; 
 &lt;li&gt;怎么保证消息幂等消费&lt;/li&gt; 
 &lt;li&gt;docker的网络模式&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;：&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7&quot; target=&quot;_blank&quot;&gt;比较版本号&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;提问&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;三面b部门（交叉面）&quot;&gt;三面B部门（交叉面）&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Linux的内存管理&lt;/li&gt; 
 &lt;li&gt;浏览器打开一个网站的过程中会经历哪些网络处理，DNS的具体过程是啥&lt;/li&gt; 
 &lt;li&gt;zk是什么分布式模型（想问的CAP定理），主从怎么做选举&lt;/li&gt; 
 &lt;li&gt;zk只有一个主节点，写性能不高，zk怎么解决的&lt;/li&gt; 
 &lt;li&gt;etcd或consul知道吗&lt;/li&gt; 
 &lt;li&gt;多个服务中如何快速排查问题&lt;/li&gt; 
 &lt;li&gt;Redis中的淘汰方式有哪些，Redis性能高的原因是啥&lt;/li&gt; 
 &lt;li&gt;docker的实现原理&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;：相交&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;四面b部门-（leader面）&quot;&gt;四面B部门 （leader面）&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;量级多大，QPS最高的接口是怎么做的&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;rpc怎么实现服务发现&lt;/li&gt; 
 &lt;li&gt;zk中的watch机制是怎么实现的&lt;/li&gt; 
 &lt;li&gt;分布式锁有哪些实现，MySQL，zk，Redis都说了一遍，并且分析了各自的优缺点，这个问题问的频率太高了&lt;/li&gt; 
 &lt;li&gt;怎么提高数据库读写性能&lt;/li&gt; 
 &lt;li&gt;k8s了解吗&lt;/li&gt; 
 &lt;li&gt;servicemesh有做过吗&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;五面b部门（hr面）&quot;&gt;五面B部门（HR面）&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;离职原因&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92&quot; target=&quot;_blank&quot;&gt;职业规划&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;期望薪资&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;基础知识&quot;&gt;基础知识&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;常用集合、数据结构（数据增删改查操作的原理具体实现、各参数的含义，以及如何组合使用）&lt;/li&gt; 
 &lt;li&gt;Java的语法，OO的思想要熟悉，常用设计模式要知道场景&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;JVM内存模型，垃圾回收&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;，垃圾收集器的区别，GC调优&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;线程模型&lt;/li&gt; 
 &lt;li&gt;IO模型（包括操作系统底层IO模型和常见BIO、NIO、AIO、IO多路复用的原理）&lt;/li&gt; 
 &lt;li&gt;Redis（数据结构的内部实现、淘汰原理策略、持久化、集群、扩容、数据同步、以及一些常见缓存问题的解决方案）&lt;/li&gt; 
 &lt;li&gt;MySQL（索引原理，查询优化，三大日志）&lt;/li&gt; 
 &lt;li&gt;消息队列（内部原理，常见消息问题解决方案）&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;分布式原理、&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;、rpc原理（paxos、raft、zoo&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=keep&quot; target=&quot;_blank&quot;&gt;keep&lt;/a&gt;er的原理）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;分布式场景题（高可用，高性能相关）&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;其他知识&quot;&gt;其他知识&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;位运算&lt;/li&gt; 
 &lt;li&gt;大数据量操作（在有限时间内完成、在有限空间内完成）&lt;/li&gt; 
 &lt;li&gt;设计题（看一些常见的分布式ID、分布式计数服务等等）&lt;/li&gt; 
&lt;/ol&gt; 
 
&lt;ol&gt; 
 &lt;li&gt;数组&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;位运算&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91&quot; target=&quot;_blank&quot;&gt;二叉树&lt;/a&gt;（dfs，bfs，相当重要，只要会了&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91&quot; target=&quot;_blank&quot;&gt;二叉树&lt;/a&gt;，回溯那些&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;也会了）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;设计题&lt;/li&gt; 
 &lt;li&gt;LRU/LFU&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;查找&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://uploadfiles.nowcoder.com/files/20210311/1219786_1615453294383/008eGmZEgy1goeugqrbrrj31360u0451.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt; 
&lt;p&gt;我给大家的建议就是慢慢来，不管是社招还是校招，制定自己的计划，一定要有自己的知识体系，针对自己薄弱的地方进行强化复习，不放过任何一个细节。&lt;br/&gt;简历上写的东西一定要会，一般都是针对简历来提问的。如果在预习的过程中感到困难或者吃力，那就对了，等你熬过去了，就是胜利。祝福大家都能拿到满意的offer。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>14e280b8ce413a717c9c605c56ae89a4</guid>
<title>第三方 API 对接如何设计接口认证？</title>
<link>https://toutiao.io/k/wu7tc8w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index=&quot;401&quot; data-index=&quot;4299&quot;&gt;点击上方“&lt;/span&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index=&quot;401&quot; data-index=&quot;4299&quot;&gt;&lt;span&gt;陶陶技术笔记&lt;/span&gt;&lt;span&gt;”关注我&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index=&quot;401&quot; data-index=&quot;4299&quot;&gt;回复“&lt;/span&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index=&quot;401&quot; data-index=&quot;4299&quot;&gt;资料&lt;/span&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index=&quot;401&quot; data-index=&quot;4299&quot;&gt;”获取作者整理的大量学习资料！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5622222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Hic4icvNgYCicZt8qGEJbyjXYCzVwYUKpSXRX5BHdsmwcx9EiaCMVaianXcicTK7ovp8VEZeecwEweJLDkCialibLjQdxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在与第三方系统做接口对接时，往往需要考虑接口的安全性问题，本文主要分享几个常见的系统之间做接口对接时的认证方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、认证方案&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如订单下单后通过 &lt;strong&gt;「延时任务」&lt;/strong&gt; 对接 &lt;strong&gt;「物流系统」&lt;/strong&gt; 这种 &lt;strong&gt;「异步」&lt;/strong&gt; 的场景，都是属于系统与系统之间的相互交互，不存在用户操作；所以认证时需要的不是用户凭证而是系统凭证，通常包括 &lt;strong&gt;「app_id」&lt;/strong&gt; 与 &lt;strong&gt;「app_secrect」&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;app_id与app_secrect由接口提供方提供&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1. Baic认证&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一种较为简单的认证方式，客户端通过明文（Base64编码格式）传输用户名和密码到服务端进行认证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过在 &lt;code&gt;Header&lt;/code&gt; 中添加key为 Authorization，值为 Basic 用户名:密码的base64编码，例如app_id为和app_secrect都为 &lt;code&gt;zlt&lt;/code&gt;，然后对 &lt;code&gt;zlt:zlt&lt;/code&gt; 字符进行base64编码，最终传值为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Authorization: Basic emx0OnpsdA==&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1.1. 优点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单，被广泛支持。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1.2. 缺点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安全性较低，需要配合HTTPS来保证信息传输的安全&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;虽然用户名和密码使用了Base64编码，但是很容易就可以解码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无法防止 &lt;strong&gt;「重放攻击」&lt;/strong&gt; 与 &lt;strong&gt;「中间人攻击」&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2. Token认证&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;Oauth2.0&lt;/code&gt; 中的 &lt;code&gt;客户端模式&lt;/code&gt; 进行Token认证，流程如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7575107296137339&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Hic4icvNgYCicZt8qGEJbyjXYCzVwYUKpSX1gCP9kxpVr4rhRxK21k93bMibNUou9BUGDjib2motymx22at1NfYAF1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;932&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;使用Basic认证的方式获取access_token之后，再通过token来请求业务接口&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.1. 优点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安全性相对 &lt;/span&gt;&lt;code&gt;Baic认证&lt;/code&gt;&lt;span&gt; 有所提升，每次接口调用时都使用临时颁发的 &lt;/span&gt;&lt;code&gt;access_token&lt;/code&gt;&lt;span&gt; 来代替 &lt;/span&gt;&lt;code&gt;用户名和密码&lt;/code&gt;&lt;span&gt; 减少凭证泄漏的机率。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.2. 缺点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;依然存在 &lt;code&gt;Baic认证&lt;/code&gt; 的安全问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3. 动态签名&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在每次接口调用时都需要传输以下参数：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「app_id」&lt;/strong&gt; 应用id&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「time」&lt;/strong&gt; 当前时间戳&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「nonce」&lt;/strong&gt; 随机数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「sign」&lt;/strong&gt; 签名&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中sign签名的生成方式为：使用参数中的
app_id + time + nonce 在最后追加 &lt;code&gt;app_secrect&lt;/code&gt; 的字符串进行md5加密，并全部转换成大写。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果需要实现参数的防篡改，只需把接口所有的请求参数都作为签名的生成参数即可&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3.1. 优点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安全性最高&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;服务端使用相同的方式生成签名进行对比认证，无需在网络上传输 &lt;code&gt;app_secrect&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以防止 &lt;strong&gt;「中间人攻击」&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 &lt;code&gt;time&lt;/code&gt; 参数判断请求的时间差是否在合理范围内，可防止 &lt;strong&gt;「重放攻击」&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 &lt;code&gt;nonce&lt;/code&gt; 参数进行幂等性判断。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3.2. 缺点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不适用于前端应用使用，js源码会暴露签名的方式与app_secrect&lt;/p&gt;&lt;/section&gt;&lt;section data-from=&quot;xmt-recommend&quot; data-tools=&quot;新媒体排版&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;文章推荐&lt;/span&gt;&lt;/span&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTI2NDMwMg==&amp;amp;mid=2247484106&amp;amp;idx=1&amp;amp;sn=a8a30f989f5e088f5902f98353044e7f&amp;amp;chksm=a73f6b8b9048e29d26494219343543089c93ba4df4cff6bd547a23451a92a84d16cbe59d8bdb&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Dubbo想要个网关怎么办？试试整合Spring Cloud Gateway&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTI2NDMwMg==&amp;amp;mid=2247483808&amp;amp;idx=1&amp;amp;sn=05add25ed69e7ae34a29214750568121&amp;amp;chksm=a73f68e19048e1f74b7aea6c452b0786af6b5ddfc582d787984663f3480d54dedd7009fa0689&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Spring Security基于Oauth2的SSO单点登录怎样做？一个注解搞定&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTI2NDMwMg==&amp;amp;mid=2247483779&amp;amp;idx=1&amp;amp;sn=119de13aa7bee6718c2d1d9c5c40ffa8&amp;amp;chksm=a73f68c29048e1d4a12bca3f31cb03a05563058663ef4acd93b48ef51c0923c6042db526c242&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;微服务业务监控和行为分析怎么做？试试日志埋点&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTI2NDMwMg==&amp;amp;mid=2247483758&amp;amp;idx=1&amp;amp;sn=f3c50ef81bdfbf14b53310c3a310cc98&amp;amp;chksm=a73f682f9048e13951fd34887ad2703ce0b3a0bf25597ef2494c2deefb66a7dd78922b845b05&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;Spring Cloud异步场景分布式事务怎样做？试试RocketMQ&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTI2NDMwMg==&amp;amp;mid=2247483735&amp;amp;idx=1&amp;amp;sn=ac2f5d3bf82254bc5f1d3200119b4c32&amp;amp;chksm=a73f68169048e100bd09abd488cc5b7d42658449fd7903e48a13efd536870fbe30eafb842193&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Spring Cloud同步场景分布式事务怎样做？试试Seata&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5OTI2NDMwMg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Hic4icvNgYCicYWh0bcYuMAUxkq0l9VMjYJO350ZJxPGFJcaGH0AzrnnzXicRyDq7Wl4Is2gAtop1piamIPjuKwBnKg/0?wx_fmt=png&quot; data-nickname=&quot;陶陶技术笔记&quot; data-alias=&quot;zltrobin&quot; data-signature=&quot;陶陶的技术学习与分享，专注Java、SpringBoot、SpringCloud、分布式系统/微服务、中间件等领域。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;谢谢大家的鼓励&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>20da0068603d79c06cf243f4a3e4ba54</guid>
<title>两分钟弄懂对称二叉树</title>
<link>https://toutiao.io/k/pg3kr42</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好呀，我是吴师兄，今天照例来更新一道 LeetCode 算法题，根据以往数据来看，这类文章的打开率普遍不高，一般在三四千左右，远远低于水文或者热点文一两万的阅读量，&lt;strong&gt;一个合格的自媒体人正确的做法应该是抛弃前者不再更新这类技术文&lt;/strong&gt;，我也曾经纠结彷徨过，&lt;strong&gt;到底是追逐阅读量还是放平心态写好技术文服务好读者&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种心态导致我有时候看到技术文阅读量、点赞量不佳会愤愤不平：MD，再也不写技术文了，可隔了一会看到一道算法题又忍不住想写出来分享。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反正挺难受的，直到前几天我看到了下面这段话。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5329512893982808&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYgOlptIWapVSMreMLmGSS86Y22edxJwqCw56ZGFcxvTFlAO0hohNv3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;698&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思来想去，我觉得挺多读者关注我的公众号是想学一些技术的，所以还是保持&lt;strong&gt;每周更新一两道算法题解的频率&lt;/strong&gt;，希望能日拱一卒，帮助读者在算法面试的时候能有印象：这道题目我在五分钟学算法见过！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以喜欢看题解的读者记得星标一下公众号，&lt;strong&gt;五分钟学算法，让算法面试没那么难！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扯远了，来看今天的这道算法题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题目的描述是这样子的：实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4790356394129979&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYCJDHENxgg1Wtg50OgnHYUV2mialGyUXvXeOToxicaic206ROibViadwkcsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1908&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;题目很好理解，首先需要弄清楚&lt;strong&gt;对称&lt;/strong&gt;的含义，它隐含了三层意思，即对于树中任意两个对称节点 L 和 R ，一定有：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、L.val = R.val：即此两对称节点值相等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6502057613168725&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYBzrtBI6fE5v9QlQtEbZ6ibrNfTZvz9ic04x0YuNLFKGeV5u0c0JfL7hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;729&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、L.left.val = R.right.val：即 L 的左子节点和 R 的右子节点对称。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7168021680216802&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYfOvw8jTFk2dN11AGeic7z7KHkKVZEDlRy96mSrZI998Q57sqWRdeUnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;738&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、 L.right.val = R.left.val：即 L 的右子节点和 R 的左子节点对称。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7163029525032092&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYTMRAuVT84gTZ6oKnbkk6micIyJmiaoWuCiaG0TEsMjw93iayf8SNn3p80A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;779&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思路也就很简单了，我们可以从底至顶进行递归操作，判断&lt;strong&gt;每对节点是否对称&lt;/strong&gt;，从而判断树是否为对称二叉树。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接通过图片来看是怎么操作的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOY7OFVcIMDfpGKMkpbTb3aYYoD5QWxmFN87PyDLBE8hWBnv0icRwtIUtQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.002&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYnJ1hdODOWUUjurTQxVKMmj9bxE6BrwHvicAeSlMGTLR1nOml8SOkOXA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.003&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYOKTaZ50UaOmN6DzbqLaaic7hibm9JlvoAVMltOdyfvia34c7VVkOH9btg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.004&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYJPXAHoZT6tjTEhXvZLDhZEolDahSgSaamXsYSCmb3S7dOc0cMEtTOg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.005&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYgRB06mFsC0GxtF0R04sXhwGqZX2u23CzNiabs8dbAelHeibDuZyibULsw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.006&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYsOplKIQ5d81yl2THg8icLHJroK5mfPoevOCzMTcHCEuUUd8kB13C7KA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.007&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYbib1d2AibXtvdsbHicWbAuAicU76kJp5ftHtu1qyAnD0dgAUA3Obk1jNaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.008&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYVXDYhMIJiaic1pxYytnu2ic3IIW5739shTlkRBzVBaBkpDc5pVFo9hic0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.009&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码如下，两分钟应该能写出来：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;// 公众号：五分钟学算法&lt;br/&gt;// 作者：程序员吴师兄&lt;br/&gt;&lt;br/&gt;class Solution {&lt;br/&gt;    public boolean isSymmetric(TreeNode root) {&lt;br/&gt;        // 边界情况&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(root == null) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        // 递归判断左子树和右子树是否对称&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; isSymmetriacalCor(root.left,root.right);&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;    private boolean isSymmetriacalCor(TreeNode L,TreeNode R){&lt;br/&gt;        // 如果某根子树的左右两子树同时为空，肯定是对称的，直接返回 &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(L == null &amp;amp;&amp;amp; R == null){&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        // 说明根子树的左右两子树有某子树为空，某子树有值，不对称，返回 &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(L == null || R == null){&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        // 左子树的值与右子树的值不相等，不对称，返回 &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(L.val != R.val){&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        // 递归的对比当前节点的左子树的左子树与右子树的右子树、左子树的右子树与右子树的左子树是否对称&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; isSymmetriacalCor(L.left,R.right) &amp;amp;&amp;amp; isSymmetriacalCor(L.right,R.left);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后小小的总结一下，二叉树具备天然的递归性，往往在处理二叉树的题目时，我们都需要去思考&lt;strong&gt;怎么样利用递归&lt;/strong&gt;，想清楚能解决 50% 的二叉树问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的文章就到这里，我们下篇文章见，有收获记得点个赞，&lt;strong&gt;五分钟学算法，让算法面试没那么难！&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUyNjQxNjYyMg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/D67peceibeIRJ2kKhKBAg3zqYwpnLz1jkrRn8FHicZkoibuibqxGxTDKaE7d49RJEicic7XcJ17xuhibOnpW7rrmsR40w/0?wx_fmt=png&quot; data-nickname=&quot;五分钟学算法&quot; data-alias=&quot;CXYxiaowu&quot; data-signature=&quot;让算法面试不再可怕！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9e59e1d0497ee98e814aafa27326a84e</guid>
<title>数据与广告（二十五）：Embedding 的起源与演化，以及序列构建与目标拟合派的流派之争</title>
<link>https://toutiao.io/k/30rfnce</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作者·黄崇远&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;『数据虫巢』&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全文共&lt;strong&gt;9665&lt;/strong&gt;字&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;题图ssyer.com&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;372&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;557&quot; data-ratio=&quot;1.1803751803751803&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvMexxWOopOqLBDkK4OcleOe5lzxnsEzQdY1jXEACgxiafU4W3MwtQSwbicRHwQESK7mzy4OlDO3HPA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;693&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;“&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 按我自己的理解，重新梳理了embedding的逻辑，并给他们造了一个江湖。&lt;strong&gt;&lt;span&gt;”&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么会今天写这个话题，其实早在系列的第十九就写过一篇&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMjM2MTY0OQ==&amp;amp;mid=2650474440&amp;amp;idx=2&amp;amp;sn=ff2baf5c700c31c6202e08ca9a506b47&amp;amp;chksm=83bcad16b4cb2400b1d0f4c6c915ddde5dc819dc3db020de06b3843deb1f36bcf239ccc0c9e9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《数据与广告系列十九：推荐召回与广告LookAlike，万物皆可Embedding》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《数据与广告系列十九：推荐召回与广告LookAlike，万物皆可Embedding》&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但总感觉意犹未尽，以及经过更长一段时间的思考以及在思考的过程中不断吸收新的知识，再加上近一段时间也确实在研究这块的广告相关的业务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，有必要再换一个角度或者站在另外一个高度再来看embedding这个东西。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7627118644067796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvMexxWOopOqLBDkK4OcleOe4f1s3S39xWsicbxtSq1O8sylvTAh0F7Dw1eBiaPAvLLWvHQ7COTvia3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;59&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.0769230769230769&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvMexxWOopOqLBDkK4OcleOj6rvROR3uPaBiaqickoY94Qh9tGA9vG7aWAiamgBOiag7cnialLkuvxk9Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;52&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;01&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;Embedding的起源&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至于embedding是什么东西，这里就不再做科普性质的陈述了。但说到他，大部分人下意识的会跟2013谷歌发布的word2vec联系起来，这是一种针对于word进行embedding化的模型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然word可以embedding化，那么其他item为什么不可以？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;word可以借助句子的关系进行word的embedding，本质上还是依赖于句子对于word的组织关系，并且构建word在句子词窗内的概率积最大化的拟合逻辑，并通过word的权重映射成look up table，最终产生了word对应的embedding这种副产品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于word2vec来说，这是其目的，但从训练模型的角度上说，是中间副产品产出。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;326&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5641025641025641&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywibUrAmu1uzuSu5H4ADu8tnSib5uW1eHrX530OwibkeA2O9N5megSecyicIw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1014&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;图01&lt;/span&gt; word2vec三层网络结构图&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，word可以这么搞，其他item也可以这么搞，关键在于word可以通过句子构建关系，其他item有没有类似的序列关系构建逻辑以及从业务上支撑其合理性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;显然是有的，回答完这个问题，那么万物皆可embedding就开启了一条康庄大道。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这也是通过item与item关系构建embedding路子的进化源点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么特意强调通过item与item关系构建embedding，因为还有不通过item之间关系构建embedding的逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;笔者觉得最早严谨逻辑可以回溯到2014年Facebook的《Practical Lessons from Predicting Clicks on Ads at Facebook》论文。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这篇论文突破了模型Ensemble的传统思路，传统逻辑都是&quot;横向&quot;的，比如结果层加权，或者类似单树模型到随机森林这种弱模型堆叠到强模型的方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但这篇论文提供的是一种“纵向”的思路，有点像“套娃”，也开启了非end2end模型的思路，而其中多个模型的分界点就在于embedding作为特征的使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回到这篇论文，或者说这个非item关系之间挖掘embedding的话题上，这篇论文提供了一种新的思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即通过与后续模型有共有的拟合目标，通过建立相同目标的方式，获取到前一个模型的中间结果，来作为特征embedding的描述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这篇论文中，其实就是多树模型的叶子节点01表征，天然的向量表示方法呀，纯天然的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;421&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7283950617283951&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywib8fAcAr0ZyEeMu15JuZ7vZibOiaLVRXdvg2lHT8EmrG33PciaYqO7Ojyew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;972&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图02 Facebook论文中利用树叶子节点做线性模型特征输入的逻辑&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在后续模式中，突破了树的末端叶子节点表示方式，也有基于softmax函数的输出作为embedding的，也有基于FM的中间结果特征隐向量（参考&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMjM2MTY0OQ==&amp;amp;mid=2650474311&amp;amp;idx=1&amp;amp;sn=594bcf22c2c26325aa51fb4b9521c5b6&amp;amp;chksm=83bcad99b4cb248f5315917f5a8779b2ba813f9d9f17a9b061f81242becdeea5df23458ff62d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《数据与广告系列十四：智能定向&amp;amp;基于FM的标签组合推荐思路》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《数据与广告系列十四：智能定向&amp;amp;基于FM的标签组合推荐思路》&lt;/a&gt;）作为embedding，但更多的可能利用深度学习网络中的权重参数作为embedding。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但不管怎么搞，这篇论文感觉更像是这条路子的一个源点，代表了另外一条非word2vec系列的思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，从目前看embedding的生成分成了两派，一派笔者称之为“序列构建派”，一派笔者称之为“目标拟合派”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但embedding的话题能够持续炸裂，不在于其起源于哪个模型，又或者分属什么派别，而在于其具体需要解决什么问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正是因为其要解决的问题一直存在，并且有不断深入的可能，才有embedding相关技术和模型的不断进化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7627118644067796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvMexxWOopOqLBDkK4OcleOe4f1s3S39xWsicbxtSq1O8sylvTAh0F7Dw1eBiaPAvLLWvHQ7COTvia3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;59&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.0769230769230769&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvMexxWOopOqLBDkK4OcleOj6rvROR3uPaBiaqickoY94Qh9tGA9vG7aWAiamgBOiag7cnialLkuvxk9Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;52&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;02&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;Embedding的进化-序列构建派&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们先来看笔者独家取名的“序列构建派”，为什么给他取名叫序列构建派，他能够解决的是什么问题，以及对应其进化的路径是什么。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们上两篇文章&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMjM2MTY0OQ==&amp;amp;mid=2650474676&amp;amp;idx=1&amp;amp;sn=1f6c1dfe2fde4216334c02df5253b383&amp;amp;chksm=83bca26ab4cb2b7c13bdcc871034d51a91a370cc80b85b3e962fc749aefa6be75643223f5891&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《深度学习推荐系统笔记03：被玩坏了的模型，我们要做减法》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《深度学习推荐系统笔记03：被玩坏了的模型，我们要做减法》&lt;/a&gt;中，有说到过，深度模型迭代到今天的程度，每个维度都被玩坏了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而其中折腾的最最最多的维度，当然是特征，而如果说寄托于主模型本身对于特征的一些潜在的内涵进行深入理解和挖掘，还是比较难的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，把特征item拆解出来独立建模，甚至挖掘里头更深层的内在含义，是一种非常标准的做法，这也是序列构建派embedding模型的进化主线动力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更何况还有很多场景中，单一item的直接表征其内在含义太过于单薄，操作者总是希望这个item embedding的表征能够容纳更多含义，这也是一种不得已而为之的方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，总的来说，问题的是清晰的，即如何embedding化，让这个item包含更加的丰富的含义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那我们正式开始序列构建派的进化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;13&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;strong&gt;word2vec的原始逻辑&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按word2vec的做法就是，通过句子的词窗截断，计算词窗内的某个词与词窗的其他词之间的共现概率积最大化，有了这个目标就好办了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考上面的部分的图1.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，word2vec看着是一个无监督的，但实际上内部是一个有监督学习，句子内部的词窗提供了word与词窗其他word的关系样本，最大化词窗内部word的概率积。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最终当这个内部有监督过程学习完了之后，对于每个word来说对应整个词表的任意一个word来说，总是一个概率权重的，映射成look up table，最后在做pooling，单个word的任意长度的embedding就出来了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;11&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;从word进化到万物。&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本质关系没变，寻找天然（类似句子）或者非天然（根据业务逻辑强行构造）的item关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以一个用户操作手机中的APP为例，一个时间段内A用户按时间顺序打开了a、b、c、d四个APP应用，那么把abcd看成一个句子，把APP应用看成word，然后我们按照word2vec的方式去计算APP的embedding，可不可以？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，word2vec的自身原理没啥毛病，所以，这个场景的可不可以，取决于abcd这种序列的构建合不合理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于一个用户来说，其使用APP的行为是有一定规律可循的，例如，有些用户喜欢刷完微博玩会儿游戏，有些用户喜欢听完音乐然后去看场电影，或者说在鲁班不断阵亡的间隙跑出来微信聊天跟别人吹牛逼号称国服鲁班第一。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，当这种逻辑规律适用于很大一部分人的时候，这意味着这种用户使用APP的行为序列是有参考性的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只要有参考性，那么意味着这种逻辑大概率是可以套用word2vec那一套逻辑的，最终用embedding来表征APP，并且embedding之间还能具备一定的关联性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;直接复用word2vec，行还是不行？行也不行，行就是没啥大毛病，不行就是不够合理。人家word2vec能大胆用词窗，用词窗中的多个word的概率积作为目标拟合，常规item怎么行呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;哪有这么长的序列给你，还是以APP的行为序列为例，相邻的玩王者不断间隙切换微信还能说边玩游戏边聊天的逻辑，再往前往后去追溯，很多逻辑关系就不够强烈了，只要逻辑关系不够强烈，这种强行放在一起作为有监督的拟合样本就合适了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，item2vec（《Item2Vec:Neural Item Embedding for Collaborative Filtering》）的野心就小很多，只取相邻关系，并且将word2vec词窗中的概率积换成相邻item之间的条件概率，这一下子就从word走向了万物item。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从word走向万物item，本质在于item之间的关系构建，这也就是为什么笔者更愿意称之为“序列构建派的原因”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;9&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;衍生序列的骚操作。&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一说到万物皆可embedding，根据常规的用户行为序列的构建方式已经满足不了他“膨胀”的心了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然是关系构建，原始序列只是一个开端，为何不将不同的序列根据相同的item关联起来呢。于是线性的item关系就成了立体的网状关系，或者用更学术的说法就是图关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里就是这么干的，2014年阿里的DeepWalk（《DeepWalk- Online Learning of Social Representations》，这里不纯粹以时间先后做演化递进，而是演化方式），将序列构建的模式往前进化了一层。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如上，根据原始序列中的相同item，进行图构建，然后在图的基础上进行item之间新关系序列的构建--随机游走。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;169&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2921875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywibkX3rnib0GA2YBpXULPTxY9ZDgqEyWOJ72DH5n64Iic5Utibk8nAnHYqpA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图03 Deepwalk逻辑（图实际来自于EGES论文中对于Deepwalk等逻辑的补充图）&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，这个论文或者说进化在于，提出了一种新衍生序列的模式，从原始序列中衍生更多的序列，以及具体定义了如何衍生序列，即游走的算法流程设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;沿着这个思路，2016年的Node2vec（《Node2vec - Scalable Feature Learning for Networks》），其进化点在于衍生序列的构建算法的迭代，提出了同质性和异构性的说法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;并且可以根据诉求进行深度和广度的游走，从而产生embedding分别体现不同的特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4626865671641791&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywibLxaONlQN8HCzO1F7Lx66XicN4ckFxxicdhDzpiaFJria9q5YzjpVZdLNtg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;670&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图04 Node2vec广度和深度遍历逻辑&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有点像更多去挖掘相邻关系（比如听完歌之后看小电影，边玩鲁班边聊天这种逻辑关系），还是挖掘纵向的趋势关系（比如有些总是喜欢刷完微博之后上网课，上完网课之后再玩游戏，玩完游戏之后可能有点罪恶感又学会儿习）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;14&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;融入自然属性构建的图边。&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说到序列构建派的embedding进化，阿里在这条路上越走越远，已经不在满足于说单纯依赖于行为序列去构建了，有没有其他方式去构建，或者说补充进来？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;显然是有的，除了item的行为序列，其自身的属性也是一个有用的信息，属性相关性不也是可以构建item与item的关系吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以2018年的EGES论文（《Billion-scale Commodity Embedding for E-commerce Recommendation in Alibaba》）就很好的体现了这点（其实他是为了解决冷启动问题，即初始序列不够丰富的情况下，如何让embedding也变得可用好用，那就让自然属性也进来吧）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;412&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7123893805309734&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywibRr62ArsjjtO4apmRBDWfUA45yRbsRNXt0icAsUnMaQugzRIJZA38Xvg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;678&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图05 EGES中side information的embedding加权融入方式&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在笔者看来EGES最大的进化点在于行为序列的构建逻辑上进行了突破，不再满足于行为序列，将自然属性纳入到序列构建逻辑中了，至于论文中具体用什么属性去构建side information，以及这种side information embedding如何跟deepwalk产生的原始embedding加权融合，则是细节问题了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;8&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;从同质到异构。&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;序列构建派还有没有其他进化方式？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有。2017年的HERec论文（《Heterogeneous Information Network Embedding for Recommendation》），其最终目标虽然是推荐，但构建序列，获取embedding相关的内容其实还是蛮有意思的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;209&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.360813704496788&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywibyl3DriapSSsl9pKAiaDg8K3dKeRp2ddpb54YBtwkNIUsQ4plRhe4IOiaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;934&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图06 HERec整体逻辑图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其核心的进化点在于，过去构建item的序列构建，核心还是同质item进行构建，哪怕是EGES都没有逃脱这个范畴。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HERec举了看电影的例子，用户-电影-导演（如果你想的话，还可以引入演员，电影类型等item），所以是一个三类item（把user也看成一类item）之间的关系，只要有倾向关系的，都可以通过图关联起来，只要有图，就可以生成序列。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至于其中的衍生序列构建逻辑，那就自己想了，原始论文中也提供了一种思路，按其术语就是UMU，UMDMU，MDM几种关系，最终分别生成user序列和movie序列，你要继续生成director序列都行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;274&quot; data-backw=&quot;536&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5111940298507462&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywibpRf1MSBYEtGQ1icrTIrnwBoUYdzO4tUhdic1GMGmH1h8h2FdnKpoauUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;536&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图06 从异构到基于mate-path的序列衍生&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至于论文后面，获取到embedding之后，则是推荐的部分了，并且原论文是直接利用评分矩阵，其实有点像矩阵分解的套路，只不过输入的替换成了已经处理好的user embedding和movie embedding，这里我们讨论embedding就不深入下去了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结下来就是通过不同的Node（或者我们可以认为是不同的item），以及Node之间本身的关系，构建起一个Heterogeneous Information Network（HIN）网络，然后提出meta-path的说法（UMU，UMDMU，MDM）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本质上分别就是借助movie的关联，从而获取到user的关联，借助director即导演与movie的关联，以及user与movie的关联，最终也能获取到user与user的关系序列，同理通过导演之间的关联，获取movie序列（其实从UMU也能获取到movie序列）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只要有了序列，一切又回到了最初的源点，万变不离其宗了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;16&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;真正从异构逻辑中进行知识迁移。&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;序列构建派如果还想进一步演化，还能怎么进化呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们再来看一篇论文，微信2020年在CIKM发表的《Graph Neural Network for Tag Ranking in Tag-enhanced Video Recommendation》。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这篇跟HERec有点类似，其embedding的骚操作只是其过程，而不是目的，目的是解决其业务问题。但并不妨碍我们将它看成是序列构建派的更进一步的进化逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单说下就是微信看一看场景，每个视频下面放若干个video自带的tag，但展示位有限不能全放，但如何根据用户的信息来个性化的给用户展示呢？如果用户喜欢某个Tag，点击进去之后是对应Tag的视频集合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，目的来说就是寻找user与tag的最佳匹配关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywibewdwuxljBEuMRGr3QjN3162ss2tibjiaE6b9rKG3ckKR2yjZHIGNySvQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图0&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; GraphR&lt;/span&gt;&lt;span&gt;T模型&lt;/span&gt;&lt;span&gt;的背景逻辑&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果直接对user和tag的关系建模，有点难搞，数据太少，而且tag的量也不多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其主逻辑做法就是，寻找一种tag的embedding表示方法，然后用user过去一段时间有过正交互（比如点击过的tag）tag，从而生成user embedding，最终在线计算的时候，直接计算user embedding与候选tag embedding的内积，根据内积来排序，选取若干个tag进行给user展示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以进一步浓缩问题就是，如何寻找一种合理的tag embedding表示方法。不用脑袋的做法就是上word2vec，也不是不可以，通过用户的点击序列，自然也能拿到tag的序列，所以获取到的tag embedding也是具有一定参考性的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是这种逻辑大部分会表征tag与tag之间的关系，不是那么的个性化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GraphRT的思考逻辑是&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）Tag embedding需要包含与user的交互关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）谁拥有与user的交互，当然是video。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）而video天然又跟tag&lt;/span&gt;&lt;span&gt;有&lt;span&gt;关系。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）将他们放到一个大的异构图中，通过异构关系图寻找获取tag embedding的表征方法，并且将三种item之间的逻辑关系也一起学习到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;具体过程就是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）将user, video, tag（还加上video的来源media）都放入一个大的异构图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）通过图卷积，学习到video embedding，再建模video与video之间的相关性（比如在同一个session中播放过，这个就跟其他embedding寻找的优化目标是一致的了）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）因为video embedding融合了tag embedding，因此在优化目标达成之后，一个优质的副产品就是得到tag embedding。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7411095305832148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywibvFVMdpJZHpwm3oBfwdxuhGt2IZQRfVKgvQzySc87K4Rh4wib2iarSVQQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;703&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图&lt;/span&gt;&lt;span&gt;08 GraphRT网络结构图&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，论文在实操的过程中有很多的优化点，比如user进行聚合，以减少user的稀疏性导致与tag的交互变少，担心tag embedding学习不到与各类型user的关系，还不如退而求其次堆数据寻找tag与一类用户的关联关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而最终他所需要的tag embedding只是图中的中间tag那一层的网络参数表示方式，即转换成embedding进行输出，得到tag embedding的副产品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从论文过程中可以发现，其最终user与tag的关系又回到正交互，然后计算内积的方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实如果不是user做了聚合，理论上这里user也是可以得到user embedding（当然，这里的user是指user group），那么就不需要用正交互那么硬的方式去获取user embedding了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;反正笔者觉得，如果这里的user embedding表征的是user group，那么每个user总有一个group从属关系，说不定直接用上溯一层的user group embedding去做内积，效果也会比单纯的正交互获取的user embedding效果好，当然，这里只是猜测。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;话题叉的有点远，回到tag embedding的话题，可以看到这里的进化在于，不单纯只是依赖于HIN网络去构建一个新的序列，首先就是加入了Heterogeneous field的概念。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次，HIN不再是简单的逻辑关系构建基础，而是真正的依赖于同个senssion的video关系作为优化目标，并依托于优化目标构建了一个深度网络模型，把异构图中的邻居节点信息融入到这个深度模型中，在底层输入到中间层各类embedding生成过程中，采用了不同的操作，包括卷积、FM之类等操作，然后最终生成了video节点的embedding表示，再构建一个video与video的关系优化函数（类似于word2vec的优化函数，优化目标是word在词窗内的概率积最大，但这里输入的是embedding，所以是video窗的内积积最大），基本就完成了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相对于前面的进化逻辑，GraphRT模型单纯从tag embedding生成的角度来说，其已经进化到依托于HIN并在内部构建不同类型Node之间迁移深度网络，并根据某一类的item之间的关联系做优化目标，从而优化整个网络的参数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在优化的过程中，自然而然的获取到不同item的embedding（例如论文中的video、tag、user group的embedding）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个进化方向往异构关系衍生，这是一个明确的事，此外就是不但单纯的去构建不同item的序列，将异构关系融入到item序列的复杂生成网络中，通过优化某个item序列，从而获取到多Node参与交互的各个不同类型的embedding副产品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;8&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;进化没有终点。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进化是永不停止的，如果让你继续思考，序列构建派的下一步进化还可以是哪个方向？笔者最快所能想到的就是，GraphRT+EGES，为何不在GraphTR的网络结构中加入side information的信息呢，每个item的自然属性关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如video有category类别，同个category类别，就可以构建起一个真实的video与video的关联关系，同理user也有共同属性，也可以建立一些异构图中的一些补充边。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总的来说就是，在GraphRT的基础上融入自然属性，以补充异构图的知识丰富性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在回过头来看，序列构建派的核心进化逻辑还是构建序列，或者更准确的说是构建item与item（这个item可能是同质的，也可能是异构的）的关系逻辑，依托于关系逻辑去做tag embedding的表征。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以发现，基本上所有的优化目标都是围绕word2vec的方式进行的，即优化item窗口中的概率最大化（反过来就是与随机item的概率最小化）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，这种item embedding生成之后，item与item的关系表征，我觉得毋庸置疑，但是对于我们真正做的事，其目标表征就不一定这么明确了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，更多是做为特征，或者说某种算法底层逻辑来使用，比如HERec，embedding用于做推荐的矩阵输入，GraphTR通过tag与user的正交互关系衍生成user embedding（总还是有点不太对劲，毕竟user与tag还是没有经过正紧的CTR关系建模的）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，这个学派，是真正的把预训练的这个预字发挥到了精髓，更多是把embedding作为某种进一步模型的底层输入来用，当然也有些场景直接应用于做item与item的关系计算，推荐之类的，但不算很多（NLP中会多一些）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7627118644067796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvMexxWOopOqLBDkK4OcleOe4f1s3S39xWsicbxtSq1O8sylvTAh0F7Dw1eBiaPAvLLWvHQ7COTvia3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;59&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.0769230769230769&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvMexxWOopOqLBDkK4OcleOj6rvROR3uPaBiaqickoY94Qh9tGA9vG7aWAiamgBOiag7cnialLkuvxk9Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;52&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;03&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;Embedding的进化-目标拟合派&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不与最终目标产生直接的交互关系，总觉得“不伦不类”，如果两种逻辑能说话，会不会相互喷起来？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;序列构建派原则上来说，产生的item embedding蕴含最多的信息在于item与item之间的关系，毕竟优化目标就是这个，即item中的上下文关系的拟合，所以也说得通。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回到Facebook的《Practical Lessons from Predicting Clicks on Ads at Facebook》论文，这里的树模型输出的embedding就不同了，其已经包含了与最终目标之间的关系，即CTR的预估。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个embedding本身就是奔着CTR预估去的，因此产生embedding一定是离目标最近的，或者说这种表征关系已经包含了特征与目标之间的关联关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而从他的诞生逻辑可以发现，目标拟合派的embedding生成，与其应用场景是强绑定的，这也是为何这个流派相对来说没有进化这么快，骚操作也没有这么多，毕竟应用场景来来回回就是这些。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;29&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;基于user对于item的多分类预测做embedding。&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们第一个要拆解的论文是YouTube在2016年发表的《Deep Neural Networks for YouTube Recommendations》。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;478&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8268590455049944&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywibAmLeuiae46ZkJNzuwX2mPibcehd3kPvU1PgawEiagjbqTWIC2iclHvL5yg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;901&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;图09 Youtube深度学习推荐论文网络结构图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个论文有意思的点在于，通过深度网络之后，获取到最上层的user embedding之后，利用user与video的点击关系，构建一个多分类的逻辑关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此softmax输出之后的一个概率分布，就变成了video的embedding，有了user和video的embedding之后，再做近邻或者内积计算，就可以快速做user和候选video的关系召回了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看到，这种目标优化与序列构建派是不同的，其生成embedding的过程本身优化的目标与其最终要实现的目标（user对于video的召回）是一致的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而这篇论文有意思的点在于，最上层将点击关系变成了一个softmax多分类的问题，然后利用概率分布获取user的embedding。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;5&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;双塔模型。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再来看一个更为广为人知的目标拟合派的进化方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即DSSM（Deep Structured Semantic Model），原始论文应该是微软发表的，但衍生的相关变种论文就有点多了，基本上国内大厂都发表过一些。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，这里就不过多讲述原始论文相关的东西，我们用《数据与广告系列二十二：智能化投放中扩量场景的技术实现策略》中的广告与User的DSSM常规召回网络结构图来说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;522&quot; data-backw=&quot;538&quot; data-ratio=&quot;0.9704641350210971&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqtLXmOpQks9QDxcAKZf2XwNwEAyRHg4r2sI1lsSN2YsgTEcrgKzdvYbZ0sq0DRh5PpxmJYpaTRibqQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;948&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图10 基础双塔的结构-以user*ad双塔为例&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里的场景是一个广告召回场景，其他论文对应的应用场景都大同小异，大部分是召回阶段做快速召回。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，核心产出就是user embedding以及对应另一个竖塔的item embedding，然后线上召回的时候直接做内积计算或者近邻计算，从而替代了在线推理这种偏性能代价较高的方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，至于如何在大规模embedding中快速高效寻找近邻，比如百万级等，有很多其他的优化算法，比如构建索引，做embedding聚合，这就不是这篇需要聊的话题了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回到获取embedding本身的这个话题中，从网络结构图中其实还是比较好理解的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网络结构的顶部就是优化的目标，按当前图来说就是优化user对于广告的点击概率，为了最终能够获取到user embedding和ad embedding，在计算Loss之前，两侧的信息都是不交叉的，所以像极了两个塔。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于两个塔其实交叉信息不多，所以理论上各自塔顶的embedding是可以分别表征user和ad的，由于这种embedding的空间分布是通过CTR拟合出来的，所以本身user embeding就蕴含了与ad embedding的关系，那么内积就可以一定程度上表征两者之间的关系（类似拟合目标CTR的关系）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DSSM的这种embedding的进化与上述2016年YouTube的论文比较，最大的进化点在于网络结构的进化，并且其中一个embedding不再需要通过另外一个embedding的概率分布或者类似上上面提到的正交互的方式来产生，两类embedding都是实实在在的参与了目标的拟合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而DSSM这种简单的结构，以及靠谱(融合了明确的目标)的embedding生成方式，轻量级的部署，高效的性能体现（当然跟实际在线推理逻辑比，效果会有一定的折损，但是在线基本数不可能做数十万级百万级的排序或者召回），算是目前应用最宽泛的一种召回形态了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们再来看看，为什么笔者更愿意称这一类embedding的生成方式为目标拟合派。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为这种逻辑本身就跟最终目标紧密绑定的，生成的embedding已经包含了与目标的相关关系，并且通常这种逻辑都会跟应用场景（目前来看主要就是embedding内积方式的召回或者关系计算）强绑定，并且通常一并获取user跟item的embedding，也同时让两者具备与目标关联的相关性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与序列构建派的逻辑是完全不同的，序列构建派产生的item embedding是可解耦的，甚至可以应用于其他各种更为高阶的或者更为应用层的模型中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;两种流派的定位确实是不同的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;16&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;以大博小，知识的迁移，伪双塔。&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目标拟合派的DSSM基本上就已经是巅峰的存在了，原本以为他可以慢慢进化，没想到一步到位了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实，还有一篇论文很有意思的，不巧的是，也是微信2020年发表的，论文是《Learning to Build User-tag Profile in Recommendation System》，还是看一看场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.48175182481751827&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywibSkQGuOJToVDJMTeQxsmV8klIQKqr81NrYbIEU5dSj2B5Nq11TISPnQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;822&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图11 UTPM模型微信看一看用户兴趣标签构建背景&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这篇论文的出发点，有点像基建工作，即目标是给user打上合适的tag标签，而tag来源哪呢？文章，即文章是天然带tag的（先不管这个tag这么打上的，有很多方法，NLP抽取，人工标注等等）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;340&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5889046941678521&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqsEeuicPrTmb6wVouPmhgywib2Q26KwQKCxlC9IQ1NNsogSbagadiaxHBSqwibQaxVwzJsSL7RKXibeSbw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;703&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图12 UTPM模型网络结构图&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们先忽略右侧的一些网络结构细节点，看左侧的整体结构图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;user层基本上经过了一个完整且相对标准的深度网络，巧妙的地方在于Loss层，这里又称之为Joint-loss（微信真的太会命名了），也是最核心的网络结构设计之处。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最底层user看过了历史article之后，自然会有浏览过的tag集合，而对于单篇文章也有若干tag，整个网络让user那一层的浏览tag和article的自带tag共享look up table，这样对于某一篇文章的所有tag都可以用embedding表征了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后通过user是否点击或者观看一篇文章作为优化目标（拟合-看过的概率最大，没看过的概率最小），通过反向传播来调整tag embedding的空间分布，直至模型收敛。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;纵向部分，由于纳入的都是user的各种属性，所以顶部的embedding完全可以用来表征user，而若干个tag embedding表征article，本质上是用N*tag embedding获取article embeding。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过user和article的目标拟合关系，最终tag embedding和user embedding自然就带有了文章对于user来说是否点击的关联关系表征。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，单独把user embedding和tag embedding拿出来用，即给user计算最合适的tag或者说打上相关的兴趣tag，这个理论就可以支撑住了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看到这里，可能有小伙伴会问，直接对user和tag建模不行吗，其实有点难，user缺少对tag的直接操作数据，就算有也非常稀疏，所以必须借助其他方式来做，以大博小（实际上是user与article的关系知识迁移到user与tag两者关系上），进行知识的迁移。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;知识的迁移学习还有很多其他方式，这里我们回到embedding的生成逻辑上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种embedding进化逻辑提供了一个新的思路，那就是针对于一些无法直接建模的关系，寻找具有稠密数据的关联关系，然后借助稠密数据的知识学习，最终迁移到稀疏关系上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实如果我们把user看成一个塔，article看成一个塔，又回到了DSSM，只是article这个塔是一个极简塔，只有N*tag的表示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际上是把用户是否点击一个article，抛开user层面的因素，article层面的因素都归结于其tag类型了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;严格来说是不够准确和合理的，但我们为了获取到tag的表征方式，强行将artilce的干扰因素都放到了tag上，理论上我们也可以叠加article的其他自然属性，这样就回到了标准的DSSM，并且会弱化user与tag对应于是否点击转化的关联关系，这是我们在这个场景中所不希望看到的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说到这，我们会发现，很多论文对应的模型改造，实际上会存在各种“将就”，比如DSSM本身是利用效果损耗来换取性能提升（本质上说两塔相交形成特征的交叉肯定会比走单独的塔效果会好，但是就不能把emedding单独拿出来用了），deepwalk那种游走相对于item2vec，实际上也是牺牲了部分强关联关系加强了泛化性等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但这种“将就”是为了实现某一个特定的目的，至于其他维度的考量就可以稍微的忽略之，这也是我们在解决某一类问题的时候的解决思路，无法大而全，那么就奔着我们的目标去就好了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7627118644067796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvMexxWOopOqLBDkK4OcleOe4f1s3S39xWsicbxtSq1O8sylvTAh0F7Dw1eBiaPAvLLWvHQ7COTvia3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;59&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.0769230769230769&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvMexxWOopOqLBDkK4OcleOj6rvROR3uPaBiaqickoY94Qh9tGA9vG7aWAiamgBOiag7cnialLkuvxk9Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;52&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;04&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本来这篇还想接着写embedding在广告智能化定向相关的应用的，但一不小心光写起源和进化就写了近万字了，所以，留到后面有机会再写了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对于embedding，为什么笔者愿意花时间去梳理脉络，以及以起源进化的方式去给大家呈现不同的演进逻辑，核心在于在当前的各种智能化场景中，embedding的应用逻辑越来越重要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;重要的原因在于他能解决很多场景化的事，而进一步的原因在于embedding的伸缩性和适应性真的高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所谓伸缩性和适应性，即只要item实体之间产生行为上的关联，原则上embedding就可以在不同item上进行变形和构建。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说白了就是只要产生关联关系，不管是直接的关系还是间接的关系，总是能够通过embedding+行为定义，将这种知识透传过去，适合做各种知识的预训练和知识的变形迁移。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更何况，在数据日益暴涨的今天，计算的性能要求太高了，embedding召回的这种模式太合适各种召回场景了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;写完这篇，总算把当时写《数据与广告系列十九：推荐召回与广告LookAlike，万物皆可Embedding》时候的遗憾给补回去了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有时间的话，下一篇我们会沿着&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMjM2MTY0OQ==&amp;amp;mid=2650474311&amp;amp;idx=1&amp;amp;sn=594bcf22c2c26325aa51fb4b9521c5b6&amp;amp;chksm=83bcad99b4cb248f5315917f5a8779b2ba813f9d9f17a9b061f81242becdeea5df23458ff62d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《数据与广告系列十四：智能定向&amp;amp;基于FM的标签组合推荐思路》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《数据与广告系列十四：智能定向&amp;amp;基于FM的标签组合推荐思路》&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMjM2MTY0OQ==&amp;amp;mid=2650474440&amp;amp;idx=1&amp;amp;sn=618bfbcf0f82875cb660462066462902&amp;amp;chksm=83bcad16b4cb24006f267a116f292b86aa394dfecddf8a2fb8195a83aceb61ed5975933ef3e8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《数据与广告系列二十：oCPX大势下标签定向的发展演化》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《数据与广告系列二十：oCPX大势下标签定向的发展演化》&lt;/a&gt;思路，如何借助embedding的逻辑去实现智能化的广告定向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;觉得文章有意思，请继续保持关注，别放弃治疗。&lt;/span&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;【01】&lt;/span&gt;&lt;span&gt;王喆大佬知乎专栏的几篇embedding相关的文章，就不一一列举了，反正是真·大佬，推荐关注。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【02】&lt;/span&gt;&lt;span&gt;2016《Item2Vec:Neural Item Embedding for Collaborative Filtering》。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【03】&lt;/span&gt;&lt;span&gt;2014《DeepWalk- Online Learning of Social Representations》。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【04】&lt;/span&gt;&lt;span&gt;2016《Node2vec - Scalable Feature Learning for Networks》。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;【05】&lt;/span&gt;&lt;span&gt;2018《Billion-scale Commodity Embedding for E-commerce Recommendation in Alibaba》。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;【06】&lt;/span&gt;&lt;span&gt;2020《Graph Neural Network for Tag Ranking in Tag-enhanced Video Recommendation》。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;【07】&lt;/span&gt;&lt;span&gt;2014《Practical Lessons from Predicting Clicks on Ads at Facebook》。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;【08】&lt;/span&gt;&lt;span&gt;2016《Deep Neural Networks for YouTube Recommendations》。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;【09】&lt;/span&gt;&lt;span&gt;2020《Learning to Build User-tag Profile in Recommendation System》。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;【10】&lt;/span&gt;&lt;span&gt;2016《Node2vec - Scalable Feature Learning for Networks》。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;【04】&lt;/span&gt;&lt;span&gt;2019 《Heterogeneous Information Network Embedding for Recommendation》。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9465648854961832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvMexxWOopOqLBDkK4OcleOkgZGq1Nam2wx8KHreT6gcGaEAOHDaREvvGbFfYficNNNkpHKMxiaYRIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;131&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;文章都看完了，还不点个赞来个赏~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAxMjM2MTY0OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/icr5FVCSvBqvAbqiatjxIbKnCHHZyKSOULJcPGHiaxvW0hNbicYl8BzAED552KcYM0dEgHKVLcwB77xZWVAet89Tzg/0?wx_fmt=png&quot; data-nickname=&quot;数据虫巢&quot; data-alias=&quot;blogchong&quot; data-signature=&quot;从半个大数据老鸟进化到一个大数据老鸟，偶尔码点代码，写点文章，说点故事，讲点经历，灌几口鸡汤；此外还是个超级大奶爸，梓尘兄的超级小弟，掌握了冲奶、哄娃等秘技。这里有生活，有技术，有行业，也有小文艺，喜欢你就留下。&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;226&quot; data-backw=&quot;578&quot; data-before-oversubscription-url=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/icr5FVCSvBqvKestzBFLnfCjCM3dqHibqiaNpeU4tUjKw5ehb6Pdumns43uNwbr8VWHE2qJMh1WlSZtibU81nHUdXg/0?wx_fmt=jpeg&quot; data-oversubscription-url=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqvKestzBFLnfCjCM3dqHibqiadMpRoNxpDgggQFw15AdfibagOvQNbiakdzy3icmLsyTl5G1icl3O1rB3SQ/0?wx_fmt=jpeg&quot; data-ratio=&quot;0.390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icr5FVCSvBqvKestzBFLnfCjCM3dqHibqiaNpeU4tUjKw5ehb6Pdumns43uNwbr8VWHE2qJMh1WlSZtibU81nHUdXg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8eec36c0fe6e33a8c69f3c0ad9d74fad</guid>
<title>独立开发变现周刊（第 9 期）：创造者领域融资 13 亿美元，开发者有机会吗?</title>
<link>https://toutiao.io/k/ohi2kra</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;分享独立开发产品变现相关有价值的内容，每周五发布。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;「目录」&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;1、2021年创造者经济领域融资13亿美元，开发者是其中的一部分吗?&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;2、VEED在线视频编辑器，从0到5百万美金年收入&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;3、小小的改变让生活更有意义，连续1230天(3年多)记录自己的情绪和记忆&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;4、Notion的5条极速增长策略&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;5、Twitter主页如何更吸引人？30个示例提高关注率&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;6、最佳设计🎨资源网站每个开发人员都应该收藏&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;7、GitHub Copilot：一个通过AI辅助编程的工具&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;1、2021年创造者经济领域融资13亿美元，开发者是其中的一部分吗?&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;一份新报告显示，“创造者经济”中的初创企业在2021年融资13.3亿美元，创下了纪录。这个领域出现了一个新的争论:开发者是创造者经济的一部分吗? 据VC的投资情况，已经是最近5年的总和差不多，在2016年-2020年，总金额是11.7亿美金，而2021年的前6个月的金额就达到了13.3亿美金。这意味着创作者经济将会产生更大的影响。这种由创作者主导的转变正在推动一种认可人才并奖励创造力的文化。在2021年也产生了创作者领域的独角兽公司：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在线课程平台Kajabi(融资5.5亿美金),估值20亿美金&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;个人视频宣传应用Cameo,融资1亿美金，估值10亿美金&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Patreon融资1.5亿美金，估值40亿美金&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Clubhouse融资3亿美金，估值40亿美金&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;小独角兽公司，Substack估值6亿美金，图片编辑应用VSCO，估值5亿美金，音频编辑平台Splice估值5亿美金&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;估计在创造者经济中有超过5000万人。随着越来越多的创作者将自己的粉丝从社交网络转移到货币化平台，这一数字还会继续增长。社会意识发生了转变，人们更关心工作中的成就感，更关心如何支配自己的时间，更关心做自己的老板。&lt;br/&gt;创造者经济仍然存在分歧:最富有的1%的创造者赚取了所有收入的80%。&lt;br/&gt;开发者在创造经济中处于非常有利的位置。凭借相对较低的入门成本和大量简化编码的工具，开发人员创造者可以成为这个新兴行业的领导者。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、VEED在线视频编辑器，从0到5百万美金年收入&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;VEED刚刚达到了年收入5百万美金，这个过程不总是阳光和彩虹🌈，还有艰难时刻。从2018年开始，钱已经不多了， 想融资15万美金，结果失败了。2019年达到了3万MAU。2020年达到了了1百万美金的年收入。到2021年已经达到了5百万美金的年收入。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.535&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQDAT9ZoSt3muclZYS9OibBiawUnUo6CWenym3PWN9AGt64SZY86KPq1og/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span href=&quot;https://twitter.com/sab8a/status/1408446681990025218&quot;&gt;VEED5百万收入介绍&lt;/span&gt;&lt;sup&gt;&lt;span href=&quot;#fn-VEED5%E7%99%BE%E4%B8%87%E6%94%B6%E5%85%A5%E4%BB%8B%E7%BB%8D&quot;&gt;[1]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span href=&quot;https://www.veed.io/&quot;&gt;VEED官网&lt;/span&gt;&lt;sup&gt;&lt;span href=&quot;#fn-VEED%E5%AE%98%E7%BD%91&quot;&gt;[2]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span href=&quot;https://www.veed.io/blog/startup-growth-no-budget/&quot;&gt;VEED没有预算做到5万用户&lt;/span&gt;&lt;sup&gt;&lt;span href=&quot;#fn-VEED%E6%B2%A1%E6%9C%89%E9%A2%84%E7%AE%97%E5%81%9A%E5%88%B05%E4%B8%87%E7%94%A8%E6%88%B7&quot;&gt;[3]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;3、小小的改变让生活更有意义，连续1230天(3年多)记录自己的情绪和记忆&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;你是否经常觉得生活过得太快? Marissa Goldberg用3年的时间记录了自己每天的状况，从中总结出5点和大家分享。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、第一年没有看到这样做的好处，也没有足够的数据来做出有益的生活改变，自己还会有迟疑关于这样做是为什么？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、每天提醒自己和过去相比，现在已经是一个巨大的进步。在我人生最低谷的时候，我会想起过去的那些时刻，那时我努力奋斗才走到现在的位置，这让我有更多可以继续向前的力量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、这些年来，我在事业上突飞猛进，我的财务状况也有了显著提升。回想起过去几年的忧虑和挑战，那时的经历给了自己非常大的帮助。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4、压力和疾病的关系。我可以从我的数据中清楚地看到，生病之前通常是连续的紧张日子。也许我的免疫系统受损了，或者我的身体迫使我冷静下来，但这表明了我更应该关注什么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5、小事情很重要。我以前不知道，但有些事情，如果我做或不做，看起来没什么太大的影响。但是大事情总是由一堆小决定、选择和行动构成的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;1.8283333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQ9wTEu2FaPqswsCnPeJJgicNG1okHbgNXRlLS0mc6uqTrfaiboAObOAiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span href=&quot;https://twitter.com/mar15sa/status/1409235865512128519&quot;&gt;Marissa Goldberg的帖子&lt;/span&gt;&lt;sup&gt;&lt;span href=&quot;#fn-Marissa%20Goldberg%E7%9A%84%E5%B8%96%E5%AD%90&quot;&gt;[4]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span href=&quot;https://twitter.com/petergyang/status/1409178353223954437&quot;&gt;小改变让生活更有意义&lt;/span&gt;&lt;sup&gt;&lt;span href=&quot;#fn-%E5%B0%8F%E6%94%B9%E5%8F%98%E8%AE%A9%E7%94%9F%E6%B4%BB%E6%9B%B4%E6%9C%89%E6%84%8F%E4%B9%89&quot;&gt;[5]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;4、Notion的5条极速增长策略&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;Notion是由Ivan Zhao在2012年创建的，在2018年又再次发布。发展到今天已经有4百万用户，年收入2千万美金，有40个员工的公司。一步步走来，Notion是依靠哪些策略完成的增长？下面整理了5条策略，看看是否有启发呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、产品主导&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;增长核心是由其惊人的产品驱动的。他们80%的流量来自直接搜索，6%来自付费广告。他们在2018年的Product Hunt发布中获得了巨大的流量(超过6K的投票)，带来了口碑和热情的粉丝用户。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、Subreddit&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;建立了一个119K的成员子reddit，在这里用户可以分享模板和concept的产品理念。社区的成员每天增长200多人，包括首次用户和经验丰富的用户，他们将把新用户变成专业人士。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、大使计划&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过识别社区中最活跃/最热情的用户并与他们一起工作而取得了巨大的成功。他们推出了一个名为“Notion Pros”的大使项目，寻找有兴趣更密切合作、帮助推广概念的用户。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4、降低使用门槛&lt;br/&gt;他们简化了设置-加速激活+增加留存率。他们为每个用户定制了一个入门测试，以了解他们将如何使用Notion。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5、模板增长循环&lt;br/&gt;概念创建了一个模板目录，用户可以在其中共享他们创建的模板。利用模板使体验更有价值，并鼓励用户创建模板，并在社交媒体上向社区和他们的个人受众分享模板。这样做的人越多，正向循环就越强!&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.6124721603563474&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQQgiavPruucJC7ny42vEOK0T2atESicOYls2BQere8FR22kjOicqia4iaxmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;449&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span href=&quot;https://twitter.com/growth_student/status/1408472009126957063&quot;&gt;Notion的5条增长策略&lt;/span&gt;&lt;sup&gt;&lt;span href=&quot;#fn-Notion%E7%9A%845%E6%9D%A1%E5%A2%9E%E9%95%BF%E7%AD%96%E7%95%A5&quot;&gt;[6]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;5、Twitter主页如何更吸引人？30个示例提高关注率&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;Blake Emal说上个月访问个人主页的用户中有17%关注我。而过去这个关注率只有于1%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;是如何让自己的主页变的吸引人呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一共有30多个示例框架，可以帮助你的主页转化更多的追随者，这里列出了其中的6个:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、增加社交证明&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从可信度和社交证明开始。使用“free”，“grow”，“learn”和“tips”这样的词可以加分。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.5633333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQJtXicXbib8p7NVe92zCneDKytO4HX6auqy4Gg53Ufc5acRdjTqibGQD5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、开门见山。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;告诉我你是做什么的。具体一点，非常清楚。没有人愿意花额外的30秒去猜测你在做什么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.5633333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQX7ibV53o0yMQzUlw23nocYNDYWrwXQ2q8jfLRQCyyhCgGrUicEbe4iaRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、把自己标榜为“XYZ”人。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在你的品牌中添加关键字可以帮助你被发现并更容易被记住。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.5633333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQzliar90VCdZp0HbcWjuuA90Oo5BS3pJYVrzkLQYia9uDIj2CmOwV9hBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4、要有趣，让人感同身受。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;人们喜欢有趣的人。他们不希望每件事都很严肃。那就给你的个人简介添加一些有趣的内容。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.5633333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQjZhPcTW0cCatgJuhotEdQkaqPCWUAfHEWvIP8wCJY4QnRwILQDnfbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5、告诉我有什么好处。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;人们根本不在乎你。他们关心你能为他们做什么。所以直接告诉他们Follow你能得到什么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.5633333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQWereHibcJr4Idnu74BKhuCm4ZW36H1O8icELJslgaxPCS3hFvicDHK4pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6、设定明确的内容期望。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;告诉用户应该期待你提供什么样的内容。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.5633333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQn6ezPbib2QCDzNrZZfDiby32st9yjD0ricEKJ3kWrEfLK3pRjBibHgmekw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span href=&quot;https://twitter.com/heyblake/status/1404584189664522242&quot;&gt;30个提高关注率的示例&lt;/span&gt;&lt;sup&gt;&lt;span href=&quot;#fn-30%E4%B8%AA%E6%8F%90%E9%AB%98%E5%85%B3%E6%B3%A8%E7%8E%87%E7%9A%84%E7%A4%BA%E4%BE%8B&quot;&gt;[7]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;6、最佳设计🎨资源网站每个开发人员都应该收藏&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;这篇文章是Dev.to网站上热度排名第一的文章。如果你正在寻找最好的设计资源网站吗?好吧，那么这个集合是每个开发人员都应该收藏的东西，因为它包含了最好的资源，可以帮助您开发一个令人惊叹的、引人注目的、视觉丰富的产品。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这里，你会找到最好的网站和资源与现代UI组件不同的格式，如PSD, Sketch, Figma，图标，插图等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;产品设计是每个开发人员工作中非常重要的一部分。这并不只是关于好的外观，而是关于吸引人的视觉效果和整体呈现。使用现成的资源，这样可以节省很多时间和金钱。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.42&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQ3h0nhlialtYdCHw1I8Jjnesj1quxDkQVAqbic18eBibrll1V2JgJ43ibag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span href=&quot;https://dev.to/theme_selection/best-design-resources-websites-every-developer-should-bookmark-1p5d&quot;&gt;DEV.TO值得收藏资源&lt;/span&gt;&lt;sup&gt;&lt;span href=&quot;#fn-DEV.TO%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F%E8%B5%84%E6%BA%90&quot;&gt;[8]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;7、GitHub Copilot：一个通过AI辅助编程的工具&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.6533333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQ9PTwDfQTqNRa7adyeEGmSc7tb47uxjJxcVxpefCu918JOmaotFtkHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Github推出了GitHub Copilot，一个通过AI辅助编程的工具。安装VS Code下的扩展，就可以通过AI来帮助自动填充代码。GitHub Copilot 是一个受到 OpenAI Codex 支持的新项目，后者是 OpenAI 这个非盈利组织打造的新型人工智能系统，此前已经接手了数十亿行公共代码的训练。&lt;br/&gt;官方的功能介绍：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可将注释转换为代码：你可描述自己想要的逻辑注释，然后交由 GitHub Copilot 来组装代码。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自动填充重复代码：GitHub Copilot 非常适合快速生成样板和重复的代码模式。你只需给它一些例子，然后它就会生成其余的部分。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;无需辛苦调试：所有强大的软件工程项目，都需要对功能代码进行繁重的调试。导入单元测试包，即可让 GitHub Copilot与你的实现代码进行匹配测试。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;目前还是受限使用，仅限一些测试群体，官网可以提交申请试用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQlZLVSouSiaic8uE5t38fNGqYJiciasiasmhoUNhJiaVgRZ5Yj9YmU7K5U7TQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实现方式，Copilot 编辑器扩展将开发者的注释和代码发送至 Copilot 服务端，然后使用 Codex 生成和建议单行代码和整个函数。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;picture&gt;&lt;img data-ratio=&quot;0.48&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqVl0F1spK5qQAiaEhKZk5KQ9NaIib3I2vGDqFcVYU1iblo4nsRQ0zspcJMJACW3a7mAOjhvIfia98wRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/picture&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span href=&quot;https://copilot.github.com/&quot;&gt;GitHub Copilot官网&lt;/span&gt;&lt;sup&gt;&lt;span href=&quot;#fn-GitHub%20Copilot%E5%AE%98%E7%BD%91&quot;&gt;[9]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;hr/&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;VEED5百万收入介绍: https://twitter.com/sab8a/status/1408446681990025218&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;VEED官网: https://www.veed.io/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;VEED没有预算做到5万用户: https://www.veed.io/blog/startup-growth-no-budget/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Marissa Goldberg的帖子: https://twitter.com/mar15sa/status/1409235865512128519&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;小改变让生活更有意义: https://twitter.com/petergyang/status/1409178353223954437&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Notion的5条增长策略: https://twitter.com/growth_student/status/1408472009126957063&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;30个提高关注率的示例: https://twitter.com/heyblake/status/1404584189664522242&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;DEV.TO值得收藏资源: https://dev.to/theme_selection/best-design-resources-websites-every-developer-should-bookmark-1p5d&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;GitHub Copilot官网: https://copilot.github.com/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;本内容开源，欢迎推荐或自荐：&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;https://github.com/ljinkai/weekly&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTM3NzAwNg==&amp;amp;mid=2649283022&amp;amp;idx=1&amp;amp;sn=adb38ef668a15329b87db593ed4f511e&amp;amp;chksm=bf2018cf885791d92d8e62443d4db63f84363c400ec8cd692c0aa0243daa833e05b75925c2d2&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;（第 8 期）：实操从$0开始通过Notion模板一个月内赚到$1000&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTM3NzAwNg==&amp;amp;mid=2649283008&amp;amp;idx=1&amp;amp;sn=5fe0e3f92e8290869e6e4d019861e8a8&amp;amp;chksm=bf2018c1885791d7d890ef2bf8e69dfe772cc61f1548877f75d72d785d400dd78ce082d86c1d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;（第 7 期）：让创作者的支付更简单&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTM3NzAwNg==&amp;amp;mid=2649282994&amp;amp;idx=1&amp;amp;sn=b699f1b83fd5f46e8a827253583d0abb&amp;amp;chksm=bf2018b3885791a5a1f4534474e68b81f24dde1574fc25925b3c2ff05e538404378299c64ce9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;（第 6 期）：一个Telegram机器人卖了32万美金&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.52&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLreAJeFqhwhr5x2CVZkgNaIjhHdL2SZTB8x8677GL0gtaYrNM0Qia7ibAeBwheB9q01RURlChwR4GibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;加入知识星球，和我一起做自己产品的独立变现&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>