<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>9dcab3de44bbe73fdfaea929f9d950ea</guid>
<title>面试官问：你参与的项目有什么亮点？怎么回答</title>
<link>https://toutiao.io/k/170b14g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;面试官拿到我们的简历，一般会关注两块内容，一块是专业技能，另一块是项目经历。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;简单的个人介绍后，一般会先问些偏基础的技术问题，热热身。当然也有很多面试官上来就顺着项目问。根据你介绍项目的过程细节，穿插设置一系列的技术问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;面试官一般会关注一些有挑战性的方案设计、解决了什么复杂难题，简单一句话，就是你的项目一定要有亮点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么，什么是亮点？我们的项目如何积累这些亮点？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面我们会介绍项目中一些高频亮点设计，我们平时做项目，设计技术方案时也可以多用用，积累些实战经验
。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003598&quot; data-ratio=&quot;0.9770642201834863&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfImfe1UEWUaY2htciak4tXZZ3W1H5WFCx6ERCjSEKFQBCyFYjjknicaqv5rO1MD1UUuBvicAKFm75Vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;654&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;面对复杂业务，架构设计有什么通用思路？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：业务理解转化能力、思维抽象能力、软件建模能力、高并发、高性能、高可用的分布式系统架构设计能力。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;谈谈对 DDD 的理解？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：通过实体、值对象、聚合根、领域服务、领域对象、限界上下文、资源库，指导微服务落地，将一个大的复杂业务域拆分成若干业务子域。定义领域模型（包含数据、行为），相似业务聚合。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;画下项目的业务架构图？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：要对简历的项目非常熟悉，不只是自己负责的那部分，观整体通细节。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;很多同学面试前没有系统化梳理，面试时现组织语言，给人感觉思路凌乱、条理不够清晰。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;面试前可以先自己画画系统架构，理清其中的依赖关系。同时，提炼核心有挑战的技术难点，面试时，重点介绍其来龙去脉。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;项目中用过哪些设计模式？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：工厂、装饰、克隆、代理、适配器、观察者、策略、模板、单例、责任链、门面等23种软件设计模式，这是软件开发的基本功，每一种设计模式都要非常熟悉。否则很难写出扩展性很高的代码。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;之前写过三篇文章，每一种模式都有详细介绍：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何提升系统的吞吐量？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：围绕系统的 “三高原则”，高并发、高性能、高可用，三个方向展开。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NzYyNjQzNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdmOC0H6kaQlnh3rvWF2hPpzBoAoibbfQkhLdXfEpQgd8frHoDJDH503rv3FaMK6las2rCNQY7icr6w/0?wx_fmt=png&quot; data-nickname=&quot;微观技术&quot; data-alias=&quot;weiguanjishu&quot; data-signature=&quot;前阿里P7技术专家，研究生，出过专利。负责过电商交易、社区团购、流量营销等业务。分享后端架构技能、一线大厂面试经验、团队管理等话题。欢迎关注&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;面对海量数据，什么是水平拆分、垂直拆分？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、垂直拆分可以分为业务维度、技术维度。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务维度：结合DDD领域驱动设计，将一个大的业务域拆分为若干业务子域，比如电商可以拆分为商户、商品、库存、权限、会员、营销、交易、支付、履约、订单、结算、仓储、物流、财务等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;技术维度：将一个有很多字段的表，按字段的大小、使用频率等特点，拆分为多张表。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、水平拆分&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于单台机器的性能有限，无法支撑海量数据存储。我们引入&lt;/span&gt;&lt;code&gt;&lt;span&gt;逻辑表&lt;/span&gt;&lt;/code&gt;&lt;span&gt;概念，采用集群模式，将一张逻辑表拆分成多张物理表分散存储在不同服务器，通过&lt;/span&gt;&lt;code&gt;&lt;span&gt;分表键&lt;/span&gt;&lt;/code&gt;&lt;span&gt;路由，比如：&lt;/span&gt;&lt;code&gt;&lt;span&gt;时间&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;区域&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;用户id&lt;/span&gt;&lt;/code&gt;&lt;span&gt;等。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;特点：虽然有多张表，但每张表的表结构都是一样的，区别是数据不一样。所有表的数据合并起来才是这个业务表的完整数据。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;画外音：数据量大，就分表；并发高，就分库&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;更多内容，参考  &lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484864&amp;amp;idx=1&amp;amp;sn=e25652505319d4d13dcf5fc8e265bcae&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;单台 MySQL 支撑不了这么多的并发请求，我们该怎么办？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;分库分表时，全局性主键ID有哪些生成方案？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、UUID，生成的是 32 位的字符串，虽然可以做到全局唯一性，但我们一般推荐使用整型。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、SNOWFLAKE，雪花算法，生成一个 64 位的Long类型数据。组成结构：正数位（占1位）+ 时间戳（占41位）+ 工作机器id（10位）+ 序列号部分（12位）&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、数据库号段模式，对不同的业务类型定义初始值和步长，业务系统引入SDK，本地缓存预申请一定数据量的主键ID值，满足一定的并发要求。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、TinyID，滴滴的开源框架&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、Redis 的 incr 命令&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6、Leaf，美团的开源框架&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7、Uidgenerator，百度的开源框架&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;不停机情况下，数据库扩容要怎么做？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、首先，创建好新库，应用端修改代码，采用双写机制，将数据也同步一份到新库中&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、数据迁移，将老库中的数据迁移到新库中&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、对新老数据库做数据核对，对不一致的数据做定向同步&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、开关打开，读操作切换到新库，通过线上真实流量验证数据的准确性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、经过一段时间的线上验证后，如果没问题，将老库的写操作下线&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缓存更新常用策略？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Cache aside，通常会先更新数据库，然后再删除缓存，为了兜底还会设置缓存时间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Read/Write through， 一般是由一个 Cache Provider 对外提供读写操作，应用程序不用感知操作的是缓存还是数据库。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Write behind，延迟写入，Cache Provider 每隔一段时间会批量写入数据库，大大提升写的效率。像操作系统的&lt;/span&gt;&lt;code&gt;&lt;span&gt;page cache&lt;/span&gt;&lt;/code&gt;&lt;span&gt;也是类似机制。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;写操作时，缓存和数据库如何保持一致性？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：常见的方案有以下几个&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、先更新数据库，再更新缓存。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于是两个操作，如果多线程并发情况下，很难保证线程之间的顺序，可能导致缓存的是旧数据。&lt;strong&gt;一般不推荐这种方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、先删除缓存，再更新数据库&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;两个操作，如果中间执行过程中，缓存被删除，恰好有其他线程来读数据，缓存会被重新预热旧的数据。&lt;strong&gt;一般不推荐这种方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、先更新数据库，再删缓存。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可能会导致无效删除，但是删除本身具有幂等性。该方案成本最低，&lt;strong&gt;一般推荐该方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、借助消息中间件，对缓存的数据强制维护，但也只能保证最终一致性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、不管最终采用哪种方案，Key都要设置一个过期时间，借助自身的淘汰机制保证数据的更新。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何减少接口的响应时间?&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1、减少接口的处理内容，将非核心逻辑移除，采用MQ解耦，异步化处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2、接口内部引入本地缓存和分布式缓存，提升数据加载速度&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3、引入池化技术（线程池、进程池、对象池、内存池、连接池、协程池）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;事务有哪些特性？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、原子性（Atomicity），原子性是指事务是一个不可分割的工作单位，事务中的操作要么全部成功，要么全部失败。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、持久性（Durability），事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、一致性（Consistency），事务必须使数据库从一个一致性状态变换到另外一个一致性状态。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、隔离性（Isolation），一个事务不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;分布式事务，有哪些解决方案？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、执行业务逻辑前，先插入流水任务，如果中间过程调用外部RPC接口服务或者本地数据库操作失败时，流水任务会被定时调度任务周期性触发、重试，直到成功。前提条件，所有接口服务都要实现幂等。当执行成功时，流水记录会被删除。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、基于事务消息，能保证本地数据库一定成功，其他业务系统做为订阅方，通过重试机制保证最终一致性，但要注意接口幂等。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、两阶段提交&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、引入业务状态机，初始为 init 状态（对外不可见），待所有依赖的RPC接口全部调用一遍，待所有接口的数据全部初始化，然后开始第二轮调用，将状态置为对外可见。当然，此阶段可能会部分调用失败，需要多次重试&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、TCC 模式。Try：尝试待执行的业务；Confirm：执行业务；Cancel：回滚执行的业务&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6、Seata 阿里开源框架，把分布式事务定义为由若干本地事务（分支）组成的全局事务。被全局事务管理的全部分支，将在协调器的协调下，保证一起成功或一起回滚。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面列举的方案细节，可以查看 &lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484829&amp;amp;idx=1&amp;amp;sn=60f39021b58762ea909ea5ae53434945&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;如何解决分布式事务&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何预防死锁？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：互斥条件、请求和保持条件、环路等待、不可剥夺。只要打破其他一个条件即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;什么是乐观锁？什么是悲观锁？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;乐观锁：分为三个阶段：数据读取、写入校验、数据写入。在数据进行提交更新时，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回错误信息，让用户决定如何去做，&lt;/span&gt;&lt;code&gt;&lt;span&gt;fail-fast&lt;/span&gt;&lt;/code&gt;&lt;span&gt;机制。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;悲观锁：对数据的修改持保守态度，在整个数据处理过程中，将数据处于锁定状态，期间其他用户长时间无法访问，影响程序的并发访问性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;常见的限流策略有哪些？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;接口幂等性，有哪些方案？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;code&gt;&lt;span&gt;Select 查询&lt;/span&gt;&lt;/code&gt;&lt;span&gt;天然支持幂等，而&lt;/span&gt;&lt;code&gt;&lt;span&gt;写操作&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 多次执行可能会导致数据错误，下面简单列举常见的解决方案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;insert、update&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 之前，先select 查询校验&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;表中加唯一约束&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;加悲观锁 ， &lt;/span&gt;&lt;code&gt;&lt;span&gt;select * from order where order_id= 100000 for update;&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对操作行锁定。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;加乐观锁，表中增加一个&lt;/span&gt;&lt;code&gt;&lt;span&gt;attribute_cc&lt;/span&gt;&lt;/code&gt;&lt;span&gt;自增字段，借助&lt;/span&gt;&lt;code&gt;&lt;span&gt;CAS&lt;/span&gt;&lt;/code&gt;&lt;span&gt;机制控制并发&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;有些表不适合添加&lt;/span&gt;&lt;code&gt;&lt;span&gt;唯一约束&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，可以单独建一张&lt;/span&gt;&lt;code&gt;&lt;span&gt;防重表&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，在&lt;/span&gt;&lt;code&gt;&lt;span&gt;防重表&lt;/span&gt;&lt;/code&gt;&lt;span&gt;插入成功，在操作其它&lt;/span&gt;&lt;code&gt;&lt;span&gt;业务表&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;引入状态机， &lt;/span&gt;&lt;code&gt;&lt;span&gt;update order set status = &quot;wait_seller_send_good&quot; where id=1 and status = &quot;wait_buyer_pay&quot;;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;采用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;分布式锁&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，第一次请求可以成功加锁，后续请求加锁失败，认为是重复请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;token机制，client 首先请求获取token，提交时除了业务参数外还要带上这个token，server端会对这个token核销，只能核销一次。如果 server 查询不到token，则认为是重复请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;定时任务，有哪些实现方案？&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Time，JDK自带的定时器类，与 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TimerTask&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 一起配合使用&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;ScheduledExecutorService，位于&lt;/span&gt;&lt;code&gt;&lt;span&gt;java.util.concurrent&lt;/span&gt;&lt;/code&gt;&lt;span&gt;并发包下，基于多线程。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;spring task，通过 @Scheduled 注解定义定时规则&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;quartz，开源框架&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;xxl-job，大众点评开源的一个分布式任务调度平台&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;elastic-job，当当网开源的弹性分布式任务调度系统，采用zookeeper实现分布式协调，实现任务高可用以及分片，适用于高并发等复杂业务场景。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;经历过的项目，有没有遇到过什么线上问题？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：结合自己的工作经历来讲，一个程序员肯定都经历过线上救火的场景。那么找些有技术难度的整理下，如：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;没有正确使用Redis的结构，缓存对象的粒度较大，高并发流量导致带宽不足，网络拥堵，连接无法及时释放，客户端报获取连接超时，进而引发整个系统的雪崩。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pulsar系统告警，消息堆积。经排查，某个业务需求改动，SQl没有命中索引，导致接口处理时间增加数倍，从而降低了消费速度，进而消息堆积。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;线上系统报OOM问题、内存泄露问题&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以上，只是个举个例子。不同的业务，不同的系统，不同的人，经历的线上问题也千奇百怪，可以多收集些。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cc0c0e7634f84f53e107e3c12d666c63</guid>
<title>前端如何下载文件流</title>
<link>https://toutiao.io/k/9mpcigh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;container app-preview post-body&quot;&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;如果后台返回的是文件地址，那么前端直接通过 &lt;code&gt;window.location.href&lt;/code&gt; 加文件地址，就可以下载文件；&lt;/p&gt;

&lt;p&gt;但是如果后台返回的是文件流，那么前端就需要做一些处理；&lt;/p&gt;

&lt;p&gt;其实前端处理的核心：就是将文件流转为文件，然后再模拟点击，实现前者的效果。&lt;/p&gt;

&lt;h2&gt;步骤&lt;/h2&gt;

&lt;h4&gt;1. 封装一个下载工具&lt;/h4&gt;

&lt;p&gt;这个工具的作用就是，将获取的文件流转为文件，并模拟点击该文件，实现下载&lt;/p&gt;

&lt;p&gt;先贴代码，download.js（可直接复制使用）&lt;/p&gt;

&lt;pre lang=&quot;javascript&quot;&gt;&lt;code&gt;export const download = (res, type, filename) =&amp;gt; {
  // 创建blob对象，解析流数据
  const blob = new Blob([res], {
    // 设置返回的文件类型
    // type: &#x27;application/pdf;charset=UTF-8&#x27; 表示下载文档为pdf，如果是word则设置为msword，excel为excel
    type: type
  })
  // 这里就是创建一个a标签，等下用来模拟点击事件
  const a = document.createElement(&#x27;a&#x27;)
  // 兼容webkix浏览器，处理webkit浏览器中href自动添加blob前缀，默认在浏览器打开而不是下载
  const URL = window.URL || window.webkitURL
  // 根据解析后的blob对象创建URL 对象
  const herf = URL.createObjectURL(blob)
  // 下载链接
  a.href = herf
  // 下载文件名,如果后端没有返回，可以自己写a.download = &#x27;文件.pdf&#x27;
  a.download = filename
  document.body.appendChild(a)
  // 点击a标签，进行下载 
  a.click()
  // 收尾工作，在内存中移除URL 对象
  document.body.removeChild(a)
  window.URL.revokeObjectURL(herf)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码的重点是Blob对象，详情可参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Blob&quot;&gt;MDN文档：Blob对象&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;2. 获取文件流&lt;/h4&gt;

&lt;p&gt;这里就是调用后台接口，获取文件流&lt;/p&gt;

&lt;p&gt;后台方法：&lt;/p&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@GetMapping(value = &quot;/download-file&quot;)
    public byte[] downloadFile(String contractNo){
        log.info(&quot;=== 下载合同文件 ===&quot;);
        byte[] bytes = service.downloadContract(Dict.create().set(&quot;contractNo&quot;, contractNo));
        return bytes;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前端获取文件流的方法：&lt;/p&gt;

&lt;pre lang=&quot;javascript&quot;&gt;&lt;code&gt;import { download } from &#x27;@/utils/download&#x27;
import { axios } from &#x27;@/utils/request&#x27;

async downloadFile (contractNo) {
    const res = await axios.get(this.downloadContractFilePath + contractNo, {
        // 设置返回数据类型，这里我设置的是&quot;arraybuffer&quot;;如果不设置则下载下来的pdf会是空白
        responseType: &#x27;arraybuffer&#x27;
    })
    // 调用封装好的下载函数
    download(res, &#x27;application/pdf;charset=UTF-8&#x27;, moment().format(&#x27;YYYYMMDD&#x27;) + &#x27;.pdf&#x27;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于&lt;code&gt;responseType&lt;/code&gt;可参考官网：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType&quot;&gt;XMLHttpRequest.responseType - Web API 接口参考 | MDN (mozilla.org)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;3. 点击标签a&lt;/h4&gt;

&lt;p&gt;最后我们创建一个标签a，来点击下载文件&lt;/p&gt;

&lt;pre lang=&quot;html&quot;&gt;&lt;code&gt;&amp;lt;a @click=&quot;downloadFile(contractNo)&quot;&amp;gt;点击下载&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;总结&lt;/h2&gt;


&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0c3e57fec605fd4ca7c74eb990462158</guid>
<title>架构师之路：HTTPS 底层原理</title>
<link>https://toutiao.io/k/6teeplo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;引子&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;先说说我对架构师的理解。从业务能力上，需要的是发现问题和解决问题的能力；从团队建设上，需要的是能培养团队的业务能力；从项目管理上，把控好整个项目和软件产品的全生命周期。&lt;/p&gt;&lt;p&gt;我搜索了一下架构师的培训课程，讲什么的也有。实际上是Java从入门到精通的课也冠名架构师课程；讲持久层框架的也冠名架构师课程；讲组件、中间件的也冠名架构师课程；讲分布式系统设计的也冠名架构师课程。个人意见哈，内容其实没有什么问题，但是课程开始之前至少让大家有个整体的视图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100002202&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6192&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlib6KrnXCAUC8a7Bia0vx0cuyDTyBKxJGu5ialSicFrfVxnF4v2uDVshhribo9O7HRy5H3qqTOibQIOjUAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;625&quot;/&gt;&lt;/p&gt;&lt;p&gt;熟悉https等常用技术的底层原理，可以增强解决实际问题的能力，作出正确的决策。举个例子：&lt;/p&gt;&lt;p&gt;接到安全团队的指令，要求各个团队梳理域名是否存在证书将要到期的安全风险。怎么来给团队下发具体任务呢？这个问题在文章最后总结并回答。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简单入门&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;先来回答下面两个问题：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、大家都知道使用https协议传输默认使用443端口，那什么情况下必须使用443，什么情况下不使用443？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;大家想一下端口的本质是什么。其实端口有两种，一种是物理端口，比如集线器、路由器的端口。大学的时候记得有门课叫集成电路，里面有讲到过。另一种是逻辑端口，是TCP/IP协议的端口，也常叫网络端口。本质上一个端口是用来绑定服务的，那服务器用监听什么端口，客户端就要向哪个端口发起请求。我们自己也可以写个简单的例子，写过这个例子应该很容易就能明白。&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485527&amp;amp;idx=1&amp;amp;sn=21413445605b9b2b9f883ba7b446c64c&amp;amp;chksm=fafde2f9cd8a6bef39582ee0075fcb846bf5c320dbddb0b4f0363a88f42d760109acf8ae198f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《懂了！国际算法体系对称算法DES原理》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《懂了！国际算法体系对称算法DES原理》&lt;/a&gt;也有完整的例子。&lt;/p&gt;&lt;p&gt;简单点说服务端可以自己决定什么端口提供服务。但是呢，大家各自为政，记忆起来麻烦也不便于端口管理。所以逻辑端口也进行了划分。其中0~1023是公认端口，比如80就默认是http的端口、443就是https的端口。这样约定好了，就不需要特殊来记了。所以一些对全人类开发的公网网站，就是用的默认端口。但是你自己或者公司内部用的或者和合作方商量好的，也可以用其他端口，只要服务提供方认就行。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、使用443的端口的同时，80端口还会用吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这就是涉及到https的本质了。https本质是http协议上加了一个安全层。安全层做了一些处理，http要做的事情一点也没有减少。就相当于在药粒外加了一层胶囊，本质上起作用的还是药粒呀；快递送来的海鲜放在保鲜箱里还加了保鲜袋本质还是买的海鲜呀。所以当然要用啦。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100002208&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5496277915632755&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlica9ogIjtcPcVOqXHWOvKOEnibCvSY0cgViceYialdEnea7GkyFibpHIc6g5SAJqVUjy9sLicFJDyI25dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;806&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;安全层原理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;既然https协议本质只是http上加了安全层，本文就主要将安全层是怎么实现的。当然要靠加密。加密又分成对称加密和非对称加密。要使用对称加密，客户端和服务端要有一个相同的秘钥，这个秘钥怎么能安全的传输就成了问题。非对称加密是公钥只能用来加密，私钥只能用来解密。那服务端自己存私钥，客户端来请求的时候，服务端把公钥发给它就可以了。&lt;/p&gt;&lt;p&gt;那有的朋友就问了，那别的客户端来请求是不是也拿到的是同一个公钥呀，信息就不安全了呀。没错，同一个服务端给所有的客户端返回的是相同的公钥。但是威胁网络安全的黑客需要是截获信息，不是公钥。信息发送方用公钥把信息加密了，黑客没有私钥解不开。他能拿到公钥和密文，想解开那就只能暴力破解，把所有语言文字的组合用公钥试一下看看和截获到的密文是不是一样的。如果用常用的RSA2048的话，要80年。&lt;/p&gt;&lt;p&gt;总之，非对称加密是比较安全的，但是它慢。通常加解密速度是对称加密的几百倍，信息大了速度还会快速下降。所以https协议是用非对称加密沟通一个对称秘钥。真正的信息就用对称秘钥来加解密了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CA证书&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;很多人都听过网络抓包吧。抓包的原理和黑客截获信息差不多，都是自己作为一个代理。客户端B想访问C网站，黑客D发现了。D就伪装成了C把自己的公钥发给了B。B发请求“我是B，我的提货卡号码是XBXB”到网站C时，黑客D截获了这个信息，用自己的私钥解开，之后把数据篡改成“我是D，我的提货卡号码是XBXB”发给网站C。于是本来B的东西就被D领走了。抓包也是这种充当代理的原理。&lt;/p&gt;&lt;p&gt;为了防止这一问题。客户端就需要在收到公钥的时候做一下判断，信任的公钥才使用。于是出现了一些大家都很认可的组织，它们可以颁发公钥。&lt;/p&gt;&lt;p&gt;&lt;span&gt;打个比方，在唐朝，贺知章&lt;span&gt;贺老可谓是少有的文坛官场双得意的代表，“二月春风&lt;span&gt;”&lt;/span&gt;没少光顾他家。从7品官做到3品大员，是皇帝的老铁，为国服务50年后退休皇帝了还送豪宅，后来还被追封礼部尚书。《长安十二时辰》里那个80多的老头何监就是影射的贺知章，因为他退休前的官职就是监事，人称&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;。不少诗坛大家就是受了他的推荐才与皇帝建立了通信成为了公务员。所以，&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;还有一个身份是“大唐最佳星探&lt;span&gt;”&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这里&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;就是大家都认可的组织，在&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;80多岁的时候，40多岁的李白找到&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;，请求他给自己签发一份公钥。&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;就用自己的私钥给他做了签发写了推荐信，不仅如此，还金龟换酒传为佳话。皇帝想选公务员，李白拿出了&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;的推荐信。皇帝一看，确实是&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;的笔迹，马上就给李白封了公务员。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;385&quot; data-backw=&quot;524&quot; data-fileid=&quot;100002212&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicaHJKWK9GpYbn6XoHFIbWFPbWaKPC9gY0853N9UnLEftosib1bI114UxpScpe44PoVSNthyQ5mlVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;525&quot;/&gt;&lt;/p&gt;&lt;p&gt;这里提一下，很多时候https抓包可以成功，原理是客户端很多时候并不验证证书的合法性。有个选项check=false。那至于哪些是认证机构，这个是系统预装的。可以在IE浏览器的internet选项里查到预装的证书。在中国，很多金融机构，它们的认证机构是央行。这些证书都是有有效期的，有的三年一签发、有的五年一签发。&lt;/p&gt;&lt;p&gt;上面图中有显示，证书除了公钥信息，还有数字签名信息。数字签名当然需要有信息来进行签名，具体信息就是我们在生成密钥时需要输入的那些，如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100002213&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.26510989010989&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicaHJKWK9GpYbn6XoHFIbWFZf0ic796iasDq1tsicTHuCKpHL4OOVcTODVGGvJznVRL9kDUWm3mXGZdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;回答开头的问题：&lt;/p&gt;&lt;p&gt;接到安全团队的指令，要求各个团队梳理域名是否存在证书将要到期的安全风险。怎么来给团队下发具体任务呢？&lt;/p&gt;&lt;p&gt;1、要梳理的是提供https服务的服务端，只有服务端才会需要找认证机构签发证书&lt;/p&gt;&lt;p&gt;2、只有需要外部认证的证书有过期的概念，自己签发的可以更新也可以不更新。可以通过向服务端发请求的获取到证书，查看证书是谁签发的、有效期是哪天&lt;/p&gt;&lt;p&gt;架构师经常面临着需要做出正确的决策，比如连续几天团队都在执行生产程序发布，但是后面几天大家有纪律涣散的趋势，这时候应该敏锐的察觉到并及时指出并纠正。这些都需要对原理或者事情的走向有深刻的认知才能做出正确和及时的判断。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>96e1acd6a9da5327f98e5a502d46468f</guid>
<title>如何限制进程的资源使用</title>
<link>https://toutiao.io/k/1fcuzc8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;实践验证限速效果&lt;/p&gt;&lt;p&gt;准备两台机器：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;* `instance-fj5pftdp`发包&lt;br/&gt;* `1.2.3.4`收包 (为了我避免暴露自己的虚机ip，这里用1.2.3.4代替)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在发包机器上 使用iptables限制通信，然后传输大文件，并使用tcpdump观察包速率&lt;/p&gt;&lt;p&gt;第一步：设置iptables，指令如上&lt;/p&gt;&lt;p&gt;第二步：传输大文件&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;* 使用`truncate -s 1G bigfil`创建&lt;span&gt;&quot;稀疏文件&quot;&lt;/span&gt;&lt;br/&gt;* 使用`nc 1.2.3.4 5001 &amp;lt; bigfile`传输文件&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第三步：使用tcpdump观察包速率：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;[root@instance-fj5pftdp ~]&lt;span&gt;# tcpdump -i eth0 &#x27;port 5001 and ip dst 1.2.3.4&#x27;&lt;/span&gt;&lt;br/&gt;22:52:00.743321 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [S], seq 2314647925, win 27200, options [mss 1360,sackOK,TS val 2324847321 ecr 0,nop,wscale 7], length 0&lt;br/&gt;22:52:00.780074 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], ack 1736746942, win 213, options [nop,nop,TS val 2324847358 ecr 3661297505], length 0&lt;br/&gt;22:52:00.780253 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 0:2696, ack 1, win 213, options [nop,nop,TS val 2324847358 ecr 3661297505], length 2696&lt;br/&gt;22:52:00.780516 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 2696:5392, ack 1, win 213, options [nop,nop,TS val 2324847359 ecr 3661297505], length 2696&lt;br/&gt;22:52:00.780533 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 5392:8088, ack 1, win 213, options [nop,nop,TS val 2324847359 ecr 3661297505], length 2696&lt;br/&gt;22:52:00.780538 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 8088:8192, ack 1, win 213, options [nop,nop,TS val 2324847359 ecr 3661297505], length 104&lt;br/&gt;22:52:00.780571 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 8192:10888, ack 1, win 213, options [nop,nop,TS val 2324847359 ecr 3661297505], length 2696&lt;br/&gt;22:52:00.780587 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 10888:12236, ack 1, win 213, options [nop,nop,TS val 2324847359 ecr 3661297505], length 1348&lt;br/&gt;22:52:00.816636 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 12236:14932, ack 1, win 213, options [nop,nop,TS val 2324847395 ecr 3661297542], length 2696&lt;br/&gt;22:52:00.816674 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 14932:17628, ack 1, win 213, options [nop,nop,TS val 2324847395 ecr 3661297542], length 2696&lt;br/&gt;22:52:02.513394 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 17628:18976, ack 1, win 213, options [nop,nop,TS val 2324849092 ecr 3661297578], length 1348&lt;br/&gt;22:52:02.786393 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 18976:20324, ack 1, win 213, options [nop,nop,TS val 2324849365 ecr 3661299275], length 1348&lt;br/&gt;22:52:04.485382 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 20324:21672, ack 1, win 213, options [nop,nop,TS val 2324851064 ecr 3661299548], length 1348&lt;br/&gt;22:52:04.759396 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 21672:23020, ack 1, win 213, options [nop,nop,TS val 2324851338 ecr 3661301247], length 1348&lt;br/&gt;22:52:06.457405 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 23020:24368, ack 1, win 213, options [nop,nop,TS val 2324853036 ecr 3661301521], length 1348&lt;br/&gt;22:52:07.205354 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 24368:25716, ack 1, win 213, options [nop,nop,TS val 2324853784 ecr 3661303219], length 1348&lt;br/&gt;22:52:07.953399 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 25716:27064, ack 1, win 213, options [nop,nop,TS val 2324854532 ecr 3661303967], length 1348&lt;br/&gt;22:52:09.651384 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 27064:28412, ack 1, win 213, options [nop,nop,TS val 2324856230 ecr 3661304715], length 1348&lt;br/&gt;22:52:09.924396 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 28412:29760, ack 1, win 213, options [nop,nop,TS val 2324856503 ecr 3661306413], length 1348&lt;br/&gt;22:52:11.621372 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 29760:31108, ack 1, win 213, options [nop,nop,TS val 2324858200 ecr 3661306686], length 1348&lt;br/&gt;22:52:11.894385 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 31108:32456, ack 1, win 213, options [nop,nop,TS val 2324858473 ecr 3661308383], length 1348&lt;br/&gt;22:52:13.593387 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 32456:33804, ack 1, win 213, options [nop,nop,TS val 2324860172 ecr 3661308656], length 1348&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到最开始&lt;code&gt;22:52:00&lt;/code&gt;通过了10个包，然后大概每秒可以通过1个包。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>141d7a4215ebbc3000b68759adb23f8a</guid>
<title>闲鱼：一个优秀的 Push 平台，需要经历怎样的前世今生</title>
<link>https://toutiao.io/k/476f3qd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;对闲鱼用户来说，因为闲鱼商品库存只有一件，商品的时效性很强，因此当用户关注的卖家上新、浏览的商品发生降价或者平台为用户找到一批高性价比商品时，用户期望尽快被通知。Push已经成为用户与闲鱼平台联系的重要纽带。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文将以技术同学视角，介绍闲鱼Push从离线手工投放的1.0版本进化到智能个性化的2.0版本的发展过程，详细说明遇到的问题和技术方案选型，以期给读者带来一些思考和解决类似问题的思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.40487804878048783&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DUwiayJ0Mj1GGiak1Toh4JBkgnZp9kYIHaZxyTj4QsWviaWkl9fAKK3RoWXibjsK9U43Hl6md29ib3AoH57hibqKVfbg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;闲鱼Push1.0&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当闲鱼all in无线后，平台需要把与用户相关的优质内容推送给用户，便于用户快速找到想购买的商品和感兴趣的内容。平台亟需一个Push产品化方案保证将优质内容以Push的形式触达到用户，提升用户体验。基于这样的前提，闲鱼Push1.0方案的主要思路如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 计算Push用户名单&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      a. 计算与用户强相关的优质Push场景，根据场景得到用户名单&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      b. 垂直业务根据用户画像等条件，圈选业务的目标人群&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2. &lt;/span&gt;&lt;span&gt;基于场景疲劳度过滤每个用户能发送的场景列表&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 对每个用户的场景列表进行全局择优，挑选点击率最高的场景作为目标场景&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;闲鱼Push1.0方案简单明了，流程清晰，而且离线流程方便监控告警和问题排查，满足当时的业务需求，上线后运行稳定。在很长一段时间内1.0方案的核心架构和流程没有太大变更。但随着业务发展，闲鱼Push1.0方案的一些弊端开始暴露，包括&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Push用户名单计算不够实时&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;消息卡片样式不够丰富&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Push触发时机单一&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Push场景比较少&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;这些问题最终导致Push点击率无法继续提升，触碰到1.0方案的天花板。为了解决这些问题，我们对闲鱼Push系统进行几个方面的优化升级，并最终重构了闲鱼Push系统。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;闲鱼Push1.1&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;为了给Push用户提供更好的用户体验，丰富用户Push场景，我们优先考虑从消息样式、触发时机和用户场景几个方面优化扩展现有闲鱼Push方案，优化项主要分为消息feeds流升级、Push时间个性化、实时Push等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;消息feeds流升级&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Push会沉淀到客户端的消息板块，而消息板块也是用户进入闲鱼后浏览最频繁的板块之一，消息样式最开始只支持文本消息和图片消息，这类消息样式的问题是对用户来说有效信息曝光少、而且消息样式单一。为此我们对消息展示形式进行升级，通过feeds方式展示消息，提升有效信息曝光率，优化消息样式，打造消息板块的用户心智。feeds流升级上线后效果明显，因为用户感兴趣的内容相比透出更多，UV点击率和用户次留相对提升都很大。&lt;/span&gt;&lt;img data-ratio=&quot;2.1621621621621623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1GGiak1Toh4JBkgnZp9kYIHa9N4fgv5Dyia7KzCB92WrbS4lotwjzIhLc4n1YNxqMYqkqwDn6ibcibLpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;592&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;第一条为feeds流消息，之后是图片消息，相对来说，feeds流消息可以透出更多有效信息&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Push时间个性化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;闲鱼Push1.0方案主要支持的是定时批量Push，实际的运行情况是定时批量给目标用户发Push。Push触发时机比较单一，人为造成流量较为集中，增加系统稳定性风险；另外统一的触发时机并不适用于所有用户，存在对部分用户打扰的情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对这种情况，我们优化了Push触发时机，由算法根据用户行为计算预测每个用户的触发时机。算法将用户相对平均的分在一天之中，在用户相对活跃的时间段将Push触达给用户，减少对活跃用户骚扰，也使得Push触达的用户群体分层更加合理健康。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;实时Push&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;闲鱼Push1.0方案主要覆盖的是用户相关离线场景，对用户实时行为产生的场景覆盖不够，而且这类场景较离线场景相比实时性更高，对用户来说相对更重要。针对这个问题，我们增加了对实时场景覆盖，将用户行为抽象成关系模型，以IFTTT作为系统整体触发机制。当关系一侧的用户行为发生变更后触发对另一侧的触达，这类场景实时性更强，和用户强相关，提升用户Push场景丰富度，增强用户粘性。实时Push场景上线后Push点击率相对离线场景提升1倍以上，具体技术细节可参考《&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA==&amp;amp;mid=2247484550&amp;amp;idx=1&amp;amp;sn=f3b0c6760781966a0687ba3eb2a0b167&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;闲鱼IFTTT&lt;/span&gt;&lt;/a&gt;&lt;span&gt;》。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上是我们针对闲鱼Push1.0的功能优化和增强，通过这些能力也扩展支持了更多场景和业务，最终组合在一起成为闲鱼Push1.1版本。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;闲鱼Push的今生&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;闲鱼Push1.1整体上线后极大提升了用户Push场景丰富度和用户体验。随着对Push和用户理解的深入，我们发现还有优化提升的空间，包括：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;平台视角不够，现有的优化更偏向点对点，需要从闲鱼Push平台视角将这些点连成线形成合力，产生1+1&amp;gt;2的效果&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;现有闲鱼Push流程的本质还是离线计算，算法无法进行更加实时的个性化和全局择优，对用户体验有一定影响&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;场景配置不够灵活，新增场景成本高，制约了丰富用户Push场景的进度&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;基于这些原因，我们最终对闲鱼Push系统进行重构和升级，打造闲鱼Push实时智能投放平台Hermes。Hermes取自希腊神话，他聪明（智能）、行动敏捷（快）、多才多艺（多种触达），最能契合闲鱼Push实时智能投放平台的使命愿景。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;逻辑架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7560975609756098&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1GGiak1Toh4JBkgnZp9kYIHa8E6EuRmQWnZPia0qyI5dv59Ik1X9b0lVSIYDQ847Yib9kklfVlvx3Qgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1394&quot;/&gt;&lt;span&gt;Hermes架构与闲鱼Push1.0完全不同，以实时为目标，在场景素材准备、算法全局调优和Push发送等关键环节实现实时或准实时，提升Push内容时效性；另外从平台角度出发，将Hermes分为配置中心、匹配中心和任务中心，各个子系统定义交互的数据协议，彼此没有强依赖。三个子系统的作用分别是：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;配置中心&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;配置中心负责维护平台核心数据模型，给业务方提供页面操作配置Push场景和素材，降低业务方接入成本；并且把配置数据以离线全量和实时增量的方式同步给算法模型，作为匹配依据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;匹配中心&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;匹配中心又称为算法择优中心，匹配中心负责训练算法择优模型，根据场景和素材配置为每个用户个性化筛选，根据每个素材历史点击率数据排序，根据用户近期行为召回用户最有可能感兴趣的素材和个性化内容。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务中心&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务中心负责Push触发时机和实际触达，任务中心核心支持定时触发、实时触发和时间个性化触发，目的是对Push触发方式收口，为不同的业务和场景选择不同触发方式，帮助业务实现业务目标。另外是对触达进行收口，方便平台编排触达计划，包括触发时间和发送量级，保证达到业务目标同时不会对Hermes和业务下游系统造成过大瞬时压力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;业务效果&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Hermes平台上线后效果非常明显，主要表现为：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Push点击率相对提升达到两位数&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用户场景覆盖量直接翻倍&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Push点击激活的DAU也超过历史最高水平&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;本文介绍了闲鱼Push从前世离线计算的1.0版本，发展到多项功能优化的1.1版本，最终进化成今世的实时智能投放平台的全过程，其实闲鱼Push的每个阶段都契合当时业务发展需要，但对于用户体验的无限追求最终产出了闲鱼Push实时智能投放平台Hermes。希望这种方式可以帮助读者理解闲鱼Push发展的业务背景和技术方案选型考量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;本文作者：闲鱼技术团队（剑辛&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94156&quot;&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;106538&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;48%&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;289&quot; data-fileid=&quot;100003773&quot; data-ratio=&quot;0.2777777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Ly9fQtHVgNkuCfFNcmicqw7L54RWPSY1wwnISbQFZxDBiauric3pIggNQRe6ibjJzgxslMPicgodmdchVbsexLE70icQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;span data-mce-style=&quot;font-size: 9px&quot;&gt;点击文末&lt;/span&gt;&lt;strong&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;了解更多 mPaaS 消息推送更多详情。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>