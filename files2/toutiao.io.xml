<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>13d0ea37fe1e4a357fbf0bec787ee5e1</guid>
<title>一个小破网站，居然比 Python 官网还牛逼</title>
<link>https://toutiao.io/k/noxp0wx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;前两天，我发现有个前同事写的 Shell 脚本经常在出问题，考虑这个脚本一直挺不稳定的，维护起来也挺头疼，原因是 Shell 脚本写稍微复杂一点的逻辑，代码就变得十分臃肿，对比 Python 真的太差劲了。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;这个 Shell 脚本中有一个功能是检查机器上的 rpm 包与中心端的包版本进行对比，在本地用 Shell 取 rpm 信息很方便，但要取 rpm 包版本，其实是很难的。&lt;/p&gt;&lt;p&gt;原因是 rpm 包的版本格式分非常多种，根本无法使用简单的字符串分割来取得具体的版本号，更不用说版本对比。&lt;/p&gt;&lt;p&gt;在重写这个功能的时候，我在找到了能直接获取 Linux 机器 rpm 包的 Python 接口库，这个库要使用 yum 进行安装&lt;/p&gt;&lt;pre&gt;&lt;code&gt;yum install -y rpm-python&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;装上之后，就可以直接导入使用。&lt;br/&gt;由于不是通过 pip 安装的，因此 rpm-python 是安装在&lt;code&gt;/usr/lib64/python2.7/site-packages/&lt;/code&gt; 目录下的。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt; rpm&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; rpm.__path__&lt;br/&gt;[&lt;span&gt;&#x27;/usr/lib64/python2.7/site-packages/rpm&#x27;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;# &lt;/span&gt;&lt;span&gt;1. 问题来了&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;接口库找到了，也安装上了，可问题是。。。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;该怎么用？？？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;你以为百度一下就知道了？&lt;/p&gt;&lt;p&gt;百度出来的，关于这个库的介绍几乎没有。找到的几个也不知所云，完全 get 不到逻辑。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5684210526315789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oMGBicRvgcHcu5rr48jgPCxJHp8QEQ7VmYIAIxbLnsAK1ysJGrOMFu9fA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1710&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;于是我尝试着去该库的 pypi 和 github 上，希望找到一些 demo 啥的，先入个门。&lt;/p&gt;&lt;p&gt;看来是我想多了，要啥没啥，一片空白。。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5190839694656488&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oMSLkxLuChgNCVTib2XZN4icSFFwymibMntjoa5ohPDV16St9EFQ4voaDZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2358&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oMuf3iahPEsCd014p2lqQLUnzictYibHzoTYk3BtJRUSOfkBZm9fuWdGgicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1800&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;p&gt;使用 &lt;code&gt;help&lt;/code&gt; 查看呢？更是一头雾水，没提取到有用的信息&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7245240761478163&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oMPeIcn3txBXXWE9OCEv77WAUOJZGzRhSSiau5YB27GEaOllo1ANoxibfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1786&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;# &lt;/span&gt;&lt;span&gt;2. 神奇的网站&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;好在 Google 上还是有点用的，它把一个神奇的网站推送到了我的面前，这个网站，就是今天我要为你介绍的主角。&lt;/p&gt;&lt;p&gt;网站的主界面如下，站如其名啊，就是通过 &lt;strong&gt;代码示例&lt;/strong&gt; 来让你学习各种库的使用。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.489769820971867&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oMq4Uuw2yC1R0L7YCiaDBpLCFt85V9jkNW19hZuKkv1wcPfYLHibgtWNzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;整个网站非常的简洁，只有一个搜索框，在这个搜索框里输入你想要学习的 python 库，就会立马为你找到该库的用法示例，并且会查到当前有多少的开源项目在使用它。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4489795918367347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oMrEG36sfQ0icvYiaMSBiaIkReabnvqt44iaoIs0lSH1q08WvX8PPBfRwRNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1764&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;很明显上面的第二个包，才是我们需要的东西，点进去后，你会发现一个全新的世界。&lt;/p&gt;&lt;p&gt;在你面前的是一个又一个的完整的代码示例，这些示例系统、全面，非常适合初次学习阶段的理解。&lt;/p&gt;&lt;p&gt;需要强调的是，这些示例全部摘自开源项目，然后按照每个示例上方的链接转到原始项目或源文件。&lt;/p&gt;&lt;p&gt;若你觉得有些示例的代码写得不错，对你也有帮助的，可以给它点个赞。。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0357142857142858&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oMz5mlqGdrCdnY5qUib4xdAJugPWCRBty0yphFSpvLtV8licnmSxqMOGGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2128&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;就以 &lt;code&gt;rpm&lt;/code&gt; 库为例，来感受一下。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;获取已安装的所有所有 rpm 包&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3787528868360277&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oM8fs0ewGfg59qxia8ia8T7zCBqc5HsSK5vRxE1aicQ0zDaarmb7R0p35Bw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1732&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;检查一个库是否已经安装过？&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.351508120649652&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oMATATyBiaBhIhHlibqVeoA8WibtGWrYz8YalFicfzjKHOXXiaiaVcTjlicg4rg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1724&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;如何根据关键词搜索指定的包并精准获取其版本&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4040047114252061&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oM49A5IxHWTwTmHKTdiaOWITgpQt4WYiaEySqNqerUPUC5Lchrdc4nianMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1698&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;如何获取离线rpm包的信息&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5791962174940898&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oMTEwgaHZN0tSO9tRdG8wIIBfJmBKT3HyUJWRlNlibIhoVLvZyIXp3biaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1692&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;还有挺多示例的，这里就不一一列举了。&lt;/p&gt;&lt;p&gt;参照着上面给出的真实案例，我也整理出我属于我自己的 rpm 包的用法，比全网 90% 的文章都来得清晰易懂&lt;/p&gt;&lt;p&gt;rpm 包无非就分两种：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;未安装的 rpm 包&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;已安装的 rpm 包&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;想要获取这两种包，方式是不一样的。&lt;/p&gt;&lt;h3&gt; &lt;span&gt;获取未安装的 rpm 包信息&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt; rpm&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; ts = rpm.TransactionSet()&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; rpmhdr = ts.hdrFromFdno(&lt;span&gt;&quot;/root/librbd1-devel-10.2.10-0.el7.centos.x86_64.rpm&quot;&lt;/span&gt;)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; rpmhdr[&lt;span&gt;&quot;NAME&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&#x27;librbd1-devel&#x27;&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; rpmhdr[&lt;span&gt;&quot;VERSION&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&#x27;10.2.10&#x27;&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; rpmhdr[&lt;span&gt;&quot;RELEASE&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&#x27;0.el7.centos&#x27;&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; rpmhdr[&lt;span&gt;&quot;ARCH&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&#x27;x86_64&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt; &lt;span&gt;获取已安装的 rpm 包信息&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt; rpm&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; ts = rpm.TransactionSet()&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; query = ts.dbMatch(&lt;span&gt;&quot;name&quot;&lt;/span&gt;, &lt;span&gt;&quot;librbd1&quot;&lt;/span&gt;)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; query.count()&lt;br/&gt;&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; pkg_info = next(query)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; pkg_info[&lt;span&gt;&quot;NAME&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&#x27;librbd1&#x27;&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; pkg_info[&lt;span&gt;&quot;VERSION&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&#x27;12.2.9.1.1&#x27;&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; pkg_info[&lt;span&gt;&quot;RELEASE&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&#x27;0.el7.centos&#x27;&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; pkg_info[&lt;span&gt;&quot;ARCH&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&#x27;x86_64&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但喝水不忘挖井人，以上都是从这个网站中提炼出来的。&lt;/p&gt;&lt;p&gt;本篇文章的主角并不是 &lt;code&gt;rpm&lt;/code&gt; 这个库的用法，而是上面这个网站。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;与 Python 官方网站提供的标准库示例不一样（赶紧切点题，不然有人说我标题党了）&lt;/span&gt;&lt;/strong&gt;，这个网站 ，&lt;span&gt;&lt;strong&gt;不仅涵盖了 Python 的内置库，只要你能说得上名的 Python 库&lt;/strong&gt;&lt;/span&gt;（当然你自己测试上传到 pypi 的那种库肯定不能算是吧）&lt;span&gt;&lt;strong&gt;应该都在这个网站上找到你对应的代码示例&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8671399594320487&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QB6G4ZoE185AuRII3ncniaicCRnyLoE5oMmic2I9pn9hOG4WRH6SQ2AZia3rY9qB36ickeLV1ibyRYeF0sO6k9Vvfiaww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1972&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;全站所收录的 python 库大概有将近 &lt;span&gt;&lt;strong&gt;2000 &lt;/strong&gt;&lt;/span&gt;个，对应大多数人的开发应该都能满足了，并且最重要的是，上面的示例全部来源真实的项目，因此更具参考价值。&lt;/p&gt;&lt;p&gt;这个网站的地址：&lt;br/&gt;https://www.programcreek.com/python/&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;amp;mid=2652589123&amp;amp;idx=1&amp;amp;sn=91834e9141c21903aceb42b696ef0f66&amp;amp;chksm=84656409b312ed1f092c45327efdacc7f1461ea4a88eb07fb0b3214a5c659e98ba449c1c97ac&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;AI 深情表白，火爆外网！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;AI 深情表白，火爆外网！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;amp;mid=2652587795&amp;amp;idx=2&amp;amp;sn=946f37537b3142eda68968a3828dac0a&amp;amp;chksm=84656f59b312e64f84fbe4539cf38370250428a096d3040c0893cc009b3db199c6023aa0aee0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一个「神奇」的Python库，99%的人都爱！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一个「神奇」的Python库，99%的人都爱！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;amp;mid=2652583691&amp;amp;idx=2&amp;amp;sn=189add0567c259972436e25f19453f80&amp;amp;chksm=84651f41b31296577f86e753b48b34baf771f2dd5d1be23dd63df62da06c83e319834edc4a5a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;强大的 Python 信号库：blinker 入门教程&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;强大的 Python 信号库：blinker 入门教程&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;推荐关注「Python开发者」，提升Python技能&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA4MjEyNTA5Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7TpvdeLibiaAmU69kV0SyJIicdHKNjs7Cj55MMnHdNdX7mLRzmODUgfYTIb6pQXe10QcibSsPpHib7Ap7rw/0?wx_fmt=png&quot; data-nickname=&quot;Python开发者&quot; data-alias=&quot;PythonCoder&quot; data-signature=&quot;点击获取精选Python开发资源。「Python开发者」日常分享 Python 相关的技术文章、实用案例、工具资源、精选课程、热点资讯等。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>08d1fb947c57f4c53b7af1a34232bc22</guid>
<title>猝死为何盯上年轻程序员？应该如何预防猝死？</title>
<link>https://toutiao.io/k/35zbhmv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/t8lpVibticjQ48rkicicYds7gt0ev5YzYkgwIg49Gzsib7s4qiaNSLKhibmqOFVjDD5E0WdVgVgibX85TrLZBAHLiaeDCoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;来源&lt;/strong&gt;：科普中国、丁香医生、上海嘉定&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;头条菌微信号：&lt;/span&gt;&lt;span&gt;toutiaoio007&lt;/span&gt;&lt;span&gt; ，欢迎加我，交个朋友！&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;生活中常说的「猝死」，通常是「心源性猝死」。数据统计，近年来，年轻人的猝死风险呈逐年升高的态势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般心源脏性猝死在发病前无明显临床表现，发病来得急、凶、险，也有一部分人会出现早期的心慌、头昏等不适症状。那么，年轻人该如何预防猝死？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;哪些因素可能诱发猝死？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加班、过度劳累，抽烟、喝酒、熬夜等不良生活习惯最终会导致心脑血管疾病走向年轻化。某些特定职业如IT程序员、医生、企业高管、运动员等，需更加注意自己的身体状况。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.654&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNav8bE3TFG4jRk1lruJJBCGT1dSVgpZ0GbiaL2kZCiarDYkmNaFqO48oA6AJgO4VXmJVCibRPwuL4ic175g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;猝死发生前都有哪些信号？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;身体例如颈、后背、头皮、手心等部位大量出汗；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在无激烈运动、缺少睡眠或者生病等诱因的情况下，连续出现胸闷，憋气等症状；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;经常感到肩膀、颈部、下巴、手臂疼痛，这是心肌缺血的信号；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;突然或者无缘由的心跳加剧；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;反复出现胃肠道症状，若此前并没有胃病病史，需警惕。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何预防猝死？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;保障日常充足睡眠，少熬夜、不过劳，养成良好的生活作息习惯；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;坚持运动，加强心肺功能，增强体质；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多吃一些对心脏有益的食物，避免暴饮暴食；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;保持积极乐观的生活态度；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;定期体检，防患于未然。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;（完）&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;加入「码农周刊VIP会员」，成为更好的开发者！&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavicibroqCN98y5SNT9NbfA3oHYQiaicFScHFfppgek7ZGicJiaHK45qc2zoccBibfEzIvzTsI4AB2xO2IaOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f36ab1bc56efda42147cf1448f96ea5a</guid>
<title>知乎高赞！有没有适合新手练习 Python 的做题类网站？</title>
<link>https://toutiao.io/k/th5mczx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU3Mzk1ODA5OQ==&amp;amp;action=getalbum&amp;amp;album_id=2212614638188429318#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2212614638188429318&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#Python&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;13个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU3Mzk1ODA5OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIpUwwib3ughYzyRWGgnRezhFgwicOtsUTHoYCGlVibuic6LN0mUYjVJ3jP9W5zvwwyhdrNJEqOv8X9QSQ/0?wx_fmt=png&quot; data-nickname=&quot;Python小二&quot; data-alias=&quot;pythonXE&quot; data-signature=&quot;回复1024免费领100+Python经典实战项目＆数据分析入门手册&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文整理自我的知乎回答，地址：&lt;code&gt;https://www.zhihu.com/question/442492817/answer/2333418261&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. LeetCode&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LeetCode 是一个刷算法题的网站，里面有多种语言可选 ，题目分为简单、中等和困难三个级别，可以根据自己的水平进行选择，想进大厂的话，这可能是必不可少的一关。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5859197577592733&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIrBsN8Lzh88GXD4N1Bnf8ng55l8L54cSWczNoBOsDTibAvmNuChj5sLMAwhPsqfYiavE99UkWibGtGjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1321&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网址：&lt;code&gt;https://leetcode-cn.com/problemset/all&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. PythonTip&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PythonTip 里面的练习题主要偏向 Python 基础和一些基础的算法，比较适合作为新手的入门练习题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5127245508982036&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIrBsN8Lzh88GXD4N1Bnf8ngVdicKdGNFykZnUHuPRPV3B85IpicdHuG4Lcwn9fXHfAicaKD3zcKueYDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1336&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网址：&lt;code&gt;http://www.pythontip.com/coding/code_oj&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. Coding Games&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一边玩游戏，一边挑战编程难题。Coding games 支持包括 Python、Java、C 在内的 20 多种编程语言。用户界面功能强大，可以定制。例如，你可以选择你的代码编辑器的风格：Emacs、Vim、Classic。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想提升编程技能，玩 Coding games 是一种有趣的途径。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48850881881346875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIrBsN8Lzh88GXD4N1Bnf8ngOTHaGrK2NYNQlZU6WNUId1uWsWuCAdaWPuXe63p8SwTEE3nqXJAFVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1871&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网址：&lt;code&gt;http://www.codingame.com&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. CodeCombat&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CodeCombat 是一款网页编程游戏。这款编程游戏借鉴了游戏的很多设计元素，游戏剧情十分丰富。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CodeCombat 能够学习 Python 等多种语言，这些语言能够运用到游戏设计、网页应用、App 的开发上。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4705263157894737&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIrBsN8Lzh88GXD4N1Bnf8ngG93KeVDk4DHFBWVj80eAVKAh2dwLjoOw4YDuPmqiaqibtHk41D6ZH35g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1900&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;codecombat 教学版网址：&lt;code&gt;https://koudashijie.com&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5. Checkio&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Check iO 是一个基于浏览器的游戏，你需要使用 Python 或 JavaScript 来解决问题才能将游戏进行下去（需要登录）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.619535519125683&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIrBsN8Lzh88GXD4N1Bnf8ngsUqdCibb895HWwPibg3MC7mF6gj0qBdunhNg9z4WcIDgkiaGID8sXppxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1464&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网址：&lt;code&gt;http://checkio.org&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6. Cyber Dojo&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cyber-dojo 是一个提供给程序员们练习写程序的地方。支持 Python、JavaScript、Java、PHP、Ruby 等语言。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6236111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIrBsN8Lzh88GXD4N1Bnf8ngARic3cJsjrRwDhnJJN6cQo87wrEPKIrSMKCz7z7jkC2ekVVzz67ktUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网址：&lt;code&gt;http://www.cyber-dojo.org&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;源代码：&lt;code&gt;https://github.com/JonJagger/cyber-dojo&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7. Code Monkey&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CodeMonkey 是一款非常富有童趣的网页编程游戏，玩家通过编程向怪兽小猴子传达指令，帮助小猴子吃到香蕉就可以过关了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CodeMonkey 以游戏闯关的方式进行教学，总共有 300 多个关卡，涉及到编程的各种概念。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35835995740149096&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIrBsN8Lzh88GXD4N1Bnf8ngfWp2vbmz6sS0BXnr74vWCiclXyHMzBtLSJ7SicJ1ibibpReejYT7VYkyQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1878&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网址：&lt;code&gt;http://www.playcodemonkey.com&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8. Codewars&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在战斗中进行学习，和其他人一起在真实的编程挑战中提升技巧，支持 Python、JavaScript、C#、Java、Python 等语言（支持的语言见下图）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39646869983948635&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIrBsN8Lzh88GXD4N1Bnf8ngAB8ibictH9GG80s7WxndUZknMa2glgia3EfyXLuw8EPqfID7Fudo97aDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1869&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网址：&lt;code&gt;http://www.codewars.com&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;9. pythonchallenge&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个非常有意思的 Python 游戏通关网站，每一关都需要利用 Python 知识解题找到答案，然后进入下一关。很考验对 Python 的综合掌握能力，比如有的闯关需要用到正则表达式，有的要用到爬虫。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们平常学 Python 都是按章节顺序、包或者模块来学，容易前学后忘。也常有同学说，我已经看完了编程教室的入门教程，但不知道可以做点什么。那么正好可以拿这个网站来综合测试一下对 Python 的掌握情况，以便查缺补漏。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7724601175482787&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIrBsN8Lzh88GXD4N1Bnf8ng3GTGBAVOiaANwJX9brZgLicic1qeyLKjG0hz78aPrJbUl3xLw3icZ0EvibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1191&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网址：&lt;code&gt;http://www.pythonchallenge.com&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10. Python100题&lt;/h2&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3Mzk1ODA5OQ==&amp;amp;mid=2247491678&amp;amp;idx=1&amp;amp;sn=85ee63d746b79a0177239169df1c1147&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;100 个 Pytho‍n 小例子（练习题）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;100 个 Python 小例子（练习题）&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;往期回顾：&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;&gt;分享|点赞|在看是最大的支持&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>59ffbc20fa019f7c90a0ddf5919c1c67</guid>
<title>流批一体技术框架探索及在袋鼠云数栈中的实践</title>
<link>https://toutiao.io/k/rl15pv8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;场景：股票交易中K线有分时图、日线图、周线图等之分，用户股票交易完成后需要在K线上显示买卖点和成交金额。&lt;/p&gt;&lt;p&gt;数栈未实现流批一体处理方式：&lt;/p&gt;&lt;p&gt;对于上面这个场景数栈未实现流批一体前的做法是分时图的买卖点会采用Flink计算，日K、周K等的买卖点通过配置周期Spark任务进行计算，即经典的Lambda架构，这种架构的痛点是比较明显的，维护两套代码开发效率低、两套计算引擎成本高、数据口径不一致。&lt;/p&gt;&lt;p&gt;数栈实现流批一体后处理方式：&lt;/p&gt;&lt;p&gt;在数栈平台先选择创建实时采集和数据同步任务将业务库数据采集到Kafka和Iceberg，即数仓的ODS层。实时数仓和离线数仓从ODS到DWD层数据清洗和数据打宽的处理逻辑是一样的，表定义结构也是保持一致的，所以这一步只需要实现一套Flink SQL数栈平台会自动翻译成Flink Stream和Flink Batch任务即可用于实时数仓又可以用于离线数仓。实时数仓和离线数仓DWS层分别存放分时图买卖点信息和日K、周K等数据，两边处理逻辑不同所以在这一层需要根据业务开发两套SQL, Stream Flink SQL对接实时数仓DWD层数据实时计算分时图买卖点，Batch Flink SQL对接离线数仓DWD层数据周期调度计算日K、周K等买卖点数据。应用层服务直接从DWS层获取买卖点数据进行展示。&lt;/p&gt;&lt;p&gt;通过实例我们可以看到数栈选择了Iceberg作为流批一体的存储层，原因如下：&lt;/p&gt;&lt;p&gt;1. Iceberg存储的是原始数据，数据结构可以多样化；&lt;/p&gt;&lt;p&gt;2. Iceberg支持多种计算模型，是一个通用化设计的Table Format，完美地解耦了计算引擎和底下的存储系统；&lt;/p&gt;&lt;p&gt;3. Iceberg底层存储支持灵活，一般用 S3、OSS、HDFS 这种廉价的分布式文件系统，采用特定的文件格式和缓存就可以对应场景的数据分析需求；&lt;/p&gt;&lt;p&gt;4. Iceberg项目背后的社区资源非常丰富，在国内外已经有不少大公司将海量的数据跑在Iceberg上；&lt;/p&gt;&lt;p&gt;5. Iceberg保存全量数据，当流计算任务有重跑历史数据的需求时可从Iceberg读取数据然后无缝切换到Kafka即可。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>386c4abc2d188a8f3d3db6896a1f86c1</guid>
<title>Trisk：在 Flink 实现以 task 为中心的流处理动态 Reconfiguration 的 Control Plane</title>
<link>https://toutiao.io/k/fle66tm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU3Mzg4OTMyNQ==&amp;amp;action=getalbum&amp;amp;album_id=2216860909833109508#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2216860909833109508&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#FFA2021&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;17个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;span&gt;▼ 关注「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ApacheFlink&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」，看更多大咖 &lt;span&gt;▼&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAA200wNbPo2QAAAAstQy6ubaLX4KHWvLEZgBPE9IJUORsWQa38zNPgMIu6oWcZQBu5kBNDk90scNlu&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7YmwgiahniaXswqzaag756uEwnJmlNp0zub9zqRK98dKX2a40mpd4ueybibGXPHwnpEYiaTh9OPklHIgLBTGIjUOgDSCBwmEGDBkjP0g&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=x5Y29zUxcibAgiaqhbdUXVS0FeuInic7QlA8pD2K30NgqibfWHvgJpibfDCUPibicGbbnKy5RnXPN8DviaU&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/XxT9TiaJ1ibf3rFKHtt2yXrJpCDia37R3rjlyd6wzzicd55QmIWDrKHqRA/0&quot; data-username=&quot;v2_060000231003b20faec8c7e7881dc1dccd00ea35b077960b9c6a44e8a5c5efa3651fa144024c@finder&quot; data-nickname=&quot;ApacheFlink&quot; data-desc=&quot;新加坡国立大学计算机系博士毛言粲，分享基于 Flink 的研究课题#Flink#大数据#实时计算&quot; data-nonceid=&quot;14535766546363310552&quot; data-type=&quot;video&quot;/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;本文整理自新加坡国立大学计算机系博士在读生毛言粲在 Flink Forward Asia 2021 核心技术专场的分享。主要内容包括：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;背景：流作业动态调控&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;挑战：&lt;span&gt;兼顾普适、高效和易用&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;设计：以 Task 为中心的系统设计&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;实现：基于 Flink 的 Barrier 机制&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;评估：Trisk 与已有系统的性能对比&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;Tips：&lt;/strong&gt;点击&lt;/span&gt;&lt;span&gt;&lt;strong&gt;「阅读原&lt;/strong&gt;&lt;strong&gt;文」&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;查看原文视频 &amp;amp; 演讲PDF～&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n17&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;一、背景：流作业动态调控&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 cid=&quot;n17&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p cid=&quot;n18&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarBMJkIIdoIKjYwqqZiayQbkAiauwFmm1xEibuAUkXPRbRaecDia3Uia1hKRA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;流数据处理是非常重要的一种数据处理方式，它在各个领域都有广泛的应用，比如机器学习、数据分析和实时事件处理以及实时交易等领域。流处理拥有低延迟和高吞吐量的特性，它被大规模部署成以流任务实例 stream task 构成的流作业 stream job 并行处理输入的数据流，流作业会部署成并行的流任务，这些流任务实例被中间流连接，并形成一个有向无环图。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;流数据的并行处理是通过将输入数据在并行任务之间进行分区，然后每个任务独立处理分配的分区任务实时实现的，因为流作业是长期执行且会随着时间抖动，而不同的流作业有不同的性能需求，比如实时交易任务对延迟很敏感，而一些数据分析的任务对吞吐量要求很高。为了达到不同流处理作业的性能要求，动态重配置流任务的技术很关键。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n24&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarYOyic64P8rMwN9BqoH7Lhfgn22vxA5l23hx6iaokoBGyZxj6varoY07g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;常见的数据抖动有如下几类：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一，输入速率的变化。流作业是长期执行，而数据流的输入速率会不可预测地发生动态变化，导致静态分配的资源无法低延迟高吞吐地处理数据流；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二，数据倾斜。&lt;span&gt;流数据的数据分布会动态变化，比如某个数据的出现频率增大会导致对应 stream task 的工作负载变大，延迟变大；&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第三，新兴事件的产生。流数据中可能会出现新兴事件或者数据，这种数据无法被当前执行逻辑正确地执行。比如新型诈骗交易需要通过新的规则才能检测到。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n36&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarJjTLny5WENSQDtYXkDFgeZ43U1odastuPUMeGMibHUFnnZZ8DL876Mg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对不同的数据抖动，有不同类型的重配置技术来优化流作业，从而在保证资源利用率的同时，以高吞吐低延时的性能来处理流数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;针对输入数列的变化，可以通过 scaling 的方式动态伸缩资源，提高吞吐量、降低延迟；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;针对数据倾斜，可以通过 load balancing 的方式来重新分布并行执行流任务之间的工作负载，以重新达到负载均衡；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对于新兴事件的处理，可以通过 change of logic 的方式来更新流任务的执行逻辑，从而可以正确地处理新兴事件和数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n48&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarO4ibM4aaGCOX6atsPv0Sw6ewp1dvmjicDZesffqIes7VT2xEdWUyTzvQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有了不同类型的数据抖动和重配置技术后，需要考虑下一个问题就是如何动态地检测数据抖动，并选择合适的方法来调控流任务。为了解决这个的问题，通常是通过设计一个控制器来对任务进行动态重配置，控制器主要通过实时监听流作业分析症状，然后针对不同的症状修改不同的流作业配置，来做性能优化。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个过程分为三步：监听、诊断、重配置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;首先控制器可以实时监听流任务，目前流作业的控制器主要通过监听系统层面的metrics比如CPU utilization，或应用层面的metrics比如端到端的数据处理延迟、吞吐量积压等，来进行建模分析和策略判断；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;然后控制器通过控制策略来诊断症状，控制策略可以通过预定义的规则，比如CPU利用率高于一定阈值就执行scaling out，或进行模型分析，比如预测需要达到的资源分配来诊断存在的问题；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;最后控制器选择不同类型的重配置方法去动态优化流作业。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n62&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriardiaW9KnVIeuaibBwjSMiaoJahHjY8sHknlja5JycqWdfQia19nNYKibgGuA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了减少为不同流作业实现控制器的工程开销，需要有一个控制平台来对流作业进行托管。控制平台封装了 metrics 和重配置方法，并且对外提供相应的 API，从而开发者可以在流作业部署好之后通过在控制平台提交控制器，对流作业进行托管。这样的控制器也包含了自定义的控制策略，并且可以直接使用控制平台的 API 实现 metrics 的采集和重配置，隐藏了系统底层的处理逻辑，简化了控制器的设计和开发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大部分流处理系统都封装了比较成熟的 metrics 系统，因此控制平台可以基于原有系统 API 实现 metrics 的采集，然而动态重配置的支持仍是一个较大的挑战。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n68&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;二、挑战：兼顾普适、高效和易用&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 cid=&quot;n68&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p cid=&quot;n69&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarTjL7GAnc9TZS765zryxU04BqXfgtaeEicv1eogCvkde5zNqAYc6645Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;动态重配置的控制平台应当具有三种性质：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;普适性，不同类型的控制策略需要使用不同类型的重配置方法；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;高效性，重配置的执行应在短时间内完成，并且尽量不阻塞原数据处理；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;易用性，API 应简单易用，用户调用时无需知道系统底层逻辑。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n81&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarnT24IXuLbrZIPE6Eq9Z5QKre0rmsK2S1hHttIVy2FGn5AnABy9MmIg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是目前已有的解决方案只能满足上述部分性质，比如 Flink 支持动态地对流作业进行重配置，并提供了简单易用的 online interface 为用户实现控制器流作业的动态重配置。通过修改源代码和重新提交流作业的方式，Flink 的原生支持具有很强的普适性和应用性。然而重新部署也会带来很大的开销。比如资源重分配和全局的状态恢复。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Flink 重配置的具体执行流程如下：首先 JobManager 会触发一个 Savepoint 到整个流作业的 pipeline 上，Savepoint 完成之后，当前流作业的 global snapshots 将会返回到 JobManager 中，JobManager 在收到所有的 snapshots 后，终止当前的 pipeline，然后以新的配置重新部署流作业，并从当前的 Savepoint 恢复状态重新开始。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n87&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;三、设计：以 Task 为中心的系统设计&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 cid=&quot;n87&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;为了满足重配置的三种性质，我们将介绍 Trisk：以 Task 为中心的流作业控制平台。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n90&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriar3SI97POkMiaqsTu3A94mITXXABISe8lUS1vEEWGHoHG1WZKcpThg36w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上图是 Trisk 的系统架构，它支持对流处理的重配置进行定义和实现，提供了以 Task 为中心的配置抽象，这个抽象包含了当前流作业三个维度的执行配置，并且基于抽象封装了原子操作，使得配置方法可以通过在抽象上组合原子操作来定义。为了提高效率，不同于 Flink 本身提供的宗旨和重启机制，Trisk 采用了部分暂停和恢复的技术来执行重配置，并且它的封装可以进一步利用 Flink 系统中的 Checkpoint 机制来实现一致性。同时 Trisk 提供了易于使用的编程 API，有预先定义好的常用重配置 API，还将原子操作封装为 API 来让用户自定义重配置。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Trisk的工作流程如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Trisk runtime 维护了 restful API，用户可以通过接口提交控制逻辑代码。接着由 Trisk runtime 编译代码并生成对应的控制策略，它会根据当前流作业的 metrics 做诊断和重配置决策。控制策略诊断到当前运行的流作业的数据抖动后，会通过与 Trisk runtime 交互来对流作业进行重配置。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其过程如下：首先控制策略会从 Trisk runtime 中获取一个 Trisk 配置抽象，用来获取当前流作业每个 task 的配置情况，然后会根据诊断结果使用不同类型的原子操作来对 Trisk 抽象进行更新。比如，如果判断出了输入速率增高的问题，控制策略将会通过分配更多的资源来部署新的 task，并且重新分配 task 之间的工作量，来增加流作业的吞吐量。最后控制策略会通过把更新好的 Trisk 抽象送回到 Trisk runtime 中，Trisk runtime 根据更新好的配置对流作业执行重配置优化 。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Trisk 重配置的执行是通过与底层的流系统进行交互来实现的，采用了部分暂停与恢复的方法来实现工作流程，因此可以避免终止整个流作业的情况下保持一致性，并且只会对部分 task 进行更新来降低时间开销。整个过程可以分为三步：prepare-sync-update。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其流程如下：prepare 阶段，流系统基于更新后的 Trisk 抽象，找出被更新的受影响的 task，并准备这些 task 更新后的实际配置；sync 阶段，为保证数据一致性，执行期间需全局同步流作业并暂停受影响的 task，不受影响的 task 可以继续执行。这里通过 Flink 的 checkpoint barrier 机制实现这个同步过程；update 阶段，受影响的 task 将被独立更新，并在更新完成后继续执行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Trisk的三维抽象源自于流任务的三个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一步：流作业提交到流系统时，会被封装成一个 Logical Graph 里面包含了流任务的执行逻辑，其中顶点 operator 里包含了 User Defined Function，边表示 operator 之间的中间数据流，每个 operator 会使用 UDF 来处理输入的数据流，并生成输出流，流入后面的 operator。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二步：&lt;span&gt;Logical Graph 的每一个 operator 会并行运行一定数量的 stream task，且输入数据流会被分配到不同的 stream task 并行执行。每个 stream task 分配到的输入数据流被称为该 task 的工作负载配置。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第三步，这些并行的 stream task 会被部署到服务器中物理执行，每个 stream task 都会在一台机器上分配到一定的资源比如 CPU 和内存，这样的资源分配描述了 stream task 的 resource 配置。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n114&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarHtJgAb83PxRsKibAVa62U1XFzib9LW046dAabic1icDcQEQmKLvx89ibDdQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此 Trisk 的三维抽象就是包含了以 task 为中心的 execution logic，workload、resources 配置，最终形成了一个有向无环图，存放在了 Trisk runtime 中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们对抽象中的每一个维度的更新都封装了原子操作，通过对三维抽象中每一个维度执行原子操作，可以细粒度地重配置流作业，从而满足重配置的普适性。比如 scaling 可以通过分配 resources 来重配置新的 task，并重分配并行任务之间的 workload 来实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n120&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarg4osvFHCGOickjiav2Ffa0YJWgSueibUyZnb9D7uYWrBPCgcGDkjap2Jg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上图展示了一个 scaling out 的例子，由于输入速率的不均匀上升导致 task2 的负载增大、延迟上升，且 task3 的利用率也很高，因此我们需要通过执行 scaling out 来分配一个新的执行任务 task5 并转移一部分 task2 的 workload 到 task5 上，来让当前流作业能继续低延迟高吞吐地处理输入流数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Trisk 提供了常用的重配置 API，对应着我们之前提到的三种重配置方法：scaling、load balancing、change of logic，用户可以使用提供的 API 在 Trisk 上实现控制策略。这些控制策略可以编译为运行在 Trisk runtime 上的线程来动态管理流作业。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n126&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarv82uWfWicBYQg37j3pTBj4Hr0cokLrrTr0XoXtWiaDdeRKmOBaU8WOCw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上图例子显示了一个可以实现在流作业动态负载均衡的控制策略 load balance 的实现。它通过每秒检测 task 的工作负载，比如监听每个 task 的处理数据量的分布，并在 task 间的分布发生变化时重新分配 task 的 workload 来实现负载均衡。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;同时用户也可以通过基于三维抽象的原子操作来定义新的重配置方法。我们将三种原子操作封装成了 assignLogic、assignWorkload、assignedResource 三个 API。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n132&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriar5fNVOyNPc3YEs9aic60QfpuwjZrOj69BFMP6vUldGZrt6XSagKFibKAA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上图展示了 scaling 重配置方法基于对抽象执行原子操作的代码实现。通过 assignResource 来为新创建的任务分配资源，然后通过 assignWorkload 重新分配并行任务之间的工作负载来实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n136&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;四、实现：基于 Flink 的 Barrier 机制&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 cid=&quot;n136&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p cid=&quot;n137&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriar2ialpBb7icVzZqJFFW9BCu8jO2hADyiabIICoO9xk3fTYPg9Xo3IFGNCA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Trisk 控制平台是单独运行的一个后台服务，它封装提供了重配置 API。在 Flink 系统层中，也加入了一些新的组件来和 Trisk runtime 交互，并且高效执行对流作业的重配置。在 runtime 层中，controller 保存了用户自定义的控制策略和重配置方法。StreamManager 是 Trisk 的核心，它为用户提供了 API 并且维护了 web service 来接收新的 controller。在系统层中，JobReconfigCoordinator 维护 Trisk 抽象到 Flink 物理配置的映射，并协调执行重配置来保证流作业在重配置前后的数据一致性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;每个 StreamTask 会维护一个 TaskConfigManager，它会管理并更新对应 StreamTask 中的配置，来实现重配置。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n143&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarl9wqz0Jph4iarZibo3veiaE7cic937jaNOCcmRgX90O1o0eG6LlXcYPcDg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Flink 内部的组件架构如上图。JobReconfigCoordinator 存在于 Flink 的 JobManager 中，并且在每个 StreamTask 上都维护了一个 TaskConfigManager。JobReconfigCoordinator 和 TaskConfigManager 可以通过 Flink 网络层进行远程交互，实现控制逻辑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n147&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarWQ7LtdJV7MRjkV2AXuGj3aNibJk89R9QAQMlYibXy3ZPRLutt4ez82jQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上图展示了重配置在 Flink 上的执行总览。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 prepare 阶段，Coordinator 会收到 Trisk runtime 层分析好的抽象并准备好 StreamTask 的新配置。比如对 scaling 分配资源是通过获取一个新的 resource slot 实现，重分配 workload 是通过更新上游 task 的 result partition 和下游 task input gate 来实现的。对于 stateful 的 task 来，重分配 workload 还需要更新 task state backend。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 synchronize 阶段，Coordinator 会利用 Flink 原有的 checkpoint barrier 机制，对受影响的 task 进行同步和暂停从而保证数据的一致性，其过程主要是通过从 source task 开始向整个 pipeline 发送 barrier，受影响的 StreamTask 会在接收到 barrier 之后暂停并等待来自 Coordinator 的更新指令。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;同步完成后进入 update 阶段，Coordinator 会通知所有受影响的 task 去并行执行 update 来更新自己的配置。StreamTask 在更新完自己的配置后会自动恢复执行，并与上下游重新连接。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n157&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarRqBfJHsQJWtmPibVfGXwPVn13dSS0FEVibczXLojLyzunTNPRHxLaPQw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;具体的实现细节有如下几项：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，对 Trisk abstraction 内部的配置和 Flink 的 JobGraph、ExecutionGraph 做了映射，因此 prepare 阶段中 Coordinator 会去更新对应的 JobGraph 和 ExecutionGraph，然后通过 Flink 的 barrier 机制实现了重配置执行中的同步来保证数据一致性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其次，每个 task 的原子操作都尽量利用 Flink 原有的机制对 StreamTask 进行动态修改。比如 assignWorkload 是通过重新初始化一个 state backend 再重新更新上游 task 的 result partition 和当前 task 的 input gate 实现的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;重配置的具体执行流程分为以下几步：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先在 prepare 阶段，JobReconfigCoordinator 会更新 JobGraph 和 ExecutionGraph。然后根据更新情况标记受影响的 StreamTask。prepare 完成后，Coordinator 利用 barrier 机制实现整个 pipeline 的同步，从 source task 通过 inject barrier 发送到整个 pipeline。受影响的 task 收到所有上游 task 的 barrier 后会暂停并 ack 到 Coordinator 中，再向下游 task 发送 barrier。下游 task 收到 barrier 之后也执行类似的操作，受影响的 task 暂停并 ack，而不受影响的继续保持执行。所有 task 都 ack 到了 Coordinator 之后，同步结束。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来进入 update 阶段，在 update 阶段，Coordinator 会通知 TaskConfigManager 去更新 StreamTask 的配置，更新完成后与上下游重新连接，并继续执行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;至此，重配置流程结束。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n173&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;五、评估：Trisk 与已有系统的性能对比&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 cid=&quot;n173&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;我们进行了小规模实验，主要围绕以下两点目标：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一， 在 Trisk 上实现的控制器总体效果如何，是否能满足控制器的优化目标比如延迟控制？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二， 对比已有的重配置执行技术，如 Flink 原生支持和前沿的 Megaphone 机制，Trisk 的执行效率如何？&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n182&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarWibHAW8tAMuBtzm9pk1bQKV0ZG0xxftInpWQEuWcwXBWwSE54Y2NmJA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实验环境如下：我们将 Trisk 实现在 Flink-1.10.0 上，并配置了 4 个节点的 Flink standalone cluster，每个节点配置了 8 个 slots。我们使用了一个真实应用 stock-exchange 和一个合成应用 word-count 来实现。stock-exchange 是一个实时的股票交易任务，需要实时处理股票交易订单，来避免对用户的交易决策造成影响。word-count 是一个常用于数据分析中的操作，我们主要对输入流的每一个 key 进行 count。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n186&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriardQP0t7lZLIaSaicY6kkVebhFQ8jlHugGnabDgFWxznkaPic0pRIkz1fA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们在 stock-exchange 上实现了一个简单但具有代表性的 latency-aware 控制器。最初 stock-exchange 作业部署了 10 个任务，输入流是股票申报订单，输入曲线如左图所示。控制器可以通过使用 scaling 和 load balancing 来控制作业的延迟，主要根据输入速率和工作负载来作出决策。比如在第一百秒的时候，因为输入速率增大，所以做 scaling out；而在第四百秒的时候，因为输入速率降低，所以会做 scaling in。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 Trisk 和 Flink 上实现的控制器都需要大概 100 行代码，主要包含了控制策略的逻辑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实验结果如右图所示。为了展示控制器的优化效果，我们主要对比了 Trisk/Flink 的原生支持/静态配置下的 stock-exchange 作业的延时变化情况。红线是静态配置的 stock-exchange 作业，绿线是 Flink 上的控制器对流作业的优化效果，蓝线则是 Trisk 对 stock-exchange 的优化效果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;红线结果表明，虽然静态配置在开始时运行良好，但因为输入速率的增加，它无法实时处理 100 秒过后的数据，导致延迟增加了两个数量级。相比之下，使用 Flink 原生配置实现的控制器，能够适应工作负载的变化，但是在执行重配置期间会导致高延迟峰值，大概比平时的延迟高出 1~2 个数量级。而 Trisk 上做出决策的控制器展示了毫秒级的重配置完成时间，且只有可以忽略不计的延迟增量。这主要归功于 Trisk 的部分暂停与恢复技术。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p cid=&quot;n196&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4QMVmYkRicJs7EWP28PBriarCjIJ25qFWMOlccxgugc6YRWZoqBK5SLB8ezuhJvqcNU19fxRWn2jsg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;再将 Trisk 重配置执行期间的运行效果与两个现有的方法进行比较，一个是 Flink 的终止和重启机制，以及 megaphone 提出了 fluid state migration 机制，可以在 key 层面对重配置进行同步和更新。实验中我们对 word-count 使用了 load balancing，初始配置有 20 个任务，并在第 50 秒时触发 load balancing。整个过程会重分配所有并行任务之间的 workload。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了了解他们的行为，我们比较了执行重配置时的延迟和吞吐量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从延迟图可以看出，Trisk 比 Flink 重配置带来的延迟低，而与 megaphone 相比，Trisk 具有最短的完成时间，但峰值延迟相对较高。从吞吐量图中可以看出，在重配置过程中 Trisk 的吞吐量下降了，但恢复得比 Flink 快。对于 megaphone 来说，fluid state migration 需要更长的时间来完成重配置，但在重配置阶段会有更低的峰值延迟和更高的吞吐量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;总的来说，我们提出了 Trisk：以 Task 为中心的控制平台，可以普适、高效、和易用地支持重配置方法。在未来的工作中，我们也将继续探索在 Trisk 上实现更多样的控制策略，来更好地利用 Trisk 上的重配置方法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;往期精选&lt;/p&gt;&lt;/section&gt;&lt;img data-ratio=&quot;2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5hnibTDYiajnmRvWIQCGfWAicv4oStKBuibsA88FAUWg6Wmk2LP5l1mVyoZNPl9Sr6O2H8nhiagub7UDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt; &lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247495809&amp;amp;idx=1&amp;amp;sn=f37dafa2024cf63edb2f00edf9b781f4&amp;amp;chksm=fd387ec3ca4ff7d527d79307b6e849067ea2bfd9a37e958499000433920ac51020315d6d234d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4255556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu5hnibTDYiajnmRvWIQCGfWAicgh5YmA00YoRwPF5fhErH1ezV5W6SicADN3LlrcvThogryjd4mqmpcibg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247495778&amp;amp;idx=1&amp;amp;sn=3e5b3d02b652a040896855a636dc4108&amp;amp;chksm=fd387e20ca4ff73686192972dc53463a6453a76a6b2d10541641bcf1bb2f93f46d0d0cbbe0d6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4255556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu5hnibTDYiajnmRvWIQCGfWAic8bRLLJsNY9NJBaQyTWar3HD4o12EiaLLrBAOwfDHRyYAv2eria84nLqQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247495725&amp;amp;idx=1&amp;amp;sn=c32f86c775f9737faf5f1900f9cbe729&amp;amp;chksm=fd387e6fca4ff7794e6b09a2df5ff50015041000d91a7fe6c6fc49b60882cde7e807222b194b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4255556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu5hnibTDYiajnmRvWIQCGfWAicbkvkibkIj0aQvKMOsHr9JicxWkmiafgjR5tLmd2H9ne94IAK8nmPrVung/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;▼ 关注「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Apache Flink&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」，获取更多技术干货 &lt;span&gt;▼&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU3Mzg4OTMyNQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6FJHxaI14AsXuzeg4SybT0hiaCSohrIY75oiaOMzhQU7RouiafjNa76k2CtD6xxB2JqnawqFqV3zg3A/0?wx_fmt=png&quot; data-nickname=&quot;Apache Flink&quot; data-alias=&quot;apacheflinkcc&quot; data-signature=&quot;Flink 中文社区官微，Flink PMC 维护&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;更多 Flink 相关技术问题，可扫码加入社区钉钉交流群～&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100010716&quot; data-ratio=&quot;1.2078189300411524&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6PUTQaA1BP3Fb8uViccQpspmTibIYEfM7Wv6VACia9CDQfcN8huMVCafZ5s36wThUmbYRTOzMu4hd8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100010714&quot; data-ratio=&quot;1&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Z6bicxIx5naLWBBEcl44aIic1Mthe1nZiaramW5s4e8WwyCYYbTzu6uPBpgI6sxNXNymEnOYKpJpcrItUia7lS64mA/640?wx_fmt=gif&quot;/&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;戳我，查看原文视频&amp;amp;演讲PDF～&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>