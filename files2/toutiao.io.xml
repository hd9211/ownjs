<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>b8f069a011c02358777cf6ae1549932a</guid>
<title>轻轻松松打印网页并生成 pdf 文档</title>
<link>https://toutiao.io/k/gs6z30z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;
      
      
      
      &lt;p&gt;&lt;a href=&quot;https://github.com/chromedp/chromedp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chromedp&lt;/a&gt;是一个更快更简单的支持&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome DevTools Protocol&lt;/a&gt;协议的Go库，它是目前最流行的headless浏览器库之一，你可以使用它做很多只能通过浏览器才能执行的任务，比如网页截屏、网页渲染测试、下载视频、模拟登录等，今天我介绍它的一个有用而且很简单的功能：为一个网页生成一个pdf格式的截屏,更多的例子你可以查看官方示例&lt;a href=&quot;https://github.com/chromedp/examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chromedp/examples&lt;/a&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt;: 未经作者同意本站文章不允许转载或者洗稿再发表，技术干饭人请挺直脊梁!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先有一点，你需要安装chrome，这样chromedp库才能通过cdp协议调用chrome执行任务(动作)。&lt;/p&gt;
&lt;h2 id=&quot;为网页生成pdf&quot;&gt;为网页生成pdf&lt;/h2&gt;
&lt;p&gt;首先，你需要引入chromedp库：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; get -u github.com/chromedp/chromedp&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后，你就可以通过&lt;code&gt;chromedp.Run&lt;/code&gt;执行一系列的动作，比如我们这个例子就是先导航到某个页面，然后将页面生成为pdf:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成任务列表&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; printToPDF(urlstr &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, res *[]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) chromedp.Tasks {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; chromedp.Tasks{&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.Navigate(urlstr), &lt;span class=&quot;comment&quot;&gt;// 浏览指定的页面&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.ActionFunc(&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(ctx context.Context) error {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;buf, _, err := page.PrintToPDF().WithPrintBackground(&lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;).Do(ctx) &lt;span class=&quot;comment&quot;&gt;// 通过cdp执行PrintToPDF&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;*res = buf&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;ActionFunc&lt;/code&gt;是一个便利的方法，用来执行一个函数作为Action,就像标准库http.Handler和http.HandleFunc的关系。因为这里我们要执行的逻辑比较简单，所以就通过一个函数实现就可以了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;page.PrintToPDF()&lt;/code&gt;是定义要执行输出pdf的一些参数,你可以额外设置一些参数，这些参数包括：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PrintToPDFParams &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;Landscape               &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;                   &lt;span class=&quot;string&quot;&gt;`json:&quot;landscape,omitempty&quot;`&lt;/span&gt;               &lt;span class=&quot;comment&quot;&gt;// 横向打印. 默认false.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;DisplayHeaderFooter     &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;                   &lt;span class=&quot;string&quot;&gt;`json:&quot;displayHeaderFooter,omitempty&quot;`&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 打印header和footer. 默认false.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;PrintBackground         &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;                   &lt;span class=&quot;string&quot;&gt;`json:&quot;printBackground,omitempty&quot;`&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;// 打印背景图.  默认false.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;Scale                   &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;scale,omitempty&quot;`&lt;/span&gt;                   &lt;span class=&quot;comment&quot;&gt;// 放缩因子. 默认为1.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;PaperWidth              &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;paperWidth,omitempty&quot;`&lt;/span&gt;              &lt;span class=&quot;comment&quot;&gt;// 页面宽度(英寸). 默认8.5英寸（美国Letter标准尺寸，和A4纸差不太多）.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;PaperHeight             &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;paperHeight,omitempty&quot;`&lt;/span&gt;             &lt;span class=&quot;comment&quot;&gt;// 页面高度(英寸). 默认11英寸(Letter标准尺寸).&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;MarginTop               &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;marginTop&quot;`&lt;/span&gt;                         &lt;span class=&quot;comment&quot;&gt;// 上边距(英寸). 默认1cm (大约0.4 英寸).&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;MarginBottom            &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;marginBottom&quot;`&lt;/span&gt;                      &lt;span class=&quot;comment&quot;&gt;// 底边距(英寸). 默认1cm (大约0.4 英寸).&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;MarginLeft              &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;marginLeft&quot;`&lt;/span&gt;                        &lt;span class=&quot;comment&quot;&gt;// 左边距(英寸). 默认1cm (大约0.4 英寸).&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;MarginRight             &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;marginRight&quot;`&lt;/span&gt;                       &lt;span class=&quot;comment&quot;&gt;// 右边距(英寸). 默认1cm (大约0.4 英寸).&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;PageRanges              &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;                 &lt;span class=&quot;string&quot;&gt;`json:&quot;pageRanges,omitempty&quot;`&lt;/span&gt;              &lt;span class=&quot;comment&quot;&gt;// 要打印的页码, 比如, &#x27;1-5, 8, 11-13&#x27;.默认为空，全打印.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;IgnoreInvalidPageRanges &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;                   &lt;span class=&quot;string&quot;&gt;`json:&quot;ignoreInvalidPageRanges,omitempty&quot;`&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 是否要忽略非法的页码范围. 默认false.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;HeaderTemplate          &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;                 &lt;span class=&quot;string&quot;&gt;`json:&quot;headerTemplate,omitempty&quot;`&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;// HTML模板head. &lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;FooterTemplate          &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;                 &lt;span class=&quot;string&quot;&gt;`json:&quot;footerTemplate,omitempty&quot;`&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;// HTML模板footer.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;PreferCSSPageSize       &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;                   &lt;span class=&quot;string&quot;&gt;`json:&quot;preferCSSPageSize,omitempty&quot;`&lt;/span&gt;       &lt;span class=&quot;comment&quot;&gt;// 是否首选css定义的页面大小？默认false,将自动适应.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;TransferMode            PrintToPDFTransferMode &lt;span class=&quot;string&quot;&gt;`json:&quot;transferMode,omitempty&quot;`&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;// 返回stream&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里我们的例子不做额外的设置，只调整了打印背景图参数，当然你为了打印出漂亮的pdf话，可以调整这里的参数，更适合阅读和打印。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Do&lt;/code&gt;通过cdp协议执行打印并返回结果。&lt;/p&gt;
&lt;p&gt;主要逻辑就完成了，下一步就是执行这些任务了。&lt;/p&gt;
&lt;p&gt;首先要创建一个chromedp的Context:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;ctx, cancel &lt;span class=&quot;value&quot;&gt;:= chromedp.&lt;span class=&quot;function&quot;&gt;NewContext&lt;/span&gt;(context.&lt;span class=&quot;function&quot;&gt;Background&lt;/span&gt;())&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后调用chromedp.Run执行任务就可以了:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := chromedp.Run(ctx, printToPDF(&lt;span class=&quot;string&quot;&gt;`https://colobu.com/`&lt;/span&gt;, &amp;amp;buf)); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后把pdf写入到文件中，完成。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := ioutil.WriteFile(&lt;span class=&quot;string&quot;&gt;&quot;colobu.pdf&quot;&lt;/span&gt;, buf,&lt;span class=&quot;number&quot;&gt; 0644&lt;/span&gt;); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;生成的pdf效果如下：&lt;br/&gt;&lt;img src=&quot;colobu-pdf.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完整的代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;19&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;20&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;21&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;22&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;23&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;24&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;25&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;26&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;27&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;28&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;29&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;30&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;31&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;32&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;33&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;34&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;35&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;36&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;37&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;38&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;39&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;40&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;41&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;github.com/chromedp/cdproto/page&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;github.com/chromedp/chromedp&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建 context&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;ctx, cancel := chromedp.NewContext(context.Background())&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; cancel()&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成pdf&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buf []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := chromedp.Run(ctx, printToPDF(&lt;span class=&quot;string&quot;&gt;`https://colobu.com/`&lt;/span&gt;, &amp;amp;buf)); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := ioutil.WriteFile(&lt;span class=&quot;string&quot;&gt;&quot;colobu.pdf&quot;&lt;/span&gt;, buf,&lt;span class=&quot;number&quot;&gt; 0644&lt;/span&gt;); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成任务列表&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; printToPDF(urlstr &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, res *[]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) chromedp.Tasks {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; chromedp.Tasks{&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.Navigate(urlstr), &lt;span class=&quot;comment&quot;&gt;// 浏览指定的页面&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.ActionFunc(&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(ctx context.Context) error {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;buf, _, err := page.PrintToPDF().WithPrintBackground(&lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;).Do(ctx) &lt;span class=&quot;comment&quot;&gt;// 通过cdp执行PrintToPDF&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;*res = buf&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;生成漂亮的图表&quot;&gt;生成漂亮的图表&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://echarts.apache.org/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;echarts&lt;/a&gt;是我厂(百度)贡献的一个非常知名的图表库，可以通过js为网页生成巨漂亮的图表，用来数据展示。Go语言虽然有一些&quot;玩具&quot;类的图表库，但是并没有一个真正拿的出手的图标库，所以有人就利用echarts，生成一个网页，把数据展示出来，这个库是&lt;a href=&quot;https://github.com/go-echarts/go-echarts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go-echarts&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是，毕竟这是曲折的方式，最终生成的数据是一个网页。&lt;/p&gt;
&lt;p&gt;既然刚才我们通过chromedp可以生成pdf,那么是不是也可以截图，将go-echarts生成的图表截图成一个Go的Image对象？让我们试一试。&lt;/p&gt;
&lt;p&gt;首先，我们先利用go-echarts生成一个图表，并把它保存成一个html网页:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;19&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;20&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;21&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;22&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;23&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;24&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; generateEcharts() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;bar := charts.NewBar()&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// set some global options like Title/Legend/ToolTip or anything else&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;Title:    &lt;span class=&quot;string&quot;&gt;&quot;生成一个漂亮的bar图表&quot;&lt;/span&gt;,&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;Subtitle: &lt;span class=&quot;string&quot;&gt;&quot;我要得到它的灵魂&quot;&lt;/span&gt;,&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}))&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Put data into instance&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;bar.SetXAxis([]&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;string&quot;&gt;&quot;Mon&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Tue&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Wed&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Thu&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Fri&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Sat&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Sun&quot;&lt;/span&gt;}).&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;AddSeries(&lt;span class=&quot;string&quot;&gt;&quot;Category A&quot;&lt;/span&gt;, generateBarItems()).&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;AddSeries(&lt;span class=&quot;string&quot;&gt;&quot;Category B&quot;&lt;/span&gt;, generateBarItems())&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Where the magic happens&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;f, _ := os.Create(&lt;span class=&quot;string&quot;&gt;&quot;bar.html&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;bar.Render(f)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; generateBarItems() []opts.BarData {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;items := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]opts.BarData,&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i :=&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt;; i &amp;lt;&lt;span class=&quot;number&quot;&gt; 7&lt;/span&gt;; i++ {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;items = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(items, opts.BarData{Value: rand.Intn&lt;span class=&quot;number&quot;&gt;(300&lt;/span&gt;)})&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; items&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下一步就是chromedp的工作了，浏览这个本地网页，并进行截图:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;19&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;20&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;21&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;22&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;23&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;24&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;25&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;26&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;27&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;28&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;29&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成echarts网页&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;generateEcharts()&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建chromedp context&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;ctx, cancel := chromedp.NewContext(&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;context.Background(),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.WithDebugf(log.Printf),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; cancel()&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义tasks&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;elementScreenshot := &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(urlstr, sel &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, res *[]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) chromedp.Tasks {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; chromedp.Tasks{&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.Navigate(urlstr),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.Screenshot(sel, res, chromedp.NodeVisible),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成截图&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buf []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;barFile, _ := filepath.Abs(&lt;span class=&quot;string&quot;&gt;&quot;./bar.html&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := chromedp.Run(ctx, elementScreenshot(&lt;span class=&quot;string&quot;&gt;`file://`&lt;/span&gt;+barFile, &lt;span class=&quot;string&quot;&gt;`canvas`&lt;/span&gt;, &amp;amp;buf)); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将截图写入到文件中&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := ioutil.WriteFile(&lt;span class=&quot;string&quot;&gt;&quot;bar.png&quot;&lt;/span&gt;, buf,&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt;o644); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最终，生成一个截图。你可以把这个截图生成Image对象，或者把它保存到一个文件中。这里我们不进行额外的处理了，所以把它保存到文件中。生成的文件如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;bar.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，利用chromedp的打印和截图功能还能做很多事，比如转换epub电子书成pdf格式，grafana截图报警等等。&lt;/p&gt;
&lt;p&gt;更多的，你可以利用chromedp干很多很多事，这依赖你的想象力，或者你可以搜一下一些网友的分享，比如&lt;a href=&quot;https://studygolang.com/topics/12596&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Golang爬虫终极杀器——Chromedp让你成为二维码登陆终结者&lt;/a&gt;&lt;/p&gt;

      
    &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4893be5dd8b6f5fefb200cd4ee33f68c</guid>
<title>聊聊如何在 Spring 事务中正确进行远程调用</title>
<link>https://toutiao.io/k/sudwryn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0588235294117647&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PwsZJCUibicx5nNC424AXg1MMxNyJHzcTFjpuVIVkmNDSgP1lAxgmUvj4XB5HwvTsO5TgKeVdwatIKg12yjWbGoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点击上方&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;3&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GQNNvZ3CEHNfic6xBdic4VFFuiavqTBVUia7zouGVhfFPsaQXKicrzqbegMJgvnQSuXQLIUbMLMVX4Uc5XOaKYMibVsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;14&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;蓝字&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;关注我们&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;01&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最近和朋友聊天，他说他承接的外包项目遇到了分布式事务问题，问我有没啥解决方案，我本可以直接跟他说，分布式事务方案网上一大堆，什么tcc、可靠消息一致性、最大努力通知之类的，直接网上找个试下，比如直接用阿里的seata。但我并没有这么做，因为分布式事务，本来就是一个很复杂的课题，真正落地的时候，会发现有时候是多种分布式方案一起混用，而非一种方案走到黑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此我就跟他说，能不用分布式事务，就尽量不用，后来我就问了一下他的业务场景，场景也不是很复杂，就是邀请好友注册，然后可以增加积分，朋友实现逻辑的伪代码大概如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;Transactional&lt;/span&gt;(&lt;span&gt;rollbackFor&lt;/span&gt; = Exception.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    public Boolean inviteUser(..){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;userService&lt;/span&gt;&lt;span&gt;.add&lt;/span&gt;(..);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;integralService&lt;/span&gt;&lt;span&gt;.addIntegration&lt;/span&gt;(..,20)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中integralService是一个远程积分服务，20为增加的积分值。这代码乍一看是没问题，我想可能很多朋友都会这么写。后边我就问朋友说你们这个业务场景是否允许如下场景&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;允不允许邀请的用户入库成功，而积分入库失败？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;允不允许邀请的用户入库失败，而积分入库成功？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;朋友思考了一下，说第二种不允许，第一种方式可以通过补偿的方式增加积分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在我们回过头来看这段代码，我抛出以下两个问题，看文章的朋友可以思考下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这边说下我的想法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解决耗时过长，有些朋友可能想到可以采用&lt;strong&gt;异步&lt;/strong&gt;的方式，积分抖动异常，可以通过添加&lt;strong&gt;熔断机制&lt;/strong&gt;，比如积分超时没响应，就直接进行熔断&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天我再说一种方案，就是&lt;strong&gt;在事务提交后再进行调用&lt;/strong&gt;，罗里吧嗦一大堆，才刚要进入正题，哈哈&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;02&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;如何在spring的事务中正确的进行远程调用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;16.833333333333332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Q6e43UC3v1HiaBRGY9kMxh3tLO1aBBkGyOkLibppRwafQGLWpwuJO8ejicFmygc0xEug5gKuge6miasNIBiaIaiak0iaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;通过spring的事务同步管理器&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;16.833333333333332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TLAfQEhpjHSPbp8RvqloqZfhr9oq4s6WqbTll9md0ZdsSxQCd5OvTakCISlraZ8vylH1cV3xQ3X6wE358HPuFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个是个什么鬼，这是我直译，它的真身是长如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;org&lt;/span&gt;&lt;span&gt;.springframework&lt;/span&gt;&lt;span&gt;.transaction&lt;/span&gt;&lt;span&gt;.support&lt;/span&gt;&lt;span&gt;.TransactionSynchronizationManager&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这玩意有啥用，可以利用它注册一个事务同步器，这个事务同步器，&lt;/span&gt;&lt;strong&gt;可以允许在事务提交后，做一些事情&lt;/strong&gt;&lt;span&gt;，核心代码如下&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;TransactionSynchronizationManager&lt;/span&gt;&lt;span&gt;.registerSynchronization&lt;/span&gt;(new TransactionSynchronizationAdapter() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            public void afterCommit() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;//做你想做的业务&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        });&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看了代码，想必大家都知道怎么改造上面邀请用户，添加积分了吧&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Boolean &lt;span&gt;inviteUser&lt;/span&gt;&lt;span&gt;(..)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        userService.add(..);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        TransactionSynchronizationManager.registerSynchronization(&lt;span&gt;new&lt;/span&gt; TransactionSynchronizationAdapter() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterCommit&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                integralService.addIntegration(..,&lt;span&gt;20&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        });&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但大家发现没有，每次都要写这么一坨代码，看着是不是很恶心，有没有什么改造的方案。答案有的，通过注解+aop来整合实现，具体实现逻辑，可以查看下面demo链接中的&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;com&lt;/span&gt;&lt;span&gt;.github&lt;/span&gt;&lt;span&gt;.lybgeek&lt;/span&gt;&lt;span&gt;.transactional&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;我这边就不贴具体代码了，为什么不贴，是因为我要介绍另外一种方案，就是&lt;/span&gt;&lt;strong&gt;基于spring的事件驱动实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;16.833333333333332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Q6e43UC3v1HiaBRGY9kMxh3tLO1aBBkGyOkLibppRwafQGLWpwuJO8ejicFmygc0xEug5gKuge6miasNIBiaIaiak0iaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;通过TransactionalEventListener注解+ApplicationEventPublisher&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;16.833333333333332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TLAfQEhpjHSPbp8RvqloqZfhr9oq4s6WqbTll9md0ZdsSxQCd5OvTakCISlraZ8vylH1cV3xQ3X6wE358HPuFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是spring的事件驱动实现，或者说是观察者实现方式，不过TransactionalEventListener注解是&lt;strong&gt;spring4.2版本之后&lt;/strong&gt;才提供的注解&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这种方式如何改造上面邀请用户，添加积分的实现？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;01&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;在邀请用户注册方法中，进行事件发布&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;伪代码如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;Transactional&lt;/span&gt;(&lt;span&gt;rollbackFor&lt;/span&gt; = Exception.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  public Boolean inviteUser(..) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;userService&lt;/span&gt;&lt;span&gt;.add&lt;/span&gt;(..);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;         &lt;span&gt;applicationEventPublisher&lt;/span&gt;&lt;span&gt;.publishEvent&lt;/span&gt;(..);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        });&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;02&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;编写一个事务监听器，并在里面触发添加积分实现&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;伪代码如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;TransactionalEventListener&lt;/span&gt;(&lt;span&gt;phase&lt;/span&gt; = TransactionPhase.AFTER_COMMIT)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    public void addIntegration(..){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;integralService&lt;/span&gt;&lt;span&gt;.addIntegration&lt;/span&gt;(..,20)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这边有个细节点要注意，就是&lt;/span&gt;&lt;strong&gt;监听事件的参数要和发布的参数一致&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;03&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;实现核心源码&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;Override&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onApplicationEvent&lt;/span&gt;(&lt;span&gt;ApplicationEvent &lt;span&gt;event&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;if&lt;/span&gt; (TransactionSynchronizationManager.isSynchronizationActive()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      TransactionSynchronization transactionSynchronization = createTransactionSynchronization(&lt;span&gt;event&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      TransactionSynchronizationManager.registerSynchronization(transactionSynchronization);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.annotation.fallbackExecution()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.annotation.phase() == TransactionPhase.AFTER_ROLLBACK &amp;amp;&amp;amp; logger.isWarnEnabled()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        logger.warn(&lt;span&gt;&quot;Processing &quot;&lt;/span&gt; + &lt;span&gt;event&lt;/span&gt; + &lt;span&gt;&quot; as a fallback execution on AFTER_ROLLBACK phase&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      processEvent(&lt;span&gt;event&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;else&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;// No transactional event execution at all&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;if&lt;/span&gt; (logger.isDebugEnabled()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        logger.debug(&lt;span&gt;&quot;No transaction is active - skipping &quot;&lt;/span&gt; + &lt;span&gt;event&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不知道大家发现没有，他本质上还是使用了TransactionSynchronizationManager，只是对他再一次进行封装&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;03&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在和朋友交流后，发现他们那个外包项目开发人员就只有三个，然后服务拆分了10来个，我就问他说这个外包项目业务有很复杂吗，他说其实还好，我就问他说业务不复杂，开发人员也不多，为什么不用单体架构，而要用微服务。他给我的答案是甲方爸爸觉得他们项目未来会承载很大的业务量，所以必须得用微服务，而且现在的主流技术栈是微服务。听到这个答复，我是该说是过度设计还是高瞻远瞩呢？技术日新月异，鬼知道后面会不会出现更厉害的东西，架构从来都不是一步到位，而是逐步演进&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;04&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;demo链接&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.24&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ojSuCgVKqGlpSKMoQN6iamKmxyQtBXVNqc8Jsnuv3BdEibkyPEEN3UibgtSuBfUfyJUY5wBich3F7VHNkjlEuYav5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;https://github.com/lyb-geek/springboot-learning/tree/master/springboot-transation-after-commit&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.24&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1VicSPZGmGib7DZJ9SroHUVjBibu8uaKDBhlCQB1aqZ69x9MagZpTZHgWL8Ims0m9HDYGtHaibadGg4ZKLs8XtVYjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0d6fc31bd139636acf84f6c6b5084630</guid>
<title>游戏业务 DDoS 攻防对抗案例分享</title>
<link>https://toutiao.io/k/rehfnn6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.146875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxic9plf4mUCq5CKbhAfD2qgesyTjaDj0D79If2GdicPNCLibocA02kTyng/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;文｜&lt;/strong&gt;宙斯盾DDoS防护团队&lt;/p&gt;&lt;p&gt;暴雪&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;事实证明，每年春节假期，不甘寂寞、蠢蠢欲动的除了熊孩子，往往还有以DDoS为主业的黑客，而愉快的春节假期也随之成为DDoS攻击的高峰期。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;宙斯盾DDoS防护团队其实早已习惯与各种黑客&quot;共度新春&quot;，但2021年春节期间发生在腾讯云某游戏公司客户DDoS攻防大战却比以往的攻击更为凶猛、更加胶着。黑客为达目的，专门针对这个客户的多个游戏业务量身定制了完善的DDoS攻击方案，可谓无所不用其极，誓要将这个客户置于死地……&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x01. 突如其来，狼烟四起&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2021年2月初，临近农历新年的一个晚上，宙斯盾系统响起一个紧急告警：腾讯云某一游戏客户大量业务IP遭受地毯式DDoS轰炸，数十个IP短时间内同时受到大流量攻击。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;很显然这是专门针对该用户的恶意DDoS攻击事件。为此宙斯盾团队联合腾讯云高防产品团队马上联系到用户，与其沟通当前攻击态势及防护应对方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;经初步分析，第一轮攻击中：每个IP平均攻击流量峰值230G、攻击持续4小时、多种攻击DDoS和CC手法混合、精准打击业务关键端口、选择业务高峰期攻击。这些特性组合起来似乎就是黑客要向我们宣战的号角，预示着更多攻击将接踵而来，一次攻防拉锯战即将开始。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.437963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9px9iaN7VxhGQkD6iam5yE00csicPm0W3rH6OUQnrNOvIibJsiaHgCrIEp5LDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图1：第一轮攻击流量趋势图(单位Gbps)&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x02. 有备而来，不讲武德&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;不出所料，在接下来的十多天里，黑客每晚风雨不改、节假日无休地准时&quot;打卡&quot;攻击，露出一副誓要置游戏于死地的狰狞面目。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据宙斯盾统计，在二十天内，该客户旗下多个游戏共遭受将近1300次DDoS攻击，单次攻击流量峰值更是超过500Gbps。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4685185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxIs06JQMVzcYWZgpRGGVhICeIa8ib3ia2UR4ceicPX41DW6YuTWeWB7kJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;图2：某游戏客户DDoS攻击态势&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从攻击带宽大小来看，这个攻击峰值其实算不上很高(早在2018年腾讯云就曾为某客户成功防护峰值1.23Tbps的DDoS攻击)。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但经过团队仔细分析攻击手法和流量构成后确认这帮黑客实际是根据业务特征和弱点，精心策划的针对性的攻击，可谓有备而来。从以下3点可以明显看出：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;1. 熟悉业务，量身定做&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据统计，现网的攻击者往往更喜欢用UDP反射（占现网80%以上），但我们发现这帮黑客却从未使用。因为他们知道游戏业务是基于TCP协议，所以防护方肯定会在防护系统上禁用UDP，而且云厂商可以与运营商定制ACL，在运营商骨干网直接封禁UDP协议，攻击流量再大往往也是徒劳。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以黑客很聪明，精力都花在研究TCP攻击上，并为业务量身定制攻击方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;2. 深谙攻防，手法刁钻&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;黑客在制定TCP攻击方案时无不表现出对DDoS攻防技术的深入理解，挑选的大多是业界公认防护难度最大的攻击手法，包括：TCP反射、TCP连接攻击、TCP四层CC、HTTP CC等(详细数据见图3)。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这些攻击流量大多基于完整的TCP连接或者存在合法的协议栈行为，甚至可以突破传统的DDoS防护策略，对防护方带来巨大的挑战，也对游戏业务乃至平台稳定带来严重的威胁。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7145923&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxAmlT9Q7KQaILl83ge8ibFz9At4hMBERjFepy68a1J06PsPQWibZwZFXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;932&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图3：DDoS攻击手法分布&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;3. 兵不厌诈，专攻瓶颈&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;TCP是基于连接的协议，所以在TCP攻击防护对抗时，服务器的连接数上线经常会成为防护防的瓶颈，而黑客似乎深知这一点，通过调用大量肉鸡发起低频的连接请求，通过很小的流量来耗尽服务器连接，这无疑使得防护难度大大提升，不得不说这帮黑客实在不讲武德。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;面对准备充足、技术能力强的黑客攻击，宙斯盾防护团队如何逐一击破，保障业务和平台稳定的？接下来将详细分享。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x03. TCP反射：自研防护算法&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;TCP反射实际并不是一种新颖的攻击手法，宙斯盾团队早在2018年就发布了业界首篇技术文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&amp;amp;mid=2651198528&amp;amp;idx=1&amp;amp;sn=35232201e6431fc76bbccde5b3b3644c&amp;amp;chksm=bd2cf1e68a5b78f02460695d299a39425303fc7cf8e72728cb195f8881e9b8492d5251dde0d1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;无心插柳还是有意为之：TCP反射DDoS攻击手法深入分析2.0&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;无心插柳还是有意为之：TCP反射DDoS攻击手法深入分析2.0&lt;/a&gt;》，阐述该种手法的原理和危害。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而由于这种攻击手法存在协议栈行为，传统的反向挑战、协议栈行为检查等思路难以奏效，使得这种手法越来越受到黑产的青睐，终于在2020年Q3在云上爆发。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据宙斯盾统计，TCP反射当前全网攻击次数从原来10+次/天上涨至1400+次/天，流量峰值从原来10+Gbps暴增至500+G，由此可见TCP反射已成为无法忽视的安全难题，且定必愈发泛滥。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4472222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9px8HDw4w4qpfgE4tJ4msKZCtE0Y9OcFYhDz0BfSgugJogalsibUzNlSTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图4：TCP反射攻击态势&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;而TCP反射最主要的特点和防护难点在于：&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;（1）通过反射可轻松获得大量来源IP合法且具有协议栈行为的流量；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（2）专业防D设备通常旁路部署，只有单向入流量，无法实现双向会话检查；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（3）可反射synack、ack、rst混合，使流量构成更加接近正常业务。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;面对此等棘手的攻击，腾讯宙斯盾团队其实早已有备无患，在TCP反射爆发前已经自研业界首个TCP反射防护算法：可以无需人工干预、玩家无感知的前提下精确区分攻击流量和正常流量，实现自动化、智能化的清洗。所以在这次对抗中，TCP反射被有效防护，黑客并未得逞。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x04. TCP四层CC：AI+DDoS防护&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;其实当下CC主要分为两大类：七层CC(基于HTTP协议)和四层CC(基于TCP协议)。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而由于被攻击的游戏业务并无HTTP，所以宙斯盾团队通过配置HTTP禁用策略即可轻松解决，但对于TCP四层CC，防护难度则直接被”拉满”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所谓的TCP四层CC就是黑客控制大量肉鸡与目标服务器建立完整TCP连接后发送大量伪造的数据流量，导致耗尽服务器资源达到拒绝服务的目的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这种攻击手法在TCP的业务场景上更加常见，而防护难点在于业务本身就是基于TCP开发的私有协议，本身并不规范，可用的防护特征和规则很少，难以区分攻击和正常流量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5573394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxbvVsjLuI95ibibuQKP9Qp2Ouudia7oGmlBW5HppL65jhEzezkNu8mibg2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;436&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图5：TCP四层CC攻击过程&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;业界防护TCP四层CC最彻底的方式就是让客户端接入SDK，客户端流量完全交由SDK接管，这样防护系统就可以根据与SDK协商制定的机制，高效识别出恶意流量，完成自动化防护。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但这种方案需要客户端和服务器改造代码接入，必然有一段较长的开发和测试周期，所以”远水救不了近火”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;实际上宙斯盾团队对TCP四层CC已经有多年的防护经验，并且自研了业界首个&lt;span&gt;&lt;strong&gt;基于深度学习的TCP四层CC解决方案：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;（1）利用腾讯自身的海量流量数据优势，采集大量数据对深度学习模型进行训练；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（2）深度学习模型收敛后具备对流量进行自动识别和分类的能力；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（3）现网防护过程中，DDoS系统与AI引擎联动，最终实现TCP四层CC的自动化识别和清洗。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4904891&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxU5Z12TRXAcX3ULrKiartztyicoTCNnMmeSBPP0ibtn3yqjsZkaZib5x0Jw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;736&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图6：TCP四层CC AI防护模型&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;依赖该深度学习方案并结合业务特征定制的策略，宙斯盾对该黑客发起的所有TCP四层CC攻击流量实现了高精度清洗，黑客再次未能得逞。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x05. TCP连接攻击：流量指纹识别&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在TCP反射、四层/七层CC都没有攻击效果后，黑客将目光转向TCP连接这个方向上，最终想到一种更“脏”的攻击手法：低频TCP连接攻击。此时防护方面临着4大难题:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;（1）攻击肉鸡IP分布全国各地，没有明显集聚，且肉鸡IP不断轮换；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（2）肉鸡连接请求频率极低，与正常玩家接近，甚至比玩家更低；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（3）肉鸡建立请求后会发送极少量伪造的业务数据，攻击行为不明显；&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;面对诸多不利因素和巨大压力，宙斯盾团队经研究分析后，决定抛开黑名单、限速等传统的DDoS对抗思维，转而通过宙斯盾自研的流量指纹算法实现”绝地翻盘”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所谓的流量指纹是通过被动式的流量分析，精确地识别客户端的关键信息，包括：操作系统类型、应用程序类型甚至定位到某台终端。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以虽然肉鸡在流量、行为上已经无限接近正常玩家，但是在宙斯盾指纹识别算法下还是无所遁形，肉鸡和正常玩家被精确识别区分，攻击流量被防护系统精确拦截。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4844828&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxkPsjB5Nrpq0RyfSMhgEBmxYjyyfGMCIhLk9GMrpuAFRKOexhnW5F6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;580&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图7：流量指纹&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;经过对抗，黑客的所有攻击手法被全部防护，业务也恢复了正常。正义的黎明终于到来。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x06. 腾讯云海量DDoS防护&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;有人可能会说：有没有可能黑客会哪天恼羞成怒，转而发起超大流量的DDoS攻击呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然有可能。面对这种威胁，腾讯云依赖自身超大的带宽优势和多年的攻防对抗经验搭建了覆盖全球的DDoS防御体系，能提供国内累计防护能力5T、海外累计防护能力1.2T的服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以即使这个客户发起超大流量DDoS攻击也只能无功而返。&lt;span&gt;&lt;em&gt;(腾讯云DDoS防护产品详情见https://cloud.tencent.com/product/ddos)&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5712963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxc03f6MTBDVPXL8vad2pIHyPLyqj0RcHPz163Yb0iaLmtsFbtcicOu9lA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图8：腾讯云全球DDoS防护体系&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x07. 重归平静？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;黑客精心定制的攻击方案无法凑效后，其实并未放弃，尝试了例如批量更换肉鸡IP、加大肉鸡IP数量、发起协议泛洪、脉冲攻击等方式，意图掀起波浪，但这些”努力”都被证实只是垂死挣扎。经过多天尝试无果后，最终黑客逐渐失去耐心，放弃攻击。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那是不是就天下太平，重归平静呢？答案似乎很骨感：并不是。所谓“只要有利益就是争斗，有业务的网络就有DDoS”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;无论是业务方还是防护方永远不能奢求哪天黑客会思想品德会突然拔高，放弃DDoS，反倒应该不断锤炼和创新自己，才能在愈发恶劣和复杂的抗D战场中先黑客一步，从容应对。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;宙斯盾DDoS防护团队&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;宙斯盾DDoS防护团队基于十余年的DDoS防护技术积累，持续为QQ、微信、王者荣耀、英雄联盟等自研业务提供专业、可靠的DDoS攻击防护解决方案。与腾讯云安全团队合作推出高防产品为云上客户提供专业、可靠的DDoS解决方案。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;附录&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;小隐隐于野：基于TCP反射DDoS攻击分析&lt;/p&gt;&lt;p&gt;https://www.cnblogs.com/qcloud1001/p/9039227.html&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&amp;amp;mid=2651198528&amp;amp;idx=1&amp;amp;sn=35232201e6431fc76bbccde5b3b3644c&amp;amp;chksm=bd2cf1e68a5b78f02460695d299a39425303fc7cf8e72728cb195f8881e9b8492d5251dde0d1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;无心插柳还是有意为之：TCP反射DDoS攻击手法深入分析2.0&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;无心插柳还是有意为之：TCP反射DDoS攻击手法深入分析2.0&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fc5dde62ada02005cd4d1a03f7d5ea1f</guid>
<title>上帝视角看 “Go 项目标准布局” 之争</title>
<link>https://toutiao.io/k/d49xb95</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间 Go 语言社区有一件事情引爆了热议，那就是 &lt;code&gt;golang-standards/project-layout&lt;/code&gt; 项目的 “Go 项目的标准布局” 之争。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没想到，五一假期，认真一看，这个 issues 已经提出将近一个月了，仍然在热议阶段，&lt;span&gt;我&lt;/span&gt;&lt;span&gt;想，咱们需要好好的聊聊这个话题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;煎鱼带你了解下的前因后果，再分享我的看法和业务真实情况。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;背景&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题发生地&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 GitHub 上有一个项目 Spaghetti（github.com/adonovan/spaghetti），是 Go 软件包的一个依赖性分析工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该项目的目录结构如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5215869311551925&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jmWIKV9zRh7fFAeicnSpYHlQgbn3OPbNLG9tu0jHictcurRjkldgofw7NMf0khlwFLIfjBAF13ian1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1714&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看上去并不复杂，代码量不多，文件平铺也不超过一屏，&lt;span&gt;就是&lt;/span&gt;&lt;span&gt;一个布局&lt;/span&gt;&lt;span&gt;比较简单的项目。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有一位老哥提出了一个 PR，明确的期望该项目按照 &lt;/span&gt;&lt;code&gt;golang-standards/project-layout&lt;/code&gt;&lt;span&gt; 项目给出的 “标准” 布局来调整。&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4460093896713615&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jmWIKV9zRh7fFAeicnSpYHlsdhe868lAbP7Z06bb75NpDGSicLYoIe33M0dLdbianXVfm6F8mUqGnYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1704&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我猜测该项目可能是因为把 Go、HTML、JS、PNG 和 go.mod 文件等摆在了一起，引起了该同学的一丝丝纠结，觉得比较乱？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;“标准布局“ 长什么样子&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;golang-standards/project-layout&lt;/code&gt; 项目中，其自称：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8141263940520446&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jmWIKV9zRh7fFAeicnSpYHlzR60eNnuBKNImZbFiacQRe5LcqeRFaj6QXFnc9ysbqibJ4NhHjCOvQQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;538&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目的组织名也是 &quot;golang-standards&quot;，其提供了一个基本的 Go 项目布局，精简展示如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;project-layout&lt;br/&gt;├── api&lt;br/&gt;├── cmd&lt;br/&gt;├── configs&lt;br/&gt;├── docs&lt;br/&gt;├── go.mod&lt;br/&gt;├── init&lt;br/&gt;├── internal&lt;br/&gt;├── pkg&lt;br/&gt;├── scripts&lt;br/&gt;├── vendor&lt;br/&gt;├── ...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;/cmd：项目主要的应用程序。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;/internal：私有的应用程序代码库，这些是不希望被其他人导入的代码。&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;应用程序实际的代码可以放在 /internal/app 目录（如：internal/app/myapp）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;应用程序的共享代码放在 /internal/pkg 目录（如：internal/pkg/myprivlib）中。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;/pkg：外部应用程序可以使用的库代码（如：/pkg/mypubliclib）。其他项目将会导入这些库来保证项目可以正常运行。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;/vendor：应用程序的依赖关系，可通过执行 &lt;code&gt;go mod vendor&lt;/code&gt; 执行得到。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;/configs：配置文件模板或默认配置。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;/init：系统初始化（systemd、upstart、sysv）和进程管理（runit、supervisord）配置。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;/scripts:：用于执行各种构建，安装，分析等操作的脚本。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更具体的布局介绍，大家可以参见 project-layout 项目的 README，其基本把方方面面的目录都考虑到了（人多力量大）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于内容过于长，因此就不一一展示了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Russ Cox 现身原因&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过很巧，该项目的作者是前 Google 员工，是 &lt;code&gt;gopl.io&lt;/code&gt; 项目（5.1k stars）的作者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在仅仅过去 23 分钟后，作为 GoTeam Leader 的 Russ Cox（@rsc）就现身，并提出新的 issue 表达出了反对意见：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5374707259953162&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jmWIKV9zRh7fFAeicnSpYHl3A45V9BTAhbAukC7mvVPwklLzOL8bMQ8nTlFmzU9hRmw8snp8Fp2uw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1708&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;golang-standards/project-layout&lt;/code&gt; 项目的 README 中有明确指出这不是官方的标准，有如下声称：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;it is a set of common historical and emerging project layout patterns in the Go ecosystem.&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Russ Cox 主要是对声称 &quot;这是一套 Go 生态系统中常见的历史和新兴的项目布局模式&quot; 这一说法表示了 “不准确” 的意见。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：Go 生态系统中的绝大多数包都不会将可导入的包放在 pkg 子目录中。更广泛地说，这里描述的只是非常复杂的工程项目，而 Go 的仓库往往要简单得多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，不幸的是，这套项目布局在组织名字上被称作 &quot;golang-standards&quot;（Golang 标准） 提出来，实际上并非真的是官方标准，有误导的情况存在。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Russ Cox 反对原因&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在了解 project-layout 项目所提供的 “标准“ 项目布局和 Russ Cox 提出 issues 的背景后。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们进一步了解 Russ Cox 认为&lt;strong&gt;这不对&lt;/strong&gt;的根本考虑。project-layout 这个项目有两个问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;它声称是 Go 标准（Go standards）的主办方，但实际上并非如此，因为这些标准绝非 Go 官方标准。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它提出的项目布局标准过于复杂，不是一个合理的标准。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Go 项目布局的标准是什么&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提出这个 issues 后，出现了一大堆人追问 Russ Cox，到底何为 Go 项目的布局标准？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Russ Cox 给出了正式回应，一个可导入的 Go repo 的最小标准布局是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在你的根目录下放一个 LICENSE 文件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在你的根目录下放一个 go.mod 文件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将 Go 代码放在 repo 中，放在根目录中，或者按照你认为合适的方式组织成一个目录树。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这样了，这就是 &quot;标准&quot;，没有那么复杂。不需要像 project-layout 项目一样的布局。像是 Go 官方的 &lt;code&gt;golang.org/x&lt;/code&gt; 仓库打破了 project-layout 所说的这些 &quot;规则 &quot;中的每一条。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Go 提案&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在经历了长时间的口水战后，已经有人在 Go 官方仓库提出希望释出相关的提案（proposal）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6166107382550335&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jmWIKV9zRh7fFAeicnSpYHl1jdK7A7zN9BYypcsWHUicSOR9LUzZrUicZYZsFkp6feQxlsH44dtjG4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2384&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;猜测可能会有如下几种可能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;GitHub 项目 golang-standards/project-layout 愿意更名，不再自称 ”golang-standards“，不过可能性比较低，因为已经已多人提出，但作者没什么表示。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 官方正式提供 Go 标准项目布局的说明。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 官方不做约束，仅做表态，可能输出文章。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续大家继续关注该提案，就可以知道发展了，&lt;span&gt;传送门：&lt;/span&gt;&lt;span&gt;issues #&lt;/span&gt;&lt;span&gt;45861&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照惯例，我猜测第三种可能性最大，因为很难有人可以提供所有开发者认可的标准，每个事业部、团队的喜好都可能有所不同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，任何东西自称 “XX 标准”，在名气大后，都会带来一些问题。就像本文提到的 golang-standards/project-layout 项目一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换位思考一下，若你是某个项目的 Leader，某一天你的同事，被人拿着 “标准” 来建议修改时，说这是这个项目的 “标准”，会不会很奇妙？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无独有偶，我有一个朋友，他们公司早年只有一套 DDD 标准，本想统一。结果后面每一个介入 DDD 的业务同学，都认为前人不标准，每个人都自创了一套 DDD 标准。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总是会有小伙伴&lt;strong&gt;想让定义绝对的 “标准”，又或是 “最佳实践”&lt;/strong&gt;。其实是难以定义的，最好的就是能够一个团队内形成基本共识，这里面牵扯到的不单单只有技术...&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你对此有什么看法呢，&lt;strong&gt;欢迎在评论区留言和大家一起交流&lt;/strong&gt;！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>789c933199a75ae0615aba0985b3e93c</guid>
<title>图算法系列之无向图的数据结构</title>
<link>https://toutiao.io/k/6ol44f3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;吐血整理程序员必读书单：https://github.com/silently9527/ProgrammerBooks&lt;/p&gt;&lt;p&gt;微信公众号：贝塔学Java&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从本篇开始我们将会一起来学习图相关的算法，图算有很多相当实用算法，比如：垃圾回收器的标记清除算法、地图上求路径的最短距离、拓扑排序等。在开始学习这些算法之前我们需要先来了解下图的基本定义，以及使用哪种数据结构来表示一张图，本篇我们先从无向图开始学习。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;图的定义&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图：是有一组顶点和一组能够将两个订单相连组成的。连接两个顶点的边没有方向，这种图称之为无向图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7620320855614974&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGic52RwPrfTO12FIMHwN2NVYZibcsMCxnN11L5fTmIPPsu0YkZo4bXUrs0fLDibjAIcS4lJQQ8p4KgkQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;748&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;图的术语&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过同一条边相连的两个顶点我们称这两个顶点&lt;span&gt;相邻&lt;/span&gt;；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;某个顶点的&lt;span&gt;度数&lt;/span&gt;即表示连接这个顶点的边的总数；如上图：顶点1的度数是3&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一条边连接了一个顶点与其自身，我们称为&lt;span&gt;自环&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;连接同一对顶点的边称为&lt;span&gt;平行边&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4320388349514563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGic52RwPrfTO12FIMHwN2NVYRVa5Uo2vIno9KMjySicauzdUCoSeD7y8uuuyzZKFuOxN3mXKZNbHK4g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;824&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;术语还有很多，暂时这里只列出本篇我们需要使用到的术语，后面有在使用到其他的术语再做解释，太多也不太容易记得住&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何表示出图&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图用什么数据结构来表示主要参考两个要求：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在开发图的相关算法时，图的表示的数据结构是基础，所以这种数据结构效率的高&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在实际的过程中图的大小不确定，可能会很大，所以需要预留出足够的空间&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑了这两个要求之后大佬们提出以下三个方法来供选择：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;邻接矩阵
键入有v个顶点的图，我们可以使用v乘以v的矩阵来表示，如果顶点v与w相连，那么把v行w列设置为true，这样就可以表示两个顶点相连，但是这个方式有个问题，如果遇到图很大，会造成空间的浪费。不满足第二点。其次这种方式没办法表示平行边&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;边的数组
可以定义一个表示的边对象，包含两个int属性表示顶点，但是如果需要找到某个顶点的相连顶点有哪些，我们就需要遍历一遍全部的边。这种数据结构的效率较差&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;邻接表数组
定义一个数组，数组的大小为顶点的个数，数据下标表示顶点，数组中每个元素都是一个链表对象（LinkedListQueue）,链表中存放的值就是与该顶点相连的顶点。（LinkedListQueue我们已经在之前的文章中实现，可以参考文章《https://juejin.cn/post/6926685994347397127》）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6098726114649682&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGic52RwPrfTO12FIMHwN2NVYCXibZm5hzXIe3tUwNH28fghficv9j5H0GnbJm1aEBCTicgAWAic9cDPc9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;628&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;无向图的API定义&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public class Graph {&lt;br/&gt;    public Graph(int V); //创建含有v个顶点不含边的图&lt;br/&gt;    &lt;br/&gt;    public int V(); //返回顶点的个数&lt;br/&gt;    &lt;br/&gt;    public int E(); //返回图中边的总数&lt;br/&gt;    &lt;br/&gt;    public void addEdge(int v, int w); //向图中添加一条边 v-W &lt;br/&gt;        &lt;br/&gt;    public Iterable&amp;lt;Integer&amp;gt; adj(int v); //返回与v相邻的所有顶点&lt;br/&gt;    &lt;br/&gt;    public String toString(); //使用字符串打印出图的关系&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;无向图API的实现&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要实现上面定义的API，我们需要三个成员变量，v表示图中顶点的个数，e表示图总共边的数据，LinkedListQueue的数组用来存储顶点v的相邻节点；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构造函数会初始化空的邻接表数组&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为是无向图，所以addEdge方法在向图中添加边既要添加一条v-&amp;gt;w的边，有需要添加一条w-&amp;gt;v的边&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public class Graph {&lt;br/&gt;    private final int v;&lt;br/&gt;    private int e;&lt;br/&gt;    private LinkedListQueue&amp;lt;Integer&amp;gt;[] adj;&lt;br/&gt;&lt;br/&gt;    public Graph(int v) {&lt;br/&gt;        this.v = v;&lt;br/&gt;        this.adj = (LinkedListQueue&amp;lt;Integer&amp;gt;[]) new LinkedListQueue[v];&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (int i = 0; i &amp;lt; v; i++) {&lt;br/&gt;            this.adj[i] = new LinkedListQueue&amp;lt;&amp;gt;();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public int &lt;span&gt;&lt;span&gt;V&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; v;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public int &lt;span&gt;&lt;span&gt;E&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; e;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public void addEdge(int v, int w) {&lt;br/&gt;        this.adj[v].enqueue(w);&lt;br/&gt;        this.adj[w].enqueue(v);&lt;br/&gt;        this.e++;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public Iterable&amp;lt;Integer&amp;gt; adj(int v) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; this.adj[v];&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    @Override&lt;br/&gt;    public String &lt;span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        StringBuilder sb = new StringBuilder();&lt;br/&gt;        sb.append(v).append(&lt;span&gt;&quot; 个顶点，&quot;&lt;/span&gt;).append(e).append(&lt;span&gt;&quot; 条边\n&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (int i = 0; i &amp;lt; v; i++) {&lt;br/&gt;            sb.append(i).append(&lt;span&gt;&quot;: &quot;&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (int j : this.adj[i]) {&lt;br/&gt;                sb.append(j).append(&lt;span&gt;&quot; &quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;            sb.append(&lt;span&gt;&quot;\n&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; sb.toString();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;图的常用工具方法&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于图数据结构的实现，我们可以提供一些工具方法&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;计算顶点v的度数
顶点的度数就等于与之相连接顶点的个数&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public static int degree(Graph graph, int v) {&lt;br/&gt;    int degree = 0;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (int w : graph.adj(v)) {&lt;br/&gt;        degree++;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; degree;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;计算所有顶点的最大度数&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public static int maxDegree(Graph graph) {&lt;br/&gt;    int maxDegree = 0;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (int v = 0; v &amp;lt; graph.V(); v++) {&lt;br/&gt;        int degree = degree(graph, v);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (maxDegree &amp;lt; degree) {&lt;br/&gt;            maxDegree = degree;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; maxDegree;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;计算所有顶点的平均度数
每条边都有两个顶点，所以图所有顶点的总度数是边的2倍&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public static double avgDegree(Graph graph) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; 2.0 * graph.E() / graph.V();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;计算图中的自环个数
对于顶点v，如果v同时也出现了在v的邻接表中，那么表示v存在一个自环；由于是无向图，每条边都被记录了两次（如果不好理解可以把图的toString打印出来就可以理解了）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public static int numberOfSelfLoops(Graph graph) {&lt;br/&gt;    int count = 0;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (int v = 0; v &amp;lt; graph.V(); v++) {&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (int w : graph.adj(v)) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (v == w) {&lt;br/&gt;                count++;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; count / 2;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇我们主要学习使用何种数据结构来表示一张图，以及基于这种数据结构实现了几个简单的工具方法，在下一篇我们将来学习图的第一个搜索算法 - 深度优先搜索&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中所有源码已放入到了github仓库:https://github.com/silently9527/JavaCore&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;最后（点关注，不迷路）&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中或许会存在或多或少的不足、错误之处，有建议或者意见也非常欢迎大家在评论交流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，&lt;span&gt;写作不易，请不要白嫖我哟&lt;/span&gt;，希望朋友们可以&lt;span&gt;点赞评论关注&lt;/span&gt;三连，因为这些就是我分享的全部动力来源🙏&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>