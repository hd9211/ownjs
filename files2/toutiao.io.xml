<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>b462a383663daf8a1cf7330deed624c5</guid>
<title>跨Mysql、Redis、Mongo的分布式事务</title>
<link>https://toutiao.io/k/246clz1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;Mysql、Redis、Mongo都是非常流行的存储，并且各自有自己的优势。在实际的应用中，常常会同时使用多种存储，也会遇见在多种存储中保证数据一致性的需求，例如保证数据库中的库存和Redis中的库存一致等。&lt;/p&gt;&lt;p&gt;本文基于分布式事务框架 &lt;span&gt;https://github.com/dtm-labs/dtm&lt;/span&gt; 给出了一个跨Mysql、Redis、Mongo多种存储引擎的一个可运行的分布式事务实例，希望能够帮助大家解决这方面的问题。&lt;/p&gt;&lt;p&gt;这种灵活的组合多个存储引擎形成一个分布式事务的能力，也是dtm首创做到的，目前未看到其他的分布式事务框架有这样的能力。&lt;/p&gt;&lt;h2&gt;问题场景&lt;/h2&gt;&lt;p&gt;我们先来看问题场景，假定现在用户参加一次活动，将自己的余额，充值话费，同时活动会赠送商城积分。其中余额存储在Mysql，话费保存在Redis，商城积分保存在Mongo，并且由于活动限时，因此可能出现参加活动失败的情况，所以需要支持回滚。&lt;/p&gt;&lt;p&gt;对于上述问题场景，可以使用DTM的Saga事务，下面我们就来详细讲解方案。&lt;/p&gt;&lt;h2&gt;准备数据&lt;/h2&gt;&lt;p&gt;首先是准备数据，为了方便用户快速上手相关的例子，我们已经把相关的数据准备好了，地址在en.dtm.pub，里面包括Mysql、Redis、Mongo，具体的连接用户名密码可以在&lt;span&gt;https://github.com/dtm-labs/dtm-examples&lt;/span&gt;找到。&lt;/p&gt;&lt;p&gt;如果您想要自己在本地准备相关的数据环境，可以通过 &lt;span&gt;https://github.com/dtm-labs/dtm/blob/main/helper/compose.store.yml&lt;/span&gt; 启动Mysql、Redis、Mongo，然后通过&lt;span&gt;https://github.com/dtm-labs/dtm/tree/main/sqls&lt;/span&gt;下面的脚本准备本例子的数据，其中&lt;code&gt;busi.*&lt;/code&gt;为业务数据，&lt;code&gt;barrier.*&lt;/code&gt;为DTM使用的辅助表&lt;/p&gt;&lt;h2&gt;编写业务代码&lt;/h2&gt;&lt;p&gt;我们先看最熟悉的Mysql的业务代码&lt;/p&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;SagaAdjustBalance&lt;/span&gt;&lt;span&gt;(db dtmcli.DB, uid &lt;span&gt;int&lt;/span&gt;, amount &lt;span&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;error&lt;/span&gt; {&lt;br/&gt;    _, err := dtmimp.DBExec(db, &lt;span&gt;&quot;update dtm_busi.user_account set balance = balance + ? where user_id = ?&quot;&lt;/span&gt;, amount, uid)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;/pre&gt;&lt;p&gt;这段代码主要是进行数据库中用户余额的调整&lt;/p&gt;&lt;p&gt;对于Saga事务模式来说，当我们回滚时，我们需要反向调整余额，这部分的处理，我们可以依旧调用上述的&lt;code&gt;SagaAdjustBalance&lt;/code&gt;，只需要传入负数的金额即可。&lt;/p&gt;&lt;p&gt;对于Redis和Mongo，业务代码的处理也是类似的，只需要对相应的余额进行增减即可&lt;/p&gt;&lt;h2&gt;如何做幂等&lt;/h2&gt;&lt;p&gt;对于Saga事务模式来说，当我们的子事务服务出现临时故障，出现故障就会进行重试，这个故障可能出现在子事务提交前，也可能出现在子事务提交之后，因此子事务服务就需要做到幂等。&lt;/p&gt;&lt;p&gt;DTM 提供了辅助表和辅助的函数，用于帮助用户快速实现幂等。对于Mysql，他会在业务数据库中创建辅助表barrier，当用户开启事务调整余额时，会先在barrier表中写入gid，如果这是一个重复请求，那么写入gid时，会发现重复而失败，此时跳过用户业务上的余额调整，保证幂等。辅助函数的使用代码如下：&lt;/p&gt;&lt;pre&gt;app.POST(BusiAPI+&lt;span&gt;&quot;/SagaBTransIn&quot;&lt;/span&gt;, dtmutil.WrapHandler2(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{} {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; MustBarrierFromGin(c).Call(txGet(), &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(tx *sql.Tx)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;error&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SagaAdjustBalance(tx, TransInUID, reqFrom(c).Amount, reqFrom(c).TransInResult)&lt;br/&gt;    })&lt;br/&gt;}))&lt;/pre&gt;&lt;p&gt;Mongo处理幂等的原理与Mysql相近，不再赘述&lt;/p&gt;&lt;p&gt;Redis处理幂等的原理与Mysql不同，主要是因为事务的原理不同。Redis的事务主要是通过lua的原子执行来保证的。DTM的辅助函数会通过lua脚本来调整余额，调整余额前，会在redis中查询gid，如果存在，则跳过业务上的余额调整；如果不存在，则执行业务上的余额调整。辅助函数的使用代码如下：&lt;/p&gt;&lt;pre&gt;app.POST(BusiAPI+&lt;span&gt;&quot;/SagaRedisTransOut&quot;&lt;/span&gt;, dtmutil.WrapHandler2(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{} {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; MustBarrierFromGin(c).RedisCheckAdjustAmount(RedisGet(), GetRedisAccountKey(TransOutUID), -reqFrom(c).Amount, &lt;span&gt;7&lt;/span&gt;*&lt;span&gt;86400&lt;/span&gt;)&lt;br/&gt;}))&lt;/pre&gt;&lt;h2&gt;如何做补偿&lt;/h2&gt;&lt;p&gt;对于Saga来说，我们还需要处理补偿操作，但补偿操作并不是简单的反向调整，也有很多坑需要注意，否则很容易补偿出错。&lt;br/&gt;一方面，补偿需要考虑幂等，因为在补偿过程中，也同样需要考虑故障重试的情况，与前一小节中的幂等处理一样。另一方面，补偿还需要考虑空补偿，因为正向分支返回失败，这个失败可能是在正向的数据已经调整完成提交之后的失败，也可能是还没有提交就返回了失败。对于数据已提交的失败，我们需要执行反向操作，对于数据未提交的失败，我们需要跳过反向操作，即处理空补偿。&lt;/p&gt;&lt;p&gt;DTM 提供的辅助表与辅助函数中，一方面会根据正向操作插入的gid判断是否为空补偿，另一方面还会再插入gid+&#x27;compensate&#x27;，判断补偿是否为重复操作。如果是正常补偿操作，那么会执行业务上的补偿，如果是空补偿或者重复补偿，则会跳过补偿业务上的补偿。&lt;/p&gt;&lt;p&gt;Mysql的代码如下：&lt;/p&gt;&lt;pre&gt;app.POST(BusiAPI+&lt;span&gt;&quot;/SagaBTransInCom&quot;&lt;/span&gt;, dtmutil.WrapHandler2(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{} {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; MustBarrierFromGin(c).Call(txGet(), &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(tx *sql.Tx)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;error&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SagaAdjustBalance(tx, TransInUID, -reqFrom(c).Amount, &lt;span&gt;&quot;&quot;&lt;/span&gt;)&lt;br/&gt;    })&lt;br/&gt;}))&lt;/pre&gt;&lt;p&gt;Redis的代码如下：&lt;/p&gt;&lt;pre&gt;app.POST(BusiAPI+&lt;span&gt;&quot;/SagaRedisTransOutCom&quot;&lt;/span&gt;, dtmutil.WrapHandler2(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{} {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; MustBarrierFromGin(c).RedisCheckAdjustAmount(RedisGet(), GetRedisAccountKey(TransOutUID), reqFrom(c).Amount, &lt;span&gt;7&lt;/span&gt;*&lt;span&gt;86400&lt;/span&gt;)&lt;br/&gt;}))&lt;/pre&gt;&lt;p&gt;补偿代码与前面的正向操作代码几乎一样，仅仅是把金额乘以-1。DTM 的辅助函数会在一个函数内部同时包含了幂等与补偿的相关逻辑&lt;/p&gt;&lt;h2&gt;其他异常&lt;/h2&gt;&lt;p&gt;编写子事务以及子事务的补偿时，其实还有一种异常情况是悬挂，可能出现在全局事务超时回滚，或者重试到达上线后回滚，正常情况是先正向操作再补偿，但是极端情况可能出现先补偿再正向操作，因此正向操作还需要判断补偿是否已执行，已执行的情况下，也需要跳过业务操作。&lt;/p&gt;&lt;p&gt;对于DTM的用户而言，这些异常都已经被优雅的妥善处理，您作为用户，只需要按照上述的&lt;code&gt;MustBarrierFromGin(c).Call&lt;/code&gt;进行调用即可，完全不再需要关心这些异常。DTM 处理这些异常的原理在这里进行了详细的讲述：异常与子事务屏障&lt;/p&gt;&lt;h2&gt;发起分布式事务&lt;/h2&gt;&lt;p&gt;前面编写完了各个子事务服务，下面这部分代码发起一个Saga全局事务：&lt;/p&gt;&lt;pre&gt;saga := dtmcli.NewSaga(dtmutil.DefaultHTTPServer, dtmcli.MustGenGid(dtmutil.DefaultHTTPServer)).&lt;br/&gt;  Add(busi.Busi+&lt;span&gt;&quot;/SagaBTransOut&quot;&lt;/span&gt;, busi.Busi+&lt;span&gt;&quot;/SagaBTransOutCom&quot;&lt;/span&gt;, &amp;amp;busi.TransReq{Amount: &lt;span&gt;50&lt;/span&gt;}).&lt;br/&gt;  Add(busi.Busi+&lt;span&gt;&quot;/SagaMongoTransIn&quot;&lt;/span&gt;, busi.Busi+&lt;span&gt;&quot;/SagaMongoTransInCom&quot;&lt;/span&gt;, &amp;amp;busi.TransReq{Amount: &lt;span&gt;30&lt;/span&gt;}).&lt;br/&gt;  Add(busi.Busi+&lt;span&gt;&quot;/SagaRedisTransIn&quot;&lt;/span&gt;, busi.Busi+&lt;span&gt;&quot;/SagaRedisTransOutIn&quot;&lt;/span&gt;, &amp;amp;busi.TransReq{Amount: &lt;span&gt;20&lt;/span&gt;})&lt;br/&gt;err := saga.Submit()&lt;/pre&gt;&lt;p&gt;在这部分代码中，创建了一个Saga全局事务，该Saga事务包括3个子事务：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;从Mysql中转出50&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;向Mongo中转入30&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;向Redis中转入20&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在整个事务过程中，如果所有的子事务都顺利完成，那么全局事务成功；如果有一个子事务返回了业务上的失败，那么全局事务回滚。&lt;/p&gt;&lt;h2&gt;运行&lt;/h2&gt;&lt;p&gt;如果您想要完整运行一个上面的示例，步骤如下：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;运行dtm&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/dtm-labs/dtm &amp;amp;&amp;amp; &lt;span&gt;cd&lt;/span&gt; dtm&lt;br/&gt;go run main.go&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot; start=&quot;2&quot;&gt;&lt;li&gt;&lt;p&gt;运行成功的例子&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/dtm-labs/dtm-examples &amp;amp;&amp;amp; &lt;span&gt;cd&lt;/span&gt; dtm-examples&lt;br/&gt;go run main.go http_saga_multidb&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot; start=&quot;3&quot;&gt;&lt;li&gt;&lt;p&gt;运行失败的例子&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/dtm-labs/dtm-examples &amp;amp;&amp;amp; &lt;span&gt;cd&lt;/span&gt; dtm-examples&lt;br/&gt;go run main.go http_saga_multidb_rollback&lt;/pre&gt;&lt;p&gt;您可以对例子进行修改，模拟各种临时的故障，空补偿的情况，以及其他各种异常，当整个全局事务最终完成时，数据是一致的。&lt;/p&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;本文给出了一个跨Mysql、Redis、Mongo的分布式事务例子，详细讲解了其中需要处理的问题，以及解决方案。&lt;/p&gt;&lt;p&gt;本文的原理适合于所有支持ACID事务的存储引擎，您可以将它快速扩展，用于其他引擎，例如TiKV等。&lt;/p&gt;&lt;h2&gt;联系我们&lt;/h2&gt;&lt;p&gt;项目地址：https://github.com/dtm-labs/dtm 欢迎访问，并star支持我们&lt;/p&gt;&lt;p&gt;关注【分布式事务】公众号，获得更多分布式事务相关知识&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNzQ2NzMyNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/9m9OfQX94Vv04GUcaMFCzcfHeGnTECibTEibP26ByiaHcdD7qYLNFAyQcDvbVBerQs55hXppwia3XpPjIYF3MKGzVQ/0?wx_fmt=png&quot; data-nickname=&quot;分布式事务&quot; data-alias=&quot;wangxiyan0901&quot; data-signature=&quot;介绍分布式事务相关理论与实践知识。 开源项目yedf/dtm的相关信息发布。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7eb2edfa4655815e302f0ef9f5b57bb4</guid>
<title>云杉网络｜MetaFlow即将开源！5月11日“让观测更自动，让开发者更自由”</title>
<link>https://toutiao.io/k/djdvbzm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;基于在混合云环境下的多年耕耘，云杉网络自主研发的云监控服务平台DeepFlow已在金融、电信、能源等行业中的数十家世界五百强客户处得到了广泛的应用。&lt;span&gt;&lt;strong&gt;我们宣布将DeepFlow核心的可观测性数据引擎MetaFlow正式开源（5月11日揭晓）&lt;/strong&gt;&lt;/span&gt;，我们希望将更好的可观测性能力、自动追踪和自动标签能力开放到整个行业，帮助企业客户改进云原生运维工作的运行效率、稳定性和计算成本。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;89460&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j6qn90Jia7aurmWHcbEACtRNjsTdZ4FHcciaTS9dBmHP2K2hLLjCUuKTpANbOgYeZxkyoK354eZibIr36ohQ9OicLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;125&quot;/&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;MetaFlow是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;MetaFlow是一个&lt;span&gt;&lt;strong&gt;高度自动化的可观测性平台&lt;/strong&gt;&lt;/span&gt;，是为云原生应用开发者建设可观测性而量身打造的全栈、全链路、高性能数据引擎。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;MetaFlow的AutoTracing&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;能力&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;创新的使用eBPF实现自动化的分布式链路追踪&lt;/span&gt;&lt;span&gt;，并自动关联OpenTelemetry实现真正的云原生环境&lt;span&gt;全栈、&lt;/span&gt;全链路追踪。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;MetaFlow的AutoTagging机制&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;能够自动为所有观测数据注入丰富的云原生资源属性、API属性标签&lt;/span&gt;&lt;span&gt;，打破数据孤岛，释放数据的下钻切分能力。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;MetaFlow拥有开放的架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，基于WASM的可编程应用协议解析能力、可扩展的观测数据源、插件式的分析数据库接口、统一的SQL查询接口，让使用者可将其快速融入自己的可观测性平台中。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;MetaFlow易于维护&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，仅由Agent、Server两个组件构成，无需依赖任何其他组件即可实现水平扩展与负载均衡。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;MetaFlow追求极低的资源消耗&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，使用Rust实现采集器，通过SmartEncoding实现10倍性能的数据标签注入。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;89460&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j6qn90Jia7aurmWHcbEACtRNjsTdZ4FHcciaTS9dBmHP2K2hLLjCUuKTpANbOgYeZxkyoK354eZibIr36ohQ9OicLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;125&quot;/&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;为什么要开源？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;建设可观测性已经成为云原生应用开发者的必要工作，然而现有的解决方案正悄无声息的消耗着开发者越来越多的时间。开发者需要考虑如何埋点插码，如何传递追踪上下文，如何关联不同类型的数据，如何控制数据的猖獗增长，如何避免高基标签，如何维护越来越复杂的平台，这些工作严重挤占了业务开发工作的时间。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;MetaFlow拥抱开源社区，设计了良好的数据源、存储、可视化扩展能力。通过MetaFlow，我们希望&lt;/span&gt;&lt;span&gt;&lt;strong&gt;让观测更自动，让开发者更自由&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;p/&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发布内容：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;MetaFlow：开源的高度自动化可观测性平台&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;发布方式：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;线上多平台直播&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;云杉网络视频号、开源中国视频号、云原生社区视频号、开源社KAIYUANSHE视频号、示说平台等）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发布时间：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;2022年5月11日 晚20:00～21:30&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_live_iframe&quot; data-pluginname=&quot;videosnap&quot; data-headimgurl=&quot;https://wx.qlogo.cn/finderhead/zVWR28oR4EQlYWARgp79CfZGRAbn06k1Y6CdErMu5fQ/0&quot; data-username=&quot;v2_060000231003b20faec8c7e08911c0ddc807eb31b077550620f62b06b6e9891cfe048009add4@finder&quot; data-nickname=&quot;云杉网络&quot; data-desc=&quot;将在05月11日 20:00 直播&quot; data-intro=&quot;《MetaFlow：开源的高度自动化可观测性平台》&quot; data-noticeid=&quot;finderlivenotice-v2_060000231003b20faec8c7e08911c0ddc807eb31b077550620f62b06b6e9891cfe048009add4@finder-1651673179224998-570728353&quot; data-type=&quot;live&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1217&quot; data-galleryid=&quot;&quot; data-ratio=&quot;2.1658615136876005&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j6qn90Jia7aurmWHcbEACtRNjsTdZ4FHcBXQU1P9My2xicC8SqWqBQUS2liaJW7IpB9zPSbX16D0bhnOibqLmlBZYQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;演讲主题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;《MetaFlow：开源的高度自动化可观测性平台》—— 云杉网络 研发VP 向阳&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;演讲内容&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;听众受益&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;让观测更自动，让开发者更自由&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”，通过此次分享你能了解我们如何从细节的软件架构设计中体现对这一使命的追求，而且也能看到eBPF、AutoTracing、AutoTagging、SmartEncoding等新技术在可观测性领域极富创新的落地实践。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想要了解更多MetaFlow信息，可通过以下方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section data-id=&quot;103251&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;扫码二维码&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;联系我们&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;60&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;60&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j6qn90Jia7aurmWHcbEACtRNjsTdZ4FHc9JLtKzbRCvvBW6bqF9BH9EpfsH2B4icVOLshA9mttsib1K9vlOuCtXuw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;860&quot; data-width=&quot;100%&quot; title=&quot;我的企业微信二维码.jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9913793103448276&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j6qn90Jia7aurmWHcbEACtRNjsTdZ4FHc6UDwfjfCyOoCKLL2RVicYnDvQLhx7X4k253fCJicPNic1ibetWZhtPBpAg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;116&quot; data-width=&quot;100%&quot; title=&quot;MetaFlow交流群5.5.jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;关注云杉公众号   MetaFlow交流群&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;官网链接：https://deepflow.yunshan.net/metaflow.html&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（点击文章末尾【&lt;strong&gt;阅读原文&lt;/strong&gt;】可直接跳转）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;观看直播赢大奖 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94621&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-width=&quot;50%&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j6qn90Jia7aurmWHcbEACtRNjsTdZ4FHcHhQKic0UrKsia5SH3UnYOvWW0hrKmtC4K0lbj2GicDAc1qCjugxbZAv8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;535&quot; data-width=&quot;100%&quot; title=&quot;&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;50%&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j6qn90Jia7aurmWHcbEACtRNjsTdZ4FHcI3njjVycVOEJBgSibMWF4XpjPs6gx0BiaUjLX0QLrBskaX8ib2jVy0C6A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot; data-width=&quot;100%&quot; title=&quot;京东卡正方图.jpg&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-width=&quot;50%&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j6qn90Jia7aurmWHcbEACtRNjsTdZ4FHcpHNSJcDMtQKoQ6M4NXzCEkHqSfwsYbtplibpH2sTGr7d4rWIosmzeEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;466&quot; data-width=&quot;100%&quot; title=&quot;&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;50%&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j6qn90Jia7aurmWHcbEACtRNjsTdZ4FHcLeCEzJ2S7TD7b1N97micibkAzAb4s0A5qVpPjQIBchP5hJ48rXzbG9Og/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot; data-width=&quot;100%&quot; title=&quot;鼠标垫正方图.jpg&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;5月11日&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;“&lt;strong&gt;让观测更自动，让开发者更自由&lt;/strong&gt;”&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;不见不散&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94089&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;25%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;RECOMMEND&lt;/section&gt;&lt;section data-width=&quot;25%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;推荐阅读&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODM4ODIzNQ==&amp;amp;mid=2650724094&amp;amp;idx=1&amp;amp;sn=47beef2188b52b25d5f0de274df1243e&amp;amp;chksm=8749fb9ab03e728c11ba3f0c6826ed9d46de76c875b69451d7a20907e3fb43b104e1ec0bc061&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;113&quot; data-fileid=&quot;503239848&quot; data-ratio=&quot;0.2&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j6qn90Jia7auJryibpuIN7ubiakfFvbQEZXPZaeickgC93ZG8MicTRtmwtIbfPQ9zNusBOqW8cA8xGxbLbibhYelB4xg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODM4ODIzNQ==&amp;amp;mid=2650723832&amp;amp;idx=1&amp;amp;sn=d8e08eaade71d0da21e9c26f5cc020cc&amp;amp;chksm=8749f89cb03e718aac169d5006c3d4f4c11fcdbbfbdb2b58c7e018a815b7a01a500c28620003&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;113&quot; data-fileid=&quot;503239847&quot; data-ratio=&quot;0.2&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j6qn90Jia7auKx6zQH7ICibiaC4CuSYXaic68LibDWRHXsbrsicAhTzM3lFNxN8Y99NaKn18FJDPA6FwbJCvBE7lCrpw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODM4ODIzNQ==&amp;amp;mid=2650723892&amp;amp;idx=1&amp;amp;sn=86532f2eba7c95d7720e22d68252871c&amp;amp;chksm=8749fb50b03e724697461bba371a65c54cf915a07a7e331717db6e24c5159f3ad3886644c997&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;113&quot; data-fileid=&quot;503239846&quot; data-ratio=&quot;0.2&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j6qn90Jia7aundLHUlntWzGylymqyNS5icbx6a6TEFLFrpicSwlMshGBFFN5Ex0XMgDua6OUVkY2UQ4ibLrcicFH05Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;🌲&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;562&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j6qn90Jia7aurmWHcbEACtRNjsTdZ4FHc7v4kEloVptJfia9GT719fUd3VTmqcKpibEq7J6mOb0qZumU0N1WFficVA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;【阅读原文】&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;strong&gt;点击前往MetaFlow官方网站！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3ca786f3e9ff2e6e2d13a4b5f4bb09f0</guid>
<title>TCP 重传、滑动窗口、流量控制、拥塞控好难？看完图解就不愁了（重制）</title>
<link>https://toutiao.io/k/14tz08l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZclQSAM41A1ZnFukibKNKGiapfQQZJOKziaehj1pZzNHTicFkDKBMhTBzjZjys2GHM2nWd3LWt5SA7y0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1344&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作者：小林coding&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;图解网站：&lt;/span&gt;&lt;span&gt;https://xiaolincoding.com/&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是小林。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很早之前写了这篇文章：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247484017&amp;amp;idx=1&amp;amp;sn=dc54d43bfd5dc088e48adcfa2e2bc13f&amp;amp;chksm=f98e46dbcef9cfcdab645e79138deb078d68ad843b3e424408974bd8f0ecea620a2502a79230&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你还在为 TCP 重传、滑动窗口、流量控制、拥塞控制发愁吗？看完图解就不愁了&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;你还在为 TCP 重传、滑动窗口、流量控制、拥塞控制发愁吗？看完图解就不愁了&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当时有些图片有一些小错误，而公众号文章又无法更新图片，所以我纠正了这些图片后，重新发一下。&lt;strong&gt;&lt;span&gt;还有大家看文章的话，还是尽量去网站（https://xiaolincoding.com），因为网站的内容会实时更新。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如快速恢复的图，我重新画了下，会比较好理解文字中的逻辑：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.33499288762446655&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREHVKJERVdWXGjAhPUKXSUnxib37vwkekwdXicRC5Mtj40CuichWgPibOibCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2812&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;正文&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP &lt;strong&gt;巨复杂&lt;/strong&gt;，它为了保证可靠性，用了巨多的机制来保证，真是个「伟大」的协议，写着写着发现这水太深了。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文的全部图片都是小林绘画的，非常的辛苦且累，不废话了，直接进入正文，Go！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信大家都知道 TCP 是一个可靠传输的协议，那它是如何保证可靠的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了实现可靠性传输，需要考虑很多事情，例如数据的破坏、丢包、重复以及分片顺序混乱等问题。如不能解决这些问题，也就无从谈起可靠传输。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，TCP 是通过序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天，将重点介绍 TCP 的&lt;strong&gt;重传机制、滑动窗口、流量控制、拥塞控制。&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7201166180758017&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREvicJoYPbEZ99mThTev5XWv7IcSfdKlucGCjpz4ZnqQVlovAEibuQZgxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot;/&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;重传机制&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 实现可靠传输的方式之一，是通过序列号与确认应答。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 TCP 中，当发送端的数据到达接收主机时，接收端主机会返回一个确认应答消息，表示已收到消息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.6042654028436019&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREMlvkyHZ0bPmN5pBhEdcJrhC42VTT8bA4fQmeYGvucOpgQsry78tflg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;422&quot;/&gt;&lt;figcaption&gt;正常的数据传输&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但在错综复杂的网络，并不一定能如上图那么顺利能正常的数据传输，万一数据在传输过程中丢失了呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 TCP 针对数据包丢失的情况，会用&lt;strong&gt;重传机制&lt;/strong&gt;解决。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来说说常见的重传机制：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;超时重传&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重传机制的其中一个方式，就是在发送数据时，设定一个定时器，当超过指定的时间后，没有收到对方的 &lt;code&gt;ACK&lt;/code&gt; 确认应答报文，就会重发该数据，也就是我们常说的&lt;strong&gt;超时重传&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 会在以下两种情况发生超时重传：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7747252747252747&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREzeT61Vib4I3av0pZXAqEfKFbsLMeTdC7ric6eI3ZyiagyvDstv1pxKYNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1092&quot;/&gt;&lt;figcaption&gt;超时重传的两种情况&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;超时时间应该设置为多少呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来了解一下什么是 &lt;code&gt;RTT&lt;/code&gt;（Round-Trip Time 往返时延），从下图我们就可以知道：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8465473145780051&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREOJvkH67icJGwDvg3goGP9T7XsvmQNBOVq2REiaWxaGNodia9WBibg2zqQA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;782&quot;/&gt;&lt;figcaption&gt;RTT&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;RTT&lt;/code&gt; 指的是&lt;strong&gt;数据发送时刻到接收到确认的时刻的差值&lt;/strong&gt;，也就是包的往返时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;超时重传时间是以 &lt;code&gt;RTO&lt;/code&gt; （Retransmission Timeout 超时重传时间）表示。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设在重传的情况下，超时时间 &lt;code&gt;RTO&lt;/code&gt; 「较长或较短」时，会发生什么事情呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5991501416430595&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREjqDa1y01LMHJSyceiaDcFiczBcUbXNuE1mWPULfiaZIwoe3LSZash4jfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1412&quot;/&gt;&lt;figcaption&gt;超时时间较长与较短&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图中有两种超时时间不同的情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当超时时间 &lt;strong&gt;RTO 较大&lt;/strong&gt;时，重发就慢，丢了老半天才重发，没有效率，性能差；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当超时时间 &lt;strong&gt;RTO 较小&lt;/strong&gt;时，会导致可能并没有丢就重发，于是重发的就快，会增加网络拥塞，导致更多的超时，更多的超时导致更多的重发。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;精确的测量超时时间 &lt;code&gt;RTO&lt;/code&gt; 的值是非常重要的，这可让我们的重传机制更高效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上述的两种情况，我们可以得知，&lt;strong&gt;超时重传时间 RTO 的值应该略大于报文往返  RTT 的值&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7811993517017828&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRExpxutXReoIywqBf4gdE3V4NjKnZbt9z7g84T8l7M0MaPtJZ1RNhK4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;617&quot;/&gt;&lt;figcaption&gt;RTO 应略大于 RTT&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，可能大家觉得超时重传时间 &lt;code&gt;RTO&lt;/code&gt; 的值计算，也不是很复杂嘛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好像就是在发送端发包时记下 &lt;code&gt;t0&lt;/code&gt; ，然后接收端再把这个 &lt;code&gt;ack&lt;/code&gt; 回来时再记一个 &lt;code&gt;t1&lt;/code&gt;，于是 &lt;code&gt;RTT = t1 – t0&lt;/code&gt;。没那么简单，&lt;strong&gt;这只是一个采样，不能代表普遍情况&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上「报文往返 RTT 的值」是经常变化的，因为我们的网络也是时常变化的。也就因为「报文往返 RTT 的值」 是经常波动变化的，所以「超时重传时间 RTO 的值」应该是一个&lt;strong&gt;动态变化的值&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看看 Linux 是如何计算 &lt;code&gt;RTO&lt;/code&gt; 的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;估计往返时间，通常需要采样以下两个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;需要 TCP 通过采样 RTT 的时间，然后进行加权平均，算出一个平滑 RTT 的值，而且这个值还是要不断变化的，因为网络状况不断地变化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;除了采样 RTT，还要采样 RTT 的波动范围，这样就避免如果 RTT 有一个大的波动的话，很难被发现的情况。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RFC6289 建议使用以下的公式计算 RTO：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7668393782383419&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE1oHvhHhd3xrl2oicNkMs9D094WrfZMgKYPOaNCPOahiakhDoE1IHQSFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1158&quot;/&gt;&lt;figcaption&gt;RFC6289 建议的 RTO 计算&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 &lt;code&gt;SRTT&lt;/code&gt; 是计算平滑的RTT ，&lt;code&gt;DevRTR&lt;/code&gt; 是计算平滑的RTT 与 最新 RTT 的差距。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Linux 下，&lt;strong&gt;α = 0.125，β = 0.25， μ = 1，∂ = 4&lt;/strong&gt;。别问怎么来的，问就是大量实验中调出来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果超时重发的数据，再次超时的时候，又需要重传的时候，TCP 的策略是&lt;strong&gt;超时间隔加倍。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是&lt;strong&gt;每当遇到一次超时重传的时候，都会将下一次超时时间间隔设为先前值的两倍。两次超时，就说明网络环境差，不宜频繁反复发送。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;超时触发重传存在的问题是，超时周期可能相对较长。那是不是可以有更快的方式呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是就可以用「快速重传」机制来解决超时重发的时间等待。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;快速重传&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 还有另外一种&lt;strong&gt;快速重传（Fast Retransmit）机制&lt;/strong&gt;，它&lt;strong&gt;不以时间为驱动，而是以数据驱动重传&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;快速重传机制，是如何工作的呢？其实很简单，一图胜千言。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9304482225656878&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREybzjXrmSZFSNDpjmBrC5fhdCSFsjLOmLl7f86oeabMO5Nu5zNDZoPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;647&quot;/&gt;&lt;figcaption&gt;快速重传机制&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上图，发送方发出了 1，2，3，4，5 份数据：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一份 Seq1 先送到了，于是就 Ack 回 2；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;结果 Seq2 因为某些原因没收到，Seq3 到达了，于是还是 Ack 回 2；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;后面的 Seq4 和 Seq5 都到了，但还是 Ack 回 2，因为 Seq2 还是没有收到；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;发送端收到了三个 Ack = 2 的确认，知道了 Seq2 还没有收到，就会在定时器过期之前，重传丢失的 Seq2。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后，收到了 Seq2，此时因为 Seq3，Seq4，Seq5 都收到了，于是 Ack 回 6 。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，快速重传的工作方式是当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;快速重传机制只解决了一个问题，就是超时时间的问题，但是它依然面临着另外一个问题。就是&lt;strong&gt;重传的时候，是重传之前的一个，还是重传所有的问题。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如对于上面的例子，是重传 Seq2 呢？还是重传 Seq2、Seq3、Seq4、Seq5 呢？因为发送端并不清楚这连续的三个 Ack 2 是谁传回来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据 TCP 不同的实现，以上两种情况都是有可能的。可见，这是一把双刃剑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决不知道该重传哪些 TCP 报文，于是就有 &lt;code&gt;SACK&lt;/code&gt; 方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SACK 方法&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一种实现重传机制的方式叫：&lt;code&gt;SACK&lt;/code&gt;（ Selective Acknowledgment 选择性确认）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式需要在 TCP 头部「选项」字段里加一个 &lt;code&gt;SACK&lt;/code&gt; 的东西，它&lt;strong&gt;可以将缓存的地图发送给发送方&lt;/strong&gt;，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以&lt;strong&gt;只重传丢失的数据&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图，发送方收到了三次同样的 ACK 确认报文，于是就会触发快速重发机制，通过 &lt;code&gt;SACK&lt;/code&gt; 信息发现只有 &lt;code&gt;200~299&lt;/code&gt; 这段数据丢失，则重发时，就只选择了这个 TCP 段进行重复。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5852795470629866&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREWPfg9Pv9YY7L2cChGwfn8Y0w4CX2gs270uMYCjicbubtxGCHTffiapmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1413&quot;/&gt;&lt;figcaption&gt;选择性确认&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要支持 &lt;code&gt;SACK&lt;/code&gt;，必须双方都要支持。在 Linux 下，可以通过 &lt;code&gt;net.ipv4.tcp_sack&lt;/code&gt; 参数打开这个功能（Linux 2.4 后默认打开）。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Duplicate SACK&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Duplicate SACK 又称 &lt;code&gt;D-SACK&lt;/code&gt;，其主要&lt;strong&gt;使用了 SACK 来告诉「发送方」有哪些数据被重复接收了。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面举例两个栗子，来说明 &lt;code&gt;D-SACK&lt;/code&gt; 的作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;栗子一号：ACK 丢包&lt;/em&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6786922209695603&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREqgx7l2xco5SciaaRbpeuOC2HtKLmzgyxcU0licAnpwYQwwib4K6J14m7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;887&quot;/&gt;&lt;figcaption&gt;ACK 丢包&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;「接收方」发给「发送方」的两个 ACK 确认应答都丢失了，所以发送方超时后，重传第一个数据包（3000 ~ 3499）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;于是「接收方」发现数据是重复收到的，于是回了一个 SACK = 3000~3500&lt;/strong&gt;，告诉「发送方」 3000~3500 的数据早已被接收了，因为 ACK 都到了 4000 了，已经意味着 4000 之前的所有数据都已收到，所以这个 SACK 就代表着 &lt;code&gt;D-SACK&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这样「发送方」就知道了，数据没有丢，是「接收方」的 ACK 确认报文丢了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;栗子二号：网络延时&lt;/em&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1247401247401247&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREJwGh4ia0YQ7uC2mjicFK3lAfrVuVqXDMzk5FDtKTNSFw1bZibokVrIkhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;962&quot;/&gt;&lt;figcaption&gt;网络延时&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据包（1000~1499） 被网络延迟了，导致「发送方」没有收到 Ack 1500 的确认报文。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;而后面报文到达的三个相同的 ACK 确认报文，就触发了快速重传机制，但是在重传后，被延迟的数据包（1000~1499）又到了「接收方」；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;所以「接收方」回了一个 SACK=1000~1500，因为 ACK 已经到了 3000，所以这个 SACK 是 D-SACK，表示收到了重复的包。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这样发送方就知道快速重传触发的原因不是发出去的包丢了，也不是因为回应的 ACK 包丢了，而是因为网络延迟了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可见，&lt;code&gt;D-SACK&lt;/code&gt; 有这么几个好处：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;可以让「发送方」知道，是发出去的包丢了，还是接收方回应的 ACK 包丢了;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以知道是不是「发送方」的数据包被网络延迟了;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以知道网络中是不是把「发送方」的数据包给复制了;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Linux 下可以通过 &lt;code&gt;net.ipv4.tcp_dsack&lt;/code&gt; 参数开启/关闭这个功能（Linux 2.4 后默认打开）。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;滑动窗口&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;引入窗口概念的原因&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道 TCP 是每发送一个数据，都要进行一次确认应答。当上一个数据包收到了应答了， 再发送下一个。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个模式就有点像我和你面对面聊天，你一句我一句。但这种方式的缺点是效率比较低的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你说完一句话，我在处理其他事情，没有及时回复你，那你不是要干等着我做完其他事情后，我回复你，你才能说下一句话，很显然这不现实。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2389558232931728&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREibnoG4h8tC1zwcTbkvJ8II6LtCsPMzGu86Q1QTficBgicTI2TcIEWGjuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;498&quot;/&gt;&lt;figcaption&gt;按数据包进行确认应答&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，这样的传输方式有一个缺点：数据包的&lt;strong&gt;往返时间越长，通信的效率就越低&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为解决这个问题，TCP 引入了&lt;strong&gt;窗口&lt;/strong&gt;这个概念。即使在往返时间较长的情况下，它也不会降低网络通信的效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么有了窗口，就可以指定窗口大小，窗口大小就是指&lt;strong&gt;无需等待确认应答，而可以继续发送数据的最大值&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设窗口大小为 &lt;code&gt;3&lt;/code&gt; 个 TCP 段，那么发送方就可以「连续发送」 &lt;code&gt;3&lt;/code&gt; 个 TCP 段，并且中途若有 ACK 丢失，可以通过「下一个确认应答进行确认」。如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7024504084014003&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREFfDH7ibtQ3rMiaV5LbHhMiasicVgJDibnGRzsgUicYL1RWRhAPtgv2Z8Rgvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;857&quot;/&gt;&lt;figcaption&gt;用滑动窗口方式并行处理&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图中的 ACK 600 确认应答报文丢失，也没关系，因为可以通过下一个确认应答进行确认，只要发送方收到了 ACK 700 确认应答，就意味着 700 之前的所有数据「接收方」都收到了。这个模式就叫&lt;strong&gt;累计确认&lt;/strong&gt;或者&lt;strong&gt;累计应答&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;窗口大小由哪一方决定？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 头里有一个字段叫 &lt;code&gt;Window&lt;/code&gt;，也就是窗口大小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，通常窗口的大小是由接收方的窗口大小来决定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送方发送的数据大小不能超过接收方的窗口大小，否则接收方就无法正常接收到数据。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;发送方的滑动窗口&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来看看发送方的窗口，下图就是发送方缓存的数据，根据处理的情况分成四个部分，其中深蓝色方框是发送窗口，紫色方框是可用窗口：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3382352941176471&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREtGqTVr70mIgE9l8E1BkBGQyGYKUema83m8Pd0GKDj2IYfEC0fDof5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1428&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;#1 是已发送并收到 ACK确认的数据：1~31 字节&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;#2 是已发送但未收到 ACK确认的数据：32~45 字节&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;#3 是未发送但总大小在接收方处理范围内（接收方还有空间）：46~51字节&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;#4 是未发送但总大小超过接收方处理范围（接收方没有空间）：52字节以后&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在下图，当发送方把数据「全部」都一下发送出去后，可用窗口的大小就为 0 了，表明可用窗口耗尽，在没收到 ACK 确认之前是无法继续发送数据了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.27521008403361347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE7yp9no9Xib9EVicibMvicX0pVMetbd7DFrjVcN1I2FvT8VciaNXkKbOdIvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1428&quot;/&gt;&lt;figcaption&gt;可用窗口耗尽&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在下图，当收到之前发送的数据 &lt;code&gt;32~36&lt;/code&gt; 字节的 ACK 确认应答后，如果发送窗口的大小没有变化，则&lt;strong&gt;滑动窗口往右边移动 5 个字节，因为有 5 个字节的数据被应答确认&lt;/strong&gt;，接下来 &lt;code&gt;52~56&lt;/code&gt; 字节又变成了可用窗口，那么后续也就可以发送 &lt;code&gt;52~56&lt;/code&gt; 这 5 个字节的数据了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2537313432835821&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREoU3LwTicLLnCrH7MKdezgwcZ5JKknztGVKp5ZcOiaL23tQYmKuCUeqjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1608&quot;/&gt;&lt;figcaption&gt;32 ~ 36 字节已确认&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;程序是如何表示发送方的四个部分的呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 滑动窗口方案使用三个指针来跟踪在四个传输类别中的每一个类别中的字节。其中两个指针是绝对指针（指特定的序列号），一个是相对指针（需要做偏移）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3592436974789916&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE3kCmLRlJnLWIx3jrseprMy9Yok0kreDicTuucdzDSJsO7B4NUIrWE6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1428&quot;/&gt;&lt;figcaption&gt;SND.WND、SND.UN、SND.NXT&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;SND.WND&lt;/code&gt;：表示发送窗口的大小（大小是由接收方指定的）；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;SND.UNA&lt;/code&gt;：是一个绝对指针，它指向的是已发送但未收到确认的第一个字节的序列号，也就是 #2 的第一个字节。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;SND.NXT&lt;/code&gt;：也是一个绝对指针，它指向未发送但可发送范围的第一个字节的序列号，也就是 #3 的第一个字节。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;指向 #4 的第一个字节是个相对指针，它需要 &lt;code&gt;SND.UNA&lt;/code&gt; 指针加上 &lt;code&gt;SND.WND&lt;/code&gt; 大小的偏移量，就可以指向 #4 的第一个字节了。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么可用窗口大小的计算就可以是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;可用窗口大 = SND.WND -（SND.NXT - SND.UNA）&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;接收方的滑动窗口&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们看看接收方的窗口，接收窗口相对简单一些，根据处理的情况划分成三个部分：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;#1 + #2 是已成功接收并确认的数据（等待应用进程读取）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;#3 是未收到数据但可以接收的数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;#4 未收到数据并不可以接收的数据；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3480392156862745&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREu2CFdn3mltnicJqTkcQMCiakNV28uwc9E2T3IKnI7HFwXoibqQTxBPZQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1428&quot;/&gt;&lt;figcaption&gt;接收窗口&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中三个接收部分，使用两个指针进行划分:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;RCV.WND&lt;/code&gt;：表示接收窗口的大小，它会通告给发送方。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;RCV.NXT&lt;/code&gt;：是一个指针，它指向期望从发送方发送来的下一个数据字节的序列号，也就是 #3 的第一个字节。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;指向 #4 的第一个字节是个相对指针，它需要 &lt;code&gt;RCV.NXT&lt;/code&gt; 指针加上 &lt;code&gt;RCV.WND&lt;/code&gt; 大小的偏移量，就可以指向 #4 的第一个字节了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;接收窗口和发送窗口的大小是相等的吗？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并不是完全相等，接收窗口的大小是&lt;strong&gt;约等于&lt;/strong&gt;发送窗口的大小的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为滑动窗口并不是一成不变的。比如，当接收方的应用进程读取数据的速度非常快的话，这样的话接收窗口可以很快的就空缺出来。那么新的接收窗口大小，是通过 TCP 报文中的 Windows 字段来告诉发送方。那么这个传输过程是存在时延的，所以接收窗口和发送窗口是约等于的关系。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;流量控制&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送方不能无脑的发数据给接收方，要考虑接收方处理能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一直无脑的发数据给对方，但对方处理不过来，那么就会导致触发重发机制，从而导致网络流量的无端的浪费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这种现象发生，&lt;strong&gt;TCP 提供一种机制可以让「发送方」根据「接收方」的实际接收能力控制发送的数据量，这就是所谓的流量控制。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面举个栗子，为了简单起见，假设以下场景：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端是接收方，服务端是发送方&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假设接收窗口和发送窗口相同，都为 &lt;code&gt;200&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假设两个设备在整个传输过程中都保持相同的窗口大小，不受外界影响&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.6124082721814543&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREZIiaosKyJGcbtt60ibrMmCkvVASEopib3GTMkeibfxd6zAEWiaxEABu2AKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1499&quot;/&gt;&lt;figcaption&gt;流量控制&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上图的流量控制，说明下每个过程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端向服务端发送请求数据报文。这里要说明下，本次例子是把服务端作为发送方，所以没有画出服务端的接收窗口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到请求报文后，发送确认报文和 80 字节的数据，于是可用窗口 &lt;code&gt;Usable&lt;/code&gt; 减少为 120 字节，同时 &lt;code&gt;SND.NXT&lt;/code&gt; 指针也向右偏移 80 字节后，指向 321，&lt;strong&gt;这意味着下次发送数据的时候，序列号是 321。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到 80 字节数据后，于是接收窗口往右移动 80 字节，&lt;code&gt;RCV.NXT&lt;/code&gt; 也就指向 321，&lt;strong&gt;这意味着客户端期望的下一个报文的序列号是 321&lt;/strong&gt;，接着发送确认报文给服务端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端再次发送了 120 字节数据，于是可用窗口耗尽为 0，服务端无法再继续发送数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到 120 字节的数据后，于是接收窗口往右移动 120 字节，&lt;code&gt;RCV.NXT&lt;/code&gt; 也就指向 441，接着发送确认报文给服务端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到对 80 字节数据的确认报文后，&lt;code&gt;SND.UNA&lt;/code&gt; 指针往右偏移后指向 321，于是可用窗口 &lt;code&gt;Usable&lt;/code&gt; 增大到 80。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到对 120 字节数据的确认报文后，&lt;code&gt;SND.UNA&lt;/code&gt; 指针往右偏移后指向 441，于是可用窗口 &lt;code&gt;Usable&lt;/code&gt; 增大到 200。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端可以继续发送了，于是发送了 160 字节的数据后，&lt;code&gt;SND.NXT&lt;/code&gt; 指向 601，于是可用窗口  &lt;code&gt;Usable&lt;/code&gt; 减少到 40。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到 160 字节后，接收窗口往右移动了 160 字节，&lt;code&gt;RCV.NXT&lt;/code&gt; 也就是指向了 601，接着发送确认报文给服务端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到对 160 字节数据的确认报文后，发送窗口往右移动了 160 字节，于是 &lt;code&gt;SND.UNA&lt;/code&gt; 指针偏移了 160 后指向 601，可用窗口 &lt;code&gt;Usable&lt;/code&gt; 也就增大至了 200。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;操作系统缓冲区与滑动窗口的关系&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面的流量控制例子，我们假定了发送窗口和接收窗口是不变的，但是实际上，发送窗口和接收窗口中所存放的字节数，都是放在操作系统内存缓冲区中的，而操作系统的缓冲区，会&lt;strong&gt;被操作系统调整&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当应用进程没办法及时读取缓冲区的内容时，也会对我们的缓冲区造成影响。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;那操心系统的缓冲区，是如何影响发送窗口和接收窗口的呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;我们先来看看第一个例子。&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当应用程序没有及时读取缓存时，发送窗口和接收窗口的变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑以下场景：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端作为发送方，服务端作为接收方，发送窗口和接收窗口初始大小为 &lt;code&gt;360&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端非常的繁忙，当收到客户端的数据时，应用层不能及时读取数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5532837670384139&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREBdBpPrONw6d6ruvfMSynOAZFTDdibfN1L5v0kJNsr2c8B0nJBSajtew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1614&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上图的流量控制，说明下每个过程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送 140 字节数据后，可用窗口变为 220 （360 - 140）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到 140 字节数据，&lt;strong&gt;但是服务端非常繁忙，应用进程只读取了 40 个字节，还有 100 字节占用着缓冲区，于是接收窗口收缩到了 260 （360 - 100）&lt;/strong&gt;，最后发送确认信息时，将窗口大小通告给客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到确认和窗口通告报文后，发送窗口减少为 260。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端发送 180 字节数据，此时可用窗口减少到 80。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到 180 字节数据，&lt;strong&gt;但是应用程序没有读取任何数据，这 180 字节直接就留在了缓冲区，于是接收窗口收缩到了 80 （260 - 180）&lt;/strong&gt;，并在发送确认信息时，通过窗口大小给客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到确认和窗口通告报文后，发送窗口减少为 80。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端发送 80 字节数据后，可用窗口耗尽。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到 80 字节数据，&lt;strong&gt;但是应用程序依然没有读取任何数据，这 80 字节留在了缓冲区，于是接收窗口收缩到了 0&lt;/strong&gt;，并在发送确认信息时，通过窗口大小给客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到确认和窗口通告报文后，发送窗口减少为 0。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可见最后窗口都收缩为 0 了，也就是发生了窗口关闭。当发送方可用窗口变为 0 时，发送方实际上会定时发送窗口探测报文，以便知道接收方的窗口是否发生了改变，这个内容后面会说，这里先简单提一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;我们先来看看第二个例子。&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当服务端系统资源非常紧张的时候，操心系统可能会直接减少了接收缓冲区大小，这时应用程序又无法及时读取缓存数据，那么这时候就有严重的事情发生了，会出现数据包丢失的现象。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.008537279453614&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE0L7033r8JgXibsUt7o5msxt1qYIpZ6nMRepEFTfBzFgUsBibeyaRqq6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1757&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明下每个过程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送 140 字节的数据，于是可用窗口减少到了 220。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;服务端因为现在非常的繁忙，操作系统于是就把接收缓存减少了 120 字节，当收到 140 字节数据后，又因为应用程序没有读取任何数据，所以 140 字节留在了缓冲区中，于是接收窗口大小从 360 收缩成了 100&lt;/strong&gt;，最后发送确认信息时，通告窗口大小给对方。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;此时客户端因为还没有收到服务端的通告窗口报文，所以不知道此时接收窗口收缩成了 100，客户端只会看自己的可用窗口还有 220，所以客户端就发送了 180 字节数据，于是可用窗口减少到 40。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到了 180 字节数据时，&lt;strong&gt;发现数据大小超过了接收窗口的大小，于是就把数据包丢失了。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到第 2 步时，服务端发送的确认报文和通告窗口报文，尝试减少发送窗口到 100，把窗口的右端向左收缩了 80，此时可用窗口的大小就会出现诡异的负值。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，如果发生了先减少缓存，再收缩窗口，就会出现丢包的现象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;为了防止这种情况发生，TCP 规定是不允许同时减少缓存又收缩窗口的，而是采用先收缩窗口，过段时间再减少缓存，这样就可以避免了丢包情况。&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;窗口关闭&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前面我们都看到了，TCP 通过让接收方指明希望从发送方接收的数据大小（窗口大小）来进行流量控制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如果窗口大小为 0 时，就会阻止发送方给接收方传递数据，直到窗口变为非 0 为止，这就是窗口关闭。&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;窗口关闭潜在的危险&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接收方向发送方通告窗口大小时，是通过 &lt;code&gt;ACK&lt;/code&gt; 报文来通告的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，当发生窗口关闭时，接收方处理完数据后，会向发送方通告一个窗口非 0 的 ACK 报文，如果这个通告窗口的 ACK 报文在网络中丢失了，那麻烦就大了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7490942028985508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREyYHCHPZqUd9sJcZn1LU07c8GMvl8riaibTJpzUEX3adNFDf9bzERTMDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1104&quot;/&gt;&lt;figcaption&gt;窗口关闭潜在的危险&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这会导致发送方一直等待接收方的非 0 窗口通知，接收方也一直等待发送方的数据，如不采取措施，这种相互等待的过程，会造成了死锁的现象。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;TCP 是如何解决窗口关闭时，潜在的死锁现象呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这个问题，TCP 为每个连接设有一个持续定时器，&lt;strong&gt;只要 TCP 连接一方收到对方的零窗口通知，就启动持续计时器。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果持续计时器超时，就会发送&lt;strong&gt;窗口探测 ( Window
probe ) 报文&lt;/strong&gt;，而对方在确认这个探测报文时，给出自己现在的接收窗口大小。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7491554054054054&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREelkXDGcZdnic9RqfTP7kG41HjrypQofib4QROLnQOmnMLSNffQ3EmBdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1184&quot;/&gt;&lt;figcaption&gt;窗口探测&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果接收窗口仍然为 0，那么收到这个报文的一方就会重新启动持续计时器；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果接收窗口不是 0，那么死锁的局面就可以被打破了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;窗口探测的次数一般为 3 次，每次大约 30-60 秒（不同的实现可能会不一样）。如果 3 次过后接收窗口还是 0 的话，有的 TCP 实现就会发 &lt;code&gt;RST&lt;/code&gt; 报文来中断连接。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;糊涂窗口综合症&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果接收方太忙了，来不及取走接收窗口里的数据，那么就会导致发送方的发送窗口越来越小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到最后，&lt;strong&gt;如果接收方腾出几个字节并告诉发送方现在有几个字节的窗口，而发送方会义无反顾地发送这几个字节，这就是糊涂窗口综合症&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要知道，我们的 &lt;code&gt;TCP + IP&lt;/code&gt; 头有 &lt;code&gt;40&lt;/code&gt; 个字节，为了传输那几个字节的数据，要达上这么大的开销，这太不经济了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就好像一个可以承载 50 人的大巴车，每次来了一两个人，就直接发车。除非家里有矿的大巴司机，才敢这样玩，不然迟早破产。要解决这个问题也不难，大巴司机等乘客数量超过了 25 个，才认定可以发车。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现举个糊涂窗口综合症的栗子，考虑以下场景：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接收方的窗口大小是 360 字节，但接收方由于某些原因陷入困境，假设接收方的应用层读取的能力如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;接收方每接收 3 个字节，应用程序就只能从缓冲区中读取 1 个字节的数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在下一个发送方的 TCP 段到达之前，应用程序还从缓冲区中读取了 40 个额外的字节；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9721718088324259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRENU4U8vxerdn8EyIkNUoooGrZJuDF39NTSmJptj24ruEZbWuEMVWDWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1653&quot;/&gt;&lt;figcaption&gt;糊涂窗口综合症&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个过程的窗口大小的变化，在图中都描述的很清楚了，可以发现窗口不断减少了，并且发送的数据都是比较小的了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，糊涂窗口综合症的现象是可以发生在发送方和接收方：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是，要解决糊涂窗口综合症，就解决上面两个问题就可以了&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;让接收方不通告小窗口给发送方&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;让发送方避免发送小数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;怎么让接收方不通告小窗口呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接收方通常的策略如下:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当「窗口大小」小于 min( MSS，缓存空间/2 ) ，也就是小于 MSS 与 1/2 缓存大小中的最小值时，就会向发送方通告窗口为 &lt;code&gt;0&lt;/code&gt;，也就阻止了发送方再发数据过来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等到接收方处理了一些数据后，窗口大小 &amp;gt;= MSS，或者接收方缓存空间有一半可以使用，就可以把窗口打开让发送方发送数据过来。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;怎么让发送方避免发送小数据呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送方通常的策略:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Nagle 算法，该算法的思路是延时处理，它满足以下两个条件中的一条才可以发送数据：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;要等到窗口大小 &amp;gt;= &lt;code&gt;MSS&lt;/code&gt; 或是 数据大小 &amp;gt;= &lt;code&gt;MSS&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;收到之前发送数据的 &lt;code&gt;ack&lt;/code&gt; 回包&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要没满足上面条件中的一条，发送方一直在囤积数据，直到满足上面的发送条件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，Nagle 算法默认是打开的，如果对于一些需要小数据包交互的场景的程序，比如，telnet 或 ssh 这样的交互性比较强的程序，则需要关闭 Nagle 算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以在 Socket 设置 &lt;code&gt;TCP_NODELAY&lt;/code&gt; 选项来关闭这个算法（关闭 Nagle 算法没有全局参数，需要根据每个应用自己的特点来关闭）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;setsockopt(sock_fd, IPPROTO_TCP, TCP_NODELAY, (&lt;span&gt;char&lt;/span&gt; *)&amp;amp;value, &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;拥塞控制&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;为什么要有拥塞控制呀，不是有流量控制了吗？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面的流量控制是避免「发送方」的数据填满「接收方」的缓存，但是并不知道网络的中发生了什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说，计算机网络都处在一个共享的环境。因此也有可能会因为其他主机之间的通信使得网络拥堵。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;在网络出现拥堵时，如果继续发送大量数据包，可能会导致数据包时延、丢失等，这时 TCP 就会重传数据，但是一重传就会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，这个情况就会进入恶性循环被不断地放大....&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，TCP 不能忽略网络上发生的事，它被设计成一个无私的协议，当网络发送拥塞时，TCP 会自我牺牲，降低发送的数据量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是，就有了&lt;strong&gt;拥塞控制&lt;/strong&gt;，控制的目的就是&lt;strong&gt;避免「发送方」的数据填满整个网络。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了在「发送方」调节所要发送数据的量，定义了一个叫做「&lt;strong&gt;拥塞窗口&lt;/strong&gt;」的概念。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;什么是拥塞窗口？和发送窗口有什么关系呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;拥塞窗口 cwnd&lt;/strong&gt;是发送方维护的一个的状态变量，它会根据&lt;strong&gt;网络的拥塞程度动态变化的&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在前面提到过发送窗口 &lt;code&gt;swnd&lt;/code&gt; 和接收窗口 &lt;code&gt;rwnd&lt;/code&gt; 是约等于的关系，那么由于加入了拥塞窗口的概念后，此时发送窗口的值是swnd = min(cwnd, rwnd)，也就是拥塞窗口和接收窗口中的最小值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拥塞窗口 &lt;code&gt;cwnd&lt;/code&gt; 变化的规则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;只要网络中没有出现拥塞，&lt;code&gt;cwnd&lt;/code&gt; 就会增大；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但网络中出现了拥塞，&lt;code&gt;cwnd&lt;/code&gt; 就减少；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;那么怎么知道当前网络是否出现了拥塞呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实只要「发送方」没有在规定时间内接收到 ACK 应答报文，也就是&lt;strong&gt;发生了超时重传，就会认为网络出现了用拥塞。&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;拥塞控制有哪些控制算法？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拥塞控制主要是四个算法：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;慢启动&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 在刚建立连接完成后，首先是有个慢启动的过程，这个慢启动的意思就是一点一点的提高发送数据包的数量，如果一上来就发大量的数据，这不是给网络添堵吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;慢启动的算法记住一个规则就行：&lt;strong&gt;当发送方每收到一个 ACK，拥塞窗口 cwnd 的大小就会加 1。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里假定拥塞窗口 &lt;code&gt;cwnd&lt;/code&gt; 和发送窗口 &lt;code&gt;swnd&lt;/code&gt; 相等，下面举个栗子：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;连接建立完成后，一开始初始化 &lt;code&gt;cwnd = 1&lt;/code&gt;，表示可以传一个 &lt;code&gt;MSS&lt;/code&gt; 大小的数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当收到一个 ACK 确认应答后，cwnd 增加 1，于是一次能够发送 2 个&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当收到 2 个的 ACK 确认应答后， cwnd 增加 2，于是就可以比之前多发2 个，所以这一次能够发送 4 个&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当这 4 个的 ACK 确认到来的时候，每个确认 cwnd 增加 1， 4 个确认 cwnd 增加 4，于是就可以比之前多发 4 个，所以这一次能够发送 8 个。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6220472440944882&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE3LSIgDjT5fEJJEy49oLo8c6yb843aaFdfPwSyNezxIBGxv9M7aLO7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1016&quot;/&gt;&lt;figcaption&gt;慢启动算法&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出慢启动算法，发包的个数是&lt;strong&gt;指数性的增长&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;那慢启动涨到什么时候是个头呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一个叫慢启动门限  &lt;code&gt;ssthresh&lt;/code&gt; （slow start threshold）状态变量。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当 &lt;code&gt;cwnd&lt;/code&gt; &amp;lt;  &lt;code&gt;ssthresh&lt;/code&gt; 时，使用慢启动算法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当 &lt;code&gt;cwnd&lt;/code&gt; &amp;gt;= &lt;code&gt;ssthresh&lt;/code&gt; 时，就会使用「拥塞避免算法」。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;拥塞避免算法&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面说道，当拥塞窗口 &lt;code&gt;cwnd&lt;/code&gt; 「超过」慢启动门限 &lt;code&gt;ssthresh&lt;/code&gt; 就会进入拥塞避免算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说 &lt;code&gt;ssthresh&lt;/code&gt; 的大小是 &lt;code&gt;65535&lt;/code&gt; 字节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么进入拥塞避免算法后，它的规则是：&lt;strong&gt;每当收到一个 ACK 时，cwnd 增加 1/cwnd。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接上前面的慢启动的栗子，现假定 &lt;code&gt;ssthresh&lt;/code&gt; 为 &lt;code&gt;8&lt;/code&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当 8 个 ACK 应答确认到来时，每个确认增加 1/8，8 个 ACK 确认 cwnd 一共增加 1，于是这一次能够发送 9 个 &lt;code&gt;MSS&lt;/code&gt; 大小的数据，变成了&lt;strong&gt;线性增长。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.838302752293578&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE24rKa6myYycvJ54GJJf8RerMFKfZNxyiaicC2LoZvCtLiceTH0KXKP67w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;872&quot;/&gt;&lt;figcaption&gt;拥塞避免&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，我们可以发现，拥塞避免算法就是将原本慢启动算法的指数增长变成了线性增长，还是增长阶段，但是增长速度缓慢了一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这么一直增长着后，网络就会慢慢进入了拥塞的状况了，于是就会出现丢包现象，这时就需要对丢失的数据包进行重传。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当触发了重传机制，也就进入了「拥塞发生算法」。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;拥塞发生&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当网络出现拥塞，也就是会发生数据包重传，重传机制主要有两种：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两种使用的拥塞发送算法是不同的，接下来分别来说说。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;发生超时重传的拥塞发生算法&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当发生了「超时重传」，则就会使用拥塞发生算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时候，ssthresh 和 cwnd 的值会发生变化：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ssthresh&lt;/code&gt; 设为 &lt;code&gt;cwnd/2&lt;/code&gt;，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;cwnd&lt;/code&gt; 重置为 &lt;code&gt;1&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7644483362521891&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRExtA2mLaf1XM5W7UUXwMZIbd7HRjBIgkRh1FRq1pvdmibyG1IC7J1dRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1142&quot;/&gt;&lt;figcaption&gt;拥塞发送 —— 超时重传&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着，就重新开始慢启动，慢启动是会突然减少数据流的。这真是一旦「超时重传」，马上回到解放前。但是这种方式太激进了，反应也很强烈，会造成网络卡顿。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就好像本来在秋名山高速漂移着，突然来个紧急刹车，轮胎受得了吗。。。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;发生快速重传的拥塞发生算法&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有更好的方式，前面我们讲过「快速重传算法」。当接收方发现丢了一个中间包的时候，发送三次前一个包的 ACK，于是发送端就会快速地重传，不必等待超时再重传。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 认为这种情况不严重，因为大部分没丢，只丢了一小部分，则 &lt;code&gt;ssthresh&lt;/code&gt; 和 &lt;code&gt;cwnd&lt;/code&gt; 变化如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;cwnd = cwnd/2&lt;/code&gt; ，也就是设置为原来的一半;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ssthresh = cwnd&lt;/code&gt;;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;进入快速恢复算法&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;快速恢复&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;快速重传和快速恢复算法一般同时使用，快速恢复算法是认为，你还能收到 3 个重复 ACK 说明网络也不那么糟糕，所以没有必要像 &lt;code&gt;RTO&lt;/code&gt; 超时那么强烈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正如前面所说，进入快速恢复之前，&lt;code&gt;cwnd&lt;/code&gt; 和 &lt;code&gt;ssthresh&lt;/code&gt; 已被更新了：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;cwnd = cwnd/2&lt;/code&gt; ，也就是设置为原来的一半;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ssthresh = cwnd&lt;/code&gt;;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，进入快速恢复算法如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;拥塞窗口 &lt;code&gt;cwnd = ssthresh + 3&lt;/code&gt; （ 3 的意思是确认有 3 个数据包被收到了）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重传丢失的数据包；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果再收到重复的 ACK，那么 cwnd 增加 1；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果收到新数据的 ACK 后，把 cwnd 设置为第一步中的 ssthresh 的值，原因是该 ACK 确认了新的数据，说明从 duplicated  ACK 时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6457100591715976&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREy2lpkJmVLajoOIz5eyzJxU1nOQUmWjmRo7icLAUUHLFstgXNqT3U1sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1352&quot;/&gt;&lt;figcaption&gt;快速重传和快速恢复&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是没有像「超时重传」一夜回到解放前，而是还在比较高的值，后续呈线性增长。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;拥塞算法示意图&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，以上就是拥塞控制的全部内容了，看完后，你再来看下面这张图片，每个过程我相信你都能明白：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.50875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREU5BJagnDSNS1U5O5kicKFTd8VkMibeD6tSUwSh2X4RDLhP6rz7ZoKIew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;figcaption&gt;TCP 拥塞控制&lt;/figcaption&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[1] 趣谈网络协议专栏.刘超.极客时间&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[2] Web协议详解与抓包实战专栏.陶辉.极客时间&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[3] TCP/IP详解 卷1：协议.范建华 译.机械工业出版社&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[4] 图解TCP/IP.竹下隆史.人民邮电出版社&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[5] The TCP/IP Guide.Charles M. Kozierok.&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[6] TCP那些事（上）.陈皓.酷壳博客.
https://coolshell.cn/articles/11564.html&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[7] TCP那些事（下）.陈皓.酷壳博客.https://coolshell.cn/articles/11609.html&lt;/span&gt;&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是吧？TCP 巨复杂吧？看完很累吧？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这还只是 TCP 冰山一脚，它的更深处就由你们自己去探索啦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;小林是专为大家图解的工具人，Goodbye，我们下次见！&lt;/strong&gt;&lt;/p&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;28&quot;&gt;&lt;span&gt;&lt;strong mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;28&quot;&gt;图解系列文章：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;24&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247507000&amp;amp;idx=1&amp;amp;sn=c045101b45dd70ec37f9b81361b09f14&amp;amp;chksm=f98d9892cefa1184ac8e278e468a8a225cd5a6f4c3dfba83ed223c5da69421041961bfb945cc&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小林的网站上线啦！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;24&quot; hasload=&quot;1&quot;&gt;小林的网站上线啦！&lt;/a&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247492900&amp;amp;idx=1&amp;amp;sn=2c1d06a667b1e17e6d8caabff2bbb85b&amp;amp;chksm=f98da18ecefa28986109f13d28c1a06f304cb4d897eb2e931e79dc82d0b054ef6a9f7e1e4e91&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小林的图解系统，大曝光！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;小林的图解系统，大曝光！&lt;/a&gt;&lt;br mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247491944&amp;amp;idx=1&amp;amp;sn=b90deba780ae3840668e21127e467b83&amp;amp;chksm=f98da5c2cefa2cd456045e9b2ed92837ed10e4a2c650f463b29ef5d7f8f4d01014d92225acad&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;不鸽了，小林的「图解网络 3.0 」发布！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;span&gt;不鸽了，小林的「图解网络 3.0 」发布！&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxODAzNDg4NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfTwwjfpJhXgIrYMgtVcLhQQBVb02clZfKicbxaibSTNJqXe9Zu8ydiavZKJWJAIhKcnD9hBuKU92JZQ/0?wx_fmt=png&quot; data-nickname=&quot;小林coding&quot; data-alias=&quot;CodingLin&quot; data-signature=&quot;专注图解计算机基础，让天下没有难懂的八股文！刷题网站：xiaolincoding.com&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8f13d8f36d794100db2460ee3ee3a96d</guid>
<title>TikTok内幕：张一鸣的巨浪征途；Web3革命：逃离、信仰、大迁徙｜码农周刊VIP会员专属邮件周报 Vol.090</title>
<link>https://toutiao.io/k/8hmzq2o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;本文内容节选自&lt;strong&gt;「码农周刊VIP会员专属邮件周报 Vol.090」&lt;/strong&gt;，感谢阅读。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？扫码即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓↓↓&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本期，首先分享的是&lt;strong&gt;凯文·凯利70岁生日的103条人生建议&lt;/strong&gt;，摘录几条，共勉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）不要为那种你不想成为的人工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）12个爱你的人，比12,000,000个喜欢你的人更值得。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）别犯同样的错，试一些新错。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）领导的真正工作是培养更多领导，而不是粉丝。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5）付出（锻炼、陪伴、工作）的连续性比数量更重要。日拱一卒，比偶尔为之更重要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;TikTok内幕：张一鸣的巨浪征途&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://mp.weixin.qq.com/s/1Dv17rDRto_1i_LdHEVARA&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“另一方面，张一鸣不会感情用事，对人对事极为精确，眼睛容不下灰色和沙粒。这让他流露出一种狠绝。在早期，他把拿走公司代码的人送进了监狱。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;Web3革命：逃离、信仰、大迁徙&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://mp.weixin.qq.com/s/_fZxTDOr2n1IQySjVODB8A&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;互联网正在发生的一场“大迁徙”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;B站SRE业务稳定性运营实践&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/vduu1jt&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从稳定性的相关理论定义出发，围绕稳定性的核心领域展开描述，并介绍B站在相关领域所做的实践探索。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;携程酒店订单缓存 &amp;amp; 存储系统升级实践&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/h7w6rt4&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;万字长文详解&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;阿里巴巴开源的高性能JSON库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://github.com/alibaba/fastjson2&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;FASTJSON项目的重要升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;一个专为 TypeScript 设计的 RPC 框架&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://github.com/k8w/tsrpc&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;适用于 HTTP API、WebSocket 实时应用、NodeJS 微服务等场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;几道高频的JVM面试题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/zgzh3st&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;供参考&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;9张图轻松吃透Go内存管理单元&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/x03gc99&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图文并茂&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;Elasticsearch 数据建模指南&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/n0gqyj1&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详细介绍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;我的机器学习之路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/y59f508&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;学习总结&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？扫码即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓↓↓&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5bed073e4598eba77728bb8a67318582</guid>
<title>一文带你了解 Prometheus</title>
<link>https://toutiao.io/k/778gp0x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvasIjZpiaTNIPReJVWEJf7UGpmokI3LL4NbQDb8fO48fYROmYPXUhXFN8IdDqPcI1gA6OfSLsQHxB4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：kevinkrcai，腾讯 IEG 后台开发工程师&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Prometheus 是一个开源的完整监控解决方案，本文将从指标抓取到查询及可视化展示，以及最后的监控告警，对 Prometheus 做一个基本的认识。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 简介&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus 是古希腊神话里泰坦族的一名神明，名字的意思是&quot;先见之明&quot;，下图中是 Prometheus 被宙斯惩罚，饱受肝脏日食夜长之苦。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6197802197802198&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC0iaZ8ibvoahdrUZV7mfzxVC3rYy4bZPPQlCBX57t3dpqPsUlMRiaT9icdg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面就是我们 CRUD Boy 所了解的 Prometheus，下面是其官网封面图引导语：From metrics to insight，从指标到洞察力，通过指标去洞察你的系统，为我们的系统提供指标收集和监控的开源解决方案。也就是说，Prometheus 是一个数据监控的解决方案，让我们能随时掌握系统运行的状态，快速定位问题和排除故障。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2555066079295154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCeexaurehETBh19V8icRqSLCYaoquLj2suhbIkSGxseuxKcO8tp0nKTA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;454&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus 发展速度很快，12 年开发完成，16 年加入 CNCF，成为继 K8s 之后第二个 CNCF 托管的项目，目前 Github 42k 的 🌟，而且社区很活跃，维护频率很高，基本稳定在 1 个月 1 个小版本的迭代速度。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.20985401459854014&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCmlpT45ZTw54vlXcCicbjK0nWOmWkU9j8icM23c7RnIq1ibTjlMZ2bhPiaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1096&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 整体生态&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus 提供了从指标暴露，到指标抓取、存储和可视化，以及最后的监控告警等一系列组件。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6646706586826348&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC0cQ1PbOwFqGwczyibr5EFoXZCty2U0CgQaB9xTywuNG7833iaPk9ZliaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1336&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 指标暴露&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一个被 Prometheus 监控的服务都是一个 Job，Prometheus 为这些 Job 提供了官方的 SDK ，利用这个 SDK 可以自定义并导出自己的业务指标，也可以使用 Prometheus 官方提供的各种常用组件和中间件的 Exporter（比如常用的 MySQL，Consul 等等）。对于短时间执行的脚本任务或者不好直接 Pull 指标的服务，Prometheus 提供了 PushGateWay 网关给这些任务将服务指标主动推 Push 到网关，Prometheus 再从这个网关里 Pull 指标。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 指标抓取&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到了 Push 和 Pull，其实这是两种指标抓取模型。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40375586854460094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCnVjFACo0UTSNxK2gIJJRgC3BRfY7dpM0lUqghmmyibFfKWkgsZDrgAw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;639&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;被监控服务一般通过主动暴露 metrics 端口或者通过 Exporter 的方式暴露指标，监控服务依赖服务发现模块发现被监控服务，从而去定期的抓取指标。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Push 模型：被监控服务主动将指标推送到监控服务，可能需要对指标做协议适配，必须得符合监控服务要求的指标格式&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37254901960784315&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCqjnYUgVwCxAvfibb5iafGEhNTBkCZod7VV8EYePfJyfVqQbCtwnuHFyQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;408&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于 Prometheus 中的指标抓取，采用的是 Pull 模型，默认是一分钟去拉取一次指标，通过 Prometheus.yaml 配置文件中的 scrape_interval 配置项配置，Prometheus 对外都是用的 Pull 模型，一个是 Pull Exporter 的暴露的指标，一个是 Pull PushGateway 暴露的指标。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3 指标存储和查询&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指标抓取后会存储在内置的时序数据库中，Prometheus 也提供了 PromQL 查询语言给我们做指标的查询，我们可以在 Prometheus 的 WebUI 上通过 PromQL，可视化查询我们的指标，也可以很方便的接入第三方的可视化工具，例如 grafana。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.4 监控告警&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;prometheus 提供了 alertmanageer 基于 promql 来做系统的监控告警，当 promql 查询出来的指标超过我们定义的阈值时，prometheus 会发送一条告警信息到 alertmanager，manager 会将告警下发到配置好的邮箱或者微信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 工作原理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus 的从被监控服务的注册到指标抓取到指标查询的流程分为五个步骤：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34801762114537443&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCefe3d6ZZPc5j7WImNkV8ibR5LQhGstsSPJ3ibACwMtlFw2IXLFVZjvQA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;454&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1 服务注册&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;被监控服务在 Prometheus 中是一个 Job 存在，被监控服务的所有实例在 Prometheus 中是一个 target 的存在，所以被监控服务的注册就是在 Prometheus 中注册一个 Job 和其所有的 target，这个注册分为：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;静态注册：静态的将服务的 IP 和抓取指标的端口号配置在 Prometheus yaml 文件的 scrape_configs 配置下:&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;scrape_configs:&lt;br/&gt; - job_name: &lt;span&gt;&quot;prometheus&quot;&lt;/span&gt;&lt;br/&gt;   static_configs:&lt;br/&gt;   - targets: [&lt;span&gt;&quot;localhost:9090&quot;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是注册了一个名为 prometheus 的服务，这个服务下有一个实例，暴露的抓取地址是 localhost:9090。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;动态注册：动态注册就是在 Prometheus yaml 文件的 scrape_configs 配置下配置服务发现的地址和服务名，Prometheus 会去该地址，根据你提供的服务名动态发现实例列表，在 Prometheus 中，支持 consul，DNS，文件，K8s 等多种服务发现机制。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于 consul 的服务发现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; - job_name: &lt;span&gt;&quot;node_export_consul&quot;&lt;/span&gt;&lt;br/&gt;  metrics_path: /node_metrics&lt;br/&gt;  scheme: http&lt;br/&gt;  consul_sd_configs:&lt;br/&gt;   - server: localhost:8500&lt;br/&gt;     services:&lt;br/&gt;     - node_exporter&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们 consul 的地址就是：localhost:8500，服务名是 node_exporter，在这个服务下有一个 exporter 实例：localhost:9600。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2879120879120879&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCkuuRUBEib36SrS3E6ntKQu11gcDsqxXibPvgC8omO0GmOEpCkhxL1K7Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：如果是动态注册，最好加上这两配置，静态注册指标拉取的路径会默认的帮我们指定为 metrics_path:/metrics，所以如果暴露的指标抓取路径不同或者是动态的服务注册，最好加上这两个配置。不然会报错“INVALID“ is not a valid start token，演示下，百度了一下，这里可能是数据格式不统一导致。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;metrics_path: /node_metrics&lt;br/&gt;scheme: http&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;最后可以在 webUI 中查看发现的实例：&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16043956043956045&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCOl4Xz1vFy6FXOiaBmrzemklzLibRbK0mffWYTTSGECibwbMccvV8JFT2A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前，Prometheus 支持多达二十多种服务发现协议：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;azure_sd_config&amp;gt;&lt;br/&gt;&amp;lt;consul_sd_config&amp;gt;&lt;br/&gt;&amp;lt;digitalocean_sd_config&amp;gt;&lt;br/&gt;&amp;lt;docker_sd_config&amp;gt;&lt;br/&gt;&amp;lt;dockerswarm_sd_config&amp;gt;&lt;br/&gt;&amp;lt;dns_sd_config&amp;gt;&lt;br/&gt;&amp;lt;ec2_sd_config&amp;gt;&lt;br/&gt;&amp;lt;openstack_sd_config&amp;gt;&lt;br/&gt;&amp;lt;file_sd_config&amp;gt;&lt;br/&gt;&amp;lt;gce_sd_config&amp;gt;&lt;br/&gt;&amp;lt;hetzner_sd_config&amp;gt;&lt;br/&gt;&amp;lt;http_sd_config&amp;gt;&lt;br/&gt;&amp;lt;kubernetes_sd_config&amp;gt;&lt;br/&gt;&amp;lt;kuma_sd_config&amp;gt;&lt;br/&gt;&amp;lt;lightsail_sd_config&amp;gt;&lt;br/&gt;&amp;lt;linode_sd_config&amp;gt;&lt;br/&gt;&amp;lt;marathon_sd_config&amp;gt;&lt;br/&gt;&amp;lt;nerve_sd_config&amp;gt;&lt;br/&gt;&amp;lt;serverset_sd_config&amp;gt;&lt;br/&gt;&amp;lt;triton_sd_config&amp;gt;&lt;br/&gt;&amp;lt;eureka_sd_config&amp;gt;&lt;br/&gt;&amp;lt;scaleway_sd_config&amp;gt;&lt;br/&gt;&amp;lt;static_config&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2 配置更新&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在更新完 Prometheus 的配置文件后，我们需要更新我们的配置到程序内存里，这里的更新方式有两种，第一种简单粗暴，就是重启 Prometheus，第二种是动态更新的方式。如何实现动态的更新 Prometheus 配置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步：首先要保证启动 Prometheus 的时候带上启动参数：--web.enable-lifecycle&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;prometheus --config.file=/usr/local/etc/prometheus.yml --web.enable-lifecycle&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步：去更新我们的 Prometheus 配置:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三步：更新完配置后，我们可以通过 Post 请求的方式，动态更新配置：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;curl -v --request POST &#x27;http://localhost:9090/-/reload&#x27;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原理：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus 在 web 模块中，注册了一个 handler：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; o.EnableLifecycle {&lt;br/&gt;  router.Post(&lt;span&gt;&quot;/-/quit&quot;&lt;/span&gt;, h.quit)&lt;br/&gt;  router.Put(&lt;span&gt;&quot;/-/quit&quot;&lt;/span&gt;, h.quit)&lt;br/&gt;  router.Post(&lt;span&gt;&quot;/-/reload&quot;&lt;/span&gt;, h.reload) // reload配置&lt;br/&gt;  router.Put(&lt;span&gt;&quot;/-/reload&quot;&lt;/span&gt;, h.reload)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 h.reload 这个 handler 方法实现：这个 handler 就是往一个 channle 中发送一个信号：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func (h *Handler) reload(w http.ResponseWriter, r *http.Request) {&lt;br/&gt;  rc := make(chan error)&lt;br/&gt;  h.reloadCh &amp;lt;- rc  // 发送一个信号到channe了中&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err := &amp;lt;-rc; err != nil {&lt;br/&gt;   http.Error(w, fmt.Sprintf(&lt;span&gt;&quot;failed to reload config: %s&quot;&lt;/span&gt;, err), http.StatusInternalServerError)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 main 函数中会去监听这个 channel，只要有监听到信号，就会做配置的 reload，重新将新配置加载到内存中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;case&lt;/span&gt; rc := &amp;lt;-webHandler.Reload():&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err := reloadConfig(cfg.configFile, cfg.enableExpandExternalLabels, cfg.tsdb.EnableExemplarStorage, logger, noStepSubqueryInterval, reloaders...); err != nil {&lt;br/&gt;   level.Error(logger).Log(&lt;span&gt;&quot;msg&quot;&lt;/span&gt;, &lt;span&gt;&quot;Error reloading config&quot;&lt;/span&gt;, &lt;span&gt;&quot;err&quot;&lt;/span&gt;, err)&lt;br/&gt;   rc &amp;lt;- err&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;   rc &amp;lt;- nil&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3 指标抓取和存储&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus 对指标的抓取采取主动 Pull 的方式，即周期性的请求被监控服务暴露的 metrics 接口或者是 PushGateway，从而获取到 Metrics 指标，默认时间是 15s 抓取一次，配置项如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;global:&lt;br/&gt; scrape_interval: 15s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抓取到的指标会被以时间序列的形式保存在内存中，并且定时刷到磁盘上，默认是两个小时回刷一次。并且为了防止 Prometheus 发生崩溃或重启时能够恢复数据，Prometheus 也提供了类似 MySQL 中 binlog 一样的预写日志，当 Prometheus 崩溃重启时，会读这个预写日志来恢复数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. Metric 指标&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1 数据模型&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.32682926829268294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC9UAL58GUia1v8T9FBAfL4DYAZDMy7L5dzx11g5tBSG4ABjFprzctfmw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2460&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus 采集的所有指标都是以时间序列的形式进行存储，每一个时间序列有三部分组成：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;指标名和指标标签集合&lt;/strong&gt;：metric_name{&amp;lt;label1=v1&amp;gt;,&amp;lt;label2=v2&amp;gt;....}，指标名：表示这个指标是监控哪一方面的状态，比如 http_request_total 表示：请求数量；指标标签，描述这个指标有哪些维度，比如 http_request_total 这个指标，有请求状态码 code = 200/400/500，请求方式：method = get/post 等，实际上指标名称实际上是以标签的形式保存，这个标签是&lt;strong&gt;name&lt;/strong&gt;，即：&lt;strong&gt;name&lt;/strong&gt;=&lt;metric name=&quot;&quot;&gt;。&lt;/metric&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;时间戳&lt;/strong&gt;：描述当前时间序列的时间，单位：毫秒。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;样本值&lt;/strong&gt;：当前监控指标的具体数值，比如 http_request_total 的值就是请求数是多少。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以通过查看 Prometheus 的 metrics 接口查看所有上报的指标：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39181916038751347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCrWOS0VeiahibUFYnGCACb2kRl0gfOibNibclibpwXH79veelG1vmTPUNVyg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;929&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所有的指标也都是通过如下所示的格式来标识的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# HELP  // HELP：这里描述的指标的信息，表示这个是一个什么指标，统计什么的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# TYPE  // TYPE：这个指标是什么类型的&lt;/span&gt;&lt;br/&gt;&amp;lt;metric name&amp;gt;{&amp;lt;label name&amp;gt;=&amp;lt;label value&amp;gt;, ...} value  // 指标的具体格式，&amp;lt;指标名&amp;gt;{标签集合} 指标值&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.2 指标类型&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus 底层存储上其实并没有对指标做类型的区分，都是以时间序列的形式存储，但是为了方便用户的使用和理解不同监控指标之间的差异，Prometheus 定义了 4 种不同的指标类型：计数器 counter，仪表盘 gauge，直方图 histogram，摘要 summary。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46813186813186813&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC9FapbR4BVossBVpsAMiaXw78QNPXC8DzXSzmWM8ib2XVyBibIVqVDtibYQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Counter 计数器：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Counter 类型和 redis 的自增命令一样，只增不减，通过 Counter 指标可以统计 Http 请求数量，请求错误数，接口调用次数等单调递增的数据。同时可以结合 increase 和 rate 等函数统计变化速率，后续我们会提到这些内置函数。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7824175824175824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCOZib0OmrSKvruugDspeAmo82aicu1UEmP9XNEg0yqRtXIHjYDXYYOiamw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Gauge 仪表盘：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和 Counter 不同，Gauge 是可增可减的，可以反映一些动态变化的数据，例如当前内存占用，CPU 利用，Gc 次数等动态可上升可下降的数据，在 Prometheus 上通过 Gauge，可以不用经过内置函数直观的反映数据的变化情况，如下图表示堆可分配的空间大小：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46916299559471364&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCERMiaGzEZ4ffPFia7hxYKNAggd6soezOmKrcPcic3ujnZSPuS6o0hltMQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;454&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面两种是数值指标，代表数据的变化情况，Histogram 和 Summary 是统计类型的指标，表示数据的分布情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Histogram 直方图：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Histogram 是一种直方图类型，可以观察到指标在各个不同的区间范围的分布情况，如下图所示：可以观察到请求耗时在各个桶的分布。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4879120879120879&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCQEJQFxOP6UJmjXicmRRpUEib9vjibgyg9qrIEDWickrEbrZLuaHt6XmoRw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一点要注意的是，Histogram 是累计直方图，即每一个桶的是只有上区间，例如下图表示小于 0.1 毫秒（le=&quot;0.1&quot;）的请求数量是 18173 个，小于 0.2 毫秒（le=&quot;0.2&quot;)的请求是 18182 个，在 le=&quot;0.2&quot;这个桶中是包含了 le=&quot;0.1&quot;这个桶的数据，如果我们要拿到 0.1 毫秒到 0.2 毫秒的请求数量，可以通过两个桶想减得到。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29593810444874274&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC8RX5IL0NHibtabpgFfdtzNFY6D09yBUtBLqzFEpRUR4oZL5nxicFn32w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1034&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在直方图中，还可以通过 histogram_quantile 函数求出百分位数，比如 P50，P90，P99 等数据&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Summary 摘要&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Summary 也是用来做统计分析的，和 Histogram 区别在于，Summary 直接存储的就是百分位数，如下所示：可以直观的观察到样本的中位数，P90 和 P99。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30029154518950435&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCDEfoVn2y6nWLNvc9dQgdyeOicQEv8ic4VW9zM7lXKNjcGjDKB94q74bQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1029&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Summary 的百分位数是客户端计算好直接让 Prometheus 抓取的，不需要 Prometheus 计算，直方图是通过内置函数 histogram_quantile 在 Prometheus 服务端计算求出。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.3 指标导出&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指标导出有两种方式，一种是使用 Prometheus 社区提供的定制好的 Exporter 对一些组件诸如 MySQL，Kafka 等的指标作导出，也可以利用社区提供的 Client 来自定义指标导出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;github.com/prometheus/client_golang/prometheus/promhttp&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自定义 Prometheus exporter：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;import (&lt;br/&gt;  &lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  http.Handle(&lt;span&gt;&quot;/metrics&quot;&lt;/span&gt;, promhttp.Handler())&lt;br/&gt;  http.ListenAndServe(&lt;span&gt;&quot;:8080&quot;&lt;/span&gt;, nil)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;访问：http://localhost:8080/metrics，即可看到导出的指标，这里我们没有自定义任何的指标，但是能看到一些内置的Go的运行时指标和promhttp相关的指标，这个Client默认为我们暴露的指标，go_&lt;em&gt;：以 go&lt;/em&gt; 为前缀的指标是关于 Go 运行时相关的指标，比如垃圾回收时间、goroutine 数量等，这些都是 Go 客户端库特有的，其他语言的客户端库可能会暴露各自语言的其他运行时指标。promhttp**：来自 promhttp 工具包的相关指标，用于跟踪对指标请求的处理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28854625550660795&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCBicaeLESFUEe0UwXuOORzasfuroicYhJfuSL37e5m6tS5wZt0JYaEW9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;454&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17582417582417584&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC8epzE9Y9UXfbahZIrlElPyqbj21dYAibIiaQgNTGxiaPhYrlOy9ibqC2QQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;添加自定义指标：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;import (&lt;br/&gt;  &quot;net/http&quot;&lt;br/&gt;&lt;br/&gt;  &quot;github.com/prometheus/client_golang/prometheus&quot;&lt;br/&gt;  &quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func main() {&lt;br/&gt;&lt;br/&gt;  // 1.定义指标（类型，名字，帮助信息）&lt;br/&gt;  myCounter := prometheus.NewCounter(prometheus.CounterOpts{&lt;br/&gt;   Name: &quot;my_counter_total&quot;,&lt;br/&gt;   Help: &quot;自定义counter&quot;,&lt;br/&gt;  })&lt;br/&gt;  // 2.注册指标&lt;br/&gt;  prometheus.MustRegister(myCounter)&lt;br/&gt;  // 3.设置指标值&lt;br/&gt;  myCounter.Add(23)&lt;br/&gt;&lt;br/&gt;  http.Handle(&quot;/metrics&quot;, promhttp.Handler())&lt;br/&gt;  http.ListenAndServe(&quot;:8080&quot;, nil)&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26373626373626374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC1zW2US7KePqIMwBrmEoGIQIcdOOibxo7jh17IZzick4sUKK2fvmGUvag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模拟下在业务中上报接口请求量：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;  &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;github.com/prometheus/client_golang/prometheus&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;var (&lt;br/&gt;  MyCounter prometheus.Counter&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;// init 注册指标&lt;br/&gt;func &lt;span&gt;&lt;span&gt;init&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  // 1.定义指标（类型，名字，帮助信息）&lt;br/&gt;  MyCounter = prometheus.NewCounter(prometheus.CounterOpts{&lt;br/&gt;   Name: &lt;span&gt;&quot;my_counter_total&quot;&lt;/span&gt;,&lt;br/&gt;   Help: &lt;span&gt;&quot;自定义counter&quot;&lt;/span&gt;,&lt;br/&gt;  })&lt;br/&gt;&lt;br/&gt;  // 2.注册指标&lt;br/&gt;  prometheus.MustRegister(MyCounter)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// Sayhello&lt;br/&gt;func Sayhello(w http.ResponseWriter, r *http.Request) {&lt;br/&gt;  // 接口请求量递增&lt;br/&gt;  MyCounter.Inc()&lt;br/&gt;  fmt.Fprintf(w, &lt;span&gt;&quot;Hello Wrold!&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;main.go：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;import (&lt;br/&gt;  &lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  http.Handle(&lt;span&gt;&quot;/metrics&quot;&lt;/span&gt;, promhttp.Handler())&lt;br/&gt;  http.HandleFunc(&lt;span&gt;&quot;/counter&quot;&lt;/span&gt;,Sayhello)&lt;br/&gt;  http.ListenAndServe(&lt;span&gt;&quot;:8080&quot;&lt;/span&gt;, nil)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一开始启动时，指标 counter 是 0：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23516483516483516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC2hkiaosSSAVEaDDZ7smBxvibJAOJwwzv6hd53G2QFzNiabC2w4VDcZwfg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用：/counter 接口后，指标数据发生了变化，这样就可以简单实现了接口请求数的统计：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23516483516483516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCXZ1mLNw0gO1C0s8GP3G39P5ic8426WiavfM6vwyJvxcoOnVDspbIfUKA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于其他指标定义方式是一样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;var (&lt;br/&gt;  MyCounter prometheus.Counter&lt;br/&gt;  MyGauge prometheus.Gauge&lt;br/&gt;  MyHistogram prometheus.Histogram&lt;br/&gt;  MySummary prometheus.Summary&lt;br/&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;// init 注册指标&lt;br/&gt;func &lt;span&gt;&lt;span&gt;init&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  // 1.定义指标（类型，名字，帮助信息）&lt;br/&gt;  MyCounter = prometheus.NewCounter(prometheus.CounterOpts{&lt;br/&gt;   Name: &lt;span&gt;&quot;my_counter_total&quot;&lt;/span&gt;,&lt;br/&gt;   Help: &lt;span&gt;&quot;自定义counter&quot;&lt;/span&gt;,&lt;br/&gt;  })&lt;br/&gt;&lt;br/&gt;  // 定义gauge类型指标&lt;br/&gt;  MyGauge = prometheus.NewGauge(prometheus.GaugeOpts{&lt;br/&gt;   Name: &lt;span&gt;&quot;my_gauge_num&quot;&lt;/span&gt;,&lt;br/&gt;   Help: &lt;span&gt;&quot;自定义gauge&quot;&lt;/span&gt;,&lt;br/&gt;&lt;br/&gt;  })&lt;br/&gt;&lt;br/&gt;  // 定义histogram&lt;br/&gt;  MyHistogram = prometheus.NewHistogram(prometheus.HistogramOpts{&lt;br/&gt;   Name: &lt;span&gt;&quot;my_histogram_bucket&quot;&lt;/span&gt;,&lt;br/&gt;   Help: &lt;span&gt;&quot;自定义histogram&quot;&lt;/span&gt;,&lt;br/&gt;   Buckets: []float64{0.1,0.2,0.3,0.4,0.5},  // 需要指定桶&lt;br/&gt;&lt;br/&gt;  })&lt;br/&gt;&lt;br/&gt;  // 定义Summary&lt;br/&gt;  MySummary = prometheus.NewSummary(prometheus.SummaryOpts{&lt;br/&gt;   Name: &lt;span&gt;&quot;my_summary_bucket&quot;&lt;/span&gt;,&lt;br/&gt;   Help: &lt;span&gt;&quot;自定义summary&quot;&lt;/span&gt;,&lt;br/&gt;   // 这部分可以算好后在&lt;span&gt;set&lt;/span&gt;&lt;br/&gt;   Objectives: map[float64]float64{&lt;br/&gt;     0.5: 0.05,&lt;br/&gt;     0.9: 0.01,&lt;br/&gt;     0.99: 0.001,&lt;br/&gt;   },&lt;br/&gt;  })&lt;br/&gt;&lt;br/&gt;  // 2.注册指标&lt;br/&gt;  prometheus.MustRegister(MyCounter)&lt;br/&gt;  prometheus.MustRegister(MyGauge)&lt;br/&gt;  prometheus.MustRegister(MyHistogram)&lt;br/&gt;  prometheus.MustRegister(MySummary)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4593406593406593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCkmmiajqaaw71Dpe3ia99xnXicl6NYBGsFc9xcRqbhqicjo14kCVvDWcWUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的指标都是没有设置标签的，我们一般的指标都是带有标签的，如何设置指标的标签呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我要设置带标签的 counter 类型指标，只需要将原来的 NewCounter 方法替换为 NewCounterVec 方法即可，并且传入标签集合。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;MyCounter *prometheus.CounterVec&lt;br/&gt;// 1.定义指标（类型，名字，帮助信息）&lt;br/&gt;MyCounter = prometheus.NewCounterVec(&lt;br/&gt;  prometheus.CounterOpts{&lt;br/&gt;  Name: &lt;span&gt;&quot;my_counter_total&quot;&lt;/span&gt;,&lt;br/&gt;  Help: &lt;span&gt;&quot;自定义counter&quot;&lt;/span&gt;,&lt;br/&gt;  },&lt;br/&gt;  // 标签集合&lt;br/&gt;  []string{&lt;span&gt;&quot;label1&quot;&lt;/span&gt;,&lt;span&gt;&quot;label2&quot;&lt;/span&gt;},&lt;br/&gt;)&lt;br/&gt;// 带标签的&lt;span&gt;set&lt;/span&gt;指标值&lt;br/&gt;MyCounter.With(prometheus.Labels{&lt;span&gt;&quot;label1&quot;&lt;/span&gt;:&lt;span&gt;&quot;1&quot;&lt;/span&gt;,&lt;span&gt;&quot;label2&quot;&lt;/span&gt;:&lt;span&gt;&quot;2&quot;&lt;/span&gt;}).Inc()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15398886827458255&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCN4zaHSKGX1JyBdbdtAvX66FLH5K07ribIejDdmskbv9ABPHkdoz3ZrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;539&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他同理。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. PromQL&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚刚提到了 Prometheus 中指标有哪些类型以及如何导出我们的指标，现在指标导出到 Prometheus 了，利用其提供的 PromQL 可以查询我们导出的指标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PromQL 是 Prometheus 为我们提供的函数式的查询语言，查询表达式有四种类型：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;字符串：只作为某些内置函数的参数出现&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;标量：单一的数字值，可以是函数参数，也可以是函数的返回结果&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;瞬时向量：某一时刻的时序数据&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;区间向量：某一时间区间内的时序数据集合&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.1 瞬时查询&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接通过指标名即可进行查询，查询结果是当前指标最新的时间序列，比如查询 Gc 累积消耗的时间：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;go_gc_duration_seconds_count&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43736263736263736&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCU3NdDugibyHibvKCvdHvib3Dpg5mx3zibjvFPTAVkqtdlCUUAcqUJ0xIdQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到查询出来有多个同名指标结果，可以用{}做标签过滤查询：比如我们想查指定实例的指标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;go_gc_duration_seconds_count{instance=&quot;127.0.0.1:9600&quot;}&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23546511627906977&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCmYOHONnUrwsXRCia22kt4T1Dlc2ThFJbict6euyC4l59PALic15mRX4rg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1032&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且也支持则表达式，通过=~指定正则表达式，如下所示：查询所有 instance 是 localhost 开头的指标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;go_gc_duration_seconds_count{instance=~&quot;localhost.*&quot;}&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33480176211453744&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCwsDxblLHsEniaia6QN4a7PCNC3iczFO5Lm0TEOsialgvMOYv02yACSlfDA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;454&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.2 范围查询&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;范围查询的结果集就是区间向量，可以通过[]指定时间来做范围查询，查询 5 分钟内的 Gc 累积消耗时间：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;go_gc_duration_seconds_count{}[5m]&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：这里范围查询第一个点并不一定精确到刚刚好 5 分钟前的那个时序样本点，他是以 5 分钟作为一个区间，寻找这个区间的第一个点到最后一个样本点。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.545054945054945&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC4OHtPiaK66xU9Idoia6h80KRVbnWwCEF08Ib3LpyNvDq4IC6zOthbljA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间单位：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4199029126213592&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCxibRgoKPhxYVNHaEMM7kiciaorE1VEYX3lLWLQr5ZsKphbJBPibnkA9sMw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;412&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;d：天，h：小时，m：分钟，ms：毫秒，s：秒，w：周，y：年&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样支持类似 SQL 中的 offset 查询，如下：查询一天前当前 5 分钟前的时序数据集：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;go_gc_duration_seconds_count{}[5m] offset 1d&lt;/code&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.3 内置函数&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus 内置了很多函数，这里主要记录下常用的几个函数的使用：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;rate 和 irate 函数：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;rate 函数可以用来求指标的平均变化速率&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;rate函数=时间区间前后两个点的差 / 时间范围&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般 rate 函数可以用来求某个时间区间内的请求速率，也就是我们常说的 QPS：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4767080745341615&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCzgPUg6DHgC7aNtuKRYW9BY84BRR97iaShK26o8DRMoIInicoSqc19mjA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1288&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是 rate 函数只是算出来了某个时间区间内的平均速率，没办法反映突发变化，假设在一分钟的时间区间里，前 50 秒的请求量都是 0 到 10 左右，但是最后 10 秒的请求量暴增到 100 以上，这时候算出来的值可能无法很好的反映这个峰值变化。这个问题可以通过 irate 函数解决，irate 函数求出来的就是瞬时变化率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;时间区间内最后两个样本点的差 / 最后两个样本点的时间差&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4555735056542811&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC6pNDfwdh1whHsRcQ1iamYygjHH0DEDB1PeDjHA7yvCkKzGngngVwPGg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1238&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;可以通过图像看下两者的区别：irate 函数的图像峰值变化大，rate 函数变化较为平缓。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;rate 函数：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7248062015503876&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCGvGflP7I9UwibB6WY5wjxTcoOJxzuNSMD7x3sWsNz7XKqOratqye9lA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1032&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;irate 函数：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7775590551181102&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCPrLgUEslJYUPMpt5qD2dflGeFfTlZQ5EQbc2mh8YU4uhTCRD0D45BA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1016&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;聚合函数：Sum() by() without()&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也是上边的例子，我们在求指定接口的 QPS 的时候，可能会出现多个实例的 QPS 的计算结果，如下是存在多个接口，三个服务的 QPS。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;rate(demo_api_request_duration_seconds_count{job=&quot;demo&quot;, method=&quot;GET&quot;, status=&quot;200&quot;}[5m])&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3934065934065934&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC5plKMtWFBOWibuKG0uHjBwb3XO16kByRA0tIc4DIYurPrSqZYwppEXQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;利用 sum 函数可以将三个 QPS 聚合，即可得到整个服务该接口的 QPS：其实 Sum 就是将指标值做相加。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2967032967032967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCRW9aHquaV8pX9gpibuYONd829FY5UQzDItIiaiaoQ088DMfOFlqP46GCw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是这样直接的相加太笼统抽象了，可以配合 by 和 without 函数在 sum 的时候，基于某些标签分组，类似 SQL 中的 group by&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，我可以根据请求接口标签分组：这样拿到的就是具体接口的 QPS：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sum(rate(demo_api_request_duration_seconds_count{job=&quot;demo&quot;, method=&quot;GET&quot;, status=&quot;200&quot;}[5m])) by(path)&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2681318681318681&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCesoj9tUe40tEnWpkvickibyw6EiasovFGvYmHOwXgtmY59lQ55SQXAROA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以不根据接口路径分组：通过 without 指定：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sum(rate(demo_api_request_duration_seconds_count{job=&quot;demo&quot;, method=&quot;GET&quot;, status=&quot;200&quot;}[5m])) without(path)&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41318681318681316&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCHsK72AFzVKYnr1H5UyGiblc4pKM8A8BBa0l8mumeic8m3Frict3I9AuDg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;可以通过 histogram_quantile 函数做数据统计：可以用来统计百分位数：第一个参数是百分位，第二个 histogram 指标，这样计算出来的就是中位数，即 P50&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;histogram_quantile(0.5,go_gc_pauses_seconds_total_bucket)&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2661795407098121&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCibWLRmbHy9RQhmiaEabg8sXCgmb2T2tgdictI8J6jw43grTsNZJvAPHPA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;958&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分享之前和同事一起发现的坑：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在刚刚写的自定义 exporter 上新增几个 histogram 的样本点：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;MyHistogram.Observe(0.3)&lt;br/&gt;MyHistogram.Observe(0.4)&lt;br/&gt;MyHistogram.Observe(0.5)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;histogram 的桶设置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;MyHistogram = prometheus.NewHistogram(prometheus.HistogramOpts{&lt;br/&gt;  Name: &lt;span&gt;&quot;my_histogram_bucket&quot;&lt;/span&gt;,&lt;br/&gt;  Help: &lt;span&gt;&quot;自定义histogram&quot;&lt;/span&gt;,&lt;br/&gt;  Buckets: []float64{0,2.5,5,7.5,10},  // 需要指定桶&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这样的话，所有指标都会直接进入到第一个桶，即 0 到 2.5 这个桶，如果我要计算中位数，那么这个中位数按照数学公式来算的话，肯定是在 0 到 2.5 之间的，而且肯定是 0.3 到 0.5 之间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我用&lt;strong&gt;histogram_quantile 函数&lt;/strong&gt;计算下：计算结果是 1.25，其实已经不对了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;histogram_quantile(0.5,my_histogram_bucket_bucket)&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2967032967032967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCNRGWhqrPBvJUaejQPia0HvOWXpCNNF4qlyeJbsXibJzibUrp2x5BygjNQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在计算下 P99，等于 2.475：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;histogram_quantile(0.99,my_histogram_bucket_bucket)&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2851600387972842&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCvBoDIa3X1ibr1dbOPiaMrRmnC2ZOXN85j47RMXUwicfFsR4KUbVsDy9RQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1031&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的指标都是不大于 1 的，为啥算出来的 P50 和 P99 都这么离谱呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是因为 Prometheus 他是不保存你具体的指标数值的，他会帮你把指标放到具体的桶，但是他不会保存你指标的值，计算的分位数是一个预估的值，怎么预估呢？就是假设每个桶内的样本分布是均匀的，线性分布来计算的，比如刚刚的 P50，其实就是算排在第 50%位置的样本值，因为刚刚所有的数据都落在了第一个桶，那么他在计算的时候就会假定这个 50%值在第一个桶的中点，他就会假定这个数就是 0.5 _ 2.5，P99 就是第一个桶的 99%的位置，他就会假定这个数就是 0.99 _ 2.5。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;导致这个误差较大的原因就是我们的 bucket 设置的不合理。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重新定义桶：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 定义histogram&lt;br/&gt;MyHistogram = prometheus.NewHistogram(prometheus.HistogramOpts{&lt;br/&gt;  Name: &lt;span&gt;&quot;my_histogram_bucket&quot;&lt;/span&gt;,&lt;br/&gt;  Help: &lt;span&gt;&quot;自定义histogram&quot;&lt;/span&gt;,&lt;br/&gt;  Buckets: []float64{0.1,0.2,0.3,0.4,0.5},  // 需要指定桶&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上报数据：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;MyHistogram.Observe(0.1)&lt;br/&gt;MyHistogram.Observe(0.3)&lt;br/&gt;MyHistogram.Observe(0.4)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3208791208791209&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmChXqjhZl0EnSU4Yb1jNicLdicocB8TN3QwObrokoMH49BGSsN47wsu2yA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重新计算 P50，P99：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13656387665198239&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCUX0tQC5JSqEFhJQIMEnnf6jEaeaXHdNtRQRKMP3GsN02HI9hGIVXTQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;454&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.12527472527472527&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCDr9ObLPibZRBKHJloWdPea0oM6klODD4FRDd4Gs0UNrCLGH6XOKYNXQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;桶设置的越合理，计算的误差越小&lt;/strong&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. Grafana 可视化&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了可以利用 Prometheus 提供的 webUI 可视化我们的指标外，还可以接入 Grafana 来做指标的可视化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步，对接数据源：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46593406593406594&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCCFfo7KLlL4IyMXTsrtXjuWfqamzhwfJnmsn0fsISGeJLR29wpdxQLQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置好 prometheus 的地址：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8801775147928994&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCZ6ZBRKic4yHnpEtkMBN6DIWNllZovG4Z4IXhFWMaVEmRU8sibFibh2baQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;676&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步：创建仪表盘&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4857142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCKAOooSsb5ZZCX7PCO80hJ5KayzdQNrV29oHHX8kc15bYqicwYtdP2mA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编辑仪表盘：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7185741088180112&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCso8ZgtT1fia8sibjAia3HN9mvbaibCdPAFs34r0OkH1dowBhwG3rL0N08w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;533&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 metrics 处编写 PromQL 即可完成查询和可视化：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5022026431718062&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCcYB0Gic0mPEEchRXMGakzS2QhO9facNrOicmNuI4qY2FvCw6SKzLgd3Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;454&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仪表盘编辑完后，可以导出对应的 json 文件，方便下次导入同样的仪表盘：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.616822429906542&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCrNX0ibSbSA7Jlibw4VdxtgPicMS3UMWt2LibP5MFcOJWmiaVrkiakNMf53Mg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;642&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上是我之前搭建的仪表盘：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6409937888198758&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCJdic1DcL10CWKD5ctMnnFtDcZs7J01fiaQvVbrWPrrGJcR6G3p5ud19Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1610&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. 监控告警&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AlertManager 是 prometheus 提供的告警信息下发组件，包含了对告警信息的分组，下发，静默等策略。配置完成后可以在 webui 上看到对应的告警策略信息。告警规则也是基于 PromQL 进行定制的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编写告警配置：当 Http_srv 这个服务挂了，Prometheus 采集不到指标，并且持续时间 1 分钟，就会触发告警&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;groups:&lt;br/&gt;\- name: simulator-alert-rule&lt;br/&gt; rules:&lt;br/&gt; \- alert: HttpSimulatorDown&lt;br/&gt;  expr: sum(up{job=&lt;span&gt;&quot;http_srv&quot;&lt;/span&gt;}) == 0&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt;: 1m&lt;br/&gt;  labels:&lt;br/&gt;   severity: critical&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 prometheus.yml 中配置告警配置文件，需要配置上 alertmanager 的地址和告警文件的地址&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;\&lt;span&gt;# Alertmanager configuration&lt;/span&gt;&lt;br/&gt;alerting:&lt;br/&gt; alertmanagers:&lt;br/&gt; \- static_configs:&lt;br/&gt;  \- targets: [&lt;span&gt;&#x27;localhost:9093&#x27;&lt;/span&gt;]&lt;br/&gt;\&lt;span&gt;# Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.&lt;/span&gt;&lt;br/&gt;rule_files:&lt;br/&gt;  \- &lt;span&gt;&quot;alert_rules.yml&quot;&lt;/span&gt;&lt;br/&gt;  \&lt;span&gt;#- &quot;first_rules.yml&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置告警信息，例如告警发送地址，告警内容模版，分组策略等都在 alertmanager 的配置文件中配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;global:&lt;br/&gt; smtp_smarthost: &lt;span&gt;&#x27;smtp.qq.com:465&#x27;&lt;/span&gt;&lt;br/&gt; smtp_from: &lt;span&gt;&#x27;xxxx@qq.com&#x27;&lt;/span&gt;&lt;br/&gt; smtp_auth_username: &lt;span&gt;&#x27;xxxx@qq.com&#x27;&lt;/span&gt;&lt;br/&gt; smtp_auth_password: &lt;span&gt;&#x27;xxxx&#x27;&lt;/span&gt;&lt;br/&gt; smtp_require_tls: &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;route:&lt;br/&gt; group_interval: 1m&lt;br/&gt; repeat_interval: 1m&lt;br/&gt; receiver: &lt;span&gt;&#x27;mail-receiver&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# group_by       //采用哪个标签作为分组&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# group_wait      //分组等待的时间，收到报警不是立马发送出去，而是等待一段时间，看看同一组中是否有其他报警，如果有一并发送&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# group_interval    //告警时间间隔&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# repeat_interval   //重复告警时间间隔，可以减少发送告警的频率&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# receiver       //接收者是谁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# routes        //子路由配置&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;receivers:&lt;br/&gt;\- name: &lt;span&gt;&#x27;mail-receiver&#x27;&lt;/span&gt;&lt;br/&gt; email_configs:&lt;br/&gt;  \- to: &lt;span&gt;&#x27;xxxx@qq.com&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我 kill 进程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18461538461538463&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCS7sg89pUI28zSicsLrsyDdF0Gr9HgVkicGXOvbQBzfFY8fcPK9l3AQMA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;prometheus 已经触发告警：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6247139588100686&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCxt4r5Mp0nXMAiclewTibyvnOS4hSbtZoGWfqhOrnh0U9fcnh7HCnDmTg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;437&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在等待 1 分钟，如果持续还是符合告警策略，则状态为从 pending 变为 FIRING 会发送邮件到我的邮箱&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6581986143187067&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCPzzsVhaDpcbtECByibwrElibvSSKZIhGI6WFuVn0hsytd5h4YDSGWib2A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;433&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时我的邮箱收到了一条告警消息：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6007957559681698&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCTCkFPjKCzMHtECtgwf3L1qpny51b8gUVlIblXiadibsF4tNJMmVicOH1g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;alertmanager 也支持对告警进行静默，在 alertmanager 的 WEBUI 中配置即可：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6065934065934065&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmC0jyETt95CPJIdNL3euU0fic3AtMHXxRc0HQa1n8Na6k1kfcwhw59Bpg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;间隔了 4 分钟，没有收到告警，静默生效：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18021978021978022&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCVFZarticNknicOHOguujHbKtfmzQzOTuJURx55bdAAx4r7M3IdibtXCQQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个小时没有收到告警信息：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08782936010037641&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3N2ReqCCVg7XYsr8ypHmCYpK6lpv2q5EJmThCO57stGJFe8KVZBefGjqowiaNCxr6icb6S8OfMNhw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1594&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. 参考文献&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAqwsx9nH7UwAAAAstQy6ubaLX4KHWvLEZgBPE_qIsECYjAPmDzNPgMIvxGjb5VTGcXXQMQ54cVaBS&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7Ym3K77SEULgkia8l5rw4icduZhC2XYyo6A41r6xiaZIMMruibX6tTpFghC1D1GkLOyUWFSz04eibxkV1yt9IVGQACZ1avsrNnFv1bJCg&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SZ&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdVgdz60TZiaG9hyQ3cXMasdL3pv3c2Epqfsd9cIO51TiaCWGyVG7HHITVU3s9FGYiclB8&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/I7awtksbibjQe7RZAy84xESOBAfIZ8xQ9ApXt4uTe8po/0&quot; data-username=&quot;v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder&quot; data-nickname=&quot;腾讯程序员&quot; data-desc=&quot;4.29是世界舞蹈日，鹅厂的程序员们不仅会敲代码，舞一样跳地6，他们都来自腾讯舞蹈协会。没事不如跳舞~&quot; data-nonceid=&quot;14880561591363040734&quot; data-type=&quot;video&quot; data-width=&quot;2048&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>