<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>16b0381c43dabc5d9b1a50f92c12b863</guid>
<title>Kafka 为什么要放弃 Zookeeper</title>
<link>https://toutiao.io/k/98g49tv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近，&lt;code&gt;confluent&lt;/code&gt;社区发表了一篇文章，主要讲述了&lt;code&gt;Kafka&lt;/code&gt;未来的&lt;code&gt;2.8&lt;/code&gt;版本将要放弃&lt;code&gt;Zookeeper&lt;/code&gt;，这对于&lt;code&gt;Kafka&lt;/code&gt;用户来说，是一个重要的改进。之前部署&lt;code&gt;Kafka&lt;/code&gt;就必须得部署&lt;code&gt;Zookeeper&lt;/code&gt;，而之后就只要单独部署&lt;code&gt;Kafka&lt;/code&gt;就行了。&lt;span/&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.Kafka简介&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Apache Kafka&lt;/code&gt;最早是由&lt;code&gt;Linkedin&lt;/code&gt;公司开发，后来捐献给了&lt;code&gt;Apack&lt;/code&gt;基金会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Kafka&lt;/code&gt;被官方定义为分布式流式处理平台，因为具备高吞吐、可持久化、可水平扩展等特性而被广泛使用。目前&lt;code&gt;Kafka&lt;/code&gt;具体如下功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;消息队列,&lt;code&gt;Kafka&lt;/code&gt;具有系统解耦、流量削峰、缓冲、异步通信等消息队列的功能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式存储系统，&lt;code&gt;Kafka&lt;/code&gt;可以把消息持久化，同时用多副本来实现故障转移，可以作为数据存储系统来使用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实时数据处理，&lt;code&gt;Kafka&lt;/code&gt;提供了一些和数据处理相关的组件，比如&lt;code&gt;Kafka Streams&lt;/code&gt;、&lt;code&gt;Kafka Connect&lt;/code&gt;，具备了实时数据的处理功能。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面这张图是&lt;code&gt;Kafka&lt;/code&gt;的消息模型：&lt;span/&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.44819819819819817&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibP9zVMt4EJuWHtOGM2hVJ0DYO5Ln2ASVW1XuQU4X4P5Mhm7dI1sWPGd1MnSpGGolZ5XDxfc5JKfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面这张图，介绍一下&lt;code&gt;Kafka&lt;/code&gt;中的几个主要概念：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;producer&lt;/code&gt;和&lt;code&gt;consumer&lt;/code&gt;: 消息队列中的生产者和消费者，生产者将消息推送到队列，消费者从队列中拉取消息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;consumer group&lt;/code&gt;:消费者集合，这些消费者可以并行消费同一个&lt;code&gt;topic&lt;/code&gt;下不同&lt;code&gt;partition&lt;/code&gt;中的消息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;broker&lt;/code&gt;：&lt;code&gt;Kafka&lt;/code&gt;集群中的服务器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;topic&lt;/code&gt;：消息的分类。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;partition&lt;/code&gt;：&lt;code&gt;topic&lt;/code&gt;物理上的分组，一个&lt;code&gt;topic&lt;/code&gt;可以有&lt;code&gt;partition&lt;/code&gt;，每个&lt;code&gt;partition&lt;/code&gt;中的消息会被分配一个有序的&lt;code&gt;id&lt;/code&gt;作为&lt;code&gt;offset&lt;/code&gt;。每个&lt;code&gt;consumer group&lt;/code&gt;只能有一个消费者来消费一个&lt;code&gt;partition&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.Kafka和Zookeeper关系&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka架构如下图：&lt;img data-ratio=&quot;0.5727554179566563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibP9zVMt4EJuWHtOGM2hVJ0Ebx6ta9P0zRGZO5vSbuJBQWiczib1VlHrTBuvFFrFP7J1H4gZfmrJZibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;646&quot;/&gt;从图中可以看到，&lt;code&gt;Kafka&lt;/code&gt;的工作需要&lt;code&gt;Zookeeper&lt;/code&gt;的配合。那他们到底是怎么配合工作呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看下面这张图：&lt;img data-ratio=&quot;0.5760095011876485&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibP9zVMt4EJuWHtOGM2hVJ025Qu7ImfmseZVho9ibAHEJnYXyTj4iciaMDHnervzFTEWVbBLWLKBBQnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;842&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;2.1 注册中心&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;2.1.1 broker注册&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的图中可以看到，&lt;code&gt;broker&lt;/code&gt;分布式部署，就需要一个注册中心来进行统一管理。&lt;code&gt;Zookeeper&lt;/code&gt;用一个专门节点保存&lt;code&gt;Broker&lt;/code&gt;服务列表，也就是 &lt;code&gt;/brokers/ids&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;broker&lt;/code&gt;在启动时，向&lt;code&gt;Zookeeper&lt;/code&gt;发送注册请求，&lt;code&gt;Zookeeper&lt;/code&gt;会在&lt;code&gt;/brokers/ids&lt;/code&gt;下创建这个&lt;code&gt;broker&lt;/code&gt;节点，如&lt;code&gt;/brokers/ids/[0...N]&lt;/code&gt;，并保存&lt;code&gt;broker&lt;/code&gt;的&lt;code&gt;IP&lt;/code&gt;地址和端口。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这个节点临时节点，一旦&lt;code&gt;broker&lt;/code&gt;宕机，这个临时节点会被自动删除。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;2.1.2 topic注册&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Zookeeper&lt;/code&gt;也会为&lt;code&gt;topic&lt;/code&gt;分配一个单独节点，每个&lt;code&gt;topic&lt;/code&gt;都会以&lt;code&gt;/brokers/topics/[topic_name]&lt;/code&gt;的形式记录在&lt;code&gt;Zookeeper&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个&lt;code&gt;topic&lt;/code&gt;的消息会被保存到多个&lt;code&gt;partition&lt;/code&gt;，这些&lt;code&gt;partition&lt;/code&gt;跟&lt;code&gt;broker&lt;/code&gt;的对应关系也需要保存到&lt;code&gt;Zookeeper&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;partition&lt;/code&gt;是多副本保存的，上图中红色&lt;code&gt;partition&lt;/code&gt;是&lt;code&gt;leader&lt;/code&gt;副本。当&lt;code&gt;leader&lt;/code&gt;副本所在的broker发生故障时，&lt;code&gt;partition&lt;/code&gt;需要重新选举&lt;code&gt;leader&lt;/code&gt;，这个需要由&lt;code&gt;Zookeeper&lt;/code&gt;主导完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;broker&lt;/code&gt;启动后，会把自己的&lt;code&gt;Broker ID&lt;/code&gt;注册到到对应&lt;code&gt;topic&lt;/code&gt;节点的分区列表中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们查看一个&lt;code&gt;topic&lt;/code&gt;是&lt;code&gt;xxx&lt;/code&gt;，分区编号是&lt;code&gt;1&lt;/code&gt;的信息，命令如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@master] get /brokers/topics/xxx/partitions/1/state&lt;br/&gt;{&lt;span&gt;&quot;controller_epoch&quot;&lt;/span&gt;:15,&lt;span&gt;&quot;leader&quot;&lt;/span&gt;:11,&lt;span&gt;&quot;version&quot;&lt;/span&gt;:1,&lt;span&gt;&quot;leader_epoch&quot;&lt;/span&gt;:2,&lt;span&gt;&quot;isr&quot;&lt;/span&gt;:[11,12,13]}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;当&lt;code&gt;broker&lt;/code&gt;退出后，&lt;code&gt;Zookeeper&lt;/code&gt;会更新其对应&lt;code&gt;topic&lt;/code&gt;的分区列表。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;2.1.3 consumer注册&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者组也会向&lt;code&gt;Zookeeper&lt;/code&gt;进行注册，&lt;code&gt;Zookeeper&lt;/code&gt;会为其分配节点来保存相关数据，节点路径为&lt;code&gt;/consumers/{group_id}&lt;/code&gt;，有&lt;code&gt;3&lt;/code&gt;个子节点，如下图:&lt;img data-ratio=&quot;0.24280701754385964&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibP9zVMt4EJuWHtOGM2hVJ0JZNlfibAnWsLGeDVeoUa53I9r51YgicBp4UO3VVweoJaaB5kUb5XoAiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1425&quot;/&gt;这样&lt;code&gt;Zookeeper&lt;/code&gt;可以记录分区跟消费者的关系，以及分区的&lt;code&gt;offset&lt;/code&gt;。&lt;span&gt;[3]&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;2.2 负载均衡&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;broker&lt;/code&gt;向&lt;code&gt;Zookeeper&lt;/code&gt;进行注册后，生产者根据&lt;code&gt;broker&lt;/code&gt;节点来感知&lt;code&gt;broker&lt;/code&gt;服务列表变化，这样可以实现动态负载均衡。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;consumer group&lt;/code&gt;中的消费者，可以根据&lt;code&gt;topic&lt;/code&gt;节点信息来拉取特定分区的消息,实现负载均衡。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;实际上，&lt;code&gt;Kafka&lt;/code&gt;在&lt;code&gt;Zookeeper&lt;/code&gt;中保存的元数据非常多，看下面这张图：&lt;img data-ratio=&quot;0.3340184994861254&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibP9zVMt4EJuWHtOGM2hVJ020I0WTKudqm8Y20XnqrjShadfkM8jhdmAE3WMYOnNkicz6OlFkiaX6og/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;973&quot;/&gt;随着broker、topic和partition增多，保存的数据量会越来越大。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.Controller介绍&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过上一节的讲述，我们看到了&lt;code&gt;Kafka&lt;/code&gt;对&lt;code&gt;Zookeeper&lt;/code&gt;的依赖非常大，&lt;code&gt;Kafka&lt;/code&gt;离开&lt;code&gt;Zookeeper&lt;/code&gt;是没有办法独立运行的。那&lt;code&gt;Kafka&lt;/code&gt;是怎么跟&lt;code&gt;Zookeeper&lt;/code&gt;进行交互的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图：&lt;span/&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;img data-ratio=&quot;0.47101449275362317&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibP9zVMt4EJuWHtOGM2hVJ0Get1O7LNMia7h6KUR1vtSGL9WVcoJy7JeobdkkC0TpQYCyKeOIhzKjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;code&gt;Kafka&lt;/code&gt;集群中会有一个&lt;code&gt;broker&lt;/code&gt;被选举为&lt;code&gt;Controller&lt;/code&gt;负责跟&lt;code&gt;Zookeeper&lt;/code&gt;进行交互，它负责管理整个&lt;code&gt;Kafka&lt;/code&gt;集群中所有分区和副本的状态。其他&lt;code&gt;broker&lt;/code&gt;监听&lt;code&gt;Controller&lt;/code&gt;节点的数据变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Controller&lt;/code&gt;的选举工作依赖于&lt;code&gt;Zookeeper&lt;/code&gt;，选举成功后，&lt;code&gt;Zookeeper&lt;/code&gt;会创建一个&lt;code&gt;/controller&lt;/code&gt;临时节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Controller&lt;/code&gt;具体职责如下：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;比如当某个分区的leader出现故障时，Controller会为该分区选举新的leader。当检测到分区的ISR集合发生变化时，Controller会通知所有broker更新元数据。当某个topic增加分区时，Controller会负责重新分配分区。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;监听&lt;code&gt;topic&lt;/code&gt;相关的变化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;监听&lt;code&gt;broker&lt;/code&gt;相关的变化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;集群元数据管理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面这张图展示了Controller、Zookeeper和broker的交互细节：&lt;img data-ratio=&quot;0.720558882235529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibP9zVMt4EJuWHtOGM2hVJ00al8icc8fR5ibV5o0vkoH5Dicy1G9COiaibxLyWJsfaM6tr5aqmOIu35LEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1002&quot;/&gt;&lt;code&gt;Controller&lt;/code&gt;选举成功后，会从&lt;code&gt;Zookeeper&lt;/code&gt;集群中拉取一份完整的元数据初始化&lt;code&gt;ControllerContext&lt;/code&gt;，这些元数据缓存在&lt;code&gt;Controller&lt;/code&gt;节点。当集群发生变化时，比如增加&lt;code&gt;topic&lt;/code&gt;分区，&lt;code&gt;Controller&lt;/code&gt;不仅需要变更本地的缓存数据，还需要将这些变更信息同步到其他&lt;code&gt;Broker&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Controller&lt;/code&gt;监听到&lt;code&gt;Zookeeper&lt;/code&gt;事件、定时任务事件和其他事件后，将这些事件按照先后顺序暂存到&lt;code&gt;LinkedBlockingQueue&lt;/code&gt;中，由事件处理线程按顺序处理，这些处理多数需要跟&lt;code&gt;Zookeeper&lt;/code&gt;交互，&lt;code&gt;Controller&lt;/code&gt;则需要更新自己的元数据。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.Zookeeper带来的问题&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Kafka&lt;/code&gt;本身就是一个分布式系统，但是需要另一个分布式系统来管理，复杂性无疑增加了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1 运维复杂度&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用了&lt;code&gt;Zookeeper&lt;/code&gt;，部署&lt;code&gt;Kafka&lt;/code&gt;的时候必须要部署两套系统，&lt;code&gt;Kafka&lt;/code&gt;的运维人员必须要具备&lt;code&gt;Zookeeper&lt;/code&gt;的运维能力。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.2 Controller故障处理&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Kafaka&lt;/code&gt;依赖一个单一&lt;code&gt;Controller&lt;/code&gt;节点跟&lt;code&gt;Zookeeper&lt;/code&gt;进行交互，如果这个&lt;code&gt;Controller&lt;/code&gt;节点发生了故障，就需要从&lt;code&gt;broker&lt;/code&gt;中选择新的&lt;code&gt;Controller&lt;/code&gt;。如下图,新的&lt;code&gt;Controller&lt;/code&gt;变成了&lt;code&gt;broker3&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4723076923076923&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibP9zVMt4EJuWHtOGM2hVJ0qic3b3bfvqD4BfZeiaPBibDBPk2JZMIEk5KApPYxV5AP8gKux2KoozBYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;650&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新的&lt;code&gt;Controller&lt;/code&gt;选举成功后，会重新从&lt;code&gt;Zookeeper&lt;/code&gt;拉取元数据进行初始化，并且需要通知其他所有的&lt;code&gt;broker&lt;/code&gt;更新&lt;code&gt;ActiveControllerId&lt;/code&gt;。老的&lt;code&gt;Controller&lt;/code&gt;需要关闭监听、事件处理线程和定时任务。分区数非常多时，这个过程非常耗时，而且这个过程中&lt;code&gt;Kafka&lt;/code&gt;集群是不能工作的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.3 分区瓶颈&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当分区数增加时，&lt;code&gt;Zookeeper&lt;/code&gt;保存的元数据变多，&lt;code&gt;Zookeeper&lt;/code&gt;集群压力变大，达到一定级别后，监听延迟增加，给&lt;code&gt;Kafaka&lt;/code&gt;的工作带来了影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，&lt;code&gt;Kafka&lt;/code&gt;单集群承载的分区数量是一个瓶颈。而这又恰恰是一些业务场景需要的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.升级&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;升级前后的架构图对比如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9238578680203046&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibP9zVMt4EJuWHtOGM2hVJ0pibFmEEYyNSeh9wDibbmdFBVWToVJziaFyLicFqaEITWMKib61yekVsXs9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;591&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;KIP-500&lt;/code&gt;用&lt;code&gt;Quorum Controller&lt;/code&gt;代替之前的&lt;code&gt;Controller&lt;/code&gt;，&lt;code&gt;Quorum&lt;/code&gt;中每个&lt;code&gt;Controller&lt;/code&gt;节点都会保存所有元数据，通过&lt;code&gt;KRaft&lt;/code&gt;协议保证副本的一致性。这样即使&lt;code&gt;Quorum Controller&lt;/code&gt;节点出故障了，新的&lt;code&gt;Controller&lt;/code&gt;迁移也会非常快。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方介绍，升级之后，&lt;code&gt;Kafka&lt;/code&gt;可以轻松支持百万级别的分区。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;Kafak团队把通过Raft协议同步数据的方式Kafka Raft Metadata mode,简称KRaft&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Kafka&lt;/code&gt;的用户体量非常大，在不停服的情况下升级是必要的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前去除&lt;code&gt;Zookeeper&lt;/code&gt;的&lt;code&gt;Kafka&lt;/code&gt;代码&lt;code&gt;KIP-500&lt;/code&gt;已经提交到&lt;code&gt;trunk&lt;/code&gt;分支，并且已经在的&lt;code&gt;2.8&lt;/code&gt;版本发布。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Kafaka&lt;/code&gt;计划在&lt;code&gt;3.0&lt;/code&gt;版本会兼容&lt;code&gt;Zookeeper Controller&lt;/code&gt;和&lt;code&gt;Quorum Controller&lt;/code&gt;，这样用户可以进行灰度测试。&lt;span/&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在大规模集群和云原生的背景下，使用&lt;code&gt;Zookeeper&lt;/code&gt;给&lt;code&gt;Kafka&lt;/code&gt;的运维和集群性能造成了很大的压力。去除&lt;code&gt;Zookeeper&lt;/code&gt;是必然趋势，这也符合大道至简的架构思想。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;参考1: &lt;span&gt;https://www.confluent.io/blog/kafka-without-zookeeper-a-sneak-peek/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;参考2: &lt;span&gt;https://blog.csdn.net/Zidingyi_367/article/details/110490910&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;参考3: &lt;span&gt;https://www.jianshu.com/p/a036405f989c&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;参考4: &lt;span&gt;https://honeypps.com/mq/kafka-controller-analysis/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;参考5: &lt;span&gt;https://mp.weixin.qq.com/s/ev6NM6hptltQBuTaCHJCQQ&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1d944f368eeeb4611fbad2ef66f429af</guid>
<title>为什么说数据服务是数据中台的标配？</title>
<link>https://toutiao.io/k/4ii67bh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;316&quot; data-backw=&quot;562&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;317&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WtGGOCsU5FPPTTSa0WfCIh1leqTs6whn0Do36eLicVM6yfEPRP6lWMd8gMwlQ145mNYDOfZ1TtGdbkCdp9qMmzw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;来源：谈数据，作者：石秀峰&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;全文共&lt;/span&gt;&lt;span&gt;4085&lt;/span&gt;&lt;span&gt;个字，建议阅读&lt;/span&gt;&lt;span&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;分钟&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Hi，大家好！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在上一篇文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NzYwNTMzNw==&amp;amp;mid=2247490172&amp;amp;idx=1&amp;amp;sn=9a7da23b96585a11be5da5b49a714a55&amp;amp;chksm=ea15b1cadd6238dc948e79f30ddaf594ea6f6b6df0de37bb6b94262775a2c1d7c2205dc47c65&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数据中台为什么要建标签体系，分类它不香吗？&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;数据中台为什么要建标签体系，分类它不香吗？&lt;/a&gt;》中，我们介绍了数据中台的一个颇有争议的功能——“标签体系”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有人认为，多维的数据分类体系已经够用了，标签就是一个“鸡肋”；也有人认为标签体系有有利于大数据的萃取和分析，提供画像能力，实现精准推荐，必须是数据中台的标配。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果“标签体系”确有争议的话，那么今天介绍的这个功能一定没有争议，它绝对是数据中台的真正标配，它就是——数据服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;— 01 &lt;strong&gt;—&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;什么是数据服务？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据服务的类别相当广泛，有提供数据传输能力的叫做数据传输服务，有提供数据存储能力的叫做数据存储服务，有执行各种类型分析的叫做数据分析服务，还有提供数据安全管理的叫做数据安全服务等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;这些都叫数据服务，但这些数据服务强调的是能力，更准确的定义是“Data as a Service——数据即服务”，但这不是我们今天要讲的数据中台的数据服务！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据中台的数据服务到底是什么？&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据中台的概念是由阿里巴巴提出来的，我们来看看“中台鼻祖”怎么说。在阿里巴巴数据中台全景图中，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;统一数据服务也叫OneService &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;即由数据中台提供统一的数据接入和数据查询服务。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NzYwNTMzNw==&amp;amp;mid=2247484759&amp;amp;idx=1&amp;amp;sn=9d4f1bcfa6c10c70c201d2d2e264b01d&amp;amp;chksm=ea15aee1dd6227f71ac41568b3e8f911add39f960b5f6ae8bab9185706bb1d0314d937359dd6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-backh=&quot;299&quot; data-backw=&quot;557&quot; data-ratio=&quot;0.5358974358974359&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WtGGOCsU5FPPTTSa0WfCIh1leqTs6whnUJu5xicwzSJf4gFmxXX6oGxrAEGFMibqPx3gNl56aFfvPBXeMSicEugzg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;780&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;阿里数据中台的OneService提供了三项数据服务：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我的理解：不同系统之间使用服务的方式进行交互，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;数据服务为数据和应用之间建立了一座“沟通的桥梁”，这座桥梁的存在形式是API&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以把它想象成一个电源插座，例如，只需要你的吹风机有一个匹配的插头，并将其插入，电流就会流向你的吹风机，就像数据流向你的数据应用一样。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;— 02 &lt;strong&gt;—&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据中台为什么需要&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;数据服务？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;网上的很多文章中，喜欢将数据中台用“厨师做菜”来形象比喻。厨师做菜一般有几个步骤：买菜、洗菜择菜、制定菜单、炒菜。这几个步骤在数据中台的数据加工流程中被称为：数据采集、数据清洗、数据建模、数据分析/数据应用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-backh=&quot;293&quot; data-backw=&quot;440&quot; data-ratio=&quot;0.6671686746987951&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WtGGOCsU5FPPTTSa0WfCIh1leqTs6whnyHuAb89UY4NFbBu03o8KAH5s8TovKuHTFBhcwSibOKZQbNBHFclRjqw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;664&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;数据采集：&lt;/span&gt;跟厨师做菜一样，巧妇难为无米之炊，需要做几道好菜，首先得有原材料，那么数据采集/数据接入就是买菜的过程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;数据清洗：&lt;/span&gt;买回来菜需要摘洗干净，才能下锅，数据清洗就是摘菜洗菜的过程，是需要把脏数据清洗掉。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;数据建模：&lt;/span&gt;菜摘洗好了，但炒什么菜要需要根据客人下的菜单来做。数据建模就像对为客人制定菜单一样，例如：客人喜欢什么菜？鱼香肉丝还是宫保鸡丁，口味是甜一点，辣一点还是清淡一点等问题都要描述清楚并传递给“厨师”。数据建模就是将数据消费者的需求转化为计算机能够理解的语言。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;数据分析/数据应用：&lt;/span&gt;根据客人的“菜单”要求，炒菜装盘。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好了，看到这里有人不禁要问：说了这么多，数据服务在哪里？数据中台到底为什么需要数据服务？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这个“厨师做菜”的过程中，有一个不能忽略的角色，不知道你有没有发现，这个角色就是“服务员”。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;他的任务是帮助客户点菜，并将炒好的菜端到客人的桌上。而数据中台的“服务员”就是数据服务，英文名字：OneService。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;想象一下，你正坐在餐厅的一张桌子旁，那里有可供选择的菜单。但如果没有服务员，就会缺少的是将你的菜单传达给厨房并将你的食物送回餐桌的关键环节。这就是“服务员”（数据服务）的用武之地，接受数据消费者的请求，并告诉系统做什么，将做好的数据服务以API的方式提供给数据消费者。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，在整个过程中，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;数据服务还有一个作用，它屏蔽了底层数据的技术细节，数据消费者不需要关心“这些数据来自哪里，哪个库，哪张表，数据库类型是什么等”问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，只需要关心“这些数据能否满足我的需要”就行了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;就如同你去餐厅吃饭，不用关心菜是从哪买回来的，谁是配菜的，谁是炒菜的等这些问题一样，只需要关心这个菜合不合你的口味就行了。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;— 03 &lt;strong&gt;—&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据服务能解决哪些问题？&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在传统的数据集成方案中，往往需要将数据从一个系统导出/导入，或复制到另一个系统当中。随着企业数据应用规模的不断扩大，需要在几十个甚至上百个系统中进行数据集成，传统的数据集成方式难度越来越大，暴露的问题也越来越多。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-backh=&quot;328&quot; data-backw=&quot;499&quot; data-ratio=&quot;0.6571428571428571&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WtGGOCsU5FPPTTSa0WfCIh1leqTs6whnKmeHb3JPa3pdToegpeA3RtpWibuXq9huTxSsku8jTM7rb3sKRQESykA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;735&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、数据“搬家”造成的数据不一致问题&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;传统数据集成需要将数据从一个系统复制到另一个系统中，过程中由于网络、接口、程序、任务以及其他的一些不确定因素都会导致数据在“搬家”的过程中“丢失”，从而造成数据不一致问题。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;而通过数据中台提供的数据API交付数据，大部分情况下不需要数据“落地”，强调使用权而不是拥有权，这样就大大减少了数据在流向下游系统过程中造成不一致问题。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;2、数据接入多样，集成效率低&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据中台会根据企业数据的类型、数据量大小、数据的应用需求等，设计相应的不同数据接入和存储方案。例如：通过MySQL、Oracle接入数据量相对较小的数据，通过Greenplum接入数据量大且需要多维分析的数据，通过Hbase接入大量的keyValue数据，以及通过ES建立数据索引提升数据的查询效率等等。这种情况下，如果按每种数据接入方式暴露数据的话，无疑是一个非常复杂事情。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;而通过数据中台将各类型数据封装为统一的数据API，对外提供接口，能够屏蔽数据接入多样性带来的数据集成复杂、效率低下等问题。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、数据被哪些应用访问了无法监控&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;传统的数据项目中，即使用了元数据这样的工具，也无法实现数据的采集、汇总、清洗、处理、应用的全链路血缘分析。尤其是数据平台到数据应用的链路几乎全部是割裂的，数据平台通过导出/导入或数据复制的方式为数据应用提供数据，数据一旦进入到下游系统中，数据平台就无法监控其使用情况了。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;而数据中台提供的统一数据服务API，为数据应用和数据中台搭建了一座桥梁。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;数据API只有通过授权才能被访问&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，在给数据应用授权以及应用程序访问数据API的时候，可以“标签”的形式，将数据访问链路通知给元数据中心，从而打通了数据中台到数据应用的链路，形成了数据的全生命周期血缘。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;4、上游数据变更，影响下游数据应用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在很多数据项目中，还有一种情况比较常见：数据应用直接调用数据平台的数据库来访问数据。这就会导致，一旦上游数据发生变更就会对下游的数据应用造成较大影响。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而数据中台提供统一的数据API供数据应用调用，实现了数据中台与数据应用的解耦。在数据服务内部建立与与各数据源建立映射，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;上游数据发生变更，只需要调整数据服务的映射即可，不会对数据应用的使用造成影响&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;— 04 &lt;strong&gt;—&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据服务应具备哪些功能？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在数据中台架构中数据服务层位于数据中台上层，连接数据消费层，将已整合的数据以服务的形式提供给数据消费者，以获得更好的性能和体验。数据服务层具备的功能如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NzYwNTMzNw==&amp;amp;mid=2247484759&amp;amp;idx=1&amp;amp;sn=9d4f1bcfa6c10c70c201d2d2e264b01d&amp;amp;chksm=ea15aee1dd6227f71ac41568b3e8f911add39f960b5f6ae8bab9185706bb1d0314d937359dd6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-backh=&quot;161&quot; data-backw=&quot;518&quot; data-ratio=&quot;0.3098125689084895&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WtGGOCsU5FPPTTSa0WfCIh1leqTs6whnfqA0rzpqHxeqCqLwfiaK43bPkBjbAiauAmBFUUGSz8EtlRRRMibQhT4cw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;907&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;跨源数据服务：&lt;/span&gt;数据中台接入数据的多样性，决定了数据中台的技术架构需要由多个大数据组件组成，例如：Hive、HBASE、GP、ES、Redis、MySQL、Oracle等等，而业务上对数据的使用可能是跨多个数据库的。数据服务层提供的跨源数据服务，屏蔽了底层数据源的技术差异，可以从不同数据源提取数据，并按照业务需要进行编排，形成统一API进行对外共享。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;主题数据服务：&lt;/span&gt;按照不同的业务主题，组织形成统一的数据API。数据中台继承了数据仓库面向主题的思想，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;将位于不同数据中间存储的同一业务主题的数据整合到一起，屏蔽多数据源与多物理表，形成标准的数据服务供外部使用&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。例如：销售主题，需要将企业的批发、零售、线上、线下、代理等等各个渠道的销售数据汇集起来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;一站式查询：&lt;/span&gt;数据服务最终将用户访问的API 转化为底层对各种数据源的访问，实现对数据中台数据的一站式查询，提供数据检索、联机分析、实时查询等，提升数据查询的效率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;全链路打通：&lt;/span&gt;数据和应用的分离会导致数据血缘无法完整追溯，数据服务不仅提供了连接数据和应用能力，还通过服务授权以及访问监控等功能，将数据API的访问情况实时写入元数据中心，形成完整的数据血缘。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;订阅交付能力：&lt;/span&gt;数据API构建完成，并不需要数据消费者重复构建集成通道，而是通过授权“订阅”的方式，让数据消费者通过接口快速使用数据。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;API网关服务：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;API网关服务使用云原生技术提供了服务API的统一管理和监控能力&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，包括：服务注册、服务自动发现、认证授权、流量控制、超时熔断、安全控制、监控分析等。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;— 05 &lt;strong&gt;—&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据中台的数据服务该如何构建？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了使数据中台具备快速响应前端业务需求的能力，主流的数据中台均采用了云原生技术来构建数据服务层，实现数据服务的快速开发、有序落地。同时，数据服务的设计开发还应注意以下事项：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-backh=&quot;192&quot; data-backw=&quot;489&quot; data-ratio=&quot;0.39198218262806234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WtGGOCsU5FPPTTSa0WfCIh1leqTs6whnxPMOiafQvMcibVXGI85Xia3AMN1Fhw3rGxBfCCa5vLcI8ia2ibk8ZpKSdgA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;898&quot;/&gt;&lt;strong&gt;&lt;span&gt;颗粒度问题：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;服务拆分的越细则复用性越好，但如果只考虑服务重用，大量的细颗粒度服务将很难管理并且势必会对整体性能带来影响。&lt;/span&gt;&lt;span&gt;服务的设计需要从业务需求、管理难易程度、性能特性等方面综合考量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;标准化问题：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;服务的开发采用Restful API技术，该技术具有结构清晰、易于理解、方便扩展等特点，且接口规范标准，不论前端应用是java、.net、C#还是PHP都能够调用。就像设计一个插座，一定要具备普适性，这样不论你的吹风机插头是美标的、欧标的还是国标的都能够适配。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;DataOps：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NzYwNTMzNw==&amp;amp;mid=2247489390&amp;amp;idx=1&amp;amp;sn=d05727346b56ed8f764cf1eb42a8ce66&amp;amp;chksm=ea15bcd8dd6235cef3f5f402d6d1e0acc14c548632df8901957074f4f6751cc1156266d66b06&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;DataOps是将DevOps的理念延伸到数据世界，提供了一种数据服务的持续运营方式。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;DataOps是将DevOps的理念延伸到数据世界，提供了一种数据服务的持续运营方式。&lt;/a&gt;通过API网关进行服务的注册和管理，实现数据服务的动态发现、自动部署、自动化监控。根据服务的运行监控数据对数据服务的进行有效治理，包括数据服务的迭代优化、服务编排、自动测试、服务下架等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;写在最后的话&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据服务层（OneService）改变了传统的数据集成和交付方式，所有整合到数据中台的数据都通过数据服务提供，数据服务对外暴露的不是数据而是接口，数据消费者不用直接获取数据，而是通过接口服务获取。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据服务不是简单的对外暴露一个API就行了，从功能层面，数据服务还包括了跨数据源服务、主题数据服务、一站式查询服务、订阅式交付、全链路打通等能力；在技术层面，数据服务采用了云原生技术，具备了服务的动态发现、自动部署、自动监控、服务治理等能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这样看来，数据服务层无疑是数据中台不可或缺的标配，你说呢？欢迎点亮在看，并留言讨论。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;  &amp;lt;END&amp;gt;  &lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;欢迎关注作者公众号&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI1NzYwNTMzNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/WtGGOCsU5FNz9OlL7yibicFLJX5v7skicPibPnAibAeXmTXicOWOXJ2x3xwNxdG2329W9QFdgjSpmP9PicANz2vSWicD1g/0?wx_fmt=png&quot; data-nickname=&quot;谈数据&quot; data-alias=&quot;learning-bigdata&quot; data-signature=&quot;数据治理，数据中台，数字化转型，数据分析等领域知识总结和实战分享&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>de6de0189718a242257efc75e84d71d1</guid>
<title>推荐算法单层 AB 实验的实现</title>
<link>https://toutiao.io/k/04g5fje</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;1. 前言&lt;/h2&gt;&lt;p&gt;   推荐算法是为了解决“信息过载和用户无明确要求的情况下，如何帮助用户找到感兴趣的物品”，而推荐算法需要一个持续优化的过程才能达到理想的一个效果，在优化过程中，如何衡量效果的好与坏，就需要引入AB实验&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;2. AB实验架构&lt;/h2&gt;&lt;p&gt;&lt;img data-fileid=&quot;100000265&quot; data-ratio=&quot;0.4344344344344344&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UZibibiaQhjHtk7A9ibkyRAfuMCSy7bOjHEy1LXXnwaiblUrj7w8JxjVsHVjzlC4cJ6aVfpaRG3hibBevgovwWY8h6Jw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1998&quot;/&gt;￼&lt;/p&gt;&lt;h2&gt;3.实验引擎&lt;/h2&gt;&lt;h3&gt;3.1实验分组&lt;/h3&gt;&lt;p&gt;    AB实验中一般会分2个及以上个实验组，其中一个作为对照组，通过实验分组与对照组的数据进行对比来分析算法效果的好坏。&lt;/p&gt;&lt;p&gt;     实际应用中会给每个分组定一个bucket标识，通过该标识对上报数据进行分组然后进行分析。&lt;/p&gt;&lt;h3&gt;3.2实验分流&lt;/h3&gt;&lt;p&gt;分流的目的定义什么样的请求进入对照组或者实验组，分流策略主要包括以下三种：&lt;/p&gt;&lt;h5&gt;分流的实现：&lt;/h5&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;实验&lt;/th&gt;&lt;th&gt;流量&lt;/th&gt;&lt;th&gt;slot值范围&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;对照组A&lt;/td&gt;&lt;td&gt;20%&lt;/td&gt;&lt;td&gt;0-199&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;实验组B&lt;/td&gt;&lt;td&gt;80%&lt;/td&gt;&lt;td&gt;200-999&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;        &lt;span&gt;以两个实验分组举例，slotsize=100&lt;/span&gt;&lt;span&gt;0，&lt;/span&gt;通过分流公式，当slot值在0-199范围内，会被分到对照组A，slot值在200-999范围内时，会被分到实验组B&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;3.3实验参数&lt;/h3&gt;&lt;p&gt;        推荐算法中，包含了各种参数配置，通过修改参数的值来调整算法的效果，因此在AB实验中会对每个实验组绑定一组实验参数，通过分流和实验配置，把相应的算法参数传递给推荐引擎。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;3.3.1实验数据结构定义&lt;/h4&gt;&lt;p&gt;     本文中使用protobuffer定义实验数据结构。protobuffer是google开源的一种数据格式，以扩展性强，兼容性强，支持跨语言。由于实验参数是经常变化的，使用protobuffer可以很容易的进行参数扩展&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;message &lt;span class=&quot;code-snippet__type&quot;&gt;RecommendParam&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; bool disablePersonalRecFeature = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; bool disablePersonalRuleFeature = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; bool disableFeedbackFeature = &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; int32 sourceTypeDiversifyTunerWebLimit = &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt; [&lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt; = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;]; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; int32 sourceTypeDiversifyTunerCycle = &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; [&lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt; = &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;]; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; bool enableSimilarTuner = &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt; [&lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt; = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;]; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; double similarTunerThreshold = &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt; [&lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt; = &lt;span class=&quot;code-snippet__number&quot;&gt;1.0&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; int32 similarTunerCycle = &lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt; [&lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt; = &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;]; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;message &lt;span class=&quot;code-snippet__type&quot;&gt;BucketGroup&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; string bucket = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; int32 startSlot = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; int32 endBuSlot = &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;RecommendParam&lt;/span&gt; param = &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;message &lt;span class=&quot;code-snippet__type&quot;&gt;Experiment&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; string name = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; string algorithm = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;optional&lt;/span&gt; bool enabled = &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  repeated &lt;span class=&quot;code-snippet__type&quot;&gt;BucketGroup&lt;/span&gt; bucketGroup = &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;message &lt;span class=&quot;code-snippet__type&quot;&gt;Experiments&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  repeated &lt;span class=&quot;code-snippet__type&quot;&gt;Experiment&lt;/span&gt; experiments = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;RecommendParam: 实验参数，算法依赖的配置参数可以定义在这里，每个实验分组配置上不同的值&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;BucketGroup: 实验分组，包括slot范围和绑定的实验参数&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Experiment: 实验定义，包括实验名称，算法标识，是否开启和分组定义&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Experiments：实验列表，可以同时针对多个算法进行配置实验&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;3.3.2代码实现&lt;/h4&gt;&lt;p&gt;实验配置已配置文件的形式进行定义，服务启动时加载实验配置。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ExperimentService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; BUCKET_MAX_COUNT = &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Experiments experiments;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@PostConstruct&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;postConsruct&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        loadExperimentFile(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;experiments.conf&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;loadExperimentFile&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String filePath)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 读取文件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            String content = FileUtil.readFileFromClasspath(filePath);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Experiments.Builder builder = Experiments.newBuilder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            JsonFormat.parser().ignoringUnknownFields().merge(content, builder);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.experiments = builder.build();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            log.info(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;success to update experiment file &quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            log.error(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;experiments get error: &quot;&lt;/span&gt; + e.getMessage());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 获取slot编号&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; auid size&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getBucket&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String auid, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; size)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; hashCode = auid.hashCode();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Math.abs(hashCode) % size;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 根据算法获取命中实验&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; action&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; Experiment &lt;span class=&quot;code-snippet__title&quot;&gt;getExperiment&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String algorithm)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Experiment result = Experiment.getDefaultInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (experiments != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Experiment experiment : experiments.getExperimentsList()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (experiment.getAlgorithm().equals(algorithm)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    result = experiment;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 获取命中实验组&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; request&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; BucketGroup &lt;span class=&quot;code-snippet__title&quot;&gt;getBucketGroup&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String algorithm, String auid)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Experiment experiment = getExperiment(algorithm);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (experiment == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; || !experiment.getEnabled()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; BucketGroup.getDefaultInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; bucket = getBucket(auid, BUCKET_MAX_COUNT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (BucketGroup bucketGroup : experiment.getBucketGroupList()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (bucketGroup.getStartBucket() &amp;lt;= bucket &amp;amp;&amp;amp; bucket &amp;lt;= bucketGroup.getEndBucket()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; bucketGroup;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; BucketGroup.getDefaultInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;4 总结&lt;/h2&gt;&lt;p&gt;   &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;        在实际开发中，需要用到多层的AB实验，所谓的多层AB实验是将多个实验串联起来的多层实验结构，每一次层实验使用的分流在下一层实验中接着使用，以后可以专门介绍一下多层实验的实现方式。如有错误的地方，欢迎留言指正。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aaa8049910b053829cbba8756dbafeaf</guid>
<title>面对编码分歧怎样展开讨论</title>
<link>https://toutiao.io/k/cqnmgwk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;编程一生&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;cloudrise1986&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;致力于写大家都能看懂的、有深度的技术文章&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9b480cb1b90fa45a9d89d5764895fa13</guid>
<title>研发考核难的本质是因为这三个特点</title>
<link>https://toutiao.io/k/lwrr9cb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;strong&gt;&lt;span&gt;这里是Z哥的个人公众号&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每周五11：45 按时送达&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;当然了，也会时不时加个餐～&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我的第「212」篇原创敬上&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;大家好，我是Z哥。我坦白，这篇是早就写好的库存文章，包括上周的那篇也是。&lt;img data-fileid=&quot;100002717&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/oB5bd6W6hI0lpRZibR0Y8IKYJoy34VCKmjj838wNLpftiaOKsN6zAbXGnqqb2Fgz1ibRTHgX5Scvia9ibAoAGKb0kBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;原因是最近跳槽了，到新公司&lt;/span&gt;&lt;span&gt;忙得飞起，都没时间写&lt;/span&gt;&lt;span&gt;文章。还好我之前未雨绸缪准备了几篇提前写好的文章作为余量～&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我尽量能保持不断更，如果实在顶不住就周五的时候给大家请假哈。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好了，回到这次聊的正题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;研发考核难是整个软件开发领域众所周知的问题，甚至可以说是跨世纪的难题了（上个世纪开始至今未被有效解决）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;近期我对这个问题有了一些新的思考，在这里和大家分享交流一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多人觉得因为研发考核很难考，所以索性就不考了。这个就有点因噎废食了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先我们要搞清楚，考核存在的意义是什么？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我的理解是：为了达成团队的共同目标。为了更好的管理团队、驱动团队力往一处使。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是管理大师德鲁克又说过：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;16&quot; data-source-title=&quot;德鲁克&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;你如果无法度量它，就无法管理它。&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%22%2C%22digestLen%22%3A16%2C%22text%22%3A%22%E4%BD%A0%E5%A6%82%E6%9E%9C%E6%97%A0%E6%B3%95%E5%BA%A6%E9%87%8F%E5%AE%83%EF%BC%8C%E5%B0%B1%E6%97%A0%E6%B3%95%E7%AE%A1%E7%90%86%E5%AE%83%E3%80%82%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22%E5%BE%B7%E9%B2%81%E5%85%8B%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;德鲁克&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这句话既然能被各个时代的管理者所追捧，存在了几十年，自然有它的道理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，不管我们是不是为了考核，都得找到度量的方式方法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有些团队的确找到了不少度量指标，但是大多偏向技术层面，包括我们团队之前也是如此。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些指标一旦在具体实施之后往往发现效果甚至不如没有考核的时候。这个背后的原因也有很多文章提到过，就是那些指标不适合考核。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;也有一些人经历了上面这个阶段后觉得研发的考核不好做，不好量化。实则是因为找不到那种直击要害的关键指标。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从这个问题的本质上来说，大家之所以觉得研发考核难本质是由于研发工作的三个特点导致的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;无法标准化&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里的无法标准化并不只是难以度量，而是说同样完成一个任务，不同的人会有不同的做法，最终的结果也可能会差别很大。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，同一个任务，有的人做了 5 天，有的人做了 10 天；有的人喜欢花很多时间在前期的设计阶段，有的人则会花更多时间在后期的自测上。但是你也不能说一定是谁的方式更好。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;工作透明度低&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实现同样一个功能，如果有合理的代码封装，可能只要 100 行代码。但是如果不花时间去构思封装，那么可能是 500 行，甚至是 1000 行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;此时，如果没有第三者进行 codereview 的话，甚至可能会觉得写 1000 行代码的人产出更大。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;工作时间的碎片化&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不得不说，大多数人的工作时间其实大部分时候很难完全由自己掌控，一会有人找你问个事，一会需要参加一个会，一会又来个电话接一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些被动的意外之事都会使得做度量这件事变得困难，甚至还会将原来的计划打乱，导致某些考核指标出现失真。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Z哥觉得研发考核指标怎么定这件事应该分为两个问题去看。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这两个问题之间其实没有必然联系，如果老想着一箭双雕，一次解决两个问题，就会陷入前面提到的困境中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我认为大部分的指标是用来作为帮助决策的信息源，而用于考核的指标不一定要多，要有业务价值。具体我来展开说说。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/01  能够度量的指标有哪些/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;相信有不少指标已经马上在你的脑海中跳出来了：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多讲考核的文章都会对这些指标嗤之以鼻，因为这些指标不适合用来考核，这是针对流水线工作性质的考核产物。这点不否认。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是也不能否认，这些简单的指标中也蕴含着有价值的信息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此在我的理念里，认为不应该主动放弃任何能被度量的指标。正如前面所说，研发工作本身就具有无法标准化、工作透明度低、工作时间的碎片化的特点。我们好不容易找到一些指标能够帮助我们更清楚的认识我们的工作做得到底如何，为什么不要呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不适合考核不等于我们可以忽略他们。这也是我认为要将这事分为「能够度量的指标有哪些？」和「怎么考核？」的原因。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了这些大家都知道的指标，还有很多指标可以被度量。它们主要分为两个维度：过程指标和结果指标。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;常见的过程指标有：需求响应周期、发布前置时间、交付吞吐量、&lt;span&gt;线上问题平均解决时长&lt;/span&gt;等；结果指标有：日均新增 bug 数，日均 bug 库存数，线上问题数量等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你所在的团队对工程效率比较重视，相信还有不少指标可以被度量出来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些指标有什么用呢，我们需要每天观察他们的变化，便于及时发现团队里正在发生的变化是否符合预期。&lt;/span&gt;&lt;span&gt;比如，&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/02  怎么考核？/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;用上面列出的这些指标来考核吗？自然不是。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Z哥认为考核还是得从业务下手，要想办法找到与技术有一定关系的业务指标，比如，DAU、用户平均停留时长等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可能很多人第一眼会觉得说，这些指标有很大比例是由业务决定的，技术在其中起不了什么作用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实并不然，你想象一下。如果我们的拉新用户承接页的稳定性不好，或者核心业务链路经常出错，这对 DAU 和用户平均停留时长必然会造成不好的影响。所以，业务指标真的与技术无关吗？其实并不然。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;怎么落地为考核呢？我的思路是建立在两个逻辑之上的：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务指标的移动平均值在一段时间里是一条趋势向上或向下的曲线。平均范围越长，曲线越平滑。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;技术在短期不能显著提高业务指标，但可以降低业务指标。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基于这两个逻辑在落地为考核的时候有两种方案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一种是长周期考核，比如每半年或者每年一次的 OKR 考核。这种考核直接用指标在开始时和结束时的差值即可，大多数的偶发性事件直接被平滑掉了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另一种是每个月都要进行的短期考核。这种考核建议使用环比变化作为依据。比如比上个月提升了就奖励，降低了就惩罚，这样从长期来看，偶发性事件带来的影响也被平滑掉了。当然这里的奖励和惩罚不一定是物质形式的，也可以是精神形式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可能有的人会觉得，这样的考核如果在业务快速发展期，不是躺赚吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;是的没错，只要技术能支撑快速发展的业务，不拖业务的后腿，我认为就应该奖励。至于是不是躺赚，关键还是看选择的业务指标以及如何制定具体的奖惩尺度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;今天就聊这么多吧。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;研发考核这事和研发工作一样，没有「Sliver Bullet」，我今天和大家聊的也只是我的一家之言，欢迎大家一起探讨。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本质上，我们也是在讨论，如何更好地向非技术人员展示我们技术人工作成果的好坏。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好了，总结一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这篇呢，Z哥和你分享了我对研发考核这件事的看法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，我认为考核还是要考的，不考核肯定不行。研发工作性质的三个特点导致考核指标很难定。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;无法标准化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;工作透明度低&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;工作时间的碎片化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，我的建议是找指标管找指标，考核管考核，两件事分开看。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们要尽可能多的收集研发过程和衡量结果的指标，它们不一定用来考核，但可以用来及时发现团队中的潜在问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于考核指标还是建议使用业务相关的指标，从中挑选有一定技术影响程度的。也分享了两种落地方案，分别是长期用 OKR，短期用环比来考核。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;希望对你有所启发。抛砖引玉，欢迎在留言区分享你的观点。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;原创不易，如果你觉得这篇文章还不错，就「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;点赞&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」或者「&lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;」一下吧，鼓励我的创作 ：）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也可以分享我的公众号名片给有需要的朋友们。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU2NzEwMDc4OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/oB5bd6W6hI1ENbrFbGjEucl1Az92hEuwmUSdaNXxibiaWuO9sLTPHokw00p8ZxAYdIJJJ7FXj77Ts0YoV5KwEKCA/0?wx_fmt=png&quot; data-nickname=&quot;跨界架构师&quot; data-alias=&quot;Zachary_ZF&quot; data-signature=&quot;坚持原创。专注大型互联网技术，涉猎产品、运营。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你有关于软件架构、分布式系统、产品、运营的困惑&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以试试点击「&lt;strong&gt;阅读原文&lt;/strong&gt;」&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>