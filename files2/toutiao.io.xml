<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1923201b4d9f97295ac4f3dade9ae6e5</guid>
<title>GitHub 霸榜！比 ping 强大百倍的 gping 一天拿下 2.5k Star</title>
<link>https://toutiao.io/k/z2u8tqp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;大家平常测试网络连接的 ping 命令，有哪些缺点呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本期前哨君给大家推荐一个比 ping 强大百倍的实用工具 gping，已经连两天登上 GitHub 日榜，收获 2800+ Star&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.22736842105263158&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DSU8cv1j3ibQibRTEfxRHGkMJe0LuJicHVCSNQjUZicrKWX8l1evW1I5uGA4phxAX14dasp9BqhHphcpKslFfgvibvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;475&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;gping 的开发小哥是 Tom Forbes，&lt;span&gt;当前版本采用用 Rust 实现，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;以前老版本是用 Python 实现的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;项目链接：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/orf/gping&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;安装方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MacOS 和  Linux 系统，执行下面两个命令&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;tap orf/brew&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;install gping&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Windows 系统则需要先下载二进制源文件，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4915254237288136&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DSU8cv1j3ibQibRTEfxRHGkMJe0LuJicHVCoR0TaxVQbcIOvRUMkl35ic0wgicRVJsJJ4R6k1iaxKPfZuMpnpusbh1WA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;354&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/orf/gping/release&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解压缩后挪到系统路径 Path 路径下，然后执行下面这个命令安装：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;cargo&lt;/span&gt; install gping&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;gping 用法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ gping &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gping 0.1.7&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Ping, but &lt;span class=&quot;code-snippet__keyword&quot;&gt;with&lt;/span&gt; a graph.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;USAGE&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    gping [OPTIONS] &amp;lt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;hosts&lt;/span&gt;&amp;gt;...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;FLAGS:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -h, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -V, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;OPTIONS:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -b, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ARGS:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &amp;lt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;hosts&lt;/span&gt;&amp;gt;...    &lt;span class=&quot;code-snippet__keyword&quot;&gt;Hosts&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; IPs &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; ping&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用感受&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;gping 的优点实在太明显了，大家请直接看对比。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ping 命令&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6045340050377834&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DSU8cv1j3ibQibRTEfxRHGkMJe0LuJicHVCxHbqpAW8Gq2dRfy8t9hbLEEH2xM2sw4mFt9AUdyxeibpE1mAEalSsxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;794&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;gping 命令&lt;/span&gt;&lt;/p&gt;&lt;p/&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图表比纯文字提醒的体验强多了，太好用了&lt;/span&gt;&lt;span&gt;，已安利给同事~&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;11 月 16 日刚上架的时候，gping 还只支持 ping 单个目标网址。今天新版优化后，已支持同时 ping 两个目标网址。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5364989369241673&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/DSU8cv1j3ibQibRTEfxRHGkMJe0LuJicHVCnpXOXNKBb0gnbjt7nl0icOyQk4WNIocDF5LgQJ5KjWzkyKk33ObDOMA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1411&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF - &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;更多优秀开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;（点击下方图片可跳转）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMDM0MzQ4Mg==&amp;amp;mid=2451061799&amp;amp;idx=1&amp;amp;sn=c9b0c48c52ba7668b080572a1cfc836f&amp;amp;chksm=8cbd5972bbcad0646ca6ba4db13e28c772888e6a5e869a53b892b76fdb2e5a782220ff651221&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.20227272727272727&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DSU8cv1j3ibSgWhO9WDEkITQ7nhD0ZzZX1uliceEL9IgzTR3qfANo5PQ4LwQ9Gs2a0K7qhB6xLBdjlAatDTuu8CA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;440&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMDM0MzQ4Mg==&amp;amp;mid=2451061734&amp;amp;idx=1&amp;amp;sn=f23060009ec9764941d76c5a0d7e2656&amp;amp;chksm=8cbd5eb3bbcad7a54c01bc2f7b30979a2b5f0613792567e64c1563c2c00a3dda68e9a13df410&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.19090909090909092&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DSU8cv1j3ibSgWhO9WDEkITQ7nhD0ZzZXdZBzyibpsIib4eEwLn2Jia1icia7DTSn8ZM9w7w3qJRkTVOU5gicECqtiagIg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;440&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMDM0MzQ4Mg==&amp;amp;mid=2451061699&amp;amp;idx=1&amp;amp;sn=deecd4e09baaf594bb9203390b73e2de&amp;amp;chksm=8cbd5e96bbcad7807ec6b485847ba6aa429eeaa272a2eadcd1ef0c2c3d97e044c2c1b63c3928&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.18863636363636363&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DSU8cv1j3ibSgWhO9WDEkITQ7nhD0ZzZX32AESJr94x7pJW2XY76wZZT5bCU1QBBTw3MScJrEaEVelnawWK2jsw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;440&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如果觉得本文介绍的开源项目不错，欢迎转发推荐给更多人。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DSU8cv1j3ibSjLiaVtbKiauSX7MVBZsuLgPEBEgkVucFm9HMJ2F1WReoJ7YGjKG00mODTu8I8os124JSeW8Dklu8w/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分享、点赞和在看&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;支持我们分享更多优秀开源项目，谢谢！&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>43a5cd8a9156857ccf393c238a941a1b</guid>
<title>走向卓越，领域驱动设计的思维方式</title>
<link>https://toutiao.io/k/n4lq0bo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article tabindex=&quot;0&quot;&gt;&lt;p data-lake-id=&quot;cd353918583b40368f80dc49ca68eef7&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ee731f686343085ed735440c7219c806&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域驱动设计是一套方法论，是从业务视角对需求的分析，指导我们将复杂问题进行拆分，帮助我们解决大型复杂系统在落地中遇到的问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ee731f686343085ed735440c7219c806&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;领域驱动设计，要从繁杂的需求中找出确定的领域模型。基于统一明确的领域模型，在需求、产品、开发、测试等团队之间能够形成【统一语言】，降低需求对焦的成本。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;582ce846afeabbee849544463add7f73&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;7305d3cc357a397d4b2438737067f345&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlceAEs2eux2DT8R5Z959DP9w28cdP8LWwAr9Z5DE6PibTzEcwDN8M5ibWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;27&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;领域驱动的核心概念&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;7305d3cc357a397d4b2438737067f345&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;e11b2c905855197da5081586e5e96ea0&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域驱动设计提出的核心概念包括：域、子域、限界上下文、领域实体、值对象、领域服务、领域事件、聚合、工厂、资源库等。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;54499f02d5dc194fbe24915758ef58f0&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;13a314ed71afa0fc52039d4dc9031e0b&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域实体是指我们使用唯一的标识符跟踪具有重要业务意义的对象。实体代表的业务对象不变，但是会产生状态和业务属性的变更。实体一般和主要的业务/领域对象有一个直接的关系。一个实体的基本概念是一个持续抽象的生命，可以变化不同的状态和情形，但总是有相同的标识。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;04284d2e2899ccc5ab69f99ea9d2de30&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;645f74ec326d126c4ad4769d01f77c8a&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;值对象用来描述特征。值对象不需要唯一标识，通常只关心具体的属性。值对象用来表示临时的事物，或者实体的属性。如果两个对象的所有的属性值都相同，可以认为它们是同一个对象的话，那么我们就可以把这种对象设计为值对象。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2751ae0018a05896bea1d1a9b8367e77&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;dfb20f34cb723b3f030d862f8332ccdf&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域服务代表的是一些商业逻辑或业务处理过程，并不和领域对象相关，涉及的领域概念通常不属于一个实体或者值对象。领域服务是无状态的，在领域服务中实现领域逻辑的调用。它存在的意义就是协调领域对象共同完成某个操作，所有的状态还是都保存在相应的领域对象中。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8931e856f4a6f17f6c93c4bac11fe0c0&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;46196b6f508d84575813965d59f0c532&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域事件代表的是系统中发生了什么，是一种特殊的值对象。领域事件由实体触发，通过事件解耦领域模型内部的一些依赖，会对领域模型中的其他部分产生业务影响。并不是所有的事件都是领域事件，领域事件必须对业务有价值，有助于形成完整的业务闭环，将导致进一步的业务操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;46196b6f508d84575813965d59f0c532&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b2e60ccc23453678553ef6d1cb5c643e&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;img data-height=&quot;439px&quot; data-ratio=&quot;0.44979508196721313&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlcLiaItPSDO3o2Zj67ZvHrhxFsGlQxOYZIZGuU9jzXP6RkveEgewHjdDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;976&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8b485678d0889ddd553e85ab7ce026c7&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f36b705045faec1233e1528b716c40d3&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;根据业务需要可以聚合实体和值对象，并围绕聚合定义边界。聚合作为一个整体来定义属性，选择一个实体作为聚合的根对象，只允许外部对象引用聚合的根对象。聚合内对象具有一致的生命周期，一旦聚合根对象消失，则聚合内其他对象也要消失。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ba01ea37edb668abf7b5d7703c653cc4&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9e348e51fa6ec3ed10247e13b0c0e4b0&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域驱动设计使用了工厂模式来构造聚合对象。工厂方法只能返回聚合对象，不能返回聚合内细分的实体和值对象，需要确保外界对聚合的引用一定是通过根对象实现的。通过工厂来分离聚合的构造和使用，保证业务一致性。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5e93906b498b005491360462edaa4c67&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4799073e495354f36eae14b75cafffbc&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;聚合的仓储通过资源库来实现。外部系统只能通过资源库访问聚合。一个聚合只能有一个资源库对象，也就是以聚合根对象命名的资源库，不能再提供其他的资源库。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e318c5fcd00dffa2af5d780b6a71c316&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8fc01e7e0f54c9dc2f5891cd15e40257&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;域和子域的划分是为了能够对复杂问题分而治之。在系统化思维中，特别强调系统中部分的划分和部分之间关系的处理。域的概念可以理解为系统化思维的一种实践。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8fc01e7e0f54c9dc2f5891cd15e40257&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;划分域后，可以简化认知、隔离域的变化、聚焦重点。一般通过观察业务流程、观察领域模型、观察分析过程，从业务视角出发来划分业务能力，实现域的定义和划分。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4c517bd4923fedf528bfb67fe8308e35&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;dca73cd89ad4b032f43c17774d6c7088&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;限界上下文是一个显式的边界，和子域的边界保持一致，如用户上下文（对应用户域）、支付上下文（对应支付域）。限界上下文能够明确领域模型的清晰的、达成共识的边界。边界不清晰常常引起诸多问题，如业务需求由哪个团队开发、模型定义放在哪个域。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1f1f05b82e88d8cb19345b1654daeb46&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;9341a06cc72cafb2696a62212722f285&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlceAEs2eux2DT8R5Z959DP9w28cdP8LWwAr9Z5DE6PibTzEcwDN8M5ibWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;27&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;领域驱动的架构设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;9341a06cc72cafb2696a62212722f285&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;22a128d9543f96d2332ef5123c1d5d45&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;在一般的架构设计中，架构分层具有依赖关系。上层一定依赖于下层，下层为上层提供接口和服务。而在领域驱动设计中，推荐六边形架构来强化领域模型的重要地位。让外界系统服务于领域模型，实现领域内部的确定性。领域内部关注如何通过模型及其相关概念，在抽象的层次上把业务表达出来。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;449782fbca7928fec0bee0aa8e33cc8d&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2df1c3cb9c088499d900b1a1496fffc1&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域模型定义接口，由其他层实现接口。整体的设计完全围绕领域模型进行。一般架构设计中都把基础设施作为最底层，并且通常认为基础设施具有确定性。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2df1c3cb9c088499d900b1a1496fffc1&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;而在领域驱动设计中，对于基础设施（如数据持久化），由领域模型定义接口并由基础设施层实现接口。这样的设计保证领域模型对抽象有确定的定义，而基础设施作为六边形外围接口的实现可以随时替换。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5e1419225eddf2175a4b171fe72efb0e&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7979316b42e362ea071350533489874c&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;img data-height=&quot;427px&quot; data-ratio=&quot;0.963882618510158&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlcXNqHWmd2HcOXicBzVGcmD2rwtKCqDHK0qFsibO5gd4uicJGpP8icEfjXLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;886&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;fbaaf3dca0955add2a0240eecfe0e51c&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;17219984c44596047d96d3dda6aa4ae0&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlceAEs2eux2DT8R5Z959DP9w28cdP8LWwAr9Z5DE6PibTzEcwDN8M5ibWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;27&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;领域驱动的事件风暴&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;17219984c44596047d96d3dda6aa4ae0&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;0ebc43d46554f0923a25d2dbafb48340&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域模型的定义是在需求分析过程中产生的。需求分析一般使用被称为【事件风暴】的分析方法。使用领域驱动设计的理念去做需求分析，意味着我们将把事件作为项目的中心。通过【事件风暴】可以发现完整的业务场景和潜在的遗漏点，可以建立端到端的共识，能够帮助梳理出测试用例。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a58641cdabc1433f9bb6023aa0df75ff&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e383f748a7e535638076f034d9e1c977&quot;&gt;&lt;span&gt;&lt;img data-height=&quot;612px&quot; data-ratio=&quot;0.356&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlc9ghGwhn303aEvbG0Picbbs59HtNoBmOC83uy1V1WyIs6bM3ibZXW73Fw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;073a5daecddb1277742e6e730dedfd7e&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9cce8cd06962ec4494ab107d263b9846&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;事件的发生一般会对领域对象产生影响。因此【事件风暴】的分析步骤一般包括：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5b3ca5a99c295696b30ff19173991fac&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b0477ecd636f78cfff0e68fb551b3c91&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;通过【事件风暴】可以同步产出领域模型。任何在需求中出现的概念都要反应在领域模型中。如果需求中概念之间存在关系，则领域模型中也存在同样的关系。因此需求分析完成后，领域模型是自然而然产生的，统一语言也有了实现的基础。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ac728bd84c5f4d5335da2d5f7d78eea2&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;08d21af194b377e1a0d20b6f20374a9b&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;通过【事件风暴】还可以梳理出完整的业务场景。在显式明确领域模型后，常常可以发现模糊的需求或者产生新需求，能够明确看到需求的遗漏点。梳理出完整的场景后，测试用例也能同步产出，进一步在各个团队之间达成共识。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;86f879dbbf9c9814767edf9c222c61ae&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;615d8c3cbfc52a3bf3005ae9885b6b29&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlceAEs2eux2DT8R5Z959DP9w28cdP8LWwAr9Z5DE6PibTzEcwDN8M5ibWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;27&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;领域驱动的开发思维&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;615d8c3cbfc52a3bf3005ae9885b6b29&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;ae9f91aec50933ff6c44961cca96bb39&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;除了前面提到的概念外，领域驱动设计还影响了开发思维，也就是由外而内和测试先行。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8e02c96caa5684843a4b79c628ed6753&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;dd629b38ae1713486979992353308a48&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;由外而内是指开发代码从外部代码开始，以内部代码结束。外部的需求和场景具有确定性，能够提供关于系统的重要的信息。从外部代码开始开发，能够在开发中聚焦于当前层级代码，可以在到达内部代码时明确关键的细节，可以从更好的视角看清楚职责分配。也就是先确定代码需求，后实现代码。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;99ce058c163265002b0f4d7cbcec0857&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ee44b364c387d2ca28c7509393c5151e&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;测试先行是指在由外而内开发的基础上，用测试来表达设计契约。设计契约就是代码入参、出参、期望行为的一系列信息。在领域驱动设计中，倡导首先确认测试用例，写出测试代码，明确对业务代码的预期，然后再写业务代码。实际上，在领域模型探索和发现中，已经明确了测试用例范围。测试先行能够在早期发现业务代码问题，把缺陷暴露在修改成本最低的时候。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;c4d6843015cda568b3736c73d3d9f089&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;e5b96a4e0e3f6c6ff115d9b5e3ba4897&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlceAEs2eux2DT8R5Z959DP9w28cdP8LWwAr9Z5DE6PibTzEcwDN8M5ibWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;27&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;e5b96a4e0e3f6c6ff115d9b5e3ba4897&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;014284314eb2607055f00d0fdeff0a01&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;本文初步整理了领域驱动设计的核心概念、架构设计、事件风暴和开发思维：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;6861d6d1f9ca488ba0dccf812c3ee3b5&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1b14da88f834e12fee29db5e52a1956b&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;关于领域驱动设计，网络上概念比较多，代码比较少。需要在工作中实践和思考才能体会领域驱动设计的精髓。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDE2NTgzNQ==&amp;amp;mid=2247486219&amp;amp;idx=1&amp;amp;sn=16bb2f630411b669aeee9ca9c1902344&amp;amp;chksm=9b3152afac46dbb910202a25a6cf3ba7e9230423ff9101ee62b150e6629ec63d1b39df12c98a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;老旧系统重构技巧，轻松搞定遗留代码&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDE2NTgzNQ==&amp;amp;mid=2247486208&amp;amp;idx=1&amp;amp;sn=f533a64403750db67fff9cc4c8437120&amp;amp;chksm=9b3152a4ac46dbb2d326f7b382740f7d53fdf719d4f5e5d203c0e430b763bf4dfe6721fa4652&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;工作还好找吗？面试官的建议——阿里篇&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDE2NTgzNQ==&amp;amp;mid=2247486195&amp;amp;idx=1&amp;amp;sn=8bd8c7594e0a7999d08990fc417e095a&amp;amp;chksm=9b315357ac46da41316f637638886be750993067ce14728b7fad4868d0e21f07599038ad9451&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;被老程序员压榨怎么办？我不想辞职&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/article&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c7f58a40dc45eecd825749d37f414c5b</guid>
<title>[译] 泛型和元编程的模型：Java, Go, Rust, Swift, D 等</title>
<link>https://toutiao.io/k/dnlke8h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;在程序设计的时候，我们通常希望使用同样的数据结构或算法，就可以处理许多不同类型的元素，比如通用的List或只需要实现compare函数的排序算法。对于这个问题，不同的编程语言已经提出了各种各样的解决方案：从只是提供对特定目标有用的通用函数（如C，Go），到功能强大的图灵完备的通用系统（如Rust，C++）。在本文中，我将带你领略不同语言中的泛型系统以及它们是如何实现的。我将从C这样的不具备泛型系统的语言如何解决这个问题开始，然后分别展示其他语言如何在不同的方向上逐渐添加扩展，从而发展出各具特色的泛型系统。&lt;br/&gt;&lt;br/&gt;泛型是元编程领域内通用问题的简单案例：编写可以生成其他程序的程序。我将描述三种不同的完全通用的元编程方法，看看它们是如何在泛型系统空的不同方向进行扩展：像Python这样的动态语言，像Template Haskell这样的过程宏系统，以及像Zig和Terra这样的阶段性编译。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;概述&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图包含了本文讨论的所有语言的泛型系统，用以概述本文主要内容以及它们是如何结合在一起的。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8XkvNnTiapON7qT4NN5NbqyDRef1OLibldceMMnACiaqoYicRBwFLe3SZCPCE1ibL4xevZIDX46jHPQILR5TBMBTtOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;基本想法&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;假设我们用一种没有泛型系统的语言进行编程，我们想实现一个通用的堆栈数据结构，它对任何数据类型都有效。困难在于我们写的每一个函数和类型定义都只对那些大小相同、复制方式相同、行为相同的数据有效。&lt;br/&gt;&lt;br/&gt;如何解决这个问题？有两个基本的想法，一是想办法让所有数据类型在我们的数据结构中有同样的行为方式，二是对我们的数据结构进行多份拷贝，并稍作调整，以特定的方式处理每种数据类型。这两个想法构成了两大类解决泛型问题的基础方法，即&quot;装箱 &quot;和 &quot;单态化&quot;。&lt;br/&gt;&lt;br/&gt;装箱是指我们把所有的东西都放在统一的 &quot;盒子 &quot;里，使它们的行为方式都一样。通常是通过在堆上分配内存，只在数据结构中放指针来实现的。我们可以让不同类型的指针有同样的行为方式，这样，同样的代码就可以处理所有的数据类型了。然而这种做法可能要付出额外的内存分配、动态查找和缓存丢失的代价。在C语言中，这相当于让你的数据结构存储void*指针，也需要将你的数据指针转换为void*或从void*进行类型转换（如果数据还没有在堆上，则在堆上分配）。&lt;br/&gt;&lt;br/&gt;单态化是针对我们要处理的不同类型的数据，多次复制代码。这样每份代码都直接使用对应的数据结构和函数，而不需要任何动态查找。这样运行效率足够快，但代价是代码大小和编译时间的膨胀，因为同样的代码只要稍加调整就会被编译多次。在C语言中，这相当于在一个宏中定义你的整个数据结构，并为在使用该结构的地方调用该宏。&lt;br/&gt;&lt;br/&gt;总的来说，装箱有利于缩短编译时间，但会损害运行时性能，而单态化会生成的代码运行期效率高，但需要额外的时间来编译和优化生成的代码。当然它们在如何扩展方面这方面也有所不同。装箱允许在运行时有更多的动态行为，而单态化则可以更灵活地处理通用代码的不同实例。另外值得注意的是，在一些大型程序中，单态化的性能优势可能会被额外生成的代码所带来的额外指令导致缓存未命中所抵消。&lt;br/&gt;&lt;br/&gt;两个基础流派中的每一个流派都有很多方向可以扩展，以增加额外的能力或安全性，不同的语言已经将两者带入了非常有趣的方向。有些语言如Rust和C#甚至提供了这两种选择!&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;装箱&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;让我们以go语言为例：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type Stack struct {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  values []&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt; *Stack) Push(value &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;{}) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values = append(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values, value)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt; *Stack) Pop() &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;{} {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  x := &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values[len(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values)-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values[:len(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values)-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span&gt;使用装箱的语言示例。&lt;/span&gt;&lt;span&gt;C(void*)、Go(interface{})、无泛型的Java(Object)、无泛型的Objective-C(id)&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;基于类型擦除装箱的泛型&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里有一些基础装箱的问题。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解决方法是在类型系统中增加泛型功能，同时在运行时仍然和以前一样完全使用基本装箱方法。这种方法通常被称为类型擦除，因为类型系统中的类型都被 &quot;擦除 &quot;了，都变成了同一类型（比如Object）。&lt;br/&gt;&lt;br/&gt;Java和Objective-C一开始都是使用基础装箱，后来又增加了基于类型擦除的泛型功能，为了兼容，甚至使用了和以前完全一样的集合类型，但可以选择泛型参数。请看下面的例子，其来自维基百科上关于Java泛型的文章。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;List v = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayList();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;v.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;test&quot;&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Integer i = (Integer)v.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;List&amp;lt;String&amp;gt; v = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;v.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Integer i = v.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;具有统一表达方式的推断装箱泛型&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;OCaml将这个想法更进一步，采用统一的表示方式，没有需要额外装箱分配的基元类型（就像Java中int需要变成Integer才能进入ArrayList一样），因为所有的对象要么已经被装箱，要么用一个指针大小的整数表示，所以一切都是一个机器字。然而当垃圾收集器查看存储在通用结构中的数据时，它需要区分指针和整数，所以用1位（指针不会有这1位）来标记整数，只留下31位或63位的范围。&lt;br/&gt;&lt;br/&gt;OCaml还有一个类型推理系统，所以你可以写一个函数，如果你不注释它，编译器会推断出最通用的类型，这可能导致函数看起来像动态类型语言。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;let&lt;/span&gt; first (head :: tail) = head(* inferred &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;a list -&amp;gt; &#x27;&lt;/span&gt;a *)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;推断类型会推断出 &quot;从类型为&#x27;a&#x27;的元素列表到类型为&#x27;a&#x27;的元素的函数&quot;。该代码确认了这样的关系：返回类型与列表类型相同，但可以是任何类型。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;接口&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基础装箱方法的另一个限制是，装箱类型是完全不透明的。这对于堆栈这样的数据结构来说是没有问题的，但是像通用排序函数这样的功能需要一些额外的函数，比如特定类型的比较函数。有很多不同的方式可以在运行时实现并在语言中导出该功能，你可以在同一种语言中使用多种方式。然而不同的语言大多数采用某种特定方式实现，然后语言扩展则充分利用所选实现的优势。这意味着基于着不同的运行时方法，主要有两个选择：vtables和字典传递。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;接口vtables&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果我们想暴露类型特化的函数，同时又要坚持装箱策略，那么我们只要确保有统一的方法可以从对象中找到给定类型的函数就可以了。这种方法叫做 &quot;vtables&quot;（由 &quot;虚拟方法表 &quot;缩写而来），它的实现方式是，在通用结构中的每个对象的偏移量为0的地方，都有一个指向函数指针表的指针。这些表通过在固定的偏移量处索引某些指针，让通用代码以同样的方式为每个类型查找特定类型的函数指针。&lt;br/&gt;&lt;br/&gt;译者注，图示如下：&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.9814814814814815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8XkvNnTiapON7qT4NN5NbqyDRef1OLibld6lia923fCKSkQribCibRyfd7BEWb76TVK53IgzLBSVDbUpL7pkc17LxjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;324&quot;/&gt;&lt;span&gt; &lt;br/&gt;&lt;br/&gt;这就是Go中接口类型的实现方式，以及Rust中dyn trait对象的实现方式。当你把一个类型转换为一个接口类型时，它会创建一个包装器，这个包装器包含一个指向原始对象的指针和一个指向该接口特定类型函数的vtable的指针。然而这需要额外的指针和内存，这也是为什么Go中的排序需要切片实现Sort.Interface接口，而非切片元素实现Comparable接口。&lt;br/&gt;&lt;br/&gt;译者注：&lt;br/&gt;Go 语言对slice进行排序，需要在slice（切片）上实现Sort.Interface接口，如下所示：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type Interface &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Len() &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Less(i, j &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt;　&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Swap(i, j &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;使用方式：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;package main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;sort&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type &lt;span class=&quot;code-snippet__type&quot;&gt;IntSlice&lt;/span&gt; []int&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; IntSlice)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Len&lt;/span&gt;() int {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; len(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; IntSlice)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Swap&lt;/span&gt;(i, j int) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;[i], &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;[j] = &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;[j], &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;[i]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; IntSlice)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Less&lt;/span&gt;(i, j int) bool {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;[i] &amp;lt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;[j]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    a := &lt;span class=&quot;code-snippet__type&quot;&gt;IntSlice&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    b := []float64{&lt;span class=&quot;code-snippet__number&quot;&gt;1.1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2.3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;5.3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3.4&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; := []int{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;sort&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;IsSorted&lt;/span&gt;(a)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; !&lt;span class=&quot;code-snippet__built_in&quot;&gt;sort&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;IsSorted&lt;/span&gt;(a) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;sort&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;Sort&lt;/span&gt;(a) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; !&lt;span class=&quot;code-snippet__built_in&quot;&gt;sort&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;Float64sAreSorted&lt;/span&gt;(b) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;sort&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;Float64s&lt;/span&gt;(b)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; !&lt;span class=&quot;code-snippet__built_in&quot;&gt;sort&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;IntsAreSorted&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;sort&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;Ints&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(a)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(b)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span&gt;对于Java来说，对数组排序需要在数组/集合元素上实现Comparable 接口，代码如下：&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Simpson&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Comparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Simpson&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    String name;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Simpson(String name) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Simpson simpson)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.name.compareTo(simpson.name);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SimpsonSorting&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String... sortingWithList)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        List&amp;lt;SimpsonCharacter&amp;gt; simpsons = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        simpsons.add(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpsonCharacter(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Homer &quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        simpsons.add(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpsonCharacter(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Marge &quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        simpsons.add(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpsonCharacter(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Bart &quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        simpsons.add(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpsonCharacter(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Lisa &quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Collections.sort(simpsons);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        simpsons.stream().map(s -&amp;gt; s.name).forEach(System.out::print);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Collections.reverse(simpsons);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        simpsons.stream().forEach(System.out::print);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;面向对象编程&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面向对象编程语言很好地利用了vtables的力量。像Java这样的面向对象语言没有独立的包含vtables的接口对象，而是在每个对象的开头有一个vtable指针。类似Java的语言有继承和接口系统，完全可以用这些对象vtables来实现。&lt;br/&gt;&lt;br/&gt;除了提供额外的功能外，在每个对象中嵌入vtables还解决了之前需要构造新类型的问题。与Go不同的是，在Java中，排序函数可以使用该类型上的Comparable接口。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;反射&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一旦你有了vtables，就可以让编译器也生成其他类型信息，如字段名、类型和位置，这些都不困难。这样就可以用同样的代码访问一个类型中的所有数据，而这些代码可以检查其他任何类型中的数据。就可以添加 &quot;反射 &quot;功能，它可以用来实现任意类型的序列化等功能。作为装箱范式的扩展，它有同样的问题，即它只需要一份代码，但需要大量动态查找，这可能会导致序列化性能很低。&lt;br/&gt;&lt;br/&gt;具有反射功能的语言以及将其用于序列化的例子包括Java、C#和Go。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;动态类型语言&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;反射是非常强大的，可以完成很多不同的元编程任务，但有一点它不能做，那就是创建新的类型或编辑现有字段的类型信息。如果我们增加了这样的能力，并通过反射来实现，最终就会得到动态类型语言。在Python和Ruby这样的语言中，其超强的反射系统会带来惊人的元编程能力，并且使用其元编程能力的代码无处不在。&lt;br/&gt;&lt;br/&gt;&quot;但是Tristan，动态语言不是这样工作的，他们只是用哈希表来实现一切！&quot;有人可能会这么说。好吧，哈希表只是一个用于实现可编辑的类型信息表的数据结构。而且，这只是某些像CPython这样的解释器的工作方式。如果你看一眼像V8这样的高性能JIT是如何实现的，它的做法就类似vtables和反射信息! V8的隐藏类(vtables和反射信息)和对象布局与你在Java虚拟机中看到的类似，只是对象能够在运行时改为新vtable。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;字典传递&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了将vtables与对象关联起来，实现动态接口的另一种方式是将所需的函数指针表传递给需要它们的通用函数。这种方法在某种程度上类似于在调用时构造Go式的接口对象，只是将函数指针表作为一个隐藏的参数传递，而不是作为现有的参数之一打包在一起。&lt;br/&gt;&lt;br/&gt;这种方式虽然被Haskell类型类使用，但GHC（GHC是Haskell编译器）通过内联和特殊化，也可以做单态化优化。字典传递这种方式也被OCaml使用，其以一等模块的形式提供一个显式参数传递字典，但也有建议增加隐式参数的机制。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;Swift Witness Tables&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Swift的泛型实现更加有趣，通过使用字典传递，同时把类型的大小以及如何移动、复制和释放它们放到函数指针表中，该表可以提供所有所需的信息，以统一的方式处理任何类型，而不需要装箱。这样一来，Swift就可以在没有单态化的情况下实现泛型，也不需要把所有的类型都使用统一的表达。虽然仍然存在所有动态查找成本，然而也节省了分配内存、内存和缓存不连贯的成本。Swift编译器能够在模块内和跨模块使用注解为@inlinable的函数进行单态化处理（monomorphize）和内联泛型，以避免这些成本，其使用启发式算法来估算代码会膨胀多少。&lt;br/&gt;&lt;br/&gt;此功能还解释了Swift为何以允许在结构体中添加和重新排列字段的方式实现ABI稳定性，尽管它们出于性能原因提供@frozen属性以选择退出动态查找。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;内涵类型分析&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还有一种为装箱类型实现接口的方法是在对象的固定部分添加类型ID，就像vtable指针会访问的位置，然后为每个接口方法生成函数，在所有实现该接口方法的类型上有一个大的switch语句，并派发到正确的特定类型方法。&lt;br/&gt;&lt;br/&gt;我不知道有什么语言使用这种技术，但是C++编译器和Java虚拟机在使用profile-guided优化来了解某个通用调用点主要作用于某些类型的对象时，会做类似的事情。他们会对每个通用类型检查以代替调用点，然后对该通用类型进行静态调度，通常的动态调度作为后备情况。这样分支预测器就可以预测出将采取的通用情况分支，并通过静态调用继续调度指令。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;单态化&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一种泛型的实现方法是单态化。在这种方式中，需要找到某种方法来为每种类型输出多个版本的代码。编译器在编译时，代码会经过多个表达阶段，理论上我们可以在其中任何一个阶段进行复制。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;生成源代码&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单态化最简单的方法就是在源代码层面就进行复制。这样编译器甚至不需要支持泛型，C和Go等（编译器不支持泛型）语言的用户有时会这样做。&lt;br/&gt;&lt;br/&gt;在C语言中，你可以使用预处理程序，在宏或头文件中定义你的数据结构，并多次包含#defines。在Go中，有像genny这样的脚本，可以简化代码生成的过程。&lt;br/&gt;&lt;br/&gt;这样做的缺点是，复制源代码会有很多弊端和边缘情况需要注意，对基本相同的代码进行多次解析和类型检查也给编译器带来很多额外的工作。其次根据语言和工具的不同，这种泛型方法写起来和用起来都会很丑，比如说如果你在C语言宏里面写一个宏，每一行都要以反斜杠结尾，而且所有的类型和函数名都需要手动连接上标识符以避免碰撞。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;D string mixins&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过代码生成确实有一些好处，那就是你可以使用全能的编程语言来生成代码，而且它使用的是用户已经熟悉的方法。&lt;br/&gt;&lt;br/&gt;一些以其他方式实现泛型功能的语言也包含了一种干净的代码生成方式，以解决其泛型系统没有涵盖的更一般的元编程用例。最明显的例子是D 语言的string mixin，它可以在编译中间使用D的所有功能将D代码生成为字符串。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;Rust 过程宏&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还有一个类似的例子是Rust的过程宏，它将token流作为输入，输出token流，同时提供程序将token流转换为字符串或者从字符串转换为token流。这种方法的优点是token流可以保存源代码位置信息。使用宏就可以直接将用户写的代码以token的形式从输入粘贴到输出，如果用户的代码在宏输出中引起编译器错误，编译器输出的错误信息将正确地指向用户代码所在的文件、行和列，但如果宏生成了错误，那么错误信息将指向宏调用。例如如果在日志调用中使用了一个封装函数的宏，而在封装函数的实现中出错，编译器的错误将直接指向错误所在的你的代码，而非指向宏。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;语法树宏&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有些语言确实更进一步，提供了在宏中消费和产生抽象语法树（AST）类型的功能。这方面的例子包括模板Haskell、Nim macros、OCaml PPX和几乎所有的Lisps。&lt;br/&gt;&lt;br/&gt;AST宏的问题是，你不希望用户学习一堆构造AST类型的函数。Lisp系列语言解决了这个问题，其语法和AST有非常直接的对应关系，但构造过程仍然会很繁琐。因此，我提到的所有语言都有某种形式的 &quot;引用 &quot;原语，你在语言中提供一个代码片段，它就会返回语法树。这些引用原语也提供方法来拼接语法树的值，就像字符串拼接一样。下面是模板Haskell中的一个例子。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- using AST construction &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;code-snippet__title&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__title&quot;&gt;genFn&lt;/span&gt; :: &lt;span class=&quot;code-snippet__title&quot;&gt;Name&lt;/span&gt; -&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Exp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__title&quot;&gt;genFn&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;f&lt;/span&gt; = &lt;span class=&quot;code-snippet__title&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__title&quot;&gt;x&lt;/span&gt; &amp;lt;- &lt;span class=&quot;code-snippet__title&quot;&gt;newName&lt;/span&gt; &quot;&lt;span class=&quot;code-snippet__title&quot;&gt;x&lt;/span&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__title&quot;&gt;lamE&lt;/span&gt; [&lt;span class=&quot;code-snippet__title&quot;&gt;varP&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;x&lt;/span&gt;] (&lt;span class=&quot;code-snippet__params&quot;&gt;appE (varE f) (varE x)&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- &lt;span class=&quot;code-snippet__title&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;quotation&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;) &lt;span class=&quot;code-snippet__title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;splicing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__title&quot;&gt;genFn&lt;/span&gt;&#x27; :: &lt;span class=&quot;code-snippet__title&quot;&gt;Name&lt;/span&gt; -&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Exp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__title&quot;&gt;genFn&lt;/span&gt;&#x27; &lt;span class=&quot;code-snippet__title&quot;&gt;f&lt;/span&gt; = [| \&lt;span class=&quot;code-snippet__title&quot;&gt;x&lt;/span&gt; -&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;varE f&lt;/span&gt;) &lt;span class=&quot;code-snippet__title&quot;&gt;x&lt;/span&gt; |]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在语法树级别而不是token级别做过程宏的一个缺点是，语法树类型经常会随着新的语言特性增加而改变，而token类型可以保持兼容。例如OCaml的PPX系统需要特殊的基础设施来迁移解析树到宏所使用的语言版本中去。而Rust的相关库则增加了解析和引用实用程序，因此你可以用类似过程宏的风格来编写语法树宏。Rust甚至有一个实验性的库，通过这种方式提供反射功能。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;模板&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下一种泛型的实现方式，是把生成代码推进到编译的下一阶段。在C++和D中使用的模板使用这种方式，你可以在类型和函数上指定 &quot;模板参数&quot;，当你实例化一个具有特定类型的模板时，该类型会被替换到函数中，然后对函数进行类型检查，以确保组合是有效的。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;myMax&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;b&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (a&amp;gt;b?a:b);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Pair&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  T values[&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  myMax(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Pair&amp;lt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&amp;gt; p { {&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;} };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;模板系统的问题是，如果你在你的库中包含一个模板函数，而用户用错误的类型实例化它，其编译错误难以理解。这与动态类型语言中的库在处理用户传递错误类型时可能发生的情况非常相似。D语言有一个有趣的解决方法，也与动态语言中流行的做法类似：只需使用帮助函数来检查类型是否有效，如果失败的话，错误信息会指向帮助函数! 下面是D语言中的例子。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;.traits;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;T &lt;span class=&quot;code-snippet__title&quot;&gt;myMax&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(T)&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(T a, T b)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(isNumeric!T)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (a&amp;gt;b?a:b);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;struct &lt;span class=&quot;code-snippet__title&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(T)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  T[&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;] values;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  myMax(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Pair!&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; p = {[&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;]};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;C++20有一个叫做 &quot;概念（concepts） &quot;的功能，除了设计上更像定义接口和类型约束外，它的作用是一样的。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;编译期函数&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;D的模板有很多扩展，允许你使用编译期函数评估和静态if等功能，可以使模板的行为就像函数一样，在编译时接受一组参数，并返回一个非通用的运行时函数。这使得D模板成为功能齐全的元编程系统，据我了解，现代C++模板也有类似的功能，但实现机制不够干净。&lt;br/&gt;&lt;br/&gt;还有一些语言把 &quot;泛型只是编译期函数 &quot;的概念更进一步的运行，比如Zig。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fn Stack(comptime T: &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        items: []T,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;len&lt;/span&gt;: usize,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; Self = @This();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        pub fn push(self: Self, item: T) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;Zig在编译时和运行时都使用同一种语言，函数根据是否标记为comptime的参数进行区分。还有一种语言，在元级（meta level）使用单独的但类似的语言，叫Terra。Terra是Lua的一种方言，它允许你构建类似C语言的低级函数，然后使用Lua API以及引用和拼接原语言在元级来操作它们。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;MakeStack(T)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;struct Stack {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;items&lt;/span&gt; : &lt;span class=&quot;code-snippet__string&quot;&gt;&amp;amp;T; -- &amp;amp;T is a pointer to T&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;len&lt;/span&gt; : &lt;span class=&quot;code-snippet__string&quot;&gt;int;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;terra&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;Stack:push(item : T)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;Stack&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;Terra疯狂的元编程能力让它可以做很多事情，比如把特定领域语言的编译器作为简单的函数来实现，或者用少量的代码在库中实现Java和Go的接口和对象系统。然后它可以将生成的运行时代码保存为无依赖的对象文件。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;Rust 泛型&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下一种类型的单态化泛型，是在类型检查之后，把代码生成的过程再推进一步。上文提到用C++可以像动态类型语言中的获取泛型库函数内的错误类型，这是因为模板参数中基本只有一种类型。所以这就意味着我们可以通过在我们的元级中增加类型系统来解决这个问题，并静态检查它们是否支持你使用的操作。这就是泛型在Rust中的工作方式，在语言层面来说也是Swift和Haskell中泛型的工作方式。&lt;br/&gt;&lt;br/&gt;在Rust中，你需要在你的类型参数上声明 &quot;trait bounds&quot;，其中trait就像其他语言中的接口一样，声明了类型提供的一系列函数。Rust编译器会检查你的泛型函数的主体是否能与任trait bounds的类型一起工作，也不允许你使用trait bounds没有声明的函数。这样Rust中泛型函数在实例化时，就永远不会在库函数得到编译器错误。编译器也只需要对每个泛型函数进行一次类型检查。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fn my_max&amp;lt;T: PartialOrd&amp;gt;(a: T, b: T) -&amp;gt; T {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b { a } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; { b }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; Pair&amp;lt;T&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    values: [T; &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;fn &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    my_max(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; p: Pair&amp;lt;i32&amp;gt; = Pair { values: [&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;] };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;在语言层面上，以装箱方式实现的泛型所需要的类型系统和这个十分类似，这也是为什么Rust可以使用同一个类型系统来支持这两种泛型的原因! Rust 2018甚至增加了统一的语法，其中v: &amp;amp;impl SomeTrait参数会被单态化，但v: &amp;amp;dyn SomeTrait参数会使用装箱。这一方式也让Swift的编译器和Haskell的GHC等编译器即使默认使用装箱来实现泛型，也可以单态化作为优化手段。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;机器码单&lt;/span&gt;&lt;span&gt;态化&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单态化泛型的下一步是在编译器后端中进一步推进。就像我们可以复制带有泛型类型占位符的源代码模板一样，我们可以生成带有特定类型占位符的机器代码。然后我们就可以像链接器的一样工作，通过memcpy和一些补丁，很快就可以把这些模板标记出来! 其缺点是每个单态化的副本不能被优化器特别优化，然而因为没有重复优化，所以编译速度可以快很多。我们甚至可以把代码stamper做成一个小小的JIT，被包含在二进制文件中，并在运行时把单态化的副本标记出来，以避免二进制文件的膨胀。&lt;br/&gt;&lt;br/&gt;其实我并不知道有哪种语言的泛型是这样工作的，这只是我在写作本文时的一个想法，作为这个分类法的自然延伸，这也正是我希望从中得到的东西! 我希望这篇文章能让你更清楚地了解不同语言中的泛型系统，以及如何对他们分类，并促进你的思考，也许我们可能会发现新的酷炫的编程语言的方向。&lt;br/&gt;&lt;br/&gt;原文地址：&lt;br/&gt;&lt;/span&gt;&lt;span&gt;https://thume.ca/2019/07/14/a-tour-of-metaprogramming-models-for-generics/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;参考阅读：&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文由高可用架构翻译，技术原创及架构实践文章，欢迎通过公众号菜单「联系我们」进行投稿。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;高可用架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;改变互联网的构建方式&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img data-w=&quot;200&quot; data-type=&quot;jpeg&quot; data-s=&quot;300,640&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/8XkvNnTiapOPOK9rQud9XibGhPOPsA3gA8Wr4CEnzmhfZQzSGu0Q09GOuk18S9icZtuVnQewvyqZtOWyDnJPBDn1A/640?wx_fmt=jpeg&quot;/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;长按二维码 关注「高可用架构」公众号&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fd1629e349fc78a5269f6f0e2ce0cba5</guid>
<title>Golang 语言标准库 sync 包的 Cond 怎么使用？</title>
<link>https://toutiao.io/k/cwpgcnp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gf7zJ2NXUibEiadJlkPJ9c5wicX2OmcwctObYIG5pCAdqnZIiboADHtW4BS2yfYwDlDArhTYhzFSXIPicRYOfe145uA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;介绍&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 Go 语言中，Cond 实现一个条件变量，协助解决等待或通知事件场景的并发执行问题，通常用于等待某个条件的一组 goroutine。这个条件需要一组 goroutine 共同协作完成，如果条件为 false，所有等待这个条件的 goroutine 将会被阻塞，当这个条件变为 true 时，所有等待这个条件的其中一个 goroutine 或者所有 goroutine 会被唤醒。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;基本用法&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过阅读源码，我们可以发现 Cond 关联一个 Locker L（通常是 *Mutex 或 *RWMutex），在更新条件和调用 Wait 方法时必须持有该锁 L。并且，&lt;span&gt;首次使用后不得复制 Cond。通常，使用 NewCond 函数创建一个 Cond。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// A Cond must not be copied after first use.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Cond &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;noCopy&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;noCopy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  // L &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; held &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; observing &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; changing the condition&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  L Locker&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  notify  notifyList&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  checker copyChecker&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// NewCond &lt;span class=&quot;code-snippet__keyword&quot;&gt;returns&lt;/span&gt; a &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Cond &lt;span class=&quot;code-snippet__keyword&quot;&gt;with&lt;/span&gt; Locker l.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func NewCond(l Locker) *Cond {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &amp;amp;Cond{L: l}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func (c *Cond) &lt;span class=&quot;code-snippet__keyword&quot;&gt;Wait&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  c.checker.check()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  t := runtime_notifyListAdd(&amp;amp;c.notify)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  c.L.Unlock()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  runtime_notifyListWait(&amp;amp;c.notify, t)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  c.L.Lock()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func (c *Cond) Signal() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  c.checker.check()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  runtime_notifyListNotifyOne(&amp;amp;c.notify)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func (c *Cond) Broadcast() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  c.checker.check()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  runtime_notifyListNotifyAll(&amp;amp;c.notify)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Cond 只有 3 个方法，分别是 Wait、Signal 和 Broadcast。下面分别介绍一下这 3 个方法。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Wait：把调用者放入等待队列中并阻塞，直到被 Signal 方法或 Broadcast 方法在等待队列中移除并唤醒。调用 Wait 方法之前，调用者必须持有锁。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Signal：调用者将等待队列中的 goroutine 移除第一个，并唤醒被移除的 goroutine。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Broadcast：调用者将等待队列中的所有 goroutine 全部移除，并全部唤醒。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;了解了 Cond 的 3 个方法，我们通过实现一个「学生报名参加课外活动」的简单示例，演示如何使用 Cond。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.0178890876565294&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gf7zJ2NXUibH42qaRPAaHufkWlrCLqJO98eGCZqjAGPzMVF5iaWicK5HrBaDzmYICBx3WfkaafsEuGSbzyMia2cBnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1118&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其中，需要注意的是 Wait 方法。调用者在调用 Wait 方法之前，必须持有锁，并且每次调用都要检查辅助条件变量 count。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;实现原理&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过阅读 Part 02 的源码，可以发现 Cond 实现非常简单，主要是通过 Wait 方法将调用者放入一个等待队列中并阻塞，其他 goroutine 去检查或更新条件变量，然后通过调用 Signal 方法或 Broadcast 方法唤醒等待队列中的一个或全部 goroutine。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;踩坑&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用 Cond，最容易踩的坑就是调用 Wait 方法之前，调用者没有持有锁或没有检查辅助条件。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 Part 02 的示例代码中，假如把调用 Wait 方法前后的加锁和释放锁的代码注释掉，运行代码会导致程序 panic。原因是调用 Wait 方法，会先把调用者放入等待队列中，然后释放锁。此时如果在未持有锁时调用释放锁的方法，就会导致程序 panic。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;还有就是等待队列中的 goroutine 被唤醒，并不代表条件满足，还要再次检查辅助条件是否满足。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;05&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;总结&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本文开篇介绍了 Cond 的用途，然后结合源码介绍了 Cond 的实现和 3 个方法，并通过一个「学生报名参加课外活动」的模拟示例演示了 Cond 的基本使用，最后列举了一个非常容易踩的「坑」。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;微信群&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;一个人可以走得很快，一群人可以走得很远。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.5405405405405406&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gf7zJ2NXUibHrBBNc13c09hsck0LRuBWagGRXUlOPE7Nto7kj7M5peJTpdZlgatE5HwOkQibCPDOjUC0FfcboIbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;370&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;https://golang.org/pkg/sync/#Cond&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;推荐阅读：&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247484031&amp;amp;idx=1&amp;amp;sn=7b6728f4f781a6fcdcf1986404b1ad59&amp;amp;chksm=9f81a811a8f62107bbc39e6dbf0aa22dfa679b3a5dc0bf4b2115403d05d4a33110709323f1fb&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Go 语言使用标准库 sync 包的 mutex 互斥锁解决数据竞态&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247484049&amp;amp;idx=1&amp;amp;sn=5a49b5a9d19891fb3b92c8612a594e74&amp;amp;chksm=9f81a8ffa8f621e98d5b4758bea5bb337f8e152c293fa1e2532c84eb3379ab9ae2ea1a15e67e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Golang 语言标准库 sync 包的 RWMutex 读写互斥锁怎么使用？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247484063&amp;amp;idx=1&amp;amp;sn=6069523100ef7003eaf8b4406190b9bc&amp;amp;chksm=9f81a8f1a8f621e7af836cc732b6145c5732c5eed9a7e9dd0de18acd2f70643bbd727ed08ca0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Golang语言标准库 sync 包的 WaitGroup 怎么使用？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247483803&amp;amp;idx=1&amp;amp;sn=d0fff4019513a4e5adb6b81df5135158&amp;amp;chksm=9f81abf5a8f622e355adef5b02561f9120aef3087173e68db6ddcd78a07fa9995ac37495b860&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Go语言学习之并发&lt;/a&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>71e802f9fe4130a6d052777a6a53a846</guid>
<title>C++ 从 vector 扩容看 noexcept 应用场景</title>
<link>https://toutiao.io/k/61t808c</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;c++11提供了关键字&lt;code&gt;noexcept&lt;/code&gt;，用来指明某个函数无法——或不打算——抛出异常：&lt;/p&gt;&lt;pre&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;foo&lt;/span&gt;() &lt;span&gt;noexcept&lt;/span&gt;;             &lt;span&gt;&lt;span&gt;//&lt;/span&gt; a function specified as will never throw&lt;/span&gt;&lt;br/&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;foo2&lt;/span&gt;() &lt;span&gt;noexcept&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;);      &lt;span&gt;&lt;span&gt;//&lt;/span&gt; same as foo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;bar&lt;/span&gt;();                      &lt;span&gt;&lt;span&gt;//&lt;/span&gt; a function might throw exception&lt;/span&gt;&lt;br/&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;bar2&lt;/span&gt;() &lt;span&gt;noexcept&lt;/span&gt;(&lt;span&gt;false&lt;/span&gt;);     &lt;span&gt;&lt;span&gt;//&lt;/span&gt; same as bar&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;所以我们需要了解以下两点：&lt;/p&gt;&lt;h3&gt;noexcept优点&lt;/h3&gt;&lt;p&gt;我们先从std::vector入手来看一下第一点。&lt;/p&gt;&lt;p&gt;我们知道，vector有自己的capacity，当我们调用&lt;code&gt;push_back&lt;/code&gt;但是vector容量满时，vector会申请一片更大的空间给新容器，将容器内原有的元素copy到新容器内：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2725490196078431&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/On8kUXFskR1D2dC7hg2DEZwIot3Lib3micUDpqiajHzmHGXuz15ibYwudAGtHClLZEqlRjFiaia5ficcpuNVXKsblsfqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1020&quot;/&gt;&lt;/p&gt;&lt;p&gt;但是如果在扩容元素时出现异常怎么办？&lt;/p&gt;&lt;p&gt;这种扩容方式&lt;span&gt;比较&lt;/span&gt;完美，有异常时也会保持上游调用&lt;code&gt;push_back&lt;/code&gt;时原有的状态。&lt;/p&gt;&lt;p&gt;但是为什么说&lt;span&gt;比较&lt;/span&gt;完美，因为这里扩容还是copy的，当vector内是一个类且持有资源较多时，这会很耗时。所以c++11推出了一个新特性：&lt;code&gt;move&lt;/code&gt;，它会将资源从旧元素中“偷”给新元素（对move不熟悉的同学可以自己查下资料，这里不展开说了）。应用到vector扩容的场景中：当vector中的元素的移动拷贝构造函数是&lt;code&gt;noexcept&lt;/code&gt;时，vector就不会使用copy方式，而是使用move方式将旧容器的元素放到新容器中：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.25787728026533996&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/On8kUXFskR1D2dC7hg2DEZwIot3Lib3micATcUL7iauQl8CEKV7tkpn7tiaVNXMnSvqH5miaZWTw3LG1DjXqtanxC4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1206&quot;/&gt;&lt;/p&gt;&lt;p&gt;利用&lt;code&gt;move&lt;/code&gt;的交换类资源所有权的特性，使用vector扩容效率大大提高，但是当发生异常时怎么办：&lt;/p&gt;&lt;p&gt;原有容器的状态已经被破坏，有部分元素的资源已经被偷走。若要恢复会极大增加代码的复杂性和不可预测性。所以只有当vector中元素的&lt;code&gt;move constructor&lt;/code&gt;是&lt;code&gt;noexcept&lt;/code&gt;时，vector扩容才会采取move方式来提高性能。&lt;/p&gt;&lt;p&gt;刚才总结了利用&lt;code&gt;noexcept&lt;/code&gt;如何提高vector扩容。实际上，&lt;code&gt;noexcept&lt;/code&gt;还大量应用在&lt;code&gt;swap&lt;/code&gt;函数和&lt;code&gt;move assignment&lt;/code&gt;中，原理都是一样的。&lt;/p&gt;&lt;h3&gt;noexcept使用场景&lt;/h3&gt;&lt;p&gt;上面提到了&lt;code&gt;noexcept&lt;/code&gt;可以使用的场景：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;move constructor&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;move assignment&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;swap&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;很多人的第一念头可能是：我的函数现在看起来明显不会抛异常，又说声明&lt;code&gt;noexcept&lt;/code&gt;编译器可以生成更高效的代码，那能加就加呗。但是事实是这样吗？&lt;/p&gt;&lt;p&gt;这个问题想要讨论清楚，我们首先需要知道以下几点：&lt;/p&gt;&lt;pre&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;g&lt;/span&gt;(){&lt;br/&gt;    ...       &lt;span&gt;&lt;span&gt;//&lt;/span&gt;some code&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;() &lt;span&gt;noexcept&lt;/span&gt;&lt;br/&gt;{&lt;br/&gt;    … &lt;span&gt;&lt;span&gt;//&lt;/span&gt;some code&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;g&lt;/span&gt;();&lt;br/&gt;}&lt;/pre&gt;&lt;p&gt;所以在我们的代码内部调用复杂，链路较长，且随时有可能加入新feature时，过早给函数加上&lt;code&gt;noexcept&lt;/code&gt;可能不是一个好的选择，因为&lt;code&gt;noexcept&lt;/code&gt;一旦加上，后续再去掉也会变得困难 : 调用方有可能看到你的函数声明为noexcept，调用方也会声明为&lt;code&gt;noexcept&lt;/code&gt;。但是当你把函数的&lt;code&gt;noexcept&lt;/code&gt;去掉却没有修改调用方的代码时，当异常抛出到调用方会导致程序终止。&lt;/p&gt;&lt;p&gt;目前主流的观点是：&lt;/p&gt;&lt;pre&gt;# &lt;span&gt;if&lt;/span&gt; __cplusplus &amp;gt;= 201103L&lt;br/&gt;#  &lt;span&gt;define&lt;/span&gt; &lt;span&gt;_GLIBCXX_NOEXCEPT&lt;/span&gt; &lt;span&gt;noexcept&lt;/span&gt;&lt;br/&gt;# &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;#  &lt;span&gt;define&lt;/span&gt; &lt;span&gt;_GLIBCXX_NOEXCEPT&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; reference&lt;br/&gt;      &lt;span&gt;operator&lt;/span&gt;*() &lt;span&gt;const&lt;/span&gt; _GLIBCXX_NOEXCEPT&lt;br/&gt;      { &lt;span&gt;return&lt;/span&gt; *_M_current; }&lt;br/&gt;&lt;br/&gt;      pointer&lt;br/&gt;      &lt;span&gt;operator&lt;/span&gt;-&amp;gt;() &lt;span&gt;const&lt;/span&gt; _GLIBCXX_NOEXCEPT&lt;br/&gt;      { &lt;span&gt;return&lt;/span&gt; _M_current; }&lt;br/&gt;&lt;br/&gt;      __normal_iterator&amp;amp;&lt;br/&gt;      &lt;span&gt;operator&lt;/span&gt;++() _GLIBCXX_NOEXCEPT&lt;br/&gt;      {&lt;br/&gt;++_M_current;&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; *&lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;      __normal_iterator&lt;br/&gt;      &lt;span&gt;operator&lt;/span&gt;++(&lt;span&gt;int&lt;/span&gt;) _GLIBCXX_NOEXCEPT&lt;br/&gt;      { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;__normal_iterator&lt;/span&gt;(_M_current++); }&lt;/pre&gt;&lt;p&gt;最后我们看一下vector如何实现利用&lt;code&gt;noexcept move constructor&lt;/code&gt;扩容以及&lt;code&gt;move constructor&lt;/code&gt;是否声明&lt;code&gt;noexcept&lt;/code&gt;对扩容的性能影响。&lt;/p&gt;&lt;h3&gt;如何实现利用&lt;code&gt;noexcept move constructor&lt;/code&gt;扩容&lt;/h3&gt;&lt;p&gt;这里就不贴大段的代码了，每个平台的实现可能都不一样，我们只关注vector是怎么判断调用&lt;code&gt;copy constructor&lt;/code&gt;还是&lt;code&gt;move constructor&lt;/code&gt;的。&lt;/p&gt;&lt;p&gt;其中利用到的核心技术有：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;type trait&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;iterator trait&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;move iterator&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;std::forward&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;核心代码：&lt;/p&gt;&lt;pre&gt;&lt;span&gt;template &lt;/span&gt;&amp;lt;&lt;span&gt;typename&lt;/span&gt; _Iterator, &lt;span&gt;typename&lt;/span&gt; _ReturnType = &lt;span&gt;typename&lt;/span&gt; conditional&amp;lt;&lt;br/&gt;                                  __move_if_noexcept_cond&amp;lt;&lt;span&gt;typename&lt;/span&gt; iterator_traits&amp;lt;_Iterator&amp;gt;::value_type&amp;gt;::value,&lt;br/&gt;                                  _Iterator, move_iterator&amp;lt;_Iterator&amp;gt;&amp;gt;::type&amp;gt;&lt;br/&gt;&lt;span&gt;inline&lt;/span&gt; _GLIBCXX17_CONSTEXPR _ReturnType &lt;span&gt;__make_move_if_noexcept_iterator&lt;/span&gt;(_Iterator __i) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;_ReturnType&lt;/span&gt;(__i);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;template &lt;/span&gt;&amp;lt;&lt;span&gt;typename&lt;/span&gt; _Tp&amp;gt;&lt;br/&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;__move_if_noexcept_cond&lt;/span&gt;&lt;br/&gt;    : public __and_&amp;lt;__not_&amp;lt;is_nothrow_move_constructible&amp;lt;_Tp&amp;gt;&amp;gt;, is_copy_constructible&amp;lt;_Tp&amp;gt;&amp;gt;::type {};&lt;/pre&gt;&lt;p&gt;这里用&lt;code&gt;type trait&lt;/code&gt;和&lt;code&gt;iterator trait&lt;/code&gt;联合判断：假如元素有&lt;code&gt;noexcept move constructor&lt;/code&gt;，那么&lt;code&gt;is_nothrow_move_constructible=1&lt;/code&gt; =&amp;gt; &lt;code&gt;__move_if_noexcept_cond=0&lt;/code&gt; =&amp;gt; &lt;code&gt;__make_move_if_noexcept_iterator&lt;/code&gt;返回一个&lt;code&gt;move iterator&lt;/code&gt;。这里&lt;code&gt;move iterator&lt;/code&gt;迭代器适配器也是一个c++11新特性，用来将任何对底层元素的处理转换为一个move操作，例如：&lt;/p&gt;&lt;pre&gt;std::list&amp;lt;std::string&amp;gt; s;&lt;br/&gt;std::vector&amp;lt;string&amp;gt; &lt;span&gt;v&lt;/span&gt;(make_move_iterator(s.begin()),make_move_iterator(s.end()));     &lt;span&gt;&lt;span&gt;//&lt;/span&gt;make_move_iterator返回一个std::move_iterator&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;然后上游利用生成的&lt;code&gt;move iterator&lt;/code&gt;进行循环元素move:&lt;/p&gt;&lt;pre&gt;{&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (; __first != __last; ++__first, (&lt;span&gt;void&lt;/span&gt;)++__cur) &lt;span&gt;std::_Construct&lt;/span&gt;(&lt;span&gt;std::__addressof&lt;/span&gt;(*__cur), *__first);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; __cur;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;template &lt;/span&gt;&amp;lt;&lt;span&gt;typename&lt;/span&gt; _T1, &lt;span&gt;typename&lt;/span&gt;... _Args&amp;gt;&lt;br/&gt;&lt;span&gt;inline&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;_Construct&lt;/span&gt;(_T1 *__p, _Args &amp;amp;&amp;amp;... __args) {&lt;br/&gt;  ::&lt;span&gt;new&lt;/span&gt; (&lt;span&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span&gt;void&lt;/span&gt; *&amp;gt;(__p)) &lt;span&gt;_T1&lt;/span&gt;(std::forward&amp;lt;_Args&amp;gt;(__args)...);      &lt;span&gt;&lt;span&gt;//&lt;/span&gt;实际copy(或者move)元素&lt;/span&gt;&lt;br/&gt;}&lt;/pre&gt;&lt;p&gt;其中&lt;code&gt;_Construct&lt;/code&gt;就是实际copy(或者move)元素的函数。&lt;span&gt;这里很关键的一点是：对move iterator进行解引用操作，返回的是一个右值引用。&lt;/span&gt;，这也就保证了，当&lt;code&gt;__first&lt;/code&gt;类型是&lt;code&gt;move iterator&lt;/code&gt;时，用&lt;code&gt;_T1(std::forward&amp;lt;_Args&amp;gt;(__args)...&lt;/code&gt;进行“完美转发”才调用&lt;code&gt;_T1&lt;/code&gt;类型的&lt;code&gt;move constructor&lt;/code&gt;，生成的新对象被放到新vector的&lt;code&gt;__p&lt;/code&gt;地址中。&lt;/p&gt;&lt;p&gt;总结一下过程就是：&lt;/p&gt;&lt;p&gt;大家可以用下面这段简单的代码在自己的平台打断点调试一下：&lt;/p&gt;&lt;pre&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;public:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;A&lt;/span&gt;() { std::cout &amp;lt;&amp;lt; &lt;span&gt;&lt;span&gt;&quot;&lt;/span&gt;constructor&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt; &amp;lt;&amp;lt; std::endl; }&lt;br/&gt;  &lt;span&gt;A&lt;/span&gt;(&lt;span&gt;const&lt;/span&gt; A &amp;amp;a) { std::cout &amp;lt;&amp;lt; &lt;span&gt;&lt;span&gt;&quot;&lt;/span&gt;copy constructor&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt; &amp;lt;&amp;lt; std::endl; }&lt;br/&gt;  &lt;span&gt;A&lt;/span&gt;(&lt;span&gt;const&lt;/span&gt; A &amp;amp;&amp;amp;a) &lt;span&gt;noexcept&lt;/span&gt; { std::cout &amp;lt;&amp;lt; &lt;span&gt;&lt;span&gt;&quot;&lt;/span&gt;move constructor&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt; &amp;lt;&amp;lt; std::endl; }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {&lt;br/&gt;  std::vector&amp;lt;A&amp;gt; v;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;10&lt;/span&gt;; i++) {&lt;br/&gt;    A a;&lt;br/&gt;    v.&lt;span&gt;push_back&lt;/span&gt;(a);&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;&lt;h3&gt;&lt;code&gt;noexcept move constructor&lt;/code&gt;对性能的影响&lt;/h3&gt;&lt;p&gt;这篇文章C++ NOEXCEPT AND MOVE CONSTRUCTORS EFFECT ON PERFORMANCE IN STL CONTAINERS介绍了noexcept move constructor对耗时以及内存的影响，这里不重复赘述了，感兴趣的可以自己试一下。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.45&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/On8kUXFskR1D2dC7hg2DEZwIot3Lib3mic2gbknRQZiapnqJicpzRkWv5oJ3vfgZxQgG9Q1ibp9bDFVZRpULfjKZPFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;参考资料：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;When to Use noexcept And When to Not&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Does noexcept improve performance?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;EffectiveModernCppChinese Item14&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;C++11的noexcept标识符与操作符应如何正确使用？&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>