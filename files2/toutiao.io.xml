<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>492648e91b5b0f73105be2abc7dbcc42</guid>
<title>2022 年升职加薪就靠它了！抓紧时间！</title>
<link>https://toutiao.io/k/i6bb1wf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;码农周刊是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;br/&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万。&lt;br/&gt;&lt;span&gt;专业、简单、有用&lt;/span&gt;，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「&lt;span&gt;码农周刊VIP会员&lt;/span&gt;」服务。&lt;br/&gt;&lt;strong&gt;你与 BAT 技术大牛，只差一份「码农周刊VIP会员」的距离！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;VIP会员特权&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 52 期码农周刊VIP会员&lt;span&gt;专属邮件周报&lt;/span&gt;，让你及时掌握技术动向；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 只限VIP会员加入的&lt;span&gt;交流圈子&lt;/span&gt;，让你与技术大牛切磋学习；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. VIP会员独享的&lt;span&gt;工作机会&lt;/span&gt;，为你介绍好公司的好机会；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 更多会员特权，持续更新……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;如何加入「码农周刊VIP会员」？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 微信扫描下方二维码，加入码农周刊VIP会员知识星球。&lt;strong&gt;&lt;span&gt;促销期间，一年仅需 108 元！平均一天花费不到 3 毛！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;391&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;425&quot; data-ratio=&quot;1.3478260869565217&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ6elqZKJKdKVMrGKUKjLwPpIFaDmrXyf1iaRtelGc6Fm6W4vp1uEAbb7Nz7QuBzxXNW96CiauDAL3Aw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 加入码农周刊VIP会员知识星球后，客服会联系您，请留意知识星球内的私信。&lt;br/&gt;3. 客服向您发送码农周刊VIP会员欢迎邮件，开启您的码农周刊VIP会员之旅。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;心动不如心动，赶快订阅吧！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>37c651386832f0b64e64519cb3d4c462</guid>
<title>微服务从代码到k8s部署应有尽有大结局（k8s部署）</title>
<link>https://toutiao.io/k/xk3qbvm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们用一个系列来讲解从需求到上线、从代码到k8s部署、从日志到监控等各个方面的微服务完整实践。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个项目使用了go-zero开发的微服务，基本包含了go-zero以及相关go-zero作者开发的一些中间件，所用到的技术栈基本是go-zero项目组的自研组件，基本是go-zero全家桶了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实战项目地址：https://github.com/Mikaelemmmm/go-zero-looklook&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、概述&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一节，我们已经把gitlab、jenkins、harbor、k8s都已经搭建好了，这一节我们来编写jenkins的pipline将我们的服务通过jenkins完整的发布到k8s中。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、部署中间件&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将mysql、redis、es等部署到k8s之外 ， 模拟用作线上独立环境（至于线上你想把某些中间件部署到k8s内部这个自行处理，本次重点是如何将go-zero开发的微服务部署到k8s集群内部），这里我就直接使用项目下的docker-compose-env.yaml了，把所有依赖的第三方中间件环境直接安装在srv-data.com(192.168.1.181)这台服务器，前提是这台服务器已经安装好docker、docker-compose。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;登陆到 192.168.1.181&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; mkdir data &amp;amp;&amp;amp; &lt;span&gt;cd&lt;/span&gt; data &amp;amp;&amp;amp; vim docker-compose.yml&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker-compose up -d&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker-compose ps &lt;span&gt;#查看确认&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、独立配置&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将每个服务的配置都独立出来，统一放在一个git仓库，这样只给一个人线上仓库的权限，如果线上配置有变直接修改这个仓库的文件，在jenkins做cd的时候，会先拉取代码再拉取对应服务的配置自动构建，具体可以看后面的pipline。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【问】为什么不用配置中心？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）修改db、redis等需要重启服务，但是有一些配置又不需要重启服务，运维又要去记，记混了比较容易造成线上事故&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）方便回滚。我们发新版本到线上，并且又改了新版本配置。这时候线上用户反馈有问题，线上需要快速回滚的话，如果我们使用将文件构建到镜像中，直接使用k8s一行命令就可以将上一个版本代码加配置直接回滚回来。如果使用了配置中心，回滚了代码，还要将上个版本的配置去配置中心改回来，很麻烦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;独立线上仓库目录结构如下（这个结构是跟pipline中写法相关的）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1406003159557663&quot; data-type=&quot;png&quot; data-w=&quot;1266&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1lD21MxibvrUhYysDRVboP2pZrprx5s3V8PWprm8LxMAAm9S4eDpGlU1HjlhiaFWCwM6AiaUS1KAJOQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仓库地址 ：https://github.com/Mikaelemmmm/go-zero-looklook-pro-conf , 直接下载就好&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、修改配置中的中间件，数据库、redis等都要改成192.168.1.181这台机器，我们把这台机器当成线上环境的中间件。&lt;/p&gt;&lt;p&gt;2、另外一个就是我们的服务发现，线上我们部署在k8s中，go-zero直接支持k8s服务发现，所以不需要etcd等，我们在配置zrpc client的时候，要改成target，k8s的配置方式。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、编写 jenkins 的 pipline&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.1 配置参数&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;访问 http://192.168.1.180:8989/ 打开jenkins，进入jenkins首页，点击左侧菜单&lt;code&gt;新建Item&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先创建 &lt;code&gt;identity&lt;/code&gt; 授权服务的流水线&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4755043227665706&quot; data-type=&quot;png&quot; data-w=&quot;3470&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1lD21MxibvrUhYysDRVboP2pjFSoFJ7bE1S7TGZkYvZCvM9Hv8MqBicbibGrpfOjQxMIrr9OibL4lj1A/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后点击“General” , 选择“This project is parameterized” ， &quot;添加参数&quot;，“Choice Parameter”，如下图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5449871465295629&quot; data-type=&quot;png&quot; data-w=&quot;2334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1lD21MxibvrUhYysDRVboP2UhzpqQRKzarTveuxuzSJictbIMCQuDA0VHTOELBYQZCDZdbVcmZadmQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后编写内容如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3114323258869908&quot; data-type=&quot;png&quot; data-w=&quot;3044&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1lD21MxibvrUhYysDRVboP2BngWy5xsXBic8alydWnZiayMUyYl0fIDSRniboZOickJ1ahWbXibCoRu0qw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接保存。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2 编写pipline&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;向下滑动找到&lt;code&gt;Pipeline script&lt;/code&gt;,填写脚本内容&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pipeline {&lt;br/&gt;  agent any&lt;br/&gt;  parameters {&lt;br/&gt;      gitParameter name: &#x27;branch&#x27;, &lt;br/&gt;      type: &#x27;PT_BRANCH&#x27;,&lt;br/&gt;      branchFilter: &#x27;origin/(.*)&#x27;,&lt;br/&gt;      defaultValue: &#x27;master&#x27;,&lt;br/&gt;      selectedValue: &#x27;DEFAULT&#x27;,&lt;br/&gt;      sortMode: &#x27;ASCENDING_SMART&#x27;,&lt;br/&gt;      description: &#x27;选择需要构建的分支&#x27;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  stages {&lt;br/&gt;      stage(&#x27;服务信息&#x27;)    {&lt;br/&gt;          steps {&lt;br/&gt;              sh &#x27;echo 分支：$branch&#x27;&lt;br/&gt;              sh &#x27;echo 构建服务类型：${JOB_NAME}-$type&#x27;&lt;br/&gt;          }&lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;      stage(&#x27;拉取代码&#x27;) {&lt;br/&gt;          steps {&lt;br/&gt;              checkout([$class: &#x27;GitSCM&#x27;, &lt;br/&gt;              branches: [[name: &#x27;$branch&#x27;]],&lt;br/&gt;              doGenerateSubmoduleConfigurations: false, &lt;br/&gt;              extensions: [], &lt;br/&gt;              submoduleCfg: [],&lt;br/&gt;              userRemoteConfigs: [[credentialsId: &#x27;gitlab-cert&#x27;, url: &#x27;ssh://git@192.168.1.180:2222/root/go-zero-looklook.git&#x27;]]])&lt;br/&gt;          }   &lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;      stage(&#x27;获取commit_id&#x27;) {&lt;br/&gt;          steps {&lt;br/&gt;              echo &#x27;获取commit_id&#x27;&lt;br/&gt;              git credentialsId: &#x27;gitlab-cert&#x27;, url: &#x27;ssh://git@192.168.1.180:2222/root/go-zero-looklook.git&#x27;&lt;br/&gt;              script {&lt;br/&gt;                  env.commit_id = sh(returnStdout: true, script: &#x27;git rev-parse --short HEAD&#x27;).trim()&lt;br/&gt;              }&lt;br/&gt;          }&lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;      stage(&#x27;拉取配置文件&#x27;) {&lt;br/&gt;              steps {&lt;br/&gt;                  checkout([$class: &#x27;GitSCM&#x27;, &lt;br/&gt;                  branches: [[name: &#x27;$branch&#x27;]],&lt;br/&gt;                  doGenerateSubmoduleConfigurations: false, &lt;br/&gt;                  extensions: [[$class: &#x27;RelativeTargetDirectory&#x27;, relativeTargetDir: &#x27;conf&#x27;]], &lt;br/&gt;                  submoduleCfg: [],&lt;br/&gt;                  userRemoteConfigs: [[credentialsId: &#x27;gitlab-cert&#x27;, url: &#x27;ssh://git@192.168.1.180:2222/root/go-zero-looklook-pro-conf.git&#x27;]]])&lt;br/&gt;              }   &lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;      stage(&#x27;goctl版本检测&#x27;) {&lt;br/&gt;          steps{&lt;br/&gt;              sh &#x27;/usr/local/bin/goctl -v&#x27;&lt;br/&gt;          }&lt;br/&gt;      }&lt;br/&gt;      &lt;br/&gt;      stage(&#x27;Dockerfile Build&#x27;) {&lt;br/&gt;          steps{&lt;br/&gt;                 sh &#x27;yes | cp  -rf conf/${JOB_NAME}/${type}/${JOB_NAME}.yaml  app/${JOB_NAME}/cmd/${type}/etc&#x27;   //线上配置文件&lt;br/&gt;                 sh &#x27;cd app/${JOB_NAME}/cmd/${type} &amp;amp;&amp;amp; /usr/local/bin/goctl docker -go ${JOB_NAME}.go &amp;amp;&amp;amp; ls -l&#x27;&lt;br/&gt;                 script{&lt;br/&gt;                     env.image = sh(returnStdout: true, script: &#x27;echo ${JOB_NAME}-${type}:${commit_id}&#x27;).trim()&lt;br/&gt;                 }&lt;br/&gt;                 sh &#x27;echo 镜像名称：${image} &amp;amp;&amp;amp; cp app/${JOB_NAME}/cmd/${type}/Dockerfile ./  &amp;amp;&amp;amp; ls -l &amp;amp;&amp;amp; docker build  -t ${image} .&#x27;&lt;br/&gt;          }&lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;      stage(&#x27;上传到镜像仓库&#x27;) {&lt;br/&gt;          steps{&lt;br/&gt;            //docker login 这里要注意，会把账号密码输出到jenkins页面，可以通过port.sh类似方式处理，官网文档有这里我就不详细写了&lt;br/&gt;              sh &#x27;docker login --username=${docker_username} --password=${docker_pwd} http://${docker_repo}&#x27; &lt;br/&gt;              sh &#x27;docker tag  ${image} ${docker_repo}/go-zero-looklook/${image}&#x27;&lt;br/&gt;              sh &#x27;docker push ${docker_repo}/go-zero-looklook/${image}&#x27;&lt;br/&gt;          }&lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;      stage(&#x27;部署到k8s&#x27;) {&lt;br/&gt;          steps{&lt;br/&gt;              script{&lt;br/&gt;                  env.deployYaml = sh(returnStdout: true, script: &#x27;echo ${JOB_NAME}-${type}-deploy.yaml&#x27;).trim()&lt;br/&gt;                  env.port=sh(returnStdout: true, script: &#x27;/root/port.sh ${JOB_NAME}-${type}&#x27;).trim()&lt;br/&gt;              }&lt;br/&gt;&lt;br/&gt;              sh &#x27;echo ${port}&#x27;&lt;br/&gt;&lt;br/&gt;              sh &#x27;rm -f ${deployYaml}&#x27;&lt;br/&gt;              sh &#x27;/usr/local/bin/goctl kube deploy -secret docker-login -replicas 2 -nodePort 3${port} -requestCpu 200 -requestMem 50 -limitCpu 300 -limitMem 100 -name ${JOB_NAME}-${type} -namespace go-zero-looklook -image ${docker_repo}/${image} -o ${deployYaml} -port ${port} --home /root/template&#x27;&lt;br/&gt;              sh &#x27;/usr/local/bin/kubectl apply -f ${deployYaml}&#x27;&lt;br/&gt;          }&lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;       stage(&#x27;Clean&#x27;) {&lt;br/&gt;           steps{&lt;br/&gt;               sh &#x27;docker rmi -f ${image}&#x27;&lt;br/&gt;               sh &#x27;docker rmi -f ${docker_repo}/${image}&#x27;&lt;br/&gt;               cleanWs notFailBuild: true&lt;br/&gt;           }&lt;br/&gt;       }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;非常重要！！！&lt;/p&gt;&lt;/blockquote&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;构建优化：pipline中生成dockerfile的时候，我们是使用k8s方式部署不需要etcd，但是这种方式部署需要指定账号（有去k8s的endpoints中get的权限，使用默认default就好了，每次创建一个新的命名空间k8s会自动帮我们创建好一个default），但是使用goctl 生成的 k8s yml没有添加指定账号选项，这个已经反馈了，可能后续版本会加上，这里我们也用模版做了，同样模版是在项目目录下https://github.com/Mikaelemmmm/go-zero-looklook/tree/main/deploy/goctl，pipline中构建指定这个模版即可&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;{credentialsId}要替换为你的具体凭据值，即【添加凭据】模块中的一串字符串，我们之前配置的是gitlab-cert所以这里就填写gitlab-cert，如果你不是这个自己要更换，&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/eHEMOF2hOektZTKdT8Qbw5qLiaRyrSF0pz5UWqEjoY9T9YibROhBocSqMGviaFvxEJuGmo97CqTTwxfYLWdDaelsG6mRRvXCt8M/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/span&gt;&lt;/span&gt;{gitUrl}需要替换为你代码的git仓库地址，其他的${xxx}形式的变量无需修改，保持原样即可。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;这里跟官方文档有一点点不一样，由于我项目文件夹目录不同，goctl生成的dockerfile文件我手动做了点调整，在一个我不是在构建时候生成的dockerfile，是在创建项目时候就把dockerfile一起放在目录下，这样构建镜像时候不需要goctl了&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5、配置k8s拉取私有仓库镜像&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;k8s在默认情况下，只能拉取harbor镜像仓库的公有镜像，如果拉取私有仓库镜像，则是会报 &lt;code&gt;ErrImagePull&lt;/code&gt; 和 &lt;code&gt;ImagePullBackOff&lt;/code&gt; 的错误&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、先在jenkins发布机器登陆harbor&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker login 192.168.1.180:8077&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; Username: admin&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; Password:&lt;/span&gt;&lt;br/&gt;Login Succeeded&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、在k8s中生成登陆harbor配置文件&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看上一步登陆harbor生成的凭证&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; cat /root/.docker/config.json  &lt;/span&gt;&lt;br/&gt;{&lt;br/&gt; &quot;auths&quot;: {&lt;br/&gt;  &quot;192.168.1.180:8077&quot;: {&lt;br/&gt;   &quot;auth&quot;: &quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、对秘钥文件进行base64加密&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; cat /root/.docker/config.json  | base64 -w 0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;ewoJImF1dGhzIjogewoJCSIxOTIuMTY4LjEuMTgwOjgwNzciOiB7CgkJCSJhdXRoIjogIllXUnRhVzQ2U0dGeVltOXlNVEl6TkRVPSIKCQl9Cgl9Cn0=&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、创建docker-secret.yaml&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;v1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;Secret&lt;/span&gt;&lt;br/&gt;&lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;docker-login&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type:&lt;/span&gt; &lt;span&gt;kubernetes.io/dockerconfigjson&lt;/span&gt;&lt;br/&gt;&lt;span&gt;data:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;.dockerconfigjson:&lt;/span&gt; &lt;span&gt;ewoJImF1dGhzIjogewoJCSIxOTIuMTY4LjEuMTgwOjgwNzciOiB7CgkJCSJhdXRoIjogIllXUnRhVzQ2U0dGeVltOXlNVEl6TkRVPSIKCQl9Cgl9Cn0=&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; kubectl create -f docker-secret.yaml -n go-zero-looklook&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;secret &quot;docker-login&quot; created&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6、构建&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们进入首页，点击idenity进入详情页&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3606194690265487&quot; data-type=&quot;png&quot; data-w=&quot;2712&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1lD21MxibvrUhYysDRVboP29o30Ez1waD905PMerib30YUXCAcRxREibMkjibN0GgNicic2Z1ECgd0LdLA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后可以看到，上面我们配置好的identity服务，如下图 ，点击“Build with Parameters”， 然后选择rpc,点击“开始构建”&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4875749785775493&quot; data-type=&quot;png&quot; data-w=&quot;2334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1lD21MxibvrUhYysDRVboP2YiardibibRFYdibowADB0Nup3MeX7bsDILLcjwBG3SZ6Lm3UUUdM7ng32A/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第一次构建在拉代码时候都会失败，应该是初始化啥东西，再点一次就好了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;部署成功&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.15276851234156105&quot; data-type=&quot;png&quot; data-w=&quot;2998&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1lD21MxibvrUhYysDRVboP2iaY7o3S21jyWr9UqiaqRy8aa9YJdXarATa8Gy6ObzvJezcctjicRkbQWQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.39063761097659405&quot; data-type=&quot;png&quot; data-w=&quot;2478&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1lD21MxibvrUhYysDRVboP2MUqlsNlIYDdYBFjl0dvpu6M8SqXROSPMuq5d2z76eFwZsyoHDP3D6A/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36278735632183906&quot; data-type=&quot;png&quot; data-w=&quot;2784&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1lD21MxibvrUhYysDRVboP2tByG9TnN1FRFWIWmNGJvW4zib5bvPa51DvyFNGicuTNfTHickUBX2zeyQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样道理，去构建identity-api，再去配置usercenter服务 构建usercenter-rpc、构建usercenter-api，接着配置其他服务、构建即可，本次我们先只构建identity-api、identity-rpc、usercenter-rpc、usercenter-api给大家演示。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6、添加网关&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为我们的api服务通过goctl发布在k8s中都会暴露nodeport端口，索引我们看下k8s中go-zero-looklook命名空间下的service的nodeport端口服务，然后将nodeport配置在nignx即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次我们独立一台虚拟机在k8s之外，安装nginx，将k8s后端api服务通过nodeport方式把端口暴露给nginx，然后nginx在配置中配置此api服务，这样nginx就充当网关使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;nginx的安装就不再这里多说了，记得一定要有auth_request模块，没有的话自己去安装。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;nginx的配置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;server{&lt;br/&gt;    listen 8081;&lt;br/&gt;    access_log /var/log/nginx/looklook.com_access.log;&lt;br/&gt;    error_log /var/log/nginx//looklook.com_error.log;&lt;br/&gt;&lt;br/&gt;    location /auth {&lt;br/&gt;    internal;&lt;br/&gt;      proxy_set_header X-Original-URI $request_uri;&lt;br/&gt;    proxy_pass_request_body off;&lt;br/&gt;    proxy_set_header Content-Length &quot;&quot;;&lt;br/&gt;    proxy_pass http://192.168.1.182:31001/identity/v1/verify/token;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    location ~ /usercenter/ {&lt;br/&gt;       auth_request /auth;&lt;br/&gt;       auth_request_set $user $upstream_http_x_user;&lt;br/&gt;       proxy_set_header x-user $user;&lt;br/&gt;&lt;br/&gt;       proxy_set_header Host $http_host;&lt;br/&gt;       proxy_set_header X-Real-IP $remote_addr;&lt;br/&gt;       proxy_set_header REMOTE-HOST $remote_addr;&lt;br/&gt;       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;br/&gt;       proxy_pass http://192.168.1.182:31002;&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt;   location ~ /travel/ {&lt;br/&gt;       auth_request /auth;&lt;br/&gt;       auth_request_set $user $upstream_http_x_user;&lt;br/&gt;       proxy_set_header x-user $user;&lt;br/&gt;&lt;br/&gt;       proxy_set_header Host $http_host;&lt;br/&gt;       proxy_set_header X-Real-IP $remote_addr;&lt;br/&gt;       proxy_set_header REMOTE-HOST $remote_addr;&lt;br/&gt;       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;br/&gt;       proxy_pass http://192.168.1.182:31003;&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt;   location ~ /order/ {&lt;br/&gt;       auth_request /auth;&lt;br/&gt;       auth_request_set $user $upstream_http_x_user;&lt;br/&gt;       proxy_set_header x-user $user;&lt;br/&gt;&lt;br/&gt;       proxy_set_header Host $http_host;&lt;br/&gt;       proxy_set_header X-Real-IP $remote_addr;&lt;br/&gt;       proxy_set_header REMOTE-HOST $remote_addr;&lt;br/&gt;       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;br/&gt;       proxy_pass http://192.168.1.182:31004;&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt;   location ~ /payment/ {&lt;br/&gt;       auth_request /auth;&lt;br/&gt;       auth_request_set $user $upstream_http_x_user;&lt;br/&gt;       proxy_set_header x-user $user;&lt;br/&gt;&lt;br/&gt;       proxy_set_header Host $http_host;&lt;br/&gt;       proxy_set_header X-Real-IP $remote_addr;&lt;br/&gt;       proxy_set_header REMOTE-HOST $remote_addr;&lt;br/&gt;       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;br/&gt;       proxy_pass http://192.168.1.182:31005;&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是线上的话，应该配置多台nignx保持高可用，在nignx前面还会有一个slb，你的域名包括https配置都应该解析到slb，在slb前面在有防火墙等这些。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8、结束语&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，整个系列就结束了，整体架构图应该如第一篇所展示，本系列希望能给你带来帮助。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;项目地址&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/zeromicro/go-zero&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎使用 &lt;code&gt;go-zero&lt;/code&gt; 并 &lt;strong&gt;star&lt;/strong&gt; 支持我们！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;微信交流群&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注『&lt;strong&gt;微服务实践&lt;/strong&gt;』公众号并点击 &lt;strong&gt;交流群&lt;/strong&gt; 获取社区群二维码。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bab1402c236be73af82be001abf6f27f</guid>
<title>深入浅出操作系统的零拷贝</title>
<link>https://toutiao.io/k/x5izhz0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;在 kafka、netty 这些技术中，零拷贝都是一个重要的考点。但是零拷贝与这些具体的技术无关，关键点是数据传输。就像冰糖葫芦里的山楂：冰糖葫芦里重要的组成可以有山楂。但是山楂并不是冰糖葫芦特有的，羊羹里也可以有。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl8GqAQMn8Y0C5nrqGc1D7FnicbvW3UgjOW5xoYENoPkXiba2k3M3zsz99v98u5XsmPeLldmhWibnOvNQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面是一个 MQ 的基本流程。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.423828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8GqAQMn8Y0C5nrqGc1D7FnzBRLMO0rIibRMVnic13B0eArj9BJBXkKm6bp41vxRIcRB2owhhNsia46A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;512&quot;/&gt;&lt;/p&gt;&lt;p&gt;如果采用传统方法进行数据传输，消息从存储系统到达消费者需要经过4次拷贝。如果使用零拷贝技术，情况会怎样呢？&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;vote_area&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;传统模式下的数据拷贝过程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;过程解释&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;传统模式下，上图红框中经过了从文件读数据和从 socket 进行数据发送两个过程。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2544529262086514&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8GqAQMn8Y0C5nrqGc1D7FnGy9b6oxfCdkYpKCDvWgicFRXibaVMY8jw9pgllDicricDPKviakhaO01ECw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;393&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;内部流程如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4351535836177474&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8GqAQMn8Y0C5nrqGc1D7FnL9YDXohTtY8biaUwoFy8h2F2zSEQ0hWEwsgde19AyibH45vbeNz3jFtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;586&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;用户进程如 Java 程序想进行 File.read ，需要将数据进行 DMA 拷贝读取到到文件读取缓冲区。还记得&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486487&amp;amp;idx=1&amp;amp;sn=0cff83eead864825e415811ddc215420&amp;amp;chksm=fafde6b9cd8a6fafb71bef95e6a8c6dc870c89f2e9b487064078d89e23215c8e2a948acfc634&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《时刻掌握系统运行状态-深度理解top命令》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《&lt;span&gt;时刻掌握系统运行状态-深度理解top命令》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;里的 &lt;/span&gt;&lt;span&gt;buffers/cached 空间&lt;/span&gt;吗？文件读取缓冲区占用的就是这个空间。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;文件读取缓冲区仍然是内核空间，用户进程要使用还需要进行一次 CPU 拷贝将数据拷贝到应用进程缓冲区。这时候用户进程比如 Java 程序就可以对数据进行排序、过滤等操作了。这个过程就完成了 File.read。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果数据想发送到网卡，也就是 Socket.send。还需要再进行一次 CPU 拷贝发送到套接字发送缓冲区进行中转，这个地方也是要占用 &lt;span&gt;buffers/cached 空间&lt;/span&gt;的。中转这个过程很快，所以 &lt;span&gt;buffers/cached 空间&lt;/span&gt;可以很快被释放。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据从中转站还要进行一次 DMA 拷贝，将数据运送到网络设备缓冲区，最终发送到网络上。这个过程就完成了 Socket.send。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个过程要进行几次上下文切换呢？File.read 这个函数需要先调用发起内核请求，进入到内核空间操作，这是一次内核切换。内核操作完成返回内核的结果，这是第二次内核切换。同理， Socket.send 也需要两次内核切换。这里的用户态到内核态的切换就是上下文切换。总共是4次。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;性能测试&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这种方式性能如何呢？咱们来测试一下。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;写个程序从本地电脑中读取自己的一张照片，这张照片5M多大，发送到服务端。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.533457249070632&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8GqAQMn8Y0C5nrqGc1D7FnpcjoFhiaZt86UTKfxMwrDsDAwo2ONibhd3M5n7ZslbjH2L2YXQFKawgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;538&quot;/&gt;&lt;/p&gt;&lt;p&gt;服务端只要能接收客户端数据就可以，我随便写了一个：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public static void server() throws Exception {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ServerSocket serverSocket = new ServerSocket(520);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        int i = 1;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        while (true) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Socket socket = serverSocket.accept();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int left = 0;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            while (left &amp;gt;= 0) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                InputStream io = socket.getInputStream();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                byte[] bytes = new byte[1024];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                left = io.read(bytes);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;客户端读取数据并发送到网络：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GetMapping&lt;/span&gt;(path = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hi&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;code-snippet__title&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    client();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;end&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Socket socket = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Socket(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;520&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    OutputStream netOut = socket.getOutputStream();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    InputStream io = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;D:\\photo\\编程一生.JPG&quot;&lt;/span&gt;);    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; begin = System.currentTimeMillis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;code-snippet__number&quot;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (io.read(bytes) &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        netOut.write(bytes);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;耗时为&quot;&lt;/span&gt; + (System.currentTimeMillis() - begin) + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ms&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    netOut.close();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    io.close();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    socket.close();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;服务启动后：http://localhost:8080/hi 访问5次，结果如下：&lt;/p&gt;&lt;p&gt;耗时为450ms&lt;/p&gt;&lt;p&gt;耗时为437ms&lt;/p&gt;&lt;p&gt;耗时为424ms&lt;/p&gt;&lt;p&gt;耗时为423ms&lt;/p&gt;&lt;p&gt;耗时为420ms&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;结论：使用传统方式，5M多的数据读取到发送需要400多毫秒。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;零拷贝&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;过程&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;过程解释&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;linux操作系统中有个 sendFile 方法可以不通过用户进行，直接将数据从磁盘发送到网络设备缓冲区。在 linux2.1 版本的 sendFile 过程如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4826989619377163&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8GqAQMn8Y0C5nrqGc1D7FnY0BT2d5ibicC0Qvt9qaJc9zXbLdqkmMtZicvKmCDf2q1hkqZJvsuxaLkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;到了 linux2.4 ，linux 的 sendFile 进行了优化，实现了完全没有 CPU 拷贝实现数据传输。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4826989619377163&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8GqAQMn8Y0C5nrqGc1D7FnWxWsVyhY0lMice0ctnZMJf4bXoE8Yg7zbweobPKYa8VM9B4aLcKO2pw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不管是 linux2.1 还是 linux2.4 ，都是 linux 自身实现的，函数都对应的是 sendFile 。上层比如 Java 可以使用 transferTo 和 transferFrom 使用 sendFile 方法，这两个方法是 netty 实现的重要工具，一个是发送数据用，一个是接收数据用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;性能测试&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这种方式性能如何呢？咱们来测试一下。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;服务端不变，客户端代码如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@GetMapping(path = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hi&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;code-snippet__title&quot;&gt;hi&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;) throws Exception&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    client();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;end&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;client&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;) throws Exception&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      SocketChannel socket = SocketChannel.open();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      socket.connect(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; InetSocketAddress(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;520&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      FileChannel io = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;D:\\photo\\编程一生.JPG&quot;&lt;/span&gt;).getChannel();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; begin = System.currentTimeMillis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      io.transferTo(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, io.size(), socket);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;耗时为&quot;&lt;/span&gt; + (System.currentTimeMillis() - begin) + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ms&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      io.close();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      socket.close();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;服务启动后：http://localhost:8080/hi 访问5次，结果如下：&lt;/p&gt;&lt;p&gt;耗时为44ms&lt;/p&gt;&lt;p&gt;耗时为33ms&lt;/p&gt;&lt;p&gt;耗时为43ms&lt;/p&gt;&lt;p&gt;耗时为46ms&lt;/p&gt;&lt;p&gt;耗时为35ms&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;结论：使用零拷贝方式，5M多的数据读取到发送需要40多毫秒。与传统方式相比，性能提高10倍。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;内存映射模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;与零拷贝&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;linux 系统有零拷贝，windows 也希望减少拷贝和下上下切换，它依靠内存映射(MMAP)。当然，linux 也支持内存映射，并且在 RocketMQ 等的实现上发挥着巨大作用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.549165120593692&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8GqAQMn8Y0C5nrqGc1D7FnFaMf6lZtKWqIHSL2AwhXE4wl7l5wJaNOBZqFhNuu8xia1ebzbNhczjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;539&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过与上面传统方式比较，可看到由于内存映射发挥作用，在文件读取时减少了一次 CPU 拷贝。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 Java 中可以通过下面方法进行内存映射：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; RandomAccessFile raf = new RandomAccessFile(file, &quot;rw&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; MappedByteBuffer mmap = raf.getChannel().map(FileChannel.MapMode.READ_WRITE, 0, 500);   &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 MQ 的实现上，内存映射(MMAP)和 sendFile 零拷贝是提升性能的利器。下面做一个比较：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.22661396574440051&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8GqAQMn8Y0C5nrqGc1D7FnOzdyavNMjv8l0ONCNr2Z8GiaNZ4iaU9cWRgUhGf7M56Aqx9iazxcJpuicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;759&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面可以看到 RocketMQ 由于使用了内存映射吞吐量远高于 ActiveMQ 和 RabbitMQ ，Kafka 由于使用了零拷贝又比 RocketMQ 提高了一个数量级。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;实际上 RabbitMQ 的实现大量借鉴了 Kafka ，那 RabbitMQ 为什么不直接使用 Kafka 的零拷贝提高性能呢？因为 RabbitMQ 不仅仅是将数据从磁盘发送出去，还需要在内存中做一些排序、过滤等高级操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后大家再来思考一个问题：零拷贝和内存映射两种模式下，各需要几次上下文切换？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9a0296b5f4bef45bf5618e11d8383d9a</guid>
<title>Spark on Kubernetes 与 Spark on Yarn 不完全对比分析</title>
<link>https://toutiao.io/k/s0etrjq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.2142857142857142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CzXmD0LHvdj3nVY9EDHLhpH4VvJeiaia0BjslvVI4lWY8dcyW3FMvredibDW5kTgOSp10IDoUmoS4yNgZpNRmQFoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;28&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0434782608695652&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibl6u6nJ01g9icia42icDbWWvO2ObicnIUHjwVZt9x505utkfDbtc8ea4QIia3icQWibzwwYbPKwNDb83Jlk6bYGcQ2zaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;46&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;前言&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;Apache Spark 是目前应用最广泛的大数据分析计算工具之一。它擅长于批处理和实时流处理，并支持机器学习、人工智能、自然语言处理和数据分析应用。随着 Spark 越来越受欢迎，使用量越来越大，狭义上的 Hadoop (MR) 技术栈正在收缩。另外，普遍的观点和实践经验证明，除了大数据相关的工作负载，Hadoop (YARN) 不具备相应的灵活性去跟更广泛的企业技术栈融合与集成。比如去承载一些在线业务，而这正是 Kubernetes（K8s) 所擅长的领域。事实上，Kubernetes 的出现为 Spark 的改进打开了一个新世界的大门，创造了更多机遇。如果能用统一的一套集群去运行所有在线和离线的作业，也是十分吸引人的事情。&lt;/span&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;Spark on Kubernetes 于 Spark 2.3 [1] 版本引入开始，到 Spark 3.1 [2] 社区标记 GA，基本上已经具备了在生产环境大规模使用的条件。&lt;/span&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;DnLa&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4222222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u61OjQroUM3yWtGlvK19F4jKrHFTIibvltP2Sa0UMU5EJIfJRuiaK6bPHSrmjpfiaebkgnXiaCA0tltzpRr2Qwhfnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;MXuD&quot; ql-global=&quot;true&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;在业内，苹果[3], 微软[4], 谷歌，网易，华为、滴滴，京东等公司都已经有内部大规模落地或者对外服务的经典成功案例。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Ymwp&quot; ql-global=&quot;true&quot;&gt;&lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.2142857142857142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CzXmD0LHvdj3nVY9EDHLhpH4VvJeiaia0BjslvVI4lWY8dcyW3FMvredibDW5kTgOSp10IDoUmoS4yNgZpNRmQFoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;28&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0434782608695652&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibl6u6nJ01g9icia42icDbWWvO2ObicnIUHjwVZt9x505utkfDbtc8ea4QIia3icQWibzwwYbPKwNDb83Jlk6bYGcQ2zaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;46&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;Spark on Kubernetes 应用架构&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;1ZFZ&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;ifB6&quot;&gt;&lt;span&gt;从 Spark 整体计算框架层面来看，只是在资源管理层面多支持了一种调度器，其他接口都可以完全复用。一方面 Kubernetes 的引入和 Spark Standalone、YARN、 Mesos 及 Local 等组件形成了一个更为丰富的资源管理体系。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;zV1J&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Brvs&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48005698005698005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u61OjQroUM3yWtGlvK19F4jKrHFTIibvl25pTBsnbuAbSQeIvIgYC93qCSj1mEbBt1vqfaGte2syaaEb4iaQbbdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;TgKp&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;IYOz&quot;&gt;&lt;span&gt;另一方面，Spark 社区在支持 Kubernetes 特性的同时，对用户 API 的兼容度也得到了最大化的保留，极大程度上方便了用户任务的迁移。比如对于一个传统的 Spark 作业而言，我们通过简单的指定 --master 参数为 yarn 或者 k8s://xxx，即可完成两个调度平台的运行时切换。其他参数诸如镜像、队列、Shuffle 本地盘等配置， yarn 和 k8s 之间都是隔离的，可以很方便地统一在配置文件中统一维护。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;tPzJ&quot;&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;tPzJ&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5245202558635395&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u61OjQroUM3yWtGlvK19F4jKrHFTIibvl767ZE9GbE6geLTV5sL0t8qE2Xs7X7GATJbAk0LGFqoQBQYCP934Nvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;938&quot;/&gt;&lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.2142857142857142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CzXmD0LHvdj3nVY9EDHLhpH4VvJeiaia0BjslvVI4lWY8dcyW3FMvredibDW5kTgOSp10IDoUmoS4yNgZpNRmQFoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;28&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0434782608695652&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibl6u6nJ01g9icia42icDbWWvO2ObicnIUHjwVZt9x505utkfDbtc8ea4QIia3icQWibzwwYbPKwNDb83Jlk6bYGcQ2zaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;46&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;Spark on Kubernetes vs Spark on YARN&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jkpRFozzRU6wSGcvLr4mBmDzYNoWZ1J3BibfoABBzYeM9bhLk3okITVpqLn3jrjIdC2Xgl8o9dRBDI133ZXujicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/s4NNO8erqh93tkgNuf52MaBWaFacs3B7RIQqvsjPalmia3NKoz8KAtjW0k9fXQXr6TCzoprVVNt5FlbwkC0luMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;32&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;易用性分析&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Spark Native API&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;bQ5e&quot;&gt;&lt;span&gt;以 spark-submit 这种传统提交作业的方式来说，如前文中提到的通过配置隔离的方式，用户可以很方便地提交到 k8s 或者 YARN 集群上运行，基本上一样的简单和易用。这种方式对于熟悉 Spark API 及生态的用户而言是十分友好的，基本上没有对 k8s 技术栈的硬性要求。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;4YKu&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u61OjQroUM3yWtGlvK19F4jKrHFTIibvlKDhpUANBxZCgxDAM9u3BsLY8UHsiaNOCR7R61hBfAuPT3cAWZNd9iaUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;765&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;K6SY&quot;&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;K6SY&quot;&gt;&lt;span&gt;可以看到，如果我们忽略 K8s 或者 YARN 的底层细节，基本上还是熟悉的配方熟悉的味道。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;xQkx&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Spark Operator&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;BcF4&quot;&gt;&lt;span&gt;另外，除了这种方式， Kubernetes 在 API 上更加丰富。我们可以通过 Spark Operator[6] 的的方式， 如 kubectl apply -f &amp;lt;YAML file path&amp;gt;来创建和管理 Spark on k8s 应用。这种方式对于 Kubernetes 集群本身及用户而言无疑是最优雅的，而对没有 Kubernetes 经验的这部分 Spark 用户而言，有一定的学习成本。这种方式另一个好处是，Spark 的相关 lib 都可以通过 Docker 仓库来 Deploy，不需要单独的 Spark Client 环境来提交作业。单独的 Client 环境，容易造成版本和 Docker 不一致，增加运维成本，也会埋下引发一些不必要的线上问题的隐患。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;jlvt&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Serverless SQL&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;gBJW&quot;&gt;&lt;span&gt;当然，无论是 Spark 原生的还是 Operator 的方式，对大部分用户来说还是太原始了，不可避免的需要去感知一些底层的细节。在 Datalake/Lakehouse 场景下，数据变得民主，数据应用变得多样，很难去大范围地推广。在易用性上想更进一步，可以考虑使用 Apache Kyuubi (Incubating) [7] 来构建 Serverless Spark/SQL 服务。大部分情况下，用户都可以直接使用 BI 工具或者 SQL 来直接操作数据即可。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;a2YR&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;bSev&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4005208333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u61OjQroUM3yWtGlvK19F4jKrHFTIibvlORXm664szoXM4yxJWQOXiaqISOdqKBTSGxYrHpxib7icBD2NcW8MLQVTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;e7Vm&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;0NKj&quot;&gt;&lt;span&gt;一般而言，大部分企业都会有很多离线的 Hive 或者 Spark 任务跑在 YARN 集群上，如何将大量的历史任务平滑地迁移到 Kubernetes 上也是让人头疼的问题。Kyuubi 的服务化方案，可以通过服务发现机制，提供负载均衡节点，在服务高可用的基础上，来平滑地过渡。对于个别异常迁移任务，我们也可以方便地 Rollback 到 老集群上保障执行，也留给我们定位问题的时间和空间。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;9Hbx&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;VEmL&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8056460369163952&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u61OjQroUM3yWtGlvK19F4jKrHFTIibvlhvjsicW3uq5Ogc9vSF18dD8jZBqN4h4ibo1qfab3taKjFtmbBM5ec1fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1842&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Vtot&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h3 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jkpRFozzRU6wSGcvLr4mBmDzYNoWZ1J3BibfoABBzYeM9bhLk3okITVpqLn3jrjIdC2Xgl8o9dRBDI133ZXujicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/s4NNO8erqh93tkgNuf52MaBWaFacs3B7RIQqvsjPalmia3NKoz8KAtjW0k9fXQXr6TCzoprVVNt5FlbwkC0luMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;32&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;性能对比&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;6zQz&quot;&gt;&lt;span&gt;从原理上，无论是 Kubernetes 和 YARN 都只起资源调度的作用，不涉及计算模型和任务调度的变化，所以在性能上的差异应该是不显著的。从部署架构上，Spark on Kubernetes 一般选择存算分离的架构，而 YARN 集群一般和 HDFS 耦合在一起，前者会在读写 HDFS 时丧失“数据本地性”，这个由于网络带宽因素影响可能会影响性能。从存算耦合架构诞生之初经过10年左右的发展，随着网络的性能增长，各种高效的列式存储格式及压缩算法的加持，这点影响微乎其微。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;RsY4&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Terasort 基准测试 (By Myself)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;H2OJ&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;MAez&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38672768878718533&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u61OjQroUM3yWtGlvK19F4jKrHFTIibvlQxNz4I5WPDMuelNpa1gyvtoVzqmhtv6ficcWFmu4hsSgshxPNGGu5vQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1748&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;OaOF&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;EXW7&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;TPC-DS 基准测试（By Data mechanics）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;k3fn&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6009070294784581&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u61OjQroUM3yWtGlvK19F4jKrHFTIibvlIlxs1YjpVibibSKXUhIyVeZAGens89o5v2vibMXkhMoM8lsHOsG6SAKLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;441&quot;/&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;TPC-DS 基准测试（By  AWS）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;MWXj&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;wRhP&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46153846153846156&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u61OjQroUM3yWtGlvK19F4jKrHFTIibvl441FDqGydv3sDd3okcXpJCt7moTJP2KxibMeVscbiaNNyVGDatIwIqVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;650&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;BKwq&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;cQWI&quot;&gt;&lt;span&gt;虽然这些测试结果都不是来自 TPC-DS 组织认证的官方数据，但从测试结果来自不同的机构这个因素上也有足够的说服力。我们屏蔽一些部署架构上的影响，两者的性能差距可以说是基本不存在的。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;f3hT&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h3 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jkpRFozzRU6wSGcvLr4mBmDzYNoWZ1J3BibfoABBzYeM9bhLk3okITVpqLn3jrjIdC2Xgl8o9dRBDI133ZXujicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/s4NNO8erqh93tkgNuf52MaBWaFacs3B7RIQqvsjPalmia3NKoz8KAtjW0k9fXQXr6TCzoprVVNt5FlbwkC0luMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;32&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;成本对比&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;将 Spark 作业迁移至 Kubernetes 集群上，可以实现离线和在线业务的混合部署，利用两种业务特征的对计算资源潮汐错峰效应，极致的情况下光靠“离/在混部”就可实现 IT 总有用成本（TCO）的 50%的节省。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;34PX&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;nqiR&quot;&gt;&lt;span&gt;另一方面，企业数据平台在&lt;span&gt;不同的发展时期，集群所规划的存储算力比不同，导致服务器选型困难，而&lt;/span&gt;从存算分离的的角度，计算集群和存储集群分开扩容，也可以更加合理地控制 IT 成本。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Jags&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;9Fj6&quot;&gt;&lt;span&gt;此外，Spark on Kubernetes 通过 Pod 分配 Executor 模式，执行线程数（spark.executor.cores）和 Pod 的 request cpu 是分离的，可以更加细粒度的在作业级别对控制，来提升计算资源的使用效率。在我们网易的实际实践中，在不影响整体计算性能的条件下，Spark on Kubernetes 作业整体上 cpu 可以达到超 200%的超售比。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;UrGI&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;B5UM&quot;&gt;&lt;span&gt;当然，Spark on Kubernetes 在动态资源分配（Dynamic Resource Allocation）这个特性上的缺失或者不完善，可能会造成 Spark 占着资源不使用的情况。由于这个特性直接依赖外置的 Shuffle Service 服务来实现，这时候可能就需要自行去搭建 Remote/External Shuffle Service 服务。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;hQQA&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;u107&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185185185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u61OjQroUM3yWtGlvK19F4jKrHFTIibvlEcpibDAgbDEWjDUB4Vc5tDnzBUoHMGzPyWicqChITk4836uKbKMIsORw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;891&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;fnv6&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;P14y&quot;&gt;&lt;span&gt;在 Spark on Kubernetes 场景下，基于 RSS/ESSn可实现临时存储与计算过程相互解耦。第一，消除本地存储依赖，使得计算节点可在异构节点上动态伸缩，在面对复杂物理或者虚拟环境时更加灵活的动态扩展。第二，离散式本地存储优化为集中式服务化存储，存储容量所有计算节点共享，提高存储资源利用率。第三，降低磁盘故障率，动态地减少标记为不可用计算节点，提升计算集群整体资源利用率。最后，转移临时存储的血缘关系，使其不再由 Executor Pod 计算节点维护，使得闲置 Executor Pod 可以被及时地释放回资源池，提升集群资源利用率。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;xCH6&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h3 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jkpRFozzRU6wSGcvLr4mBmDzYNoWZ1J3BibfoABBzYeM9bhLk3okITVpqLn3jrjIdC2Xgl8o9dRBDI133ZXujicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/s4NNO8erqh93tkgNuf52MaBWaFacs3B7RIQqvsjPalmia3NKoz8KAtjW0k9fXQXr6TCzoprVVNt5FlbwkC0luMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;32&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;其他对比&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td guid=&quot;paOV&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;0&quot; col=&quot;0&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td guid=&quot;YROA&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;0&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;Spark on k8s&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;IkSQ&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;0&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;Spark on yarn&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td guid=&quot;KS0O&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;1&quot; col=&quot;0&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;何时支持&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;1bZo&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;1&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Spark 2.3.0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;NEPo&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;1&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;Spark 0.6.0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td guid=&quot;Cjd0&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;2&quot; col=&quot;0&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;大规模生产&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;IRDl&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;2&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;较少&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;s2EO&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;2&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;主流&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td guid=&quot;hJyr&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;3&quot; col=&quot;0&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;调度器架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;2xqd&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;3&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;共享状态调度架构&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;1X5y&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;3&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;集中式调度器&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td guid=&quot;xbCb&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;4&quot; col=&quot;0&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;社区活跃度&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;jkqV&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;4&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;活跃&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;KpsU&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;4&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;不活跃&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td guid=&quot;HdTJ&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;5&quot; col=&quot;0&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;最小调度单位&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;qInH&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;5&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;CvRS&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;5&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;Container&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td guid=&quot;u9eh&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;6&quot; col=&quot;0&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;日志聚合&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;2t2l&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;6&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;无&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;lDRq&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;6&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;有&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td guid=&quot;XltZ&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;7&quot; col=&quot;0&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Spark Web UI&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;Br1t&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;7&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;port-forward&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;pESi&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;7&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td guid=&quot;55AT&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;8&quot; col=&quot;0&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;多租户&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;ZEDq&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;8&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Namespace&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;QBOF&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;8&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;queue&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td guid=&quot;0JUh&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;9&quot; col=&quot;0&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据本地性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;RbaF&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;9&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;HDFS 读写 - 差&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Shuffle 读写 – 好&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;u4Ii&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;9&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;HDFS 读写 – 理论上好，生产上一般&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Shuffle 读写 - 好&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td guid=&quot;94cX&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;10&quot; col=&quot;0&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;HDFS集成流畅度&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;m6DF&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;10&quot; col=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Spark 3.0及以上&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td guid=&quot;dvqP&quot; autocorrect=&quot;off&quot; autocomplete=&quot;off&quot; spellcheck=&quot;false&quot; row=&quot;10&quot; col=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;完备&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;yaxN&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.2142857142857142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CzXmD0LHvdj3nVY9EDHLhpH4VvJeiaia0BjslvVI4lWY8dcyW3FMvredibDW5kTgOSp10IDoUmoS4yNgZpNRmQFoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;28&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0434782608695652&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibl6u6nJ01g9icia42icDbWWvO2ObicnIUHjwVZt9x505utkfDbtc8ea4QIia3icQWibzwwYbPKwNDb83Jlk6bYGcQ2zaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;46&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;LOGT&quot;&gt;&lt;span&gt;Spark on Kubernetes 自 2018年初随 2.3.0 版本发布以来，不知不觉已经有四个年头了，而到现在的 3.2 版本，也已经历经 5 个大版本了。在社区和用户的不断打磨下已经成为了非常成熟的特性了。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;WeZz&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;JhOY&quot;&gt;&lt;span&gt;随着 Apache Spark 开源生态不断发展，如 Apache Kyuubi 等，无论是哪个调度框架，易用性上都得到大幅提升。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;YsiJ&quot; ql-global=&quot;true&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;laDi&quot;&gt;&lt;span&gt;IT 基础设施的总拥有成本（Total Cost of Ownership, TCO） 逐年上涨，一直是困扰很多企业的难题。Spark + Kubernetes 的组合的灵活性和超高性价比，给了我们更多想象的空间。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;rToV&quot; ql-global=&quot;true&quot;&gt;&lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2142857142857142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CzXmD0LHvdj3nVY9EDHLhpH4VvJeiaia0BjslvVI4lWY8dcyW3FMvredibDW5kTgOSp10IDoUmoS4yNgZpNRmQFoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;28&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0434782608695652&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibl6u6nJ01g9icia42icDbWWvO2ObicnIUHjwVZt9x505utkfDbtc8ea4QIia3icQWibzwwYbPKwNDb83Jlk6bYGcQ2zaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;46&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;参考资料&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://issues.apache.org/jira/browse/SPARK-18278&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://issues.apache.org/jira/browse/SPARK-33005&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://www.youtube.com/watch?v=xX2z8ndp_zg&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://www.youtube.com/watch?v=hcGdW_6xTKo&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://ieeexplore.ieee.org/document/9384578&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://github.com/GoogleCloudPlatform/spark-on-k8s-operator&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://github.com/apache/incubator-kyuubi&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://aws.amazon.com/cn/blogs/containers/optimizing-spark-performance-on-kubernetes/&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c2a3b21bfeda3915e1edc0c17d812a55</guid>
<title>一文彻底搞懂前端沙箱</title>
<link>https://toutiao.io/k/5p2gbvz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1&gt;什么是“沙箱”&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;沙箱（Sandbox）&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;也称作：“沙箱/沙盒/沙盘”。沙箱是一种安全机制，为运行中的程序提供隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。沙箱能够安全的执行不受信任的代码，且不影响外部实际代码影响的独立环境。&lt;/p&gt;&lt;h1&gt;有哪些动态执行脚本的场景？&lt;/h1&gt;&lt;p&gt;在一些应用中，我们希望给用户提供插入自定义逻辑的能力，比如 Microsoft 的 Office 中的 VBA，比如一些游戏中的 lua 脚本，FireFox 的「油猴脚本」，能够让用户发在可控的范围和权限内发挥想象做一些好玩、有用的事情，扩展了能力，满足用户的个性化需求。&lt;/p&gt;&lt;p&gt;大多数都是一些客户端程序，在一些在线的系统和产品中也常常也有类似的需求，事实上，在线的应用中也有不少提供了自定义脚本的能力，比如 Google Docs 中的 Apps Script，它可以让你使用 JavaScript 做一些非常有用的事情，比如运行代码来响应文档打开事件或单元格更改事件，为公式制作自定义电子表格函数等等。&lt;/p&gt;&lt;p&gt;与运行在「用户电脑中」的客户端应用不同，用户的自定义脚本通常只能影响用户自已，而对于在线的应用或服务来讲，有一些情况就变得更为重要，比如「安全」，用户的「自定义脚本」必须严格受到限制和隔离，即不能影响到宿主程序，也不能影响到其它用户。&lt;/p&gt;&lt;p&gt;另外，有一些牵扯「模板化」的前端框架，如Vue.js、Venom.js等都会用到动态代码执行。&lt;/p&gt;&lt;h1&gt;JavaScript中的沙箱实现&lt;/h1&gt;&lt;h2&gt;零、几个基础知识&lt;/h2&gt;&lt;h3&gt;什么是constructor&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;JavaScript中constructor属性指向创建当前对象的构造函数，该属性是存在原型里的，且是不可靠的 &lt;span&gt;JavaScript中constructor属性&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;test&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; obj &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;test&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;hasOwnProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;constructor&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;__proto__&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;hasOwnProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;constructor&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;__proto__&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; test&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;hasOwnProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;constructor&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;/** constructor是不可靠的 */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; foo &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true，可以看出不是Foo了&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;constructor也是一种用于创建和初始化&lt;span&gt;class&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;创建的对象的特殊方法 &lt;span&gt;Class构造方法&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;几个典型的constructor：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;async&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;){})().&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Promise&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// 浏览器环境下&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// node环境下&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;global&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;JS Proxy getPrototypeOf()&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;handler.getPrototypeOf()&lt;/code&gt;是一个代理方法，当读取代理对象的原型时，该方法就会被调用。语法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// target 被代理的目标对象。&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当 getPrototypeOf 方法被调用时，this 指向的是它所属的处理器对象，getPrototypeOf 方法的返回值必须是一个对象或者 null。&lt;/p&gt;&lt;p&gt;在 JavaScript 中，有下面这五种操作（方法/属性/运算符）可以触发 JS 引擎读取一个对象的原型，也就是可以触发 getPrototypeOf() 代理方法的运行：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;Object.getPrototypeOf()&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;Reflect.getPrototypeOf()&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;&lt;strong&gt;proto&lt;/strong&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;Object.prototype.isPrototypeOf()&lt;sup&gt;[8]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;instanceof&lt;sup&gt;[9]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果遇到了下面两种情况，JS 引擎会抛出 &lt;span&gt;TypeError&lt;sup&gt;[10]&lt;/sup&gt;&lt;/span&gt; 异常：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;getPrototypeOf() 方法返回的不是对象也不是 null。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;目标对象是不可扩展的，且 getPrototypeOf() 方法返回的原型不是&lt;strong&gt;目标对象本身的原型&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;基本用法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; obj &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; proto &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; handler &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; obj&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; handler&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; proto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; handler&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// obj是被代理的对象，也就是handler.getPrototypeOf的target参数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; proto&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;5 种触发 getPrototypeOf 代理方法的方式：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; obj &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Array&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Array&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;Reflect&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Array&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    p&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;__proto__&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Array&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;               &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;Array&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;isPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt;              &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    p &lt;/span&gt;&lt;span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Array&lt;/span&gt;&lt;/span&gt;&lt;span&gt;                             &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;两种异常的情况：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;// getPrototypeOf() 方法返回的不是对象也不是 null&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; obj &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;foo&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// TypeError: &quot;foo&quot; is not an object or null&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// 目标对象是不可扩展的，且 getPrototypeOf() 方法返回的原型不是目标对象本身的原型&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; obj &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;preventExtensions&lt;/span&gt;&lt;/span&gt;&lt;span&gt;({});&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// obj不可扩展&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// TypeError: expected same prototype value&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// 如果对上面的代码做如下的改造就没问题&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; obj &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;preventExtensions&lt;/span&gt;&lt;/span&gt;&lt;span&gt;({});&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// obj不可扩展&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// target就是上面的obj&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; obj&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;__proto__&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 返回的是目标对象本身的原型&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getPrototypeOf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 不报错&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;一、跟浏览器宿主环境一致的沙箱实现&lt;/h2&gt;&lt;h3&gt;构建闭包环境&lt;/h3&gt;&lt;p&gt;我们知道在 JavaScript 中的作用域（scope）只有&lt;strong&gt;全局作用域&lt;/strong&gt;（global scope）、&lt;strong&gt;函数作用域&lt;/strong&gt;（function scope）以及从 ES6 开始才有的&lt;strong&gt;块级作用域&lt;/strong&gt;（block scope）。如果要将一段代码中的变量、函数等的定义隔离出来，受限于 JavaScript 对作用域的控制，只能将这段代码封装到一个 Function 中，通过使用 function scope 来达到作用域隔离的目的。也因为需要这种使用函数来达到作用域隔离的目的方式，于是就有 IIFE（立即调用函数表达式），这是一个被称为“自执行匿名函数”的设计模式。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;){&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;})();&lt;/span&gt;&lt;span&gt;&lt;span&gt;// 无法从外部访问变量 &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 抛出错误：&quot;Uncaught ReferenceError: a is not defined&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当函数变成立即执行的函数表达式时，表达式中的变量不能从外部访问，它拥有独立的词法作用域。不仅避免了外界访问 IIFE 中的变量，而且又不会污染全局作用域，弥补了 JavaScript 在 scope 方面的缺陷。一般常见于写插件和类库时，如 JQuery 当中的沙箱模式&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt;&lt;span&gt; jQuery &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;selector&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; context&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; jQuery&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;fn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;init&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;selector&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; context&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    jQuery&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;fn&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; jQuery&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;//原型上的方法，即所有jQuery对象都可以共享的方法和属性&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    jQuery&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;fn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;init&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; jQuery&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;fn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;jQeury&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;$&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; jQuery&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//如果需要在外界暴露一些属性或者方法，可以将这些属性和方法加到window全局对象上去&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;})(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当将 IIFE 分配给一个变量，不是存储 IIFE 本身，而是存储 IIFE 执行后返回的结果。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; result &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; name &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;张三&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;})();&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// &quot;张三&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;原生浏览器对象的模拟&lt;/h3&gt;&lt;p&gt;模拟原生浏览器对象的目的是为了防止闭包环境，操作原生对象，篡改污染原生环境，完成模拟浏览器对象之前我们需要先关注几个不常用的 API。&lt;/p&gt;&lt;h4&gt;eval&lt;/h4&gt;&lt;p&gt;eval 函数可将字符串转换为代码执行，并返回一个或多个值：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; b &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;eval&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;({name:&#x27;张三&#x27;})&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于 eval 执行的代码可以访问闭包和全局范围，因此就导致了代码注入的安全问题，因为代码内部可以沿着作用域链往上找，篡改全局变量，这是我们不希望的。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;eval&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// true &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;补充几个点：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;性能&amp;amp;安全问题，一般不建议在实际业务代码中引入eval&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;辅助异步编程框架的windjs大量采用eval的写法来辅助编程，引发争议 &lt;span&gt;专访 Wind.js 作者老赵（上）：缘由、思路及发展&lt;sup&gt;[11]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;浏览器环境下，(0, eval)()比eval()的性能要好「目前已经不是了」&lt;span&gt;(0, eval)(‘this’)&lt;sup&gt;[12]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; times &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; time1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;直接引用&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; time2 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;间接引用&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt; times1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; times&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;time&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;while&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;times1&lt;/span&gt;&lt;span&gt;--)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;eval&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;timeEnd&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt; times2 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; times&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;time&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time2&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;while&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;times2&lt;/span&gt;&lt;span&gt;--)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;eval&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;timeEnd&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time2&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;new Function&lt;/h4&gt;&lt;p&gt;Function构造函数创建一个新的 Function 对象。直接调用这个构造函数可用于动态创建函数。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;([&lt;/span&gt;&lt;span&gt;arg1&lt;/span&gt;&lt;span&gt;[,&lt;/span&gt;&lt;span&gt; arg2&lt;/span&gt;&lt;span&gt;[,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;argN&lt;/span&gt;&lt;span&gt;]],]&lt;/span&gt;&lt;span&gt; functionBody&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;arg1, arg2, ... argN&lt;/strong&gt; 被函数使用的参数的名称必须是合法命名的。参数名称是一个有效的 JavaScript 标识符的字符串，或者一个用逗号分隔的有效字符串的列表，例如“×”，“theValue”，或“a,b”。&lt;/p&gt;&lt;p&gt;补充几个点：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;new Function()性能一般比eval要好，很多用到这块的前端框架都是用new Function()实现的，比如：Vue.js&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;打开浏览器控制台后，new Function()的性能要慢一倍以上&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;functionBody&lt;/strong&gt;&lt;br/&gt;一个含有包括函数定义的 JavaScript 语句的字符串。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; sum &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;a&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;b&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;return a + b&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;sum&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;span&gt;&lt;span&gt;//3 &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样也会遇到和 eval 类似的的安全问题和相对较小的性能问题。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt; a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt; a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;return a;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 这里的 a 指向最上面全局作用域内的 1&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; f &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与 eval 不同的是 Function 创建的函数只能在全局作用域中运行，它无法访问局部闭包变量，它们总是被创建于全局环境，因此在运行时它们只能访问全局变量和自己的局部变量，不能访问它们被 Function 构造器创建时所在的作用域的变量。new Function()是 eval()更好替代方案。它具有卓越的性能和安全性，但仍没有解决访问全局的问题。&lt;br/&gt;&lt;/p&gt;&lt;h4&gt;with&lt;/h4&gt;&lt;p&gt;with 是 JavaScript 中一个关键字，扩展一个语句的作用域链。它允许半沙盒执行。那什么叫半沙盒？语句将某个对象添加到作用域链的顶部，如果在沙盒中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。如果沒有同名的属性，则将拋出 ReferenceError。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;// 严格模式下以下代码运行会有问题&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;o&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;with&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;//a=5; &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        c&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        d&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 0,1,2,3 //每个变量首先被认为是一个局部变量，如果局部变量与 obj 对象的某个属性同名，则这个局部变量会指向 obj 对象属性。&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; f &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;a&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 2,3 c、d被泄露到window对象上&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;究其原理，with在内部使用in运算符。对于块内的每个变量访问，它都在沙盒条件下计算变量。如果条件是 true，它将从沙盒中检索变量。否则，就在全局范围内查找变量。但是 with 语句使程序在查找变量值时，都是先在指定的对象中查找。所以对于那些本来不是这个对象的属性的变量，查找起来会很慢，对于有性能要求的程序不适合（JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行过程中快速找到标识符）。with 也会导致数据泄漏(在非严格模式下，会自动在全局作用域创建一个全局变量)&lt;/p&gt;&lt;h4&gt;in 运算符&lt;/h4&gt;&lt;p&gt;in 运算符能够检测左侧操作数是否为右侧操作数的成员。其中，左侧操作数是一个字符串，或者可以转换为字符串的表达式，右侧操作数是一个对象或数组。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; o &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    a &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    b &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;a&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span&gt; o&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;b&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span&gt; o&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;c&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span&gt; o&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;valueOf&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span&gt; o&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;//返回true，继承Object的原型方法&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;constructor&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span&gt; o&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;//返回true，继承Object的原型属性&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;with + new Function&lt;/h4&gt;&lt;p&gt;配合 with 用法可以稍微限制沙盒作用域，先从当前的 with 提供对象查找，但是如果查找不到依然还能从更上面的作用域获取，污染或篡改全局环境。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    src &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;with (sandbox) {&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; src &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;sandbox&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; str &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    let a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    window&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;张三&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;// 打印：1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span&gt;)({});&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;&lt;span&gt;//&#x27;张三&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，基于上面的方案都多多少少存在一些安全问题：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;eval 是全局对象的一个函数属性，执行的代码拥有着和应用中其它正常代码一样的的权限，它能访问「执行上下文」中的局部变量，也能访问所有「全局变量」，在这个场景下，它是一个非常危险的函数&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;使用 Function 构造器生成的函数，并不会在创建它的上下文中创建闭包，一般在全局作用域中被创建。当运行函数的时候，只能访问自己的本地变量和全局变量，不能访问 Function 构造器被调用生成的上下文的作用域&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;with 一样的问题，它首先会在传入的对象中查找对应的变量，如果找不到就会往更上层的全局作用域去查找，所以也避免不了污染或篡改全局环境&lt;/span&gt;&lt;/p&gt;&lt;p&gt;那有没有更安全一些的沙箱环境实现呢？&lt;/p&gt;&lt;h4&gt;基于 Proxy 实现的沙箱(ProxySandbox)&lt;/h4&gt;&lt;p&gt;ES6 Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，属于一种“元编程”（meta programming）&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;evalute&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  sandbox &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; sandbox &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; fn &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;sandbox&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)}`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; proxy &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;has&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 让动态执行的代码认为属性已存在&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;fn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;evalute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;1+2&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;evalute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;console.log(1)&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// Cannot read property &#x27;log&#x27; of undefined&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们知道无论 eval 还是 function，执行时都会把作用域一层一层向上查找，如果找不到会一直到 global，那么利用 Proxy 的原理就是，让执行了代码在 sandobx 中找的到，以达到「防逃逸」的目的。&lt;/p&gt;&lt;p&gt;我们前面提到with在内部使用in运算符来计算变量，如果条件是 true，它将从沙盒中检索变量。理想状态下没有问题，但也总有些特例独行的存在，比如 Symbol.unscopables。&lt;/p&gt;&lt;p&gt;Symbol 对象的 Symbol.unscopables 属性，指向一个对象。该对象指定了使用 with 关键字时，哪些属性会被 with 环境排除。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Array&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Symbol&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;unscopables&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// {//   copyWithin: true,//   entries: true,//   fill: true,//   find: true,//   findIndex: true,//   keys: true// }Object.keys(Array.prototype[Symbol.unscopables])&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// [&#x27;copyWithin&#x27;, &#x27;entries&#x27;, &#x27;fill&#x27;, &#x27;find&#x27;, &#x27;findIndex&#x27;, &#x27;keys&#x27;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;上面代码说明，数组有 6 个属性，会被 with 命令排除。&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3087431693989071&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qnAibK5Aia2dXqibZdYwAr4IgHiasg0EGUj32R1GPibdPiaGvzydMRAOpp1zGkWzeiaoXnAqpOSvsGFriaiaIctsyUibrEWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;由此我们的代码还需要修改如下：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;code&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    code &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;with (sandbox) {&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; code &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; fn &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;sandbox&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; code&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; sandboxProxy &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&lt;span&gt;has&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&lt;span&gt;get&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;key &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Symbol&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;unscopables&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; target&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;})&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;fn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;sandboxProxy&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; test &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;a&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;){&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;11111&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; code &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;log(); console.log(a)&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 1111,TypeError: Cannot read property &#x27;log&#x27; of undefinedsandbox(code)(test)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Symbol.unscopables 定义对象的不可作用属性。Unscopeable 属性永远不会从 with 语句中的沙箱对象中检索，而是直接从闭包或全局范围中检索。&lt;br/&gt;&lt;/p&gt;&lt;h4&gt;快照沙箱(SnapshotSandbox)&lt;/h4&gt;&lt;p&gt;快照沙箱实现来说比较简单，主要用于不支持 Proxy 的低版本浏览器，原理是基于diff来实现的,在子应用激活或者卸载时分别去通过快照的形式记录或还原状态来实现沙箱，snapshotSandbox 会污染全局 window。&lt;br/&gt;我们看下 &lt;span&gt;qiankun&lt;sup&gt;[13]&lt;/sup&gt;&lt;/span&gt; 的 snapshotSandbox 的源码，这里为了帮助理解做部分精简及注释。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; callbackFn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; prop &lt;/span&gt;&lt;span&gt;&lt;span&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span&gt; obj&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;hasOwnProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&lt;span&gt;callbackFn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;br/&gt;&lt;span&gt; * 基于 diff 方式实现的沙箱，用于不支持 Proxy 的低版本浏览器&lt;/span&gt;&lt;br/&gt;&lt;span&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;SnapshotSandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;Snapshot&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sandboxRunning&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;windowSnapshot&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;modifyPropsMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;active&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;//激活&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;active&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 记录当前快照&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;windowSnapshot&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;windowSnapshot&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 恢复之前的变更&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;keys&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;modifyPropsMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;&lt;span&gt;forEach&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;p&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;modifyPropsMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sandboxRunning&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;//还原&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;inactive&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;modifyPropsMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;windowSnapshot&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;])&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 记录变更，恢复环境&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;modifyPropsMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;              &lt;/span&gt;&lt;br/&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;windowSnapshot&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sandboxRunning&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt; sandbox &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;SnapshotSandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;//test&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;张三&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;age&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;18&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;age&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//    张三,18&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    sandbox&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;inactive&lt;/span&gt;&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//    还原&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;age&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//    undefined,undefined&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    sandbox&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;active&lt;/span&gt;&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//    激活&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;age&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//    张三,18&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;})(&lt;/span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;legacySandBox&lt;/h4&gt;&lt;p&gt;qiankun 框架 singular 模式下的 proxy 沙箱实现，为了便于理解，这里做了部分代码的精简和注释。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;//legacySandBox&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; callableFnCacheMap &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;WeakMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;isCallable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;fn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;callableFnCacheMap&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;has&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;fn&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; naughtySafari &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;document&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;all&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;function&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;document&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;all&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;undefined&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; callable &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; naughtySafari &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;/span&gt;&lt;span&gt; fn &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;function&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;/span&gt;&lt;span&gt; fn &lt;/span&gt;&lt;span&gt;!==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;undefined&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;/span&gt;&lt;span&gt; fn &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;function&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;callable&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    callableFnCacheMap&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;set&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;fn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; callable&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; callable&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;isPropConfigurable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; prop&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; descriptor &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; prop&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; descriptor &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; descriptor&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;configurable&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;setWindowProp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; toDelete&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;value &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; toDelete&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;isPropConfigurable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; prop&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;/span&gt;&lt;span&gt; prop &lt;/span&gt;&lt;span&gt;!==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;symbol&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;defineProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; prop&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;writable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;configurable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;getTargetValue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    仅绑定 isCallable &amp;amp;&amp;amp; !isBoundedFunction &amp;amp;&amp;amp; !isConstructable 的函数对象，如 window.console、window.atob 这类。目前没有完美的检测方式，这里通过 prototype 中是否还有可枚举的拓展方法的方式来判断&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    @warning 这里不要随意替换成别的判断方式，因为可能触发一些 edge case（比如在 lodash.isFunction 在 iframe 上下文中可能由于调用了 top window 对象触发的安全异常）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;isCallable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;&lt;span&gt;isBoundedFunction&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;&lt;span&gt;isConstructable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; boundValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;bind&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;call&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; target&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; key &lt;/span&gt;&lt;span&gt;&lt;span&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      boundValue&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;hasOwnProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;prototype&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;boundValue&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;hasOwnProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;prototype&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;defineProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;boundValue&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;prototype&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;enumerable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;writable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; boundValue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;br/&gt;&lt;span&gt; * 基于 Proxy 实现的沙箱&lt;/span&gt;&lt;br/&gt;&lt;span&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;SingularProxySandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;/** 沙箱期间新增的全局变量 */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  addedPropsMapInSandbox &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;/** 沙箱期间更新的全局变量 */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  modifiedPropsOriginalValueMapInSandbox &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;/** 持续记录更新的(新增和修改的)全局变量的 map，用于在任意时刻做 snapshot */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  currentUpdatedPropsValueMap &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  proxy&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  type &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;LegacyProxy&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  sandboxRunning &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  latestSetProp &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;active&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(!&lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sandboxRunning&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;currentUpdatedPropsValueMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;forEach&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;setWindowProp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; v&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sandboxRunning&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;inactive&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;// console.log(&#x27; this.modifiedPropsOriginalValueMapInSandbox&#x27;, this.modifiedPropsOriginalValueMapInSandbox)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;// console.log(&#x27; this.addedPropsMapInSandbox&#x27;, this.addedPropsMapInSandbox)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;//删除添加的属性，修改已有的属性&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;modifiedPropsOriginalValueMapInSandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;forEach&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;setWindowProp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; v&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;addedPropsMapInSandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;forEach&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;setWindowProp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sandboxRunning&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      addedPropsMapInSandbox&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      modifiedPropsOriginalValueMapInSandbox&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      currentUpdatedPropsValueMap&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; rawWindow &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;//Object.create(null)的方式，传入一个不含有原型链的对象&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; fakeWindow &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; proxy &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;fakeWindow&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;set&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sandboxRunning&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(!&lt;/span&gt;&lt;span&gt;rawWindow&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;hasOwnProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            addedPropsMapInSandbox&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;set&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(!&lt;/span&gt;&lt;span&gt;modifiedPropsOriginalValueMapInSandbox&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;has&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 如果当前 window 对象存在该属性，且 record map 中未记录过，则记录该属性初始值&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; originalValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; rawWindow&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            modifiedPropsOriginalValueMapInSandbox&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;set&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; originalValue&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;          currentUpdatedPropsValueMap&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;set&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 必须重新设置 window 对象保证下次 get 时能拿到已更新的数据&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          rawWindow&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;latestSetProp&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 在 strict-mode 下，Proxy 的 handler.set 返回 false 会抛出 TypeError，在沙箱卸载的情况下应该忽略错误&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;get&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;//避免使用 window.window 或者 window.self 逃离沙箱环境，触发到真实环境&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;top&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;parent&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;window&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;self&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; proxy&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; rawWindow&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;getTargetValue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;rawWindow&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;has&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//返回boolean&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;&lt;span&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span&gt; rawWindow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; descriptor &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;rawWindow&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 如果属性不作为目标对象的自身属性存在，则不能将其设置为不可配置&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;descriptor &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;descriptor&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;configurable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          descriptor&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;configurable&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; descriptor&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; proxy&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt; sandbox &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;SingularProxySandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;张三&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;age&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;18&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;男&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;age&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//    张三,18,男&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  sandbox&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;inactive&lt;/span&gt;&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//    还原&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;age&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//    张三,undefined,undefined&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  sandbox&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;active&lt;/span&gt;&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//    激活&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;age&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&lt;span&gt;window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//    张三,18,男&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;})(&lt;/span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;//test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;legacySandBox 还是会操作 window 对象，但是他通过激活沙箱时还原子应用的状态，卸载时还原主应用的状态来实现沙箱隔离，同样会对 window 造成污染，但是性能比快照沙箱好，不用遍历 window 对象。&lt;/p&gt;&lt;h4&gt;proxySandbox(多例沙箱)&lt;/h4&gt;&lt;p&gt;在 qiankun 的沙箱 proxySandbox 源码里面是对 fakeWindow 这个对象进行了代理，而这个对象是通过 createFakeWindow 方法得到的，这个方法是将 window 的 document、location、top、window 等等属性拷贝一份，给到 fakeWindow。&lt;/p&gt;&lt;p&gt;源码展示：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;createFakeWindow&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;global&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Window&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;// map always has the fastest performance in has check scenario&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;// see https://jsperf.com/array-indexof-vs-set-has/23&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; propertiesWithGetter &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;PropertyKey&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; boolean&lt;/span&gt;&lt;span&gt;&amp;gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; fakeWindow &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;as&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;FakeWindow&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;   copy the non-configurable property of global to fakeWindow&lt;/span&gt;&lt;br/&gt;&lt;span&gt;   see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;   &amp;gt; A property cannot be reported as non-configurable, if it does not exists as an own property of the target object or if it exists as a configurable own property of the target object.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getOwnPropertyNames&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;global&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;p&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; descriptor &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;global&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;descriptor&lt;/span&gt;&lt;span&gt;?.&lt;/span&gt;&lt;span&gt;&lt;span&gt;configurable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;})&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;forEach&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;p&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; descriptor &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;global&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;descriptor&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; hasGetter &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;hasOwnProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;call&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;descriptor&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;get&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         make top/self/window property configurable and writable, otherwise it will cause TypeError while get trap return.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/get&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &amp;gt; The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable data property.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          p &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;top&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          p &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;parent&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          p &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;self&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          p &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;window&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;process&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;env&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;NODE_ENV&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;test&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;mockTop&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;mockSafariTop&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          descriptor&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;configurable&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           The descriptor of window.window/window.top/window.self in Safari/FF are accessor descriptors, we need to avoid adding a data descriptor while it was&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           Example:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            Safari/FF: Object.getOwnPropertyDescriptor(window, &#x27;top&#x27;) -&amp;gt; {get: function, set: undefined, enumerable: true, configurable: false}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            Chrome: Object.getOwnPropertyDescriptor(window, &#x27;top&#x27;) -&amp;gt; {value: Window, writable: false, enumerable: true, configurable: false}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(!&lt;/span&gt;&lt;span&gt;hasGetter&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            descriptor&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;writable&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;hasGetter&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; propertiesWithGetter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;set&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;// freeze the descriptor to avoid being modified by zone.js&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;// see https://github.com/angular/zone.js/blob/a5fe09b0fac27ac5df1fa746042f96f05ccb6a00/lib/browser/define-property.ts#L71&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;rawObjectDefineProperty&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;fakeWindow&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;descriptor&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    fakeWindow&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    propertiesWithGetter&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;proxySandbox 由于是拷贝复制了一份 fakeWindow，不会污染全局 window，同时支持多个子应用同时加载。&lt;br/&gt;详细源码请查看&lt;span&gt;：proxySandbox&lt;sup&gt;[14]&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;二、Node.js中的沙箱实现&lt;/h2&gt;&lt;h3&gt;VM&lt;/h3&gt;&lt;p&gt;VM是 Node.js 默认提供的一个内建模块，VM 模块提供了一系列 API 用于在 V8 虚拟机环境中编译和运行代码。JavaScript 代码可以被编译并立即运行，或编译、保存然后再运行。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;vm&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; script &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;Script&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;m + n&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 先new一个脚本执行的容器实例&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; sandbox &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;n&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;};&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; context &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;createContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 实例化一个执行上下文&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; res &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; script&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;runInContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 运行&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 打印：3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行上这的代码就能拿到结果 3，同时，通过 vm.Script 还能指定代码执行的「最大毫秒数」，超过指定的时长将终止执行并抛出一个异常：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; script &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;Script&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;while(true){}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;50&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;....&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;err&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 执行超过了50ms会打印超时的 log&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;err&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;message&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的脚本执行将会失败，被检测到超时并抛出异常，然后被 Try Cache 捕获到并打出 log，但同时需要注意的是 vm.Script 的 timeout 选项「只针对同步代有效」，而不包括是异步调用的时间，比如&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; script &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;Script&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;setTimeout(()=&amp;gt;{},2000)&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;50&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述代码，并不是会在 50ms 后抛出异常，因为 50ms 上边的代码同步执行肯定完了，而 setTimeout 所用的时间并不算在内，也就是说 vm 模块没有办法对异步代码直接限制执行时间。我们也不能额外通过一个 timer 去检查超时，因为检查了执行中的 vm 也没有方法去中止掉。&lt;/p&gt;&lt;p&gt;另外，在 Node.js 通过 vm.runInContext 看起来似乎隔离了代码执行环境，但实际上却很容易「逃逸」出去。我们看下这个过程。&lt;/p&gt;&lt;p&gt;使用VM模块我们可以在独立的环境中运行不受信任的代码，这就意味着运行在沙箱里的代码不能访问Node进程了，对吗？&lt;/p&gt;&lt;p&gt;基本的使用示例代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&quot;use strict&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;vm&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; xyz &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;runInNewContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;let a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;welcome!&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// a&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们尝试访问进程&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&quot;use strict&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;vm&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; xyz &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;runInNewContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;process&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.34&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qnAibK5Aia2dXqibZdYwAr4IgHiasg0EGUj3aXRHatOvBcO18dB6JWFETCddlIuVxy4uFCQYTcsUBBlRnURiaZ3hQuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;“process is not defined”，所以默认情况下VM模块不能访问主进程，如果想要访问需要指定授权。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;看起来默认不能访问“process、require”等就满足需求了，但是真的就没有办法触及主进程并执行代码了？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;看下面的例子：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&quot;use strict&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;vm&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; xyz &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;runInNewContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;return this.process.env&#x27;&lt;/span&gt;&lt;span&gt;)()`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;在javascript中this指向它所属的对象，所以我们使用它时就已经指向了一个VM上下文之外的对象。那么访问this的.constructor 就返回 Object Constructor ，访问 Object Constructor 的 .constructor 返回 Function constructor 。&lt;br/&gt;Function constructor 就像javascript提供的最高函数，他可以访问全局，所以他能返回全局事物。Function constructor允许从字符串生成函数，从而执行任意代码。&lt;br/&gt;所以我们可以使用 Function constructor 返回主进程。关于 Function constructor 更多内容在&lt;span&gt;这里&lt;sup&gt;[15]&lt;/sup&gt;&lt;/span&gt;和&lt;span&gt;这里&lt;sup&gt;[16]&lt;/sup&gt;&lt;/span&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可以正常打印，也就是说顺利拿到了主进程的process，也就是上面所说的产生了「逃逸」。这招同样对突破Angular同样有效 —— &lt;span&gt;AngularJS 沙箱&lt;sup&gt;[17]&lt;/sup&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;再看下面的例子：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;vm&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; sandbox &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; script &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;Script&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;this.constructor.constructor(&quot;return process&quot;)().exit()&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; context &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;createContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;runInContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行上边的代码，宿主程序立即就会「退出」，sandbox 是在 VM 之外的环境创建的，需 VM 中的代码的 this 指向的也是 sandbox，那么&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;//this.constructor 就是外所的 Object 构建函数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;ObjConstructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;//ObjConstructor 的 constructor 就是外包的 Function&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;ObjConstructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;//创建一个函数，并执行它，返回全局 process 全局对象&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; process &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;return process&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;))();&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;//退出当前进程&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;process&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;没有人愿意用户一段脚本就能让应用挂掉吧。除了退出进程序之外，实际上还能干更多的事情。&lt;br/&gt;有个简单的方法就能避免通过 this.constructor 拿到 process，如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;vm&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;//创建一外无 proto 的空白对象作为 sandbox&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// const sandbox = {}; // 能通过this.constructor 拿到 process&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; sandbox &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 这样就能防止this.constructor 拿到 process&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; script &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;Script&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;this.constructor.constructor(&quot;return process&quot;)()&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; context &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;createContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; nodeProcess &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; script&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;runInContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;nodeProcess&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但还是有风险的，由于 JavaScript 本身的动态的特点，各种黑魔法防不胜防。事实 Node.js 的官方文档中也提到「 不要把 VM 当做一个安全的沙箱，去执行任意非信任的代码」。&lt;/p&gt;&lt;h3&gt;VM2&lt;/h3&gt;&lt;p&gt;在社区中有一些开源的模块用于运行不信任代码，例如 sandbox、vm2、jailed 等。相比较而言 vm2 对各方面做了更多的安全工作，相对安全些。「这也是为什么imageCook采用了该沙箱模块」&lt;/p&gt;&lt;p&gt;从 vm2 的官方 README 中可以看到，它基于 Node.js 内建的 VM 模块，来建立基础的沙箱环境，然后同时使用上了文介绍过的 ES6 的 Proxy 技术来防止沙箱脚本逃逸。&lt;/p&gt;&lt;p&gt;用同样的测试代码来试试 vm2：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;vm2&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;&lt;span&gt;run&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;this.constructor.constructor(&quot;return process&quot;)().exit()&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;如上代码，&lt;/span&gt;&lt;strong&gt;并没有成功结束掉宿主程序&lt;/strong&gt;&lt;span&gt;，vm2 官方 REAME 中说「vm2 是一个沙盒，可以在 Node.js 中安全的执行不受信任的代码」。&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.1784675072744908&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qnAibK5Aia2dXqibZdYwAr4IgHiasg0EGUj3N8RXMUft7hhTswOJQSLNYuBE2dZpS09b6rLI6YqOrqKhghKPibggJSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2062&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;然而，事实上我们还是可以干一些「坏」事情，比如：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;只要能干坏事情，就是不安全的&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;vm2&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;run&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;new Promise(()=&amp;gt;{})&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上边的代码将&lt;strong&gt;永远不会执行结束&lt;/strong&gt;，如同 Node.js 内建模块一样，vm2 的 timeout 对异步操作是无效的。同时，vm2 也不能额外通过一个 timer 去检查超时，因为它也没有办法将执行中的 vm 终止掉。这会一点点耗费完服务器的资源，让你的应用挂掉。&lt;/p&gt;&lt;p&gt;那么或许你会想，我们能不能在上边的 sandbox 中放一个假的 Promise 从而禁掉 Promise 呢？答案是能提供一个「假」的 Promise，但却没有办法完成禁掉 Promise，比如&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;vm2&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;sandbox&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Promise&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span/&gt;&lt;span&gt;){}}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;vm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;run&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;Promise = (async function(){})().constructor;new Promise(()=&amp;gt;{});&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到通过一行 Promise = (async function(){})().constructor 就可以轻松再次拿到 Promise 了。从另一个层面来看，况且或许有时我们还想让自定义脚本支持异步处理呢。&lt;/p&gt;&lt;p&gt;关于VM2还有更多新的和创新性的绕过 ——&lt;span&gt;更多逃逸&lt;sup&gt;[18]&lt;/sup&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;除了从沙箱逃逸，还可以使用 infinite while loop 创建无限循环拒绝服务。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;vm2&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}).&lt;/span&gt;&lt;span&gt;&lt;span&gt;run&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main&lt;/span&gt;&lt;span&gt;(){&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Proxy&lt;/span&gt;&lt;span&gt;({},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        getPrototypeOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            global&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;})`&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;Safeify&lt;sup&gt;[19]&lt;/sup&gt;&lt;/span&gt;：Node.js环境下建立一个更安全的沙箱&lt;/h3&gt;&lt;p&gt;通过上文的探究，我们并没有找到一个完美的方案在 Node.js 建立安全的隔离的沙箱。其中 vm2 做了不少处理，相对来讲算是较安全的方案了，但问题也很明显，比如&lt;strong&gt;异步不能检查超时&lt;/strong&gt;的问题以及&lt;strong&gt;和宿主程序在相同进程&lt;/strong&gt;的问题。&lt;/p&gt;&lt;p&gt;&lt;span&gt;没有进程隔离时，通过 VM 创建的 sanbox 大体是这样的&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7044534412955465&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qnAibK5Aia2dXqibZdYwAr4IgHiasg0EGUj3NzDTgz6FNGEq9Pl3CoqwB70JKrvMxN5nkUIiaYT6zZq91b8cCnvWV9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;988&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;那么，我们是不是可以尝试，将非受信代码，通过 vm2 这个模块隔离在一个独立的进程中执行呢？然后，执行超时时，直接将隔离的进程干掉，但这里我们需要考虑如下几个问题:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;通过进程池统一调度管理沙箱进程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如果来一个执行任务，创建一个进程，用完销毁，仅处理进程的开销就已经稍大了，并且也不能不设限的开新进程和宿主应用抢资源，那么，需要建一个进程池：&lt;br/&gt;前提：所有任务到来会创建一个 Script 实例，先进入一个 pending 队列，然后直接将 script 实例的 defer 对象返回，调用处就能 await 执行结果了&lt;br/&gt;然后：由 sandbox master 根据工程进程的空闲程序来调度执行，master 会将 script 的执行信息，包括重要的 ScriptId，发送给空闲的 worker，worker 执行完成后会将「结果 + script 信息」回传给 master，master 通过 ScriptId 识别是哪个脚本执行完毕了，就是结果进行 resolve 或 reject 处理。&lt;/p&gt;&lt;p&gt;这样，通过「进程池」既能降低「&lt;strong&gt;进程来回创建和销毁的开销&lt;/strong&gt;」，也能确保不过度抢占宿主资源；同时，在异步操作超时，还能将工程进程直接杀掉；同时，master 将发现一个工程进程挂掉，会立即创建替补进程。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;处理的数据和结果公开给沙箱的方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;进程间如何通讯，需要「动态代码」操作数据后可以直接序列化然后通过 IPC 发送给隔离 Sandbox 进程，执行结果一样经过序列化通过 IPC 传输。&lt;/p&gt;&lt;p&gt;其中，如果想&lt;strong&gt;公开一个方法给 sandbox&lt;/strong&gt;，因为不在一个进程，并不能方便的将一个方案的引用传递给 sandbox。我们可以将宿主的方法，在传递给 sandbox worker 之类做一下处理，转换为一个「描述对象」，包括了允许 sandbox 调用的方法信息，然后将信息，如同其它数据一样发送给 worker 进程，worker 收到数据后，识别出「方法描述对象」，然后在 worker 进程中的 sandbox 对象上建立代理方法，代理方法同样通过 IPC 和 master 通讯。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;针对沙箱进程进行 CPU 和内存配额限制&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在 Linux 平台，通过 CGroups 对沙箱进程进行整体的 CPU 和内存等资源的配额限制，CGroups 是 Control Groups 的缩写，是 Linux 内核提供的一种可以限制、记录、隔离进程组（Process Groups）所使用的物理资源（如：CPU、Memory、IO 等等）的机制。最初由 Google 的工程师提出，后来被整合进 Linux 内核。CGroups 也是 LXC 为实现虚拟化所使用的资源管理手段，可以说没有 CGroups 就没有 LXC。&lt;/p&gt;&lt;p&gt;&lt;span&gt;最终，我们建立了一个大约这样的「沙箱环境」&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47238372093023256&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qnAibK5Aia2dXqibZdYwAr4IgHiasg0EGUj3SqGicTgZicXJ0gCT3eNjgKvUibTuEickowqCGiabOic0CeOSSeicwWbHa0XAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1376&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;如此这般处理起来是不是感觉很麻烦？但我们就有了一个更加安全一些的沙箱环境了，基于这些处理被封装为一个独立的模块 &lt;/span&gt;&lt;span&gt;Safeify&lt;sup&gt;[20]&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;，在Github上已经开源。&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;相较于内建的 VM 及常见的几个沙箱模块， Safeify 具有如下特点：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;为将要执行的动态代码建立专门的进程池，与宿主应用程序分离在不同的进程中执行&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;支持配置沙箱进程池的最大进程数量&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;支持限定同步代码的最大执行时间，同时也支持限定包括异步代码在内的执行时间&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;支持限定沙箱进程池的整体的 CPU 资源配额（小数）&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;支持限定沙箱进程池的整体的最大的内存限制（单位 m）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;简单介绍一下 Safeify 如何使用，通过如下命令安装&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm i safeify &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;save&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在应用中使用，还是比较简单的，如下代码（TypeScript 中类似）&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Safeify&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;from&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;safeify&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; safeVm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Safeify&lt;/span&gt;&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;50&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;//超时时间，默认 50ms&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;asyncTimeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;500&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;//包含异步操作的超时时间，默认 500ms&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;//沙箱进程数量，默认同 CPU 核数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;memoryQuota&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;500&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;&lt;span&gt;//沙箱最大能使用的内存（单位 m），默认 500m&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;cpuQuota&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;//沙箱的 cpu 资源配额（百分比），默认 50%&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; context &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;a&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;add&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; b&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; a &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; b&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; rs &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;await&lt;/span&gt;&lt;/span&gt;&lt;span&gt; safeVm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;run&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; b&lt;/span&gt;&lt;span&gt;)`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; context&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;result&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;rs&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关于安全的问题，没有最安全，只有更安全。Safeify 已在部分项目中使用，但自定义脚本的功能是往往仅针对内网用户，有不少动态执行代码的场景其实是可以避免的，绕不开或实在需要提供这个功能时，希望本文或 Safeify 能对大家有所帮助就行了。&lt;br/&gt;&lt;/p&gt;&lt;h3&gt;结论&lt;/h3&gt;&lt;p&gt;运行不信任的代码是非常困难的，只依赖软件模块作为沙箱技术，防止不受信任代码用于非正当用途是不得已的决定。这可能促使云上SAAS应用的不安全，因为通过逃逸出沙箱进程多个租户间的数据可能被访问（主进程数据获取），这样你就可能可以通过session，secret等来潜入其他租户。一个更安全的选择是&lt;strong&gt;依赖于硬件虚拟化&lt;/strong&gt;，比如每个租户代码在独立的docker容器或AWS Lambada Function 中执行会是更好的选择。&lt;/p&gt;&lt;p&gt;下面是Auth0如何处理沙箱问题：&lt;span&gt;Sandboxing Node.js with CoreOS and Docker&lt;sup&gt;[21]&lt;/sup&gt;&lt;/span&gt;。「下来可以再详细研究下实现」&lt;/p&gt;&lt;h2&gt;三、看一个case&lt;/h2&gt;&lt;p&gt;&lt;span&gt;imageCook的使用case&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.2296983758700696&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qnAibK5Aia2dXqibZdYwAr4IgHiasg0EGUj3kNGH18c8dZiaVTUV4yyAp8POtZeTxQvJicv1OCMEvvnARFOicCR765hsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2586&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;目标：拿到用于前端页面渲染的index.js ＋ index.css&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;基本思路：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;模板代码生成代码：https://github.com/imgcook-dsl/react-xt-standard/blob/master/src/index.js&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;基于Group/仓库名可以拿到整个&lt;strong&gt;仓库的所有代码&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;gitlab的代码拉取实现方式可以参考：&lt;span&gt;针对字节现状封装的Gitlab API&lt;sup&gt;[22]&lt;/sup&gt;&lt;/span&gt; 「使用了Node.js的混合流」&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;github的代码拉取可以参考：https://www.npmjs.com/package/download-git-repo 曾被vue-cli &lt;span&gt;2.x&lt;sup&gt;[23]&lt;/sup&gt;&lt;/span&gt;版本使用&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;package.json&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;xxx&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;src/index.js&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;yyy&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;拿到执行函数字符串&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;module&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;exports&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;schema&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; option&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt; imgNumber &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;prettier&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; option&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Node.js沙箱执行，得到上面函数返回的字符串&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Safeify&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;from&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;safeify&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; getRepoProjectEntries &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;from&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;byte-gitlab&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; safeVm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;Safeify&lt;/span&gt;&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;50&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 超时时间，默认 50ms&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;asyncTimeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;500&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 包含异步操作的超时时间，默认 500ms&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 沙箱进程数量，默认同 CPU 核数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;memoryQuota&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;500&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 沙箱最大能使用的内存（单位 m），默认 500m&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;cpuQuota&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 沙箱的 cpu 资源配额（百分比），默认 50%&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; context &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;&lt;span&gt;schema&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;&lt;span&gt;option&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;async&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; zipStream &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;await&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;getRepoProjectEntries&lt;/span&gt;&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;group&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;mordor&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;project&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;lynx-standard&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;branch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;master&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;br/&gt;&lt;span&gt;  zipStream&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;async&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;contents&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;path&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; string&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; rs &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;await&lt;/span&gt;&lt;/span&gt;&lt;span&gt; safeVm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;run&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;contents&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; context&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;result&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; rs&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; rs&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;})&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;emitDone&lt;/span&gt;&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;once&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;done&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; done&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;once&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;error&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;err&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;流执行出错统一监控：&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;red&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; err&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;br/&gt;&lt;span&gt;})();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;返回给客户端&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;关于 CSS 隔离&lt;/h1&gt;&lt;p&gt;&lt;span&gt;常见的有，不再赘述：&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;CSS Module&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;namespace&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Dynamic StyleSheet&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;css in js&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Shadow DOM&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;引用链接&lt;/h4&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; 沙箱（Sandbox）: &lt;em&gt;http://www.arkteam.net/?p=2967&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; JavaScript中constructor属性: &lt;em&gt;https://segmentfault.com/a/1190000013245739&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; class: &lt;em&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[4]&lt;/code&gt; Class构造方法: &lt;em&gt;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; Object.getPrototypeOf(): &lt;em&gt;https://www.axihe.com/api/js-es/ob-object/get-prototype-of.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[6]&lt;/code&gt; Reflect.getPrototypeOf(): &lt;em&gt;https://www.axihe.com/api/js-es/ob-reflect/get-prototype-of.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[7]&lt;/code&gt; &lt;strong&gt;proto&lt;/strong&gt;: &lt;em&gt;https://www.axihe.com/api/js-es/ob-object/proto.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[8]&lt;/code&gt; Object.prototype.isPrototypeOf(): &lt;em&gt;https://www.axihe.com/api/js-es/ob-object/is-prototype-of.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[9]&lt;/code&gt; instanceof: &lt;em&gt;https://www.axihe.com/api/js-es/ex-relational/instanceof.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[10]&lt;/code&gt; TypeError: &lt;em&gt;https://www.axihe.com/api/js-es/ob-error/type-error.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[11]&lt;/code&gt; 专访 Wind.js 作者老赵（上）：缘由、思路及发展: &lt;em&gt;https://www.infoq.cn/article/interview-jscex-author-part-1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[12]&lt;/code&gt; (0, eval)(‘this’): &lt;em&gt;https://www.cnblogs.com/qianlegeqian/p/3950044.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[13]&lt;/code&gt; qiankun: &lt;em&gt;https://qiankun.umijs.org/zh/guide&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[14]&lt;/code&gt; ：proxySandbox: &lt;em&gt;https://link.segmentfault.com/?enc=Mb%2BNNJjUrmTA7g2uf%2FTgzQ%3D%3D.IHwAeHwf8%2FPDd3WJLo%2F4dCWf2md2lzw7s%2BIEdUcUHmX7xMSccEguXX%2BFQBtpgU8SHiyqxgnCi00SvzmT95eNTRD1XaOHjO5xokQrsy%2BHYtQ%3D&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[15]&lt;/code&gt; 这里: &lt;em&gt;https://link.juejin.cn/?target=http%3A%2F%2Fdfkaye.github.io%2F2014%2F03%2F14%2Fjavascript-eval-and-function-constructor%2F&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[16]&lt;/code&gt; 这里: &lt;em&gt;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fi0natan%2Fnodebestpractices%2Fissues%2F211&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[17]&lt;/code&gt; AngularJS 沙箱: &lt;em&gt;https://link.juejin.cn/?target=https%3A%2F%2Fportswigger.net%2Fresearch%2Fdom-based-angularjs-sandbox-escapes&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[18]&lt;/code&gt; 更多逃逸: &lt;em&gt;https://github.com/patriksimek/vm2/issues?q=is%3Aissue+author%3AXmiliaH+is%3Aclosed&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[19]&lt;/code&gt; Safeify: &lt;em&gt;https://github.com/Houfeng/safeify&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[20]&lt;/code&gt; Safeify: &lt;em&gt;https://github.com/Houfeng/safeify&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[21]&lt;/code&gt; Sandboxing Node.js with CoreOS and Docker: &lt;em&gt;https://link.juejin.cn/?target=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Du81pS05W1JY&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[22]&lt;/code&gt; 针对字节现状封装的Gitlab API: &lt;em&gt;https://code.byted.org/toutiao-fe/logic-monitor-server/blob/dev/init/app/service/gitlab.ts&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[23]&lt;/code&gt; 2.x: &lt;em&gt;https://github.com/vuejs/vue-cli/blob/v2.9.3/package.json&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>