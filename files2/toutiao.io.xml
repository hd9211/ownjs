<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>0c3e57fec605fd4ca7c74eb990462158</guid>
<title>架构师之路：HTTPS 底层原理</title>
<link>https://toutiao.io/k/6teeplo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;引子&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;先说说我对架构师的理解。从业务能力上，需要的是发现问题和解决问题的能力；从团队建设上，需要的是能培养团队的业务能力；从项目管理上，把控好整个项目和软件产品的全生命周期。&lt;/p&gt;&lt;p&gt;我搜索了一下架构师的培训课程，讲什么的也有。实际上是Java从入门到精通的课也冠名架构师课程；讲持久层框架的也冠名架构师课程；讲组件、中间件的也冠名架构师课程；讲分布式系统设计的也冠名架构师课程。个人意见哈，内容其实没有什么问题，但是课程开始之前至少让大家有个整体的视图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100002202&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6192&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlib6KrnXCAUC8a7Bia0vx0cuyDTyBKxJGu5ialSicFrfVxnF4v2uDVshhribo9O7HRy5H3qqTOibQIOjUAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;625&quot;/&gt;&lt;/p&gt;&lt;p&gt;熟悉https等常用技术的底层原理，可以增强解决实际问题的能力，作出正确的决策。举个例子：&lt;/p&gt;&lt;p&gt;接到安全团队的指令，要求各个团队梳理域名是否存在证书将要到期的安全风险。怎么来给团队下发具体任务呢？这个问题在文章最后总结并回答。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简单入门&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;先来回答下面两个问题：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、大家都知道使用https协议传输默认使用443端口，那什么情况下必须使用443，什么情况下不使用443？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;大家想一下端口的本质是什么。其实端口有两种，一种是物理端口，比如集线器、路由器的端口。大学的时候记得有门课叫集成电路，里面有讲到过。另一种是逻辑端口，是TCP/IP协议的端口，也常叫网络端口。本质上一个端口是用来绑定服务的，那服务器用监听什么端口，客户端就要向哪个端口发起请求。我们自己也可以写个简单的例子，写过这个例子应该很容易就能明白。&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485527&amp;amp;idx=1&amp;amp;sn=21413445605b9b2b9f883ba7b446c64c&amp;amp;chksm=fafde2f9cd8a6bef39582ee0075fcb846bf5c320dbddb0b4f0363a88f42d760109acf8ae198f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《懂了！国际算法体系对称算法DES原理》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《懂了！国际算法体系对称算法DES原理》&lt;/a&gt;也有完整的例子。&lt;/p&gt;&lt;p&gt;简单点说服务端可以自己决定什么端口提供服务。但是呢，大家各自为政，记忆起来麻烦也不便于端口管理。所以逻辑端口也进行了划分。其中0~1023是公认端口，比如80就默认是http的端口、443就是https的端口。这样约定好了，就不需要特殊来记了。所以一些对全人类开发的公网网站，就是用的默认端口。但是你自己或者公司内部用的或者和合作方商量好的，也可以用其他端口，只要服务提供方认就行。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、使用443的端口的同时，80端口还会用吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这就是涉及到https的本质了。https本质是http协议上加了一个安全层。安全层做了一些处理，http要做的事情一点也没有减少。就相当于在药粒外加了一层胶囊，本质上起作用的还是药粒呀；快递送来的海鲜放在保鲜箱里还加了保鲜袋本质还是买的海鲜呀。所以当然要用啦。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100002208&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5496277915632755&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlica9ogIjtcPcVOqXHWOvKOEnibCvSY0cgViceYialdEnea7GkyFibpHIc6g5SAJqVUjy9sLicFJDyI25dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;806&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;安全层原理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;既然https协议本质只是http上加了安全层，本文就主要将安全层是怎么实现的。当然要靠加密。加密又分成对称加密和非对称加密。要使用对称加密，客户端和服务端要有一个相同的秘钥，这个秘钥怎么能安全的传输就成了问题。非对称加密是公钥只能用来加密，私钥只能用来解密。那服务端自己存私钥，客户端来请求的时候，服务端把公钥发给它就可以了。&lt;/p&gt;&lt;p&gt;那有的朋友就问了，那别的客户端来请求是不是也拿到的是同一个公钥呀，信息就不安全了呀。没错，同一个服务端给所有的客户端返回的是相同的公钥。但是威胁网络安全的黑客需要是截获信息，不是公钥。信息发送方用公钥把信息加密了，黑客没有私钥解不开。他能拿到公钥和密文，想解开那就只能暴力破解，把所有语言文字的组合用公钥试一下看看和截获到的密文是不是一样的。如果用常用的RSA2048的话，要80年。&lt;/p&gt;&lt;p&gt;总之，非对称加密是比较安全的，但是它慢。通常加解密速度是对称加密的几百倍，信息大了速度还会快速下降。所以https协议是用非对称加密沟通一个对称秘钥。真正的信息就用对称秘钥来加解密了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CA证书&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;很多人都听过网络抓包吧。抓包的原理和黑客截获信息差不多，都是自己作为一个代理。客户端B想访问C网站，黑客D发现了。D就伪装成了C把自己的公钥发给了B。B发请求“我是B，我的提货卡号码是XBXB”到网站C时，黑客D截获了这个信息，用自己的私钥解开，之后把数据篡改成“我是D，我的提货卡号码是XBXB”发给网站C。于是本来B的东西就被D领走了。抓包也是这种充当代理的原理。&lt;/p&gt;&lt;p&gt;为了防止这一问题。客户端就需要在收到公钥的时候做一下判断，信任的公钥才使用。于是出现了一些大家都很认可的组织，它们可以颁发公钥。&lt;/p&gt;&lt;p&gt;&lt;span&gt;打个比方，在唐朝，贺知章&lt;span&gt;贺老可谓是少有的文坛官场双得意的代表，“二月春风&lt;span&gt;”&lt;/span&gt;没少光顾他家。从7品官做到3品大员，是皇帝的老铁，为国服务50年后退休皇帝了还送豪宅，后来还被追封礼部尚书。《长安十二时辰》里那个80多的老头何监就是影射的贺知章，因为他退休前的官职就是监事，人称&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;。不少诗坛大家就是受了他的推荐才与皇帝建立了通信成为了公务员。所以，&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;还有一个身份是“大唐最佳星探&lt;span&gt;”&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这里&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;就是大家都认可的组织，在&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;80多岁的时候，40多岁的李白找到&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;，请求他给自己签发一份公钥。&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;就用自己的私钥给他做了签发写了推荐信，不仅如此，还金龟换酒传为佳话。皇帝想选公务员，李白拿出了&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;的推荐信。皇帝一看，确实是&lt;span&gt;贺&lt;/span&gt;&lt;span&gt;监&lt;/span&gt;的笔迹，马上就给李白封了公务员。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;385&quot; data-backw=&quot;524&quot; data-fileid=&quot;100002212&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicaHJKWK9GpYbn6XoHFIbWFPbWaKPC9gY0853N9UnLEftosib1bI114UxpScpe44PoVSNthyQ5mlVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;525&quot;/&gt;&lt;/p&gt;&lt;p&gt;这里提一下，很多时候https抓包可以成功，原理是客户端很多时候并不验证证书的合法性。有个选项check=false。那至于哪些是认证机构，这个是系统预装的。可以在IE浏览器的internet选项里查到预装的证书。在中国，很多金融机构，它们的认证机构是央行。这些证书都是有有效期的，有的三年一签发、有的五年一签发。&lt;/p&gt;&lt;p&gt;上面图中有显示，证书除了公钥信息，还有数字签名信息。数字签名当然需要有信息来进行签名，具体信息就是我们在生成密钥时需要输入的那些，如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100002213&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.26510989010989&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicaHJKWK9GpYbn6XoHFIbWFZf0ic796iasDq1tsicTHuCKpHL4OOVcTODVGGvJznVRL9kDUWm3mXGZdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;回答开头的问题：&lt;/p&gt;&lt;p&gt;接到安全团队的指令，要求各个团队梳理域名是否存在证书将要到期的安全风险。怎么来给团队下发具体任务呢？&lt;/p&gt;&lt;p&gt;1、要梳理的是提供https服务的服务端，只有服务端才会需要找认证机构签发证书&lt;/p&gt;&lt;p&gt;2、只有需要外部认证的证书有过期的概念，自己签发的可以更新也可以不更新。可以通过向服务端发请求的获取到证书，查看证书是谁签发的、有效期是哪天&lt;/p&gt;&lt;p&gt;架构师经常面临着需要做出正确的决策，比如连续几天团队都在执行生产程序发布，但是后面几天大家有纪律涣散的趋势，这时候应该敏锐的察觉到并及时指出并纠正。这些都需要对原理或者事情的走向有深刻的认知才能做出正确和及时的判断。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9dcab3de44bbe73fdfaea929f9d950ea</guid>
<title>面试官问：你参与的项目有什么亮点？怎么回答</title>
<link>https://toutiao.io/k/170b14g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;面试官拿到我们的简历，一般会关注两块内容，一块是专业技能，另一块是项目经历。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;简单的个人介绍后，一般会先问些偏基础的技术问题，热热身。当然也有很多面试官上来就顺着项目问。根据你介绍项目的过程细节，穿插设置一系列的技术问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;面试官一般会关注一些有挑战性的方案设计、解决了什么复杂难题，简单一句话，就是你的项目一定要有亮点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么，什么是亮点？我们的项目如何积累这些亮点？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面我们会介绍项目中一些高频亮点设计，我们平时做项目，设计技术方案时也可以多用用，积累些实战经验
。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003598&quot; data-ratio=&quot;0.9770642201834863&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfImfe1UEWUaY2htciak4tXZZ3W1H5WFCx6ERCjSEKFQBCyFYjjknicaqv5rO1MD1UUuBvicAKFm75Vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;654&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;面对复杂业务，架构设计有什么通用思路？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：业务理解转化能力、思维抽象能力、软件建模能力、高并发、高性能、高可用的分布式系统架构设计能力。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;谈谈对 DDD 的理解？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：通过实体、值对象、聚合根、领域服务、领域对象、限界上下文、资源库，指导微服务落地，将一个大的复杂业务域拆分成若干业务子域。定义领域模型（包含数据、行为），相似业务聚合。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;画下项目的业务架构图？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：要对简历的项目非常熟悉，不只是自己负责的那部分，观整体通细节。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;很多同学面试前没有系统化梳理，面试时现组织语言，给人感觉思路凌乱、条理不够清晰。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;面试前可以先自己画画系统架构，理清其中的依赖关系。同时，提炼核心有挑战的技术难点，面试时，重点介绍其来龙去脉。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;项目中用过哪些设计模式？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：工厂、装饰、克隆、代理、适配器、观察者、策略、模板、单例、责任链、门面等23种软件设计模式，这是软件开发的基本功，每一种设计模式都要非常熟悉。否则很难写出扩展性很高的代码。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;之前写过三篇文章，每一种模式都有详细介绍：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何提升系统的吞吐量？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：围绕系统的 “三高原则”，高并发、高性能、高可用，三个方向展开。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NzYyNjQzNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdmOC0H6kaQlnh3rvWF2hPpzBoAoibbfQkhLdXfEpQgd8frHoDJDH503rv3FaMK6las2rCNQY7icr6w/0?wx_fmt=png&quot; data-nickname=&quot;微观技术&quot; data-alias=&quot;weiguanjishu&quot; data-signature=&quot;前阿里P7技术专家，研究生，出过专利。负责过电商交易、社区团购、流量营销等业务。分享后端架构技能、一线大厂面试经验、团队管理等话题。欢迎关注&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;面对海量数据，什么是水平拆分、垂直拆分？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、垂直拆分可以分为业务维度、技术维度。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务维度：结合DDD领域驱动设计，将一个大的业务域拆分为若干业务子域，比如电商可以拆分为商户、商品、库存、权限、会员、营销、交易、支付、履约、订单、结算、仓储、物流、财务等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;技术维度：将一个有很多字段的表，按字段的大小、使用频率等特点，拆分为多张表。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、水平拆分&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于单台机器的性能有限，无法支撑海量数据存储。我们引入&lt;/span&gt;&lt;code&gt;&lt;span&gt;逻辑表&lt;/span&gt;&lt;/code&gt;&lt;span&gt;概念，采用集群模式，将一张逻辑表拆分成多张物理表分散存储在不同服务器，通过&lt;/span&gt;&lt;code&gt;&lt;span&gt;分表键&lt;/span&gt;&lt;/code&gt;&lt;span&gt;路由，比如：&lt;/span&gt;&lt;code&gt;&lt;span&gt;时间&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;区域&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;用户id&lt;/span&gt;&lt;/code&gt;&lt;span&gt;等。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;特点：虽然有多张表，但每张表的表结构都是一样的，区别是数据不一样。所有表的数据合并起来才是这个业务表的完整数据。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;画外音：数据量大，就分表；并发高，就分库&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;更多内容，参考  &lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484864&amp;amp;idx=1&amp;amp;sn=e25652505319d4d13dcf5fc8e265bcae&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;单台 MySQL 支撑不了这么多的并发请求，我们该怎么办？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;分库分表时，全局性主键ID有哪些生成方案？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、UUID，生成的是 32 位的字符串，虽然可以做到全局唯一性，但我们一般推荐使用整型。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、SNOWFLAKE，雪花算法，生成一个 64 位的Long类型数据。组成结构：正数位（占1位）+ 时间戳（占41位）+ 工作机器id（10位）+ 序列号部分（12位）&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、数据库号段模式，对不同的业务类型定义初始值和步长，业务系统引入SDK，本地缓存预申请一定数据量的主键ID值，满足一定的并发要求。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、TinyID，滴滴的开源框架&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、Redis 的 incr 命令&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6、Leaf，美团的开源框架&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7、Uidgenerator，百度的开源框架&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;不停机情况下，数据库扩容要怎么做？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、首先，创建好新库，应用端修改代码，采用双写机制，将数据也同步一份到新库中&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、数据迁移，将老库中的数据迁移到新库中&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、对新老数据库做数据核对，对不一致的数据做定向同步&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、开关打开，读操作切换到新库，通过线上真实流量验证数据的准确性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、经过一段时间的线上验证后，如果没问题，将老库的写操作下线&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缓存更新常用策略？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Cache aside，通常会先更新数据库，然后再删除缓存，为了兜底还会设置缓存时间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Read/Write through， 一般是由一个 Cache Provider 对外提供读写操作，应用程序不用感知操作的是缓存还是数据库。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Write behind，延迟写入，Cache Provider 每隔一段时间会批量写入数据库，大大提升写的效率。像操作系统的&lt;/span&gt;&lt;code&gt;&lt;span&gt;page cache&lt;/span&gt;&lt;/code&gt;&lt;span&gt;也是类似机制。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;写操作时，缓存和数据库如何保持一致性？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：常见的方案有以下几个&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、先更新数据库，再更新缓存。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于是两个操作，如果多线程并发情况下，很难保证线程之间的顺序，可能导致缓存的是旧数据。&lt;strong&gt;一般不推荐这种方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、先删除缓存，再更新数据库&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;两个操作，如果中间执行过程中，缓存被删除，恰好有其他线程来读数据，缓存会被重新预热旧的数据。&lt;strong&gt;一般不推荐这种方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、先更新数据库，再删缓存。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可能会导致无效删除，但是删除本身具有幂等性。该方案成本最低，&lt;strong&gt;一般推荐该方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、借助消息中间件，对缓存的数据强制维护，但也只能保证最终一致性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、不管最终采用哪种方案，Key都要设置一个过期时间，借助自身的淘汰机制保证数据的更新。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何减少接口的响应时间?&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1、减少接口的处理内容，将非核心逻辑移除，采用MQ解耦，异步化处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2、接口内部引入本地缓存和分布式缓存，提升数据加载速度&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3、引入池化技术（线程池、进程池、对象池、内存池、连接池、协程池）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;事务有哪些特性？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、原子性（Atomicity），原子性是指事务是一个不可分割的工作单位，事务中的操作要么全部成功，要么全部失败。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、持久性（Durability），事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、一致性（Consistency），事务必须使数据库从一个一致性状态变换到另外一个一致性状态。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、隔离性（Isolation），一个事务不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;分布式事务，有哪些解决方案？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、执行业务逻辑前，先插入流水任务，如果中间过程调用外部RPC接口服务或者本地数据库操作失败时，流水任务会被定时调度任务周期性触发、重试，直到成功。前提条件，所有接口服务都要实现幂等。当执行成功时，流水记录会被删除。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、基于事务消息，能保证本地数据库一定成功，其他业务系统做为订阅方，通过重试机制保证最终一致性，但要注意接口幂等。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、两阶段提交&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、引入业务状态机，初始为 init 状态（对外不可见），待所有依赖的RPC接口全部调用一遍，待所有接口的数据全部初始化，然后开始第二轮调用，将状态置为对外可见。当然，此阶段可能会部分调用失败，需要多次重试&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、TCC 模式。Try：尝试待执行的业务；Confirm：执行业务；Cancel：回滚执行的业务&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6、Seata 阿里开源框架，把分布式事务定义为由若干本地事务（分支）组成的全局事务。被全局事务管理的全部分支，将在协调器的协调下，保证一起成功或一起回滚。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面列举的方案细节，可以查看 &lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484829&amp;amp;idx=1&amp;amp;sn=60f39021b58762ea909ea5ae53434945&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;如何解决分布式事务&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何预防死锁？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：互斥条件、请求和保持条件、环路等待、不可剥夺。只要打破其他一个条件即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;什么是乐观锁？什么是悲观锁？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;乐观锁：分为三个阶段：数据读取、写入校验、数据写入。在数据进行提交更新时，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回错误信息，让用户决定如何去做，&lt;/span&gt;&lt;code&gt;&lt;span&gt;fail-fast&lt;/span&gt;&lt;/code&gt;&lt;span&gt;机制。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;悲观锁：对数据的修改持保守态度，在整个数据处理过程中，将数据处于锁定状态，期间其他用户长时间无法访问，影响程序的并发访问性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;常见的限流策略有哪些？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;接口幂等性，有哪些方案？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;code&gt;&lt;span&gt;Select 查询&lt;/span&gt;&lt;/code&gt;&lt;span&gt;天然支持幂等，而&lt;/span&gt;&lt;code&gt;&lt;span&gt;写操作&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 多次执行可能会导致数据错误，下面简单列举常见的解决方案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;insert、update&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 之前，先select 查询校验&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;表中加唯一约束&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;加悲观锁 ， &lt;/span&gt;&lt;code&gt;&lt;span&gt;select * from order where order_id= 100000 for update;&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对操作行锁定。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;加乐观锁，表中增加一个&lt;/span&gt;&lt;code&gt;&lt;span&gt;attribute_cc&lt;/span&gt;&lt;/code&gt;&lt;span&gt;自增字段，借助&lt;/span&gt;&lt;code&gt;&lt;span&gt;CAS&lt;/span&gt;&lt;/code&gt;&lt;span&gt;机制控制并发&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;有些表不适合添加&lt;/span&gt;&lt;code&gt;&lt;span&gt;唯一约束&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，可以单独建一张&lt;/span&gt;&lt;code&gt;&lt;span&gt;防重表&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，在&lt;/span&gt;&lt;code&gt;&lt;span&gt;防重表&lt;/span&gt;&lt;/code&gt;&lt;span&gt;插入成功，在操作其它&lt;/span&gt;&lt;code&gt;&lt;span&gt;业务表&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;引入状态机， &lt;/span&gt;&lt;code&gt;&lt;span&gt;update order set status = &quot;wait_seller_send_good&quot; where id=1 and status = &quot;wait_buyer_pay&quot;;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;采用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;分布式锁&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，第一次请求可以成功加锁，后续请求加锁失败，认为是重复请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;token机制，client 首先请求获取token，提交时除了业务参数外还要带上这个token，server端会对这个token核销，只能核销一次。如果 server 查询不到token，则认为是重复请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;定时任务，有哪些实现方案？&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Time，JDK自带的定时器类，与 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TimerTask&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 一起配合使用&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;ScheduledExecutorService，位于&lt;/span&gt;&lt;code&gt;&lt;span&gt;java.util.concurrent&lt;/span&gt;&lt;/code&gt;&lt;span&gt;并发包下，基于多线程。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;spring task，通过 @Scheduled 注解定义定时规则&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;quartz，开源框架&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;xxl-job，大众点评开源的一个分布式任务调度平台&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;elastic-job，当当网开源的弹性分布式任务调度系统，采用zookeeper实现分布式协调，实现任务高可用以及分片，适用于高并发等复杂业务场景。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;经历过的项目，有没有遇到过什么线上问题？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：结合自己的工作经历来讲，一个程序员肯定都经历过线上救火的场景。那么找些有技术难度的整理下，如：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;没有正确使用Redis的结构，缓存对象的粒度较大，高并发流量导致带宽不足，网络拥堵，连接无法及时释放，客户端报获取连接超时，进而引发整个系统的雪崩。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pulsar系统告警，消息堆积。经排查，某个业务需求改动，SQl没有命中索引，导致接口处理时间增加数倍，从而降低了消费速度，进而消息堆积。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;线上系统报OOM问题、内存泄露问题&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以上，只是个举个例子。不同的业务，不同的系统，不同的人，经历的线上问题也千奇百怪，可以多收集些。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cc0c0e7634f84f53e107e3c12d666c63</guid>
<title>前端如何下载文件流</title>
<link>https://toutiao.io/k/9mpcigh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;container app-preview post-body&quot;&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;如果后台返回的是文件地址，那么前端直接通过 &lt;code&gt;window.location.href&lt;/code&gt; 加文件地址，就可以下载文件；&lt;/p&gt;

&lt;p&gt;但是如果后台返回的是文件流，那么前端就需要做一些处理；&lt;/p&gt;

&lt;p&gt;其实前端处理的核心：就是将文件流转为文件，然后再模拟点击，实现前者的效果。&lt;/p&gt;

&lt;h2&gt;步骤&lt;/h2&gt;

&lt;h4&gt;1. 封装一个下载工具&lt;/h4&gt;

&lt;p&gt;这个工具的作用就是，将获取的文件流转为文件，并模拟点击该文件，实现下载&lt;/p&gt;

&lt;p&gt;先贴代码，download.js（可直接复制使用）&lt;/p&gt;

&lt;pre lang=&quot;javascript&quot;&gt;&lt;code&gt;export const download = (res, type, filename) =&amp;gt; {
  // 创建blob对象，解析流数据
  const blob = new Blob([res], {
    // 设置返回的文件类型
    // type: &#x27;application/pdf;charset=UTF-8&#x27; 表示下载文档为pdf，如果是word则设置为msword，excel为excel
    type: type
  })
  // 这里就是创建一个a标签，等下用来模拟点击事件
  const a = document.createElement(&#x27;a&#x27;)
  // 兼容webkix浏览器，处理webkit浏览器中href自动添加blob前缀，默认在浏览器打开而不是下载
  const URL = window.URL || window.webkitURL
  // 根据解析后的blob对象创建URL 对象
  const herf = URL.createObjectURL(blob)
  // 下载链接
  a.href = herf
  // 下载文件名,如果后端没有返回，可以自己写a.download = &#x27;文件.pdf&#x27;
  a.download = filename
  document.body.appendChild(a)
  // 点击a标签，进行下载 
  a.click()
  // 收尾工作，在内存中移除URL 对象
  document.body.removeChild(a)
  window.URL.revokeObjectURL(herf)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码的重点是Blob对象，详情可参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Blob&quot;&gt;MDN文档：Blob对象&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;2. 获取文件流&lt;/h4&gt;

&lt;p&gt;这里就是调用后台接口，获取文件流&lt;/p&gt;

&lt;p&gt;后台方法：&lt;/p&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@GetMapping(value = &quot;/download-file&quot;)
    public byte[] downloadFile(String contractNo){
        log.info(&quot;=== 下载合同文件 ===&quot;);
        byte[] bytes = service.downloadContract(Dict.create().set(&quot;contractNo&quot;, contractNo));
        return bytes;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前端获取文件流的方法：&lt;/p&gt;

&lt;pre lang=&quot;javascript&quot;&gt;&lt;code&gt;import { download } from &#x27;@/utils/download&#x27;
import { axios } from &#x27;@/utils/request&#x27;

async downloadFile (contractNo) {
    const res = await axios.get(this.downloadContractFilePath + contractNo, {
        // 设置返回数据类型，这里我设置的是&quot;arraybuffer&quot;;如果不设置则下载下来的pdf会是空白
        responseType: &#x27;arraybuffer&#x27;
    })
    // 调用封装好的下载函数
    download(res, &#x27;application/pdf;charset=UTF-8&#x27;, moment().format(&#x27;YYYYMMDD&#x27;) + &#x27;.pdf&#x27;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于&lt;code&gt;responseType&lt;/code&gt;可参考官网：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType&quot;&gt;XMLHttpRequest.responseType - Web API 接口参考 | MDN (mozilla.org)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;3. 点击标签a&lt;/h4&gt;

&lt;p&gt;最后我们创建一个标签a，来点击下载文件&lt;/p&gt;

&lt;pre lang=&quot;html&quot;&gt;&lt;code&gt;&amp;lt;a @click=&quot;downloadFile(contractNo)&quot;&amp;gt;点击下载&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;总结&lt;/h2&gt;


&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>96e1acd6a9da5327f98e5a502d46468f</guid>
<title>如何限制进程的资源使用</title>
<link>https://toutiao.io/k/1fcuzc8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;实践验证限速效果&lt;/p&gt;&lt;p&gt;准备两台机器：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;* `instance-fj5pftdp`发包&lt;br/&gt;* `1.2.3.4`收包 (为了我避免暴露自己的虚机ip，这里用1.2.3.4代替)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在发包机器上 使用iptables限制通信，然后传输大文件，并使用tcpdump观察包速率&lt;/p&gt;&lt;p&gt;第一步：设置iptables，指令如上&lt;/p&gt;&lt;p&gt;第二步：传输大文件&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;* 使用`truncate -s 1G bigfil`创建&lt;span&gt;&quot;稀疏文件&quot;&lt;/span&gt;&lt;br/&gt;* 使用`nc 1.2.3.4 5001 &amp;lt; bigfile`传输文件&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第三步：使用tcpdump观察包速率：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;[root@instance-fj5pftdp ~]&lt;span&gt;# tcpdump -i eth0 &#x27;port 5001 and ip dst 1.2.3.4&#x27;&lt;/span&gt;&lt;br/&gt;22:52:00.743321 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [S], seq 2314647925, win 27200, options [mss 1360,sackOK,TS val 2324847321 ecr 0,nop,wscale 7], length 0&lt;br/&gt;22:52:00.780074 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], ack 1736746942, win 213, options [nop,nop,TS val 2324847358 ecr 3661297505], length 0&lt;br/&gt;22:52:00.780253 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 0:2696, ack 1, win 213, options [nop,nop,TS val 2324847358 ecr 3661297505], length 2696&lt;br/&gt;22:52:00.780516 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 2696:5392, ack 1, win 213, options [nop,nop,TS val 2324847359 ecr 3661297505], length 2696&lt;br/&gt;22:52:00.780533 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 5392:8088, ack 1, win 213, options [nop,nop,TS val 2324847359 ecr 3661297505], length 2696&lt;br/&gt;22:52:00.780538 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 8088:8192, ack 1, win 213, options [nop,nop,TS val 2324847359 ecr 3661297505], length 104&lt;br/&gt;22:52:00.780571 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 8192:10888, ack 1, win 213, options [nop,nop,TS val 2324847359 ecr 3661297505], length 2696&lt;br/&gt;22:52:00.780587 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 10888:12236, ack 1, win 213, options [nop,nop,TS val 2324847359 ecr 3661297505], length 1348&lt;br/&gt;22:52:00.816636 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 12236:14932, ack 1, win 213, options [nop,nop,TS val 2324847395 ecr 3661297542], length 2696&lt;br/&gt;22:52:00.816674 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [.], seq 14932:17628, ack 1, win 213, options [nop,nop,TS val 2324847395 ecr 3661297542], length 2696&lt;br/&gt;22:52:02.513394 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 17628:18976, ack 1, win 213, options [nop,nop,TS val 2324849092 ecr 3661297578], length 1348&lt;br/&gt;22:52:02.786393 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 18976:20324, ack 1, win 213, options [nop,nop,TS val 2324849365 ecr 3661299275], length 1348&lt;br/&gt;22:52:04.485382 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 20324:21672, ack 1, win 213, options [nop,nop,TS val 2324851064 ecr 3661299548], length 1348&lt;br/&gt;22:52:04.759396 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 21672:23020, ack 1, win 213, options [nop,nop,TS val 2324851338 ecr 3661301247], length 1348&lt;br/&gt;22:52:06.457405 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 23020:24368, ack 1, win 213, options [nop,nop,TS val 2324853036 ecr 3661301521], length 1348&lt;br/&gt;22:52:07.205354 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 24368:25716, ack 1, win 213, options [nop,nop,TS val 2324853784 ecr 3661303219], length 1348&lt;br/&gt;22:52:07.953399 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 25716:27064, ack 1, win 213, options [nop,nop,TS val 2324854532 ecr 3661303967], length 1348&lt;br/&gt;22:52:09.651384 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 27064:28412, ack 1, win 213, options [nop,nop,TS val 2324856230 ecr 3661304715], length 1348&lt;br/&gt;22:52:09.924396 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 28412:29760, ack 1, win 213, options [nop,nop,TS val 2324856503 ecr 3661306413], length 1348&lt;br/&gt;22:52:11.621372 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 29760:31108, ack 1, win 213, options [nop,nop,TS val 2324858200 ecr 3661306686], length 1348&lt;br/&gt;22:52:11.894385 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 31108:32456, ack 1, win 213, options [nop,nop,TS val 2324858473 ecr 3661308383], length 1348&lt;br/&gt;22:52:13.593387 IP instance-fj5pftdp.56634 &amp;gt; 1.2.3.4.commplex-link: Flags [P.], seq 32456:33804, ack 1, win 213, options [nop,nop,TS val 2324860172 ecr 3661308656], length 1348&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到最开始&lt;code&gt;22:52:00&lt;/code&gt;通过了10个包，然后大概每秒可以通过1个包。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a71d747646f6c050e31424d7a0a8a254</guid>
<title>存储技术发展过程</title>
<link>https://toutiao.io/k/trbduet</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;70855&quot;&gt;&lt;span&gt;一直想写一下存储的发展，从用乌龟壳记录文字到我们造出来纸笔书写语言这其中有无数人在推动文明的发展。汉语或者英语都是文化的延续，最终的目的是让人读懂。如何将这些文化存储起来是人类一直以来不懈努力去解决的问题，从龟壳，竹简，纸到如今的电子化设备每一个记录工具的发展都是一段有趣的故事。我们一起走进存储的世界。&lt;/span&gt;&lt;/p&gt;&lt;p data-tools-id=&quot;45867&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-tools-id=&quot;81115&quot;&gt;&lt;/p&gt;&lt;p data-tools-id=&quot;81115&quot;&gt;&lt;span&gt;从保存声音开始 /&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p data-tools-id=&quot;69607&quot;&gt;&lt;span&gt;SOUND&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;69940&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;10576&quot;&gt;&lt;span&gt;&lt;strong&gt;发条音乐盒&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;35504&quot;&gt;&lt;span&gt;每一个孩子的幼年都离不开一个发条音乐盒，妈妈哄睡觉的神器。严格来说发条音乐盒并不属于存储的范畴，拿到这里来说，是因为这个工具在孩童时会让我们以为音乐盒里存储了一首歌。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001215&quot; data-ratio=&quot;0.6813186813186813&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfckVVoI26dTZD6ibOamM3MkZ1VG9xUqK9ghAATVB54JruhlIbSkqC2rA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1092&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;音乐盒的组成有最重要的 3 个部分：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;section draggable=&quot;false&quot; data-tools-id=&quot;44978&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;                          &lt;span&gt;力源（发条）、芯片（弹簧片）&lt;span&gt;、&lt;/span&gt;&lt;span&gt;滚&lt;/span&gt;&lt;span&gt;筒&lt;/span&gt;&lt;/span&gt;                                                                            &lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;75978&quot;&gt;&lt;span&gt;最最重要的就是滚筒：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001216&quot; data-ratio=&quot;0.78125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/K7IVueebAHn05RcI254giaAZO4Tw2NVyfibT29vwZaguJxX6Arnt678cokOOr4JEDXRvrtnsrKrCTxZ8XYlAIXOQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你能看到上面一个个斑斑点点，它的作用就是流动的音符，通过预设的音符刻在滚筒上，弹簧片在滚筒滚动时摩擦上面的凸起处发出声音。所以你可以把滚筒理解为一段音符的存储器皿。就这么个小小的零件，当你上满发条之后就能播放一段美丽的音乐。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你可以把它当做歌曲播放器的雏形，正因为有前人的创意才有后继者用新时代的技术继续发扬光大。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;76142&quot;&gt;&lt;strong&gt;&lt;span&gt;留声机&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;爱迪生这个“大灯泡”一辈子几乎大部分时间都泡在实验室，研究电话和电报机的时候无意之中发现了记录声音和回放声音的秘密，在这之前人类从未踏足保存声音这个领域。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最先发明的是圆筒式机械录音，圆筒式机械录音是纵深式录音，圆筒中间有一根螺丝作轴，用手摇引轴时圆筒会从一端移动到另一端，圆筒表面涂有胶蜡，胶蜡上面有一根录音刻针，与声膜相连，声膜连着喇叭口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001217&quot; data-ratio=&quot;0.6718995290423861&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyf7DmWRceEQX169Oic02VgF90yzg1kFYbGPUvicBkDmUeJThg9PrUd3M9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对着喇叭大声说话，声膜振动带动刻针在圆筒胶蜡上滑动，圆筒随转而移动就随说话声音刻上深浅不同的螺旋声纹。放音时先退回原位，摇动转轴刻针在声纹里随着振动，带着声膜从喇叭发出说话声。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了能很好录音，录音时必须大声说话。圆筒胶蜡在较高温度下，接近熔化。放音时要冷冻低温。这是没有电子放音机技术制作的最早的留声机。所以最开始的留声机限制于记录声音的材料导致声音不清晰。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1887 年，爱弥尔·柏林纳制造了一种新型留声机。它的特点是，用圆盘形的唱片代替了大唱筒，唱片用两个手摇转轮带动。这种唱片留声机与唱筒留声机相比性能有了明显提高，是现代电唱机的雏形。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001218&quot; data-ratio=&quot;1.17353579175705&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfFOHG9EhsHNt2hJe7D4KGtmt1YcdVUtTmfIoFSxf1TTh9Fg5TXibYDKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;922&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;手摇圆盘唱片式&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;35282&quot;&gt;&lt;span&gt;记录声音的材质一直在发展，从一开始爱迪生使用的的锡箔纸到蜡筒：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001219&quot; data-ratio=&quot;0.9625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K7IVueebAHn05RcI254giaAZO4Tw2NVyfByEZzdlFaeeSLaAYichoJgDen3Gr01P1g6tQFfQnicganGZdfukAyZ2g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;35282&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;35282&quot;&gt;&lt;span&gt;从蜡筒到圆盘式唱片的鼻祖-78 转虫胶唱片：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001220&quot; data-ratio=&quot;1.2795698924731183&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfP8oqgWYjy0Jgic4hQE8LrxqE1XF7eCiawiankicEnRvXow8ibbhgKUN8Vcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1116&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;35282&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;35282&quot;&gt;&lt;span&gt;78 转虫胶唱片很重、很硬、也很脆弱，在运输、使用过程中极易破损。&lt;/span&gt;&lt;span&gt;这使得它用来记录声音的凹槽数量十分有限，一旦刻纹变多就容易损毁。&lt;/span&gt;&lt;span/&gt;&lt;span&gt;所以 78 转虫胶唱片一面最多只能刻录 4-5 分钟的音乐，大部头的古典乐压根没有办法完整记录下来，总是在精彩的乐章中断。&lt;/span&gt;&lt;span&gt;这才使得唱片公司将目光瞄准后来出现的人工合成材料——聚氯乙烯，也就是如今常见的 PVC 塑料。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;材料的变化让记录的声音越来越清晰，越来越长。电机替代了唱片机上的手摇杆，再也不用专人在机器边上守着上发条。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;56512&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;82757&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;section draggable=&quot;false&quot; data-tools-id=&quot;39369&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;新进入电气时代 /&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;ELECTRONIC&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;83561&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;21050&quot;&gt;&lt;strong&gt;&lt;span&gt;磁带机&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们说的磁带、磁盘都属于磁存储的范畴，磁表面存储器是在不同形状(如盘状、带状等)的载体上，涂有磁性材料层，工作时靠载磁体高速运动，由磁头在磁层上进行读写操作，信息被记录在磁层上，这些信息的轨迹就是磁道。磁盘的磁道是一个个同心圆，磁带的磁道是沿磁带长度方向的直线。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;磁存储器通过磁头和记录介质的相对运动完成读写操作。写入时，记录介质在磁头下方匀速通过，根据写入数据的要求，对写入线圈输入一定方向和大小的电流，使磁头导磁体磁化，产生一定方向和强度的磁场。由于磁头与磁层表面间距非常小，磁力线直接穿透到磁层表面，将对应磁头下方的微小区域磁化(叫作磁化单元)。可以根据写入驱动电流的不同方向，使磁层表面被磁化的极性方向不同，以区别记录 0 或者 1。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;电气时代的存储和“原始”时代有本质的区别，存储 01 要比存储原始刻录简单的多，所以这时候的存储设备也逐渐变小，但是容量反而递增。比如一个 4mm 宽的磁带：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001221&quot; data-ratio=&quot;0.6765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfg6aVDeIibyRJh4P2lUu22n1IagBUEB4NyibKDlakHwDFIl5Ff6WIRFEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据传输的速度约在 ~150 kB/s, 到 ~500 kB/s 之间，可存储空间从 1.3 GB 到 2.0 GB 之间，硬件压缩可使空间加倍。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;磁带发展之初我们主要用来录音，因为烧录磁带的过程是让磁带绕线圈不断旋转以拉取后面未烧取的部分，所以磁带这种存储工具不具备随机存储的特性。在时代的洪流中虽然它不能提供快捷查找，但是对于冷数据的场景它非常适用。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如今的磁带技术不仅没有因为时代发展而摒弃反而发展的相当瞩目。在 2018 年发布的 IBM 3592 数据磁带 使用 TS1160 格式最大未压缩容量可达 20TB，而读写速度也可以达到 400MB/s，均超过现在的硬盘。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001222&quot; data-ratio=&quot;1.0360824742268042&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K7IVueebAHn05RcI254giaAZO4Tw2NVyfzchUricicf63r8sK2zDRUmlM0eS8LpVHFjFicwiacy8euqRxHJJVnqWpqA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;582&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;63412&quot;&gt;&lt;span&gt;像博物馆、科学研究的历史数据、地址勘探的数据这些需要保存但又不经常使用的数据使用磁带来保存就非常合适。价格比同级别的硬盘便宜，不占空间，适合存储。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;能动的画面-胶片&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;声音的记录我们已经没有什么问题，接下来到了画面的保存。这又是一个历史性的时刻。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;胶片的诞生要迟于照相机的发明。早在 1826 年，世界上第一架照相机便出现了 - 它由 17 世纪的一种便携式绘图仪器的&lt;strong&gt;暗箱&lt;/strong&gt;脱胎而来，看上去有些笨重。聪明的法国人尼埃普斯对暗箱作了一番改造，加上镜头、光圈和毛玻璃，就制成了照相机，并在室外花了八个小时曝光，拍下了世界上第一张照片。他给它取了个好听的名字，叫“日光绘画”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001223&quot; data-ratio=&quot;0.86&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K7IVueebAHn05RcI254giaAZO4Tw2NVyftyDvKnbNHe58GnYTia0iaZKIAj6MsM5UpUpxKK510jBmOWbGAlpQFKuA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;           &lt;span&gt;这&lt;/span&gt;&lt;span&gt;块宽 20 厘米、高 16.5 厘米的锡版，是尼埃普斯拍摄的人类第一张存世照片《窗外风景》，现存于哈里·兰瑟姆中心。&lt;/span&gt;&lt;span&gt;（图片来盖蒂博物馆）&lt;/span&gt;&lt;/span&gt;                                  &lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当时使用的锡板成像曝光时间太长，并且成像质量也不太清晰，一位叫做达盖尔的设计师通过银盐来感光，在曝光后用水银蒸气冲洗出潜在的影像，这种方式可以大大缩短曝光时间。成像之后使用硫代硫酸钠定影液，即大苏打或称“海波”，这样洗出来的照片可以留存很久的时间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;生化材料的发展也给处于不同历史时期的人提供更多思路支撑，1851 年英国人阿彻发明的火棉胶湿版法摄影工艺，采用玻璃作为片基，并在上面涂上蛋清、碘化钾以及氯化钠的混合液。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001224&quot; data-ratio=&quot;0.6725&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K7IVueebAHn05RcI254giaAZO4Tw2NVyfn4U5oubJB1voicVfibBJNbquP86hfvsasOdGSEmbZDFo6iauia4StjOtxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上图：美国总统林肯肖像的玻璃湿版转成正像。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图：1864 年 2 月 9 日摄影 师 安 东 尼· 伯 berger)利用玻璃湿版拍摄的林肯肖像原版。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（上下图片均 来 自 Abraham Lincon at Gettysburg)&lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;玻璃处于湿润的状态下曝光和显影，因此摄影师外出拍摄时，必须携带着遮光的帐篷、化学药品、玻璃片、笨重的支架以及一壶水，全套装备通常是整整一马车。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在随后的 20 年里，一项更伟大的发明诞生了：胶卷。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主要得益于在此前之前诞生的干版工艺，这种摄影工艺是英国人马多克斯在 1871 年发明出来的，全名为溴化银感光乳剂玻璃干版工艺，它让摄影师解脱了湿版操作的麻烦。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1879 年，美国纽约一位年轻的银行职员乔治·伊斯曼计划购买一套相机外出旅行，那个时候玻璃干版摄影工艺还没有在美国普及，市场上能买到的只有笨重且麻烦的湿版工艺。伊斯曼在学习使用这套设备期间产生了困惑：假如带着它远足，一路上还有什么乐趣呢！于是他下决心研究更加方便的摄影方式。伊斯曼偶尔在一本英国摄影杂志上读到了关于玻璃干版的介绍，这给他带来了很大的启发。1880 年 4 月，伊斯曼辞去银行职务，在罗彻斯特市创业，开始研制照相干版。尽管干版比湿版方便了不少，但伊斯曼并不满意，因为玻璃沉重而且易碎，也不易携带。1884 年，伊斯曼就尝试用纸张代替玻璃作为片基，制造出可以卷起来的纸基胶卷。后来他又开始尝试用透明的赛璐珞代替纸张作为片基。1888 年，伊斯曼对外正式宣布，他已经制造出可以卷起来的新型“伊斯曼胶卷”，这就是一直通用至今的标准透明片基胶卷。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;至此，人类对于声音和画面的存储已经完成，从刀耕火种时代到数字化时代，我们一直在不断进步。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;光盘&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;电气化临门一脚直接让我们的信息量几何倍数递增，存储当然也不能落后。01 表示的电子正负极称为数字存储的基石。二进制编码作为数字化存储的底层编码必然要求所有的存储设备都以利于二进制存储的状态出现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们想一下我们用什么形状的容器来装这些二进制数据，我们假设用一个方形的容器来存储二进制数据，是不是感觉很怪，当你的探针移动到右边界之后还需要先走回来到左边界才能开始下一行的读取，这很浪费时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001225&quot; data-ratio=&quot;0.976303317535545&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyffEbTKjU0XgXdsUicdiaY9feQjT8Dnicf3Td13UGBRicUWnkyBd3yLUnicgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;422&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以存储容器的选择最好是让容器转动而探针不动。符合这个特性的容器也就只有圆形。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001226&quot; data-ratio=&quot;0.60078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfPRROa5C1O5SlCefagsx99cLlF3D8RHlUWtoxS12nbgONo0iagVSZOqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有了容器我们就得想办法把二进制数据放上去。光盘是用极薄的铝质或金质音膜加上聚氯乙烯塑料保护层制作而成的，表面有很多级细的凹凸不平的数据轨：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001248&quot; data-ratio=&quot;0.657496561210454&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/K7IVueebAHn05RcI254giaAZO4Tw2NVyfodHNZGuE3So3ZByAX1d9ffjIpwF0CJic9BS89Rqibz1wSwlRsxj3KR0A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1454&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这些数据轨就是我们在光盘上烧录的数据，它里面的数据轨单位以微米记。所以你如果想用针戳，恐怕是做梦。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;‍&lt;/span&gt;想要读取光盘上面的这些数据你需要用聚焦的氢离子激光束打到光盘表面通过记录槽的长短不同来判断是 0 还是 1。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;常见的刻录光盘主要有 3 种：CD、DVD 和蓝光光盘。普通的 CD 光盘的容量大概为 700M，DVD 的容量最大为 17G，而蓝光光盘单层最大能存储 27G，如果是多层的话，最大能达到 400G。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;TF 卡和闪存技术&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;半导体芯片的发展又加速了存储技术的发展。光盘少说直径有 15cm，而使用半导体芯片作为介质存储则可以把体积缩小到 1cm。不仅便于携带，因为它没有机械结构，不怕碰撞，没有噪音。基于电擦写方式可以做到比传统机械读写快很多倍的速度。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;唯一的缺点就是价格比较贵！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;常见基于闪存技术出现的 产品有 TF 卡，SD 卡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001228&quot; data-ratio=&quot;0.6929032258064516&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K7IVueebAHn05RcI254giaAZO4Tw2NVyfbVUJ9UXPoT7tX4iaL0XmblcurAOGmkC86UtoETp3jS3Lf26cDlkcu9g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;775&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001229&quot; data-ratio=&quot;1.0882917466410749&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfc5TehJUBJNjZfgkpHpHdzNPfGah0DmXCTtt52MTq9WunX8ianYx0jFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1042&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;闪存技术的底层实现又是什么呢？那就是三极管。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001230&quot; data-ratio=&quot;0.6309677419354839&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K7IVueebAHn05RcI254giaAZO4Tw2NVyfZmypqCpFFkD95p5zTdtnCKQSiaxd7T0yfsoNhnohkEZmaRCmLDH1cyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;775&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们知道三极管具备导通和不导通两种状态，这两种状态可以用来表示数据 0 和数据 1，因此利用三极管作为存储单元的三极管阵列就可作为存储设备。栅极与硅衬底之间有二氧化硅绝缘层，用来保护浮置栅极中的电荷不会泄漏。采用这种结构，使得存储单元具有了电荷保持能力，就像是装进瓶子里的水，当你倒入水后，水位就一直保持在那里，直到你再次倒入或倒出，所以闪存具有记忆能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001231&quot; data-ratio=&quot;0.4966216216216216&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfgm2KtwSLxr53Ygm8S4WkibAeU6ARfeZ7iaOu7iaZM6ibQRVfUmOeyOaKEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;592&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上图我们看到闪存技术采用的浮珊场效应管跟普通的不一样，它有两个珊极。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;闪存技术是采用特殊的浮栅场效应管作为存储单元，它具有两个栅极，一个如普通场管栅极一样，用导线引出，称为“选择栅”；另一个则处于二氧化硅的包围之中不与任何部分相连，这个不与任何部分相连的栅极称为“浮栅”。通常情况下，浮栅不带电荷，则场效应管处于不导通状态，场效应管的漏极电平为高，则表示数据 1。由于选择栅加有高电压，在电场作用下，这些电子又通过二氧化硅层到达浮栅，并在浮栅上形成电子团。浮栅上的电子团即使在掉电的情况下，仍然会存留在浮栅上，所以信息能够长期保存。擦除时，源极加上较高的编程电压，选择栅接地，漏极开路。根据隧道效应和量子力学的原理，浮栅上的电子将穿过势垒到达源极，浮栅上没有电子后，就意味着信息被擦除了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;闪存带最小存储单元是晶浮栅晶体管，对应于磁盘中的一个 bit 的存储单元，难以想象这么大点的 TF 卡里面到底有多少晶体管！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;闪存卡发展之初是为了支撑便携式设备的存储，1997 年推出的卡种只有 128M，现在 SDXC 格式的存储卡目前最大容量能支持 64G，理论容量能支持 2TB。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;硬盘&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;终于说到了目前存储的终极形态：磁盘。同磁带一样都是基于电磁效应，当闭合电路内的磁场发生变化（磁通量变化）时，闭合电路内会产生感应电动势。即闭合电路内磁场的变化会使电路内产生感应电流。电流的方向与磁极方向有关。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;绝命毒师第五季第一季中，记录着老白制毒过程的笔记本电脑被警方获得并放到了物证室里。老白利用电磁效应，在物证室外弄了一个大‘磁铁’破坏了笔记本里面的数据，就是上面的原理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001232&quot; data-ratio=&quot;0.5263157894736842&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyf0fiaGiaQ9lklOiah5nUdIYHabXo5kAEibYG3Wk0y6ibKOIxPKa5kZJocSicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;912&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;硬盘主要由碟片、磁头、电机马达、接口和控制电路控制芯片组成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001233&quot; data-ratio=&quot;0.9138888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K7IVueebAHn05RcI254giaAZO4Tw2NVyfo5ID7WS0qqaw4ydyicKK29MpFZiajlcUh6tic3lI7iboNicsBtkOhEXas4Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;磁头是一个外面被线圈缠绕着的 U 型磁芯，可以看出当磁头通电时便会产生磁场，磁场的方向随电流方向的变化而变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001234&quot; data-ratio=&quot;0.6514598540145985&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K7IVueebAHn05RcI254giaAZO4Tw2NVyfibtL5f0mKRkSQr6C4tRFbzmV0UYodS7SP44tlNSLCqogJhYOuzWqH2g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;548&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;磁头在读取数据时不与盘片接触，但是又要越近越好，因为太远无法感应到磁粉的极性，这个距离现在已经可以做到人类头发丝的千分之一，肉眼看上去是挨着的实则还有亿点点距离！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当给磁头施加不同的电流方向时，使磁盘局部产生不同的磁极，产生的磁极在未受到外部磁场干扰下是不会改变的，这样便将输入数据时的电信号转化为磁信号持久化到磁盘上。在磁盘读取时，磁头就相当于一个探测器，其“扫描”过磁盘面的各个区域时，各个区域中磁颗粒的不同磁化方向被感应转换成相应的电信号，电信号的变化进而被表达为 “0” 和 “1”，成为所有数据的原始译码。通过这种双向的电磁感应作用便完成了磁盘数据的记录和读取。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;碟片的表面涂有磁性材料，厚度一般在 0.5mm 左右。碟片安装在主轴马达的转轴上，工作时碟片在主轴马达的带动下高速旋转。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;盘片有电机带动做高速旋转，常见的转速为 7200 转/分，就是指盘片每分钟转过的圈数。这样磁头就相对盘片做圆周运动，也就能够按磁道来读取数据。除此之外，磁头的机械臂还由步进电机控制，沿盘片半径做直线运动，以读取不同磁道的数据。一块磁盘拥有多个盘片，每个盘片的上下面都可以读写数据，而且每个盘面都有对应的磁头读写。例如，如果一块磁盘有 4 个盘面，那么磁头就有 8 个，分别编号 0-7。&lt;/span&gt;&lt;code&gt;虽然有多个磁头在工作，但是同一时刻只能有一个磁头在读写数据&lt;/code&gt;&lt;span&gt;。在整个数据的读取过程中，机械臂的移动称为&lt;/span&gt;&lt;code&gt;寻道&lt;/code&gt;&lt;span&gt;，寻道的时间和盘片旋转的时间远大于半导体电路的数据传输时间，是阻碍磁盘读写性能的最大因素。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;盘片这么大，数据的存储是怎么做到定位的呢？肯定是不是满盘片跑吧！硬盘的设计者把一个盘片如同切西瓜一样切成很多块，每一块被叫做扇区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001235&quot; data-ratio=&quot;0.7180385288966725&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K7IVueebAHn05RcI254giaAZO4Tw2NVyfNydcQWRwfVOfibN415EO8CvMfLxGhkWNa2f92eYZ2QRCee6Ey0tnfIg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;571&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;扇区是磁盘的最小逻辑存储单元。早期每个扇区的大小被设定为 512 kb，现在随着 Cache 的发展，扇区大小也被标定为 4096 kb。数据存储到扇区之后的寻找数据又是什么样的过程呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在早期软盘和硬盘的寻址方式被称作「柱面-磁头-扇区寻址」，简称 CHS 寻址， 是因为这三个参数是软件交给硬件定位到某个具体扇区单元时使用的参数。首先柱面参数让磁头臂移动到某个半径上，寻址到某个柱面，然后激活某个磁头，然后随着盘面旋转， 磁头定位到某个扇区上。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这种寻址方式带来的问题是，由于要求每个磁道的扇区数相等，而外道的周长要大于内道，所以外道的记录密度要远低于内道，不仅造成了硬盘空间的浪费，也限制了硬盘的容量。柱面和扇区数是固定的，那么这就决定了 CHS 的最大寻址范围：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;255 _ 1023 _ 63 * 512 / 1048576 = 7.837 GB ( 1M =1048576 Bytes )&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据摩尔定律，硬盘存储的密度越来越大原有的 CHS 映射方案已经不能解决最大寻址范围问题，所以硬盘厂家引入了逻辑区位寻址的方案即 LBA，操作系统和文件系统直接寻址一个连续地址空间中的扇区号， 不再关心柱面和磁头之类的物理参数，将这些物理细节交由磁盘控制器。对操作系统和文件系统这些上层软件而言，LBA 寻址的抽象仍然保证了 &lt;strong&gt;连续读写提供最快的读写速度&lt;/strong&gt; ，文件系统仍然会尝试根据 LBA 地址优化，尽量连续读写从而减少寻道时间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如今的硬盘只有巴掌大一点，那你知道一开始硬盘是什么样子的嘛，可能会颠覆你的认知：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001236&quot; data-ratio=&quot;1.2103174603174602&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfw1KXeaxfLTSZ6BIB6iaDEhk0WrMffJ6bnakbFHQuuehGyiaoY3t7DRFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;没错，就是这么大，一个盘片能大过你的脸！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001237&quot; data-ratio=&quot;0.7433489827856025&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfs08rpNs5iah0A5zciaUuibHFH6uo6SMszEtMTPjHoBJFFtxrMsYIvZfuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1278&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;虽然看着这么巨无霸，但是早起硬盘同现在的机械硬盘的运行原理并无不同，只是存储材质的进步使得单位存储密度得到提升。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;硬盘技术发展到现在，存储密度的提升，存储材质的提升都对存储容量和读写速度产生了巨大的改变。除了传统的机械硬盘外，最新的硬盘科技还有 SSD，固态硬盘。在固态硬盘里面，闪存颗粒则替代了机械磁盘成为了存储单元。前面我们说 TF 卡的时候已经说过闪存，体积小、存储速度快是他的优点。当然弱点就是价格贵！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;目前行业内单数据盘最大能支持 32 TB，硬盘厂商 Nimbus Data 推出 ExaDrive DC100 系列固态硬盘，最大容量 100TB。放在现在这也是一个巨大无比的容量，够你把所有的岛国小姐姐都放进去。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;最后未被破解的存储之谜：人脑&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我想没有什么比人脑这种存储介质更为神奇的。宇宙中最超凡的东西就在你的头颅里，哪怕你穿梭于外太空的每一寸说不定都找不到任何比你颈脖之上这团如海绵般柔软的东西更为复杂、神奇的东西。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;初始化的大脑就像一团黑暗，寂静的云，它从未有任何修饰，也未有任何感觉。从你面世的那天起，你看到了什么，听到了什么，做过了什么，都会在大脑中记忆，存储，转化。它不断地给你提供搜索能力，整合能力，逻辑推理能力，预测能力，甚至是未知的能力。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-tools-id=&quot;18413&quot;&gt;&lt;span&gt;光静静地坐着什么都不做，你的大脑在 30 秒内处理的信息就超过了哈勃望远镜 30 年的工作量。一块 1 立方毫米的皮层就能容纳 2000TB 的信息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那拿当前最先进的电脑来说如果问你这是谁，虽然这是张卫健扮演的，但你还是会说这是孙悟空。就这一点来说，电脑也无法在这么快的时间内做出如此迅捷的反应。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001238&quot; data-ratio=&quot;1.3473389355742298&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfdKicia76T3VUj9Y9gOqEaFQIpX1ZIEyH4TUdF2EqfnrGS9iaeSlFx7d4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;714&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是目前做的最强大的仿真机器人，它也无法完全模仿人所有的动作机能。比如在泡脚的同时背单词和吃东西。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001239&quot; data-ratio=&quot;0.5636363636363636&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/K7IVueebAHn05RcI254giaAZO4Tw2NVyfNrO1OaqX8o5wgXyLrkZYib2F51c6LhCC9SpTMWUlFGnG90SENEibm7Dg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;440&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如这样的一幅美景，如果你是在现场看风景，在你的眼里大概有几亿像素，可能比你看过最清晰的电影还要清晰几百倍。像这样的画面你每天要看几个小时，换成二进制存储每天最少就是 TB 级别的数据。而大脑能不间断存储几十年，自动压缩，去重。能随机提取，按场景提取，按特征提取。。。如果要用机器来实现，可能你需要祭很多个程序员耗费数千万资金才能实现这些功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001240&quot; data-ratio=&quot;0.46796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfXib0ujjPVjGfGcGo6rRleYxVibdRKb3JqLXspSDicfkjWXjAbuTTbkibXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;重点不是人脑有这些功能，而是人能很轻松的同时去运用这些功能。如果让人类当前创造的机器来做同样的功能，那估计的把 CPU 跑爆也不一定能实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;人类神经感知元的操作是层层传递的，比如我们的手破了一层皮：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果你的眼睛看到了手破皮，大脑会给出反馈破皮了然后告诉你疼，你会产生疼的反应。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果你的眼睛没有看到的前提下，可能是真的疼触发了手部的神经元进而告诉大脑疼，然后你的眼睛转向手部看到破皮了。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;试想这些操作如果用人类的程序来模拟实现代码量是巨大的，但是对于人本体来说你不会有什么负担，这就是你作为人本来就应该会的技能。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最早神经科学家 David Hubel 和 Torsten Wiesel 对猫的视觉神经系统的研究证实，视觉特征在大脑皮层的反应是通过不同的细胞达成的。其中，简单细胞（Simple Cell）感知光照信息，复杂细胞（Complex Cell）感知运动信息。受此启发 1980 年，日本学者福岛邦彦（Kunihiko Fukushima）提出了一个网络模型“神经认知机（Neocognitron）。用以识别手写数字。这种网络分成多层每层由一种神经元组成。在网络内部两种神经元交替出现，分别用以提取图形信息和组合图形信息。这两种神经元到后来演化成了重要的卷积层（Convolution Layer）和提取层（Pooling Layer）。但是这个网络的神经元都是由人工设计而成，其神经元也不会根据结果进行自动调整，因此也就不具有学习能力，只能限制在识别少量简单数字的初级阶段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100001241&quot; data-ratio=&quot;0.6015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHn05RcI254giaAZO4Tw2NVyfFRckKvd4ycTA4K5xmBwcV4ZcpxpBHqnMfnomJQZ8cyqkibWPRMhw0Rg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1994 年，计算机科学家 Yann LeCun 在 Geoffrey Hinton 组内做博士后期间，结合神经认知机和反向传播算法，提出了用于识别手写邮政编码的卷积神经网络 LeNet，获得了 99%的自动识别率，并且可以处理几乎任意的手写形式。这一算法在当时取得了巨大的成功，并被应用于美国邮政系统中。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;尽管如此，深度学习并没有因此而热门。原因之一，就是神经网络需要更新大量参数（仅 2012 年提出的 AlexNet 就需要 65 万个神经元和 6000 万个参数），需要强大的数据和算力的支持。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以现如今的神经科学并没有发展，发展最多的还是深度学习和机器学习方向，我们的重心从人脑的研究方向转到目前更加切近生活实际的领域，图像识别，医学领域，声音识别，自动驾驶等等。都是从基础领域入手，一点点模仿人的行为。相信等到材料学下一次巨大进步的时候，我们能够实现真正的”机器人“！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>