<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>79b49359eb2ebc495ce5fb71816bc315</guid>
<title>高性能程序设计，缓存为王</title>
<link>https://toutiao.io/k/a9j7y4a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                                    


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-tools=&quot;新媒体管家&quot; data-label=&quot;powered by xmt.cn&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;新媒体管家&quot; data-label=&quot;powered by xmt.cn&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们在程序设计时，有一个极其重要的非功能性指标：性能，总是无时无刻不缠绕在程序员的脑海，尤其是我们开发的面向大众的Web服务，网络接口等程序。&lt;br/&gt;高性能的程序可以使用更少的服务器资源提供同样规模的用户请求（成本低），也可以更快的响应用户请求（体验好）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;当然，高性能的程序设计也会更加复杂，开发也有更大难度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;这次的内容，我们面向高性能程序设计方向，来讲一讲其中最核心最重要的缓存。&lt;br/&gt;希望能够帮助大家更好的理解缓存为王的含义，也能更好的利用缓存，设计出高性能的程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span/&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;本文作者：michaeywang，腾讯T10工程师&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大纲：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1 高性能程序与时间、空间的关系&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2 无处不在的缓存，硬件与软件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3 系统中的缓存设计&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;4 总结，缓存为王&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;0、找找看，人体中的缓存、缓冲区&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3432835820895523&quot; data-type=&quot;jpeg&quot; data-w=&quot;402&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7eeLAxkVcZlEqTQOoFElicAVMTX9KqbrE2ibic9kqibYVbepC6mxg7ibibXDQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;头&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;大脑的短时记忆和长期记忆，外部持久存储的书籍&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;短期、长期记忆，比临时查阅书籍更快、更灵活&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;计算机有非常强大的存储、检索和运算能力，可以作为大脑非常好的补充&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;颈椎&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;上接头部，下衔接胸椎，承上启下，多节&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;头部与胸部的衔接，保证灵活性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;颈椎病、腰间盘突出，问题是类似的，长期保持同一个姿势造成无法修复的劳损&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;建议多做以下动作：上九天揽月，下五洋捉鳖，简化后就是“抬头，转体”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;胸腹&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;大量的冗余空间，孕妇和胖子的潜力&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;更大的冗余区，更好地支持生育和度过饥荒&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可惜，时代变了，审美变了，这倒是成了缺点&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;关节&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;软骨、关节腔，避免骨头硬碰硬和磨损&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提供了足够的灵活性，减少冲击和磨损&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;既要硬，又要灵活，还要做杠杆运动，真是难为了关节&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;脚&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;减震&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;扁平足，失去了减震和缓冲&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;NBA球星麦迪就是扁平足，而且他的技术动作不合理，所以一直受伤病困扰&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1、高性能程序与时间、空间的关系&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;哪种地铁闸机，占用空间小、过关快、体验好、可靠性好、安全性好？还有更多类型的闸机可以比较的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2913907284768212&quot; data-type=&quot;jpeg&quot; data-w=&quot;1812&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7GFM21bnE5UtqCJZwiaNUECf8OltXuYibX65tpx1ncLOf0PD03AvKPtGg/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.1 性能，速度与时间&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;吞吐率：单位时间内处理的请求数&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;吞吐量：对网络、设备、端口、虚电路或其他设施，单位时间内成功地传送数据的数量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TPS：每秒钟系统能够处理事务或交易的数量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;性能=速度=数量/时间，单位时间内处理的数量越多，性能越好&lt;br/&gt;关注程序性能，首先要关注单次请求的执行时间，10ms的等待时长肯定是要比100ms的执行时间要更好。然后就是在压力测试下（并发&amp;amp;集群），我们会关注上面的吞吐率、吞吐量、TPS这些关键指标。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.2 系统性能预估&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;CPU密集型，如：数据排序&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;假设：单次请求耗时 Tms，服务器CPU数量 C核，集群的服务器数量S台&lt;br/&gt;QPS=1000/TCS (公式是理想状态，单机、分布式并发中无共享无状态)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;IO密集型，如：依赖大量网络API/数据库/文件（IO耗时）&lt;/strong&gt;&lt;br/&gt;假设：单次请求耗时 Tms，服务器CPU数量 C核，集群的服务器数量S台，IO耗时1/2Tms&lt;br/&gt;QPS=1000/(T-1/2T)CS(理想状态下，API不是瓶颈)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;服务线程数量预估&lt;/strong&gt;&lt;br/&gt;CPU密集型，线程数量与CPU数量一致（redis）&lt;br/&gt;IO密集型，要考虑IO的开销，适当放大线程数量，如：1/2时间在IO中，那么线程数量可以是CPU的2倍(Java Web的线程数，PHP-fpm的进程数)&lt;br/&gt;增加CPU数量，涉及到并发编程。&lt;br/&gt;增加服务器数量，涉及到分布式系统设计。&lt;br/&gt;所以，提高系统性能，还需要提高并发编程的能力，提高分布式系统设计的能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.3 降低单次请求执行时间&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;减少CPU运算量&lt;br/&gt;简化运算逻辑，优化算法（少循环，少编解码等）&lt;br/&gt;简化数据结构，降低时间复杂度，减少内存复制&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;减少IO耗时&lt;/strong&gt;&lt;br/&gt;减少API/数据库/文件的依赖&lt;br/&gt;优化API/数据库/文件的性能&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;利用缓存&lt;/strong&gt;&lt;br/&gt;缓存复杂运算后的结果&lt;br/&gt;缓存IO的返回值&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;最好的优化手段就是砍需求，没有代码就有最好的性能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.4 缓存，空间换时间&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;增加的缓存空间&lt;/strong&gt;&lt;br/&gt;缓存IO返回值&lt;br/&gt;缓存运算结果&lt;br/&gt;缓存IO返回值以及运算结果&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;增加的处理逻辑&lt;/strong&gt;&lt;br/&gt;缓存数据的读取和验证&lt;br/&gt;数据更新到缓存&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;减少的处理时间&lt;/strong&gt;&lt;br/&gt;减少IO耗时&lt;br/&gt;减少大量的CPU运算&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;离CPU越近的数据，处理越快；减少的处理逻辑就是优化的时间。缓存就是这个法宝。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.5 缓存，是否多多益善&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面三种情况建议尽量使用缓存来做优化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;减少的处理时间显著（性能差异明显）&lt;/strong&gt;&lt;br/&gt;原来的逻辑太复杂，性能很低下，如：超过50ms&lt;br/&gt;原来的IO耗时太长，如：网络延时超过50ms，或者IO处理耗时超过50ms&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;增加空间有限（成本提高）&lt;/strong&gt;&lt;br/&gt;缓存的数据空间尽量小，如果实在很大，可以考虑把数据压缩后缓存，如：博文正文页（计算换空间）&lt;br/&gt;缓存数据的位置，可以在进程内，外部服务进程，甚至文件、数据库中（缓存后速度比缓存前的性能提高明显才有益）&lt;br/&gt;单个实例进程的容量尽量别太大（超过16G，32G），以减小迁移、重启、故障造成的影响（运维的负担也不能忽视）&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;增加的处理有限（开发难度，运算次数）&lt;/strong&gt;&lt;br/&gt;避免缓存频繁失效（命中率太低）&lt;br/&gt;避免缓存频繁更新（数据一致性复杂）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.6 总结，高性能程序与时间、空间的关系&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;高性能程序设计，重点关注&lt;/strong&gt;&lt;br/&gt;方法一，减少单个请求的处理时间（程序优化）&lt;br/&gt;方法二，增加CPU，线性提高系统的吞吐率（并发编程）&lt;br/&gt;方法三，增加集群的服务器，线性提高系统的吞吐率（分布式系统设计）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;空间换时间，缓存的优势&lt;/strong&gt;&lt;br/&gt;场景一，缓存前的处理速度太慢，IO耗时太长（超过50ms）&lt;br/&gt;场景二，缓存数据具有极高的命中率（超过90%，理想是100%）&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;避免缓存的陷阱&lt;/strong&gt;&lt;br/&gt;场景一，程序没有高性能需求，程序原本性能已经非常高（不要为缓存而优化）&lt;br/&gt;场景二，缓存容量爆炸性增长（成本太高）&lt;br/&gt;场景三，缓存数据更新太频繁（命中率低，数据一致性差）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2 无处不在的缓存，硬件与软件&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2587412587412588&quot; data-type=&quot;jpeg&quot; data-w=&quot;429&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7AiauC4CrGyypWHlTfglvJ4Y3UKUD3MnlcLkzibvWwxibU6BCxIZjs6etw/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CPU与内存&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;硬盘&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;网卡&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;操作系统&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;程序设计语言&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Web服务器和数据库&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CDN内容分发网络&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;DNS域名解析&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Web浏览器&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.1 CPU与内存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9615384615384616&quot; data-type=&quot;jpeg&quot; data-w=&quot;390&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7L0nzszjms5JvSvFhxrbSTicEF3XGoI4JCjPfTRWYxibaywYx9eUibpmGQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CPU内的寄存器/L1/L2/L3&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;计算机内存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.2 硬盘内的缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;243&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia77ddcShqTaD0rYmbynrZXSZ11Uxd4kaKQvJic5CP16Bx4tOFS6NO9R0w/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8791666666666667&quot; data-type=&quot;jpeg&quot; data-w=&quot;240&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia72CukbC910ta29pCcr7wCBI7PYCOAN0aSBzfT5vibl2ibuIruP2icUBAkQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;SATA传来的数据和盘片的实际操作间加一个缓冲&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;HDD的延迟是ms级别，缓存是ns级，相差数万倍&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存容量增加，提高命中率&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;突然掉电导致数据丢失的风险增大&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;固态混合硬盘，内置8G/16G固态硬盘，缓存容量更大&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;固态硬盘，随机读写速度更快&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.zhihu.com/question/27030135&quot; textvalue=&quot;为什么机械硬盘的缓存不是越大越好？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;为什么机械硬盘的缓存不是越大越好？&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;缓存容量增加，带来的成本提高，突然掉电导致数据丢失的风险增大&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.3 网卡的发送/接收缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;发送缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;网卡有包就发，包太多了就放入缓存队列，缓存满了就丢包并且告诉系统丢包了&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TCP协议具有流控和拥塞检测功能，防止发包太快造成丢包(UDP不可靠传输)&lt;br/&gt;接收缓存&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;网卡接收数据，放入接收缓存，一次数据接收完成后，网卡驱动程序，向CPU发送信号，提示网卡有新数据到来。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;操作系统从网卡的接收缓冲队列中读取数据，交给应用程序处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.4 操作系统的缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;缓冲文件系统&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在内存开辟一个“缓冲区”，为程序中的每一个文件使用(读写文件先操作缓冲区)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;fopen, fclose, fread, fwrite, fgetc, fgets, fputc, fputs, freopen, fseek, ftell, rewind等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;网络相关缓存设置&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;/proc/sys/net/core/wmem_max 最大socket写buffer&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;/proc/sys/net/core/rmem_max 最大socket读buffer&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;/proc/sys/net/ipv4/tcp_wmem TCP写buffer&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;/proc/sys/net/ipv4/tcp_rmem TCP读buffer&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;/proc/sys/net/core/netdev_max_backlog 进入包的最大设备队列&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;/proc/sys/net/core/somaxconn listen()的默认参数,挂起请求的最大数量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;/proc/sys/net/ipv4/tcp_max_syn_backlog 进入SYN包的最大请求队列&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;操作系统磁盘缓存，可以减少磁盘机械操作。&lt;br/&gt;&lt;strong&gt;更多参考：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://blog.csdn.net/tanqiuwei/article/details/20641965&quot; textvalue=&quot;不带缓冲区open和带缓冲区的fopen的区别&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;不带缓冲区open和带缓冲区的fopen的区别&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.cnblogs.com/weifeng1463/p/6825532.html&quot; textvalue=&quot;linux 内核参数优化&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;linux 内核参数优化&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.5 程序设计语言的缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;jpeg&quot; data-w=&quot;350&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia78yxyKc5IB8xsG57GaxmKDFj3z4LNI2iaHNY7y2m3IStibscsDXdf39Jw/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;PHP的缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;opcache，省去了PHP源码到opcode的转换过程，并且保证脚本对应的opcode都保存在内存中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;apcu，共享内存，缓存PHP程序中的用户数据&lt;br/&gt;Java的缓存&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;JIT，运行时生成机器码，比Java编译器优化后的bytecode性能更好&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;ehcache，缓存数据有两级：内存和磁盘&lt;br/&gt;编程语言的版本升级，我们最关注的除了语言特性的变化，还有就是关于性能的提升。其中有优化数据结构的，也有优化GC的，当然也有引入缓存/JIT这些技术。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.6 Web服务器和数据库&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;nginx中的缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;减少应用服务器请求&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;proxy_cache，内容缓存在本地文件中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;mysql中的缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;减少文件系统I/O&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;SqlSession，直接返回结果（四种失效情况：Sql不同，条件不同，增删改操作，清空了缓存）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;sort_buffer_size 排序缓冲区大小，超过的时候就用到磁盘中排序&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;join_buffer_size 每个联合查询分配的缓冲区&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;read_buffer_size 对MyISAM表进行全表扫描时分配的读缓存池的大小&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;read_rnd_buffer_size 索引缓冲区的大小&lt;br/&gt;数据库缓存，减少文件系统I/O。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.7 CDN内容分发网络的缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5530864197530864&quot; data-type=&quot;jpeg&quot; data-w=&quot;405&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7ts8JsBNjhxOAcbtDzibu5iaFvQr8h1H4hhQcu7mDz2onGvbveC3wZzJw/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;分布式网络&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全国/全球多地部署很多Web服务器缓存节点&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;DNS动态解析，让客户端请求就近访问到Web服务器缓存节点&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Web内容缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存源服务器的内容，有缓存时就不需要回源&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可以支持目录规则、文件扩展名等设置缓存策略&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可以手动刷新指定目录、文件的缓存数据&lt;br/&gt;CDN,加速终端连接和请求速度，减少源站点压力&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.8 DNS域名解析&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6396551724137931&quot; data-type=&quot;jpeg&quot; data-w=&quot;580&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia75K1LgLQgmx1VicOQ4c7GgKJeZCwsL79IxgicLibq9PwSTbUBiaFszoEc1g/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;浏览器的DNS缓存，60s， chrome://net-internals/#dns&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;操作系统的DNS缓存， ipconfig /displaydns&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;本地HOSTS文件&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;C:WindowsSystem32driversetchosts&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;/etc/hosts&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;远程多级DNS服务器&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;路由器，运营商&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;根服务，顶级域名服务&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;二级域名服务，三级域名服务等&lt;br/&gt;DNS服务是典型的分布式分层缓存系统，高效可靠，当然也是非常核心的系统，大面积断网的事件就跟DNS故障有关。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;更多参考：&lt;a target=&quot;_blank&quot; href=&quot;https://www.cnblogs.com/tonykan/p/3500332.html&quot; textvalue=&quot;浏览器的DNS缓存&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;浏览器的DNS缓存&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.9 Web浏览器&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;客户端浏览器缓存，减少对网站的访问。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6771217712177122&quot; data-type=&quot;jpeg&quot; data-w=&quot;542&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7LxGk2ibo7EINfHjkSJTeLkKkZGiaI4fXJiaA1o9Yiar9rSXeJMYKepIQ0g/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Web内容缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;客户端直接读取缓存，减少对Web服务器的请求&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;强制缓存 cache-control, expires (from memory cache, from disk cache)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;协商缓存 etag, If-None-Match, last-modified, If-Modified-Since (304 not modify)&lt;br/&gt;&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18017057569296374&quot; data-type=&quot;jpeg&quot; data-w=&quot;938&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7YTkB2dHGF1szebuHqvgvYQOF5H8ibGGkpFsynZ2SOPpyVDBSicoy19RQ/640?wx_fmt=jpeg&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Cookie/LocalStorage/SessionStorage&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.321875&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia75CESXUCiaus79EyZZXxUib1A9pN4ZvSWz8C40qiaicibiciack86g7WMWibULg/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;更多参考：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.10 总结，无处不在的缓存，硬件和软件&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6902485659655831&quot; data-type=&quot;jpeg&quot; data-w=&quot;1046&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7hn1E6UESftPmiak0PuPH6pSsUheFL8jHBDpQWTib4Tzic0BMmRoQ00fUA/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;缓冲区buffer&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;避免频繁读写&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一次性分配稍大的空间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一次性读写多一点内容&lt;br/&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;缓冲队列&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;多级缓存，分布式缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;本地更快，减少远程数据依赖&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存数据使用更快，减少数据读取和运算&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;问：在浏览器中输入一个&lt;/span&gt;&lt;span&gt;网址&lt;span&gt; &lt;/span&gt;&lt;a href=&quot;http://www.qq.com/&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;http://www.qq.com/&lt;/a&gt;，接下来会&lt;/span&gt;&lt;span&gt;发生什么？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3 系统中的缓存设计&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;先来看看2个典型的常见的软件系统。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.1 社区bbs的缓存设计&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6038961038961039&quot; data-type=&quot;jpeg&quot; data-w=&quot;462&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia740D38qkM6LQv0zcygYTNwt44ReAHdenqVUP06j6U0CcXj2DR6d1NKQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;数据模型&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;页面&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;操作&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;缓存数据&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全量永久缓存：用户(uid -&amp;gt; map)，板块(all -&amp;gt; json)，置顶帖(all -&amp;gt; json)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;部分临时缓存：帖子列表页数据(多种排序, fid-displayorder -&amp;gt; tids), 主题浏览量(tid -&amp;gt; views)，帖子数据(tid -&amp;gt; map)，用户帖子列表页数据(uid -&amp;gt; json)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;页面缓存：首页，帖子详情页&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.2 电商系统的缓存设计&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6921296296296297&quot; data-type=&quot;jpeg&quot; data-w=&quot;432&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7pWm8VhQXHhicnQjEWbzjicIJlYYleQzJRWN0XooP8sgRj5mE57jialFibw/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;数据模型&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;用户，分类，商品SPU,SKU，订单，支付&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;评价，收藏，购物车，联系地址&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;页面&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;首页，分类商品推荐页，搜索商品列表页&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;商品详情页，用户订单列表页&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;操作&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;缓存数据&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全量永久缓存：用户，分类，商品，商品SKU库存，推荐&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;部分临时缓存：大量的临时推荐位，人工干预内容，相关商品，置顶评论等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;页面缓存：首页，搜索页，商品详情页&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.3 缓存设计，最佳场景，永久缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23586744639376217&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;513&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7DibDP1Lk5UG4lu2e6riaVCgaEKCwXj4W4SdOibf0iaghgxiayRaUypXnpJQ/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21456692913385828&quot; data-type=&quot;jpeg&quot; data-w=&quot;508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7f4uuDowuEK4bFjtQqAfJ6YO6sqC8ZPgqnMIS6M0gqwicwAp6VOPTniaQ/640?wx_fmt=jpeg&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据只读，极少更新&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;配置类，全局共享数据（置顶帖）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;后台定时任务生成的数据（推荐内容）&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据占用空间有限&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单个key的内容比较小（用户信息）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;总数量比较有限（商品信息）&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据结构简单，容易快速查找&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;key-string 直接得到完整数据&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;key-hash 易于部分数据读取和更新&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;key-list 双向队列&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;key-sortedset 有序集合，索引排序&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44840525328330205&quot; data-type=&quot;jpeg&quot; data-w=&quot;533&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7xH0R4dB5LaXrAmUgVre3CXVLBNOyTJ7KqicLmUq54uyO4eoUWFRtNMg/640?wx_fmt=jpeg&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.4 缓存设计，较好场景，临时缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44150110375275936&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia70jw2TtIOBoFd9evLbOcmviaibUT1EVkAgsesWztAyFGX01sAYJGOMXVQ/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据读多写少，读取速度慢&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户、内容数据，如：用户信息，帖子信息等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存快过数据库&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据占用空间较大&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;保证较高的命中率，90%以上&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存容量较大，过期/失效的缓存减少，命中率提高&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;更新的频率降低，命中率提高&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;更新的时候主动更新缓存，命中率提高&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;合适的缓存淘汰策略，FIFO/LRU/LFU/TTL/RANDOM&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.5 缓存设计，特殊场景，性能优先&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7737226277372263&quot; data-type=&quot;jpeg&quot; data-w=&quot;411&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia71NRre8ia7161Tlc3y0Ht0IGyISnj5JsPaBQLI55xInGLkfZITRkZL8Q/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;读写过于频繁的时候&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;帖子浏览量更新，更新到缓存，定时更新到数据库，读取数据库+缓存&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;秒杀时，商品库存扣减，隔离数据库的压力&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;排序方式太多，索引效率下降的时候&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据表分拆太细，连表查询效率低的时候&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.6 缓存设计，不适合场景，成本超过收益&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;内容更新太频繁，命中率太低&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户的呼吸状态如果也缓冲起来，那么这时候的用户信息缓存命中率就太低了&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;完全散列随机的key值遍历查找，缓存无法重复利用&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据写入超过读取次数&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;系统自身性能很好&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;系统访问量很有限&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.7 总结，系统中的缓存设计&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;提高缓存命中率&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存永不过期，缓存空间充足，数据直接写入和更新缓存&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;扩大缓存容量，减少缓存过期或者失效的概率（内存+SSD文件）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;规划缓存容量&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;优先把永久缓存的内容放进去&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;再把读多写少的内容放进去&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;再有富余容量，把实时性要求不高的内容放进去&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;大容量使用简单，风险高；多实例连接多，操作复杂，可用性好&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;缓存性能优势&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;内存缓存 &amp;gt; 数据库 &amp;gt; 硬盘文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;进程内数据 &amp;gt; 本地缓存 &amp;gt; 远程数据&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存数据读取后运算后的复杂结果&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4 总结，缓存为王&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;高性能程序设计与缓存的效果（连蒙带猜）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5054466230936819&quot; data-type=&quot;jpeg&quot; data-w=&quot;1836&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia73rhUdTreiaJYsC7tsg2vQbibPUPFfpZ9HuLqHBib6nfZvIzdDE3ibcicPyg/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果没有缓存的情况下，100亿的客户端请求，最后落到数据服务器上会有上万亿的IO操作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;老司机箴言：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;设计时，分层分级。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;执行时，少查少写少依赖，Less is more。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;别让硬盘抗性能，别让内存保持久，别让网线抗稳定。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;高性能&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;程序设计的漫漫求索之路&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据结构和算法（应用优化）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数组、链表、集合、哈希表、二叉树等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;排序算法：冒泡、快速、归并等&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;并发编程的问题（增加CPU）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;共享变量的读写，线程安全性问题&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据存储、依赖服务等瓶颈点&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;分布式系统设计（增加服务器）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;有状态服务高可用和数据一致性问题&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全局、中心节点的可靠性问题&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;缓存优化（空间换时间）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;精细化分析和设计，提高命中率和可用性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;监控工具、运维工具等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;总结，缓存为王&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;高性能程序设计，使用缓存来优化可能会是第一选择。只是，方法虽然简单，过程还是曲折的。每一次缓存设计，都还是要针对具体场景和需求，制定最合适的方案，要考虑的地方也还是有很多。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;速度、成本的平衡（开发速度、执行效率，人力成本、服务器成本）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;空间、时间的平衡&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;复杂、简单的平衡&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;设计方案，没有最优，只有最合适&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;高性能程序系统，一个动态演进的过程&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7492163009404389&quot; data-type=&quot;jpeg&quot; data-w=&quot;319&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnqxHa2Fnx0D9iaHERnBNbEkn9iccZhdia7icsug2ypfrBCuibqptL2xH6v4jSkNgYdedaNmiakyEuIqzqmIOwwaa9Cg/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果喜欢这篇文章，欢迎评论区提问&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;# 有料程序员 # 直播&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;对谈鹅厂T10女工程师：&lt;/span&gt;&lt;span&gt;从0到1转程序员&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;2.3342592592592593&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jiboYA4jZECwRT4jVjja9MHicWO5XhD57zBYZgbS71SuTly3GRicd8UgxwfykGNg3KSbP0mib6GsmhR5hQvBuOiaafA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;点击预约，get开播提醒&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_live_iframe&quot; data-pluginname=&quot;videosnap&quot; data-headimgurl=&quot;https://wx.qlogo.cn/finderhead/I7awtksbibjQe7RZAy84xESOBAfIZ8xQ9ApXt4uTe8po/0&quot; data-username=&quot;v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder&quot; data-nickname=&quot;腾讯程序员&quot; data-desc=&quot;将在12月01日 19:30 直播&quot; data-intro=&quot;对谈鹅厂T10女工程师：从0到1转程序员，兼顾技术和爱好，一直做自己喜欢的事&quot; data-noticeid=&quot;finderlivenotice-v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder-1638242262850720-131098678&quot; data-type=&quot;live&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;往期回顾：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MTEwNTM0ODI0MQ==&amp;amp;mid=2653470195&amp;amp;idx=1&amp;amp;sn=e7fb2e237cefc95c456099799678d46c&amp;amp;chksm=7201ac0d4576251b0dc3cebebd3280021e34926cec30be5223d494ae8010a376323fb4e67d38&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;什么是产品经理？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;em&gt;&lt;span&gt;什么是产品经理？&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;em&gt;&lt;span/&gt;&lt;/em&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MTEwNTM0ODI0MQ==&amp;amp;mid=2653470177&amp;amp;idx=1&amp;amp;sn=7038783ddf8e97907fd2767a1da525e1&amp;amp;chksm=7201ac1f45762509877974632d2d6227e20530ec8a9d80b523b5e24fe373855de35f637b0edc&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一个产品经理的自我修养&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;em&gt;&lt;span&gt;一个产品经理的自我修养&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;em&gt;&lt;span/&gt;&lt;/em&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MTEwNTM0ODI0MQ==&amp;amp;mid=2653470150&amp;amp;idx=1&amp;amp;sn=1663976038f1174a724a8c8d9ed4df59&amp;amp;chksm=7201ac384576252e13608483410d16e222e77657fb3243acaa09a4d22747c10534c9d78ff120&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;1、程序员桌面装备大比拼&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;em&gt;&lt;span&gt;程序员桌面装备大比拼&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MTEwNTM0ODI0MQ==&amp;amp;mid=2653470135&amp;amp;idx=1&amp;amp;sn=9f36c87c4b9bf6f7ad4f686b2b70ea93&amp;amp;chksm=7201ac494576255fd79e7f080eea24d7d47ea46cb4eee9d5bc92eaad1770974c7dac16531e84&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;基于低代码平台，如何设计平台级组件开发方案？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;em&gt;&lt;span&gt;基于低代码平台，如何设计平台级组件开发方案？&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;点个关注，我们下期再见👋&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MTEwNTM0ODI0MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/jiboYA4jZECzSZia6ibNVnMpbXNQzgBnPgv4fdL8zXpWaX0DaUs1Dvus2QZ21MLohiaaxnFjKSoT8KN4icmh0xSibJBw/0?wx_fmt=png&quot; data-nickname=&quot;腾讯大讲堂&quot; data-alias=&quot;TX_DJT&quot; data-signature=&quot;打造互联网人的高光时刻，带你深入前沿，共同学习成长。&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>78f0639fe46925a9de8b082e6077358a</guid>
<title>面试官问我：你做事仔细吗？</title>
<link>https://toutiao.io/k/xhajcrg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUzNjAxODg4MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlic1g1jGjiaBS1uNgC9uX4jDFicf7wBxXh5ic9WicdiaDq0qtNYgXjqOWZtpXqnXVibuZlfn7gzrWPObnEDQ/0?wx_fmt=png&quot; data-nickname=&quot;编程一生&quot; data-alias=&quot;cloudrise1986&quot; data-signature=&quot;致力于写大家都能看懂的、有深度的技术文章&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;引子&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;2015年的时候，我去58面试。因为有前同事的介绍，面试官不用问就对我各方面能力什么的都很了解。本身那个同事级别就比较高(如果我面试通过，大概他大概是我领导的样子)。所以过程中可以看出，我去面试前级别什么的都定好了。面试就是走个过场。&lt;/p&gt;&lt;p&gt;其中一个面试官，级别应该是我那位同事的领导。就问我：“因为咱们是做金融的，需要非常仔细，你做事仔细吗？”当时我只要回答是或者否就行了。但是现在想来，是否仔细不是一道判断题，而是一道思考题。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7870813397129187&quot; data-type=&quot;jpeg&quot; data-w=&quot;418&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlibGkdkyCWQXyBjO9zkYDTGoP1MVxDibm4NO3klNTPBnLjrMB3Fp6gQfA0DSFOML5ib07pBZ8PuBNdvQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;对仔细的意识&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;领导这个问题听起来无关痛痒，谁遇到这种送分题不会回答一句：“我很仔细。”呢？而我就是因为这个问题，最后没有去58。因为这不仅是一道题，而是领导向我透露的他们团队的生存指南。不是送分题，是送命题。&lt;/p&gt;&lt;p&gt;没去58的原因之一是那时候我做事还很没有章法，这点从写的文章也可以看出来：结构是乱的。因为这道题，我打怵了。&lt;/p&gt;&lt;p&gt;个人之见：中国互联网技术人员整体而言对质量的意识要落后与传统软件技术人员、落后与国外相同领域的技术人员。这种意识的不足和中国互联网的发展历程有关系。中国互联网过去十几年发展太快。早几年讲究：唯快不破、大力出奇迹、快速试错。多数产品如昙花一现，还没有到达需要做好的阶段就完成了整个生命周期。&lt;/p&gt;&lt;p&gt;从0到1的项目，评价技术的标准是：会做、做得快。十年前这种意识还是可以找到不错工作的，可以进入互联网的下半场，这种意识是非常危险的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.04&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlibGkdkyCWQXyBjO9zkYDTGoP06DCA1MicsP2Ae2wMAWQLUtOkGMVkDBXAj7CddFVsvreDL4HiatbHnQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;对于意识对人的影响，举个别的例子：三观正对人的影响。&lt;br/&gt;我妈是有良心的医生。穷人来看病，几块钱能治好的病不会给他们开贵的药。贵的药，其实医生是有提成的。那么多年我妈也抱怨。说她在医院里业务能力强，但是挣钱不多。一个科室的，其他人早都从医院分的房子搬走，换更好的房子了。但是，她也很清楚骨子里的正让她赢到了最后。&lt;/p&gt;&lt;p&gt;她培养出的孩子还都不错，我哥山大毕业，现在当了个小县长。虽然我们兄妹彼此看不上，老死不相往来。但是，每次回老家看我爸，一下火车站就能看到我哥对县里规划的广告。火车站对面就是“互联网小镇”。他还是想为大家做点事情的。&lt;/p&gt;&lt;p&gt;我妈在世的时候经常欣慰的说：论培养孩子，那些早早换了更好房子的同事都不如她。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;440&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlibGkdkyCWQXyBjO9zkYDTGosK11WlO9CQrYY3g4tEILnYUZ74lvWzprdwMUcfjvZsa7JSV0eh86Ig/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;意识最难培养，除非遇到什么大事，突然顿悟了。不然，遇到思想不到位的员工，是一件很有挑战的事情。领导对下属要：正其心、立其志、用其长。正心最难，如果是别人意识上的盲区，可能说了很多人家就是不明白、没感触。说多了还可能会引起抱怨。&lt;/p&gt;&lt;p&gt;回归主题说对仔细的意识。从之前&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486115&amp;amp;idx=1&amp;amp;sn=97e04dda5480582a4c6b3a47e0f6a26b&amp;amp;chksm=fafde00dcd8a691b3581cf245e526962d4c6c7e7e57d1d7bc64a66a2a82ea8c4c632e83d060a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《进行一个sql优化需要做哪些准备？-Metadata Lock和online DDL》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《进行一个sql优化需要做哪些准备？-Metadata Lock和online DDL》&lt;/a&gt;和&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485770&amp;amp;idx=1&amp;amp;sn=4c7513728e0de396f9826897dd48d2d2&amp;amp;chksm=fafde3e4cd8a6af2b0fc08f65d57792658ee945f3f547198c84852c3744c931dae773422a8ca&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《在别人写的代码上做修改我是这样保证正确性》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《在别人写的代码上做修改我是这样保证正确性》&lt;/a&gt;两篇文章的反馈来看，一些朋友还是没有意识到写的事情是必要的步骤。我就打算隔一段时间出篇这样的文章，耳濡目染，把这颗种子种下去。不时的浇水，说不定哪天就发芽了呢。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;对仔细的理解&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;针对仔细不同的人有不同的理解。在很多事情上，我使用“扣数字”法，来保证流程规范性和传达的有效性。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;保证流程规范性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;举个例子：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486115&amp;amp;idx=1&amp;amp;sn=97e04dda5480582a4c6b3a47e0f6a26b&amp;amp;chksm=fafde00dcd8a691b3581cf245e526962d4c6c7e7e57d1d7bc64a66a2a82ea8c4c632e83d060a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《进行一个sql优化需要做哪些准备？-Metadata Lock和online DDL》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《进行一个sql优化需要做哪些准备？-Metadata Lock和online DDL》&lt;/a&gt;里提到，我要进行生产变更，加个索引。生产变更前后都发生了什么呢？&lt;/p&gt;&lt;p&gt;从公司流程上，生产变更要提工单，层层审批和部门架构师把关，相关团队备注。之后开始操作的这一天，我拉了一个群，在群里发了一个消息：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@所有人 &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;大家好，XX工单将于今天下午&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;点&lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt;分&lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;秒执行（只有&lt;span class=&quot;code-snippet__number&quot;&gt;14&lt;/span&gt;分钟，请务必遵守时序），&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;请大家按照下面时序进行&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@A 4点34分  在此群里扣 1(代表这段时间已经完全投入在了工单执行上)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@B 发完工单变更通知扣2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@A 执行完成扣3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@D 检查业务正常，没有问题扣4，有问题报问题&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@B 使用cloud进行查询确认，没有问题扣5，有问题报问题&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@F 使用X进行查询，没有问题扣6，有问题报问题&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;以上严格顺序执行，@G @H 以上执行完后辛苦确认业务情况，有问题及时反馈&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlibGkdkyCWQXyBjO9zkYDTGoAxHMplvsYb4bVcDv3s9TF4CC6e5VLrMSQI7C1VicGVP1ibMTCkBCRLTg/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;保证传达有效性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;举个例子，公司让我负责整个部门的一项工作，我从各个团队征集了负责人来完成工作。拉了一个群，先简单再次介绍事情背景拉齐认知，同步相关资料。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@所有人 &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;请大家于XX月XX日前完成XX工作，&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;有任何技术问题可以咨询 XX和XX 两位技术专家。收到请扣&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;有效时间内没有回复的，轻量级沟通，确保所有人都回复。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlibGkdkyCWQXyBjO9zkYDTGoa4IDLKN0dQcShibu3O1lbtrKyTtNUo7k3iakXAPe3b1FC9weWZPrBjjQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;正其心、立其志、用其长。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;往期推荐&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>585b16aa1b5bfd62a786620a6b7623f5</guid>
<title>Java 中的监控与管理原理概述</title>
<link>https://toutiao.io/k/iug5i04</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;/p&gt;&lt;p&gt;这篇文章是 &lt;strong&gt;Java 性能分析监控与优化&lt;/strong&gt;系列的第一篇文章，原本是计划系统的介绍 Java 性能分析方式和流行的监控工具，但是提笔之后意识到，只介绍分析方式和监控工具过于浅尝辄止了。如果只会使用某个工具而不知道背后的实现原理，总觉得有种陌生感，我想你们也是一样，所以多了这篇文章。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23076923076923078&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4lfok2icUkibSgPKgQJzvBM2etEUSjveiaQicDsO8r5jW6Aia6xVyltcE6WKEWJJWZf2Gz159fW3gSB8yxsh4ic60PTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1326&quot;/&gt;&lt;figcaption&gt;文章目录&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;Java SE 监控管理功能&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;这篇文章介绍 Java Standard Edition（Java SE）平台提供的监控和管理技术 - &lt;strong&gt;JMX&lt;/strong&gt;（Java Management Extensions） 技术。&lt;/p&gt;&lt;p&gt;Java SE 平台本身就提供了用于监控和管理服务的实用性功能模块，按功能来说主要分为下面四类：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Java 监控和管理 API&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Java 虚拟机检测&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Java 管理扩展技术（JMX）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Java 监控和管理的工具&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这篇文章会介绍这四个部分的相关知识，旨在了解 Java SE 监控与管理的相关功能，对其中的相关概念有个理解。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Java 监控和管理 API&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;Java SE 中包含了用于监控和管理的（&lt;code&gt;java.lang.management&lt;/code&gt;）API，通过这些 API 可以实现应用程序的自我监控，此 API 主要提供了以下信息的访问：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;类加载相关。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JVM 相关，如运行时间、系统环境变量、用户输入参数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;线程相关，如线程状态，线程的统计信息、线程的堆栈等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内存使用情况。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GC 情况。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;死锁检测。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;操作系统信息。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下图是 Java 17 中的 &lt;code&gt;java.management&lt;/code&gt; 模块。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4524793388429752&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4lfok2icUkibSgPKgQJzvBM2etEUSjveiaQc6PKDOTepFLVVVB6f2iavYhDvflBQtf4ch9XGSo6Th0Ip02VwCB5zIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1936&quot;/&gt;&lt;figcaption&gt;java.lang.management&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;JConsole 就是通过访问这些管理 API 提供的数据，绘制了监控的界面版。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Java 虚拟机监测&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;上面说到 Java SE 中已经内置了开箱即用的监控和管理功能，通过这些功能可以实现程序的自我监测，Java 默认已经实现了对 Java 虚拟机相关信息的监测，在 Java 监控和管理 API 部分也列举了 API 可以监测的部分内容，那么怎么使用呢？&lt;/p&gt;&lt;p&gt;下面通过一个简单的示例，演示如何通过监控管理 API 获取系统信息、编译器信息、内存信息以及垃圾收集器信息。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; com.wdbyte;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.lang.management.CompilationMXBean;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.lang.management.GarbageCollectorMXBean;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.lang.management.ManagementFactory;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.lang.management.MemoryMXBean;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.lang.management.MemoryManagerMXBean;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.lang.management.MemoryUsage;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.lang.management.OperatingSystemMXBean;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.util.List;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.util.stream.Collectors;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JavaManagement&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();&lt;br/&gt;        String osName = operatingSystemMXBean.getName();&lt;br/&gt;        String osVersion = operatingSystemMXBean.getVersion();&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; processors = operatingSystemMXBean.getAvailableProcessors();&lt;br/&gt;        System.out.println(String.format(&lt;span&gt;&quot;操作系统：%s，版本：%s，处理器：%d 个&quot;&lt;/span&gt;, osName, osVersion, processors));&lt;br/&gt;&lt;br/&gt;        CompilationMXBean compilationMXBean = ManagementFactory.getCompilationMXBean();&lt;br/&gt;        String compilationMXBeanName = compilationMXBean.getName();&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;编译系统：&quot;&lt;/span&gt; + compilationMXBeanName);&lt;br/&gt;&lt;br/&gt;        MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();&lt;br/&gt;        MemoryUsage heapMemoryUsage = memoryMXBean.getHeapMemoryUsage();&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; max = heapMemoryUsage.getMax();&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; used = heapMemoryUsage.getUsed();&lt;br/&gt;        System.out.println(String.format(&lt;span&gt;&quot;使用内存：%dMB/%dMB&quot;&lt;/span&gt;, used / &lt;span&gt;1024&lt;/span&gt; / &lt;span&gt;1024&lt;/span&gt;, max / &lt;span&gt;1024&lt;/span&gt; / &lt;span&gt;1024&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;        List&amp;lt;GarbageCollectorMXBean&amp;gt; gcMXBeans = ManagementFactory.getGarbageCollectorMXBeans();&lt;br/&gt;        String gcNames = gcMXBeans.stream()&lt;br/&gt;            .map(MemoryManagerMXBean::getName)&lt;br/&gt;            .collect(Collectors.joining(&lt;span&gt;&quot;,&quot;&lt;/span&gt;));&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;垃圾收集器：&quot;&lt;/span&gt; + gcNames);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行时指定了内存为 100MB（&lt;code&gt;-Xms100M -Xmx100M&lt;/code&gt;），得到如下结果。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;操作系统：Mac OS X，版本：11.6，处理器：12 个&lt;br/&gt;编译系统：HotSpot 64-Bit Tiered Compilers&lt;br/&gt;使用内存：2MB/100MB&lt;br/&gt;垃圾收集：G1 Young Generation,G1 Old Generation&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;:::tip 注意&lt;/p&gt;&lt;p&gt;细看代码可以发现其中很多类都是以 &lt;strong&gt;MXBean&lt;/strong&gt; 结尾，这是什么意思呢？&lt;/p&gt;&lt;p&gt;:::&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Java 管理扩展技术（JMX）&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;在 Java 虚拟机监测中的代码示例中，可以看到很多命名以 &lt;strong&gt;MXBean&lt;/strong&gt; 结尾的类，这里已经涉及到了 &lt;strong&gt;JMX&lt;/strong&gt;（Java Management Extensions） 技术。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;JMX&lt;/strong&gt; 技术提供了一种简单、标准的方式来管理资源，如操作系统、虚拟机信息、内存状态、线程信息等，这些统称为被管理的资源。而且 &lt;strong&gt;JMX&lt;/strong&gt; 是可以动态的，所以可以使用 &lt;strong&gt;JMX&lt;/strong&gt; 技术来监测和管理各种资源。可以使用 JMX 技术来监测 Java 虚拟机状态，也可以使用 &lt;strong&gt;JMX&lt;/strong&gt; 技术构建自己的需要管理的资源。&lt;/p&gt;&lt;p&gt;JMX 技术只有资源定义那么简单吗？不是的。JMX 规范了 Java 中资源定义的方式、资源管理的方式、监控和管理的体系结构、具体实现的设计模式、监控和管理的相关 API 以及&lt;strong&gt;用于网络的远程监控服务&lt;/strong&gt;（RMI），这一系列功能统称为 JMX 技术。是 Java SE 平台的标准部分。&lt;/p&gt;&lt;p&gt;上面多次提到了&lt;strong&gt;管理资源&lt;/strong&gt;，那么如何定义一个资源呢？JMX 技术给出了资源定义的体系结构和设计模式，在 &lt;strong&gt;JMX&lt;/strong&gt; 中，通过定义一个被称为 &lt;strong&gt;MBean&lt;/strong&gt; 或 &lt;strong&gt;MXBean&lt;/strong&gt; 的 Java 对象来表示要管理指定的资源，资源定义的 Java 类名必须以 &lt;strong&gt;MBean&lt;/strong&gt; 或 &lt;strong&gt;MXBean&lt;/strong&gt; 结尾。&lt;/p&gt;&lt;p&gt;下图是 Java 17 中的以 MXBean 结尾的资源定义类，通过命名可以看出每个类代表了什么资源。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6984352773826458&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4lfok2icUkibSgPKgQJzvBM2etEUSjveiaQKdQ0GUC332WiaI1GicmGgicpR3JNNCbVP8eIZSpUohPyyw98622QWH5jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1406&quot;/&gt;&lt;figcaption&gt;Java 中的 MXbean&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这篇文章主要是介绍 Java SE 中的监控与管理功能，让大家对 Java 中的监控与管理背后的原理和概念有一个具体的认识，所以 MBean 和 MXBean 的具体设计实现方式不是这篇文章的重点，这里不过多介绍，会放到下一篇独立的 JMX 技术文章中介绍。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Java 监控和管理的工具&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;JMX 技术中提到 JMX 不仅提供了监控和管理的 API ，还提供了用于网络远程管理的服务，可以使用 JMX 相关监控管理工具，通过网络远程连接到正在运行 Java 虚拟机，监控其运行状态，Java 中集成的 &lt;code&gt;jconsole&lt;/code&gt; 就是这样一款工具。&lt;/p&gt;&lt;p&gt;本地随意启动一个可以持续运行的 Java 程序用作被监测对象，如果你已经配置好 Java 环境变量，可以直接通过 &lt;code&gt;jconsole&lt;/code&gt; 启动工具。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt; $&lt;/span&gt;&lt;span&gt; jconsole&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动后的 &lt;code&gt;jconsole&lt;/code&gt; 已经列出了本地正在运行的 Java 程序，选择自己想要监测的进行进行监测。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8316993464052288&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4lfok2icUkibSgPKgQJzvBM2etEUSjveiaQoa4NSoa7KMJVUeWqT9ZWV9FKRjPAarcTx83HasmFS8202CiaNicvpPFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1224&quot;/&gt;&lt;figcaption&gt;Jconsole 界面&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;连接成功后可以看到当前 Java 进程的资源占用情况。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8017031630170316&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4lfok2icUkibSgPKgQJzvBM2etEUSjveiaQoXvAGqW5JmqGyan75ofHPL0qrODAlbqcJSLtAkXaJrsHsBl0HIsAuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1644&quot;/&gt;&lt;figcaption&gt;JConsole 监控&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在 MBean 页面中，可以看到各种已经被定义的资源的具体情况。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8017031630170316&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4lfok2icUkibSgPKgQJzvBM2etEUSjveiaQxJ3FukvO4icMK9icTTB5Wn0kJy2KtucQP4RfpA9IeBxPGql4MrZNMPicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1644&quot;/&gt;&lt;figcaption&gt;Jconsole MBean 情况&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Jconsole 是一款强大的图形界面 JMX 管理工具，不仅可以连接本地 Java 程序，还可以通过网络监控远程的 Java 程序运行状态，不过不是此篇文章重点，不在详细描述。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;https://docs.oracle.com/en/java/javase/17/jmx/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://docs.oracle.com/en/java/javase/17/management/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;span&gt;---- E&lt;/span&gt;&lt;span&gt;ND ----&lt;/span&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Hello world : ) &lt;span&gt;这篇文章就到这里了，&lt;/span&gt;我是阿朗，点赞和在看，动力无限，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;求关注&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI1MDIxNjQ1OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/4lfok2icUkibQlzFGPibM1jmICzZmtYzRGMpP7suTs20SQKjwqgFWKKPcmAwzzeDZHE3fuhodU4oZsKQ3IibqYmibhg/0?wx_fmt=png&quot; data-nickname=&quot;程序猿阿朗&quot; data-alias=&quot;wdbyte&quot; data-signature=&quot;Hello world :) 认认真真写个文章。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-fileid=&quot;100000984&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5676567656765676&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4lfok2icUkibTKFUljxMwu3Z5GaOxz5yzbvuXh3ibOm8Iq6uMiaELDSBzvywdZMpLFl3WF8Pd0ytFzlzKTouM3ayoA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;606&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6f31b3cb1d3be790fa8c10bfe7249b78</guid>
<title>透过一个编译报错，总结两个 Go 程序编译的重要知识</title>
<link>https://toutiao.io/k/iiw9cac</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;20&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;原文忘记标注原创，补发一篇，各位海涵~！&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;最近调研了一下某个做 APM 的厂商的 Go 探针程序，说是引入一个包，全程不用再修改其他代码就能在项目里引入探针。&lt;/span&gt;&lt;span&gt;没想到在刚引入包试着构建了一下就翻车了。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;main.go:10:2: build constraints exclude all Go files in /xxx/github.com/xxx/agnet/xxxx&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译器编译的时候直接排除了某个包下的所有文件，啥意思呢？就是这个包下没有能在当前构建环境下构建的 Go 文件。猜测应该是这个包源码的构建标签上声明了不允许在Mac 环境下构建。打开源码看了看，确实是，所有文件的构建标签都是这么声明的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// +build linux&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// +build amd64&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个叫做条件编译，或者约束编译。那想在Mac下编译linux上才能运行的执行文件该怎么办呢？Go 里边还支持一个特性叫做交叉编译，就是干跨平台编译这个事儿的。具体怎么用呢，比如这个例子里是需要在Mac环境下编译能在Linux系统amd64架构下运行的执行文件，就得酱婶进行编译：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CGO_ENABLED=0  GOOS=linux  GOARCH=amd64  go build main.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过我后来想研究下为啥不让在 Mac 上编译，看了看这个包的探针是用CGO实现的调用了linux系统下的一个C语言实现的工具命令。看到这我已经不想继续研究这个包了，那么为了让此篇文章水的不那么明显：)，接下来咱们就把Go语言的交叉编译和条件编译这两个知识点再复习一遍吧。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;交叉编译&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;交叉编译是用来在一个平台上生成另一个平台的可执行程序&lt;/strong&gt;。Go 的命令集是原生支持交叉编译的，使用方法也很简单，比如上面已经演示过的&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CGO_ENABLED=&lt;span&gt;0&lt;/span&gt;  GOOS=linux  GOARCH=amd64  &lt;span&gt;go&lt;/span&gt; build main.&lt;span&gt;go&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;参数说明&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;CGO_ENABLED&lt;/strong&gt; : CGO 表示golang中的工具，CGO_ENABLED 表示CGO禁用，交叉编译中不能使用CGO的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;GOOS&lt;/strong&gt;: 目标平台&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;mac 对应  &lt;strong&gt;darwin&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;linux 对应 &lt;strong&gt;linux&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;windows 对应 &lt;strong&gt;windows&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;GOARCH&lt;/strong&gt; ：目标平台的体系架构【386，amd64,arm】, 目前市面上的个人电脑一般都是amd64架构的&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;386 也称 x86 对应  32位操作系统&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;amd64 也称 x64 对应 64位操作系统&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;arm 这种架构一般用于嵌入式开发。比如 Android ， IOS ， Win mobile , TIZEN 等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解完这几个参数后，我们在看下Mac、Linux、Windows这三个平台上执行交叉编译的例子，Windows的因为家境贫寒，条件不允许我没有试过，命令网上找的，如果有错误还请同学们在评论里留言帮我改正一下。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Mac  下编译， Linux  或者 Windows 的可执行程序&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; linux可执行程序&lt;/span&gt;&lt;br/&gt;CGO_ENABLED=0  GOOS=linux  GOARCH=amd64  go build main.go&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Windows 可执行程序&lt;/span&gt;&lt;br/&gt;CGO_ENABLED=0 GOOS=windows  GOARCH=amd64  go  build  main.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Linux 下编译 ， Mac 或者 Windows 下去执行&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# Mac 平台可执行程序&lt;/span&gt;&lt;br/&gt;CGO_ENABLED=0 GOOS=darwin  GOARCH=amd64  go build main.go&lt;br/&gt;&lt;span&gt;# Windows可执行程序&lt;/span&gt;&lt;br/&gt;CGO_ENABLED=0 GOOS=windows  GOARCH=amd64  go build main.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Windows 下执行 ， Mac 或  Linux 下去执行&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要写一个批处理程序，在里面去设置，因为windows 下的 terminal 不支持shell , 这跟 Mac 和 Linux下的有点不同&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Mac 下执行&lt;/span&gt;&lt;br/&gt;SET  CGO_ENABLED=0&lt;br/&gt;SET GOOS=darwin&lt;br/&gt;SET GOARCH=amd64&lt;br/&gt;go build main.go&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; Linux 去执行&lt;/span&gt;&lt;br/&gt;SET CGO_ENABLED=0&lt;br/&gt;SET GOOS=linux&lt;br/&gt;SET GOARCH=amd64&lt;br/&gt;go build main.go&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;条件编译&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;交叉编译只是为了能在一个平台上编译出其他平台可运行的程序，Go 作为一个跨平台的语言，它提供的类库势必也是跨平台的，比如说程序的系统调用相关的功能，能根据所处环境选择对应的源码进行编译。让编译器只对满足条件的代码进行编译，将不满足条件的代码舍弃，这就是另外一个概念叫---条件编译。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Go 中，也称之为Build Constraints 编译约束，添加编译约束的方式有2种分别：&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;编译标签&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译标签是一种通过在源码文件顶部添加注释，来决定文件是否参与编译的约束方式。其格式如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// +build &amp;lt;tags&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;code&gt;// +build&lt;/code&gt;的下一行必须是空行，否则会被解析为包注释。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// +build linux&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// main package comment&lt;/span&gt;&lt;br/&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;tags说明：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;以空格分开表示 AND&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以逗号分开表示 OR&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;!表示 NOT&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;标签可以指定为以下内容：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;操作系统，环境变量中&lt;code&gt;GOOS&lt;/code&gt;的值，如：&lt;code&gt;linux&lt;/code&gt;、&lt;code&gt;darwin&lt;/code&gt;、&lt;code&gt;windows&lt;/code&gt;等等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;操作系统的架构，环境变量中&lt;code&gt;GOARCH&lt;/code&gt;的值，如：&lt;code&gt;arch64&lt;/code&gt;、&lt;code&gt;x86&lt;/code&gt;、&lt;code&gt;i386&lt;/code&gt;等等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用的编译器，&lt;code&gt;gc&lt;/code&gt;或者&lt;code&gt;gccgo&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是否开启CGO，&lt;code&gt;cgo&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;golang版本号：比如Go Version 1.1为&lt;code&gt;go1.1&lt;/code&gt;,Go Version 1.12版本为&lt;code&gt;go1.12&lt;/code&gt;，以此类推。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其它自定义标签，通过&lt;code&gt;go build -tags&lt;/code&gt;指定的值。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，编译条件为&lt;code&gt;(linux AND 386) OR (darwin AND (NOT cgo))&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// +build linux,386 darwin,!cgo&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外一个文件可以有多个编译约束，比如条件为&lt;code&gt;(linux OR darwin) AND amd64&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// +build linux darwin&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// +build amd64&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以使用&lt;code&gt;ignore&lt;/code&gt;标签将一个文件从编译中排除。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// +build ignore&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;文件后缀&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了编译标签，第二种添加编译约束的方法是通过源码文件的文件名实现的，这种方案比构造标签方案更简单。编译器也会根据文件后缀来自动选择编译文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$filename_&lt;/span&gt;&lt;span&gt;$GOOS&lt;/span&gt;.go&lt;br/&gt;&lt;span&gt;$filename_&lt;/span&gt;&lt;span&gt;$GOARCH&lt;/span&gt;.go&lt;br/&gt;&lt;span&gt;$filename_&lt;/span&gt;&lt;span&gt;$GOOS_&lt;/span&gt;&lt;span&gt;$GOARCH&lt;/span&gt;.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;$filename&lt;/code&gt;: 源文件名称。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;$GOOS&lt;/code&gt;: 表示操作系统，从环境变量中获取。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;$GOARCH&lt;/code&gt;: 表示系统架构，从环境变量中获取。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后缀的顺序记住不要颠倒，后缀中同时出现系统和架构名时，需要保持&lt;code&gt;$filename_$GOOS_$GOARCH.go&lt;/code&gt;的顺序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Go 的每个内置库里都有很多以不同系统名结尾的文件。下面是&lt;code&gt;Go&lt;/code&gt;的&lt;strong&gt;os&lt;/strong&gt;内置库源代码的部分截图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37962962962962965&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f58gZFA4VOb3ZpJqiacCTQ88TOb3MVpYa00jpU6AW1ITrH8ywib3ynIKich1Mo5Xw6XgyJkrZEvB0o6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;文件后缀添加编译约束&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;两种添加编译限制的方式该如何选择&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构建标签和文件名后缀在功能上是重叠的。比如，一个名为&lt;code&gt;mypkg_linux.go&lt;/code&gt;的文件，再包含构建标签&lt;code&gt;// +build linux&lt;/code&gt;会显得多余。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常来说，当只有一个特定平台需要指定时，我们选择文件名后缀的方式。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;mypkg_linux.&lt;span&gt;go&lt;/span&gt;         &lt;span&gt;// 只在 linux 系统编译&lt;/span&gt;&lt;br/&gt;mypkg_windows_amd64.&lt;span&gt;go&lt;/span&gt; &lt;span&gt;// 只在 windows amd 64位 平台编译&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相反，如果你的文件需要指定给多个平台或体系架构使用，或者你需要排除某个特定平台时，我们选择构建标签的方式。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 在所有类unix平台编译&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// +build darwin dragonfly freebsd linux netbsd openbsd&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 在非Windows平台编译&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// +build !windows&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个编译器报错，居然水了一篇文章....啊...（咳嗽声）引出来的交叉编译和条件编译（编译约束）这两个非常重要的知识点，其实这两个知识点在很早之前我也写过篇文章，这次相当于从实际遇到问题带出从头开始再分析一遍，希望大家能喜欢。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;参考链接&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;http://www.oskip.com/post/golang/golang-build/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://juejin.cn/post/6844903944808824845&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://mp.weixin.qq.com/s/Ys8o4arwIFYB6DPCdiGNNQ&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUzNTY5MzU2MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4pGhLz2xEbRFHnAQon2QLYgbBibCJo1ibJHesLWshPJeRibateRtAqkaf6BgjlbhYiaxHLq6Zu07CRPw/0?wx_fmt=png&quot; data-nickname=&quot;网管叨bi叨&quot; data-alias=&quot;kevin_tech&quot; data-signature=&quot;分享软件开发和系统架构设计基础、Go 语言和Kubernetes。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;扫码关注公众号「网管叨bi叨」&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0188679245283019&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4icJbGAQ8RjXUUVdUZsGADuMBVWePgn7tfrWjjHyc6b8kXTQ7Sdkp0QQFFK4mel5tniczqooMna1CA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;318&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;给网管个星标，第一时间吸我的知识 👆&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网管为大家整理了一本超实用的《Go 开发参考书》收集了70多条开发实践。去公众号回复【gocookbook】即刻领取！&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;觉得有用就点个在看&lt;/span&gt;&lt;span&gt;  👇👇👇&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6e89724d79e3c43117c3c8e66fb5807d</guid>
<title>使用哪些工具，可以提升 Python 项目质量？</title>
<link>https://toutiao.io/k/x4mnugi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;前记&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在编写项目时，都会对代码质量有一定的追求， 比如代码艺术、设计模式、 重构设计等等。但是一个良好 Python 项目除了程序员本身的代码质量能力之外， 还有系统设计和代码质量工具等等。不过由于每个系统的设计都会有一些不同， 系统设计需要程序员一定的经验， 需要跟着项目去一起成长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码质量工具可以都抽离出来，应用到每个项目中， 本文则是我对这些代码质量工具的简要使用总结。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原文连接：&lt;span&gt;https://so1n.me/2021/08/10/%E4%BF%9D%E9%9A%9CPython%E9%A1%B9%E7%9B%AE%E8%B4%A8%E9%87%8F%E7%9A%84%E5%B7%A5%E5%85%B7&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;0.提交代码规范&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个团队或个人， 都必须要有一套自己的分支管理和提交代码规范， 对于分支管理， 一般会选用&lt;code&gt;git flow&lt;/code&gt;, 如果不太会使用， 前期可以使用git flow 备忘清单(https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html), 并且对于&lt;code&gt;master&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;等分支设置一些权权限。另外提交的信息也要有对应的规范， 比如本次提交属于哪种类型， 本次提交的功能是什么等等, 但是这个提交规范往往都没有一个标准， 只要团队和个人用的顺心， 能通过这些规范来减少开发矛盾， 复盘代码等等即可。我常使用的是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;git commit -m&lt;span&gt;&quot;&amp;lt;issue_id&amp;gt;:&amp;lt;file change&amp;gt;:&amp;lt;operating&amp;gt;:&amp;lt;info&amp;gt;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中每个字段代表的含义如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;issue_id: 代表一个issue的id, 在准备写功能或者修复一个bug时，都应该先提一个issue, 这个issue要详细的写明要修改什么，达到什么目的，然后再针对这个issue提交代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;file change: 代表文件的变化， 如增加， 删除， 修改;也有人使用&lt;code&gt;+,-，*&lt;/code&gt;来分别代表增加， 删除， 修改&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;operating: 代表本次代码变化, 具体有如下几种&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;feat：新功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;fix：修复bug&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;doc：文档改变&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;style：代码格式改变&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;refactor：某个已有功能重构&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;perf：性能优化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;test：增加测试&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;build：改变了build工具 如 grunt换成了 npm&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;revert：撤销上一次的commit&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;info: 简要的说明本次提交信息&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;1.项目环境管理-Poetry&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个项目最重要的就是跑起来， 而大家基本会同时在本地开发多个项目， 每个项目用到的环境都是不一样的， 所以就需要用到虚拟环境隔离。在Python中提供了一个叫&lt;code&gt;venv&lt;/code&gt;的虚拟环境管理包，他非常稳定， 同时功能也不是很多， 一般只用在服务器上， 对于本地开发来说， 都会想要更多的功能， 更加方便的对虚拟环境， 依赖包进行管理， Python包管理领域相关工具很多， 包括争议很大的&lt;code&gt;Pipenv&lt;/code&gt;, 我在经过多种尝试后， 觉得&lt;code&gt;Poetry&lt;/code&gt;比较好用, 坑也比较少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Poetry(https://python-poetry.org/)官网的简介就是让Python包安装和依赖管理变得容易，  我觉得&lt;code&gt;Poetry&lt;/code&gt;是最好用的, 他不止对包管理有很多的支持， 还有其他的拓展功能， 如方便的打包和发布， 脚本简写等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在第一次大多数的Python项目编写中， 基本上都是按以下流程进行：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1.安装对应的Python版本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2.通过&lt;code&gt;python -m venv &amp;lt;name&amp;gt;&lt;/code&gt;的方式在项目创建venv的虚拟环境&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3.在使用的过程中通过&lt;code&gt;python -m pip install &amp;lt;name&amp;gt;&lt;/code&gt;的方式安装依赖&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;4.在代码编写完毕后通过&lt;code&gt;python -m pip freeze &amp;gt; requirements.txt&lt;/code&gt;生成依赖文件&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;code&gt;Poetry&lt;/code&gt;则十分简单， 以下是&lt;code&gt;poetry&lt;/code&gt;的创建流程：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.1.创建项目&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过命令&lt;code&gt;poetry new&lt;/code&gt;就可以创建一个项目手脚架&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;➜ poetry new example&lt;br/&gt;➜ tree&lt;br/&gt;.&lt;br/&gt;└── example&lt;br/&gt;    ├── example&lt;br/&gt;    │   └── __init__.py&lt;br/&gt;    ├── pyproject.toml&lt;br/&gt;    ├── README.rst&lt;br/&gt;    └── tests&lt;br/&gt;        ├── __init__.py&lt;br/&gt;        └── test_example.py&lt;br/&gt;&lt;br/&gt;3 directories, 5 files&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到&lt;code&gt;Poetry&lt;/code&gt;创建了一个&lt;code&gt;example&lt;/code&gt;的项目， 生成了对应的文件夹以及包括项目信息的&lt;code&gt;pyproject.toml&lt;/code&gt;。如果在已有项目， 则通过命令&lt;code&gt;poetry init&lt;/code&gt;来初始化：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;➜  example poetry init&lt;br/&gt;&lt;br/&gt;This &lt;span&gt;command&lt;/span&gt; will guide you through creating your pyproject.toml config.&lt;br/&gt;&lt;span&gt;# 交互bash， 通过该交互bash填写项目信息。&lt;/span&gt;&lt;br/&gt;Package name [example]:  example&lt;br/&gt;Version [0.1.0]:  0.0.8&lt;br/&gt;Description []:  example project&lt;br/&gt;Author [so1n &amp;lt;qaz6803609@163.com&amp;gt;, n to skip]:  n&lt;br/&gt;License []:  &lt;br/&gt;Compatible Python versions [^3.7]:  &lt;br/&gt;&lt;br/&gt;Would you like to define your main dependencies interactively? (yes/no) [yes] no&lt;br/&gt;Would you like to define your development dependencies interactively? (yes/no) [yes] no&lt;br/&gt;Generated file&lt;br/&gt;&lt;span&gt;# 填写完项目信息后会生成以下内容， 之后会在刚才的路径创建pyproject.toml文件， 并写入。 &lt;/span&gt;&lt;br/&gt;[tool.poetry]&lt;br/&gt;name = &lt;span&gt;&quot;example&quot;&lt;/span&gt;&lt;br/&gt;version = &lt;span&gt;&quot;0.0.8&quot;&lt;/span&gt;&lt;br/&gt;description = &lt;span&gt;&quot;example project&quot;&lt;/span&gt;&lt;br/&gt;authors = [&lt;span&gt;&quot;Your Name &amp;lt;you@example.com&amp;gt;&quot;&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt;[tool.poetry.dependencies]&lt;br/&gt;python = &lt;span&gt;&quot;^3.7&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;[tool.poetry.dev-dependencies]&lt;br/&gt;&lt;br/&gt;[build-system]&lt;br/&gt;requires = [&lt;span&gt;&quot;poetry-core&amp;gt;=1.0.0&quot;&lt;/span&gt;]&lt;br/&gt;build-backend = &lt;span&gt;&quot;poetry.core.masonry.api&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Do you confirm generation? (yes/no) [yes] yes&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.2.创建虚拟环境&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Poetry&lt;/code&gt;默认使用系统默认的Python环境， 不过可以通过&lt;code&gt;poetry env use &amp;lt;python version&amp;gt;&lt;/code&gt;来指定Python版本， 之后就创建了一个虚拟环境了。默认的虚拟环境配置是存放在&lt;code&gt;/home/{user}/.cache/pypoetry&lt;/code&gt;目录的, 可以直接查看配置了解：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;➜  poetry config --list&lt;br/&gt;&lt;span&gt;# poetry使用的缓存目录的路径&lt;/span&gt;&lt;br/&gt;cache-dir = &lt;span&gt;&quot;/home/so1n/.cache/pypoetry&quot;&lt;/span&gt;&lt;br/&gt;experimental.new-installer = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;installer.parallel = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 默认值为true，如果执行 poetry install/poetry add时没有虚拟环境，就自动创建一个虚拟环境，设置为false的话，当虚拟环境不存在时，会将包安装到系统环境&lt;/span&gt;&lt;br/&gt;virtualenvs.create = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 默认值为false，设置为true的话，会在当前项目目录下创建虚拟环境&lt;/span&gt;&lt;br/&gt;virtualenvs.in-project = &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 虚拟环境的路径，默认路径 {cache-dir}\virtualenvs&lt;/span&gt;&lt;br/&gt;virtualenvs.path = &lt;span&gt;&quot;{cache-dir}/virtualenvs&quot;&lt;/span&gt;  &lt;span&gt;# /home/so1n/.cache/pypoetry/virtualenvs&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而默认的使用习惯（包括一些第三方包） 都是认为venv是创建在项目路径下的， 同时这也方便管理。&lt;code&gt;poetry&lt;/code&gt;可以通过如下命令进行更改后再创建虚拟环境，达到在项目路径下创建虚拟环境的效果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 更改配置&lt;/span&gt;&lt;br/&gt;➜ poetry config virtualenvs.in-project &lt;span&gt;true&lt;/span&gt; &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在虚拟环境创建好后可以通过&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;➜ poetry run &amp;lt;commod&amp;gt; &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来执行想要运行的命令或者调用Python包， 也可以通过&lt;code&gt;poetry shell&lt;/code&gt;启动一个被虚拟环境包裹的交互shell.&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.3.安装依赖&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虚拟环境创建好后， 就可以安装依赖了， 可以直接使用&lt;code&gt;poetry&lt;/code&gt;的&lt;code&gt;add&lt;/code&gt;命令安装依赖， 其中带有&lt;code&gt;--dev&lt;/code&gt;表示他是开发环境依赖包(开发环境依赖包和生成环境依赖包区分是很有益的)：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;➜ poetry add flask&lt;br/&gt;➜ poetry add pytest --dev &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装依赖后可以看到&lt;code&gt;pyproject.toml&lt;/code&gt;文件发生变动：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;...&lt;br/&gt;[tool.poetry.dependencies]&lt;br/&gt;python = &quot;^3.7&quot;&lt;br/&gt;Flask = &quot;^1.1.2&quot;&lt;br/&gt;&lt;br/&gt;[tool.poetry.dev-dependencies]&lt;br/&gt;pytest = &quot;^6.2.4&quot;&lt;br/&gt;...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文件中多了刚刚安装的&lt;code&gt;flask&lt;/code&gt;依赖和&lt;code&gt;pytest&lt;/code&gt;依赖， 且&lt;code&gt;pytest&lt;/code&gt;依赖是属于dev依赖。在后面还可以通过&lt;code&gt;poetry&lt;/code&gt;的命令生成对应的生产环境依赖文件&lt;code&gt;requirement.txt&lt;/code&gt;和测试环境依赖文件&lt;code&gt;requirements-dev.txt&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 生产环境&lt;/span&gt;&lt;br/&gt;poetry &lt;span&gt;export&lt;/span&gt; -o requirements.txt --without-hashes --with-credentials&lt;br/&gt;&lt;span&gt;# 测试环境&lt;/span&gt;&lt;br/&gt;poetry &lt;span&gt;export&lt;/span&gt; -o requirements-dev.txt --without-hashes --with-credentials --dev&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样区分测试环境和生产环境的依赖可以尽量的减少测试需要的依赖包对生成环境造成影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了增加依赖外， &lt;code&gt;poetry&lt;/code&gt;还支持很多种依赖操作方法， 具体如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 查看依赖&lt;/span&gt;&lt;br/&gt;poetry show&lt;br/&gt;&lt;span&gt;# 以树形结构查看依赖&lt;/span&gt;&lt;br/&gt;poetry show -t&lt;br/&gt;&lt;span&gt;# 更新所有锁定版本的依赖&lt;/span&gt;&lt;br/&gt;poetry update&lt;br/&gt;&lt;span&gt;# 更新指定的依赖&lt;/span&gt;&lt;br/&gt;poetry update flask&lt;br/&gt;&lt;span&gt;# 删除依赖&lt;/span&gt;&lt;br/&gt;poetry remove flask&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.4.其他&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于一般的自用Python项目来说， 上面的&lt;code&gt;poetry&lt;/code&gt;操作已经够了， 如果需要发布自己的包到pypi, 或者安装github最新的并未发布的包则可以使用他的其他拓展命令， 具体可以见文档(https://python-poetry.org/docs/)。个人觉得&lt;code&gt;poetry&lt;/code&gt;已经非常优秀了， 但是由于缺少一个稳定的维护团队， 所以难免有bug, 这时候可以采用降级的方法解决， 比如安装依赖失败， 则可以使用&lt;code&gt;poetry run pip install&lt;/code&gt;安装包， 再手动补上&lt;code&gt;pyproject.yml&lt;/code&gt;文件。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.代码质量工具&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在大型的项目中， 一般都不追求花哨的代码， 而是追求稳定， 容易理解， 复杂度低的代码， 最完美的代码应该是入行的人一看就能理解， 又能完美的解决需求。但是人无完人， 很多时候在写代码可能会出现一些小问题， 而这些小问题靠人来检查是费时费力的， 同时又很难排查出来，这时就需要代码检查工具了。一般代码检查工具分为三类， 一类是检查代码风格， 并把不标准的代码风格格式化为标准的代码风格；另一类则是代码逻辑检查，他会检查代码逻辑， 代码复杂度， 引用的包是否有问题等等, 最后一类是代码安全检查， 比如是否在代码中引入密钥， 或者像在&lt;code&gt;Python&lt;/code&gt;代码中写&lt;code&gt;eval&lt;/code&gt;函数等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.1.flake8&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Flake8&lt;/code&gt; 是由Python官方发布的一款辅助检测Python代码是否规范的工具，相对于目前热度比较高的&lt;code&gt;Pylint&lt;/code&gt;来说，&lt;code&gt;Flake8&lt;/code&gt;检查规则灵活，支持集成额外插件，扩展性强。&lt;code&gt;Flake8&lt;/code&gt;是对下面三个工具的封装：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1.PyFlakes：静态检查Python代码逻辑错误的工具。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2.Pep8：静态检查PEP8编码风格的工具。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3.NedBatchelder’s McCabe ：静态分析Python代码复杂度的工具。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Flake8&lt;/code&gt;除了支持上面3种功能外， 还支持通过插件的方式引入其他功能， 比如使用&lt;code&gt;flake8-docstrings&lt;/code&gt;强制要求编写函数&lt;code&gt;docstring&lt;/code&gt;等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在项目中可以通过&lt;code&gt;poetry add flake8 --dev&lt;/code&gt;引入flake8到dev依赖， 然后通过在根目录增加&lt;code&gt;.flake8&lt;/code&gt;文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[flake8]&lt;br/&gt;&lt;span&gt;# 适当提高最大行长度&lt;/span&gt;&lt;br/&gt;max-line-length = 120&lt;br/&gt;&lt;span&gt;# 设置最大复杂度&lt;/span&gt;&lt;br/&gt;max-complexity = 24&lt;br/&gt;&lt;span&gt;# 忽略这些错误类型&lt;/span&gt;&lt;br/&gt;ignore = F401, W503, E203&lt;br/&gt;&lt;span&gt;# 忽略以下文件&lt;/span&gt;&lt;br/&gt;exclude =&lt;br/&gt;    .git,&lt;br/&gt;    .venv,&lt;br/&gt;    __pycache__,&lt;br/&gt;    scripts,&lt;br/&gt;    logs,&lt;br/&gt;    upload,&lt;br/&gt;    build,&lt;br/&gt;    dist,&lt;br/&gt;    docs,&lt;br/&gt;    migrations,&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指定&lt;code&gt;Flke8&lt;/code&gt;该如何执行, 最后调用命令&lt;code&gt;poetry run flake8.&lt;/code&gt;即可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.2.mypy&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;毫无疑问， Python的语法让人能简洁的写出代码， 但是他的动态语言特性会使大型项目变得不牢固， 而&lt;code&gt;mypy&lt;/code&gt;的出现恰好能解决这一问题。&lt;code&gt;mypy&lt;/code&gt;是一个静态类型检查工具，它可以帮助我们像静态语言一样在运行代码之前就捕获到某些错误， 但是我们在写Python代码时， 要像静态语言一样， 会参数写上他的类型， 这就是Type Hints, 通过&lt;code&gt;mypy&lt;/code&gt;和&lt;code&gt;Type Hints&lt;/code&gt;的结合， 虽然会增加我们的代码量，  但它可以引入如下好处：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1.可以使&lt;code&gt;IDE&lt;/code&gt;通过类型推断提供更好的代码补全和提示功能, 方便项目重构以及提前检查出错误。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2.强制你去思考动态语言程序的类型可能会帮助你构建更清晰的代码架构。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如有如下一个函数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;foo&lt;/span&gt;&lt;span&gt;(a, b)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; a + b&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说无法知道这个函数要传什么类型的参数进去， 也许一开始是传&lt;code&gt;int&lt;/code&gt;变量， 后面变为&lt;code&gt;str&lt;/code&gt;变量， 而通过&lt;code&gt;Type Hints&lt;/code&gt;则可以指定这个变量的类型是什么， 以及返回的类型是什么， 经过改造后将会变为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;foo&lt;/span&gt;&lt;span&gt;(a: int, b: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; a + b&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个函数的a， b参数以及返回的值类型都被标注为&lt;code&gt;int&lt;/code&gt;类型， 这时候假如在程序内有两个调用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;foo(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;)&lt;br/&gt;foo(&lt;span&gt;&quot;a&quot;&lt;/span&gt;, &lt;span&gt;&quot;b&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他们虽然都能运行， 但是可以通过&lt;code&gt;mypy&lt;/code&gt;检查出第二种调用方式是错误的。虽然这种示例简简单单， 看不出什么痛点， 但是在复杂的逻辑中， 他的优势就非常明显了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在项目中可以通过&lt;code&gt;poetry add mypy --dev&lt;/code&gt;安装依赖包， 然后通过在根目录增加&lt;code&gt;mypy.ini&lt;/code&gt;文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;# mypy的核心配置&lt;br/&gt;[mypy]&lt;br/&gt;# 指明函数的值类型也要检查&lt;br/&gt;disallow_untyped_defs = True&lt;br/&gt;# 忽略一些import的错误， 有些旧包架构可能不符合mypy的要求&lt;br/&gt;ignore_missing_imports = True&lt;br/&gt;&lt;br/&gt;# 指明针对根目录tests的配置&lt;br/&gt;[mypy-tests.*]&lt;br/&gt;# 指明忽略对这个范围的检查&lt;br/&gt;ignore_errors = True&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指定&lt;code&gt;mypy&lt;/code&gt;该如何执行， 最后调用&lt;code&gt;poetry run mypy .&lt;/code&gt;即可&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.3.自动格式化代码&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python是一个动态语言， 而且不会对代码风格做强要求， 这就会导致一千个人一千种Python代码风格， 这同样在大型项目中非常糟糕的...好在Python生态中有很多自动格式化的工具， 但这里并不会详细对比他们的差异， 只是简要介绍下我在试用了多种后保留了以下3个工具（适不适合自己团队， 还是得自己试试才知道）：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1.autopep8, 这个工具主要用来移除没有使用到的import语句， 这个功能在需要开源的工具包中， autopep8是做得最好的， 但部分场景下可能没有&lt;code&gt;Pycharm&lt;/code&gt;好用，可惜&lt;code&gt;Pycharm&lt;/code&gt;只能手动按快捷键一个文件一个文件的格式化... autopep8可以通过&lt;code&gt;poetry add autopep8 --dev&lt;/code&gt;进行安装， 它的配置参数十分简单， 所以只提供命令， 没有配置文件， 他的主要命令对应用途如下：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;--in-place&lt;/code&gt;: 直接对文件进行更改， 而不是把差异打印出来（用它就要相信他）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;--exclude&lt;/code&gt;: 排除哪些文件/文件夹不进行格式化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;--recursive&lt;/code&gt;: 递归的遍历文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;--remove-all-unused-imports&lt;/code&gt;: 删除所有未导入的依赖包&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;--ignore-init-module-imports&lt;/code&gt;: 删除所有未导入的包时排除&lt;code&gt;__init__.py&lt;/code&gt;文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;--remove-unused-variables&lt;/code&gt;:删除未使用的变量&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;2.isort, 这个工具主要是用来给import语句进行格式化， 比如语句超出文件允许最大长度自动换行， 以及对import语句进行自动排序（这个功能对强迫症来说爽飞了）。isort可以通过&lt;code&gt;poetry add isort --dev&lt;/code&gt;进行安装， isort支持&lt;code&gt;pyproject.toml&lt;/code&gt;文件配置， 以下是我的一个常用配置:&lt;pre&gt;&lt;span/&gt;&lt;code&gt;[tool.isort]&lt;br/&gt;# 兼容black模式, 因为使用到了black进行自动格式化&lt;br/&gt;profile = &quot;black&quot;&lt;br/&gt;# 当import包过多超过文件长度后需要换行时， 采用哪种模式&lt;br/&gt;multi_line_output = 3&lt;br/&gt;include_trailing_comma = true&lt;br/&gt;force_grid_wrap = 0&lt;br/&gt;use_parentheses = true&lt;br/&gt;ensure_newline_before_comments = true&lt;br/&gt;# 每行的最长长度&lt;br/&gt;line_length = 120&lt;br/&gt;# 忽略的文件夹&lt;br/&gt;skip_glob = &quot;tests&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3.black, 号称不妥协的自动格式化工具， 只要它认为不合适的， 就自动格式化， 没有选择的余地， 如果与团队标准不一样的请慎用， 我是挺接受他的自动格式化风格的...。black可以通过&lt;code&gt;poetry add black --dev&lt;/code&gt;进行安装， mypy同样支持&lt;code&gt;pyprojrct.toml&lt;/code&gt;文件配置， 以下是我的一个常用配置(black的配置项不多):&lt;pre&gt;&lt;span/&gt;&lt;code&gt;[tool.black]&lt;br/&gt;# 每行的最长长度&lt;br/&gt;line-length = 120&lt;br/&gt;# 当前是哪个Python版本&lt;br/&gt;target-version = [&#x27;py37&#x27;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.pre-commit&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自动格式化的工具引入到项目没多久后就会开始寻求自动化了， 因为每次提交之前都要手动跑一些自动格式化的脚本， 实在是太麻烦了， 好在有&lt;code&gt;pre-commit&lt;/code&gt;这个专门为&lt;code&gt;git hooks&lt;/code&gt;而生的工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pre-commit&lt;/code&gt; 是一个用于管理和维护多种语言的 &lt;code&gt;git pre-commit hooks&lt;/code&gt; 框架，就像Python的包管理器 &lt;code&gt;pip&lt;/code&gt; 一样，可以通过 &lt;code&gt;pre-commit&lt;/code&gt; 将他人创建并分享的 &lt;code&gt;pre-commit hooks&lt;/code&gt; 安装到自己的项目仓库中。&lt;code&gt;pre-commit&lt;/code&gt; 的出现大大减少了我们使用 &lt;code&gt;git hooks&lt;/code&gt; 的难度，只需要在配置文件中指定想要的 &lt;code&gt;hooks&lt;/code&gt;，它会替你安装任意语言编写的 &lt;code&gt;hooks&lt;/code&gt; 并解决环境依赖问题，然后在每次提交前执行&lt;code&gt;hooks&lt;/code&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.1.安装&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说， 通过&lt;code&gt;pip install pre-commit&lt;/code&gt;就可以安装了， 但是为了环境隔离， 需要使用 &lt;code&gt;poetry add pre-commit --dev&lt;/code&gt;安装， 安装完后就可以在项目根目录创建文件&lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;, 以下是我的配置， 除了上面提到的几个工具外， 还有一些其他脚本的校验工具:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;repos:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;repo:&lt;/span&gt; &lt;span&gt;https://github.com/pre-commit/mirrors-mypy&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;rev:&lt;/span&gt; &lt;span&gt;v0.910&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;hooks:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;mypy&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;repo:&lt;/span&gt; &lt;span&gt;https://github.com/PyCQA/isort&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;rev:&lt;/span&gt; &lt;span&gt;5.9&lt;/span&gt;&lt;span&gt;.3&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;hooks:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;isort&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;repo:&lt;/span&gt; &lt;span&gt;https://github.com/psf/black&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;rev:&lt;/span&gt; &lt;span&gt;21.&lt;/span&gt;&lt;span&gt;7b0&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;hooks:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;black&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;repo:&lt;/span&gt; &lt;span&gt;https://github.com/PyCQA/flake8&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;rev:&lt;/span&gt; &lt;span&gt;3.9&lt;/span&gt;&lt;span&gt;.2&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;hooks:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;flake8&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;repo:&lt;/span&gt; &lt;span&gt;https://github.com/myint/autoflake&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;rev:&lt;/span&gt; &lt;span&gt;v1.4&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;hooks:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;autoflake&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;args:&lt;/span&gt; &lt;span&gt;[&#x27;--recursive&#x27;,&lt;/span&gt;  &lt;span&gt;&#x27;--in-place&#x27;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&#x27;--remove-all-unused-imports&#x27;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&#x27;--remove-unused-variable&#x27;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;repo:&lt;/span&gt; &lt;span&gt;https://github.com/pre-commit/pre-commit-hooks&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;rev:&lt;/span&gt; &lt;span&gt;v3.2.0&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;hooks:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;check-ast&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;check-byte-order-marker&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;check-case-conflict&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;check-docstring-first&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;check-executables-have-shebangs&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;check-json&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;check-yaml&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;debug-statements&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;detect-private-key&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;end-of-file-fixer&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;trailing-whitespace&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;mixed-line-ending&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文件中的内容很简单， 它指明使用了哪些工具， 工具是哪个版本， 以及使用哪些&lt;code&gt;hook&lt;/code&gt;(一个仓库可能有多个hook), 每个参数的解释如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;repo: 仓库url， pre-commit通过git来安装存在于github的工具&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;rev: 每个工具的版本， 这里是利用到git的tag属性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hooks/id: 每个仓库会有很多个hook, 通过hooks-id来选择要使用的hooks&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hook/id/args: 每个hook都支持一些参数， args就是配置hook的参数&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些工具都会读取根目录的配置文件， 而&lt;code&gt;autoflake&lt;/code&gt;我找不到他的&lt;code&gt;pyproject.toml&lt;/code&gt;配置说明， 所以直接通过的&lt;code&gt;args&lt;/code&gt;参数配置参数。之后就可以直接调用&lt;code&gt;hook&lt;/code&gt;脚本， 如果是第一次引入已有项目则应该先手动调用&lt;code&gt;poetry run pre-commit run --all-files&lt;/code&gt;, 他会调用所有&lt;code&gt;hook&lt;/code&gt;对项目进行检查, 然后再根据检查结果对代码和配置进行调整。调整完毕之后可以调用&lt;code&gt;poetry run pre-commit install&lt;/code&gt;把&lt;code&gt;hook&lt;/code&gt;脚本进行安装，它会自动安装在&lt;code&gt;.git/hooks/pre-commit&lt;/code&gt;。安装后， 每执行次&lt;code&gt;git commit&lt;/code&gt;时， 都会通过&lt;code&gt;git hooks&lt;/code&gt;机制自动执行脚本， 自动对代码进行检查和格式化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的配置文件是我的常用配置， &lt;code&gt;pre-commit&lt;/code&gt;的hook有很多, 不止这些, 如有兴趣可以到pre-commit hook合集(https://pre-commit.com/hooks.html)查阅所有hook&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;4.远程仓库自动执行&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本地的hook只针对本地提交者， 而在团队协作中， 其他人员可以暂时屏蔽或者删除hook文件， 导致本地hook没办法达到强制的作用， 所以团队一般会在Github&amp;amp;Gitlab中的&lt;code&gt;pre-recevice&lt;/code&gt;阶段配置一个自己的脚本， 用来跑上面的代码检测工具， 虽然两种的做法有点不同， 但核心步骤都是一样：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1.先拉取最新的代码到容器里&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2.安装阶段， 这时候会向容器安装Python版本以及类似&lt;code&gt;Redis&lt;/code&gt;容器等等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3.代码检查， 这时候会运行代码质量检测工具， 如果有一个检测错误， 那么就拒绝提交， 并显示哪里错误了, 如果没有问题就走下一步。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;4.测试阶段， 该阶段会运行测试用例，检测测试代码覆盖率是否合格， 同样的， 如果检测不合格就会拒绝提交， 成功就进入下一步。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;4.风格统一， 使用风格统一插件， 如Python中的&lt;code&gt;isort&lt;/code&gt;, &lt;code&gt;black&lt;/code&gt;等， 把项目的代码进行格式化。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般每个公司都有自己的一套标准&lt;code&gt;CI/CD&lt;/code&gt;， 而他们的使用方法可能都会有些差别, 但核心原理也差不多， 以下会以开源项目为例介绍如何使用Github的action(这个功能是免费的！！！).&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Gitlab的CI/CD相关文章比较多， 可以查阅网络或查阅书籍《持续交付》(https://book.douban.com/subject/6862062/), 也可以查看文章：https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/， 如果对Gitlab hook有兴趣可以查阅Gitlab pre-receive webook 的添加与使用(treesir.pub/post/gitlab-pre-receive-webhook)&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该例子来自于我的项目rap。首先在项目目录创建&lt;code&gt;script&lt;/code&gt;目录， 这里面的目录可以被本地调用， 但主要还是用于&lt;code&gt;Github action&lt;/code&gt;, 首先创建一个install的脚本, 这个脚本用于安装依赖包：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;#!/bin/sh -e&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Use the Python executable provided from the `-p` option, or a default.&lt;/span&gt;&lt;br/&gt;[ &lt;span&gt;&quot;&lt;span&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;-p&quot;&lt;/span&gt; ] &amp;amp;&amp;amp; PYTHON=&lt;span&gt;$2&lt;/span&gt; || PYTHON=&lt;span&gt;&quot;python3&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;REQUIREMENTS=&lt;span&gt;&quot;requirements-dev.txt&quot;&lt;/span&gt;&lt;br/&gt;VENV=&lt;span&gt;&quot;venv&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; -x&lt;br/&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; [ -z &lt;span&gt;&quot;&lt;span&gt;$GITHUB_ACTIONS&lt;/span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;&lt;span&gt;$PYTHON&lt;/span&gt;&quot;&lt;/span&gt; -m venv &lt;span&gt;&quot;&lt;span&gt;$VENV&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;    PIP=&lt;span&gt;&quot;&lt;span&gt;$VENV&lt;/span&gt;/bin/pip&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;    PIP=&lt;span&gt;&quot;pip&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;fi&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&quot;&lt;span&gt;$PIP&lt;/span&gt;&quot;&lt;/span&gt; install -r &lt;span&gt;&quot;&lt;span&gt;$REQUIREMENTS&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意这里是以&lt;code&gt;venv&lt;/code&gt;为虚拟环境依赖的， 而不是我上面提到的&lt;code&gt;poetry&lt;/code&gt;. 使用&lt;code&gt;venv&lt;/code&gt;的原因是线上一般是一个机器跑一个项目， 同时生产的机器都追求稳定， 这时候venv简单而稳定的好处就体现出来了， 所以比较推荐在线上使用&lt;code&gt;venv&lt;/code&gt;。上面这个脚本就是创建一个虚拟环境， 然后根据&lt;code&gt;requirements-dev.txt&lt;/code&gt;安装测试环境依赖。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;依赖部分搞定了， 接下来就是告诉&lt;code&gt;Github action&lt;/code&gt;该如何进行代码质量检查了， 于是编写一个check的脚本：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;#!/bin/sh -e&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; PREFIX=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; [ -d &lt;span&gt;&#x27;venv&#x27;&lt;/span&gt; ] ; &lt;span&gt;then&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;export&lt;/span&gt; PREFIX=&lt;span&gt;&quot;venv/bin/&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;fi&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; -x&lt;br/&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&#x27;use venv path:&#x27;&lt;/span&gt; &lt;span&gt;${PREFIX}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;${PREFIX}&lt;/span&gt;mypy .&lt;br/&gt;&lt;span&gt;${PREFIX}&lt;/span&gt;flake8&lt;br/&gt;&lt;span&gt;${PREFIX}&lt;/span&gt;isort .&lt;br/&gt;&lt;span&gt;${PREFIX}&lt;/span&gt;black .&lt;br/&gt;&lt;span&gt;${PREFIX}&lt;/span&gt;autoflake --&lt;span&gt;in&lt;/span&gt;-place --remove-unused-variables --recursive .&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个脚本就是简单的调用各个命令， 命令的顺序就如同上面一样， 先进行代码检查， 再跑测试用例， 最后进行代码格式化。这里的命令没有写各个的配置， 因为他们都会自动读取项目下的配置文件， 与我们的本地hook保持一致。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给Github action调用的脚本创建好后， 就开始创建真正的Github action文件了。首先在项目创建&lt;code&gt;.github/workflows&lt;/code&gt;目录， 并在&lt;code&gt;.github/workflows&lt;/code&gt;目录创建&lt;code&gt;test-suite.yml&lt;/code&gt;文件(文件的更多说明见官方文档(https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions))：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;---&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 指定workflows名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;name:&lt;/span&gt; &lt;span&gt;Test&lt;/span&gt; &lt;span&gt;Suite&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 指定操作push到master, 或者提pr到master时才执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;on:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;push:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;branches:&lt;/span&gt; &lt;span&gt;[&quot;master&quot;]&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;pull_request:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;branches:&lt;/span&gt; &lt;span&gt;[&quot;master&quot;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;jobs:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;tests:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 设置任务名&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;&quot;Python $&lt;span&gt;{{ matrix.python-version }}&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 选择跑在哪种容器类型 &lt;/span&gt;&lt;br/&gt;    &lt;span&gt;runs-on:&lt;/span&gt; &lt;span&gt;&quot;ubuntu-latest&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;# 设置变量, 这里设置多个Python版本表示会对每个Python版本都运行一次&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;strategy:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;matrix:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;python-version:&lt;/span&gt; &lt;span&gt;[&quot;3.6&quot;,&lt;/span&gt; &lt;span&gt;&quot;3.7&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;3.8&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;3.9&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;3.10.0-beta.3&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;steps:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# 调用官方的检查和安装python版本 &lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;uses:&lt;/span&gt; &lt;span&gt;&quot;actions/checkout@v2&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;uses:&lt;/span&gt; &lt;span&gt;&quot;actions/setup-python@v2&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;with:&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;python-version:&lt;/span&gt; &lt;span&gt;&quot;$&lt;span&gt;{{ matrix.python-version }}&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# 更改脚本权限&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;&quot;Change permissions&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;run:&lt;/span&gt; &lt;span&gt;|&lt;br/&gt;          chmod +x scripts/install&lt;br/&gt;          chmod +x scripts/check&lt;br/&gt;&lt;/span&gt;      &lt;span&gt;# 安装依赖&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;&quot;Install dependencies&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;run:&lt;/span&gt; &lt;span&gt;&quot;scripts/install&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# 进行检查  &lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;&quot;Run linting checks&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;run:&lt;/span&gt; &lt;span&gt;&quot;scripts/check&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文件编写完毕后就可以推送代码到远程了, 然后就可以到Github对应的项目地址查看action执行情况， 一般成功结果如下(这里只测一个Python3.7, 如果失败了， 你还会收到邮件提醒)：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3515344758868075&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZwKuhqBicGD6ppYOyL1iaFsRdfvYSsIhFDegXces1x2wpSX3rPa9JQ203yHSoNrb6PlZJxEoN8N0FoPg2IUxdnPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2509&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以点开查看某个步骤的详情， 比如检查代码的详情:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.24496124031007752&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZwKuhqBicGD6ppYOyL1iaFsRdfvYSsIhFDdGjUFgl9H9va9guNGcxO7QhmlXhL8K3uEKH6T2laOUib8dm3Lws27yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1935&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;5.总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些工具都是我慢慢实践和整合后找到最符合自己的构建 Python 项目质量的工具集了， 但是这些工具只能检查表面情况， 而其他情况如代码逻辑是否有问题， 则需要编写测试用例后再运行才能知道。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而有些团队甚至会采用压力测试， 线上仿真测试等等， 这些工具/系统的引入和使用初期会带来很大的学习和时间成本， 但它们却能让项目一直保持茁壮成长, 减少线上项目Bug出现的次数（当然这些工具还有测试用例等等也要一起跟着维护）。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>