<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cfc0f11c1e9ac1ed1fd2cd4acd32d2cb</guid>
<title>前端:从零到一, 轻松把自己的网站部署到服务器</title>
<link>https://toutiao.io/k/w4mlsvi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9qXnTkZPuxe8H1QicBcbrQQVKOeKw2PsaPtbkhed7icVWmmGk0o3VgYFqKdtNwPFicT2aW803Yp7DqjdiaoFRYVX3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;54&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;跑步本身就是一件孤独的事，他人再分享再加油，要跑到终点也只能倚仗自己的体力和意志，就像生活本来的样子。&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.8&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gUVKXuw5icTuicMe1TSd3CYPJzxFcxUnzpBLmOY2lYosbSmH5Ro01bJbqOVUwZ97d098kTPyiaWWicblornticcLu9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注并将「&lt;strong&gt;趣谈前端&lt;/strong&gt;」设为星标&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每早08:30按时推送&lt;strong&gt;技术干货&lt;/strong&gt;/&lt;strong&gt;优秀开源&lt;/strong&gt;/&lt;strong&gt;技术思维&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU2Mzk1NzkwOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/dFTfMt0114ibpVQtdHw0UaW5glBQ3RRqy8rYolxkF0tOaAqTUGW9MXPIGvLUGAJ7jB2JicLxJd6xvvWicThNSWFgg/0?wx_fmt=png&quot; data-nickname=&quot;趣谈前端&quot; data-alias=&quot;beautifulFront&quot; data-signature=&quot;徐小夕【知乎专栏作家】掘金优秀作者，定期分享前端工程化，可视化，企业实战项目知识，深度复盘企业中经常遇到的500+技术问题解决方案。【关注趣谈前端，前端路上不迷茫】&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;hi, 大家好, 我是徐小夕, 周末博学不打烊, 今天我们来分享点轻松且有用的知识. 作为一名前端工程师, 没有个自己的网站怎么行, 接下来我就来带大家介绍一下如何从零到一, 配置并部署自己的网站到服务器.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你将收获:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如何合理选购一台服务器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何将域名解析到服务器上&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器配套软件的安装和环境配置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过命令行上传自己的网站到服务器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;网站部署和运维(负载均衡等)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;接下来我们来开始fight!&lt;/p&gt;&lt;h3&gt;1. 如何合理选购一台服务器&lt;/h3&gt;&lt;p&gt;对于服务器的选择, 我们主要有以下几种选择:&lt;/p&gt;&lt;p&gt;国内用户如果没有特殊需求可以选择前三种, 这里我以阿里云举例, 当然其他服务器的配置都是相通的.&lt;/p&gt;&lt;h4&gt;1.1 服务器位置的选择&lt;/h4&gt;&lt;p&gt;我们都知道服务器的不同配置都是有讲究的, 并且一定程度上关系到我们网站的用户体验. 在选择服务器地址之前, 我们需要清楚的知道自己网站的用户群体主要集中在哪个区域:&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49637305699481865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dFTfMt0114ibEhXUfBFTgmvtyRnd0YKYngWQsBBBwlHiaXDm526IzCYtbIFKw1v8LXTc2yvpIulLd9NFNA3ibgBXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1930&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;比如我的用户在上海, 我们在&lt;strong&gt;地域及可用区&lt;/strong&gt;选项中可以选择&lt;strong&gt;华东2(上海)&lt;/strong&gt;, 以此类推.&lt;/p&gt;&lt;h4&gt;1.2 服务器镜像的选择&lt;/h4&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2597535934291581&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dFTfMt0114ibEhXUfBFTgmvtyRnd0YKYnSnlC8AKBWkLdVuy0pjNnicvNaMO8HrLLm0ibfz5W9XX3IdlZaHy2QUyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1948&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;目前我们常用的服务器镜像有:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;centos&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;windows Server&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;根据自己的使用习惯选择即可, 我一般习惯选择 &lt;strong&gt;centos&lt;/strong&gt;, 接下来也会以 &lt;strong&gt;centos&lt;/strong&gt; 来介绍相关的配置.&lt;/p&gt;&lt;h4&gt;1.3 服务器系统盘存储的选择&lt;/h4&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15845410628019324&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dFTfMt0114ibEhXUfBFTgmvtyRnd0YKYnMEpkkfFG7D25CPicNVNdaQt46uPQBBORd1rtnDuw5HGHgk3ia2xFMhIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2070&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;系统存储的选择也需要结合自身网站, 如果网站是内容很多的资源型网站(图片, 视频等), 可以选择稍微大一点的, 比如 &lt;strong&gt;100G&lt;/strong&gt; 以上. 一般个人网站或者测试站&lt;strong&gt;50G&lt;/strong&gt;足已, 毕竟一份存储一份钱.&lt;/p&gt;&lt;h4&gt;1.4 服务器带宽选择&lt;/h4&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17482517482517482&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dFTfMt0114ibEhXUfBFTgmvtyRnd0YKYnhM3U4icoOQ80Dbia2o0Lw2xvSmgHolHlYlicXl8NkjRCiaicfic2cwYfDQQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2574&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;一般为了给用户一个好的网站体验, 我们会提高带宽来降低网站加载时间. 但是一味的提高带宽会大大加大服务器的费用, 所以我们一方面需要在对网站自身做好优化, 另一方面也可以使用对象存储, 这样我们就能控制一定的带宽了, 比如目前 &lt;strong&gt;H5-Dooring&lt;/strong&gt; 的带宽在&lt;strong&gt;10M&lt;/strong&gt;左右, 一年服务器费用大概 &lt;strong&gt;1-2W&lt;/strong&gt;. 但是对一些测试型, 个人网站来说, 选择&lt;strong&gt;2-5M&lt;/strong&gt;都是一个合适的范围.&lt;/p&gt;&lt;p&gt;当然大家也可以选择按流量付费.&lt;/p&gt;&lt;h4&gt;1.5 服务器规格选择&lt;/h4&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3139635732870772&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dFTfMt0114ibEhXUfBFTgmvtyRnd0YKYnafE0QLAoqX3B5lNA4xvAWV8g1Q4RER528qhch3h6YGl3uBt7jckugw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2306&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;如果你是个人使用对吞吐性能没有过多要求, 可以选择&lt;strong&gt;1核1G&lt;/strong&gt;低配版的, 不过建议个人网站最好选择&lt;strong&gt;1核2G&lt;/strong&gt;或者&lt;strong&gt;2核4G&lt;/strong&gt;的, 说不定你的网站就突然🔥了呢?&lt;/p&gt;&lt;p&gt;至于服务器的其他配置,大家都可以随意选择, 也可以直接用默认的.&lt;/p&gt;&lt;h3&gt;2. 如何将域名解析到服务器上&lt;/h3&gt;&lt;p&gt;当我们选购好一台服务器之后, 我们在控制台可以看到自己服务器的&lt;strong&gt;公网IP&lt;/strong&gt;. 这也是域名解析的关键. 域名可以在云服务平台内直接购买, 一般一个域名在&lt;strong&gt;20-60&lt;/strong&gt;¥之间, 推荐使用 &lt;code&gt;.com&lt;/code&gt;, &lt;code&gt;.cn&lt;/code&gt;的域名, 当前其他后缀的域名也可以, 取决于你对网站的定位.&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29982517482517484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dFTfMt0114ibEhXUfBFTgmvtyRnd0YKYnfBRicmiasQet94pIia0BzI07jozlwwW7J8efWrnepRR5NtjGugH7W1I5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2288&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们只需要在云服务的域名管理中添加需要解析的服务器记录即可.&lt;/p&gt;&lt;p&gt;上图的&lt;strong&gt;主机记录&lt;/strong&gt;配置中常用的有 &lt;code&gt;www&lt;/code&gt; 和 &lt;code&gt;@&lt;/code&gt;, 我们选择任何一个即可. (主机记录相当于域名的前缀)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;记录值&lt;/strong&gt; 就是我们服务器的IP, 也就是上面提到的&lt;strong&gt;公网IP&lt;/strong&gt;. 我们配置好之后点确认, 等待5-10分钟即可解析完成, 不过一般都在3分钟内.&lt;/p&gt;&lt;p&gt;通过以上方式, 我们的域名就成功解析到对应的服务器上了, 是不是很简单? (前提是域名必须备案, 至于如何备案, 也很简单, 可以按照云厂商指引进行操作)&lt;/p&gt;&lt;h3&gt;3. 服务器配套软件的安装和环境配置&lt;/h3&gt;&lt;p&gt;有了上面服务器的配置基础, 我们开始“倒腾”服务器. 作为一名前端程序员, 服务器上没有&lt;code&gt;nodejs&lt;/code&gt;说不过去了吧! 接下来我们开始安装&lt;code&gt;nodejs&lt;/code&gt;. 在安装之前, 我们需要先进入服务器终端:&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dFTfMt0114ibEhXUfBFTgmvtyRnd0YKYn0X7zVF17FU8xAI1OP6PTABM9m6Q8LA8al2iabK8LKiaPrvUZ1KR9tHicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;密钥对一般在服务器列表的右侧更多下拉项里, 我们一般第一次使用需要重置密钥对, 在设置好密钥对之后, 我们在自己计算机的终端输入如下命令:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ssh root@你的公网IP&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后在终端输入完密码之后即可进入服务器.&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18779342723004694&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dFTfMt0114ibEhXUfBFTgmvtyRnd0YKYn7T5JeSTSCKSYjec5yFcIlicjMVk1Ttk11H2u6FfWAU4wqE4NDcrkOvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;852&quot;/&gt;&lt;/p&gt;&lt;p&gt;如果服务器没有wget, 我建议大家可以安装一下, 毕竟后面很多场景都会用到.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;yum install wget&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是不是神似我们的&lt;code&gt;npm&lt;/code&gt;. 之后我们就可以开心的安装&lt;code&gt;nodejs&lt;/code&gt;了:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 安装nodejs&lt;/span&gt;&lt;br/&gt;wget https://nodejs.org/dist/v14.15.4/node-v14.15.4-linux-x64.tar.xz&lt;br/&gt;&lt;span&gt;# 解压&lt;/span&gt;&lt;br/&gt;tar xf  node-v14.15.4-linux-x64.tar.xz &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解压完成之后我们可以手动进入 &lt;code&gt;nodejs&lt;/code&gt; 的 &lt;code&gt;bin&lt;/code&gt; 目录, 测测&lt;code&gt;nodejs&lt;/code&gt;是否可用. 但是下载下来的&lt;code&gt;nodejs&lt;/code&gt;的目录名又臭又长, 怎么办呢? 这里就要学好&lt;code&gt;linux&lt;/code&gt;了, 我这里给大家介绍一种简单的重命名文件/目录名的方法:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mv node-v14.15.4-linux-x64 nodejs&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;mv&lt;/code&gt;是&lt;code&gt;linux&lt;/code&gt;移动文件的命令,当然如果在同一个目录下, 它也可以做重命名功能使用.&lt;/p&gt;&lt;p&gt;最后一步就是配置&lt;code&gt;nodejs&lt;/code&gt;全局环境了. 这里我们也是使用 &lt;code&gt;linux&lt;/code&gt; 的命令&lt;code&gt;ln&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ln -s /...你nodejs所在的更目录/nodejs/bin/node  /usr/&lt;span&gt;local&lt;/span&gt;/bin/node&lt;br/&gt;ln -s /...你nodejs所在的更目录/nodejs/bin/npm   /usr/&lt;span&gt;local&lt;/span&gt;/bin/npm&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样我们通过软连接就实现在全局环境下使用&lt;code&gt;nodejs&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;4. 通过命令行上传自己的网站到服务器&lt;/h3&gt;&lt;p&gt;那么环境有了之后我们就可以直接上传我们的网站代码了, 因为我们选择的是 &lt;strong&gt;centos&lt;/strong&gt; 服务器, 它没有可视化的界面来操作, 而且我的电脑是 &lt;code&gt;mac&lt;/code&gt;的, 这可咋整呢? 不用担心, 继续用命令行!&lt;/p&gt;&lt;p&gt;我们可以使用命令行从本地上传文件或文件夹到服务器, 也可以从服务器下载文件到本地电脑, 这些操作无疑多亏了&lt;code&gt;scp&lt;/code&gt;. 接下来我将演示如何从本地上传文件夹到服务器.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;scp -r 本地文件夹路径 root@你的公网IP:/上传到的服务器路径&lt;br/&gt;&lt;span&gt;# 如&lt;/span&gt;&lt;br/&gt;scp -r ./dist root@xxx.xxx.xxx:/website/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中&lt;code&gt;-r&lt;/code&gt;是用来传文件夹用的, 如果你要上传的文件包含文件夹, 可以添加这个标识.&lt;/p&gt;&lt;h3&gt;5. 网站部署和运维(负载均衡等)&lt;/h3&gt;&lt;p&gt;网站可以用&lt;code&gt;nginx&lt;/code&gt;代理和做负载均衡, 网上也有很多资料介绍, 这里我带大家介绍一下&lt;code&gt;pm2&lt;/code&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44326990838618746&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dFTfMt0114ibEhXUfBFTgmvtyRnd0YKYnc5giaW5Scy3hrM9gotABUM7VM2qz3Ka19Z3zelhdyibj6TMnlKLpEWiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2838&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;PM2 是一个守护进程管理器，它将帮助我们管理和保障应用程序稳定在线. 如果你是nodejs的忠实粉丝, 那么它将是个不错的选择. 作为前端工程师, 搭建全栈的网站用&lt;code&gt;nodejs&lt;/code&gt;也是一个非常高效的选择.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;最新的 PM2 版本可以使用 NPM 或 Yarn 安装：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ npm install pm2@latest -g&lt;br/&gt;&lt;span&gt;# or&lt;/span&gt;&lt;br/&gt;$ yarn global add pm2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;启动应用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;启动、守护和监控应用程序的最简单方法是使用以下命令行：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ pm2 start app.js&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或轻松启动任何其他应用程序：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ pm2 start bashscript.sh&lt;br/&gt;$ pm2 start python-app.py --watch&lt;br/&gt;$ pm2 start binary-file -- --port 1520&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以传递给 CLI 的一些选项：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# Specify an app name&lt;/span&gt;&lt;br/&gt;--name &amp;lt;app_name&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Watch and Restart app when files change&lt;/span&gt;&lt;br/&gt;--watch&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Set memory threshold for app reload&lt;/span&gt;&lt;br/&gt;--max-memory-restart &amp;lt;200MB&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Specify log file&lt;/span&gt;&lt;br/&gt;--&lt;span&gt;log&lt;/span&gt; &amp;lt;log_path&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Pass extra arguments to the script&lt;/span&gt;&lt;br/&gt;-- arg1 arg2 arg3&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Delay between automatic restarts&lt;/span&gt;&lt;br/&gt;--restart-delay &amp;lt;delay &lt;span&gt;in&lt;/span&gt; ms&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Prefix logs with time&lt;/span&gt;&lt;br/&gt;--time&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Do not auto restart app&lt;/span&gt;&lt;br/&gt;--no-autorestart&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Specify cron for forced restart&lt;/span&gt;&lt;br/&gt;--cron &amp;lt;cron_pattern&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Attach to application log&lt;/span&gt;&lt;br/&gt;--no-daemon&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如我们所见，有许多选项可用于使用 &lt;strong&gt;PM2&lt;/strong&gt; 管理我们的应用程序。目前&lt;strong&gt;H5-Dooring&lt;/strong&gt;也是采用这种方式部署的, 所以如果你有自己的网站, 赶紧参考这个教程部署吧~&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.77602523659306&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/dFTfMt01149azIOraEibmPa8b4hib04RNf3ZNbfOxzVgibicvJBDS0DLE6ibnUtQ94MJWE0nicfDexicX2plyMnub4TnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;h2&gt;&lt;span&gt;❤️ 看完三件事&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你觉得这篇内容对你挺有启发，我想邀请你帮我三个小忙：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;点个【在看】，或者分享转发，让更多的人也能看到这篇内容&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;关注公众号【趣谈前端】，&lt;span&gt;定期分享 &lt;/span&gt;&lt;strong&gt;工程化 &lt;/strong&gt;&lt;span&gt;/ &lt;/span&gt;&lt;strong&gt;可视化&lt;/strong&gt;&lt;span&gt; / &lt;/span&gt;&lt;strong&gt;低代码&lt;/strong&gt;&lt;span&gt; / &lt;strong&gt;优秀开源&lt;/strong&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94385&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94715&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img border=&quot;0&quot; class=&quot;__bg_gif rich_pages wxw-img&quot; data-ratio=&quot;0.08658008658008658&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/usyTZ86MDicgqjLq0USF6icibfWiaLSV8bz17cBjvXylU7dz9mIMP7lUF50OE2gFrlZDQlIyWvGcUiaprq92fq8tgXg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;462&quot; data-width=&quot;100%&quot; height=&quot;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2Mzk1NzkwOA==&amp;amp;mid=2247489810&amp;amp;idx=1&amp;amp;sn=2663938569c4d361acae076bce9a9bf5&amp;amp;chksm=fc5300e9cb2489ff48db614f03093d71a81669bc6e0ccdf88b10af4a899b86ce59c6c95198b5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;从零搭建全栈可视化大屏制作平台V6.Dooring&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2Mzk1NzkwOA==&amp;amp;mid=2247489467&amp;amp;idx=1&amp;amp;sn=be4b2a7f92f1c62e66432158212aee78&amp;amp;chksm=fc530e40cb248756193998c50b2e5e75de96dbde98170f871faa7e6ea043a50f87b7fc4468cf&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;从零设计可视化大屏搭建引擎&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2Mzk1NzkwOA==&amp;amp;mid=2247487877&amp;amp;idx=2&amp;amp;sn=770ff16d69d3e7ac2bbcd78e97ab8f32&amp;amp;chksm=fc53087ecb2481685451a50e892fa889781788ca16a4ce689ec7f7fff1ae99c91ac8b82a160d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;Dooring可视化搭建平台数据源设计剖析&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2Mzk1NzkwOA==&amp;amp;mid=2247487950&amp;amp;idx=1&amp;amp;sn=e674a2f9379b9c9b8a149498a50c17f8&amp;amp;chksm=fc530835cb2481233acc7ac2c856b30c7698dd9d2aec1514b5c2fa4165bc2728f7b261c4938f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;可视化搭建的一些思考和实践&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2Mzk1NzkwOA==&amp;amp;mid=2247486910&amp;amp;idx=2&amp;amp;sn=7ce865dd8a8f6769439f0e8eebb72212&amp;amp;chksm=fc531445cb249d534a7d8a362ad40d26bc90f2d2e867385768ee19575e32826fcbe419fcbe0b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;基于Koa + React + TS从零开发全栈文档编辑器(进阶实战&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点个&lt;span data-mid=&quot;&quot;&gt;在看&lt;/span&gt;你最好看&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.2&quot; data-type=&quot;png&quot; data-w=&quot;60&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SgotVleX0gOsmNiae4tDzLaG2rHT2FWEJcEvep02gEar4acRc4Nf9cxibxFj2Ygdn3ucM4THibzD8EwmZTyv88icAQ/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d87f13778a38fea21d7f7ecf790afbc2</guid>
<title>用42张图全面认识Web3；字节/华为/美团面经记录；张朝阳：初代大佬的价值归宿｜码农周刊VIP会员专属邮件周报 Vol.092</title>
<link>https://toutiao.io/k/z2l7od5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;我爱程序员&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;developerWorks&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;我们的产品：《码农周刊》 http://manong.io/ 、《开发者头条》 http://toutiao.io/&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>176b6017f18f3f02b424b078d5682236</guid>
<title>基于ES的开源分布式SQL数据库，CrateDB适用于哪些场景？</title>
<link>https://toutiao.io/k/rce7d08</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwOTIxNDQ3OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8YRIaicYx5pzj5Cxwick8DamnOgbTJu96QTibKyHEDZt1815yOV1r27oZ6HgoYTEYWYLRz4jIV4iasHgg/0?wx_fmt=png&quot; data-nickname=&quot;dbaplus社群&quot; data-alias=&quot;dbaplus&quot; data-signature=&quot;围绕Database、BigData、AIOps的企业级专业社群。资深大咖、技术干货，每天精品原创文章推送，每周线上技术分享，每月线下技术沙龙，每季度Gdevops&amp;amp;DAMS行业大会.&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-id=&quot;7&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;本文根据许鹏&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;老师在〖deeplus直播：开源分布式数据库CrateDB在携程的最佳实践〗线上分享演讲内容整理而成。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;（文末有回放的方式，不要错过）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3992537313432836&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Z2mTEo3ILuleeHQhL4AEBextsiaQSZEcVJdicUGR0lof8JmAvzSJAaR6aC7GjxdFQ2EcA0aMW43ajA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1072&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;许鹏&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;携程 研发总监&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天的分享主要包含以下几个方面的内容：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;CrateDB介绍&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;CrateDB在携程的实践&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;CrateDB在携程的优化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot; draggable=&quot;true&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;一、CrateDB介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、CrateDB&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXxs6PTEgyXSDKBiaZrwWw5E0PMnXyqv6vITYoYYTKPg2pjcibvBmymib3w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;CrateDB是一款基于ElasticSearch的分布式数据库，它与ElasticSearch最大的区别是提供了ANSI SQL查询访问接口。ElasticSearch在6.X版本以后，也开始提供SQL的查询，但CrateDB与ElasticSearch相比，能够支持多索引之间的关联查询，针对某些聚合函数，它返回的是精确的查询结果，而ElasticSearch返回的是近似值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、CrateDB的特性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CrateDB适用于海量时序数据存储，需要频繁更改的数据使用CrateDB存储效果较差。因为CrateDB基于ElasticSearch，频繁的删改操作会使它的性能大大受损。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CrateDB继承了ElasticSearch设计中高可靠的优点，集群较方便实现扩容，对于一些点查询或复杂度中等的查询均能够较为实时地返回结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CrateDB支持Dynamic Schema，其最新版本能够支持json数据格式，写入数据更加方便。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我认为CrateDB的初衷是用SQL的方式查询访问基于&lt;span&gt;ElasticSearch&lt;/span&gt;存储的数据。基于这一概念，我们可以看到它大概的分层（如上图所示），从外部访问从下到上依次到达最终的存储，其最外一层提供了PostgresSQL兼容的访问协议和REST API的访问协议，接下来对语句进行解析，然后执行，获取存储在各个节点上的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、海量数据存储对比&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;因为类似技术较多，这里只对比几个典型的技术，CrateDB、ElasticSearch以及MongoDB，这三者都可以归类于Nosql。下文将从7个维度对三者进行对比。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXQm8bncggQ7OicibdzeVcIM3xmHHnf2FLQV6rmXEPkMUq8OSiaCwCNmTZg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）Schema支持类型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这三个数据库均支持&lt;span&gt;Dynamic Schema&lt;/span&gt;。但在现实的生产环境下，我们推荐采用Struct Schema，因为&lt;span&gt;Dynamic Schema&lt;/span&gt;可能会带来种种问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section label=&quot;Copyright © 2015 Yead All Rights Reserved.&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;仅代表个人观点，并非适用于所有场景。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）是否支持SQL访问&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SQL诞生四十多年，已成为非常成熟的语言，具有极强的表达能力。同时SQL具有通用性，被大家普遍接受。CrateDB基于SQL的通用性不断发展，其支持ANSI SQL，并且采用了PostgreSQL协议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ElasticSearch起初只支持类json格式的查询语法，之后开始提供针对单索引的一些SQL语句支持函数，并不断丰富。&lt;/span&gt;&lt;span&gt;MongoDB据我所知并未直接支持SQL，如果写入SQL语句，需要通过第三方插件才能够被MongoDB识别，这在一定程度上会影响查询性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）可扩展性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从可扩展性角度出发，CrateDB和ElasticSearch采用gossip&lt;/span&gt;&lt;span&gt;协议组建集群，简单来说节点之间相应对等。在一个&lt;span&gt;ElasticSearch&lt;/span&gt;集群中，节点可分Master、Coordinator，以及承载数据的Data，一个节点可以同时扮演三个不同的角色，因此它们是对等的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MongoDB则不同，如果用它来构建一个分布式集群，最起码有三个不同的Host，分别是Config Server、Mongos以及Data，为了实现高可靠，一个分片还需要分成相应的Master或Slave。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;综上所述，从可扩展角度来看，ElasticSearch和CrateDB更好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4）对于关联分析的支持程度&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CrateDB支持跨索引之间的关联分析，而ElasticSearch则使用一些变通的方式支持此类关联查询，这意味着在写入数据时需要做相应变更。MongoDB在4.X版本时不支持关联查询，之后的版本未及时关注，如描述有误，欢迎大家指正。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5）聚合准确度&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CrateDB和MongoDB返回精确值，ElasticSearch则是返回近似值，虽然返回近似值执行速度快，但其计算的准确度会受到一定影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6）性能&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在查询性能方面， CrateDB和ElasticSearch都能够较好地返回查询结果，上图中列出的耗时为100毫秒。对于较为简单的查询，100毫秒算是较高的消耗，事实上可以在更短的时间内返回结果。后文中会提到我们自己质量环境下的实际耗时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;7）运维&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;引入一项新技术后，其带来的运维复杂度十分关键。CrateDB和ElasticSearch相较于MongoDB运维复杂度更低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、CrateDB系统架构及节点类型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXMNI3m6rnJB7cCZicGQWzgpYba0zBoiadnAoGA8NmWdAianicvXk1xxN3yA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXDic5QKVyibUm8frFwnWibWibhReazoTfDibssUC4D1aPnlMp5c7z5HuAkuA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上文中提到在CrateDB和&lt;span&gt;ElasticSearch&lt;/span&gt;中节点之间相互对等。以&lt;span&gt;ElasticSearch&lt;/span&gt;举例，由5个节点构成的ElasticSearch集群中起码有两个不同的角色。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该角色需要负责两个方面的工作，分别是管理节点和管理索引。节点加入集群，在集群中创建了多少个不同的索引，这些索引的分片分布在哪些机器上，这些信息都由 Master来管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们创建好的索引，数据最终要落到一个具体的ElasticSearch节点上，这些最终承载数据的就是数据节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图右半部分所示为在生产上部署一个CrateDB或&lt;span&gt;ElasticSearch&lt;/span&gt;集群。&lt;/span&gt;&lt;span&gt;最上方的负载均衡部分可有可无。除上文提到的两种节点类型外，还有一种叫做Coordinator的节点类型，它既不承载具体的数据，也不扮演Master的角色，只接受外部的请求，并将外部请求路由到数据节点上做具体查询，然后在Coordinator节点做一些汇总，最后返回给应用程序。除此之外，ElasticSearch中可能还会有一个叫Ingest的节点类型，这里不进行过多阐述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;综&lt;/span&gt;&lt;span&gt;上所述，一个CrateDB的表类似于一个ElasticSearch的索引，ElasticSearch中索引由多个不同的分片组成，每一个分片可能会落到某一个数据节点上。为了实现高可靠，一个分片又分成主分片和副本分片，即图中列出的Primary和Secondary。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5、CrateDB具体操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）表创建&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个操作和我们平时用PostgreSQL或MySQL创建一张表并无很大差别。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXVuKRUmJEZqX9ZiaPwDQroFJCsLn5rhlKJKZggwqNtlic7UQBRRjAcaUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;创建一张职工的表（如上图所示），其中包括姓名、年龄、性别以及住址。这张表根据姓名来进行哈希，哈希的结果分到4个不同的分片中，with后面跟着一些针对索引层面的配置，它的配置项多达几十项。我们最主要关注以下几点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果只有主分片，replica数为0。如果在主分片之外，还有别的副本分片，增加相应的replica数即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ElasticSearch进行刷新数据会从内存刷新到磁盘，不断刷新会降低性能。为了保证更多数据留在内存中，减少刷新的次数，我们可以调节刷新间隔，具体调整根据对数据的新鲜度要求而定。数据只有被刷新后才能被搜索到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ElasticSearch采用的是write ahead log的方式，这意味着有大量的translog。translog同样将数据从内存写到磁盘，这当中有一个sync的间隔，如果调高这一间隔，可能会加快写入速度，但也有可能带来容错方面的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）乐观并发控制&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CrateDB是基于ElasticSearch的数据库，其在ElasticSearch基础上进行了叫做乐观并发控制的演变。我们将数据写入到某一张表时，有两个隐藏的列，一个是sequence_number，即这一列的版本号，另一个为primary_term，二者联合使用可以实现某一版本的数据只更新一次，避免频繁更新。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXXKmm1ZO620Jqc6SjjA8V8EbwL1YFmTU9gG4bT52EEanAEOW132M1CQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上图中的语句为例，对sequence_number等于0进行更新，当这条语句执行成功后，它的sequence_number会自动跳到1，每更新一次，这个值就会递增。如果有两个不同的进程或两个不同的外部访问，试图来更新同一条语句，那么只有一条会被执行成功，这就做到了乐观并发控制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）Partitioned Table&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXZJsZrNCYKtVFlHD3VrWe43HgpDvIg9ibibKpODoxOjjiaySbHahcsYicgA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CrateDB与ElasticSearch不同，它引入了Partitioned Table的概念，即所谓的分区表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上文中讲到一个表存在多个分片承载数据，即ElasticSearch的一个索引有多个不同的分片，对应到&lt;span&gt;CrateDB&lt;/span&gt;中是分区，CrateDB中的分区可以与ElasticSearch中的别名相对应。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果我们要查询或写入表的数据量达几十亿或上百亿，将这些表都放到同样一个索引当中，可能会导致查询与写入的速度变慢，我们其实可以把这些数据分成多个不同的分区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在我们实际的生产中有这样一种情况，一些坐过飞机的用户可能希望查看自己的飞行足迹，如果将所有用户的历史数据都放在同一个索引中，经过查询最后在前端展现的话，速度可能会较慢，因为这一操作对接口的要求较高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如要求在50毫秒内返回结果，如果不把这些数据做分区的话，查询会很慢。此处的慢是99%line的情况，在此情况下，我们要达到满足性能指标，其中一个变通方法就是把它拆成多个不同的分区，每个uid进入后只需要到对应的分区表查询即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在做分区的时候有一点需要注意，如果表已经创建了组件，分区的字段必须都属于组件字段的列表，因为这个组件可以由一个列或多个列组成，也可能是一种复合的组件，分区的字段必须在组件的字段列表当中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、CrateDB在携程的实践&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、实时聚合分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXuHkDCQX3n72217ztvoXkxU3lznOEnHrOv7arMIjce97mEMxrjKddEQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;上图是我们使用CrateDB之后进行的比较，图中只比较了CrateDB和Presto，我们当时的场景如下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们有不少的表，每张表的数据量都有几千万条，有的甚至上亿条，需要对数据做比较复杂的聚合。&lt;/span&gt;&lt;span&gt;原来是用Presto查询，因为它是一个看板，每次刷新的间隔延迟较大，为了解决这个问题，我们尝试了一些方法，后来发现用CrateDB效果较好，右侧是性能对比，收益十分明显。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）具体分析场景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在性能对比方面，采用CrateDB后，我们基本上能够在1~2秒之内返回结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、海量数据存储以及实时查询&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;在我们实际的生产中有不少实时数据聚合分析的调用。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBX08uxria2sWpnu382aibuSLEriaXtvKYfzxLKo5R12suS2PnoeYee5yFLw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;起初，我们是将数据放入Redis中，每收到一次取数请求，我们都会进行相应的代码开发，把取出的数据进行相应解析，处理之后返回给调用方。这个需求虽然不复杂，但是因为我们没有办法注入数据分析的逻辑，所以不得不进行代码工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;引入CrateDB后，我们可以将分析工作采用SQL的方式来实现，对于那些用SQL分析不能完全解决掉的剩余部分，则联合一些Groovy脚本完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于这样的理念，我们开发了一个模板，我们将SQL写入模板中，指定从哪个表中取数，如何分析，决定取完数后是否需要进行定制的后续处理，如果需要，则执行相应的Groovy的脚本，最后返回结果。这一套流程大大节省了开发的周期，提升了开发的效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXwBHVf07YxV6mvUiaakLthctGKiboOUibhFXBRPwQ8r3KickDGkvOsoSsXg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除开发周期对比外，存储方面的对比也十分显著。&lt;/span&gt;&lt;span&gt;例如数据放入到Redis中，需要200g内存，用CrateDB来存，可能只需要50g，这不仅是数据量上的减少，同时意味着成本的大大缩减。&lt;/span&gt;&lt;span&gt;在携程，有基于RocksDB的存储，它开发有Redis兼容协议，可以做到把数据存储到磁盘上，同时可以用Redis的接口访问。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们将数据存入了磁盘，分别从均线、95%line、99%line三方面对比性能。均线方面还在可以忍受的范围内，当然CrateDB不可能比Redis更快。从上图中可以看出，除99.9%line的时候差距大一点，其他均在可接受的范围内。在数据导入耗时方面，我们运用Spark将数据导入CrateDB，两者差距不是特别大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、CrateDB在携程的优化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、落地时的调优&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;当我们将CrateDB引入整体的技术方案中时，还需要进行一些调优。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBX5faibNqa2oKb65wa74ia4FWtbBoh3tZ3APY6KfgvpFGKV6KrpcwpMjpg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）磁盘空间调优&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了避免大量磁盘空间的消耗，需要对索引层面进行优化。除此之外，还可以进行聚合优化，关闭列存储。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）update操作优化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了提升 update操作的性能，我们建议先insert，然后再删除已有的数据。为了达到目的，可以加上相应的版本号，每次只取最新版本的数据。对于在线更新的需求需要做转换，这也意味着采用CrateDB所能够支持的场景是有受限的,对于严格要求一致，或更新频繁的场景，CrateDB不是很好的选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）查询优化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上文中提到采用分区加多个分片的方式优化表结构的存储，使得每一次查询只需要去查尽可能少的分区或分片，查的数据越少、越精准，时间消耗就越短。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4）过期数据删除优化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、Spark数据导入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;在数据导入CrateDB时，我们可能会用 Spark进行操作，此处向大家分享这一过程中的一个细节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXoibLBqjNefs1J7pmK4dovEJouK2tPsqh3DSSQ8m3P2rK2OINibvwnppw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此处用分区举例，如果有一个十几亿或几亿的用户ID，还有一些关联数据，要把它均匀地落到每个分区上，有一种比较简单的方法。我们把 uid（一串字符）进行相应的MD5，MD5之后，取前两位或后两位，就可以得到256个分片。256分片显然太多了，可以再除以一个系数，减少分片数，就可以让这些数据均匀分布，这样可以做到分片上承载的数据量是差不多的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样做的挑战是在写Spark程序时，怎样让每一个partition当中的数据都是落入同一个分片的内容，大家可能会想到repartition函数，但repetition是对某个字段进行哈希，并不能保证落到同一个 partition的数据，这时我们就需要去制定 partition。上图右侧写出了一些伪码，我们在spark中定义一个repartition，然后重载，显示这里可能会有多少个不同的分片。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设我们刚才取前两位或取后两位，然后除以4得到64个分片的话，那么我们把传进来的数字跟64取模就对应到某一个具体的partition的位置。在Spark中有&lt;span&gt;partitionB&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;，&lt;span&gt;partitionB&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;只支持rdd算子，DataFrame中没有partitionBy的算子，所以我们需要先把DataFrame或者DataSet转成rdd，通过组成一个 key键值对的方式进行&lt;span&gt;partitionB&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;操作。之后还需要将相应的rdd转换回DataFrame，这样就可以得到一个分布很均匀的 DataFrame，再将其写入CrateDB中，就能达到很快的写入速度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、运维自动化尝试&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBXJCHJnumJeOZLPicFOaNxyLqfibkQiaIWel6xh5QTKN6N83WnicZEwbfhNw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;我当时是用 Rancher、OpenEBS，以及Nginx Ingress实现了一个在K8S上的CrateDB集群，这使得我们在云环境去部署CrateDB成为一种可能，部署到云上，即便是私有云上，也可以提高硬件使用率，这也是我的初衷。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、CrateDB admin UI&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aMM5LAR7cRG5qWJFwHMzBX1ApqGInUZCbibG5icXSNnlLlKQ0T2FLYtqhv2sXLSRZbf2GrCZLmnRAQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;CrateDB&lt;/span&gt;安装完成后，会打开上图所示的操作界面，我们能够直接写入查询语句，也可以方便地观测到整个集群的状况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、CrateDB的适用场景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、CrateDB的不足&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Upsert性能较低&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;仅支持NRT查询&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高阶SQL函数有待实现&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不支持事务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;Q&amp;amp;A&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q1：CrateDB有解决ES字段类型无法修改、写入性能较低和高硬件资源消耗等痛点吗？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A1：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;首先，CrateDB支持修改字段类型，这个字段类型的修改和PostgreSQL中相同，可以将varchar改成text，但将varchar类型直接改成time stamp可能就会有问题，这时就不得不从重写或者是进行转换。&lt;/span&gt;&lt;span&gt;其次，写入性能高低分场景，如果只是单独insert的话，它的性能还是很高的，&lt;/span&gt;&lt;span&gt;如果是upsert，或delete与insert掺杂在一起的话，这种混杂这种模式的话，写入性能就会有一些问题，需要进行相应的变通。变通的方式有两种，第一种是先把新数据insert，再把老数据delete。第二种方式是新数据较小的话，可以写入一张另外的临时表中，临时表和新的表进行关联，再做相应的update。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q2：CrateDB 相比于 Elasticsearch 和 MongoDB ，备份和恢复能力如何？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A2：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;CrateDB和Elasticsearch在备份和恢复能力层面一样，但是和MongoDB相比，可能更加直观和容易，这是我个人的理解。恢复方面，如果你要求写入时所有数据都吐到磁盘之后才返回，那么所有数据应该都是全部无丢失的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q3：CrateDB运行一段时间性能会明显降低，除了重启还有什么方案？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A3：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;CrateDB在实际运维中确实会碰到一些问题，但是我没有碰到性能明显下降的情况。如果有的话，你可以进行索引级别的重建，而不是整个集群的重启，因为集群重启带来的成本较高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q4：CrateDB日志分析能力如何，有继承ES的ELK能力吗？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A4：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在与Logstash和Kibana搭配这一层面，还是ES能力更强。从整个生态圈的角度来看，CrateDB还是不能和&lt;span&gt;Elasticsearch&lt;/span&gt;相比的，因为&lt;span&gt;Elasticsearch&lt;/span&gt;的发展时间久，然后有Logstash和Kibana的加持，在数据的可视化还有分析展现层面确实很强，但是CrateDB可以和另外几个开源的产品搭配使用，比如说Apache Superset但是肯定没有Kibana那种原生定制的强大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q5：如果把CrateDB部署在k8s上，数据存储应该怎么存放，是分布存储，本地存储，还是集中存储？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A5：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;上文中提到需要和OpenEBS或Rancher结合，它是分布式处理的，你的节点要附着于相应的存储机器上面，即使Docker挂了，数据是不会丢失掉的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q6：CrateDB贵司用在TP场景多还是AP场景多？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A6：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们用到的是 AP场景，实时数据的聚合返回结果的，当然每一次查询所命中的数据集并不是特别大，我们要查询的数据集可能是很大的，但是真正被查询条件所命中的还是比较少的，可能是几十万。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q7：CrateDB 的对标竞品是什么，和大数据生态圈比如hadoop有互补吗 ？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A7：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;rateDB不是跟Hadoop相竞争，它们两个应该在不同的层面，因为Hadoop是进行离线数据存储的，而CrateDB是做数据分析的。如果要寻找对标竞品的话，我个人认为TimescaleDB是一个很强的竞品，因为它们都号称是时序数据库，同时也提供ANSI SQL的查询标准。从现在的态势来看，可能TimescaleDB获得的用户群更多一点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;活动推荐&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2022 Gdevops全球敏捷运维峰会·广州站将于6月17日举办&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;精选数据库热门议题，共同探讨数据库走向技术融合及国产化下的挑战和突破，部分议题抢先剧透：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p draggable=&quot;true&quot;&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.37222222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bIZLVZhXgDoRxrx4BFKmF6BGkbJzy2kvdoBt5rN7yCHCbEOolLPyamicuNCUHGCZN5exzqtmKXNibg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4b34a9fcb521b70e7128092e8808858b</guid>
<title>聊聊接口设计的36个小技巧</title>
<link>https://toutiao.io/k/yqm776v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;l前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是苏三。作为后端开发，不管是什么语言，&lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;Go&lt;/code&gt;还是&lt;code&gt;C++&lt;/code&gt;，其背后的后端思想都是类似的。后面打算出一个后端思想的技术专栏，主要包括后端的一些设计、或者后端规范相关的，希望对大家日常工作有帮助哈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们做后端开发工程师，主要工作就是：&lt;strong&gt;如何把一个接口设计好&lt;/strong&gt;。所以，今天就给大家介绍，设计好接口的36个锦囊。本文就是后端思想专栏的第一篇哈。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8443782576321668&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1343&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdHrWl1Oiaw2S7hpicOL0Vb4v5wHRCXejQwFArOlBdwSWic1YY4dQBZeATQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 接口参数校验&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;入参出参校验是每个程序员必备的基本素养。你设计的接口，必须先校验参数。比如入参是否允许为空，入参长度是否符合你的预期长度。这个要养成习惯哈，日常开发中，很多低级bug都是不校验参数导致的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;比如你的数据库表字段设置为&lt;code&gt;varchar(16)&lt;/code&gt;,对方传了一个32位的字符串过来，如果你不校验参数，&lt;strong&gt;插入数据库直接异常了&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;出参也是，比如你定义的接口报文，参数是不为空的，但是你的接口返回参数，没有做校验，因为程序某些原因，直返回别人一个&lt;code&gt;null&lt;/code&gt;值。。。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7933333333333333&quot; data-type=&quot;gif&quot; data-w=&quot;150&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdreK8hYeFhMDP8HUJQ7lBszcb85BG3zdgtUGdeHQn4ic5EGMRJMIEZDQ/640?wx_fmt=gif&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 修改老接口时，注意接口的兼容性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多bug都是因为修改了对外旧接口，但是却&lt;strong&gt;不做兼容&lt;/strong&gt;导致的。关键这个问题多数是比较严重的，可能直接导致系统发版失败的。新手程序员很容易犯这个错误哦~&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7916666666666666&quot; data-type=&quot;png&quot; data-w=&quot;240&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdtoaYQsvtjUX6oGmJbReda6qJlJM1I98DL44R6Tp2vnsR59NTt96g1g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，如果你的需求是在原来接口上修改，尤其这个接口是对外提供服务的话，一定要考虑接口兼容。举个例子吧，比如dubbo接口，原本是只接收A，B参数，现在你加了一个参数C，就可以考虑这样处理：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//老接口&lt;br/&gt;void oldService(A,B){&lt;br/&gt;  //兼容新接口，传个null代替C&lt;br/&gt;  newService(A,B,null);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;//新接口，暂时不能删掉老接口，需要做兼容。&lt;br/&gt;void newService(A,B,C){&lt;br/&gt;  ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.  设计接口时，充分考虑接口的可扩展性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要根据实际业务场景设计接口，充分考虑接口的可扩展性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如你接到一个需求：是用户添加或者修改员工时，需要刷脸。那你是反手提供一个员工管理的提交刷脸信息接口？还是先思考：提交刷脸是不是通用流程呢？比如转账或者一键贴现需要接入刷脸的话，你是否需要重新实现一个接口呢？还是当前按业务类型划分模块，复用这个接口就好，保留接口的可扩展性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果按模块划分的话，未来如果其他场景比如一键贴现接入刷脸的话，不用再搞一套新的接口，只需要新增枚举，然后复用刷脸通过流程接口，实现一键贴现刷脸的差异化即可。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4934696195343555&quot; data-type=&quot;png&quot; data-w=&quot;1761&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdQZdAGK3sj9C1EZUYayIQKX4NTBIZ51vlVaITsR1P9uQtibA42h5f9nQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.接口考虑是否需要防重处理&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果前端重复请求，你的逻辑如何处理？是不是考虑接口去重处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，如果是查询类的请求，其实不用防重。如果是更新修改类的话，尤其金融转账类的，就要过滤重复请求了。简单点，你可以使用Redis防重复请求，同样的请求方，一定时间间隔内的相同请求，考虑是否过滤。当然，转账类接口，并发不高的话，&lt;strong&gt;推荐使用数据库防重表&lt;/strong&gt;，以&lt;strong&gt;唯一流水号作为主键或者唯一索引&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37011173184357543&quot; data-type=&quot;png&quot; data-w=&quot;716&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdUJvMPHnj5mpLpgH8o1pRxfyL0Q7mr4PNcePwLEibYIPpxROfN5hIyrg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 重点接口，考虑线程池隔离。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一些登陆、转账交易、下单等重要接口，考虑线程池隔离哈。如果你所有业务都共用一个线程池，有些业务出bug导致线程池阻塞打满的话，那就杯具了，&lt;strong&gt;所有业务都影响了&lt;/strong&gt;。因此进行线程池隔离，重要业务分配多一点的核心线程，就更好保护重要业务。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3845454545454545&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdPiazEAHIKgvhaYpJoa6o3bXSzbrFqdjgcgEFdFBB7ntrl7wZuLsiawag/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. 调用第三方接口要考虑异常和超时处理&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你调用第三方接口，或者分布式远程服务的的话，需要考虑：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;比如，你调别人的接口，如果异常了，怎么处理，是重试还是当做失败还是告警处理。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;没法预估对方接口一般多久返回，一般设置个超时断开时间，以保护你的接口。&lt;strong&gt;之前见过一个生产问题&lt;/strong&gt;，就是http调用不设置超时时间，最后响应方进程假死，请求一直占着线程不释放，拖垮线程池。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你的接口调失败，需不需要重试？重试几次？需要站在业务上角度思考这个问题&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6174496644295302&quot; data-type=&quot;gif&quot; data-w=&quot;298&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdaHcCQm2HDIPNQJwS58B4b4Wv8CCbOkjnnUj8V3LOusaANY5PMJYtcw/640?wx_fmt=gif&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. 接口实现考虑熔断和降级&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当前互联网系统一般都是分布式部署的。而分布式系统中经常会出现某个基础服务不可用，最终导致整个系统不可用的情况, 这种现象被称为&lt;strong&gt;服务雪崩效应&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如分布式调用链路&lt;code&gt;A-&amp;gt;B-&amp;gt;C....&lt;/code&gt;，下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5128983308042488&quot; data-type=&quot;png&quot; data-w=&quot;659&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpd8YswPLVF768Tsia939UnlzYxicwqgr4Vb3ibBsmRnHZPhqfTWZXsjBibeA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果服务C出现问题，比如是&lt;strong&gt;因为慢SQL导致调用缓慢&lt;/strong&gt;，那将导致B也会延迟，从而A也会延迟。堵住的A请求会消耗占用系统的线程、IO等资源。当请求A的服务越来越多，占用计算机的资源也越来越多，最终会导致系统瓶颈出现，造成其他的请求同样不可用，最后导致业务系统崩溃。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了应对服务雪崩, 常见的做法是&lt;strong&gt;熔断和降级&lt;/strong&gt;。最简单是加开关控制，当下游系统出问题时，开关降级，不再调用下游系统。还可以选用开源组件&lt;code&gt;Hystrix&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. 日志打印好，接口的关键代码，要有日志保驾护航。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关键业务代码无论身处何地，都应该有足够的日志保驾护航。比如：你实现转账业务，转个几百万，然后转失败了，接着客户投诉，然后你还没有打印到日志，想想那种水深火热的困境下，你却毫无办法。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，你的转账业务都需要哪些日志信息呢？至少，方法调用前，入参需要打印需要吧，接口调用后，需要捕获一下异常吧，同时打印异常相关日志吧，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public void transfer(TransferDTO transferDTO){&lt;br/&gt;    log.info(&lt;span&gt;&quot;invoke tranfer begin&quot;&lt;/span&gt;);&lt;br/&gt;    //打印入参&lt;br/&gt;    log.info(&lt;span&gt;&quot;invoke tranfer,paramters:{}&quot;&lt;/span&gt;,transferDTO);&lt;br/&gt;    try {&lt;br/&gt;      res=  transferService.transfer(transferDTO);&lt;br/&gt;    }catch(Exception e){&lt;br/&gt;     log.error(&lt;span&gt;&quot;transfer fail,account：{}&quot;&lt;/span&gt;,&lt;br/&gt;     transferDTO.getAccount（）)&lt;br/&gt;     log.error(&lt;span&gt;&quot;transfer fail,exception:{}&quot;&lt;/span&gt;,e);&lt;br/&gt;    }&lt;br/&gt;    log.info(&lt;span&gt;&quot;invoke tranfer end&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前写过一篇打印日志的15个建议，大家可以看看哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247494838&amp;amp;idx=1&amp;amp;sn=cdb15fd346bddf3f8c1c99f0efbd67d8&amp;amp;chksm=cf22339ff855ba891616c79d4f4855e228e34a9fb45088d7acbe421ad511b8d090a90f5b019f&amp;amp;token=162724582&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;工作总结！日志打印的15个建议&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9. 接口的功能定义要具备单一性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单一性是指接口做的事情比较单一、专一。比如一个登陆接口，它做的事情就只是校验账户名密码，然后返回登陆成功以及&lt;code&gt;userId&lt;/code&gt;即可。&lt;strong&gt;但是如果你为了减少接口交互，把一些注册、一些配置查询等全放到登陆接口，就不太妥。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这也是微服务一些思想，接口的功能单一、明确。比如订单服务、积分、商品信息相关的接口都是划分开的。将来拆分微服务的话，是不是就比较简便啦。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10.接口有些场景，使用异步更合理&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个简单的例子，比如你实现一个用户注册的接口。用户注册成功时，发个邮件或者短信去通知用户。这个邮件或者发短信，就更适合异步处理。因为总不能一个通知类的失败，导致注册失败吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于做异步的方式，简单的就是&lt;strong&gt;用线程池&lt;/strong&gt;。还可以使用消息队列，就是用户注册成功后，生产者产生一个注册成功的消息，消费者拉到注册成功的消息，就发送通知。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2038327526132404&quot; data-type=&quot;png&quot; data-w=&quot;1148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdoQxBiczYHqAa1EEU2m8Mb5Zp47bFWzpBwSOjtHx6wCNRebiaZ5hHibspw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不是所有的接口都适合设计为同步接口。比如你要做一个转账的功能，如果你是单笔的转账，你是可以把接口设计同步。用户发起转账时，客户端在静静等待转账结果就好。如果你是批量转账，一个批次一千笔，甚至一万笔的，你则可以把接口设计为异步。就是用户发起批量转账时，持久化成功就先返回受理成功。然后用户隔十分钟或者十五分钟等再来查转账结果就好。又或者，批量转账成功后，再回调上游系统。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44280442804428044&quot; data-type=&quot;png&quot; data-w=&quot;813&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdBtDw9Yible4HIThFHj9stia1iaTLC3XNXn6PHwTBxXL1AU4XcKv8nhLAA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11. 优化接口耗时，远程串行考虑改并行调用&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设我们设计一个APP首页的接口，它需要查用户信息、需要查banner信息、需要查弹窗信息等等。那你是一个一个接口串行调，还是并行调用呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2056239015817223&quot; data-type=&quot;png&quot; data-w=&quot;1138&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdT2V3RMiavvZnKM6aibzI9VicpsETGxiaaicbvuwlHzaau0IzSW6Sia2iaFV7w/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是串行一个一个查，比如查用户信息200ms，查banner信息100ms、查弹窗信息50ms，那一共就耗时&lt;code&gt;350ms&lt;/code&gt;了，如果还查其他信息，那耗时就更大了。这种场景是可以改为并行调用的。也就是说查用户信息、查banner信息、查弹窗信息，可以同时发起。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5670731707317073&quot; data-type=&quot;png&quot; data-w=&quot;820&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdbkvw3UO2e6WL0ZYsVVyHw3kpFERdVY2es04w1IETXicuPbj4TcDGVBw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Java中有个异步编程利器：&lt;code&gt;CompletableFuture&lt;/code&gt;，就可以很好实现这个功能。有兴趣的小伙伴可以看我之前这个文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247490456&amp;amp;idx=1&amp;amp;sn=95836324db57673a4d7aea4fb233c0d2&amp;amp;chksm=cf21c4b1f8564da72dc7b39279362bcf965b1374540f3b339413d138599f7de59a5f977e3b0e&amp;amp;token=1260947715&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;CompletableFuture详解&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12. 接口合并或者说考虑批量处理思想&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据库操作或或者是远程调用时，能批量操作就不要for循环调用。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0433333333333332&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdgc2flibD2xrMbfvMVnpC3mmQYDDH7MwmHkkuzqabmiasib6iaQqPMM3VuA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个简单例子，我们平时一个列表明细数据插入数据库时，不要在for循环一条一条插入，建议一个批次几百条，进行批量插入。同理远程调用也类似想法，比如你查询营销标签是否命中，可以一个标签一个标签去查，也可以批量标签去查，那批量进行，效率就更高嘛。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//反例&lt;br/&gt;&lt;span&gt;for&lt;/span&gt;(int i=0;i&amp;lt;n;i++){&lt;br/&gt;  remoteSingleQuery(param)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;//正例&lt;br/&gt;remoteBatchQuery(param);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小伙伴们是否了解过&lt;code&gt;kafka&lt;/code&gt;为什么这么快呢？其实其中一点原因，就是kafka&lt;strong&gt;使用批量消息&lt;/strong&gt;提升服务端处理能力。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;13. 接口实现过程中，恰当使用缓存&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哪些场景适合使用缓存？&lt;strong&gt;读多写少且数据时效要求越低的场景&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存用得好，可以承载更多的请求，提升查询效率，减少数据库的压力。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;比如一些平时变动很小或者说几乎不会变的商品信息，可以放到缓存，请求过来时，先查询缓存，如果没有再查数据库，并且把数据库的数据更新到缓存。但是，使用缓存增加了需要考虑这些点：缓存和数据库一致性如何保证、集群、缓存击穿、缓存雪崩、缓存穿透等问题。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;保证数据库和缓存一致性：&lt;strong&gt;缓存延时双删、删除缓存重试机制、读取biglog异步删除缓存&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缓存击穿：设置数据永不过期&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缓存&lt;span&gt;雪崩&lt;/span&gt;：Redis集群高可用、均匀设置过期时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缓存穿透：接口层校验、查询为空设置个默认空值标记、布隆过滤器。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般用&lt;code&gt;Redis&lt;/code&gt;分布式缓存，当然有些时候也可以考虑使用本地缓存，如&lt;code&gt;Guava Cache、Caffeine&lt;/code&gt;等。使用本地缓存有些缺点，就是无法进行大数据存储，并且应用进程的重启，缓存会失效。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;14. 接口考虑热点数据隔离性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;瞬时间的高并发，可能会打垮你的系统。可以做一些热点数据的隔离。比如&lt;strong&gt;业务隔离、系统隔离、用户隔离、数据隔离&lt;/strong&gt;等。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;业务隔离性，比如12306的分时段售票，将热点数据分散处理，降低系统负载压力。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;系统隔离：比如把系统分成了用户、商品、社区三个板块。这三个块分别使用不同的域名、服务器和数据库，做到从接入层到应用层再到数据层三层完全隔离。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户隔离：重点用户请求到配置更好的机器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据隔离：使用单独的缓存集群或者数据库服务热点数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;15. 可变参数配置化，比如红包皮肤切换等&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如产品经理提了个红包需求，圣诞节的时候，红包皮肤为圣诞节相关的，春节的时候，为春节红包皮肤等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果在代码写死控制，可有类似以下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt;(duringChristmas){&lt;br/&gt;   img = redPacketChristmasSkin;&lt;br/&gt;}&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(duringSpringFestival){&lt;br/&gt;   img =  redSpringFestivalSkin;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果到了元宵节的时候，运营小姐姐突然又有想法，红包皮肤换成灯笼相关的，这时候，是不是要去修改代码了，重新发布了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从一开始接口设计时，可以实现&lt;strong&gt;一张红包皮肤的配置表&lt;/strong&gt;，将红包皮肤做成配置化呢？更换红包皮肤，只需修改一下表数据就好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，还有一些场景适合一些配置化的参数：一个分页多少数量控制、某个抢红包多久时间过期这些，都可以搞到参数配置化表里面。&lt;strong&gt;这也是扩展性思想的一种体现。&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;16.接口考虑幂等性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口是需要考虑幂等性的，尤其抢红包、转账这些重要接口。最直观的业务场景，就是&lt;strong&gt;用户连着点击两次&lt;/strong&gt;，你的接口有没有&lt;strong&gt;hold住&lt;/strong&gt;。或者消息队列出现重复消费的情况，你的业务逻辑怎么控制？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回忆下，&lt;strong&gt;什么是幂等？&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;计算机科学中，幂等表示一次和多次请求某一个资源应该具有同样的副作用，或者说，多次请求所产生的影响与一次请求执行的影响效果相同。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家别搞混哈，&lt;strong&gt;防重和幂等设计其实是有区别的&lt;/strong&gt;。防重主要为了避免产生重复数据，把重复请求拦截下来即可。而幂等设计除了拦截已经处理的请求，还要求每次相同的请求都返回一样的效果。不过呢，很多时候，它们的处理流程、方案是类似的哈。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-type=&quot;gif&quot; data-w=&quot;240&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdhJNGyOUwiaicpD6Q1Rvzz9yVhXDYHIcyGibER7y1P6KCviatIlb2355pyw/640?wx_fmt=gif&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口幂等实现方案主要有8种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;select+insert+主键/唯一索引冲突&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;直接insert + 主键/唯一索引冲突&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;状态机幂等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;抽取防重表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;token令牌&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;悲观锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;乐观锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式锁&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家可以看我这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247497427&amp;amp;idx=1&amp;amp;sn=2ed160c9917ad989eee1ac60d6122855&amp;amp;chksm=cf2229faf855a0ecf5eb34c7335acdf6420426490ee99fc2b602d54ff4ffcecfdab24eeab0a3&amp;amp;token=1260947715&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;聊聊幂等设计&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;17. 读写分离，优先考虑读从库，注意主从延迟问题&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的数据库都是集群部署的，有主库也有从库，当前一般都是读写分离的。比如你写入数据，肯定是写入主库，但是对于读取实时性要求不高的数据，则优先考虑读从库，因为可以分担主库的压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果读取从库的话，需要考虑主从延迟的问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;18.接口注意返回的数据量，如果数据量大需要分页&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个接口返回报文，不应该包含过多的数据量。过多的数据量不仅处理复杂，并且数据量传输的压力也非常大。因此数量实在是比较大，可以分页返回，如果是功能不相关的报文，那应该考虑接口拆分。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;19. 好的接口实现，离不开SQL优化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们做后端的，写好一个接口，离不开SQL优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SQL优化从这几个维度思考：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;explain 分析SQL查询计划（重点关注type、extra、filtered字段）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;show profile分析，了解SQL执行的线程的状态以及消耗的时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;索引优化 （覆盖索引、最左前缀原则、隐式转换、order by以及group by的优化、join优化）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大分页问题优化（延迟关联、记录上一页最大ID）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据量太大（&lt;strong&gt;分库分表&lt;/strong&gt;、同步到es，用es查询）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;20.代码锁的粒度控制好&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是加锁粒度呢？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;其实就是就是你要锁住的范围是多大。比如你在家上卫生间，你只要锁住卫生间就可以了吧，不需要将整个家都锁起来不让家人进门吧，卫生间就是你的加锁粒度。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们写代码时，如果不涉及到共享资源，就没有必要锁住的。这就好像你上卫生间，不用把整个家都锁住，锁住卫生间门就可以了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，在业务代码中，有一个ArrayList因为涉及到多线程操作，所以需要加锁操作，假设刚好又有一段比较耗时的操作（代码中的&lt;code&gt;slowNotShare&lt;/code&gt;方法）不涉及线程安全问题，你会如何加锁呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//不涉及共享资源的慢方法&lt;br/&gt;private void &lt;span&gt;&lt;span&gt;slowNotShare&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    try {&lt;br/&gt;        TimeUnit.MILLISECONDS.sleep(100);&lt;br/&gt;    } catch (InterruptedException e) {&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;//错误的加锁方法&lt;br/&gt;public int &lt;span&gt;&lt;span&gt;wrong&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    long beginTime = System.currentTimeMillis();&lt;br/&gt;    IntStream.rangeClosed(1, 10000).parallel().forEach(i -&amp;gt; {&lt;br/&gt;        //加锁粒度太粗了，slowNotShare其实不涉及共享资源&lt;br/&gt;        synchronized (this) {&lt;br/&gt;            slowNotShare();&lt;br/&gt;            data.add(i);&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;    log.info(&lt;span&gt;&quot;cosume time:{}&quot;&lt;/span&gt;, System.currentTimeMillis() - beginTime);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; data.size();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public int &lt;span&gt;&lt;span&gt;right&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    long beginTime = System.currentTimeMillis();&lt;br/&gt;    IntStream.rangeClosed(1, 10000).parallel().forEach(i -&amp;gt; {&lt;br/&gt;        slowNotShare();//可以不加锁&lt;br/&gt;        //只对List这部分加锁&lt;br/&gt;        synchronized (data) {&lt;br/&gt;            data.add(i);&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;    log.info(&lt;span&gt;&quot;cosume time:{}&quot;&lt;/span&gt;, System.currentTimeMillis() - beginTime);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; data.size();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;21.接口状态和错误需要统一明确&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供必要的接口调用状态信息。比如你的一个转账接口调用是成功、失败、处理中还是受理成功等，需要明确告诉客户端。如果接口失败，那么具体失败的原因是什么。这些必要的信息都必须要告诉给客户端，因此需要定义明确的错误码和对应的描述。同时，尽量对报错信息封装一下，不要把后端的异常信息完全抛出到客户端。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6051282051282051&quot; data-type=&quot;png&quot; data-w=&quot;975&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdzFZ69ufhLVpJa3oxOKUDia0acvqia0GJOCRqKwlRz7qxdibtzrQ7TU4kg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;22.接口要考虑异常处理&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现一个好的接口，离不开优雅的异常处理。对于异常处理，提十个小建议吧：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;尽量不要使用&lt;code&gt;e.printStackTrace()&lt;/code&gt;,而是使用&lt;code&gt;log&lt;/code&gt;打印。因为&lt;code&gt;e.printStackTrace()&lt;/code&gt;语句可能会导致内存占满。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;catch&lt;/code&gt;住异常时，建议打印出具体的&lt;code&gt;exception&lt;/code&gt;，利于更好定位问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不要用一个&lt;code&gt;Exception&lt;/code&gt;捕捉所有可能的异常&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;记得使用&lt;code&gt;finally&lt;/code&gt;关闭流资源或者直接使用&lt;code&gt;try-with-resource&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;捕获异常与抛出异常必须是完全匹配，或者捕获异常是抛异常的父类&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;捕获到的异常，不能忽略它，至少打点日志吧&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;注意异常对你的代码层次结构的侵染&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自定义封装异常，不要丢弃原始异常的信息&lt;code&gt;Throwable cause&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;运行时异常&lt;code&gt;RuntimeException&lt;/code&gt; ，不应该通过&lt;code&gt;catch&lt;/code&gt;的方式来处理，而是先预检查，比如：&lt;code&gt;NullPointerException&lt;/code&gt;处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;注意异常匹配的顺序，优先捕获具体的异常&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小伙伴们有兴趣可以看下我之前写的这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247488009&amp;amp;idx=1&amp;amp;sn=7c27849c67476143660e3ea0dcdfae3d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Java 异常处理的十个建议&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;23. 优化程序逻辑&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优化程序逻辑这块还是挺重要的，也就是说，你实现的业务代码，&lt;strong&gt;如果是比较复杂的话，建议把注释写清楚&lt;/strong&gt;。还有，代码逻辑尽量清晰，代码尽量高效。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;比如，你要使用用户信息的属性，你根据session已经获取到&lt;code&gt;userId&lt;/code&gt;了，然后就把用户信息从数据库查询出来，使用完后，后面可能又要用到用户信息的属性，有些小伙伴没想太多，反手就把&lt;code&gt;userId&lt;/code&gt;再传进去，再查一次数据库。。。我在项目中，见过这种代码。。。直接把用户对象传下来不好嘛。。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反例伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public Response &lt;span&gt;test&lt;/span&gt;(Session session){&lt;br/&gt;    UserInfo user = UserDao.queryByUserId(session.getUserId());&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(user==null){&lt;br/&gt;       reutrn new Response();&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;(session.getUserId());&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;public Response &lt;span&gt;do&lt;/span&gt;(String UserId){&lt;br/&gt;  //多查了一次数据库&lt;br/&gt;  UserInfo user = UserDao.queryByUserId(session.getUserId());&lt;br/&gt;  ......&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; new Response(); &lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public Response &lt;span&gt;test&lt;/span&gt;(Session session){&lt;br/&gt;    UserInfo user = UserDao.queryByUserId(session.getUserId());&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(user==null){&lt;br/&gt;       reutrn new Response();&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;(session.getUserId());&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;//直接传UserInfo对象过来即可，不用再多查一次数据库&lt;br/&gt;public Response &lt;span&gt;do&lt;/span&gt;(UserInfo user){&lt;br/&gt;  ......&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; new Response(); &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这只是一些很小的一个例子，还有很多类似的例子，需要大家开发过程中，多点思考的哈。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;24. 接口实现过程中，注意大文件、大事务、大对象&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;读取大文件时，不要&lt;code&gt;Files.readAllBytes&lt;/code&gt;直接读取到内存，这样会OOM的，建议使用&lt;code&gt;BufferedReader&lt;/code&gt;一行一行来。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大事务可能导致死锁、回滚时间长、主从延迟等问题，开发中尽量避免大事务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;注意一些大对象的使用，因为大对象是直接进入老年代的，可能会触发fullGC&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;25. 你的接口，需要考虑限流&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的系统每秒扛住的请求是1000，如果一秒钟来了十万请求呢？换个角度就是说，高并发的时候，流量洪峰来了，超过系统的承载能力，怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不采取措施，所有的请求打过来，系统CPU、内存、Load负载飚的很高，最后请求处理不过来，所有的请求无法正常响应。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这种场景，我们可以采用限流方案。就是为了保护系统，多余的请求，直接丢弃。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限流定义：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在计算机网络中，限流就是控制网络接口发送或接收请求的速率，它可防止DoS攻击和限制Web爬虫。限流，也称流量控制。是指系统在面临高并发，或者大流量请求的情况下，限制新的请求对系统的访问，从而保证系统的稳定性。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以使用Guava的&lt;code&gt;RateLimiter&lt;/code&gt;单机版限流，也可以使用&lt;code&gt;Redis&lt;/code&gt;分布式限流，还可以使用阿里开源组件&lt;code&gt;sentinel&lt;/code&gt;限流&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家可以看下我之前这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247490393&amp;amp;idx=1&amp;amp;sn=98189caa486406f8fa94d84ba0667604&amp;amp;chksm=cf21c470f8564d665ce04ccb9dc7502633246da87a0541b07ba4ac99423b28ce544cdd6c036b&amp;amp;token=162724582&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;4种经典限流算法讲解&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;26.代码实现时，注意运行时异常（比如空指针、下标越界等）&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常开发中，我们需要采取措施&lt;strong&gt;规避数组边界溢出，被零整除，空指针&lt;/strong&gt;等运行时错误。类似代码比较常见：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;String name = list.get(1).getName(); //list可能越界，因为不一定有2个元素哈&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该采取措施，预防一下数组边界溢出。正例如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt;(CollectionsUtil.isNotEmpty(list)&amp;amp;&amp;amp; list.size()&amp;gt;1){&lt;br/&gt;  String name = list.get(1).getName(); &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.95&quot; data-type=&quot;png&quot; data-w=&quot;280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpd6upNCOzmYTazr6H8pDta2VUJLHq0SMCBFmIBmMVo7hDorrObibK6XYw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;27.保证接口安全性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的API接口是对外提供的，需要保证接口的安全性。保证接口的安全性有&lt;strong&gt;token机制和接口签名&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;token机制身份验证&lt;/strong&gt;方案还比较简单的，就是&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5981481481481481&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdeujCpQs8KLHTQN0sDyqiaRIuMbo71Nh3jOxFnRibvXXNOtb7OaRPaaXg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发起请求，申请获取token。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端生成全局唯一的token，保存到redis中（一般会设置一个过期时间），然后返回给客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端带着token，发起请求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端去redis确认token是否存在，一般用 redis.del(token)的方式，如果存在会删除成功，即处理业务逻辑，如果删除失败不处理业务逻辑，直接返回结果。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;接口签名&lt;/strong&gt;的方式，就是把接口请求相关信息（请求报文，包括请求时间戳、版本号、appid等），客户端私钥加签，然后服务端用公钥验签，验证通过才认为是合法的、没有被篡改过的请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有关于加签验签的，大家可以看下我这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247488022&amp;amp;idx=1&amp;amp;sn=70484a48173d36006c8db1dfb74ab64d&amp;amp;chksm=cf21cd3ff8564429a1205f6c1d78757faae543111c8461d16c71aaee092fe3e0fed870cc5e0e&amp;amp;token=162724582&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;程序员必备基础：加签验签&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了&lt;strong&gt;加签验签和token机制，接口报文一般是要加密的&lt;/strong&gt;。当然，用https协议是会对报文加密的。如果是我们服务层的话，如何加解密呢？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;可以参考HTTPS的原理，就是服务端把公钥给客户端，然后客户端生成对称密钥，接着客户端用服务端的公钥加密对称密钥，再发到服务端，服务端用自己的私钥解密，得到客户端的对称密钥。这时候就可以愉快传输报文啦，客户端用&lt;strong&gt;对称密钥加密请求报文&lt;/strong&gt;，&lt;strong&gt;服务端用对应的对称密钥解密报文&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候，接口的安全性，还包括&lt;strong&gt;手机号、身份证等信息的脱敏&lt;/strong&gt;。就是说，&lt;strong&gt;用户的隐私数据，不能随便暴露&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;28.分布式事务，如何保证&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;分布式事务：就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。简单来说，分布式事务指的就是分布式系统中的事务，它的存在就是为了保证不同数据库节点的数据一致性。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式事务的几种解决方案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;2PC(二阶段提交)方案、3PC&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TCC（Try、Confirm、Cancel）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;本地消息表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最大努力通知&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;seata&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家可以看下这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247498358&amp;amp;idx=1&amp;amp;sn=aa6c7ceb61b73267d68d1b4fb7ccc2ed&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;看一遍就理解：分布式事务详解&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;29. 事务失效的一些经典场景&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的接口开发过程中，经常需要使用到事务。所以需要避开事务失效的一些经典场景。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;方法的访问权限必须是public，其他private等权限，事务失效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;方法被定义成了final的，这样会导致事务失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在同一个类中的方法直接内部调用，会导致事务失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个方法如果没交给spring管理，就不会生成spring事务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多线程调用，两个方法不在同一个线程中，获取到的数据库连接不一样的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;表的存储引擎不支持事务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果自己try...catch误吞了异常，事务失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;错误的传播特性&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐大家看下这篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247494570&amp;amp;idx=2&amp;amp;sn=17357bcd328b2d1d83f4a72c47daac1b&amp;amp;chksm=cf223483f855bd95351a778d5f48ddd37917ce2790ebbbcd1d6ee4f27f7f4b147f0d41101dcc&amp;amp;token=2044040586&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;聊聊spring事务失效的12种场景，太坑了&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;30. 掌握常用的设计模式&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把代码写好，还是需要熟练常用的设计模式，比如策略模式、工厂模式、模板方法模式、观察者模式等等。设计模式，是代码设计经验的总结。使用设计模式可以可重用代码、让代码更容易被他人理解、保证代码可靠性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我之前写过一篇总结工作中常用设计模式的文章，写得挺不错的，大家可以看下：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247495616&amp;amp;idx=1&amp;amp;sn=e74c733d26351eab22646e44ea74d233&amp;amp;chksm=cf2230e9f855b9ffe1ddb9fe15f72a273d5de02ed91cc97f3066d4162af027299718e2bf748e&amp;amp;token=1260947715&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;实战！工作中常用到哪些设计模式&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;31. 写代码时，考虑线性安全问题&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;strong&gt;高并发&lt;/strong&gt;情况下，&lt;code&gt;HashMap&lt;/code&gt;可能会出现死循环。因为它是非线性安全的，可以考虑使用&lt;code&gt;ConcurrentHashMap&lt;/code&gt;。所以这个也尽量养成习惯，不要上来反手就是一个&lt;code&gt;new HashMap()&lt;/code&gt;;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Hashmap、Arraylist、LinkedList、TreeMap等都是线性不安全的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Vector、Hashtable、ConcurrentHashMap等都是线性安全的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9540540540540541&quot; data-type=&quot;png&quot; data-w=&quot;370&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdd0qF9txicn0icllddBtYLr3dMmkM4JXkWgJYFcrguPOs7xOb5Lhv4icqg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;32.接口定义清晰易懂，命名规范。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们写代码，不仅仅是为了实现当前的功能，也要有利于后面的维护。说到维护，代码不仅仅是写给自己看的，也是给别人看的。所以接口定义要清晰易懂，命名规范。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;33. 接口的版本控制&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口要做好版本控制。就是说，请求基础报文，应该包含&lt;code&gt;version&lt;/code&gt;接口版本号字段，方便未来做接口兼容。其实这个点也算接口扩展性的一个体现点吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如客户端APP某个功能优化了，新老版本会共存，这时候我们的&lt;code&gt;version&lt;/code&gt;版本号就派上用场了，对&lt;code&gt;version&lt;/code&gt;做升级，做好版本控制。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;34. 注意代码规范问题&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意一些常见的代码坏味道：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;大量重复代码（抽共用方法，设计模式）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;方法参数过多（可封装成一个DTO对象）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;方法过长（抽小函数）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断条件太多（优化if...else）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不处理没用的代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不注重代码格式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;避免过度设计&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码的坏味道，这里我都写到啦：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247490148&amp;amp;idx=1&amp;amp;sn=00a181bf74313f751b3ea15ebc303545&amp;amp;chksm=cf21c54df8564c5bc5b4600fce46619f175f7ae557956f449629c470a08e20580feef4ea8d53&amp;amp;token=162724582&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;25种代码坏味道总结+优化示例&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;35.保证接口正确性，其实就是保证更少的bug&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;保证接口的正确性，换个角度讲，就是保证更少的bug，甚至是没有bug。所以接口开发完后，一般需要开发&lt;strong&gt;自测一下&lt;/strong&gt;。然后的话，接口的正确还体现在，多线程并发的时候，&lt;strong&gt;保证数据的正确性&lt;/strong&gt;,等等。比如你做一笔转账交易，扣减余额的时候，可以通过CAS乐观锁的方式保证余额扣减正确吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是实现秒杀接口，得防止超卖问题吧。你可以使用Redis分布式锁防止超卖问题。使用Redis分布式锁，有几个注意要点，大家可以看下我之前这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247488142&amp;amp;idx=1&amp;amp;sn=79a304efae7a814b6f71bbbc53810c0c&amp;amp;chksm=cf21cda7f85644b11ff80323defb90193bc1780b45c1c6081f00da85d665fd9eb32cc934b5cf&amp;amp;token=162724582&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;七种方案！探讨Redis分布式锁的正确使用姿势&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;36.学会沟通，跟前端沟通，跟产品沟通&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我把这一点放到最后，学会沟通是非常非常重要的。比如你开发定义接口时，&lt;strong&gt;一定不能上来就自己埋头把接口定义完了&lt;/strong&gt;，&lt;strong&gt;需要跟客户端先对齐接口&lt;/strong&gt;。遇到一些难点时，跟技术leader对齐方案。实现需求的过程中，有什么问题，及时跟产品沟通。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总之就是，开发接口过程中，一定要沟通好~&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;最后(求关注，别白嫖我)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这篇文章对您有所帮助，或者有所启发的话，求一键三连：点赞、转发、在看，您的支持是我坚持写作最大的动力。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>567dfd81fc842892eacea0195520e668</guid>
<title>聊聊我对质量度量的看法</title>
<link>https://toutiao.io/k/xup74q5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section&gt;&lt;qqmusic class=&quot;js_editor_qqmusic qqmusic_iframe js_uneditable custom_select_card&quot; musicid=&quot;324281803&quot; mid=&quot;000r4yuS40FUFh&quot; albumurl=&quot;https://y.gtimg.cn/music/photo_new/T002R68x68M000.jpg&quot; audiourl=&quot;http://isure6.stream.qqmusic.qq.com/C200000r4yuS40FUFh.m4a?guid=2000000052&amp;amp;vkey=D8EE866CA7FC5CA0138296205B2B8CE7E146F407FCD161C643B1CEDB1F73D2C8852533DFB3799A93D7C727CBFA89478CA86B665A75B29787&amp;amp;uin=&amp;amp;fromtag=20052&quot; music_name=&quot;至此流年各天涯&quot; singer=&quot;我不李志&quot; play_length=&quot;196&quot; src=&quot;/mp/readtemplate?t=app_editor/music&amp;amp;singer=%E6%88%91%E4%B8%8D%E6%9D%8E%E5%BF%97&amp;amp;music_name=%E8%87%B3%E6%AD%A4%E6%B5%81%E5%B9%B4%E5%90%84%E5%A4%A9%E6%B6%AF&amp;amp;albumurl=https%3A%2F%2Fy.gtimg.cn%2Fmusic%2Fphoto_new%2FT002R68x68M000.jpg&amp;amp;musictype=1&quot; musictype=&quot;1&quot; otherid=&quot;000r4yuS40FUFh&quot; albumid=&quot;&quot; jumpurlkey=&quot;&quot; data-pluginname=&quot;insertaudio&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这篇文章要聊的话题，源于某个测试交流群一位测试同学的提问。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于质量度量，业内已经有很多资深的同学分享过他们的观点和看法，也有很多文章聊过这个话题。这篇文章我想从我的角度出发，聊一些关于质量度量，不一样的理解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;质量需不需要度量？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;先聊第一个问题：质量需不需要度量？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;答案显而易见：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;质量需要度量，而且需要持续的度量！&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;为什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们所从事的软件测试工作（随着技术不断发展，现在也叫作质量保障），工作的目标就是一个个软件系统。经过需求设计、需求评审、技术设计、代码开发、测试验证、发布上线等很多环节，才能保障这些软件的交付。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际上这就是一个将不确定性（需求）转化为确定性（具有严密逻辑的软件系统）的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;确定性，需要一定的衡量标准来评估它是否满足预期的设计，因此是需要一定的数据度量的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而持续度量的原因，是业务和技术本身就处在一个不断变化发展的状态，需要持续的度量和评估，才能保障软件系统的质量长期处在一定的水准之上，满足用户需要和保障业务目标达成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;质量度量的本质，是&lt;strong&gt;具体的定量，而非抽象的定性&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;质量度量有哪些指标？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;前面的文章聊到过，质量保障需要达到&lt;/span&gt;&lt;strong&gt;&lt;span&gt;“风险可识别+问题可追踪+结果可验证+数据可量化”&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，才能最大限度的实现其价值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CKL老师也在之前的文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247484921&amp;amp;idx=1&amp;amp;sn=7e95a1cd15cd69f9299475ffc3e26a55&amp;amp;chksm=ce714da5f906c4b30dd25057b3f3cae15110c8db755afabd4587c3b16d02fde48c25f1b2f426&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;团队交付质量如何评估&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;团队交付质量如何评估&lt;/a&gt;》中，提到过“&lt;/span&gt;&lt;strong&gt;&lt;span&gt;业务可验收、研发可实现、测试可验证、部署可交付&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;”等类似的理念，其实本质都是在描述质量度量和评估的目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，质量度量有哪些指标呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以从软件质量保障和交付生命周期的三个阶段来做不同的定义。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;需求设计质量&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;我们谈软件质量，不可避免要从它的源头说起，而源头就是需求和设计阶段要做的事情。这个阶段包括原型图、PRD文档、交互设计、技术方案、测试用例等几项重要产出物，当然他们有一定的前后依赖关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在需求设计阶段，我个人认为比较重要的有如下几点指标：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;需求评审通过率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（是否有遗漏、描述不清、存在逻辑漏洞等）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;设计评审通过率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（设计是否满足需求要求、是否合理美观友好）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;方案评审通过率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（方案实现难易程度、可测性、是否需要更多资源）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;用例评审通过率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（场景是否尽可能覆盖、和技术方案实现是否吻合）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;注意，这里我提到的都是评审，为什么要做大量的评审工作呢？因为如果源头存在问题，那么研发过程和后面的用户使用质量，就无从谈起。方向错了就全错了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;评审的价值在于从用户使用场景角度出发，通过评审提问，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;把需求逐步澄清并形成验收条件，产、研、测三方共同确认，形成共识&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，以保证大家对需求的认知不发生偏差，为后续团队正确的做事提供有价值的指导。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;研发过程质量&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;“&lt;/span&gt;&lt;strong&gt;&lt;span&gt;软件质量是构建出来的，不是测试出来的&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试的本质是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;验证研发交付的产出物是否达到需求设计及预期的标准&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。并不能直接带来质量的提升，只能通过种种手段多维度的去验证是否达标，并通过流程规范、度量标准等去保障最终的交付物达标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，我们常说的各种测试技术手段，都是验证和保障交付质量的手段，而不是构建质量的手段。当然，开发有自己的一套体系，比如编码规范、单元测试覆盖率等，这里不做详细描述，我们重点关注测试维度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在研发过程阶段，我个人认为比较重要的有如下几点指标：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;提测准时率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（便于评估进度、资源投入和风险）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;构建成功率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（构建成功率很大程度能反映出研发提测质量。如果经常编译构建失败或自动化测试通过率较低，因为这意味着最基本的需求实现出了问题）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;缺陷收敛率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（反映缺陷在研发过程阶段的变化趋势和缺陷修复的时效性问题。一般在测试阶段的中前期即单测&amp;amp;集成测试阶段会暴露大量缺陷，到系统测试和回归阶段缺陷就应该有明显下降和收敛，降低产品验收和交付风险）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;缺陷reopen率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（问题修复可能会带来新的问题，reopen指标可以从一定程度上评估缺陷修复的质量。如果reopen率比较高，那么很可能研发侧出现了问题，需要引起重视和寻找原因，尽快解决）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;用户使用质量&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;用户使用质量，指的是软件线上发布后，我们&lt;/span&gt;&lt;strong&gt;&lt;span&gt;对用户使用过程进行追踪并采集数据进行评估度量的过程&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。常见的度量指标有：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;质量度量要注意哪些方面？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;质量保障是一个体系化和长期建设的过程，而质量度量作为最重要的一环之一，在落地过程中需要持续跟进和优化。从我个人的工作经历和实践出发，我总结了下面几点经验教训，供大家参考。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;质量保障不仅仅是QA同学的事情，因此质量度量也不能只关注测试维度；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;度量指标需要根据团队特性和业务具体情况来制定，并且需要评估是否合理，而不是强行制定强行执行；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;质量度量是为了保障最终交付质量能更好的满足用户需要，进一步达成业务目标，而非为了度量而强行度量；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;质量度量并非一蹴而就，在软件不同的生命周期和团队成熟度阶段，度量的范围和执行严格程度要灵活变通；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-id=&quot;67311&quot; data-type=&quot;lspecial02&quot; data-tools=&quot;速排小蚂蚁编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NDAwMjM1NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWhnnG3FnMGxk4tujZAJv8cPZibDbChbEzPK3FJD5aM9XFQQicu4Lu3L3eo5ldtz5Q63ctdpxhAD25rw/0?wx_fmt=png&quot; data-nickname=&quot;老张的求知思考世界&quot; data-alias=&quot;Engineer_Way&quot; data-signature=&quot;专注互联网技术及相关领域，也分享职场成长、读书思考的内容。这是一个求知探索之人，在寻找更多可能性的旅途中的记录。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如果喜欢我文章，点赞、关注、在看三连走起。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如果想阅读更多的文章，可以关注我的公众号。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;精彩内容推荐&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247484921&amp;amp;idx=1&amp;amp;sn=7e95a1cd15cd69f9299475ffc3e26a55&amp;amp;chksm=ce714da5f906c4b30dd25057b3f3cae15110c8db755afabd4587c3b16d02fde48c25f1b2f426&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;团队交付质量如何评估&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;团队交付质量如何评估&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247484975&amp;amp;idx=1&amp;amp;sn=254c19f9d5d94328e1d584b379bb8138&amp;amp;chksm=ce714e73f906c765ddc8242228f25aec791ebfc69e63f533e3a5cf2025c961b8c134ac8a17e8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何建立高效的质量保障机制&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;如何建立高效的质量保障机制&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247484931&amp;amp;idx=1&amp;amp;sn=e215598ab61c56bf641549f3d68f4c5f&amp;amp;chksm=ce714e5ff906c7493b9b3691d6690f9ee4aef48de09fb3ca6deaae9be9242a07a8c415b38add&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;复盘归因，提高交付质量的秘诀&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;复盘归因，提高交付质量的秘诀&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247485058&amp;amp;idx=1&amp;amp;sn=9b99de4ba7ca1600a0284e678084c254&amp;amp;chksm=ce714edef906c7c832382cda445374abdb9070481460734c041898bdcc7f2a1b6f0de5ca4281&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何通过质量内建提升交付能力？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;如何通过质量内建提升交付能力？&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>