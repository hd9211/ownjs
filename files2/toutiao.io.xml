<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>daeb23eeb4d9faa091e90c89d7a8eda8</guid>
<title>操作系统封闭、后台保守，为什么前端仍能一路狂奔？</title>
<link>https://toutiao.io/k/g3zj915</link>
<content:encoded>&lt;div&gt;&lt;body id=&quot;readabilityBody&quot;&gt;
&lt;p id=&quot;app&quot;/&gt;
&lt;img src=&quot;https://static001.infoq.cn/static/infoq/img/logo-121-75.yuij86g.png&quot; alt=&quot;操作系统封闭、后台保守，为什么前端仍能一路狂奔？_前端_闫园园_InfoQ精选文章&quot;/&gt;





    

&lt;/body&gt;
&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>69b5439064ae2461e294987b814ab99c</guid>
<title>什么是人才梯队，你在第几梯队？</title>
<link>https://toutiao.io/k/kojvwp8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创不易，求分享、求一键三连&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近有个粉丝问了一个问题：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;小钗，我是一个部门负责人，想知道你们具体是如何进行梯队建设的&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前我们聊过，大Leader的工作应该核心围绕五件事展开，最多加一个迫不得已的&lt;strong&gt;兜底&lt;/strong&gt;：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9297052154195011&quot; data-type=&quot;png&quot; data-w=&quot;1764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTibqcibyWYVZn97VaUp3hHXUPEmPmoCCMrKkmt68uP0lsz046xMbLYXuA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6642424242424242&quot; data-type=&quot;png&quot; data-w=&quot;3300&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmT3rQOkx8W33hNfia5NxZmpj2x0ONdOVqJUs1YkrQf69ibOe8wzgdaiaw0A/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;梯队建设的重点就是我们&lt;strong&gt;不需要去兜底&lt;/strong&gt;，他是Leader五件事中的重要模块，一般来说职位到了总监，就要有意识的了解梯队建设的知识，因为在后面的工作，这个对你要做的事情关系会很大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，什么是梯队呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么是梯队&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;梯队在战略之下，我们定了要做什么事情之后，需要盘一盘这件事需要哪些核心能力，于是在每个能力领域需要一个一号位，并且还要有一号位的备份，也就是我们常说的副班长，如此一来梯队就出现了：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4816112084063047&quot; data-type=&quot;png&quot; data-w=&quot;1142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTs6ccsHzeRxF3O8LZh9rETX5e4p92Dv7CadITxH7z2zP9leNbZiaPPiag/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上可以认为梯队建设是一次分饼动作，什么样的人该获得什么样的资源，拥有什么样的权利，承担什么样的责任：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8886380737396539&quot; data-type=&quot;png&quot; data-w=&quot;2658&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTkmNc828AQ8JQ0aE5hRk4ZWhukeIK4ZYhG68IluJebfbe1HSlRDqUUA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1%的人能成为副班长，也就是100个人里面有一个人能成为副班长，副班长会成为一号位的&lt;strong&gt;“备份”&lt;/strong&gt;，主要工作是解决多数内部管理工作，包括：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;部门绩效设定、分解、追踪；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;团队资源协调；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重点项目跟进；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;....&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;副班长可以释放一号位，让其有更多精力投入到对外的工作，比如战略、资源层面的工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;100人团队应该有4个左右的大Leader，副班长在资源使用以及重要人事变动方面会更有话语权，其他方面大Leader与副班长差距不大，他们会主要负责以下工作：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;跨部门级重点项目Owner；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文化建设；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;关键机制设计推行；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重要人事任免投票权；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大Leader事实上是副班长的候选人，与此同时团队还会有10%的大Leader的候选人，这些同学可能是团队中的总监角色，也可能是重要的经理，主要完成以下工作：部门内重点项目Owner以及一线员工的工作组织，他们是&lt;strong&gt;执行力的最直观表现&lt;/strong&gt;；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再接下来就是第三圈层员工了，普遍偏执行一些，总而言之，梯队建设的结果要符合&lt;strong&gt;权责利模型&lt;/strong&gt;：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5286368843069874&quot; data-type=&quot;png&quot; data-w=&quot;3492&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTAsrrCAeS6sKdd1Jz3fc5fJnP11Jy472RXE37vOSjYmsX8DFQxDnyibQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何做梯队建设&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;聊了梯队是什么再说梯队建设，所谓梯队建设就是&lt;strong&gt;保证各个领域的能力不会出问题，不会影响战略目标的落地&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;资源规划&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;梯队建设第一步是一号位的重要工作，他需要规划好两个事情：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;战略目标到底核心需要几种能力；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每种能力需要被分配多少资源；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子：一般而言互联网公司的产品经理、研发和运营的比例一般是1:7:X。这个比例分阶段和分功能，不同阶段，不同功能性团队人员配比有所差异比如：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）阶段型&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创业阶段：1：7：X&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;成熟阶段：1：5：5&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）功能型&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务型：1：4：1.   (前后：1：1)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;功能型：1：7：0  （前后：1：3）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效率型：0：7：0 （前后：1：5）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;深入技术内部，前后终端也有一定比例要求，&lt;strong&gt;否则容易出现某个端成为瓶颈的现象&lt;/strong&gt;。这里给个大概参考值（数据不保证正确性）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4594348222424795&quot; data-type=&quot;png&quot; data-w=&quot;2194&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmThyGC5GXDGhwCIN06FgUreNQFt1GKgpKhuRNhzn6bDIvgTZzTEViaicLw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外团队级别本身也会有一定比例要求，比如&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;初级：中级：高级：专家 -&amp;gt; 1:4:3:1&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为部门一号位，手里一定要有张表，才能知道每个地方需要被投入多少资源，因为资源是有限的，这里多一点，那里就少一点，没有顶层规划就会失衡，从而制约整体效率。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;定岗定责&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确定基本资源占比后，便可以启动招聘了，但招聘前需要知道我们需要什么样的人，让他大概负责什么样的事，所以基本的定岗定责也是要有的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.706401766004415&quot; data-type=&quot;png&quot; data-w=&quot;906&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTOic7gNJJzRpzyKTsr90LIwxWZpKqGhtmvS9GEkdPyEWRaKAsYsTqAOA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8601851851851852&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTb0NNU3ZyImiaJtSicr7KkotEh5sRTDcs84U3gWogLwhjG6UkJ54jIYxQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些东西定义的很细，但实操时很多评价趋于主观，个人感觉意义不大（又不能没有），有指导作用罢了，事实上的准入标准由两方面组成：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 之前的工作经历&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 基础专业能力&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很难在短短面试中看出一个人人品，更多的筛查应该是试用期。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;人才初筛&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为进入门槛多由工作经历+基础能力决定，人才初筛反而是非常重要的环节，初筛环节主要关注点是淘汰，需要明确定义不被团队认可的行为或特质，也就是我们所谓团队红线，比如：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 偷奸耍滑/不诚信/负能量/暴力倾向/难相处/骚扰女同学/......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 不专业/能力与岗位不符/简历造假/项目重大错误/......&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;人才初筛应该更多关注红线，一旦涉及红线便不予转正&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要过了准入线，那么更多的就应该是加分项，比如我们的模板大概是这样：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4398148148148148&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTLlnZFEYyssVZtkGxZQJJwvANHNZKRmZCJoWXB03KTwd1kDSDzWtAmQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4834437086092715&quot; data-type=&quot;png&quot; data-w=&quot;604&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTyks0dyFnKmPiccbj5Fs1c2wNh8mHoaiaMo0rgyRyJ3JBhfsMjH1oYYTQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;人才进阶·干训班&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一路打怪（做项目、OKR）升级，如果”运气好“成为小leader，那么就进入了干训班辐射范围，干训班事实上更多是面向经理的”福利“，帮助经理建立管理认知的培训实践课程，比如会涉及以下信息：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）向上管理怎么做，如何拿到资源；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）跨部门沟通的诀窍，我为什么要配合你；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）从理论到实战的差距是什么；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4）如何用数据说话；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5）系统性解决问题，竖井效应与内卷；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些培训一般由几种元素构成（不是每个案例都会完整覆盖）：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事件案例 -&amp;gt; 案例分析 -&amp;gt; 观点阐述 -&amp;gt; 理论、机制形成 -&amp;gt; 讨论（辩论）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果案例本身比较经典，再进一步会考虑：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要不要纳入团队机制 -&amp;gt; HowTo -&amp;gt; OKR -&amp;gt; 执行人 -&amp;gt; 形成团队案例 -&amp;gt; ......&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，一个相对完整的人员覆盖模型就出来了，这也是梯队建设的雏形，总得来说，梯队建设围绕新人、老人、精英、Leader来做，考虑每个圈层的同学有什么样的诉求，团队应该提供什么样的工具，一定不会错。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;团伙与团队&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;初步了解梯队建设后，我们可以看看什么是好的梯队，什么是不好的梯队，还是以这个经典案例说明问题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前的Leader常称我的Team是团伙，在规模作战的时候会受挫，他的点是，我的风格乃至我带出来的团队适合“开疆拓土”，但如果阵地打下来多线作战会出很大的问题，之前我不太理解是什么意思。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间与CEO交流这个话题，他说了一个很有意思的比喻：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如我们现在要抢劫一个农村信用社，我（CEO）带着你们直接冲进去，我一脚踢到门上，然后你们一人一脚踢上去，门两下就被踢坏了，于是我们高高兴兴的走了，似乎很厉害！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;受到上次事件的鼓励，我们来到了市区，市区居然有个保险门，于是出现了一个场景，我一脚踢上保险门，效果不佳，于是所有的兄弟都在对着保险门踢，这个时候见过大城市抢劫的行长拍拍我们肩膀，语重心长说道：你们难道没有分工吗？你们开锁的、开车的、盯梢的都是一个人啊！你们怕不是要翻天？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;综上，从团伙到团队，最重要的是分工！&lt;/p&gt;&lt;p&gt;梯队建设的目标是让我们能够（有能力）合理的分工。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;梯队建设正常的团队，会有很好的分工，除了工种合理以外还讲究角色合理，那么什么是角色合理呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打王者荣耀的同学会更容易了解一个名称：&lt;strong&gt;团队容错率&lt;/strong&gt;。这是什么意思呢：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;低端局比的是谁更牛逼，需要最大化优点，以便更快拿到优势。分工不重要，是因为对手太弱；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高端局比的是谁犯错少，需要最小化缺点，以便不掉点被人击破。分工很重要，是因为旗鼓相当；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;合理的分工，可以最大化团队容错率，这样的团队才能打逆风战、持久战、大规模战！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于运转健康的团队，leader会花大功夫在“扬长避短”这块，优势要扩大化，短板也要不至于阻碍团队扩大，以“系统性解决问题”的理论来说：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;虽然【增长】可以解决发展过程中主要的问题（矛盾），但是【缺陷补足】才是长治久安之策。解决核心问题、补足核心能力缺陷是非常关键的&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以团队缺少的特质、能力（技术能力）一定要补足，不然就会因为某块的缺失导致不能做某些事情而错失时机。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4212962962962963&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTzKHT9kXGcSXr55vzMvd7rBU4ZPAqq7KXxicfo0Cu0KKC4S9X0ljtdbA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PS：针对角色问题，贝尔宾性格测试可能是一个不错的选择。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;年久失修·梯队失衡&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然形成了团队，但长时间的发展，团队中也一定会出现坏味道。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着战略推移，惯性梯队建设，慢慢的业务复杂了，梯队也复杂了，他的表现是：公司大了，无效资源消耗增多，&lt;strong&gt;维护成本增大&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6897777777777778&quot; data-type=&quot;png&quot; data-w=&quot;2250&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTbjEM2j4BLph5VYKeln4rmg0vRoGsyNd9IjKR7nxhA8nlNzFf86hvRQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种维护成本一般由几部分组成：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）之前十分重要的业务，迭代减缓，但依旧有很重的地位，需要持续维护；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）之前不愠不火的业务，直接停止迭代，其中参与人员无事可做，却又因为一些因素（如架构调整、leader离职）没有得到妥善安排；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）之前死掉的业务......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似于这种业务以及之前的部分参与者，都会变成所谓的&lt;strong&gt;维护成本&lt;/strong&gt;，这包括一些之前的&lt;strong&gt;有功之臣&lt;/strong&gt;，处理起来比较麻烦了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种比例一大整体成本马上就变高了，接下来就会定期出现成本优化，HC冻结事项。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;成本优化是很多公司一直在做的事情，甚至这些公司并不缺钱！。&lt;/p&gt;&lt;p&gt;这里的重要标志就是&lt;strong&gt;限制HC&lt;/strong&gt;、限制成本，对于不缺钱的公司似乎很奇怪。&lt;/p&gt;&lt;p&gt;这是因为公司大盘有一笔账，他识别到整体的业务资源投入是完全够的，比如各团队多给10%资源用以解决冲突问题，但实际情况却是各个团队依旧在闹缺人缺资源，那么公司就会认为我们所付出的&lt;strong&gt;维护成本&lt;/strong&gt;与&lt;strong&gt;解决冲突成本&lt;/strong&gt;过高，公司会认为当下自身&lt;strong&gt;结构出了问题&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;而事实上多余的人事物所造成的资源浪费和&lt;strong&gt;效率降低&lt;/strong&gt;甚至最终引起&lt;strong&gt;死海效应&lt;/strong&gt;是公司绝对不能接受的，所以成本优化会是一个永久的话题，这里优化的不是成本，而是&lt;strong&gt;缓解系统性问题&lt;/strong&gt;的一种手段。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;话虽然好听，那么冗余成本&lt;strong&gt;如何识别&lt;/strong&gt;呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;团队一旦大了，如何判断哪个团队该投入多少人，各个团队leader是否会因为&lt;strong&gt;本位主义&lt;/strong&gt;而有&lt;strong&gt;善意谎言&lt;/strong&gt;，团队一号位一定要警惕这个状态的发生，这个时候其实是梯队出问题了，主要表现是&lt;strong&gt;梯队占用资源过度了&lt;/strong&gt;！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;团队的成本优化、效率提升，需要良好的顶层设计，这是一号位重要工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为多余的人事物所造成的资源浪费和&lt;strong&gt;效率降低&lt;/strong&gt;甚至最终引起&lt;strong&gt;死海效应&lt;/strong&gt;是公司绝对不能接受的，所以团队一定会有对应手段去解决这个问题。但成本优化只是一个暴力解法，这里优化的不是成本，而是缓解系统性问题的一种手段，Leader需要思考更多更有效的手段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一号位一定要意识到并且能处理这种梯队资源失衡的问题，解法是大刀阔斧，资源重塑：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7980984340044742&quot; data-type=&quot;png&quot; data-w=&quot;3576&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTWWDIBOjgq6kEh3uTahaMPHNhIN2U7eJYYL5qib9883ewm3S5RQ3fziag/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;梯队失败的Case&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后以一个具体&lt;strong&gt;梯队建设失败案例&lt;/strong&gt;结束今天的故事，这个故事当然还是来源于小孙：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;背景：公司两地办公，我跟小孙的家都在成都，近期较忙。&lt;/p&gt;&lt;p&gt;我：小孙，你这周要回去吗？&lt;/p&gt;&lt;p&gt;小孙：对啊。&lt;/p&gt;&lt;p&gt;我：周五有比赛，完了你出差回去吧。&lt;/p&gt;&lt;p&gt;小孙：比赛跟我有什么关系，我周三就走！&lt;/p&gt;&lt;p&gt;我突然就有点怒火中烧了，耐着性子继续说道：周五老板跟我们比赛呢，你不参加吗？&lt;/p&gt;&lt;p&gt;小孙：我有什么好参加的！&lt;/p&gt;&lt;p&gt;我：你......算你屌，你真屌！&lt;/p&gt;&lt;p&gt;回头，我心里很气不过，于是在小群里面喷了一句：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19767441860465115&quot; data-type=&quot;png&quot; data-w=&quot;516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTVAFPicoOUN4ic4cemOHv9WuzpH8noibiaEnYEmMSPb5ZEgAu1RmuCicrgpA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;近几年，我越发认为，Leader对于下级其实没什么约束能力，于是求着干活的情况变成了普遍情况，我也在想为什么下孙狗敢肆无忌惮的喷，这里的点可能是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）长时间的相处培养起来的默契，他没把自己当下属，而我在把他当“小兄弟”，照顾一下的情绪很容易引起野蛮生长；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）我知道“小兄弟们”身上的闪光点是什么，抛开个人情感，与其说我们选择了他们这个人不如说我选择了他们的某种特质；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如小孙的特质是吃苦耐劳能抗事，关键时刻绝不掉链子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用一句大实话来说，少了这批同学，我可能玩不转，要再次找到这批同学，并且培养出浓厚的感情，不是不可以，成本有点高！沉没成本，这才是他们可以“肆无忌惮”的原因。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;毕竟我们肆无忌惮的发火情况还是比他们要多一些，其他人凭什么要忍受你呢，这里回到一个公司视野的人才模型：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）忠诚度；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）能力值；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）耐操程度；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从个人方面的视野的话，只有一个：给我多少钱，给我多少资源？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）能力+耐操&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;能力强又抗骂的人选择很多，他可以选择被更牛逼的人骂，所以忠诚度不会高；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种同学你会害怕给他资源，他成长后就跑去其他地方赚更多钱，所以会很慎重的给资源。&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;忠诚+能力&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;忠诚度高又有能力的人，总要忍受人家有脾气吧？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种同学会给很多资源，但很容易出现小孙和同学甲的案例，并且他们在某个阶段后可能成长很慢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）忠诚+耐操&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;忠诚度高，又天天被你骂的人，能力、视野有点缺陷，这个要求还过分吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抗骂是抗骂啊，但是不能独立思考怎么办，不能什么我都给他们想好吧？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，在一个人成为你伙伴前是你在选择他；而当他成为你伙伴后，反而是他在选择你了，梯队建设正是如此，这里的核心是：&lt;strong&gt;管理者要让自己有的选&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的另一个点是，一旦是你选择了某个更优秀的同学，那么你就得接受他的“不完美”，或者接受自己的“不完美”，回顾这几年的工作生涯，无论是大公司还是小公司，每个人身上总有这样那样的毛病阻碍他们走的更远：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）有综合能力强的很固执；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）也有能力拔尖的同学不好相处；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）还有比较平均的同学还很佛系；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4）天赋异禀者，经常骂街；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5）抗压能力强的，不能创新；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;......&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;梯队建设其实更多的是管理设计的上升通道机制，解决团队的造血能力，有更多的关键人可用。为了加深理解，这里再类比（啰嗦）一下，可以理解为员工的养成游戏：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5361111111111111&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTVs5NNXCMam9Z9yzENCFJh7pww7yQnnLHwBWzAMlibbFR3pDl1icT8MZA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）将员工分为不同时期，又会把每个周期所处角色做的更具体，比如面试、转正、一般员工、熟练员工、优秀一线员工、leader......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）定义每个周期会做什么事，会遇到什么问题，比如做需求、写BUG、做大项目、管理团队、做跨团队大项目......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）在员工生命周期内，要定义不同阶段价值最高的是什么，比如新人期是完成项目、熟悉期是完成核心OKR、leader期是解决团队横向问题、大leader做一件很难的项目成功并且沉淀方法论......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4）在不同时期的不同阶段里面，员工一定会遇到问题，那么在合适的时候给予合适的”能力“（所谓赋能），解决特定的问题，比如项目制、OKR、CIO，再细一点的如怎么招聘、面试、做汇报......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里要表达的点是，对员工要有很多细分的分类，然后选取其中一些分类，服务于他：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.562962962962963&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTUsNiczKtBXhSuk0FyS8GGHdu3iaTMibeciaphGfTxj2I5q0mNg7uqjGeVg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再切其中一个纵面，不同层级的人需求不一样，可以这样设计：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5834419817470665&quot; data-type=&quot;png&quot; data-w=&quot;3068&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmT0KkcLpC7aPQqBzfV2b6R2CKIaoR6ZPMOycNjem9pguhEjES458znicw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的分享就到这，喜欢的同学可以四连支持：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11333333333333333&quot; data-type=&quot;png&quot; data-w=&quot;600&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTwD1AJGPg2JZe0CfQ2ocnL3UxgXB8lLiaxW3lW5voZs2tBkmto66YEfg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要更多交流可以加我微信：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5549076773566569&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTAIC5LGd4c4HyCicOFK4rtmTzIEGG6en5jQXEHgFu910UKGK3A9tGciaqI68maibxp0kaqiapk11XsvzA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7528383ab03fec44c500041be373589e</guid>
<title>聊聊go中的逃逸分析</title>
<link>https://toutiao.io/k/gvpsq14</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 从一个例子开始&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是一段 c 代码，函数 getStr 生成了 a-z 的串，我们分别在函数内部和 main 中对字串进行了输出。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//例1.1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//返回字串&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt;* &lt;span&gt;getStr&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;//char数组 函数栈上分配内存&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;char&lt;/span&gt; buf[&lt;span&gt;27&lt;/span&gt;];&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//产生a-z的串&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;&lt;span&gt;sizeof&lt;/span&gt;(buf)&lt;span&gt;-1&lt;/span&gt;; i++){&lt;br/&gt;        buf[i] = i + &lt;span&gt;&#x27;a&#x27;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    buf[i] = &lt;span&gt;&#x27;\0&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;printf&lt;/span&gt;(&lt;span&gt;&quot;%s\n&quot;&lt;/span&gt;, buf);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; buf;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;char&lt;/span&gt; *p;&lt;br/&gt;    p = getStr();&lt;br/&gt;    &lt;span&gt;printf&lt;/span&gt;(&lt;span&gt;&quot;%s\n&quot;&lt;/span&gt;, *p);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;abcdefghijklmnopqrstuvwxyz&lt;br/&gt;m&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你有一些 c 的编程经验，那么你一定知道产生这个结果是因为 buf[27]的内存是在函数栈上分配的，这段内存在函数结束后会被自动回收，所以在 main 函数中想再次输出这个字串，就会产生一个未知的结果。我们在对上面代码进行编译时，编译器也会给出 告警：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;In &lt;span&gt;function&lt;/span&gt; ‘getStr’:&lt;br/&gt;warning: &lt;span&gt;function&lt;/span&gt; returns address of &lt;span&gt;local&lt;/span&gt; variable [-Wreturn-local-addr]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决这个问题的方法之一(只是一种方法，并非好的实践)是在函数内部使用 malloc 申请一段内存，因为
malloc 的内存是在堆上分配的，函数返回后不会自动回收因此可以得到预期结果。代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//例1.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt;* &lt;span&gt;getStr&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;char&lt;/span&gt; *buf;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; len = &lt;span&gt;27&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;//堆上分配内存，不会在函数结束后被自动回收&lt;/span&gt;&lt;br/&gt;    buf = (&lt;span&gt;char&lt;/span&gt; *) &lt;span&gt;malloc&lt;/span&gt;(len);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;len&lt;span&gt;-1&lt;/span&gt;; i++){&lt;br/&gt;        buf[i] = i + &lt;span&gt;&#x27;a&#x27;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    buf[i] = &lt;span&gt;&#x27;\0&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;printf&lt;/span&gt;(&lt;span&gt;&quot;%s\n&quot;&lt;/span&gt;, buf);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; buf;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;char&lt;/span&gt; *p;&lt;br/&gt;    p = getStr();&lt;br/&gt;    &lt;span&gt;printf&lt;/span&gt;(&lt;span&gt;&quot;%s\n&quot;&lt;/span&gt;, p);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//手动将堆上内存释放&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;free&lt;/span&gt;(p);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似的功能，我们用 go 语言实现，可以是这样的:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//例1.3&lt;/span&gt;&lt;br/&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;getStr&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; *[26] &lt;span&gt;byte&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    buf := [&lt;span&gt;26&lt;/span&gt;]&lt;span&gt;byte&lt;/span&gt;{}&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i:=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;&lt;span&gt;len&lt;/span&gt;(buf); i++{&lt;br/&gt;        buf[i] = &lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&#x27;a&#x27;&lt;/span&gt; + i)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &amp;amp;buf&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; p *[&lt;span&gt;26&lt;/span&gt;] &lt;span&gt;byte&lt;/span&gt;&lt;br/&gt;    p = getStr();&lt;br/&gt;&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;%s\n&quot;&lt;/span&gt;, *p)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;abcdefghijklmnopqrstuvwxyz&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段程序中，我们并没有在 getStr 中指出 buf 是要分配在堆上的，但是程序为什么能正确运行呢？正是因为 go 中有逃逸分析机制。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 什么是逃逸分析&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;函数中的一个变量，其内存是分配在堆上，还是分配在栈上？在 go 语言中，这一点是由编译器决定的，这就是所谓的&lt;strong&gt;逃逸分析&lt;/strong&gt;。例 1.3 中，go 编译器发现 buf 对应的内存在函数返回后仍然被使用，于是自动将其分配到堆上，从而保证了程序可以正常运行。而且逃逸至堆上的内存，其回收也是由 go 的垃圾回收机制自动完成，yyds！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 查看逃逸的方法&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如我们的代码是 escape.go，可以使用如下命令查看实际的逃逸情况。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//逃逸概要情况&lt;br/&gt;go build -gcflags &lt;span&gt;&quot;-m&quot;&lt;/span&gt; escape.go&lt;br/&gt;//详情&lt;br/&gt;go build -gcflags &lt;span&gt;&quot;-m -m&quot;&lt;/span&gt; escape.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于例 1.3 中的代码，执行&lt;code&gt;go build -gcflags &quot;-m&quot;&lt;/code&gt;，得到结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# command-line-arguments&lt;/span&gt;&lt;br/&gt;./c.go:20:15: inlining call to fmt.Printf&lt;br/&gt;./c.go:6:5: moved to heap: buf&lt;br/&gt;./c.go:20:24: *p escapes to heap&lt;br/&gt;./c.go:20:15: []interface {} literal does not escape&lt;br/&gt;&amp;lt;autogenerated&amp;gt;:1: .this does not escape&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可见 buf 的确逃逸到了堆上。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 产生逃逸的情况&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哪些情况 go 会将函数栈上的内存分配至堆上呢？官方的 FAQ(&lt;span&gt;How do I know whether a variable is allocated on the heap or the stack?&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;)里给出了答案&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;When possible, the Go compilers will allocate variables that are local to a function in that function&#x27;s stack frame. However, if the compiler cannot prove that the variable is not referenced after the function returns, then the compiler must allocate the variable on the garbage-collected heap to avoid dangling pointer errors. Also, if a local variable is very large, it might make more sense to store it on the heap rather than the stack.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可见逃逸的情形主要有两大类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;编译器无法证明变量在函数返回后不再被引用，则分配在堆上。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果变量比较大，则放在堆上更合理。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.1 函数返回后变量仍被使用的情况&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;由于闭包，导致函数返回后函数内变量仍被外部使用。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    f := fibonacci()&lt;br/&gt;    f()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;fibonacci&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    a, b := &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;        a, b = b, a+b&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; a&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看逃逸情况如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go build -gcflags &lt;span&gt;&quot;-m -l&quot;&lt;/span&gt; escape.go&lt;br/&gt;&lt;span&gt;# command-line-arguments&lt;/span&gt;&lt;br/&gt;./escape.go:9:5: moved to heap: a&lt;br/&gt;./escape.go:9:8: moved to heap: b&lt;br/&gt;./escape.go:10:12: func literal escapes to heap&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;返回指针&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; User &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    name &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;    age &lt;span&gt;int8&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//返回指向User的指针&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewUser&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; *&lt;span&gt;User&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    u := User{&lt;br/&gt;        name: &lt;span&gt;&quot;ball&quot;&lt;/span&gt;,&lt;br/&gt;        age: &lt;span&gt;99&lt;/span&gt;,&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//u对应的内存可能在外部被使用，放到堆上&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &amp;amp;u&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看逃逸情况如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go build -gcflags &lt;span&gt;&quot;-m  -l&quot;&lt;/span&gt; escape.go&lt;br/&gt;&lt;span&gt;# command-line-arguments&lt;/span&gt;&lt;br/&gt;./escape.go:9:2: moved to heap: u&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;返回接口&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Man &lt;span&gt;interface&lt;/span&gt;{&lt;br/&gt;    Show()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; User &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    name &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;    age &lt;span&gt;int8&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(u User)&lt;/span&gt;&lt;span&gt;Show&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewMan&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;(m Man)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    u:= User{&lt;br/&gt;        name: &lt;span&gt;&quot;ball&quot;&lt;/span&gt;,&lt;br/&gt;        age: &lt;span&gt;99&lt;/span&gt;,&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    m = u&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看逃逸情况如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go build -gcflags &lt;span&gt;&quot;-m -l&quot;&lt;/span&gt; escape.go&lt;br/&gt;&lt;span&gt;# command-line-arguments&lt;/span&gt;&lt;br/&gt;./escape.go:12:7: u does not escape&lt;br/&gt;./escape.go:21:4: u escapes to heap&lt;br/&gt;&amp;lt;autogenerated&amp;gt;:1: .this does not escape&lt;br/&gt;&amp;lt;autogenerated&amp;gt;:1: leaking param: .this&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Newman 中有一个 u 到接口 m 的转换。go 同的接口由动态值和动态类型两部分构成，m 中的动态值指针，指向了 u(更准备的说应该是 u 的拷贝)对应的内存，这部分是可能在函数返回后会用到的，所以只能分配在堆上。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2 变量过大被分配在堆上的情况&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//escape.go&lt;/span&gt;&lt;br/&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Slice&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    s := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;int64&lt;/span&gt;, &lt;span&gt;8192&lt;/span&gt;, &lt;span&gt;8192&lt;/span&gt;)&lt;br/&gt;    s[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    Slice()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看逃逸情况如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go build -gcflags &lt;span&gt;&quot;-m -m -l&quot;&lt;/span&gt; escape.go&lt;br/&gt;&lt;span&gt;# command-line-arguments&lt;/span&gt;&lt;br/&gt;./escape.go:3:11: make([]int64, 8192, 8192) escapes to heap:&lt;br/&gt;./escape.go:3:11:   flow: {heap} = &amp;amp;{storage &lt;span&gt;for&lt;/span&gt; make([]int64, 8192, 8192)}:&lt;br/&gt;./escape.go:3:11:     from make([]int64, 8192, 8192) (too large &lt;span&gt;for&lt;/span&gt; stack) at ./escape.go:3:11&lt;br/&gt;./escape.go:3:11: make([]int64, 8192, 8192) escapes to heap&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里由于切片长度过大（too large for stack），被分配到了栈上。如果你的好奇心比较强，可能会有如下疑问：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;go 函数栈这么小么，长度是 10000 的 int64 切片都放不下？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这个 too large 到底是多大？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于这些问题，准备后面写一篇函数栈内存分配的文章专门说明。这里你只要记住结论就可以。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;go 的函数栈是非常大的 32 位系统 250M，64 位系统 1G。(1.14.4 是这样的，不确认不同版本的 go 是否完全相同)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这里所说的 too large 不是函数栈的内存不够，而是说一个变量如果对应这么大块的内存，把它分配在栈上的效率大概率比较低，所以放堆上更合理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;go1.14.4 版本中，too large 是指 &amp;gt;= 8 字节 * 8192。也就是说如果代码做如下改动，不会产生逃逸。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;s := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;int64&lt;/span&gt;, &lt;span&gt;8191&lt;/span&gt;, &lt;span&gt;8191&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 逃逸分析可能带来的问题&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5.1 go 中内存分配在堆与栈上的不同&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果分配在栈中，则函数执行结束可自动将内存回收；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果分配在堆中，则函数执行结束交给 GC（垃圾回收）处理;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5.2 可能的问题&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由 5.1 可知，如果过多的产生逃逸，会使更多的内存分配在堆上，其后果是 GC 的压力比较大，这同样可能影响代码运行的效率。&lt;strong&gt;实际项目中需要进行权衡，以决定是否要避免逃逸。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看下面一个比较极端的例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;benchmark.&lt;span&gt;go&lt;/span&gt;&lt;br/&gt;&lt;span&gt;package&lt;/span&gt; gotest&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Slice&lt;/span&gt;&lt;span&gt;(n &lt;span&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    s := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;int64&lt;/span&gt;, &lt;span&gt;8191&lt;/span&gt;, &lt;span&gt;8191&lt;/span&gt;)&lt;br/&gt;    s[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对应的压测文件&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//benchmark_test.go&lt;/span&gt;&lt;br/&gt;&lt;span&gt;package&lt;/span&gt; gotest_test&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;gotest&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkSlice&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i :=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;b.N; i++{&lt;br/&gt;        gotest.Slice()&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Slice 中我们设置切片容量 8191，此时内存分配在栈上，未发生逃逸。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;压测结果&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go &lt;span&gt;test&lt;/span&gt; -bench=.&lt;br/&gt;&lt;br/&gt;goos: linux&lt;br/&gt;goarch: amd64&lt;br/&gt;pkg: gotest&lt;br/&gt;BenchmarkSlice-4        1000000000               0.510 ns/op&lt;br/&gt;PASS&lt;br/&gt;ok      gotest  0.570s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们将切片大小改为 8192，刚好产生逃逸，内存分配在堆上&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;s := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;int64&lt;/span&gt;, &lt;span&gt;8192&lt;/span&gt;, &lt;span&gt;8192&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go &lt;span&gt;test&lt;/span&gt; -bench=.&lt;br/&gt;goos: linux&lt;br/&gt;goarch: amd64&lt;br/&gt;pkg: gotest&lt;br/&gt;BenchmarkSlice-4           80602             13799 ns/op&lt;br/&gt;PASS&lt;br/&gt;ok      gotest  1.275s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可见，本例中，栈上分配内存带了来巨大的优势。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. 更多逃逸的情况&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第 4 节中所概括的逃逸情况只是主要场景，还有很多逃逸的情形。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6.1 变量大小不定带来的逃逸&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;s&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    n := &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;    s := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;int32&lt;/span&gt;, n)&lt;br/&gt;    s[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看逃逸情况如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go build -gcflags &lt;span&gt;&quot;-m -m -l&quot;&lt;/span&gt; escape.go&lt;br/&gt;&lt;span&gt;# command-line-arguments&lt;/span&gt;&lt;br/&gt;./escape.go:5:11: make([]int32, n) escapes to heap:&lt;br/&gt;./escape.go:5:11:   flow: {heap} = &amp;amp;{storage &lt;span&gt;for&lt;/span&gt; make([]int32, n)}:&lt;br/&gt;./escape.go:5:11:     from make([]int32, n) (non-constant size) at ./escape.go:5:11&lt;br/&gt;./escape.go:5:11: make([]int32, n) escapes to heap&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译器给出解释为 non-constant size。这也可以理解，大小不定就有可能很大，为了确保栈内存分配的高效，防御性的把它分配到堆上，说得过去。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6.2 那些神奇的逃逸&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; X &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    p *&lt;span&gt;int&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; i1 &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;    x1 := &amp;amp;X{&lt;br/&gt;        p: &amp;amp;i1, &lt;span&gt;// GOOD: i1 does not escape&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    *x1.p++&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; i2 &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;    x2 := &amp;amp;X{}&lt;br/&gt;    x2.p = &amp;amp;i2 &lt;span&gt;// BAD: Cause of i2 escape&lt;/span&gt;&lt;br/&gt;    *x2.p++&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对 x1 的 x2 两个的赋值，同样的功能，只因为写法的不同，就造成其中一个产生了逃逸！我能说什么呢...&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go build -gcflags &lt;span&gt;&quot;-m -l&quot;&lt;/span&gt; escape.go&lt;br/&gt;&lt;span&gt;# command-line-arguments&lt;/span&gt;&lt;br/&gt;./escape.go:15:6: moved to heap: i2&lt;br/&gt;./escape.go:9:8: &amp;amp;X literal does not escape&lt;br/&gt;./escape.go:16:8: &amp;amp;X literal does not escape&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对两种方法使用 benchmark 测试，性能相差近 50 倍！所以，大家应该知道 struct 中有指针成员该怎么进行赋值效率最高了吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更多匪夷所思的逃逸情况可以参看：&lt;span&gt;Escape-Analysis Flaws&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;。不想啃英文的同学可以去这里&lt;span&gt;Go 逃逸分析的缺陷&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;How do I know whether a variable is allocated on the heap or the stack?: &lt;em&gt;https://golang.org/doc/faq#stack_or_heap&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Escape-Analysis Flaws: &lt;em&gt;https://www.ardanlabs.com/blog/2018/01/escape-analysis-flaws.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Go 逃逸分析的缺陷: &lt;em&gt;https://studygolang.com/articles/12396&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;《Go专家编程》Go逃逸分析: &lt;em&gt;https://my.oschina.net/renhc/blog/2222104&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;深入理解Go-逃逸分析: &lt;em&gt;https://segmentfault.com/a/1190000020086727&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;Go 语言机制之内存剖析: &lt;em&gt;https://studygolang.com/articles/12445&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;浅谈接口实现原理: &lt;em&gt;https://www.cnblogs.com/DongDon/p/12586212.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;p&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4b1fc5c1790f74a54a1002c558fe9800</guid>
<title>Spring架构系列 - 深入浅出Spring核心之面向切面编程(AOP)</title>
<link>https://toutiao.io/k/x6shaod</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;theme-default-content content__default&quot;&gt;&lt;h1 id=&quot;spring基础---spring核心之面向切面编程aop&quot;&gt;&lt;a href=&quot;#spring基础---spring核心之面向切面编程aop&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; Spring基础 - Spring核心之面向切面编程(AOP)&lt;/h1&gt; &lt;blockquote&gt;&lt;p&gt;在&lt;a href=&quot;/md/spring/spring-x-framework-helloworld.html&quot;&gt;Spring基础 - Spring简单例子引入Spring的核心&lt;/a&gt;中向你展示了AOP的基础含义，同时以此发散了一些AOP相关知识点; 本节将在此基础上进一步解读AOP的含义以及AOP的使用方式。@pdai&lt;/p&gt;&lt;/blockquote&gt;  &lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; 引入&lt;/h2&gt; &lt;blockquote&gt;&lt;p&gt;我们在&lt;a href=&quot;/md/spring/spring-x-framework-helloworld.html&quot;&gt;Spring基础 - Spring简单例子引入Spring的核心&lt;/a&gt;中向你展示了AOP的基础含义，同时以此发散了一些AOP相关知识点。&lt;/p&gt;&lt;/blockquote&gt; &lt;ol&gt;&lt;li&gt;Spring 框架通过定义切面, 通过拦截切点实现了不同业务模块的解耦，这个就叫&lt;strong&gt;面向切面编程 - Aspect Oriented Programming (AOP)&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;为什么@Aspect注解使用的是aspectj的jar包呢？这就引出了&lt;strong&gt;Aspect4J和Spring AOP的历史渊源&lt;/strong&gt;，只有理解了Aspect4J和Spring的渊源才能理解有些注解上的兼容设计&lt;/li&gt; &lt;li&gt;如何支持&lt;strong&gt;更多拦截方式&lt;/strong&gt;来实现解耦， 以满足更多场景需求呢？ 这就是@Around, @Pointcut... 等的设计&lt;/li&gt; &lt;li&gt;那么Spring框架又是如何实现AOP的呢？ 这就引入&lt;strong&gt;代理技术，分静态代理和动态代理&lt;/strong&gt;，动态代理又包含JDK代理和CGLIB代理等&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;本节将在此基础上进一步解读AOP的含义以及AOP的使用方式；后续的文章还将深入AOP的实现原理：&lt;/p&gt;  &lt;h2 id=&quot;如何理解aop&quot;&gt;&lt;a href=&quot;#如何理解aop&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; 如何理解AOP&lt;/h2&gt; &lt;blockquote&gt;&lt;p&gt;AOP的本质也是为了解耦，它是一种设计思想； 在理解时也应该简化理解。&lt;/p&gt;&lt;/blockquote&gt; &lt;h3 id=&quot;aop是什么&quot;&gt;&lt;a href=&quot;#aop是什么&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; AOP是什么&lt;/h3&gt; &lt;blockquote&gt;&lt;p&gt;AOP为Aspect Oriented Programming的缩写，意为：面向切面编程&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;AOP最早是AOP联盟的组织提出的,指定的一套规范,spring将AOP的思想引入框架之中,通过&lt;strong&gt;预编译方式&lt;/strong&gt;和&lt;strong&gt;运行期间动态代理&lt;/strong&gt;实现程序的统一维护的一种技术,&lt;/p&gt; &lt;ul&gt;&lt;li&gt;先来看一个例子， 如何给如下UserServiceImpl中所有方法添加进入方法的日志，&lt;/li&gt;&lt;/ul&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;/**
 * @author pdai
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserServiceImpl&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IUserService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * find user list.
     *
     * @return user list
     */&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findUserList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;execute method： findUserList&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pdai&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * add user
     */&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;execute method： addUser&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;我们将记录日志功能解耦为日志切面，它的目标是解耦。进而引出AOP的理念：就是将分散在各个业务逻辑代码中相同的代码通过&lt;strong&gt;横向切割&lt;/strong&gt;的方式抽取到一个独立的模块中！&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;&quot; data-src=&quot;https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/spring/springframework/spring-framework-aop-4.png&quot; loading=&quot;lazy&quot; class=&quot;lazy&quot;/&gt;&lt;/p&gt; &lt;p&gt;OOP面向对象编程，针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。而AOP则是针对业务处理过程中的切面进行提取，它所面对的是处理过程的某个步骤或阶段，以获得逻辑过程的中各部分之间低耦合的隔离效果。这两种设计思想在目标上有着本质的差异。&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;&quot; data-src=&quot;https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/spring/springframework/spring-framework-aop-2.png&quot; loading=&quot;lazy&quot; class=&quot;lazy&quot;/&gt;&lt;/p&gt; &lt;h3 id=&quot;aop术语&quot;&gt;&lt;a href=&quot;#aop术语&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; AOP术语&lt;/h3&gt; &lt;blockquote&gt;&lt;p&gt;首先让我们从一些重要的AOP概念和术语开始。&lt;strong&gt;这些术语不是Spring特有的&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;连接点（Jointpoint）&lt;/strong&gt;：表示需要在程序中插入横切关注点的扩展点，&lt;strong&gt;连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常等等&lt;/strong&gt;，Spring只支持方法执行连接点，在AOP中表示为&lt;strong&gt;在哪里干&lt;/strong&gt;；&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;切入点（Pointcut）&lt;/strong&gt;： 选择一组相关连接点的模式，即可以认为连接点的集合，Spring支持perl5正则表达式和AspectJ切入点模式，Spring默认使用AspectJ语法，在AOP中表示为&lt;strong&gt;在哪里干的集合&lt;/strong&gt;；&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;通知（Advice）&lt;/strong&gt;：在连接点上执行的行为，通知提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段；包括前置通知（before advice）、后置通知(after advice)、环绕通知（around advice），在Spring中通过代理模式实现AOP，并通过拦截器模式以环绕连接点的拦截器链织入通知；在AOP中表示为&lt;strong&gt;干什么&lt;/strong&gt;；&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;方面/切面（Aspect）&lt;/strong&gt;：横切关注点的模块化，比如上边提到的日志组件。可以认为是通知、引入和切入点的组合；在Spring中可以使用Schema和@AspectJ方式进行组织实现；在AOP中表示为&lt;strong&gt;在哪干和干什么集合&lt;/strong&gt;；&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;引入（inter-type declaration）&lt;/strong&gt;：也称为内部类型声明，为已有的类添加额外新的字段或方法，Spring允许引入新的接口（必须对应一个实现）到所有被代理对象（目标对象）, 在AOP中表示为&lt;strong&gt;干什么（引入什么）&lt;/strong&gt;；&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;目标对象（Target Object）&lt;/strong&gt;：需要被织入横切关注点的对象，即该对象是切入点选择的对象，需要被通知的对象，从而也可称为被通知对象；由于Spring AOP 通过代理模式实现，从而这个对象永远是被代理对象，在AOP中表示为&lt;strong&gt;对谁干&lt;/strong&gt;；&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;织入（Weaving）&lt;/strong&gt;：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。在AOP中表示为&lt;strong&gt;怎么实现的&lt;/strong&gt;；&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;AOP代理（AOP Proxy）&lt;/strong&gt;：AOP框架使用代理模式创建的对象，从而实现在连接点处插入通知（即应用切面），就是通过代理来对目标对象应用切面。在Spring中，AOP代理可以用JDK动态代理或CGLIB代理实现，而通过拦截器模型应用切面。在AOP中表示为&lt;strong&gt;怎么实现的一种典型方式&lt;/strong&gt;；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt; &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;通知类型&lt;/strong&gt;：&lt;/p&gt;&lt;/blockquote&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;前置通知（Before advice）&lt;/strong&gt;：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;后置通知（After returning advice）&lt;/strong&gt;：在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;异常通知（After throwing advice）&lt;/strong&gt;：在方法抛出异常退出时执行的通知。&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;最终通知（After (finally) advice）&lt;/strong&gt;：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;环绕通知（Around Advice）&lt;/strong&gt;：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;环绕通知是最常用的通知类型。和AspectJ一样，Spring提供所有类型的通知，我们推荐你使用尽可能简单的通知类型来实现需要的功能。例如，如果你只是需要一个方法的返回值来更新缓存，最好使用后置通知而不是环绕通知，尽管环绕通知也能完成同样的事情。用最合适的通知类型可以使得编程模型变得简单，并且能够避免很多潜在的错误。比如，你不需要在JoinPoint上调用用于环绕通知的proceed()方法，就不会有调用的问题。&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;我们把这些术语串联到一起，方便理解&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;&lt;img alt=&quot;&quot; data-src=&quot;https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/spring/springframework/spring-framework-aop-3.png&quot; loading=&quot;lazy&quot; class=&quot;lazy&quot;/&gt;&lt;/p&gt; &lt;h3 id=&quot;spring-aop和aspectj是什么关系&quot;&gt;&lt;a href=&quot;#spring-aop和aspectj是什么关系&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; Spring AOP和AspectJ是什么关系&lt;/h3&gt;  &lt;p&gt;AspectJ是一个java实现的AOP框架，它能够对java代码进行AOP编译（一般在编译期进行），让java代码具有AspectJ的AOP功能（当然需要特殊的编译器）&lt;/p&gt; &lt;p&gt;可以这样说AspectJ是目前实现AOP框架中最成熟，功能最丰富的语言，更幸运的是，AspectJ与java程序完全兼容，几乎是无缝关联，因此对于有java编程基础的工程师，上手和使用都非常容易。&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;其次，为什么需要理清楚Spring AOP和AspectJ的关系&lt;/strong&gt;？&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;我们看下@Aspect以及增强的几个注解，为什么不是Spring包，而是来源于aspectJ呢？&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;&quot; data-src=&quot;https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/spring/springframework/spring-framework-aop-5.png&quot; loading=&quot;lazy&quot; class=&quot;lazy&quot;/&gt;&lt;/p&gt;  &lt;ol&gt;&lt;li&gt;AspectJ是更强的AOP框架，是实际意义的&lt;strong&gt;AOP标准&lt;/strong&gt;；&lt;/li&gt; &lt;li&gt;Spring为何不写类似AspectJ的框架？ Spring AOP使用纯Java实现, 它不需要专门的编译过程, 它一个&lt;strong&gt;重要的原则就是无侵入性（non-invasiveness）&lt;/strong&gt;; Spring 小组完全有能力写类似的框架，只是Spring AOP从来没有打算通过提供一种全面的AOP解决方案来与AspectJ竞争。Spring的开发小组相信无论是基于代理（proxy-based）的框架如Spring AOP或者是成熟的框架如AspectJ都是很有价值的，他们之间应该是&lt;strong&gt;互补而不是竞争的关系&lt;/strong&gt;。&lt;/li&gt; &lt;li&gt;Spring小组喜欢@AspectJ注解风格更胜于Spring XML配置； 所以&lt;strong&gt;在Spring 2.0使用了和AspectJ 5一样的注解，并使用AspectJ来做切入点解析和匹配&lt;/strong&gt;。&lt;strong&gt;但是，AOP在运行时仍旧是纯的Spring AOP，并不依赖于AspectJ的编译器或者织入器（weaver）&lt;/strong&gt;。&lt;/li&gt; &lt;li&gt;Spring 2.5对AspectJ的支持：在一些环境下，增加了对AspectJ的装载时编织支持，同时提供了一个新的bean切入点。&lt;/li&gt;&lt;/ol&gt;  &lt;p&gt;了解AspectJ应用到java代码的过程（这个过程称为织入），对于织入这个概念，可以简单理解为aspect(切面)应用到目标函数(类)的过程。&lt;/p&gt; &lt;p&gt;对于这个过程，一般分为&lt;strong&gt;动态织入&lt;/strong&gt;和&lt;strong&gt;静态织入&lt;/strong&gt;：&lt;/p&gt; &lt;ol&gt;&lt;li&gt;动态织入的方式是在运行时动态将要增强的代码织入到目标类中，这样往往是通过动态代理技术完成的，如Java JDK的动态代理(Proxy，底层通过反射实现)或者CGLIB的动态代理(底层通过继承实现)，Spring AOP采用的就是基于运行时增强的代理技术&lt;/li&gt; &lt;li&gt;ApectJ采用的就是静态织入的方式。ApectJ主要采用的是编译期织入，在这个期间使用AspectJ的acj编译器(类似javac)把aspect类编译成class字节码后，在java目标类编译时织入，即先编译aspect类再编译目标类。&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;&lt;img alt=&quot;&quot; data-src=&quot;https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/spring/springframework/spring-framework-aop-6.png&quot; loading=&quot;lazy&quot; class=&quot;lazy&quot;/&gt;&lt;/p&gt; &lt;h2 id=&quot;aop的配置方式&quot;&gt;&lt;a href=&quot;#aop的配置方式&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; AOP的配置方式&lt;/h2&gt; &lt;blockquote&gt;&lt;p&gt;Spring AOP 支持对XML模式和基于@AspectJ注解的两种配置方式。&lt;/p&gt;&lt;/blockquote&gt; &lt;h3 id=&quot;xml-schema配置方式&quot;&gt;&lt;a href=&quot;#xml-schema配置方式&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; XML Schema配置方式&lt;/h3&gt; &lt;p&gt;Spring提供了使用&quot;aop&quot;命名空间来定义一个切面，我们来看个例子(&lt;a href=&quot;https://github.com/realpdai/tech-pdai-spring-demos/004-spring-framework-demo-aop-xml&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;例子代码&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot; class=&quot;icon outbound&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt; &lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt; &lt;span class=&quot;sr-only&quot;&gt;(opens new window)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;)：&lt;/p&gt;  &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;tech&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pdai&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * @author pdai
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AopDemoServiceImpl&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AopDemoServiceImpl.doMethod1()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AopDemoServiceImpl.doMethod2()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AopDemoServiceImpl.doMethod3()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;some exception&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;tech&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pdai&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * @author pdai
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LogAspect&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * 环绕通知.
     *
     * @param pjp pjp
     * @return obj
     * @throws Throwable exception
     */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doAround&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProceedingJoinPoint&lt;/span&gt; pjp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-----------------------&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;环绕通知: 进入方法&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pjp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;环绕通知: 退出方法&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * 前置通知.
     */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doBefore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;前置通知&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * 后置通知.
     *
     * @param result return val
     */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doAfterReturning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;后置通知, 返回值: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * 异常通知.
     *
     * @param e exception
     */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doAfterThrowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;异常通知, 异常: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * 最终通知.
     */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doAfter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;最终通知&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;57&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;language-xml line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;beans&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.springframework.org/schema/beans&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;xsi&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2001/XMLSchema-instance&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;aop&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.springframework.org/schema/aop&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;context&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.springframework.org/schema/context&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xsi:&lt;/span&gt;schemaLocation&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd
&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;context:&lt;/span&gt;component-scan&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;base-package&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tech.pdai.springframework&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;aspectj-autoproxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 目标类 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;bean&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;demoService&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tech.pdai.springframework.service.AopDemoServiceImpl&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- configure properties of bean here as normal --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;bean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 切面 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;bean&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;logAspect&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tech.pdai.springframework.aspect.LogAspect&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- configure properties of aspect here as normal --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;bean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 配置切面 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;aspect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;logAspect&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 配置切入点 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;pointcut&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pointCutMethod&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;execution(* tech.pdai.springframework.service.*.*(..))&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 环绕通知 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;around&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;doAround&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;pointcut-ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pointCutMethod&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 前置通知 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;before&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;doBefore&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;pointcut-ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pointCutMethod&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 后置通知；returning属性：用于设置后置通知的第二个参数的名称，类型是Object --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;after-returning&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;doAfterReturning&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;pointcut-ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pointCutMethod&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 异常通知：如果没有异常，将不会执行增强；throwing属性：用于设置通知第二个参数的的名称、类型--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;after-throwing&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;doAfterThrowing&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;pointcut-ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pointCutMethod&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;throwing&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 最终通知 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;after&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;doAfter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;pointcut-ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pointCutMethod&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;aspect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;aop:&lt;/span&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- more bean definitions for data access objects go here --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;beans&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;47&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;/**
  * main interfaces.
  *
  * @param args args
  */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// create and configure beans&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;ApplicationContext&lt;/span&gt; context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;aspects.xml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// retrieve configured instance&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;AopDemoServiceImpl&lt;/span&gt; service &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;demoService&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AopDemoServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// use configured instance&lt;/span&gt;
    service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// e.printStackTrace();&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 进入方法
前置通知
&lt;span class=&quot;token class-name&quot;&gt;AopDemoServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 退出方法
最终通知
&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 进入方法
前置通知
&lt;span class=&quot;token class-name&quot;&gt;AopDemoServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 退出方法
最终通知
后置通知&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 返回值&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; hello world
&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 进入方法
前置通知
&lt;span class=&quot;token class-name&quot;&gt;AopDemoServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
最终通知
异常通知&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 异常&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; some exception
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&quot;aspectj注解方式&quot;&gt;&lt;a href=&quot;#aspectj注解方式&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; AspectJ注解方式&lt;/h3&gt; &lt;p&gt;基于XML的声明式AspectJ存在一些不足，需要在Spring配置文件配置大量的代码信息，为了解决这个问题，Spring 使用了@AspectJ框架为AOP的实现提供了一套注解。&lt;/p&gt; &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;注解名称&lt;/th&gt; &lt;th&gt;解释&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;@Aspect&lt;/td&gt; &lt;td&gt;用来定义一个切面。&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;@pointcut&lt;/td&gt; &lt;td&gt;用于定义切入点表达式。在使用时还需要定义一个包含名字和任意参数的方法签名来表示切入点名称，这个方法签名就是一个返回值为void，且方法体为空的普通方法。&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;@Before&lt;/td&gt; &lt;td&gt;用于定义前置通知，相当于BeforeAdvice。在使用时，通常需要指定一个value属性值，该属性值用于指定一个切入点表达式(可以是已有的切入点，也可以直接定义切入点表达式)。&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;@AfterReturning&lt;/td&gt; &lt;td&gt;用于定义后置通知，相当于AfterReturningAdvice。在使用时可以指定pointcut / value和returning属性，其中pointcut / value这两个属性的作用一样，都用于指定切入点表达式。&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;@Around&lt;/td&gt; &lt;td&gt;用于定义环绕通知，相当于MethodInterceptor。在使用时需要指定一个value属性，该属性用于指定该通知被植入的切入点。&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;@After-Throwing&lt;/td&gt; &lt;td&gt;用于定义异常通知来处理程序中未处理的异常，相当于ThrowAdvice。在使用时可指定pointcut / value和throwing属性。其中pointcut/value用于指定切入点表达式，而throwing属性值用于指定-一个形参名来表示Advice方法中可定义与此同名的形参，该形参可用于访问目标方法抛出的异常。&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;@After&lt;/td&gt; &lt;td&gt;用于定义最终final 通知，不管是否异常，该通知都会执行。使用时需要指定一个value属性，该属性用于指定该通知被植入的切入点。&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;@DeclareParents&lt;/td&gt; &lt;td&gt;用于定义引介通知，相当于IntroductionInterceptor (不要求掌握)。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;blockquote&gt;&lt;p&gt;Spring AOP的实现方式是动态织入，动态织入的方式是在运行时动态将要增强的代码织入到目标类中，这样往往是通过动态代理技术完成的；&lt;strong&gt;如Java JDK的动态代理(Proxy，底层通过反射实现)或者CGLIB的动态代理(底层通过继承实现)&lt;/strong&gt;，Spring AOP采用的就是基于运行时增强的代理技术。所以我们看下如下的两个例子(&lt;a href=&quot;https://github.com/realpdai/tech-pdai-spring-demos&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;例子代码&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot; class=&quot;icon outbound&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt; &lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt; &lt;span class=&quot;sr-only&quot;&gt;(opens new window)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; 中05模块）：&lt;/p&gt; &lt;/blockquote&gt; &lt;h4 id=&quot;接口使用jdk代理&quot;&gt;&lt;a href=&quot;#接口使用jdk代理&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; 接口使用JDK代理&lt;/h4&gt;  &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;/**
 * Jdk Proxy Service.
 *
 * @author pdai
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IJdkProxyService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;/**
 * @author pdai
 */&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JdkProxyDemoServiceImpl&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IJdkProxyService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;JdkProxyServiceImpl.doMethod1()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;JdkProxyServiceImpl.doMethod2()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;JdkProxyServiceImpl.doMethod3()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;some exception&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;tech&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pdai&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AfterReturning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AfterThrowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Around&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Aspect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Before&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Pointcut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EnableAspectJAutoProxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stereotype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * @author pdai
 */&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@EnableAspectJAutoProxy&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LogAspect&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * define point cut.
     */&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;execution(* tech.pdai.springframework.service.*.*(..))&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pointCutMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;token comment&quot;&gt;/**
     * 环绕通知.
     *
     * @param pjp pjp
     * @return obj
     * @throws Throwable exception
     */&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pointCutMethod()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doAround&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProceedingJoinPoint&lt;/span&gt; pjp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-----------------------&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;环绕通知: 进入方法&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pjp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;环绕通知: 退出方法&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * 前置通知.
     */&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pointCutMethod()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doBefore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;前置通知&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;token comment&quot;&gt;/**
     * 后置通知.
     *
     * @param result return val
     */&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@AfterReturning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pointcut &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pointCutMethod()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; returning &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doAfterReturning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;后置通知, 返回值: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * 异常通知.
     *
     * @param e exception
     */&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@AfterThrowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pointcut &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pointCutMethod()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; throwing &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doAfterThrowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;异常通知, 异常: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * 最终通知.
     */&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@After&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pointCutMethod()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doAfter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;最终通知&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;77&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;79&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;83&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 进入方法
前置通知
&lt;span class=&quot;token class-name&quot;&gt;JdkProxyServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
最终通知
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 退出方法
&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 进入方法
前置通知
&lt;span class=&quot;token class-name&quot;&gt;JdkProxyServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
后置通知&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 返回值&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; hello world
最终通知
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 退出方法
&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 进入方法
前置通知
&lt;span class=&quot;token class-name&quot;&gt;JdkProxyServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
异常通知&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 异常&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; some exception
最终通知
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h4 id=&quot;非接口使用cglib代理&quot;&gt;&lt;a href=&quot;#非接口使用cglib代理&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; 非接口使用Cglib代理&lt;/h4&gt;  &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;/**
 * Cglib proxy.
 *
 * @author pdai
 */&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CglibProxyDemoServiceImpl&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CglibProxyDemoServiceImpl.doMethod1()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CglibProxyDemoServiceImpl.doMethod2()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doMethod3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CglibProxyDemoServiceImpl.doMethod3()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;some exception&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;p&gt;和上面相同&lt;/p&gt;  &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 进入方法
前置通知
&lt;span class=&quot;token class-name&quot;&gt;CglibProxyDemoServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
最终通知
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 退出方法
&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 进入方法
前置通知
&lt;span class=&quot;token class-name&quot;&gt;CglibProxyDemoServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
后置通知&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 返回值&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; hello world
最终通知
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 退出方法
&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;
环绕通知&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 进入方法
前置通知
&lt;span class=&quot;token class-name&quot;&gt;CglibProxyDemoServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doMethod3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
异常通知&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 异常&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; some exception
最终通知
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&quot;aop使用问题小结&quot;&gt;&lt;a href=&quot;#aop使用问题小结&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; AOP使用问题小结&lt;/h2&gt; &lt;blockquote&gt;&lt;p&gt;这里总结下实际开发中会遇到的一些问题：&lt;/p&gt;&lt;/blockquote&gt; &lt;h3 id=&quot;切入点pointcut的申明规则&quot;&gt;&lt;a href=&quot;#切入点pointcut的申明规则&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; 切入点（pointcut）的申明规则?&lt;/h3&gt; &lt;p&gt;Spring AOP 用户可能会经常使用 execution切入点指示符。执行表达式的格式如下：&lt;/p&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;execution（modifiers&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;pattern&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; ret&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;type&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;pattern declaring&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;type&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;pattern&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;pattern（param&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;pattern） &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;pattern&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;）
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;ret-type-pattern 返回类型模式, name-pattern名字模式和param-pattern参数模式是必选的， 其它部分都是可选的。返回类型模式决定了方法的返回类型必须依次匹配一个连接点。 你会使用的最频繁的返回类型模式是&lt;code&gt;*&lt;/code&gt;，&lt;strong&gt;它代表了匹配任意的返回类型&lt;/strong&gt;。&lt;/li&gt; &lt;li&gt;declaring-type-pattern, 一个全限定的类型名将只会匹配返回给定类型的方法。&lt;/li&gt; &lt;li&gt;name-pattern 名字模式匹配的是方法名。 你可以使用&lt;code&gt;*&lt;/code&gt;通配符作为所有或者部分命名模式。&lt;/li&gt; &lt;li&gt;param-pattern 参数模式稍微有点复杂：()匹配了一个不接受任何参数的方法， 而(..)匹配了一个接受任意数量参数的方法（零或者更多）。 模式(&lt;em&gt;)匹配了一个接受一个任何类型的参数的方法。 模式(&lt;/em&gt;,String)匹配了一个接受两个参数的方法，第一个可以是任意类型， 第二个则必须是String类型。&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;对应到我们上面的例子：&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;&quot; data-src=&quot;https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/spring/springframework/spring-framework-aop-7.png&quot; loading=&quot;lazy&quot; class=&quot;lazy&quot;/&gt;&lt;/p&gt; &lt;p&gt;下面给出一些通用切入点表达式的例子。&lt;/p&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;// 任意公共方法的执行：&lt;/span&gt;
execution（&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;（&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;））

&lt;span class=&quot;token comment&quot;&gt;// 任何一个名字以“set”开始的方法的执行：&lt;/span&gt;
execution（&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; set&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;（&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;））

&lt;span class=&quot;token comment&quot;&gt;// AccountService接口定义的任意方法的执行：&lt;/span&gt;
execution（&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;AccountService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;*（&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;））

&lt;span class=&quot;token comment&quot;&gt;// 在service包中定义的任意方法的执行：&lt;/span&gt;
execution（&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;*&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;*（&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;））

&lt;span class=&quot;token comment&quot;&gt;// 在service包或其子包中定义的任意方法的执行：&lt;/span&gt;
execution（&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;*&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;*（&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;））

&lt;span class=&quot;token comment&quot;&gt;// 在service包中的任意连接点（在Spring AOP中只是方法执行）：&lt;/span&gt;
within（com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;*）

&lt;span class=&quot;token comment&quot;&gt;// 在service包或其子包中的任意连接点（在Spring AOP中只是方法执行）：&lt;/span&gt;
within（com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;*）

&lt;span class=&quot;token comment&quot;&gt;// 实现了AccountService接口的代理对象的任意连接点 （在Spring AOP中只是方法执行）：&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;（&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;AccountService&lt;/span&gt;）&lt;span class=&quot;token comment&quot;&gt;// &#x27;this&#x27;在绑定表单中更加常用&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 实现AccountService接口的目标对象的任意连接点 （在Spring AOP中只是方法执行）：&lt;/span&gt;
target（&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;AccountService&lt;/span&gt;） &lt;span class=&quot;token comment&quot;&gt;// &#x27;target&#x27;在绑定表单中更加常用&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 任何一个只接受一个参数，并且运行时所传入的参数是Serializable 接口的连接点（在Spring AOP中只是方法执行）&lt;/span&gt;
args（&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;Serializable&lt;/span&gt;） &lt;span class=&quot;token comment&quot;&gt;// &#x27;args&#x27;在绑定表单中更加常用; 请注意在例子中给出的切入点不同于 execution(* *(java.io.Serializable))： args版本只有在动态运行时候传入参数是Serializable时才匹配，而execution版本在方法签名中声明只有一个 Serializable类型的参数时候匹配。&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 目标对象中有一个 @Transactional 注解的任意连接点 （在Spring AOP中只是方法执行）&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@target&lt;/span&gt;（&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transaction&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;Transactional&lt;/span&gt;）&lt;span class=&quot;token comment&quot;&gt;// &#x27;@target&#x27;在绑定表单中更加常用&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 任何一个目标对象声明的类型有一个 @Transactional 注解的连接点 （在Spring AOP中只是方法执行）：&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@within&lt;/span&gt;（&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transaction&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;Transactional&lt;/span&gt;） &lt;span class=&quot;token comment&quot;&gt;// &#x27;@within&#x27;在绑定表单中更加常用&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 任何一个执行的方法有一个 @Transactional 注解的连接点 （在Spring AOP中只是方法执行）&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@annotation&lt;/span&gt;（&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transaction&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;Transactional&lt;/span&gt;） &lt;span class=&quot;token comment&quot;&gt;// &#x27;@annotation&#x27;在绑定表单中更加常用&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 任何一个只接受一个参数，并且运行时所传入的参数类型具有@Classified 注解的连接点（在Spring AOP中只是方法执行）&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@args&lt;/span&gt;（&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;security&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;Classified&lt;/span&gt;） &lt;span class=&quot;token comment&quot;&gt;// &#x27;@args&#x27;在绑定表单中更加常用&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 任何一个在名为&#x27;tradeService&#x27;的Spring bean之上的连接点 （在Spring AOP中只是方法执行）&lt;/span&gt;
bean（tradeService）

&lt;span class=&quot;token comment&quot;&gt;// 任何一个在名字匹配通配符表达式&#x27;*Service&#x27;的Spring bean之上的连接点 （在Spring AOP中只是方法执行）&lt;/span&gt;
bean（&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt;）
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;47&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;此外Spring 支持如下三个逻辑运算符来组合切入点表达式&lt;/p&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;：要求连接点同时匹配两个切入点表达式
&lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;：要求连接点匹配任意个切入点表达式
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;：要求连接点不匹配指定的切入点表达式
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&quot;多种增强通知的顺序&quot;&gt;&lt;a href=&quot;#多种增强通知的顺序&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; 多种增强通知的顺序？&lt;/h3&gt; &lt;p&gt;如果有多个通知想要在同一连接点运行会发生什么？Spring AOP遵循跟AspectJ一样的优先规则来确定通知执行的顺序。 在“进入”连接点的情况下，最高优先级的通知会先执行（所以给定的两个前置通知中，优先级高的那个会先执行）。 在“退出”连接点的情况下，最高优先级的通知会最后执行。（所以给定的两个后置通知中， 优先级高的那个会第二个执行）。&lt;/p&gt; &lt;p&gt;当定义在不同的切面里的两个通知都需要在一个相同的连接点中运行， 那么除非你指定，否则执行的顺序是未知的。你可以通过指定优先级来控制执行顺序。 在标准的Spring方法中可以在切面类中实现org.springframework.core.Ordered 接口或者用&lt;strong&gt;Order注解&lt;/strong&gt;做到这一点。在两个切面中， Ordered.getValue()方法返回值（或者注解值）较低的那个有更高的优先级。&lt;/p&gt; &lt;p&gt;当定义在相同的切面里的两个通知都需要在一个相同的连接点中运行， 执行的顺序是未知的（因为这里没有方法通过反射javac编译的类来获取声明顺序）。 考虑在每个切面类中按连接点压缩这些通知方法到一个通知方法，或者重构通知的片段到各自的切面类中 - 它能在切面级别进行排序。&lt;/p&gt; &lt;h3 id=&quot;spring-aop-和-aspectj-之间的关键区别&quot;&gt;&lt;a href=&quot;#spring-aop-和-aspectj-之间的关键区别&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; Spring AOP 和 AspectJ 之间的关键区别？&lt;/h3&gt; &lt;p&gt;AspectJ可以做Spring AOP干不了的事情，&lt;strong&gt;它是AOP编程的完全解决方案，Spring AOP则致力于解决企业级开发中最普遍的AOP&lt;/strong&gt;（方法织入）。&lt;/p&gt; &lt;p&gt;下表总结了 Spring AOP 和 AspectJ 之间的关键区别:&lt;/p&gt; &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Spring AOP&lt;/th&gt; &lt;th&gt;AspectJ&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;在纯 Java 中实现&lt;/td&gt; &lt;td&gt;使用 Java 编程语言的扩展实现&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;不需要单独的编译过程&lt;/td&gt; &lt;td&gt;除非设置 LTW，否则需要 AspectJ 编译器 (ajc)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;只能使用运行时织入&lt;/td&gt; &lt;td&gt;运行时织入不可用。支持编译时、编译后和加载时织入&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;功能不强-仅支持方法级编织&lt;/td&gt; &lt;td&gt;更强大 - 可以编织字段、方法、构造函数、静态初始值设定项、最终类/方法等......。&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;只能在由 Spring 容器管理的 bean 上实现&lt;/td&gt; &lt;td&gt;可以在所有域对象上实现&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;仅支持方法执行切入点&lt;/td&gt; &lt;td&gt;支持所有切入点&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;代理是由目标对象创建的, 并且切面应用在这些代理上&lt;/td&gt; &lt;td&gt;在执行应用程序之前 (在运行时) 前, 各方面直接在代码中进行织入&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;比 AspectJ 慢多了&lt;/td&gt; &lt;td&gt;更好的性能&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;易于学习和应用&lt;/td&gt; &lt;td&gt;相对于 Spring AOP 来说更复杂&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;h3 id=&quot;spring-aop还是完全用aspectj&quot;&gt;&lt;a href=&quot;#spring-aop还是完全用aspectj&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; Spring AOP还是完全用AspectJ？&lt;/h3&gt; &lt;p&gt;以下Spring官方的回答：（总结来说就是 &lt;strong&gt;Spring AOP更易用，AspectJ更强大&lt;/strong&gt;）。&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Spring AOP比完全使用AspectJ更加简单， 因为它不需要引入AspectJ的编译器／织入器到你开发和构建过程中。 如果你&lt;strong&gt;仅仅需要在Spring bean上通知执行操作，那么Spring AOP是合适的选择&lt;/strong&gt;。&lt;/li&gt; &lt;li&gt;如果你需要通知domain对象或其它没有在Spring容器中管理的任意对象，那么你需要使用AspectJ。&lt;/li&gt; &lt;li&gt;如果你想通知除了简单的方法执行之外的连接点（如：调用连接点、字段get或set的连接点等等）， 也需要使用AspectJ。&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;当使用AspectJ时，你可以选择使用AspectJ语言（也称为“代码风格”）或@AspectJ注解风格。 如果切面在你的设计中扮演一个很大的角色，并且你能在Eclipse等IDE中使用AspectJ Development Tools (AJDT)， 那么首选AspectJ语言 :- 因为该语言专门被设计用来编写切面，所以会更清晰、更简单。如果你没有使用 Eclipse等IDE，或者在你的应用中只有很少的切面并没有作为一个主要的角色，你或许应该考虑使用@AspectJ风格 并在你的IDE中附加一个普通的Java编辑器，并且在你的构建脚本中增加切面织入（链接）的段落。&lt;/p&gt; &lt;h2 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;header-anchor&quot;&gt;¶&lt;/a&gt; 参考文章&lt;/h2&gt; &lt;p&gt;http://shouce.jb51.net/spring/aop.html#aop-ataspectj&lt;/p&gt; &lt;p&gt;https://www.cnblogs.com/linhp/p/5881788.html&lt;/p&gt; &lt;p&gt;https://www.cnblogs.com/bj-xiaodao/p/10777914.html&lt;/p&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e47ff837040ee0d6c85c12d33119dd5d</guid>
<title>session、token、jwt、oauth2 傻傻分不清</title>
<link>https://toutiao.io/k/aynlgft</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;a class=&quot;weui-flex original_primary_card appmsg_card_context wx_tap_card js_wx_tap_highlight&quot; href=&quot;#&quot; id=&quot;copyright_info&quot;&gt;
                  
                  &lt;div class=&quot;weui-flex__item&quot; role=&quot;option&quot;&gt;
                    &lt;strong class=&quot;original_primary_nickname&quot;&gt;Hollis&lt;/strong&gt;
                                          &lt;span class=&quot;weui-hidden_abs&quot;&gt;.&lt;/span&gt;
                      &lt;p class=&quot;original_primary_desc&quot;&gt;Hollis，一个对Coding有着独特追求的人。《Java工程师成神之路》系列作者、《程序员的三门课》联合作者，本公众号专注分享Java相关技术干货！&lt;/p&gt;
                                      &lt;/div&gt;
                  &lt;p class=&quot;weui-flex__ft&quot;/&gt;
                &lt;/a&gt;
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>