<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>8e30f194680683ae32a6b2fa301a580a</guid>
<title>业务系统调研方法论</title>
<link>https://toutiao.io/k/i6ehcav</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;今早收到邀请写一篇业务系统调研方法论的文章，因为这个方法一直就在头脑中，一直在用。所以动笔直接写了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;业务系统调研，调研的内容有两个：&lt;/p&gt;&lt;p&gt;1、做成什么样&lt;/p&gt;&lt;p&gt;2、怎么做&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;把事情想清楚了，完成一份完整的调研报告，整个调研流程前后都需要做工作。所以完整的调研流程要分为5个步骤：&lt;/p&gt;&lt;p&gt;1、设立目标&lt;/p&gt;&lt;p&gt;2、梳理清楚现状&lt;/p&gt;&lt;p&gt;3、调研要做成什么样&lt;/p&gt;&lt;p&gt;4、调研怎么做&lt;/p&gt;&lt;p&gt;5、形成方案&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;设立目标和梳理清楚现状&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对业务系统的调研，需要在设立好目标和梳理清楚现状的前提下开展。几年前有次开会，评审一个技术方案。但是做方案的小伙做的调研：调研部分与实际需求相关度不高。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;小伙是刚毕业的，觉得这个调研有难度，很难从业界找到相同问题的方案。但是领导给了一个中肯的建议：这个问题是个常规问题，如果没有找到相关度高的内容，那应该是你的搜索关键词不对。而关键词不对的根源就是没有梳理清楚要调研的问题及本质。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，光梳理清楚目标和现状还不够。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;做成什么样&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第一步：术语&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;术语是进入一个业务领域的有效抓手。我们举个例子来说明一下术语的价值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在我的认知当中，不管是组织架构、业务架构、技术架构。有一个原则就是先划分领域，清晰领域边界。各个领域之间的关系都是在领域层解决。而数据存储只是支撑。举个通俗点的例子：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlib4b8hIIMeFf4AKsDJWsLGGRoYX8sW0ic2lNQciaHYlNKHOlcKzuOJtQAibvfW0JhAn8UneCaibz8f98A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;一个好的设计好比一把凳子，领域是凳面，数据存储是凳子腿，它们之间靠领域联系在一起。数据存储是支撑，最好和其他部分解耦开。这种简约的风格易于维护和扩展。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是我们leader告诉我，数据存储自成体系。通过存储可以清楚掌握领域的全貌。就是说他心中的凳子大概是长这个样子：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlib4b8hIIMeFf4AKsDJWsLGG7MqKsFfh7gIn2tRibfq9P3oeyGegOpl1oTBOtLK7rbfLmyv6tfEkcsw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;我觉得这个观点的形成应该和领导工作时间长，从oracle数据库时代一路走来的历程有关。但是他心中的整个体系全貌我不清楚，我不清楚就没有发言权。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了走进他的世界，我围绕的是他口中的一个术语：三户模型。这是电信、银行、电商等领域常用的一个术语。三户是指用户、客户和账户。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;三户：&lt;/p&gt;&lt;p&gt;    用户：单个人&lt;/p&gt;&lt;p&gt;    客户：个人或集体就是服务的对象&lt;/p&gt;&lt;p&gt;    账户：客户使用服务的ID，一般指：护照，身份证或者其他账户&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;三户模型是根据营销模型转向“以客户为中心”理念而产生的结果，客户的需求成为支撑系统信息模型不断趋于完善的主要驱动力。与客户这个实体概念关联最为紧密的概念就是用户和帐户，这三者之间的关系应该是一个相互关联但又是独立的三个实体，这种关联只是一个归属和映射的关系，而三个实体本身是相互独立的，分别是体现完全不同的几个域的信息，客户是体现了社会域的信息，用户体现了业务域的信息，帐户体现的是资金域的信息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;三户模型是贯穿于整个业务运营支撑系统中的核心模型之一。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当我调研到上面红字的这句话，我突然明白：我们leader的整个上下文是围绕着运营和运维数据来展开的。数据有体系才能体系化运营。通过对这个术语的检查、学习和思考，我慢慢走进了另外一个领域。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第二步：搜索&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;术语是入门，是确保搜索出自己想要信息的基础。有了这个基础，我们就可以看一个业务系统在业界是怎么做的。调研的首选是相关领域的头部机构，比如在电商领域，一般会调研亚马逊、阿里等的优秀实践。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是业务系统做成了什么样子和怎么做的，网上的资源非常有限。很多公司会特意派人去参加一些线下技术沙龙之类的。是不是想到了疫情前经常这个开发者大会、那个meeting up那些怀念的活动。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;不过大家不要对这种大会期望过高，也不要觉得参加了一天的沙龙感觉也没收获什么，是不是因为自己太菜。其实首先，从目的出发，这些上台演讲的专家都是带着目的来的，一般是品牌宣传或者做其他的推广。所以他们的重点是展示自己的实力，一般不会轻易吐露是怎么实现的。所以如果你恰好要做或者想过类似的产品，他们可以激发一些“做成什么样”的思路，不会给你怎么做的思路。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;怎么做&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面对怎么做提供两种调研方法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;访谈法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;很多公司招聘人才是会从一些头部公司有比例的招人的。为什么嘞。因为这些聪明的公司要的不仅仅是这个人，还有这个人的人脉。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;公司的技术方案除了一些开源项目，其他不会对外公开。假设我们已经了解到了XX公司有一款产品做得不错，也很符合现在自身的需求，想了解怎么做的。怎么办呢？找找XX公司的同事打听打听，正式的说法叫做访谈。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不过大家也不要被我误导。访谈法有正规的访谈流程。&lt;span&gt;访谈法的一&lt;/span&gt;&lt;span&gt;般步骤是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;①设&lt;/span&gt;&lt;span&gt;计访谈&lt;/span&gt;&lt;span&gt;提纲。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;②&lt;/span&gt;&lt;span&gt;.恰当进行提问。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;③准确捕捉信息，及时收集有关资料。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;④适当地作出回应。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;⑤及时&lt;/span&gt;做&lt;span&gt;好访谈记录。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;登高类比法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486299&amp;amp;idx=1&amp;amp;sn=34ea00ad39901a51331bfd95dee0c641&amp;amp;chksm=fafde1f5cd8a68e31c7b8d5fa5b21fc70f5e49663f4cd6e6ea0a0639696556bc197b97ea241b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《应用程序怎样划分模块？》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《&lt;span&gt;应用程序怎样划分模块？&lt;/span&gt;》&lt;/a&gt;和&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486507&amp;amp;idx=1&amp;amp;sn=2bd6916ba35babe2bd85da53800377a6&amp;amp;chksm=fafde685cd8a6f934c7cd38a8ee3fe010ed18f47e57ec658bb72ef423d4978f9c262b37c37dd&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《Java无垃圾稳态设计》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《&lt;span&gt;Java无垃圾&lt;/span&gt;&lt;span&gt;稳态设计&lt;/span&gt;&lt;span/&gt;》&lt;/a&gt;里都提到过登高类比法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;登高类比法是先检索最为相似的场景以得出结论。如果检索结果不够时再扩大范围直到足以得出结论。比如设计一个IP分配方法，检索时先检索IP分配，在网上比较权威的大概只有DHCP动态主机配置了。但是我们需要的不是动态，可以退而检索资源分配。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;完整的调研流程的最后一步是形成方案，也就是一个总结的过程。我去年很大一块工作就是在撰写一个公司级的调查研究报告。虽然写的不好，但是过程还是有很大收获的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好了，划重点：三户模型、访谈法、登高类比法。你学会了吗？&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9c4cd038e1687ecebe3da5d02c51f7dd</guid>
<title>22条API设计的最佳实践</title>
<link>https://toutiao.io/k/8y8p2q1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247487551&amp;amp;idx=1&amp;amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;amp;chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&amp;amp;scene=21&amp;amp;token=899450012&amp;amp;lang=zh_CN#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5209003215434084&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdLkEI9sZfdzibFIibZqcxcC7B3hvia556kx6IPOU9INM9yrFARlbkQebzHiciaabEJa0AIRI5podsFyeH89ANvIQWg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;311&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247487551&amp;amp;idx=1&amp;amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;amp;chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&amp;amp;scene=21&amp;amp;token=899450012&amp;amp;lang=zh_CN#wechat_redirect&quot; data-linktype=&quot;2&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;曾经因为一个糟糕的API而感到沮丧吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个微服务的世界里，后端API的一致性设计是必不可少的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天，我们将讨论一些可遵循的最佳实践。我们将保持简短和甜蜜——所以系好安全带，出发咯！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先介绍一些术语&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;任何API设计都遵循一种叫做“面向资源设计”的原则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;资源：资源是数据的一部分，例如：用户&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;集合：一组资源称为集合，例如：用户列表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;URL：标识资源或集合的位置，例如：/user&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，如果你想要获得订单列表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/systemOrders或/system_orders&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/system-orders&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;基于 Spring Boot + MyBatis Plus + Vue &amp;amp; Element 实现的后台管理系统 + 用户小程序，支持 RBAC 动态权限、多租户、数据权限、工作流、三方登录、支付、短信、商城等功能。&lt;/p&gt;&lt;p&gt;项目地址：https://github.com/YunaiV/ruoyi-vue-pro&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，如果你想从一个特定的商店购买产品。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/system-orders/{order_id}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/system-orders/{OrderId}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/system-orders/{orderId}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba 。&lt;/p&gt;&lt;p&gt;项目地址：https://github.com/YunaiV/onemall&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想获得系统的所有用户。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;GET /user&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;GET /User&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;GET /users&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要保持概念的单一性和一致性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;GET /shops/:shopId/category/:categoryId/price&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这很糟糕，因为它指向的是一个属性而不是资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;GET /shops/:shopId/或GET /category/:categoryId&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不要在URL中使用动词来表达你的意图。相反，使用适当的HTTP方法来描述操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;POST /updateuser/{userId}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;GET /getusers&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;PUT /user/{userId}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你有一个端点，它只返回一个操作。在这种情况下，你可以使用动词。例如，如果你想要向用户重新发送警报。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;POST /alarm/&lt;span&gt;245743&lt;/span&gt;/resend&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请记住，这些不是我们的CRUD操作。相反，它们被认为是在我们的系统中执行特定工作的函数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你正在构建一个请求体或响应体为JSON的系统，那么属性名应该使用驼峰大小写。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;   user_name: &lt;span&gt;&quot;Mohammad Faisal&quot;&lt;/span&gt;&lt;br/&gt;   user_id: &lt;span&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;   userName: &lt;span&gt;&quot;Mohammad Faisal&quot;&lt;/span&gt;&lt;br/&gt;   userId: &lt;span&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RESTful HTTP服务必须实现/health和/version和/metricsAPI端点。他们将提供以下信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;/health&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用200 OK状态码响应对/health的请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;/version&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用版本号响应对/version的请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;/metrics&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个端点将提供各种指标，如平均响应时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也强烈推荐使用/debug和/status端点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不要只使用表名作为资源名。从长远来看，这种懒惰是有害的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;product_order&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;product-orders&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是因为公开底层体系结构不是你的目的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有许多好的API设计工具用于编写好的文档，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;API蓝图：https://apiblueprint.org/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Swagger：https://swagger.io/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247487551&amp;amp;idx=1&amp;amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3585714285714286&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdLkEI9sZfemsX2t6xK3VRGhlF8YzR9XFn6OeBkmpvKr0v1gZ4oBrjiaU89vzficqGYdvltmDlNoS9M5jNibMmwcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拥有良好而详细的文档可以为API使用者带来良好的用户体验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;始终对API使用版本控制，并将其向左移动，使其具有最大的作用域。版本号应该是v1，v2等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：http://api.domain.com/v1/shops/3/products&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;始终在API中使用版本控制，因为如果API被外部实体使用，更改端点可能会破坏它们的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果API返回一个对象列表，则响应中总是包含资源的总数。你可以为此使用total属性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  users: [ &lt;br/&gt;     ...&lt;br/&gt;  ]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  users: [ &lt;br/&gt;     ...&lt;br/&gt;  ],&lt;br/&gt;  total: &lt;span&gt;34&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在GET操作中始终接受limit和offset参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;GET /shops?offset=&lt;span&gt;5&lt;/span&gt;&amp;amp;limit=&lt;span&gt;5&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是因为它对于前端的分页是必要的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回的数据量也应该考虑在内。添加一个fields参数，只公开API中必需的字段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例子：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只返回商店的名称，地址和联系方式。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;GET /shops?fields=id,name,address,contact&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在某些情况下，它还有助于减少响应大小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一种非常糟糕的做法，因为url经常被记录，而身份验证令牌也会被不必要地记录。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不应该：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;GET /shops/&lt;span&gt;123&lt;/span&gt;?token=some_kind_of_authenticaiton_token&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相反，通过头部传递它们：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Authorization: Bearer xxxxxx, Extra yyyyy&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，授权令牌应该是短暂有效期的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器不应该假定内容类型。例如，如果你接受application/x-www-form-urlencoded，那么攻击者可以创建一个表单并触发一个简单的POST请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，始终验证内容类型，如果你想使用默认的内容类型，请使用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;content-type: application/json&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTP方法用于解释CRUD功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GET：检索资源的表示形式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;POST：创建新的资源和子资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PUT：更新现有资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PATCH：更新现有资源，它只更新提供的字段，而不更新其他字段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DELETE：删除已存在的资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下是一些实际例子：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;GET /shops/2/products：从shop 2获取所有产品的列表。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GET /shops/2/products/31：获取产品31的详细信息，产品31属于shop 2。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DELETE /shops/2/products/31：应该删除产品31，它属于商店2。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;PUT /shops/2/products/31：应该更新产品31的信息，只在resource-URL上使用PUT，而不是集合。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;POST /shops：应该创建一个新的商店，并返回创建的新商店的详细信息。在集合url上使用POST。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一定要为所有面向公共的API支持CORS（跨源资源共享）头部。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑支持CORS允许的“*”来源，并通过有效的OAuth令牌强制授权。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;避免将用户凭证与原始验证相结合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在所有端点、资源和服务上实施HTTPS（tls加密）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;强制并要求所有回调url、推送通知端点和webhooks使用HTTPS。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当客户端向服务发出无效或不正确的请求，或向服务传递无效或不正确的数据，而服务拒绝该请求时，就会出现错误，或者更具体地说，出现服务错误。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例子包括无效的身份验证凭证、不正确的参数、未知的版本id等。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;当由于一个或多个服务错误而拒绝客户端请求时，一定要返回4xx HTTP错误代码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;考虑处理所有属性，然后在单个响应中返回多个验证问题。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果您对API格式的决定有疑问，这些黄金规则可以帮助我们做出正确的决定。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;扁平比嵌套好。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;简单胜于复杂。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;字符串比数字好。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一致性比定制更好。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就是这样——如果你已经走到了这一步，恭喜你！希望你学到了一些东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望你度过美好的一天！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;译者：Mr.lzc，软件工程师、DevOpsDays、HDZ深圳核心组织者，目前供职于华为，从事云计算工作，专注于K8s、微服务领域。&lt;/p&gt;&lt;p&gt;原文：https://betterprogramming.pub/22-best-practices-to-take-your-api-design-skills-to-the-next-level-65569b200b9&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0472d776aa394fbd8f16fce65f32eccb</guid>
<title>网易开源 Envoy 企业级自定义扩展框架 Hango Rider 简介</title>
<link>https://toutiao.io/k/4nqamzr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.30362116991643456&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/06ULcDvaIGnaRwT6XuR8ZWiaQWo1vZjGcFrQWsfQ8By4gOTZ7yyIlO5uymPjbdRtv8wx19icw0g3JVAMabibCE7gA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1077&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;作者简介&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;王凯，网易数帆高级工程师，主要负责轻舟微服务、轻舟 API 网关等相关产品数据面研发、扩展增强等工作。&lt;/span&gt;&lt;span&gt;对于数据面 Envoy 扩展增强、实践落地具备丰富的经验。&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;可扩展性是网络代理软件最为关键的特性之一，灵活强大的可扩展性可以大大拓展网络代理软件的能力边界。作为新兴的开源高性能网络代理软件，Envoy 本身提供了相对丰富的可扩展能力，如基于 C++ 的原生扩展，基于 WASM/Lua 的动态扩展。但是 Envoy 现有可扩展能力都各自存在其局限性。在大规模落地实践 Envoy 网关 / 网格过程中，网易数帆为 Envoy 实现了一套基于 Lua 的企业级自定义扩展框架 - Rider，应用于轻舟微服务平台，满足业务方所需要的易开发、高性能、功能丰富等各项要求。目前，&lt;span&gt;Rider&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; 扩展框架已经全面开源，并且被集成于开源 API 网关 &lt;span&gt;Hango&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt; 当中，为 Hango 网关提供了灵活、强大、易用的自定义扩展能力。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4025423728813559&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlicOds1mFiaegRHtUxoj2ZwOdN9rlq9vFb6S5MJxxKT1aWsLzY7o9GYnKA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;708&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;1. Envoy 的可扩展性现状&lt;/h2&gt;&lt;p&gt;在互联网体系下，凡是需要对外暴露的系统几乎都需要网络代理：较早出现的 HAProxy、Nginx 至今仍在流行；进入微服务时代后，功能更丰富、管控能力更强的 API 网关又成为流量入口必备组件。Envoy 因为其优异的性能、可扩展性、可观察性等优势，成为大量 API 网关的数据面选型，并且除了流量代理所需的基本功能外，Envoy 原生已经实现了很多代理所需高级功能，如高级负载均衡、熔断、限流等。因此，基于 Envoy 构建的 API 网关本身已经具备较为丰富的功能，能满足大部分应用代理的需求。但是在 API 网关的实际使用场景中，某些应用或者业务会根据自己的需求扩展出新的功能，可能是对 HTTP 的某些 Header 做些简单的处理，也可能是对接自己的 APM 等，因此 API 网关必须具备可扩展的能力以支撑应用或者业务根据自己的需求扩展相应的功能，而这个能力 Envoy 依然可以胜任，可以说基于 Envoy 实现的 API 网关的可扩展性强依赖于 Envoy 提供的可扩展能力。那么接下来我们就看一下目前 Envoy 提供的扩展机制。&lt;/p&gt;&lt;h3&gt;1.1 原生 C++ 扩展&lt;/h3&gt;&lt;p&gt;Envoy 通过可插拔的过滤器机制实现了原生 C++ 插件扩展的能力，如下图所示，L4 过滤器负责扩展协议代理能力及 L4 流量治理能力，L7 过滤器实现对流量的丰富治理功能。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35800344234079173&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlicf8m5kr92q0iawOoqDU8B9ppnXicTRL6TtW50pDo6iaCnVP9mzFQDTSsEw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1162&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这种扩展方式由于是 Envoy 原生提供的能力，因此性能自然是最佳的，但同时面临两个主要的问题，一个是插件开发者需要具有 C++ 语言的开发能力，另外是插件开发完后需要重新编译 Envoy 二进制文件再升级部署，无法做到插件功能的动态加载。为了解决这两个问题，Envoy 社区陆续实现了基于 Lua 和 WASM 的扩展机制，我们先看社区 Lua 扩展的原理。&lt;/p&gt;&lt;h3&gt;1.2 社区 Lua 扩展&lt;/h3&gt;&lt;p&gt;要想使用 Lua 语言开发原本使用 C++ 语言实现的 Envoy 插件，直观来看需要考虑以下两点：一个是 Lua 脚本如何在 Envoy 进程中执行；另一个是 Lua 脚本如何获得 Envoy 的内部数据和功能，比如 Header、Body 的获取。从这两个角度出发可以比较清晰的看一下 Envoy 社区 Lua 扩展的实现（其实 WASM 和 Rider 也是从这两个角度出发）。&lt;/p&gt;&lt;p&gt;如下图，和上面介绍的原生 C++ 扩展方案不同的是在 Envoy 的七层插件中多了个 Lua 插件，而这个用 C++ 开发的 Lua 插件就是回答上面两个问题的关键。首先 Lua 脚本如何在 Envoy 进程中执行，答案是通过 Lua 插件，Envoy 的 Lua 插件本身依然是用 C++ 开发的，因此可以在 Lua 插件中加载并运行 Lua 脚本；其次是 Lua 脚本如何获得 Envoy 的内部数据和功能，答案是 Lua 插件会通过 Lua CAPI 的形式提供 Envoy 内部数据和功能给 Lua 脚本。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.32323232323232326&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlicCkSClUWZYcWN4fAfmALfacN68Q4Df5GicTicOln39kg88hJHeJIpBvSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1188&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;社区 Lua 扩展一方面提供给了用户基于 Lua 语言开发插件的能力，相比 C++ 要简单很多，另一方面支持 Envoy 动态加载 Lua 脚本，无需重新编译升级。但同时由于 C++ 和 Lua 虚拟机交互带来的开销，Lua 扩展的性能自然会比原生 C++ 扩展差，而且 Envoy 社区当前的 Lua CAPI 交互方式会进一步加剧性能问题。除了性能问题，社区的 Lua 扩展还有个更大的缺陷 —— 不支持插件配置，直接导致社区 Lua 扩展的实用性大大下降。相比之下，WASM 和 Rider 实现了插件的可配置化， 并且 Rider 针对 Lua 扩展的性能做了一定的优化，使得 Rider 的 Lua 扩展在性能和功能方面都能满足企业级扩展的需求。&lt;/p&gt;&lt;h3&gt;1.3 社区 WASM 扩展&lt;/h3&gt;&lt;p&gt;WASM 是源自前端的技术，是为了解决日益复杂的前端 Web 应用以及有限的 JS 脚本解释性能而诞生的技术。WASM 并不是一种语言，而是字节码标准。理论上任何一种语言，都可以被编译成 WASM 字节码，然后在 WASM 虚拟机中执行。&lt;/p&gt;&lt;p&gt;WASM 扩展的实现原理和 Lua 扩展本质上差不多，在 Envoy 自身的四层或者七层插件中会实现一个 WASM 插件，该插件会嵌入 WASM 虚拟机用于动态加载和运行可拔插的扩展代码（被编译为 WASM 字节码），并且也会通过 WASM 虚拟机暴露获取 Envoy 内部数据和功能的接口。其原理如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29549248747913187&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlicwyzBDQesb0niblicnMl0AyiaoGHkiaRsM0iceicumHlOADDRtuQU544FuXuQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3594&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;WASM 看上去似乎完美解决了 Envoy 可扩展性遇到的各种问题，它支持多语言，支持插件动态加载，同时支持插件配置，但是经过我们的测试，WASM 倒在了性能的血泊中，它基于 C++ 扩展的插件性能甚至都要比 Lua 扩展差，更不用说基于其他语言实现的插件（具体的性能对比结果会在第三部分）。&lt;/p&gt;&lt;h3&gt;1.4 总结&lt;/h3&gt;&lt;p&gt;如下表，我们总结了当前各种扩展性方案的特性：原生 C++ 扩展虽然性能最优，但是不支持插件的动态加载；社区 Lua 扩展支持了插件的动态加载，但是却不支持插件配置，几乎不可使用；社区 WASM 扩展既支持插件的动态加载，又支持插件配置，但是性能很差。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.27148703956343795&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/06ULcDvaIGk36pVxfEcN1uD5szEdTPlicb59fv1cvkLO3iblEuicKibicjOvjFMgeO9SvS6ZAh9PsmOjHL1Tic4BmPdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1466&quot;/&gt;&lt;/p&gt;&lt;p&gt;根据上述各种扩展性方案的优劣势，网易轻舟微服务设计并实现了自己的可扩展框架 Rider ，主要的设计目标如下：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 支持 Lua 语言扩展&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 支持 Envoy 动态加载、更新、移除 Lua 插件&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 支持定义 Lua 插件配置&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 支持自定义 Lua 插件生效范围，网关级 / 项目级 / 路由级&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 性能优于 Envoy 社区 Lua 扩展和 WASM 扩展&lt;/span&gt;&lt;/p&gt;&lt;p&gt;接下来具体看一下 Rider 可扩展框架的设计、优化及实践。&lt;/p&gt;&lt;h2&gt;2. Rider 可扩展框架的设计、优化及实践&lt;/h2&gt;&lt;h3&gt;2.1 早期探索&lt;/h3&gt;&lt;p&gt;针对社区 Lua 扩展存在的性能差、不支持插件配置的问题， Rider 早期架构设计并实现了两个模块：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Rider Filter：Rider Filter 是 Envoy 的七层插件，用于初始化和调用 Lua 代码，并且将 Envoy 内部的数据和功能通过 Lua CAPI 或 FFI 接口的形式提供给 Lua SDK 调用。注意这里 Rider 利用 FFI 实现了大部分接口， 理论上性能优于基于 CAPI 实现的社区 Lua 扩展；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Lua SDK：Lua SDK 是一个 Lua 插件代码框架，用户可以通过调用 Lua SDK 提供的 API 实现请求处理。注意 Lua SDK 提供了获取全局以及路由级插件配置的 API，使得 Rider 的 Lua 扩展支持插件配置的获取，解决了社区 Lua 扩展的大难题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;下图是整体的架构图：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7855029585798816&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlic2FUC2HLBRJCQRj4zrfMHe2pGn9w8l6GvNP6WV3GI5vkWiaeVNkdAL7A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1352&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;尽管我们的早期架构基本满足了 Envoy 可扩展性的需求：支持多语言 Lua、支持 Lua 插件动态加载、支持 Lua 插件配置等。但是仍然存在以下几个问题：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Rider Filter 仍然存在部分接口没有使用 FFI ，性能可能略有不足；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Lua SDK 需要进一步完善以支持更多的插件功能开发；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 在解决第一个问题过程中发现的 Rider 巨大性能问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;针对这几个问题，我们进一步细化了 Rider 的架构，详细分析了 Rider 的性能，并衍生出了新的架构。&lt;/p&gt;&lt;h3&gt;2.2 实践优化&lt;/h3&gt;&lt;p&gt;Rider 新架构要解决的第一个问题就是试图将 FFI 进行到底，根据之前的调研，Lua 调用 C 有两种方式，一种是通过原生的 CAPI，每次调用时都会分配一个栈空间 (和 Stack Frame 不同，是向 Heap 申请的一块连续内存)，通过栈空间传递参数和返回值。另一种方式是通过 Luajit 提供的 FFI 调用。FFI 的好处是，可以直接在 Lua 中调用 C 函数，使用 C 数据结构，代码可以获得 Jit 优化的 Buff，性能较原生的 Lua 有比较大的提升。因此，我们想把 Rider 中使用 CAPI 实现的接口改造成 FFI。&lt;/p&gt;&lt;p&gt;改造的第一步便遇到了问题，早期的 Rider 架构貌似无法使用 FFI 实现 Envoy Body 相关接口的暴露，我们先看一下早期 Rider 不得不使用原生的 CAPI 暴露 Envoy Body 相关接口的原因。早期 Rider 的架构图中 Lua Code 有两个主要的函数：on_request 和 on_response，这两个函数是 Rider 架构规定的 Lua 代码中需要实现的函数，因为 Rider Filter 在执行 Lua Code 时，Rider Filter 只会尝试从 Lua 虚拟机中获取这两个函数，然后分别在 decodeHeaders 阶段和 encodeHeaders 阶段执行，那么如果在 on_request 或者 on_response 函数中有 Body 相关的接口调用，此时 Rider Filter 还没执行到 decodeData 或者 encodeData 阶段，Body 的数据还获取不到，只能将 Lua 协程先挂起，等到 Rider Filter 执行到 decodeData 或者 encodeData 阶段时再 Resume，而这种方式 FFI 实现不了，只能通过和 Lua 虚拟机交互的方式实现。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8962655601659751&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlicvJLNb6JkWZvVHrnK7zokX6ILXVR1zWblmdlf4ulicmzPv2ia4QLR5BmQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1205&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;基于上述问题，Rider 新架构在早期架构基础上进行了一些细化，如上图所示，整体架构的模块没有改变，改变的是 Rider 框架规定的 Lua 插件中需要实现的函数以及这些函数在 Rider Filter 中的执行时机。如上图所示，将原来 on_request 和 on_response 函数进一步拆分成 Header 和 Body 的阶段函数，并且在 Rider Filter 处理 Header 和 Body 阶段分别去调用，这样可以避免 Body 的处理需要挂起 Lua 协程（后来发现 WASM 的实现也是类似的细分）。因此新架构的请求处理流程如下：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Rider 插件配置 (其中包含 Lua 插件配置) 作为 LDS 和 RDS 的一部分，通过 Pilot 下发；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Envoy 对每个 HTTP 请求构造一条七层 Filter Chain, 其中包含 Rider Filter。Rider Filter 初始化时，会将 Lua SDK 模块和相应的插件从文件系统加载到 Lua VM 中；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 在请求处理阶段，Rider Filter 会在 Decode 和 Encode 阶段分别调用 Lua 代码的 on_request_header、on_request_body 和 on_response_header、on_response_body 方法；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 在用户 Lua 代码执行过程中，通过 Lua SDK 调用 Rider Filter 封装的相应接口，如获取，修改请求、响应信息，调用外部服务等，打印日志等。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;2.2.1 性能优化&lt;/h4&gt;&lt;p&gt;新架构设计的初衷是性能的提升，因此我们在新架构开发完第一时间便进行了性能测试，测试场景：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 环境：本地容器环境&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 后端：Nginx 4 核&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Envoy：4 核&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Client：Wrk 4t 32c&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Lua 插件：调用 100 次 get_body 接口&lt;/span&gt;&lt;/p&gt;&lt;p&gt;对比实现方式：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;CAPI：Rider 的 CAPI 实现，原始的 Lua 和 C 的交互方式，通过栈空间传递参数和返回值；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;FFIOld：Rider 的早期 FFI 实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;测试结果如下图，经典负优化，而且负的很多（当然也是因为调用了 100 次的原因），FFIOld 相比 CAPI QPS 下降了 30%。第一想法是不是代码写的有问题，新架构引入了很多开销？所以又测试了一下 Rider 之前基于 FFIOld 实现的 Header API，性能和基于 FFIOld 实现的 Body API 差不多，那说明 FFIOld 出问题了，早期的 Rider FFI 实现的 API 可能性能都还不如 CAPI ！&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5617283950617284&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlicQlzjzlsT31ofUImw741BFkITMQIcUdVjlCz7kgiaLOiaUHQaiaf2JGtdw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1458&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;于是去了解了一下 FFI 的基本原理，FFI 是 Luajit 提供的特性，Luajit 是运行 Lua 的虚拟机，和 Java 虚拟机一样，Luajit 有两种运行模式：编译模式和解释模式（编译模式的性能比解释模式好，原因感兴趣可自行查找）。Luajit 默认运行在解释模式下，在运行过程中会记录可以编译的热点代码，在之后的运行中会尝试把热点代码直接翻译成机器码执行，性能会得到提升。&lt;/p&gt;&lt;p&gt;回到 Rider 中来，Rider 的 Lua 插件也是运行在 Luajit 虚拟机中，并且几万的 QPS 请求一定会使 Lua 插件代码成为热点代码，那么 Luajit 会尝试把 Lua 插件翻译成机器码，同时 FFI 定义的 C 函数也会被翻译成机器码被执行，这么看起来性能确实会提升，但实际不符合预期，原因在于 Luajit 会 &lt;strong&gt;尝试&lt;/strong&gt; 把热点代码翻译成机器码，尝试就可能不成功，不成功就会退化成解释模式，那么性能会大打折扣。Luajit 提供了确认程序是否运行在编译模式下的方法，在 Lua 代码的前面加上如下代码：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;local&lt;/span&gt;&lt;span&gt; verbo &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;jit.v&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;verbo&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;然后继续压测，发现 Luajit 输出如下内容：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17168949771689498&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlic4PE8lboT75jwT3C0MBk8ic0hXmaJIsYpgS1do8Ns3MIdAcPXFibyALag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1095&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这张图可以看出两个关键信息，一个是如果 TRACE 输出 — ，那么说明 Luajit 退出了编译模式；另一个是退出编译模式的原因是 FFI 定义的 C 函数中的某个形参类型转换不支持。接着往下定位到这个参数：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;local&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; get_header_map_value&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt;&lt;span&gt; ctx &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; get_context_handle&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt; ctx &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;no context&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;string&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;header name must be a string&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt;&lt;span&gt; buffer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; ffi_new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;envoy_lua_ffi_str_t[1]&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt;&lt;span&gt; rc &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; C&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;envoy_http_lua_ffi_get_header_map_value&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ctx&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; source&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;#key, buffer)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; rc &lt;/span&gt;&lt;span&gt;~=&lt;/span&gt;&lt;span&gt; FFI_OK &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ffi_str&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;buffer&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; buffer&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].&lt;/span&gt;&lt;span&gt;len&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;C.envoy_http_lua_ffi_get_header_map_value (ctx, source, key, #key, buffer) 中传入的 ctx 是 Lua 的 light userdata 类型，而 envoy_http_lua_ffi_get_header_map_value 函数声明的时候是某个类的指针类型，Luajit 在翻译的时候无法完成转换因此退出了编译模式。真相大白，接下来就是解决这个问题，具体的设计过于细节不在这里阐述，感兴趣可以移步我们的开源社区。接下来看一下优化后的效果。&lt;/p&gt;&lt;p&gt;首先还是接着上面的 get_body 性能测试，多加了一组 FFINew（优化后的 FFI 实现方式）的数据，如下图所示，FFINew 的性能比 FFIOld 的性能提升了 &lt;strong&gt;66%&lt;/strong&gt; ，相比 CAPI 的性能提升了 &lt;strong&gt;16%&lt;/strong&gt; ，FFI 的优势总算体现了出来。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5619438740588638&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlicoAVpPxc7TEY22B7bqTUP0r4aSgJ08UalUpsFrYwmoK2Xaw4qibMSpVQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1461&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上面的性能提升可能只能作为参考，毕竟是调用了 100 次 get_body 接口，因此我们针对不同复杂度的插件分别进行了简单的性能测试：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;simple filter：调用 10 次 get_header；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;normal filter：调用 20 次 set_header，调用 10 次 get_header，最后再 remove 掉这 20 个 header；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;complex filter：normal filter + 调用 30 次 get_body；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;结果如下图所示，FFINew 的性能都优于 FFIOld 的性能，分别有 15% ， 22% ， 29% 的性能提升。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5589849108367627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlicN4jzoSyg67fWMSKzZorOTgdibyVI4frNhnshQSZve8KGDwPEiaZm4Giaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1458&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;最后我们进一步将 Rider 和社区 WASM 和 Lua 的性能进行了对比：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;RiderOld：Rider 早期架构的实现；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;RiderNew：当前 Rider 的实现；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;WASMC++：社区 1.17 版本的 WASM 实现；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;RawLua：社区 1.17 版本的 Lua 扩展实现；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;RawC++：Envoy 原生 C++ 扩展实现；&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5602739726027397&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/06ULcDvaIGk36pVxfEcN1uD5szEdTPlictdYpsnEDttLtDFpr5UzleUuZkmfQTiaibPJxPgJfRugVEIcQrwzmicgSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1460&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如上图所示，Rider 的性能优于社区的 WASM 和 Lua，大概有 10% 左右的性能提升，且相比于 Envoy 原生 C++ 插件性能也只有 10% 左右的下降。这里 WASM 的插件是用 C++ SDK 实现的，而根据我们的内部测试，WASM 其他语言 SDK 实现的插件性能会更差。另外，Rider 性能只比社区 Lua 提升了不到 10%，个人感觉是因为性能测试的插件在 Lua 和 C++ 之间的数据交互比较简单，基本都是简单字符串的传递，体现不出 FFI 的优势。&lt;/p&gt;&lt;h4&gt;2.2.2 功能增强&lt;/h4&gt;&lt;p&gt;性能问题解决后，接下来就是功能的增强，也就是 Lua SDK 的丰富，这里总结了当前 Rider 支持的所有 Lua SDK ：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.get_header(name)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.get_header_size(name)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.get_header_index(name, index)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.get_headers()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.get_body()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.get_metadata(key, filter_name)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.get_dynamic_metadata(key, filter_name)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.get_query_parameters(max_args)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.set_header(name, value)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.set_headers(headers)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.req.clear_header(name)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.resp.get_header(name)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.resp.get_header_size(name)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.resp.get_header_index(name, index)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.resp.get_headers()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.resp.get_body()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.resp.set_header(name, value)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.resp.set_headers(headers)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.resp.clear_header(name)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.streaminfo.start_time()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.streaminfo.current_time_milliseconds()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.streaminfo.downstream_local_address()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.streaminfo.downstream_remote_address()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.streaminfo.upstream_cluster()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.streaminfo.upstream_host()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.logTrace(message)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.logDebug(message)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.logInfo(message)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.logWarn(message)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.logErr(message)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.filelog(msg)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.get_base_config()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.get_route_config()&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.httpCall(cluster, headers, body, timeout)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;envoy.respond(headers, body)&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;2.3 Rider 的实践&lt;/h3&gt;&lt;p&gt;网易内部传媒业务已基于 Rider 开发并上线使用多个 Lua 插件，其中用于打印全链路追踪日志的 Trace 插件 2020 Q1 上线，目前已接入全部网关，处理数十万 QPS，运行稳定。&lt;/p&gt;&lt;h2&gt;3. Rider 可扩展框架的未来规划&lt;/h2&gt;&lt;p&gt;未来我们会在稳定性、性能、功能等方面持续进行 Rider 的维护和优化：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 稳定性：目前 Rider 已经在网易内外部多个业务方大规模落地，后续我们也会进一步提升并保障 Rider 稳定性；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 性能：尽管 Rider 的性能已经优于社区 Lua 和 WASM ，但后续我们会持续进行性能优化，进一步缩小和原生 C++ 扩展的性能差距；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 功能：在 Rider API 方面和社区 Lua 以及 WASM 对齐，提供最全面的 API 能力。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;更多&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Hango Rider 项目地址：https://github.com/hango-io/rider&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Hango 网关项目地址：https://github.com/hango-io/hango-gateway&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;引用链接&lt;/h4&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; Rider: &lt;em&gt;https://github.com/hango-io/rider&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; Hango: &lt;em&gt;https://github.com/hango-io/hango-gateway&lt;/em&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3934837&quot; data-style-type=&quot;&quot;&gt;&lt;section data-v-09862f0b=&quot;&quot; data-tools=&quot;新媒体排版&quot;&gt;&lt;section data-id=&quot;90196&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3934821&quot; data-style-type=&quot;&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-xmtstyleindex=&quot;0&quot; data-xmt-x1=&quot;381.5&quot; data-xmt-y1=&quot;4647.640625&quot; data-xmt-x2=&quot;1058.5&quot; data-xmt-y2=&quot;5940.220625&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-color-16026770102743=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16026770102743=&quot;rgb(0,0,0)&quot; data-style=&quot;margin-top: -10px; padding-right: 10px; padding-left: 10px; font-size: 16px; color: black; line-height: 1.6; letter-spacing: 0px; word-break: break-word; overflow-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif;&quot; data-xmt-x1=&quot;381.5&quot; data-xmt-y1=&quot;4647.640625&quot; data-xmt-x2=&quot;1038.5&quot; data-xmt-y2=&quot;5940.220625&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; data-darkmode-color-16026770102743=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16026770102743=&quot;rgb(0,0,0)&quot; data-darkmode-bgcolor-16026770102743=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16026770102743=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); font-family: 微软雅黑; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-xmt-x1=&quot;391.5&quot; data-xmt-y1=&quot;5894.640625&quot; data-xmt-x2=&quot;1048.5&quot; data-xmt-y2=&quot;5940.218725&quot;&gt;&lt;section data-role=&quot;paragraph&quot; data-darkmode-color-16026770102743=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16026770102743=&quot;rgb(0,0,0)&quot; data-darkmode-bgcolor-16026770102743=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16026770102743=&quot;rgb(255, 255, 255)&quot; data-xmt-x1=&quot;391.5&quot; data-xmt-y1=&quot;5894.640625&quot; data-xmt-x2=&quot;1048.5&quot; data-xmt-y2=&quot;5940.218725&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; data-darkmode-color-16026770102743=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16026770102743=&quot;rgb(0,0,0)&quot; data-darkmode-bgcolor-16026770102743=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16026770102743=&quot;rgb(255, 255, 255)&quot; data-xmt-x1=&quot;391.5&quot; data-xmt-y1=&quot;5894.640625&quot; data-xmt-x2=&quot;1048.5&quot; data-xmt-y2=&quot;5940.218725&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94252&quot; data-darkmode-color-16026770102743=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16026770102743=&quot;rgb(0,0,0)&quot; data-darkmode-bgcolor-16026770102743=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16026770102743=&quot;rgb(255, 255, 255)&quot; data-xmt-x1=&quot;391.5&quot; data-xmt-y1=&quot;5894.640625&quot; data-xmt-x2=&quot;1048.5&quot; data-xmt-y2=&quot;5940.218725&quot;&gt;&lt;section data-darkmode-color-16026770102743=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16026770102743=&quot;rgb(0,0,0)&quot; data-darkmode-bgcolor-16026770102743=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16026770102743=&quot;rgb(255, 255, 255)&quot; data-xmt-x1=&quot;391.5&quot; data-xmt-y1=&quot;5894.640625&quot; data-xmt-x2=&quot;1048.5&quot; data-xmt-y2=&quot;5940.218725&quot;&gt;&lt;section data-darkmode-color-16026770102743=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16026770102743=&quot;rgb(0,0,0)&quot; data-darkmode-bgcolor-16026770102743=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16026770102743=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-color-16026770102743=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16026770102743=&quot;rgb(0,0,0)&quot; data-darkmode-bgcolor-16026770102743=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16026770102743=&quot;rgb(255, 255, 255)&quot;&gt;&lt;h4&gt;关于云原生社区&lt;/h4&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3934837&quot; data-style-type=&quot;&quot;&gt;&lt;section data-v-09862f0b=&quot;&quot; data-tools=&quot;新媒体排版&quot;&gt;&lt;section data-id=&quot;90196&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3934837&quot; data-style-type=&quot;&quot;&gt;&lt;section data-v-09862f0b=&quot;&quot; data-tools=&quot;新媒体排版&quot;&gt;&lt;section data-id=&quot;90196&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;云原生社区是国内最大的独立第三方云原生终端用户和泛开发者社区，由 CNCF 大使、开源意见领袖共同发起成立于 2020 年 5 月 12 日，提供云原生专业资讯，促进云原生产业发展。云原生社区基于成员兴趣创建了多个 SIG（特别兴趣小组），如 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649382008&amp;amp;idx=2&amp;amp;sn=8329de15872f67151e76e4dc2ece84eb&amp;amp;chksm=f224d617c5535f015e3d71a3d21c234bc333653792c85646c13b2a260a4ac2381e06fc0bf8f4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Kubernetes&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;Kubernetes&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649384221&amp;amp;idx=2&amp;amp;sn=04c5062a448e9696e9296a02e82837c3&amp;amp;chksm=f224ef72c553666444b33121ae42dbf4e7609574c29e4c55b84f9f6e2cb5bae88a037f2248d2&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;Istio&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649384308&amp;amp;idx=2&amp;amp;sn=6188dfb44c7a7313a252879a0044b406&amp;amp;chksm=f224ef1bc553660df3b77ff63bd969a4aec56fc5a64a5cf202fb56a507fa0b13588f56384b4e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;Envoy&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649384308&amp;amp;idx=3&amp;amp;sn=c144874967206a7d0abe0b66e36cc03f&amp;amp;chksm=f224ef1bc553660d9f32e206c5a9e1424a60f49ced76b3d5925d0bffa09eacbe14b1da8b512a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;Dapr&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649384269&amp;amp;idx=2&amp;amp;sn=baaa3c95835c663c7141406b8ac1293b&amp;amp;chksm=f224ef22c553663436fcbeab26d97abe166f82b8880fc5531d2157ab89b760457ba8664a1d39&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;OAM&lt;/a&gt;&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649384175&amp;amp;idx=1&amp;amp;sn=ea9058418afd668967e28a3ba211d649&amp;amp;chksm=f224ee80c5536796af57f48c8ee7e242a2b1478645ce823d711be263587576362744eac8121d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;边缘计算&lt;/a&gt;&lt;span&gt;、&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649384137&amp;amp;idx=1&amp;amp;sn=d14055b1b5408a30db96d8e132a046ab&amp;amp;chksm=f224eea6c55367b0058a971ea579e9b1f7cb70e3d39eb4f36b64f9cab924a2b4c3fc845681f2&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;机器学习&lt;/a&gt;&lt;span&gt;、&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649383872&amp;amp;idx=1&amp;amp;sn=b6a3c43ce750ea923fed04592c5b7cfd&amp;amp;chksm=f224e9afc55360b912fd2e0d1a9ab4cc66a22deb81db8f07bc3a83146f370cb388ae53c44ef6&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;可观察性&lt;/a&gt;&lt;span&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649384467&amp;amp;idx=3&amp;amp;sn=9a8fe5c24d9458d0113c59604b6ab5e8&amp;amp;chksm=f224ec7cc553656aa33f3304608cc24423d3aca7f0d64ae9e50da2850ce5c4df0d4ff9cc013f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;稳定性&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;稳定性&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649385565&amp;amp;idx=2&amp;amp;sn=e3a6a1adf84c3ac9e552ba0c2b18d162&amp;amp;chksm=f224e032c5536924c330945872154b83245b19f91c401e21eddd882791c64b914d68fd51a93e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;安全&lt;/a&gt;等&lt;/span&gt;&lt;span&gt;。&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649383149&amp;amp;idx=3&amp;amp;sn=6012d51c80d0b8f84db58e514448ad11&amp;amp;chksm=f224ea82c553639460af375bb1f172ba94502c5599eb2a4e4df52287f98db29e3858ae09373d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击了解我们&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;点击了解我们&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI1NTE2NDE2MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/06ULcDvaIGmqt5TicIcR8qFEjicfezMe4YuBlNbN8vl8Mh1fePHOrPibvlqJseGaG4ctibamAhKHMP3xOEW3ByibOjw/0?wx_fmt=png&quot; data-nickname=&quot;Cloud Native Community&quot; data-alias=&quot;CloudNativeCN&quot; data-signature=&quot;云原生社区是国内最大的独立第三方云原生终端用户和泛开发者社区，由 CNCF 大使、开源意见领袖共同发起成立于 2020 年 5 月 12 日，提供云原生专业资讯，促进云原生产业发展。社区官网 https://cloudnative.to&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-v-09862f0b=&quot;&quot; data-tools=&quot;新媒体排版&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;点击下方“阅读原文”查看更多&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>57544dae75bb5271be887dc4f51eecee</guid>
<title>推荐9个VUE3 UI框架</title>
<link>https://toutiao.io/k/oedl5rr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a33354950931fe68a8f5596afc988211</guid>
<title>浅析gowatch监听文件变动实现原理</title>
<link>https://toutiao.io/k/01w80df</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;刚开始接触go时，发现go程序和php程序的其中一个不同是php是解释性语言，go是编译型语言，即每次在有程序改动后，需要重新运行 go run或go build进行重新编译，更改才能生效，实则不便。于是乎在网络上搜索发现了gowatch这个包，该包可通过监听当前目录下相关文件的变动，对go文件实时编译，提高研发效率。那gowatch又是如何做到监听文件变化的呢&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过阅读源码我们发现，在linux内核中，有一种用于通知用户空间程序文件系统变化的机制—Inotify。&lt;/span&gt;&lt;span&gt;它监控文件系统，并且及时向专门的应用程序发出相关的事件警告，比如删除、读、写和卸载操作等。&lt;/span&gt;&lt;span&gt;您还可以跟踪活动的源头和目标等细节。&lt;/span&gt;&lt;span&gt;Golang的标准库syscall实现了该机制。&lt;/span&gt;&lt;span&gt;为进一步扩展，实现了fsnotify包实现了一个基于通道的、跨平台的实时监听接口。&lt;/span&gt;&lt;span&gt;如下图：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg wxw-img&quot; data-backh=&quot;210&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/l6hSQtEH25ibYG9G5m2ZLdSdicUqhLFLbJLEM8E1lSLT6OcwKGJLibS7ktxyt4DLOqN8pibwnpMRicuKByNoG7Zj2Cw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;根据上图可知，监听文件的变化主要依赖于linux内核的INotify接口机制。Go的标准库中对其做了实现。而fsnotify package的主要作用就是将进一步封装成watcher结构体和事件类型结构体的封装，从而实现事件的判断以及目录的监听。下面看下 fsnotify package中对watcher的封装。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Watcher &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    mu sync.Mutex &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fd &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    watches &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]*watch &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fsnFlags &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;uint32&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fsnmut sync.Mutex &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    paths &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Error &lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; error &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    internalEvent &lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; *FileEvent &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Event &lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; *FileEvent &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    done &lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    isClosed &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;linux内核Inotify接口简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;inotify中主要涉及3个接口。分别是inotify_init, inotify_add_watch,read。具体如下：&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;接口名&lt;/td&gt;&lt;td&gt;作用&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int fd = inotify_init()&lt;/td&gt;&lt;td&gt;创建inotify实例，返回对应的文件描述符&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;inotify_add_watch (fd, path, mask)&lt;/td&gt;&lt;td&gt;注册被监视目录或文件的事件&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;read (fd, buf, BUF_LEN)&lt;/td&gt;&lt;td&gt;读取监听到的文件事件 &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Inotify可以监听的文件系统事件列表：&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;事件名称&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;事件说明&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;IN_ACCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;文件被访问&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;IN_MODIFY&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;文件被 write&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;IN_CLOSE_WRITE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;可写文件被 close&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;IN_OPEN&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;文件被 open&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;IN_MOVED_TO&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;文件被移来，如 mv、cp&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;IN_CREATE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;创建新文件&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;IN_DELETE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;文件被删除，如 rm&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;IN_DELETE_SELF&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;自删除，即一个可执行文件在执行时删除自己&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;IN_MOVE_SELF&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;自移动，即一个可执行文件在执行时移动自己&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;IN_ATTRIB&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;文件属性被修改，如 chmod、chown、touch 等&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;IN_CLOSE_NOWRITE&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;不可写文件被 close&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;IN_MOVED_FROM&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;文件被移走,如 mv&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;IN_UNMOUNT&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;宿主文件系统被 umount&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;IN_CLOSE&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;文件被关闭，等同于(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;IN_MOVE&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;文件被移动，等同于(IN_MOVED_FROM | IN_MOVED_TO)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;示例应用&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;接下来是一个简易的示例应用，具体的应用实例可参考github.com/silenceper/gowatch包源代码 。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;主要逻辑如下：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;初始化watcher对象&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将文件或目录加入到watcher监控对象的队列&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;启动监听协程，实时获取文件对象事件&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/howeyc/fsnotify&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; exit &lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    watcher, err := fsnotify.NewWatcher() &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.Printf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Fail to create new Watcher[ %s ]\n&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;开始监听文件变化&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; e := &amp;lt;-watcher.Event:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                fmt.Printf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;监听到文件 - %s变化\n&quot;&lt;/span&gt;, e.Name)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; e.IsCreate() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;监听到文件创建事件&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; e.IsDelete() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;监听到文件删除事件&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; e.IsModify() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;监听到文件修改事件&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; e.IsRename() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;监听到文件重命名事件&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; e.IsAttrib() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;监听到文件属性修改事件&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;根据文件变化开始执行业务逻辑&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; err := &amp;lt;-watcher.Error:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                fmt.Printf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot; %s\n&quot;&lt;/span&gt;, err.Error())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    paths := []&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;config.yml&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, path := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; paths {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        err = watcher.Watch(path) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            fmt.Sprintf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Fail to watch directory[ %s ]\n&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &amp;lt;-exit&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    runtime.Goexit()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span&gt;&lt;strong&gt;福利&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span/&gt;&lt;span&gt;我为大家整理了一份&lt;/span&gt;&lt;span&gt;从入门到进阶的Go学习资料礼包&lt;/span&gt;&lt;span&gt;，包含学习建议：入门看什么，进阶看什么。&lt;/span&gt;&lt;span&gt;关注公众号 「polarisxu」，回复 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;ebook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 获取；还可以回复「&lt;strong&gt;进群&lt;/strong&gt;」，和数万 Gopher 交流学习。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UWba2ryLMqm8cgtrMXjG1BLGg46vQNmUompBL02uYYwic9RicPbCnlKdZiacBF5Wv6RLgmGIqnBnwuWyP82ibYusiag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>