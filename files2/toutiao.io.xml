<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>2b41b33ad54321ffffc5cd1e2684ca7e</guid>
<title>假期别闲着，快来吧！</title>
<link>https://toutiao.io/k/sat069j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7f48d743bc7cddc9588da3d60663c61b</guid>
<title>开源｜bilibili 开源的，基于 AST 和 Golang 语言实现的规则引擎</title>
<link>https://toutiao.io/k/qm04a3h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;bilibili 开源的，基于 AST 和 Golang 语言实现的规则引擎。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它能够让你在 Golang 这种静态语言上，在不停服务的情况下实现动态加载与配置规则。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;以上内容选自「码农周刊 VIP 会员」圈子，每日更新，精彩不断&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1128&quot; data-ratio=&quot;1.8533333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/t8lpVibticjQ7o7q1TMLu0uOicx73thotp3qm7jQU26Oxm0F5JA5ARggicOibYg4iakLRsUUib1gAZskobE1Ofk9VKRCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;码农周刊是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;br/&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;专业、简单、有用&lt;/span&gt;&lt;span&gt;，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「&lt;/span&gt;&lt;span&gt;码农周刊VIP会员&lt;/span&gt;&lt;span&gt;」服务。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你与 BAT 技术大牛，只差一份「码农周刊VIP会员」的距离！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;VIP会员特权&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 52 期码农周刊VIP会员&lt;span&gt;专属邮件周报&lt;/span&gt;，让你及时掌握技术动向；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 只限VIP会员加入的&lt;span&gt;交流圈子&lt;/span&gt;，让你与技术大牛切磋学习；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. VIP会员独享的&lt;span&gt;工作机会&lt;/span&gt;，为你介绍好公司的好机会；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 更多会员特权，持续更新……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何加入「码农周刊VIP会员」？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 微信扫描下方二维码，加入码农周刊VIP会员知识星球。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;促销期间，一年仅需 108 元！平均一天花费不到 3 毛！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;34&quot; data-cropselx2=&quot;356&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;425&quot; data-ratio=&quot;1.0857487922705313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ6h6x4EnYInRLic6PibFNWw4zSv28rAxcJu9dumVJF03PwHGOWxOzeJKIsydVa7UJuTo4jOjrct9NZw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 加入码农周刊VIP会员知识星球后，客服会联系您，请留意知识星球内的私信。&lt;br/&gt;3. 客服向您发送码农周刊VIP会员欢迎邮件，开启您的码农周刊VIP会员之旅。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;心动不如心动，赶快订阅吧！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>56f0c6cb67c756ec39c1ef02edd6e335</guid>
<title>浅谈 Dubbo 框架踩坑记之优雅重启问题</title>
<link>https://toutiao.io/k/onnea4h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、背景&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近生产环境引入Dubbo服务，每次上线重启服务，都会有超时报警，诡异的是，客户端和服务端重启都会有影响，量大了报警就愈发明显了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大致报警信息如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;cause: org.apache.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2021-09-09 11:59:56.822, end time: 2021-09-09 11:59:58.828, client elapsed: 0 ms, server elapsed: 2006 ms, timeout: 2000 ms, request: Request [id=307463, version=2.0.2, twoway=true, event=false, broken=false, data=null], channel: /XXXXXX:52149 -&amp;gt; /XXXXXX:20880] with root cause]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会是什么原因呢？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;没有优雅停机？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重启瞬间，请求量太大，没有预热？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Dubbo启动成功后，SpringBoot还未启动成功，没有延迟暴露？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是否有参数配置不合理？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上都有可能，经过将近半个月时间的阅读Dubbo框架源码、 验证，终于找全了答案，特此呕心整理采坑记录。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、说明&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;版本&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;组件&lt;/th&gt;&lt;th&gt;版本&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Dubbo&lt;/td&gt;&lt;td&gt;2.7.7&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Netty&lt;/td&gt;&lt;td&gt;4.0.36.Final&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Zookeeper&lt;/td&gt;&lt;td&gt;3.4.9&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;基本情况&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于读请求，幂等的，我们是默认重试的，但是写请求，默认是不重试的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认超时时间2000ms。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务都是docker容器，Dubbo客户端数量远大于服务提供端, 比例大概是10: 1&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;提示
本文重点阐述服务重启相关的技术点和原理， 对Dubbo框架基础，Netty基础，以及版本之前的区别不会展开讲解。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、优雅重启关键技术点&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对上面问题，Dubbo框架也提供了解决方案，下面我们依次看下。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Dubbo优雅停机机制&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dubbo是通过JDK的ShutdownHook来完成优雅停机的, Dubbo 中实现的优雅停机机制主要包含6个步骤： &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）收到 kill PID 进程退出信号，Spring 容器会触发容器销毁事件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）provider 端会注销服务元数据信息(删除ZK节点)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（3）consumer 会拉取最新服务提供者列表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（4）provider 会发送 readonly 事件报文通知 consumer 服务不可用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（5）服务端等待已经执行的任务结束并拒绝新任务执行。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;261&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46021505376344085&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67W8jBItMibA6DUQlXReOXBz8uibiadQLibCTn9APhar5gXE8X1E7OJcYZ2kgxqWEicUQGW4NnLlQz3tkDFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;930&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;优雅退出&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;  &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;close&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; timeout)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        startClose();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (timeout &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; max = (&lt;span&gt;long&lt;/span&gt;) timeout;&lt;br/&gt;            &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; start = System.currentTimeMillis();&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (getUrl().getParameter(Constants.CHANNEL_SEND_READONLYEVENT_KEY, &lt;span&gt;true&lt;/span&gt;)) {&lt;br/&gt;                &lt;span&gt;//发送 readonly 事件报文通知 consumer 服务不可用&lt;/span&gt;&lt;br/&gt;                sendChannelReadOnlyEvent();&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;while&lt;/span&gt; (HeaderExchangeServer.&lt;span&gt;this&lt;/span&gt;.isRunning()&lt;br/&gt;                    &amp;amp;&amp;amp; System.currentTimeMillis() - start &amp;lt; max) {&lt;br/&gt;                &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                    Thread.sleep(&lt;span&gt;10&lt;/span&gt;);&lt;br/&gt;                } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;                    logger.warn(e.getMessage(), e);&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        doClose();&lt;br/&gt;        server.close(timeout);&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相关配置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;dubbo:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  application:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        shutwait:&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt; # 优雅退出等待时间，单位毫秒 默认等待 &lt;span&gt;10&lt;/span&gt;s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Dubbo预热机制&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dubbo服务默认权重是100，Dubbo实际上是提供了一种伪预热机制，根据服务提供者运行时间计算权重，再使用负载均衡策略实现流量从小到大。下面我们就从 Dubbo 源码出发，观察服务预热具体实现方式，具体源码位于 &lt;code&gt;AbstractLoadBalance#getWeight&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; &lt;span&gt;/**&lt;br/&gt;     * Get the weight of the invoker&#x27;s invocation which takes warmup time into account&lt;br/&gt;     * if the uptime is within the warmup time, the weight will be reduce proportionally&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; invoker    the invoker&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; invocation the invocation of this invoker&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; weight&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;getWeight&lt;/span&gt;&lt;span&gt;(Invoker&amp;lt;?&amp;gt; invoker, Invocation invocation)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; weight;&lt;br/&gt;        URL url = invoker.getUrl();&lt;br/&gt;        &lt;span&gt;// Multiple registry scenario, load balance among multiple registries.&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (REGISTRY_SERVICE_REFERENCE_PATH.equals(url.getServiceInterface())) {&lt;br/&gt;            weight = url.getParameter(REGISTRY_KEY + &lt;span&gt;&quot;.&quot;&lt;/span&gt; + WEIGHT_KEY, DEFAULT_WEIGHT);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            weight = url.getMethodParameter(invocation.getMethodName(), WEIGHT_KEY, DEFAULT_WEIGHT);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (weight &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;//获取服务启动时间 timestamp&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;long&lt;/span&gt; timestamp = invoker.getUrl().getParameter(TIMESTAMP_KEY, &lt;span&gt;0L&lt;/span&gt;);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (timestamp &amp;gt; &lt;span&gt;0L&lt;/span&gt;) {&lt;br/&gt;                    &lt;span&gt;//使用当前时间减去服务提供者启动时间，计算服务提供者已运行时间 `uptime`&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;long&lt;/span&gt; uptime = System.currentTimeMillis() - timestamp;&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (uptime &amp;lt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;                    }&lt;br/&gt;                    &lt;span&gt;//获取服务预热时间基数，默认是10分钟&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;int&lt;/span&gt; warmup = invoker.getUrl().getParameter(WARMUP_KEY, DEFAULT_WARMUP);&lt;br/&gt;                    &lt;span&gt;//如果服务启动时间 小于 warmup 则重新计算权重&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (uptime &amp;gt; &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; uptime &amp;lt; warmup) {&lt;br/&gt;                        &lt;span&gt;//根据已运行时间动态计算服务预热过程的权重&lt;/span&gt;&lt;br/&gt;                        weight = calculateWarmupWeight((&lt;span&gt;int&lt;/span&gt;)uptime, warmup, weight);&lt;br/&gt;                    }&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Math.max(weight, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面看下计算权重算法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; &lt;span&gt;/**&lt;br/&gt;     * Calculate the weight according to the uptime proportion of warmup time&lt;br/&gt;     * the new weight will be within 1(inclusive) to weight(inclusive)&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; uptime the uptime in milliseconds&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; warmup the warmup time in milliseconds&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; weight the weight of an invoker&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; weight which takes warmup into account&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;calculateWarmupWeight&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; uptime, &lt;span&gt;int&lt;/span&gt; warmup, &lt;span&gt;int&lt;/span&gt; weight)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; ww = (&lt;span&gt;int&lt;/span&gt;) ( uptime / ((&lt;span&gt;float&lt;/span&gt;) warmup / weight));&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ww &amp;lt; &lt;span&gt;1&lt;/span&gt; ? &lt;span&gt;1&lt;/span&gt; : (Math.min(ww, weight));&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里计算方式其实很简单， 简单来说服务运行时间越久，权重越高，直到uptime = warmup时，恢复正常权重weight.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在默认情况下(Dubbo服务默认权重100， 预热时间10分钟)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如服务提供者已运行 1 分钟，那么 weight 最终结果为 10 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如服务提供者已运行 5 分钟，那么 weight 最终结果为 50 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如服务提供者已运行 11 分钟，超过默认预热时间的阈值 10分 钟，那么将不会再计算，直接返回 weight 默认权重。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;温馨提示: 负载均衡策略 consistenthash(一致性Hash) 不支持服务预热 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相关配置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;dubbo:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    provider:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         warmup:&lt;/span&gt; &lt;span&gt;600000&lt;/span&gt; # 单位毫秒 默认&lt;span&gt;10&lt;/span&gt;分钟&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;延迟暴露&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;某些外部容器（比如tomcat）在未完全启动完毕之前，对于dubbo service的调用会存在阻塞，导致consumer端timeout，这种情况在发布的时候有一定概率会发生。为了避免这个问题，设置一定的延时时间（保证在tomcat启动完毕之后）就可以做到平滑发布。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;dubbo延迟暴露在源码中主要体现在&lt;code&gt;ServiceBean&lt;/code&gt;类和它的父类&lt;code&gt;ServiceConfig&lt;/code&gt;# export中。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;export&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//是否已经暴露&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!shouldExport()) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (bootstrap == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            bootstrap = DubboBootstrap.getInstance();&lt;br/&gt;            bootstrap.init();&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        checkAndUpdateSubConfigs();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//init serviceMetadata&lt;/span&gt;&lt;br/&gt;        serviceMetadata.setVersion(version);&lt;br/&gt;        serviceMetadata.setGroup(group);&lt;br/&gt;        serviceMetadata.setDefaultGroup(group);&lt;br/&gt;        serviceMetadata.setServiceType(getInterfaceClass());&lt;br/&gt;        serviceMetadata.setServiceInterfaceName(getInterface());&lt;br/&gt;        serviceMetadata.setTarget(getRef());&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (shouldDelay()) { &lt;span&gt;//是否需要延迟暴露&lt;/span&gt;&lt;br/&gt;            DELAY_EXPORT_EXECUTOR.schedule(&lt;span&gt;this&lt;/span&gt;::doExport, getDelay(), TimeUnit.MILLISECONDS);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;//真正执行服务暴露的方法&lt;/span&gt;&lt;br/&gt;            doExport();&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        exported();&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从以上代码可以看出， Dubbo是使用了一个 schedule delay task ，延迟执行 doExport。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;延迟暴露时序图如下:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4735812133072407&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67W8jBItMibA6DUQlXReOXBz8uLBCfd5Ijb4vtRFMXtTlEn1eLR5uwvgYGVEZbd7KK0SPicWEQraicF4Pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1022&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相关配置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;dubbo:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    provider:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         delay:&lt;/span&gt; &lt;span&gt;5000&lt;/span&gt; # 默认&lt;span&gt;null&lt;/span&gt;不延迟, 单位毫秒&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;其它&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决完这些，重启服务还是有大量超时，通过排查客户端日志发现。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;/XXX:57330 -&amp;gt; /XXXX:20880 is established., dubbo version: 2.7.7, current host: XXXX&lt;br/&gt;2021-09-07 15:01:07.748 [NettyClientWorker-1-16] INFO  o.a.d.r.t.netty4.NettyClientHandler   -  [DUBBO] The connection of /XXXX:57332 -&amp;gt; /XXXX:20880 is established., dubbo version: 2.7.7, current host: XXXX&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; 简单统计一下发现 客户端启动时建立了3600个长连接&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; less /u01/logs/order-service-api_XXX/dubbo.log  | grep NettyClientWorker- |grep  &lt;span&gt;&#x27;2021-09-07 15&#x27;&lt;/span&gt; | wc -l&lt;/span&gt;&lt;br/&gt;3600&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;带着这个疑问，查看源码发现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DubboProtocol#getClients&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; ExchangeClient[] getClients(URL url) {&lt;br/&gt;        &lt;span&gt;boolean&lt;/span&gt; useShareConnect = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//获取配置连接数， 如果没有配置默认0&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; connections = url.getParameter(CONNECTIONS_KEY, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;        List&amp;lt;ReferenceCountExchangeClient&amp;gt; shareClients = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;// if not configured, connection is shared, otherwise, one connection for one service&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (connections == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;//注意： 如果Provider 配置了connections， 就不会使用共享连接，Consumer就算配置了shareConnections也不会生效&lt;/span&gt;&lt;br/&gt;            useShareConnect = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;/*&lt;br/&gt;             * The xml configuration should have a higher priority than properties.&lt;br/&gt;             */&lt;/span&gt;&lt;br/&gt;            String shareConnectionsStr = url.getParameter(SHARE_CONNECTIONS_KEY, (String) &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;            connections = Integer.parseInt(StringUtils.isBlank(shareConnectionsStr) ? ConfigUtils.getProperty(SHARE_CONNECTIONS_KEY,&lt;br/&gt;                    DEFAULT_SHARE_CONNECTIONS) : shareConnectionsStr);&lt;br/&gt;            shareClients = getSharedClient(url, connections);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        ExchangeClient[] clients = &lt;span&gt;new&lt;/span&gt; ExchangeClient[connections];&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; clients.length; i++) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (useShareConnect) {&lt;br/&gt;                clients[i] = shareClients.get(i);&lt;br/&gt;&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;//初始化创连接&lt;/span&gt;&lt;br/&gt;                clients[i] = initClient(url);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; clients;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题就在于，我们服务端配置了&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;dubbo:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  provider:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    connections:&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解释下上面代码，如果没有配置 connections,  就会使用共享连接， 共享连接个数由Consumer 配置 shareconnections 个数决定，默认 1个，  反之， 如果配置了connections, 就会给每一个service 建立 connections个数长连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们再看看 initClient 过程&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;initClient(URL url) {&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// client type setting.&lt;/span&gt;&lt;br/&gt;        String str = url.getParameter(CLIENT_KEY, url.getParameter(SERVER_KEY, DEFAULT_REMOTING_CLIENT));&lt;br/&gt;&lt;br/&gt;        url = url.addParameter(CODEC_KEY, DubboCodec.NAME);&lt;br/&gt;        &lt;span&gt;// enable heartbeat by default&lt;/span&gt;&lt;br/&gt;        url = url.addParameterIfAbsent(HEARTBEAT_KEY, String.valueOf(DEFAULT_HEARTBEAT));&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// BIO is not allowed since it has severe performance issue.&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (str != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; str.length() &amp;gt; &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !ExtensionLoader.getExtensionLoader(Transporter&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;hasExtension&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)) &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RpcException(&lt;span&gt;&quot;Unsupported client type: &quot;&lt;/span&gt; + str + &lt;span&gt;&quot;,&quot;&lt;/span&gt; +&lt;br/&gt;                    &lt;span&gt;&quot; supported client type is &quot;&lt;/span&gt; + StringUtils.join(ExtensionLoader.getExtensionLoader(Transporter&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;getSupportedExtensions&lt;/span&gt;(), &quot; &quot;))&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        ExchangeClient client;&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// 是否配置了懒加载&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (url.getParameter(LAZY_CONNECT_KEY, &lt;span&gt;false&lt;/span&gt;)) {&lt;br/&gt;                client = &lt;span&gt;new&lt;/span&gt; LazyConnectExchangeClient(url, requestHandler);&lt;br/&gt;&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;//没有配置懒加载会初始化长连接&lt;/span&gt;&lt;br/&gt;                client = Exchangers.connect(url, requestHandler);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (RemotingException e) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RpcException(&lt;span&gt;&quot;Fail to create remoting client for service(&quot;&lt;/span&gt; + url + &lt;span&gt;&quot;): &quot;&lt;/span&gt; + e.getMessage(), e);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; client;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从以上代码可以看出， 如果没有配置懒加载，会直接初始化长连接。也就是说，每当我们消费端重启，会建立 Service个数 * 200 * 服务端docker服务数 个长连接。我们service个数是3， docker服务个数6  刚好是3600个长连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，服务端重启呢，服务端重启 ZK 会通知到消费端(大概60台docker服务)， 都会和新启动的docker服务建立连接，一个消费端建立 200 * 3， 那么总共会建立 36000 个长连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此可知，每次服务重启，都需要建立大量长连接，导致建连耗时时间特别长(大致计算了下，大概10s)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优化:  将连接池数量改小，经过压测， 配置 2 就够用了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;dubbo:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  provider:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    connections:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然也可以服务端默认不配置，由消费端决定长连接个数。当需要长连接较多时，可以使用懒加载。服务端重启瞬间建立长连接总数建议不超过500。解决以上问题之后，重启超时问题终于算是解决了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dubbo优雅重启问题，算是踩了个大坑，同时也说明了参数配置要知其所以然的重要性，不然可能导致不可预料的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外我们还踩了个线程池的坑，这个下篇文章再做介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注我，不迷路，欢迎点赞收藏。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a56c6b1e38fe5ed1354880ebff9eafed</guid>
<title>怎样写好 Flutter 代码</title>
<link>https://toutiao.io/k/cw7k2vm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU4MDUxOTI5NA==&amp;amp;action=getalbum&amp;amp;album_id=1422004630065856514#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1422004630065856514&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#闲鱼Flutter&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;82个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;&lt;span&gt;缘起&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;代码规范作为一个研发团队的核心基因，怎样在团队中高效传承是一个挑战。Flutter作为移动端持续火热的新型框架，正吸引越来越多的研发同学进入这个领域。但是面对全新的技术框架和之前几乎很少接触的dart语言，怎样写好Flutter代码困扰了无数Flutter初学者。文本就着重分享一下闲鱼Flutter团队在基础代码规范方面所做的一些实践。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;Flutter静态代码扫描&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;Native开发同学都知道Android/iOS都有配套的Linter检查机制。开发者可以通过Linter检查，统一代码风格，检查代码中的明显缺陷。Flutter同样具备这样的能力。通过Linter检查机制，是统一代码风格最简单高效的方式。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;Flutter Linter机制&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;Flutter Linter检查的机制植根于Dart Linter检查，同时做了大量的功能拓展。Flutter的Linter规则记录在工程一级目录的analysis_options.yaml文件中。大家&lt;/span&gt;&lt;span&gt;可以通过对该文件的定制来获得适合自己团队的代码规则。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Flutter Linter 规则都从属于三个主要的集合：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1.ERROR&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;规则标识的是代码中可能出现的错误&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2.Style&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;规则标识的是代码风格的问题&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3.Pub&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;规则标识的是Flutter包管理相关的问题&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;需要&lt;/span&gt;&lt;span&gt;注意&lt;/span&gt;&lt;span&gt;的是，考虑到实际开发场景中的稳定性。调整Linter规则的时候需要关注规则对应的成熟度。目前主要的成熟度等级包括：&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;常见的Linter规则集&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;1.effective_dart&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;effective_dart是dart语言配套的Linter 规则。规则来源于Effective Dart文档。该文档中有对Dart语言高效使用的各种规范。effective_dart[2] 规则比较老，目前已经废弃。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;2.pedantic&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;google内部dart开发规范集合。目前也已经废弃。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;3.flutter_lints&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;是Flutter团队推荐的Flutter相关规则集。推荐大家在Flutter apps, packages, and plugins中广泛使用。本身是dart recommended 规则集合的拓展版本。该规范会影响到发布到 pub.dev[5] 中 package的得分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4.lints[6]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Dart团队推荐使用的规则集。核心包括两个子集：core &amp;amp; recommended。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;闲鱼规范的取舍&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;在众多Liner规则中，选择符合团队需要的规则是一个很大的挑战。闲鱼在做的过程中，遵循了一些基本原则。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;表达简洁&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;在语义等效的情况下，充分利用dart语言的各种高级语法来降低表达的复杂度。简洁表达不仅能提升编码效率，同时也可以提升代码的阅读效率。举几个典型例子：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;闲鱼代码库中有大量的代码都是使用new关键字来进行类初始化的。&lt;/span&gt;&lt;span&gt;这一方面是因为闲鱼切&lt;/span&gt;&lt;span&gt;入Flutter比&lt;/span&gt;&lt;span&gt;较早，有历史包袱；&lt;/span&gt;&lt;span&gt;另一方面也是因为客户端同学将其他语言（例如j&lt;/span&gt;&lt;span&gt;ava）&lt;/span&gt;&lt;span&gt;的编码习惯带到了Flutter。&lt;/span&gt;&lt;span&gt;虽然要修改的地方有很多，但是为了表达简洁，我们依然坚定的加入这条规则。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;dart语法中有很多null处理的语法糖，能大幅提升判空的效率，提升代码的健壮性。这里包括？的判断，??的判空，以及null safety。需要不断引导团队同学更多使用这样的语法来提升效率，而不是继续使用if else的冗杂表达。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;减少歧义&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;代码&lt;/span&gt;&lt;span&gt;表达需要准确，同学之间的理解尽可能一致。减少代码之外的“以为”，增加字里行间上的“确定”。典型列子如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;是否要明确变量类型，团队内部不同技术栈背景的同学有比较大的分歧。前端背景的同学倾向于通过推断的方式进行变量命名，好处是表达简洁。客户端背景同学倾向于直接明确定义，好处是直观，减少不必要的推断。最终经过激烈讨论，大家还是决定采用明确变量类型的方案。从实践角度出发，直接明确变量类型虽然从表达上略冗杂，但是歧义确实更少。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一个变量或者方法如果重写了，请明确加上override注解。一个变量如果确定是const变量，请加上const关键字。一个变量如果没有再被赋值，请定义成final。坚持最小化表达，有如下几点收益：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;最小化变量状态是指用最严格的属性描述变量。例如一个变量从之前的多处赋值，改为一处赋值。那么变量其实自带了final的隐形属性。最小化状态表达要求必须加上final关键字，而不是推断是final。因为一旦加上final关键字，后续在赋值就会报错。这能减少不必要的理解成本，最大限度避免变量状态的隐形改变。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;增加的final const关键字能让编译器做更多优化，提升代码的整体性能。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;风格一致&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;多人开发的团队中，每个人都有自己的喜好。代码管理应该避免出现“破窗效应”。一个人把代码写烂了，后面的同学照着写都烂了。正所谓，无规矩不成方圆。基础代码的表达，不追求绝对的对与错，追求的是在风格上的尽可能统一。这里有太多典型&lt;/span&gt;&lt;span&gt;例子：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;命名规范大体遵循驼峰的方式【camel_case_types，non_constant_identifier_names，constant_identifier_names 】&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;控制流中尽量使用大括号【curly_braces_in_flow_control_structures】&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;ruby&gt;&lt;br/&gt;&lt;/ruby&gt;&lt;span&gt;import顺序按照先dart引用，再package引用，再相对引用方式分模块，&lt;/span&gt;&lt;ruby&gt;&lt;span&gt;模块内引用按字母表排序【directives_ordering】&lt;/span&gt;&lt;/ruby&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;ruby&gt;&lt;br/&gt;&lt;/ruby&gt;&lt;span&gt;required 关键字标识的变量请排到前面 【always_put_required_named_parameters_first】&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;flutter布局中优先使用SizedBox而不是Container【sized_box_for_whitespace】&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;flutter颜色定义使用8位16&lt;/span&gt;&lt;ruby&gt;&lt;span&gt;进制整数标识颜色值【use_full_hex_values_for_flutter_colors】&lt;/span&gt;&lt;/ruby&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;ruby&gt;&lt;br/&gt;&lt;/ruby&gt;&lt;span&gt;flutter widget在构造函数中加入key&lt;/span&gt;&lt;ruby&gt;&lt;span&gt;参数【use_key_in_widget_constructors】&lt;/span&gt;&lt;/ruby&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;这里的每一条都不具有非这样不可的理由。但是在闲鱼写代码就必须遵循这个规范。不为别的就为了风格的统一，为了提升团队同学业务轮转的效率。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;代码质量&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;Linter检查的另一个重要的目标是发现潜在的代码缺陷。这对代码管理来说就更为重要了，因为这直接关系到稳定性的大局。稳定性是开发人员的底线，再怎么小心&lt;/span&gt;&lt;span&gt;也不为过。同样举几个典型的例子：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1.避免给void赋值 【void_checks】&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2.变量比较之前先判断类型 【unrelated_type_equality_checks】&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3.避免catch &lt;/span&gt;&lt;ruby&gt;&lt;span&gt;空实现【empty_catches】&lt;/span&gt;&lt;/ruby&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4.避免使用隐形类型传递 【avoid_shadowing_type_parameters】&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5.避免await 非future对象 【await_only_futures】&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6.集合的remove&lt;/span&gt;&lt;ruby&gt;&lt;span&gt;需要传递符合集合的类型的参数【list_remove_unrelated_type】&lt;/span&gt;&lt;/ruby&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果这些问题&lt;/span&gt;&lt;span&gt;代码带到生产环境，轻者出现exception，重则功能不可用。防患于未然，在代码最开始编写阶段，就及时处理这些问题，代码才能更健壮。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;维护成本&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;效率对一个团队固然很重要，但是追求一时的效率，而不顾及代码生命周期内整体的效率是非常短视的行为。我们今天越发关注代码在后期的维护成本。基于此，文档&amp;amp;注释的重要性正越发凸显出来。一个好的注释，能省下很多的答疑，很多的试错，很多的猜疑。不断引导大家写并维护文档及注释，是闲鱼代码规范&lt;/span&gt;&lt;span&gt;明确的目标。举几个明确的例子：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1.Deprecated函数需要给出明确的注释[provide_deprecation_message]&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2.注释中的变量引用，符合引用的约束[comment_references]&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;规则权威&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;闲鱼团队Liner规则的制定，不是一家之言。邀请了团队所有同学参与到规则的制定过程。一个规则的权威性来源于所有执行者发自内心的认同。举一个典型例子：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在讨论标准格式化的时候，团队同学集中讨论了一个规则：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;【- lines_longer_than_80_chars # 争议规则，每行长度不超过80字符】&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大家认同统一格式化代码风格的重要性。大家争议的焦点是：80字符在很多高分辨率显示器上太短了。这会导致很多不必要的换行，降低代码阅读体验。我们听取了开发同学反馈，把该条规范去掉了。改为统一android studio配置来执行。最终标准是&lt;strong&gt;12&lt;/strong&gt;号字，一行最多&lt;strong&gt;160&lt;/strong&gt;字符。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;写在最后&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;当然仅仅做到上面的部分，仅仅是万里长征的第一步。基础代码规范这件事，我们并不追求规则的多，而是更在意规则实际的效率收益。规则制定的过程中，我们听取了开发同学真实的反馈，删除了很多并不必要的规则。简单，高效，并不为了规范而规范是我们核心的目标。当然最终确定的规则，要尽最大努力保证执行。目前我们正在积极建设更完善的CI&lt;/span&gt;&lt;ruby&gt;&lt;span&gt;体系&lt;/span&gt;&lt;/ruby&gt;&lt;span&gt;，将规范规则化。通过持续快速检测，实时给使用者反馈，降低规范落地的成本。代码是研发团队的核心资产，需要我们共同守护。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;附录&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;上面介绍的规则细节，如果有不清楚的，可以在下面的链接中找到更详细的解释。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;linter-rules&lt;sup&gt;[7]&lt;/sup&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;闲鱼核心Liner规则&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;附上闲鱼的核心Liner规则，给大家一点参考。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;命名&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.2610062893081761&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZOxUGIXLWLKSiaw9Rbad6UDmhCUoEiabFbwOBnQTKWnAs0XHWmIOJactw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1908&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;排序&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.14675052410901468&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZFUcdkJf14YSzGMm3Fahts4AiaNLGRXCkXWapIEbPyeL5bewIgHqJfRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1908&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;格式化&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.05851619644723093&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZRB3zXXjyc2B5GWEK4IFua6FJuKyqxxhFwuOdHqt4hYrYZbyfwY99aQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1914&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;评论&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.10146443514644352&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZBlLRZIwzrX9hibpOLW3WAY9UUpyLe6wBmrjMmZQPP14UGJaRedAXIibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1912&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;库使用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.10251046025104603&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZQDj1av5wglDqOPuJhrrW1Br5RqJqPv5BU75ma3X5zEibpNdCM3ibcyCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1912&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.058394160583941604&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZ5Q5YqX5I4Dh2ib6bJ8efPTj8PLRUsRSGpnKJVYLABZCpV0dJ486mZkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1918&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;字符串&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.100418410041841&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZ7KBk3T671hCjibXtEoIWy0Ke3ttDTZyXPfsP0wxF6UoibqwxjIBKXjicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1912&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;集合&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.12903225806451613&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZEZm070X6CpU958FjAfSBqglo3rTeiaI6FCSljpwGzVaXNElJPwyOjjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1922&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;函数&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.15119916579770595&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZTtmV08dZ8IoHTTibsfstrhWNVicjOzb2L1kN5ia1adX0W6UDZByLKI08Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1918&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;成员变量&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.2392894461859979&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZupCeDBrnZpxoYExMLbddiaS1n35AnPLHMibFztcic16jSicNZQ062iaibFIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1914&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;构造函数&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1951983298538622&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZXUWMFWKTEGrEPKJ4jeBgpKGBibLRwLiaG0PqJCCqxChF4JJBOFh0J02A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1916&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;异常处理&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.05625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZl2pWUWSvNibqmCFLUynHGyuZSNXrhFBha6ToXo52ic59KnJxT6rJmoTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Mixin&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.05845511482254697&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZ2wu6hjuROLQlIHoHstWbDEicsJ7sIibRcaOPFn3ny1koYGtChq5yDtWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1916&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;类型&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.10251046025104603&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZc3t6icObPZDZ3PVlRnibej7Lm7QW1ACp1QF7Uow7KxJ5JCVTKyTowUcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1912&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;参数&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.05956112852664577&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZsmmD5lnTxCsViczSSyiaBMcDIINAXBVn8FlM5CeUAEUG846kdRcWFymg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1914&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;质量&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.15031315240083507&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZvmoODcwNdxscge43x5zYsYk1CjGNRNwkia5sqbttUUkibibmezGr3avkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1916&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Core集合融合部分&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5642633228840125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZeL3sUgav08mmGdY6cibr0UoUAXPW45aRuRI7kBgoZgECMRqMTPDwoNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1914&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Recommended 集合融合部分&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9716684155299056&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZMDO1VZHxIb5pVHAR1l8qk5NXQoI2j7LaDzP74OkcE90WAICFCdQTAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1906&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Flutter 集合融合部分&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5140771637122002&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZP3F62CUzxE6sEqz8snxkmErvkjHUKbdGFxkEKlc81zBBTOvShPibCKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1918&quot; title=&quot;null&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其他规则融合部分&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-backh=&quot;177&quot; data-backw=&quot;316&quot; data-ratio=&quot;0.5610010427528676&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1Gl8FHfYWD1a1vA1aRK8jVZBnm7WhHbKz87ZoqS7ib81K7O1pnic1PfqFov3XLWs65jnBtQSnVt50Lg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1918&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;References&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;/code&gt;&lt;span&gt; effective_dart: &lt;em&gt;https://pub.dev/packages/effective_dart&lt;/em&gt;&lt;br/&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;/code&gt;&lt;span&gt; effective_dart: &lt;em&gt;https://pub.dev/packages/effective_dart&lt;/em&gt;&lt;br/&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;/code&gt;&lt;span&gt; pedantic: &lt;em&gt;https://pub.dev/packages/pedantic&lt;/em&gt;&lt;br/&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;/code&gt;&lt;span&gt; flutter_lints: &lt;em&gt;https://pub.dev/packages/flutter_lints&lt;/em&gt;&lt;br/&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;/code&gt;&lt;span&gt; pub.dev: &lt;em&gt;https://pub.dev/&lt;/em&gt;&lt;br/&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;/code&gt;&lt;span&gt; lints: &lt;em&gt;https://pub.dev/packages/lints&lt;/em&gt;&lt;br/&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;/code&gt;&lt;span&gt; linter-rules: &lt;em&gt;https://dart.dev/tools/linter-rules#lints&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;img data-ratio=&quot;4.13570487483531&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1GLZDqvPfwuIUEJjtdPx4lYwPx0p9E4T3D1f164CCr18n4ms26HtWsUVrsLf8Szwb4Us8MuhOCe3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;759&quot;/&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8b6f80afbbf79794387259fb8f04b379</guid>
<title>初识 containerd（二）：containerd 中 cri 实现概览</title>
<link>https://toutiao.io/k/ikbus2d</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article-content content-container&quot; id=&quot;gallery-content&quot;&gt;

            &lt;p id=&quot;original&quot;&gt;

#### 本文目标

​         一流的企业制造标准，二流的企业做品牌，三流的企业做产品。开源世界亦是如此。k8s定义了一套标准，其实就是一些grpc 接口。其他厂商只要满足这些标准就可以融入k8s这套体系中。有哪些标准呢

 k8s本身其实是一款资源编排工具，而所谓的资源在虚拟化领域无非就是计算资源、存储资源、网络资源。

- **CRI（Container Runtime Interface）**：容器运行时接口，提供计算资源,具体参考[cri规范](https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/cri-api)
- **CNI（Container Network Interface）**：容器网络接口，提供网络资源，具体资料参考[cni规范](https://github.com/containernetworking/cni)
- **CSI（Container Storage Interface**）：容器存储接口，提供存储资源,具体参考[csi规范](https://github.com/container-storage-interface)

​       本文目前考虑的是containerd，而containerd本身是cri的具体实现。本文先从理论上探讨containerd如何实现cri。后续会实际的调试代码。探讨更加细致的逻辑。

#### Containerd中的CRI实现



![containerd-criService实现](http://testdddddddddd.oss-ap-northeast-1.aliyuncs.com/uPic/containerd-criService%E5%AE%9E%E7%8E%B0-1609931.png)



  整个实现如图所示：

​    我们看图第一层：

-    Api.pb.go中定义了Run TimeService和ImageService两个接口，分别对应cri中的容器和镜像操作。
-   containerd中 定义了Service的接口，只有register到grpcServer一个方法。前文所述的containerd中的plugin其实就是这些service . 实现这个接口，就可以注册为grpc server的服务，暴露给用户。

  我们看图第二层：service.go

- 定义grpcService接口，实现它需要同时实现RunTimeService和ImageSerivce两个接口中的方法

- 定义CriService,实现它需要实现grpcService和plugin.Service中的方法。同时需要实现Run方法

- 定义criService的struct，ta要实现CriService的接口。在service.go中它仅实现了CriService中的run方法，还有

  plugin中的Register方法

我们看第三层：remote_runtime.go和remote_image.go

- ​       service.go 中，struct criservice只实现了run方法和register方法。而runtimeService 、imageService中接口中的方法还没实现呢。go 的interface实现比较松散。逻辑随便放。所以containerd在remoute_runtime实现了criService的runtimeService接口中的方法。remote_image中实现imageService中的方法。而整个椭圆形中的3个go文件整体实现了criService中的所有防范。



附录：

【1】https://studygolang.com/articles/6696。golang interface组合



&lt;/p&gt;
            &lt;p class=&quot;container mx-auto px-4 md-content mt-8 max-w-6xl tracking-wider md:leading-relaxed sm:leading-normal cn-pd ct-container loading&quot; id=&quot;write&quot;&gt;
            &lt;/p&gt;
            &lt;p id=&quot;tocFlag&quot;/&gt;
                &lt;aside id=&quot;toc&quot; class=&quot;toc&quot;/&gt;
        &lt;/div&gt;

        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>