<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>9c4cb626474e2485b3b3eff006760d67</guid>
<title>30款提升组织效能 SaaS 工具，我们的宝藏工具箱大公开</title>
<link>https://toutiao.io/k/r64b4s8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;熟悉 Juicedata 的小伙伴知道，从2017年成立到第一款产品发布、从寻找PMF（Product Market Fit) 到开源，我们一直保持着一个精简的团队配置，不少人都很好奇我们是如何做到的？今天邀请Juicedata的合伙人苏锐，为大家分享各阶段用到的趁手工具。  &lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家好，我是 Juicedata 的合伙人苏锐，Juicedata 是一家开源基础软件公司，创立于 2017 年，核心产品 JuiceFS 是一款为云设计的分布式文件存储产品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开发存储产品需要时间和场景的考验，过往的很多存储公司从创立公司到产品发布，往往要经历三到四年的时间，构建几十甚至上百人的团队。深知这其中的挑战和考验，创立 Juicedata 的时候我们也问自己这样的问题：产品多久能发布？需要多少人？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当时我们也给不出一个准确的答案，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;但我们确信要实践互联网产品快速迭代的思想，要让公司保持非常精简的团队，非常高的组织效能，这样才能应对在产品研发、市场销售和企业发展与管理中的重重挑战。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;先简单介绍 Juicedata 的过去，方便大家理解背后所需的工作。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;JuiceFS 的开发始于 2016 年，2017 年底在全球公有云上发布了云服务的第一个版本。此时我们有 2 名全职员工。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;然后，我们用三年时间打磨产品，过程中落地到 20 家商业客户的生产环境中，完成了存储稳定性和可用性考验，在 DevOps、大数据、AI、容器存储等多个业务场景中使用，完成了 PMF（product market fit) 的过程，此时我们有 6 名全职员工。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;为了能让 JuiceFS 被更多企业了解并应用，2021 年我们将 JuiceFS 开源。&lt;span&gt;开放共建的方式让更多的用户和贡献者加入进来，产品迭代的速度也更快，&lt;/span&gt;仅1年时间，在 GitHub 上已经有 5.4K stargazers。此时，我们有 15 名全职员工，开发运营着 JuiceFS 的社区版和云服务，服务6000多位开源用户、数百家企业，其中不少是大型上市公司。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5384615384615384&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnrmwDv0KGvTamgvMPkxzBh2PP9Fhta99FyVKGqAhicO1YXbhDPjI4iaxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;624&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从Github上的数据可以看到，JuiceFS 用户已经遍布世界各地&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;很多客户都好奇 Juicedata 如何做到这么少人把 JuiceFS 这个产品发展起来的。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;我认为组织效能是创业团队的核心，容不得一丝浪费。保持高组织效能的关键是专注&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;，不是加班。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;今天给大家分享一下陪我们一路走来，帮助我们释放 10 x 人效的 SaaS 工具箱，让我们可以专注在核心业务上。没有这些工具，真的不行！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;打开 Juicedata 的宝藏工具箱之前，先谈几点我们选择工具的原则：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;创业之初我们就确定要做一个&lt;/span&gt;&lt;span&gt;全球化&lt;/span&gt;&lt;span&gt;的产品，工作中用到的各种工具也会有优先选择全球化的，方便组建全球化的团队，也可以从中学习优秀产品的设计。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;选择&lt;/span&gt;&lt;span&gt;最优秀&lt;/span&gt;&lt;span&gt;的工具，甚至付费的优先，优秀的工具通常意味着更好地实践和体验，少走弯路，也能从他们的产品和服务中受到启发来改进我们的产品。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;SaaS 优先&lt;/span&gt;&lt;span&gt;，不要私有部署，不用开源产品自建。这样能最大程度减少维护成本，不要花精力在这些维护工作上。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;在线工具优先&lt;/span&gt;&lt;span&gt;，比如把 Office 换成在线文档，协作效率高很多，数据也更安全，不用担心硬盘坏掉，也不用费心备份。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;选择&lt;/span&gt;&lt;span&gt;低学习门槛的工具&lt;/span&gt;&lt;span&gt;，比如&quot;稿定设计&quot; 比 Photoshop 简单，每个人都能学会。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;让工具保持简单，&lt;/span&gt;&lt;span&gt;够用就好&lt;/span&gt;&lt;span&gt;，不要过多考虑未来的需求，警惕 Over design。比如我们用 GitHub Wiki 做内部知识库，而没有买单独的产品，等未来不能满足需求的时候再换不迟。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;有些工具要考虑&lt;/span&gt;&lt;span&gt;本地化需求&lt;/span&gt;&lt;span&gt;，比如运营设计产品，接地气的模板才是关键，这时全球通用就应该让步了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;我将按照创业发展的过程来介绍这些工具，方便读者理解选择这些工具的原因和实现了什么价值。&lt;/span&gt;在文章的最后，&lt;strong&gt;我还会晒一下公司的 SaaS 账单，&lt;/strong&gt;看看我们一个月使用各种 SaaS 工具究竟花了多少钱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;NO.1&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Day 1, 创业开始&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;2017年，在产品研发启动之前，最先需要工具的是沟通和 BackOffice。 &lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;消息中心：Slack&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://slack.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：$8/账号/月&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Slack 作为团队协作的即时通讯工具，有一些产品设计是我们非常喜欢的：&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;所有的 Channel 都是开放的，所有信息都能看到，这代表着开放透明的团队文化；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;任何时间加入可以看到、搜索到过往所有消息，方便新成员了解工作历史；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;每条消息都可以用 emoji 响应一下，给队友回应，又避免「收到」、「赞」刷屏；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;每条消息都可以成为一个 Thread，在里面持续讨论，方便跟进，还不会打扰到其他人。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;Slack 已经使用了五年，现在它不仅是沟通工具，也是所有工作事项的集合地，可以把各种日常用到的 App 集成进来。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;span&gt;比如：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;GitHub 仓库收到的 issue、PR 还有 CI 结果会通知；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;PagerDuty 的告警会通知；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;分享给我的 Docs 和 Comments 会通知；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;Pipedrive 里新的销售变化会通知；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;用 Zapier 订阅的关键词更新会通知；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;Intercom 上的对话会通知；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;我们云服务的一些业务状态也写了 Bot 通过 Slack API 通知。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;上面提到很多工具名字，都会在下面一一分享给大家。这些工具的通知会分门别类发到指定的 #channel，发给指定的人。收到通知后，甚至不用切换到对应的 App，在 Slack 里就能完成处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;2021 年 JuiceFS 开源后，我们也使用开放的 Slack channel 作为社区交流的场地，所有人都可以通过一个 URL 加入进来，社区用户之间就能建立起连接，这种交流的方式比使用论坛更亲切。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;P.S. Slack 还提供了精细的提醒设置，让我能收到重要消息的提醒，又不会被过度打扰。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;电子合同：DocuSign&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://www.docusign.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：$15/账号/月&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;海外的签约我们都用 DocuSign，几年下来没用 UPS 快递过合同。别小看这件事，一次跨国快递往返通常要 10 天以上，疫情期间这个等待时间还要多几倍，还有寄丢的风险。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;使用 DocuSign 签电子合同只需要几分钟，还能帮你管理归档&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，&lt;strong&gt;再也不用去文件柜里翻了。&lt;/strong&gt;没有电子合同之前，这件事往往是有专门的人来负责。国内电子合同服务我也调研过，企业之间签电子合同的接受度不高，还是要求打印、盖章、一式 N 份、快递邮寄、实体存档。这些问题并不是因为国内电子合同服务不够好用，与企业审计标准、BackOffice 的流程、从业人员的习惯都有很强的相关性。在快递、外卖、物流等灵活用工招聘很多的企业，已经在用电子合同了，期待在国内也能广泛用起来。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;费用报销：Expensify&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://www.expensify.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：$20/账号/月&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Expensify 是用来管理报销的工具，通过它导入信用卡账单，再生成报告申请报销。美国公司每年的报税，也是通过它跟第三方机构协作，省时省力。除了报销，还可以做员工费控，可惜和国内的财税体系不兼容，对国内部分用处不大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;上面几个产品的注册、配置，一个人一上午肯定能搞定。基本的协作、交流搞定，就可以专注研发产品了。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;NO.1&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;从 Idea 到产品发布&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;产品研发需要趁手的兵器，工程师们也最喜欢研究各种工具，下面这些是比较通用的工具，每个工程师都需要的。可靠的服务减轻了我们很多负担，如果没有这些可靠的「轮子」，很难想象 JuiceFS 服务要开发多久！&lt;/span&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;代码与项目管理：GitHub&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://github.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：$4/账号/月&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;很多公司会自己部署一套 Gitlab，理由大多是觉得放在自己服务器上踏实，觉得有可能自己定制一下。都有道理&lt;strong&gt;，但我们认为更重要的是省事，所以我们使用 GitHub。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Juicedata 不仅把代码放在 GitHub，项目管理也用 GitHub Issue + Project，不再用单独的工具，公司内部的 Knowledge Base 也是用 GitHub Wiki。&lt;strong&gt;这是我们的另一个原则，保持简单。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;GitHub 同时也是最大的开发者社区，2021 我们将 JuiceFS 开源时，也是选择将源代码和开发流程放在 Github，便于我们跟全球的开发者一起协作沟通。内外部项目都使用相同的工具和流程，同时在多个内外部项目工作也几乎没有切换成本。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;持续集成：Travis CI + GitHub Action&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Travis CI 网址：https://www.travis-ci.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：5 个并发，$249/月&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;GitHub Action 网址：https://github.com/features/actions&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：对开源项目都是免费的，对私有项目 GitHub Team Plan 包含 3000 分钟，超出部分按使用量付费，可以设定配额。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;我们一直使用 SaaS 化的 CI 服务，几年来没有为 CI 投入过任何额外精力。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;起初使用 Travis CI，后来 GitHub 推出 Action 之后，对开源项目是免费的，且没有并发限制，将部分任务迁移到 GitHub Action 以缩短测试用时，目前两个工具同时用。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt; 支付&lt;/span&gt;：Stripe&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://stripe.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：每笔扣款的 %2.9 + $0.3 手续费&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;从创业初始，我们就坚信，与私有部署方式相比，云服务可以提供最好的用户体验，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;可以为我们提供很高的服务支持和产品迭代的杠杆率。云服务需要用户尽量多地自助服务，账单和支付是必需的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;我们选择 Stripe 搞定所有账单和支付相关的事情。开发接入门槛低，而且 Stripe 在用户群体中也已经获得了信任，大家可以信任在 Stripe 的弹窗中输入信用卡信息，但不一定信任在你的网页表单中输入。对于国内用户，Stripe 支持支付宝，可以扫码充值，我们也用 Stripe 来管理充值和账号余额。对于需要走对公付款的国内客户，仍然可以使用 Stripe 来管理账单，并跟踪付款状态。此外的发票等流程管理，我们用 Google Workspace 的一张表格搞定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;Stripe 的 API 与文档设计非常好，确保你第一次上手能顺利搞定，这是 to developer 生意的核心要素！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Stripe 最近还开源了自己的文档框架 Markdoc | A powerful, flexible, Markdown-based authoring framework （https://markdoc.io/）&lt;/span&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;邮件服务：SendGrid + SendCloud&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://sendgrid.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：$14.95/月&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;我们在云服务中使用 SendGrid 发送邮件。比如注册通知、账号激活、找回密码等重要邮件，还有内部一些自动化邮件通知。老牌服务了，值得信赖。部分国内的邮件服务商在接收 SendGrid 的邮件容易进垃圾箱，我们也用了 SendCloud 作为补充，部分国内的邮箱地址会用它来发送。&lt;strong&gt;2022 年了，应该不会有任何一个 创业公司自建邮件服务来做这件事了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;NO.1&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;产品发布&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;在线客服：Intercom&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://www.intercom.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：$74/月&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;2018 年初，我们在全球公有云发布了 JuiceFS 云服务，&lt;strong&gt;如何让用户方便的与我们联系是提升用户转化率和服务支持满意度的重要能力。&lt;/strong&gt;以往很多服务会在网站页面上放置一个浮窗，上面写着电话、QQ，可能还有一个表单。后来开始有在线客服，但是体验并不好，常遇到「连不上服务器」，「我们尽快回复您」但是永远得不到回复等问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;我在调研客服系统之后，毫不犹豫的选择了 Intercom。&lt;strong&gt;Intercom 的内容营销做的非常棒，每次看它的 Email Campaign 都是享受，用上产品之后我还把他们发行的电子书都下载看了一遍，这样的内容营销能力绝对是数一数二了。&lt;/strong&gt;也正是他们的优质内容说服了我，这么会和用户交流互动的公司，他们做的交流和营销产品也一定不会差。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4548238897396631&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnicXyBViaibibM49g9alIcpalKfOuwmC0bFQzicHj6Hh7CfVew5n708NkG2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1306&quot;/&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;非常精炼的语言，是不是也很想下载一看？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;从产品发布我们就用 Intercom 在网站上提供在线聊天窗口，初始的作用就是在网站上提供一个对话框，Intercom 还提供了手机 App，我们可以随时随地可以回复网站上的用户提问。成了高阶玩家，还可以配置对话模板进行自动回复，提高效率，提升用户 Engagement。我们通过它的 API 和 JuiceFS 网站用户账号关联，之后就能用 Intercom 给注册用户发邮件了。Intercom 的自动化邮件也很方便，我会用它来群发产品升级通知、客户案例文章等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;缺点是 Intercom 的网站在国内访问有点慢，好在可以用它的 integration 与 Slack 关联，然后可以直接在 Slack 里面收到并回复 Intercom 消息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;这个产品已经用到第五年，真的帮我们节省了很多时间和心力，只需要把精力专注在与用户沟通的内容上，剩下的事情都被 Intercom 搞定了。&lt;/span&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;监控报警: PagerDuty&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://www.pagerduty.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：$34/账号/月&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;和一般的 SaaS 不同，JuiceFS 需要在每一家公有云的每一个区域上部署服务，这对 SRE 要求很高，我们也尽量使用 SaaS 服务简化工作。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;靠好工具的加持，负责维护 JuiceFS 十几个公有云 100 多个 Region 的服务，SRE &amp;lt; 0.5 人。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;我们使用 PagerDuty 发送 JuiceFS 云服务的报警通知，报警事件按严重程度分为 2 级：WARNING 和 CRITICAL，前者发送 Slack 通知，后者要同时发送 SMS 消息和打电话。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;P.S. &lt;/span&gt;&lt;span&gt;如果是自己维护的告警系统，一定还需要另一套告警系统来给它报警吧，这个套娃问题信任 SaaS 服务吧 ；）&lt;/span&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;日志服务：Solarwinds-papertrail&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://www.solarwinds.com/papertrail&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：10G 数据量，$10/月 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;我们使用 Solarwinds - papertrail 搜集全球所有服务节点最重要的关键日志，可以在统一的界面搜索所有节点的实时日志，对于分析分布式系统的问题非常有帮助。它还可以配置关键字进行报警，发送到 Slack。我知道也有不少用户使用公有云自带的日志服务&lt;strong&gt;，但是 JuiceFS 需要在十几个不同的公有云上部署，学习十几家不同的日志服务是崩溃的，一个好用的 SaaS 日志服务才是解决之道。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;NO.1&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;迭代，寻找PMF&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;产品发布了，但可能连站在起跑线上都不算，只能算是热身吧，接下来的销售工作才更艰巨。我们用了三年时间迭代产品，向客户证明可靠性、可用性，找到 PMF(product market fit) 的客户和场景。在这 1000 多天里，我的工作就是用各种方式约用户，去公司拜访介绍 JuiceFS，为潜在客户设计方案，推动测试，签单。客户规模从最早的 Startup 逐渐扩展到上市公司，场景从边缘的数据备份逐渐变为企业核心的数据湖。这个过程最重要的首先是 CRM 工具。&lt;/span&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;CRM: Pipedrive&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://www.pipedrive.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：$19.9/账号/月&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;我们最初使用 Salesforce, 强大的功能让人眼花缭乱，在缺乏足够的客户销售数据时也完全体会不到它的强大，在试用半年后就不再续费了。后来尝试过 Google Sheet 做 CRM，每行一条客户信息，详细的记录要附加一个 Doc，里面记录着每一次的沟通记录，记录到 100 个客户信息后，用一张表来跟踪变得越来越麻烦，信息呈现不直观，统计汇总不方便。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;我也调研了国内的几个工具，大多是面向大型销售团队管理短平快的交易的。&lt;strong&gt;而 JuiceFS 作为企业 IT 基础设施软件，在销售中有几个特点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;销售流程中涉及的人员多，需要交易记录中有详细的 Contact 管理；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;需要和客户讨论的问题复杂，很多的业务、技术问题都需要详细记录，还有很多表格、图片甚至代码等附件；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot; role=&quot;presentation&quot;&gt;&lt;span&gt;销售周期相对长，所以每一个 deal 都需要能长期跟进，通常是 1-6 个月，签单之后还有更长的客户成功阶段，通常有 3-5 年甚至更长，沉淀下来每一个客户的信息都形成了一个知识库。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;这些特点就是对 CRM 的需求，&lt;strong&gt;最后我们选择了 Pipedrive，它能满足这些信息管理需要，而且以直观的看板方式呈现 Pipeline，上手门槛特别低，几年用下来我觉得不错。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;我认为 CRM 是 toB 企业必备，选择一个适合你的工具，帮助非常大！&lt;/span&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;开会用到的&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;现代企业的线下拜访越来越少，线上会议让客户和我们都更有效率。客户不用再为拜访预约会议室，不用再因为大厦安保要求下楼接人，客户的行政同事不用再给我们送水。这些动作看起来也不是多大的负担，但对于一家大型企业每年上万场会议下来，节省的资源和时间是很客观的。客户接受并习惯了线上会议，我们做乙方的也能少跑些路，但是和客户开会用到的软件可真是五花八门，&lt;strong&gt;通常我会按客户的习惯，使用他们的日常会议软件，这样做不需要客户安装额外的软件，做额外的配置，方便接入他们的会议室系统。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;我们日常能用到的会议软件有 腾讯会议、Zoom、钉钉、飞书会议、微软 Teams、Chime、小鱼、UMeet、WebEx 等等，使用体验上大同小异。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;沟通用到的&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;即时通信软件和会议软件一样五花八门，前面说过我们团队内部沟通、协作主要用 Slack。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;但是和客户沟通只用 Slack 不行，都用微信行不行？&lt;strong&gt;我会优先选择使用客户团队的即时沟通工具，&lt;/strong&gt;这样做有一个好处。客户工作时段很忙，注意力都在自己内部的沟通工具上，经常是不看微信的。如果用客户日常的 即时沟通工具，他们少了切换成本，还方便和其他同事拉群，交流响应上更及时。所以，我日常就会开着微信、企业微信、钉钉、飞书、Slack。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;远程桌面: TeamViewer + 向日葵&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://www.teamviewer.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：$24.90/月&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;为用户提供 IT 基础设施软件，软件本身的边界看似清晰明确，但是用户的使用场景和使用方法也是千变万化，所以能直接看到用户使用的现场是至关重要的。&lt;strong&gt;JuiceFS 提供云服务，用户也会在安全策略允许的条件下上报监控数据给 JuiceFS，这样运维与问题的排查方便了不少，但是在支持客户过程中有时仍然需要连接到客户环境进一步排查。&lt;/strong&gt;我们会使用 TeamViewer 连接客户操作用户的桌面。如果没有远程桌面，大家只能发截图，这样的画面就很常见了：&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1791044776119403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnDfKHJMCqA0RvbmSrajxwwbRoFHf5txp5bm0AOj0xCs5LmQmpqicia4Xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;67&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;中国移动&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.72&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnJyiaEzmvV393bvAibjfxM22fLHwjCia2NpuHR0NzostVsZpICmYj4VDxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;25&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;11:27&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;100 %&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.38&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnuoAtibQnU5uN5Kna2HHX3jGYFUIIXkia8ADI2SYNPrYwFpXSan5MYY2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.7272727272727273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnyDHMRibghcCD6xSQ9pmxX0sS604jFtSp2P2YCkGD0D11AXYUyibVNKhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;微信(2)&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;客户爸爸&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnMzYcvrhzLYNj6SRnhGUibH8yyczmygLQQH9yB6SQ4ibBMw0VBc3u43zw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;35&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/F446RY3QsZmyvWmVWw5VyUHhpghzvDSn4WLs5PJrSIfaOia1dtWsZnNLsYzchU0bNgib8VYfkAZtlV48ItSRNj8Q/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1024&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;发送截图1&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;截图不全，上面还有一些&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnHmbD5AmHuxXuEM9wEFkxaCXDRjiayqic4TlIick9kbkXlibZEF3TVpvcdw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/F446RY3QsZmyvWmVWw5VyUHhpghzvDSn4WLs5PJrSIfaOia1dtWsZnNLsYzchU0bNgib8VYfkAZtlV48ItSRNj8Q/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1024&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;发送截图1（1）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;下面没有了吗？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnHmbD5AmHuxXuEM9wEFkxaCXDRjiayqic4TlIick9kbkXlibZEF3TVpvcdw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;执行命令也需要发我一下哦&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnHmbD5AmHuxXuEM9wEFkxaCXDRjiayqic4TlIick9kbkXlibZEF3TVpvcdw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/F446RY3QsZmyvWmVWw5VyUHhpghzvDSn4WLs5PJrSIfaOia1dtWsZnNLsYzchU0bNgib8VYfkAZtlV48ItSRNj8Q/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1024&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;……&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnfEzatbIZeDZFZZK9r1thqoliczxoEmnfkgnAmx7siarccf7675jg0tnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;52&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;……&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnZfiaJsW3upWHtedLcCZq15Y1MhO6tpUZCMicCxiajJwia2ZtB3nEGESGqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;52&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZmyvWmVWw5VyUHhpghzvDSnW3HXzCTLNReJumGpUbePia6auQ7fic60iccUIR8OrOybC3EtS8PPLo70Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;52&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;就这样，很多来来回回的沟通是免不了的。根据用户习惯，我们也用向日葵等其他远程桌面工具，现在腾讯会议、飞书会议也支持远程操作了。&lt;/span&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;在线设计: 稿定设计 + 即时设计 &lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;稿定设计网址：https://gaoding.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：个人专业版 ￥158/年&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;即时设计网址：https://js.design/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：免费&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;产品发布之后一定少不了运营和市场工作，虽然我们团队人少，但是工作内容一个不少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;做市场活动经常需要一些海报、头图，这些内容的创作已经不再需要 Photoshop 和 Illustrator 这些大家伙了。&lt;strong&gt;我们使用稿定设计，没有任何学习门槛，更好的是它提供的海量模板，我要做的只是像逛淘宝一下找到自己喜欢的模板，改改即可。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;即时（js.design）设计和 Figma 是类似的在线设计工具，对于画流程图、原型图等，也同样比 Photoshop、PowerPoint 好用的多，相比 Axure、OmniGraffle 又在协作上带来了巨大的方便，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;发个链接就能邀请伙伴进来看，还能随时评论、一起设计，再也不用把截图、PDF 在微信和邮件里传来传去了。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;NO.1&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;开源，面向更多用户&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;2021 年我们发布了 JuiceFS 社区版，这让更多开发者可以关注到 JuiceFS，并且能看看 JuiceFS 代码写的怎么样，也更容易上手体验，不需要云账号了，自己的电脑上就能安装试用。开源社区也给了我们产品发展、迭代更大的空间，同时也多了很多工作。我们要倾听社区中用户的声音，响应他们的需要，这个过程中也是一系列好工具帮助了我们。&lt;/span&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;社区运营: Orbit.love&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://orbit.love/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：对开源项目免费&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Orbit.love 是支持社区运营的工具，可以把 GitHub、Twitter、Slack channel 这些有你用户的平台、社交媒体关联到 Orbit，它能汇总、分析、统计这些用户在各个平台上的行为。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;举个例子，作为一个开源软件社区，如果一个用户在 GitHub 上给你的项目加星，说明他有了最初的关注。如果接下来他又加入了 Slack channel，在 GitHub 上提了 issue，转发了项目的 tweet，每一个动作都代表这他对产品的关注和参与程度。这些行为都能汇总到 Orbit.love 上，让我有很容易看出哪些是新用户，哪些是深度用户，哪些是流失用户，社区运营工作就有了参考依据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;Orbit.love 是我今年用过最有趣的工具，没有之一！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;邮件列表：Mailchimp&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://mailchimp.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：2000 联系人以下免费&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;我在「产品发布」一段提到使用 Intercom 给网站用户群发邮件，但是 JuiceFS 开源后，会有一些用户仅仅是关注 JuiceFS 社区版，并不需要注册 juicefs.com 云服务。所以我们又为社区用户提供了一个邮件列表，使用的 Mailchimp，老牌邮件营销服务，但目前我们使用的功能比较浅。&lt;/span&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-darkmode-color-16326477709147=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16326477709147=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;text-align: left; color: rgb(63, 63, 63); line-height: 1.2; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 1.1em; font-weight: bold; margin: 2em 8px 0.75em 0px; padding-left: 8px; border-left: 3px solid rgb(14, 145, 85);&quot; class=&quot;js_darkmode__39&quot;&gt;&lt;span&gt;万能的自动化工具：Zapier&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;网址：https://zapier.com/&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;价格：$29.99/月，包含 750 个自动任务&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Zapier 是一个自动工作流工具，玩法很多。我用它来监控&lt;strong&gt; Twitter 和 HackerNews&lt;/strong&gt; 关键词，一有新内容就往 Slack 上发个消息，可以帮助了解 Voice of Customer。&lt;strong&gt;同事会使用 Zapier 将 Gmail 中的新邮件转发到 Slack&lt;/strong&gt;，很多邮件都是通知提醒，都汇总到 Slack 更方便查看，减少打开邮件的次数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;Zapier 的产品体验做的非常棒，值得每一位 PM 都好好体验一下。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;NO.1&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;最后，上账单！&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;strong/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;类型&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;App&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;账单价格&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;（$ USD）&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&quot;4&quot;&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;协作&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Slack&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;120&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;DocuSign&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;10&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Teamviewer&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;25&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Expensify&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;20&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&quot;5&quot;&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;工程&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;GitHub&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;150&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Travis CI&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;129&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;PagerDuty&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;34&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Solarwinds - Papertrail&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;10&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;SendGrid&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&quot;2&quot;&gt;&lt;br/&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;运营&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Intercom&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;158&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Stripe&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;保密&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;市场&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Zapier&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;30&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;销售&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Pipedrive&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;45&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;合计&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;$746 USD&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt; (不包含 Stripe 账单) &lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;* 表格中没有列出的工具都在免费使用。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;公司一个月的账单还不到一个人一周的工资，这些 SaaS 工具帮助我们每个人保持专注、高效。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;有朋友问我们为什么你们的工具箱中来自中国团队开发的 SaaS 工具很少？主要原因是 Juicedata 面向全球用户交付产品，在团队工作流程里选择国际流行的工具，更容易实现全球招聘、与不同国家地区的同事协作。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;同时，海外 SaaS 工具发展时间比较长，产品选择多，生态集成完善，很方便我们为不同的需求选择最顺手的工具，我们还能从工具中学习一些最佳实践。需要本地化的工具我们会选择最适合本地情况的，比如制作市场宣传海报的稿定设计，会跟着国内的设计趋势和日历提供丰富的模板。访问远程桌面的向日葵，线上会议和即时通讯的 Apps，都是非常本地化的。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;还想提一句，这些 SaaS 工具没有一个是销售或营销邮件、广告触达到我们的，都是我们自己从需求出发，通过搜索、看文章、朋友分享主动了解后注册体验，然后绑卡付费的，这些 SaaS 产品都是 PLG （Product Led Growth）产品，&lt;strong&gt;也让我们会思考这个过程，想实现产品的 增长，需要做到什么？用户体验会卡在哪里？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;好了，这篇万字长文终于码完了。 得益于这些软件，让我们一直保持专注和高效，如果这些工具的选择和使用经验对你有启发，请转发给更多的创业团队和开发者，也欢迎向我们推荐你的宝藏工具。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;span&gt;最后再打个广告&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，如果对分布式文件存储系统有任何疑问，欢迎扫码加入我们的社群一起讨论。 &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;153&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;148&quot; data-fileid=&quot;100002283&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/F446RY3QsZnicUqZp3Z8kiaYTeutdibxV6AzEciaNND2C30ZXAicFAW9pXQYFkWJT0bhuJj1ia8qW37XDCAob2RCTdYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;396&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们的合伙人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;兼社群助手&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;及本篇作者苏锐全天在线&lt;/span&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;关于Juicedata&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Juicedata，杭州果汁数据科技有限公司是一家企业级存储服务供应商，开发了云原生分布式文件系统 JuiceFS，致力于在大数据时代下，为客户打造安全、高性能、自主可控的存储基础设施及服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;JuiceFS 是一个开源项目，欢迎开发者加入我们。 &lt;span&gt;（github.com/juicedata/juicefs）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;p&gt;点击下方“阅读原文”访问我们的官网&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0e51b430f96a0699cd6400117b31456a</guid>
<title>Redis夺命52连问</title>
<link>https://toutiao.io/k/he3fzao</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是苏三，&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzkwODE5ODM0Ng==&amp;amp;action=getalbum&amp;amp;album_id=2041709347461709827&amp;amp;scene=173&amp;amp;from_msgid=2247491359&amp;amp;from_itemidx=1&amp;amp;count=3&amp;amp;nolastread=1#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;面渣逆袭系列&lt;/a&gt;继续，这节我们来搞定Redis——不会有人假期玩去了吧？不会吧？&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg4NjYyODc4OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/J4jTHmo8Xh6qM32ASOtVbXNoiaegrI26qLRw6r6FTI7dZw6TMT7vecvnjd1O8xSsM5MiajIuQZicxSC6KFK8TMpbg/0?wx_fmt=png&quot; data-nickname=&quot;java突击队&quot; data-alias=&quot;&quot; data-signature=&quot;技术经验分享&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;基础&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.说说什么是Redis?&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7284263959390863&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat60I3icga9By11qSyNsNe8IvaoJAhsvjP4uBaCFDOoXCiaNGffUAcYKKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot;/&gt;&lt;figcaption&gt;Redis图标&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis是一种基于键值对（key-value）的NoSQL数据库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比一般键值对数据库强大的地方，Redis中的value支持string（字符串）、hash（哈希）、 list（列表）、set（集合）、zset（有序集合）、Bitmaps（位图）、 HyperLogLog、GEO（地理信息定位）等多种数据结构，因此 Redis可以满足很多的应用场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且因为Redis会将所有数据都存放在内存中，所以它的读写性能非常出色。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不仅如此，Redis还可以将内存的数据利用快照和日志的形式保存到硬盘上，这样在发生类似断电或者机器故障的时候，内存中的数据不会“丢失”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了上述功能以外，Redis还提供了键过期、发布订阅、事务、流水线、Lua脚本等附加功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总之，Redis是一款强大的性能利器。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.Redis可以用来干什么？&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8396624472573839&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatrrBMiatBgLc3eGcIXxSwu5vc3l8LAgNDh68pd4OPiapR25nzaUVmvp6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;711&quot;/&gt;&lt;figcaption&gt;Redis&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缓存&lt;/p&gt;&lt;p&gt;这是Redis应用最广泛地方，基本所有的Web应用都会使用Redis作为缓存，来降低数据源压力，提高响应速度。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6151797603195739&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatV11TnNia9h4ktQNHNyhcpGlzicVj1p0XYib1EqFiaZMXtXxGwQnW77SWMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;751&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;计数器
Redis天然支持计数功能，而且计数性能非常好，可以用来记录浏览量、点赞量等等。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;排行榜
Redis提供了列表和有序集合数据结构，合理地使用这些数据结构可以很方便地构建各种排行榜系统。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;社交网络
赞/踩、粉丝、共同好友/喜好、推送、下拉刷新。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;消息队列
Redis提供了发布订阅功能和阻塞队列的功能，可以满足一般消息队列功能。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;分布式锁
分布式环境下，利用Redis实现分布式锁，也是Redis常见的应用。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis的应用一般会结合项目去问，以一个电商项目的用户服务为例：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Token存储：用户登录成功之后，使用Redis存储Token&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;登录失败次数计数：使用Redis计数，登录失败超过一定次数，锁定账号&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;地址缓存：对省市区数据的缓存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式锁：分布式环境下登录、注册等操作加分布式锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;……&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.Redis 有哪些数据结构？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9119804400977995&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatGE9iatwDjj6iavP6gcrD5XXNyrry9WExaUTKSeWbraodiaq3PcoNwFK7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;818&quot;/&gt;Redis有五种基本数据结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字符串最基础的数据结构。字符串类型的值实际可以是字符串（简单的字符串、复杂的字符串（例如JSON、XML））、数字 （整数、浮点数），甚至是二进制（图片、音频、视频），但是值最大不能超过512MB。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字符串主要有以下几个典型使用场景：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;hash&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哈希类型是指键值本身又是一个键值对结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哈希主要有以下典型应用场景：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;list&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列表（list）类型是用来存储多个有序的字符串。列表是一种比较灵活的数据结构，它可以充当栈和队列的角色&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列表主要有以下几种使用场景：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;set&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集合（set）类型也是用来保存多个的字符串元素，但和列表类型不一 样的是，集合中不允许有重复元素，并且集合中的元素是无序的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集合主要有如下使用场景：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;sorted set&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有序集合中的元素可以排序。但是它和列表使用索引下标作为排序依据不同的是，它给每个元素设置一个权重（score）作为排序的依据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有序集合主要应用场景：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.Redis为什么快呢？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis的速度⾮常的快，单机的Redis就可以⽀撑每秒十几万的并发，相对于MySQL来说，性能是MySQL的⼏⼗倍。速度快的原因主要有⼏点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;完全基于内存操作&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使⽤单线程，避免了线程切换和竞态产生的消耗&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基于⾮阻塞的IO多路复⽤机制&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;C语⾔实现，优化过的数据结构，基于⼏种基础的数据结构，redis做了⼤量的优化，性能极⾼&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.600297176820208&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iate5JX63hdYxPoS2Bjb0IdZ6sC9uJvyXOPphuCwicKPtMpVj3EGFbjKSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;673&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.能说一下I/O多路复用吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引用知乎上一个高赞的回答来解释什么是I/O多路复用。假设你是一个老师，让30个学生解答一道题目，然后检查学生做的是否正确，你有下面几个选择：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;第一种选择：按顺序逐个检查，先检查A，然后是B，之后是C、D。。。这中间如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理socket，根本不具有并发能力。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;第二种选择：你创建30个分身，每个分身检查一个学生的答案是否正确。这种类似于为每一个用户创建一个进程或者- 线程处理连接。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;第三种选择，你站在讲台上等，谁解答完谁举手。这时C、D举手，表示他们解答问题完毕，你下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又举手，然后去处理E和A。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一种就是阻塞IO模型，第三种就是I/O复用模型。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4407894736842106&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatjroOrgleGiajcJA9HBdYiayXu8C3paazf4E9tnaXKO9o90pcqVkFqdWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;760&quot;/&gt;&lt;figcaption&gt;多路复用模型&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Linux系统有三种方式实现IO多路复用：select、poll和epoll。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如epoll方式是将用户socket对应的fd注册进epoll，然后epoll帮你监听哪些socket上有消息到达，这样就避免了大量的无用操作。此时的socket应该采用非阻塞模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，整个过程只在进行select、poll、epoll这些调用的时候才会阻塞，收发客户消息是不会阻塞的，整个进程或者线程就被充分利用起来，这就是事件驱动，所谓的reactor模式。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. Redis为什么早期选择单线程？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方解释：https://redis.io/topics/faq&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3741648106904232&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat4MvZX6nFmahmj9ayY3tibBCkice6Jmu7E2Oz2k8LFzj6gnpcYKxZA0lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;898&quot;/&gt;官方FAQ表示，因为Redis是基于内存的操作，CPU成为Redis的瓶颈的情况很少见，Redis的瓶颈最有可能是内存的大小或者网络限制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要最大程度利用CPU，可以在一台机器上启动多个Redis实例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PS：网上有这样的回答，吐槽官方的解释有些敷衍，其实就是历史原因，开发者嫌多线程麻烦，后来这个CPU的利用问题就被抛给了使用者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时FAQ里还提到了， Redis 4.0 之后开始变成多线程，除了主线程外，它也有后台线程在处理一些较为缓慢的操作，例如清理脏数据、无用连接的释放、大 Key 的删除等等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7.Redis6.0使用多线程是怎么回事?&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis不是说用单线程的吗？怎么6.0成了多线程的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis6.0的多线程是用多线程来处理数据的&lt;strong&gt;读写和协议解析&lt;/strong&gt;，但是Redis&lt;strong&gt;执行命令&lt;/strong&gt;还是单线程的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5530216647662486&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatfXs2ibCve6tkIibiaGLCSKlrOUWGDuDkAdBvEyWEFMux4wwFDtXjPMyHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;877&quot;/&gt;这样做的⽬的是因为Redis的性能瓶颈在于⽹络IO⽽⾮CPU，使⽤多线程能提升IO读写的效率，从⽽整体提⾼Redis的性能。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;持久化&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8.Redis持久化⽅式有哪些？有什么区别？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis持久化⽅案分为RDB和AOF两种。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6568144499178982&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatC0JaRKGIZCJ5GaU7ds87F5XJiaGtbgCMwzZVtOv1ulowcH7j5BvHzkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RDB&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RDB持久化是把当前进程数据生成&lt;strong&gt;快照&lt;/strong&gt;保存到硬盘的过程，触发RDB持久化过程分为手动触发和自动触发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RDB⽂件是⼀个压缩的⼆进制⽂件，通过它可以还原某个时刻数据库的状态。由于RDB⽂件是保存在硬盘上的，所以即使Redis崩溃或者退出，只要RDB⽂件存在，就可以⽤它来恢复还原数据库的状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;手动触发分别对应save和bgsave命令:&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7001934235976789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatdugl54WNVlDxfuibk0YBalxl9UpytvdtpiadkazRUHFx8ud95TuKBGzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;517&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;save命令：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;bgsave命令：Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下场景会自动触发RDB持久化：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;使用save相关配置，如“save m n”。表示m秒内数据集存在n次修改时，自动触发bgsave。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;执行debug reload命令重新加载Redis时，也会自动触发save操作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;AOF&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AOF（append only file）持久化：以独立日志的方式记录每次写命令， 重启时再重新执行AOF文件中的命令达到恢复数据的目的。AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AOF的工作流程操作：命令写入 （append）、文件同步（sync）、文件重写（rewrite）、重启加载 （load）&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5910878112712975&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatbtvG9zPSELQztyKaKmtWhSico3c1wDgdP8d18IPjcpOHMyAcRUVoG5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;流程如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）所有的写入命令会追加到aof_buf（缓冲区）中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）AOF缓冲区根据对应的策略向硬盘做同步操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）随着AOF文件越来越大，需要定期对AOF文件进行重写，达到压缩 的目的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4）当Redis服务器重启时，可以加载AOF文件进行数据恢复。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9.RDB 和 AOF 各自有什么优缺点？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RDB | 优点&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;只有一个紧凑的二进制文件 &lt;code&gt;dump.rdb&lt;/code&gt;，非常适合备份、全量复制的场景。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;容灾性好&lt;/strong&gt;，可以把RDB文件拷贝道远程机器或者文件系统张，用于容灾恢复。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;恢复速度快&lt;/strong&gt;，RDB恢复数据的速度远远快于AOF的方式&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RDB | 缺点&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;实时性低&lt;/strong&gt;，RDB 是间隔一段时间进行持久化，没法做到实时持久化/秒级持久化。如果在这一间隔事件发生故障，数据会丢失。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;存在兼容问题&lt;/strong&gt;，Redis演进过程存在多个格式的RDB版本，存在老版本Redis无法兼容新版本RDB的问题。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;AOF | 优点&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;实时性好&lt;/strong&gt;，aof 持久化可以配置 &lt;code&gt;appendfsync&lt;/code&gt; 属性，有 &lt;code&gt;always&lt;/code&gt;，每进行一次命令操作就记录到 aof 文件中一次。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;AOF | 缺点&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;AOF 文件比 RDB &lt;strong&gt;文件大&lt;/strong&gt;，且 &lt;strong&gt;恢复速度慢&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据集大&lt;/strong&gt; 的时候，比 RDB &lt;strong&gt;启动效率低&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10.RDB和AOF如何选择？&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一般来说， 如果想达到足以媲美数据库的 &lt;strong&gt;数据安全性&lt;/strong&gt;，应该 &lt;strong&gt;同时使用两种持久化功能&lt;/strong&gt;。在这种情况下，当 Redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 &lt;strong&gt;可以接受数分钟以内的数据丢失&lt;/strong&gt;，那么可以 &lt;strong&gt;只使用 RDB 持久化&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有很多用户都只使用 AOF 持久化，但并不推荐这种方式，因为定时生成 RDB 快照（snapshot）非常便于进行数据备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快，除此之外，使用 RDB 还可以避免 AOF 程序的 bug。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果只需要数据在服务器运行的时候存在，也可以不使用任何持久化方式。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11.Redis的数据恢复？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当Redis发生了故障，可以从RDB或者AOF中恢复数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;恢复的过程也很简单，把RDB或者AOF文件拷贝到Redis的数据目录下，如果使用AOF恢复，配置文件开启AOF，然后启动redis-server即可。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6632124352331606&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat249sYDPh3TX3FnXIjo8kH7Tk14uEzpR85GQibRGqYPtuW9xqz9vy0FA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;772&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Redis&lt;/strong&gt; 启动时加载数据的流程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;AOF持久化开启且存在AOF文件时，优先加载AOF文件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AOF关闭或者AOF文件不存在时，加载RDB文件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加载AOF/RDB文件成功后，Redis启动成功。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AOF/RDB文件存在错误时，Redis启动失败并打印错误信息。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12.Redis 4.0 的混合持久化了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重启 Redis 时，我们很少使用 &lt;code&gt;RDB&lt;/code&gt; 来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 &lt;code&gt;RDB&lt;/code&gt; 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Redis 4.0&lt;/strong&gt; 为了解决这个问题，带来了一个新的持久化选项——&lt;strong&gt;混合持久化&lt;/strong&gt;。将 &lt;code&gt;rdb&lt;/code&gt; 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是 &lt;strong&gt;自持久化开始到持久化结束&lt;/strong&gt; 的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4924698795180723&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatvIxGkkHicQxEInSIYDYnr4icJbmO1Iw7ibf1s7KuMJwtia6eicHoicKGbsibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;664&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是在 Redis 重启的时候，可以先加载 &lt;code&gt;rdb&lt;/code&gt; 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，重启效率因此大幅得到提升。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;高可用&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis保证高可用主要有三种方式：主从、哨兵、集群。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;13.主从复制了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45887961859356374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatLD7fUVicic3VU2RSul8o5FtwMHysK4Da9wOPicD1XOicy0IcsVgSgjjE0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;839&quot;/&gt;&lt;figcaption&gt;Redis主从复制简图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;主从复制&lt;/strong&gt;，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为 **主节点(master)**，后者称为 **从节点(slave)**。且数据的复制是 &lt;strong&gt;单向&lt;/strong&gt; 的，只能由主节点到从节点。Redis 主从复制支持 &lt;strong&gt;主从同步&lt;/strong&gt; 和 &lt;strong&gt;从从同步&lt;/strong&gt; 两种，后者是 Redis 后续版本新增的功能，以减轻主节点的同步负担。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;主从复制主要的作用?&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据冗余：&lt;/strong&gt; 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;故障恢复：&lt;/strong&gt; 当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复 *(实际上是一种服务的冗余)*。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;负载均衡：&lt;/strong&gt; 在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 &lt;em&gt;（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点）&lt;/em&gt;，分担服务器负载。尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;高可用基石：&lt;/strong&gt; 除了上述作用以外，主从复制还是哨兵和集群能够实施的 &lt;strong&gt;基础&lt;/strong&gt;，因此说主从复制是 Redis 高可用的基础。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;14.Redis主从有几种常见的拓扑结构？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis的复制拓扑结构可以支持单层或多层复制关系，根据拓扑复杂性可以分为以下三种：一主一从、一主多从、树状主从结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1.一主一从结构&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一主一从结构是最简单的复制拓扑结构，用于主节点出现宕机时从节点提供故障转移支持。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2559055118110236&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatHxPZOg5XsibcVUgTvFpGMpmkspmDU5J6YSxzwX1kzZdUp1T2l1Rj7Kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;254&quot;/&gt;2.一主多从结构&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一主多从结构（又称为星形拓扑结构）使得应用端可以利用多个从节点实现读写分离（见图6-5）。对于读占比较大的场景，可以把读命令发送到从节点来分担主节点压力。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5201938610662359&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatD0icwxuse1PEIC5Cp5j05rnOTowEbpHk1ZVCgkLnUAzRpn5ICxg7QTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;619&quot;/&gt;3.树状主从结构&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;树状主从结构（又称为树状拓扑结构）使得从节点不但可以复制主节点数据，同时可以作为其他从节点的主节点继续向下层复制。通过引入复制中间层，可以有效降低主节点负载和需要传送给从节点的数据量。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8123861566484517&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatxJyAKPUIsZ16zUev1iaA7p7ErWl6ic8w8r3mc1Is4JhNSFpzTeDTurZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;549&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;15.Redis的主从复制原理了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis主从复制的工作流程大概可以分为如下几步：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1471103327495622&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatdLfBBpjkqBBvvybykECPRnuLtWnicXFYicpibHokIYKQqnwlbh08oiaojg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;571&quot;/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;保存主节点（master）信息
这一步只是保存主节点信息，保存主节点的ip和port。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主从建立连接
从节点（slave）发现新的主节点后，会尝试和主节点建立网络连接。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送ping命令
连接建立成功后从节点发送ping请求进行首次通信，主要是检测主从之间网络套接字是否可用、主节点当前是否可接受处理命令。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;权限验证
如果主节点要求密码验证，从节点必须正确的密码才能通过验证。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同步数据集
主从复制连接正常通信后，主节点会把持有的数据全部发送给从节点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;命令持续复制
接下来主节点会持续地把写命令发送给从节点，保证主从数据一致性。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;16.说说主从数据同步的方式？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis在2.8及以上版本使用psync命令完成主从数据同步，同步过程分为：全量复制和部分复制。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49500998003992014&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatLJzBeK53bsgiag8Aian4YnRz7tkXERjJvxicUSpCeflo2yQVujKW8t7tw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;501&quot;/&gt;&lt;figcaption&gt;主从数据同步方式&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;全量复制&lt;/strong&gt;一般用于初次复制场景，Redis早期支持的复制功能只有全量复制，它会把主节点全部数据一次性发送给从节点，当数据量较大时，会对主从节点和网络造成很大的开销。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全量复制的完整运行流程如下：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.023407022106632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatwNQCoum33fibkje6YGrTSRz3oxF3locibbviaKOy4ragpfgAJOdArYEGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;769&quot;/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;发送psync命令进行数据同步，由于是第一次进行复制，从节点没有复制偏移量和主节点的运行ID，所以发送psync-1。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主节点根据psync-1解析出当前为全量复制，回复+FULLRESYNC响应。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从节点接收主节点的响应数据保存运行ID和偏移量offset&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主节点执行bgsave保存RDB文件到本地&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主节点发送RDB文件给从节点，从节点把接收的RDB文件保存在本地并直接作为从节点的数据文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于从节点开始接收RDB快照到接收完成期间，主节点仍然响应读写命令，因此主节点会把这期间写命令数据保存在复制客户端缓冲区内，当从节点加载完RDB文件后，主节点再把缓冲区内的数据发送给从节点，保证主从之间数据一致性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从节点接收完主节点传送来的全部数据后会清空自身旧数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从节点清空数据后开始加载RDB文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从节点成功加载完RDB后，如果当前节点开启了AOF持久化功能， 它会立刻做bgrewriteaof操作，为了保证全量复制后AOF持久化文件立刻可用。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;部分复制&lt;/strong&gt;部分复制主要是Redis针对全量复制的过高开销做出的一种优化措施， 使用psync{runId}{offset}命令实现。当从节点（slave）正在复制主节点 （master）时，如果出现网络闪断或者命令丢失等异常情况时，从节点会向 主节点要求补发丢失的命令数据，如果主节点的复制积压缓冲区内存在这部分数据则直接发送给从节点，这样就可以保持主从节点复制的一致性。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5235294117647059&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatdWayjn1GFXQHbY2y9iaBPBnTvicE2ibbIPeBwm8lZE0YG4pbvldFqvFEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当主从节点之间网络出现中断时，如果超过repl-timeout时间，主节点会认为从节点故障并中断复制连接&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内部存在的复制积压缓冲区，依然可以保存最近一段时间的写命令数据，默认最大缓存1MB。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当主从节点网络恢复后，从节点会再次连上主节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行ID。因此会把它们当作psync参数发送给主节点，要求进行部分复制操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主节点接到psync命令后首先核对参数runId是否与自身一致，如果一 致，说明之前复制的是当前主节点；之后根据参数offset在自身复制积压缓冲区查找，如果偏移量之后的数据存在缓冲区中，则对从节点发送+CONTINUE响应，表示可以进行部分复制。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;17.主从复制存在哪些问题呢？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主从复制虽好，但也存在一些问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一旦主节点出现故障，需要手动将一个从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令其他从节点去复制新的主节点，整个过程都需要人工干预。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主节点的写能力受到单机的限制。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主节点的存储能力受到单机的限制。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个问题是Redis的高可用问题，第二、三个问题属于Redis的分布式问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;18.Redis Sentinel（哨兵）了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主从复制存在一个问题，没法完成自动故障转移。所以我们需要一个方案来完成自动故障转移，它就是Redis Sentinel（哨兵）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5148648648648648&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatDhyqn6WPRQ3Ta4icUibKKFGxp3m0sAAaOvWwH34cBemGnaJ1LgRcFXgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;740&quot;/&gt;&lt;figcaption&gt;Redis Sentinel&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis Sentinel ，它由两部分组成，哨兵节点和数据节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;哨兵节点：&lt;/strong&gt; 哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的 Redis 节点，不存储数据，对数据节点进行监控。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据节点：&lt;/strong&gt; 主节点和从节点都是数据节点；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在复制的基础上，哨兵实现了 &lt;strong&gt;自动化的故障恢复&lt;/strong&gt; 功能，下面是官方对于哨兵功能的描述：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;监控（Monitoring）：&lt;/strong&gt; 哨兵会不断地检查主节点和从节点是否运作正常。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;自动故障转移（Automatic failover）：&lt;/strong&gt; 当 &lt;strong&gt;主节点&lt;/strong&gt; 不能正常工作时，哨兵会开始 &lt;strong&gt;自动故障转移操作&lt;/strong&gt;，它会将失效主节点的其中一个 &lt;strong&gt;从节点升级为新的主节点&lt;/strong&gt;，并让其他从节点改为复制新的主节点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;配置提供者（Configuration provider）：&lt;/strong&gt; 客户端在初始化时，通过连接哨兵来获得当前 Redis 服务的主节点地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;通知（Notification）：&lt;/strong&gt; 哨兵可以将故障转移的结果发送给客户端。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移。而配置提供者和通知功能，则需要在与客户端的交互中才能体现。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;19.Redis Sentinel（哨兵）实现原理知道吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哨兵模式是通过哨兵节点完成对数据节点的监控、下线、故障转移。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1650390625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatc1AjIvbQrbSATQGFTMvpYne2eKO6k3bv9P2iapvbqkFoiaKo5qH0ufoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;定时监控&lt;/strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34628378378378377&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatHibtYGcHECOScJNUQhzEHZnvqhJo4ajicL0OGFKUiciaQA0lyEWPQzBNKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;592&quot;/&gt;Redis Sentinel通过三个定时监控任务完成对各个节点发现和监控：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;每隔10秒，每个Sentinel节点会向主节点和从节点发送info命令获取最新的拓扑结构&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每隔2秒，每个Sentinel节点会向Redis数据节点的__sentinel__：hello 频道上发送该Sentinel节点对于主节点的判断以及当前Sentinel节点的信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每隔1秒，每个Sentinel节点会向主节点、从节点、其余Sentinel节点发送一条ping命令做一次心跳检测，来确认这些节点当前是否可达&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;主观下线和客观下线&lt;/strong&gt;主观下线就是哨兵节点认为某个节点有问题，客观下线就是超过一定数量的哨兵节点认为主节点有问题。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.904424778761062&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatneYKyvY5q9tTMfaF1uUlLibgcqkEpY3tYWpCJhH282l5V77gLMrtRcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;565&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;主观下线
每个Sentinel节点会每隔1秒对主节点、从节点、其他Sentinel节点发送ping命令做心跳检测，当这些节点超过 down-after-milliseconds没有进行有效回复，Sentinel节点就会对该节点做失败判定，这个行为叫做主观下线。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;客观下线
当Sentinel主观下线的节点是主节点时，该Sentinel节点会通过sentinel is- master-down-by-addr命令向其他Sentinel节点询问对主节点的判断，当超过 &amp;lt;quorum&amp;gt;个数，Sentinel节点认为主节点确实有问题，这时该Sentinel节点会做出客观下线的决定&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;领导者Sentinel节点选举&lt;/strong&gt;Sentinel节点之间会做一个领导者选举的工作，选出一个Sentinel节点作为领导者进行故障转移的工作。Redis使用了Raft算法实现领导者选举。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;故障转移&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;领导者选举出的Sentinel节点负责故障转移，过程如下：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1755813953488372&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatgaXAicWYwiaVdF0ljoRyDtcsAVY2T6ejosguCF7doMfMJKEicpib4PPVSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;860&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在从节点列表中选出一个节点作为新的主节点，这一步是相对复杂一些的一步&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Sentinel领导者节点会对第一步选出来的从节点执行slaveof no one命令让其成为主节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Sentinel领导者节点会向剩余的从节点发送命令，让它们成为新主节点的从节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Sentinel节点集合会将原来的主节点更新为从节点，并保持着对其关注，当其恢复后命令它去复制新的主节点&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;20.领导者Sentinel节点选举了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis使用了Raft算法实 现领导者选举，大致流程如下：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47058823529411764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iathcSqmUaclc8aBLwG8ibolibyOHTRPJjE4DViaBeyxcFgr4rKU542fSdPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;每个在线的Sentinel节点都有资格成为领导者，当它确认主节点主观 下线时候，会向其他Sentinel节点发送sentinel is-master-down-by-addr命令， 要求将自己设置为领导者。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;收到命令的Sentinel节点，如果没有同意过其他Sentinel节点的sentinel is-master-down-by-addr命令，将同意该请求，否则拒绝。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果该Sentinel节点发现自己的票数已经大于等于max（quorum， num（sentinels）/2+1），那么它将成为领导者。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果此过程没有选举出领导者，将进入下一次选举。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;21.新的主节点是怎样被挑选出来的？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选出新的主节点，大概分为这么几步：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1008064516129032&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatW3IOTg4KqhlVtXTG0a0XH1cgLpURicx15S6zm3akfMmCNk8NE3edf6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;496&quot;/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;过滤：“不健康”（主观下线、断线）、5秒内没有回复过Sentinel节 点ping响应、与主节点失联超过down-after-milliseconds*10秒。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择slave-priority（从节点优先级）最高的从节点列表，如果存在则返回，不存在则继续。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择复制偏移量最大的从节点（复制的最完整），如果存在则返 回，不存在则继续。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择runid最小的从节点。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;22.Redis 集群了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面说到了主从存在高可用和分布式的问题，哨兵解决了高可用的问题，而集群就是终极方案，一举解决高可用和分布式问题。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5956006768189509&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatEIOYok9At3ibmfjUiccacbWp2uX8GynibWHElDaRWAUUIib9KYUibrMx8iag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;591&quot;/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;数据分区：&lt;/strong&gt; 数据分区 &lt;em&gt;(或称数据分片)&lt;/em&gt; 是集群最核心的功能。集群将数据分散到多个节点，一方面 突破了 Redis 单机内存大小的限制，&lt;strong&gt;存储容量大大增加&lt;/strong&gt;；&lt;strong&gt;另一方面&lt;/strong&gt; 每个主节点都可以对外提供读服务和写服务，&lt;strong&gt;大大提高了集群的响应能力&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;高可用：&lt;/strong&gt; 集群支持主从复制和主节点的 &lt;strong&gt;自动故障转移&lt;/strong&gt; &lt;em&gt;（与哨兵类似）&lt;/em&gt;，当任一节点发生故障时，集群仍然可以对外提供服务。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;23.集群中数据如何分区？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式的存储中，要把数据集按照分区规则映射到多个节点，常见的数据分区规则三种：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4953271028037383&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatAPCyCVibX6qL4M7L2eszC61Ug0sBdiaa2qfiasCWcfNNXynPib2iayaCDCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;642&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;方案一：节点取余分区&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;节点取余分区，非常好理解，使用特定的数据，比如Redis的键，或者用户ID之类，对响应的hash值取余：hash（key）%N，来确定数据映射到哪一个节点上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过该方案最大的问题是，当节点数量变化时，如扩容或收缩节点，数据节点映射关 系需要重新计算，会导致数据的重新迁移。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37553956834532376&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatdHXa7W0hGVSuorImJZEJB3vz5CZmpiaTflRWnxEG1ta2gLutvIcibK3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;695&quot;/&gt;&lt;figcaption&gt;节点取余分区&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;方案二：一致性哈希分区&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将整个 Hash 值空间组织成一个虚拟的圆环，然后将缓存节点的 IP 地址或者主机名做 Hash 取值后，放置在这个圆环上。当我们需要确定某一个 Key 需 要存取到哪个节点上的时候，先对这个 Key 做同样的 Hash 取值，确定在环上的位置，然后按照顺时针方向在环上“行走”，遇到的第一个缓存节点就是要访问的节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如说下面 这张图里面，Key 1 和 Key 2 会落入到 Node 1 中，Key 3、Key 4 会落入到 Node 2 中，Key 5 落入到 Node 3 中，Key 6 落入到 Node 4 中。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9488054607508533&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat8F63Bq2pNhC5atuWHBImfyrv6zt1Pr0AE0miaTPyvyr6qsJkoUeJGpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;586&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式相比节点取余最大的好处在于加入和删除节点只影响哈希环中 相邻的节点，对其他节点无影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但它还是存在问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;缓存节点在圆环上分布不平均，会造成部分缓存节点的压力较大&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当某个节点故障时，这个节点所要承担的所有访问都会被顺移到另一个节点上，会对后面这个节点造成力。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;方案三：虚拟槽分区&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方案 一致性哈希分区的基础上，引入了 &lt;strong&gt;虚拟节点&lt;/strong&gt; 的概念。Redis 集群使用的便是该方案，其中的虚拟节点称为 &lt;strong&gt;槽（slot）&lt;/strong&gt;。槽是介于数据和实际节点之间的虚拟概念，每个实际节点包含一定数量的槽，每个槽包含哈希值在一定范围内的数据。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4842639593908629&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatPjVvgOy72Jq4psUlbBvIUTxWicWaY0R7Rvab0mRDUBefvAK9rd1W8sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;985&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在使用了槽的一致性哈希分区中，槽是数据管理和迁移的基本单位。槽解耦了数据和实际节点 之间的关系，增加或删除节点对系统的影响很小。仍以上图为例，系统中有 &lt;code&gt;4&lt;/code&gt; 个实际节点，假设为其分配 &lt;code&gt;16&lt;/code&gt; 个槽(0-15)；&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;槽 0-3 位于 node1；4-7 位于 node2；以此类推....&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果此时删除 &lt;code&gt;node2&lt;/code&gt;，只需要将槽 4-7 重新分配即可，例如槽 4-5 分配给 &lt;code&gt;node1&lt;/code&gt;，槽 6 分配给 &lt;code&gt;node3&lt;/code&gt;，槽 7 分配给 &lt;code&gt;node4&lt;/code&gt;，数据在其他节点的分布仍然较为均衡。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;24.能说说Redis集群的原理吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis集群通过数据分区来实现数据的分布式存储，通过自动故障转移实现高可用。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;集群创建&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据分区是在集群创建的时候完成的。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3050847457627119&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatkzChL0MNR008L5aIfiaE3oTjZPcjvOcuFKvlfleOQWtD27K6mZDddrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;649&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;设置节点&lt;/strong&gt;Redis集群一般由多个节点组成，节点数量至少为6个才能保证组成完整高可用的集群。每个节点需要开启配置cluster-enabled yes，让Redis运行在集群模式下。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4022140221402214&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatc79fO31FZYNlhoxBXZ237XF31ASCekjum1tjpsTA6DRdyZbXYWWtGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;813&quot;/&gt;&lt;strong&gt;节点握手&lt;/strong&gt;节点握手是指一批运行在集群模式下的节点通过Gossip协议彼此通信， 达到感知对方的过程。节点握手是集群彼此通信的第一步，由客户端发起命 令：cluster meet{ip}{port}。完成节点握手之后，一个个的Redis节点就组成了一个多节点的集群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;分配槽（slot）&lt;/strong&gt;Redis集群把所有的数据映射到16384个槽中。每个节点对应若干个槽，只有当节点分配了槽，才能响应和这些槽关联的键命令。通过 cluster addslots命令为节点分配槽。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatylJfacMu4zpFK7zcxrygmSIyrGZaPmiaICMGQDib0ovspfuiaa3w9ku0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;756&quot;/&gt;&lt;figcaption&gt;分配槽&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;故障转移&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis集群的故障转移和哨兵的故障转移类似，但是Redis集群中所有的节点都要承担状态维护的任务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;故障发现&lt;/strong&gt;Redis集群内节点通过ping/pong消息实现节点通信，集群中每个节点都会定期向其他节点发送ping消息，接收节点回复pong 消息作为响应。如果在cluster-node-timeout时间内通信一直失败，则发送节 点会认为接收节点存在故障，把接收节点标记为主观下线（pfail）状态。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45824847250509165&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatxkibaNUVTkZz7hs6icfTMdLQzpFhszOZiciaT1Fic1ickbNgmWRN9cEwJtZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;491&quot;/&gt;当某个节点判断另一个节点主观下线后，相应的节点状态会跟随消息在集群内传播。通过Gossip消息传播，集群内节点不断收集到故障节点的下线报告。当 半数以上持有槽的主节点都标记某个节点是主观下线时。触发客观下线流程。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6456494325346784&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatK447hYI8W5ugzWowQ6TRZtsuEHh4m1jQ0sxq2VZz1kl4jTmnictwuHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;793&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;故障恢复&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故障节点变为客观下线后，如果下线节点是持有槽的主节点则需要在它 的从节点中选出一个替换它，从而保证集群的高可用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.7962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatJ6VpUzQ5Uz9hq24BsnqseiataQ8x6ToCk41QnqrMbAw8iahYD3JUQic9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;270&quot;/&gt;&lt;figcaption&gt;故障恢复流程&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;资格检查
每个从节点都要检查最后与主节点断线时间，判断是否有资格替换故障 的主节点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;准备选举时间
当从节点符合故障转移资格后，更新触发故障选举的时间，只有到达该 时间后才能执行后续流程。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发起选举
当从节点定时任务检测到达故障选举时间（failover_auth_time）到达后，发起选举流程。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选举投票
持有槽的主节点处理故障选举消息。投票过程其实是一个领导者选举的过程，如集群内有N个持有槽的主节 点代表有N张选票。由于在每个配置纪元内持有槽的主节点只能投票给一个 从节点，因此只能有一个从节点获得N/2+1的选票，保证能够找出唯一的从节点。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5134788189987163&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatbeOyjLjqq4eBSyBibGr3RCC1UHre5ianicxW1PmL9PtGibuNFcicGUfyJ8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;779&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;替换主节点
当从节点收集到足够的选票之后，触发替换主节点操作。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;部署Redis集群至少需要几个物理节点？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在投票选举的环节，故障主节点也算在投票数内，假设集群内节点规模是3主3从，其中有2 个主节点部署在一台机器上，当这台机器宕机时，由于从节点无法收集到 3/2+1个主节点选票将导致故障转移失败。这个问题也适用于故障发现环节。因此部署集群时所有主节点最少需要部署在3台物理机上才能避免单点问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;25.说说集群的伸缩？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis集群提供了灵活的节点扩容和收缩方案，可以在不影响集群对外服务的情况下，为集群添加节点进行扩容也可以下线部分节点进行缩容。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8639455782312925&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat3uKicss6vvWDaKlvdl5r9icVlIX1tDFlr1SxL5AXqr2iblFkkstP4dAyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;588&quot;/&gt;其实，集群扩容和缩容的关键点，就在于槽和节点的对应关系，扩容和缩容就是将一部分&lt;code&gt;槽&lt;/code&gt;和&lt;code&gt;数据&lt;/code&gt;迁移给新节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如下面一个集群，每个节点对应若干个槽，每个槽对应一定的数据，如果希望加入1个节点希望实现集群扩容时，需要通过相关命令把一部分槽和内容迁移给新节点。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6032745591939547&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iaticNQ11jaT3GcEoJbDNicRu9Uy981Xd1kronU0KyAYticnRTzheClBUOwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;794&quot;/&gt;缩容也是类似，先把槽和数据迁移到其它节点，再把对应的节点下线。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;缓存设计&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;26.什么是缓存击穿、缓存穿透、缓存雪崩？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PS:这是多年黄历的老八股了，一定要理解清楚。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缓存击穿&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个并发访问量比较大的key在某个时间过期，导致所有的请求直接打在DB上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3797814207650274&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatWKoiaoOQySeo234H3K5Lv4MEjQicneHdgLnxNXQUj6c1dafTL2Jy7FTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;366&quot;/&gt;解决⽅案：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;加锁更新，⽐如请求查询A，发现缓存中没有，对A这个key加锁，同时去数据库查询数据，写⼊缓存，再返回给⽤户，这样后⾯的请求就可以从缓存中拿到数据了。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3012658227848102&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatfqMRIyrXG3pmI8ujBSWC1mHpHBcbAemyNribPvMYHibLHNWvhwaGiaU0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;395&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;将过期时间组合写在value中，通过异步的⽅式不断的刷新过期时间，防⽌此类现象。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缓存穿透&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存穿透指的查询缓存和数据库中都不存在的数据，这样每次请求直接打到数据库，就好像缓存不存在一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4027777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatAXn9jlfeI37cicYOw42CPT7KBHv7RpseMDngk7USFnEAwHBEzibE1LVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;360&quot;/&gt;缓存穿透将导致不存在的数据每次请求都要到存储层去查询，失去了缓存保护后端存储的意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存穿透可能会使后端存储负载加大，如果发现大量存储层空命中，可能就是出现了缓存穿透问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存穿透可能有两种原因：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;自身业务代码问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;恶意攻击，爬虫造成空命中&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它主要有两种解决办法：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一种方式是在数据库不命中之后，把一个空对象或者默认值保存到缓存，之后再访问这个数据，就会从缓存中获取，这样就保护了数据库。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3631436314363143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatcGrZyPJRB8x672PjPvfOkmbgm1QF8Rc0weGxScd1pmB9XnPoXuRjAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;369&quot;/&gt;&lt;figcaption&gt;缓存空值/默认值&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存空值有两大问题：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间（如果是攻击，问题更严重），比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和存储层数据的不一致。这时候可以利用消息队列或者其它异步方式清理缓存中的空对象。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;布隆过滤器&lt;/strong&gt;除了缓存空对象，我们还可以在存储和缓存之前，加一个布隆过滤器，做一层过滤。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;布隆过滤器里会保存数据是否存在，如果判断数据不不能再，就不会访问存储。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.263157894736842&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatN5e8CnCW7ZiahxJdfkYQH0dgFxHYOGT9haBen1jRpsAB5mM4nuGIzvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;399&quot;/&gt;两种解决方案的对比：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3807829181494662&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatBgtaKbepG49tWUZR0HuzwP1HRzGlz5H6RIQn5gHMbbXn1kBS3z3opQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;843&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缓存雪崩&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;某⼀时刻发⽣⼤规模的缓存失效的情况，例如缓存服务宕机、大量key在同一时间过期，这样的后果就是⼤量的请求进来直接打到DB上，可能导致整个系统的崩溃，称为雪崩。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6021765417170496&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatIAzIRQic3bqbkGPDF3xFOQ2WU9rp1rLicSA8f1QzLb4hLCPF3ap1fTjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;827&quot;/&gt;缓存雪崩是三大缓存问题里最严重的一种，我们来看看怎么预防和处理。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;集群部署：通过集群来提升缓存的可用性，可以利用Redis本身的Redis Cluster或者第三方集群方案如Codis等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多级缓存：设置多级缓存，第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;均匀过期：为了避免大量的缓存在同一时间过期，可以把不同的 key 过期时间随机生成，避免过期时间太过集中。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;热点数据永不过期。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;服务熔断：当缓存服务器宕机或超时响应时，为了防止整个系统出现雪崩，暂时停止业务服务访问缓存系统。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务降级：当出现大量缓存失效，而且处在高并发高负荷的情况下，在业务系统内部暂时舍弃对一些非核心的接口和数据的请求，而直接返回一个提前准备好的 fallback（退路）错误处理信息。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;27.能说说布隆过滤器吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;布隆过滤器，它是一个连续的数据结构，每个存储位存储都是一个&lt;code&gt;bit&lt;/code&gt;，即&lt;code&gt;0&lt;/code&gt;或者&lt;code&gt;1&lt;/code&gt;, 来标识数据是否存在。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;存储数据的时时候，使用K个不同的哈希函数将这个变量映射为bit列表的的K个点，把它们置为1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2522202486678508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatz5MOSAkILiafhFxSQbzcM7p2mj8Ozib2wSGHcblEuoH6GkCbQPGLnDDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1126&quot;/&gt;我们判断缓存key是否存在，同样，K个哈希函数，映射到bit列表上的K个点，判断是不是1：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果全不是1，那么key不存在；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果都是1，也只是表示key可能存在。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;布隆过滤器也有一些缺点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;它在判断元素是否在集合中时是有一定错误几率，因为哈希算法有一定的碰撞的概率。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不支持删除元素。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;28.如何保证缓存和数据库数据的⼀致性？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据CAP理论，在保证可用性和分区容错性的前提下，无法保证一致性，所以缓存和数据库的绝对一致是不可能实现的，只能尽可能保存缓存和数据库的最终一致性。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;选择合适的缓存更新策略&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1. 删除缓存而不是更新缓存&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一个线程对缓存的key进行写操作的时候，如果其它线程进来读数据库的时候，读到的就是脏数据，产生了数据不一致问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比较而言，删除缓存的速度比更新缓存的速度快很多，所用时间相对也少很多，读脏数据的概率也小很多。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4945736434108527&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatVq2vLguBpsNTgqM8icBQl3Wm8Jzp5OpFgDvB8xo0B4g7LDFVJgjkVvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;645&quot;/&gt;&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;先更数据，后删缓存&lt;/strong&gt;先更数据库还是先删缓存？这是一个问题。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更新数据，耗时可能在删除缓存的百倍以上。在缓存中不存在对应的key，数据库又没有完成更新的时候，如果有线程进来读取数据，并写入到缓存，那么在更新成功之后，这个key就是一个脏数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;毫无疑问，先删缓存，再更数据库，缓存中key不存在的时间的时间更长，有更大的概率会产生脏数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5501379944802208&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatUn4SAD0PBGZWWOAibr7DyIic5qaU7CLV5mVE8EQo2QOKj98QlHicCrrCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1087&quot;/&gt;目前最流行的缓存读写策略cache-aside-pattern就是采用先更数据库，再删缓存的方式。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缓存不一致处理&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不是并发特别高，对缓存依赖性很强，其实一定程序的不一致是可以接受的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是如果对一致性要求比较高，那就得想办法保证缓存和数据库中数据一致。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存和数据库数据不一致常见的两种原因：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6151515151515151&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat6hXOfsldfK64ZpSOglmlA1Px5zUR1QVwEAIeicKfUQIWQwmibt3rHTdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;660&quot;/&gt;&lt;figcaption&gt;缓存一致性&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;消息队列保证key被删除&lt;/strong&gt;可以引入消息队列，把要删除的key或者删除失败的key丢尽消息队列，利用消息队列的重试机制，重试删除对应的key。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4825511432009627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatoj63OspwzlmDafTYkKpqILjXrgXmWb1noaoTkmTABNGibpMnUFUCT8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;这种方案看起来不错，缺点是对业务代码有一定的侵入性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;数据库订阅+消息队列保证key被删除&lt;/strong&gt;可以用一个服务（比如阿里的 canal）去监听数据库的binlog，获取需要操作的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后用一个公共的服务获取订阅程序传来的信息，进行缓存删除操作。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6075949367088608&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatwDibUoWsEiaXLBRLsliaPsRmIsibNQbjEiaIQibgo3xtGVOH9DEm2F1PxtibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;948&quot;/&gt;这种方式降低了对业务的侵入，但其实整个系统的复杂度是提升的，适合基建完善的大厂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;延时双删防止脏数据&lt;/strong&gt;还有一种情况，是在缓存不存在的时候，写入了脏数据，这种情况在先删缓存，再更数据库的缓存更新策略下发生的比较多，解决方案是延时双删。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单说，就是在第一次删除缓存之后，过了一段时间之后，再次删除缓存。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3425742574257427&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat3DUJMqWzHibkd1Q06Wmje3FY2lbkRmDH6thJLiaxyyR2oQtltZOBefvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;505&quot;/&gt;&lt;figcaption&gt;延时双删&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式的延时时间设置需要仔细考量和测试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;设置缓存过期时间兜底&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个朴素但是有用的办法，给缓存设置一个合理的过期时间，即使发生了缓存数据不一致的问题，它也不会永远不一致下去，缓存过期的时候，自然又会恢复一致。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;29.如何保证本地缓存和分布式缓存的一致？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PS:这道题面试很少问，但实际工作中很常见。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在日常的开发中，我们常常采用两级缓存：本地缓存+分布式缓存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓本地缓存，就是对应服务器的内存缓存，比如Caffeine，分布式缓存基本就是采用Redis。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题来了，本地缓存和分布式缓存怎么保持数据一致？&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1459537572254335&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatHAXJxmgpqcXzCcaOE53Rh0v3ZqhddXiayLQOnica3grsJMBz8fgYp3LQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;692&quot;/&gt;Redis缓存，数据库发生更新，直接删除缓存的key即可，因为对于应用系统而言，它是一种中心化的缓存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是本地缓存，它是非中心化的，散落在分布式服务的各个节点上，没法通过客户端的请求删除本地缓存的key，所以得想办法通知集群所有节点，删除对应的本地缓存key。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7887887887887888&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatwIA4gdmqlE6AiaXDXBLaWMBQdFGC7JibibOSicGRISXkMNicgF6jicFCcblw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;999&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以采用消息队列的方式：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;采用Redis本身的Pub/Sub机制，分布式集群的所有节点订阅删除本地缓存频道，删除Redis缓存的节点，同事发布删除本地缓存消息，订阅者们订阅到消息后，删除对应的本地key。但是Redis的发布订阅不是可靠的，不能保证一定删除成功。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;引入专业的消息队列，比如RocketMQ，保证消息的可靠性，但是增加了系统的复杂度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设置适当的过期时间兜底，本地缓存可以设置相对短一些的过期时间。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;30.怎么处理热key？&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;什么是热Key？&lt;/strong&gt;所谓的热key，就是访问频率比较的key。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，热门新闻事件或商品，这类key通常有大流量的访问，对存储这类信息的 Redis来说，是不小的压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如Redis集群部署，热key可能会造成整体流量的不均衡，个别节点出现OPS过大的情况，极端情况下热点key甚至会超过 Redis本身能够承受的OPS。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;怎么处理热key？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5923190546528804&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatviapTWBpGDyRcZooWAyicciaQ1f7oXoZher5noREjZKHpNOVJ05vjjzsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;677&quot;/&gt;对热key的处理，最关键的是对热点key的监控，可以从这些端来监控热点key:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;客户端
客户端其实是距离key“最近”的地方，因为Redis命令就是从客户端发出的，例如在客户端设置全局字典（key和调用次数），每次调用Redis命令时，使用这个字典进行记录。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;代理端
像Twemproxy、Codis这些基于代理的Redis分布式架构，所有客户端的请求都是通过代理端完成的，可以在代理端进行收集统计。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Redis服务端
使用monitor命令统计热点key是很多开发和运维人员首先想到，monitor命令可以监控到Redis执行的所有命令。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要监控到了热key，对热key的处理就简单了：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;把热key打散到不同的服务器，降低压⼒&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;加⼊⼆级缓存，提前加载热key数据到内存中，如果redis宕机，⾛内存查询&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;31.缓存预热怎么做呢？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓缓存预热，就是提前把数据库里的数据刷到缓存里，通常有这些方法：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、直接写个缓存刷新页面或者接口，上线时手动操作&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、数据量不大，可以在项目启动的时候自动进行加载&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、定时任务刷新缓存.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;32.热点key重建？问题？解决？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发的时候一般使用“缓存+过期时间”的策略，既可以加速数据读写，又保证数据的定期更新，这种模式基本能够满足绝大部分需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是有两个问题如果同时出现，可能就会出现比较大的问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;当前key是一个热点key（例如一个热门的娱乐新闻），并发量非常大。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;重建缓存不能在短时间完成，可能是一个复杂计算，例如复杂的 SQL、多次IO、多个依赖等。在缓存失效的瞬间，有大量线程来重建缓存，造成后端负载加大，甚至可能会让应用崩溃。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;怎么处理呢？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要解决这个问题也不是很复杂，解决问题的要点在于：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;减少重建缓存的次数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据尽可能一致。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;较少的潜在危险。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以一般采用如下方式：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;互斥锁（mutex key）
这种方法只允许一个线程重建缓存，其他线程等待重建缓存的线程执行完，重新从缓存获取数据即可。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;永远不过期
“永远不过期”包含两层意思：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;从缓存层面来看，确实没有设置过期时间，所以不会出现热点key过期后产生的问题，也就是“物理”不过期。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从功能层面来看，为每个value设置一个逻辑过期时间，当发现超过逻辑过期时间后，会使用单独的线程去构建缓存。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;33.无底洞问题吗？如何解决？&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;什么是无底洞问题？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2010年，Facebook的Memcache节点已经达到了3000个，承载着TB级别的缓存数据。但开发和运维人员发现了一个问题，为了满足业务要求添加了大量新Memcache节点，但是发现性能不但没有好转反而下降了，当时将这 种现象称为缓存的“&lt;strong&gt;无底洞&lt;/strong&gt;”现象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么为什么会产生这种现象呢?&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常来说添加节点使得Memcache集群 性能应该更强了，但事实并非如此。键值数据库由于通常采用哈希函数将 key映射到各个节点上，造成key的分布与业务无关，但是由于数据量和访问量的持续增长，造成需要添加大量节点做水平扩容，导致键值分布到更多的 节点上，所以无论是Memcache还是Redis的分布式，批量操作通常需要从不同节点上获取，相比于单机批量操作只涉及一次网络操作，分布式批量操作会涉及多次网络时间。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;无底洞问题如何优化呢？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先分析一下无底洞问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;客户端一次批量操作会涉及多次网络操作，也就意味着批量操作会随着节点的增多，耗时会不断增大。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;网络连接数变多，对节点的性能也有一定影响。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见的优化思路如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;命令本身的优化，例如优化操作语句等。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;减少网络通信次数。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;降低接入成本，例如客户端使用长连/连接池、NIO等。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Redis运维&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;34.Redis报内存不足怎么处理？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 内存不足有这么几种处理方式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;修改配置文件 redis.conf 的 maxmemory 参数，增加 Redis 可用内存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;也可以通过命令set maxmemory动态设置内存上限&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;修改内存淘汰策略，及时释放内存空间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用 Redis 集群模式，进行横向扩容。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;35.Redis的过期数据回收策略有哪些？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis主要有2种过期数据回收策略：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4332784184514003&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatYVobpiaR9w9d0zDvuUaibgXJpXz7YfdtMCbyiavDGP8X7GNvQicPTnICDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;607&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;惰性删除&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;惰性删除指的是当我们查询key的时候才对key进⾏检测，如果已经达到过期时间，则删除。显然，他有⼀个缺点就是如果这些过期的key没有被访问，那么他就⼀直⽆法被删除，⽽且⼀直占⽤内存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;定期删除&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定期删除指的是Redis每隔⼀段时间对数据库做⼀次检查，删除⾥⾯的过期key。由于不可能对所有key去做轮询来删除，所以Redis会每次随机取⼀些key去做检查和删除。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;36.Redis有哪些内存溢出控制/内存淘汰策略？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis所用内存达到maxmemory上限时会触发相应的溢出控制策略，Redis支持六种策略：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7047619047619048&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iateNG0ibic9cicofOO1x5KHRYngvm3kKIGgUQyYrz3aU2m2jQhZ7YGEI1BQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;840&quot;/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;noeviction：默认策略，不会删除任何数据，拒绝所有写入操作并返 回客户端错误信息，此 时Redis只响应读操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;volatile-lru：根据LRU算法删除设置了超时属性（expire）的键，直 到腾出足够空间为止。如果没有可删除的键对象，回退到noeviction策略。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性， 直到腾出足够空间为止。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;allkeys-random：随机删除所有键，直到腾出足够空间为止。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;volatile-random：随机删除过期键，直到腾出足够空间为止。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果 没有，回退到noeviction策略。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;37.Redis阻塞？怎么解决？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis发生阻塞，可以从以下几个方面排查：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6198779424585876&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iaty3nNrndQUQkj9mScHaGvvCUsFIS279FribibicKYCDuJlvX18KicRqialbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1147&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;API或数据结构使用不合理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通常Redis执行命令速度非常快，但是不合理地使用命令，可能会导致执行速度很慢，导致阻塞，对于高并发的场景，应该尽量避免在大对象上执行算法复杂 度超过O（n）的命令。&lt;/p&gt;&lt;p&gt;对慢查询的处理分为两步：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;发现慢查询：slowlog get{n}命令可以获取最近 的n条慢查询命令；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发现慢查询后，可以从两个方向去优化慢查询：1）修改为低算法复杂度的命令，如hgetall改为hmget等，禁用keys、sort等命 令
2）调整大对象：缩减大对象数据或把大对象拆分为多个小对象，防止一次命令操作过多的数据。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;CPU饱和的问题&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;单线程的Redis处理命令时只能使用一个CPU。而CPU饱和是指Redis单核CPU使用率跑到接近100%。&lt;/p&gt;&lt;p&gt;针对这种情况，处理步骤一般如下：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;判断当前Redis并发量是否已经达到极限，可以使用统计命令redis-cli-h{ip}-p{port}--stat获取当前 Redis使用情况&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果Redis的请求几万+，那么大概就是Redis的OPS已经到了极限，应该做集群化水品扩展来分摊OPS压力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果只有几百几千，那么就得排查命令和内存的使用&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;持久化相关的阻塞&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对于开启了持久化功能的Redis节点，需要排查是否是持久化导致的阻塞。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;fork阻塞
fork操作发生在RDB和AOF重写时，Redis主线程调用fork操作产生共享 内存的子进程，由子进程完成持久化文件重写工作。如果fork操作本身耗时过长，必然会导致主线程的阻塞。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AOF刷盘阻塞
当我们开启AOF持久化功能时，文件刷盘的方式一般采用每秒一次，后台线程每秒对AOF文件做fsync操作。当硬盘压力过大时，fsync操作需要等 待，直到写入完成。如果主线程发现距离上一次的fsync成功超过2秒，为了 数据安全性它会阻塞直到后台线程执行fsync操作完成。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;HugePage写操作阻塞
对于开启Transparent HugePages的 操作系统，每次写命令引起的复制内存页单位由4K变为2MB，放大了512 倍，会拖慢写操作的执行时间，导致大量写操作慢查询。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;38.大key问题了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis使用过程中，有时候会出现大key的情况， 比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;单个简单的key存储的value很大，size超过10KB&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hash， set，zset，list 中存储过多的元素（以万为单位）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;大key会造成什么问题呢？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端耗时增加，甚至超时&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对大key进行IO操作时，会严重占用带宽和CPU&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;造成Redis集群中数据倾斜&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主动删除、被动删等，可能会导致阻塞&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;如何找到大key?&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;bigkeys命令：使用bigkeys命令以遍历的方式分析Redis实例中的所有Key，并返回整体统计信息与每个数据类型中Top1的大Key&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;redis-rdb-tools：redis-rdb-tools是由Python写的用来分析Redis的rdb快照文件用的工具，它可以把rdb快照文件生成json文件或者生成报表用来分析Redis的使用详情。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;如何处理大key?&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6327913279132791&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatBnjugvwtoQYFicNdF0pUzzsQxkMfgPFg62nIZHm533azQdV29YkKN7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;738&quot;/&gt;&lt;figcaption&gt;大key处理&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;删除大key&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当Redis版本大于4.0时，可使用UNLINK命令安全地删除大Key，该命令能够以非阻塞的方式，逐步地清理传入的Key。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当Redis版本小于4.0时，避免使用阻塞式命令KEYS，而是建议通过SCAN命令执行增量迭代扫描key，然后判断进行删除。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;压缩和拆分key&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当vaule是string时，比较难拆分，则使用序列化、压缩算法将key的大小控制在合理范围内，但是序列化和反序列化都会带来更多时间上的消耗。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当value是string，压缩之后仍然是大key，则需要进行拆分，一个大key分为不同的部分，记录每个部分的key，使用multiget等操作实现事务读取。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当value是list/set等集合类型时，根据预估的数据规模来进行分片，不同的元素计算后分到不同的片。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;39.Redis常见性能问题和解决方案？&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Master 最好不要做任何持久化工作，包括内存快照和 AOF 日志文件，特别是不要启用内存快照做持久化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果数据比较关键，某个 Slave 开启 AOF 备份数据，策略为每秒同步一次。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为了主从复制的速度和连接的稳定性，Slave 和 Master 最好在同一个局域网内。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;尽量避免在压力较大的主库上增加从库。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Master 调用 BGREWRITEAOF 重写 AOF 文件，AOF 在重写的时候会占大量的 CPU 和内存资源，导致服务 load 过高，出现短暂服务暂停现象。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为了 Master 的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关为：Master&amp;lt;–Slave1&amp;lt;–Slave2&amp;lt;–Slave3…，这样的结构也方便解决单点故障问题，实现 Slave 对 Master 的替换，也即，如果 Master 挂了，可以立马启用 Slave1 做 Master，其他不变。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Redis应用&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;40.使用Redis 如何实现异步队列？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道redis支持很多种结构的数据，那么如何使用redis作为异步队列使用呢？一般有以下几种方式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;使用list作为队列，lpush生产消息，rpop消费消息&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式，消费者死循环rpop从队列中消费消息。但是这样，即使队列里没有消息，也会进行rpop，会导致Redis CPU的消耗。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.31164901664145234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iataSNMfUgN3hVdMTYzZNehxNibNjRNt8tpvkw2eJ8rx15FoXHiaD258wqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;661&quot;/&gt;可以通过让消费者休眠的方式的方式来处理，但是这样又会又消息的延迟问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;-&lt;strong&gt;使用list作为队列，lpush生产消息，brpop消费消息&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;brpop是rpop的阻塞版本，list为空的时候，它会一直阻塞，直到list中有值或者超时。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2765625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat4Qm5iaxQer0ic8khcI2Z4ZPicGp8atuE3iaiaTE6fhfraHklhDRNERluz4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式只能实现一对一的消息队列。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;使用Redis的pub/sub来进行消息的发布/订阅&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发布/订阅模式可以1：N的消息发布/订阅。发布者将消息发布到指定的频道频道（channel），订阅相应频道的客户端都能收到消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6124794745484401&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatG4UdPMChmGEgrTkgyKwTG6aS4mjPicWhy0JyaJutj76G8PRw3ic4fVKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;609&quot;/&gt;但是这种方式不是可靠的，它不保证订阅者一定能收到消息，也不进行消息的存储。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，一般的异步队列的实现还是交给专业的消息队列。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;41.Redis 如何实现延时队列?&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以使用 zset这个结构，用设置好的时间戳作为score进行排序，使用 zadd score1 value1 ....命令就可以一直往内存中生产消息。再利用 zrangebysocre 查询符合条件的所有待处理的任务，通过循环执行队列任务即可。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18957871396895787&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatsYa7HIdh5yPtrSJjmd0k5A26ibPElMc5fwkGXiciafJ0ej7AMZ5Whwltg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;902&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;42.Redis 支持事务吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis提供了简单的事务，但它对事务ACID的支持并不完备。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;multi命令代表事务开始，exec命令代表事务结束，它们之间的命令是原子顺序执行的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt; multi &lt;br/&gt;OK&lt;br/&gt;&lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt; sadd user:a:follow user:b &lt;br/&gt;QUEUED &lt;br/&gt;&lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt; sadd user:b:fans user:a &lt;br/&gt;QUEUED&lt;br/&gt;&lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt; sismember user:a:follow user:b &lt;br/&gt;(integer) &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt; exec &lt;span&gt;1&lt;/span&gt;) (integer) &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2&lt;/span&gt;) (integer) &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis事务的原理，是所有的指令在 exec 之前不执行，而是缓存在
服务器的一个事务队列中，服务器一旦收到 exec 指令，才开执行整个事务队列，执行完毕后一次性返回所有指令的运行结果。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5533980582524272&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatLWiaU8ZJBaXB450OLvhricGRwPVEyHw2cib5VlEZeKWfH5TC7hBEsr8Gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;515&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为Redis执行命令是单线程的，所以这组命令顺序执行，而且不会被其它线程打断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Redis事务的注意点有哪些？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的点有：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Redis 事务是不支持回滚的，不像 MySQL 的事务一样，要么都执行要么都不执行；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Redis 服务端在执行事务的过程中，不会被其他客户端发送来的命令请求打断。直到事务命令全部执行完毕才会执行其他客户端的命令。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Redis 事务为什么不支持回滚？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 的事务不支持回滚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果执行的命令有语法错误，Redis 会执行失败，这些问题可以从程序层面捕获并解决。但是如果出现其他问题，则依然会继续执行余下的命令。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样做的原因是因为回滚需要增加很多工作，而不支持回滚则可以&lt;strong&gt;保持简单、快速的特性&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;43.Redis和Lua脚本的使用了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis的事务功能比较简单，平时的开发中，可以利用Lua脚本来增强Redis的命令。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Lua脚本能给开发人员带来这些好处：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Lua脚本在Redis中是原子执行的，执行过程中间不会插入其他命令。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Lua脚本可以帮助开发和运维人员创造出自己定制的命令，并可以将这 些命令常驻在Redis内存中，实现复用的效果。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Lua脚本可以将多条命令一次性打包，有效地减少网络开销。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如这一段很（烂）经（大）典（街）的秒杀系统利用lua扣减Redis库存的脚本：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;   -- 库存未预热&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; (redis.call(&lt;span&gt;&#x27;exists&#x27;&lt;/span&gt;, KEYS[&lt;span&gt;2&lt;/span&gt;]) == &lt;span&gt;1&lt;/span&gt;) then&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;9&lt;/span&gt;;&lt;br/&gt;    end;&lt;br/&gt;    -- 秒杀商品库存存在&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (redis.call(&lt;span&gt;&#x27;exists&#x27;&lt;/span&gt;, KEYS[&lt;span&gt;1&lt;/span&gt;]) == &lt;span&gt;1&lt;/span&gt;) then&lt;br/&gt;        local stock = tonumber(redis.call(&lt;span&gt;&#x27;get&#x27;&lt;/span&gt;, KEYS[&lt;span&gt;1&lt;/span&gt;]));&lt;br/&gt;        local num = tonumber(ARGV[&lt;span&gt;1&lt;/span&gt;]);&lt;br/&gt;        -- 剩余库存少于请求数量&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (stock &amp;lt; num) then&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;3&lt;/span&gt;&lt;br/&gt;        end;&lt;br/&gt;        -- 扣减库存&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (stock &amp;gt;= num) then&lt;br/&gt;            redis.call(&lt;span&gt;&#x27;incrby&#x27;&lt;/span&gt;, KEYS[&lt;span&gt;1&lt;/span&gt;], &lt;span&gt;0&lt;/span&gt; - num);&lt;br/&gt;            -- 扣减成功&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        end;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;    end;&lt;br/&gt;    -- 秒杀商品库存不存在&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;44.Redis的管道了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 提供三种将客户端多条命令打包发送给服务端执行的方式：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pipelining(管道) 、 Transactions(事务) 和 Lua Scripts(Lua 脚本) 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Pipelining&lt;/strong&gt;（管道）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 管道是三者之中最简单的，当客户端需要执行多条 redis 命令时，可以通过管道一次性将要执行的多条命令发送给服务端，其作用是为了降低 RTT(Round Trip Time) 对性能的影响，比如我们使用 nc 命令将两条指令发送给 redis 服务端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 服务端接收到管道发送过来的多条命令后，会一直执命令，并将命令的执行结果进行缓存，直到最后一条命令执行完成，再所有命令的执行结果一次性返回给客户端 。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6417525773195877&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatHVHR3eMCJcapeDGWgcc9AVLicX6DYhdsicV8yzTTx7dxEibeYRXoLfZxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;776&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Pipelining的优势&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在性能方面， Pipelining 有下面两个优势：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;节省了RTT&lt;/strong&gt;：将多条命令打包一次性发送给服务端，减少了客户端与服务端之间的网络调用次数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;减少了上下文切换&lt;/strong&gt;：当客户端/服务端需要从网络中读写数据时，都会产生一次系统调用，系统调用是非常耗时的操作，其中设计到程序由用户态切换到内核态，再从内核态切换回用户态的过程。当我们执行 10 条 redis 命令的时候，就会发生 10 次用户态到内核态的上下文切换，但如果我们使用 Pipeining 将多条命令打包成一条一次性发送给服务端，就只会产生一次上下文切换。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;45.Redis实现分布式锁了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis是分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8442307692307692&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatJd1zU8fhgR0tYzX8jKCTLUHXFfibVXQLMcH7icPXSiaEyf2IAHMCMC5icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;520&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;gt; setnx lock:fighter &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;OK&lt;br/&gt;... &lt;span&gt;do&lt;/span&gt; something critical ...&lt;br/&gt;&amp;gt; del lock:fighter&lt;br/&gt;(integer) &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8694779116465864&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatSGib0NvYsdo53k9rgaSctPxP32BAxGIP0cU8k9zCZzBRW8ZCaczg9XQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;498&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;gt; setnx lock:fighter &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;OK&lt;br/&gt;&amp;gt; expire lock:fighter &lt;span&gt;5&lt;/span&gt;&lt;br/&gt;... &lt;span&gt;do&lt;/span&gt; something critical ...&lt;br/&gt;&amp;gt; del lock:fighter&lt;br/&gt;(integer) &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个问题在Redis 2.8 版本中得到了解决，这个版本加入了 set 指令的扩展参数，使得 setnx 和expire 指令可以一起执行。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6744913928012519&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat8rBRiaqASfciabUNQzSxTL0NgkhCibWpZYlE2l5LdtOC0CvJCbCM410hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;set lock:fighter3 &lt;span&gt;true&lt;/span&gt; ex &lt;span&gt;5&lt;/span&gt; nx OK ... &lt;span&gt;do&lt;/span&gt; something critical ... &amp;gt; del lock:codehole&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，这个就算是比较完善的分布式锁了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然实际的开发，没人会去自己写分布式锁的命令，因为有专业的轮子——&lt;strong&gt;Redisson&lt;/strong&gt;。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;底层结构&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一部分就比较深了，如果不是简历上写了精通Redis，应该不会怎么问。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;46.说说Redis底层数据结构？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis有&lt;strong&gt;动态字符串(sds)&lt;strong&gt;、&lt;/strong&gt;链表(list)&lt;strong&gt;、&lt;/strong&gt;字典(ht)&lt;strong&gt;、&lt;/strong&gt;跳跃表(skiplist)&lt;strong&gt;、&lt;/strong&gt;整数集合(intset)&lt;strong&gt;、&lt;/strong&gt;压缩列表(ziplist)&lt;/strong&gt; 等底层数据结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis并没有使用这些数据结构来直接实现键值对数据库，而是基于这些数据结构创建了一个对象系统，来表示所有的key-value。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4891398783666377&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iaty3Co6T9D2F9F8u3lvPK9awfficQY6QMJkCXdy5ynnLNicbic903JvaBSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1151&quot;/&gt;我们常用的数据类型和编码对应的映射关系：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6411428571428571&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatwtGpQUP0ibTpFcnK88Eib6MhnGibCG29zRveFHBV2rWNq4H3y0pTrbXEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;简单看一下底层数据结构，如果对数据结构掌握不错的话，理解这些结构应该不是特别难：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;字符串&lt;/strong&gt;：redis没有直接使⽤C语⾔传统的字符串表示，⽽是⾃⼰实现的叫做简单动态字符串SDS的抽象类型。&lt;/p&gt;&lt;p&gt;C语⾔的字符串不记录⾃身的⻓度信息，⽽SDS则保存了⻓度信息，这样将获取字符串⻓度的时间由O(N)降低到了O(1)，同时可以避免缓冲区溢出和减少修改字符串⻓度时所需的内存重分配次数。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6687022900763359&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatia4JRrKexylvrmMmgBxtmfW9b8vudwCqofW0ZyCbDxHC0gIpAvhOZ5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;655&quot;/&gt;&lt;figcaption&gt;SDS&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;链表linkedlist&lt;/strong&gt;：redis链表是⼀个双向⽆环链表结构，很多发布订阅、慢查询、监视器功能都是使⽤到了链表来实现，每个链表的节点由⼀个listNode结构来表示，每个节点都有指向前置节点和后置节点的指针，同时表头节点的前置和后置节点都指向NULL。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7344398340248963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatFHXiav6ic2hic3pEelBrjYQDFHm8rah8NcxicibgB4FZezvTEEKeJ2XIiaTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;964&quot;/&gt;&lt;figcaption&gt;链表linkedlist&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;字典dict&lt;/strong&gt;：⽤于保存键值对的抽象数据结构。Redis使⽤hash表作为底层实现，一个哈希表里可以有多个哈希表节点，而每个哈希表节点就保存了字典里中的一个键值对。每个字典带有两个hash表，供平时使⽤和rehash时使⽤，hash表使⽤链地址法来解决键冲突，被分配到同⼀个索引位置的多个键值对会形成⼀个单向链表，在对hash表进⾏扩容或者缩容的时候，为了服务的可⽤性，rehash的过程不是⼀次性完成的，⽽是渐进式的。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7750730282375852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatISvoMgXfWPD0eCAKebj9cOYowEqUG7kbibBpKrqAcGOQFXfSPkMF8YA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1027&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;跳跃表skiplist&lt;/strong&gt;：跳跃表是有序集合的底层实现之⼀，Redis中在实现有序集合键和集群节点的内部结构中都是⽤到了跳跃表。Redis跳跃表由zskiplist和zskiplistNode组成，zskiplist⽤于保存跳跃表信息（表头、表尾节点、⻓度等），zskiplistNode⽤于表示表跳跃节点，每个跳跃表节点的层⾼都是1-32的随机数，在同⼀个跳跃表中，多个节点可以包含相同的分值，但是每个节点的成员对象必须是唯⼀的，节点按照分值⼤⼩排序，如果分值相同，则按照成员对象的⼤⼩排序。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5791701947502117&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatBMcAYnSpKHV2FaAIK9mYozRj4458HowX7xBdDoficvSxmkS18TWvjhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1181&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;整数集合intset&lt;/strong&gt;：⽤于保存整数值的集合抽象数据结构，不会出现重复元素，底层实现为数组。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3376110562685094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatqpbiajOw6VOF7hSGI0JdibWobhDlDDjDB72TFhiagDm4LfRcfia4jsaAYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1013&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;压缩列表ziplist&lt;/strong&gt;：压缩列表是为节约内存⽽开发的顺序性数据结构，它可以包含任意多个节点，每个节点可以保存⼀个字节数组或者整数值。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13526119402985073&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iataojicj9iaUPBUiaXv9YdGb82Hqdy9luQJRGHRp0ZVIcNgqB8vFESGiaD4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1072&quot;/&gt;&lt;figcaption&gt;压缩列表组成&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;47.Redis 的 SDS 和 C 中字符串相比有什么优势？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;C 语言使用了一个长度为 &lt;code&gt;N+1&lt;/code&gt; 的字符数组来表示长度为 &lt;code&gt;N&lt;/code&gt; 的字符串，并且字符数组最后一个元素总是 &lt;code&gt;\0&lt;/code&gt;，这种简单的字符串表示方式 不符合 Redis 对字符串在安全性、效率以及功能方面的要求。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3102362204724409&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatOpIgX29Q6yonUbHfaUEyOibzkO15NBzdEns78QZEXqZic7mcxic5Hrvaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;635&quot;/&gt;&lt;figcaption&gt;C语言的字符串&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;C语言的字符串可能有什么问题？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样简单的数据结构可能会造成以下一些问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;获取字符串长度复杂度高&lt;/strong&gt; ：因为 C 不保存数组的长度，每次都需要遍历一遍整个数组，时间复杂度为O(n)；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不能杜绝 &lt;strong&gt;缓冲区溢出/内存泄漏&lt;/strong&gt; 的问题 : C字符串不记录自身长度带来的另外一个问题是容易造成缓存区溢出（buffer overflow），例如在字符串拼接的时候，新的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;C 字符串 &lt;strong&gt;只能保存文本数据&lt;/strong&gt; → 因为 C 语言中的字符串必须符合某种编码（比如 ASCII），例如中间出现的 &lt;code&gt;&#x27;\0&#x27;&lt;/code&gt; 可能会被判定为提前结束的字符串而识别不了；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;Redis如何解决？优势？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35064935064935066&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatywlcmpUGYkj5Ok4YG1slDmYiclH3icib4jAYV4YeEW1CXExb6u1WIkRIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;693&quot;/&gt;&lt;figcaption&gt;Redis sds&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来说一下 Redis 如何解决的：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;多增加 len 表示当前字符串的长度&lt;/strong&gt;：这样就可以直接获取长度了，复杂度 O(1)；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;自动扩展空间&lt;/strong&gt;：当 SDS 需要对字符串进行修改时，首先借助于 &lt;code&gt;len&lt;/code&gt; 和 &lt;code&gt;alloc&lt;/code&gt; 检查空间是否满足修改所需的要求，如果空间不够的话，SDS 会自动扩展空间，避免了像 C 字符串操作中的溢出情况；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;有效降低内存分配次数&lt;/strong&gt;：C 字符串在涉及增加或者清除操作时会改变底层数组的大小造成重新分配，SDS 使用了 &lt;strong&gt;空间预分配&lt;/strong&gt; 和 &lt;strong&gt;惰性空间释放&lt;/strong&gt; 机制，简单理解就是每次在扩展时是成倍的多分配的，在缩容是也是先留着并不正式归还给 OS；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;二进制安全&lt;/strong&gt;：C 语言字符串只能保存 &lt;code&gt;ascii&lt;/code&gt; 码，对于图片、音频等信息无法保存，SDS 是二进制安全的，写入什么读取就是什么，不做任何过滤和限制；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;48.字典是如何实现的？Rehash 了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字典是 Redis 服务器中出现最为频繁的复合型数据结构。除了 &lt;strong&gt;hash&lt;/strong&gt; 结构的数据会用到字典外，整个 Redis 数据库的所有 &lt;code&gt;key&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 也组成了一个 &lt;strong&gt;全局字典&lt;/strong&gt;，还有带过期时间的 &lt;code&gt;key&lt;/code&gt; 也是一个字典。*(存储在 RedisDb 数据结构中)*&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;字典结构是什么样的呢？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Redis&lt;/strong&gt; 中的字典相当于 Java 中的 &lt;strong&gt;HashMap&lt;/strong&gt;，内部实现也差不多类似，采用哈希与运算计算下标位置；通过 &lt;strong&gt;&quot;数组 + 链表&quot; &lt;strong&gt;的&lt;/strong&gt;链地址法&lt;/strong&gt; 来解决哈希冲突，同时这样的结构也吸收了两种不同数据结构的优点。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49279050042408823&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatzkdCKqvnlkGKWBx9TT0ac3ibPbscVcXQhpOpwiaxiaSWsRyicBFqMbxYnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1179&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;字典是怎么扩容的？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字典结构内部包含 &lt;strong&gt;两个 hashtable&lt;/strong&gt;，通常情况下只有一个哈希表 ht[0] 有值，在扩容的时候，把ht[0]里的值rehash到ht[1]，然后进行 &lt;strong&gt;渐进式rehash&lt;/strong&gt; ——所谓渐进式rehash，指的是这个rehash的动作并不是一次性、集中式地完成的，而是分多次、渐进式地完成的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;待搬迁结束后，h[1]就取代h[0]存储字典的元素。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;49.跳跃表是如何实现的？原理？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PS:跳跃表是比较常问的一种结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其它节点的指针，从而达到快速访问节点的目的。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40730837789661317&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatPW2uUWSicojBwsGibNqmFCxlYZkick9fJzaS5dYLH4E2Cs2libia1Vic9Efg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1122&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;为什么使用跳跃表?&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，因为 zset 要支持随机的插入和删除，所以它 &lt;strong&gt;不宜使用数组来实现&lt;/strong&gt;，关于排序问题，我们也很容易就想到 &lt;strong&gt;红黑树/ 平衡树&lt;/strong&gt; 这样的树形结构，为什么 Redis 不使用这样一些结构呢？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;性能考虑：&lt;/strong&gt; 在高并发的情况下，树形结构需要执行一些类似于 rebalance 这样的可能涉及整棵树的操作，相对来说跳跃表的变化只涉及局部；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;实现考虑：&lt;/strong&gt; 在复杂度与红黑树相同的情况下，跳跃表实现起来更简单，看起来也更加直观；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以上的一些考虑，Redis 基于 &lt;strong&gt;William Pugh&lt;/strong&gt; 的论文做出一些改进后采用了 &lt;strong&gt;跳跃表&lt;/strong&gt; 这样的结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本质是解决查找问题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;跳跃表是怎么实现的？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跳跃表的节点里有这些元素：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;层&lt;/strong&gt;跳跃表节点的level数组可以包含多个元素，每个元素都包含一个指向其它节点的指针，程序可以通过这些层来加快访问其它节点的速度，一般来说，层的数量月多，访问其它节点的速度就越快。&lt;/p&gt;&lt;p&gt;每次创建一个新的跳跃表节点的时候，程序都根据幂次定律，随机生成一个介于1和32之间的值作为level数组的大小，这个大小就是层的“高度”&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;前进指针&lt;/strong&gt;每个层都有一个指向表尾的前进指针（level[i].forward属性），用于从表头向表尾方向访问节点。&lt;/p&gt;&lt;p&gt;我们看一下跳跃表从表头到表尾，遍历所有节点的路径：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4013961605584642&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat3Z2Px2GFaDGlKx02ntjveqKbFnzv9IvzP4QTIm3xEiaCHzmRIf45B1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1146&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;跨度&lt;/strong&gt;层的跨度用于记录两个节点之间的距离。跨度是用来计算排位（rank）的：在查找某个节点的过程中，将沿途访问过的所有层的跨度累计起来，得到的结果就是目标节点在跳跃表中的排位。&lt;/p&gt;&lt;p&gt;例如查找，分值为3.0、成员对象为o3的节点时，沿途经历的层：查找的过程只经过了一个层，并且层的跨度为3，所以目标节点在跳跃表中的排位为3。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38864241348713396&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatQM1HXaIAhcGwyxsjxBRamIT8JooKYrwj91oOZYJUKnVYG8n6yh0RGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1127&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;分值和成员&lt;/strong&gt;节点的分值（score属性）是一个double类型的浮点数，跳跃表中所有的节点都按分值从小到大来排序。&lt;/p&gt;&lt;p&gt;节点的成员对象（obj属性）是一个指针，它指向一个字符串对象，而字符串对象则保存这一个SDS值。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;50.压缩列表了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;压缩列表是 Redis &lt;strong&gt;为了节约内存&lt;/strong&gt; 而使用的一种数据结构，是由一系列特殊编码的连续内存快组成的顺序型数据结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个压缩列表可以包含任意多个节点（entry），每个节点可以保存一个字节数组或者一个整数值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08933454876937101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iatsMx7rRMDIvLYJstYdia2Pyk1MDib0DT7nEW7rPU7RLzwQnEAa7EHHg4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1097&quot;/&gt;压缩列表由这么几部分组成：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;zlbyttes&lt;/strong&gt;:记录整个压缩列表占用的内存字节数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;zltail&lt;/strong&gt;:记录压缩列表表尾节点距离压缩列表的起始地址有多少字节&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;zllen&lt;/strong&gt;:记录压缩列表包含的节点数量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;entryX&lt;/strong&gt;:列表节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;zlend&lt;/strong&gt;:用于标记压缩列表的末端&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18209876543209877&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iat1s7ZPQUpuLuuibvdibPdNNZ5uel2cAR6F7ocYrKzWEWKicQmjiaEzyNHsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;figcaption&gt;压缩列表示例&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;51.快速列表 quicklist 了解吗？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 早期版本存储 list 列表数据结构使用的是压缩列表 ziplist 和普通的双向链表 linkedlist，也就是说当元素少时使用 ziplist，当元素多时用 linkedlist。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但考虑到链表的附加空间相对较高，&lt;code&gt;prev&lt;/code&gt; 和 &lt;code&gt;next&lt;/code&gt; 指针就要占去 &lt;code&gt;16&lt;/code&gt; 个字节（64 位操作系统占用 &lt;code&gt;8&lt;/code&gt; 个字节），另外每个节点的内存都是单独分配，会家具内存的碎片化，影响内存管理效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来 Redis 新版本（3.2）对列表数据结构进行了改造，使用 &lt;code&gt;quicklist&lt;/code&gt; 代替了 &lt;code&gt;ziplist&lt;/code&gt; 和 &lt;code&gt;linkedlist&lt;/code&gt;，quicklist是综合考虑了时间效率与空间效率引入的新型数据结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;quicklist由list和ziplist结合而成，它是一个由ziplist充当节点的双向链表。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5865671641791045&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWf5IyvQkjc4vibibgKwWma1iaticzSicZ6us2RWa52icIPTPicKDgbibXZvTD7cjvJpOCqXTtibP878hPem0Gg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1340&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;其他问题&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;52.假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;keys&lt;/code&gt; 指令可以扫出指定模式的 key 列表。但是要注意 keys 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用 &lt;code&gt;scan&lt;/code&gt; 指令，&lt;code&gt;scan&lt;/code&gt; 指令可以无阻塞的提取出指定模式的 &lt;code&gt;key&lt;/code&gt; 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 &lt;code&gt;keys&lt;/code&gt; 指令长。&lt;/p&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;big&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/big&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[1].《Redis开发与实战》&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[2].《Redis设计与实现》&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[3].《Redis深度历险》&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[4]. 艾小仙《我要进大厂》&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[5].田维常《后端面试小笔记》&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[6]. [美团二面：Redis与MySQL双写一致性如何保证?](https://juejin.cn/post/6964531365643550751)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[7]. [妈妈再也不担心我面试被Redis问得脸都绿了 ](https://mp.weixin.qq.com/s/vXBFscXqDcXS_VaIERplMQ)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[8]. [面试官：缓存一致性问题怎么解决?](https://mp.weixin.qq.com/s/dYvM8_6SQnYRB6KjPsprbw)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[9]. [高并发场景下，到底先更新缓存还是先更新数据库？](https://mp.weixin.qq.com/s/bewlUcHL2e6fw2vDrhEDCw)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[10] .[【Redis破障之路】三：Redis单线程架构](https://fighter3.blog.csdn.net/article/details/116166827)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[11]. Redis官网&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[12]. [解决了Redis大key问题，同事们都夸他牛皮](https://www.51cto.com/article/701990.html)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[13].[Redis 分布式锁原理看这篇就够了, 循循渐进 ](https://juejin.cn/post/6897414205071163400)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[14]. 《Redis5设计与源码分析》&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg4NjYyODc4OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/J4jTHmo8Xh6qM32ASOtVbXNoiaegrI26qLRw6r6FTI7dZw6TMT7vecvnjd1O8xSsM5MiajIuQZicxSC6KFK8TMpbg/0?wx_fmt=png&quot; data-nickname=&quot;java突击队&quot; data-alias=&quot;&quot; data-signature=&quot;技术经验分享&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>80f965fda08da47ed4385d27af86d5ec</guid>
<title>如何使用 ThingsBoard 接入 MQTT 数据</title>
<link>https://toutiao.io/k/kuubxbf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://thingsboard.io/&quot;&gt;ThingsBoard&lt;/a&gt; 是用于数据收集、处理、可视化和设备管理的开源物联网平台。它支持通过 &lt;a href=&quot;https://www.emqx.com/zh/mqtt&quot;&gt;MQTT&lt;/a&gt;、&lt;a href=&quot;https://www.emqx.com/zh/blog/connecting-coap-devices-to-emqx&quot;&gt;CoAP&lt;/a&gt; 和 HTTP 等协议实现设备连接，并支持云和私有部署。使用丰富的服务器端 API，以安全的方式提供、监测和控制您的物联网实体，定义您的设备、资产、客户或任何其他实体之间的关系。以可扩展和容错的方式收集和存储遥测数据，用内置或定制的部件和灵活的仪表盘来可视化您的数据，并且可以和您的客户共享 Dashboard 界面。&lt;/p&gt;
&lt;p&gt;本文将使用 ThingsBoard Cloud 结合 &lt;a href=&quot;https://www.emqx.com/zh&quot;&gt;EMQ&lt;/a&gt; 旗下的全托管 &lt;a href=&quot;https://www.emqx.com/zh/cloud&quot;&gt;MQTT 云服务 - EMQX Cloud&lt;/a&gt;，介绍如何在 ThingsBoard 中集成第三方 MQTT Broker 并自定义配置 Dashboard UI 接入 MQTT 数据。&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;准备&lt;/h2&gt;
&lt;p&gt;由于我们使用的是 ThingsBoard Cloud ，所以我们无需下载安装，只需要访问 &lt;a href=&quot;https://thingsboard.cloud/signup&quot;&gt;https://thingsboard.cloud/signup&lt;/a&gt; 进行注册登录便可获得相关服务。除了使用 ThingsBoard 云服务之外，用户也可以选择私有部署进行&lt;a href=&quot;https://thingsboard.io/docs/user-guide/install/installation-options/&quot;&gt;下载安装&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;注意：只有专业版具备 &lt;a href=&quot;https://thingsboard.io/docs/user-guide/integrations/&quot;&gt;平台集成&lt;/a&gt; 功能，所以需要使用 ThingsBoard Cloud 或者是下载部署专业版。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文使用全托管的 MQTT 消息云服务 - EMQX Cloud 创建第三方 Broker。&lt;a href=&quot;https://www.emqx.com/zh/signup?continue=https%3A%2F%2Fcloud.emqx.com%2Fconsole%2Fdeployments%2F0%3Foper%3Dnew&quot;&gt;注册登录 EMQX Cloud&lt;/a&gt; 控制台，新建部署，一个部署即为一个 Broker。新用户同时拥有 14 天基础版和 14 天专业版免费试用机会。&lt;/p&gt;
&lt;p&gt;EMQX Cloud 提供 VPC 对等连接和 REST API 等功能，且具备强大灵活的数据集成能力，方便用户与其现有云服务资源对接。提供一站式运维代管，可以节省大量的时间和人力成本，让企业专注在交付更有价值的业务系统。&lt;/p&gt;
&lt;h2 id=&quot;集成&quot;&gt;集成&lt;/h2&gt;
&lt;h3 id=&quot;使用-emqx-cloud&quot;&gt;使用 EMQX Cloud&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取连接地址和端口。等待部署状态为运行中，进入部署概览页面，找到连接地址和 &lt;code&gt;mqtt&lt;/code&gt; 协议对应的连接端口，后续在 ThingsBoard 中添加集成时我们需要用到它们。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/057550177ae242bda442f0565588d28d.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;MQTT Cloud 部署信息&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/057550177ae242bda442f0565588d28d.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/057550177ae242bda442f0565588d28d.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/057550177ae242bda442f0565588d28d.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加认证信息。进入【认证鉴权】-&amp;gt;【认证】中添加一套用户名密码用于后续集成中的认证。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/a63c974060bc75cf4215a52745d8e64c.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;MQTT Cloud 添加认证信息&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/a63c974060bc75cf4215a52745d8e64c.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/a63c974060bc75cf4215a52745d8e64c.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/a63c974060bc75cf4215a52745d8e64c.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;配置-thingsboard&quot;&gt;配置 ThingsBoard&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在【Data converters】中新增一个 &lt;code&gt;Uplink&lt;/code&gt; 类型的数据转换器。该上行数据转换器的作用是解析传入消息的有效负载并将其转换为 ThingsBoard 使用的格式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;填写名称，类型选择 &lt;code&gt;Uplink&lt;/code&gt; ，开启 Debug 模式并将下述解析脚本复制粘贴到解析方法中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Decode an uplink message from a buffer
// payload - array of bytes
// metadata - key/value object

// decode payload to json
var payloadJson = decodeToJson(payload);
var result = {
   deviceName: payloadJson.deviceName,
   attributes: {
       model: &#x27;Model A&#x27;,
       serialNumber: &#x27;SN111&#x27;,
       integrationName: metadata[&#x27;integrationName&#x27;]
   },
   telemetry: {
       temperature: payloadJson.temperature,
       humidity: payloadJson.humidity,
   }
};

// Helper functions
function decodeToString(payload) {
   return String.fromCharCode.apply(String, payload);
}
function decodeToJson(payload) {
   // covert payload to string.
   var str = decodeToString(payload);

   // parse string to JSON
   var data = JSON.parse(str);
   return data;
}

return result;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击测试按钮，进入测试页面，对刚刚的解析脚本进行测试。输入 JSON 格式的 payload 内容进行测试，可以看到测试输出数据中包含输入的设备名称、温度和湿度数据。然后点击保存按钮，回到刚刚的配置页面。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/b5610f6bdab6a52f0c50d83afa594aca.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard Data converters&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/b5610f6bdab6a52f0c50d83afa594aca.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/b5610f6bdab6a52f0c50d83afa594aca.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/b5610f6bdab6a52f0c50d83afa594aca.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击添加按钮然后便成功添加一个 &lt;code&gt;Uplink&lt;/code&gt; 类型的数据转换器。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/b2f4714da99e784fa63886580e92b4db.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard Uplink&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/b2f4714da99e784fa63886580e92b4db.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/b2f4714da99e784fa63886580e92b4db.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/b2f4714da99e784fa63886580e92b4db.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进入【Integrations】新增 EMQX Cloud 部署集成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;点击添加集成，输入名称并选择上述第 1 步中成功添加好的上行数据转换器 &lt;code&gt;MQTT-Uplink&lt;/code&gt; 。之后复制粘贴 EMQX Cloud 部署概览页面中的连接地址和 &lt;code&gt;mqtt&lt;/code&gt; 协议对应的端口号。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/11b6388d3a690b63e6dabac9b353c5f4.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard Integrations&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/11b6388d3a690b63e6dabac9b353c5f4.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/11b6388d3a690b63e6dabac9b353c5f4.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/11b6388d3a690b63e6dabac9b353c5f4.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加认证信息。由于 EMQX Cloud 部署均默认开启认证，所以我们可以选择基础类型的认证，然后填入在 EMQX Cloud 认证页面中添加好的用户名和密码。点击测试连接，可以看到右下角弹出连接已经成功建立的信息提示，表示已经成功和 EMQX Cloud 部署集成。最后输入一个过滤主题 &lt;code&gt;/test/integration/emqxcloud&lt;/code&gt;（后续模拟测试时，我们需要用这个主题去发布一条消息），最后点击添加按钮，便成功添加好了与 EMQX Cloud 部署的集成。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/2724e29ed7c20a212b1943fb1af5e7ef.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard 添加认证&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/2724e29ed7c20a212b1943fb1af5e7ef.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/2724e29ed7c20a212b1943fb1af5e7ef.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/2724e29ed7c20a212b1943fb1af5e7ef.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;集成测试&quot;&gt;集成测试&lt;/h2&gt;
&lt;p&gt;在完成上述集成配置之后，我们使用 &lt;a href=&quot;https://mqttx.app/zh&quot;&gt;MQTT 5.0 客户端工具 - MQTT X&lt;/a&gt; 来模拟一个设备测试和验证该功能的有效性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 MQTT X 作为一个设备连接到 EMQX Cloud 部署。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/a68a6f4bf8c5a820ddeae0a8cc0561a1.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;MQTT 连接&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/a68a6f4bf8c5a820ddeae0a8cc0561a1.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/a68a6f4bf8c5a820ddeae0a8cc0561a1.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/a68a6f4bf8c5a820ddeae0a8cc0561a1.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;成功建立连接之后，向上述集成时配置的过滤主题 &lt;code&gt;/test/integration/emqxcloud&lt;/code&gt; 模拟发送一条设备上报的温湿度数据。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/1473095ddc466a3b4c70a48464dcc4f6.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;MQTT 消息发布&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/1473095ddc466a3b4c70a48464dcc4f6.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/1473095ddc466a3b4c70a48464dcc4f6.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/1473095ddc466a3b4c70a48464dcc4f6.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进入 ThingsBoard 中的设备组下的全部菜单中，可以看到这里已经显示了我们刚刚模拟的设备名称和温湿度数据。说明已经在 ThingsBoard 中成功集成 EMQX Cloud 部署。在 Integration with EMQX Cloud 集成详情页面中的 【Events】和【Relations】中也可以看到刚刚的模拟数据的相关信息。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/a5cb84135b42574037545323f5d9f9cc.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard MQTT&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/a5cb84135b42574037545323f5d9f9cc.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/a5cb84135b42574037545323f5d9f9cc.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/a5cb84135b42574037545323f5d9f9cc.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;自定义-dashboard-接入-mqtt-数据&quot;&gt;自定义 Dashboard 接入 MQTT 数据&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加一个新的 dashboard。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/20e58d1179dc986cb01f4cf4770e0eec.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;MQTT Dashboard&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/20e58d1179dc986cb01f4cf4770e0eec.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/20e58d1179dc986cb01f4cf4770e0eec.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/20e58d1179dc986cb01f4cf4770e0eec.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开 dashboard 点击右下角橙色的编辑图标，然后进行图中所示的操作新增一个 &lt;a href=&quot;https://thingsboard.io/docs/pe/user-guide/ui/aliases/&quot;&gt;别名&lt;/a&gt;（定义将使用实体的数据）。过滤类型选择单个实体，类型选择设备并选中上面 MQTT X 模拟的 Device Test 设备。添加完所有的配置信息之后，需要点击右下角的应用图标，否则将无法应用或保存之前已完成好的配置。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/ed50f4d33df96e8234b2d56a63d176f1.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;MQTT Device&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/ed50f4d33df96e8234b2d56a63d176f1.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/ed50f4d33df96e8234b2d56a63d176f1.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/ed50f4d33df96e8234b2d56a63d176f1.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新增一个时间序列表格小组件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;依旧在刚刚的页面点击右下角橙色编辑图标，进入编辑模式，然后点击新增小组件。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/0f5aaf9d830edb87e434d77222002095.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard 新增小组件&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/0f5aaf9d830edb87e434d77222002095.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/0f5aaf9d830edb87e434d77222002095.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/0f5aaf9d830edb87e434d77222002095.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入 Cards 进行搜索找到 Timeseries table 并点击进行配置。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/154d78106492cb0a924b298e9a0ef01b.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard Timeseries table&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/154d78106492cb0a924b298e9a0ef01b.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/154d78106492cb0a924b298e9a0ef01b.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/154d78106492cb0a924b298e9a0ef01b.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置刚刚选择的表格，实例别名选择上述设置好的别名，然后添加表格的键值，最后点击添加按钮。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/ed614116764ac3372bf607912a73f1f6.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard Timeseries table&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/ed614116764ac3372bf607912a73f1f6.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/ed614116764ac3372bf607912a73f1f6.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/ed614116764ac3372bf607912a73f1f6.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拖拽调整刚刚新增的表格大小，并且点击橙色勾图标应用按钮。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/c479513a6f18c02e969f7ae54be56d72.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard Timeseries table&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/c479513a6f18c02e969f7ae54be56d72.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/c479513a6f18c02e969f7ae54be56d72.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/c479513a6f18c02e969f7ae54be56d72.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们现在回到 MQTT X 改变温度值为 25，湿度为 80，再次发布一条消息，可以看到刚刚配置好的表格中便有了相应的数据。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/0d3fa3f604ce7261774bc85e7c66f57a.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard Timeseries table&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/0d3fa3f604ce7261774bc85e7c66f57a.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/0d3fa3f604ce7261774bc85e7c66f57a.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/0d3fa3f604ce7261774bc85e7c66f57a.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与上面第 3 步类似，我们点击添加小组件，搜索输入 charts ，然后选择 Timeseries Line Chart，进行配置且把实时时间范围改为最近 5 小时。使用 MQTT X 再次发送一条数据，可以看到两个组件中均展示了对应的数据。&lt;/p&gt;
&lt;p&gt;
                &lt;img src=&quot;https://assets.emqx.com/images/669296e788958c1375bcbc830ee5e2ab.png?imageMogr2/thumbnail/1520x&quot; alt=&quot;ThingsBoard Timeseries Line Chart&quot; sizes=&quot;(max-width: 640px) 100vw, (max-width: 768px) 100vw, 1520px&quot; srcset=&quot;&amp;#10;                        https://assets.emqx.com/images/669296e788958c1375bcbc830ee5e2ab.png?imageMogr2/thumbnail/640x   640w,&amp;#10;                        https://assets.emqx.com/images/669296e788958c1375bcbc830ee5e2ab.png?imageMogr2/thumbnail/768x   768w,&amp;#10;                        https://assets.emqx.com/images/669296e788958c1375bcbc830ee5e2ab.png?imageMogr2/thumbnail/1520x 1520w&amp;#10;                        &quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;至此，我们完成了在 ThingsBoard Cloud 中集成 EMQX Cloud 部署，并且使用 MQTT X 测试验证了集成功能，最后自定义配置了一个简单的 Dashboard 接入展示 MQTT 数据。在实际项目中，我们可以在深入学习了解 ThingsBoard 后，进行更复杂的 Dashboard 配置，能够更加形象具体地实时监控设备的相关数据，并设置告警阀值，接收告警信息并及时作出相应处理。&lt;/p&gt;
&lt;section class=&quot;promotion&quot;&gt;
    
    &lt;a href=&quot;https://www.emqx.com/zh/signup?continue=https://cloud.emqx.com/console/deployments/0?oper=new&quot; class=&quot;button is-gradient px-5&quot;&gt;开始试用 →&lt;/a&gt;
&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;相关文档推荐：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ThingsBoard 官方快速开始帮助文档：&lt;a href=&quot;https://thingsboard.io/docs/getting-started-guides/helloworld-pe/&quot;&gt;https://thingsboard.io/docs/getting-started-guides/helloworld-pe/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;EMQX Cloud 入门简介：&lt;a href=&quot;https://docs.emqx.com/zh/cloud/latest/quick_start/introduction.html&quot;&gt;https://docs.emqx.com/zh/cloud/latest/quick_start/introduction.html&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;ThingsBoard Uplink Data Convert 说明：&lt;a href=&quot;https://thingsboard.io/docs/paas/user-guide/integrations/#uplink-data-converter&quot;&gt;https://thingsboard.io/docs/paas/user-guide/integrations/#uplink-data-converter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;使用 ThingsBoard 告警：&lt;a href=&quot;https://thingsboard.io/docs/pe/user-guide/alarms/&quot;&gt;https://thingsboard.io/docs/pe/user-guide/alarms/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2e33dffaaad9cfd014e214fac5124143</guid>
<title>前端日志管理模块的设计与实现</title>
<link>https://toutiao.io/k/3vvmeex</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;给团队封装一个简单统一的日志管理工具/模块，来替换掉项目中野蛮生长的 &lt;code&gt;console.log()&lt;/code&gt;吧！&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大厂技术&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;高级前端&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Node进阶&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;点击上方 &lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(0, 128, 255)&quot;&gt;程序员成长指北&lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;，关注公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回复&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，加入高级Node交流群&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;一、问题背景 ⛰️&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在项目中，我们会频繁用到 &lt;code&gt;console.log()&lt;/code&gt; 来输出一些关键信息到控制台中，有助于开发调试，以及问题的排查，待项目上线后，这些调试日志又得及时清除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时在前端质量要求下，我们会做“前端埋点”，用于远程上报一些关键行为信息，用于在出问题时还原用户的操作路径，复现 BUG，从而解决问题，而各种各样的上报若是能在业务开发中抹平差异，也有助于研发提效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，有必要在团队中封装日志工具（Logger），用于统一管理日志输出和格式化上报，降低开发者对多平台上报差异的心智负担。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;二、需求概述 🧾&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;预期日志管理工具（Logger）需要有如下能力：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;支持区分 &lt;code&gt;info&lt;/code&gt;、&lt;code&gt;warn&lt;/code&gt;、&lt;code&gt;error&lt;/code&gt; 三种本地调试类型日志&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持远程上报自定义日志 &lt;code&gt;report()&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持设置 namespace，用于区分代码执行的 scope&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持链式操作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;区分生产环境和开发环境，生产环境禁止输出日志到控制台&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持功能可扩展&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三、方案设计 🖌️&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在阅读完 Axios 的源码后，个人认为 Axios 里对于设计模式的应用是非常灵活，同理，一个好的日志工具也应当遵守着一定的软件设计模式原则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为项目中用到的日志工具，单例模式应当是更适合的选择！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Logger 的打印输出能力，本质上还是借助了 &lt;code&gt;window.console&lt;/code&gt; 对象中的方法：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46882217090069284&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sQ040UzziaHQjJicI6Y2OOzicSVUQRXTU8fCFb21JG3Btt4icRg9949U2ctGjcynlgDiaE7pmkzK44aFiaygQk0VS3Xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1732&quot; title=&quot;Console 对象&quot;/&gt;&lt;figcaption&gt;Console 对象&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在面向对象编程中，我们可以认为 &lt;code&gt;console&lt;/code&gt; 是一个已经初始化的实例，同时也是一个单例，因为它是全局唯一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而单例模式的最大好处就是全局唯一，对于做日志统一管理有着天然的友好支持基础。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;四、实现细节 🔍&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来通过具体的代码，来逐一实现并完善我们的 Logger 日志工具类。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.1 ES Module 下的单例模式&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 ESM 规范下，我们可以直接通过直接导出实例方式（&lt;code&gt;export default new ClassName()&lt;/code&gt;），来实现单例模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Logger 的基础结构就有了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 日志打印工具，统一管理日志输出&amp;amp;上报&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt; Logger {&lt;br/&gt;  &lt;span&gt;/** 命名空间（scope），用于区分所在执行文件 */&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;constructor&lt;/span&gt;(&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; = &#x27;unknown&#x27;&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.namespace = &lt;span&gt;namespace&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Logger()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2 可扩展的单例模式&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考 &lt;span&gt;Axios 的设计&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;，因此我们还提供 &lt;code&gt;create()&lt;/code&gt; 方法，为创建新实例留一个入口方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 创建新的 Logger 实例&lt;br/&gt; * &lt;br/&gt; * @param namespace 命名空间&lt;br/&gt; * @returns Logger&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; create(&lt;span&gt;namespace&lt;/span&gt; = &lt;span&gt;&#x27;unknown&#x27;&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Logger(&lt;span&gt;namespace&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当需要重新定义一个 logger 实例时，就可以参考如下方式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; logger &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/utils/logger&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; newLogger = logger.create(&lt;span&gt;&#x27;custom&#x27;&lt;/span&gt;)&lt;br/&gt;logger.info(newLogger === logger) &lt;span&gt;// [unknown] false&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.3 定义“打印”类日志方法&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要区分 &lt;code&gt;info&lt;/code&gt;、&lt;code&gt;warn&lt;/code&gt;、&lt;code&gt;error&lt;/code&gt; 三种类型的日志，实现如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定义日志枚举类型：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; LogLevel {&lt;br/&gt;  &lt;span&gt;/** 普通日志 */&lt;/span&gt;&lt;br/&gt;  Log,&lt;br/&gt;  &lt;span&gt;/** 警告日志 */&lt;/span&gt;&lt;br/&gt;  Warning,&lt;br/&gt;  &lt;span&gt;/** 错误日志 */&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;Error&lt;/span&gt;,&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Styles = [&lt;span&gt;&#x27;color: green;&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;color: orange;&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;color: red;&#x27;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Methods = [&lt;span&gt;&#x27;info&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;warn&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;error&#x27;&lt;/span&gt;] &lt;span&gt;as&lt;/span&gt; &lt;span&gt;const&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; _log(level: LogLevel, args: unknown[]) {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!__DEV__) &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;[Methods[level]](&lt;span&gt;`%c&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.&lt;span&gt;namespace&lt;/span&gt;}&lt;/span&gt;`&lt;/span&gt;, Styles[level], ...args)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 打印输出信息 🐛&lt;br/&gt; *&lt;br/&gt; * @param args 任意参数&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; info(...args: unknown[]) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._log(LogLevel.Log, args)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 打印输出警告信息 ❕&lt;br/&gt; *&lt;br/&gt; * @param args 任意参数&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; warn(...args: unknown[]) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._log(LogLevel.Warning, args)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 打印输出错误信息 ❌&lt;br/&gt; *&lt;br/&gt; * @param args 任意参数&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; error(...args: unknown[]) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._log(LogLevel.Error, args)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;_log()&lt;/code&gt; 方法中，通过 &lt;code&gt;__DEV__&lt;/code&gt; 环境变量区分“生产”和“开发”：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; (!__DEV__) &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种变量可以理解为“&lt;strong&gt;开关&lt;/strong&gt;”：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生产环境则控制台不输出信息，在实际应用中，可以扩展“是否输出信息”的变量，来针对性扩展，例如线上需要通过特定参数展示调试日志，用于线上定位问题，那么就可以综合多个条件来决定是否输出控制台，毕竟编程最核心的问题是解决需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在开发模式下，针对不同的信息类型，会标注不同的颜色：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11623246492985972&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sQ040UzziaHQjJicI6Y2OOzicSVUQRXTU8fQCNFQyvIhRDGSREKpkd5U0ICSRX7hCXFPUx6Xm3AfDFGz5gCYWXKug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;998&quot; title=&quot;Chrome 浏览器下的效果&quot;/&gt;&lt;figcaption&gt;Chrome 浏览器下的效果&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与此同时，在每个“输出”方法中都返回了 &lt;code&gt;this&lt;/code&gt;（当前实例），因而便可以为&lt;strong&gt;链式调用方法&lt;/strong&gt;提供了使用基础。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.4 支持修改 namespace&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;namespace 最重要的作用是：&lt;strong&gt;区分在不同组件或文件下的日志&lt;/strong&gt;，便于问题定位排查。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 &lt;code&gt;Logger&lt;/code&gt; 将所有的输出集中到了统一文件，在 &lt;code&gt;console.log()&lt;/code&gt; 中文件定位永远是 &lt;code&gt;Logger&lt;/code&gt; 类定义实现所在文件，因此需要 namespace 来区分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新增 &lt;code&gt;setNamespace()&lt;/code&gt; 方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 设置命名空间（日志前缀）&lt;br/&gt; * @param namespace&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; setNamespace(&lt;span&gt;namespace&lt;/span&gt; = &lt;span&gt;&#x27;&#x27;&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.namespace = &lt;span&gt;`[&lt;span&gt;${&lt;span&gt;namespace&lt;/span&gt;}&lt;/span&gt;]`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;strong&gt;TypeScript&lt;/strong&gt; 环境下，会提供代码提示，例如某个文件下输出错误信息的方式：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3178294573643411&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sQ040UzziaHQjJicI6Y2OOzicSVUQRXTU8faBLdQTqaoD17qXHxqgThroS9dA0pFqbl8LHCiceo01dMdHlv7fibWUkw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1548&quot; title=&quot;使用演示&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 &lt;code&gt;setNamespace()&lt;/code&gt; 方法，并不是每次都需要调用的，只需在文件中调用一次即可。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.5 埋点远程上报&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一些关键时机，例如进入页面、点击“付费按钮”等一些关键操作上，一般会加上一些上报到远程，用于记录用户操作路径，以此便于在出现问题后，复现 BUG 并“对症下药”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而埋点上报一般有三类：&lt;strong&gt;代码埋点&lt;/strong&gt;、&lt;strong&gt;可视化埋点&lt;/strong&gt;、&lt;strong&gt;无痕埋点&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们这里通过给 Logger 增加远程上报的方式就是代码埋点&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般情况下，埋点上报属于“前端监控”方面，前端监控是一个独立的管理系统，它的职能是负责前端项目的监控、异常报警等，因此通常会有用于项目集成的前端 SDK&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了 Logger 实例，我们可以在 Logger 中直接统一集成“&lt;strong&gt;前端监控 SDK&lt;/strong&gt;”的主动上报方法即可！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Logger 类中新增三个方法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;reportLog()&lt;/code&gt;：上报日志&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;reportEvent()&lt;/code&gt;：上报事件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;reportException()&lt;/code&gt;：上报异常&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 远程上报&lt;br/&gt; * &lt;span&gt;TODO:&lt;/span&gt; 根据基建环境自定义扩展&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; reportLog() {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.info() &lt;span&gt;// 用于在本地输出&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; reportEvent() {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.info()&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; reportException() {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.error()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于为什么添加着两个方法，实际是根据“前端监控 SDK”提供的 API 来决定&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如常见的 “&lt;span&gt;Sentry - 应用监控错误溯源&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;” 平台，针对主动上报，提供了三种方法，通常为了保持一致性，降低心智负担，因此新增对应的三个上报方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的上报参数和逻辑，则需要大家根据自己的业务区扩展。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;五、Logger 的可扩展性 ⚙️&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面 Logger 类的实现，可以发现一个明显的问题，如果业务需要扩展功能，则需要修改 Logger 类内部的方法，Logger 类中的方法和逻辑，我们可以理解为是所有业务都通用的，业务定制化的功能应该通过额外扩展方式来完善。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那有没有什么办法，可以实现不修改方法，而扩展 Logger 的功能呐？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5.1 扩展方案&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有几个方案：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;继承 Logger 类扩展&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;增加回调函数作为参数&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人推荐第二个方案，但如果每一次调用，都按照如下方式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;logger.info(&lt;span&gt;&#x27;message&#x27;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这种设计比较粗糙&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5.2 拦截器&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考 Axios 的拦截器设计，也就是 AOP（面向切面编程模式）的设计思想，来扩展 &lt;code&gt;_log()&lt;/code&gt; 方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新增类型申明：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 日志的配置类型&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; LoggerConfigType = {&lt;br/&gt;  &lt;span&gt;/** 命名空间 */&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;namespace&lt;/span&gt;?: &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 拦截器函数类型&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; InterceptorFuncType = &lt;span&gt;(&lt;span&gt;config: LoggerConfigType&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将 Logger 的配置集中的 &lt;code&gt;config&lt;/code&gt; 私有变量中，并新增 &lt;code&gt;addBeforeFunc()&lt;/code&gt; 和 &lt;code&gt;addAfterFunc()&lt;/code&gt; 两个方法，用于新增自定义“拦截器”函数&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7784313725490196&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sQ040UzziaHQjJicI6Y2OOzicSVUQRXTU8fq9Ay0pdIFSxK1cGo4nCcicqyQr42zIuVP1sjzgHT1cng3U4C7YhX27w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2040&quot; title=&quot;通过拦截器 Looger 能力&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中一个细节是，日志打印之后的拦截器，按照&lt;strong&gt;FCLS&lt;/strong&gt;（First Come Last Serve，先到后服务）的策略，和 Axios 的响应拦截器执行顺序对齐，与此同时，拦截器函数中会注入当前 Logger 的 &lt;code&gt;config&lt;/code&gt; 配置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过简单的“&lt;strong&gt;拦截器&lt;/strong&gt;”，即可实现功能的扩展，这种方式的功能扩展不会影响到主体功能，后期的维护升级是无侵入性的，还算比较优雅的，是吧！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5.3 其他方案&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里还可以考虑更多设计，例如参考&lt;strong&gt;发布订阅设计模式&lt;/strong&gt;来改造，通过生命周期的关键点，被动触发，主动通知并执行所有订阅了对应消息的事件，可以参阅《&lt;span&gt;聊一聊发布订阅设计模式&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以用&lt;strong&gt;插件模式&lt;/strong&gt;方式来实现扩展，类似发布订阅模式，给 &lt;code&gt;_log()&lt;/code&gt; 函数添加执行的钩子函数🪝（回调函数），例如这种设计下，把“埋点上报”等功能拆分成插件，再实现一个简单的事件队列模型，集成一下子！&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;六、总结&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，一个基本的日志工具就实现完成了，但并未完完全全遵守设计原则，这里在生产实践中还需要封装、抽离相应“职责”，增加可维护性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在团队中以此作为基础结构，然后针对团队、项目、业务的特点做适当的扩展，构建符合当前团队特性的通用日志工具模块，应该也不是什么难事！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家如果有什么更好的方案，欢迎在评论区一起讨论🦆🦆🦆&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7466666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sQ040UzziaHQjJicI6Y2OOzicSVUQRXTU8fibicmSqyO5RYdNnkC1URNTiaSicJqXwD2TCjbdlhAoScY8QbAbvoB3PdvQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;150&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Axios 源码阅读笔记: &lt;em&gt;https://juejin.cn/post/7031945393826955294&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Sentry - 应用监控错误溯源: &lt;em&gt;https://sentry.io/welcome/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;聊一聊发布订阅设计模式: &lt;em&gt;https://juejin.cn/post/6991749405686628365&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c86d2baee4a68d3f64e58a7926ffa97c</guid>
<title>端智能在大众点评搜索重排序的应用实践</title>
<link>https://toutiao.io/k/7wlxj5b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.10078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUrXicw2VXTQTVVN5yxXWEacdY1ZdxTH195Pgibtib8EENJRMia3tzEnyVfgyfAgRibMssKqwlE186TLSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总第517&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2022年 第034篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;93&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;93&quot; data-ratio=&quot;0.9966329966329966&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVLR21NicmyQxcmiaqQ2KOJJj2JLwgJL4KSbo7CcuMF1hLf4xFjGQiaDRhSPyERxWGChWYP47Oc4sKGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;594&quot; data-width=&quot;100%&quot; opacity=&quot;&quot; title=&quot;undefined&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; data-style=&quot;text-align: left; font-size: 14px; color: inherit;&quot;&gt;&lt;section&gt;&lt;span&gt;端智能，是指在移动端设备运行人工智能（AI）应用的技术。本文主要讲述大众点评搜索场景下，在端侧部署大规模深度学习模型进行搜索重排序任务的实践方案，包括端上特征工程、模型迭代思路，以及具体部署优化的过程，希望能对从事相关领域开发的同学有所帮助或者启发。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1 引言&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2 排序系统进阶：为什么需要端上重排&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3 端上重排序算法探索与实践&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.1 特征工程&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.2 用户反馈行为序列建模&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.3 重排模型设计&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.4 多场景应用效果&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4 系统架构与部署优化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4.1 系统架构&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4.2 端上大规模深度模型部署优化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4.3 端智能模型训练预估平台&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;5 总结与展望&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1 引言&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;随着大数据、人工智能等信息技术的快速发展，云计算已经无法满足特定场景对数据隐私、高实时性的要求。借鉴边缘计算的思想，在终端部署 AI 能力逐渐步入大众的视野，“端智能”的概念应运而生。相比于传统的云计算，在智能手机等终端部署运行 AI 模块有以下几个方面的优势：首先，数据本地化可以缓解云存储的压力，也有利于用户数据的隐私保护；其次，计算的本地化可以缓解云计算过载问题；最后，端智能减少了和云端系统的请求通信成本，可以更好地利用用户在端上的交互，提供更加实时、个性化的服务体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在端智能的应用方面，国内外各大科技公司已经走在了前列。Google 提出了 Recommendation Android App 的概念，根据用户兴趣进行内容推荐；Apple 的 Face ID 识别、Siri 智能助手等一些我们熟知的产品，也都是端智能典型的应用代表。阿里巴巴、快手、字节跳动等企业也在各自的应用场景上进行了端智能的落地，并推出相应的端上模型推理框架。比如，快手上线的短视频特效拍摄、智能识物等功能。另外，在搜索推荐场景下也有一些实践，其中，手机淘宝“猜你喜欢”在端上部署了智能推荐系统，取得较为显著收益（&lt;/span&gt;&lt;span&gt;EdgeRec&lt;sup&gt;[1]&lt;/sup&gt;，双十一 IPV 提升 10%+，GMV 提升 5%+&lt;/span&gt;&lt;span&gt;）。快手上下滑推荐场景也应用了端上重排的方案，并取得 App 时长提升了 1%+ 的效果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;搜索是大众点评 App 连接用户与商家的重要渠道，越来越多的用户在不同场景下都会通过搜索来获取自己想要的服务。理解用户的搜索意图，将用户最想要结果排在靠前的位置，是搜索引擎最核心的步骤。为了进一步优化搜索个性化的排序能力，提升用户体验，搜索技术中心进行了在端上部署深度个性化模型的探索实践。本文主要介绍了端智能重排在大众点评 App 上的实践经验，文章主要分为以下三个部分：第一部分主要分析端智能重排要解决的问题和整体流程；第二部分会介绍端上重排序算法部分的探索实践过程；第三部分将介绍端上重排系统的架构设计以及部署优化，最后是总结与展望。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2 排序系统进阶：为什么需要端上重排&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.1 云端排序痛点&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;我们以一次完整的搜索行为，来看一下整个前后端执行的过程。如下图 1 所示，用户在手机端搜索入口发起检索请求后，触发云端服务器执行，包括查询理解、多路召回、模型排序与展示信息合并等处理，最终返回给客户端进行渲染呈现给用户。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;388&quot; data-ratio=&quot;0.6963541666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g54gEyoSSLukichzZ1PT81J8o3tZu3pheTibmiaHnyKpibibthYFlia1Va5JzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图1 搜索执行链路示意图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于整个系统的每秒查询数（&lt;/span&gt;&lt;span&gt;QPS&lt;/span&gt;&lt;span&gt;）的限制，以及前后端请求通信、传输包体影响，通常会采用分页请求机制。这种客户端分页请求，云端服务检索排序返回给用户最终展示列表的 Client-Server 架构，对于大众点评 LBS 场景、类推荐的搜索产品来说，存在以下两个问题：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;① &lt;strong&gt;列表结果排序更新延迟&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分页请求限制会导致排序结果的更新不及时。在下一个分页请求之前，用户的任何行为都无法对当前页内的搜索排序结果产生任何影响。以大众点评搜索结果页为例，一次请求返回 25 个结果到客户端，每屏展示约 3~4 个，那么用户需要滑动 6~8 屏左右，才能触发新的分页请求到云端获取下一页结果（&lt;/span&gt;&lt;span&gt;以美食频道列表页为例，有 20% 以上的搜索浏览超过一页结果&lt;/span&gt;&lt;span&gt;）。云端的排序系统无法及时感知用户的兴趣变化，并调整已下发到客户端的结果顺序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;382&quot; data-ratio=&quot;0.6833541927409261&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5TVETQl6AQPticJLZK6YPq6Xxw5uevySteTH0hvXNKX92zj2XdUyRHPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1598&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图2 分页浏览决策示意图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;② &lt;strong&gt;实时反馈信号感知延迟&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一般来说，实时反馈信号会通过 Storm、Flink 等流处理平台，将日志流以 Mini-batch 的方式计算后，存入 KV 特征数据库供搜索系统模型使用。这种方式往往会有分钟级的特征延迟，因为需要对反馈数据进行解析处理，当涉及到更多、更复杂的反馈数据时，这种延迟表现会更加明显。而实时反馈反映着用户的实时偏好，对于搜索排序的优化有着十分重要的意义。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2 端智能重排流程和优势&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;为了解决分页结果排序调整决策延迟，更及时地建模用户实时的兴趣偏好变化，我们在端上建设了重排序的系统架构，使得客户端具备深度模型推理能力，该方案具有以下几个方面的优势：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;支持页内重排，对用户反馈作出实时决策&lt;/strong&gt;：不再受限于云端的分页请求更新机制，具备进行本地重排、智能刷新等实时决策的功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;无延时感知用户实时偏好&lt;/strong&gt;：无需通过云端的计算平台处理，不存在反馈信号感知延迟问题。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;更好的保护用户隐私&lt;/strong&gt;：大数据时代数据隐私问题越来越受到用户的关注，大众点评 App 也在积极响应监管部门在个人信息保护方面的执行条例，升级个人隐私保护功能，在端上排序可以做到相关数据存放在客户端，更好地保护用户的隐私。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;端智能重排在大众点评搜索和美食频道页上线后，均取得显著效果，其中搜索流量点击率提升了 25BP（&lt;/span&gt;&lt;span&gt;基点&lt;/span&gt;&lt;span&gt;），美食频道页点击率提升了 43BP，Query平均点击数提升 0.29%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;487&quot; data-ratio=&quot;0.8734835355285961&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5xOccDmiazI003VYx6h8cibP6q0qFgWkzN0ATiaNThXKJlotybqsib2bLHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图3 端智能重排流程示意图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3 端上重排序算法探索与实践&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;重排序任务在搜索、推荐领域已有不少研究工作和落地实践，核心解决的问题是从 N 个结果候选中，生成 Top-K 个结果的排列。具体到端上的重排序场景，我们要做的主要工作是：根据用户对前面排序结果的反馈行为，生成候选商户上下文的排列，使得列表页整体的搜索点击率达到最优。下面将详细介绍，针对端上重排序场景，我们在特征工程、实时反馈序列建模以及模型结构做的一些探索与实践。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 特征工程&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;在端上建设特征工程的思路和云端搜索排序系统基本一致，User/Item/Query/Contextual 各个维度的基础、交叉特征可以快速复用到端上，当然需要考虑传输和存储优化，以及端、云特征系统的一致性，做到端云“无感”的开发部署，这部分内容会在后面架构&amp;amp;部署优化章节详细介绍。除此以外，还有一部分端上特色的用户实时反馈信号，包括更多细粒度的交互行为等，这些特征也是前文所分析的端上实时反馈决策优势的关键信号。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;227&quot; data-ratio=&quot;0.3918032786885246&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5jcqOO8mJZvCMoDZ78gVT8299Zdtz3Z36HJIGialbLfRwjUW2HWeDMrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1220&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;表1 特征体系&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;具体来说，在端上建设的重排模型特征体系如表 1 所示，主要包括以下几个方面：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基础特征，典型的用户/商户/Query/Context 侧特征，以及双侧的交叉特征等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;偏置特征，主要包括后端返回的排序位置，终端设备上存在的一些大小等视觉上的偏置。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户的实时反馈特征，这部分是整个端上重排特征体系的重要组成部分，包括：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户直接的交互行为序列（&lt;/span&gt;&lt;span&gt;曝光、点击等&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;行为关联特征，比如点击进入商户详情页内的停留、交互等相关行为。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 用户反馈行为序列建模&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;对于用户反馈序列的建模，业界有非常多的算法方案，比如我们所熟知的 DIN（&lt;/span&gt;&lt;span&gt;Deep Interest Network&lt;sup&gt;[10]&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;）、DIEN（&lt;/span&gt;&lt;span&gt;Deep Interest Evolved Network&lt;sup&gt;[11]&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;）以及基于 Transformer 的 BST（&lt;/span&gt;&lt;span&gt;Behavior Sequence Transformer&lt;sup&gt;[12]&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;）等等。端上排序场景里，对于用户反馈行为序列的应用会很大程度影响到算法的效果。因此，我们也在这个方面进行了一些探索。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;引入深度反馈网络&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在云端的精排模型优化工作中，我们一般只考虑用户和商户显式的“正反馈”行为（&lt;/span&gt;&lt;span&gt;包括点击、下单等&lt;/span&gt;&lt;span&gt;），隐式的曝光未点击“负反馈”信号则少有引入，因为长短期的历史行为中，此类曝光未点击行为非常多，相比于点击信号噪音很大。对于端上来说，这种实时的曝光“负反馈”信号也很重要。比如，对于同一品牌的某类商户实时多次曝光后，该品牌商户的点击率会呈明显的下降趋势。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于实时反馈序列中曝光未点击的隐式负反馈信号占了较大的比例，作为一个整体序列进行建模，对稀疏的正反馈信号存在较大的主导影响。阿里巴巴在淘宝首页信息流推荐场景下也提出了一种基于对抗的方式，来挖掘曝光、点击行为序列之间的联系，从而寻找当前曝光序列当中有哪些行为是真正的负反馈，而哪些行为与点击有更相近的关系。微信团队提出了深度反馈网络 DFN&lt;sup&gt;[4]&lt;/sup&gt;，通过引入正负反馈信号的交互作用关系，进行一定程度的去噪、纠偏。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，基于 DFN 的优化思路，我们对反馈序列进行拆分，生成正负反馈序列，利用 Transformer 进行正负反馈信号的 Cross Attention 交互作用。具体来说，以曝光序列和点击序列为例，曝光行为序列作为 Query，点击行为序列作为 Key 和 Value，得到曝光行为序列对点击行为序列的 Attention 结果。同理，再调换一下得到点击行为序列对曝光行为序列的 Attention 结果。考虑到正反馈信号的稀疏性，当仅有负反馈序列时，会计算得到一些平均的无关噪音权重。因此，我们参考&lt;sup&gt;[7]&lt;/sup&gt;的做法，在负反馈序列中引入全零的向量，来消除这种潜在的噪音。具体模型结构如下图 4 所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;358&quot; data-ratio=&quot;0.6182857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5a8IVIEXYdzms9sXKbJ3Un0ec1JocsY5VgaI65VCqVicW2TOsUhXQ7Jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1750&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图4 正负反馈交叉 Attention 结构图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;提升负反馈信号的信噪比&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;初版模型在美食频道列表页上线后，相比 Base 取得 0.1% 的稳定提升，但是和离线的收益对比还有一些差距，不太符合我们的预期。经过消融实验分析发现，主要原因是负反馈信号中存在大量噪音，而噪音产生的根源是因为部分曝光商户的点击行为可能发生在特征收集的时刻之后。因此，为了提高负反馈信号的信噪比，我们对于负反馈信号的曝光时间进行了限制，长时间曝光但未点击的商户更有可能是真实负反馈信号。如下图 5 所示，更长的停留可以关联到更稳定的反馈信号，线上效果更优。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;333&quot; data-ratio=&quot;0.576171875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g59v9VQuhITJT2SD7UicmvgPO24tvDdCFljPZibe6Ztw0jcyjS99nKAE2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图5 停留时长-点击率效果对比&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;多视角的正负反馈序列交叉建模&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在初版正负反馈序列模型的基础上继续迭代，我们关注到在调整 Transformer 中 Multi-Head 的数目时，并没有预期的增量收益，相比仅使用一个 Head 指标无明显变化。经过分析，我们怀疑这种通过随机初始化的生成的多头表征，很大程度上只是单纯参数量上的扩充。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，在大众点评搜索场景下，同 Query 下商户列表整体的相关度比较高，尤其对页内的结果来说，同质度更高。差异性主要体现在比如价格、距离、环境、口味等细粒度的表征上面。因此，我们设计了一种多视角的正负反馈序列交叉建模方式 Multi-View FeedBack Attention Network （&lt;/span&gt;&lt;span&gt;MVFAN&lt;/span&gt;&lt;span&gt;），来强化曝光、点击行为在这些感知度更高的维度上的交互作用。具体网络结构如下图 6 所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;251&quot; data-ratio=&quot;0.4341801385681293&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5It87ovJHibn1bjFkn90yjNJGLhGnj8YRaibgXpzedgqNfeFSeXfsjlgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1732&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图6 Multi-View FeedBack Attention Network 结构图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;用户行为序列按反馈类型切分为点击正反馈和曝光未点负反馈，序列除了 shopid 本身，还补充了更多泛化的属性信息（&lt;/span&gt;&lt;span&gt;包括类目、价格等&lt;/span&gt;&lt;span&gt;），以及上下文相关的特征（&lt;/span&gt;&lt;span&gt;比如经纬度、距离&lt;/span&gt;&lt;span&gt;）。这些序列 Embedding 后叠加，形成最终正负反馈序列的表征。接下来会使用多级的 Transformer 进行编码，输入多个维度的信号去解码，激活用户在不同商户维度上的偏好：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用待排商户 ID 作为 Q，对实时反馈行为进行激活，表达用户隐形的多样性兴趣。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用商户更多表现粒度的属性信息作为 Q，激活得到注意力权重，提升用户在这些更显式感知的商户表征上的兴趣表达。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用当前搜索上下文相关的信号作为 Q，激活得到注意力权重，增强实时反馈行为对于不同上下文环境的自适应地表达。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VauYtEy29UtYnRicAFRjUyh3sUvZ5IZPXJaSVVjuibOZ2s9uibeAB5KFocDUAV0Mjq2iam4jDxqAob5D7/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/span&gt;&lt;span&gt;，&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 11309.1 840.8&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4B&quot; d=&quot;M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1166.8, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2222.6, 0)&quot;&gt;&lt;path data-c=&quot;56&quot; d=&quot;M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3269.3, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(4325.1, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(572, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5501, 0)&quot;&gt;&lt;path data-c=&quot;2295&quot; d=&quot;M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(6501.2, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(572, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(7429.4, 0)&quot;&gt;&lt;path data-c=&quot;2295&quot; d=&quot;M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(8207.4, 0)&quot;&gt;&lt;path data-c=&quot;2E&quot; d=&quot;M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(8652, 0)&quot;&gt;&lt;path data-c=&quot;2E&quot; d=&quot;M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(9096.7, 0)&quot;&gt;&lt;path data-c=&quot;2E&quot; d=&quot;M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(9541.4, 0)&quot;&gt;&lt;path data-c=&quot;2295&quot; d=&quot;M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(10319.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(572, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;64&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 表示各种反馈序列（shop_id/category/distance/position等）相加，作为 Transformer 的输入，Multi-View 的注意力结构可以由以下公式表示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;MultiHead(Q, K, V) = Concat(head_1, head_2, ..., head_h) W^O&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VauYtEy29UtYnvRBkeiaZiaaOBlzQllgIw2icuLgwANVMkC8HefXJBUe96d64m0g8DQ0p4sf4uZicFLeK/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;head_i = Attention(Q_iW^{Q_i}, KW_i^K, VW_i^V)&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VauYtEy29UtYnyk4Cu5xAsNaGnicOhibL1PZVN5gr1jA6wic7SDtOltMVV68qoUAKSKSSJjpNAfVuREf/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;Attention(Q_i, K, V) = softmax(\frac{Q_iK^T}{\sqrt{d_k}})V&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VauYtEy29UtYnr6U6CMIe5iaXQDC1wiakDLKRHLA6R4iaupiafB69npubLLX0hSiaeSD4JthvIynnHR3z9/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;通过消融对比实验发现，相比于随机初始化的 Multi-Head Attention，这种显式使用多种商户上下文特征的 Transformer 激活方式效果更显著。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Match&amp;amp;Aggregate 序列特征&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于端上的用户实时反馈特征，除了各种常用的基于 Attention 的序列建模方式，还有一种采用显式交叉的兴趣提取方式。如图 7 所示，相比于一般基于 Embedding 内积计算“Soft”权重的 Attention 建模，它可以理解为一种“Hard”的 Attention 方式，提取的形式包括：Hit（&lt;/span&gt;&lt;span&gt;是否命中&lt;/span&gt;&lt;span&gt;）、Frequency（&lt;/span&gt;&lt;span&gt;命中多少次&lt;/span&gt;&lt;span&gt;）、Step（&lt;/span&gt;&lt;span&gt;间隔多久&lt;/span&gt;&lt;span&gt;）等等，除了单变量序列的交叉，还可以组合多个变量进行交叉，来提升行为描述的粒度和区分度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;317&quot; data-ratio=&quot;0.5659163987138264&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5aibIwpZZJqiadTNeqJvJukwTJaeRP0MqKuSOcPDib4nPCKqSuiaAhDR0vA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1244&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图7 Attention、Match&amp;amp;Aggregate 序列特征提取对比图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这种基于先验知识引入的反馈序列交叉特征，可以一定程度上避免“Soft” Attention 方式引入的一些噪音信息，同时也具有更好的可解释性。比如，用户在搜索“火锅”时，没有选择附近的商户，而点击了常住地附近的历史偏好商户，这种场景下存在明显的信号说明用户提前决策的意图。这时，加入一些显式的强交叉特征（&lt;/span&gt;&lt;span&gt;例如，待排商户距实时点击商户的距离等&lt;/span&gt;&lt;span&gt;）就能非常好的捕捉这种意图，从而把距离远但和用户意图更匹配的相关商户排上来。在大众点评搜索的场景下，我们基于该方式引入了大量的先验交叉特征，也取得了较为显著的效果。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3 重排模型设计&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;关于重排序的研究，目前业界也有不少相关的工作，包括：基于贪心策略优化多目标的 MMR（&lt;/span&gt;&lt;span&gt;Maximal Marginal Relevance&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt; &lt;sup&gt;[8]&lt;/sup&gt;，直接建模上下文作用关系的 Context-aware List-wise Model&lt;sup&gt;[2,3]&lt;/sup&gt; 以及基于强化学习的方案&lt;sup&gt;[9]&lt;/sup&gt;等。在搜索端智能重排场景上，我们采用了基于 Context-aware List-wise 的模型进行构建，通过建模精排模型生成的 Top-N 个物品上下文之间的互相影响关系，来生成 Top-K 结果。整体模型结构如下图 8 所示，主要包括端云联动的训练方案，以此来引入更多云端的交互表征；以及基于 Transformer 的上下文关系建模，下面将分别进行介绍。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;536&quot; data-ratio=&quot;0.9280898876404494&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5PZpvjppG4UByoAYJsLDwtagB8HUkCicmPaQeRyRHUwx2pFiaxHRyrKdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;890&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图8 整体模型结构图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;端云联合训练&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一般来说，云端的重排序模型基本都复用精排层的特征，并在此基础上加入精排输出的位置或者模型分。大众点评搜索精排模型经过长期的迭代更新，已经建设了大量的基础、场景相关特征，以及建模了包括点击、访购等多个联合目标，这些大规模维度的特征和多目标优化在端上直接复用存在巨大的计算开销、存储&amp;amp;传输压力。而仅使用云端模型位置或者预估分输出，则不可避免的会损失掉很多端云特征的交叉表达能力。同时，对于到端云两侧的模型迭代、更新，还会存在较大的维护成本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此，我们采用端云联合训练的方式把大量的云端特征交叉信号，以及多目标高阶表征引入到端上使用。如图 9 所示，云端的模型训练收敛后，加入到端上重排任务继续 Fine-tune 更新。需要注意的是：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;因为搜索精排层使用的是 ListWise 的 LambdaLoss，模型输出的预估分仅有相对的大小意思，不能表示商户的点击率预估范围，无法进行全局的绝对值使用。故仅采用网络的最后一层输出接入。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;仅接入最后一层的 Dense 输出，大大损失了云端特征与端上特征的交叉能力，因此，需要通过特征选择方式，选取头部特征加入到云端进行使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;403&quot; data-ratio=&quot;0.6972477064220184&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5DgaEsEcBVibwc4wp9Cz316kJicI7Z2ejSWiaSmib3ylRELVUrzkrgObZzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1308&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图9 端云联合训练模型结构图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;重排商户上下文建模&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;商户上下文重排建模结构参考 PRM&lt;sup&gt;[3]&lt;/sup&gt;，结合端上应用场景做了一些调整，具体结构如下图 10 所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;162&quot; data-ratio=&quot;0.2797319932998325&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g53PkWqcjG15DvcSEjicYPEnpBibwDtow8xf3qWwTMKVFEOGwQxWicRt2YA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1194&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图10 重排算法模型结构图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主要由以下几个部分构成：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;商户特征向量 X ：由前文所述的各方面特征（&lt;/span&gt;&lt;span&gt;User/Shop 单、双侧统计交叉特征、反馈序列编码特征，以及云端融合输出的特征&lt;/span&gt;&lt;span&gt;）经过全连接映射后的输出进行表示。该输出已包含位置信息，所以后续的 Transformer 输入不需要再增加位置编码。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;输入层需要进过 Query Dynamic Partition 处理，切分为每个 Query 单元的上下文商户序列，再输入到 Transformer 层进行编码。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Transformer 编码层：通过 Multi-Head Self-Attention 编码商户上下文关系。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;优化目标&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在搜索场景下，我们关注的还是用户搜索的成功率（&lt;/span&gt;&lt;span&gt;有没有发生点击行为&lt;/span&gt;&lt;span&gt;），不同于推荐、广告场景往往基于全局性损失预估 item 的点击率，搜索业务更关心排在页面头部结果的好坏，靠前位置排序需要优先考虑。因此，在重排提升用户搜索点击率目标的建模中，我们采用了 ListWise 的 LambdaLoss，梯度更新中引入 DeltaNDCG 值来强化头部位置的影响。详细推论和计算实现过程参见&lt;/span&gt;&lt;a href=&quot;https://tech.meituan.com/2019/01/17/dianping-search-deeplearning.html&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;大众点评搜索基于知识图谱的深度学习排序实践&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;C = \frac{1}{2}(1 - S{ij})\sigma(s_i - s_j) + log(1 + e^{-\sigma (s_i-s_j)})&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VauYtEy29UtYnJT79puZGODJ3y2YASjIOHWums7BA1rtyxNSkj6ITnXvat1uzdfrLG0rCLK4RBLmY/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\lambda_{ij} = \frac{\partial C(s_i - s_j)}{\partial s_i} = \frac{-\sigma}{1 + e^{\sigma (s_i-s_j)}}| \Delta _{NDCG}|&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VauYtEy29UtYnLXsjmJnrF5KhzsGPUprkicsxRVMTKYNBqOoEG7jSic55ibibsicLUibH85LkGEo8Xu9RUO/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.4 多场景应用效果&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;综合上述特征&amp;amp;模型优化举措，相关的离线实验指标效果对比如表 2 所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;259&quot; data-ratio=&quot;0.4482288828337875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5icOoB0vDPNVpQFUHzresREeeZat5La1LuA0z5m4XnWkFiazUyEPcZ75A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1468&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;表2 实验迭代指标对比数据表&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;端智能重排序在点评主搜和美食频道列表页上线 AB 实验，核心业务指标 QV_CTR 均在高位基础上取得显著提升。如图 11 所示，上半部分，主搜列表页 QV_CTR 提升 0.25%，美食频道列表页 QV_CTR 提升 0.43%，分端表现稳定正向。另外，从下半部分分位置的点击率对比曲线，可以看出，端上重排能够一定程度上缓解固定分页请求的点击衰减效果，尤其在靠后的几屏展示上都有比较显著的提升。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;388&quot; data-ratio=&quot;0.6708015267175572&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5p5Uz3czdfyW5c3LZc6mg7a4QrnDicY4XEs7BVibSL2oFThMvenL98eOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2096&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图11 线上 AB 实验 QV_CTR 指标效果 &amp;amp; 分位置点击率对比&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4 系统架构与部署优化&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;不同于云端的大规模深度模型上线，几百 GB，甚至上 T 的模型都可以通过扩充机器分片加载的分布式方案部署使用。终端设备的计算和存储能力虽然有了显著提升，可以支持一定规模的深度模型进行推理，但相对来说，端上的存储资源是非常受限的，毕竟 App 整体的大小最多不过几百 MB。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此，除了前面提到的在特征选择、触发决策控制上对效果与性能进行权衡外，我们还在模型部署、压缩上做了进一步优化，并对能耗等各方面指标进行详细的评估。另外，为了更高效地迭代端上的模型，包括进一步挖掘用户实时的兴趣偏好特征，自研了一套和云端系统流程一致的“端无感”模型训练、预估框架，下面会逐步展开介绍。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1 系统架构&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;整体的端智能重排系统架构，包括和云端的搜索排序系统联合部署方案如图 12 所示。具体来说，主要有以下三大模块来支持端上重排系统的实现：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;智能触发方案模块，针对业务设计的各类触发事件，执行端上智能模块的调度。例如，用户点击商户行为触发执行本地重排。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;端上重排服务模块，执行构建特征数据，并调用端侧推理引擎运行重排模型，进行打分输出。其中：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;特征处理部分，是搜索技术中心针对搜/推/广算法场景，专项设计的一套方便算法使用的通用特征算子处理服务。支持对客户端、云端的各种类型数据，使用轻量、简便的表达式构建特征。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;端侧推理引擎部分，是终端研发中心输出的统一模型管理框架，支持各类端上轻量级推理引擎部署，以及模型的动态下发控制等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Native 重排处理逻辑部分，主要进行重排输出后的结果回插，刷新控制处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;269&quot; data-ratio=&quot;0.4650837988826816&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5cqic4sUGeH5BW9pvTAI7NF1iadU7Zu4ibNVKO1F7otYlH0XA27As52MrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1432&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图12 端智能重排系统架构&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2 端上大规模深度模型部署优化&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Sparse Embedding 与 Dense 网络拆分部署&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为端上的计算资源受限，无法存储完整的超大规模参数模型，因此，基于最直观的思路，我们将离线训练的模型参数拆分成了 Dense 网络与大规模 ID 特征的 Embedding Table 分别部署：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;主 Dense 网络以及一些较小的 Query/Contextual 特征、Shop 基础属性特征等输入层结构，转化成 MNN 格式，存储在美团资源管理平台上，供客户端启动时一次性拉取，存储在客户端本地。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;大规模的 ID 特征 Embedding Table 部分（&lt;/span&gt;&lt;span&gt;占整体网络参数量的 80%&lt;/span&gt;&lt;span&gt;），存储在云端的 TF-Servering 服务中，在客户端发起搜索请求时，会从 Serving 服务中获取当前页商户结果所对应的 Embedding 特征，与商户结果列表一同下返回到客户端，与客户端构建的其余特征一起 Concat 后，输入到推理引擎进行打分重排。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;模型压缩&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;经过上一步拆分处理，模型大小可以控制在 10MB 以内，为了进一步减少模型在手机端的空间占用，以及功耗/性能影响，我们采用了美团视觉智能部提供的压缩方案。该方案针对现有的神经网络模型压缩技术没有考虑要契合部署的端智能设备、压缩后的模型往往不能适配特定的设备、输出结果对齐度差等问题，设计了能更好用于移动端上部署的神经网络压缩工具，更好地在端上推理框架上发挥了性能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;压缩优化后从下面的测试对比数据可以看到，模型大小进一步减小到 1MB 以内，同时精度损失在十万分位差距。采用 Sysdiagnose 进行耗电分析，开启推理功能，重复动作：从首页搜索“火锅/五角场”，进入搜索列表页进行首次重排推理，滑动列表再次计算后，退出页面（&lt;/span&gt;&lt;span&gt;测试时间为 10 分钟，间隔 20 秒采用一次&lt;/span&gt;&lt;span&gt;），相关的能耗指标均无显著的变化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;247&quot; data-ratio=&quot;0.4268060836501901&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g5Nkq0Wia56hEj5yre60OMoqmZVSroeVYiaw5RzLvuTv206YCiaRwHicFXEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2104&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图13 模型压缩数据、能耗相关指标对比&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3 端智能模型训练预估平台&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;不同于云端的排序算法实验流程，已经有成熟、完善的训练预估平台支持，特征&amp;amp;模型上线非常便捷、高效。客户端的实验流程前期存在非常大的迭代效率问题，比如模型的上线流程繁琐，包括模型结构的分离、转换&amp;amp;验证以及发布依赖大量的人工操作，跟多个内部平台的流转、对接；另外特征迭代效率低下，需要客户端协同开发相应的特征加工逻辑，存在较大的逻辑一致性风险，而且还会存在分端的实现差异等问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基于此，美团的前后端工程合力推进开发、设计了一套适配客户端的 Augur 特征处理框架，将端上的模型发布和特征处理与一站式实验平台（&lt;/span&gt;&lt;span&gt;Poker&lt;/span&gt;&lt;span&gt;）、统一预估框架（&lt;/span&gt;&lt;span&gt;Augur&lt;/span&gt;&lt;span&gt;）进行打通，为进一步的算法迭代实验奠定了良好的基础，后续搜索技术中心团队也会向大家介绍面向端智能算法应用的一站式模型训练预估平台，敬请期待。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;469&quot; data-ratio=&quot;0.8119791666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVnF3uNzPUqFibSsd9okia9g50nLfv3ibVWdpEut4zWIlamkaeA59ILKlyAKscnQLYbXVKURpOyrgUicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图14 端智能模型训练预估框架图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5 总结与展望&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;端智能重排序是大众点评搜索在边缘计算方向的一次探索实践，并且在核心指标上取得了较为显著的效果。通过利用端上计算的能力，更高效地捕捉用户的实时兴趣偏好，弥补云端服务决策延迟、用户反馈信息获取延迟等问题。及时调整未曝光候选结果的顺序，把更符合用户意图的商户排上来，从而带来更好的用户搜索触达体验。同时，我们对前后端训练、部署预估框架进行了升级，为后续进一步快速迭代实验奠定了良好的基础。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大众点评搜索技术中心团队会持续进行端智能技术在各个业务场景中的落地，未来可以探索优化的方向还包括：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于联邦学习模式，进一步在保证数据隐私安全及合法合规的基础上，迭代端云联合的智能搜索排序模型。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;建模更精确、多样的触发控制策略，对于端上实时用户意图感知的决策模块，当前的控制策略还比较简单。后续我们会考虑结合 Query 上下文，用户反馈信号等特征输出更灵活的预判信号，同时请求云端，获取更多符合用户当前意图的候选结果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;继续优化重排序模型，包括实时反馈序列建模算法，探索对于隐式负反馈信号更鲁棒的编码表达方式等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;思考端上更丰富、灵活的应用场景，比如模型的个性化定制，做到“千人千模”的极致个性化体验。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;[1] Yu Gong, Ziwen Jiang, et al. &quot;EdgeRec: Recommender System on Edge in Mobile Taobao&quot; arXiv preprint arXiv:2005.08416 (2020).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[2] Qingyao Ai, Keping Bi, et al. &quot;Learning a Deep Listwise Context Model for Ranking Refinement&quot; arXiv preprint arXiv:1804.05936 (2018).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[3] Changhua Pei, Yi Zhang, et al. &quot;Personalized Re-ranking for Recommendation&quot; arXiv preprint arXiv:1904.06813 (2019).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[4] Ruobing Xie, Cheng Ling, et al. &quot;Deep Feedback Network for Recommendation&quot; (IJCAI-2020).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[5] 非易、祝升等. &lt;/span&gt;&lt;a href=&quot;https://tech.meituan.com/2019/01/17/dianping-search-deeplearning.html&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;大众点评搜索基于知识图谱的深度学习排序实践.&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[6] 肖垚、家琪等. &lt;/span&gt;&lt;a href=&quot;https://tech.meituan.com/2020/04/16/transformer-in-meituan.html&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Transformer 在美团搜索排序中的实践.&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[7] Qingyao Ai, Daniel N Hill, et al. &quot;A zero attention model for personalized product search&quot; arXiv preprint arXiv:1908.11322 (2019).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[8] Teo CH, Nassif H, et al. &quot;Adaptive, Personalized Diversity for Visual Discovery&quot; (RecSys-2016).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[9] Eugene Ie, Vihan Jain, et al. &quot;SLATEQ - A Tractable Decomposition for Reinforcement Learning with Recommendation Sets&quot; (IJCAI-19).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[10] Zhou, Guorui, et al. &quot;Deep interest network for click-through rate prediction.&quot; (SIGKDD-2018).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[11] Zhou, Guorui, et al. &quot;Deep interest evolution network for click-through rate prediction.&quot; (AAAI-2019).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[12] Chen, Qiwei, et al. &quot;Behavior Sequence Transformer for E-commerce Recommendation in Alibaba.&quot; arXiv preprint arXiv:1905.06874 (2019).&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文作者&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;祝升、刘哲、汤彪、嘉炜、凯元、杨乐、洪晨、曼曼、华林、孝峰、张弓等，来自美团/大众点评事业部/搜索技术中心。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;逸然、朱敏，来自美团平台/搜索与NLP部/工程研发中心。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;----------  END  ----------&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;招聘信息&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-source=&quot;bj.96weixin.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;美团/点评事业部-搜索技术中心，致力于打造一流的搜索系统和搜索体验，满足大众点评用户的多样搜索需求，支撑各业务在大众点评 App 上的搜索需求。欢迎感兴趣的同学发送简历至：&lt;/span&gt;&lt;span&gt;edp.itu.zhaopin@meituan.com&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;strong/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;美团科研合作&lt;/span&gt;&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;section data-source=&quot;bj.96weixin.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;美团科研合作致力于搭建美团各部门与高校、科研机构、智库的合作桥梁和平台，依托美团丰富的业务场景、数据资源和真实的产业问题，开放创新，汇聚向上的力量，围绕人工智能、大数据、物联网、无人驾驶、运筹优化、数字经济、公共事务等领域，共同探索前沿科技和产业焦点宏观问题，促进产学研合作交流和成果转化，推动优秀人才培养。面向未来，我们期待能与更多高校和科研院所的老师和同学们进行合作。欢迎老师和同学们发送邮件至：&lt;span&gt;meituan.oi@meituan.com &lt;/span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;也许你还想看&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  | &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765674&amp;amp;idx=1&amp;amp;sn=55f3a13f9b2ecc1b0c28a76e76b35727&amp;amp;chksm=bd1262e78a65ebf12783a6b593cef4f8fe0a5b1f41eac019ce707ff01cc9c307e6febcefc634&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;美团搜索多业务商品排序探索与实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765674&amp;amp;idx=1&amp;amp;sn=55f3a13f9b2ecc1b0c28a76e76b35727&amp;amp;chksm=bd1262e78a65ebf12783a6b593cef4f8fe0a5b1f41eac019ce707ff01cc9c307e6febcefc634&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;美团搜索多业务商品排序探索与实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;美团搜索多业务商品排序探索与实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt;&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651750220&amp;amp;idx=1&amp;amp;sn=42df36757a7007808c56b53ee6832713&amp;amp;chksm=bd12a6018a652f17de2f66e28ba203bde1e8ae22155687fd3abe73b0336900a855c057e6ad38&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;大众点评搜索基于知识图谱的深度学习排序实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;大众点评搜索基于知识图谱的深度学习排序实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651752351&amp;amp;idx=1&amp;amp;sn=f2654948de066c0e49e07032b868ac35&amp;amp;chksm=bd125ed28a65d7c4e5bc3a0f8b025c021479005cf88e39c663f0961c89bd2dc64c94cf2e05ee&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;智能搜索模型预估框架的建设与实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;智能搜索模型预估框架的建设与实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阅读更多&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;---&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765958&amp;amp;idx=1&amp;amp;sn=8201546812e5a95a2bee9dffc6d12f00&amp;amp;chksm=bd12658b8a65ec9de2f5be1e96796dfb3c8f1a374d4b7bd91266072f557caf8118d4ddb72b07&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;前端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://t.1yb.co/jo7v&quot; textvalue=&quot; 安全&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765981&amp;amp;idx=1&amp;amp;sn=c2dd86f15dee2cbbc89e27677d985060&amp;amp;chksm=bd1265908a65ec86d4d08f7600d1518b61c90f6453074f9b308c96861c045712280a73751c73&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;算‍法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;算法&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765982&amp;amp;idx=1&amp;amp;sn=231b41f653ac7959f3e3b8213dcec2b0&amp;amp;chksm=bd1265938a65ec85630c546169444d56377bc2f11401d251da7ca50e5d07e353aa01580c7216&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;后端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765964&amp;amp;idx=1&amp;amp;sn=ab6d8db147234fe57f27dd46eec40fef&amp;amp;chksm=bd1265818a65ec9749246dd1a2eb3bf7798772cc4d5b4283b15eae2f80bc6db63a1471a9e61e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数‍据&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;数据&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765965&amp;amp;idx=1&amp;amp;sn=37e0c56c8b080146ce5249243bfd84d8&amp;amp;chksm=bd1265808a65ec96d3a2b2c87c6e27c910d49cb6b149970fb2db8bf88045a0a85fed2e6a0b84&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;安‍全&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;安全&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765972&amp;amp;idx=1&amp;amp;sn=afe02ec92762c1ce18740d03324c4ac3&amp;amp;chksm=bd1265998a65ec8f10d5f58d0f3681ddfc5325137218e568e1cda3a50e427749edb5c6a7dcf5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;And‍roid&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Android&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765973&amp;amp;idx=1&amp;amp;sn=32a23bf1d278dda0398f993ab60a697e&amp;amp;chksm=bd1265988a65ec8e630ef4d24b4946ab6bd7e66702c1d712481cf3c471468a059c470a14c30d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;iO‍S&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;iOS&lt;/span&gt;&lt;/a&gt;&lt;span&gt; &lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765963&amp;amp;idx=1&amp;amp;sn=a3de9ef267d07d94118c1611776a4b28&amp;amp;chksm=bd1265868a65ec906592d25ad65f2a8516338d07ec3217059e6975fc131fc0107d66a8cd2612&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运‍维&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;运维&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765974&amp;amp;idx=1&amp;amp;sn=763c1e37d04acffd0142a2852ecfb000&amp;amp;chksm=bd12659b8a65ec8dfcfeb2028ef287fae7c38f134a665375ba420556ce5d2e4cf398147bd12e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;测‍试&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;测试&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5NjQ5MTI5OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVGibnsaEib3aNlqF0tOrA2RGEmNSbia2nnohE4Tpf95UyTiaSjDVbHRfY8WNBeTuLLTaVdSckkNyEx1Q/0?wx_fmt=png&quot; data-nickname=&quot;美团技术团队&quot; data-alias=&quot;meituantech&quot; data-signature=&quot;10000+工程师，如何支撑中国领先的生活服务电子商务平台？数亿消费者、数百万商户、2000多个行业、几千亿交易额背后是哪些技术在支撑？这里是美团、大众点评、美团外卖、美团配送、美团优选等技术团队的对外窗口。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>