<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>b93b512443ed8f91b10007c6fa41f47e</guid>
<title>秋天的第一份 IT 技术周刊 | 码农周刊第 320 期</title>
<link>https://toutiao.io/k/9ew44gv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;秋天的第一份 IT 技术周刊 | 码农周刊第 320 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第320期（2020-09-29）&lt;/h2&gt;
        &lt;p&gt;☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=320&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3200&quot; target=&quot;_blank&quot;&gt;秋天的第一份 IT 技术周刊，请查收！&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;a href=&quot;https://weekly.manong.io/bounce?nid=320&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3200&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_320.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=320&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;思考和实践&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;由 JavaScript 之父 Brendan Eich 与 ES6 规范首席作者 Allen Wirfs-Brock 联合编写，详细记载和解读了自 1995 年语言诞生到 2015 年 ES6 规范制定为止，共计 20 年的 JavaScript 语言演化经历。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;支持 mp4, flv, m3u8 及 rtmp 协议的直播，支持移动端，PC 端。&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;利器&lt;/p&gt;
        
        &lt;p&gt;实打实的干货&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;容易踩的坑&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;图文并茂&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;细致分析&lt;/p&gt;
        
        &lt;p&gt;方案和思路&lt;/p&gt;
        
        &lt;p&gt;一些实践和工具&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;报告详情&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;深入探讨&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;java相关技术分享&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 444692 即可&lt;/p&gt;
        
        &lt;p&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 444414 即可&lt;/p&gt;
        
        &lt;p&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 435415 即可&lt;/p&gt;
        
        &lt;p&gt;不定期更新一些机器学习算法，方便大家浏览，然后一起学习，一起进步&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 104739 即可&lt;/p&gt;
        
        &lt;p&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 99181 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;本书深入地讲解了 Go 语言常见特性的内部机制和实现方式，大部分内容源自对 Go 语言源码的分析，并从中提炼出实现原理。欢迎到&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;兑换阅读。&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;值得推荐&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;无代码开发平台&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fa56808e269d79317d346ec9e7b453a8</guid>
<title>C# 中的 is 真的是越来越强大，越来越语义化</title>
<link>https://toutiao.io/k/drie9rd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一：背景&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 讲故事&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近发现 C#7 之后的 is 是越来越看不懂了，乍一看花里胡哨的，不过当我静下心来仔细研读，发现这 is 是越来越短小精悍，而且还特别语义化，那怎是一个爽字了得😄，这一篇就和大家简单聊一聊。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二：C#7 之前的 is 如何使用&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 类型兼容性检测&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信学过 C# 的朋友都会知道 is 是干嘛的，而且还经常和 as 一起比较，前者一般做兼容性检测，后者一般做兼容性转换，这里我就举个例子吧：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;Main&lt;/span&gt;(&lt;span&gt;&lt;span&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;        {&lt;br/&gt;            &lt;span&gt;object&lt;/span&gt; slot = &lt;span&gt;new&lt;/span&gt; Slot() { ClothesName = &lt;span&gt;&quot;上衣&quot;&lt;/span&gt; };&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (slot &lt;span&gt;is&lt;/span&gt; Slot)&lt;br/&gt;            {&lt;br/&gt;                Console.WriteLine(&lt;span&gt;$&quot;slot is &lt;span&gt;{&lt;span&gt;nameof&lt;/span&gt;(Slot)}&lt;/span&gt;&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (slot &lt;span&gt;is&lt;/span&gt; IComparable)&lt;br/&gt;            {&lt;br/&gt;                Console.WriteLine(&lt;span&gt;$&quot;slot is &lt;span&gt;{&lt;span&gt;nameof&lt;/span&gt;(IComparable)}&lt;/span&gt;&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Slot&lt;/span&gt; : &lt;span&gt;IComparable&lt;/span&gt;&lt;br/&gt;        {&lt;br/&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ClothesName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;CompareTo&lt;/span&gt;(&lt;span&gt;&lt;span&gt;object&lt;/span&gt; obj&lt;/span&gt;)&lt;/span&gt; {&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;}&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.25688073394495414&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WhqIIKvibJ9Un3C9hJ9q7OqhNRZnedqwVQsKzYOGicSfuJ5pRT3sEzdKmW9ms8ZhXFX2FGrzHftHe3ne39zEuAaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;327&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这个例子可以看到， object 类型的 slot 和 Slot, IComparable 都是类型兼容的，非常简单。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 遗憾的地方&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而在实际编码中，我相信有很多朋友都会在后续的过程中用到 slot 实例，而上面的这个例子，即使我用 is 检测到了是 Slot 类型，最后我还是要 将 object slot 强转成 Slot类型，做了一次检测，又做了一个强转，这就很奇葩了，如下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (slot &lt;span&gt;is&lt;/span&gt; Slot)&lt;br/&gt;            {&lt;br/&gt;                &lt;span&gt;var&lt;/span&gt; query = (Slot)slot;&lt;br/&gt;                Console.WriteLine(&lt;span&gt;$&quot;slot is &lt;span&gt;{&lt;span&gt;nameof&lt;/span&gt;(Slot)}&lt;/span&gt;, ClothesName=&lt;span&gt;{query.ClothesName}&lt;/span&gt;&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除非有毛病才写这样的代码，干嘛不直接用 as 尝试性转换将两步合为一步走呢？修改代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; query = slot &lt;span&gt;as&lt;/span&gt; Slot;&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (query != &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;            {&lt;br/&gt;                Console.WriteLine(&lt;span&gt;$&quot;slot is &lt;span&gt;{&lt;span&gt;nameof&lt;/span&gt;(Slot)}&lt;/span&gt;, ClothesName=&lt;span&gt;{query.ClothesName}&lt;/span&gt;&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.19525065963060687&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WhqIIKvibJ9Un3C9hJ9q7OqhNRZnedqwVfDU6rfrmxLbDfibYicib2G7qzOicKSHoZTawgwfdHp25ZoMrXibuLPSTicDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;379&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就导致很多场景下，is 都被 as 替代了，搞的 is 成了一个空架子，如果 is 能合并 as 的功能，那就🐂👃了，我觉得这个急需增强。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三：C#7 之后的 is 如何使用&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也终于在 C#7 之后对 is 进行了翻天覆地的语法糖改造，导致你初看已经不明白啦😄😄😄，下面我就一一举例来说明吧。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. is 和 复杂类型/简单类型 的结合&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在就来看一下怎么用新is 解决刚才两次转换的问题，如下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;            &lt;span&gt;object&lt;/span&gt; slot = &lt;span&gt;new&lt;/span&gt; Slot() { ClothesName = &lt;span&gt;&quot;上衣&quot;&lt;/span&gt; };&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(slot &lt;span&gt;is&lt;/span&gt; Slot query)&lt;br/&gt;            {&lt;br/&gt;                Console.WriteLine(&lt;span&gt;$&quot;slot is &lt;span&gt;{&lt;span&gt;nameof&lt;/span&gt;(Slot)}&lt;/span&gt;, ClothesName=&lt;span&gt;{query.ClothesName}&lt;/span&gt;&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.20059880239520958&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WhqIIKvibJ9Un3C9hJ9q7OqhNRZnedqwVfy95lQCibC8Lh6XdOrWYtK8KAJQmEXTt030MP270ykE8eBdvIzUxPuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;334&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码表面意思是：先用 is 检测 slot 是否为 Slot 类型，如果是就赋值给 Slot 类型的 query 变量，哈哈，有点意思吧，为了验证是否如我所说，用反编译工具看看。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.39552238805970147&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WhqIIKvibJ9Un3C9hJ9q7OqhNRZnedqwVviaNDOtaDdtKUHEbExHLU8nEKBxiadx4mz7OZtdYQPOia5umhjJCIYwJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.44576719576719576&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WhqIIKvibJ9Un3C9hJ9q7OqhNRZnedqwVetVpQfiaO1Nul1dWJaGKhF40B5lL49NJnryUvGZhoMUibSjJsDpNyCzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;756&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，在实操中，编译器都用 as 进行了还原，不过从代码流畅性来看，ILSpy更🐂👃一点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了和类实例比较之外，还可以和 int,string,tuple ...进行比较， 代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;            &lt;span&gt;object&lt;/span&gt; e = &lt;span&gt;150&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;//字符串比较&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;is&lt;/span&gt; &lt;span&gt;&quot;hello&quot;&lt;/span&gt;) { }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;//整形比较&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;is&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;) { }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;//tuple 比较&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;e &lt;span&gt;is&lt;/span&gt; (&lt;span&gt;&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;&lt;/span&gt;))&lt;/span&gt; { }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. is 和 null 的结合&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家在写 sql 的时候判断某一个字段是否为 null，通常都会这样写：&lt;code&gt;username is null&lt;/code&gt; 或者 &lt;code&gt;username is not null&lt;/code&gt; ，哈哈，这种写法也被引入到 C# 中了，有意思吧，上代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;            &lt;span&gt;object&lt;/span&gt; e = &lt;span&gt;150&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;is&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;            {&lt;br/&gt;                Console.WriteLine(&lt;span&gt;&quot;e is null&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;is&lt;/span&gt; not &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;            {&lt;br/&gt;                Console.WriteLine(&lt;span&gt;&quot;e is not null&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么语义化的写法在C#中看到是不是有点不习惯，那为啥在 sql 中就习以为常呢？其实反编译过来也没啥，就是一个 == 判断，如下代码：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6486486486486487&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WhqIIKvibJ9Un3C9hJ9q7OqhNRZnedqwVqVw0BQUvpGm7oSP00ksujvsmxIbq2OlUseoZAibgEyA50Qfb8Pno0qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;518&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. is 和 and ，or 的结合&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在大家都看到了 is 通常是放在 if 语句中，既然在 if 语句中，那肯定有很多的逻辑判断，这就需要结合 and，or 构建非常复杂的逻辑关系，不要眼花哦。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;            &lt;span&gt;object&lt;/span&gt; e = &lt;span&gt;150&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;is&lt;/span&gt; &amp;gt;= &lt;span&gt;100&lt;/span&gt; and &amp;lt;= &lt;span&gt;200&lt;/span&gt;)&lt;br/&gt;            {&lt;br/&gt;                Console.WriteLine(&lt;span&gt;$&quot;e=&lt;span&gt;{e}&lt;/span&gt; 果然 大于 100 并且 小于 200&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;is&lt;/span&gt; &lt;span&gt;100&lt;/span&gt; or &lt;span&gt;150&lt;/span&gt; or &lt;span&gt;200&lt;/span&gt;)&lt;br/&gt;            {&lt;br/&gt;                Console.WriteLine(&lt;span&gt;$&quot;e=&lt;span&gt;{e}&lt;/span&gt; 是在 100,150,200 三个数字中&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;is&lt;/span&gt; not &lt;span&gt;null&lt;/span&gt; and not &lt;span&gt;&quot;&quot;&lt;/span&gt;)&lt;br/&gt;            {&lt;br/&gt;                Console.WriteLine(&lt;span&gt;$&quot;e=&lt;span&gt;{e}&lt;/span&gt;，模拟 !string.IsNullOrEmpty 功能&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.26842105263157895&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WhqIIKvibJ9Un3C9hJ9q7OqhNRZnedqwV3yGuibfiaytGoBPuH6WRXZic91BmsgRXLq04pga0mzz9jNWia4gkcOuHuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;380&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到最后的: &lt;code&gt;e is not null and not &quot;&quot;&lt;/code&gt; 其实等价于 &lt;code&gt;!string.IsNullOrEmpty&lt;/code&gt;, 是不是有点意思哈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有一点要提醒的是，上面的 e 在编译器层面都是 object 类型，如果你想在 编译器层面使用 int 运作，还是用 例子1 的方式转换一下哈，如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.23401360544217686&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WhqIIKvibJ9Un3C9hJ9q7OqhNRZnedqwVLk2FYOd6gxe0z8zGj6o61mibG3z1r4MAc1xblcficKyr3ZDbZlyduwmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;735&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. is 和 var 的结合&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当 is 和 var 结合起来就更🐂👃了，可以实现在 if 判断的过程中生成临时变量，如下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; e = &lt;span&gt;150&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;is&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; i &amp;amp;&amp;amp; i &amp;gt;= &lt;span&gt;100&lt;/span&gt; &amp;amp;&amp;amp; i &amp;lt;= &lt;span&gt;200&lt;/span&gt;)&lt;br/&gt;            {&lt;br/&gt;                Console.WriteLine(&lt;span&gt;$&quot;e=&lt;span&gt;{i}&lt;/span&gt; 果然 大于 100 并且 小于 200&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面代码中的 i 就是一个临时变量，后面做的一切业务逻辑都是基于 i 这个临时变量的，如果还没有领会到精粹，没关系，我举一个项目中的例子吧。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们公司是搞衣物洗涤自动化，也需要对线下 传输线上的衣服进行自动化上挂，取走和衣物组合搭配，举个例子：&lt;code&gt;找到 刚好挂了一件裤子L &amp;amp;&amp;amp; 一件上衣L &amp;amp;&amp;amp; 总衣服个数=2 的 挂孔号&lt;/code&gt;，要是还没听懂就算了，直接上代码说话。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Program&lt;/span&gt;&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;Main&lt;/span&gt;(&lt;span&gt;&lt;span&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;        {&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; slotList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Slot&amp;gt;()&lt;br/&gt;            {&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; Slot()  {SlotID=&lt;span&gt;1&lt;/span&gt;, ClothesID=&lt;span&gt;10&lt;/span&gt;,ClothesName=&lt;span&gt;&quot;上衣&quot;&lt;/span&gt;, SizeName= &lt;span&gt;&quot;L&quot;&lt;/span&gt; },&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; Slot()  {SlotID=&lt;span&gt;1&lt;/span&gt;, ClothesID=&lt;span&gt;20&lt;/span&gt;,ClothesName=&lt;span&gt;&quot;裤子&quot;&lt;/span&gt;, SizeName= &lt;span&gt;&quot;M&quot;&lt;/span&gt; },&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; Slot()  {SlotID=&lt;span&gt;1&lt;/span&gt;, ClothesID=&lt;span&gt;11&lt;/span&gt;,ClothesName=&lt;span&gt;&quot;皮带&quot;&lt;/span&gt;, SizeName= &lt;span&gt;&quot;X&quot;&lt;/span&gt; },&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; Slot()  {SlotID=&lt;span&gt;2&lt;/span&gt;, ClothesID=&lt;span&gt;30&lt;/span&gt;,ClothesName=&lt;span&gt;&quot;上衣&quot;&lt;/span&gt;, SizeName= &lt;span&gt;&quot;L&quot;&lt;/span&gt; },&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; Slot()  {SlotID=&lt;span&gt;2&lt;/span&gt;, ClothesID=&lt;span&gt;40&lt;/span&gt;,ClothesName=&lt;span&gt;&quot;裤子&quot;&lt;/span&gt;, SizeName= &lt;span&gt;&quot;L&quot;&lt;/span&gt; }&lt;br/&gt;            };&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;//找到 刚好挂了一件裤子L &amp;amp; 一件上衣L  &amp;amp; 总衣服个数=2  的 挂孔号&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; query = slotList.GroupBy(m =&amp;gt; m.SlotID).Where(m =&amp;gt;&lt;br/&gt;                                                                      m.Where(n =&amp;gt; n.SizeName == &lt;span&gt;&quot;L&quot;&lt;/span&gt;).ToList() &lt;span&gt;is&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; clothesList &amp;amp;&amp;amp;&lt;br/&gt;                                                                      clothesList.Count(k =&amp;gt; k.ClothesName == &lt;span&gt;&quot;裤子&quot;&lt;/span&gt;) &lt;span&gt;is&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp;&lt;br/&gt;                                                                      clothesList.Count(k =&amp;gt; k.ClothesName == &lt;span&gt;&quot;上衣&quot;&lt;/span&gt;) &lt;span&gt;is&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp;&lt;br/&gt;                                                                      m.Key == &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;                                                              )&lt;br/&gt;                                                    .ToDictionary(k =&amp;gt; k.Key, v =&amp;gt; v.ToList());&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Slot&lt;/span&gt;&lt;br/&gt;        {&lt;br/&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SlotID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ClothesID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ClothesName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SizeName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5110081112398609&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WhqIIKvibJ9Un3C9hJ9q7OqhNRZnedqwVL8WZaNBSUrGs0wSfTDtu1PJpm8ClMct0hGeGJdYdrWYmkCDGnVGn6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;863&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重点在于上面代码的  &lt;code&gt;m.Where(n =&amp;gt; n.SizeName == &quot;L&quot;).ToList() is var clothesList&lt;/code&gt;，这里的 clothesList 就是临时变量，它存放了所有 &lt;code&gt;尺寸L&lt;/code&gt; 的衣物,后续的检索都是基于这个 clothesList，是不是大大提高了检索速度~~~&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四：总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我觉得 is 的功能增强早就该出现了，现在终于搞定了，越来越人性化，键盘敲击次数越来越少，头发也不落了，甚至又开始第二春了，总的来说还是那句话，C# 大法🐂👃。&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8779a7b741dda9b7cfd6c6592574eac8</guid>
<title>Kubernetes 集群升级指南：从理论到实践</title>
<link>https://toutiao.io/k/bn1f6rt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tools=&quot;新媒体管家&quot; data-label=&quot;powered by xmt.cn&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvnMFaOoAklrxdOvPwLJwOS8RYYmSQgS6FFg5RCbbNXgeGsv25m3rF6GDKOAM775U5iaBZy0IHSxZMA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;730&quot; data-cropy1=&quot;37.88927335640138&quot; data-cropy2=&quot;431.9377162629758&quot; data-ratio=&quot;0.5397260273972603&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvnMFaOoAklrxdOvPwLJwOS8Gg0dtQYSV3z6IwqBe4BFlSdyvFyUZBCVxMBIpZaZd6To5AZcvg3Acg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;730&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作者 | 高相林（禅鸣）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;集群升级是 Kubernetes &lt;/span&gt;&lt;span&gt;集群生命周期中最为重要的一环，也是众多使用者最为谨慎对待的操作&lt;/span&gt;&lt;span&gt;之一。&lt;/span&gt;&lt;span&gt;为了更好地理解集群升级这件事情的内涵外延，我们首先会对集群升级的必要性和难点进行阐述；&lt;/span&gt;&lt;span&gt;随后会对集群升级前必须要做的前置检查进行逐一讲解；&lt;/span&gt;&lt;span&gt;接下来会对两种常见的升级方式进行展开介绍；&lt;/span&gt;&lt;span&gt;最后对集群升级的三个步骤进行讲解，帮助读者从理论走入实践。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;升级的必要性&amp;amp;难点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 Kubernetes 领域，得益于活跃的开源社区，Kubernetes 的迭代速度较快，目前保持在每个季度发行一个新版本的节奏。新版本的 Kubernetes 有着更为先进的新特性、更加全面的安全加固和漏洞修复。前一段时间社区刚刚完成了 1.19 版本的正式发布。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于发展如此快速的开源项目，跟上社区的步伐就显得更为重要，而集群升级能力就是帮助我们跟上社区步伐的不二选择。我们可以从以下两个方面对集群升级的必要性进行说明：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;讲完了集群升级的必要性，我们来详细看一下集群升级的难点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前多数 Kubernetes 使用者对集群升级这件事持有着非常保守的态度，害怕集群在升级的过程中出现不可预期的情况，也有使用者将集群升级称之为“给飞行中的飞机换引擎”。那么，使用者对于升级的保守态度主要来源于什么原因呢？我认为有以下几点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“千集群千面”的情况的存在，导致了集群升级需要以一套逻辑完成各种不同情况集群的升级工作，这也正是集群升级的困难之处。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;38fcd854ab2b909adc8d7779a48ac3d5&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;升级预检&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正如我们前面所说，给正在对外提供服务的 Kubernetes 集群升级，就好比是“给飞行中的飞机换引擎”。因为集群升级面临着众多难点，也使得众多的 Kubernetes 集群维护者对集群升级这件事情比较紧张。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以通过详细的升级预检，来消除集群升级的不确定性。对于上面列举的集群升级的难点，我们也可以分别进行详细的升级预检，对症下药，将难点逐一击破。升级预检主要可以分为三个方面：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;0d2ab228b76b33d96dae1601dc011ec9&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 核心组件健康检查&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说到核心组件健康检查，就不得不剖析一下集群的健康对于集群升级的重要性。一个不健康的集群很可能会在升级中出现各种异常的问题，就算侥幸完成了升级，各种问题也会在后续使用中逐渐凸显出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有人会说，我的集群看起来挺健康的，但是升级之后就出现问题了。一般来说，之所以会发生这种情况，是因为在集群在升级之前，这个问题已经存在了，只不过是在经历了集群升级之后才显现出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在了解了核心组件健康检查的必要性之后，我们来看一下都需要对那些组件进行检查：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;7b8e6c7166d0dc53e5f87f2d45f0d8e3&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 节点配置检查&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;节点作为承载 Kubernetes 的底层元计算资源，不仅运行着 Kubelet、Docker 等重要的系统进程，也充当着集群和底层硬件交互接口的角色。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;确保节点的健康性和配置的正确性是确保整个集群健康性重要的一环。下面就对所需的检查项进行讲解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;83da948b57802043181fabbe2ccb7c8a&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;操作系统配置：需要确定基础的系统组件（yum、systemd 和 ntp 等系统服务是否正常）和内核参数是否配置合理；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;kubelet：需要确定 kubelet 的进程健康、配置正确；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Docker：需要确定 Docker 的进程健康、配置正确。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;fe396c84e3106a85ebc64467b8634bfc&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 云资源检查&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运行在云上的 Kubernetes 集群依赖着众多云资源，一旦集群所依赖的云资源不健康或者配置错误，就会影响到整个集群的正常运行。我们主要对下列云资源的状态和配置进行预检：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;91c63c10ab13612bab2177e562dfcb66&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;apiserver 所使用的 SLB：需要确定实例的健康状态和端口配置（转发配置和访问控制配置等）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;集群所使用的 VPC 和 VSwitch：需要确定实例的健康状况；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;集群内的 ECS 实例：需要确定其健康状况和网络配置。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;09c91558e40331d436b4e72c53fc32d5&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;两种常见的升级方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-lake-id=&quot;09c91558e40331d436b4e72c53fc32d5&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在软件升级领域，有两种主流的软件升级方式，即原地升级和替换升级。这两种升级方式同样适用于 Kubernetes 集群，它们采用了不同软件升级思路，但也都存在着各自的利弊。下面我们来对这两种集群升级方式进行逐一讲解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;991bf236f53ebf7814bd5582ae57ea4a&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 原地升级&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原地升级是一种精细化的、对这个那个集群改动量相对较小的一种升级方式。在升级容器的 worker 节点时，该升级方式会通过在 ECS 上原地替换 Kubernetes 组件的方式（主要为 kubelet 和其相关组件），完成整个集群的升级工作。阿里云容器服务 Kubernetes 为客户提供的集群升级就是基于这种方式的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以将 Kubernetes 的版本从 1.14 升级到 1.16 为例。首先我们会对 ECS A 上的原本为 1.14 的 Kubelet 及其配置升级为 1.16，在完成节点 ECS A 上的组件升级之后，该节点也就被成功的升级到了 1.16。然后我们再对 ECS B 进行相同的操作，将其升级为 1.16，从而完成整个集群的升级工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这个过程中节点保持运行，ECS 的相关配置也不会被修改。如图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F58334%2F1600249199247-85c07260-1108-4a7a-bcad-dcbdb5732dfa.png%22%2C%22originWidth%22%3A1513%2C%22originHeight%22%3A335%2C%22name%22%3A%22image.png%22%2C%22size%22%3A58941%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A140.80586%2C%22y%22%3A146.45074%2C%22width%22%3A78.02655000000001%2C%22height%22%3A27.089709999999997%2C%22text%22%3A%22ECSA%22%7D%2C%7B%22x%22%3A979.28906%2C%22y%22%3A147.32126%2C%22width%22%3A76.7533400000001%2C%22height%22%3A27.74534%2C%22text%22%3A%22ECSA%22%7D%2C%7B%22x%22%3A1294.11%2C%22y%22%3A148.89526%2C%22width%22%3A75.26330000000007%2C%22height%22%3A28.14785999999998%2C%22text%22%3A%22ECSB%22%7D%2C%7B%22x%22%3A456.26514%2C%22y%22%3A149.83342%2C%22width%22%3A72.68876%2C%22height%22%3A28.20248000000001%2C%22text%22%3A%22ECSB%22%7D%2C%7B%22x%22%3A467.05362%2C%22y%22%3A211.25827%2C%22width%22%3A53.818379999999934%2C%22height%22%3A28.97602999999998%2C%22text%22%3A%22%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A156.16118%2C%22y%22%3A211.76059%2C%22width%22%3A51.41368%2C%22height%22%3A31.851409999999987%2C%22text%22%3A%22%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A992.4329%2C%22y%22%3A212.40195%2C%22width%22%3A52.00420000000008%2C%22height%22%3A25.72739999999999%2C%22text%22%3A%22%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A1306.9567%2C%22y%22%3A212.48682%2C%22width%22%3A50.28600000000006%2C%22height%22%3A27.195610000000016%2C%22text%22%3A%22%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A161.87132%2C%22y%22%3A241.70822%2C%22width%22%3A42.87254999999999%2C%22height%22%3A27.63012999999998%2C%22text%22%3A%221.14%22%7D%2C%7B%22x%22%3A474.54318%2C%22y%22%3A243.69315%2C%22width%22%3A41.23526000000004%2C%22height%22%3A22.98129%2C%22text%22%3A%221.14%22%7D%2C%7B%22x%22%3A996.7421%2C%22y%22%3A243.78186%2C%22width%22%3A44.226499999999874%2C%22height%22%3A24.151139999999998%2C%22text%22%3A%221.16%22%7D%2C%7B%22x%22%3A1310.9414%2C%22y%22%3A243.86855%2C%22width%22%3A42.52520000000004%2C%22height%22%3A24.407650000000018%2C%22text%22%3A%221.16%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22ECSA%20ECSA%20ECSB%20ECSB%20%E8%8A%82%E7%82%B9%20%E8%8A%82%E7%82%B9%20%E8%8A%82%E7%82%B9%20%E8%8A%82%E7%82%B9%201.14%201.14%201.16%201.16%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A756.5%2C%22height%22%3A168%7D&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;128&quot; data-height=&quot;168px&quot; data-ratio=&quot;0.22109375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvnMFaOoAklrxdOvPwLJwOS8qiaHeIqCFuZ3r7bYiat3G0f29ODXwLd26fLKIYDZPrnsbTXib36OkOPHg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）优点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）缺点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;a846465925f2b47b2bab4caf6acf7c21&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 替换升级&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;替换升级又称轮转升级，相对于原地升级，替换升级是一种更加粗狂和原子化的升级方式。替换升级会逐个将旧版本的节点从集群中移除，并用新版本全新的节点来替换，从而完成整个 Kubernetes 集群的升级工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同样以将 Kubernetes 的版本从 1.14 升级到 1.16 为例。使用替代轮转方式的情况下，我们会将集群中 1.14 版本的节点依次进行排水并从集群中移除，并直接加入 1.16 版本的节点。即将 1.14 节点的 ECS A 从节点剔除，并将 1.16 节点的 ECS C 加入集群，再将 ECS B 从集群中删除，最后将 ECS D 加入到集群中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样就完成了所有节点的轮转工作，整个集群就也就升级到 1.16 了。如图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F58334%2F1600249319018-6bc1be81-99fe-4d99-ad7e-7f5e7962d2f6.png%22%2C%22originWidth%22%3A1514%2C%22originHeight%22%3A336%2C%22name%22%3A%22image.png%22%2C%22size%22%3A59810%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A140.81903%2C%22y%22%3A146.58884%2C%22width%22%3A78.34921%2C%22height%22%3A26.886210000000005%2C%22text%22%3A%22ECSA%22%7D%2C%7B%22x%22%3A981.2374%2C%22y%22%3A148.32126%2C%22width%22%3A57.78019999999992%2C%22height%22%3A26.050060000000002%2C%22text%22%3A%22ECS%22%7D%2C%7B%22x%22%3A1295.5504%2C%22y%22%3A150.09784%2C%22width%22%3A77.31939999999986%2C%22height%22%3A27.746220000000022%2C%22text%22%3A%22ECSD%22%7D%2C%7B%22x%22%3A455.75504%2C%22y%22%3A151.16016%2C%22width%22%3A62.874720000000025%2C%22height%22%3A28.14781000000002%2C%22text%22%3A%22ECS%22%7D%2C%7B%22x%22%3A466.87274%2C%22y%22%3A211.01984%2C%22width%22%3A54.076599999999985%2C%22height%22%3A30.543330000000026%2C%22text%22%3A%22%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A1306.5538%2C%22y%22%3A210.40399%2C%22width%22%3A52.08600000000001%2C%22height%22%3A29.2363%2C%22text%22%3A%22%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A156.3161%2C%22y%22%3A212.31966%2C%22width%22%3A50.562070000000006%2C%22height%22%3A30.056990000000013%2C%22text%22%3A%22%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A992.9267%2C%22y%22%3A212.84319%2C%22width%22%3A52.74330000000009%2C%22height%22%3A26.961960000000005%2C%22text%22%3A%22%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A161.21388%2C%22y%22%3A243.6078%2C%22width%22%3A42.86334000000002%2C%22height%22%3A25.737450000000024%2C%22text%22%3A%221.14%22%7D%2C%7B%22x%22%3A997.9048%2C%22y%22%3A244.30598%2C%22width%22%3A43.94540000000006%2C%22height%22%3A23.820700000000016%2C%22text%22%3A%221.16%22%7D%2C%7B%22x%22%3A474.73187%2C%22y%22%3A244.34152%2C%22width%22%3A41.46283%2C%22height%22%3A23.09177999999997%2C%22text%22%3A%221.14%22%7D%2C%7B%22x%22%3A1309.5217%2C%22y%22%3A243.77707%2C%22width%22%3A45.63670000000002%2C%22height%22%3A25.055849999999992%2C%22text%22%3A%221.16%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22ECSA%20ECS%20ECSD%20ECS%20%E8%8A%82%E7%82%B9%20%E8%8A%82%E7%82%B9%20%E8%8A%82%E7%82%B9%20%E8%8A%82%E7%82%B9%201.14%201.16%201.14%201.16%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A757%2C%22height%22%3A168%7D&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;128&quot; data-height=&quot;168px&quot; data-ratio=&quot;0.221875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvnMFaOoAklrxdOvPwLJwOS8zlkoL6tgFcG4pLUpfoS1icC49PZRgGbprf1L64tWULyAFcT18oic29ow/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）优点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;替代升级通过将旧版本的节点替换为新版本的节点从而完成集群升级。这个替换的过程相较于原地升级更为原子化，也不存在那么复杂的中间状态，所以也不需要在升级之前进行太多的前置检查。相对应地，升级过程中可能会出现的各种稀奇古怪的问题也会减少很多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）缺点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;1c557636f63631642551da53ac3c9d00&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;集群升级三部曲&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个 Kubernetes 集群主要由负责集群管控的 master，执行工作负载的 worker 和众多功能性的系统组件组成。对一个 Kubernetes 集群升级，也就是对集群中的这三个部分进行分别升级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;故集群升级的三部曲为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F58334%2F1600249491846-9489d724-1429-434d-a372-724babdfbb6f.png%22%2C%22originWidth%22%3A1561%2C%22originHeight%22%3A216%2C%22name%22%3A%22image.png%22%2C%22size%22%3A26128%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1390.0098%2C%22y%22%3A97.65796%2C%22width%22%3A68.3001999999999%2C%22height%22%3A17.788650000000004%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%22%7D%2C%7B%22x%22%3A893.15753%2C%22y%22%3A122.126305%2C%22width%22%3A47.54307000000006%2C%22height%22%3A16.598995000000002%2C%22text%22%3A%22Worken%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%20Worken%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A780.5%2C%22height%22%3A108%7D&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;80&quot; data-height=&quot;108px&quot; data-ratio=&quot;0.13828125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvnMFaOoAklrxdOvPwLJwOS8XdjExtDy2zPSuMBWibKkJiamWeIR3EWY7otC99pkFyVG7wuevsRHp9NA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面我们来对集群升级三部曲进行详细的讲解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;0508c6da98335e84226966f0bd60002b&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 滚动升级 master&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;master 作为集群的大脑，承担了与使用者交互、任务调度和各种功能性的任务处理。集群 master 的部署方式也比较多样，可以通过 static pod 进行部署，可以通过本地进程进行部署，也可以通过 Kubernetes on Kubernetes 的方式在另一个集群内通过 pod 的方式部署。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总而言之，无论 master 为哪种部署方式，想要升级 master 主要就是对 master 中的三大件进行版本升级，主要包括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要注意，为了保证 Kubernetes apiserver 的可用性不中断，master 中的 kube-apiserver 最少需要有两个，这样才可以实现滚动升级，从而保证 apiserver 不会出现 downtime。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;1347b6d68ab6e3f19486d9534db6d3f6&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 分批升级 worker&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在完成 master 的升级工作之后，我们才可以开始对 worker 进行升级。Worker 升级主要是对节点上的 kubelet 及其依赖组件（如 cni 等）进行升级。为了保证集群中 worker 不会同时发生大批量的 kubelet 重启，所以我们需要对 worker 节点进行分批升级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要注意，我们必须要先升级 master，再升级 worker。因为高版本的 kubelet 在连接低版本的 master 时，很可能会出现不兼容的情况，从而导致节点 not ready。对于低版本的 kubelet 连接高版本的 apiserver，开源社区保证了 apiserver 对于 kubelet 两个版本的向后兼容性，即 1.14 的 kubelet 可以连接到 1.16 的 apiserver，而不会发生兼容性问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;833704eb8a02a1f0db11bd4268d79935&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 核心系统组件升级&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了保证集群中各个组件的兼容性，我们需要在升级集群的同时对集群中的核心系统组件进行同步升级，主要包括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;社区的版本兼容矩阵&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：https://github.com/coredns/deployment/blob/master/kubernetes/CoreDNS-k8s_version.md&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;《云原生技术实践公开课》&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;去年，CNCF 与 阿里云联合发布了《云原生技术公开课》已经成为了 Kubernetes 开发者的一门“必修课”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天，阿里云再次集结多位具有丰富云原生实践经验的技术专家，正式推出《云原生技术实践公开课》。课程内容由浅入深，专注讲解“ 落地实践”。还为学习者打造了真实、可操作的实验场景，方便验证学习成果，也为之后的实践应用打下坚实基础。课程已经正式上线，欢迎大家观看。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvlGW1gZHxicguU9ibkbQjAa8h6V0l1tBjmeYhiapmcLY0F0k5IEXDnLmqBpicJmib2abN5NBl7Q0tncGXg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/6aVaON9Kibf5ibKRPQgZ9XgbVNsIeQUnfKSiaErmr8dtdicicS3A8m6TiavR6ZB0Eah3pD0kjQg8ACyNb1x5ibdqRg2jA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;戳原文，免费观看云原生技术实践公开课！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>673a566ae612a402f2ebf3437048ae09</guid>
<title>2020 年了 Java 还有前途吗？</title>
<link>https://toutiao.io/k/pqla0uc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今年，Java达到了一个令人难以置信的里程碑，并达到了25岁的高龄。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这让我们开始思考并决定深入研究数据，以一劳永逸地发现Java的普遍状态，并帮助回答您的一些迫切问题。我们发现的某些内容可能不足为奇，但也有一些非常出乎意料的见解。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开发者分布在哪里&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个问题是：“大多数Java开发人员都在哪里，我们中有多少人呢？” 我们通过结合可以获取的最准确的信息来进行回答，然后进行推断以得出我们认为是很好的猜测。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;市场研究和分析团队&lt;/em&gt;对&lt;em&gt;开发人员估计模型的&lt;/em&gt;最佳估计表明，当今世界上有大约&lt;strong&gt;520万专业Java开发人员&lt;/strong&gt;将Java作为&lt;strong&gt;主要语言&lt;/strong&gt;。但是，如果我们包括主要使用其他编程语言，但同时也使用Java的专业开发人员，那么这个数字可能接近&lt;strong&gt;680万&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于这些Java开发人员的集中地，&lt;strong&gt;亚洲&lt;/strong&gt;居住的Java开发人员数量最多，大约有250万开发人员使用Java作为主要语言。北美和欧洲的数字远不及亚洲。您可能会问，“但是为什么？” 好吧，起初我们有完全相同的想法，所以我们对这些区域进行了更深入的研究，以确切地了解数字的来源。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.53625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbgJgwcejO3NlwhFP2MEvSBhoYBxlKgbIx4rlFPn00JPB2gyFVqgPasQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;具体在哪里&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更深入地讲，我们研究了Java开发人员最多的各个国家，然后调查了为什么这些国家在专业开发方面特别喜欢Java而不是其他语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图显示了每个国家/地区使用Java作为主要语言的开发人员所占的百分比（用于收集此数据的调查受访者最多可以选择3种主要语言）。&lt;strong&gt;中国&lt;/strong&gt;和&lt;strong&gt;韩国&lt;/strong&gt;的数值最高，分别约为51％和50％。数据取自《&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;2020年开发商生态系统状况调查》&lt;/em&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;专家分析&lt;/em&gt;Java在前6个国家中如此受欢迎的原因包括Java的免费使用，政府支持和开源。对于&lt;strong&gt;中国&lt;/strong&gt;，&lt;strong&gt;西班牙&lt;/strong&gt;和&lt;strong&gt;巴西&lt;/strong&gt;尤其如此。它是在&lt;strong&gt;中国&lt;/strong&gt;和&lt;strong&gt;印度&lt;/strong&gt;进行Android移动开发的基础，并且雇用离岸员工以Java构建手机应用程序非常普遍，这可能是&lt;strong&gt;印度&lt;/strong&gt;使用高峰的原因。德国也很高，这可以归因于Java是德国软件工程师最流行的语言，因为它被用于为许多行业构建高度可伸缩的应用程序。大多数企业服务都依靠Java来驱动支持日常业务运行的应用程序，例如工资单，库存管理，报告等。德国还有一个庞大的金融部门，其Java大量用于其自身的技术，例如交易机器人，零售银行系统以及金融业为了保持竞争力而需要的其他应用程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可能曾期望&lt;strong&gt;美国&lt;/strong&gt;的Java用户比例很高，但是从很多方面讲，他们没有。有大量的技术堆栈可供选择，而且很多技术公司通常处于该堆栈的最前沿，因此可能是那里的开发人员不需要Java的功能或稳定性，而是使用允许他们执行以下操作的语言：快速建立并测试。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.685&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbSNdY0icejYwAUibM1ox1Rias0iccGiatia8kb3rJ46Ek9ebIosx29o1oe4bA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;行业见解&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;2020年开发人员生态系统状况调查&lt;/em&gt;，超过三分之一的专业开发人员将Java用作主要语言，而Java仍然是仅次于JavaScript的专业开发人员中的第二主要语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;专家分析&lt;/em&gt;看到JavaScript和Java处于配对状态，这是不足为奇的。使用Java的开发人员经常使用JavaScript编写前端和任何快速脚本。由于机器学习的普及，Python可能排名第三。总的来说，我们希望Web成为开发人员生态系统的重要组成部分，因此JavaScript，HTML和CSS以及PHP将始终保持稳定的地位。SQL也将一直存在，因为并不需要太多容量的数据库。C ++也是一种可靠的语言，因为它用于许多嵌入式应用程序，因此它不会很快消失在图表中。尽管C＃似乎正在逐渐衰落，但我想如果Java高，那么C＃就会低，因为它们在功能方面都非常相似。关于我为什么认为Java在专业发展领域如此之高的原因–与关于德国提到的内容相似。大多数企业业务服务都依赖Java使它们顺其自然。不仅是IT部门-几乎每个公司，无论是在分销，制造还是银行业，都将IT服务作为其基础结构的一部分，而这些服务（例如薪资或库存管理）通常都是在后端使用Java构建的。因此，为这些公司工作的专业开发人员经常使用Java。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbAtib24tibxkhQibxwxFibtHL5EYotaajeNeC9vpxs9wD55YicXYwQ5P9ZUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;用Java开发的软件类型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;快速浏览使用Java开发的软件类型应该可以了解其使用情况统计信息。根据《&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;2020年开发者生态系统状况》&lt;/em&gt;的结果，&lt;strong&gt;Web服务&lt;/strong&gt;是Java最受欢迎的领域，占52％。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;专家分析&lt;/em&gt;令人惊讶的是，Java在商业智能/数据科学/机器学习中如此流行，因为您认为这将是Python的领域。其他Web服务的后端通常是Java，因此并不令人惊讶，因为使用Java编写业务应用程序也很有意义，因为它们也需要与后端和数据库一起工作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbGmtLPN0GrVuSIVPllVT0ydp0icjCqZWdIZ8aPicq88nIBaVvea0wicy0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;使用Java的热门行业&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们知道了为什么许多专业开发人员都使用Java，下面让我们专门研究一下Java的使用行业。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;2020年开发者生态系统调查&lt;/em&gt;，Java程序员主要在&lt;strong&gt;IT服务（42％）和金融与金融科技（44％）中工作，但这并不是说Java不用于其他行业。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;专家分析&lt;/em&gt;金融和金融科技领域主要涉及金融交易所，零售银行系统，创建计算引擎以及开发本地定制工具和服务，以使公司在市场上具有竞争力。Finance和FinTech几乎都是用Java建立的，因此这里并不奇怪。IT服务也是如此，因为许多针对非IT公司的薪资系统和库存管理服务都是基于Java构建的。其他行业虽然很有趣。由于Android，移动开发的速度可能很高，因此以这种方式使用Java。大数据和数据分析非常有趣，因为该行业由Python领导，但是后端可能会使用Java和JVM语言。软件开发工具，当然可以。JetBrains IDE当前使用Java构建。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.475&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbyof3ZicKPsH3gR6cb6FaKugqJg0A8qRC4OOw94BFM4bXeYyc5FeV0yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Java工具&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Java版本&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java 8&lt;/strong&gt;仍然是最受欢迎的版本。使用Java作为主要语言的专业开发人员中有75％使用了它。下图显示了Java版本的分布情况，假设开发人员在&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;2020开发者生态系统调查中&lt;/em&gt;选择了其中的几个版本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;专家分析&lt;/em&gt;有几个因素导致Java 8如此受欢迎的原因。首先，它具有典型Java开发人员从该语言中所需的一切，它具有lambda和流，并且通常是一个易于使用的好版本。而且，人们真的不愿意使用Java9。Java9引入了一些重大的体系结构更改，人们担心这些更改会破坏他们用Java 8构建的应用程序。最重要的是，Oracle推出了每两年发行一次的版本，并且因此并非所有版本都长期受支持，因此Java 9，Java 10，Java 12和Java 13仅受6个月支持，这可能就是为什么它们都只有这么少用户的原因。Java 13之所以如此之高，是因为当本调查结束时，它是最新版本，因此您可以预期Java 13会在几个月后下降。Java 11于2018年问世，它是具有长期支持的最新版本。许多企业仍未迁移到它，因为他们担心超越Java 9（随着体系结构的更改）会破坏一切，并且&lt;span&gt;👉&lt;/span&gt;Java 11引入了新的许可和新的订阅，因此它更加担心如果您使用错误的版本，以错误的方式，Oracle会罚款您。许多开发人员不升级到Java 11的最后一个主要因素是，它没有许多令人兴奋的新功能，因此语言的功能并未降低升级的风险。Java 17将是具有长期支持的下一个版本，并带有许多新功能，但是从Java 8到Java 17的直接更新将有其自身的问题。我的预测是，我认为下一个长期版本Java 17将比上一个LTS（长期支持版本）Java 11更受欢迎。不过，作为Java 17的准备，我真的不能对此施加太大压力，建议您先将代码库更新为Java 11，然后再更新为Java 17，以避免出现大问题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.44&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbPZicaVYdrHsAPV1c6Gmwu4yyKqTQYW58gpjEicBEq5ETQzutnh9ZL4wA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;流行的应用服务器&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在过去的三年中，&lt;strong&gt;Apache Tomcat&lt;/strong&gt;仍然是最受欢迎的应用服务器，而&lt;strong&gt;JBoss EAP&lt;/strong&gt;和&lt;strong&gt;WildFly的使用&lt;/strong&gt;却减少了一半。所提供的数据来自所有使用Java作为主要语言的&lt;em&gt;开发人员&lt;/em&gt; ，这些&lt;em&gt;人员&lt;/em&gt;参加了&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;2018年&lt;/em&gt;和&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;2020年&lt;/em&gt;的&lt;em&gt;Developer Ecosystem Survey&lt;/em&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;专家分析&lt;/em&gt;Jetty位居第二，但确实令人惊讶地低。可能是某些正在使用Spring Boot和其他微服务框架的开发人员可能没有意识到他们在幕后使用的东西–他们可能正在使用Tomcat或Jetty而不了解它们。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.44&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbgV2DwTRW4QgmoWKbDDT62IFbicibMLcOiafibSP31hlu3mz73LHgSr5lZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前五名Web框架&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;在2018年已经和&lt;strong&gt;Spring MVC&lt;/strong&gt;同样流行了 ，现在（2020年）已经更加流行了。给出的数据来自所有使用Java作为主要语言的开发人员。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;专家分析&lt;/em&gt;这基本上只是在确认Spring拥有市场。仍然有人在使用Struts 1几乎可以肯定只在旧版应用程序中使用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.44&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbRAu1g11M7xIAzdyaRhxgopQWvXWLm8IMpIQfW9tcqJOysxw638mrdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前五名JVM探查器&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;开发者的生态系统国家调查2020&lt;/em&gt;显示，&lt;strong&gt;VisualVM的&lt;/strong&gt;使用由用户的24％，而一半使用没有。给出的数据来自所有使用Java作为主要语言的开发人员。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.46&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbk99w4uhaHhOEFnexkpvfTQyOiaAeud2pUariaD7bjlvL8mLGL21CGDTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前5名IDE /编辑器&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据&lt;em&gt;开发者生态系统调查&lt;/em&gt; &lt;span&gt;👉&lt;/span&gt;&lt;em&gt;2018&lt;/em&gt;和&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;2020的&lt;/em&gt;报告，&lt;strong&gt;IntelliJ IDEA&lt;/strong&gt;的份额从2018年的55％增加到2020年的72％，而其他四个的使用减少了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;专家分析&lt;/em&gt;不过，即使我们对调查结果进行了加权，我们也不否认信息可能会偏斜，因为这是从&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;JetBrains开发者生态系统状况调查&lt;/em&gt;得出的，JetBrains的主要产品之一是IntelliJ IDEA。但是，这并不是说这并非完全不合理，就好像我们在其他调查中看到的一样，IntelliJ IDEA通常是最常用的IDE之一，通常拥有约55-60％的用户份额。VS Code正在增长，这不是从竞争的角度来看，实际上是从对IDE给您的理解上缺乏了解的角度出发。VS Code是一个代码编辑器，具有一些您可以在IDE中找到的功能以及可以提供附加功能的扩展-因此，如果人们转向VS Code进行开发，则可能意味着开发人员不知道什么是功能齐全的功能。IDE可以给他们。在网络空间中，使用编辑器是可以理解的，因为网络开发人员通常使用动态语言，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.46&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbhrJEKxYYQnMoyToVcHKFMOKiacHKAnsW7ptM0DdgX6gtTdPyPDpvuGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;讨论最多的Java工具和其他语言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java在IT社区中经常被讨论，其中之一就是&lt;em&gt;Stack Overflow&lt;/em&gt;。我们从“ &lt;span&gt;👉&lt;/span&gt;&lt;em&gt;问题与解答”&lt;/em&gt;章节中获取了数据，以找出哪些标签最常出现“java”。纵轴表示Java提及的内容，横轴表示标签出现的总数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;专家分析&lt;/em&gt;该图表可能对想要确保使用正确技术或为他们寻找工具的用户很有用。这些语言很有意思，但这可能是因为人们正在寻找Java与其他语言之间的比较。正则表达式是人们苦苦挣扎的一种利基市场，但他们跻身榜单并不奇怪。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbYPhAibibMF4mfoj2AiaxxUlqfdcCdbepR4CMyibuniarfs3PdxTM2V68FZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Java社区中的热门话题&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Java讨论&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们分析了有关&lt;span&gt;👉&lt;/span&gt;&lt;em&gt;“ java” subreddit的&lt;/em&gt;帖子， 并发现Java用户在&lt;em&gt;Reddit&lt;/em&gt;上讨论最多的主题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;专家分析&lt;/em&gt;这些正是我期望看到的主题。例如，用Java编写代码的人总是会对这种语言是否仍然有需求感兴趣，毕竟，这种语言还在发展。我们刚刚庆祝了Java诞生25周年，因此人们希望检查它是否过时和遗留，并且仍然有效。特别是，如果他们刚刚大学毕业，却不知道他们所学的语言是否会为他们提供工作机会。在容器中部署Java是一个非常热门的话题，包括我在内，这是每个人都想知道的东西，但几乎找不到任何信息。我对性能优化这个主题并不感到惊讶，尽管我认为这个主题有点多余，因为大多数应用程序实际上并不需要开发人员进行优化，尽管许多开发人员认为这是一项重要的职业技能。使后端和前端协同工作也可能非常复杂，我可以想象对此存在很多问题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.295&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwaVxNZg27lQeu6Yria0QOvbkDyfkuPosZLNkbOoIiaibeV0DEAZaic7RSvFgN8QDs6mrXicTsY9uXuHEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6cb7840e9466bcfe26737b70f755eddf</guid>
<title>[推荐] 如何设计一个牛逼的 API 接口</title>
<link>https://toutiao.io/k/j1aredh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在日常开发中，总会接触到各种接口。前后端数据传输接口，第三方业务平台接口。一个平台的前后端数据传输接口一般都会在内网环境下通信，而且会使用安全框架，所以安全性可以得到很好的保护。这篇文章重点讨论一下提供给第三方平台的业务接口应当如何设计？我们应该考虑哪些问题？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6288659793814433&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgiaG5BicLkVecicCqe1jClBRZd1d7AB7ysyBqCXszBDLVTiasaBWZKDKxO3xVdMha3Mm4blXCUS5dU0kVMKdW91Pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;776&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要从以上三个方面来设计一个安全的API接口。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一 安全性问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安全性问题是一个接口必须要保证的规范。如果接口保证不了安全性，那么你的接口相当于直接暴露在公网环境中任人蹂躏。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.1 调用接口的先决条件-token&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取token一般会涉及到几个参数&lt;code&gt;appid&lt;/code&gt;，&lt;code&gt;appkey&lt;/code&gt;，&lt;code&gt;timestamp&lt;/code&gt;，&lt;code&gt;nonce&lt;/code&gt;，&lt;code&gt;sign&lt;/code&gt;。我们通过以上几个参数来获取调用系统的凭证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;appid&lt;/code&gt;和&lt;code&gt;appkey&lt;/code&gt;可以直接通过平台线上申请，也可以线下直接颁发。&lt;code&gt;appid&lt;/code&gt;是全局唯一的，每个&lt;code&gt;appid&lt;/code&gt;将对应一个客户，&lt;code&gt;appkey&lt;/code&gt;需要高度保密。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;是时间戳，使用系统当前的unix时间戳。时间戳的目的就是为了减轻DOS攻击。防止请求被拦截后一直尝试请求接口。服务器端设置时间戳阀值，如果请求时间戳和服务器时间超过阀值，则响应失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;nonce&lt;/code&gt;是随机值。随机值主要是为了增加&lt;code&gt;sign&lt;/code&gt;的多变性，也可以保护接口的幂等性，相邻的两次请求&lt;code&gt;nonce&lt;/code&gt;不允许重复，如果重复则认为是重复提交，响应失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sign&lt;/code&gt;是参数签名，将&lt;code&gt;appkey&lt;/code&gt;，&lt;code&gt;timestamp&lt;/code&gt;，&lt;code&gt;nonce&lt;/code&gt;拼接起来进行md5加密（当然使用其他方式进行不可逆加密也没问题）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;token&lt;/code&gt;，使用参数&lt;code&gt;appid&lt;/code&gt;，&lt;code&gt;timestamp&lt;/code&gt;，&lt;code&gt;nonce&lt;/code&gt;，&lt;code&gt;sign&lt;/code&gt;来获取token，作为系统调用的唯一凭证。&lt;code&gt;token&lt;/code&gt;可以设置一次有效（这样安全性更高），也可以设置时效性，这里推荐设置时效性。如果一次有效的话这个接口的请求频率可能会很高。&lt;code&gt;token&lt;/code&gt;推荐加到请求头上，这样可以跟业务参数完全区分开来。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.2 使用POST作为接口请求方式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般调用接口最常用的两种方式就是GET和POST。两者的区别也很明显，GET请求会将参数暴露在浏览器URL中，而且对长度也有限制。为了更高的安全性，所有接口都采用POST方式请求。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.3 客户端IP白名单&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ip白名单是指将接口的访问权限对部分ip进行开放。这样就能避免其他ip进行访问攻击，设置ip白名单比较麻烦的一点就是当你的客户端进行迁移后，就需要重新联系服务提供者添加新的ip白名单。设置ip白名单的方式很多，除了传统的防火墙之外，spring cloud alibaba提供的组件sentinel也支持白名单设置。为了降低api的复杂度，推荐使用防火墙规则进行白名单设置。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.4 单个接口针对ip限流&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限流是为了更好的维护系统稳定性。使用redis进行接口调用次数统计，ip+接口地址作为key，访问次数作为value，每次请求value+1，设置过期时长来限制接口的调用频率。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.5 记录接口请求日志&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用aop全局记录请求日志，快速定位异常请求位置，排查问题原因。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.6 敏感数据脱敏&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在接口调用过程中，可能会涉及到订单号等敏感数据，这类数据通常需要脱敏处理，最常用的方式就是加密。加密方式使用安全性比较高的&lt;code&gt;RSA&lt;/code&gt;非对称加密。非对称加密算法有两个密钥，这两个密钥完全不同但又完全匹配。只有使用匹配的一对公钥和私钥，才能完成对明文的加密和解密过程。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二 幂等性问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幂等性是指任意多次请求的执行结果和一次请求的执行结果所产生的影响相同。说的直白一点就是查询操作无论查询多少次都不会影响数据本身，因此查询操作本身就是幂等的。但是新增操作，每执行一次数据库就会发生变化，所以它是非幂等的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幂等问题的解决有很多思路，这里讲一种比较严谨的。提供一个生成随机数的接口，随机数全局唯一。调用接口的时候带入随机数。第一次调用，业务处理成功后，将随机数作为key，操作结果作为value，存入redis，同时设置过期时长。第二次调用，查询redis，如果key存在，则证明是重复提交，直接返回错误。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三 数据规范问题&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.1 版本控制&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一套成熟的API文档，一旦发布是不允许随意修改接口的。这时候如果想新增或者修改接口，就需要加入版本控制，版本号可以是整数类型，也可以是浮点数类型。一般接口地址都会带上版本号，http://ip:port//v1/list。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.2 响应状态码规范&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个牛逼的API，还需要提供简单明了的响应值，根据状态码就可以大概知道问题所在。我们采用http的状态码进行数据封装，例如200表示请求成功，4xx表示客户端错误，5xx表示服务器内部发生错误。状态码设计参考如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;分类&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1xx&lt;/td&gt;&lt;td&gt;信息，服务器收到请求，需要请求者继续执行操作&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2xx&lt;/td&gt;&lt;td&gt;成功&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3xx&lt;/td&gt;&lt;td&gt;重定向，需要进一步的操作以完成请求&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4xx&lt;/td&gt;&lt;td&gt;客户端错误，请求包含语法错误或无法完成请求&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5xx&lt;/td&gt;&lt;td&gt;服务端错误&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;状态码枚举类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; CodeEnum {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 根据业务需求进行添加&lt;/span&gt;&lt;br/&gt;    SUCCESS(&lt;span&gt;200&lt;/span&gt;,&lt;span&gt;&quot;处理成功&quot;&lt;/span&gt;),&lt;br/&gt;    ERROR_PATH(&lt;span&gt;404&lt;/span&gt;,&lt;span&gt;&quot;请求地址错误&quot;&lt;/span&gt;),&lt;br/&gt;    ERROR_SERVER(&lt;span&gt;505&lt;/span&gt;,&lt;span&gt;&quot;服务器内部发生错误&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; code;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String message;&lt;br/&gt;    &lt;br/&gt;    CodeEnum(&lt;span&gt;int&lt;/span&gt; code, String message) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.code = code;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.message = message;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setCode&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.code = code;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMessage&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.message = message;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.3 统一响应数据格式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便给客户端响应，响应数据会包含三个属性，状态码（code）,信息描述（message）,响应数据（data）。客户端根据状态码及信息描述可快速知道接口，如果状态码返回成功，再开始处理数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;响应结果定义及常用方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;R&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Serializable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = &lt;span&gt;793034041048451317L&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; code;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String message;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Object data = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setCode&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.code = code;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMessage&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.message = message;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;getData&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; data;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 放入响应枚举&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; R &lt;span&gt;fillCode&lt;/span&gt;&lt;span&gt;(CodeEnum codeEnum)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setCode(codeEnum.getCode());&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setMessage(codeEnum.getMessage());&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 放入响应码及信息&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; R &lt;span&gt;fillCode&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code, String message)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setCode(code);&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setMessage(message);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 处理成功，放入自定义业务数据集合&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; R &lt;span&gt;fillData&lt;/span&gt;&lt;span&gt;(Object data)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setCode(CodeEnum.SUCCESS.getCode());&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setMessage(CodeEnum.SUCCESS.getMessage());&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.data = data;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇文章从安全性、幂等性、数据规范等方面讨论了API设计规范。除此之外，一个好的API还少不了一个优秀的接口文档。接口文档的可读性非常重要，虽然很多程序员都不喜欢写文档，而且不喜欢别人不写文档。为了不增加程序员的压力，推荐使用swagger或其他接口管理工具，通过简单配置，就可以在开发中测试接口的连通性，上线后也可以生成离线文档用于管理API。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>