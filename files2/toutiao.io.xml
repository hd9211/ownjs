<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>810b220539785ee2355a4df72e1c341c</guid>
<title>华为鸿蒙 2.0，让我遇见未来 | 码农周刊第 318 期</title>
<link>https://toutiao.io/k/6rprzrd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;华为鸿蒙 2.0，让我遇见未来 | 码农周刊第 318 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第318期（2020-09-16）&lt;/h2&gt;
        &lt;p&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=318&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3180&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_316.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=318&amp;amp;aid=19803&amp;amp;url=https%3A%2F%2Fwww.sheca.com%2Fassets%2Fwwx%2Fpage1.html%3Fsite%3Dkaifazhe02&quot; target=&quot;_blank&quot;&gt;SHECA 提供 SSL 证书一站式服务，为你的网络安全保驾护航，上海 CA 权威认证&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=318&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;深入讲解&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;持续更新&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;帮助大家有针对性地准备面试&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;用于播放特效动画的实现方案。具有高压缩率、硬件解码等优点。同时支持 iOS, Android, Web 平台。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;各有千秋&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;附 demo&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;收藏吧&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;经验分享&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;深入研究&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;教你用 Deployment 全搞定&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;程序员进阶系列&lt;/p&gt;
        
        &lt;p&gt;编程体系结构系列&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;看完这个视频你转头也写了一吨&lt;/p&gt;
        
        &lt;p&gt;类似微信的小程序&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;死磕Elasticsearch！&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 272620 即可&lt;/p&gt;
        
        &lt;p&gt;前端 Or NodeJs。喜欢造轮子的懒人&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 95159 即可&lt;/p&gt;
        
        &lt;p&gt;关于计算机很多很多好玩的，一些常见的使用技巧和案例，还有技术方面的&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 72425 即可&lt;/p&gt;
        
        &lt;p&gt;顺势而为; 在技术人的后场; 分享前沿「技术」和「思想」。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 56624 即可&lt;/p&gt;
        
        &lt;p&gt;五分钟不刷心里发慌&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 378 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=318&amp;amp;aid=19870&amp;amp;url=https%3A%2F%2Fu.jd.com%2FDpNS3m&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/book_318.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;采访实录&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>11009444b48ead89f6e5c569fbffb42a</guid>
<title>JDK 15 正式发布，划时代的 ZGC 同时宣布转正</title>
<link>https://toutiao.io/k/ipkoven</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.42441054091539526&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKIAXa5picIWmfJFiaauRyaNyNvibFwPoupliaWiaCGG7HHEq0zjF3lvdybhicsEslu04HicmbH7E2ZicibsMVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;721&quot;/&gt;&lt;/figure&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;点击上方“&lt;/span&gt;&lt;span&gt;BAT的乌托邦&lt;/span&gt;&lt;span&gt;”，选择“&lt;/span&gt;&lt;span&gt;设为星标&lt;/span&gt;&lt;span&gt;”&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;后台回复“&lt;/span&gt;&lt;span&gt;专栏&lt;/span&gt;&lt;span&gt;”，开启&lt;strong mpa-from-tpl=&quot;t&quot;&gt;专栏模式&lt;/strong&gt;学习&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;✍前言&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2020年9月15日，JDK15正式发布，可谓如约而至。按照Java SE的发展路线图，JDK14自此停止更新。值得注意的是JDK15并非&lt;strong&gt;「LTS」&lt;/strong&gt;版本，Oracle官方对Java SE的支持路线图如下：&lt;img data-ratio=&quot;0.2392857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKIAXa5picIWmfJFiaauRyaNyNo4ssqg9qpwRBqYjZDnS9evSpFuDaQIZ6BeqaX3uht3PSLuncWib9ggA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;JDK8的扩展支持时间超过了JDK11，Oracle你是认真的吗？开个玩笑~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么自Java11之后，哪个版本才是LTS版本呢？Oracle官方并没给出具体参考路线图，但可参考OpenJDK的这张：&lt;img data-ratio=&quot;1.03125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKIAXa5picIWmfJFiaauRyaNyNFicoAkjkDl6aInJNza20EyGEOticeZ9v9iaeMsia54oBiblJhpu2tl2s8kg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;可以看到&lt;strong&gt;「JDK17」&lt;/strong&gt;将是下一个LTS版本，预计发版日期是2021年9月份。当然喽这只是OpenJDK的发版线路图，并不代表Oracle官方，因此仅供参考，不过一般八九不离十。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;小贴士：OpenJDK和Oracle JDK自从JDK11后，就共享了绝大部分代码了，节奏基本保持一致。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从JDK9之后，Oracle采用了新的发布周期：每6个月发布一个版本，每3年发布一个LTS版本。JDK14是继JDK9之后发布的第四个版本， 该版本为非LTS版本，&lt;strong&gt;「最新的LTS版本为JDK11」&lt;/strong&gt;。因为是小鹿快跑，快速迭代，因此此处解释下这两个词：孵化器模块（Incubator）和预览特性（Preview）。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;孵化器模块（孵化版/实验版）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尚未定稿的API/工具，主要用于从Java社区收集使用反馈，稳定性无保障，后期有较大可能性移除&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;预览特性（预览版）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;规格已成型，实现已确定，但还未最终定稿。这些特性还是存在被移除的可能性，但一般来说最后都会被固定下来。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;✍正文&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK15是Java SE平台的第15个版本，由&lt;strong&gt;「JSR 390」&lt;/strong&gt;在Java社区进程中指定。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;OpenJDK 15是9-15发布的，Oracle同步跟上。其它厂商的对应JDK版本也会随后跟上&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该版本共提供14个新特性，通过这些JEP来表示，截图如下：&lt;img data-ratio=&quot;0.6626016260162602&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKIAXa5picIWmfJFiaauRyaNyN7Pz4RrAju2aV4FMhxmPZXbuiaVrVz10q6QwMBwQEk6sicT9icwFuzjGPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;492&quot;/&gt;下面针对其中对开发者日常编程关系较大的特性拉出来解释，并给出对应的使用示例（其实就是JEP 378喽）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;JDK14新特性回顾&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老规矩，在进行JDK15的新特性介绍之前，先回顾下JDK14的主要特性有哪些。JDK 14于2020年3月17日发布。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;一、Switch表达式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新的Switch表达式其实早在JDK 12、13中都已存在了，但只是&lt;strong&gt;「预览版」&lt;/strong&gt;，到了JDK 14就彻底变为稳定版了，可以放心商用。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;小贴士：预览版特性是有可能在后续版本中被移除的，但稳定版后几乎不可能被移除&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;switch新的表达式有两个显著的特点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持箭头表达式返回&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持yield和return返回值。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;1、箭头表达式返回&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK14之前写法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printLetterCount&lt;/span&gt;&lt;span&gt;(DayOfWeek dayOfWeek)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; (dayOfWeek) {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; MONDAY:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; FRIDAY:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; SUNDAY:&lt;br/&gt;            System.out.println(&lt;span&gt;6&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; TUESDAY:&lt;br/&gt;            System.out.println(&lt;span&gt;7&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; THURSDAY:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; SATURDAY:&lt;br/&gt;            System.out.println(&lt;span&gt;8&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; WEDNESDAY:&lt;br/&gt;            System.out.println(&lt;span&gt;9&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要点：break可千万别忘记写，否则就是个大bug，并且还比较&lt;strong&gt;「隐蔽」&lt;/strong&gt;，定位起来稍显困难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK14等效的新写法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printLetterCount&lt;/span&gt;&lt;span&gt;(DayOfWeek dayOfWeek)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; (dayOfWeek) {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; MONDAY, FRIDAY, SUNDAY -&amp;gt; System.out.println(&lt;span&gt;6&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; TUESDAY                -&amp;gt; System.out.println(&lt;span&gt;7&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; THURSDAY, SATURDAY     -&amp;gt; System.out.println(&lt;span&gt;8&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; WEDNESDAY              -&amp;gt; System.out.println(&lt;span&gt;9&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可明显看到新写法不需要一个个break了，从&lt;strong&gt;「语法层面」&lt;/strong&gt;规避了我们犯错的可能性。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;2、yield返回&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK14之前写法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getLetterCount&lt;/span&gt;&lt;span&gt;(DayOfWeek dayOfWeek)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; letterCount;&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; (dayOfWeek) {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; MONDAY:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; FRIDAY:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; SUNDAY:&lt;br/&gt;            letterCount = &lt;span&gt;6&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; TUESDAY:&lt;br/&gt;            letterCount = &lt;span&gt;7&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; THURSDAY:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; SATURDAY:&lt;br/&gt;            letterCount = &lt;span&gt;8&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; WEDNESDAY:&lt;br/&gt;            letterCount = &lt;span&gt;9&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;非法: &quot;&lt;/span&gt; + dayOfWeek);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; letterCount;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK14等效的新写法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getLetterCount&lt;/span&gt;&lt;span&gt;(DayOfWeek dayOfWeek)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;switch&lt;/span&gt; (dayOfWeek) {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; MONDAY, FRIDAY, SUNDAY -&amp;gt; &lt;span&gt;6&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; TUESDAY                -&amp;gt; &lt;span&gt;7&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; THURSDAY, SATURDAY     -&amp;gt; &lt;span&gt;8&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; WEDNESDAY              -&amp;gt; &lt;span&gt;9&lt;/span&gt;;&lt;br/&gt;    };&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用箭头操作符操作效果立竿见影。当然，你还可以使用&lt;code&gt;yield&lt;/code&gt;关键字返回：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getLetterCount&lt;/span&gt;&lt;span&gt;(DayOfWeek dayOfWeek)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;switch&lt;/span&gt; (dayOfWeek) {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; MONDAY  -&amp;gt; &lt;span&gt;6&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;default&lt;/span&gt;      -&amp;gt; {&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; letterCount = dayOfWeek.toString().length();&lt;br/&gt;            yield letterCount;&lt;br/&gt;        }&lt;br/&gt;    };&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;二、instanceof的模式匹配（预览）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该功能在JDK14中处理&lt;strong&gt;「预览版」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK14之前写法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    Object o = &lt;span&gt;&quot;hello world&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(o &lt;span&gt;instanceof&lt;/span&gt; String ){&lt;br/&gt;        String str = String.class.cast(o);&lt;br/&gt;        System.out.println(str);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK14等效的新写法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    Object o = &lt;span&gt;&quot;hello world&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 屁股里直接可写个变量名，不再需要强转了&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(o &lt;span&gt;instanceof&lt;/span&gt; String str){&lt;br/&gt;        System.out.println(str);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;再如：&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (obj &lt;span&gt;instanceof&lt;/span&gt; String s &amp;amp;&amp;amp; s.length() &amp;gt; &lt;span&gt;5&lt;/span&gt;) {&lt;br/&gt; s.contains(..)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你运行时有如下错误：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;java: &lt;span&gt;instanceof&lt;/span&gt; 中的模式匹配 是预览功能，默认情况下禁用。&lt;br/&gt;  （请使用 --enable-preview 以启用 &lt;span&gt;instanceof&lt;/span&gt; 中的模式匹配）&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那是因为此功能是&lt;strong&gt;「预览特性」&lt;/strong&gt;，需要你主动开启，如下：&lt;img data-ratio=&quot;0.5211678832116788&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKIAXa5picIWmfJFiaauRyaNyN4s4CicmmFdksVuM8jQ14CtUXyNvibFJR8Q73SndrTMSwiclicc457pm3EA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;685&quot;/&gt;注意：此特性在&lt;strong&gt;「JDK15」&lt;/strong&gt;中依旧为预览版。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;三、实用的NullPointerException&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;略。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;四、Record（预览）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java年纪太大，语法不够新潮，有时候确实太麻烦，因此有了Record的出现：干掉那些get/set、toString、equals等方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; record &lt;span&gt;Person&lt;/span&gt;&lt;span&gt;(String name,Integer age)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    Person person= &lt;span&gt;new&lt;/span&gt; Person(&lt;span&gt;&quot;YourBatman&quot;&lt;/span&gt;, &lt;span&gt;18&lt;/span&gt;);&lt;br/&gt;    System.out.println(person);&lt;br/&gt;    System.out.println(person.name());&lt;br/&gt;    System.out.println(person.age());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行程序，结果打印：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Person[name=YourBatman, age=&lt;span&gt;18&lt;/span&gt;]&lt;br/&gt;YourBatman&lt;br/&gt;&lt;span&gt;18&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：此特性在&lt;strong&gt;「JDK15」&lt;/strong&gt;中依旧为预览版。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;五、文本块Text Blocks（二次预览）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个特性可是非常好用，它属于二次预览：已在JDK 13预览过一次。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    String html = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;br/&gt;          &amp;lt;html&amp;gt;&lt;br/&gt;              &amp;lt;body&amp;gt;&lt;br/&gt;                  &amp;lt;p&amp;gt;hello world&amp;lt;/p&amp;gt;&lt;br/&gt;              &amp;lt;/body&amp;gt;&lt;br/&gt;          &amp;lt;/html&amp;gt;&lt;br/&gt;          &quot;&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    String query = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;br/&gt;           SELECT * from USER&lt;br/&gt;           WHERE `id` = 1&lt;br/&gt;           ORDER BY `id`, `name`;&lt;br/&gt;           &quot;&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在JDK13中，这种是&lt;strong&gt;「有」&lt;/strong&gt;换行的。在JDK14中，可以加上一个符号让其不让换行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    String query = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;br/&gt;           SELECT * from USER \&lt;br/&gt;           WHERE `id` = 1 \&lt;br/&gt;           ORDER BY `id`, `name`;\&lt;br/&gt;           &quot;&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    System.out.println(query);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行程序，输出（可以看到展示为一行了）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;SELECT * from USER WHERE `id` = &lt;span&gt;1&lt;/span&gt; ORDER BY `id`, `name`;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：此特性在&lt;strong&gt;「JDK15」&lt;/strong&gt;中已经为正式版。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;六、删除CMS垃圾收集器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这款著名的垃圾回收器从这个版本就彻底被删除了。JDK9开始使用G1作为&lt;strong&gt;「默认」&lt;/strong&gt;的垃圾回收器（JDK11中ZGC开始崭露头角），就已经把CMS标记为过期了，在此版本正式删除。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;七、ZGC垃圾回收器（实验）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;革命性的ZGC：任意堆大小（TB级别）都能保证延迟在10ms以内，是以低延迟为首要目标的一款垃圾回收器。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;在JDK14之前，ZGC只能用于Linux上，现在也可使用在windows上了&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：此特性在&lt;strong&gt;「JDK15」&lt;/strong&gt;中已经为正式版（JDK11开始出现）。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;JDK15新特性&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了JDK14新特性回顾做铺垫，再来了解JDK15的新特性就方便很多了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特别说明：运行JDK15需要IDEA 2020.2才能支持哦（JDK14要求IDEA 2020.1），然后关于IDEA 2020.2的使用教程（新特性），请移步我公众号前面发的这篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0MTUwOTgyOQ==&amp;amp;mid=2247489897&amp;amp;idx=1&amp;amp;sn=d37f8e59beede8eec350087865b5948d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;IntelliJ IDEA 2020.2正式发布，诸多亮点总有几款能助你提效&lt;/a&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;一、文本块Text Blocks&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Text Blocks首次是在JDK 13中以预览功能出现的，然后在JDK 14中又预览了一次，终于在JDK 15中被确定下来，可放心使用了（使用示例请参考文上）。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;二、ZGC转正&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ZGC是Java 11引入的新的垃圾收集器（JDK9以后默认的垃圾回收器是G1），经过了多个实验阶段，自此终于成为正式特性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ZGC是一个重新设计的并发的垃圾回收器，可以极大的提升GC的性能。支持任意堆大小而保持稳定的低延迟（10ms以内），性能非常可观。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开方式：使用-XX:+UseZGC命令行参数打开，相信不久的将来它必将成为&lt;strong&gt;「默认的」&lt;/strong&gt;垃圾回收器。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;三、Shenandoah转正&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么形容Shenandoah和ZGC的关系呢？异同点大概如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;相同点：性能几乎可认为是相同的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「不同点」&lt;/strong&gt;：ZGC是Oracle JDK的，根正苗红。而Shenandoah只存在于OpenJDK中，因此使用时需注意你的JDK版本&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开方式：使用-XX:+UseShenandoahGC命令行参数打开。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;四、删除Nashorn JavaScript Engine&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Nashorn是在JDK提出的脚本执行引擎，早在JDK11就已经把它标记为过期了，JDK15完全移除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在JDK11中取以代之的是GraalVM。GraalVM是一个运行时平台，它支持Java和其他基于Java字节码的语言，但也支持其他语言，如JavaScript，Ruby，Python或LLVM。&lt;strong&gt;「性能是Nashorn的2倍以上」&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;五、CharSequence新增isEmpty默认方法&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;啥都不说，源码一看便知：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@since&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;default&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;isEmpty&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.length() == &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;String实现了CharSequence接口的，这应该地球人都知道吧。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;升级建议&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自己玩玩就行，毕竟不是LTS版本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「但是」&lt;/strong&gt;，虽然说仅限于自己玩玩就行，但不代表就没有关注的意义哈。还是那个道理，如果JDK12、13、14、15...都不关注些的话，到时候突然来个JDK17的LTS版本，接受起来就会稍显困难。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;✍总结&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK15整体来看新特性方面并不算很亮眼，它主要是对之前版本&lt;strong&gt;「预览特性」&lt;/strong&gt;的功能做了确定，如文本块、ZGC等，这么一来我们就可以放心大胆的使用啦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;半年一次的发版速度真心学不动了，不过还好我有我的坚持：&lt;strong&gt;「你发任你发，我用Java8。」&lt;/strong&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;✔推荐阅读：&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>573b11a3457f4a9b8a33f127254cd3c4</guid>
<title>Java 15 的新特性</title>
<link>https://toutiao.io/k/1zo4ozy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;article fmt article-content&quot; data-id=&quot;1190000024485709&quot; data-license=&quot;cc&quot;&gt;
                                                    &lt;blockquote&gt;Java语言特性系列&lt;/blockquote&gt;&lt;h2&gt;序&lt;/h2&gt;&lt;p&gt;本文主要讲述一下Java15的新特性&lt;/p&gt;&lt;h2&gt;版本号&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;java -version
openjdk version &quot;15&quot; 2020-09-15
OpenJDK Runtime Environment (build 15+36-1562)
OpenJDK 64-Bit Server VM (build 15+36-1562, mixed mode, sharing)&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;从version信息可以看出是build 15+36&lt;/blockquote&gt;&lt;h2&gt;特性列表&lt;/h2&gt;&lt;blockquote&gt;新增&lt;a href=&quot;https://tools.ietf.org/html/rfc8032&quot; rel=&quot;nofollow noreferrer&quot;&gt;rfc8032&lt;/a&gt;描述的Edwards-Curve Digital Signature Algorithm (EdDSA)实现&lt;br/&gt;使用示例&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;// example: generate a key pair and sign
KeyPairGenerator kpg = KeyPairGenerator.getInstance(&quot;Ed25519&quot;);
KeyPair kp = kpg.generateKeyPair();
// algorithm is pure Ed25519
Signature sig = Signature.getInstance(&quot;Ed25519&quot;);
sig.initSign(kp.getPrivate());
sig.update(msg);
byte[] s = sig.sign();

// example: use KeyFactory to contruct a public key
KeyFactory kf = KeyFactory.getInstance(&quot;EdDSA&quot;);
boolean xOdd = ...
BigInteger y = ...
NamedParameterSpec paramSpec = new NamedParameterSpec(&quot;Ed25519&quot;);
EdECPublicKeySpec pubSpec = new EdECPublicKeySpec(paramSpec, new EdPoint(xOdd, y));
PublicKey pubKey = kf.generatePublic(pubSpec);&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;JDK15引入了sealed classes and interfaces.用于限定实现类，限定父类的使用，为后续的pattern matching的exhaustive analysis提供便利&lt;br/&gt;示例&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;package com.example.geometry;

public abstract sealed class Shape
    permits Circle, Rectangle, Square {...}

public final class Circle extends Shape {...}

public sealed class Rectangle extends Shape 
    permits TransparentRectangle, FilledRectangle {...}
public final class TransparentRectangle extends Rectangle {...}
public final class FilledRectangle extends Rectangle {...}

public non-sealed class Square extends Shape {...}&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;这里使用了3个关键字，一个是sealed，一个是permits，一个是non-sealed；permits的这些子类要么使用final，要么使用sealed，要么使用non-sealed修饰；针对record类型，也可以使用sealed，因为record类型暗示这final&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;package com.example.expression;

public sealed interface Expr
    permits ConstantExpr, PlusExpr, TimesExpr, NegExpr {...}

public record ConstantExpr(int i)       implements Expr {...}
public record PlusExpr(Expr a, Expr b)  implements Expr {...}
public record TimesExpr(Expr a, Expr b) implements Expr {...}
public record NegExpr(Expr e)           implements Expr {...}&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;JDK15引入了Hidden Classes，同时废弃了非标准的sun.misc.Unsafe::defineAnonymousClass，目标是为frameworks提供在运行时生成内部的class&lt;/blockquote&gt;&lt;blockquote&gt;JDK15移除了Nashorn JavaScript Engine及jjs tool，它们在JDK11的被标记为废弃；具体就是jdk.scripting.nashorn及jdk.scripting.nashorn.shell这两个模块被移除了&lt;/blockquote&gt;&lt;blockquote&gt;该特性使用更简单及更现代的方式重新实现了java.net.DatagramSocket及java.net.MulticastSocket以方便更好的维护及debug，新的实现将会更容易支持virtual threads&lt;/blockquote&gt;&lt;blockquote&gt;该特性默认禁用了biased locking(&lt;code&gt;-XX:+UseBiasedLocking&lt;/code&gt;)，并且废弃了所有相关的命令行选型(&lt;code&gt;BiasedLockingStartupDelay, BiasedLockingBulkRebiasThreshold, BiasedLockingBulkRevokeThreshold, BiasedLockingDecayTime, UseOptoBiasInlining, PrintBiasedLockingStatistics and PrintPreciseBiasedLockingStatistics&lt;/code&gt;)&lt;/blockquote&gt;&lt;blockquote&gt;instanceof的Pattern Matching在JDK15进行Second Preview，示例如下:&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;public boolean equals(Object o) { 
    return (o instanceof CaseInsensitiveString cis) &amp;amp;&amp;amp; 
        cis.s.equalsIgnoreCase(s); 
}&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;ZGC在JDK11被作为experimental feature引入，在JDK15变成Production，但是这并不是替换默认的GC，默认的GC仍然还是G1；之前需要通过&lt;code&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseZGC&lt;/code&gt;来启用ZGC，现在只需要&lt;code&gt;-XX:+UseZGC&lt;/code&gt;就可以&lt;br/&gt;相关的参数有ZAllocationSpikeTolerance、ZCollectionInterval、ZFragmentationLimit、ZMarkStackSpaceLimit、ZProactive、ZUncommit、ZUncommitDelay&lt;br/&gt;ZGC-specific JFR events(&lt;code&gt;ZAllocationStall、ZPageAllocation、ZPageCacheFlush、ZRelocationSet、ZRelocationSetGroup、ZUncommit&lt;/code&gt;)也从experimental变为product&lt;/blockquote&gt;&lt;blockquote&gt;Text Blocks在JDK13被作为preview feature引入，在JDK14作为Second Preview，在JDK15变为最终版&lt;/blockquote&gt;&lt;blockquote&gt;Shenandoah在JDK12被作为experimental引入，在JDK15变为Production；之前需要通过&lt;code&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC&lt;/code&gt;来启用，现在只需要&lt;code&gt;-XX:+UseShenandoahGC&lt;/code&gt;即可启用&lt;/blockquote&gt;&lt;blockquote&gt;Solaris and SPARC Ports在JDK14被标记为废弃，在JDK15版本正式移除&lt;/blockquote&gt;&lt;blockquote&gt;Foreign-Memory Access API在JDK14被作为incubating API引入，在JDK15处于Second Incubator&lt;/blockquote&gt;&lt;blockquote&gt;Records在JDK14被作为preview引入，在JDK15处于Second Preview&lt;/blockquote&gt;&lt;blockquote&gt;JDK15废弃了RMI Activation，后续将被移除&lt;/blockquote&gt;&lt;h2&gt;细项解读&lt;/h2&gt;&lt;p&gt;上面列出的是大方面的特性，除此之外还有一些api的更新及废弃，主要见&lt;a href=&quot;http://jdk.java.net/15/release-notes&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK 15 Release Notes&lt;/a&gt;，这里举几个例子。&lt;/p&gt;&lt;h3&gt;添加项&lt;/h3&gt;&lt;blockquote&gt;升级了Unicode，支持Unicode 13.0&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Added isEmpty Default Method to CharSequence (&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8215401&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK-8215401&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;给CharSequence新增了isEmpty方法&lt;br/&gt;java.base/java/lang/CharSequence.java&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;    /**
     * Returns {@code true} if this character sequence is empty.
     *
     * @implSpec
     * The default implementation returns the result of calling {@code length() == 0}.
     *
     * @return {@code true} if {@link #length()} is {@code 0}, otherwise
     * {@code false}
     *
     * @since 15
     */
    default boolean isEmpty() {
        return this.length() == 0;
    }&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Added Support for SO_INCOMING_NAPI_ID Support (&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8243099&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK-8243099&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;jdk.net.ExtendedSocketOptions新增了SO_INCOMING_NAPI_ID选型&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Specialized Implementations of TreeMap Methods (&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8176894&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK-8176894&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;JDK15对TreeMap提供了putIfAbsent, computeIfAbsent, computeIfPresent, compute, merge方法提供了overriding实现&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;New Option Added to jcmd for Writing a gzipped Heap Dump (&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8237354&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK-8237354&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;jcmd的GC.heap_dump命令现在支持gz选型，以dump出gzip压缩版的heap；compression level从1(&lt;code&gt;fastest&lt;/code&gt;)到9(&lt;code&gt;slowest, but best compression&lt;/code&gt;)，默认为1&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;New System Properties to Configure the TLS Signature Schemes (&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8242141&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK-8242141&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;新增了&lt;code&gt;jdk.tls.client.SignatureSchemes&lt;/code&gt;及&lt;code&gt;jdk.tls.server.SignatureSchemes&lt;/code&gt;用于配置TLS Signature Schemes&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Support for certificate_authorities Extension (&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8206925&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK-8206925&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;支持certificate_authorities的扩展&lt;/blockquote&gt;&lt;h3&gt;移除项&lt;/h3&gt;&lt;blockquote&gt;淘汰了-XX:UseAdaptiveGCBoundary&lt;/blockquote&gt;&lt;h3&gt;废弃项&lt;/h3&gt;&lt;blockquote&gt;废弃了ForceNUMA选项&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Disable Native SunEC Implementation by Default (&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8237219&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK-8237219&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;默认禁用了Native SunEC Implementation&lt;/blockquote&gt;&lt;h3&gt;已知问题&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;java.net.HttpClient Does Not Override Protocols Specified in SSLContext Default Parameters (&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8239594&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK-8239594&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;HttpClient现在没有覆盖在SSLContext Default Parameters中指定的Protocols&lt;/blockquote&gt;&lt;h3&gt;其他事项&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;DatagramPacket.getPort() Returns 0 When the Port Is Not Set (&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8237890&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK-8237890&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;当DatagramPacket没有设置port的时候，其getPort方法返回0&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Improved Ergonomics for G1 Heap Region Size (&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8241670&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK-8241670&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;优化了默认G1 Heap Region Size的计算&lt;/blockquote&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;Java15主要有如下几个特性&lt;/p&gt;&lt;h2&gt;doc&lt;/h2&gt;
                                                &lt;/article&gt;

                                                

                                                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2c16a97ac7bca432a41a09c0347f4806</guid>
<title>面试：为了进阿里，死磕了 ConcurrentHashMap 源码和面试题（二）</title>
<link>https://toutiao.io/k/o3yc3dw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1 cid=&quot;n0&quot; mdtype=&quot;heading&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注公众号【&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;Ccww技术博客&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;】，原创技术文章第一时间推出&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n132&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在上篇&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2ODk2NDMwNw==&amp;amp;mid=2247484131&amp;amp;idx=1&amp;amp;sn=75dd2b537aa47ecae993307944540ff1&amp;amp;chksm=fc84a75fcbf32e497cfb07736c2ddfad089d9535038938c4fe1ee44a186d95d7af1bff476b6d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《面试：为了进阿里，死磕了CurrentHashMap源码和面试题(一)》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《面试：为了进阿里，死磕了&lt;span&gt;ConcurrentHashMap&lt;/span&gt;源码和面试题(一)》&lt;/a&gt;，研究了基础原理，以及&lt;span&gt;ConcurrentHashMap&lt;/span&gt;数据put的流程等线程安全的，来回顾一下面试的问题点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那我们接下继续看看CurrentHashMap核心内容，扩容机制。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n132&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;ConcurrentHashMap的扩容机制&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p cid=&quot;n135&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;扩容变量&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; nextn = nextTab.length;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ForwardingNode&amp;lt;K,V&amp;gt; fwd = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ForwardingNode&amp;lt;K,V&amp;gt;(nextTab);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; advance = &lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; finishing = &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n138&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;2.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;因为&lt;code&gt;ConcurrentHashMap&lt;/code&gt;支持多线程扩容，多个线程处理不同的节点，首先先计算出每个线程（CPU）处理的桶数：将 length / 8 然后除以 CPU核心数。如果得到的结果小于 16，那么就使用 16。（避免出现转移任务不均匀的现象）&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;int n = tab.length, &lt;span class=&quot;code-snippet__built_in&quot;&gt;stride&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;code-snippet__built_in&quot;&gt;stride&lt;/span&gt; = (&lt;span class=&quot;code-snippet__type&quot;&gt;NCPU&lt;/span&gt; &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) ? (n &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;) / &lt;span class=&quot;code-snippet__type&quot;&gt;NCPU&lt;/span&gt; : n) &amp;lt; &lt;span class=&quot;code-snippet__type&quot;&gt;MIN_TRANSFER_STRIDE&lt;/span&gt;)  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;stride&lt;/span&gt; = &lt;span class=&quot;code-snippet__type&quot;&gt;MIN_TRANSFER_STRIDE&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n141&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;3.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;新的 table 尚未初始化，进行2倍扩容&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (nextTab == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Node&amp;lt;K,V&amp;gt;[] nt = (Node&amp;lt;K,V&amp;gt;\[])&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Node&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?&lt;/span&gt;,&lt;span class=&quot;code-snippet__meta&quot;&gt;?&amp;gt;&lt;/span&gt;[n &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;];  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        nextTab = nt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable ex) {      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sizeCtl = Integer.MAX_VALUE;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    nextTable = nextTab;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    transferIndex = n;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n144&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;4.&lt;/strong&gt;在死循环中，每个线程先取得自己需要转移的桶的区间：先获取CAS 修改 transferIndex，即 length - 区间值，留下剩余的区间值供后面的线程使用(i 表示下标，bound 表示当前线程可以处理的当前桶区间最小下标)。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n145&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n147&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;判断&lt;code&gt;--i&lt;/code&gt;是否大于等于&lt;code&gt;bound&lt;/code&gt; ，正常情况下，如果大于 bound 不成立，说明该线程上次领取的任务已经完成了。那么，需要在下面继续领取任务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n149&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;code&gt;transferIndex&lt;/code&gt; 小于等于0，说明没有区间了 ，i 改成 -1，推进状态变成 false，不再推进，表示，扩容结束了，当前线程可以退出了&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n151&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;第一次进入循环，走下面的 nextIndex 赋值操作（获取最新的转移下标）。其余情况都是：如果可以推进，将 i 减一，然后修改成不可推进。如果 i 对应的桶处理成功了，改成可以推进。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;int nextIndex, nextBound;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (--i &amp;gt;= bound || finishing)  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;advance&lt;/span&gt; = &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((nextIndex = transferIndex) &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    i = -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;advance&lt;/span&gt; = &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((nextIndex = transferIndex) &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        i = -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;advance&lt;/span&gt; = &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__type&quot;&gt;U&lt;/span&gt;.compareAndSwapInt  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    (this, &lt;span class=&quot;code-snippet__type&quot;&gt;TRANSFERINDEX&lt;/span&gt;, nextIndex,  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    nextBound = (nextIndex &amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;stride&lt;/span&gt; ?  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    nextIndex - &lt;span class=&quot;code-snippet__built_in&quot;&gt;stride&lt;/span&gt; : &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;))) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    bound = nextBound;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    i = nextIndex - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;advance&lt;/span&gt; = &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n144&quot; mdtype=&quot;paragraph&quot;&gt;5.&lt;span&gt;判断该节点是否需要进行扩容处理&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n155&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n157&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;是否已完成扩容&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n167&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;code&gt;(f = tabAt(tab, i)) == null&lt;/code&gt;,获取老 tab i 下标位置的变量，如果是 null，写入 fwd 占位，推进下个下标&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n169&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;code&gt;(fh = f.hash) == MOVED&lt;/code&gt;说明别的线程已经处理过了，再次推进一个下标。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n171&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;以上情况都不符合就说明，这个位置有实际值了，且不是占位符，需要对这个节点&lt;code&gt;synchronized&lt;/code&gt;上锁，进行数据迁移&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; || i &amp;gt;= n || i + n &amp;gt;= nextn) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int sc;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (finishing) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                nextTable = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                table = nextTab;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                sizeCtl = (n &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) - (n &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (U.compareAndSwapInt(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, SIZECTL, sc = sizeCtl, sc - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((sc - &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;) != resizeStamp(n) &amp;lt;&amp;lt; RESIZE_STAMP_SHIFT)。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                finishing = advance = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                i = n; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((f = tabAt(tab, i)) == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            advance = casTabAt(tab, i, &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;, fwd);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((fh = f.hash) == MOVED)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            advance = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            synchronized (f) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ....&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n171&quot; mdtype=&quot;paragraph&quot;&gt;6.&lt;span&gt;扩容时，对该节点&lt;/span&gt;&lt;code&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;/code&gt;&lt;span&gt;加锁,再进行处理,判断 i 下标处的桶节点是否和 f 相同:&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (fh &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; runBit = fh &amp;amp; n;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       Node&amp;lt;K,V&amp;gt; lastRun = f; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Node&amp;lt;K,V&amp;gt; p = f.next; p != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;; p = p.next) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; b = p.hash &amp;amp; n;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (b != runBit) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 runBit = b;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 lastRun = p; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (runBit == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 ln = lastRun;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 hn = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  hn = lastRun; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  ln = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Node&amp;lt;K,V&amp;gt; p = f; p != lastRun; p = p.next) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ph = p.hash; K pk = p.key; V pv = p.val;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((ph &amp;amp; n) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       ln = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Node&amp;lt;K,V&amp;gt;(ph, pk, pv, ln);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    hn = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Node&amp;lt;K,V&amp;gt;(ph, pk, pv, hn);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          setTabAt(nextTab, i, ln);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          setTabAt(nextTab, i + n, hn);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          setTabAt(tab, i, fwd);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          advance = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (f &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; TreeBin) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     TreeBin&amp;lt;K,V&amp;gt; t = (TreeBin&amp;lt;K,V&amp;gt;)f;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     TreeNode&amp;lt;K,V&amp;gt; lo = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;, loTail = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     TreeNode&amp;lt;K,V&amp;gt; hi = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;, hiTail = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; lc = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, hc = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Node&amp;lt;K,V&amp;gt; e = t.first; e != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;; e = e.next) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; h = e.hash;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          TreeNode&amp;lt;K,V&amp;gt; p = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TreeNode&amp;lt;K,V&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           (h, e.key, e.val, &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((h &amp;amp; n) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((p.prev = loTail) == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                         lo = p;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                         loTail.next = p;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   loTail = p;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   ++lc;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             } &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((p.prev = hiTail) == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           hi = p;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           hiTail.next = p;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   hiTail = p;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   ++hc;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ln = (lc &amp;lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              (hc != &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) ? &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TreeBin&amp;lt;K,V&amp;gt;(lo) : t;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    hn = (hc &amp;lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 (lc != &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) ? &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TreeBin&amp;lt;K,V&amp;gt;(hi) : t;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    setTabAt(nextTab, i, ln);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    setTabAt(nextTab, i + n, hn);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    setTabAt(tab, i, fwd);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    advance = &lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n171&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;当&lt;code&gt;ConcurrentHashMap&lt;/code&gt;中元素的数量达到&lt;code&gt;cap * loadFactor&lt;/code&gt;时，就需要进行扩容。扩容主要通过&lt;code&gt;transfer()&lt;/code&gt;方法进行，当有线程进行&lt;code&gt;put&lt;/code&gt;操作时，如果正在进行扩容，可以通过&lt;code&gt;helpTransfer()&lt;/code&gt;方法加入扩容。也就是说，ConcurrentHashMap支持多线程扩容，多个线程处理不同的节点，实现方式是，将Map表拆分，让每个线程处理自己的区间。如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.303&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrjDjpyooXYGkFXgwNX3HLcj4hEacDMCPwnaKv5NvFWlia4WTsKpg34QJyUKO0co0ibx622PMwIWzh5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n275&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;ConcurrentHashMap的get方法是否要加锁，为什么？&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(Object key) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; e, p; int n, eh; K ek;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       int h = spread(key.hashCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((tab = table) != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (n = tab.length) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          (e = tabAt(tab, (n - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;amp; h)) != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((eh = e.hash) == h) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((ek = e.key) == key || (ek != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; key.equals(ek)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; e.&lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (eh &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (p = e.find(h, key)) != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; ? p.&lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; : &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; ((e = e.next) != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (e.hash == h &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  ((ek = e.key) == key || (ek != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; key.equals(ek))))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; e.&lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n192&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;ConcurrentHashMap的get方法就是从Hash表中读取数据，并不会与扩容不冲突，因此该方法也不需要同步锁，这样可提高ConcurrentHashMap 的并发性能。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n194&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h4 cid=&quot;n195&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;为什么使用ConcurrentHashMap&lt;/span&gt;&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n196&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n198&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;HashMap在多线程中进行put方法有可能导致程序死循环，因为多线程可能会导致HashMap形成环形链表，(即链表的一个节点的next节点永不为null，就会产生死循环),会导致CPU的利用率接近100%，因此并发情况下不能使用HashMap。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n200&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;HashTable通过使用synchronized保证线程安全，但在线程竞争激烈的情况下效率低下。因为当一个线程访问HashTable的同步方法时，其他线程只能阻塞等待占用线程操作完毕。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n202&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;ConcurrentHashMap使用分段锁的思想，对于不同的数据段使用不同的锁，可以支持多个线程同时访问不同的数据段，这样线程之间就不存在锁竞争，从而提高了并发效率。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 cid=&quot;n203&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;ConcurrentHashMap迭代器是强一致性还是弱一致性？HashMap呢？&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n204&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在迭代时，ConcurrentHashMap使用了不同于传统集合的快速失败迭代器，弱一致迭代器。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n205&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在这种迭代方式中，当iterator被创建后集合再发生改变就不再是抛出ConcurrentModificationException，取而代之的是在改变时new新的数据从而不影响原有的数据，iterator完成后再将头指针替换为新的数据，&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n206&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;这样iterator线程可以使用原来老的数据，而写线程也可以并发的完成改变，更重要的，这保证了多个线程并发执行的连续性和扩展性，是性能提升的关键。&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n207&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;JDK1.7与JDK1.8中ConcurrentHashMap的区别&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n208&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;其实可以看出JDK1.8版本的ConcurrentHashMap的数据结构已经接近HashMap，&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n209&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n211&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;相对而言，ConcurrentHashMap只是增加了同步的操作来控制并发，从JDK1.7版本的ReentrantLock+Segment+HashEntry，到JDK1.8版本中synchronized+CAS+HashEntry+红黑树。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n213&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;数据结构：取消了Segment分段锁的数据结构，取而代之的是数组+链表+红黑树的结构。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n215&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;保证线程安全机制：JDK1.7采用segment的分段锁机制实现线程安全，其中segment继承自ReentrantLock。JDK1.8采用CAS+Synchronized保证线程安全。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n217&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;锁的粒度：原来是对需要进行数据操作的Segment加锁，现调整为对每个数组元素加锁（Node）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n219&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;链表转化为红黑树:定位结点的hash算法简化会带来弊端,Hash冲突加剧,因此在链表节点数量大于8时，会将链表转化为红黑树进行存储。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n221&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;查询时间复杂度：从原来的遍历链表O(n)，变成遍历红黑树O(logN)。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n221&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p cid=&quot;n158&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;各位看官还可以吗？喜欢的话，动动手指点个再看💗呗！！谢谢支持！&lt;span md-inline=&quot;linebreak&quot;&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n158&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;欢迎扫码关注，原创技术文章第一时间推出&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.36857142857142855&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;350&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgfBz2Ve78FylxcGWmXaueSuqPguurBCWEkeY1ibeLl1wlxUyibdesc4YeuiaJJjSt6HTiab2iaHyXyyicA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n221&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5a40fe546b5db1003465bd7809db84e9</guid>
<title>分布式事务解决方案常见误区与实用建议</title>
<link>https://toutiao.io/k/h9nal21</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;CREATE TABLE `t_local_message`(&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; id BIGINT PRIMARY KEY COMMENT &#x27;主键&#x27;,&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  module INT NOT NULL COMMENT &#x27;消息模块&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  tag VARCHAR(20) NOT NULL COMMENT &#x27;消息标签&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  business_key VARCHAR(60) NOT NULL COMMENT &#x27;业务键&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  queue VARCHAR(60) NOT NULL COMMENT &#x27;队列&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  exchange VARCHAR(60) NOT NULL COMMENT &#x27;交换器&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  exchange_type VARCHAR(10) NOT NULL COMMENT &#x27;交换器类型&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  routing_key VARCHAR(60) NOT NULL COMMENT &#x27;路由键&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  retry_times TINYINT NOT NULL DEFAULT 0 COMMENT &#x27;重试次数&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建日期时间&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  edit_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改日期时间&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  seq_no VARCHAR(60) NOT NULL COMMENT &#x27;流水号&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  message_status TINYINT NOT NULL DEFAULT 0 COMMENT &#x27;消息状态&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  INDEX idx_business_key(business_key),&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  INDEX idx_create_time(create_time),&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  UNIQUE uniq_seq_no(seq_no)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;)COMMENT &#x27;本地消息表&#x27;;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CREATE TABLE `t_local_message_content`(&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  id BIGINT PRIMARY KEY COMMENT &#x27;主键&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  message_id BIGINT NOT NULL COMMENT &#x27;本地消息表主键&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  message_content TEXT COMMENT &#x27;消息内容&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  UNIQUE uniq_message_id(message_id)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;)COMMENT &#x27;本地消息内容表&#x27;;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>