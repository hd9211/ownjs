<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>93558c72d8cb89efc710398988c42bed</guid>
<title>Java 线程池总结</title>
<link>https://toutiao.io/k/4z3o5gw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;Java线程池的写法和参数是面试中出现频率很高的基础题。越是基础的东西，特别是对高阶职位的面试者，需要回答的符合自己面试的职位等级。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;这里也不能说是一个多么好的答案，只是说如果是我，我怎么回答，仅供参考。以下回答可想象为面试官的问题是：谈谈线程池。&lt;/section&gt;&lt;section&gt;主要的思路是作为一个宽泛的问题，回答需要体现结构化的思维，这是必选项。在此基础上，可以体现深度，这是加分项。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;回答&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;线程池设计目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;Java的线程主流实现都是采用&lt;span&gt;&lt;strong&gt;内核级线程&lt;/strong&gt;&lt;/span&gt;实现，创建线程要进行操作系统状态切换。为了避免资源过度消耗需要设法重用线程执行多个任务。线程池就是一个线程缓存，负责对线程进行统一分配、调优与监控。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;线程池实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3477406679764244&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8eRqdxL261ptdgllN1sRBnzvrVJ4UQibWWKxm5Uv2cnS5hUKVtkj67aWnIqaiaxweqycnNhzsYJvTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1527&quot;/&gt;&lt;/p&gt;&lt;section&gt;如上图所示，线程池的Java实现都是继承于JUC(java.util.concurrent)的Executor接口。这个接口只有一个execute方法，代表了其行为。ExecutorService接口继承Executor，加上了生命周期的处理方法。其常用实现类如：ThreadPoolExecutor、ScheduledThreadPoolExecutor、ForkJoinPool的默认参数构造类都有在Executors这个工具类里直接实例化。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;但是阿里巴巴开发手册不推荐使用Executors这个工具类。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2966360856269113&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8eRqdxL261ptdgllN1sRBnx35gicziapBjKRiagEsicicpboyZrODspibicib5ic7HYCMiboBQp0pZnQC0iarjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;981&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;于是，我们需要自己了解ThreadPoolExecutor初始化参数的含义和使用方法。&lt;/section&gt;&lt;pre&gt;&lt;span&gt;/**&lt;br/&gt; * Creates a new {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;ThreadPoolExecutor} with the given initial&lt;br/&gt; * parameters and default rejected execution handler.&lt;br/&gt; *&lt;br/&gt; * &lt;/span&gt;&lt;span&gt;@param &lt;/span&gt;&lt;span&gt;corePoolSize &lt;/span&gt;&lt;span&gt;the number of threads to keep in the pool, even&lt;br/&gt; *        if they are idle, unless {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;allowCoreThreadTimeOut} is set&lt;br/&gt; * &lt;/span&gt;&lt;span&gt;@param &lt;/span&gt;&lt;span&gt;maximumPoolSize &lt;/span&gt;&lt;span&gt;the maximum number of threads to allow in the&lt;br/&gt; *        pool&lt;br/&gt; * &lt;/span&gt;&lt;span&gt;@param &lt;/span&gt;&lt;span&gt;keepAliveTime &lt;/span&gt;&lt;span&gt;when the number of threads is greater than&lt;br/&gt; *        the core, this is the maximum time that excess idle threads&lt;br/&gt; *        will wait for new tasks before terminating.&lt;br/&gt; * &lt;/span&gt;&lt;span&gt;@param &lt;/span&gt;&lt;span&gt;unit &lt;/span&gt;&lt;span&gt;the time unit for the {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;keepAliveTime} argument&lt;br/&gt; * &lt;/span&gt;&lt;span&gt;@param &lt;/span&gt;&lt;span&gt;workQueue &lt;/span&gt;&lt;span&gt;the queue to use for holding tasks before they are&lt;br/&gt; *        executed.  This queue will hold only the {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;Runnable}&lt;br/&gt; *        tasks submitted by the {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;execute} method.&lt;br/&gt; * &lt;/span&gt;&lt;span&gt;@param &lt;/span&gt;&lt;span&gt;threadFactory &lt;/span&gt;&lt;span&gt;the factory to use when the executor&lt;br/&gt; *        creates a new thread&lt;br/&gt; * &lt;/span&gt;&lt;span&gt;@throws &lt;/span&gt;&lt;span&gt;IllegalArgumentException if one of the following holds:&lt;/span&gt;&lt;span&gt;&amp;lt;br&amp;gt;&lt;br/&gt; &lt;/span&gt;&lt;span&gt;*         {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;corePoolSize &amp;lt; 0}&lt;/span&gt;&lt;span&gt;&amp;lt;br&amp;gt;&lt;br/&gt; &lt;/span&gt;&lt;span&gt;*         {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;keepAliveTime &amp;lt; 0}&lt;/span&gt;&lt;span&gt;&amp;lt;br&amp;gt;&lt;br/&gt; &lt;/span&gt;&lt;span&gt;*         {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;maximumPoolSize &amp;lt;= 0}&lt;/span&gt;&lt;span&gt;&amp;lt;br&amp;gt;&lt;br/&gt; &lt;/span&gt;&lt;span&gt;*         {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;maximumPoolSize &amp;lt; corePoolSize}&lt;br/&gt; * &lt;/span&gt;&lt;span&gt;@throws &lt;/span&gt;&lt;span&gt;NullPointerException if {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;workQueue}&lt;br/&gt; *         or {&lt;/span&gt;&lt;span&gt;@code &lt;/span&gt;&lt;span&gt;threadFactory} is null&lt;br/&gt; */&lt;br/&gt;&lt;/span&gt;&lt;span&gt;public &lt;/span&gt;&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;(&lt;span&gt;int &lt;/span&gt;corePoolSize&lt;span&gt;,&lt;br/&gt;                          int &lt;/span&gt;maximumPoolSize&lt;span&gt;,&lt;br/&gt;                          long &lt;/span&gt;keepAliveTime&lt;span&gt;,&lt;br/&gt;                          &lt;/span&gt;TimeUnit unit&lt;span&gt;,&lt;br/&gt;                          &lt;/span&gt;BlockingQueue&amp;lt;Runnable&amp;gt; workQueue&lt;span&gt;,&lt;br/&gt;                          &lt;/span&gt;ThreadFactory threadFactory) {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;(corePoolSize&lt;span&gt;, &lt;/span&gt;maximumPoolSize&lt;span&gt;, &lt;/span&gt;keepAliveTime&lt;span&gt;, &lt;/span&gt;unit&lt;span&gt;, &lt;/span&gt;workQueue&lt;span&gt;,&lt;br/&gt;         &lt;/span&gt;threadFactory&lt;span&gt;, &lt;/span&gt;&lt;span&gt;defaultHandler&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;}&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;ThreadPoolExecutor有6个参数，第一个是核心线程数，如果线程池无事可做，还是会保留这些线程。第二个是最大线程数，超过核心线程数的部分都会在第三个和第四个参数合起来决定的最长空闲存活时间超过后被剔除。第五个参数是阻塞队列，线程忙不过来要去这里面排队。最后一个是线程池工厂，主要决定队列也装不下的线程怎么处理，默认策略是抛出异常。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;线程池的5种状态设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.369672131147541&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8eRqdxL261ptdgllN1sRBn63JhIzHef1f9QicHHWP1sDOJgfZvGj0icm4ia9SLU9iaibkGjQAm6VUlOow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1220&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.47711088504577825&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8eRqdxL261ptdgllN1sRBnM9d6vLKMnsgy2PRUol8FqaMOdDnM5hia6pBuWNDhO7XJ0erg2iafjYFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;983&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;线程池的底层原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;Java线程的实现是通过调用native方法调用操作系统的pthread API，由内核线程统一管理。一个实现了Runnable的类只是标识可用多线程运行，真正产生大开销的是new Thread()时进行的内核调用。而线程池技术将worker线程缓存下来进行重用。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;补充问答&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;线程池的关闭&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关闭线程池可以调用shutdownNow和shutdown两个方法来实现。&lt;br/&gt;shutdownNow：对正在执行的任务全部发出interrupt()，停止执行，对还未开始执行的任务全部取消，并且返回还没开始的任务列表。&lt;br/&gt;shutdown：当我们调用shutdown后，线程池将不再接受新的任务，但也不会去强制终止已经提交或者正在执行中的任务。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;线程池都有哪几种工作队列&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1、ArrayBlockingQueue&lt;br/&gt;是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。&lt;br/&gt;2、LinkedBlockingQueue&lt;br/&gt;一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列&lt;br/&gt;3、SynchronousQueue&lt;br/&gt;一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。&lt;br/&gt;4、PriorityBlockingQueue&lt;br/&gt;一个具有优先级的无限阻塞队列。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;ForkJoinPool的原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;本质上将一个任务进一步细分，内部使用“工作窃取”算法，让任务在各个CPU上尽可能均衡。&lt;/section&gt;&lt;p&gt;（1）每个工作线程都有自己的工作队列WorkQueue；&lt;/p&gt;&lt;p&gt;（2）这是一个双端队列，它是线程私有的；&lt;/p&gt;&lt;p&gt;（3）ForkJoinTask中fork的子任务，将放入运行该任务的工作线程的队头，工作线程将以LIFO的顺序来处理工作队列中的任务；&lt;/p&gt;&lt;p&gt;（4）为了最大化地利用CPU，空闲的线程将从其它线程的队列中“窃取”任务来执行；&lt;/p&gt;&lt;p&gt;（5）从工作队列的尾部窃取任务，以减少竞争；&lt;/p&gt;&lt;p&gt;（6）双端队列的操作：push()/pop()仅在其所有者工作线程中调用，poll()是由其它线程窃取任务时调用的；&lt;/p&gt;&lt;p&gt;（7）当只剩下最后一个任务时，还是会存在竞争，是通过CAS来实现的；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;本文的回答部分从线程池实现目标、实现和关键设计、底层原理四个方面说明线程池，具有一定的系统性。补充问答部分作为问题的深入在面试时被深入提问问到或者面试官示意继续深入来说的时候使用。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a41e4aa97937778242dac50dea065437</guid>
<title>最近的一些 Java 面试小结</title>
<link>https://toutiao.io/k/ffm07xa</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间陆续面试了一些大中小公司，踩了不少坑，挂了很多，同时也有不少感悟和收获。这里想把那段经历记录一下，如果能对亲们有所帮助就再好不过了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试的过程其实也是一个自我认识和学习的过程，即便暂时没打算跳槽，隔段时间出去面一面对自己还是有些好处的：不仅可以评估一下自己在市场的价值和竞争力，同时也能了解一些新技术、更新一下自己的技术栈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且在一个地方待久了，可能不自觉的就会陷入到一种「舒适区」，久而久之，就像温水里的青蛙，万一哪天被“优化”了可能会不知所措。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文主要从「项目」和「技术」两个方面进行总结，除此之外还有一些比较开放式的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元旦过了，“金三银四”还会远吗？春节后有想法的亲们，可以嗨起来了！&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;项目&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有人说：三年一道坎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于工作三年左右的伙伴们来说，「项目经历」可谓重中之重，可以说比具体的技术点更重要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术点其实大同小异，有些临时刷刷题就能了解个大概。但项目经历往往难以临时编造，如果不是自己真实做过的项目、或者没有充分的准备，一旦面试官问得稍微深入很可能 hold 不住，面试扣分不少、甚至可能直接挂掉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此不少面试官喜欢从项目入手，抽丝剥茧、步步深入，通过项目把技术点串起来考察。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不同人的项目千差万别，但还是有一些共同亮点的：比如高并发场景，复杂的架构设计，JVM 调优及问题排查等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些亮点有的话固然更好，但如果平时 CRUD 居多、没太多的亮点，其实也不必太慌，技术亮点不多的话，可以多思考一些业务上的亮点，比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;业务模型比较复杂&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对业务整体的架构设计很熟悉&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务模块拆分比较合理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自己在业务中做过哪些扩展和优化？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务数据的上下游流转是怎样的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;遇到过什么问题，如何解决的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;等等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些其实也是亮点，可以让面试官看到你平时对业务有自己的思考和理解，而不是只关注自己的那一块，不只是写代码的机器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实面试官对你的项目是一无所知的，他的印象仅仅停留在你简历上描述的那些文字（而且有些面试官可能是被临时拉过来的，别问我为什么知道🐶）。面试官通常的开场白就是让你自我介绍，其实这也是一个考察语言组织能力和口头表达能力的地方。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;技术&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们面的毕竟是技术岗，技术本身的重要性不言而喻。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术面试中，最重要的可以说是「技术体系」。也就是你不仅要有技术的深度和广度，更要能把它们串起来，其实有不少技术点是相通或相似的，如果面试中能够触类旁通、举一反三，是一个很好的加分项。比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Redis 的 AOF 和 MySQL 的 bin log&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Spring 中的 BeanDefinition 和 JVM 中类的元信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;布隆过滤器和 HashMap&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;等等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术的积累虽然主要在平时，但刷刷面试题还是很有必要的，有不少其实就是所谓的“八股文”。这里主要列出本人面试过程中真实遇到的一些面试题，仅供参考。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Java&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;线程池&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;锁&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;synchronized 锁升级过程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ReentrantLock&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;实现原理（AQS）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;公平锁如何实现？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;volatile 特性&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;HashMap&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;HashMap &amp;amp; ConcurrentHashMap 实现原理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConcurrentHashMap 如何实现线程安全&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;MySQL&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;索引&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;分类？使用场景？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;InnoDB 索引的结构（B+树），为什么不用 B 树？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何查看索引的使用情况？Explain 关注哪些字段？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;事务&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;常用数据结构&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;常见缓存问题&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;缓存穿透、缓存击穿、缓存雪崩、热点 key&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何解决上述问题？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;持久化：RDB、AOF，二者区别&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redis 为什么快？线程模型是怎样的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内存满了怎么办？淘汰策略有哪些？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用什么集群框架？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Spring&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;IoC、AOP 实现&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事务传播特性、失效场景&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JDK &amp;amp; CGLib 区别&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Spring Boot 启动原理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Dubbo&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Dubbo 架构&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;负载均衡算法、容错策略、灰度测试&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SPI 机制&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RPC 调用过程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RPC &amp;amp; HTTP&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;二者区别与联系&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么 Spring Cloud 使用 HTTP 而非 RPC？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;JVM&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;运行时内存划分&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;垃圾收集算法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个对象的内存分配过程？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CMS 收集器&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;收集过程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;哪个过程会有 STW？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何处理内存碎片问题？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;G1 收集器特点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GC Roots 有哪些？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JVM 常用参数配置有哪些？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内存占用过多，如何排查？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;RocketMQ&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;整体架构&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何保证消息的可靠性？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何实现顺序消息？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消费者接口幂等设计&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事务消息实现&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;分布式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;分布式锁&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Redis 如何实现？命令？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ZooKeeper 如何实现？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;获取锁失败时如何处理？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;分布式事务&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;2PC：缺点？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3PC：解决了 2PC 什么问题？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TCC：缺点？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最终一致性：MQ 实现流程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现框架（Seata）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;其他&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了上面的「项目」和「技术」，可能还会问到一些其他问题，比如场景设计与分析、算法，还可能有一些比较开放的问题，下面介绍下我所遇到的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;场景设计&amp;amp;分析&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比较典型的场景设计，电商类的公司很可能会问到，网上有很多案例和文章分析，这里不再赘述。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个应该不是热门，本人也就遇到过一次，不过那一次被搞得有点懵，可能更多的是考察思路，大家可以多思考一下。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;JVM 问题排查：线上 JVM 内存、CPU 飙升，如何去排查？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要涉及一些常用的 Linux 命令和 JDK 自带工具，比如 top、jstack、jmap 等，以及阿里的开源工具 Arthas 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然在实际情况中我们可能很少有机会接触（小小开发通常没权限，还是要运维大佬支持），但这些工具还是要了解的，可以在本地跑个 Demo 去验证，以免到时候答不上来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如线上所有机器（包括服务器、数据库、缓存服务器）全部宕机，如何处理？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;PS: 这些场景设计和分析的问题，通常比较综合，一般是考察对一个场景的整体设计，或者分析和解决问题的思路。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;算法&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;PS: 算法问题遇到的不是很多，有些考察算法可能就是单纯的面试流程。当然，字节这类的公司除外，想去的话肯定还是要刷很多算法的。&lt;/p&gt;&lt;p&gt;相比之下，大部分公司更注重「项目深度」和「技术体系」，或者给出一些实际的场景，考察分析和解决问题的经验和思路。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;开放问题&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些问题比较开放，没有固定的答案，可能就是面试官想看下你的临场发挥吧。遇到的几个问题如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;有没有带过人？经历是怎样的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你作为 PM，如何从整体协调一个项目？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你在团队推行 DDD，你会怎么做？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你有什么缺点？优点？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;未来三年的职业规划？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在公司主要有哪些成长？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;上级、同事对你的评价？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最近在看什么书？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;末了&lt;/span&gt;&lt;/h1&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;面试流程&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我所接触的面试大部分是「三轮技术面 + HR 面」的形式，也有一些是两轮技术面，不同公司可能不太一样。一面一般是电话面初筛，后面二三轮技术面和 HR 面通常在一起。这样其实也挺好，跑一趟就行了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;心态&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试的心态也很重要。其实你跟面试官之间是平等的，面试的过程是让他对你更加了解，而不是他对你的考核。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我刚开始面的时候，&lt;/span&gt;&lt;span&gt;由于好久没面试，再加上本来就不太爱说话，刚开始紧张的不行，后来面了几次之后才逐渐有点感觉。&lt;/span&gt;&lt;span&gt;如果较长时间没面试，可以先面一两家练练手、找找感觉。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，整个面试时间也不建议拖得太久，否则整个过程会比较累，最好还是一鼓作气。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;啰里啰嗦一堆，其实面试还是挺看运气的，如果跟面试官聊得比较投机，对你的评分自然也不错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，预祝想跳槽的亲们一路绿灯！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/ophTb90oYCR6eOZrkKMnznEahtiajNrSAicJDk24paw3VDzbZRLXgyibXWEuZ4qhuSgXoeFaqj1gpV96gVpZCHc7g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b17c607b2c4ca2393d987c45c92e4f8a</guid>
<title>uni-app 使用前的调研和开发心得</title>
<link>https://toutiao.io/k/wyg3rez</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;/p&gt;&lt;p line=&quot;CTTC&quot;&gt;&lt;span&gt;之前的工时系统是原生的小程序实现，由于产品逻辑需要优化，代码混乱又仅限微信平台使用，公司致力于想给工时系统重构后支持多平台，并对外开放使用，使之成为一款真正的商业产品。经过前期调研后，uni-app对于多平台的支持最好，且易于上手，于是采用该框架对工时系统进行改造。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;Hspc&quot;&gt; &lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;strong&gt;uni-app介绍&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p line=&quot;OuC6&quot;&gt;&lt;span&gt;uni，读 you ni，是统一的意思。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;NS7n&quot;&gt;&lt;span&gt;很多人以为小程序是微信先推出的，其实，DCloud才是这个行业的开创者。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;h9un&quot;&gt;&lt;span&gt;DCloud于2012年开始研发小程序技术，优化webview的功能和性能，并加入W3C和HTML5中国产业联盟，推出了HBuilder开发工具，为后续产业化做准备。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;07qC&quot;&gt;&lt;span&gt;2015年，DCloud正式商用了自己的小程序，产品名为“流应用”，它不是B/S模式的轻应用，而是能接近原生功能、性能的动态App，并且即点即用。为将该技术发扬光大，DCloud将技术标准捐献给工信部旗下的HTML5中国产业联盟，并推进各家流量巨头接入该标准，开展小程序业务。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;wRSo&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;bPZM&quot;&gt;&lt;span&gt;在2015年9月，DCloud推进微信团队开展小程序业务，演示了流应用的秒开应用、扫码获取应用、分享链接获取应用等众多场景案例，以及分享了webview体验优化的经验。微信团队经过分析，于2016年初决定上线小程序业务，但其没有接入联盟标准，而是订制了自己的标准。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;EtWW&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;Xq53&quot;&gt;&lt;span&gt;DCloud持续在业内普及小程序理念，推进各大流量巨头，包括手机厂商，陆续上线类似小程序/快应用等业务。部分公司接入了联盟标准，但更多公司因利益纷争严重，标准难以统一。技术是纯粹的，不应该因为商业利益而分裂。开发者面对如此多的私有标准不是一件正确的事情。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;Xq53&quot;&gt;&lt;/p&gt;&lt;p line=&quot;Mmyx&quot;&gt;&lt;span&gt;既然各巨头无法在标准上达成一致，那么就通过这个框架为开发者抹平各平台差异。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;IHSX&quot;&gt;&lt;span&gt;这，就是uni-app的由来。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因为多年积累，所以DCloud拥有300多万开发者，并不意外&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因为DCloud一直都有小程序的iOS、Android引擎，所以uni-app的App端和小程序端保持高度一致，并不意外&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因为DCloud在引擎上的持续投入，所以uni-app的App端功能、性能比大多数小程序引擎都优秀，并不意外&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因为DCloud对各家小程序太了解了，所以做好抹平各端差异的跨端框架，并不意外&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p line=&quot;D7Fs&quot;&gt;&lt;span&gt;现在，uni-app已经是业内最风靡的应用框架，支撑着6亿手机用户的庞大生态。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;INsn&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;strong&gt;较其它跨平台框架的优势&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;跨端数量更多&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;平台能力不受限&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;性能体验更优秀&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;周边生态丰富&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;学习成本低&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开发成本低&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p line=&quot;N3lu&quot;&gt;&lt;span&gt;几大跨平台开发框架性能和兼容性对比：微信原生版、wepy版、mpvue版、taro版、uni-app版、chalemeon版 https://github.com/dcloudio/test-framework&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;akqU&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;strong&gt;前置条件&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p line=&quot;iR4u&quot;&gt;&lt;span&gt;基本上是&lt;span&gt;Vue&lt;/span&gt;和&lt;span&gt;微信小程序&lt;/span&gt;的结合，看了uni-app的介绍和背景，就知道为什么小程序的接口组件命名和uni-app几乎一样了&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;BjgV&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;开发工具&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p line=&quot;dVmT&quot;&gt;&lt;span&gt;HBuilderX （轻如编辑器，强如IDE），官方IDE下载地址&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;可视化的方式比较简单，HBuilderX 内置相关环境，开箱即用，无需配置node ，内置浏览器及时预览，更多功能可通过插件实现&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你之前习惯了使用其它的如VS code、Sublime Text编辑器，在工具栏里可以选择预设快捷键方案切换里选择对应的工具类型，几乎无成本就上手了&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;工具里内嵌了强大的代码块功能，通过预设的变量生成某一段代码，还支持自定义，可以通过自定义代码块教程学习如何生成你自己的代码块，可以节省很多的时间&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;创建项目时可以选择你的应用类型，生成默认模版&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;第一次运行时，在工具栏的运行&lt;span&gt;-&amp;gt; 运行到小程序模拟器 -&amp;gt; 微信开发者工具，首次需要配置微信开发者工具的安装路径，然后点击运行即可调起微信开发者工具（&lt;/span&gt;&lt;span&gt;如果出现调不起来的情况，请到微信开发者工具设置菜单-&amp;gt;安全设置里把服务端口开启&lt;/span&gt;&lt;span&gt;）；新建项目目录不是选择uni-app的项目根目录，选择的是根目录下面的unpackage-&amp;gt;dist-&amp;gt;dev-&amp;gt;mp-weixin，运行的是编译后的代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;建议平时开发选择内嵌浏览器进行及时预览，修改及生效，还可以通过扫描地址栏上方的二维码在手机上预览（必须连的是同一个局域网），调试和浏览器一样打开审查元素&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p line=&quot;QG1a&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;强大的开发者生态&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p line=&quot;ulDD&quot;&gt;&lt;span&gt;uni-app拥有丰富的插件市场，这里都是开发者贡献的插件，让开发更高效，不必重复造轮子，当然你也可以为开源贡献参与其中，详情见插件开发指南，同时&lt;span&gt;兼容 NPM 包管理系统 uni-app完整支持 NPM ，&lt;/span&gt;活跃的社区氛围，有问题或者交流可以去社区发帖&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;1PD2&quot;&gt;&lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何实现优雅的跨端&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p line=&quot;X4Fi&quot;&gt;&lt;span&gt;不同平台特有的API支持条件编译，在 C 语言中，通过 #ifdef、#ifndef 的方式，为 windows、mac 等不同 os 编译不同的代码，uni-app 参考这个思路，为 uni-app 提供了条件编译手段，在一个工程里优雅的完成了平台个性化实现 。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;saM0&quot;&gt;&lt;span&gt;条件编译是利用注释实现的，在不同语法里注释写法不一样：&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;3X3V&quot;&gt;&lt;span&gt;js使用 &lt;span&gt;// 注释&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;nWy5&quot;&gt;&lt;span&gt;css 使用 &lt;span&gt;/* 注释 */&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;B6Ta&quot;&gt;&lt;span&gt;vue/nvue 模板里使用 &lt;span&gt;&amp;lt;!-- 注释 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;r4k7&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;rulU&quot;&gt;&lt;span&gt;&lt;strong&gt;uni-app也是支持钉钉小程序的，调试工具用的是支付宝开发者工具，在运行菜单里原本没有钉钉这一项，需要增加拓展，方法参见&lt;/strong&gt;https://ask.dcloud.net.cn/article/36353&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;1RFB&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;uni-app开发较原生开发对比&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p line=&quot;HBGP&quot;&gt;&lt;span&gt;&lt;strong&gt;优势&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;目录结构清晰，页面文件由原来的wxml，wxss，json，js四个文件变成现在的一个vue文件&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持scss和less写法，通过它的变量、继承、嵌套、运算等特性和函数增加css开发效率，减少代码量&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在uni-app中可以通过vuex插件来全局管理数据&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p line=&quot;FW0L&quot;&gt;&lt;span&gt;&lt;strong&gt;劣势&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;编译调试比较麻烦，编译时间长，编译一次本地缓存数据被清除，需要登陆和缓存的过程对于调试增加了时间成本&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;多平台发布需要多写一些条件编译代码，要了解各平台的差异性&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;原生开发定义全局变量和方法可在app.js中直接定义，全局变量一般用globalData表示，uni-app中几种常见的实现方式有：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p line=&quot;k8Ov&quot;&gt;&lt;strong&gt;&lt;span&gt;公用模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p line=&quot;k8Ov&quot;&gt;&lt;/p&gt;&lt;p line=&quot;yDCN&quot;&gt;&lt;span&gt;定义一个公用的模块，用来组织和管理这些全局的变量，在需要的页面引入，一般放在根目录下common目录里，然后用的时候在页面中引入该模块，这种方式维护起来比较方便，但是用的时候每次都得引入&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;Scfr&quot;&gt;&lt;span&gt;&lt;strong&gt;挂载到Vue.prototype&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;cuDl&quot;&gt;&lt;span&gt;在main.js中挂载属性/方法&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import req from &#x27;./api/index&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import util from &#x27;./utils/util&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Vue.prototype.api = &#x27;http://uniapp.dcloud.io&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Vue.prototype.now = Date.now || function () {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  return new Date().getTime();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Vue.prototype.$api = req&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Vue.prototype.$util = util&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p line=&quot;ARrh&quot;&gt;&lt;span&gt;引用的时候&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;script&amp;gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  export default {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    data() {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        return {};  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    onLoad(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        console.log(&#x27;now:&#x27; + this.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    methods: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      getProjectWorktime(userId, workDay) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    this.$api.wktime.getWktimeStatus(userId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          {workDay: workDay}).then(res =&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            console.log(res)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p line=&quot;Dlmt&quot; linespacing=&quot;115&quot;&gt;&lt;span&gt;&lt;strong&gt;globalData定义全局变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;Dlmt&quot; linespacing=&quot;115&quot;&gt;&lt;/p&gt;&lt;p line=&quot;PuQB&quot;&gt;&lt;span&gt;小程序中有个globalData概念，可以在 App 上声明全局变量。Vue 之前是没有这类概念的，但 uni-app 引入了globalData概念，并且在包括H5、App等平台都实现了。在 App.vue 可以定义 globalData ，也可以使用 API 读写这个值。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;script&amp;gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  export default {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    globalData: {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        text: &#x27;text&#x27;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p line=&quot;OhNR&quot;&gt;&lt;span&gt;在其它页面中取值的方式&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;getApp().globalData.text&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p line=&quot;kNAz&quot;&gt;&lt;span&gt;&lt;strong&gt;uni-app的本地存储&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;kNAz&quot;&gt;&lt;/p&gt;&lt;p line=&quot;VliU&quot;&gt;&lt;span&gt;uni.storage的键值对存储，这个是全端支持的。&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;95Tz&quot;&gt;&lt;span&gt;uni-app的Storage在不同端的实现不同，uni.storage在app侧，映射为plus.storage；h5侧映射为localstorage；各个小程序平台映射为其自带的storage键值对存储：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;H5端为localStorage，浏览器限制5M大小，是缓存概念，可能会被清理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;App端为原生的plus.storage，无大小限制，不是缓存，持久化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;各个小程序端为其自带的storage api，数据存储生命周期跟小程序本身一致，即除用户主动删除或超过一定时间被自动清理，否则数据都一直可用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;微信小程序单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支付宝小程序单条数据转换成字符串后，字符串长度最大200*1024。同一个支付宝用户，同一个小程序缓存总上限为10MB。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;百度、头条小程序文档未说明大小限制&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p line=&quot;wOZ7&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;span&gt;常见的平台差异处理（目前仅对微信小程序和H5）&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;H5页面底部菜单是包含在页面高度内的，如果postion置为fixed的话，&lt;span&gt;bottom: 0; &lt;/span&gt;&lt;span&gt;需要写成&lt;/span&gt;&lt;span&gt;bottom: var(--window-bottom);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;登陆逻辑需要用在模版里插入条件编译，逻辑里需要注入不同的登陆方法&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;!-- #ifdef H5 --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;H5登陆&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;!-- #endif --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;!-- #ifndef H5 --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;其它平台登陆&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;!-- #endif --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;br/&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;非H5端默认并未启用 scoped，如需要隔离组件样式可以在 style 标签增加 scoped 属性，H5端为了隔离页面间的样式默认启用了 scoped&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;在所有的tabbar页面跳转都要用navigateto,来确保tabbar的list不发生任何改变，而小程序不受影响（&lt;/span&gt;&lt;span&gt;出现的异常是在h5中tabbar页面用redirect跳转到非tabbar页面，底部菜单仍存在&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p line=&quot;zODt&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;发布注意事项&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p line=&quot;TWZR&quot;&gt;&lt;span&gt;uni-app各端能运行的是编译后的代码，文件位于根目录下unpackage-&amp;gt;dist-&amp;gt;build/dev，build目录是发布的代码，dev是本地预览的代码&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;bz7C&quot;&gt;&lt;span&gt;&lt;strong&gt;H5端发布：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;点击发行-&amp;gt;网站-H5手机版，需要配置网站域名，编译到代码中解决接口请求跨域的问题&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根目录下manifest.json文件关于h5配置，注意选择路由模式，hash和history，运行的基础路径，就是域名解析对应的服务器上项目的目录&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p line=&quot;re2C&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;思考及感想&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p line=&quot;OsYs&quot;&gt;&lt;span&gt;之前听过一个大佬的一句话：如果我只能给其他程序员一个建议，那就是编写小的代码块，你要多写小方法、小功能、小程序。写完不断思考如何精简你的代码，如何完善你的逻辑，只有基本功扎实了，你才能在大的系统和程序里游刃有余。&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>42bc75cd64241cbc794bf5403b6e3c09</guid>
<title>[译] 为什么我们不用数据库生成 ID？</title>
<link>https://toutiao.io/k/v3hruzg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;strong&gt;先介绍一下背景 🔭&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;团队正在一个为 SQL Server 构建数据目录项目的历程中，我们&lt;strong&gt;优化系统以实现解耦&lt;/strong&gt;。这对我们来说非常重要，从根本上来说，我归结为两个核心原则，希望每个软件专业人员都能认同：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面是 protoactor-go 开源项目里的一句话 “software should be composed, not built”，与我要在本文陈述的观点非常相似：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6776429809358753&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8XkvNnTiapOPic8xZ6eSB2CCoNIUrBPVMM8XsiafXfgc6K1EqrLF71ibMqcKC2Ffbwa6vxZ4c2tj2rtqrwP2wDhLRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;对持久化有何影响？🤔&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;考虑到前面总体原则，我们不想把自己的状态持久化耦合到一个特定的数据库引擎上。从实际情况来看，就是说不将持久化的具体关注点传递到领域层。之所以要实现这一点，因为我们今天对规则的认知可能会让我们依赖某种具体数据库技术，比如 SQL Server，但并不能确保它能满足未来的能力需求。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有了这个具体的要求，持久化就需要出现在域事件而不是存储系统中，这也导致不同的存储需求。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;幸运的是，有一些广为人知的、经过实战检验的模式可以解决这个问题，如结合 CQRS 领域驱动设计中的聚合设计等。因此这里的假设是，实现理想状态对我们来说是低成本的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;代码生成 ID 还是数据库生成 ID 🔬&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;许多数据存储系统（如 SQL Server）都具备为每条记录（如行、文档等）生成唯一标识符的方法。当将新记录插入表中时，使用自动增量键可以生成唯一编号。当我们要插入一条新记录时，数据库引擎就自动完成自增主键，并且可以确保该键对于表是唯一的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是如果依赖数据库来为我们业务域生成唯一标识符，这将让&lt;strong&gt;业务层与数据存储系统耦合在一起&lt;/strong&gt;。如果我们想切换一个不支持生成自动增量主键的数据存储系统，那就不能简单更换。而且，每个数据存储系统生成标识符的方式都不一样，这可能会导致我们最终使用不同的主键类型。除此之外，这些类型的生成方式可能不适合分布式系统。例如，当我们在 SQL Server 数据库中拥有一个生成主键的表时，我们没有一个简单的方法在分布式环境中水平扩展这个表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;通过让业务域的消费者（即通过命令和查询与域通信的传输层）负责唯一键的标识符生成&lt;/strong&gt;，就可以克服这些问题。它减少对环境的依赖性，又反过来让我们不用依赖数据库来生成 Id。这种方法还有一个好处：它可以支持分布式。例如，我们可以将一个表分区到两个物理 SQL Server上，并分担查询的请求。如果我们有一个自动增量的字段，这在 SQL Server 上就不行了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;我们决定做什么？🚀&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;基于这些事实，我们决定让业务域层来生成域集合的标识符。我们在域层内将这些标识符表示为 64 位无符号整数。域消费者可以根据自己的上下文自由决定应该用什么表示方式（例如ASP.NET Core MVC 可以将标识符序列化为字符串，以便于其客户端消费资源对象等）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;为什么要 64 位整型，而不是 UUID？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后，您可能想知道为什么使用64位整数。此处的主要目的是使我们能够甚至跨聚合根生成唯一的标识符。&lt;span&gt;考虑到几乎每个平台都有对应的 API，UUID 是非常方便的调用方式（例如 .NET 中 Guid.NewGuid() 等）。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;UUID 最大的问题是存储和索引方面的成本与开销&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，虽然对我们来说不是大问题。不过，在分布式系统中，已经有一些成熟的方法来生成唯一标识符作为更高效的主键类型，比如使用 64 位整数。Twitter Snowflake (1) 算法就是其中之一，这让我们选择了 64 位整数而不是 UUID。我们使用的是 Rob Janssen 的开源 IdGen (2) 库，它是一个适用于 .NET 的 Twitter Snowflake 类型的 ID 生成器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(1) https://developer.twitter.com/en/docs/basics/twitter-ids.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(2) https://github.com/RobThree/IdGen&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;英文原文：&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://medium.com/ingeniouslysimple/why-did-we-shift-away-from-database-generated-ids-7e0e54a49bb3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;参考阅读：&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文由高可用架构翻译，技术原创及架构实践文章，欢迎通过公众号菜单「联系我们」进行投稿。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;高可用架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;改变互联网的构建方式&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img data-w=&quot;200&quot; data-type=&quot;jpeg&quot; data-s=&quot;300,640&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/8XkvNnTiapOPOK9rQud9XibGhPOPsA3gA8Wr4CEnzmhfZQzSGu0Q09GOuk18S9icZtuVnQewvyqZtOWyDnJPBDn1A/640?wx_fmt=jpeg&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1bd682e484ac1e882ceebfa2b9d1c779</guid>
<title>Go 并发编程（九）：深入理解 Context</title>
<link>https://toutiao.io/k/h3qtyq7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body&quot;&gt;&lt;blockquote&gt;&lt;p&gt;本系列为极客时间 Go 进阶训练营笔记，同步直播更新，预计一周更新 1 ~ 2 篇文章，到 202103 月更新完成&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;楔子&quot;&gt;&lt;a href=&quot;#楔子&quot; class=&quot;headerlink&quot; title=&quot;楔子&quot;/&gt;楔子&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;https://lailin.xyz/post/go-training-week3-waitgroup.html&quot;&gt;Week03: Go 并发编程(六) 深入理解 WaitGroup&lt;/a&gt; 、 &lt;a href=&quot;https://lailin.xyz/post/go-training-week3-errgroup.html&quot;&gt;Week03: Go 并发编程(七) 深入理解 errgroup&lt;/a&gt; 中我们提到了等待多个 goroutine 协作的方式，但是我们现在想一下这么一个常见的场景。现在有一个 Server 服务在执行，当请求来的时候我们启动一个 goroutine 去处理，然后在这个 goroutine 当中有对下游服务的 rpc 调用，也会去请求数据库获取一些数据，这时候如果下游依赖的服务比较慢，但是又没挂，只是很慢，可能一次调用要 1min 才能返回结果，这个时候我们该如何处理？&lt;/p&gt;&lt;p&gt;如下图所示，首先假设我们使用 WaitGroup 进行控制，等待所有的 goroutine 处理完成之后返回，可以看到我们实际的耗时远远大于了用户可以容忍的时间。&lt;br/&gt;&lt;img src=&quot;https://lailin.xyz/images/1610027116078-2e1368bf-015e-4459-8517-73dc858ed083.svg&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;02_Go进阶03_blog_context.drawio.svg&quot;/&gt;&lt;br/&gt;如下图所示，再考虑一个常见的场景，万一上面的 rpc goroutine 很早就报错了，但是 下面的 db goroutine 又执行了很久，我们最后要返回错误信息，很明显后面 db goroutine 执行的这段时间都是在白白的浪费用户的时间。&lt;br/&gt;&lt;img src=&quot;https://lailin.xyz/images/1610027303842-4272e9a1-af9c-4804-a779-f72c1f82a1a0.svg&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;02_Go进阶03_blog_context.drawio.svg&quot;/&gt;&lt;/p&gt;&lt;p&gt;这时候就应该请出 context 包了，&lt;strong&gt;context 主要就是用来在多个 goroutine 中设置截止日期、同步信号，传递请求相关值。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;每一次 context 都会从顶层一层一层的传递到下面一层的 goroutine 当上面的 context 取消的时候，下面所有的 context 也会随之取消。&lt;/strong&gt;&lt;br/&gt;**&lt;br/&gt;上面的例子当中，如果引入 context 后就会是这样，如下图所示，context 会类似一个树状结构一样依附在每个 goroutine 上，当上层的 req goroutine 的 context 超时之后就会将取消信号同步到下面的所有 goroutine 上一起返回，从而达到超时控制的作用&lt;br/&gt;&lt;img src=&quot;https://lailin.xyz/images/1610027726018-4ff7389e-ec4a-4107-99ac-493f587f2a88.svg&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;02_Go进阶03_blog_context.drawio.svg&quot;/&gt;&lt;br/&gt;如下图所示，当 rpc 调用失败之后，会出发 context 取消，然后这个取消信号就会同步到其他的 goroutine 当中&lt;br/&gt;&lt;img src=&quot;https://lailin.xyz/images/1610027762059-43c810a8-619e-4f8d-ad74-7a2767635aa0.svg&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;02_Go进阶03_blog_context.drawio.svg&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;package-context&quot;&gt;&lt;a href=&quot;#package-context&quot; class=&quot;headerlink&quot; title=&quot;package context&quot;/&gt;package context&lt;/h2&gt;&lt;h3 id=&quot;使用说明&quot;&gt;&lt;a href=&quot;#使用说明&quot; class=&quot;headerlink&quot; title=&quot;使用说明&quot;/&gt;使用说明&lt;/h3&gt;&lt;p&gt;在使用一个新的库的时候，我们一般需要先看它的官方说明，得益于 godoc 的约束，所以标准库和第三方库的文档都可以通过 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://pkg.go.dev&quot;&gt;pkg.go.dev&lt;/a&gt; 进行搜索查询&lt;/p&gt;&lt;h4 id=&quot;使用准则&quot;&gt;&lt;a href=&quot;#使用准则&quot; class=&quot;headerlink&quot; title=&quot;使用准则&quot;/&gt;使用准则&lt;/h4&gt;&lt;p&gt;context 包一开始就告诉了我们应该怎么用，不应该怎么用，这是应该被共同遵守的约定。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对 server 应用而言，传入的请求应该创建一个 context，接受&lt;/li&gt;&lt;li&gt;通过 &lt;code&gt;WithCancel&lt;/code&gt; , &lt;code&gt;WithDeadline&lt;/code&gt; , &lt;code&gt;WithTimeout&lt;/code&gt; 创建的 Context 会同时返回一个 cancel 方法，这个方法必须要被执行，不然会导致 context 泄漏，这个可以通过执行 &lt;code&gt;go vet&lt;/code&gt; 命令进行检查&lt;/li&gt;&lt;li&gt;应该将 &lt;code&gt;context.Context&lt;/code&gt; 作为函数的第一个参数进行传递，参数命名一般为 &lt;code&gt;ctx&lt;/code&gt; 不应该将 Context 作为字段放在结构体中。&lt;/li&gt;&lt;li&gt;不要给 context 传递 nil，如果你不知道应该传什么的时候就传递 &lt;code&gt;context.TODO()&lt;/code&gt;&lt;/li&gt;&lt;li&gt;不要将函数的可选参数放在 context 当中，context 中一般只放一些全局通用的 metadata 数据，例如 tracing id 等等&lt;/li&gt;&lt;li&gt;context 是并发安全的可以在多个 goroutine 中并发调用&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;函数签名&quot;&gt;&lt;a href=&quot;#函数签名&quot; class=&quot;headerlink&quot; title=&quot;函数签名&quot;/&gt;函数签名&lt;/h4&gt;&lt;p&gt;context 包暴露的方法不多，看下方说明即可&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 创建一个带有新的 Done channel 的 context，并且返回一个取消的方法&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WithCancel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent Context)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ctx Context, cancel CancelFunc)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 创建一个具有截止时间的 context&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 截止时间是 d 和 parent(如果有截止时间的话) 的截止时间中更早的那一个&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 当 parent 执行完毕，或 cancel 被调用 或者 截止时间到了的时候，这个 context done 掉&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WithDeadline&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent Context, d time.Time)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(Context, CancelFunc)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 其实就是调用的 WithDeadline&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WithTimeout&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent Context, timeout time.Duration)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(Context, CancelFunc)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; CancelFunc&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Context&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 一般用于创建 root context，这个 context 永远也不会被取消，或者是 done&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 底层和 Background 一致，但是含义不同，当不清楚用什么的时候或者是还没准备好的时候可以用它&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 为 context 附加值&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// key 应该具有可比性，一般不应该是 string int 这种默认类型，应该自己创建一个类型&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 避免出现冲突，一般 key 不应该导出，如果要导出的话应该是一个接口或者是指针&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WithValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent Context, key, val &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;/&gt;源码分析&lt;/h3&gt;&lt;h4 id=&quot;context-Context-接口&quot;&gt;&lt;a href=&quot;#context-Context-接口&quot; class=&quot;headerlink&quot; title=&quot;context.Context 接口&quot;/&gt;context.Context 接口&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Context &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; {&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 返回当前 context 的结束时间，如果 ok = false 说明当前 context 没有设置结束时间&lt;/span&gt;&lt;br/&gt;Deadline() (deadline time.Time, ok &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;)&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 返回一个 channel，用于判断 context 是否结束，多次调用同一个 context done 方法会返回相同的 channel&lt;/span&gt;&lt;br/&gt;Done() &amp;lt;-&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{}&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 当 context 结束时才会返回错误，有两种情况&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// context 被主动调用 cancel 方法取消：Canceled&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// context 超时取消: DeadlineExceeded&lt;/span&gt;&lt;br/&gt;Err() error&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 用于返回 context 中保存的值, 如何查找，这个后面会讲到&lt;/span&gt;&lt;br/&gt;Value(key &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{}) &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&quot;默认上下文-context-Backgroud&quot;&gt;&lt;a href=&quot;#默认上下文-context-Backgroud&quot; class=&quot;headerlink&quot; title=&quot;默认上下文: context.Backgroud&quot;/&gt;默认上下文: context.Backgroud&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Backgroud()，&lt;/strong&gt;在前面有讲到， 一般用于创建 root context，这个 context 永远也不会被取消，或超时&lt;br/&gt;&lt;strong&gt;TODO()， &lt;/strong&gt;底层和 Background 一致，但是含义不同，当不清楚用什么的时候或者是还没准备好的时候可以用它&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; (&lt;br/&gt;background = &lt;span class=&quot;hljs-built_in&quot;&gt;new&lt;/span&gt;(emptyCtx)&lt;br/&gt;todo       = &lt;span class=&quot;hljs-built_in&quot;&gt;new&lt;/span&gt;(emptyCtx)&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; background&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; todo&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看源码我们可以发现，background 和 todo 都是实例化了一个 emptyCtx&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; emptyCtx &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(*emptyCtx)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Deadline&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(deadline time.Time, ok &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(*emptyCtx)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &amp;lt;-&lt;span class=&quot;hljs-title&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;{} {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(*emptyCtx)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(*emptyCtx)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(key &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;{} {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;emptyCtx 就如同他的名字一样，全都返回空值&lt;/p&gt;&lt;h4 id=&quot;如何取消-context-WithCancel&quot;&gt;&lt;a href=&quot;#如何取消-context-WithCancel&quot; class=&quot;headerlink&quot; title=&quot;如何取消 context : WithCancel&quot;/&gt;如何取消 context : WithCancel&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;WithCancel(),&lt;/strong&gt; 方法会创建一个可以取消的 context&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WithCancel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent Context)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ctx Context, cancel CancelFunc)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; parent == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cannot create context from nil parent&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 包装出新的 cancelContext&lt;/span&gt;&lt;br/&gt;c := newCancelCtx(parent)&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 构建父子上下文的联系，确保当父 Context 取消的时候，子 Context 也会被取消&lt;/span&gt;&lt;br/&gt;propagateCancel(parent, &amp;amp;c)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;c, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; { c.cancel(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, Canceled) }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;不止 WithCancel 方法，其他的 WithXXX 方法也不允许传入一个 nil 值的父 context&lt;br/&gt;&lt;code&gt;newCancelCtx&lt;/code&gt; 只是一个简单的包装就不展开了， &lt;code&gt;propagateCancel&lt;/code&gt; 比较有意思，我们一起来看看&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;propagateCancel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent Context, child canceler)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 首先判断 parent 能不能被取消&lt;/span&gt;&lt;br/&gt;    done := parent.Done()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; done == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// parent is never canceled&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 如果可以，看一下 parent 是不是已经被取消了，已经被取消的情况下直接取消 子 context&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-done:&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// parent is already canceled&lt;/span&gt;&lt;br/&gt;child.cancel(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, parent.Err())&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 这里是向上查找可以被取消的 parent context&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p, ok := parentCancelCtx(parent); ok {&lt;br/&gt;        &lt;span class=&quot;hljs-comment&quot;&gt;// 如果找到了并且没有被取消的话就把这个子 context 挂载到这个 parent context 上&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;hljs-comment&quot;&gt;// 这样只要 parent context 取消了子 context 也会跟着被取消&lt;/span&gt;&lt;br/&gt;p.mu.Lock()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// parent has already been canceled&lt;/span&gt;&lt;br/&gt;child.cancel(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, p.err)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.children == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;p.children = &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;[canceler]&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;br/&gt;}&lt;br/&gt;p.children[child] = &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{}{}&lt;br/&gt;}&lt;br/&gt;p.mu.Unlock()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span class=&quot;hljs-comment&quot;&gt;// 如果没有找到的话就会启动一个 goroutine 去监听 parent context 的取消 channel&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;hljs-comment&quot;&gt;// 收到取消信号之后再去调用 子 context 的 cancel 方法&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-parent.Done():&lt;br/&gt;child.cancel(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, parent.Err())&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-child.Done():&lt;br/&gt;}&lt;br/&gt;}()&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;接下来我们就看看 cancelCtx 长啥样&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; cancelCtx &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;Context &lt;span class=&quot;hljs-comment&quot;&gt;// 这里保存的是父 Context&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;mu       sync.Mutex            &lt;span class=&quot;hljs-comment&quot;&gt;// 互斥锁&lt;/span&gt;&lt;br/&gt;done     &lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{}         &lt;span class=&quot;hljs-comment&quot;&gt;// 关闭信号&lt;/span&gt;&lt;br/&gt;children &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;[canceler]&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{} &lt;span class=&quot;hljs-comment&quot;&gt;// 保存所有的子 context，当取消的时候会被设置为 nil&lt;/span&gt;&lt;br/&gt;err      error&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 Done 方法这里采用了 懒汉式加载的方式，第一次调用的时候才会去创建这个 channel&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(c *cancelCtx)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &amp;lt;-&lt;span class=&quot;hljs-title&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;{} {&lt;br/&gt;c.mu.Lock()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c.done == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;c.done = &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;br/&gt;}&lt;br/&gt;d := c.done&lt;br/&gt;c.mu.Unlock()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Value 方法很有意思，这里相当于是内部 &lt;code&gt;cancelCtxKey&lt;/code&gt; 这个变量的地址作为了一个特殊的 key，当查询这个 key 的时候就会返回当前 context 如果不是这个 key 就会向上递归的去调用 parent context 的 Value 方法查找有没有对应的值&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(c *cancelCtx)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(key &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;{} {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key == &amp;amp;cancelCtxKey {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c.Context.Value(key)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在前面讲到构建父子上下文之间的关系的时候，有一个去查找可以被取消的父 context 的方法 &lt;code&gt;parentCancelCtx&lt;/code&gt; 就用到了这个特殊 value&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;parentCancelCtx&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent Context)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(*cancelCtx, &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 这里先判断传入的 parent 是不是永远不可取消的，如果是就直接返回了&lt;/span&gt;&lt;br/&gt;done := parent.Done()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; done == closedchan || done == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 这里利用了 context.Value 不断向上查询值的特点，只要出现第一个可以取消的 context 的时候就会返回&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 如果没有的话，这时候 ok 就会等于 false&lt;/span&gt;&lt;br/&gt;p, ok := parent.Value(&amp;amp;cancelCtxKey).(*cancelCtx)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !ok {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 这里去判断返回的 parent 的 channel 和传入的 parent 是不是同一个，是的话就返回这个 parent&lt;/span&gt;&lt;br/&gt;p.mu.Lock()&lt;br/&gt;ok = p.done == done&lt;br/&gt;p.mu.Unlock()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !ok {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;接下来我们来看最重要的这个 cancel 方法，cancel 接收两个参数，removeFromParent 用于确认是不是把自己从 parent context 中移除，err 是 ctx.Err() 最后返回的错误信息&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(c *cancelCtx)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(removeFromParent &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;, err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;context: internal error: missing cancel error&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;c.mu.Lock()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c.err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;c.mu.Unlock()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// already canceled&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;c.err = err&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 由于 cancel context 的 done 是懒加载的，所以有可能存在还没有初始化的情况&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c.done == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;c.done = closedchan&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;(c.done)&lt;br/&gt;}&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 循环的将所有的子 context 取消掉&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; child := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; c.children {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; acquiring the child&#x27;s lock while holding parent&#x27;s lock.&lt;/span&gt;&lt;br/&gt;child.cancel(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, err)&lt;br/&gt;}&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 将所有的子 context 和当前 context 关系解除&lt;/span&gt;&lt;br/&gt;c.children = &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;c.mu.Unlock()&lt;br/&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 如果需要将当前 context 从 parent context 移除，就移除掉&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; removeFromParent {&lt;br/&gt;removeChild(c.Context, c)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&quot;超时自动取消如何实现-WithDeadline-WithTimeout&quot;&gt;&lt;a href=&quot;#超时自动取消如何实现-WithDeadline-WithTimeout&quot; class=&quot;headerlink&quot; title=&quot;超时自动取消如何实现: WithDeadline, WithTimeout&quot;/&gt;超时自动取消如何实现: WithDeadline, WithTimeout&lt;/h4&gt;&lt;p&gt;我们先看看比较常用的 WithTimeout, 可以发现 WithTimeout 其实就是调用了 WithDeadline 然后再传入的参数上用当前时间加上了 timeout 的时间&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WithTimeout&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent Context, timeout time.Duration)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(Context, CancelFunc)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; WithDeadline(parent, time.Now().Add(timeout))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;再来看一下实现超时的 timerCtx，WithDeadline 我们放到后面一点点&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; timerCtx &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;cancelCtx &lt;span class=&quot;hljs-comment&quot;&gt;// 这里复用了 cancelCtx&lt;/span&gt;&lt;br/&gt;timer *time.Timer &lt;span class=&quot;hljs-comment&quot;&gt;// Under cancelCtx.mu.&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;deadline time.Time &lt;span class=&quot;hljs-comment&quot;&gt;// 这里保存了快到期的时间&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;Deadline()&lt;/code&gt; 就是返回了结构体中保存的过期时间&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(c *timerCtx)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Deadline&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(deadline time.Time, ok &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c.deadline, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;cancel&lt;/code&gt; 其实就是复用了 cancelCtx 中的取消方法，唯一区别的地方就是在后面加上了对 timer 的判断，如果 timer 没有结束主动结束 timer&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(c *timerCtx)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(removeFromParent &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;, err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;c.cancelCtx.cancel(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, err)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; removeFromParent {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Remove this timerCtx from its parent cancelCtx&#x27;s children.&lt;/span&gt;&lt;br/&gt;removeChild(c.cancelCtx.Context, c)&lt;br/&gt;}&lt;br/&gt;c.mu.Lock()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c.timer != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;c.timer.Stop()&lt;br/&gt;c.timer = &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;c.mu.Unlock()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;timerCtx 并没有重新实现 Done() 和 Value 方法，直接复用了 cancelCtx 的相关方法&lt;/p&gt;&lt;p&gt;最后我们再看看这个最重要的 WithDeadline 方法&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WithDeadline&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent Context, d time.Time)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(Context, CancelFunc)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; parent == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cannot create context from nil parent&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// 会先判断 parent context 的过期时间，如果过期时间比当前传入的时间要早的话，就没有必要再设置过期时间了&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 只需要返回 WithCancel 就可以了，因为在 parent 过期的时候，子 context 也会被取消掉&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; cur, ok := parent.Deadline(); ok &amp;amp;&amp;amp; cur.Before(d) {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// The current deadline is already sooner than the new one.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; WithCancel(parent)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 构造相关结构体&lt;/span&gt;&lt;br/&gt;c := &amp;amp;timerCtx{&lt;br/&gt;cancelCtx: newCancelCtx(parent),&lt;br/&gt;deadline:  d,&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 和 WithCancel 中的逻辑相同，构建上下文关系&lt;/span&gt;&lt;br/&gt;propagateCancel(parent, c)&lt;br/&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 判断传入的时间是不是已经过期，如果已经过期了就 cancel 掉然后再返回&lt;/span&gt;&lt;br/&gt;dur := time.Until(d)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dur &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {&lt;br/&gt;c.cancel(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, DeadlineExceeded) &lt;span class=&quot;hljs-comment&quot;&gt;// deadline has already passed&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; { c.cancel(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, Canceled) }&lt;br/&gt;}&lt;br/&gt;c.mu.Lock()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; c.mu.Unlock()&lt;br/&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 这里是超时取消的逻辑，启动 timer 时间到了之后就会调用取消方法&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c.err == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;c.timer = time.AfterFunc(dur, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;c.cancel(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, DeadlineExceeded)&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; { c.cancel(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, Canceled) }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以发现超时控制其实就是在复用 cancelCtx 的基础上加上了一个 timer 来做定时取消&lt;/p&gt;&lt;h4 id=&quot;如何为-Context-附加一些值-WithValue&quot;&gt;&lt;a href=&quot;#如何为-Context-附加一些值-WithValue&quot; class=&quot;headerlink&quot; title=&quot;如何为 Context 附加一些值: WithValue&quot;/&gt;如何为 Context 附加一些值: WithValue&lt;/h4&gt;&lt;p&gt;WithValue 相对简单一点，主要就是校验了一下 Key 是不是可比较的，然后构造出一个 valueCtx 的结构&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WithValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent Context, key, val &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; parent == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cannot create context from nil parent&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil key&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !reflectlite.TypeOf(key).Comparable() {&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key is not comparable&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;valueCtx{parent, key, val}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;valueCtx 主要就是嵌入了 parent context 然后附加了一个 key val&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; valueCtx &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;Context&lt;br/&gt;key, val &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Value 的查找和之前 cancelCtx 类似，都是先判断当前有没有，没有就向上递归，只是在 cancelCtx 当中 key 是一个固定的 key 而已&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(c *valueCtx)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(key &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;{} {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c.key == key {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c.val&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c.Context.Value(key)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Value 就没有实现 Context 接口的其他方法了，其他的方法全都是复用的 parent context 的方法&lt;/p&gt;&lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;/&gt;使用场景&lt;/h3&gt;&lt;h4 id=&quot;超时控制&quot;&gt;&lt;a href=&quot;#超时控制&quot; class=&quot;headerlink&quot; title=&quot;超时控制&quot;/&gt;超时控制&lt;/h4&gt;&lt;p&gt;这就是文章开始时候第一个场景下的一个例子&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 模拟一个耗时的操作&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;rpc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;time.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; * time.Millisecond)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;rpc done&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; result &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;data &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;br/&gt;err  error&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ctx context.Context, ms &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;ctx, cancel := context.WithTimeout(ctx, time.Duration(ms)*time.Millisecond)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; cancel()&lt;br/&gt;&lt;br/&gt;r := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; result)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;data, err := rpc()&lt;br/&gt;r &amp;lt;- result{data: data, err: err}&lt;br/&gt;}()&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;fmt.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;timeout: %d ms, context exit: %+v\n&quot;&lt;/span&gt;, ms, ctx.Err())&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; res := &amp;lt;-r:&lt;br/&gt;fmt.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;result: %s, err: %+v\n&quot;&lt;/span&gt;, res.data, res.err)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 这里模拟接受请求，启动一个协程去发起请求&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++ {&lt;br/&gt;time.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * time.Second)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; handle(context.Background(), i*&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// for test, hang&lt;/span&gt;&lt;br/&gt;time.Sleep(time.Second)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行结果&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;▶ &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; run *.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;&lt;br/&gt;timeout: &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; ms, context exit: context deadline exceeded&lt;br/&gt;result: rpc done, err: &amp;lt;&lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&amp;gt;&lt;br/&gt;result: rpc done, err: &amp;lt;&lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&amp;gt;&lt;br/&gt;result: rpc done, err: &amp;lt;&lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们可以发现在第一次执行的时候传入的超时时间 50ms 程序超时直接退出了，但是后面超过 50ms 的时候均返回了结果。&lt;/p&gt;&lt;h4 id=&quot;错误取消&quot;&gt;&lt;a href=&quot;#错误取消&quot; class=&quot;headerlink&quot; title=&quot;错误取消&quot;/&gt;错误取消&lt;/h4&gt;&lt;p&gt;这是第二个场景的一个例子，假设我们在 main 中并发调用了 &lt;code&gt;f1&lt;/code&gt; &lt;code&gt;f2&lt;/code&gt; 两个函数，但是 &lt;code&gt;f1&lt;/code&gt; 很快就返回了，但是 &lt;code&gt;f2&lt;/code&gt; 还在阻塞&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ctx context.Context)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fmt.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f1: %w&quot;&lt;/span&gt;, ctx.Err())&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-time.After(time.Millisecond): &lt;span class=&quot;hljs-comment&quot;&gt;// 模拟短时间报错&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fmt.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f1 err in 1ms&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ctx context.Context)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fmt.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f2: %w&quot;&lt;/span&gt;, ctx.Err())&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-time.After(time.Hour): &lt;span class=&quot;hljs-comment&quot;&gt;// 模拟一个耗时操作&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;ctx, cancel := context.WithTimeout(context.Background(), time.Second)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; cancel()&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;br/&gt;wg.Add(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := f1(ctx); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;fmt.Println(err)&lt;br/&gt;cancel()&lt;br/&gt;}&lt;br/&gt;}()&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := f2(ctx); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;fmt.Println(err)&lt;br/&gt;cancel()&lt;br/&gt;}&lt;br/&gt;}()&lt;br/&gt;&lt;br/&gt;wg.Wait()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行结果，可以看到 f1 返回之后 f2 立即就返回了，并且报错 context 被取消&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;▶ &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; run *.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;&lt;br/&gt;f1 err in &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;ms&lt;br/&gt;f2: context canceled&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;细心的同学可能发现了，这个例子不就是 errgroup 的逻辑么，是的它就是类似 errgroup 的简单逻辑，这时候再反过来去看一下 《&lt;a href=&quot;https://lailin.xyz/post/go-training-week3-errgroup.html&quot;&gt;Week03: Go 并发编程(七) 深入理解 errgroup - Mohuishou&lt;/a&gt;》这篇文章可能会有不一样的体会&lt;/p&gt;&lt;h4 id=&quot;传递共享数据&quot;&gt;&lt;a href=&quot;#传递共享数据&quot; class=&quot;headerlink&quot; title=&quot;传递共享数据&quot;/&gt;传递共享数据&lt;/h4&gt;&lt;p&gt;一般会用来传递 tracing id, request id 这种数据，不要用来传递可选参数，这里借用一下饶大的一个例子，在实际的生产案例中我们代码也是这样大同小异&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; requestIDKey &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WithRequestID&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(next http.Handler)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;Handler&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; http.HandlerFunc(&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(rw http.ResponseWriter, req *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 从 header 中提取 request-id&lt;/span&gt;&lt;br/&gt;reqID := req.Header.Get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X-Request-ID&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 创建 valueCtx。使用自定义的类型，不容易冲突&lt;/span&gt;&lt;br/&gt;ctx := context.WithValue(&lt;br/&gt;req.Context(), requestIDKey, reqID)&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 创建新的请求&lt;/span&gt;&lt;br/&gt;req = req.WithContext(ctx)&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 调用 HTTP 处理函数&lt;/span&gt;&lt;br/&gt;next.ServeHTTP(rw, req)&lt;br/&gt;}&lt;br/&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 获取 request-id&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetRequestID&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ctx context.Context)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;ctx.Value(requestIDKey).(&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(rw http.ResponseWriter, req *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 拿到 reqId，后面可以记录日志等等&lt;/span&gt;&lt;br/&gt;reqID := GetRequestID(req.Context())&lt;br/&gt;...&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;handler := WithRequestID(http.HandlerFunc(Handle))&lt;br/&gt;http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, handler)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&quot;在某些情况下可以用来防止-goroutine-泄漏&quot;&gt;&lt;a href=&quot;#在某些情况下可以用来防止-goroutine-泄漏&quot; class=&quot;headerlink&quot; title=&quot;在某些情况下可以用来防止 goroutine 泄漏&quot;/&gt;在某些情况下可以用来防止 goroutine 泄漏&lt;/h4&gt;&lt;p&gt;我们看一下官方文档的这个例子, 这里面 gen 这个函数中如果不使用 context done 来控制的话就会导致 goroutine 泄漏，因为这里面的 for 是一个死循环，没有 ctx 就没有相关的退出机制&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// gen generates integers in a separate goroutine and&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// sends them to the returned channel.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// The callers of gen need to cancel the context once&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// they are done consuming generated integers not to leak&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// the internal goroutine started by gen.&lt;/span&gt;&lt;br/&gt;gen := &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ctx context.Context)&lt;/span&gt; &amp;lt;-&lt;span class=&quot;hljs-title&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;dst := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;br/&gt;n := &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// returning not to leak the goroutine&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; dst &amp;lt;- n:&lt;br/&gt;n++&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dst&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;ctx, cancel := context.WithCancel(context.Background())&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; cancel() &lt;span class=&quot;hljs-comment&quot;&gt;// cancel when we are finished consuming integers&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; gen(ctx) {&lt;br/&gt;fmt.Println(n)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;/&gt;总结&lt;/h2&gt;&lt;h3 id=&quot;使用准则-1&quot;&gt;&lt;a href=&quot;#使用准则-1&quot; class=&quot;headerlink&quot; title=&quot;使用准则&quot;/&gt;使用准则&lt;/h3&gt;&lt;p&gt;context 包一开始就告诉了我们应该怎么用，不应该怎么用，这是应该被共同遵守的约定。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对 server 应用而言，传入的请求应该创建一个 context，接受&lt;/li&gt;&lt;li&gt;通过 &lt;code&gt;WithCancel&lt;/code&gt; , &lt;code&gt;WithDeadline&lt;/code&gt; , &lt;code&gt;WithTimeout&lt;/code&gt; 创建的 Context 会同时返回一个 cancel 方法，这个方法必须要被执行，不然会导致 context 泄漏，这个可以通过执行 &lt;code&gt;go vet&lt;/code&gt; 命令进行检查&lt;/li&gt;&lt;li&gt;应该将 &lt;code&gt;context.Context&lt;/code&gt; 作为函数的第一个参数进行传递，参数命名一般为 &lt;code&gt;ctx&lt;/code&gt; 不应该将 Context 作为字段放在结构体中。&lt;/li&gt;&lt;li&gt;不要给 context 传递 nil，如果你不知道应该传什么的时候就传递 &lt;code&gt;context.TODO()&lt;/code&gt;&lt;/li&gt;&lt;li&gt;不要将函数的可选参数放在 context 当中，context 中一般只放一些全局通用的 metadata 数据，例如 tracing id 等等&lt;/li&gt;&lt;li&gt;context 是并发安全的可以在多个 goroutine 中并发调用&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;使用场景-1&quot;&gt;&lt;a href=&quot;#使用场景-1&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;/&gt;使用场景&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;超时控制&lt;/li&gt;&lt;li&gt;错误取消&lt;/li&gt;&lt;li&gt;跨 goroutine 数据同步&lt;/li&gt;&lt;li&gt;防止 goroutine 泄漏&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;/&gt;缺点&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;最显著的一个就是 context 引入需要修改函数签名，并且会病毒的式的扩散到每个函数上面，不过这个见仁见智，我看着其实还好&lt;/li&gt;&lt;li&gt;某些情况下虽然是可以做到超时返回提高用户体验，但是实际上是不会退出相关 goroutine 的，这时候可能会导致 goroutine 的泄漏，针对这个我们来看一个例子&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们使用标准库的 timeout handler 来实现超时控制，底层是通过 context 来实现的。我们设置了超时时间为 1ms 并且在 handler 中模拟阻塞 1000s 不断的请求，然后看 pprof 的 goroutine 数据&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;_ &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;mux := http.NewServeMux()&lt;br/&gt;mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(rw http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 这里阻塞住，goroutine 不会释放的&lt;/span&gt;&lt;br/&gt;time.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; * time.Second)&lt;br/&gt;rw.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;))&lt;br/&gt;})&lt;br/&gt;handler := http.TimeoutHandler(mux, time.Millisecond, &lt;span class=&quot;hljs-string&quot;&gt;&quot;xxx&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0.0:8066&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(err)&lt;br/&gt;}&lt;br/&gt;}()&lt;br/&gt;http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, handler)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看数据我们可以发现请求返回后， goroutine 其实并未回收，但是如果不阻塞的话是会立即回收的&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;goroutine profile: total &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; @ &lt;span class=&quot;hljs-number&quot;&gt;0x103b125&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x106cc9f&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x1374110&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x12b9584&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x12bb4ad&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x12c7fbf&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x106fd01&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们来看看它的源码，超时控制主要在 ServeHTTP 中实现，我删掉了部分不关键的数据， 我们可以看到函数内部启动了一个 goroutine 去处理请求逻辑，然后再外面等待，但是这里的问题是，当 context 超时之后 ServeHTTP 这个函数就直接返回了，在这里面启动的这个 goroutine 就没人管了&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(h *timeoutHandler)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w ResponseWriter, r *Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;ctx := h.testContext&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ctx == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cancelCtx context.CancelFunc&lt;br/&gt;ctx, cancelCtx = context.WithTimeout(r.Context(), h.dt)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; cancelCtx()&lt;br/&gt;}&lt;br/&gt;r = r.WithContext(ctx)&lt;br/&gt;done := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;br/&gt;tw := &amp;amp;timeoutWriter{&lt;br/&gt;w:   w,&lt;br/&gt;h:   &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(Header),&lt;br/&gt;req: r,&lt;br/&gt;}&lt;br/&gt;panicChan := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{}, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p := &lt;span class=&quot;hljs-built_in&quot;&gt;recover&lt;/span&gt;(); p != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;panicChan &amp;lt;- p&lt;br/&gt;}&lt;br/&gt;}()&lt;br/&gt;h.handler.ServeHTTP(tw, r)&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;(done)&lt;br/&gt;}()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; p := &amp;lt;-panicChan:&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(p)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-done:&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;总结-1&quot;&gt;&lt;a href=&quot;#总结-1&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;/&gt;总结&lt;/h3&gt;&lt;p&gt;context 是一个优缺点都十分明显的包，这个包目前基本上已经成为了在 go 中做超时控制错误取消的标准做法，但是为了添加超时取消我们需要去修改所有的函数签名，对代码的侵入性比较大，如果之前一直都没有使用后续再添加的话还是会有一些改造成本&lt;/p&gt;&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;/&gt;参考文献&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://pkg.go.dev/context&quot;&gt;context · pkg.go.dev&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.flysnow.org/2017/05/12/go-in-action-go-context.html#%E5%88%9D%E8%AF%86context&quot;&gt;Go 语言实战笔记（二十）| Go Context&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-context/&quot;&gt;Go 语言并发编程与 Context | Go 语言设计与实现&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://qcrao.com/2019/06/12/dive-into-go-context/&quot;&gt;深度解密 Go 语言之 context | qcrao&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://blog.golang.org/context&quot;&gt;Go Concurrency Patterns: Context - The Go Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://blog.golang.org/pipelines&quot;&gt;Go Concurrency Patterns: Pipelines and cancellation - The Go Blog&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;关注我获取更新&quot;&gt;&lt;a href=&quot;#关注我获取更新&quot; class=&quot;headerlink&quot; title=&quot;关注我获取更新&quot;/&gt;关注我获取更新&lt;/h2&gt;&lt;p&gt;看到这里了还不关注点赞走一波&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>