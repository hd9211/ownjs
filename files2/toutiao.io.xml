<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ff0aae2823bb37b7ad2e2fec1fd70d3c</guid>
<title>进程和线程这 19 个问题太强了</title>
<link>https://toutiao.io/k/93vqd5f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;由于各个进程不共享相同的地址空间，任何一个进程的全局变量在另一个进程中都不可见，所以如果想要在进程之间传递数据就需要通过内核，在内核中开辟出一块区域，该区域对多个进程都可见，即可用于进程间通信。有读者可能有疑问了，文件方式也是进程间通信啊，也要在内核开辟区域吗？这里说的内核区域其实是一段缓冲区，文件方式传输数据也有内核缓冲区的参与（零拷贝除外）。&lt;/p&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;524&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;367&quot; data-ratio=&quot;0.672093023255814&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9lFFFiaKpEr8Pnej5HSUaPCia1zguc4KbhpwgTSdVNZzic70zs5zOicoscMB7QxxSOlAtZriaNDWjOxSiafxSS2gJ9kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/section&gt;&lt;p&gt;如何开辟这种公共区域来进行进程间通信呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;匿名管道&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;匿名管道就是&lt;strong&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;/strong&gt;，pipe只能在父子进程间通信，而且数据只能&lt;span&gt;&lt;strong&gt;&lt;span&gt;单向流动&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;（半双工通信）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用方式&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）父进程创建管道，会得到两个文件描述符，分别指向管道的两端；&lt;/p&gt;&lt;section&gt;2）父进程创建子进程，从而子进程也有两个文件描述符指向同一管道；&lt;/section&gt;&lt;p&gt;3）父进程可写数据到管道，子进程就可从管道中读出数据，从而实现进程间通信，下面的示例代码中通过pipe实现了每秒钟父进程向子进程都发送消息的功能。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; _pipe[&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ret = pipe(_pipe);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (ret &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        perror(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;pipe\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;pid_t&lt;/span&gt; id = fork();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (id &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        perror(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fork\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (id == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        close(_pipe[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; _mesg[&lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (j &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;memset&lt;/span&gt;(_mesg, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\0&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(_mesg));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            read(_pipe[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;], _mesg, &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(_mesg));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%s\n&quot;&lt;/span&gt;, _mesg);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            j++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        close(_pipe[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *mesg = &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mesg = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;父进程来写消息了&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            write(_pipe[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;], mesg, &lt;span class=&quot;code-snippet__built_in&quot;&gt;strlen&lt;/span&gt;(mesg) + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ++i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-theme=&quot;default&quot; data-language=&quot;javascript&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;我们平时也经常使用关于管道的命令行：&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ls | less&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;该命令行的流向图如下：&lt;br/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;524&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;266&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9lFFFiaKpEr8Pnej5HSUaPCia1zguc4KbhYxKQXoK9p50n8B2haIEPrLxTfvHVbc4MBApdfddOHF6HKCicxPq5QLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.3908701854493581&quot; data-w=&quot;701&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;1：创建管道&lt;/p&gt;&lt;p&gt;2：为ls创建一个进程，设置stdout为管理写端&lt;/p&gt;&lt;p&gt;3：为less创建一个进程，设置stdin为管道读端&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;高级管道&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过&lt;span&gt;&lt;strong&gt;&lt;span&gt;popen&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;将另一个程序当作一个新的进程在当前进程中启动，它算作当前进程的子进程，高级管道只能用在有亲缘关系的进程间通信，这种亲缘关系通常指父子进程，下面的GetCmdResult函数可以获取某个Linux命令执行的结果，实现方式就是通过popen。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;GetCmdResult&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; &amp;amp;cmd, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; max_size = &lt;span class=&quot;code-snippet__number&quot;&gt;10240&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *data = (&lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *)&lt;span class=&quot;code-snippet__built_in&quot;&gt;malloc&lt;/span&gt;(max_size);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (data == &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;malloc fail&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;memset&lt;/span&gt;(data, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, max_size);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; max_buffer = &lt;span class=&quot;code-snippet__number&quot;&gt;256&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; buffer[max_buffer];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    FILE *fdp = popen((cmd + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; 2&amp;gt;&amp;amp;1&quot;&lt;/span&gt;).c_str(), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;r&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; data_len = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (fdp) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (!feof(fdp)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (fgets(buffer, max_buffer, fdp)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;code-snippet__built_in&quot;&gt;strlen&lt;/span&gt;(buffer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (data_len + len &amp;gt; max_size) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;data size larger than &quot;&lt;/span&gt; &amp;lt;&amp;lt; max_size;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__built_in&quot;&gt;memcpy&lt;/span&gt;(data + data_len, buffer, len);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                data_len += len;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        pclose(fdp);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(data, data_len)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;free&lt;/span&gt;(data);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-theme=&quot;default&quot; data-language=&quot;javascript&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;命名管道&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;匿名管道有个缺点就是通信的进程一定要有亲缘关系，而命名管道就不需要这种限制。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;命名管道其实就是一种特殊类型的文件，所谓的命名其实就是文件名，文件对各个进程都可见，通过命名管道创建好特殊文件后，就可以实现进程间通信。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;可以通过mkfifo创建一个特殊的类型的文件，参数读者看名字应该就了解，一个是文件名，一个是文件的读写权限：&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;mkfifo&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;* filename, &lt;span class=&quot;code-snippet__keyword&quot;&gt;mode_t&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-theme=&quot;default&quot; data-language=&quot;javascript&quot;&gt;当返回值为0时，表示该命名管道创建成功，至于如何通信，其实就是个读写文件的问题！&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;消息队列&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;队列想必大家都知道，像FIFO一样，这里可以有多个进程写入数据，也可以有多个进程从队列里读出数据，但消息队列有一点比FIFO还更高级，它读消息不一定要使用先进先出的顺序，每个消息可以赋予类型，可以按消息的类型读取，不是指定类型的数据还存在队列中。本质上MessageQueue是存放在内核中的消息链表，每个消息队列链表会由消息队列标识符表示，这个消息队列存于内核中，只有主动的删除该消息队列或者内核重启时，消息队列才会被删除。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;在Linux中消息队列相关的函数调用如下：&lt;br/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;msgget&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;key_t&lt;/span&gt;, key, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgflg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;msgsend&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgid, &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *msg_ptr, &lt;span class=&quot;code-snippet__keyword&quot;&gt;size_t&lt;/span&gt; msg_sz, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgflg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; message_type;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;msgrcv&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgid, &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *msg_ptr, &lt;span class=&quot;code-snippet__keyword&quot;&gt;size_t&lt;/span&gt; msg_st, &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgtype, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgflg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;msgctl&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgid, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; command, struct msgid_ds *buf)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-theme=&quot;default&quot; data-language=&quot;javascript&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;示例代码如下：&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;sys/msg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; BUFFER_SIZ 20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msg_type;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; text[BUFFER_SIZ];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} MsgWrapper;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Receive&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    MsgWrapper data;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgtype = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgid = msgget((&lt;span class=&quot;code-snippet__keyword&quot;&gt;key_t&lt;/span&gt;)&lt;span class=&quot;code-snippet__number&quot;&gt;1024&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0666&lt;/span&gt; | IPC_CREAT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgid == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msgget error \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgrcv(msgid, (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;data, BUFFER_SIZ, msgtype, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;error &quot;&lt;/span&gt; &amp;lt;&amp;lt; errno &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;read data &quot;&lt;/span&gt; &amp;lt;&amp;lt; data.text &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__built_in&quot;&gt;strlen&lt;/span&gt;(data.text) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgctl(msgid, IPC_RMID, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msgctl error \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Receive ok \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    MsgWrapper data;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgtype = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgid = msgget((&lt;span class=&quot;code-snippet__keyword&quot;&gt;key_t&lt;/span&gt;)&lt;span class=&quot;code-snippet__number&quot;&gt;1024&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0666&lt;/span&gt; | IPC_CREAT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgid == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msgget error \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    data.msg_type = msgtype;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;; ++i) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;memset&lt;/span&gt;(data.text, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, BUFFER_SIZ);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; a = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;a&#x27;&lt;/span&gt; + i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;memset&lt;/span&gt;(data.text, a, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgsnd(msgid, (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;data, BUFFER_SIZ, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msgsnd error \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::this_thread::sleep_for(&lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::chrono::seconds(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;memcpy&lt;/span&gt;(data.text, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1234567&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgsnd(msgid, (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;data, BUFFER_SIZ, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msgsnd error \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__function&quot;&gt;thread &lt;span class=&quot;code-snippet__title&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Receive)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    r.detach();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__function&quot;&gt;thread &lt;span class=&quot;code-snippet__title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Send)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    s.detach();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::this_thread::sleep_for(&lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::chrono::seconds(&lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;输出：root@iZuf64idor3ej648ciairaZ:~# ./a.out&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data a&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data c&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data d&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data e&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data f&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data g&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data h&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data i&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data j&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data &lt;span class=&quot;code-snippet__number&quot;&gt;1234567&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Receive ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;br/&gt;&lt;p&gt;代码中为了演示方便使用消息队列进行的线程间通信，该代码同样用于进程间通信，消息队列的实现依赖于内核的支持，上述代码可能在某些系统（WSL）上不能运行，在正常的Ubuntu上可以正常运行。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;消息队列VS命名管道&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;消息队列&amp;gt;命名管道&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）消息队列收发消息自动保证了同步，不需要由进程自己来提供同步方法，而命名管道需要自行处理同步问题；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;2）消息队列接收数据可以根据消息类型有选择的接收特定类型的数据，不需要像命名管道一样默认接收数据。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;消息队列&amp;lt;命名管道&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;消息队列有一个缺点就是发送和接收的每个数据都有最大长度的限制。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;共享内存&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可开辟中一块内存，用于各个进程间共享，使得各个进程可以直接读写同一块内存空间，就像线程共享同一块地址空间一样，该方式基本上是最快的进程间通信方式，因为没有系统调用干预，也没有数据的拷贝操作，但由于共享同一块地址空间，数据竞争的问题就会出现，需要自己引入同步机制解决数据竞争问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;共享内存只是一种方式，它的实现方式有很多种，主要的有mmap系统调用、Posix共享内存以及System V共享内存等。通过这三种“工具”共享地址空间后，通信的目的自然就会达到。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;信号&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;信号也是进程间通信的一种方式，信号可以在任何时候发送给某一个进程，如果进程当前并未处于执行状态，内核将信号保存，直到进程恢复到执行态再发送给进程，进程可以对信号设置预处理方式，如果对信号设置了阻塞处理，则信号的传递会被延迟直到阻塞被取消，如果进程结束，那信号就被丢弃。我们常用的CTRL+C和kill等就是信号的一种，也达到了进程间通信的目的，进程也可以对信号设置signal捕获函数自定义处理逻辑。这种方式有很大的&lt;span&gt;缺点&lt;/span&gt;：只有通知的作用，通知了一下消息的类型，但不能传输要交换的任何数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Linux系统中常见的信号有：&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGHUP：该信号在用户终端结束时发出，通常在中断的控制进程结束时，所有进程组都将收到该信号，该信号的默认操作是终止进程；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGINT：程序终止信号，通常的CTRL+C产生该信号来通知终止进程；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGQUIT：类似于程序错误信号，通常的CTRL+\产生该信号通知进程退出时产生core文件；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGILL：执行了非法指令，通常数据段或者堆栈溢出可能产生该信号；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGTRAP：供调试器使用，由断电指令或其它陷阱指令产生；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGABRT：使程序非正常结束，调用abort函数会产生该信号；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGBUS：非法地址，通常是地址对齐问题导致，比如访问一个4字节长的整数，但其地址不是4的倍数；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGSEGV：合理地址的非法访问，访问了未分配的内存或者没有权限的内存区域；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGPIPE：管道破裂信号，socket通信时经常会遇到，进程写入了一个无读者的管道；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGALRM：时钟定时信号，由alarm函数设置的时间终止时产生；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGFPE：出现浮点错误（比如除0操作）；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGKILL：杀死进程（不能被捕捉和忽略）；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;信号量&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;想必大家都听过信号量，信号量就是一个特殊的变量，程序对其访问都是原子操作，每个信号量开始都有个初始值。最简单最常见的信号量是只能取0和1的变量，也叫二值信号量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;信号量有两个操作，P和V：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;P：如果信号量变量值大于0，则变量值减1，如果值为0，则阻塞进程；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;V：如果有进程阻塞在该信号量上，则唤醒阻塞的进程，如果没有进程阻塞，则变量值加1&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93831&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;Q&lt;/section&gt;&lt;/section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;信号量和信号有什么关系&lt;/span&gt;？&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;A&lt;/section&gt;&lt;/section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;没有任何关系，完全是不同的东西。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93831&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;Q&lt;/section&gt;&lt;/section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;信号量与互斥量有什么区别？&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;A&lt;/section&gt;&lt;/section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;互斥量用于&lt;/span&gt;&lt;strong&gt;&lt;span&gt;互斥&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，信号量用于&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;同步&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，互斥指的是某一资源同一时间只允许一个访问者访问，但无法限制访问顺序，访问是无序的，而同步在互斥的基础上可以控制访问者对资源的顺序。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;套接字&lt;/span&gt;&lt;/strong&gt;：就是网络传输，不用多说，网络通信都可以多机通信呢，更不用说进程间通信啦，你能看到程序喵的文章也是套接字的功劳。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;文件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;：显而易见，多个进程可以操作同一个文件，所以也可以通过文件来进行进程间通信。&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>84712162e965baee2ce5b9b8301a2c8b</guid>
<title>Java 进阶：泛型机制与反射原理</title>
<link>https://toutiao.io/k/stxuf41</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1&gt;&lt;span&gt;一、泛型的概念&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基础案例&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;泛型在Java中的应用非常广泛，最常见则是在集合容器中，先看下基础用法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Generic01&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Map&amp;lt;Integer,String&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;() ;&lt;br/&gt;        map.put(&lt;span&gt;88&lt;/span&gt;,&lt;span&gt;&quot;hello&quot;&lt;/span&gt;) ;&lt;br/&gt;        &lt;span&gt;// map.put(&quot;99&quot;,&quot;world&quot;) ; 输入编译错误&lt;/span&gt;&lt;br/&gt;        String value = map.get(&lt;span&gt;88&lt;/span&gt;) ;&lt;br/&gt;        &lt;span&gt;// Integer value = map.get(88) ; 输出编译错误&lt;/span&gt;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;value:&quot;&lt;/span&gt;+value);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;声明一个map类型的容器，并且明确限定key和value的类型：分别为Integer,String，这样显然不能体现特别之处，可以对比下面的用法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Map newMap = &lt;span&gt;new&lt;/span&gt; HashMap() ;&lt;br/&gt;newMap.put(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;,&lt;span&gt;&quot;world&quot;&lt;/span&gt;);&lt;br/&gt;newMap.put(&lt;span&gt;88&lt;/span&gt;,&lt;span&gt;99&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在不指定类型的情况下，键值对都默认为Object类型，这样的容器在使用的时候要时刻注意不同的key类型和取出的value值类型，并且value要做类型转换，相比之下泛型机制就很有必要。&lt;/p&gt;&lt;p&gt;可以看下Map接口的定义：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Map&lt;/span&gt;&amp;lt;&lt;span&gt;K&lt;/span&gt;,&lt;span&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;V &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(Object key)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;V &lt;span&gt;put&lt;/span&gt;&lt;span&gt;(K key, V value)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在Map接口中，&lt;code&gt;&amp;lt;K,V&amp;gt;&lt;/code&gt;显然没有指定明确的类型，只是起到类型传递的作用，即K是key的类型，V是value的类型，在上面的源码中描述的很清楚，结合上面案例，在Map对象声明的时候可以明确指定&lt;code&gt;&amp;lt;K,V&amp;gt;&lt;/code&gt;的类型，也可以缺省为Object类型。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、泛型描述&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;泛型即可以理解为把数据类型作为参数，即参数化类型，用来提高代码的安全性，灵活性，避免类型转换；代码简洁明了，同时对于程序的可扩展性起到至关重要的作用。&lt;/p&gt;&lt;p&gt;首先设计一个简单的顶层接口，只定义一个callBack方法，和对出入参数的简单逻辑设定，这种设计在Java的源码设计中随处可见，例如上面的集合体系：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 基础接口设计&lt;br/&gt; * &lt;span&gt;@param&lt;/span&gt; &amp;lt;R&amp;gt; 返参类型&lt;br/&gt; * &lt;span&gt;@param&lt;/span&gt; &amp;lt;V&amp;gt; 入参类型&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;CallBack&lt;/span&gt;&amp;lt;&lt;span&gt;R&lt;/span&gt;,&lt;span&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 回调方法：V 方法入参 ，R 方法返回值&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;R &lt;span&gt;callBack&lt;/span&gt; &lt;span&gt;(V v)&lt;/span&gt; &lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了实现具体的业务，再基于顶层接口向下做扩展，这里声明两个扩展接口，作为具体业务类的接口：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 扩展接口设计01&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ExtCallBack01&lt;/span&gt;&amp;lt;&lt;span&gt;R&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Integer&lt;/span&gt;,&lt;span&gt;V&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;List&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt;&amp;gt;&lt;br/&gt;                        &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;CallBack&lt;/span&gt;&amp;lt;&lt;span&gt;Integer&lt;/span&gt;,&lt;span&gt;List&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Integer &lt;span&gt;callBack&lt;/span&gt; &lt;span&gt;(List&amp;lt;String&amp;gt; list)&lt;/span&gt; &lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 扩展接口设计01&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ExtCallBack02&lt;/span&gt;&amp;lt;&lt;span&gt;R&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Boolean&lt;/span&gt;,&lt;span&gt;V&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Map&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;,&lt;span&gt;Long&lt;/span&gt;&amp;gt;&amp;gt;&lt;br/&gt;        &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;CallBack&lt;/span&gt;&amp;lt;&lt;span&gt;Boolean&lt;/span&gt;,&lt;span&gt;Map&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;,&lt;span&gt;Long&lt;/span&gt;&amp;gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Boolean &lt;span&gt;callBack&lt;/span&gt; &lt;span&gt;(Map&amp;lt;String,Long&amp;gt; map)&lt;/span&gt; &lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样可以通过扩展接口去设计具体的业务类，提高程序的灵活可扩展性：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Generic02&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; ExtCallBack01&amp;lt;Integer,List&amp;lt;String&amp;gt;&amp;gt;(){&lt;br/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Integer &lt;span&gt;callBack&lt;/span&gt;&lt;span&gt;(List&amp;lt;String&amp;gt; list)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;                list.add(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;);&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; list.size();&lt;br/&gt;            }&lt;br/&gt;        };&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; ExtCallBack02&amp;lt;Boolean,Map&amp;lt;String,Long&amp;gt;&amp;gt; (){&lt;br/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Boolean &lt;span&gt;callBack&lt;/span&gt;&lt;span&gt;(Map&amp;lt;String, Long&amp;gt; map)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;                map.put(&lt;span&gt;&quot;Fire&quot;&lt;/span&gt;,&lt;span&gt;119L&lt;/span&gt;) ;&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; map.size()&amp;gt;&lt;span&gt;0&lt;/span&gt; ;&lt;br/&gt;            }&lt;br/&gt;        } ;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过上面这个案例，可以清楚的感觉到泛型机制的灵活和强大。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、泛型本质&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;泛型虽然可以使用在类，接口，方法，参数等各个地方，但是其约束能力是在代码的编译期：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Generic03&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        DefEntry&amp;lt;String&amp;gt; defEntry1 = &lt;span&gt;new&lt;/span&gt; DefEntry&amp;lt;&amp;gt;(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;) ;&lt;br/&gt;        DefEntry&amp;lt;Long&amp;gt; defEntry2 = &lt;span&gt;new&lt;/span&gt; DefEntry&amp;lt;&amp;gt;(&lt;span&gt;999L&lt;/span&gt;) ;&lt;br/&gt;        &lt;span&gt;// Always True&lt;/span&gt;&lt;br/&gt;        System.out.println(defEntry1.getClass()==defEntry2.getClass());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DefEntry&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; T param ;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;DefEntry&lt;/span&gt; &lt;span&gt;(T param)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.param = param ;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译过程中，会对泛型合法性作校验，校验成功编译的class文件没有泛型信息，即泛型擦除掉，通过一个简单的命令查看编译后的文件：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;javap -v Generic03.class&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.49765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uUIibyNXbAvALIrkyXgePfof0guDNOXXpT9DLcL3uficUbNic7Lddpry9O8TevlxYCMhdMgZh56zUiabibUbFvyibB7A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;当然这也会带来安全问题：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;    Map&amp;lt;String, String&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;    Method method = HashMap&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;.&lt;span&gt;getDeclaredMethod&lt;/span&gt;(&quot;&lt;span&gt;put&lt;/span&gt;&quot;,&lt;br/&gt;                                &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Class&lt;/span&gt;[] &lt;/span&gt;{ Object&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;Object&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt; })&lt;/span&gt;;&lt;br/&gt;    method.invoke(map,&lt;span&gt;888L&lt;/span&gt;, &lt;span&gt;999L&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// {888=999}&lt;/span&gt;&lt;br/&gt;    System.out.println(map);&lt;br/&gt;    &lt;span&gt;// java.lang.ClassCastException&lt;/span&gt;&lt;br/&gt;    System.out.println(map.get(&lt;span&gt;888L&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里即通过反射的机制，绕开泛型，在map中放入程序语义上的非法值类型，在运行过程中获取值的时候才抛出类型转换异常。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、反射机制&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基础描述&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;反射机制可以在程序运行时获取类的完整结构信息，并且可以动态的操作属性和方法等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.525&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvALIrkyXgePfof0guDNOXXpKlRHXuIZ6Z2ylbjKShzCSuOm0UdqkcWn2Dv0rjiaY37z5l4yFLDxmBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;对于反射机制的理解，必须要对类编译和JVM加载，运行时数据区有清楚的认识，这块内容可以移步JVM系列的文章。&lt;/p&gt;&lt;p&gt;通过运行时动态获取类的结构，然后动态的创建对象并操作属性和方法，这种方式在实际开发中并不多用，这样很明显会消耗JVM资源，并且会忽略一些封装导致安全问题，这在上面【1】中已经案例说明了。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、反射的类库&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;java.lang.Class：Class类&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;java.lang.reflect.Constructor：构造器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;java.lang.reflect.Field：属性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;java.lang.reflect.Method：方法&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;API之Class对象&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;获取目标类型的Class对象常见方式，通过Class对象再获取相关结构信息，从而操作或者访问：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// Class对象回去&lt;/span&gt;&lt;br/&gt;    User user1 = &lt;span&gt;new&lt;/span&gt; User(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;name01&quot;&lt;/span&gt;) ;&lt;br/&gt;    Class userClass1 = user1.getClass() ;&lt;br/&gt;    Class userClass2 = Class.forName(&lt;span&gt;&quot;com.java.reflect.User&quot;&lt;/span&gt;);&lt;br/&gt;    Class userClass3 = User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt; &lt;/span&gt;;&lt;br/&gt;    System.out.println(User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;.&lt;span&gt;getName&lt;/span&gt;())&lt;/span&gt;;&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;userClass1==userClass2?&quot;&lt;/span&gt;+(userClass1==userClass2));&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;userClass2==userClass3?&quot;&lt;/span&gt;+(userClass2==userClass3));&lt;br/&gt;    &lt;span&gt;// 类型创建和判断&lt;/span&gt;&lt;br/&gt;    Object object = User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;.&lt;span&gt;newInstance&lt;/span&gt;() &lt;/span&gt;;&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;类型：&quot;&lt;/span&gt;+(object &lt;span&gt;instanceof&lt;/span&gt; User));&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;类型：&quot;&lt;/span&gt;+(userClass3.isInstance(user1)));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6577181208053692&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvALIrkyXgePfof0guDNOXXpeMpPht4j42SE2d4JXI8AjibpWAD1Pc7IZYER46OTcicOAkza7V0YUhibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1192&quot;/&gt;&lt;/p&gt;&lt;p&gt;这里有个注意点：通过Class对象的&lt;code&gt;newInstance()&lt;/code&gt;方法，即基于User类的无参构造器，首先要求User类具有无参构造方法。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;API之Constructor构造器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Class对象读取构造方法，可以分别获得全部构造方法，不同修饰类型的构造方法，或者根据构造参数类型指定获取：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;    Class userClass = User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt; &lt;/span&gt;;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// 读取公共构造方法&lt;/span&gt;&lt;br/&gt;    Constructor[] userConArr = userClass.getConstructors();&lt;br/&gt;    printCon(userConArr);&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// 读取指定私有构造方法&lt;/span&gt;&lt;br/&gt;    Constructor privateCon = userClass.getDeclaredConstructor(Integer&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    System.out.println(privateCon);&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// 读取全部构造方法&lt;/span&gt;&lt;br/&gt;    userConArr = userClass.getDeclaredConstructors();&lt;br/&gt;    printCon(userConArr);&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// 调用公共构造方法创建对象&lt;/span&gt;&lt;br/&gt;    Constructor pubCon = userClass.getConstructor(Integer&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;,&lt;span&gt;String&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    Object pubUser = pubCon.newInstance(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;hello&quot;&lt;/span&gt;) ;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// 调用私有构造方法创建对象&lt;/span&gt;&lt;br/&gt;    Constructor priCon = userClass.getDeclaredConstructor(Integer&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 忽略private权限修饰符&lt;/span&gt;&lt;br/&gt;    priCon.setAccessible(Boolean.TRUE);&lt;br/&gt;    Object priUser = priCon.newInstance(&lt;span&gt;2&lt;/span&gt;) ;&lt;br/&gt;    System.out.println(pubUser+&lt;span&gt;&quot;\n&quot;&lt;/span&gt;+priUser);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printCon&lt;/span&gt; &lt;span&gt;(Constructor[] constructors)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (Constructor constructor:constructors){&lt;br/&gt;        System.out.println(constructor);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里需要注意的是，通过调用&lt;code&gt;setAccessible(Boolean.TRUE)&lt;/code&gt;方法，可以基于私有构造方法创建对象，这里明显违背了Java的基本设计原则，破坏代码的安全性。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5278688524590164&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uUIibyNXbAvALIrkyXgePfof0guDNOXXpUgia89BKyCskkvguGoAlqGvFQziaNhkW2XNfkPvIyvNW8vYMH28dQuow/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1220&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;API之Field属性&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Field保证成员变量的属性，修饰符，值管理等相关操作：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;    Class userClass = User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt; &lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 获取公共字段&lt;/span&gt;&lt;br/&gt;    Field[] pubArr = userClass.getFields() ;&lt;br/&gt;    printField(pubArr);&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// 获取全部字段&lt;/span&gt;&lt;br/&gt;    Field[] fieldArr = userClass.getDeclaredFields() ;&lt;br/&gt;    printField(fieldArr);&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// 获取指定字段&lt;/span&gt;&lt;br/&gt;    Field emailField = userClass.getField(&lt;span&gt;&quot;email&quot;&lt;/span&gt;) ;&lt;br/&gt;    Field nameField = userClass.getDeclaredField(&lt;span&gt;&quot;name&quot;&lt;/span&gt;) ;&lt;br/&gt;    printField(&lt;span&gt;new&lt;/span&gt; Field[]{emailField,nameField});&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// 创建对象并操作属性&lt;/span&gt;&lt;br/&gt;    Object userObj = userClass.newInstance() ;&lt;br/&gt;    nameField.setAccessible(Boolean.TRUE);&lt;br/&gt;    nameField.set(userObj,&lt;span&gt;&quot;world&quot;&lt;/span&gt;);&lt;br/&gt;    emailField.set(userObj,&lt;span&gt;&quot;test@email.com&quot;&lt;/span&gt;);&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;userObj:&quot;&lt;/span&gt;+userObj);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 打印成员变量信息&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printField&lt;/span&gt; &lt;span&gt;(Field[] fields)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (Field field : fields){&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;声明：&quot;&lt;/span&gt;+field);&lt;br/&gt;        UserAnno userAnno = field.getAnnotation(UserAnno&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;) &lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;注解：&quot;&lt;/span&gt;+userAnno.desc());&lt;br/&gt;        String fieldName = field.getName() ;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;名称：&quot;&lt;/span&gt;+fieldName);&lt;br/&gt;        Type type = field.getGenericType() ;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;类型：&quot;&lt;/span&gt;+type);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这里获取Type类型信息，在有些特定的业务场景下还是十分有用的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6936619718309859&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uUIibyNXbAvALIrkyXgePfof0guDNOXXp2JL8wDclTZP9mygX3LP18YKibTHWYV7WHUw5sjLSdhXfow1QHWE6IqQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1136&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;API之Method方法&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;    Class userClass = User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt; &lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 获取所有公共方法[包括父类和Object类方法]&lt;/span&gt;&lt;br/&gt;    Method[] pubMethods = userClass.getMethods() ;&lt;br/&gt;    printMethod(pubMethods);&lt;br/&gt;    &lt;span&gt;// 获取全部方法&lt;/span&gt;&lt;br/&gt;    Method[] allMethods = userClass.getDeclaredMethods() ;&lt;br/&gt;    printMethod(allMethods);&lt;br/&gt;    &lt;span&gt;// 获取指定方法&lt;/span&gt;&lt;br/&gt;    Method method = userClass.getMethod(&lt;span&gt;&quot;parName&quot;&lt;/span&gt;,String&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;) &lt;/span&gt;;&lt;br/&gt;    printMethod(&lt;span&gt;new&lt;/span&gt; Method[]{method});&lt;br/&gt;    &lt;span&gt;// 调用方法&lt;/span&gt;&lt;br/&gt;    Object userObj = userClass.newInstance() ;&lt;br/&gt;    Method setId = userClass.getDeclaredMethod(&lt;span&gt;&quot;setId&quot;&lt;/span&gt;, Integer&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    setId.invoke(userObj,&lt;span&gt;99&lt;/span&gt;) ;&lt;br/&gt;    Method setName = userClass.getDeclaredMethod(&lt;span&gt;&quot;setName&quot;&lt;/span&gt;, String&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    setName.invoke(userObj,&lt;span&gt;&quot;java&quot;&lt;/span&gt;) ;&lt;br/&gt;    Method sayHi = userClass.getDeclaredMethod(&lt;span&gt;&quot;sayHi&quot;&lt;/span&gt;, String&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    sayHi.setAccessible(Boolean.TRUE);&lt;br/&gt;    sayHi.invoke(userObj,&lt;span&gt;&quot;c++&quot;&lt;/span&gt;);&lt;br/&gt;    System.out.println(userObj);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 打印方法信息&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printMethod&lt;/span&gt; &lt;span&gt;(Method[] methods)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (Method method : methods){&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;定义：&quot;&lt;/span&gt;+method);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;命名：&quot;&lt;/span&gt;+method.getName());&lt;br/&gt;        UserAnno userAnno = method.getAnnotation(UserAnno&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;) &lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (userAnno != &lt;span&gt;null&lt;/span&gt;){&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;注解：&quot;&lt;/span&gt;+userAnno.desc());&lt;br/&gt;        }&lt;br/&gt;        Type[] paramTypeArr = method.getParameterTypes();&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt; ; i&amp;lt; paramTypeArr.length; i++){&lt;br/&gt;            System.out.print(&lt;span&gt;&quot;参数&quot;&lt;/span&gt;+(i+&lt;span&gt;1&lt;/span&gt;)+&lt;span&gt;&quot;类型：&quot;&lt;/span&gt;+paramTypeArr[i]+&lt;span&gt;&quot; ; &quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;参数个数：&quot;&lt;/span&gt;+method.getParameterCount());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这里对方法的获取远远不止类本身定义的，包括从父类继承的，和Java基础Object类中的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.60859375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uUIibyNXbAvALIrkyXgePfof0guDNOXXpbIzTCK1nthhyWDia88ZNRuuiazK0yKshumT0H9bCmD10a3R9ODIib9MiaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、源代码地址&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https://github.com/cicadasmile/java-base-parent&lt;br/&gt;GitEE·地址&lt;br/&gt;https://gitee.com/cicadasmile/java-base-parent&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4Njg0MzYwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBCuF3zfJnqPKpUia4wfn1FUtTHpxxkR5HvbicPgOjibPicX0goMOkny1NdkLAJvBaqrYh3UdwMjiaDQMA/0?wx_fmt=png&quot; data-nickname=&quot;知了一笑&quot; data-alias=&quot;cicada_smile&quot; data-signature=&quot;积累是一个孤独且枯燥的过程&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0879a7e93135d5dcf5a443c0687dac30</guid>
<title>一文理解 Kafka 重复消费的原因和解决方案</title>
<link>https://toutiao.io/k/ucdbf7o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-source-line=&quot;1&quot;&gt;如果对Kafka不了解的话，可以先看这篇博客《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247484251&amp;amp;idx=1&amp;amp;sn=92d6b50c5987f4f80316313db05b56ff&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;一文快速了解Kafka&lt;/a&gt;》。&lt;/p&gt;&lt;p data-source-line=&quot;3&quot;&gt;在解释Kafka重复消费出现原因之前，列举一下Kafka中与消费者有关的几个重要配置参数。&lt;/p&gt;&lt;ul data-source-line=&quot;5&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;enable.auto.commit&lt;/code&gt;：表示消费者会周期性自动提交消费的offset。默认值true。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;auto.commit.interval.ms&lt;/code&gt;：在&lt;code&gt;enable.auto.commit&lt;/code&gt;为true的情况下， 自动提交的间隔。默认值5秒。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;max.poll.records&lt;/code&gt;：单次消费者拉取的最大数据条数，默认值500。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;max.poll.interval.ms&lt;/code&gt;：表示若在阈值时间之内消费者没有消费完上一次poll的消息，consumer client会主动向coordinator发起LeaveGroup请求，触发Rebalance；然后consumer重新发送JoinGroup请求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;session.timeout.ms&lt;/code&gt;：group Coordinator检测consumer发生崩溃所需的时间。在这个时间内如果Coordinator未收到Consumer的任何消息，那Coordinator就认为Consumer挂了。默认值10秒。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;heartbeat.interval.ms&lt;/code&gt;：标识Consumer给Coordinator发一个心跳包的时间间隔。&lt;code&gt;heartbeat.interval.ms&lt;/code&gt;越小，发的心跳包越多。默认值3秒。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-source-line=&quot;12&quot;&gt;Group Coordinator&lt;/h3&gt;&lt;p data-source-line=&quot;14&quot;&gt;基于Zookeeper的Rebalance存在不可避免的羊群效应和脑裂问题，如何不用Zookeeper来协调，而是将失败探测和Rebalance的逻辑放到一个高可用的中心，那么上述问题就能得以解决。因此Kafka0.9的版本重新设计了Consumer端，设计了Coordinator机制，大大减少了Zookeeper负载。&lt;/p&gt;&lt;p data-source-line=&quot;16&quot;&gt;对于每一个Consumer Group，Kafka集群为其从Broker集群中选择一个Broker作为其Coordinator。Coordinator主要做两件事：&lt;/p&gt;&lt;ol data-source-line=&quot;18&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;维持Group成员的组成。这包括加入新的成员，检测成员的存活性，清除不再存活的成员。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;协调Group成员的行为。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-source-line=&quot;21&quot;&gt;&lt;p&gt;羊群效应：以Zookeeper为例，由于一个被watch的znode变化，导致大量的通知需要被发送，将会导致在这个通知期间的其他操作提交的延迟。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-source-line=&quot;23&quot;&gt;重复消费的原因&lt;/h2&gt;&lt;p data-source-line=&quot;25&quot;&gt;原因1：消费者宕机、重启或者被强行kill进程，导致消费者消费的offset没有提交。&lt;/p&gt;&lt;p data-source-line=&quot;27&quot;&gt;原因2：设置&lt;code&gt;enable.auto.commit&lt;/code&gt;为true，如果在关闭消费者进程之前，取消了消费者的订阅，则有可能部分offset没提交，下次重启会重复消费。&lt;/p&gt;&lt;p data-source-line=&quot;29&quot;&gt;原因3：消费后的数据，当offset还没有提交时，Partition就断开连接。比如，通常会遇到消费的数据，处理很耗时，导致超过了Kafka的&lt;code&gt;session timeout.ms&lt;/code&gt;时间，那么就会触发reblance重平衡，此时可能存在消费者offset没提交，会导致重平衡后重复消费。&lt;/p&gt;&lt;h2 data-source-line=&quot;31&quot;&gt;重复消费的解决方法&lt;/h2&gt;&lt;ol data-source-line=&quot;33&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;提高消费者的处理速度。例如：对消息处理中比较耗时的步骤可通过异步的方式进行处理、利用多线程处理等。在缩短单条消息消费的同时，根据实际场景可将&lt;code&gt;max.poll.interval.ms&lt;/code&gt;值设置大一点，避免不必要的Rebalance。可根据实际消息速率适当调小&lt;code&gt;max.poll.records&lt;/code&gt;的值。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;引入消息去重机制。例如：生成消息时，在消息中加入唯一标识符如消息id等。在消费端，可以保存最近的&lt;code&gt;max.poll.records&lt;/code&gt;条消息id到redis或mysql表中，这样在消费消息时先通过查询去重后，再进行消息的处理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;保证消费者逻辑幂等。可以查看博客《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247484349&amp;amp;idx=1&amp;amp;sn=b54c0819bc100db816cda52d11476401&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;一文理解如何实现接口的幂等性&lt;/a&gt;》&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>89ee6777a0b9fd1066e5a5ab86fcace0</guid>
<title>巧用 cache-control: s-maxage 头优化 CDN 和浏览器缓存同步</title>
<link>https://toutiao.io/k/vhg90vi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-header&quot;&gt;&lt;h1 class=&quot;title&quot;&gt;巧用 cache-control: s-maxage 头优化CDN和浏览器缓存同步&lt;/h1&gt;&lt;p class=&quot;meta&quot;&gt;冯宇 Posted at — Jun 22, 2021
&lt;span class=&quot;meta&quot; id=&quot;busuanzi_container_page_pv&quot;&gt;阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;markdown&quot;&gt;&lt;h2 id=&quot;浏览器和-cdn-之间缓存同步问题&quot;&gt;浏览器和 CDN 之间缓存同步问题&lt;/h2&gt;&lt;p&gt;今天我们已经非常普遍的使用 CDN 提供我们的静态网站和静态资源的访问。但是实际使用中会发现，通常存储后端资源发生变化之后，我们会尝试刷新 CDN。但是由于用户浏览器依旧保留旧资源，造成访问不一致的问题。本文我们将提供一些解决思路。&lt;/p&gt;&lt;h2 id=&quot;tldr-解决方案&quot;&gt;TL;DR 解决方案&lt;/h2&gt;&lt;p&gt;在源后端的资源添加参考 header:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;cache-control: max-age=0,s-maxage=604800
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;方案解释说明&quot;&gt;方案解释说明&lt;/h2&gt;&lt;p&gt;理论上静态资源最好能做到&lt;a href=&quot;https://www.keycdn.com/support/what-is-cache-busting&quot;&gt;cache busting&lt;/a&gt;，即资源一旦发生变更，那么文件名应该变更。但是实际使用中总会有部分文件难以做到 cache busting，如&lt;code&gt;index.html&lt;/code&gt;等。如果这一类文件较为频繁的更新，我们可能希望用户浏览器访问的时候总能拿到最新的资源。但又不希望 CDN 缓存击穿，所以可以用上&lt;code&gt;s-maxage&lt;/code&gt;这个参数。&lt;/p&gt;&lt;p&gt;浏览器通常会看&lt;code&gt;cache-control: max-age=xxx&lt;/code&gt; 这个参数，决定在某一段时间内本地缓存是新鲜的，不会向服务器发起请求。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;有关详情可以参考之前的文章: &lt;a href=&quot;https://blog.dteam.top/posts/2021-02/http-header-technology.html#%E7%BC%93%E5%AD%98%E9%80%9A%E8%BF%87-header-%E6%8E%A7%E5%88%B6&quot;&gt;HTTP Header 中的黑科技#缓存（通过 header 控制）&lt;/a&gt; 部分&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;CDN 通常也会遵循这个头，如果仅仅设置&lt;code&gt;cache-control: max-age=0&lt;/code&gt;，固然每次浏览器会向 CDN 请求验证资源新鲜度，但是也会造成 CDN 每次都回源验证，会引起缓存击穿的问题。而静态资源通常更新并不频繁，我们可能会期望浏览器仅仅找 CDN 验证新鲜度就够了，CDN 不需要回源。对于这种场景，在&lt;code&gt;cache-control&lt;/code&gt;头中添加&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E5%88%B0%E6%9C%9F&quot;&gt;s-maxage&lt;/a&gt;参数就够了。这个参数 CDN 通常会处理，优先级比&lt;code&gt;max-age&lt;/code&gt;高。这样就实现了我们的需求。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: 最理想的方案仍然是 cache busting。此方案仅适用于实在无法做到的静态资源。对于一些不需要太重视新鲜度问题的资源，仅仅&lt;code&gt;max-age&lt;/code&gt;参数就够了，这样可能尽可能在浏览器段缓存资源，减少 CDN 的请求流量。&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ab109e489fec4fef809c600a4f3ca5f9</guid>
<title>从一个优质开源项目来看前端架构</title>
<link>https://toutiao.io/k/n83zpe7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;何为系统架构师？&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;系统架构师是一个最终确认和评估系统需求，给出开发规范，搭建系统实现的核心构架，并澄清技术细节、扫清主要难点的技术人员。主要着眼于系统的“技术实现”。因此他/她应该是特定的开发平台、语言、工具的大师，对常见应用场景能给出最恰当的解决方案，同时要对所属的开发团队有足够的了解，能够评估自己的团队实现特定的功能需求需要的代价。系统架构师负责设计系统整体架构，从需求到设计的每个细节都要考虑到，把握整个项目，使设计的项目尽量效率高，开发容易，维护方便，升级简单等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这是百度百科的答案&lt;/p&gt;&lt;/blockquote&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;大多数人的问题&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何成为一名前端架构师？&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;其实，前端架构师不应该是一个头衔，而应该是一个过程。我记得掘金上有人写过一篇文章：&lt;code&gt;《我在一个小公司，我把我们公司前端给架构了》&lt;/code&gt; , (我当时还看成&lt;code&gt;《我把我们公司架构师给上了》&lt;/code&gt;)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我面试过很多人，从小公司出来（我也是从一个很小很小的公司出来，现在也没在什么&lt;code&gt;BATJ&lt;/code&gt;）,最大的问题在于，觉得自己不是&lt;code&gt;leader&lt;/code&gt;，就没有想过如何去提升、优化项目，而是去研究一些花里胡哨的东西，却没有真正使用在项目中。（自然很少会有深度）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在一个两至三人的前端团队小公司，你去不断优化、提升项目体验，更新迭代替换技术栈，那么你就是&lt;code&gt;前端架构师&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;正式开始&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;我们从一个比较不错的项目入手，谈谈一个前端架构师要做什么&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SpaceX-API&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SpaceX-API&lt;/code&gt; 是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SpaceX-API&lt;/code&gt; 是一个用于火箭、核心舱、太空舱、发射台和发射数据的开源 &lt;code&gt;REST API&lt;/code&gt;（并且是使用&lt;code&gt;Node.js&lt;/code&gt;编写,我们用这个项目借鉴无可厚非）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;为了阅读的舒适度，我把下面的正文尽量口语化一点&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;先把代码搞下来&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/r-spacex/SpaceX-API.git&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个优秀的开源项目搞下来以后，怎么分析它？大部分时候,你应该先看它的目录结构以及依赖的第三方库（&lt;code&gt;package.json&lt;/code&gt;文件）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;找到&lt;code&gt;package.json&lt;/code&gt;文件的几个关键点:&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;main&lt;/code&gt;字段(项目入口)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;scripts&lt;/code&gt;字段(执行命令脚本)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;dependencies&lt;/code&gt;和&lt;code&gt;devDependencies&lt;/code&gt;字段（项目的依赖,区分线上依赖和开发依赖，我本人是非常看中这个点，&lt;code&gt;SpaceX-API&lt;/code&gt;也符合我的观念,严格的区分依赖按照）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;&quot;main&quot;&lt;/span&gt;: &lt;span&gt;&quot;server.js&quot;&lt;/span&gt;,&lt;br/&gt;   &lt;span&gt;&quot;scripts&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;test&quot;&lt;/span&gt;: &lt;span&gt;&quot;npm run lint &amp;amp;&amp;amp; npm run check-dependencies &amp;amp;&amp;amp; jest --silent --verbose&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;start&quot;&lt;/span&gt;: &lt;span&gt;&quot;node server.js&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;worker&quot;&lt;/span&gt;: &lt;span&gt;&quot;node jobs/worker.js&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;lint&quot;&lt;/span&gt;: &lt;span&gt;&quot;eslint .&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;check-dependencies&quot;&lt;/span&gt;: &lt;span&gt;&quot;npx depcheck --ignores=\&quot;pino-pretty\&quot;&quot;&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过上面可以看到,项目入口为&lt;code&gt;server.js&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;项目启动命令为&lt;code&gt;npm run start&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;几个主要的依赖:&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;&quot;koa&quot;&lt;/span&gt;: &lt;span&gt;&quot;^2.13.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-bodyparser&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.3.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-conditional-get&quot;&lt;/span&gt;: &lt;span&gt;&quot;^3.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-etag&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-helmet&quot;&lt;/span&gt;: &lt;span&gt;&quot;^6.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-pino-logger&quot;&lt;/span&gt;: &lt;span&gt;&quot;^3.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-router&quot;&lt;/span&gt;: &lt;span&gt;&quot;^10.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa2-cors&quot;&lt;/span&gt;: &lt;span&gt;&quot;^2.0.6&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;lodash&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.17.20&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;moment-range&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.0.2&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;moment-timezone&quot;&lt;/span&gt;: &lt;span&gt;&quot;^0.5.32&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;mongoose&quot;&lt;/span&gt;: &lt;span&gt;&quot;^5.11.8&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;mongoose-id&quot;&lt;/span&gt;: &lt;span&gt;&quot;^0.1.3&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;mongoose-paginate-v2&quot;&lt;/span&gt;: &lt;span&gt;&quot;^1.3.12&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint&quot;&lt;/span&gt;: &lt;span&gt;&quot;^7.16.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-config-airbnb-base&quot;&lt;/span&gt;: &lt;span&gt;&quot;^14.2.1&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-plugin-import&quot;&lt;/span&gt;: &lt;span&gt;&quot;^2.22.1&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-plugin-jest&quot;&lt;/span&gt;: &lt;span&gt;&quot;^24.1.3&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-plugin-mongodb&quot;&lt;/span&gt;: &lt;span&gt;&quot;^1.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-plugin-no-secrets&quot;&lt;/span&gt;: &lt;span&gt;&quot;^0.6.8&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-plugin-security&quot;&lt;/span&gt;: &lt;span&gt;&quot;^1.4.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;jest&quot;&lt;/span&gt;: &lt;span&gt;&quot;^26.6.3&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;pino-pretty&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.3.0&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;都是一些通用主流库: 主要是&lt;code&gt;koa&lt;/code&gt;框架,以及一些&lt;code&gt;koa&lt;/code&gt;的一些中间件，&lt;code&gt;monggose&lt;/code&gt;(连接使用&lt;code&gt;mongoDB&lt;/code&gt;)，eslint（代码质量检查）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这里强调一点,如果你的代码需要两人及以上维护，我就强烈建议你不要使用任何黑魔法,以及不使用非主流的库，除非你编写核心底层逻辑时候非用不可(这个时候应该只有你维护)&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;项目目录&lt;span/&gt;&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7182890855457227&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/3GPT1CHiaSVsQ8Dja9Oqz1YRfzJdx5hDW50JvicicJworeOYuosFnYDU4wwWl4ZHaFibezJ1UyhJmHLK0D6Nr44X0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1356&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;这是一套标准的&lt;code&gt;REST API，&lt;/code&gt;严格分层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;几个重点目录 ：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;server.js 项目入口&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;app.js 入口文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;services 文件夹 =&amp;gt; 项目提供服务层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;scripts 文件夹 =&amp;gt; 项目脚本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;middleware 文件夹 =&amp;gt; 中间件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;docs 文件夹 =&amp;gt;文档存放&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;tests 文件夹 =&amp;gt; 单元测试代码存放&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;.dockerignore docker的忽略文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Dockerfile 执行docker build命令读取配置的文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;.eslintrc eslint配置文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;jobs 文件夹 =&amp;gt; 我想应该是对应检查他们api服务的代码，里面都是准备的一些参数然后直接调服务&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;逐个分析&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;从项目依赖安装说起&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;安装环境严格区分开发依赖和线上依赖，让阅读代码者一目了然哪些依赖是线上需要的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  &lt;span&gt;&quot;dependencies&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;blake3&quot;&lt;/span&gt;: &lt;span&gt;&quot;^2.1.4&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;cheerio&quot;&lt;/span&gt;: &lt;span&gt;&quot;^1.0.0-rc.3&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;cron&quot;&lt;/span&gt;: &lt;span&gt;&quot;^1.8.2&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;fuzzball&quot;&lt;/span&gt;: &lt;span&gt;&quot;^1.3.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;got&quot;&lt;/span&gt;: &lt;span&gt;&quot;^11.8.1&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;ioredis&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.19.4&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa&quot;&lt;/span&gt;: &lt;span&gt;&quot;^2.13.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-bodyparser&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.3.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-conditional-get&quot;&lt;/span&gt;: &lt;span&gt;&quot;^3.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-etag&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-helmet&quot;&lt;/span&gt;: &lt;span&gt;&quot;^6.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-pino-logger&quot;&lt;/span&gt;: &lt;span&gt;&quot;^3.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa-router&quot;&lt;/span&gt;: &lt;span&gt;&quot;^10.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;koa2-cors&quot;&lt;/span&gt;: &lt;span&gt;&quot;^2.0.6&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;lodash&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.17.20&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;moment-range&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.0.2&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;moment-timezone&quot;&lt;/span&gt;: &lt;span&gt;&quot;^0.5.32&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;mongoose&quot;&lt;/span&gt;: &lt;span&gt;&quot;^5.11.8&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;mongoose-id&quot;&lt;/span&gt;: &lt;span&gt;&quot;^0.1.3&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;mongoose-paginate-v2&quot;&lt;/span&gt;: &lt;span&gt;&quot;^1.3.12&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;pino&quot;&lt;/span&gt;: &lt;span&gt;&quot;^6.8.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;tle.js&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.2.8&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;tough-cookie&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.0.0&quot;&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;devDependencies&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;eslint&quot;&lt;/span&gt;: &lt;span&gt;&quot;^7.16.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-config-airbnb-base&quot;&lt;/span&gt;: &lt;span&gt;&quot;^14.2.1&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-plugin-import&quot;&lt;/span&gt;: &lt;span&gt;&quot;^2.22.1&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-plugin-jest&quot;&lt;/span&gt;: &lt;span&gt;&quot;^24.1.3&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-plugin-mongodb&quot;&lt;/span&gt;: &lt;span&gt;&quot;^1.0.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-plugin-no-secrets&quot;&lt;/span&gt;: &lt;span&gt;&quot;^0.6.8&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;eslint-plugin-security&quot;&lt;/span&gt;: &lt;span&gt;&quot;^1.4.0&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;jest&quot;&lt;/span&gt;: &lt;span&gt;&quot;^26.6.3&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;pino-pretty&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.3.0&quot;&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;项目目录划分&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;目录划分，严格分层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通用，清晰简介明了，让人一看就懂&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;正式开始看代码&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const http = require(&lt;span&gt;&#x27;http&#x27;&lt;/span&gt;);&lt;br/&gt;const mongoose = require(&lt;span&gt;&#x27;mongoose&#x27;&lt;/span&gt;);&lt;br/&gt;const { logger } = require(&lt;span&gt;&#x27;./middleware/logger&#x27;&lt;/span&gt;);&lt;br/&gt;const app = require(&lt;span&gt;&#x27;./app&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;const PORT = process.env.PORT || 6673;&lt;br/&gt;const SERVER = http.createServer(app.callback());&lt;br/&gt;&lt;br/&gt;// Gracefully close Mongo connection&lt;br/&gt;const gracefulShutdown = () =&amp;gt; {&lt;br/&gt;  mongoose.connection.close(&lt;span&gt;false&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    logger.info(&lt;span&gt;&#x27;Mongo closed&#x27;&lt;/span&gt;);&lt;br/&gt;    SERVER.close(() =&amp;gt; {&lt;br/&gt;      logger.info(&lt;span&gt;&#x27;Shutting down...&#x27;&lt;/span&gt;);&lt;br/&gt;      process.exit();&lt;br/&gt;    });&lt;br/&gt;  });&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;// Server start&lt;br/&gt;SERVER.listen(PORT, &lt;span&gt;&#x27;0.0.0.0&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;  logger.info(`Running on port: &lt;span&gt;${PORT}&lt;/span&gt;`);&lt;br/&gt;&lt;br/&gt;  // Handle &lt;span&gt;kill&lt;/span&gt; commands&lt;br/&gt;  process.on(&lt;span&gt;&#x27;SIGTERM&#x27;&lt;/span&gt;, gracefulShutdown);&lt;br/&gt;&lt;br/&gt;  // Prevent dirty &lt;span&gt;exit&lt;/span&gt; on code-fault crashes:&lt;br/&gt;  process.on(&lt;span&gt;&#x27;uncaughtException&#x27;&lt;/span&gt;, gracefulShutdown);&lt;br/&gt;&lt;br/&gt;  // Prevent promise rejection exits&lt;br/&gt;  process.on(&lt;span&gt;&#x27;unhandledRejection&#x27;&lt;/span&gt;, gracefulShutdown);&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;几个优秀的地方&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;每个回调函数都会有声明功能注释&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;像&lt;code&gt;SERVER.listen&lt;/code&gt;的host参数也会传入,这里是为了避免产生不必要的麻烦。至于这个麻烦，我这就不解释了（一定要有能看到的默认值，而不是去靠猜）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于监听端口启动服务以后一些异常统一捕获，并且统一日志记录，&lt;code&gt;process&lt;/code&gt;进程退出，防止出现僵死线程、端口占用等(因为node部署时候可能会用pm2等方式，在 Worker 线程中，process.exit()将停止当前线程而不是当前进程)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;app.js入口文件&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;这里是由&lt;code&gt;koa&lt;/code&gt;提供基础服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;monggose&lt;/code&gt;负责连接&lt;code&gt;mongoDB&lt;/code&gt;数据库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;若干中间件负责跨域、日志、错误、数据处理等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const conditional = require(&lt;span&gt;&#x27;koa-conditional-get&#x27;&lt;/span&gt;);&lt;br/&gt;const etag = require(&lt;span&gt;&#x27;koa-etag&#x27;&lt;/span&gt;);&lt;br/&gt;const cors = require(&lt;span&gt;&#x27;koa2-cors&#x27;&lt;/span&gt;);&lt;br/&gt;const helmet = require(&lt;span&gt;&#x27;koa-helmet&#x27;&lt;/span&gt;);&lt;br/&gt;const Koa = require(&lt;span&gt;&#x27;koa&#x27;&lt;/span&gt;);&lt;br/&gt;const bodyParser = require(&lt;span&gt;&#x27;koa-bodyparser&#x27;&lt;/span&gt;);&lt;br/&gt;const mongoose = require(&lt;span&gt;&#x27;mongoose&#x27;&lt;/span&gt;);&lt;br/&gt;const { requestLogger, logger } = require(&lt;span&gt;&#x27;./middleware/logger&#x27;&lt;/span&gt;);&lt;br/&gt;const { responseTime, errors } = require(&lt;span&gt;&#x27;./middleware&#x27;&lt;/span&gt;);&lt;br/&gt;const { v4 } = require(&lt;span&gt;&#x27;./services&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;const app = new Koa();&lt;br/&gt;&lt;br/&gt;mongoose.connect(process.env.SPACEX_MONGO, {&lt;br/&gt;  useFindAndModify: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;  useNewUrlParser: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;  useUnifiedTopology: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;  useCreateIndex: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;const db = mongoose.connection;&lt;br/&gt;&lt;br/&gt;db.on(&lt;span&gt;&#x27;error&#x27;&lt;/span&gt;, (err) =&amp;gt; {&lt;br/&gt;  logger.error(err);&lt;br/&gt;});&lt;br/&gt;db.once(&lt;span&gt;&#x27;connected&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;  logger.info(&lt;span&gt;&#x27;Mongo connected&#x27;&lt;/span&gt;);&lt;br/&gt;  app.emit(&lt;span&gt;&#x27;ready&#x27;&lt;/span&gt;);&lt;br/&gt;});&lt;br/&gt;db.on(&lt;span&gt;&#x27;reconnected&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;  logger.info(&lt;span&gt;&#x27;Mongo re-connected&#x27;&lt;/span&gt;);&lt;br/&gt;});&lt;br/&gt;db.on(&lt;span&gt;&#x27;disconnected&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;  logger.info(&lt;span&gt;&#x27;Mongo disconnected&#x27;&lt;/span&gt;);&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;// &lt;span&gt;disable&lt;/span&gt; console.errors &lt;span&gt;for&lt;/span&gt; pino&lt;br/&gt;app.silent = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;// Error handler&lt;br/&gt;app.use(errors);&lt;br/&gt;&lt;br/&gt;app.use(conditional());&lt;br/&gt;&lt;br/&gt;app.use(etag());&lt;br/&gt;&lt;br/&gt;app.use(bodyParser());&lt;br/&gt;&lt;br/&gt;// HTTP header security&lt;br/&gt;app.use(helmet());&lt;br/&gt;&lt;br/&gt;// Enable CORS &lt;span&gt;for&lt;/span&gt; all routes&lt;br/&gt;app.use(cors({&lt;br/&gt;  origin: &lt;span&gt;&#x27;*&#x27;&lt;/span&gt;,&lt;br/&gt;  allowMethods: [&lt;span&gt;&#x27;GET&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;POST&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;PATCH&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;DELETE&#x27;&lt;/span&gt;],&lt;br/&gt;  allowHeaders: [&lt;span&gt;&#x27;Content-Type&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Accept&#x27;&lt;/span&gt;],&lt;br/&gt;  exposeHeaders: [&lt;span&gt;&#x27;spacex-api-cache&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;spacex-api-response-time&#x27;&lt;/span&gt;],&lt;br/&gt;}));&lt;br/&gt;&lt;br/&gt;// Set header with API response time&lt;br/&gt;app.use(responseTime);&lt;br/&gt;&lt;br/&gt;// Request logging&lt;br/&gt;app.use(requestLogger);&lt;br/&gt;&lt;br/&gt;// V4 routes&lt;br/&gt;app.use(v4.routes());&lt;br/&gt;&lt;br/&gt;module.exports = app;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;逻辑清晰，自上而下，首先连接db数据库，挂载各种事件后，经由koa各种中间件，而后真正使用&lt;code&gt;koa&lt;/code&gt;路由提供api服务（代码编写顺序，即代码运行后的业务逻辑，我们写前端的&lt;code&gt;react&lt;/code&gt;等的时候，也提倡由生命周期运行顺序去编写组件代码,而不是先编写&lt;code&gt;unmount&lt;/code&gt;生命周期，再编写&lt;code&gt;mount&lt;/code&gt;），例如应该这样：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//组件挂载&lt;br/&gt;&lt;span&gt;&lt;span&gt;componentDidmount&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;//组件需要更新时&lt;br/&gt;&lt;span&gt;&lt;span&gt;shouldComponentUpdate&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;//组件将要卸载&lt;br/&gt;&lt;span&gt;&lt;span&gt;componentWillUnmount&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;...&lt;br/&gt;&lt;span&gt;&lt;span&gt;render&lt;/span&gt;&lt;/span&gt;(){}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;router的代码，简介明了&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const Router = require(&lt;span&gt;&#x27;koa-router&#x27;&lt;/span&gt;);&lt;br/&gt;const admin = require(&lt;span&gt;&#x27;./admin/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const capsules = require(&lt;span&gt;&#x27;./capsules/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const cores = require(&lt;span&gt;&#x27;./cores/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const crew = require(&lt;span&gt;&#x27;./crew/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const dragons = require(&lt;span&gt;&#x27;./dragons/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const landpads = require(&lt;span&gt;&#x27;./landpads/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const launches = require(&lt;span&gt;&#x27;./launches/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const launchpads = require(&lt;span&gt;&#x27;./launchpads/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const payloads = require(&lt;span&gt;&#x27;./payloads/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const rockets = require(&lt;span&gt;&#x27;./rockets/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const ships = require(&lt;span&gt;&#x27;./ships/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const users = require(&lt;span&gt;&#x27;./users/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const company = require(&lt;span&gt;&#x27;./company/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const roadster = require(&lt;span&gt;&#x27;./roadster/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const starlink = require(&lt;span&gt;&#x27;./starlink/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const &lt;span&gt;history&lt;/span&gt; = require(&lt;span&gt;&#x27;./history/routes&#x27;&lt;/span&gt;);&lt;br/&gt;const fairings = require(&lt;span&gt;&#x27;./fairings/routes&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;const v4 = new Router({&lt;br/&gt;  prefix: &lt;span&gt;&#x27;/v4&#x27;&lt;/span&gt;,&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;v4.use(admin.routes());&lt;br/&gt;v4.use(capsules.routes());&lt;br/&gt;v4.use(cores.routes());&lt;br/&gt;v4.use(crew.routes());&lt;br/&gt;v4.use(dragons.routes());&lt;br/&gt;v4.use(landpads.routes());&lt;br/&gt;v4.use(launches.routes());&lt;br/&gt;v4.use(launchpads.routes());&lt;br/&gt;v4.use(payloads.routes());&lt;br/&gt;v4.use(rockets.routes());&lt;br/&gt;v4.use(ships.routes());&lt;br/&gt;v4.use(users.routes());&lt;br/&gt;v4.use(company.routes());&lt;br/&gt;v4.use(roadster.routes());&lt;br/&gt;v4.use(starlink.routes());&lt;br/&gt;v4.use(history.routes());&lt;br/&gt;v4.use(fairings.routes());&lt;br/&gt;&lt;br/&gt;module.exports = v4;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;模块众多，找几个代表性的模块&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const Router = require(&lt;span&gt;&#x27;koa-router&#x27;&lt;/span&gt;);&lt;br/&gt;const { auth, authz, cache } = require(&lt;span&gt;&#x27;../../../middleware&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;const router = new Router({&lt;br/&gt;  prefix: &lt;span&gt;&#x27;/admin&#x27;&lt;/span&gt;,&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;// Clear redis cache&lt;br/&gt;router.delete(&lt;span&gt;&#x27;/cache&#x27;&lt;/span&gt;, auth, authz(&lt;span&gt;&#x27;cache:clear&#x27;&lt;/span&gt;), async (ctx) =&amp;gt; {&lt;br/&gt;  try {&lt;br/&gt;    await cache.redis.flushall();&lt;br/&gt;    ctx.status = 200;&lt;br/&gt;  } catch (error) {&lt;br/&gt;    ctx.throw(400, error.message);&lt;br/&gt;  }&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;// Healthcheck&lt;br/&gt;router.get(&lt;span&gt;&#x27;/health&#x27;&lt;/span&gt;, async (ctx) =&amp;gt; {&lt;br/&gt;  ctx.status = 200;&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;module.exports = router;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;分析代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这是一套标准的restful API ，提供的&lt;code&gt;/admin/cache&lt;/code&gt;接口，请求方式为&lt;code&gt;delete&lt;/code&gt;，请求这个接口，首先要经过&lt;code&gt;auth&lt;/code&gt;和&lt;code&gt;authz&lt;/code&gt;两个中间件处理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;这里补充一个小细节&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个用户访问一套系统，有两种状态,未登陆和已登陆,如果你未登陆去执行一些操作，后端应该返回&lt;code&gt;401&lt;/code&gt;。但是登录后，你只能做你权限内的事情，例如你只是一个打工人，你说你要关闭这个公司，那么对不起，你的状态码此时应该是&lt;code&gt;403&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;回到admin&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;此刻的你，想要清空这个缓存,调用/admin/cache接口,那么首先要经过&lt;code&gt;auth&lt;/code&gt;中间件判断你是否有登录&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt; * Authentication middleware&lt;br/&gt; */&lt;br/&gt;module.exports = async (ctx, next) =&amp;gt; {&lt;br/&gt;  const key = ctx.request.headers[&lt;span&gt;&#x27;spacex-key&#x27;&lt;/span&gt;];&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (key) {&lt;br/&gt;    const user = await db.collection(&lt;span&gt;&#x27;users&#x27;&lt;/span&gt;).findOne({ key });&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (user?.key === key) {&lt;br/&gt;      ctx.state.roles = user.roles;&lt;br/&gt;      await next();&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  ctx.status = 401;&lt;br/&gt;  ctx.body = &lt;span&gt;&#x27;https://youtu.be/RfiQYRn7fBg&#x27;&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果没有登录过，那么意味着你没有权限，此时为401状态码，你应该去登录.如果登录过，那么应该前往下一个中间件&lt;code&gt;authz&lt;/code&gt;。 (所以redux的中间件源码是多么重要。它可以说贯穿了我们整个前端生涯，我以前些过它的分析，有兴趣的可以翻一翻公众号)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt; * Authorization middleware&lt;br/&gt; *&lt;br/&gt; * @param   {String}   role   Role &lt;span&gt;for&lt;/span&gt; protected route&lt;br/&gt; * @returns {void}&lt;br/&gt; */&lt;br/&gt;module.exports = (role) =&amp;gt; async (ctx, next) =&amp;gt; {&lt;br/&gt;  const { roles } = ctx.state;&lt;br/&gt;  const allowed = roles.includes(role);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (allowed) {&lt;br/&gt;    await next();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  ctx.status = 403;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;authz&lt;/code&gt;这里会根据你传入的操作类型（这里是&#x27;cache:clear&#x27;），看你的对应所有权限&lt;code&gt;roles&lt;/code&gt;里面是否包含传入的操作类型&lt;code&gt;role 。&lt;/code&gt;如果没有，就返回403，如果有，就继续下一个中间件 - 即真正的&lt;code&gt;/admin/cache&lt;/code&gt;接口&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// Clear redis cache&lt;br/&gt;router.delete(&lt;span&gt;&#x27;/cache&#x27;&lt;/span&gt;, auth, authz(&lt;span&gt;&#x27;cache:clear&#x27;&lt;/span&gt;), async (ctx) =&amp;gt; {&lt;br/&gt;  try {&lt;br/&gt;    await cache.redis.flushall();&lt;br/&gt;    ctx.status = 200;&lt;br/&gt;  } catch (error) {&lt;br/&gt;    ctx.throw(400, error.message);&lt;br/&gt;  }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;此时此刻，使用try catch包裹逻辑代码，当redis清除所有缓存成功即会返回状态码400，如果报错，就会抛出错误码和原因。接由洋葱圈外层的&lt;code&gt;error&lt;/code&gt;中间件处理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt; * Error handler middleware&lt;br/&gt; *&lt;br/&gt; * @param   {Object}    ctx       Koa context&lt;br/&gt; * @param   {&lt;span&gt;function&lt;/span&gt;}  next      Koa next &lt;span&gt;function&lt;/span&gt;&lt;br/&gt; * @returns {void}&lt;br/&gt; */&lt;br/&gt;module.exports = async (ctx, next) =&amp;gt; {&lt;br/&gt;  try {&lt;br/&gt;    await next();&lt;br/&gt;  } catch (err) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (err?.kind === &lt;span&gt;&#x27;ObjectId&#x27;&lt;/span&gt;) {&lt;br/&gt;      err.status = 404;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      ctx.status = err.status || 500;&lt;br/&gt;      ctx.body = err.message;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;这样只要任意的&lt;code&gt;server&lt;/code&gt;层内部出现异常，只要抛出，就会被&lt;code&gt;error&lt;/code&gt;中间件处理，直接返回状态码和错误信息. 如果没有传入状态码，那么默认是500(所以我之前说过，代码要稳定，一定要有显示的指定默认值，要关注代码异常的逻辑，例如前端setLoading，请求失败也要取消loading，不然用户就没法重试了，有可能这一瞬间只是用户网络出错呢)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;补一张koa洋葱圈的图&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9100418410041841&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/3GPT1CHiaSVsQ8Dja9Oqz1YRfzJdx5hDWS2RxuDaxyhdW3AuaRCY8tf7pPibjWf3PFpnzrA7FEDf1dejq2CtsbuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;478&quot;/&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;再接下来看其他的services&lt;span/&gt;&lt;br/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// Get one &lt;span&gt;history&lt;/span&gt; event&lt;br/&gt;router.get(&lt;span&gt;&#x27;/:id&#x27;&lt;/span&gt;, cache(300), async (ctx) =&amp;gt; {&lt;br/&gt;  const result = await History.findById(ctx.params.id);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!result) {&lt;br/&gt;    ctx.throw(404);&lt;br/&gt;  }&lt;br/&gt;  ctx.status = 200;&lt;br/&gt;  ctx.body = result;&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;// Query &lt;span&gt;history&lt;/span&gt; events&lt;br/&gt;router.post(&lt;span&gt;&#x27;/query&#x27;&lt;/span&gt;, cache(300), async (ctx) =&amp;gt; {&lt;br/&gt;  const { query = {}, options = {} } = ctx.request.body;&lt;br/&gt;  try {&lt;br/&gt;    const result = await History.paginate(query, options);&lt;br/&gt;    ctx.status = 200;&lt;br/&gt;    ctx.body = result;&lt;br/&gt;  } catch (error) {&lt;br/&gt;    ctx.throw(400, error.message);&lt;br/&gt;  }&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;通过这个项目，我们能学到什么&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个能上天的项目，必然是非常稳定、高可用的，我们首先要学习它的优秀点：用最简单的技术加上最简单的实现方式，让人一眼就能看懂它的代码和分层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;再者：简洁的注释是必要的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从业务角度去抽象公共层，例如鉴权、错误处理、日志等为公共模块（中间件，前端可能是一个工具函数或组件）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多考虑错误异常的处理，前端也是如此，js大多错误发生来源于&lt;code&gt;a.b.c&lt;/code&gt;这种代码(如果&lt;code&gt;a.b&lt;/code&gt;为&lt;code&gt;undefined&lt;/code&gt;那么就会报错了)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;显示的指定默认值,不让代码阅读者去猜测&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;目录分区必定要简洁明了,分层清晰,易于维护和拓展&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;成为一个优秀前端架构师的几个技能点&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;原生JavaScript、CSS、HTML基础扎实（系统学习过）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;原生Node.js基础扎实（系统学习过），Node.js不仅提供服务，更多的是用于制作工具，以及现在serverless场景也会用到，还有ssr&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;熟悉框架和类库原理，能手写简易的常用类库，例如promise redux 等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据结构基础扎实，了解常用、常见算法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;linux基础扎实（做工具，搭环境，编写构建脚本等有会用到）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;熟悉TCP和http等通信协议&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;熟悉操作系统linux Mac windows iOS 安卓等（在跨平台产品时候会遇到）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;会使用docker（部署相关）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;会一些c++最佳（在addon场景等，再者Node.js和JavaScript本质上是基于&lt;code&gt;C++&lt;/code&gt;）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;懂基本数据库、redis、nginxs操作，像跨平台产品，基本前端都会有个sqlite之类的,像如果是node自身提供服务，数据库和redis一般少不了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;再者是要多阅读优秀的开源项目源码，不用太多，但是一定要精&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;以上是我的感悟，后面我会在评论中补充，也欢迎大家在评论中补充探讨!&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>