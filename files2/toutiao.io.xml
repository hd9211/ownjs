<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>25038ffec6aba9c452b380fe716f7a84</guid>
<title>快手超大规模集群调度优化实践</title>
<link>https://toutiao.io/k/671eano</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;246&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhukZGKutIgjCpE1ceiawtxqLxc3ogVTgZ1AUrTW5ia8owNjicwnEdEib0fltgiadHhIxTCRkq1mfN2j8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1800&quot;/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;font-variant-numeric: normal; font-variant-east-asian: normal; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; line-height: 27.2px; widows: 1; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-bottom: -10px; margin-left: -8px; max-width: 100%; width: 18px; height: 18px; border-top: 8px solid rgb(54, 65, 173); border-left: 8px solid rgb(54, 65, 173); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;br data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;section data-bgopacity=&quot;50%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot; data-style=&quot;max-width: 100%; width: 543.333px; background: rgb(247, 247, 247); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot; data-darkmode-color-16008590572276=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16008590572276=&quot;rgb(0, 128, 255)&quot;&gt;分享嘉宾：房孝敬 快手 大数据架构师&lt;/span&gt;&lt;span data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot; data-darkmode-color-16008590572276=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16008590572276=&quot;rgb(0, 128, 255)&quot;/&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot; data-darkmode-color-16008590572276=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16008590572276=&quot;rgb(0, 128, 255)&quot;&gt;编辑整理：齐来军&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;出品平台：DataFunTalk&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; width: 18px; height: 18px; border-bottom: 8px solid rgb(54, 65, 173); border-right: 8px solid rgb(54, 65, 173); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;随着公司业务的快速发展，离线计算集群规模和提交的作业量持续增长，如何支撑超大规模集群，如何满足不同场景的调度需求成为必须要解决的问题。基于以上问题，快手大数据团队基于YARN做了大量的定制和优化，支撑了不同场景下的资源调度需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天的介绍会围绕下面四点展开：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;调度相关背景及快手数据规模与场景&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;快手调度器Kwai scheduler介绍&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多调度场景优化介绍&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其他工作&amp;amp;未来规划&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;快手数据规模场景&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 快手数据规模&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前快手离线计算单集群数万台机器，每日处理数百P数据量，百万级别作业，对大数据存储，计算，调度有非常大的挑战。首先介绍下快手大数据架构体系技术栈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 快手大数据体系架构介绍&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;shape type=&quot;#_x0000_t75&quot; filled=&quot;f&quot;&gt;&lt;imagedata title=&quot;image1&quot;/&gt;&lt;/shape&gt;&lt;img data-backh=&quot;433&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;579&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;433&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPhDMVHAzBYriaOGSWOnc3mc6U6zMySlKiaPLz2ibicLUpwmHhI6UWc2scYc9AS9lRpcMKickS2cZIuInKA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;快手大数据架构底层采用hdfs/hbase构建数据存储层，用于支撑海量数据的存储；&lt;/span&gt;&lt;span&gt;上层是YARN资源调度层，实现百万级别的作业和任务调度；&lt;/span&gt;&lt;span&gt;再上层是各种计算引擎构成的执行层，如Flink、MR、SPARK，PRESTO，TensorFlow等计算框架用于执行业务的计算任务，最上层属于应用层如FLink作业托管平台，机器学习平台，以及SQL提交平台，面向用户提供服务。&lt;/span&gt;&lt;span&gt;本次分享的YARN属于资源调度层，用于把计算引擎的Task快速调度到合适的机器上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. YARN资源调度系统介绍&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;YARN背景介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;433&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;579&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;433&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPhDMVHAzBYriaOGSWOnc3mc66btqkySFicaqBdVMt01TcIbic52OwfftfmNqCessj5YgNjKwtiaH5LSWw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;YARN是Apache Hadoop旗下的顶级项目，Hadoop 2.0发布时引入，主要用于解决hadoop1.0面临的集群调度性能和扩展性问题。&lt;/span&gt;&lt;span&gt;通过把集群资源管理和作业资源管理拆分成ResourceManager和ApplicationMaster两个组件，实现调度架构从单级架构向二级架构的转变，提升了集群性能。&lt;/span&gt;&lt;span&gt;YARN专注于集群资源管理和调度，包含ResourceManager和NodeManager两个核心组件；&lt;/span&gt;&lt;span&gt;ResourceManager负责集群资源管理和分配；&lt;/span&gt;&lt;span&gt;NodeManager在每台机器上部署，负责管理所在机器上资源。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;YARN调度器演进过程：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;433&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;579&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;433&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPhDMVHAzBYriaOGSWOnc3mc6HQSoMicObzXxGItmqkjMzibNmoDmoMctn5a2APhJhCvnoagvta32hefQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原生YARN在调度过程中，先选择一个节点，并对队列进行排序，递归从root队列找到最优的叶子队列，再对叶子队列中运行的app进行排序，选出app在这个节点上调度资源。&lt;/span&gt;&lt;span&gt;随着集群规模增长和队列数目的增加，调度耗时越来越长，调度吞吐成为制约集群规模的主要瓶颈。&lt;/span&gt;&lt;span&gt;为提升调度吞吐，调度器的发展经历了三个阶段：&lt;/span&gt;&lt;span&gt;第一阶段通过心跳触发调度过程，实现比较简单，但心跳处理逻辑和调度逻辑在同一个线程，调度和心跳处理逻辑会相互影响。&lt;/span&gt;&lt;span&gt;第二阶段将调度逻辑剥离到单独的线程以降低调度和心跳逻辑耦合性，从而提升了调度性能；&lt;/span&gt;&lt;span&gt;但调度逻辑和心跳处理共享一把大锁，并且调度过程中对队列排序占据大量时间，整体性能提升有限。&lt;/span&gt;&lt;span&gt;第三阶段引入全局调度器的概念，可以并发对队列资源进行调度，最终通过统一的commit过程保证调度结果一致性。&lt;/span&gt;&lt;span&gt;多线程并发调度可以提升调度性能，但没有解决调度过程中排序耗时过多问题，并且引入的多线程调度，会损害调度结果的公平性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;快手基于fair scheduler 单线程调度版本，不断优化单线程调度的性能，但由于单线程调度的局限性，在集群节点接近万台规模时，集群性能出现瓶颈；上线自研的kwai scheduler调度器后，在集群调度性能上有极大的提升，目前单集群规模已达数万台，同时在调度策略方面，支持可插拔的调度架构，方便扩展新的调度策略。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;Kwai&lt;/span&gt;&lt;span&gt; scheduler&lt;/span&gt;&lt;span&gt;调度器介绍&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;kwai scheduler主要用于解决调度性能问题以及调度策略扩展性问题。性能方面，传统的调度器一次只能调度一个task，并且在调度过程中需要对所有队列以及APP进行排序，有很大的资源开销；kwai scheduler采用多线程并发批量调度模式，一轮可以调度数十万个task。在调度策略方面，传统的调度器先选择节点再选择APP，难以扩充新调度策略。kwai scheduler先选择 APP再选择节点，从而APP可以看到所有节点信息，通过对节点进行过滤与打分排序，可以针对不同场景扩展不同的调度策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 基于集群状态做全局批量调度&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;433&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;579&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;433&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPhDMVHAzBYriaOGSWOnc3mc66KCDibKsfymib0O1hMzQbsFQyJo6phn9yGGNznBy7K2wic7nDcwgMzs8A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kwai scheduler整体架构如上图所示，ResouceManager中RPC层和事件处理层基本保持不变，主要改动点是将调度逻辑做一个整体的剥离替换原先的fair scheduler调度。&lt;/span&gt;&lt;span&gt;每次调度过程中拉取集群状态做镜像，基于集群镜像并发批量调度，调度完成后，将调度结果推送回去。&lt;/span&gt;&lt;span&gt;App可以通过原有的心跳接口获取调度container。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. Kwai scheduler 调度流程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;433&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;579&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;433&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPhDMVHAzBYriaOGSWOnc3mc6XZ8oAhiczsLuQDrRwVfpBHfXHd5EYAic7sDUkqdyWSKbozbNaEGjNAnQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kwai scheduler 基于集群镜像（节点的资源使用情况；&lt;/span&gt;&lt;span&gt;队列的最小资源和最大资源量，以及当前资源使用量，APP资源使用量和资源需求量等）进行资源的预分配，计算出每个APP可以在这一轮调度中分配多少资源。&lt;/span&gt;&lt;span&gt;APP根据预先分配到的资源量，并发去竞争节点上的空闲资源，如果竞争成功，完成APP的资源调度过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;APP资源调度过程中，可以根据不同场景为 APP配置不同的调度策略，根据调度策略过滤节点并计算每个节点分数，选出分数最高节点尝试进行资源分配。调度过程中基本都是CPU密集操作，避免了锁的干扰（不同APP竞争节点资源时有轻量的自旋锁），有非常高的性能。并且不同的APP可以多线程并发调度，具备很好的扩展性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. Kwai scheduler 调度策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;433&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;579&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;433&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPhDMVHAzBYriaOGSWOnc3mc6mUoyEh5HX5qus6LPibg5ShSrhrg0RKgEZVTrkuJpDMJlQQNWE3YObHg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kwai scheduler 调度策略主要实现filter和score接口。&lt;/span&gt;&lt;span&gt;filter接口用于过滤节点，score根据节点信息，为节点进行打分，然后选出最优节点进行调度。&lt;/span&gt;&lt;span&gt;比如APP task打散策略，根据每个节点分配的APP资源量，对节点进行打分，节点上分配的APP资源量越多，节点分数越低，从而把APP的task在集群范围内打散到不同的节点。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. Kwai scheduler调度线上效果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kwai scheduler 上线后，支撑单集群数万台机器，1万+作业同时运行，每天调度吞吐量峰值5w/s+，资源分配率93%+，同时支持不同的调度场景。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;多&lt;/span&gt;&lt;span&gt;调&lt;/span&gt;&lt;span&gt;度场景优化&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 离线ETL场景&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;离线场景下如何保障核心作业的SLA是比较核心的问题。在快手，核心作业和普通作业在同一个队列中，通过完善作业分级保障能力和异常节点规避能力，保障核心作业的SLA。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;离线ETL场景中经常会遇到以下情况以及相应的优化方案：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;① 其他队列作业大量占据资源不释放&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过优化队列间资源抢占来解决这个问题。为防止抢占影响过大，默认情况下只有高优先级核心作业触发抢占，并且会限制每轮抢占的最大资源量。抢占过程中根据作业优先级，饥饿等待时间等条件动态计算每个队列可以抢占的资源量，从而把资源倾斜给优先级更高，饥饿等待时间更长的作业。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;② 队列内低优先级作业占据大量资源不释放&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在生产场景下如果低优先级作业占用大量资源不释放，导致优先级比较高的任务无法获取到足够资源，从而导致产出延迟。为解决这个问题提出基于虚拟队列来保障高优先级作业产出。所谓虚拟队列，是在物理队列下，按照一定逻辑规则（比如优先级）抽象出的逻辑队列。每个虚拟队列有一定的资源配额，并且会触发物理队列内部的抢占，从而解决上面的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;③ 低优先级作业占据app solt不释放&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为方便AppSlot资源的管理，抽象出minApp概念，如果App启动时，队列running App小于minApp，将会立刻启动App，不会受限于父队列的maxRunningApp，这样在队列层面保障有可预期的app slot。但同样存在一个问题，队列内部低优先级作业占据大量AppSlot不释放，导致高优先级作业启动延迟。为此提出了App Slot抢占功能。如下图所示，如果发现高优先级作业（P0）长时间pending不能启动，扫描队列内runningApp，选择低优先级作业进入睡眠模式（不再调度新task，极端情况下回收task）从而释放出slot资源，保障高优先级作业能及时启动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;433&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;579&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;433&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPhDMVHAzBYriaOGSWOnc3mc6KrianOUibnG3Wgjgibm4BgDDAH8Lt4EmS9mJX5AIOopYp9JRc9icGsdBbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;④ 回溯作业影响生产作业&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回溯作业的特点在于大量提交多个作业，如果不加控制可能会影响生产作业的产出。主要方案是限制回溯作业最大资源量和最大运行APP数目，将影响控制在一定的范围以内。但是限制最大资源量和运行数目导致大量回溯作业在yarn处于pending状态，对yarn有比较大的压力，通过与上游调度系统打通，反压上层工作流调度系统，阻止新提交的回溯作业，从而减轻了YARN负载。对于已经提交到yarn上的作业，会限制每个队列最大pending app个数，从而保障总体pending app数目可控。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;⑤ 高优先级作业大块资源请求不能及时满足&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原有的Reserve机制中，调度器可以reserve一批节点，不再调度新task，等待节点上自然释放资源。如果被reserve节点资源长时间不释放，如何处理？针对这个场景开发了reserve抢占功能，用于抢占reserve节点上的低优先级的container，从而保障节点上有足够的空闲资源启动高优先级作业。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;⑥ 规避异常节点，避免核心作业长尾&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过采集节点物理指标，task失败率，task运行速度，以及shuffle失败率等，将此节点标记为异常节点，不再调度新Task。从而尽量减少异常节点的影响范围，规避其导致的Task长尾，失败问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. Adhoc即时查询场景&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;AdHoc场景主要着力于提升每个用户的查询体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过虚拟队列技术，从user维度来划分虚拟队列，实现基于user公平的资源的分配，配合基于user的资源抢占，从而避免大量资源被某一个用户占用，导致其他用户长时间得不到资源。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;433&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;579&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;433&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPhDMVHAzBYriaOGSWOnc3mc6Kv9kp5HW7OhYNzcchIzaGAqiaGojR5HRDvkEFb4ATEhtDROsAHDXwkQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 机器学习训练场景&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;机器学习训练场景下，资源需求呈现all or nothing特点，在队列资源紧张时，如果基于yarn原生的公平调度方式，为每个app分配部分资源，容易产生资源分配死锁问题。为此我们采用APP轮转调度策略，采用类似FIFO策略，保障头部APP（头部会动态变化，轮转策略名称的由来）的资源需求，避免死锁问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. Flink实时作业场景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;FLink实时场景下，主要介绍故障发生时，如何尽量减少故障的影响范围，以及如何快速恢复故障作业：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;433&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;579&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;433&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPhDMVHAzBYriaOGSWOnc3mc6a98NpPOrq6NvdBqiaCsd7Z68jHnWsjUicS41pMaCK9FDATZbnE7VNO2g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然可以基于Hawk秒级发现节点宕机，但作业恢复过程可能需要几分钟（申请资源，下载jar包，job recover等）。&lt;/span&gt;&lt;span&gt;我们通过资源冗余分配策略，优化掉其中资源申请和下载jar包过程，最终实现秒级作业恢复。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;其他工作&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;未来规划&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;支持超大规模集群：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要目标支撑十万量级的集群规模，目前基于社区的federation方案进行改造。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Hadoop跨IDC集群建设：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;受限于公司物理集群规划，离线集群会分布在不同的IDC，如何基于有限的跨IDC带宽，对数据和计算进行合理排布，是一个非常有挑战的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;在离线资源混合部署：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于在线机器的空闲资源运行离线任务，在资源调度和隔离方面有很多工作要做，目前已经取得一定收益。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;在离线资源统一管理：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前YARN托管离线调度，k8s托管在线调度，如何让资源更弹性更统一？我们也在做一些尝试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;流shuffle服务建设：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;shuffle过程产生大量大量的随机IO，通过流shuffle服务接管MR和SPARK shuffle过程，将随机IO转变成顺序IO，提升集群算力并减少在离线混部过程中IO影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家如何有兴趣或者疑问可以随时联系我，也欢迎考虑快手大数据架构的工作机会，一起解决更有挑战的事儿。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16008590572276=&quot;rgb(136, 151, 171)&quot; data-darkmode-original-color-16008590572276=&quot;rgb(63, 74, 89)&quot; data-style=&quot;color: rgb(63, 74, 89); font-family: 微软雅黑; font-size: 11pt; letter-spacing: 0.4pt; text-align: left; text-indent: 0pt; visibility: visible;&quot;&gt;今天的分享就到这里，谢谢大家。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;在文末分享、点赞、在看，给个3连击呗~&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;嘉宾介绍：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;274&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;274&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vrk53t8TibicrOhUKmZqaRcO3v2ib1EJI9wlbhjkJlibMiak7TQGCHVEc0Bo19iaKNJKvznRJxTrY8RfFjibLKb9W3oMw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;房孝敬&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;快手 | 大数据架构师&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2017&lt;/span&gt;&lt;span&gt;年加入快手，负责快手大数据资源调度方向，包括超大规模分布式资源调度，分布式计算，&lt;/span&gt;&lt;span&gt;AI&lt;/span&gt;&lt;span&gt;架构等。&lt;/span&gt;&lt;span&gt;此前曾在阿里，腾讯，负责搜索&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;大数据系统研发工作，&lt;/span&gt;&lt;span&gt;hadoop&lt;/span&gt;&lt;span&gt;／&lt;/span&gt;&lt;span&gt;spark&lt;/span&gt;&lt;span&gt;／&lt;/span&gt;&lt;span&gt;k8s&lt;/span&gt;&lt;span&gt;社区的&lt;/span&gt;&lt;span&gt;contributor。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;社群推荐：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;欢迎加入 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;DataFunTalk 大数据 &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;交流群，跟同行零距离交流。&lt;strong&gt;识别二维码&lt;/strong&gt;，添加小助手微信，&lt;strong&gt;入群。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;3&quot; data-cropselx2=&quot;223&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;227&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPjWF4KeBlBY77bxkY6RkGYibHjAzoDzvpicWmiamn1unXwekUjw5gfc21jwoGBMEPxsUy3SW0RKicjZYA/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;关于我们：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;DataFunTalk &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;专注于大数据、人工智能技术应用的分享与交流。发起于2017年，在北京、上海、深圳、杭州等城市举办超过100场线下沙龙、论坛及峰会，已邀请近600位专家和学者参与分享。其公众号 DataFunTalk 累计生产原创文章300+，百万+阅读，9万+精准粉丝。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1NTMyOTI4Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPgiaIKm4YqA09u83TvzKbfsabjfX1TLzaXLAK9MWmC4qI6cuTBJnxygZLZPU49O8g6j8QI9264NMqQ/0?wx_fmt=png&quot; data-nickname=&quot;DataFunTalk&quot; data-alias=&quot;datafuntalk&quot; data-signature=&quot;专注于大数据、人工智能技术应用的分享与交流。致力于成就百万数据科学家。定期组织技术分享直播，并整理大数据、推荐/搜索算法、广告算法、NLP 自然语言处理算法、智能风控、自动驾驶、机器学习/深度学习等技术应用文章。&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;🧐&lt;strong&gt;分享、点赞、在看&lt;/strong&gt;，给个&lt;strong&gt;3连击&lt;/strong&gt;呗！&lt;strong&gt;👇&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4f9319bb921c9f6b9994a790b465e086</guid>
<title>小心你的个人信息：GitHub 热点速览 v.21.09</title>
<link>https://toutiao.io/k/bat83ej</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNMMjoxGzptyg870o417Rw2duTyMQIYRj5ibwFbaBfJ70k26BpDvibVDSIqwH0ljYbtbvUibFfnVl94ZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：HelloGitHub-小鱼干&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;浏览过必有痕迹，有什么可以抹去社交痕迹的方法呢？social-analyzer 是一个可在 350+ 网站分析特定用户资料的工具，你可以用它来“人肉”他人，反之，你也可以用它来保护自己的用户资料：先搜为敬，再根据搜到的个人资料做下一步的资料整理，也不失为一个好的用法。这种神奇的操作也会发生在 miro 上，有了它，马里奥和皮卡丘就可以在你的终端奔跑，陪伴你输入的命令。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下内容摘录自微博@HelloGitHub 的 GitHub Trending 及 Hacker News 热帖（简称 HN 热帖），选项标准：&lt;code&gt;新发布&lt;/code&gt; | &lt;code&gt;实用&lt;/code&gt; | &lt;code&gt;有趣&lt;/code&gt;，根据项目 release 时间分类，发布时间不超过 14 day 的项目会标注 &lt;code&gt;New&lt;/code&gt;，无该标志则说明项目 release 超过半月。由于本文篇幅有限，还有部分项目未能在本文展示，望周知 🌝&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5548489666136724&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMMjoxGzptyg870o417Rw2dlae0kx50ngNjnZRQVtoB57r31NuPMVDNS4fNxWoUk44SibsegadlWjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;629&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 本周特推&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在开始本周的特推之前，&lt;span&gt;如果你有什么想要的 GitHub 项目，记得留言呀&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;你的留言超重要 (≧▽≦)&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.1 终端马里奥：miro&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：50+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;New&lt;/code&gt; miro 是一个用 Rust 编写的终端模拟器，不过有意思的是，它里面运行着一只马里奥，它在你输入命令之后会开始奔跑。除了马里奥款之外，还有皮卡丘、卡比、索尼克款。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/o2sh/miro&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.65625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNMMjoxGzptyg870o417Rw2dcC9nCrQ1xJwAMtibvnVvoJbib2yyGnDF0zzVicsAt4Hq4wXHp0D9maKjQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.2 又一个社交分析工具：social-analyzer&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：2,300+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;social-analyzer 一个通过 API/CLI/Web App 在 350+ 个网站分析、找寻特定用户资料的工具。它提供了不同的字符串分析和检测模块，可自由在“调查”过程中组合使用。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/qeeqbox/social-analyzer&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4217479674796748&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNMMjoxGzptyg870o417Rw2dWfibEtU6hiagcjEiaKnkagPibCdQc60yN55C7gRE3JYicXGwXia4ZhsvicVOQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;984&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. GitHub Trending 周榜&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.1 新的链接器：mold&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：1,000+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;mold 是一个新的链接器，它旨在替代现有的 Unix 链接器，如 GNU BFD、GNU gold 或 LLVM lld。项目作者的目标是制作一个 Linker，它可以与用 &lt;code&gt;cat&lt;/code&gt; 命令连接输入对象文件一样快。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/rui314/mold&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.89125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNMMjoxGzptyg870o417Rw2doDdvPBQwK5peh1RCibdLSu8y1W6LgjyLH8aZ7uWBhlXQWw8VibQnT6uA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.2 Python 备忘录：python-cheatsheet&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：1,900+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;python-cheatsheet 是一个全面且实用的 Python 备忘录，也是 HelloGitHub 月刊第五十六期推荐项目。它可以让你快速找到集合、类型、语法、数据的基础用法，以及正则、Python 库、数据处理等进阶用法。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/gto76/python-cheatsheet&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.23198198198198197&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNMMjoxGzptyg870o417Rw2dp7cJjEOia9qwk1svGjiaBtjrL74ibEdjpIy3rfw8nIiam2wxK03yeESTEg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;888&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.3 Google 开源 ML 框架：model_search&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：2,200+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;New&lt;/code&gt; model_search 模型搜索是一个实现大规模模型架构搜索的自动机器学习的框架。它旨在帮助研究人员加快探索过程，为他们的分类问题（如：不同类型层的 DNNs）找到正确的模型架构。model_search 基于 TensorFlow 构建，既可单机运行，也可在分布式运行。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/google/model_search&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5082690187431091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMMjoxGzptyg870o417Rw2dribRQ1OalhNg3pc3sUpClNJicjXXJqK13Kz1lujAiaf8lYDBYfCc8DbAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;907&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.4 函数式编程：mostly-adequate-guide&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：700+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;mostly-adequate-guide 是一本教你如何在日常开发实践中运用函数式编程思维的书籍。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/MostlyAdequate/mostly-adequate-guide&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0205562273276905&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMMjoxGzptyg870o417Rw2dMg9oaUbkjMOtYVicOQRjEnK27Dc5lH7SmSrKXlibQe9Lt6J5elcg3EEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;827&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.5 一次编译随意运行：Cosmopolitan&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：1,250+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cosmopolitan 是一个让 C 语言一次编译、随处运行的工具，就像 Java 一样，只不过它不需要解释器或虚拟机。相反，它重新配置了 GCC 和 Clang，以输出 POSIX 标准的多语言格式，在 Linux+Mac+Windows+FreeBSD+OpenBSD+NetBSD+BIOS 上运行，具有极好的性能和超小的占用空间。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/jart/cosmopolitan&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5135416666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMMjoxGzptyg870o417Rw2dgkY5sibK2EEE51TJibxqPYF2XwHuCm0dvlB5cbc7HjXDHucN2vdIRJTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 往期回顾&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上为 2021 年第 9 个工作周的 GitHub Trending 🎉如果你 Pick 其他好玩、实用的 GitHub 项目，记得来 HelloGitHub issue 区和我们分享下哟 🌝&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后，记得你在本文留言区留下你想看的主题 Repo（限公众号），例如：量化交易，AI 换头等等。👀 和之前的送书活动类似，留言点赞 Top5 的小伙伴(&lt;/span&gt;&lt;span&gt;棒&lt;/span&gt;&lt;span&gt;），小鱼干会努力去找 Repo 的^^&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;HelloGitHub 交流群现已全面开放，添加微信号：HelloGitHub001 为好友入群，可同前端、Java、Go 等各界大佬谈笑风生、切磋技术~&lt;/p&gt;&lt;/blockquote&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA5MzYyNzQ0MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOqkqThUJBICyFBlvLvTyOCgBpibwWotSxGExfnOYFfPiaL9yn3GMUOCEVYN2RNslGCdQwgZy6ticdyA/0?wx_fmt=png&quot; data-nickname=&quot;HelloGitHub&quot; data-alias=&quot;GitHub520&quot; data-signature=&quot;分享 GitHub 上有趣、入门级的开源项目。&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;「点击关注」&lt;/span&gt;&lt;/strong&gt;更多惊喜等待你的发掘！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e2f1872bf3343a801a296f4d56ebc8e1</guid>
<title>Kotlin Symbol Processing (KSP) Alpha 版现已发布</title>
<link>https://toutiao.io/k/m48xs4b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;&lt;i&gt;作者 / 软件工程师 Ting-Yuan Huang 和产品经理 David Winer&lt;/i&gt;&lt;/p&gt;&lt;p&gt;我们很高兴地向您介绍 &lt;b&gt;Kotlin Symbol Processing&lt;/b&gt; (KSP) 的 Alpha 版，帮助您在 Kotlin 中构建轻量级编译器插件的全新工具。KSP 提供的功能类似于 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//kotlinlang.org/docs/reference/kapt.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;KAPT&lt;/a&gt;&lt;/b&gt;，但速度提高了 2 倍，可以直接访问 Kotlin 编译器功能，并且开发时充分考虑到了多平台兼容性。&lt;/p&gt;&lt;p&gt;KSP 兼容 Kotlin 1.4.30 及更高版本。您可以在 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/google/ksp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;KSP GitHub repo&lt;/a&gt;&lt;/b&gt; 中查看开放源代码和文档。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;为何推出 KSP？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Kotlin 开发者向我们反馈最多的需求就是提高构建速度。许多开发者每天都要迭代并部署数十次应用，所以构建速度缓慢会使开发者不得不将大量时间耗费在等待上。编译 Kotlin 代码的最大挑战之一是 Kotlin 没有原生注释处理系统。诸如 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/training/data-storage/room&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Room&lt;/a&gt;&lt;/b&gt; 等注释处理器在 Android 平台无处不在，它们依赖于通过 Kotlin 注释处理工具 (KAPT) 实现的 Java 注释处理兼容性。但是，KAPT 的运行速度可能会很慢，因为它需要生成中间的 Java 存根，然后 Java 注释处理系统才能对其进行提取。&lt;/p&gt;&lt;p&gt;在设计 KSP 时，我们考虑了如果从头开始构建，Kotlin 的注释处理应是怎样的形式。KSP 提供了一个功能强大且简单的 API，它可以直接解析 Kotlin 代码，因此大大降低了 KAPT 生成存根所带来的构建速度负担。实际上，利用 Room 库执行的初始基准测试表明，KSP 相比 KAPT 速度提高了 2 倍左右。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;开始使用&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;要查看 KSP 的实际运行情况，请从 GitHub 下载 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/google/ksp/releases/download/1.4.30-1.0.0-alpha02/playground.zip&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;KSP Playground 项目&lt;/a&gt;&lt;/b&gt;。您可以从中获得:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;库&lt;/b&gt;: 将构建器模式作为 KSP 处理器实现的小型 test-processor 库&lt;/li&gt;&lt;li&gt;&lt;b&gt;使用项目&lt;/b&gt;: 显示如何在实际 Kotlin 项目中使用构建器处理器的 workload 目录&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;实现构建器的所有逻辑全部位于 test-processor 中 - 对于使用者 (workload) 来说，使用 KAPT 和使用 KSP 的唯一区别是更改了两行构建文件:&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-35bb3ee0ddf0001fa51417d24d562a1a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1236&quot; data-rawheight=&quot;292&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-35bb3ee0ddf0001fa51417d24d562a1a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1236&quot; data-rawheight=&quot;292&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-35bb3ee0ddf0001fa51417d24d562a1a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-35bb3ee0ddf0001fa51417d24d562a1a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是 KSP 的目标: 大多数 Android 应用开发者无需担心其内部结构；除了这一行更改以外，支持 KSP 的库类似于普通的注释处理器，而速度却提高了 2 倍。也就是说，在同一模块中使用 KAPT 和 KSP 最初可能会降低您的构建速度，因此在 Alpha 版期间，最好在单独的模块中使用 KSP 和 KAPT。&lt;/p&gt;&lt;p&gt;随着越来越多的注释处理器采用 KSP，我们希望您的大多数模块都能够使用 KSP 来直接替代 KAPT。现在，您可以在 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/google/ksp%23supported-libraries&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;表格&lt;/a&gt;&lt;/b&gt; 中查看哪些注释处理器提供了 KSP 支持。如果表中缺少已支持或正在实现 KSP 支持的库，请将您的宝贵建议反馈给我们！&lt;/p&gt;&lt;p&gt;如果您是当前某个使用注释处理的库作者，可以在 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/google/ksp/blob/master/docs/quickstart.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;快速入门&lt;/a&gt;&lt;/b&gt; 和 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/google/ksp%23how-ksp-looks-at-source-files&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;README&lt;/a&gt;&lt;/b&gt; 指南中找到有关如何使您的库与 KSP 兼容的更多信息。&lt;/p&gt;&lt;p&gt;对于库作者而言，KSP 目前所处的 Alpha 版阶段是对其深入研究的良好契机，欢迎您在 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/google/ksp/issues&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;KSP 问题跟踪器&lt;/a&gt;&lt;/b&gt; 中向我们提供有关 API 的反馈。此外，我们会在谷歌开发者公众号和 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//surveys.jetbrains.com/s3/kotlin-slack-sign-up&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Kotlin Slack&lt;/a&gt;&lt;/b&gt; 的 #ksp 频道上定期发布版本动态。自去年 6 月的开发者预览版发布以来，我们已经解决了超过 100 项错误和问题，其中数十项都来自优秀的 Kotlin 库开发者社区的反馈。希望您可以继续将问题通过 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/google/ksp/issues&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;KSP 问题跟踪器&lt;/a&gt;&lt;/b&gt; 反馈给我们，或在文章下方进行留言。&lt;/p&gt;&lt;p&gt;&lt;i&gt;Java 是 Oracle 和/或其附属公司的注册商标。&lt;/i&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cc663702e6a51fca3f1709cb5a345556</guid>
<title>解剖 Babel：向前端架构师迈出一小步</title>
<link>https://toutiao.io/k/izh0wu8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当聊到&lt;code&gt;Babel&lt;/code&gt;的作用，很多人第一反应是：用来实现&lt;code&gt;API polyfill&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上，&lt;code&gt;Babel&lt;/code&gt;作为前端工程化的基石，作用远不止这些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一个庞大的家族，&lt;code&gt;Babel&lt;/code&gt;生态中有很多概念，比如：&lt;code&gt;preset&lt;/code&gt;、&lt;code&gt;plugin&lt;/code&gt;、&lt;code&gt;runtime&lt;/code&gt;等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些概念使初学者对&lt;code&gt;Babel&lt;/code&gt;望而生畏，对其理解也止步于&lt;code&gt;webpack&lt;/code&gt;的&lt;code&gt;babel-loader&lt;/code&gt;配置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文会从&lt;code&gt;Babel&lt;/code&gt;的核心功能出发，一步步揭开&lt;code&gt;Babel&lt;/code&gt;大家族的神秘面纱，向前端架构师迈出一小步。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Babel是什么&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Babel 是一个 JavaScript 编译器。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为&lt;code&gt;JS&lt;/code&gt;编译器，&lt;code&gt;Babel&lt;/code&gt;接收输入的&lt;code&gt;JS&lt;/code&gt;代码，经过内部处理流程，最终输出修改后的&lt;code&gt;JS&lt;/code&gt;代码。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4524793388429752&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QibeeJCUD7SRoaa75YINhicgsaEYeSvGOsgjQNLiaeibu14iakrBtX3hWia0gWGLKKcic9FVZrYq020ibGibAz2Wj4Kq8AQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1936&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;Babel&lt;/code&gt;内部，会执行如下步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;将&lt;code&gt;Input Code&lt;/code&gt;解析为&lt;code&gt;AST&lt;/code&gt;（抽象语法树）,这一步称为&lt;code&gt;parsing&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;编辑&lt;code&gt;AST&lt;/code&gt;，这一步称为&lt;code&gt;transforming&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;将编辑后的&lt;code&gt;AST&lt;/code&gt;输出为&lt;code&gt;Output Code&lt;/code&gt;，这一步称为&lt;code&gt;printing&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.46755921730175076&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QibeeJCUD7SRoaa75YINhicgsaEYeSvGOswQDsT6Vp5VUJJXwjW6fb3wwCghJNcMeCGQLPGtK8ELVFc0lYwm1hicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1942&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从&lt;span&gt;Babel仓库&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;的源代码，可以发现：&lt;code&gt;Babel&lt;/code&gt;是一个由几十个项目组成的&lt;code&gt;Monorepo&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中&lt;code&gt;babel-core&lt;/code&gt;提供了以上提到的三个步骤的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;babel-core&lt;/code&gt;内部，更细致的讲：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;babel-parser&lt;/code&gt;实现第一步&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;babel-generator&lt;/code&gt;实现第三步&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要了解第二步，我们需要简单了解下&lt;code&gt;AST&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;AST的结构&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入&lt;span&gt;AST explorer&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;，选择&lt;code&gt;@babel/parser&lt;/code&gt;作为解析器，在左侧输入：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; name = [&lt;span&gt;&#x27;ka&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;song&#x27;&lt;/span&gt;];&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以解析出如下结构的&lt;code&gt;AST&lt;/code&gt;，他是&lt;code&gt;JSON&lt;/code&gt;格式的树状结构：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7121212121212122&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QibeeJCUD7SRoaa75YINhicgsaEYeSvGOsJX0OZFZZoZsVicBwy23U4FmNTWv3ydTLrFMVUyP12iacKnJxUbOe0lvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1980&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;babel-core&lt;/code&gt;内部：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;babel-traverse&lt;/code&gt;可以通过&lt;strong&gt;「深度优先」&lt;/strong&gt;的方式遍历&lt;code&gt;AST&lt;/code&gt;树&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;对于遍历到的每条路径，&lt;code&gt;babel-types&lt;/code&gt;提供用于修改&lt;code&gt;AST&lt;/code&gt;节点的节点类型数据&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，整个&lt;code&gt;Babel&lt;/code&gt;底层编译能力由如下部分构成：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.49381443298969074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QibeeJCUD7SRoaa75YINhicgsaEYeSvGOsBibnwg19n2JPrMmwuuUf52X7E1QJtjn6AtyJ2sRKkAoRIEuI6ygZNeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1940&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们了解&lt;code&gt;Babel&lt;/code&gt;的底层能力后，接下来看看基于这些能力，上层能实现什么功能？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Babel的上层能力&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于&lt;code&gt;Babel&lt;/code&gt;对&lt;code&gt;JS&lt;/code&gt;代码的编译处理能力，&lt;code&gt;Babel&lt;/code&gt;最常见的上层能力为：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;polyfill&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;DSL&lt;/code&gt;转换（比如解析&lt;code&gt;JSX&lt;/code&gt;）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;语法转换（比如将高级语法解析为当前可用的实现）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于篇幅有限，这里仅介绍&lt;code&gt;polyfill&lt;/code&gt;与&lt;strong&gt;「语法转换」&lt;/strong&gt;相关功能。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;polyfill&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为前端，最常见的&lt;code&gt;Babel&lt;/code&gt;生态的库想必是&lt;code&gt;@babel/polyfill&lt;/code&gt;与&lt;code&gt;@babel/preset-env&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;@babel/polyfill&lt;/code&gt;或&lt;code&gt;@babel/preset-env&lt;/code&gt;可以实现高级语法的降级实现以及&lt;code&gt;API&lt;/code&gt;的&lt;code&gt;polyfill&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上文我们知道，&lt;code&gt;Babel&lt;/code&gt;本身只是&lt;code&gt;JS&lt;/code&gt;的编译器，以上两者的转换功能是谁实现的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是：&lt;code&gt;core-js&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;core-js简介&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;core-js&lt;/code&gt;是一套模块化的&lt;code&gt;JS&lt;/code&gt;标准库，包括：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;一直到&lt;code&gt;ES2021&lt;/code&gt;的&lt;code&gt;polyfill&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;promise&lt;/code&gt;、&lt;code&gt;symbols&lt;/code&gt;、&lt;code&gt;iterators&lt;/code&gt;等一些特性的实现&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;ES&lt;/code&gt;提案中的特性实现&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;跨平台的&lt;code&gt;WHATWG / W3C&lt;/code&gt;特性，比如&lt;code&gt;URL&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QibeeJCUD7SRoaa75YINhicgsaEYeSvGOs71cqKzLhqhvQkTa0iboiaTIhtyhNMuPo2EKoegwu7DMzXJAxeCibhjN8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;460&quot;/&gt;&lt;figcaption&gt;core-js作者Denis Pushkarev&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从&lt;span&gt;core-js仓库&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;看到，&lt;code&gt;core-js&lt;/code&gt;也是由多个库组成的&lt;code&gt;Monorepo&lt;/code&gt;，包括：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;core-js-builder&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;core-js-bundle&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;core-js-compat&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;core-js-pure&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;core-js&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们介绍其中几个库：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;core-js&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;core-js&lt;/code&gt;提供了&lt;code&gt;polyfill&lt;/code&gt;的核心实现。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&#x27;core-js/features/array/from&#x27;&lt;/span&gt;; &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&#x27;core-js/features/array/flat&#x27;&lt;/span&gt;; &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&#x27;core-js/features/set&#x27;&lt;/span&gt;;        &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&#x27;core-js/features/promise&#x27;&lt;/span&gt;;    &lt;br/&gt;&lt;br/&gt;&lt;span&gt;Array&lt;/span&gt;.from(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;Set&lt;/span&gt;([&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;]));          &lt;span&gt;// =&amp;gt; [1, 2, 3]&lt;/span&gt;&lt;br/&gt;[&lt;span&gt;1&lt;/span&gt;, [&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;], [&lt;span&gt;4&lt;/span&gt;, [&lt;span&gt;5&lt;/span&gt;]]].flat(&lt;span&gt;2&lt;/span&gt;);                 &lt;span&gt;// =&amp;gt; [1, 2, 3, 4, 5]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Promise&lt;/span&gt;.resolve(&lt;span&gt;32&lt;/span&gt;).then(&lt;span&gt;&lt;span&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;console&lt;/span&gt;.log(x)); &lt;span&gt;// =&amp;gt; 32&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接使用&lt;code&gt;core-js&lt;/code&gt;会污染全局命名空间和对象原型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如上例中修改了&lt;code&gt;Array&lt;/code&gt;的原型以支持数组实例的&lt;code&gt;flat&lt;/code&gt;方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;core-js-pure&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;core-js-pure&lt;/code&gt;提供了独立的命名空间：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;core-js-pure/features/array/from&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; flat &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;core-js-pure/features/array/flat&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;Set&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;core-js-pure/features/set&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;core-js-pure/features/promise&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;Set&lt;/span&gt;([&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;]));                &lt;span&gt;// =&amp;gt; [1, 2, 3]&lt;/span&gt;&lt;br/&gt;flat([&lt;span&gt;1&lt;/span&gt;, [&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;], [&lt;span&gt;4&lt;/span&gt;, [&lt;span&gt;5&lt;/span&gt;]]], &lt;span&gt;2&lt;/span&gt;);                &lt;span&gt;// =&amp;gt; [1, 2, 3, 4, 5]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Promise&lt;/span&gt;.resolve(&lt;span&gt;32&lt;/span&gt;).then(&lt;span&gt;&lt;span&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;console&lt;/span&gt;.log(x)); &lt;span&gt;// =&amp;gt; 32&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样使用不会污染全局命名空间与对象原型。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;core-js-compat&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;core-js-compat&lt;/code&gt;根据&lt;code&gt;Browserslist&lt;/code&gt;维护了不同宿主环境、不同版本下对应需要支持特性的集合。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;Browserslist&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;提供了不同浏览器、&lt;code&gt;node&lt;/code&gt;版本下&lt;code&gt;ES&lt;/code&gt;特性的支持情况&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QibeeJCUD7SRoaa75YINhicgsaEYeSvGOsKqeziclicCl1xVea0Ur4d1drFn9f3VET4q8ws7Dz077IFHiciaG3ibfFa3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;150&quot;/&gt;&lt;figcaption&gt;Browserslist&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&quot;browserslist&quot;&lt;/span&gt;: [&lt;br/&gt;    &lt;span&gt;&quot;not IE 11&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;maintained node versions&quot;&lt;/span&gt;&lt;br/&gt;  ]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代表：非&lt;code&gt;IE&lt;/code&gt;11的版本以及所有&lt;code&gt;Node.js&lt;/code&gt;基金会维护的版本。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;@babel/polyfill与core-js关系&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@babel/polyfill&lt;/code&gt;可以看作是：&lt;code&gt;core-js&lt;/code&gt;加&lt;code&gt;regenerator-runtime&lt;/code&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;regenerator-runtime&lt;/code&gt;是&lt;code&gt;generator&lt;/code&gt;以及&lt;code&gt;async/await&lt;/code&gt;的运行时依赖&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单独使用&lt;code&gt;@babel/polyfill&lt;/code&gt;会将&lt;code&gt;core-js&lt;/code&gt;全量导入，造成项目打包体积过大。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;从&lt;span&gt;Babel v7.4.0&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;开始，&lt;code&gt;@babel/polyfill&lt;/code&gt;被废弃了，可以直接引用&lt;code&gt;core-js&lt;/code&gt;与&lt;code&gt;regenerator-runtime&lt;/code&gt;替代&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决全量引入&lt;code&gt;core-js&lt;/code&gt;造成打包体积过大的问题，我们需要配合使用&lt;code&gt;@babel/preset-env&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;preset的含义&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在介绍&lt;code&gt;@babel/preset-env&lt;/code&gt;前，我们先来了解&lt;code&gt;preset&lt;/code&gt;的意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;初始情况下，&lt;code&gt;Babel&lt;/code&gt;没有任何额外能力，其工作流程可以描述为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; babel = &lt;span&gt;&lt;span&gt;code&lt;/span&gt; =&amp;gt;&lt;/span&gt; code;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其通过&lt;code&gt;plugin&lt;/code&gt;对外提供介入&lt;code&gt;babel-core&lt;/code&gt;的能力，类似&lt;code&gt;webpack&lt;/code&gt;的&lt;code&gt;plugin&lt;/code&gt;对外提供介入&lt;code&gt;webpack&lt;/code&gt;编译流程的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;plugin&lt;/code&gt;分为几类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;@babel/plugin-syntax-*&lt;/code&gt;语法相关插件，用于新的语法支持。比如&lt;span&gt;babel-plugin-syntax-decorators&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;提供&lt;code&gt;decorators&lt;/code&gt;的语法支持&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;@babel/plugin-proposal-*&lt;/code&gt;用于&lt;code&gt;ES&lt;/code&gt;提案的特性支持，比如&lt;code&gt;babel-plugin-proposal-optional-chaining&lt;/code&gt;是&lt;code&gt;可选链操作符&lt;/code&gt;特性支持&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;@babel/plugin-transform-*&lt;/code&gt;用于转换代码，&lt;code&gt;transform&lt;/code&gt;插件内部会使用对应&lt;code&gt;syntax&lt;/code&gt;插件&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多个&lt;code&gt;plugin&lt;/code&gt;组合在一起形成的集合，被称为&lt;code&gt;preset&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;@babel/preset-env&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;@babel/preset-env&lt;/code&gt;，可以&lt;strong&gt;「按需」&lt;/strong&gt;将&lt;code&gt;core-js&lt;/code&gt;中的特性打包，这样可以显著减少最终打包的体积。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的&lt;strong&gt;「按需」&lt;/strong&gt;，分为两个粒度：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;宿主环境的粒度。根据不同宿主环境将该环境下所需的所有特性打包&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;按使用情况的粒度。仅仅将使用了的特性打包&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来依次看下。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;宿主环境的粒度&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们按如下参数在项目目录下配置&lt;code&gt;browserslist&lt;/code&gt;文件（或在&lt;code&gt;@babel/preset-env&lt;/code&gt;的&lt;code&gt;targets&lt;/code&gt;属性内设置，或在&lt;code&gt;package.json&lt;/code&gt;的&lt;code&gt;browserslist&lt;/code&gt;属性中设置）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;not IE &lt;span&gt;11&lt;/span&gt;&lt;br/&gt;maintained node versions&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会将&lt;strong&gt;「非IE11」&lt;/strong&gt;且&lt;strong&gt;「所有Node.js基金会维护的node版本」&lt;/strong&gt;下需要的特性打入最终的包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;显然这是利用了刚才介绍的&lt;code&gt;core-js&lt;/code&gt;这个&lt;code&gt;Monorepo&lt;/code&gt;下的&lt;code&gt;core-js-compat&lt;/code&gt;的能力。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;按使用情况的粒度&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更理想的情况是只打包我们使用过的特性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候可以设置&lt;code&gt;@babel/preset-env&lt;/code&gt;的&lt;code&gt;useBuiltIns&lt;/code&gt;属性为&lt;code&gt;usage&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;a.js&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;b.js&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Map&lt;/span&gt;();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当宿主环境不支持&lt;code&gt;promise&lt;/code&gt;与&lt;code&gt;Map&lt;/code&gt;时，输出的文件为：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;a.js&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;core-js/modules/es.promise&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;b.js&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;core-js/modules/es.map&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Map&lt;/span&gt;();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当宿主环境支持这两个特性时，输出的文件为：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;a.js&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;b.js&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Map&lt;/span&gt;();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;进一步优化打包体积&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开&lt;span&gt;babel playground&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;，输入：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会发现编译出的结果为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;_classCallCheck&lt;/span&gt;(&lt;span&gt;instance, Constructor&lt;/span&gt;) &lt;/span&gt;{ &lt;span&gt;if&lt;/span&gt; (!(instance &lt;span&gt;instanceof&lt;/span&gt; Constructor)) { &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;TypeError&lt;/span&gt;(&lt;span&gt;&quot;Cannot call a class as a function&quot;&lt;/span&gt;); } }&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; App = &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;  _classCallCheck(&lt;span&gt;this&lt;/span&gt;, App);&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中&lt;code&gt;_classCallCheck&lt;/code&gt;为辅助方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果多个文件都使用了&lt;code&gt;class&lt;/code&gt;特性，那么每个文件打包对应的&lt;code&gt;module&lt;/code&gt;中都将包含&lt;code&gt;_classCallCheck&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了减少打包体积，更好的方式是：需要使用&lt;strong&gt;「辅助方法」&lt;/strong&gt;的&lt;code&gt;module&lt;/code&gt;都从同一个地方引用，而不是自己维护一份。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@babel/runtime&lt;/code&gt;包含了&lt;code&gt;Babel&lt;/code&gt;所有&lt;strong&gt;「辅助方法」&lt;/strong&gt;以及&lt;code&gt;regenerator-runtime&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单纯引入&lt;code&gt;@babel/runtime&lt;/code&gt;还不行，因为&lt;code&gt;Babel&lt;/code&gt;不知道何时引用&lt;code&gt;@babel/runtime&lt;/code&gt;中的&lt;strong&gt;「辅助方法」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，还需要引入&lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个插件会在编译时将所有使用&lt;strong&gt;「辅助方法」&lt;/strong&gt;的地方从&lt;strong&gt;「自己维护一份」&lt;/strong&gt;改为从&lt;code&gt;@babel/runtime&lt;/code&gt;中引入。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我们需要将&lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt;置为&lt;code&gt;devDependence&lt;/code&gt;，因为他在编译时使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将&lt;code&gt;@babel/runtime&lt;/code&gt;置为&lt;code&gt;dependence&lt;/code&gt;，因为他在运行时使用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文从底层向上介绍了前端日常业务开发会接触的&lt;code&gt;Babel&lt;/code&gt;大家族成员。他们包括：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;底层&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@babel/core&lt;/code&gt;（由&lt;code&gt;@babel/parser&lt;/code&gt;、&lt;code&gt;@babel/traverse&lt;/code&gt;、&lt;code&gt;@babel/types&lt;/code&gt;、&lt;code&gt;@babel/generator&lt;/code&gt;等组成）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他们提供了&lt;code&gt;Babel&lt;/code&gt;编译&lt;code&gt;JS&lt;/code&gt;的能力。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注：这里&lt;code&gt;@babel/core&lt;/code&gt;为库名，前文中&lt;code&gt;babel-core&lt;/code&gt;为其在仓库中对应文件名&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;中层&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@babel/plugin-*&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Babel&lt;/code&gt;对外暴露的&lt;code&gt;API&lt;/code&gt;，使开发者可以介入其编译&lt;code&gt;JS&lt;/code&gt;的能力&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;上层&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@babel/preset-*&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常开发会使用的插件集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于立志成为前端架构师的同学，&lt;code&gt;Babel&lt;/code&gt;是前端工程化的基石，学懂、会用他是很有必要的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;能看到这里真不容易，给自己鼓鼓掌吧。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.76&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QibeeJCUD7SRoaa75YINhicgsaEYeSvGOsLbmicVlROnY3104uItYyfZyKciaT19vIo8JJPnLytBxnNlNicr5yicNicVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;figcaption&gt;希斯特利亚笔芯&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Babel仓库: &lt;span&gt;https://github.com/babel/babel/tree/main/packages&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;AST explorer: &lt;span&gt;https://astexplorer.net/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;core-js仓库: &lt;span&gt;https://github.com/zloirock/core-js/tree/master/packages&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;Browserslist: &lt;span&gt;https://github.com/browserslist/browserslist&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Babel v7.4.0: &lt;span&gt;https://babeljs.io/docs/en/babel-polyfill#docsNav&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;babel-plugin-syntax-decorators: &lt;span&gt;https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;babel playground: &lt;span&gt;https://babeljs.io/repl#?browsers=&amp;amp;build=&amp;amp;builtIns=false&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=MYGwhgzhAECCAO9oG8C-Q&amp;amp;debug=false&amp;amp;forceAllTransforms=false&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=false&amp;amp;fileSize=false&amp;amp;timeTravel=false&amp;amp;sourceType=script&amp;amp;lineWrap=true&amp;amp;presets=env&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.13.7&amp;amp;externalPlugins=babel-plugin-transform-regenerator%406.26.0&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;奇舞团是360集团最大的大前端团队，代表集团参与W3C和Ecma会员（TC39）工作。奇舞团非常重视人才培养，有工程师、讲师、翻译官、业务接口人、团队Leader等多种发展方向供员工选择，并辅以提供相应的技术力、专业力、通用力、领导力等培训课程。奇舞团以开放和求贤的心态欢迎各种优秀人才关注和加入奇舞团。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5f2134af150f84a1f7e6a1acebce9449</guid>
<title>PySpark：用 Word2Vec 计算文本相似度</title>
<link>https://toutiao.io/k/cfpu4ts</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;在这个示例中我们来介绍在 PySpark 中如何通过 Word2Vec (词向量模型) 来计算文本的相似度&lt;/p&gt;

&lt;p&gt;Word2Vec顾名思义，这是一个将单词转换成向量形式的工具。通过转换，可以把对文本内容的处理简化为向量空间中的向量运算，计算出向量空间上的相似度，来表示文本语义上的相似度.&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;import findspark
findspark.init()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;import pandas as pd
from pyspark.sql import SparkSession
from pyspark.sql.types import (
    StringType,
    ArrayType,
    FloatType
)
from pyspark.sql.functions import (
    udf,
    col
)
from pyspark.ml.feature import Word2Vec
# !pip install jieba
import jieba
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;spark = (SparkSession
    .builder
    .appName(&quot;pyspark-word2vec-cosine-similarity&quot;)
    .getOrCreate())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们准备了拉取了一份开发者头条上的文章列表作为示例数据&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df = (spark.
      read.
      csv(&#x27;/home/eric/Sync/datasets/misc/tech-posts.csv&#x27;, header=True)
      .select(&#x27;id&#x27;, &#x27;title&#x27;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;+---+------------------------------------+
| id|                               title|
+---+------------------------------------+
|  9|         [PDF]树莓派杂志《MagPi》...|
| 16|         Python 学习资源列表（kir...|
|  8|           Scala 最佳实践《Effect...|
|  1|大众点评网的架构设计与实践（图文版）|
|  5|             JavaScript 与有限状态机|
|  6|                    iOS 开发工具列表|
|  7|                HTML5/JavaScript ...|
|  2|                    Angular 编程思想|
| 72|  [译] 亲爱的项目经理，我恨你（外...|
|  4|      如何让 Python 代码运行得更快？|
| 73|                如何吸引技术合伙人？|
| 10|                [PDF]Puppet 入门教程|
| 75|             先试再问（Matt Ringel）|
| 11|        如何优化网页转化率？（中篇）|
| 76|         你喜欢/不喜欢什么编程语言？|
| 12|     从协作编码到婚礼请柬：GitHub...|
| 13|           从《寿司之神》学到的5件事|
| 14|    张小龙2011年在华中科大的演讲实录|
| 15|                       GitHub 好声音|
| 96|         在 YC 学到的58件事（Amir...|
+---+------------------------------------+
only showing top 20 rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们用到了 &lt;a href=&quot;https://github.com/fxsjy/jieba&quot;&gt;jieba&lt;/a&gt; 分词工具，把分词封装为一个 udf 对上面的 DataFrame 的 &lt;code&gt;title&lt;/code&gt; 进行分词&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;def jieba_seg(x):
    return [w for w in jieba.cut(x) if len(w)&amp;gt;1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;jieba_seg_udf = udf(jieba_seg, ArrayType(StringType()))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df = df.withColumn(&#x27;words&#x27;, jieba_seg_udf(df[&#x27;title&#x27;]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df.printSchema()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;root
 |-- id: string (nullable = true)
 |-- title: string (nullable = true)
 |-- words: array (nullable = true)
 |    |-- element: string (containsNull = true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;拟合 Word2Vec 模型, 输出向量化&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;model = Word2Vec(numPartitions=10, inputCol=&#x27;words&#x27;, outputCol=&#x27;vecs&#x27;).fit(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;model.getVectors().count()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2703
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模型转换并做交叉JOIN&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df_transformed = model.transform(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df_cross = df_transformed.select(
    col(&#x27;id&#x27;).alias(&#x27;id1&#x27;),
    col(&#x27;vecs&#x27;).alias(&#x27;vecs1&#x27;)).crossJoin(df_transformed.select(
        col(&#x27;id&#x27;).alias(&#x27;id2&#x27;),
        col(&#x27;vecs&#x27;).alias(&#x27;vecs2&#x27;))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df_cross.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;+---+--------------------+---+--------------------+
|id1|               vecs1|id2|               vecs2|
+---+--------------------+---+--------------------+
|  9|[0.00604514013975...|  9|[0.00604514013975...|
|  9|[0.00604514013975...| 16|[0.00209978688508...|
|  9|[0.00604514013975...|  8|[-0.0274142913985...|
|  9|[0.00604514013975...|  1|[-0.0080286560580...|
|  9|[0.00604514013975...|  5|[0.00677914172410...|
|  9|[0.00604514013975...|  6|[-0.0022107351881...|
|  9|[0.00604514013975...|  7|[3.40434722602367...|
|  9|[0.00604514013975...|  2|[-0.0182423858592...|
|  9|[0.00604514013975...| 72|[0.00141374469967...|
|  9|[0.00604514013975...|  4|[-0.0282975720862...|
|  9|[0.00604514013975...| 73|[-0.0131217022426...|
|  9|[0.00604514013975...| 10|[0.00280306519319...|
|  9|[0.00604514013975...| 75|[-9.9342122363547...|
|  9|[0.00604514013975...| 11|[0.01116290185600...|
|  9|[0.00604514013975...| 76|[0.01198206515982...|
|  9|[0.00604514013975...| 12|[-0.0103134274748...|
|  9|[0.00604514013975...| 13|[7.89615442045033...|
|  9|[0.00604514013975...| 14|[0.00366029532160...|
|  9|[0.00604514013975...| 15|[0.00222078245133...|
|  9|[0.00604514013975...| 96|[-7.1811025263741...|
+---+--------------------+---+--------------------+
only showing top 20 rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用 cosine 构建相似度计算 udf&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;from scipy import spatial

@udf(returnType=FloatType())
def sim(x, y):
    return float(1 - spatial.distance.cosine(x, y))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;计算两个向量间的相似度 &lt;code&gt;sim&lt;/code&gt;&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df_cross = df_cross.withColumn(&#x27;sim&#x27;, sim(df_cross[&#x27;vecs1&#x27;], df_cross[&#x27;vecs2&#x27;]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们用一个id来看一下效果, 按相似度降序排列取最相似的 top 10&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;test_id = 7445
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;pdf1 = df_cross.filter(col(&#x27;id1&#x27;)==test_id).toPandas()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;sim_top10 = pdf1[pdf1.sim&amp;lt;1].sort_values(&#x27;sim&#x27;, ascending=False).head(10)
sim_top10
&lt;/code&gt;&lt;/pre&gt;

&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th/&gt;
      &lt;th&gt;id1&lt;/th&gt;
      &lt;th&gt;vecs1&lt;/th&gt;
      &lt;th&gt;id2&lt;/th&gt;
      &lt;th&gt;vecs2&lt;/th&gt;
      &lt;th&gt;sim&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;14797&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;[0.06699860654771328, -0.07967841532081366, -0...&lt;/td&gt;
      &lt;td&gt;6727&lt;/td&gt;
      &lt;td&gt;[0.11702847061678767, -0.10443547181785107, -0...&lt;/td&gt;
      &lt;td&gt;0.985086&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5564&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;[0.06699860654771328, -0.07967841532081366, -0...&lt;/td&gt;
      &lt;td&gt;13586&lt;/td&gt;
      &lt;td&gt;[0.05327895730733872, -0.07372163236141205, -0...&lt;/td&gt;
      &lt;td&gt;0.982657&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4920&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;[0.06699860654771328, -0.07967841532081366, -0...&lt;/td&gt;
      &lt;td&gt;13061&lt;/td&gt;
      &lt;td&gt;[0.07758450843393803, -0.07245811559259892, -0...&lt;/td&gt;
      &lt;td&gt;0.981890&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3441&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;[0.06699860654771328, -0.07967841532081366, -0...&lt;/td&gt;
      &lt;td&gt;3443&lt;/td&gt;
      &lt;td&gt;[0.041676432359963655, -0.04655478027416393, -...&lt;/td&gt;
      &lt;td&gt;0.981710&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4264&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;[0.06699860654771328, -0.07967841532081366, -0...&lt;/td&gt;
      &lt;td&gt;12563&lt;/td&gt;
      &lt;td&gt;[0.04088592156767845, -0.04963424289599061, -0...&lt;/td&gt;
      &lt;td&gt;0.981029&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11041&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;[0.06699860654771328, -0.07967841532081366, -0...&lt;/td&gt;
      &lt;td&gt;10971&lt;/td&gt;
      &lt;td&gt;[0.07418017694726586, -0.08750347793102264, -0...&lt;/td&gt;
      &lt;td&gt;0.980928&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;14297&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;[0.06699860654771328, -0.07967841532081366, -0...&lt;/td&gt;
      &lt;td&gt;6150&lt;/td&gt;
      &lt;td&gt;[0.0703863805780808, -0.08529900076488653, -0....&lt;/td&gt;
      &lt;td&gt;0.979687&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;14950&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;[0.06699860654771328, -0.07967841532081366, -0...&lt;/td&gt;
      &lt;td&gt;6892&lt;/td&gt;
      &lt;td&gt;[0.044685299907411845, -0.05636310949921608, -...&lt;/td&gt;
      &lt;td&gt;0.978825&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1879&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;[0.06699860654771328, -0.07967841532081366, -0...&lt;/td&gt;
      &lt;td&gt;1901&lt;/td&gt;
      &lt;td&gt;[0.07205328019335866, -0.07813337352126837, -0...&lt;/td&gt;
      &lt;td&gt;0.978803&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;13691&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;[0.06699860654771328, -0.07967841532081366, -0...&lt;/td&gt;
      &lt;td&gt;5431&lt;/td&gt;
      &lt;td&gt;[0.06258831359446049, -0.07637270260602236, -0...&lt;/td&gt;
      &lt;td&gt;0.978398&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df.filter(col(&#x27;id&#x27;)==test_id).toPandas()
&lt;/code&gt;&lt;/pre&gt;

&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th/&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;words&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;7445&lt;/td&gt;
      &lt;td&gt;iOS 性能提升总结&lt;/td&gt;
      &lt;td&gt;[iOS, 性能, 提升, 总结]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df.filter(df.id.isin(sim_top10[&#x27;id2&#x27;].to_list())).toPandas()
&lt;/code&gt;&lt;/pre&gt;

&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th/&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;words&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1901&lt;/td&gt;
      &lt;td&gt;iOS 性能优化 (chenkai)&lt;/td&gt;
      &lt;td&gt;[iOS, 性能, 优化, chenkai]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;3443&lt;/td&gt;
      &lt;td&gt;一次 TableView 性能优化经历（iOS） (Mr.Yang)&lt;/td&gt;
      &lt;td&gt;[一次, TableView, 性能, 优化, 经历, iOS, Mr, Yang]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;12563&lt;/td&gt;
      &lt;td&gt;iOS 开发中的 11 种锁以及性能对比&lt;/td&gt;
      &lt;td&gt;[iOS, 开发, 11, 种锁, 以及, 性能, 对比]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;13061&lt;/td&gt;
      &lt;td&gt;iOS 下的图片处理与性能优化&lt;/td&gt;
      &lt;td&gt;[iOS, 图片, 处理, 性能, 优化]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;13586&lt;/td&gt;
      &lt;td&gt;iOS 界面性能优化浅析&lt;/td&gt;
      &lt;td&gt;[iOS, 界面, 性能, 优化, 浅析]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;10971&lt;/td&gt;
      &lt;td&gt;iOS 性能优化探讨&lt;/td&gt;
      &lt;td&gt;[iOS, 性能, 优化, 探讨]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;5431&lt;/td&gt;
      &lt;td&gt;iOS 开发性能提高&lt;/td&gt;
      &lt;td&gt;[iOS, 开发, 性能, 提高]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;6150&lt;/td&gt;
      &lt;td&gt;微信读书 iOS 性能优化总结&lt;/td&gt;
      &lt;td&gt;[微信, 读书, iOS, 性能, 优化, 总结]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;6727&lt;/td&gt;
      &lt;td&gt;渲染性能&lt;/td&gt;
      &lt;td&gt;[渲染, 性能]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;6892&lt;/td&gt;
      &lt;td&gt;[译] iOS 性能优化：Instruments 工具的救命三招&lt;/td&gt;
      &lt;td&gt;[iOS, 性能, 优化, Instruments, 工具, 救命, 三招]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;spark.stop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这么看效果还是不错的.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HowTos 项目 Github 地址： &lt;a href=&quot;https://github.com/toutiaoio/HowTos&quot;&gt;https://github.com/toutiaoio/HowTos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>