<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>fb6c2215077d81b06cad88bf7c55e5fb</guid>
<title>服务 API 版本控制设计与实践</title>
<link>https://toutiao.io/k/puc84fn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、前言&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;笔者曾负责vivo应用商店服务器开发，有幸见证应用商店从百万日活到几千万日活的发展历程。应用商店客户端经历了大大小小上百个版本迭代后，服务端也在架构上完成了单体到服务集群、微服务升级。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面主要聊一聊在业务快速发展过程中，产品不断迭代，服务端在兼容不同版本客户端的API遇到的问题的一些经验和心得。一方面让团队内童鞋对已有的一些设计思想有一个更彻底的理解，另一方面也是希望能引起一些遇到类似场景同行的共鸣，提供解决思路。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、通用解决方案&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;应用商店客户端迭代非常频繁，发布新的APP版本的时候，势必导致出现多版本，这样服务端就会导致多个不同的客户端请求。强制用户升级APP，可能会导致用户流失，因此采用多版本共存就是必须的。以下是业界讨论过的的一些SOA服务API版本控制方法参考[1]。在实际开发中原则上离不开以下三个方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;243&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;方案一：The Knot 无版本&lt;/strong&gt;——即平台的API永远只有一个版本，所有的用户都必须使用最新的API，任何API的修改都会影响到平台所有的用户。（如下图1）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;方案二：Point-to-Point&lt;/strong&gt;——点对点，即平台的API版本自带版本号，用户根据自己的需求选择使用对应的API，需要使用新的API特性，用户必须自己升级。（如下图2）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;方案三：Compatible Versioning&lt;/strong&gt;——兼容性版本控制，和The Knot一样，平台只有一个版本，但是最新版本需要兼容以前版本的API行为。（如下图3）&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;166&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;166&quot; data-ratio=&quot;0.2872661436330718&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4StAQE0cqsvqC96N4w5IAKDE8a7OhBR3IPV6QibTYmkf7ib5kXgzsNNMzh1WAcrAHazxfpyxjZdDibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1657&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（引用自：&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.infoq.com/news/2013/12/api-versioning/&quot; textvalue=&quot;Mark Little&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;The Costs of Versioning an API&lt;/span&gt;&lt;/a&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;简单分析，The Knot只维护最新版本，对服务端而言维护有一定简化了，但是要求服务使用者及时适配最新的版本，这种做法不太适用用户产品，目前内部服务比较适用。Point-Point针对不同客户的版本提供独立的服务，当随着版本的增加开发和运维的维护成本会增加，这种在后面我们面对“协议升级”的时候有使用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;方案三应该是最常用的情况，服务端向后兼容。后面案例也主要采用这种思想，具体的做法也是有很多种，会结合具体的业务场景使用不同策略，这个会是接下来讨论的重点。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、具体业务场景面临的挑战和探索&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.1 The Knot 无版本和Point-to-Point模式的应用场景&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.465625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4StAQE0cqsvqC96N4w5IAKsBnb4hicxwDOs1tXbvVT8ib8f2GgCqa9zEynsv5PQneBUfJCtMrexvgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上图是我们应用商店迭代变化的一个缩影，业务发展到一定阶段面临以下挑战：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;147&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;1）业务发展前期，作为服务提供方，服务端不仅要支撑多个版本应用商店客户端，同时服务于软件侧的PC助手；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）产品形态变化多样，服务端接口变更和维护面临多版本客户端兼容的挑战；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）架构逻辑上，服务端采用早期传统架构，开发和维护成本比较高；服务端与客户端进行交互的协议优化升级；以及服务拆分势在必行。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以服务端协议、框架升级以及公共服务拆分是首要解决的方向。改造经历了两个过程：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;阶段一&lt;/strong&gt;新版本新的接口一律采用新的JSON协议；已有功能接口进行兼容处理，根据客户端版本进行区分，返回不同协议的格式内容。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;阶段二&lt;/strong&gt;随着业务迭代，新的版本商店依赖的所有接口都完成了协议升级后，为了提升服务的稳定性，旧的协议性能无法明显提升，一方面升级后端架构和框架，提升开发效率和可维护性。同时拆分和独立新的工程，实现历史工程只提供给历史版本使用。我们针对大流量高并发、以及基础服务场景比如首页、详情、下载进行独立服务独立拆分。同时也提取一些公共的内部RPC服务，比如获取应用详情、过滤服务等。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;272&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.470335339638865&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6AhKPG0LUCZlb3icoD0icLu7q7jesUpNGYWbFyjHUoMe8XyushibiaUm6lWkl5lTibp2aHriaGqKHlfOZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1163&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;经过改造，服务端架构如上图所示。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）至此Old-Service后续只用进行相应的维护工作即可，对应Point-to-Point版本。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）内部的RPC服务由于只提供内部服务，服务端和客户端可以随时同步升级，只要维护最新的版本就可以，采用The Knot模式。这里需要注意的是服务的升级需要注意保持向下兼容，在扩展字段或者修改字段的时候需要特别小心，不然可能在服务升级的时候会引起客户端调用的异常。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.2 Compatible Versioning：兼容性版本控制&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;兼容性版本控制应该是最常见的版本控制方式，特别是在C/S架构当中，具体的兼容性版本不同的策略总结有API版本、客户端版本号、功能参数标志等。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;场景一：API版本号控制&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;随着互联网发展的，用户体验要求也是越来越高，产品形式也会随之每年有不一样的变化。除了避免审美疲劳外，也是在不断探索如何提升屏效、点击率和转化。就拿应用商店首页列表举例。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;应用列表在形态上经历过单一的&lt;strong&gt;应用双排 -&amp;gt; 单排  -&amp;gt; 单排+穿插&lt;/strong&gt;的布局。内容上也经历了不同商业化模式、人工排期到算法等演进。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;每个版本接口内部逻辑变化是十分大的，有明显差异。如果只是简单在service层根据版本进行判断处理，会导致处理逻辑会变得异常复杂，并且还可能导致对低版本产生影响。同时商店首页是十分重要的业务场景，结合风险考虑，类似这样对场景，在接口URL上新增版本字段，不同对版本使用不同的值，在控制层根据不同的版本进行不同的处理逻辑会更加合理，简单有效。具体策略也有比如在URL上新增接口版本字段/{version}/index、请求头携带版本参数等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;场景二：客户端版本号控制&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;类似首页列表，商店的穿插Banner也经历了多个版本的迭代。如下图所示。这些穿插样式都是在不同版本下出现的，在样式布局，支持跳转能力等方面各个版本的支持程度不一样，接口返回时需要进行相应的处理适配、过滤等处理。 &lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;340&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5887290167865707&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6AhKPG0LUCZlb3icoD0icLu7eNEKPU1NH0yIrevicsD6prGJ8hhiahOAhYp3YAibiarQiatpLbAKC7JDagg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;834&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;这类场景如果采用场景一的方案升级新的接口也能够解决，但是会存在大量重复代码，而且新增接口对于客户端接口改造、特别是一些接口路径会影响到大数据埋点统计，也是有比较高的沟通和维护成本在里面。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了提升代码复用性。使用客户端版本号控制是首选考虑策略。但是需要注意，如果只是简单的在代码层面根据客户端版本号进行判断，会存在以下问题需要考虑：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;132&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;1）代码层面会存在各种判断，造成的代码可读性差，有没有更加优雅的方法；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）存在一个客观情况。那就是客户端的版本号是存在不确定性的。由于客户端采用火车发布模式 参考[2]，多版本并行开发，导致版本号存在变动、版本跳跃不连续的情况时有发生，也给服务端开发带来了不少困扰。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如何思考解决这些问题呢？其实对于不同的产品形态涉及的一些资源或者产品模块本身出现在不同的迭代周期，可以认为他们具备了版本或者时间的属性。站在程序员视角，把某个资源支持对应的客户端版本作为这个资源对象的一个成员属性。每种资源具有这种属性后，也有相应的逻辑行为来对应成员方法---根据属性进行过滤。这样的设计赋予资源了属性和行为后，资源具备了统一的、灵活的过滤能力，而不再是简单的硬编码根据版本进行if-else判断。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有了方案后，实施起来就比较容易了。开发分配资源ID，并且设置对应支持客户端版本范围。过滤逻辑统一到资源对象。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6971428571428572&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6AhKPG0LUCZlb3icoD0icLu7hjrialHMuogiaVFg3ygmCtBnYmE7w3Tia9IsfbczFewnjSVIQBiaNzxVzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;525&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;代码层面可以将过滤逻辑统一封装到一个工具类（示例代码），在各个业务接口返回进行过滤。更加优雅的方案是建立统一的资源上层类，封装资源过滤方法，所有资源位的资源对象实现该上层类，统一在获取资源逻辑完成过滤能力。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;场景三：新增功能标识参数&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;应用商店业务主要提供用户发现和下载新应用、更新手机已安装的应用。商店有增量更新可以减小更新包体积，因此也叫省流量更新，有效提升用户体验。前期我们使用开源的增量算法，但是发现该算法在部分机器合成拆分包会耗时很长，甚至引起crash。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;于是项目组寻求更加高效拆分算法。类似在这些已有接口的进行功能增强的场景，除了提供新的API或者内部简单通过客户端版本判断进行扩展外，有没有更好的方案呢？因为除了这些方案已知的弊端外，需要从长远考虑，比如前面提到的算法，后续还会不会存在升级的可能，下载接口会不会有更多能力的增强。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;结合上面思考，在原来接口基础上新增&lt;strong&gt;标志参数&lt;/strong&gt;字段，表示该请求发出的客户端支持的能力。为了后续扩展，字段类型为整数值，不只是简单的boolean，服务端通过&lt;strong&gt;位运算完成判断逻辑&lt;/strong&gt;。客户端也摆脱某个功能与版本的强一致性，不用去记录某个版本具有某种能力。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、关于接口设计的更多思考&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;最后补充一些踩过的坑和反思。服务端在提供接口时，不能仅仅关注接口的实现，更多的时候需要关注接口的使用方，他们使用的场景、调用时机等等。否则开发在对接口问题排查、维护花费的时间会比实际开发的耗时要多上好几倍。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;247&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;1）&lt;strong&gt;场景化&lt;/strong&gt;：具体到什么是场景化呢，拿商店客户端的帮助用户检测手机安装的应用版本是否最新的服务举例，检测时机是存在不同的场景的，比如用户启动、用户切换wlan环境、定时检测等。当需要进行精细化分析，哪些请求是有效的，哪些会引起集中请求时，这个时候如果请求上没有场景区分，那么分析将无从下手。所以在与客户端沟通接口设计时，请带上场景这个因素。接口设计上可参考如/app/{scene}/upgrade，定义好各个场景名称，在路径上带上具体的场景，这样对线上不同来源请求量级、问题分析都会有很大好处。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;197&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;2）&lt;strong&gt;鉴权和服务隔离&lt;/strong&gt;：除了场景需要考虑外，接口调用在分配时做好记录和鉴权以及服务隔离。比如商店的部分接口服务不仅提供给客户端，同时也会提供给手机系统应用调用。目前vivo上亿的存量用户体量，这里要十分小心，系统应用的调用量控制不当，并发可比商店本身要大的多。首先前期与服务调用方评估沟通、做好设计，避免出问题。即使在出问题时，也要有机制能够快速发现问题、能够分析出问题的来源，降低问题带来的损失。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;至此上面解决问题的思路，都与具体业务以及背景有一定关系。随着技术不断迭代和发展，在移动端APP页面动态性，目前业界也有了更多高效的技术方案，比如谷歌的Flutter、Weex等。这些技术能够实现灵活扩展，多端统一，性能也能够接近native。不仅减少了客户端发版频次，也减少了服务端兼容性处理成本。目前我们vivo也有团队在使用和实践。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;技术不断更迭，没有最好的方案，只有最适合的方案。开发过程中不仅满足当前实现，更多的是考虑到后续扩展性和可维护性。&lt;strong&gt;开发不能一味追求高端技术，技术最终服务于业务，坚持长期主义，效率至上&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、参考资料&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;1、&lt;/span&gt;&lt;a href=&quot;https://www.infoq.com/news/2013/12/api-versioning/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; data-link-opener-init=&quot;true&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;The Costs of Versioning an API&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;/span&gt;&lt;a href=&quot;https://www.scrumcn.com/agile/scrum/23572.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; data-link-opener-init=&quot;true&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;敏捷开发，火车发布模式&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:49.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e09eef1e0a612a8364e428d0a38783d4</guid>
<title>浅谈 K8s 网络模型 CNI 协议</title>
<link>https://toutiao.io/k/vyje6t3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvasIjZpiaTNIPReJVWEJf7UGpmokI3LL4NbQDb8fO48fYROmYPXUhXFN8IdDqPcI1gA6OfSLsQHxB4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：successwang（王成），腾讯 CSIG 研发工程师，Kubernetes member。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 概述&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入 K8s 的世界，会发现有很多方便扩展的 Interface，包括 CNI, CSI, CRI 等，将这些接口抽象出来，是为了更好的提供开放、扩展、规范等能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;K8s 网络模型采用 CNI(Container Network Interface, 容器网络接口) 协议，只要提供一个标准的接口，就能为同样满足该协议的所有容器平台提供网络功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CNI 是 CoreOS 提出的一种容器网络规范，目前已被 Apache Mesos、Cloud Foundry、Kubernetes、Kurma、rkt 等众多开源项目所采用，同时也是一个 CNCF(Cloud Native Computing Foundation) 项目。可以预见，CNI 将会成为未来容器网络的标准。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文将从 kubelet 启动、Pod 创建/删除、Docker 创建/删除 Container、CNI RPC 调用、容器网络配置等核心流程，对 CNI 实现机制进行了解析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;流程概览如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8169440242057489&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavO0Bwlpu6gGs5W9pevCZl4IbEDyZYGPkKRDc8G8ibBTwxBVIvVeomh9hjuNGdyC84VhteNtO5LlFA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1322&quot;/&gt;&lt;figcaption&gt;K8s-CNI&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本文及后续相关文章都基于 K8s v1.22&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 从网络模型说起&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;容器的网络技术日新月异，经过多年发展，业界逐渐聚焦到 Docker 的 CNM(Container Network Model, 容器网络模型) 和 CoreOS 的 CNI(Container Network Interface, 容器网络接口)。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 CNM 模型&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CNM 是一个被 Docker 提出的规范。现在已经被 Cisco Contiv, Kuryr, Open Virtual Networking (OVN), Project Calico, VMware 和 Weave 这些公司和项目所采纳。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Libnetwork 是 CNM 的原生实现。它为 Docker daemon 和网络驱动程序之间提供了接口。网络控制器负责将驱动和一个网络进行对接。每个驱动程序负责管理它所拥有的网络以及为该网络提供的各种服务，例如 IPAM 等等。由多个驱动支撑的多个网络可以同时并存。原生驱动包括 none, bridge, overlay 以及 MACvlan。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，container runtime 会在不同情况下使用到不同的插件，这带来了复杂性。另外，CNM 需要使用分布式存储系统来保存网络配置信息，例如 etcd。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6458467482292337&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavO0Bwlpu6gGs5W9pevCZl4J8A7afYBL6vWGpI6BFrIYXNlr3fzXeHYZoCOxMg4pqQPIk6azFXybQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1553&quot;/&gt;&lt;figcaption&gt;CNM-model&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Network Sandbox：容器内部的网络栈，包括网络接口、路由表、DNS 等配置的管理。Sandbox 可用 Linux 网络命名空间、FreeBSD Jail 等机制进行实现。一个 Sandbox 可以包含多个 Endpoint。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Endpoint：用于将容器内的 Sandbox 与外部网络相连的网络接口。可以使用 veth pair、Open vSwitch 的内部 port 等技术进行实现。一个 Endpoint 仅能够加入一个 Network。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Network：可以直接互连的 Endpoint 的集合。可以通过 Linux bridge、VLAN 等技术进行实现。一个 Network 包含多个 Endpoint。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 CNI 模型&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CNI 是由 CoreOS 提出的一个容器网络规范。已采纳改规范的包括 Apache Mesos, Cloud Foundry, Kubernetes, Kurma 和 rkt。另外 Contiv Networking, Project Calico 和 Weave 这些项目也为 CNI 提供插件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CNI 对外暴露了从一个网络里面添加和剔除容器的接口。CNI 使用一个 json 配置文件保存网络配置信息。和 CNM 不一样，CNI 不需要一个额外的分布式存储引擎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个容器可以被加入到被不同插件所驱动的多个网络之中。一个网络有自己对应的插件和唯一的名称。CNI 插件需要提供两个命令：ADD 用来将网络接口加入到指定网络，DEL 用来将其移除。这两个接口分别在容器被创建和销毁的时候被调用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6107862248213125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavO0Bwlpu6gGs5W9pevCZl41f0IWw6UAYxXmgQkAFm9Ox24xfsUolltc5LXGgCRftXYlhZIVEn0eQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1539&quot;/&gt;&lt;figcaption&gt;CNI-model&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CNI 支持与第三方 IPAM 的集成，可以用于任何容器 runtime。CNM 从设计上就仅仅支持 Docker。由于 CNI 简单的设计，许多人认为编写 CNI 插件会比编写 CNM 插件来得简单。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. CNI 插件&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CNI 插件是二进制可执行文件，会被 kubelet 调用。启动 kubelet --network-plugin=cni, --cni-conf-dir 指定 networkconfig 配置，默认路径是：/etc/cni/net.d。另外，--cni-bin-dir 指定 plugin 可执行文件路径，默认路径是：/opt/cni/bin。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看一个 CNI Demo：在默认网络配置目录，配置两个 xxx.conf：一个 type: &quot;bridge&quot; 网桥，另一个 type: &quot;loopback&quot; 回环网卡。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ mkdir -p /etc/cni/net.d&lt;br/&gt;$ cat &amp;gt;/etc/cni/net.d/10-mynet.conf &amp;lt;&amp;lt;EOF&lt;br/&gt;{&lt;br/&gt; &lt;span&gt;&quot;cniVersion&quot;&lt;/span&gt;: &lt;span&gt;&quot;0.2.0&quot;&lt;/span&gt;, // CNI Spec 版本&lt;br/&gt; &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;mynet&quot;&lt;/span&gt;, // 自定义名称&lt;br/&gt; &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;bridge&quot;&lt;/span&gt;, // 插件类型 bridge&lt;br/&gt; &lt;span&gt;&quot;bridge&quot;&lt;/span&gt;: &lt;span&gt;&quot;cni0&quot;&lt;/span&gt;, // 网桥名称&lt;br/&gt; &lt;span&gt;&quot;isGateway&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;, // 是否作为网关&lt;br/&gt; &lt;span&gt;&quot;ipMasq&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;, // 是否设置 IP 伪装&lt;br/&gt; &lt;span&gt;&quot;ipam&quot;&lt;/span&gt;: {&lt;br/&gt;  &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;host-local&quot;&lt;/span&gt;, // IPAM 类型 host-local&lt;br/&gt;  &lt;span&gt;&quot;subnet&quot;&lt;/span&gt;: &lt;span&gt;&quot;10.22.0.0/16&quot;&lt;/span&gt;, // 子网段&lt;br/&gt;  &lt;span&gt;&quot;routes&quot;&lt;/span&gt;: [&lt;br/&gt;   { &lt;span&gt;&quot;dst&quot;&lt;/span&gt;: &lt;span&gt;&quot;0.0.0.0/0&quot;&lt;/span&gt; } // 目标路由段&lt;br/&gt;  ]&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;EOF&lt;br/&gt;$ cat &amp;gt;/etc/cni/net.d/99-loopback.conf &amp;lt;&amp;lt;EOF&lt;br/&gt;{&lt;br/&gt; &lt;span&gt;&quot;cniVersion&quot;&lt;/span&gt;: &lt;span&gt;&quot;0.2.0&quot;&lt;/span&gt;, // CNI Spec 版本&lt;br/&gt; &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;lo&quot;&lt;/span&gt;, // 自定义名称&lt;br/&gt; &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;loopback&quot;&lt;/span&gt; // 插件类型 loopback&lt;br/&gt;}&lt;br/&gt;EOF&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CNI 插件可分为三类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Main 插件：用来创建具体网络设备的二进制文件。比如，bridge、ipvlan、loopback、macvlan、ptp(point-to-point, Veth Pair 设备)，以及 vlan。如开源的 Flannel、Weave 等项目，都属于 bridge 类型的 CNI 插件，在具体的实现中，它们往往会调用 bridge 这个二进制文件。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Meta 插件：由 CNI 社区维护的内置 CNI 插件，不能作为独立的插件使用，需要调用其他插件。tuning，是一个通过 sysctl 调整网络设备参数的二进制文件；portmap，是一个通过 iptables 配置端口映射的二进制文件；bandwidth，是一个使用 Token Bucket Filter (TBF) 来进行限流的二进制文件。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;IPAM 插件：IP Address Management，它是负责分配 IP 地址的二进制文件。比如，dhcp，这个文件会向 DHCP 服务器发起请求；host-local，则会使用预先配置的 IP 地址段来进行分配。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9606164383561644&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavO0Bwlpu6gGs5W9pevCZl4NibBG2hrBUianWErd5UrAVNHGbNZgnWzSRUUwd4SoDWDQA60uSytls2Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;584&quot;/&gt;&lt;figcaption&gt;K8s-CNI-plugins&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. kubelet 启动&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;kubelet 在 Node 节点上负责 Pod 的创建、销毁、监控上报等核心流程，通过 Cobra 命令行解析参数启动二进制可执行文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动入口如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// kubernetes/cmd/kubelet/kubelet.go&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; command := app.NewKubeletCommand()&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// kubelet uses a config file and does its own special&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// parsing of flags and that config file. It initializes&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// logging after it is done with that. Therefore it does&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// not use cli.Run like other, simpler commands.&lt;/span&gt;&lt;br/&gt; code := run(command)&lt;br/&gt; os.Exit(code)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着，一路往下进行初始化：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;cmd -&amp;gt; Run -&amp;gt; PreInitRuntimeService -&amp;gt; RunKubelet -&amp;gt; createAndInitKubelet -&amp;gt; startKubelet -&amp;gt; Run&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 PreInitRuntimeService 会进一步初始化 dockershim，一方面探测环境中的网络配置文件(默认路径为：/etc/cni/net.d/*.conf/.conflist/.json)，进行 CNI 网络配置；另一方面启动 gRPC docker server 监听 client 请求，进行具体的操作如 PodSandbox、Container 创建与删除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当监听到 Pod 事件时，进行对应 Pod 的创建或删除，流程如下：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Run -&amp;gt; syncLoop -&amp;gt; SyncPodCreate/Kill -&amp;gt; UpdatePod -&amp;gt; syncPod/syncTerminatingPod -&amp;gt; dockershim gRPC -&amp;gt; Pod running/teminated&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. Pod 创建/删除&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;K8s 中 Pod 的调谐采用 channel 生产者-消费者模型实现，具体通过 PLEG(Pod Lifecycle Event Generator) 进行 Pod 生命周期事件管理。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// kubernetes/pkg/kubelet/pleg/pleg.go&lt;br/&gt;// 通过 PLEG 进行 Pod 生命周期事件管理&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; PodLifecycleEventGenerator interface {&lt;br/&gt; Start() // 通过 relist 获取所有 Pods 并计算事件类型&lt;br/&gt; Watch() chan *PodLifecycleEvent // 监听 eventChannel，传递给下游消费者&lt;br/&gt; Healthy() (bool, error)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pod 事件生产者 - 相关代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// kubernetes/pkg/kubelet/pleg/generic.go&lt;br/&gt;// 生产者：获取所有 Pods 列表，计算出对应的事件类型，进行 Sync&lt;br/&gt;func (g *GenericPLEG) &lt;span&gt;&lt;span&gt;relist&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt; klog.V(5).InfoS(&lt;span&gt;&quot;GenericPLEG: Relisting&quot;&lt;/span&gt;)&lt;br/&gt; ...&lt;br/&gt; // 获取当前所有 Pods 列表&lt;br/&gt; podList, err := g.runtime.GetPods(&lt;span&gt;true&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;  klog.ErrorS(err, &lt;span&gt;&quot;GenericPLEG: Unable to retrieve pods&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; pid := range g.podRecords {&lt;br/&gt;  allContainers := getContainersFromPods(oldPod, pod)&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; _, container := range allContainers {&lt;br/&gt;&lt;br/&gt;   // 计算事件类型：running/exited/unknown/non-existent&lt;br/&gt;   events := computeEvents(oldPod, pod, &amp;amp;container.ID)&lt;br/&gt;   &lt;span&gt;for&lt;/span&gt; _, e := range events {&lt;br/&gt;    updateEvents(eventsByPodID, e)&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; // 遍历所有事件&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; pid, events := range eventsByPodID {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; i := range events {&lt;br/&gt;   // Filter out events that are not reliable and no other components use yet.&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; events[i].Type == ContainerChanged {&lt;br/&gt;    &lt;span&gt;continue&lt;/span&gt;&lt;br/&gt;   }&lt;br/&gt;   select {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; g.eventChannel &amp;lt;- events[i]: // 生产者：发送到事件 channel，对应监听的 goroutine 会消费&lt;br/&gt;   default:&lt;br/&gt;    metrics.PLEGDiscardEvents.Inc()&lt;br/&gt;    klog.ErrorS(nil, &lt;span&gt;&quot;Event channel is full, discard this relist() cycle event&quot;&lt;/span&gt;)&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt; ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pod 事件消费者 - 相关代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// kubernetes/pkg/kubelet/kubelet.go&lt;br/&gt;// 消费者：根据 channel 获取的各类事件，进行 Pod Sync&lt;br/&gt;func (kl *Kubelet) syncLoopIteration(configCh &amp;lt;-chan kubetypes.PodUpdate, handler SyncHandler,&lt;br/&gt; syncCh &amp;lt;-chan time.Time, housekeepingCh &amp;lt;-chan time.Time, plegCh &amp;lt;-chan *pleg.PodLifecycleEvent) bool {&lt;br/&gt; select {&lt;br/&gt; ...&lt;br/&gt; // 消费者：监听 plegCh 的事件&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; e := &amp;lt;-plegCh:&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; e.Type == pleg.ContainerStarted {&lt;br/&gt;   // 更新容器的最后启动时间&lt;br/&gt;   kl.lastContainerStartedTime.Add(e.ID, time.Now())&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; isSyncPodWorthy(e) {&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; pod, ok := kl.podManager.GetPodByUID(e.ID); ok {&lt;br/&gt;    klog.V(2).InfoS(&lt;span&gt;&quot;SyncLoop (PLEG): event for pod&quot;&lt;/span&gt;, &lt;span&gt;&quot;pod&quot;&lt;/span&gt;, klog.KObj(pod), &lt;span&gt;&quot;event&quot;&lt;/span&gt;, e)&lt;br/&gt;&lt;br/&gt;    // 进行相关 Pod 事件的 Sync&lt;br/&gt;    handler.HandlePodSyncs([]*v1.Pod{pod})&lt;br/&gt;   } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    // If the pod no longer exists, ignore the event.&lt;br/&gt;    klog.V(4).InfoS(&lt;span&gt;&quot;SyncLoop (PLEG): pod does not exist, ignore irrelevant event&quot;&lt;/span&gt;, &lt;span&gt;&quot;event&quot;&lt;/span&gt;, e)&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  // 容器销毁事件处理：清除 Pod 内相关 Container&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; e.Type == pleg.ContainerDied {&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; containerID, ok := e.Data.(string); ok {&lt;br/&gt;    kl.cleanUpContainersInPod(e.ID, containerID)&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt;  ...&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. Docker 忙起来&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过上一步 Pod 事件的生产与消费传递，PodWorkers 会将事件转化为 gRPC client 请求，然后调用 dockershim gRPC server，进行 PodSandbox、infra-container(也叫 pause 容器) 的创建。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着，会调用 CNI 接口 SetUpPod 进行相关网络配置与启动，此时建立起来的容器网络，就可以直接用于之后创建的业务容器如 initContainers、containers 进行共享网络。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相关代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// kubernetes/pkg/kubelet/dockershim/docker_sandbox.go&lt;br/&gt;// 启动运行 Pod Sandbox&lt;br/&gt;func (ds *dockerService) RunPodSandbox(ctx context.Context, r *runtimeapi.RunPodSandboxRequest) (*runtimeapi.RunPodSandboxResponse, error) {&lt;br/&gt; config := r.GetConfig()&lt;br/&gt;&lt;br/&gt; // Step 1: 拉取基础镜像(infra-container: k8s.gcr.io/pause:3.6)&lt;br/&gt; image := defaultSandboxImage&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err := ensureSandboxImageExists(ds.client, image); err != nil {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; nil, err&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; // Step 2: 创建 Sandbox 容器&lt;br/&gt; createConfig, err := ds.makeSandboxDockerConfig(config, image)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; nil, fmt.Errorf(&lt;span&gt;&quot;failed to make sandbox docker config for pod %q: %v&quot;&lt;/span&gt;, config.Metadata.Name, err)&lt;br/&gt; }&lt;br/&gt; createResp, err := ds.client.CreateContainer(*createConfig)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;  createResp, err = recoverFromCreationConflictIfNeeded(ds.client, *createConfig, err)&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; // Step 3: 创建 Sandbox 检查点(用于记录当前执行到哪一步了)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err = ds.checkpointManager.CreateCheckpoint(createResp.ID, constructPodSandboxCheckpoint(config)); err != nil {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; nil, err&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; // Step 4: 启动 Sandbox 容器&lt;br/&gt; err = ds.client.StartContainer(createResp.ID)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; nil, fmt.Errorf(&lt;span&gt;&quot;failed to start sandbox container for pod %q: %v&quot;&lt;/span&gt;, config.Metadata.Name, err)&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; // Step 5: 对 Sandbox 容器进行网络配置&lt;br/&gt; err = ds.network.SetUpPod(config.GetMetadata().Namespace, config.GetMetadata().Name, cID, config.Annotations, networkOptions)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;  // 如果网络配置失败，则回滚：删除建立起来的 Pod 网络&lt;br/&gt;  err = ds.network.TearDownPod(config.GetMetadata().Namespace, config.GetMetadata().Name, cID)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;   errList = append(errList, fmt.Errorf(&lt;span&gt;&quot;failed to clean up sandbox container %q network for pod %q: %v&quot;&lt;/span&gt;, createResp.ID, config.Metadata.Name, err))&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  // 停止容器运行&lt;br/&gt;  err = ds.client.StopContainer(createResp.ID, defaultSandboxGracePeriod)&lt;br/&gt;  ...&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; resp, nil&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;流程图小结如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2427184466019416&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavO0Bwlpu6gGs5W9pevCZl4wWrSog5FBic8bGgQic0H08HRygENAjKGGINzmOIVp697n8gwHiclhdicwA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;721&quot;/&gt;&lt;figcaption&gt;K8s-CNI-flow&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;根据社区讨论&lt;a target=&quot;_blank&quot; href=&quot;https://kubernetes.io/blog/2020/12/02/dockershim-faq&quot; textvalue=&quot;‍Dockershim Deprecation FAQ‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;Dockershim Deprecation FAQ&lt;/a&gt;，dockershim 相关代码将会在 2021 底左右移出 K8s 主干代码，之后将统一使用 CRI(Container Runtime Interface, 容器运行时接口) 进行容器生命周期管理。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. CNI RPC 接口&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CNI 标准规范接口，包含了添加、检查、验证、删除网络等接口，并提供了按列表或单个进行网络配置的两组接口，方便用户灵活使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CNI 从容器管理系统(dockershim) 处获取运行时信息(Container Runtime)，包括 network namespace 的路径，容器 ID 以及 network interface name，再从容器网络的配置文件中加载网络配置信息，再将这些信息传递给对应的插件，由插件进行具体的网络配置工作，并将配置的结果再返回到容器管理系统中。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.815668202764977&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavO0Bwlpu6gGs5W9pevCZl4SYibzaiaFLJ6Hsia1If3Oqf8v6zHLNJmg2qCpxLgbzFR6kw9KsrHXfGyg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;651&quot;/&gt;&lt;figcaption&gt;K8s-CNI-RPC&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户若要编写自己的 CNI 插件，则可专注于实现图中这些 RPC 接口即可，然后可以与官方维护的三类基础插件自由组合，形成多种多样的容器网络解决方案。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. 小结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文通过分析 K8s 中 kubelet 启动、Pod 创建/删除、Docker 创建/删除 Container、CNI RPC 调用、容器网络配置等核心流程，对 CNI 实现机制进行了解析，通过源码、图文方式说明了相关流程逻辑，以期更好的理解 K8s CNI 运行流程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;K8s 网络模型采用 CNI(Container Network Interface, 容器网络接口) 协议，只要提供一个标准的接口，就能为同样满足该协议的所有容器平台提供网络功能。CNI 目前已被众多开源项目所采用，同时也是一个 CNCF(Cloud Native Computing Foundation) 项目。可以预见，CNI 将会成为未来容器网络的标准。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;a href=&quot;https://github.com/containernetworking/cni/blob/master/SPEC.md&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;CNI 规范&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Kubernetes 源码&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a href=&quot;https://www.cni.dev/plugins/current/&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;CNI 插件介绍&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a href=&quot;https://github.com/containernetworking/plugins&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;CNI 插件源码&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://thenewstack.io/container-networking-landscape-cni-coreos-cnm-docker/&quot; textvalue=&quot;CNI and CNM model&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;CNI and CNM model&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span/&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;最近热文：&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&amp;amp;mid=2649765817&amp;amp;idx=1&amp;amp;sn=2eeb275c0200f6469c0b22c2eca62d08&amp;amp;chksm=becca4c289bb2dd4b3972c3a830c1c76d7b82e1a8d09edb6ce3a7f350d0ab1e663e320765b55&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;提速 30%！腾讯TQUIC 网络传输协议&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;提速 30%！腾讯TQUIC 网络传输协议&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&amp;amp;mid=2649765666&amp;amp;idx=1&amp;amp;sn=d1e01a47c4b5cd394f76c6fdc2b261f9&amp;amp;chksm=becca45989bb2d4f4a1249d88c4d18d93c84c05bd60e320a77288a221cf56e685e733c324eb7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;大牛书单 | 消息队列方向的好书&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;大牛书单 | 消息队列方向的好书&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&amp;amp;mid=2649765647&amp;amp;idx=1&amp;amp;sn=633ee3fbe564dfb30bf215c4b56c7288&amp;amp;chksm=becca47489bb2d6225a003f3a8724de976aa72d0ff764328435d42583014bbc2b12228853d19&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;微信 ClickHouse 实时数仓的最佳实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;微信 ClickHouse 实时数仓的最佳实践&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;腾讯程序员视频号直播&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;2.3342592592592593&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvasfj9ibmaWydKdiagdarvrzZeabwHsVNNO3iaX4OUib0K4bhfaeqczIDicbzdCTkIANob01n9Os59NZAog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_live_iframe&quot; data-pluginname=&quot;videosnap&quot; data-headimgurl=&quot;https://wx.qlogo.cn/finderhead/I7awtksbibjQe7RZAy84xESOBAfIZ8xQ9ApXt4uTe8po/0&quot; data-username=&quot;v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder&quot; data-nickname=&quot;腾讯程序员&quot; data-desc=&quot;将在12月01日 19:30 直播&quot; data-intro=&quot;对谈鹅厂T10女工程师：从0到1转程序员，兼顾技术和爱好，一直做自己喜欢的事&quot; data-noticeid=&quot;finderlivenotice-v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder-1638242262850720-131098678&quot; data-type=&quot;live&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ee7f5f08d1ee5cfa44d407f9f032318f</guid>
<title>京东秒杀架构升级优化实践</title>
<link>https://toutiao.io/k/4cxy94p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;107046&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;前言&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;京东秒杀是京东最大的营销频道，近年来随着业务的高速发展，频道商品数量和用户流量都呈现出迅猛增长的态势。同时业务方规划未来频道商品数量会增加5至10倍，对商品池扩容诉求较为强烈，这对我们现有的系统架构提出了挑战。&lt;/p&gt;&lt;p&gt;为了应对商品数量激增引起的风险，秒杀后台组在年初成立了秒杀商品池扩容技术优化专项，在618前按计划完成了千万级商品池扩容的架构升级。本文主要介绍秒杀商品池扩容专项的优化经验。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;107046&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;背景&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;京东秒杀频道业务主要包括两部分，一部分是频道核心服务，即直接面向终端用户提供频道服务；另一部分是维护秒杀商品池数据，为商详、购物车等多端提供秒杀商品读服务，以展示“京东秒杀”的促销氛围标签，我们称为秒杀商品打标服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8852459016393442&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsGj3CrOxtfibj9pxqzeLuiayKSiaUk1ZSdNBS19DLtfPkZB4yBIrpW62jqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1098&quot;/&gt;&lt;/p&gt;&lt;p&gt;图1. 京东秒杀频道业务&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;秒杀系统是一个高并发大流量系统，使用缓存技术来提高系统性能。在频道核心服务的历史业务迭代过程中，采用了在内存中全量缓存商品池数据的缓存方案，这是因为频道业务中存在全量商品按照多维度排序的诉求，同时在频道发展初期商品数量不多，采用全量缓存的方式内存压力不大，开发成本较低。由于秒杀商品存在时促销、库存有限的特点，对数据更新的实时性要求较高，我们通过ZK通知的方式实现商品数据更新。&lt;/p&gt;&lt;p&gt;原系统架构如图2所示，秒杀CMS系统在商品录入或更新时，以活动的维度将商品数据推动到JIMDB(京东内部分布式缓存与高速键值存储服务，类似于Redis)中，同时通过ZooKeeper发送通知。秒杀SOA系统监听通知后从JIMDB中获取最新的数据，更新本地缓存，以提供频道核心服务和商品打标服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2537313432835821&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsG9f9EGLqPqre1x1ia6MWeKiaC8IQrawVHCTTsaHMWcXqdWoicicnFJVzZibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1608&quot;/&gt;&lt;/p&gt;&lt;p&gt;图2. 京东秒杀原系统架构图&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;107046&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;问题分析&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在以往大促期间，当商品池数量激增时，观察到系统的堆内存消耗过快，同时Minor GC垃圾回收效果有限，Minor GC回收后堆内存低点不断抬高，堆内存呈持续增长的态势，并且会规律性地定期猛增。Full GC较为频繁，对CPU利用率的影响较大，接口性能毛刺现象严重。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.45125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsGNPtIwp96kYoU6WOoibLkzLTJoWvVXlwp4FeicAicFbImzER9J3WwtojGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;图3. 系统异常监控&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过JVM堆内存变化图可以看到：&lt;/p&gt;&lt;p&gt;1. 堆空间增长很快，且Minor GC无法回收新增的堆空间。&lt;/p&gt;&lt;p&gt;2. 堆空间呈现有规律的上升，且会定期猛增，推测和定时任务有关。&lt;/p&gt;&lt;p&gt;3. Full GC后，内存回收率高，排除内存泄漏。&lt;/p&gt;&lt;p&gt;4. Full GC对CPU利用率影响较大。&lt;/p&gt;&lt;p&gt;频繁GC对系统的稳定性和接口的性能造成严重的影响分析堆对象增长情况，通过 jmap -histo 指令在发生Full GC 前后打印JVM堆中的对象，如图4、图5所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7360912981455064&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsGEGClAhtVyJgwpicdFo1y3jvn4LXDib1snP70V5QExcoSydJX6icTxcL5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1402&quot;/&gt;&lt;/p&gt;&lt;p&gt;图4. 发生Full GC前堆内存对象&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6839080459770115&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsGIv5tOia0cCrBibcrJDd6jOrnCyyzaGe4x4Jf2ibvA1Aia5ClxEbl01doZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1392&quot;/&gt;&lt;/p&gt;&lt;p&gt;图5. 发生Full GC后堆内存对象&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从Full GC前后堆中对象分布情况分析，以品类秒杀为例，在Full GC 后堆中不到100万商品对象，占内存125M左右，和品类秒杀实际有效商品数量大致相当， String对象共占约385M左右。而在发生Full GC前，堆中品类秒杀商品数量达到了接近500万，占用内存达到了700M, 另外String对象占用内存达到1.2G。&lt;/p&gt;&lt;p&gt;结合系统架构分析，可以确定是在商品的覆盖更新过程中，旧对象未被回收而不断进入老年代，老年代内存占用越来越高，最终导致堆内存不足而产生Full GC。堆对象中的String对象也是这种更新方式的副产品，这是因为商品数据在JIMDB中以String方式存储，在更新时会从JIMDB中拉取到本地反序列化后得到对象列表，可以从图6所示问题代码中看到产生大String对象的原因。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2839506172839506&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsG4MicVbToApMnpCAW9At2ibJ0otSjQhfZmwQBiaWb7MmHdanvGibByWewibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1620&quot;/&gt;&lt;/p&gt;&lt;p&gt;图6. 问题代码&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于上述的全量更新场景，旧对象和临时产生的String对象满足垃圾回收的条件，为什么没有在Minor GC阶段被回收？我们知道大多数情况下，对象在新生代Eden区中分配，对象进入老年代有以下几种情况：&lt;/p&gt;&lt;p&gt;1. 大对象直接进入年老代：大对象即需要大量连续内存空间的Java对象，如长字符串及数组。大对象会导致内存剩余空间足够时，就提前触发垃圾收集以获取足够的连续空间来安置，同时大对象的频繁复制也会影响性能。虚拟机提供了一个-XX:PretenureSizeThreshold参数，使大于该阈值的对象直接在老年代分配。为避免临时String对象直接进入老年代的情况，我们显式关闭了该功能。&lt;/p&gt;&lt;p&gt;2. 长期存活的对象将进入年老代：虚拟机给每个对象定义了一个对象年龄计数器，在对象在Eden创建并经过第一次Minor GC后仍然存活，并能被Suivivor容纳的话，将会被移动到Survivor空间，并对象年龄设置为1。每经历一次Minor GC，年龄增加1岁，当到达阈值时（可以通过参数-XX: MaxTenuringThreshold设置，CMS垃圾回收器默认值为6），将会晋升老年代。上述分析情况，临时String对象不会存活过6次Minor GC。&lt;/p&gt;&lt;p&gt;3. 动态对象年龄判定：为了更好地适应不同程序内存状况，虚拟机并不硬性要求对象年龄达到MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中小于等于某个年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入年老代。&lt;/p&gt;&lt;p&gt;通过上述分析，我们发现临时String对象最有可能触发了动态对象年龄判定机制而进入老年代。打印虚拟机GC信息，并添加-XX: +PrintTenuringDistribution 参数来打印发生GC时新生代的对象年龄信息，得到图7所示GC日志信息：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36488169364881695&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsGDiahlqPDl9FuTa7pQYGiascudwNSovJMVkSJPKB7DtzzvBrF7ibQ5bxXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1606&quot;/&gt;&lt;/p&gt;&lt;p&gt;图7. GC日志&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从GC日志可以看到，Survivor空间大小为358M , Survivor区的目标使用率默认是50%，Desired Survivor size 是179M，age &amp;lt;= 2的对象大小总和为269M，因此虽然设定的晋升阈值是6，虚拟机动态计算晋升阈值为2，最终导致age大于等于2的对象都进入老年代。&lt;/p&gt;&lt;p&gt;我们尝试从优化JVM参数的方式解决问题，效果并不理想。做过的尝试有：&lt;/p&gt;&lt;p&gt;1. 增大年轻代的空间来减少对象进入老年代，结果适得其反，STW更加频繁，CPU利用率波动也更大。&lt;/p&gt;&lt;p&gt;2. 改用G1垃圾收集器，效果不明显，CPU利用率波动也更大。&lt;/p&gt;&lt;p&gt;3. 显式设置晋升老年代的阈值（MaxTenuringThreshold），试图推迟对象进入老年代的速度，无任何效果。&lt;/p&gt;&lt;p&gt;上述问题分析的结论对我们的启示是：如果在新生代中频繁产生朝生夕死的大对象，会触发虚拟机的动态对象年龄判定机制，降低对象进入老年代的门槛，导致堆内存增长过快。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;107046&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;优化方案&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;双缓存区定时散列更新&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过上面的分析可以发现，为了防止堆内存增长过快，需要控制商品数据更新的粒度和频次。原有的商品更新方案是商品数据按照活动的维度全量覆盖更新，每个商品的状态变化都会触发更新操作。我们希望数据更新能控制在更小的范围，同时能够控制数据更新的频率，最终设计出双缓存区定时散列更新方案，如图8所示。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6857923497267759&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsGALrnt8aiaTF2zvhoUmNnHWH1bZbrrlPf5icPh72GEDXJmDibcrDhzgaNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1464&quot;/&gt;&lt;/p&gt;&lt;p&gt;图8. 双缓存区定时散列更新示意图&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该方案的实现是将活动下的商品以SKU维度散列到不同的桶中，更新的操作以桶的粒度进行。同时为了控制数据更新的频率，我们在SOA端设计了双缓存区定时切量的方式。在CMS商品数据更新时，会映射到需要更新的桶，并实时通知SOA端；在SOA端收到ZK通知后，会在读缓存区标记需要更新的桶，但不会实时的更新数据。在达到定时时间后，会自动切换读写缓存区，此时会读取读缓存区中标记的待更新桶，从JIMDB中获取桶对应的商品列表，完成数据的细粒度分段更新。&lt;/p&gt;&lt;p&gt;该方案散列份数和定时时间可以根据具体业务情况进行调整，在性能和实时性上取得平衡，在上线后取得了较好的优化效果。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;span data-num=&quot;2&quot;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;引入本地LRU缓存&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;双缓存区定时散列更新的方案虽然在系统性能上得到了提升，但依然无法支持千万级商品的扩容。为了彻底摆脱机器内存对商品池容量的限制，我们启动了秒杀架构的全面升级，核心思路是引入本地LRU缓存组件，实现冷数据淘汰，以控制内存中缓存商品的总数量在安全区间。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;系统拆分&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;原系统存在的问题是，频道核心服务和商品打标服务共用相同的基础数据，存在系统耦合的问题。从商品池角度分析，频道核心服务商品池是秒杀商品池的子集。从业务角度分析，频道核心服务业务逻辑复杂，调用链路长，响应时间长，商品打标服务逻辑简单，调用链路短，响应时间短。将频道核心服务和商品打标服务进行拆分，独立部署，实现资源隔离，这样可以根据业务特点做针对性优化。频道核心服务可以减少内存中商品缓存的数量，商品打标服务可以升级商品缓存方案，另外也可以规避架构升级过程中对频道核心服务的影响。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.24689826302729528&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsGUZWWibAjictPMQltwYFT4IDQia25B5NcFLgdZUTkWmiaEdecgoBBr45J6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1612&quot;/&gt;&lt;/p&gt;&lt;p&gt;图9. 系统拆分&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;缓存方案优化&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;频道核心服务历史逻辑复杂，且直接面向终端用户，升级难度大。在扩容专项一期中的主要优化点是拆分出频道核心服务商品池，去除非频道展示商品，以减少商品缓存数量。一期优化主要聚焦于秒杀打标服务的缓存方案升级。在原有的系统架构中秒杀商品池全量缓存在内存中，这会导致商品数量激增时，JVM堆内存资源紧张，商品池的容量受到限制，且无法水平扩容。商品以活动的维度进行存储和更新，会导致大key的问题，在进行覆盖更新时会在内存中产生临时的大对象，不利于JVM垃圾回收表现。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.24347826086956523&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsGYVHPicsicTR23m4fLo23icIeHNAfcuXYIFVC2hE6H8Rt1Zqm5moo4p8pA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1610&quot;/&gt;&lt;/p&gt;&lt;p&gt;图10. 缓存方案升级&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于拆封后的商品打标服务，缓存方案优化的总体思路是实现冷热数据的拆分。升级后的商品打标服务不再使用本地全量缓存，而是使用JIMDB全量缓存+本地LRU缓存组件的方式。对缓存组件的要求是在缓存数据达到预设商品数量上限时，实现冷数据的清退，同时具有较高的缓存命中率和读写性能。在对比常用的缓存框架Caffeine和 Guava Cache后最终采用Caffeine缓存，其优势有:&lt;/p&gt;&lt;p&gt;1. 性能更优。Caffeine的读写性能显著优于Guava， 这是由于Guava 中读写操作夹杂着过期时间的处理，一次 put 操作中有可能会触发淘汰操作，所以其读写性能会受到一定影响，而 Caffeine 对这些事件的操作是异步的，将事件提交至队列，通过默认的 ForkJoinPool.commonPool()或自己配置的线程池，进行取队列操作，再进行异步淘汰、过期操作。&lt;/p&gt;&lt;p&gt;2. 高命中率，低内存占用。Guava 使用分段LRU算法，而Caffeine 使用了一种结合 LRU、LFU 优点的算法：W-TinyLFU，可以使用较少的资源来记录访问频次，同时能够解决稀疏突发访问元素的问题。&lt;/p&gt;&lt;p&gt;升级后的架构图如图11所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4939759036144578&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsGx8p5Yg0XQGbJRbzjUPic3ZHm2LlFCrqG1RfMQetbyppEV1ONzVTEerg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1660&quot;/&gt;&lt;/p&gt;&lt;p&gt;图11. 升级后架构图&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;频道核心服务和商品打标服务独立部署，资源隔离。秒杀CMS 在商品录入和更新时，以SKU维度写入JIMDB中组成全量秒杀商品池。商品打标服务通过Caffeine 缓存的方式，设置写入写入30s过期，最大缓存200w商品数据，实现热数据缓存，过期数据和冷数据的淘汰。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;span data-num=&quot;3&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;引入布隆过滤器&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在非秒杀SKU查询处理上，为了避免缓存穿透问题(即单个无效商品的高频次查询，如果本地缓存中没有则每次请求都会访问到JIMDB)，我们对于非秒杀商品的查询结果，在本地缓存中存储一个空值标识，避免无效SKU请求每次都访问到JIMDB。商详、购物车等渠道商品池数量比秒杀商品池高几个数量级，秒杀查询服务请求SKU中存在大量的非秒杀商品，这会导致本地缓存的命中率降低，同时带来缓存雪崩的风险。&lt;/p&gt;&lt;p&gt;为了拦截大量非秒杀SKU的请求，我们引入过滤器机制。在本地过滤器的选择上，我们尝试使用所有有效商品SkuId组成的Set集合来生成本地过滤器，上线后观察到本地过滤器数据更新时会产生性能波动。分析发现这种方式空间复杂度高，内存占用比较高。过滤器优化为布隆过滤器后，内存占用降低，性能得到进一步提升。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;107046&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;优化效果&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在完成架构升级后，经过单机压测、灰度验证、灰度上线、全量压测等过程严格验证了新系统的性能和结果准确性，在618大促前新系统全量平稳上线。从近年来大促期间系统表现来看，优化效果显著，如图12、图13所示，主要体现在以下几个方面。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.34844868735083534&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenFic3g6ESJic2ywf8OtQEPhXMPliadOrVcHicUUIwSnIkfIG7lzibCmjRLZKlUBffyohAic6dSicoWOysIceQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1676&quot;/&gt;&lt;/p&gt;&lt;p&gt;图12. 大促性能表现对比&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1. 业务支撑：秒杀商品池数量持续增长，由于架构的调整全量商品缓存在JIMDB，新系统支持水平扩容，后续可支持更高数量级的商品，满足业务的长期规划。&lt;/p&gt;&lt;p&gt;2. 性能优化：大促期间打标服务的接口tp999持续下降，618大促接口性能提升90%，同时从接口性能对比上看，接口性能的毛刺现象得到解决。&lt;/p&gt;&lt;p&gt;3. 稳定性提升：GC频率持续下降，系统稳定性得到提高。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2972636815920398&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9C6P8cuBsEcQDrD9UfMtsGwGZicAaPaH5RPqAwoLjLNh9AX59YqicxyMoicPibDfPMCN5oEPxvQwEfhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1608&quot;/&gt;&lt;/p&gt;&lt;p&gt;图13. 接口性能监控对比&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;107046&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;总结&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本次秒杀商品池扩容优化专项通过优化商品更新方式、系统拆分、优化缓存方案等方式，实现了系统架构升级，提升了频道的商品容量和性能，达到了预设目标。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>345636217150c73471e95635d73ebf49</guid>
<title>大型网站核心架构要素</title>
<link>https://toutiao.io/k/z9bqh7u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;container app-preview post-body&quot;&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;p&gt;架构一词，通俗的说法是“最高层次的规划，难以改变的决定”，这些规划和决定奠定了事物未来发展的方向和最终的蓝图。&lt;/p&gt;

&lt;p&gt;一般来说，除了系统功能需求外，软件架构还要关注性能、可用性、伸缩性、扩展性和安全性这5个架构要素。&lt;/p&gt;

&lt;p&gt;谈一下两个容易混淆的概念。伸缩性和扩展性。&lt;/p&gt;

&lt;p&gt;伸缩性是指大型网站需要面对大量用户的高并发访问和存储海量数据，不可能只用一台服务器就处理全部用户请求，存储全部数据。网站这集群方式将多台服务器组成一个整体共同提供服务。&lt;/p&gt;

&lt;p&gt;所谓伸缩性是指通过不断向集群中加入服务器的手段来缓解不断上升的用户并发访问压力和不断增长的数据存储需求。举例说明，对于应用服务器集群、数据库集群等。&lt;/p&gt;

&lt;p&gt;扩展性是直接关注网站的功能需求，比如衡量网站架构性能好坏的主要标准就是在网站增加新的业务产品时，是否可以实现对现有产品透明无影响，不需要任何改动或者很少改动既有业务功能&lt;/p&gt;

&lt;p&gt;就可以上线新产品。扩展性的主要手段是事伯驱动架构和分布式服务。事件驱动架构在网站通常利用消息队列实现，将用户请求和其他业务事件构造成消息发布到消息队列，消息处理者作为消费者&lt;/p&gt;

&lt;p&gt;从消息队列中获取消息进行处理。通过这种方式将消息和消息处理分享开来，可以透明地增加新的消息生产者任务或者新的消息消费者任务。&lt;/p&gt;

&lt;p&gt;分布式服务则是将业务和可复用服务分离开来，通过分布式服务框架调用。新增产品可以通过调用可复用的服务实现自身的业务逻辑，而对现有产品没有任何影响。可复用服务升级变更的时候，也可以通过提供&lt;/p&gt;

&lt;p&gt;多版本服务对应用实现透明升级，不需要强制应用同步变更。&lt;/p&gt;

&lt;p&gt;【如果文字看累了，可b站搜索“沙皮狗2021”，用听的方式领略知识的魅力】&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aaf5dbf6b8926affe35993a359e70411</guid>
<title>用 Markdown 写一本自己的电子书（一）：手动篇</title>
<link>https://toutiao.io/k/vi8tv0b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
        

&lt;p&gt;不知道大家平时有没有阅读电子书的习惯，这里指的并不是 &lt;code&gt;.txt&lt;/code&gt; 的文本文档，而是通常带有精美封面、便捷目录、图文并茂的 &lt;code&gt;.epub&lt;/code&gt; 电子书。它是怎样实现这些效果的呢？我们能不能把自己平时用 Markdown 写的技术笔记、博客文章做成一本属于自己的电子书呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;/&gt;

&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;/&gt;背景&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;EPUB 格式是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实做 Web 开发的同学，如果把 &lt;code&gt;.epub&lt;/code&gt; 文件通过 zip 打开后就会发现，其实它并不神秘，反而相当开放直观和熟悉──其内在就是一堆 &lt;strong&gt;xhtml 页面、css 样式、图片&lt;/strong&gt;，以及描述这些资源关系的 &lt;strong&gt;xml 配置信息&lt;/strong&gt;，把它们一起打个 zip 包就是 &lt;code&gt;.epub&lt;/code&gt; 电子书了。&lt;/p&gt;
&lt;p&gt;在我们解压出来的文件，往往会有一个 &lt;code&gt;.opf&lt;/code&gt; 文件，内容开头一般是：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;  encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.idpf.org/2007/opf&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;package&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们只要访问命名空间属性中的这个 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;http://www.idpf.org/2007/opf&quot;&gt;http://www.idpf.org/2007/opf&lt;/a&gt; 链接，就可以查询到关于这个 &lt;code&gt;OPF&lt;/code&gt; 电子书的所有规范描述了。&lt;/p&gt;
&lt;p&gt;简单来说，这就是一个由国际数字出版论坛和 W3C 组织一起完成的开放电子书标准，在 2007 年 9 月取代了之前的 Open eBook，被国际数字出版论坛选为新的正式标准。&lt;/p&gt;
&lt;p&gt;既然 epub 内部就是 html 页面，我们的 Markdown 文章也能编译成 html，那我们写个工具将以往的文档处理成符合 epub 标准的文件包，不就可以做一本自己的电子书了？&lt;/p&gt;
&lt;h2 id=&quot;开始动手：手动篇&quot;&gt;&lt;a href=&quot;#开始动手：手动篇&quot; class=&quot;headerlink&quot; title=&quot;开始动手：手动篇&quot;/&gt;开始动手：手动篇&lt;/h2&gt;&lt;h3 id=&quot;1-创建电子书&quot;&gt;&lt;a href=&quot;#1-创建电子书&quot; class=&quot;headerlink&quot; title=&quot;1. 创建电子书&quot;/&gt;1. 创建电子书&lt;/h3&gt;&lt;h4 id=&quot;1-1-基本结构&quot;&gt;&lt;a href=&quot;#1-1-基本结构&quot; class=&quot;headerlink&quot; title=&quot;1-1. 基本结构&quot;/&gt;1-1. 基本结构&lt;/h4&gt;&lt;p&gt;我们先创建一个 &lt;em&gt;example&lt;/em&gt; 目录，其中包含 &lt;em&gt;META-INF&lt;/em&gt; 和 &lt;em&gt;EPUB&lt;/em&gt; 两个子目录。然后在现有目录结构中创建 &lt;em&gt;mimetype&lt;/em&gt;, &lt;em&gt;META-INF/container.xml&lt;/em&gt; 和 &lt;em&gt;EPUB/package.opf&lt;/em&gt; 文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;├── EPUB&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;│   └── package.opf&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;├── META-INF&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;│   └── container.xml&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;└── mimetype&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;文件 &lt;em&gt;mimetype&lt;/em&gt; 内容：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;/&gt;

&lt;p&gt;文件 &lt;em&gt;META-INF/container.xml&lt;/em&gt; 内容：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;urn:oasis:names:tc:opendocument:xmlns:container&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;rootfiles&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;rootfile&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;full-path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;EPUB/package.opf&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;media-type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;application/oebps-package+xml&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;rootfiles&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;container&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;文件 &lt;em&gt;EPUB/package.opf&lt;/em&gt; 内容：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.idpf.org/2007/opf&quot;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;xmlns:dc&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://purl.org/dc/elements/1.1/&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;xmlns:dcterms&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://purl.org/dc/terms/&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;3.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;xml:lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;unique-identifier&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;pub-identifier&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;metadata&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dc:identifier&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;pub-identifier&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;kepub:20211120:000000001&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dc:identifier&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dc:title&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;pub-title&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Example Book&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dc:title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dc:language&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;pub-language&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;en&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dc:language&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dc:date&lt;/span&gt;&amp;gt;&lt;/span&gt;2021-11-20&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dc:date&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dcterms:modified&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2021-11-20T14:50:00Z&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;metadata&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- TODO --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;spine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- TODO --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;spine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;package&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;以上就是我们的 &lt;em&gt;.epub&lt;/em&gt; 文件中最基础的三个文件。&lt;/p&gt;
&lt;p&gt;其中 &lt;em&gt;package.opf&lt;/em&gt; 中，我们在 &lt;code&gt;package &amp;gt; metadata&lt;/code&gt; 内定义了一些 &lt;em&gt;.epub&lt;/em&gt; 必备的元信息。以后我们向电子书添加内容时，还需要根据实际情况继续更新其中 &lt;code&gt;package &amp;gt; manifest&lt;/code&gt; &lt;strong&gt;资源清单&lt;/strong&gt; 和 &lt;code&gt;package &amp;gt; spine&lt;/code&gt; &lt;strong&gt;书脊&lt;/strong&gt; 的相关信息。&lt;/p&gt;
&lt;h4 id=&quot;1-2-添加页面&quot;&gt;&lt;a href=&quot;#1-2-添加页面&quot; class=&quot;headerlink&quot; title=&quot;1-2. 添加页面&quot;/&gt;1-2. 添加页面&lt;/h4&gt;&lt;p&gt;接下来就是向其中添加内容了。&lt;/p&gt;
&lt;p&gt;在之前的基础上，我们再创建一个 &lt;em&gt;EPUB/book&lt;/em&gt; 目录，在其中添加一个 &lt;em&gt;EPUB/book/page-1.xhtml&lt;/em&gt; 文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;├── EPUB&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;│   ├── book&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── page-1.xhtml&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;│   └── package.opf&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;├── META-INF&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;│   └── container.xml&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;└── mimetype&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;文件 &lt;em&gt;EPUB/book/page-1.xhtml&lt;/em&gt; 内容：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:epub&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.idpf.org/2007/ops&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xml:lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Page 1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后修改 &lt;em&gt;package.opf&lt;/em&gt; 中的资源清单和书脊：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;page-1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;book/page-1.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;media-type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;spine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;itemref&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;idref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;page-1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;spine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对于刚才的页面，我们创建了 &lt;code&gt;package &amp;gt; manifest &amp;gt; item&lt;/code&gt; 条目，标记了它的 &lt;code&gt;[media-type]&lt;/code&gt; 类型，并且设定了一个 &lt;code&gt;[id=&quot;page-1&quot;]&lt;/code&gt; 属性，将其以 &lt;code&gt;itemref[idref=&quot;page-1&quot;]&lt;/code&gt; 的形式在书脊内进行了引用。&lt;/p&gt;
&lt;p&gt;此时，如果将 &lt;em&gt;example&lt;/em&gt; 目录的内容进行 zip 打包，生成文件名称改为 &lt;em&gt;example.epub&lt;/em&gt;，就已经可以在一些 epub 阅读器中正常打开进行阅读了。但部分基于导航目录进行内容索引的阅读器（比如 &lt;em&gt;微信读书&lt;/em&gt;）还无法正常浏览，需要再做一点小小的改动。&lt;/p&gt;
&lt;h4 id=&quot;1-3-导航目录&quot;&gt;&lt;a href=&quot;#1-3-导航目录&quot; class=&quot;headerlink&quot; title=&quot;1-3. 导航目录&quot;/&gt;1-3. 导航目录&lt;/h4&gt;&lt;p&gt;我们再创建一个 &lt;em&gt;EPUB/toc.xhtml&lt;/em&gt;，内容：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;meta-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:epub&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.idpf.org/2007/ops&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xml:lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;TOC&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;epub:type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;toc&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;toc&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Table of Contents&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;book-page1.xhtml&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Page 1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt; 注意其中的 &lt;code&gt;nav[epub:type=&quot;toc&quot;]&lt;/code&gt;，这是 epub3 与 epub2 的区别之一，可以将目录页面的部分作为书籍的导航目录，不再需要单独提供 &lt;code&gt;.ncx&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同样的，继续修改 &lt;em&gt;package.opf&lt;/em&gt; 的资源清单和书脊：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;htmltoc&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;toc.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;media-type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;properties&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;nav&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;page-1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;book/page-1.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;media-type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;spine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;itemref&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;idref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;htmltoc&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;itemref&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;idref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;page-1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;spine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中 &lt;code&gt;item#htmldoc&lt;/code&gt; 添加了 &lt;code&gt;[properties=&quot;nav&quot;]&lt;/code&gt; 表示这个页面是导航目录。&lt;/p&gt;
&lt;p&gt;这次，再将 &lt;em&gt;example&lt;/em&gt; 目录内容打包为 &lt;em&gt;example.epub&lt;/em&gt; 后，就能在大部分阅读器内都正常打开了。&lt;/p&gt;
&lt;h4 id=&quot;1-4-封面页&quot;&gt;&lt;a href=&quot;#1-4-封面页&quot; class=&quot;headerlink&quot; title=&quot;1-4. 封面页&quot;/&gt;1-4. 封面页&lt;/h4&gt;&lt;p&gt;我们还可以给自己的电子书添加一个好看的封面，比如：&lt;/p&gt;
&lt;img src=&quot;/images/build-your-ebook-with-markdown/cover.jpg&quot; class=&quot;&quot; title=&quot;cover&quot;/&gt;

&lt;p&gt;将其保存为 &lt;em&gt;EPUB/images/cover.jpg&lt;/em&gt;，然后创建 &lt;em&gt;EPUB/cover.xhtml&lt;/em&gt;，内容为：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:epub&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.idpf.org/2007/ops&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xml:lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Cover&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        img {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            max-width: 100%;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;figure&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cover-image&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;images/cover.jpg&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;             &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Book Cover&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;figure&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;老规矩，继续更新 &lt;em&gt;package.opf&lt;/em&gt; 的资源清单和书脊：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;htmltoc&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;toc.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;media-type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;properties&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;nav&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cover&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cover.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;media-type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cover-image&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;images/cover.jpg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;media-type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;properties&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cover-image&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;page-1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;book/page-1.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;media-type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;spine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;itemref&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;idref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cover&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;linear&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;no&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;itemref&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;idref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;htmltoc&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;itemref&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;idref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;page-1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;spine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这次，增加的图片文件也需要登记在 &lt;code&gt;package &amp;gt; manifest&lt;/code&gt; 资源清单内，并且添加了 &lt;code&gt;properties=&quot;cover-image&quot;&lt;/code&gt; 属性，将其标记为书籍的封面图片。&lt;/p&gt;
&lt;p&gt;而创建的 &lt;code&gt;cover.xhtml&lt;/code&gt; 文件，是为了让我们在打开书籍后，也能在内容内看到封面的效果。&lt;/p&gt;
&lt;h4 id=&quot;1-5-其它&quot;&gt;&lt;a href=&quot;#1-5-其它&quot; class=&quot;headerlink&quot; title=&quot;1-5. 其它&quot;/&gt;1-5. 其它&lt;/h4&gt;&lt;p&gt;如果我们需要在电子书内，添加更多页面、引用更多图片、添加装饰样式、改用自定义字体，也是相同的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将资源添加到项目内。&lt;/li&gt;
&lt;li&gt;更新 &lt;em&gt;package.opf&lt;/em&gt; 内的 &lt;code&gt;manifest&lt;/code&gt; 资源清单。&lt;/li&gt;
&lt;li&gt;如果是页面，再添加对应 &lt;code&gt;[id]&lt;/code&gt; 引用到 &lt;code&gt;spine&lt;/code&gt; 书脊内，并且更新 &lt;em&gt;toc.xhtml&lt;/em&gt; 内的 &lt;code&gt;nav&lt;/code&gt; 记录。&lt;ul&gt;
&lt;li&gt;&lt;em&gt;toc.xhtml&lt;/em&gt; 内的 &lt;code&gt;nav&lt;/code&gt; 导航目录，支持 &lt;code&gt;ol &amp;gt; li &amp;gt; ol &amp;gt; li ...&lt;/code&gt; 嵌套实现多级目录。&lt;/li&gt;
&lt;li&gt;部分阅读器不支持 &lt;code&gt;nav&lt;/code&gt; 导航目录使用 &lt;code&gt;ul&lt;/code&gt; 无须列表。&lt;/li&gt;
&lt;li&gt;如果需要为导航索引型阅读器提供页面引用，又不想让对应记录出现在目录内；或者重复引用于不同位置的相同页面记录，可以为对应 &lt;code&gt;ol&lt;/code&gt; / &lt;code&gt;li&lt;/code&gt; 设置 &lt;code&gt;[hidden=&quot;&quot;]&lt;/code&gt; 属性，进行隐藏处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-自动流程准备&quot;&gt;&lt;a href=&quot;#2-自动流程准备&quot; class=&quot;headerlink&quot; title=&quot;2. 自动流程准备&quot;/&gt;2. 自动流程准备&lt;/h3&gt;&lt;p&gt;基于上面的原理，我们已经能够开始手动编写我们的电子书了。&lt;/p&gt;
&lt;p&gt;不过这个过程中还有很多手动操作并不便捷的步骤，比如 &lt;em&gt;每篇文章进行 Markdown to Html 转化、文章中所有图片添加到资源清单、更新文章目录结构&lt;/em&gt; ，如果文章页面、引用资源稍微多一些，就基本没法手动处理过来了。&lt;/p&gt;
&lt;p&gt;所以我们需要更高效的自动处理方案。&lt;/p&gt;
&lt;h4 id=&quot;2-1-自动的与手动的&quot;&gt;&lt;a href=&quot;#2-1-自动的与手动的&quot; class=&quot;headerlink&quot; title=&quot;2-1. 自动的与手动的&quot;/&gt;2-1. 自动的与手动的&lt;/h4&gt;&lt;p&gt;刚才提到的资源清单内容，大致可以分为两类：&lt;/p&gt;

&lt;p&gt;其中，后者可以直接在 Markdown 文档渲染成 html 文件后，进行 html 解析再对所有 &lt;code&gt;img&lt;/code&gt; 标签进行汇总即可得出配置列表。&lt;/p&gt;
&lt;p&gt;前者可以基于 &lt;code&gt;.md&lt;/code&gt; 文件本身的目录结构进行资源列表的整合，但是 &lt;strong&gt;对于页面在书脊和导航目录内的顺序&lt;/strong&gt; 无法进行很好的控制。&lt;/p&gt;
&lt;p&gt;如果基于文件名进行排序，相当于引入了一套不可控的潜规则，对于书籍迁移、页面删减维护都不太方便。而且如果需要处理导航目录内隐藏、重新引用的场景，还要引入更复杂的潜规则。&lt;/p&gt;
&lt;p&gt;不如增加一个简化的 &lt;code&gt;.json&lt;/code&gt; 配置文件，统一管理页面在导航目录内的顺序和层级关系。&lt;/p&gt;
&lt;h4 id=&quot;2-2-新的电子书结构&quot;&gt;&lt;a href=&quot;#2-2-新的电子书结构&quot; class=&quot;headerlink&quot; title=&quot;2-2. 新的电子书结构&quot;/&gt;2-2. 新的电子书结构&lt;/h4&gt;&lt;p&gt;我们重新创建一个 &lt;em&gt;new-book&lt;/em&gt; 目录，并在其中创建一些子目录和文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;new-book&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;├── chapter-1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;│   ├── index.md&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;│   └── ep-1.md&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;└── book.json&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;文件 &lt;em&gt;book.json&lt;/em&gt; 内容：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;meta&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;kepub:20211120:000000001&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Example Book&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;lang&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;date&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;2021-11-20&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;modified&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;2021-11-20T14:50:00Z&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;pages&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Chapter.01&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;file&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;chapter-1/index.md&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;children&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Episode.01&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;&quot;file&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;chapter-1/ep-1.md&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;&quot;hidden&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      ]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;文件 &lt;em&gt;chapter-1/index.md&lt;/em&gt; 内容：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;/&gt;

&lt;p&gt;文件 &lt;em&gt;chapter-1/ep-1.md&lt;/em&gt; 内容：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;/&gt;

&lt;p&gt;这样，我们日常创建一本电子书时，真正需要自己定制的内容基本就已收录其中。而且能方便地在其中定义和调整页面的顺序和层级关系，控制对应条目是否在导航内隐藏了。&lt;/p&gt;
&lt;p&gt;接下来，我们只需要再编写一些脚本，将上面的结构自动转化成电子书需要的 &lt;code&gt;mimetype&lt;/code&gt;, &lt;code&gt;container.xml&lt;/code&gt;, &lt;code&gt;package.opf&lt;/code&gt; 和各种页面文件，并且汇总对应的资源清单、书脊和导航目录。&lt;/p&gt;

    &lt;/div&gt;

    
    
    

      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>