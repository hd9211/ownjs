<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>24c164860829c77355345d1b0ebba4da</guid>
<title>到了 2020 年，顶级的 P8 架构师的技术水平到底需要达到怎样的程度？</title>
<link>https://toutiao.io/k/0vi58e0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;最近部门招聘，很多工程师，包括我在内都参与了内推和面试的过程，经过这次招聘，我发现能够最终拿到offer的人，基本上在看到简历的那一瞬间就已经定下来了，后续的面试只不过是一种验证而已（注意，是验证，而不是走过场），除非你面试过程中犯错误，或者你不想来，否则，那个offer一定是可以拿下的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.40166666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdp83gUeyyIw7DUicfpyOtfes8LS7KEWfRzdFOaia8JxfU1wjvx8HdnMhibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那些拿下offer的人，基本上都有这么一些特征&lt;/span&gt;&lt;span&gt;（文末送彩蛋）&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1. 学校不错，一般都是985，211，如果学校一般，那么你下面的2和3满足的话，问题也不大。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 之前三年工作经验，都是在业内有些名气的企业，比如百度，IBM，腾讯，思科等等。国内的软件企业的工作经验往往认可度不高，甚至远远不如一些拿到了风投的创业企业的认可度高。当然，如果一家号称在创业的企业，却没有任何人投资，基本上也不要想得到认可了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3. 职位级别，基本上都达到了高级工程师/高级测试工程师, Senior xxx Engineer的级别&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;4. 之前工作经验和当前职位要求都匹配，比如岗位要求Java的，候选人之前也是用Java的，岗位是iOS/Android的，候选人之前也是干这个的&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但是，满足前面4点，三年经验也只能保证你能有P6的评级，不一定能保证P7的评级，那么，如何才能评到P7呢？以笔者观察到的案例，是否P7一条最关键的就是你是否业内有知名度。&lt;/p&gt;&lt;p&gt;之所以提到知名度，源于笔者认为，这一条对于候选人来说最容易提升，否则，你和现有的阿里的工程师去拼JVM实现，MySQL优化，毫无优势，面试官有什么理由给你那么高评级呢。&lt;/p&gt;&lt;p&gt;那么，如果我要拿P8呢？笔者郑重的提示读者，如果你亲自拜读了这篇博文，并且觉得收获匪浅，那么你肯定还没达到P8的要求，因为笔者所见的P8，在业界知名度，综合能力方面，都已经超越了我言语所能描述的地步，我这篇文章，对于他们来说，一点价值都没有。这种修养，绝对不是三到五年就能熏陶出来的。&lt;/p&gt;&lt;p&gt;&lt;span&gt;再看看p8到底是个什么样的存在&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.2727272727272727&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpHRrdaUic0H16WEXKKvt6Mu8o6lceOYlA7Sb3SZIsT8sTt5S8OjPdDTA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;693&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.603125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpXVsmdpcPdrs6L8PlUxPhrGUWuK3mCyhjT6ebf0lLdsb7d6snmEiasrQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;知道了P8是个什么样的存在了，我们再来看看P8架构师究竟要掌握什么样的技术水平才能技术层面达到P8这个等级&lt;/h1&gt;&lt;h1&gt;先看看一张高清图，出自马士兵教育，盗版必究！！！&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0373376623376624&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpicYHe31jwqAt7kx7c0hU3gxdXHn3B5pmg7u4vrENYDgibnaAcnJB7iaoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;616&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们再来一个个的剖析他的技术点&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;第一篇:千亿流量高并发高可用分布式系统之理论基础篇&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7416741674167416&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpBeqicjjHfCvnopia0wr5vC2tsHoJQgKVyI3txFG3RNyTqgeKtVgl9hog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1111&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第二篇:千亿流量高并发高可用分布式系统之技术底层支撑篇(面试）&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.50875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpkNZwMgDlqBpfDlyVZUoXLC4w2D0OnsCLibjbrIDyIiasKm3SfYIMkvQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;核心理论落地篇:再造淘宝贯穿全系阿里团队代码落地详细每个版本迭代&lt;/span&gt;&lt;span&gt;拒 绝&lt;/span&gt;&lt;span&gt;2-3个月PPT架构师（一）&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7747747747747747&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpUzsYpB51DDkPDMGD4HoovGwWESGjAAn6KN2IsKZsxlt1HXqBPl6Gvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;999&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;核心理论落地篇:再造淘宝贯穿全系阿里团队代码落地详细每个版本迭代拒绝2-3个月PPT架构师（二）&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8130929791271347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdprDLK9rtibCAqgXJyF2ib40wgOhEBh4Eia6pEveEAIcmfTX1ntAq1TdhLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1054&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;如何获取高清大纲？&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;扫码添加助理备注“马士兵”即可免费获取&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.025&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdphkIu70uzAm3JOm1IjLZwBQW8XPuNwv6uTVY3WZ08LFstkSpSn3BibEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;320&quot;/&gt;&lt;/p&gt;&lt;h1&gt;面试算法系列篇:技术底层支撑之数据结构算法-从萌新到BAT (&lt;span&gt;左程云&lt;/span&gt;老师)&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;高频面试题训练营&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6907665505226481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpyMiahw3FQry39tXegATDiciaoRVbKTVudLSdA0CaPBWG0mziamQgHm5u3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1148&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;算法和数据结构基础班+进阶班&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.628051486906347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpvU9qVdIE8c9OZltCf6X5iataOlHRHcB5Pgib7An4CiaAyNyWP0mJWiaib2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2253&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第三篇:千亿流量高并发高可用分布式系统之关键算法支撑篇（一）&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6610312764158918&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpsVUicFQgTyJ380IC3O3xyLPce7NXgVTSBWAup9WIm8dliaKPEPeOqNicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1183&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第三篇:千亿流量高并发高可用分布式系统之关键算法支撑篇（二）机器学习&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8284263959390863&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdp1Oeb8v0MGoHhh6KQxCDXYqPyUkLy1XUcxZVVxTR3QQPMnibqjiaRJ7FA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;985&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第四篇:千亿流量高并发高可用分布式系统之框架/中间件底层原理剖析篇&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8629550321199143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpL6JsD1Miap8bT3ETnJasiaGibcxj7Kszrk3FRBIKia6jYiaPR7ZkW27NUXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;934&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第五篇:千亿流量高并发高可用分布式系统之总体设计篇(一)&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8124392614188533&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpGjqO7icnwiaE8YVh50fECTWUCHyn6hZv5hIlT1eotgibWP4711ia8E5JYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第五篇:千亿流量高并发高可用分布式系统之总体设计篇(二)&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9925925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdplfBADPelHaafgaic8ysicJM6zoypXriaEZu9b6j7Nm4WibrOnIqgs4I3cw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;675&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第六篇:千亿流量高并发高可用分布式系统之网络基础设施建设篇&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6387959866220736&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpVHlbux1sIuXcssUvBDibS7P6aN6BuMVCLYFfzylOic2sjqLtF49NdicXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1196&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;番外篇: Nnginx/Tengine玩儿很大&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.3608562691131498&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpPibuIl0rvQfg2AwYdgmdgzzspgAqP8b1gX1PSBNnsd6jTkCVfAT2qbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;654&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第七篇:千亿流量高并发高可用分布式系统之核心服务设计篇&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.46593121349772876&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpD3CgoTCA0wBTXs7tb1t5e6lJBY8voMhtVCzyJAicVHVb4QicUvQfaApQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1541&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第八篇:千亿流量高并发高可用分布式系统之核心服务设计-微服务全栈篇&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.36363636363636365&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpeNiazCE9nYUFOnLyYqf7se51ZU3b0XbyE8prMCTUibQvxaXQ9FwOXSEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1848&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;增益篇: ServiceMesh理论与 落地实战&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.2725797728501893&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpKzYHKqAk2m9HuGGDEGwsUoeb2QfF5iauJ89Nracs4jPXibicWNnScy0Rg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1849&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第九篇:千亿流量高并发高可用分布式系统之数据治理篇（一）&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8003597122302158&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpSJdiaI7iaejiawoicChQumdVibhbibgo5J3kd1fzbSELAeOmpD6CcTSJKE6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1112&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第九篇:千亿流量高并发高可用分布式系统之数据治理篇（二）&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6415094339622641&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpob7YG0f9UryOhrmh1ELX7GTWR0mrmRvYkcR6ibzIqpiayQtTtLoYzSvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1378&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;第十篇到第十五篇 ：&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8114233907524931&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpxjP4tNxecY2vX56FgxWbAoJNocD2m0bpdKLGTh7cLdrgf8Ebx9Gp0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1103&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;拒绝2--3个月理论式教学，全程项目驱动案例式讲解理论，再造淘宝，实战落地!综合阿里腾讯百度美团拼多多头条多位架构师(课程顾问天团)重造个淘宝让三四线的技术人员也能享受超一 线的技术分享&lt;/h1&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.669776119402985&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpjjmAyIPqlA8bNdomBV3BVyic80oUbroKA78cb4mjYiakhShkRE8MGI7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;536&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;如何获取高清大纲？&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;扫码添加助理备注“马士兵”即可免费获取&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.025&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdphkIu70uzAm3JOm1IjLZwBQW8XPuNwv6uTVY3WZ08LFstkSpSn3BibEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;320&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;企业级实战教程、面试宝典、底层原理.pdf&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;SSM企业级实战教程.pdf&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.416342412451362&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdp71PP2IiaL1szia4qN3tzpJ1d4k2icyDB0Qla7icGiapO0amhaeNts7ILmTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;257&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6654275092936803&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpfqA96VRnfyDJE5boqDtfB8jwZicqY0dCYVxUcupFPRdRO4jOOKCsWvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;807&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;美团面经&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.7840909090909092&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpJT6XbUXyJIHBIDIiaBPnTQic7vJqcMKt0W0muUQpo0Db1aBYe6rNcPicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;264&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5663983903420523&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpqicBnXz3v9uFfYyl0gnCv7voNbPmibt4kbRyn2FpJ8XbhloKMH25dYDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;操作系统、计算机底层&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.5245535714285714&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpKWsQOXCsVEZZRPgMoFG5vicdkXxZxg40cFuyia7MgTANzwtgsqgicxIjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;448&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6895043731778425&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdpZXn3cBJyjWmf2OhQblz5XLQvrtjVAxDmmEel7Zqmicl2lkkL80KbdMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;686&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;操作系统、计算机底层、网络、面经以及SSM企业级实战PDF教程，最新高清P8课程大纲&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;扫码添加助理备注“马士兵”即可免费获取&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.025&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dKObSHLoNxxbPtpXib2MXXdphkIu70uzAm3JOm1IjLZwBQW8XPuNwv6uTVY3WZ08LFstkSpSn3BibEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;320&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>275272588e6261803a9900da7c96083f</guid>
<title>[推荐] 大数据时代的用户画像基础介绍和构建流程</title>
<link>https://toutiao.io/k/sjw8ku8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;27&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;27&quot; data-custom=&quot;#1e9be8&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;点击标题下「&lt;em&gt;&lt;strong&gt;搜索与推荐Wiki&lt;/strong&gt;&lt;/em&gt;」可快速关注&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93040&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;92886&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;▼&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;精彩推荐&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;▼&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MDU3OTgyOQ==&amp;amp;mid=2247487424&amp;amp;idx=1&amp;amp;sn=6281fb41acb7dc2de2d1cb67c2238053&amp;amp;chksm=ea66c75add114e4cc412161e1bc2ed59c58cb643db4a95bb46af84f82dbba0e253b55bfb9339&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;1、&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;1、&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MDU3OTgyOQ==&amp;amp;mid=2247489200&amp;amp;idx=1&amp;amp;sn=175956595187e24ddcbd4401b0f4e842&amp;amp;chksm=ea66de2add11573c2958cbb0dfbdaa13dc850f6ba91bea9daa4033d3acff906796c10799e23d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;特征工程｜文本特征处理的四大类主流方法&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2、&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MDU3OTgyOQ==&amp;amp;mid=2247489160&amp;amp;idx=1&amp;amp;sn=528748edcbe58e31b85ef0fa61b255ca&amp;amp;chksm=ea66de12dd1157044bc6c7d80daa11cff13995139a99e6579dde07f3d37d2d2172378632d24d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;计算广告与推荐系统有哪些区别？使用的主流模型有哪些？&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MDU3OTgyOQ==&amp;amp;mid=2247487424&amp;amp;idx=1&amp;amp;sn=6281fb41acb7dc2de2d1cb67c2238053&amp;amp;chksm=ea66c75add114e4cc412161e1bc2ed59c58cb643db4a95bb46af84f82dbba0e253b55bfb9339&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;独孤九剑：算法模型训练的一般流程&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;4、&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MDU3OTgyOQ==&amp;amp;mid=2247488050&amp;amp;idx=1&amp;amp;sn=5cbc4b48dc49f541d96a418769263d22&amp;amp;chksm=ea66daa8dd1153be05fffc0826136244e12fbce9f3f7ce056a11e7e2b4720cc7fde606adcade&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;从DSSM语义匹配到Google的双塔深度模型召回和广告场景中的双塔模型思考&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;5、&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MDU3OTgyOQ==&amp;amp;mid=2247488827&amp;amp;idx=1&amp;amp;sn=6248ecc4422d5f0afe29e81ddb796936&amp;amp;chksm=ea66dda1dd1154b7ff30410061f2541a6dba008017bcfebd44c61d507a8d09c4462f2e3ea34c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;算法工程师的数学基础｜如何理解概率分布函数和概率密度函数&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;31&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;导读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-style=&quot;text-indent: 2em;;&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;在互联网步入大数据时代后，用户行为给企业的产品和服务带来了一系列的改变和重塑，其中最大的变化在于，用户的一切行为在企业面前是可“追溯”“分析”的。企业内保存了大量的原始数据和各种业务数据，这是企业经营活动的真实记录，如何更加有效地利用这些数据进行分析和评估，成为企业基于更大数据量背景的问题所在。随着大数据技术的深入研究与应用，企业的关注点日益聚焦在如何利用大数据来为精细化运营和精准营销服务，而要做精细化运营，首先要建立本企业的用户画像。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;画像简介&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;用户画像，即&lt;/span&gt;&lt;span&gt;用户信息标签化&lt;/span&gt;&lt;span&gt;，通过收集用户的社会属性、消费习惯、偏好特征等各个维度的数据，进而对用户或者产品特征属性进行刻画，并对这些特征进行分析、统计，挖掘潜在价值信息，从而抽象出用户的信息全貌，如图1-1所示。用户画像可看作企业应用大数据的根基，是定向广告投放与个性化推荐的前置条件，为数据驱动运营奠定了基础。由此看来，如何从海量数据中挖掘出有价值的信息越发重要。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;209&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.36237373737373735&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;792&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpTpUfVXDSfibTbvS7tCuiappvNj35twj1ZibMCx0W6dfcFibFVyCSRLVicQg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图1-1　某用户标签化&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;大数据已经兴起多年，其对于互联网公司的应用来说已经如水、电、空气对于人们的生活一样，成为不可或缺的重要组成部分。从基础设施建设到应用层面，主要有数据平台搭建及运维管理、数据仓库开发、上层应用的统计分析、报表生成及可视化、用户画像建模、个性化推荐与精准营销等应用方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多公司在大数据基础建设上投入很多，也做了不少报表，但业务部门觉得大数据和传统报表没什么区别，也没能体会大数据对业务有什么帮助和价值，究其原因，其实是“数据静止在数据仓库，是死的”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而用户画像可以帮助大数据“走出”数据仓库，针对用户进行个性化推荐、精准营销、个性化服务等多样化服务，是大数据落地应用的一个重要方向。数据应用体系的层级划分如图1-2所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;287&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.49634146341463414&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;820&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpaPuUNSibZqNyWibpYpNG1Xp40zKZsZEd9mzEHezPfticyG1nR9YgKXJzA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1-2　数据应用体系的层级划分&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;标签类型：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户画像建模其实就是对用户“打标签”，从对用户打标签的方式来看，一般分为3种类型（如图1-3所示）：①统计类标签；②规则类标签；③机器学习挖掘类标签。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;102&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.17693836978131214&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1006&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVp4TQDdvTUze7YPI0L5gh1CB6jlUfyurzePUGpFqfzq0QSN1ubkibsTUg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1-3　标签类型&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面我们介绍这3种类型的标签的区别：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;① 统计类标签&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这类标签是最为基础也最为常见的标签类型，例如，对于某个用户来说，其性别、年龄、城市、星座、近7日活跃时长、近7日活跃天数、近7日活跃次数等字段可以从用户注册数据、用户访问、消费数据中统计得出。该类标签构成了用户画像的基础。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;② 规则类标签&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该类标签基于用户行为及确定的规则产生。例如，对平台上“消费活跃”用户这一口径的定义为“近30天交易次数≥2”。在实际开发画像的过程中，由于运营人员对业务更为熟悉，而数据人员对数据的结构、分布、特征更为熟悉，因此规则类标签的规则由运营人员和数据人员共同协商确定；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;③ 机器学习挖掘类标签&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该类标签通过机器学习挖掘产生，用于对用户的某些属性或某些行为进行预测判断。例如，根据一个用户的行为习惯判断该用户是男性还是女性、根据一个用户的消费习惯判断其对某商品的偏好程度。该类标签需要通过算法挖掘产生。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在项目工程实践中，一般统计类和规则类的标签即可以满足应用需求，在开发中占有较大比例。机器学习挖掘类标签多用于预测场景，如判断用户性别、用户购买商品偏好、用户流失意向等。&lt;/span&gt;&lt;span&gt;一般地，机器学习标签开发周期较长，开发成本较高，因此其开发所占比例较小。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据架构&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在整个工程化方案中，系统依赖的基础设施包括Spark、Hive、HBase、Airflow、MySQL、Redis、Elasticsearch。除去基础设施外，系统主体还包括Spark Streaming、ETL、产品端3个重要组成部分。图1-4所示是用户画像数仓架构图，下面对其进行详细介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;390&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6743383199079401&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;869&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVp2TKMOXBhDvHAsk8MSrxduyprWjDvTEZee8rN8Xj4CxAdFq814k0kAg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1-4　用户画像数仓架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1-4下方虚线框中为常见的数据仓库ETL加工流程，也就是将每日的业务数据、日志数据、埋点数据等经过ETL过程，加工到数据仓库对应的ODS层、DW层、DM层中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中间的虚线框即为用户画像建模的主要环节，用户画像不是产生数据的源头，而是对基于数据仓库ODS层、DW层、DM层中与用户相关数据的二次建模加工。在ETL过程中将用户标签计算结果写入Hive，由于不同数据库有不同的应用场景，后续需要进一步将数据同步到MySQL、HBase、Elasticsearch等数据库中。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Hive：存储用户标签计算结果、用户人群计算结果、用户特征库计算结果。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;MySQL：存储标签元数据，监控相关数据，导出到业务系统的数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HBase：存储线上接口实时调用类数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Elasticsearch：支持海量数据的实时查询分析，用于存储用户人群计算、用户群透视分析所需的用户标签数据（由于用户人群计算、用户群透视分析的条件转化成的SQL语句多条件嵌套较为复杂，使用Impala执行也需花费大量时间）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;用户标签数据在Hive中加工完成后，部分标签通过Sqoop同步到MySQL数据库，提供用于BI报表展示的数据、多维透视分析数据、圈人服务数据；另一部分标签同步到HBase数据库用于产品的线上个性化推荐。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;主要覆盖模块&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;搭建一套用户画像方案整体来说需要考虑8个模块的建设，如图1-5所示。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用户画像基础：需要了解、明确用户画像是什么，包含哪些模块，数据仓库架构是什么样子，开发流程，表结构设计，ETL设计等。这些都是框架，大方向的规划，只有明确了方向后续才能做好项目的排期和人员投入预算。这对于评估每个开发阶段重要指标和关键产出非常重要，重点可看1.4节。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据指标体系：根据业务线梳理，包括用户属性、用户行为、用户消费、风险控制等维度的指标体系。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;标签数据存储：标签相关数据可存储在Hive、MySQL、HBase、Elasticsearch等数据库中，不同存储方式适用于不同的应用场景。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;标签数据开发：用户画像工程化的重点模块，包含统计类、规则类、挖掘类、流式计算类标签的开发，以及人群计算功能的开发，打通画像数据和各业务系统之间的通路，提供接口服务等开发内容。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;316&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5470459518599562&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;914&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVp4NkIeMicco9SeWrz14feew70WcEVREcicckVTrJos40icCIy9KshQK87Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1-5　用户画像主要覆盖模块&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开发性能调优：标签加工、人群计算等脚本上线调度后，为了缩短调度时间、保障数据的稳定性等，需要对开发的脚本进行迭代重构、调优。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;作业流程调度：标签加工、人群计算、同步数据到业务系统、数据监控预警等脚本开发完成后，需要调度工具把整套流程调度起来。本书讲解了Airflow这款开源ETL工具在调度画像相关任务脚本上的应用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用户画像产品化：为了能让用户数据更好地服务于业务方，需要以产品化的形态应用在业务上。产品化的模块主要包括标签视图、用户标签查询、用户分群、透视分析等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用户画像应用：画像的应用场景包括用户特征分析、短信、邮件、站内信、Push消息的精准推送、客服针对用户的不同话术、针对高价值用户的极速退货退款等VIP服务应用。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;开发阶段流程&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本节主要介绍画像系统开发上线的流程以及各阶段的关键产出。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 开发上线流程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户画像建设项目流程，如图1-6所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;172&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.2980891719745223&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;785&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpcfpqNsE9sT17YPdxlia8ibFpQian868ianT5aianlqUZrPChknIiaLJ7OvNg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;图1-6　用户画像建设项目流程&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第一阶段：目标解读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在建立用户画像前，首先需要明确用户画像服务于企业的对象，再根据业务方需求，明确未来产品建设目标和用户画像分析之后的预期效果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般而言，用户画像的服务对象包括运营人员和数据分析人员。不同业务方对用户画像的需求有不同的侧重点，就运营人员来说，他们需要分析用户的特征、定位用户行为偏好，做商品或内容的个性化推送以提高点击转化率，所以画像的侧重点就落在了用户个人行为偏好上；就数据分析人员来说，他们需要分析用户行为特征，做好用户的流失预警工作，还可根据用户的消费偏好做更有针对性的精准营销。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第二阶段：任务分解与需求调研&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过第一阶段的需求调研和目标解读，我们已经明确了用户画像的服务对象与应用场景，接下来需要针对服务对象的需求侧重点，结合产品现有业务体系和“数据字典”规约实体和标签之间的关联关系，明确分析维度。就后文将要介绍的案例而言，需要从用户属性画像、用户行为画像、用户偏好画像、用户群体偏好画像等角度去进行业务建模。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第三阶段：需求场景讨论与明确&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在本阶段，数据运营人员需要根据与需求方的沟通结果，输出产品用户画像需求文档，在该文档中明确画像应用场景、最终开发出的标签内容与应用方式，并就该文档与需求方反复沟通并确认无误。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第四阶段：应用场景与数据口径确认&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过第三个阶段明确了需求场景与最终实现的标签维度、标签类型后，数据运营人员需要结合业务与数据仓库中已有的相关表，明确与各业务场景相关的数据口径。在该阶段中，数据运营方需要输出产品用户画像开发文档，该文档需要明确应用场景、标签开发的模型、涉及的数据库与表以及应用实施流程。该文档不需要再与运营方讨论，只需面向数据运营团队内部就开发实施流程达成一致意见即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第五阶段：特征选取与模型数据落表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本阶段中数据分析挖掘人员需要根据前面明确的需求场景进行业务建模，写好HQL逻辑，将相应的模型逻辑写入临时表中，并抽取数据校验是否符合业务场景需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第六阶段：线下模型数据验收与测试&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据仓库团队的人员将相关数据落表后，设置定时调度任务，定期增量更新数据。数据运营人员需要验收数仓加工的HQL逻辑是否符合需求，根据业务需求抽取表中数据查看其是否在合理范围内，如果发现问题要及时反馈给数据仓库人员调整代码逻辑和行为权重的数值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第七阶段：线上模型发布与效果追踪&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过第六阶段，数据通过验收之后，会通过Git进行版本管理，部署上线。使用Git进行版本管理，上线后通过持续追踪标签应用效果及业务方反馈，调整优化模型及相关权重配置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 各阶段关键产出&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为保证程序上线的准时性和稳定性，需要规划好各阶段的任务排期和关键产出。画像体系的开发分为几个主要阶段，包括前期指标体系梳理、用户标签开发、ETL调度开发、打通数据服务层、画像产品端开发、面向业务方推广应用、为业务方提供营销策略的解决方案等，如表1-1所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;281&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4859392575928009&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVp0jJTYd2gzWVpeUGTZDUgd7JYRJaC9RROKXwmBophBXStoJlEfBXI1g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;315&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.545556805399325&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpAHB1mTebJEYNyyOFm14GLVYTND1JUGgKib84naFia1xAfM6xAHrRFY2Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;99&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.1713641488162345&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;887&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpVUuPIfqyzAubkeHWgcicNyIpfkmVSkibUyQBlibSGKBcBIaCGgnPYs3fw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-1　用户画像项目各阶段关键产出&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;标签开发：根据业务需求和应用场景梳理标签指标体系，调研业务上定义的数据口径，确认数据来源，开发相应的标签。标签开发在整个画像项目周期中占有较大比重。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ETL调度开发：梳理需要调度的各任务之间的依赖关系，开发调度脚本及调度监控告警脚本，上线调度系统。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;打通服务层接口：为了让画像数据走出数据仓库，应用到用户身上，需要打通数据仓库和各业务系统的接口。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;画像产品化：需要产品经理与业务人员、技术开发人员一起对接业务需求点和产品功能实现形式，画产品原型，确定工作排期。Java Web端开发完成后，需要数据开发人员向对应的库表中灌入数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开发调优：在画像的数据和产品端搭建好架构、能提供稳定服务的基础上，为了让调度任务执行起来更加高效、提供服务更加稳健，需要对标签计算脚本、调度脚本、数据同步脚本等相关计算任务进行重构优化。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面向业务方推广应用：用户画像最终的价值产出点是业务方应用画像数据进行用户分析，多渠道触达运营用户，分析ROI，提升用户活跃度或营收。因此，面向业务人员推广画像系统的使用方式、提供针对具体业务场景的解决方案显得尤为重要。在该阶段，相关人员需要撰写画像的使用文档，提供业务支持。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;05&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;画像应用的落地&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户画像最终的价值还是要落地运行，为业务带来实际价值。这里需要开发标签的数据工程师和需求方相互协作，将标签应用到业务中。否则开发完标签后，数据还是只停留在数据仓库中，没有为业务决策带来积极作用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;画像开发过程中，还需要开发人员组织数据分析、运营、客服等团队的人员进行画像应用上的推广。对于数据分析人员来说，可能会关注用户画像开发了哪些表、哪些字段以及字段的口径定义；对运营、客服等业务人员来说，可能更关注用户标签定义的口径，如何在Web端使用画像产品进行分析、圈定用户进行定向营销，以及应用在业务上数据的准确性和及时性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只有业务人员在日常工作中真正应用画像数据、画像产品，才能更好地推动画像标签的迭代优化，带来流量提升和营收增长，产出业绩价值。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;06&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;某用户画像案例&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这里通过一个实践案例来将大家更好地带入实际开发画像、应用画像标签的场景中。本节主要介绍案例背景及相关的元数据，以及开发标签中可以设计的表结构样式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在本案例的开发工作中，基于Spark计算引擎，主要涉及的语言包括HiveQL、Python、Scala、Shell等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 案例背景介绍&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;某图书电商网站拥有超过千万的网购用户群体，所售各品类图书100余万种。用户在平台上可进行浏览、搜索、收藏、下单、购买等行为。商城的运营需要解决两个问题：一方面在企业产品线逐渐扩张、信息资源过载的背景下，如何在兼顾自身商业目标的同时更好地满足消费者的需求，为用户带来更个性化的购物体验，通过内容的精准推荐，更好地提高用户的点击转化率；另一方面在用户规模不断增长的背景下，运营方考虑建立用户流失预警机制，及时识别将要流失的用户群体，采取运营措施挽回用户。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;商城自建立以来，数据仓库中积累着大量的业务数据、日志数据及埋点数据。如何充分挖掘沉淀在数据仓库中的数据的价值，有效支持用户画像的建设，成为当前的重要工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 相关元数据&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在本案例中，可以获取的数据按其类型分为：业务类数据和用户行为数据。其中业务类数据是指用户在平台上下单、购买、收藏物品、货物配送等与业务相关的数据；用户行为数据是指用户搜索某条信息、访问某个页面、点击某个按钮、提交某个表单等通过操作行为产生（在解析日志的埋点表中）的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;涉及数据仓库中的表主要包括用户信息表、商品订单表、图书信息表、图书类目表、App端日志表、Web端日志表、商品评论表等。下面就用户画像建模过程中会用到的一些数据表做详细介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;① 用户信息表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户信息表（见表1-2）存放有关用户的各种信息，如用户姓名、年龄、性别、电话号码、归属地等信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;315&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5455455455455456&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;999&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVppfm8eJYIV7hgzbSjl6Q77g2PHIBPA5TksO2icYXH5taogN9iaaZ3908A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-2　用户信息表（dim.user_basic_info）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;② 商品订单表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;商品订单表（见表1-3）存放商品订单的各类信息，包括订单编号、用户id、用户姓名、订单生成时间、订单状态等信息。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;359&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.620253164556962&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;948&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpRcDWcJic2G9BnuP9e2WwrbeiciblSrvzZQpjArEvUZo8daVs6qorSIAhA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-3　商品订单表（dw.order_info_fact）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;③ 埋点日志表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;埋点日志表（见表1-4）存放用户访问App时点击相关控件的打点记录。通过在客户端做埋点，从日志数据中解析出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;131&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.22666666666666666&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1050&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVp2aMbDUGibicZJoPQLhs0lm9zBrzicxDSnT28DrxQk0Xia25aAhKjBSicq0w/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;169&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.2932187201528176&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1047&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVp7XEFMHAaqB08qH21WVID1p4gQfuicKG0GyFpx2z3HHLLXwla0C6PboA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-4　埋点日志表（ods.page_event_log）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;④ 访问日志表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;访问日志表（见表1-5）存放用户访问App的相关信息及用户的LBS相关信息，通过在客户端埋点，从日志数据中解析出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;299&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5166508087535681&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1051&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpfqsB5PI3DVZXSib7MPuqsuQDxXOykrMLhc5S6s9PMfzL10vBLgM2jhw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-5　访问日志表（ods.page_view_log）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;⑤ 商品评论表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;商品评论表（见表1-6）存放用户对商品的评论信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;237&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4094631483166515&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1099&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpiawexfHaricV4A8fib6rhLSReYmp2ibqpaFK6O2CZLiaiagiaxC1gQm4LaSzg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-6　商品评论表（dw.book_comment）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;⑥ 搜索日志表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;搜索日志表（见表1-7）存放用户在App端搜索相关的日志数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;229&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.39617486338797814&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1098&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpIdInicOXMTwLuEY8zuzuRiclvCUiaibg7iaFLQFZ73Lxv80FuEtibEK71eFg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-7　搜索日志表（dw.app_search_log）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;⑦ 用户收藏表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户收藏表（见表1-8）记录用户收藏图书的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;194&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.33575317604355714&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1102&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVp9mNAPicfIDmabvYSdgh0nw8QUpib3PnemxibIPeHdLnSPyQdHjibPekP9A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-8　用户收藏表（dw.book_collection_df）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;⑧ 购物车信息表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;购物车信息表（见表1-9）记录用户将图书加入购物车的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;217&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3751135331516803&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpscGQ28EKumicicbo81WaavCCskjkZyEdAurwx8ck3TvahH3cLIXGuCLw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-9　购物车信息表（dw.shopping_cart_df）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 画像表结构设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表结构设计也是画像开发过程中需要解决的一个重要问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表结构设计的重点是要考虑存储哪些信息、如何存储（数据分区）、如何应用（如何抽取标签）这3个方面的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不同业务背景有不同的设计方式，这里提供两种设计思路：一是每日全量数据的表结构；二是每日增量数据的表结构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hive需要对输入进行全盘扫描来满足查询条件，通过使用分区可以优化查询。对于用户标签这种日加工数据，随着时间的推移，分区数量的变动也是均匀的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每日全量数据，即该表的日期分区中记录着截止到当天的全量用户数据。例如，“select  count(*)  from userprofile  where data=&#x27;20180701&#x27;”这条语句查询的是userprofile表截止到2018年7月1日的全量用户数据。日全量数据的优势是方便查询，缺点是不便于探查更细粒度的用户行为。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每日增量数据，即该表的日期分区中记录着当日的用户行为数据。例如，同样是“select count(*) from userprofile where data=&#x27;20180701&#x27;”，这条语句查询的是userprofile表在2018年7月1日记录的当日用户行为数据。日增量数据可视为ODS层的用户行为画像，在应用时还需要基于该增量数据做进一步的建模加工。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面详细介绍这两种表结构的设计方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;① 日全量数据&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;日全量数据表中，在每天对应的日期分区中插入截止到当天为止的全量数据，用户进行查询时，只需查询最近一天的数据即可获得最新全量数据。下面以一个具体的日全量表结构的例子来进行说明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;108&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.18755052546483428&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1237&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpiaxzH9qcfqQYUk3WEM1VBTUWEIk1QejuZx9hY4fU44mDQJAJyxnYMYg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里userid表示用户id，labelweight表示标签权重，theme表示标签归属的二级主题，labelid表示一个标签id。通过“日期 +标签归属的二级主题+标签id”的方式进行分区，设置三个分区字段更便于开发和查询数据。该表结构下的标签权重仅考虑统计类型标签的权重，如：历史购买金额标签对应的权重为金额数量，用户近30日访问天数为对应的天数，该权重值的计算未考虑较为复杂的用户行为次数、行为类型、行为距今时间等复杂情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过表名末尾追加“_all”的规范化命名形式，可直观看出这是一张日全量表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，对于主题类型为“会员”的标签，插入“20190101”日的全量数据，可通过语句：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;insert overwrite table dw. userprofile_userlabel_all partition(data_date= &#x27;20190101&#x27;, theme= &#x27;member&#x27;, labelid=&#x27;ATTRITUBE_U_05_001&#x27;)&lt;/span&gt;&lt;span&gt;来实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;查询截止到“20190101”日的被打上会员标签的用户量，可通过语句：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;select count(distinct userid) from dw.userprofile_userlabel_all where data_date=&#x27;20190101&#x27;&lt;/span&gt;&lt;span&gt;来实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;② 日增量数据&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;日增量数据表，即在每天的日期分区中插入当天业务运行产生的数据，用户进行查询时通过限制查询的日期范围，就可以找出在特定时间范围内被打上特定标签的用户。下面以一个具体的日增量表结构的例子来说明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;202&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.35019973368841545&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;751&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpXZ9SVNMN9zkrsJ2kxAibPjgD1x0uohVp2KM4fIcI2LZxVcq5gSSBZ0Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里，labelid表示标签名称；cookieid表示用户id；act_cnt表示用户当日行为次数，如用户当日浏览某三级品类商品3次，则打上次数为3；tag_type_id为标签类型,如母婴、3C、数码等不同类型；act_type_id表示行为类型，如浏览、搜索、收藏、下单等行为。分区方式为按日期分区，插入当日数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过表名末尾追加“_append”的规范化命名形式，可直观看出这是一张日增量表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，某用户在“20180701”日浏览某3C电子商品4次（act_cnt），即给该用户（userid）打上商品对应的三级品类标签（tagid），标签类型（tag_type_id）为3C电子商品，行为类型（act_type_id）为浏览。这里可以通过对标签类型和行为类型两个字段配置维度表的方式，对数据进行管理。例如对于行为类型（act_type_id）字段，可以设定1为购买行为、2为浏览行为、3为收藏行为等，在行为标签表中以数值定义用户行为类型，在维度表中维护每个数值对应的具体含义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该日增量数据表可视为ODS层用户行为标签明细。在查询过程中，例如对于某用户id为001的用户，查询其在“20180701”日到“20180707”日被打上的标签，可通过命令：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;select * from dw.userprofile_act_feature_append where userid = &#x27;001&#x27; and data_date&amp;gt;=&#x27;20180701&#x27; and data_date&amp;lt;= &#x27;20180707&#x27;&lt;/span&gt;&lt;span&gt;查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该日增量的表结构记录了用户每天的行为带来的标签，但未计算打在用户身上标签的权重，计算权重时还需做进一步建模加工。标签权重算法详见4.6节的内容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;③ 关于宽表设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户画像表结构如何设计，没有一定要遵循的固定的格式，符合业务需要、能满足应用即可。下面通过两个宽表设计的案例，提供另一种解决方案的思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户属性宽表设计（见表1-10），主要记录用户基本属性信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;444&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7687420584498094&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;787&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpkNDibfGT0pSyqjNbfVwM2PSeKAY4n26sFypntGAo5l85yaGUzazwOBQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;402&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6959287531806616&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;786&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpwh1DVqY6Fs99cS0vrBqLlYfmSD8cPuforHIhM9ghBFTibLgAAibghWJw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-10　用户属性宽表设计&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户日活跃宽表设计（见表1-11），主要记录用户每天访问的信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;238&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4123809523809524&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1050&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpqI1iaop228U8kFh3jH8135hetKYbCY43TUxW0xyMatXoESMIKNLx3zQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1-11　用户日活跃宽表设计&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;07&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;定性类画像&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本书重点讲解如何运用大数据定量刻画用户画像，然而对于用户的刻画除了定量维度外，定性刻画也是常见手段。定性类画像多见于用户研究等运营类岗位，通过电话调研、网络调研问卷、当面深入访谈、网上第三方权威数据等方式收集用户信息，帮助其理解用户。这种定性类调研相比大数据定量刻画用户来说，可以更精确地了解用户需求和行为特征，但这个样本量是有限的，得出的结论也不一定能代表大部分用户的观点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过制定调研问卷表，我们可以收集用户基本信息以及设置一个或多个场景，专访用户或网络回收调研问卷，在分析问卷数据后获取用户的画像特征。目前市场上“问卷星”等第三方问卷调查平台可提供用户问卷设计、链接发放、采集数据和信息、调研结果分析等一系列功能，如图1-7所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.3866348448687351&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;419&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpGLgsz12LW3fsKuAavTmUTNNZNzm4AEJ2jb6ehTN6dnfVLIT29MeIjA/640?wx_fmt=png&quot; data-backw=&quot;419&quot; data-backh=&quot;581&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1-7　某调研问卷示例（截图自“问卷星”）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据回收的调研问卷，可结合统计数据进一步分析用户画像特征（如图1-8所示）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;174&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.30165289256198347&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;968&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh4WJCtSFtGYXlpCqDmKJVpQtmS6NNeV81wP7uuzjuRcJzznrCPPq5Inic0UvBwbL6aCLyT295YlJA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1-8　回收的调研问卷（截图自“问卷星”）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;08&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文主要介绍了用户画像的一些基础知识，包括画像的简介、标签类型、整个画像系统的数据架构，开发画像系统主要覆盖的8个模块，以及开发过程中的各阶段关键产出。初步介绍了画像系统的轮廓概貌，帮助读者对于如何设计画像系统、开发周期、画像的应用方式等有宏观的初步的了解。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;——本文摘自机械工业出版社华章图书&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;《用户画像方法论与工程化解决方案》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作者介绍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;赵宏田，资深大数据技术专家。擅长Hadoop、Spark等大数据技术，以及业务数据分析、数据仓库开发、爬虫、用户画像系统搭建等。著有畅销书《数据化运营：系统方法与实践案例》 《用户画像：方法论与工程化解决方案》。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-backh=&quot;68&quot; data-backw=&quot;548&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/US10Gcd0tQE78f7dkJNjBgeibxuxoocvlffpMYExnaMsoibbMSK8LKYTwX96ATu94u3AVTWEB4ibIvYf5jSibN7kIA/0&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1257.0609318996414&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;155.9856630824373&quot; data-ratio=&quot;0.12410501193317422&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/c6gqmhWiafypu8xMx0VGdz69F9YhVguXuME1NXHKBJvbXrGQUqA33gM6papce4MI1p7licuSL2uPbw5oXkA0YXWQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1257&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-id=&quot;15650&quot; data-md5=&quot;75556&quot;&gt;&lt;section label=&quot;Powered by xmyeditor.com&quot; data-tools=&quot;小蚂蚁编辑器&quot; data-md5=&quot;75556&quot;&gt;&lt;section data-id=&quot;15679&quot; data-md5=&quot;d2aaa&quot;&gt;&lt;section label=&quot;Powered by xmyeditor.com&quot; data-tools=&quot;小蚂蚁编辑器&quot; data-md5=&quot;d2aaa&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d2aaa&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d2aaa&quot;&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.1875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/BwrOLGIZh5VJ5cTognH6VYpqmmNdicGuk37yuQiafTlDm8sxlPHyMaw8uIOXr4lNOb7zetTSGDV3HiaDVM50uKGxw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;128&quot; data-width=&quot;10%&quot;/&gt;&lt;span&gt;   &lt;/span&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.1875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/BwrOLGIZh5VJ5cTognH6VYpqmmNdicGuk37yuQiafTlDm8sxlPHyMaw8uIOXr4lNOb7zetTSGDV3HiaDVM50uKGxw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;128&quot; data-width=&quot;10%&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95390&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;3735&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;88589&quot;&gt;&lt;section data-width=&quot;98%&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;p&gt;真正的努力，&lt;span&gt;都&lt;/span&gt;&lt;span&gt;不喧&lt;/span&gt;&lt;span&gt;嚣！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/02kicEWsInicjw3UYDKaIRFbgdoWpOzJ4sxvNrGv2k5Pbob5icVWmsfFgrbc2RiaABlhrCJH51d7aZc6AiaTcFKHIfg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;344&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;搜索与推荐Wiki&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;span&gt;All In CTR、DL、ML、RL、NLP&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95390&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94250&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;91842&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/02kicEWsInicj3oK9alStElyMzciafsRKaV1hV9PFP4icRkALfLsbJOsRbYgoh6S4tryiaY2EiauhrtZsH3f3tBDn6aQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;分享，点赞，在看，安排一下？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cf234f3b7b9c84f459013622b73435d6</guid>
<title>[推荐] 30 个 Go 语言常用文件操作汇总，总有一个你会用的到</title>
<link>https://toutiao.io/k/kps7o16</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go官方提供的文件操作标准库分散在&lt;code&gt;os&lt;/code&gt;、&lt;code&gt;ioutil&lt;/code&gt;等多个包中，里面有非常多的方法涵盖了文件操作的所有场景，不过因为我平时开发过程中需要直接操作文件的场景其实并不多，在加上Go标准库的文档太难搜索，每次遇到要使用文件函数时都是直接Google查对应的函数。偶然查到国外一个人在2015年写的博客，他&lt;strong&gt;用常用的文件函数汇总了30个文件操作场景&lt;/strong&gt;，包括四大类：&lt;strong&gt;基本操作、读写操作、文件压缩、其他操作&lt;/strong&gt;。每一个文件操作都给了代码示例。写的非常好，强烈推荐你阅读一下，浏览一下它的目录，然后放到收藏夹里吃灰&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f7Tw3INC9Rd88gnNnkkS2vFC7zpghkgHo1G2iaQZ1NN7H1iaJW3mgT3icjQomPM8V3Z9ibQk6gDvuFsDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f7Tw3INC9Rd88gnNnkkS2vFVPPjOOrNGypc1mEiciao4zQZhpwhfibBibUhxlpQMxONWu0eZ2RuNV8D6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;，万一哪天用到了还能拿来参考一下。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原文链接：https://www.devdungeon.com/content/working-files-go&lt;/p&gt;&lt;p&gt;作者：&lt;strong&gt;NanoDano&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;作者主页：https://www.devdungeon.com/users/nanodano&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;介绍&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;一切皆文件&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;UNIX 的一个基础设计就是&quot;万物皆文件&quot;(everything is a file)。我们不必知道操作系统的设备驱动把什么映射给了一个文件描述符，操作系统为设备提供了文件格式的接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go语言中的reader和writer接口也类似。我们只需简单的读写字节，不必知道reader的数据来自哪里，也不必知道writer将数据发送到哪里。你可以在&lt;code&gt;/dev&lt;/code&gt;下查看可用的设备，有些可能需要较高的权限才能访问。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;文件基本操作&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建空文件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;var (&lt;br/&gt;    newFile *os.File&lt;br/&gt;    err     error&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    newFile, err = os.Create(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Println(newFile)&lt;br/&gt;    newFile.Close()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Truncate裁剪文件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 裁剪一个文件到100个字节。&lt;br/&gt;    // 如果文件本来就少于100个字节，则文件中原始内容得以保留，剩余的字节以null字节填充。&lt;br/&gt;    // 如果文件本来超过100个字节，则超过的字节会被抛弃。&lt;br/&gt;    // 这样我们总是得到精确的100个字节的文件。&lt;br/&gt;    // 传入0则会清空文件。&lt;br/&gt;&lt;br/&gt;    err := os.Truncate(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;, 100)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;获取文件信息&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;var (&lt;br/&gt;    fileInfo os.FileInfo&lt;br/&gt;    err      error&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 如果文件不存在，则返回错误&lt;br/&gt;    fileInfo, err = os.Stat(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;File name:&quot;&lt;/span&gt;, fileInfo.Name())&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;Size in bytes:&quot;&lt;/span&gt;, fileInfo.Size())&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;Permissions:&quot;&lt;/span&gt;, fileInfo.Mode())&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;Last modified:&quot;&lt;/span&gt;, fileInfo.ModTime())&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;Is Directory: &quot;&lt;/span&gt;, fileInfo.IsDir())&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;System interface type: %T\n&quot;&lt;/span&gt;, fileInfo.Sys())&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;System info: %+v\n\n&quot;&lt;/span&gt;, fileInfo.Sys())&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;重命名和移动&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    originalPath := &lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;&lt;br/&gt;    newPath := &lt;span&gt;&quot;test2.txt&quot;&lt;/span&gt;&lt;br/&gt;    err := os.Rename(originalPath, newPath)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;删除文件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    err := os.Remove(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;打开和关闭文件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 简单地以只读的方式打开。下面的例子会介绍读写的例子。&lt;br/&gt;    file, err := os.Open(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    file.Close()&lt;br/&gt;&lt;br/&gt;    // OpenFile提供更多的选项。&lt;br/&gt;    // 最后一个参数是权限模式permission mode&lt;br/&gt;    // 第二个是打开时的属性    &lt;br/&gt;    file, err = os.OpenFile(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;, os.O_APPEND, 0666)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    file.Close()&lt;br/&gt;&lt;br/&gt;    // 下面的属性可以单独使用，也可以组合使用。&lt;br/&gt;    // 组合使用时可以使用 OR 操作设置 OpenFile的第二个参数，例如：&lt;br/&gt;    // os.O_CREATE|os.O_APPEND&lt;br/&gt;    // 或者 os.O_CREATE|os.O_TRUNC|os.O_WRONLY&lt;br/&gt;&lt;br/&gt;    // os.O_RDONLY // 只读&lt;br/&gt;    // os.O_WRONLY // 只写&lt;br/&gt;    // os.O_RDWR // 读写&lt;br/&gt;    // os.O_APPEND // 往文件中添建（Append）&lt;br/&gt;    // os.O_CREATE // 如果文件不存在则先创建&lt;br/&gt;    // os.O_TRUNC // 文件打开时裁剪文件&lt;br/&gt;    // os.O_EXCL // 和O_CREATE一起使用，文件不能存在&lt;br/&gt;    // os.O_SYNC // 以同步I/O的方式打开&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;检查文件是否存在&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;var (&lt;br/&gt;    fileInfo *os.FileInfo&lt;br/&gt;    err      error&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 文件不存在则返回error&lt;br/&gt;    fileInfo, err := os.Stat(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; os.IsNotExist(err) {&lt;br/&gt;            log.Fatal(&lt;span&gt;&quot;File does not exist.&quot;&lt;/span&gt;)&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    log.Println(&lt;span&gt;&quot;File does exist. File information:&quot;&lt;/span&gt;)&lt;br/&gt;    log.Println(fileInfo)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;检查读写权限&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 这个例子测试写权限，如果没有写权限则返回error。&lt;br/&gt;    // 注意文件不存在也会返回error，需要检查error的信息来获取到底是哪个错误导致。&lt;br/&gt;    file, err := os.OpenFile(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;, os.O_WRONLY, 0666)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; os.IsPermission(err) {&lt;br/&gt;            log.Println(&lt;span&gt;&quot;Error: Write permission denied.&quot;&lt;/span&gt;)&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    file.Close()&lt;br/&gt;&lt;br/&gt;    // 测试读权限&lt;br/&gt;    file, err = os.OpenFile(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;, os.O_RDONLY, 0666)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; os.IsPermission(err) {&lt;br/&gt;            log.Println(&lt;span&gt;&quot;Error: Read permission denied.&quot;&lt;/span&gt;)&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    file.Close()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;改变权限、拥有者、时间戳&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 使用Linux风格改变文件权限&lt;br/&gt;    err := os.Chmod(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;, 0777)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Println(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // 改变文件所有者&lt;br/&gt;    err = os.Chown(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;, os.Getuid(), os.Getgid())&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Println(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // 改变时间戳&lt;br/&gt;    twoDaysFromNow := time.Now().Add(48 * time.Hour)&lt;br/&gt;    lastAccessTime := twoDaysFromNow&lt;br/&gt;    lastModifyTime := twoDaysFromNow&lt;br/&gt;    err = os.Chtimes(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;, lastAccessTime, lastModifyTime)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Println(err)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建硬链接和软链接&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个普通的文件是一个指向硬盘的inode的地方。硬链接创建一个新的指针指向同一个地方。只有所有的链接被删除后文件才会被删除。硬链接只在相同的文件系统中才工作。你可以认为一个硬链接是一个正常的链接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;symbolic link，又叫软连接，和硬链接有点不一样，它不直接指向硬盘中的相同的地方，而是通过名字引用其它文件。他们可以指向不同的文件系统中的不同文件。并不是所有的操作系统都支持软链接。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 创建一个硬链接。&lt;br/&gt;    // 创建后同一个文件内容会有两个文件名，改变一个文件的内容会影响另一个。&lt;br/&gt;    // 删除和重命名不会影响另一个。&lt;br/&gt;    err := os.Link(&lt;span&gt;&quot;original.txt&quot;&lt;/span&gt;, &lt;span&gt;&quot;original_also.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;creating sym&quot;&lt;/span&gt;)&lt;br/&gt;    // Create a symlink&lt;br/&gt;    err = os.Symlink(&lt;span&gt;&quot;original.txt&quot;&lt;/span&gt;, &lt;span&gt;&quot;original_sym.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // Lstat返回一个文件的信息，但是当文件是一个软链接时，它返回软链接的信息，而不是引用的文件的信息。&lt;br/&gt;    // Symlink在Windows中不工作。&lt;br/&gt;    fileInfo, err := os.Lstat(&lt;span&gt;&quot;original_sym.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Link info: %+v&quot;&lt;/span&gt;, fileInfo)&lt;br/&gt;&lt;br/&gt;    //改变软链接的拥有者不会影响原始文件。&lt;br/&gt;    err = os.Lchown(&lt;span&gt;&quot;original_sym.txt&quot;&lt;/span&gt;, os.Getuid(), os.Getgid())&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;文件读写&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;复制文件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;io&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 打开原始文件&lt;br/&gt;    originalFile, err := os.Open(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    defer originalFile.Close()&lt;br/&gt;&lt;br/&gt;    // 创建新的文件作为目标文件&lt;br/&gt;    newFile, err := os.Create(&lt;span&gt;&quot;test_copy.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    defer newFile.Close()&lt;br/&gt;&lt;br/&gt;    // 从源中复制字节到目标文件&lt;br/&gt;    bytesWritten, err := io.Copy(newFile, originalFile)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Copied %d bytes.&quot;&lt;/span&gt;, bytesWritten)&lt;br/&gt;&lt;br/&gt;    // 将文件内容flush到硬盘中&lt;br/&gt;    err = newFile.Sync()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;跳转到文件指定位置(Seek)&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    file, _ := os.Open(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    defer file.Close()&lt;br/&gt;&lt;br/&gt;    // 偏离位置，可以是正数也可以是负数&lt;br/&gt;    var offset int64 = 5&lt;br/&gt;&lt;br/&gt;    // 用来计算offset的初始位置&lt;br/&gt;    // 0 = 文件开始位置&lt;br/&gt;    // 1 = 当前位置&lt;br/&gt;    // 2 = 文件结尾处&lt;br/&gt;    var &lt;span&gt;whence&lt;/span&gt; int = 0&lt;br/&gt;    newPosition, err := file.Seek(offset, &lt;span&gt;whence&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;Just moved to 5:&quot;&lt;/span&gt;, newPosition)&lt;br/&gt;&lt;br/&gt;    // 从当前位置回退两个字节&lt;br/&gt;    newPosition, err = file.Seek(-2, 1)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;Just moved back two:&quot;&lt;/span&gt;, newPosition)&lt;br/&gt;&lt;br/&gt;    // 使用下面的技巧得到当前的位置&lt;br/&gt;    currentPosition, err := file.Seek(0, 1)&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;Current position:&quot;&lt;/span&gt;, currentPosition)&lt;br/&gt;&lt;br/&gt;    // 转到文件开始处&lt;br/&gt;    newPosition, err = file.Seek(0, 0)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;Position after seeking 0,0:&quot;&lt;/span&gt;, newPosition)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;写文件&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以使用&lt;code&gt;os&lt;/code&gt;包写入一个打开的文件。因为Go可执行包是静态链接的可执行文件，你import的每一个包都会增加你的可执行文件的大小。其它的包如&lt;code&gt;io&lt;/code&gt;、｀ioutil｀、｀bufio｀提供了一些方法，但是它们不是必须的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 可写方式打开文件&lt;br/&gt;    file, err := os.OpenFile(&lt;br/&gt;        &lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;,&lt;br/&gt;        os.O_WRONLY|os.O_TRUNC|os.O_CREATE,&lt;br/&gt;        0666,&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    defer file.Close()&lt;br/&gt;&lt;br/&gt;    // 写字节到文件中&lt;br/&gt;    byteSlice := []byte(&lt;span&gt;&quot;Bytes!\n&quot;&lt;/span&gt;)&lt;br/&gt;    bytesWritten, err := file.Write(byteSlice)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Wrote %d bytes.\n&quot;&lt;/span&gt;, bytesWritten)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;快写文件&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ioutil&lt;/code&gt;包有一个非常有用的方法&lt;code&gt;WriteFile()&lt;/code&gt;可以处理创建或者打开文件、写入字节切片和关闭文件一系列的操作。如果你需要简洁快速地写字节切片到文件中，你可以使用它。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    err := ioutil.WriteFile(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;, []byte(&lt;span&gt;&quot;Hi\n&quot;&lt;/span&gt;), 0666)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;使用缓存写&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;bufio&lt;/code&gt;包提供了带缓存功能的writer，所以你可以在写字节到硬盘前使用内存缓存。当你处理很多的数据很有用，因为它可以节省操作硬盘I/O的时间。在其它一些情况下它也很有用，比如你每次写一个字节，把它们攒在内存缓存中，然后一次写入到硬盘中，减少硬盘的磨损以及提升性能。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;bufio&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 打开文件，只写&lt;br/&gt;    file, err := os.OpenFile(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;, os.O_WRONLY, 0666)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    defer file.Close()&lt;br/&gt;&lt;br/&gt;    // 为这个文件创建buffered writer&lt;br/&gt;    bufferedWriter := bufio.NewWriter(file)&lt;br/&gt;&lt;br/&gt;    // 写字节到buffer&lt;br/&gt;    bytesWritten, err := bufferedWriter.Write(&lt;br/&gt;        []byte{65, 66, 67},&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Bytes written: %d\n&quot;&lt;/span&gt;, bytesWritten)&lt;br/&gt;&lt;br/&gt;    // 写字符串到buffer&lt;br/&gt;    // 也可以使用 WriteRune() 和 WriteByte()   &lt;br/&gt;    bytesWritten, err = bufferedWriter.WriteString(&lt;br/&gt;        &lt;span&gt;&quot;Buffered string\n&quot;&lt;/span&gt;,&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Bytes written: %d\n&quot;&lt;/span&gt;, bytesWritten)&lt;br/&gt;&lt;br/&gt;    // 检查缓存中的字节数&lt;br/&gt;    unflushedBufferSize := bufferedWriter.Buffered()&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Bytes buffered: %d\n&quot;&lt;/span&gt;, unflushedBufferSize)&lt;br/&gt;&lt;br/&gt;    // 还有多少字节可用（未使用的缓存大小）&lt;br/&gt;    bytesAvailable := bufferedWriter.Available()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Available buffer: %d\n&quot;&lt;/span&gt;, bytesAvailable)&lt;br/&gt;&lt;br/&gt;    // 写内存buffer到硬盘&lt;br/&gt;    bufferedWriter.Flush()&lt;br/&gt;&lt;br/&gt;    // 丢弃还没有flush的缓存的内容，清除错误并把它的输出传给参数中的writer&lt;br/&gt;    // 当你想将缓存传给另外一个writer时有用&lt;br/&gt;    bufferedWriter.Reset(bufferedWriter)&lt;br/&gt;&lt;br/&gt;    bytesAvailable = bufferedWriter.Available()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Available buffer: %d\n&quot;&lt;/span&gt;, bytesAvailable)&lt;br/&gt;&lt;br/&gt;    // 重新设置缓存的大小。&lt;br/&gt;    // 第一个参数是缓存应该输出到哪里，这个例子中我们使用相同的writer。&lt;br/&gt;    // 如果我们设置的新的大小小于第一个参数writer的缓存大小， 比如10，我们不会得到一个10字节大小的缓存，&lt;br/&gt;    // 而是writer的原始大小的缓存，默认是4096。&lt;br/&gt;    // 它的功能主要还是为了扩容。&lt;br/&gt;    bufferedWriter = bufio.NewWriterSize(&lt;br/&gt;        bufferedWriter,&lt;br/&gt;        8000,&lt;br/&gt;    )&lt;br/&gt;&lt;br/&gt;    // resize后检查缓存的大小&lt;br/&gt;    bytesAvailable = bufferedWriter.Available()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Available buffer: %d\n&quot;&lt;/span&gt;, bytesAvailable)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;读取最多N个字节&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;os.File&lt;/code&gt;提供了文件操作的基本功能， 而&lt;code&gt;io&lt;/code&gt;、&lt;code&gt;ioutil&lt;/code&gt;、&lt;code&gt;bufio&lt;/code&gt;提供了额外的辅助函数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 打开文件，只读&lt;br/&gt;    file, err := os.Open(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    defer file.Close()&lt;br/&gt;&lt;br/&gt;    // 从文件中读取len(b)字节的文件。&lt;br/&gt;    // 返回0字节意味着读取到文件尾了&lt;br/&gt;    // 读取到文件会返回io.EOF的error&lt;br/&gt;    byteSlice := make([]byte, 16)&lt;br/&gt;    bytesRead, err := file.Read(byteSlice)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Number of bytes read: %d\n&quot;&lt;/span&gt;, bytesRead)&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Data read: %s\n&quot;&lt;/span&gt;, byteSlice)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;读取正好N个字节&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;io&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // Open file &lt;span&gt;for&lt;/span&gt; reading&lt;br/&gt;    file, err := os.Open(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // file.Read()可以读取一个小文件到大的byte slice中，&lt;br/&gt;    // 但是io.ReadFull()在文件的字节数小于byte slice字节数的时候会返回错误&lt;br/&gt;    byteSlice := make([]byte, 2)&lt;br/&gt;    numBytesRead, err := io.ReadFull(file, byteSlice)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Number of bytes read: %d\n&quot;&lt;/span&gt;, numBytesRead)&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Data read: %s\n&quot;&lt;/span&gt;, byteSlice)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;读取至少N个字节&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;io&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 打开文件，只读&lt;br/&gt;    file, err := os.Open(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    byteSlice := make([]byte, 512)&lt;br/&gt;    minBytes := 8&lt;br/&gt;    // io.ReadAtLeast()在不能得到最小的字节的时候会返回错误，但会把已读的文件保留&lt;br/&gt;    numBytesRead, err := io.ReadAtLeast(file, byteSlice, minBytes)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Number of bytes read: %d\n&quot;&lt;/span&gt;, numBytesRead)&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Data read: %s\n&quot;&lt;/span&gt;, byteSlice)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;读取全部字节&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    file, err := os.Open(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // os.File.Read(), io.ReadFull() 和&lt;br/&gt;    // io.ReadAtLeast() 在读取之前都需要一个固定大小的byte slice。&lt;br/&gt;    // 但ioutil.ReadAll()会读取reader(这个例子中是file)的每一个字节，然后把字节slice返回。&lt;br/&gt;    data, err := ioutil.ReadAll(file)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Data as hex: %x\n&quot;&lt;/span&gt;, data)&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Data as string: %s\n&quot;&lt;/span&gt;, data)&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;Number of bytes read:&quot;&lt;/span&gt;, len(data))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;快读到内存&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 读取文件到byte slice中&lt;br/&gt;    data, err := ioutil.ReadFile(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    log.Printf(&lt;span&gt;&quot;Data read: %s\n&quot;&lt;/span&gt;, data)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;使用缓存读&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有缓存写也有缓存读。缓存reader会把一些内容缓存在内存中。它会提供比&lt;code&gt;os.File&lt;/code&gt;和&lt;code&gt;io.Reader&lt;/code&gt;更多的函数,缺省的缓存大小是4096，最小缓存是16。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;bufio&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 打开文件，创建buffered reader&lt;br/&gt;    file, err := os.Open(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    bufferedReader := bufio.NewReader(file)&lt;br/&gt;&lt;br/&gt;    // 得到字节，当前指针不变&lt;br/&gt;    byteSlice := make([]byte, 5)&lt;br/&gt;    byteSlice, err = bufferedReader.Peek(5)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Peeked at 5 bytes: %s\n&quot;&lt;/span&gt;, byteSlice)&lt;br/&gt;&lt;br/&gt;    // 读取，指针同时移动&lt;br/&gt;    numBytesRead, err := bufferedReader.Read(byteSlice)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Read %d bytes: %s\n&quot;&lt;/span&gt;, numBytesRead, byteSlice)&lt;br/&gt;&lt;br/&gt;    // 读取一个字节, 如果读取不成功会返回Error&lt;br/&gt;    myByte, err := bufferedReader.ReadByte()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Read 1 byte: %c\n&quot;&lt;/span&gt;, myByte)     &lt;br/&gt;&lt;br/&gt;    // 读取到分隔符，包含分隔符，返回byte slice&lt;br/&gt;    dataBytes, err := bufferedReader.ReadBytes(&lt;span&gt;&#x27;\n&#x27;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Read bytes: %s\n&quot;&lt;/span&gt;, dataBytes)           &lt;br/&gt;&lt;br/&gt;    // 读取到分隔符，包含分隔符，返回字符串&lt;br/&gt;    dataString, err := bufferedReader.ReadString(&lt;span&gt;&#x27;\n&#x27;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Read string: %s\n&quot;&lt;/span&gt;, dataString)     &lt;br/&gt;&lt;br/&gt;    //这个例子读取了很多行，所以test.txt应该包含多行文本才不至于出错&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;使用 scanner&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Scanner&lt;/code&gt;是&lt;code&gt;bufio&lt;/code&gt;包下的类型,在处理文件中以分隔符分隔的文本时很有用。通常我们使用换行符作为分隔符将文件内容分成多行。在CSV文件中，逗号一般作为分隔符。&lt;code&gt;os.File&lt;/code&gt;文件可以被包装成&lt;code&gt;bufio.Scanner&lt;/code&gt;，它就像一个缓存reader。我们会调用&lt;code&gt;Scan()&lt;/code&gt;方法去读取下一个分隔符，使用&lt;code&gt;Text()&lt;/code&gt;或者&lt;code&gt;Bytes()&lt;/code&gt;获取读取的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分隔符可以不是一个简单的字节或者字符，有一个特殊的方法可以实现分隔符的功能，以及将指针移动多少，返回什么数据。如果没有定制的&lt;code&gt;SplitFunc&lt;/code&gt;提供，缺省的&lt;code&gt;ScanLines&lt;/code&gt;会使用&lt;code&gt;newline&lt;/code&gt;字符作为分隔符，其它的分隔函数还包括&lt;code&gt;ScanRunes&lt;/code&gt;和&lt;code&gt;ScanWords&lt;/code&gt;,皆在&lt;code&gt;bufio&lt;/code&gt;包中。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// To define your own split &lt;span&gt;function&lt;/span&gt;, match this fingerprint&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; SplitFunc func(data []byte, atEOF bool) (advance int, token []byte, err error)&lt;br/&gt;&lt;br/&gt;// Returning (0, nil, nil) will tell the scanner&lt;br/&gt;// to scan again, but with a bigger buffer because&lt;br/&gt;// it wasn&lt;span&gt;&#x27;t enough data to reach the delimiter&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面的例子中，为一个文件创建了&lt;code&gt;bufio.Scanner&lt;/code&gt;，并按照单词逐个读取：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;bufio&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    file, err := os.Open(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    scanner := bufio.NewScanner(file)&lt;br/&gt;&lt;br/&gt;    // 缺省的分隔函数是bufio.ScanLines,我们这里使用ScanWords。&lt;br/&gt;    // 也可以定制一个SplitFunc类型的分隔函数&lt;br/&gt;    scanner.Split(bufio.ScanWords)&lt;br/&gt;&lt;br/&gt;    // scan下一个token.&lt;br/&gt;    success := scanner.Scan()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; success == &lt;span&gt;false&lt;/span&gt; {&lt;br/&gt;        // 出现错误或者EOF是返回Error&lt;br/&gt;        err = scanner.Err()&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; err == nil {&lt;br/&gt;            log.Println(&lt;span&gt;&quot;Scan completed and reached EOF&quot;&lt;/span&gt;)&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            log.Fatal(err)&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // 得到数据，Bytes() 或者 Text()&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;First word found:&quot;&lt;/span&gt;, scanner.Text())&lt;br/&gt;&lt;br/&gt;    // 再次调用scanner.Scan()发现下一个token&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;文件压缩&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;打包(zip) 文件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// This example uses zip but standard library&lt;br/&gt;// also supports tar archives&lt;br/&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;archive/zip&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 创建一个打包文件&lt;br/&gt;    outFile, err := os.Create(&lt;span&gt;&quot;test.zip&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    defer outFile.Close()&lt;br/&gt;&lt;br/&gt;    // 创建zip writer&lt;br/&gt;    zipWriter := zip.NewWriter(outFile)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    // 往打包文件中写文件。&lt;br/&gt;    // 这里我们使用硬编码的内容，你可以遍历一个文件夹，把文件夹下的文件以及它们的内容写入到这个打包文件中。&lt;br/&gt;    var filesToArchive = []struct {&lt;br/&gt;        Name, Body string&lt;br/&gt;    } {&lt;br/&gt;        {&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;, &lt;span&gt;&quot;String contents of file&quot;&lt;/span&gt;},&lt;br/&gt;        {&lt;span&gt;&quot;test2.txt&quot;&lt;/span&gt;, &lt;span&gt;&quot;\x61\x62\x63\n&quot;&lt;/span&gt;},&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // 下面将要打包的内容写入到打包文件中，依次写入。&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, file := range filesToArchive {&lt;br/&gt;            fileWriter, err := zipWriter.Create(file.Name)&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;                    log.Fatal(err)&lt;br/&gt;            }&lt;br/&gt;            _, err = fileWriter.Write([]byte(file.Body))&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;                    log.Fatal(err)&lt;br/&gt;            }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // 清理&lt;br/&gt;    err = zipWriter.Close()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;            log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;抽取(unzip) 文件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// This example uses zip but standard library&lt;br/&gt;// also supports tar archives&lt;br/&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;archive/zip&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;io&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;path/filepath&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    zipReader, err := zip.OpenReader(&lt;span&gt;&quot;test.zip&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    defer zipReader.Close()&lt;br/&gt;&lt;br/&gt;    // 遍历打包文件中的每一文件/文件夹&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, file := range zipReader.Reader.File {&lt;br/&gt;        // 打包文件中的文件就像普通的一个文件对象一样&lt;br/&gt;        zippedFile, err := file.Open()&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;            log.Fatal(err)&lt;br/&gt;        }&lt;br/&gt;        defer zippedFile.Close()&lt;br/&gt;&lt;br/&gt;        // 指定抽取的文件名。&lt;br/&gt;        // 你可以指定全路径名或者一个前缀，这样可以把它们放在不同的文件夹中。&lt;br/&gt;        // 我们这个例子使用打包文件中相同的文件名。&lt;br/&gt;        targetDir := &lt;span&gt;&quot;./&quot;&lt;/span&gt;&lt;br/&gt;        extractedFilePath := filepath.Join(&lt;br/&gt;            targetDir,&lt;br/&gt;            file.Name,&lt;br/&gt;        )&lt;br/&gt;&lt;br/&gt;        // 抽取项目或者创建文件夹&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; file.FileInfo().&lt;span&gt;&lt;span&gt;IsDir&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;            // 创建文件夹并设置同样的权限&lt;br/&gt;            log.Println(&lt;span&gt;&quot;Creating directory:&quot;&lt;/span&gt;, extractedFilePath)&lt;br/&gt;            os.MkdirAll(extractedFilePath, file.Mode())&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            //抽取正常的文件&lt;br/&gt;            log.Println(&lt;span&gt;&quot;Extracting file:&quot;&lt;/span&gt;, file.Name)&lt;br/&gt;&lt;br/&gt;            outputFile, err := os.OpenFile(&lt;br/&gt;                extractedFilePath,&lt;br/&gt;                os.O_WRONLY|os.O_CREATE|os.O_TRUNC,&lt;br/&gt;                file.Mode(),&lt;br/&gt;            )&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;                log.Fatal(err)&lt;br/&gt;            }&lt;br/&gt;            defer outputFile.Close()&lt;br/&gt;&lt;br/&gt;            // 通过io.Copy简洁地复制文件内容&lt;br/&gt;            _, err = io.Copy(outputFile, zippedFile)&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;                log.Fatal(err)&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;压缩文件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 这个例子中使用gzip压缩格式，标准库还支持zlib, bz2, flate, lzw&lt;br/&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;compress/gzip&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    outputFile, err := os.Create(&lt;span&gt;&quot;test.txt.gz&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    gzipWriter := gzip.NewWriter(outputFile)&lt;br/&gt;    defer gzipWriter.Close()&lt;br/&gt;&lt;br/&gt;    // 当我们写如到gizp writer数据时，它会依次压缩数据并写入到底层的文件中。&lt;br/&gt;    // 我们不必关心它是如何压缩的，还是像普通的writer一样操作即可。&lt;br/&gt;    _, err = gzipWriter.Write([]byte(&lt;span&gt;&quot;Gophers rule!\n&quot;&lt;/span&gt;))&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    log.Println(&lt;span&gt;&quot;Compressed data written to file.&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;解压缩文件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 这个例子中使用gzip压缩格式，标准库还支持zlib, bz2, flate, lzw&lt;br/&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;compress/gzip&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;io&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 打开一个gzip文件。&lt;br/&gt;    // 文件是一个reader,但是我们可以使用各种数据源，比如web服务器返回的gzipped内容，&lt;br/&gt;    // 它的内容不是一个文件，而是一个内存流&lt;br/&gt;    gzipFile, err := os.Open(&lt;span&gt;&quot;test.txt.gz&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    gzipReader, err := gzip.NewReader(gzipFile)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    defer gzipReader.Close()&lt;br/&gt;&lt;br/&gt;    // 解压缩到一个writer,它是一个file writer&lt;br/&gt;    outfileWriter, err := os.Create(&lt;span&gt;&quot;unzipped.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    defer outfileWriter.Close()&lt;br/&gt;&lt;br/&gt;    // 复制内容&lt;br/&gt;    _, err = io.Copy(outfileWriter, gzipReader)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;文件其它操作&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;临时文件和目录&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ioutil&lt;/code&gt;提供了两个函数: &lt;code&gt;TempDir()&lt;/code&gt; 和 &lt;code&gt;TempFile()&lt;/code&gt;。使用完毕后，调用者负责删除这些临时文件和文件夹。有一点好处就是当你传递一个空字符串作为文件夹名的时候，它会在操作系统的临时文件夹中创建这些项目（/tmp on Linux）。&lt;code&gt;os.TempDir()&lt;/code&gt;返回当前操作系统的临时文件夹。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;     &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;     // 在系统临时文件夹中创建一个临时文件夹&lt;br/&gt;     tempDirPath, err := ioutil.TempDir(&lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;myTempDir&quot;&lt;/span&gt;)&lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;          log.Fatal(err)&lt;br/&gt;     }&lt;br/&gt;     fmt.Println(&lt;span&gt;&quot;Temp dir created:&quot;&lt;/span&gt;, tempDirPath)&lt;br/&gt;&lt;br/&gt;     // 在临时文件夹中创建临时文件&lt;br/&gt;     tempFile, err := ioutil.TempFile(tempDirPath, &lt;span&gt;&quot;myTempFile.txt&quot;&lt;/span&gt;)&lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;          log.Fatal(err)&lt;br/&gt;     }&lt;br/&gt;     fmt.Println(&lt;span&gt;&quot;Temp file created:&quot;&lt;/span&gt;, tempFile.Name())&lt;br/&gt;&lt;br/&gt;     // ... 做一些操作 ...&lt;br/&gt;&lt;br/&gt;     // 关闭文件&lt;br/&gt;     err = tempFile.Close()&lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // 删除我们创建的资源&lt;br/&gt;     err = os.Remove(tempFile.Name())&lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;     err = os.Remove(tempDirPath)&lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;通过HTTP下载文件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;     &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;&quot;io&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;     newFile, err := os.Create(&lt;span&gt;&quot;devdungeon.html&quot;&lt;/span&gt;)&lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;          log.Fatal(err)&lt;br/&gt;     }&lt;br/&gt;     defer newFile.Close()&lt;br/&gt;&lt;br/&gt;     url := &lt;span&gt;&quot;http://www.devdungeon.com/archive&quot;&lt;/span&gt;&lt;br/&gt;     response, err := http.Get(url)&lt;br/&gt;     defer response.Body.Close()&lt;br/&gt;&lt;br/&gt;     // 将HTTP response Body中的内容写入到文件&lt;br/&gt;     // Body满足reader接口，因此我们可以使用ioutil.Copy&lt;br/&gt;     numBytesWritten, err := io.Copy(newFile, response.Body)&lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;          log.Fatal(err)&lt;br/&gt;     }&lt;br/&gt;     log.Printf(&lt;span&gt;&quot;Downloaded %d byte file.\n&quot;&lt;/span&gt;, numBytesWritten)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;哈希和摘要&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;crypto/md5&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;crypto/sha1&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;crypto/sha256&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;crypto/sha512&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    // 得到文件内容&lt;br/&gt;    data, err := ioutil.ReadFile(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // 计算Hash&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Md5: %x\n\n&quot;&lt;/span&gt;, md5.Sum(data))&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Sha1: %x\n\n&quot;&lt;/span&gt;, sha1.Sum(data))&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Sha256: %x\n\n&quot;&lt;/span&gt;, sha256.Sum256(data))&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Sha512: %x\n\n&quot;&lt;/span&gt;, sha512.Sum512(data))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的例子复制整个文件内容到内存中，传递给hash函数。另一个方式是创建一个hash writer, 使用&lt;code&gt;Write&lt;/code&gt;、&lt;code&gt;WriteString&lt;/code&gt;、&lt;code&gt;Copy&lt;/code&gt;将数据传给它。下面的例子使用 md5 hash,但你可以使用其它的Writer。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;crypto/md5&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;io&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    file, err := os.Open(&lt;span&gt;&quot;test.txt&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;    defer file.Close()&lt;br/&gt;&lt;br/&gt;    //创建一个新的hasher,满足writer接口&lt;br/&gt;    hasher := md5.New()&lt;br/&gt;    _, err = io.Copy(hasher, file)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;        log.Fatal(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // 计算&lt;span&gt;hash&lt;/span&gt;并打印结果。&lt;br/&gt;    // 传递 nil 作为参数，因为我们不通参数传递数据，而是通过writer接口。&lt;br/&gt;    sum := hasher.Sum(nil)&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;Md5 checksum: %x\n&quot;&lt;/span&gt;, sum)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注公众号，获取更多精选技术原创文章&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0188679245283019&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;318&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4icJbGAQ8RjXUUVdUZsGADuMBVWePgn7tfrWjjHyc6b8kXTQ7Sdkp0QQFFK4mel5tniczqooMna1CA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6c8afb477cd24499f6462c3320109e8f</guid>
<title>[推荐] 23 张图，带你入门推荐系统</title>
<link>https://toutiao.io/k/ivzzn8a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;300&quot; data-backw=&quot;540&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gicSKPDibrreqCenMeiboc7xEhABibW4JO6F4ZTFB0BVibr6gNXG1NesJLUDia4ysYL7ic3Xy5YbZOzKUgA9wIGMaMicXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;540&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;做广告业务1年多时间了，但是平时的工作主要和&lt;/span&gt;&lt;span&gt;广告工程&lt;/span&gt;&lt;span&gt;有关，核心的广告算法由 AI 部门支持，对我们而言可以说是「黑盒般」的存在，只需要对训练好的模型进行调用即可。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;近期，我打算系统性地学习下广告中的搜索和推荐算法，当然更多是从工程的视角去弄清楚：算法的基本原理、以及面对线上海量数据时算法是如何解决性能问题的？整个过程，我会将有价值的技术点输出成系列文章。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这篇文章属于推荐系统的入门篇，本文暂不考虑线上环境的海量数据，目的是&lt;span&gt;先&lt;/span&gt;了解清楚推荐系统的基本构成，我会通过图解推荐算法以及程序demo的形式展开，内容包括：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;426&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7374658158614403&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kY0PLtjXquTGjdx8aEibK1eYdGamlqlLH9mdweROicxU2y1EtVHY74VkzKBteXnlSAylbsMO1w3X7xQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1097&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;01 走进推荐系统的世界&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;“啤酒与尿布” 的故事相信很多人都听过，年轻爸爸去超市购买尿布时，经常会买点啤酒犒劳自己。因此，沃尔玛将这两种商品进行了捆绑销售，最终获得了更好的销量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4950980246067047&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGo5YmVQVicdjicJibsdeZjI2t6zErbBNDs3eyRGe1ibnRAdQbktyiamXOIxWg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;408&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;“啤酒与尿布”的故事&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这个故事背后的理论依据就是 “推荐算法”，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;因为尿布和啤酒经常出现在同一个购物车中，那么向购买尿布的年轻爸爸推荐啤酒确实有一定道理。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 推荐系统到底解决的是什么问题？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;推荐系统从20世纪90年代就被提出来了，但是真正进入大众视野以及在各大互联网公司中流行起来，还是最近几年的事情。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着移动互联网的发展，越来越多的信息开始在互联网上传播，&lt;/span&gt;&lt;span&gt;产生了严重的信息过载。因此，&lt;/span&gt;&lt;span&gt;如何从众多信息中找到用户感兴趣的信息，这个便是推荐系统的价值。&lt;/span&gt;&lt;span&gt;精准推荐解决了用户痛点，提升了用户体验&lt;/span&gt;&lt;span&gt;，最终便能留住用户。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐系统&lt;/span&gt;&lt;span&gt;本质上就是一个信息过滤系统，通常分为：召回、排序、重排序这3个环节，每个环节逐层过滤，最终从海量的物料库中筛选出几十个用户可能感兴趣的物品推荐给用户。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;184&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.3188888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kY0PLtjXquTGjdx8aEibK1eYvs5QRIQ5eWUEccMPIf764IV2XhjnR9uSlvnav1PKDlZowDZbUiaqX7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐系统的分阶段过滤流程&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;2. 推荐系统的应用场景&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;哪里有海量信息，哪里就有推荐系统，我们每天最常用的APP都涉及到推荐功能：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;资讯类：今日头条、腾讯新闻等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;电商类：淘宝、京东、拼多多、亚马逊等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;娱乐类：抖音、快手、爱奇艺等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;生活服务类：美团、大众点评、携程等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;社交类：微信、陌陌、脉脉等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;362&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.6350257542310522&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kY0PLtjXquTGjdx8aEibK1eYypbUE3C3XzoX2X0jcANicNm8yUJmaA5mdDA1YCsx6iaEkQYfxibNsdJ0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1359&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;头条、京东、网易云音乐中的&lt;/span&gt;&lt;span&gt;推荐功能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;推荐系统的应用场景通常分为以下两类：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;3. 搜索、推荐、广告三者的异同&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;搜索和推荐是AI算法最常见的两个应用场景，在技术上有相通的地方。这里提到广告，主要考虑很多没做过广告业务的同学不清楚为什么广告和搜索、推荐会有关系，所以做下解释。&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;02 推荐系统的整体架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;499&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.8629441624365483&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kY0PLtjXquTGjdx8aEibK1eYCN2ibNSffF2mxY9ly2KqicuLHvZ4CgkD9vyxaXZEwgIm1HUGPa2Yl6Nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;788&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐系统的整体架构&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;上面是推荐系统的整体架构图，自下而上分成了多层，各层的主要作用如下：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据源：&lt;/strong&gt;&lt;/span&gt;推荐算法所依赖的各种数据源，包括物品数据、用户数据、行为日志、其他可利用的业务数据、甚至公司外部的数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;计算平台：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;负责对底层的各种异构数据进行清洗、加工，离线计算和实时计算。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据存储层：&lt;/strong&gt;&lt;span&gt;存储&lt;/span&gt;&lt;span&gt;计算平台处理后的数据，根据需要可落地到不同的存储系统中，比如Redis中可以存储用户特征和用户画像数据，ES中可以用来索引物品数据，Faiss中可以存储用户或者物品的embedding向量等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;召回层：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;包括各种推荐策略或者算法，比如经典的协同过滤，基于内容的召回，基于向量的召回，用于托底的热门推荐等。为了应对线上高并发的流量，召回结果通常会预计算好，建立好倒排索引后存入缓存中。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;融合过滤层：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;触发多路召回，由于召回层的每个召回源都会返回一个候选集，因此这一层需要进行融合和过滤。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;排序层：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;利用机器学习或者深度学习模型，以及更丰富的特征进行重排序，筛选出更小、更精准的推荐集合返回给上层业务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;从数据存储层到召回层、再到融合过滤层和排序层，&lt;span&gt;候选集逐层减少，但是精准性要求越来越高，因此也带来了&lt;/span&gt;计算复杂度的逐层增加，这个便是推荐系统的最大挑战。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实对于推荐引擎来说，最核心的部分主要是两块：特征和算法。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6674786845310596&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kY0PLtjXquTGjdx8aEibK1eYr7BBPyTsick5FRMPqwDQY4Q87No2wKctngqd42Zoqe96XxeBc7JQ3XA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;821&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐引擎的核心功能和技术方案&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;特征计算由于数据量大，通常采用大数据的离线和实时处理技术，像Spark、Flink等，然后将计算结果保存在Redis或者其他存储系统中（比如HBase、MongoDB或者ES），供召回和排序模块使用。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;召回算法的作用是：从海量数据中快速获取一批候选数据，要求是快和尽可能的准。这一层通常有丰富的策略和算法，用来确保多样性，为了更好的推荐效果，某些算法也会做成近实时的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;排序算法的作用是：对多路召回的候选集进行精细化排序。它会利用物品、用户以及它们之间的交叉特征，然后通过复杂的机器学习或者深度学习模型进行打分排序，这一层的特点是计算复杂但是结果更精准。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;03 图解经典的协同过滤算法&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;了解了推荐系统的整体架构和技术方案后，下面带大家深入一下算法细节。这里选择图解的是推荐系统中的明星算法：协同过滤（Collaborative Filtering，CF）。&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;对于工程同学来说，可能觉得 AI 算法晦涩难懂，门槛太高，确实很多深度学习算法的确是这样，但是协同过滤却是一个简单同时效果很好的算法，只要你有初中数学的基础就能看懂。&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 协同过滤是什么？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;协同过滤算法的核心就是&lt;span&gt;「&lt;/span&gt;找相似&lt;span&gt;」&lt;/span&gt;，它基于用户的历史行为（浏览、收藏、评论等），去发现用户对物品的喜好，并对喜好进行度量和打分，最终筛选出推荐集合。它又包括两个分支：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;基于用户的协同过滤：&lt;/strong&gt;&lt;span&gt;User-CF，核心是找相似的人。&lt;span&gt;比如下图中，&lt;/span&gt;用户 A 和用户 C 都购买过物品 a 和物品 b，那么可以认为 A 和 C 是相似的，因为他们共同喜欢的物品多。这样，就可以将用户 A 购买过的物品 d 推荐给用户 C&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;290&quot; data-backw=&quot;573&quot; data-ratio=&quot;0.5052264808362369&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbpJZgkCoibicdHCpTlW7I1XWTmibBc6icSUVxSDa7UkdVj2ezxiaIY8voCWAiaBp0sibPBhGs1S77yvF7Ag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;574&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;基于用户的协同过滤&lt;/span&gt;&lt;span&gt;示例&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;333&quot; data-backw=&quot;573&quot; data-ratio=&quot;0.5801393728222997&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbpJZgkCoibicdHCpTlW7I1XWLnLsxEgvt2FGoAHsycIJ8XsF0IyibBiaRTJt9lfzcEYibB0zvOJxIj7WQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;574&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基于物品的协同过滤&lt;/span&gt;&lt;span&gt;示例&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;2. 如何找相似？&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;前面讲到，协同过滤的核心就是找相似，User-CF是找用户之间的相似，Item-CF是找物品之间的相似，那到底如何衡量两个用户或者物品之间的相似性呢？&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们都知道，对于坐标中的两个点，如果它们之间的夹角越小，这两个点越相似，这就是初中学过的余弦距离，它的计算公式如下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;112&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.19747235387045814&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbpJZgkCoibicdHCpTlW7I1XWUSKy4lpWlabhFxgINbQaO3Z2hODpRtOcjt5Su7g3pJZ2EEvKmn56DQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;633&quot;/&gt;&lt;/p&gt;&lt;p&gt;举个例子，A坐标是（0，3，1），B坐标是（4，3，0），那么这两个点的余弦距离是0.569，余弦距离越接近1，表示它们越相似。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;273&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.4784172661870504&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGowEyKebNjCDFnXicsBKCQejiaPEBWl615HXUPniajI5ftlwhSmos8g2jcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;834&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;除了余弦距离，衡量相似性的方法还有很多种，比如：欧式距离、皮尔逊相关系数、Jaccard 相似系数等等，这里不做展开，只是计算公式上的差异而已。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;3. Item-CF的算法流程&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;清楚了相似性的定义后，下面以Item-CF为例，详细说下这个算法到底是如何选出推荐物品的？&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第一步：整理物品的共现矩阵&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;假设有 A、B、C、D、E 5个用户，其中用户 A 喜欢物品 a、b、c，用户 B 喜欢物品 a、b等等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;309&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.5414438502673797&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoXVTn4UvtChOyLp9lRFE5ZEwbSPBMFGwwA24F3quluc19zXvbxibJqDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;748&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;所谓共现，即：两个物品被同一个用户喜欢了。比如物品 a 和 b，由于他们同时被用户 A、B、C 喜欢，所以 a 和 b 的共现次数是3，采用这种统计方法就可以快速构建出共现矩阵。&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二步：计算物品的相似度矩阵&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于 Item-CF 算法来说，一般不采用前面提到的余弦距离来衡量物品的相似度，而是采用下面的公式&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.19085173501577288&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGo2PYOv8Pq3e4ia7A7qALkN3ArmxeqPicz8jbscIhuKc5JmqJ0C2ZEMdMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;其中，N(u) 表示喜欢物品 u 的用户数，N(v) 表示喜欢物品 v 的用户数，两者的交集表示同时喜欢物品 u 和物品 v 的用户数。很显然，如果两个物品同时被很多人喜欢，那么这两个物品越相似。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;基于第1步计算出来的共现矩阵以及每个物品的喜欢人数，便可以构造出物品的相似度矩阵：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6618531889290012&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoiaqDVj8uCRjzFxq6FVxyC7ne8JaBetmat69J4icTzhw4GLNYqpxIhMQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot; data-backw=&quot;570&quot; data-backh=&quot;377&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;第三步：推荐物品&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;最后一步，便可以基于相似度矩阵推荐物品了，公式如下：&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.18250950570342206&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoAkib6icNUGrgnEqeGMic1IcBPJQ7a9vPp0cuibawDR6ibm7XUcoh9If98Fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1052&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;其中，P&lt;/span&gt;&lt;span&gt;uj &lt;/span&gt;&lt;span&gt;表示用户 u 对物品 j 的感兴趣程度，值越大，越值得被推荐。N(u) 表示用户 u 感兴趣的物品集合，S(j,N) 表示和物品 j 最相似的前 N 个物品，W&lt;/span&gt;&lt;span&gt;ij &lt;/span&gt;&lt;span&gt;表示物品 i 和物品 j 的相似度，R&lt;/span&gt;&lt;span&gt;ui &lt;/span&gt;&lt;span&gt;表示用户 u 对物品 i 的兴趣度。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;上面的公式有点抽象，直接看例子更容易理解，假设我要给用户 E 推荐物品，前面我们已经知道用户 E 喜欢物品 b 和物品 c，喜欢程度假设分别为 0.6 和 0.4。那么，利用上面的公式计算出来的推荐结果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;377&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.661144578313253&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGo0kWejTY1TVx8Uf78EjTfqDUoEeIZfNq89BjU2kDs823or8omic2zECQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;664&quot;/&gt;&lt;/p&gt;&lt;section&gt;因为物品 b 和物品 c 已经被用户 E 喜欢过了，所以不再重复推荐。最终对比用户 E 对物品 a 和物品 d 的&lt;span&gt;感兴&lt;/span&gt;&lt;span&gt;趣程度&lt;/span&gt;，因为 0.682 &amp;gt; 0.3，因此选择推荐物品 a。&lt;/section&gt;&lt;p&gt;&lt;span&gt;04 从0到1搭建一个推荐系统&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;有了上面的理论基础后，我们就可以用 Python 快速实现出一个推荐系统。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 选择数据集&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;这里采用的是推荐领域非常经典的 MovieLens 数据集，它是一个关于电影评分的数据集，官网上提供了多个不同大小的版本，下面以 ml-1m 数据集（大约100万条用户评分记录）为例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下载解压后，文件夹中包含：ratings.dat、movies.dat、users.dat 3个文件，共6040个用户，3900部电影，1000209条评分记录。各个文件的格式都是一样的，每行表示一条记录，字段之间&lt;/span&gt;&lt;span&gt;采用 :: 进行分割。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;以ratings.dat为例，每一行包括4个属性：&lt;/span&gt;&lt;span&gt;UserID, MovieID, Rating, Timestamp。&lt;/span&gt;&lt;span&gt;通过脚本可以统计出不同评分的人数分布：&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoJicVv4k4819mnoNicrdrMMGm483Mbsic5E2jRPicT4fE3mWIpL5AMXJciaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;408&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;2. 读取原始数据&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;程序主要使用数据集中的 ratings.dat 这个文件，通过解析该文件，抽取出 user_id、movie_id、rating 3个字段，最终构造出算法依赖的数据，并保存在变量 dataset 中，它的格式为：dict[user_id][movie_id] = rate&lt;/span&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4166666567325592&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGokfY7uHLQtDQkFGiaKLcODp2VvUjicUc2PaWr3hrCwKFnqd6Gk42g6zQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;408&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3. 构造物品的相似度矩阵&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;基于第 2 步的 dataset，可以进一步统计出每部电影的评分次数以及电影的共生矩阵，然后再生成相似度矩阵。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;429&quot; data-backw=&quot;553&quot; data-ratio=&quot;0.775&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGocy30xfCohvSJVQewx7icvd2ukljfxqcjF6ib15S8hKPxwXePRZJ1iaudQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4. 基于相似度矩阵推荐物品&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;最后，可以基于相似度矩阵进行推荐了，输入一个用户id，先针对该用户评分过的电影，依次选出 top 10 最相似的电影，然后加权求和后计算出每个候选电影的最终评分，最后再选择得分前 5 的电影进行推荐&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;270&quot; data-backw=&quot;546&quot; data-ratio=&quot;0.4953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoND3mzquzScP4h9RJTYhQtFjqXF2LXvRzuiaUF9C0ZKJnrkYJz5W7gfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;5. 调用推荐系统&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;下面选择 &lt;span&gt;UserId=1 这个用户&lt;/span&gt;，看下程序的执行结果。由于推荐程序输出的是 movieId 列表，为了更直观的了解推荐结果，这里转换成电影的标题进行输出。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;256&quot; data-backw=&quot;538&quot; data-ratio=&quot;0.47421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoXZibHQzExp9TDnuloLsHrSxNIkRYSesicBPUdJ0TXUibkIMxfsnyoZ9CA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;最终推荐的前5个电影为：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;273&quot; data-backw=&quot;538&quot; data-ratio=&quot;0.509142053445851&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoTBVwYtWGqP2j5Ogbn6rACa5tMScqibyQzTAgjHbrDIJ3iaib3WfDr8sjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;711&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;05 线上推荐系统的挑战&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过上面的介绍，大家对推荐系统的基本构成应该有了一个初步认识，但是真正运用到线上真实环境时，还会遇到很多算法和工程上的挑战，绝对不是几十行 Python 代码可以搞定的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、上面的示例使用了标准化的数据集，而线上环境的数据是非标准化的，因此涉及到海量数据的收集、清洗和加工，最终构造出模型可使用的数据集。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、复杂且繁琐的特征工程，都说算法模型的上限由数据和特征决定。对于线上环境，需要从业务角度选择出可用的特征，然后对数据进行清洗、标准化、归一化、离散化，并通过实验效果进一步验证特征的有效性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、算法复杂度如何降低？比如上面介绍的Item-CF算法，时间和空间复杂度都是O(N×N)，而线上环境的数据都是千万甚至上亿级别的，如果不做算法优化，可能几天都跑不出数据，或者内存中根本放不下如此大的矩阵数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、实时性如何满足？因为用户的兴趣随着他们最新的行为在实时变化的，如果模型只是基于历史数据进行推荐，可能结果不够精准。因此，如何满足实时性要求，以及对于新加入的物品或者用户该如何推荐，都是要解决的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5、算法效果和性能的权衡。从算法角度追求多样性和准确性，从工程角度追求性能，这两者之间必须找到一个平衡点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6、推荐系统的稳定性和效果追踪。需要有一套完善的数据监控和应用监控体系，同时有 ABTest 平台进行灰度实验，进行效果对比。&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;写在最后&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这篇文章是推荐系统的入门篇，目的是让大家对推荐系统先有一个整体的认识，后续我会再连载出一些文章，详细地介绍面对具体业务和线上海量数据时，推荐系统应该如何设计？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎关注我的公号，如果有疑问可以留言交流。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&amp;lt;END&amp;gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;大家在看：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTM4NDAwMw==&amp;amp;mid=2247485125&amp;amp;idx=1&amp;amp;sn=7cfc053f2fb055588d4313545404cbe2&amp;amp;chksm=fc78d9e9cb0f50ffd639215d4039b3f606734ea5c620457d7de87b10567e783ee9031da04357&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;干货，广告系统架构解密！&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;干货，广告系统架构解密！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTM4NDAwMw==&amp;amp;mid=2247484105&amp;amp;idx=1&amp;amp;sn=de4c763482aa65383dab59b221800cb5&amp;amp;chksm=fc78dde5cb0f54f39e1f278249d236ff2400330be573405435dba458404a5f771715319d694c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程师如何从技术转型做管理？&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;高并发，你真的理解透彻了吗？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTM4NDAwMw==&amp;amp;mid=2247483901&amp;amp;idx=1&amp;amp;sn=c9ae824a1b7d0a8d07f08af8921cd7fc&amp;amp;chksm=fc78ded1cb0f57c7f01cb918e8d9382f9ccafe3a366d14405040b05d3986ff8dfbe6712430a1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程师如何从技术转型做管理？&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;工程师如何从技术转型做管理？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTM4NDAwMw==&amp;amp;mid=2247483900&amp;amp;idx=1&amp;amp;sn=0544715b3f49600f7a5dc816e99dfd69&amp;amp;chksm=fc78ded0cb0f57c690aa73de40ca7805fa7e50b0f53d9ef68c4220458600c4a5eaf51c15b118&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;聊聊直播平台背后的技术架构&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;聊聊直播平台背后的技术架构&lt;/a&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;IT人的职场进阶 &lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;前亚马逊工程师，现58转转技术总监，持续分享个人的成长经历，希望为你的职场发展带来些新思路，欢迎扫码关注我！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;53&quot; data-backw=&quot;53&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;271&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;271&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2kZxxgevbSVSmRuyaiaMzkVjclyc9Vc7CicwsSnbrHMfqIkNkvvt6iajgGscibkAT2aicCtSuf6OEoMk1og/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p/&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;分享或在看是最大的鼓励&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bc81cb54f9b3065cc99593a2f3db6be8</guid>
<title>[推荐] 浅谈如何搭建知识体系 | 码农周刊第 319 期</title>
<link>https://toutiao.io/k/dufazik</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;浅谈如何搭建知识体系 | 码农周刊第 319 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第319期（2020-09-23）&lt;/h2&gt;
        &lt;p&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=319&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3190&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_316.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=319&amp;amp;aid=19803&amp;amp;url=https%3A%2F%2Fwww.sheca.com%2Fassets%2Fwwx%2Fpage1.html%3Fsite%3Dkaifazhe02&quot; target=&quot;_blank&quot;&gt;SHECA 提供 SSL 证书一站式服务，为你的网络安全保驾护航，上海 CA 权威认证&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=319&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;HDFS + Clickhouse + Spark&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;致力于提供一套简单方便、专业可靠、无限可能的 H5 落地页最佳实践。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;9NFL 是京东自研的联邦学习平台。整个平台的内核基于 TensorFlow，并根据业务进行了性能优化，调度则基于 k8s。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;ChatUI 是由达摩院阿里小蜜孵化的对话式界面组件，目前支持阿里经济体 80 多个事业部，数千个 Chatbot，承载着达摩院前沿技术，专注于智能对话领域的设计和技术研发体系，应用至消费者可体验的对话式界面。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;图文并茂&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;适合新手&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;模型性能杀器解读&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;有用&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;详细介绍&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;深入讲解&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;第二弹&lt;/p&gt;
        
        &lt;p&gt;customize personal network&lt;/p&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://github.com/aweiu/scroll-switch&quot; target=&quot;_blank&quot;&gt;GitHub 地址&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;两种不错的思路&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://golang.design/history/&quot; target=&quot;_blank&quot;&gt;文档地址&lt;/a&gt;&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;一枚有趣的程序员&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 436138 即可&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;致力于为企业提供性能优化领域的全方位解决方案&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 423497 即可&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;分享一些信息安全相关的文章&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 393298 即可&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;编程、成长、正能量！&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 381811 即可&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;分享Go语言相关内容&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 133906 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=319&amp;amp;aid=19892&amp;amp;url=http%3A%2F%2Fstore.dangdang.com%2Fgys_04001_3tk3&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/book_319.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;擦亮慧眼&lt;/p&gt;
        
        &lt;p&gt;个人经历&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>