<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>60710272a045417f743b0e8fcf58e083</guid>
<title>字节跳动正式开源 CloudWeGo</title>
<link>https://toutiao.io/k/c4yzbh1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ca625326f418338874b8957798dee870</guid>
<title>[推荐] 性能优化：如何更快地接收数据</title>
<link>https://toutiao.io/k/vf7kpbe</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;69&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.11875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/OdIoEOgFgUGcibO4v5qxt8aOe6ArwX6qwM3icvwPccBDAjM1eoJTf9QbJ2WcUicIw5QkOiasIKgvNV56qWIXqTcBicg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从网卡到应用程序，数据包会经过一系列组件，其中驱动做了什么？内核做了什么？为了优化，我们又能做些什么？整个过程中涉及到诸多细微可调的软硬件参数，并且相互影响，不存在一劳永逸的“银弹”。本文中又拍云系统开发高级工程师杨鹏将结合自己的的实践经验，介绍在深入理解底层机制的基础上如何做出“场景化”的最优配置。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;文章根据杨鹏在又拍云 Open Talk 技术沙龙北京站主题演讲《性能优化：更快地接收数据》整理而成，现场视频及 PPT 可下拉文末点击阅读原文查看。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;大&lt;/span&gt;&lt;span&gt;家好，我是又拍云开发工程师杨鹏，在又拍云工作已有四年时间，期间一直从事 CDN 底层系统开发的工作，负责调度、缓存、负载均衡等 CDN &lt;/span&gt;&lt;span&gt;的核心组件&lt;/span&gt;&lt;span&gt;，很高兴来跟大家分享在网络数据处理方面的经验和感受。&lt;/span&gt;&lt;span&gt;今天分享的主题是&lt;/span&gt;&lt;span&gt;《&lt;/span&gt;&lt;span&gt;如何更快&lt;/span&gt;&lt;span&gt;地&lt;/span&gt;&lt;span&gt;接收数据&lt;/span&gt;&lt;span&gt;》&lt;/span&gt;&lt;span&gt;，主要介绍加速网络数据处理的方法和实践。&lt;/span&gt;&lt;span&gt;希望能帮助大家更好的了解如何在系统的层面，尽量在应用程序无感的情况下做到极致的优化。&lt;/span&gt;&lt;span&gt;言&lt;/span&gt;&lt;span&gt;归正传，进入主题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首&lt;/span&gt;&lt;span&gt;先需要清楚在尝试做任何优化的时候，想到的第一件事情应该是什么&lt;/span&gt;&lt;span&gt;？&lt;/span&gt;&lt;span&gt;个&lt;/span&gt;&lt;span&gt;人觉得是衡量指标&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;做任何&lt;/span&gt;&lt;span&gt;改动&lt;/span&gt;&lt;span&gt;或&lt;/span&gt;&lt;span&gt;优化之前，都要明确地知道&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;是怎样的指标反映出了当前的问题。&lt;/span&gt;&lt;span&gt;那么在做了相应的调整或改动之后，也才能通过指标去验证实际效果与作用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对要分享的主题，有一个围绕上面指标核心的基本原则。&lt;/span&gt;&lt;span&gt;在网络层面做优化，归根结底只需要看一点，假如可以做到网络栈的每个层次，加入能监控到对应层次的丢包率，这样核心的指标，就可以明确地知道问题出在哪一层。&lt;/span&gt;&lt;span&gt;有了明确可监控的指标，之后做相应的调整与实际效果的验证也就很简单了。&lt;/span&gt;&lt;span&gt;当然上述两点相对有点&lt;/span&gt;&lt;span&gt;虚&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;接下来就&lt;/span&gt;&lt;span&gt;是比较干的部分&lt;/span&gt;&lt;span&gt;了&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;367&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6354775828460039&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6ZibspoCcvBZr7f4BSCtZd3dDqykckvQgQST90aIvcpLnUUqsic6XjfJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1026&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如上图所示，&lt;/span&gt;&lt;span&gt;当&lt;/span&gt;&lt;span&gt;收到&lt;/span&gt;&lt;span&gt;一个数据&lt;/span&gt;&lt;span&gt;包&lt;/span&gt;&lt;span&gt;，从&lt;/span&gt;&lt;span&gt;进入网卡&lt;/span&gt;&lt;span&gt;，一直到达应用层，总的数据流程&lt;/span&gt;&lt;span&gt;有&lt;/span&gt;&lt;span&gt;很多&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;在当前阶段&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;无需关注每个流程，留意其中几个核心的关键路径即可&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上是三个关键的路径。&lt;/span&gt;&lt;span&gt;上&lt;/span&gt;&lt;span&gt;图中右边的手绘图指的&lt;/span&gt;&lt;span&gt;就是&lt;/span&gt;&lt;span&gt;这三个步骤，并有意区分了两个颜色。&lt;/span&gt;&lt;span&gt;之所以这么区分是&lt;/span&gt;&lt;span&gt;因为&lt;/span&gt;&lt;strong&gt;&lt;span&gt;接下来会按这两部分进行分享，一是上层驱动部分，二是下层涉及到内核的部分。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;当然内核比较多，通篇只涉及到内核网络子系统，更具体来说是内核跟驱动交互部分的内容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;网卡驱动&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;网卡驱动的部分，网卡是硬件，驱动（driver）是软件，包括了网卡驱动部分的大部分。&lt;/span&gt;&lt;span&gt;这部分可简单分四个点，依次是初始化、启动、监控与调优驱动它的初始化流程。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;网卡驱动-初始化 &lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;驱动初始化&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;过程&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;硬件相关，无需过分关注。&lt;/span&gt;&lt;span&gt;但需注意一点就是注册 ethool 的一系列操作，这个工具可以对网卡做各种各样的操作，不止&lt;/span&gt;&lt;span&gt;可以&lt;/span&gt;&lt;span&gt;读取网卡的&lt;/span&gt;&lt;span&gt;配置，&lt;/span&gt;&lt;span&gt;还可以更改网卡的&lt;/span&gt;&lt;span&gt;配置&lt;/span&gt;&lt;span&gt;参数，是&lt;/span&gt;&lt;span&gt;一个&lt;/span&gt;&lt;span&gt;非常强大的工具。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那&lt;/span&gt;&lt;span&gt;它是如何控制网卡的呢&lt;/span&gt;&lt;span&gt;？&lt;/span&gt;&lt;span&gt;每&lt;/span&gt;&lt;span&gt;个网卡的驱动在初始化时，通过接口，去注册支持 ethool 工具的一系列操作。&lt;/span&gt;&lt;span&gt;ethool 是一套很通用的接口，比如说它支持 100 个功能，但每个型号的网卡，只能支持一个&lt;/span&gt;&lt;span&gt;子集&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;所以具体支持哪些功能，会在这一步进行声明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;322&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5572374645222328&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6WgANs0IGcV3icPZMicYan6uJSyZZNU4P3mVNzukrJJj2Tsk507y2tETA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1057&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上&lt;/span&gt;&lt;span&gt;图截取的部分，是在初始化时&lt;/span&gt;&lt;span&gt;结构体的赋值。&lt;/span&gt;&lt;span&gt;前面两个可以简单看一下，驱动在初始化的时候会告诉内核，如果想要操作这块网卡对应的回调函数&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;其中最主要的是启动和关闭，有用 ifconfig 工具操作网卡的应该都很熟悉，当用 ifconfig &lt;/span&gt;&lt;span&gt;up/down &lt;/span&gt;&lt;span&gt;一张网卡的时候，调用的都是它初始化时&lt;/span&gt;&lt;span&gt;指定&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;这&lt;/span&gt;&lt;span&gt;几个函数。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;网卡驱动-启动&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;驱动初始化过程之后就是启动（open）中的流程了，一共分为四步：&lt;/span&gt;&lt;span&gt;分配&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;rx/tx&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;队列内存、&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开启 NAPI、注册中断处理函数、开启中断。&lt;/span&gt;&lt;span&gt;其中注册中断处理函数和开启中断是理所当然的，任何一个硬件接入到机器上都需要做这个操作。&lt;/span&gt;&lt;span&gt;当后面收到一些事件时，它需要通过中断去通知系统，然后开启中断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二步的 NAPI 后面会详细说明&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;这里先重点关注启动过程中对内存的分配。&lt;/span&gt;&lt;span&gt;网卡在收到数据时，都必须把数据从链路层拷贝到机器的内存里，而这块内存就是网卡在启动时，通过接口向内核、向操作系统申请而来的。&lt;/span&gt;&lt;span&gt;内存一旦申请下来，地址确定之后，后续网卡在收到数据的时候，就可以直接通过 DMA 的机制，直接把数据包传送到内存固定的地址中去，甚至不需要 CPU 的参与。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;407&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7038269550748752&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d62foTz8b7cs9jBILKcttLEYyFHicVwaKmcy0WqXKia7RP81vBap7OH4Tw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;601&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到队列内存的分配可以看下上图，很早之前的网卡都是单队列的机制，但现代的网卡大多都是多队列的。&lt;/span&gt;&lt;span&gt;好处就是机器网卡的数据接收可以被负载均衡到多个 CPU 上，因此会提供多个队列，这里先有个概念后面会详细说明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;412&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7127659574468085&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6aSo4giaGYvwLLic9Dg4ia5gq4dDI37FXd8GP3nLIYL79hVGuKOW3OGFGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;752&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下&lt;/span&gt;&lt;span&gt;面来详细介绍启动过程中的第二步 NAPI，这是现代网络数据包处理框架中非常重要的一个扩展。&lt;/span&gt;&lt;span&gt;之所以现在能支持&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10G、20G、25G&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;等非常高速的网卡，NAPI 机制起到了非常大的作用。&lt;/span&gt;&lt;span&gt;当然 NAPI 并不复杂，其核心就两点：&lt;/span&gt;&lt;span&gt;中断、轮循。&lt;/span&gt;&lt;span&gt;一般来说，网卡在接收数据时肯定是收一个包，产生一个中断，然后在中断处理函数的时候将包处理掉。&lt;/span&gt;&lt;span&gt;处在收包、处理中断，下一个收包，再处理中断，这样的循环中。&lt;/span&gt;&lt;span&gt;而 NAPI 机制优势在于只需要一次中断，收到之后就可以通过轮循的方式，把队列内存中所有的数据都拿走，达到非常高效的状态。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;网卡驱动-监控&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;接下来就是在驱动这层可以做的监控了，需要去关注其中一些数据的来源。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;sudo ethtool -S eth0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;NIC&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;statistics:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;rx_packets&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;597028087&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;tx_packets&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;5924278060&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;rx_bytes&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;112643393747&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;tx_bytes&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;990080156714&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;rx_broadcast&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;96&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;tx_broadcast&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;116&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;rx_multicast&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;20294528&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__meta&quot;&gt;....&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;首先非常重要的是&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ethool 工具，它可以拿到网卡中统计的数据&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;接收的包数量、处理的流量等等常规的信息，而我们更多的是需要关注到异常信息。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat /sys/&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;/&lt;span class=&quot;code-snippet__title&quot;&gt;net&lt;/span&gt;/&lt;span class=&quot;code-snippet__title&quot;&gt;eth0&lt;/span&gt;/&lt;span class=&quot;code-snippet__title&quot;&gt;statistics&lt;/span&gt;/&lt;span class=&quot;code-snippet__title&quot;&gt;rx_dropped&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;通过 sysfs 的接口，可以看到网卡的丢包数，这就是系统出现异常的一个标志。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;86&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.14858705560619873&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d61dMk5rkAnL9IBXlicPveKc0Ls5aodTRy1XAvRyhWTlubvTS3PzHb5NA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1097&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;三个途径拿到的信息与前面差不多，只是格式有些乱，仅做了解即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;297&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5144270403957131&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6sZQzK1yMuOwLl49ibFgGic9n1SibIBNmeibyOdgtiaq2h9bkeVvj4nQSAaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1213&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图是要分享的一个线上案例。&lt;/span&gt;&lt;span&gt;当时业务上出现异常，经过排查最后是怀疑到网卡这层，为此需要做进一步的分析。&lt;/span&gt;&lt;span&gt;通过 ifconfig 工具可以很直观的查看到网卡的一些统计数据，图中可以看到网卡的 errors 数据指标非常高，明显出现了问题。&lt;/span&gt;&lt;span&gt;但更有意思的一点是， errors 右边最后的 frame 指标数值跟它完全相同。&lt;/span&gt;&lt;span&gt;因为 errors 指标是网卡中很多错误累加之后的指标，与它相邻的 dropped、overruns 这俩个指标都是零，也就是说在当时的状态下，网卡的错误大部分来自 frame。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然这只是瞬时的状态，上图中下面部分是监控数据，可以明显看到波动的变化，确实是某一台机器异常了。&lt;/span&gt;&lt;span&gt;frame 错误一般是在网卡收到数据包，进行 RCR 校验时失败导致的。&lt;/span&gt;&lt;span&gt;当收到数据包，会对该包中的内容做校验，当发现跟已经存下来的校验不匹配，说明包是损坏的，因此会直接将其丢掉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个原因是比较好分析的，两点一线，机器的网卡通过网线接到上联交换机。&lt;/span&gt;&lt;span&gt;当这里出现问题，不是网线就是机器本身的网卡问题，或者是对端交换机的端口，也就是上联交换机端口出现问题。&lt;/span&gt;&lt;span&gt;当然按第一优先级去分析，协调运维去更换了机器对应的网线，后面的指标情况也反映出了效果，指标直接突降直到完全消失，错误也就不复存在了，对应上层的业务也很快恢复了正常。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;网卡驱动-调优&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;说完监控之后来看下最后的调优。&lt;/span&gt;&lt;span&gt;在这个层面能调整的东西不多，主要是针对网卡多队列的调整，比较直观。&lt;/span&gt;&lt;span&gt;调整队列数目、大小，各队列间的权重，甚至是调整哈希的字段，都是可以的。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;sudo ethtool -l eth0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;parameters for eth0:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;Pre-set&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;maximums:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;RX&lt;/span&gt;:   &lt;span class=&quot;code-snippet__string&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;TX&lt;/span&gt;:   &lt;span class=&quot;code-snippet__string&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Other&lt;/span&gt;:    &lt;span class=&quot;code-snippet__string&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Combined&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;hardware settings:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;RX&lt;/span&gt;:   &lt;span class=&quot;code-snippet__string&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;TX&lt;/span&gt;:   &lt;span class=&quot;code-snippet__string&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Other&lt;/span&gt;:    &lt;span class=&quot;code-snippet__string&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Combined&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上图是针对多队列的调整。&lt;/span&gt;&lt;span&gt;为了说明刚才的概念，举个例子，比如有个 web server 绑定到了 CPU2，而机器有多个 CPU，这个机器的网卡也是多队列的，其中某个队列会被 CPU2 处理。&lt;/span&gt;&lt;span&gt;这个时候就会有一个问题，因为网卡有多个队列，所以 80 端口的流量只会被分配到其中一个队列上去。&lt;/span&gt;&lt;span&gt;假如这个队列不是由 CPU2 处理的，就会涉及到一些数据的腾挪。&lt;/span&gt;&lt;span&gt;底层把数据接收上来后再交给应用层的时候，需要把这个数据移动一下。&lt;/span&gt;&lt;span&gt;如果本来在 CPU1 处理的，需要挪到 CPU2 去，这时会涉及到 CPU cache 的失效，这对高速运转的 CPU 来说是代价很高的操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么该怎么做呢？&lt;/span&gt;&lt;span&gt;我们可以通过前面提到的工具，特意把 80 端口 tcp 数据流量导向到对应 CPU2 处理的网卡队列。&lt;/span&gt;&lt;span&gt;这么做的效果是数据包从到达网卡开始，到内核处理完再到送达应用层，都是同一个 CPU。&lt;/span&gt;&lt;span&gt;这样最大的好处就是缓存，CPU 的 cache 始终是热的，如此整体下来，它的延迟、效果也会非常好。&lt;/span&gt;&lt;span&gt;当然这个例子并不实际，主要是为了说明能做到的一个效果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;内核网络子系统&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;说完了整个网卡驱动部分，接下来是讲解内核子系统部分，这块会分为软中断与网络子系统初始化两部分来分享。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;软中断&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;229&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3969298245614035&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6dLltHTavYDU2DoR89d3HUQiagpEerpmS7eFM1dFZWl5rgrWiaqic7vgWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;912&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图的 NETDEV 是 linux 网络子系统每年都会开的一个分会，其中比较有意思的点是每年大会举办的届数会以一个特殊字符来表示。&lt;/span&gt;&lt;span&gt;图中是办到了 0X15 届，想必也都发现这是 16 进制的数字，0X15 刚好就是 21 年，也是比较极客范。&lt;/span&gt;&lt;span&gt;对网络子系统感兴趣的可以去关注一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;448&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7752126366950183&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6CSXPyicoQ57AjIkoXhCo67o3smyz1dgE17Eb4UsLBicwDnxc9esTjmNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;823&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;言归正传，内核延时任务有多种机制，而软中断只是其中一种。&lt;/span&gt;&lt;span&gt;上图是 linux 的基本结构，上层是用户态，中间是内核，下层是硬件，很抽象的一个分层。&lt;/span&gt;&lt;span&gt;用户态和内核态之间会有两种交互的方式：&lt;/span&gt;&lt;span&gt;通过系统调用，或者通过异常可以陷入到内核态里面。&lt;/span&gt;&lt;span&gt;那底层的硬件跟内核又是怎么交互的呢？&lt;/span&gt;&lt;span&gt;答案是中断，硬件跟内核交互的时候必须通过中断，处理任何事件都需要产生一个中断信号来告知 CPU 与内核。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过这样的机制一般情况下也许没有问题，但是对网络数据来说，一个数据报一个中断，这样会有很明显的两个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题一：&lt;/span&gt;&lt;span&gt;中断在处理期间，会屏蔽之前的中断信号。&lt;/span&gt;&lt;span&gt;当一个中断处理的时间很长，在处理期间收到的中断信号都会丢掉。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;如果处理一个包用了十秒，在这十秒期间又收到了五个数据包，但因为中断信号丢了，即便前面的处理完了，后面的数据包也不会再处理了。&lt;/span&gt;&lt;span&gt;对应到 tcp 这边，假如客户端给服务端发了一个数据包，几秒后处理完了，但在处理期间客户端又发了后续的三个包，但是服务端后面并不知道，以为只收到了一个包，这时客户端又在等待服务端的回包，如此会导致两边都卡住了，也说明了信号丢失是一个极其严重的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题二：&lt;/span&gt;&lt;span&gt;一个数据包触发一次中断处理的话，当有大量的数据包到来后，就会产生非常大量的中断。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;如果达到了 10 万、50 万、甚至百万的 pps，那 CPU 就需要处理大量的网络中断，也就不用干其他事情了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;而针对以上两点问题的解决方法就是让中断处理尽可能的短。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;具体来说，不能在中断处理函数，只能把它揪出来，交到软中断机制里。&lt;/span&gt;&lt;span&gt;这样之后的实际结果是硬件的中断处理做的事情就很少了，将接收数据等一些必须的事情交到软中断去完成，这也是软中断存在的意义。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;smp_hotplug_thread&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;softirq_threads&lt;/span&gt; = {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  .store              = &amp;amp;ksoftirqd,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  .thread_should_run  = ksoftirqd_should_run,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  .thread_fn          = run_ksoftirqd,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  .thread-comm        = “ksoftirqd/%u”,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; _&lt;span class=&quot;code-snippet__function&quot;&gt;init &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;spawn_ksoftirqd&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  regiter_cpu_notifier(&amp;amp;cpu_nfb);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  BUG_ON(smpboot_register_percpu_thread(&amp;amp;softirq_threads));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;early_initcall(spawn_ksoftirqd);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;软中断机制是通过内核的线程来实现的。&lt;/span&gt;&lt;span&gt;图中是对应的一个内核线程。&lt;/span&gt;&lt;span&gt;服务器 CPU 都会有一个 ksoftirqd 这样的内核线程，多 CPU 的机器会相对应的有多个线程。&lt;/span&gt;&lt;span&gt;图中结构体最后一个成员 ksoftirqd/，如果有三个 CPU 对应就会有 /0/1/2 三个内核线程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;274&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.47342995169082125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6GnpS7VyxdbJJqeSYbnT625efpRlibdcicVfDCNqM64vGJFpkT3VLVugw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1035&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;软中断机制的信息在 softirqs 下面可以看到。&lt;/span&gt;&lt;span&gt;软中断并不多只有几种，其中需要关注的，跟网络相关的就是 NET-TX 和 NET-RX，网络数据收发的两种场景。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;内核初始化&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;铺垫完软中断之后，下面来看内核初始化的流程。&lt;/span&gt;&lt;span&gt;主要为两步：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;409&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7073446327683616&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6uxvJibBrMdU0oBY86Rz0Zhzw3VfLcpILemGYLcDpqoCKRWmeFRJkiaow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;885&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图是手绘的一个数据包的处理流程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; irqreturn_t &lt;span class=&quot;code-snippet__title&quot;&gt;igb_msix_ring&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; irq, &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *data)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;igb_q_vector&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;q_vector&lt;/span&gt; = &lt;span class=&quot;code-snippet__title&quot;&gt;data&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  igb_write_itr(q_vector);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  napi_schedule(&amp;amp;q_vector-&amp;gt;napi);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; IRO_HANDLED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上面的代码是 igb 网卡驱动中断处理函数做的事情。&lt;/span&gt;&lt;span&gt;如果省略掉开始的变量声明和后面的返回，这个中断处理函数只有两行代码，非常短。&lt;/span&gt;&lt;span&gt;需要关注的是第二个，在硬件中断处理函数中，只用激活外部 NIPA 软中断处理机制，无需做其他任何事情。&lt;/span&gt;&lt;span&gt;因此这个中断处理函数会返回的非常快。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;NIPI 激活&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; ____napi_schedule(&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; softnet_data *sd, &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; napi_struct *napi)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  list_add_tail(&amp;amp;napi-&amp;gt;poll_list, &amp;amp;sd-&amp;gt;poll_list);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  _raise_softirq_irqoff(NET_RX_SOFTIRQ);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;NIPI 的激活也很简单，主要为两步。&lt;/span&gt;&lt;span&gt;内核网络系统在初始化的时每个 CPU 都会有一个结构体，它会把队列对应的信息插入到结构体的链表里。&lt;/span&gt;&lt;span&gt;换句话说，每个网卡队列在收到数据的时候，需要把自己的队列信息告诉对应的 CPU，将这两个信息绑定起来，保证某个 CPU 处理某个队列。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除此之外，还要与触发硬中断一样，需要触发软中断。&lt;/span&gt;&lt;span&gt;下图将很多步骤放到了一块，前面讲过的就不再赘述了。&lt;/span&gt;&lt;span&gt;图中要关注的是软中断是怎么触发的。&lt;/span&gt;&lt;span&gt;与硬中断差不多，软中断也有中断的向量表。&lt;/span&gt;&lt;span&gt;每个中断号，都会对应一个处理函数，当需要处理某个中断，只需要在对应的中断向量表里找就好了，跟硬中断的处理是一模一样的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;367&quot; data-backw=&quot;546&quot; data-ratio=&quot;0.6716666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6KpoG50JeNEVFjOLgQLFeibEOBDYR5UHLj7RmNibmdUicSmZPVUNWqZVQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;数据接收-监控&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;说完了运作机制，再来看看有哪些地方可以做监控。&lt;/span&gt;&lt;span&gt;在 proc 下面有很多东西，可以看到中断的处理情况。&lt;/span&gt;&lt;span&gt;第一列就是中断号，每个设备都有独立的中断号，这是写死的。&lt;/span&gt;&lt;span&gt;对网络来说只需要关注网卡对应的中断号，图中是 65、66、67、68 等。&lt;/span&gt;&lt;span&gt;当然看实际的数字并没有意义，而是需要看它的分布情况，中断是不是被不同 CPU 在处理，如果所有的中断都是被一个 CPU 处理，那么就需要做些调整，把它分散开。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;211&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.36446886446886445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6hAtkiaWv5o6CgszfjEC8xCyYm7VtiakzgV824Rhj6PeQmoQXkibWRt2icA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1092&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;数据接收-调优&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;中断可以做的调整有两个：&lt;/span&gt;&lt;span&gt;一是中断合并，二是中断亲和性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;自适应中断合并&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;rx-usecs：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;数据帧到达后，延迟多长时间产生中断信号，单位微秒&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;rx-frames：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;触发中断前积累数据帧的最大个数&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;rx-usecs-irq：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;如果有中断处理正在执行，当前中断延迟多久送达 &lt;strong&gt;CPU&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;rx-frames-irq：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;如果有中断处理正在执行，最多积累多少个数据帧&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面列的都是硬件网卡支持的功能。&lt;/span&gt;&lt;span&gt;NAPI 本质上也是中断合并的机制，假如有很多包的到来，NAPI 就可以做到只产生一个中断，因此不需要硬件来帮助做中断合并，实际效果是跟 NAPI 是相同的，都是减少了总的中断数量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;中断亲和性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ sudo bash -c ‘echo &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &amp;gt; &lt;span class=&quot;code-snippet__regexp&quot;&gt;/proc/irq&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/8/smp&lt;/span&gt;_affinity’&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这个与网卡多队列是密切相关的。如果网卡有多个队列，就能手动来明确指定由哪个 CPU 来处理，均衡的把数据处理的负载分散到机器的可用 CPU 上。配置也比较简单，只需&lt;/span&gt;&lt;span&gt;把数字写入到 /proc 对应的这个文件中就可以了。&lt;/span&gt;&lt;span&gt;这是个位数组，转成二进制后就会有对应的 CPU 去处理。&lt;/span&gt;&lt;span&gt;如果写个 1，可能就是 CPU0 来处理；&lt;/span&gt;&lt;span&gt;如果写个 4，转化成二进制是 100，那么就会交给 CPU2 去处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外有个小问题需要注意，很多发行版可能会自带一个 irqbalance 的守护进程&lt;/span&gt;&lt;span&gt;（http://irqbalance.github.io/irqbalance）&lt;/span&gt;&lt;span&gt;，会将手动中断均衡的设置给覆盖掉。这个程序做的核心事情就是把上面手动设置文件的操作放到程序里，有兴趣可以去看下它的代码（&lt;/span&gt;&lt;span&gt;https://github.com/Irqbalance/irqbalance/blob/master/activate.c&lt;/span&gt;&lt;span&gt;），也是把这个文件打开，写对应的数字进去就可以了。 &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;内核-数据处理&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;最后是数据处理部分了。&lt;/span&gt;&lt;span&gt;当数据到达网卡，进入队列内存后，就需要内核从队列内存中将数据拉出来。&lt;/span&gt;&lt;span&gt;如果机器的 PPS 达到了十万甚至百万，而 CPU 只处理网络数据的话，那其他基本的业务逻辑也就不用干了，因此不能让数据包的处理独占整个 CPU，而核心点是怎么去做限制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对上述问题主要有两方面的限制：&lt;/span&gt;&lt;span&gt;整体的限制和单次的限制&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (!list_empty(&amp;amp;sd-&amp;gt;poll_list)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;napi_struct&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;n&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; work,weight;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (unlikely(budget &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; || time_after_eq(jiffies, time_limit)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;goto&lt;/span&gt; softnet_break;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;整体限制很好理解，就是一个 CPU 对应一个队列。&lt;/span&gt;&lt;span&gt;如果 CPU 的数量比队列数量少，那么一个 CPU 可能需要处理多个队列。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;weight&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;n-&amp;gt;weight;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;work&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;0;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;(test_bit(NAPI_STATE_SCHED, &amp;amp;n-&amp;gt;state)) {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;work&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;n-&amp;gt;poll(n,weight);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;trace_napi_poll(n);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;WARN_ON_ONCE(work&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&amp;gt; weight);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;budget&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;-= work;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;单次限制则是限制一个队列在一轮里处理包的数量。&lt;/span&gt;&lt;span&gt;达到限制之后就停下来，等待下一轮的处理。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;softnet_break:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  sd-&amp;gt;time_squeeze++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  _raise_softirq_irqoff(NET_RX_SOFTIRQ);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;而停下来就是很关键的节点，幸运的是有对应的指标记录，有 time-squeeze 这样中断的计数，拿到这个信息就可以判断出机器的网络处理是否有瓶颈，被迫中断的频率高低。&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;124&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.2140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6wz7Awj86YEibEDKzp2rOKDbfewgkuCGWjJkjRU3LADzt6hcj5zib907Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图是监控 CPU 指标的数据，格式很简单，每行对应一个 CPU，数值之间用空格分割，输出格式为 16 进制。&lt;/span&gt;&lt;span&gt;那么每一列数值又代表什么呢？&lt;/span&gt;&lt;span&gt;很不幸，这个没有文档，只能通过检查使用的内核版本，然后去看对应的代码。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;seq_printf（seq,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%08x %08x %08x %08x %08x %08x %08x %08x %08x %08x %08x\n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     sd-&amp;gt;processed, sd-&amp;gt;dropped, sd-&amp;gt;time_squeeze, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__regexp&quot;&gt;/* was fastroute */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     sd-&amp;gt;cpu_collision, sd-&amp;gt;received_rps, flow_limit_count）;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面说明了文件中每个字段都是怎么来的，实际情况可能会有所不同，因为随着内核版本的迭代，字段的数量以及字段的顺序都有可能发生变化，其中与网络数据处理被中断次数相关的就是 squeeze 字段：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; * sd-&amp;gt;processed          处理的包数量（多网卡 bond 模式可能多于实际的收包数量）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; * sd-&amp;gt;dropped             丢包数量，因为队列满了&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; * sd-&amp;gt;time_spueeze      软中断处理 net_rx_action 被迫打断的次数&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; * sd-&amp;gt;cpu_collision       发送数据时获取设备锁冲突，比如多个 CPU 同时发送数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; * sd-&amp;gt;received_rps       当前 CPU 被唤醒的次数（通过处理器间中断）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;* sd-&amp;gt;flow_limit_count    触发 flow limit 的次数&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;下图是业务中遇到相关问题的案例，最后排查到 CPU 层面。&lt;/span&gt;&lt;span&gt;图一是 TOP 命令的输出，显示了每个 CPU 的使用量，其中红框标出的 CPU4 的使用率存在着异常，尤其是倒数第二列的 SI 占用达到了 89%。&lt;/span&gt;&lt;span&gt;SI 是 softirq 的缩写，表示 CPU 花在软中断处理上的时间占比，而图中 CPU4 在时间占比上明显过高。&lt;/span&gt;&lt;span&gt;图二则是对应图一的输出结果，CPU4 对应的是第五行，其中第三列数值明显高于其他 CPU，表明它在处理网络数据的时被频繁的打断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;569&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9850074962518741&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d6PwK8Uy7CwoQyUnFVBCAdGFOJV14BGib8CLHfgbTWYbF1jic0lcKfqQMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;667&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;459&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7935323383084577&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUF8ECg0JIbujSHGiaYKhs9d68sJ3mQYnfImC4exGl5kIEwN3Dj0FeJ5oZajuJkib3Yd9fnvF7trU36Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对上面的问题推断 CPU4 存在一定的性能衰退，也许是质量不过关或其他的原因。&lt;/span&gt;&lt;span&gt;为了验证是否是性能衰退，写了一个简单的 python 脚本，一个一直去累加的死循环。&lt;/span&gt;&lt;span&gt;每次运行时，把这段脚本绑定到某个 CPU 上，然后观察不同 CPU 耗时的对比。&lt;/span&gt;&lt;span&gt;最后对比结果也显示 CPU4 的耗时比其他的 CPU 高了几倍，也验证了之前的推断。&lt;/span&gt;&lt;span&gt;之后协调运维更换了 CPU，意向指标也就恢复正常了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;以上所有操作都只是在数据包从网卡到了内核层，还没到常见的协议，只是完成了万里长征第一步，后面还有一系列的步骤，例如数据包的压缩（GRO）、网卡多队列软件（RPS）还有 RFS 在负载均衡的基础上考虑流的特征，就是 IP 端口四元组的特征，最后才是把数据递交到 IP 层，以及到熟悉的 TCP 层。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总的来说，今天的分享都是围绕驱动来做的，我想强调的性能优化的核心点在于指标，不能测量也就很难去改善，要有指标的存在，这样一切的优化才有意义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现场视频、PPT 以及更多 Open Talk 技术干货，请点击&lt;/span&gt;&lt;span&gt;&lt;strong&gt;↓↓阅读原文↓↓&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;查看&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2&gt;&lt;hr/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;快 来&lt;/span&gt;&lt;strong&gt;&lt;span&gt; 找 &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;又&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 小 拍&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;h2&gt;&lt;hr/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;section&gt;&lt;section&gt;&lt;img data-backh=&quot;319&quot; data-backw=&quot;546&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;319&quot; data-ratio=&quot;0.5833333333333334&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUFAQemPjhnJTKkl7TwPLibto5mn4m21ZrshVQSeibqIYTw6XqhicImzlLxeW0v3BE4ycJbHd84ic5Oiayg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;推 荐 阅 读&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODc5ODgyMw==&amp;amp;mid=2653586009&amp;amp;idx=1&amp;amp;sn=09aad11a1cc56357be8bb0b2502ff566&amp;amp;chksm=bd1b16d18a6c9fc7fd407aa041c890c7701863f5fe64930a9b68791b3c49a9fbbe543dc55a62&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;273&quot; data-backw=&quot;546&quot; data-before-oversubscription-url=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUElpXebXbjgibum7I6LiboCtK6KV8gcYQ1mFV2XdonnCrOhaQdtBNh71z1u0JNzcdrx5EQRg56zb0IA/0?wx_fmt=jpeg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;273&quot; data-oversubscription-url=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUEUylg3O41wsJR8aiasuMebIJsicZ1HyIIL8XbjU22CGg8eV9ZciclQxtibdwcudh6PAicxj2D6ibG3T8mg/0?wx_fmt=jpeg&quot; data-ratio=&quot;0.5007751937984496&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUHgQBPeJ4VZoV13ib2HY93ETcX2lcC1BwsQUYfCqhEZ3w6TiaweiaXbtlnYDicZibySnBukq0VdmYMzGjA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;645&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODc5ODgyMw==&amp;amp;mid=2653585893&amp;amp;idx=1&amp;amp;sn=a77f524feeabe1d1f203baa5ebc49454&amp;amp;chksm=bd1b156d8a6c9c7bcbe23557e6eb86932dc8a1fddbc20216321148d3719a931456a4348b8370&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;273&quot; data-backw=&quot;546&quot; data-before-oversubscription-url=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUElpXebXbjgibum7I6LiboCtK6KV8gcYQ1mFV2XdonnCrOhaQdtBNh71z1u0JNzcdrx5EQRg56zb0IA/0?wx_fmt=jpeg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;273&quot; data-oversubscription-url=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUEUylg3O41wsJR8aiasuMebIJsicZ1HyIIL8XbjU22CGg8eV9ZciclQxtibdwcudh6PAicxj2D6ibG3T8mg/0?wx_fmt=jpeg&quot; data-ratio=&quot;0.5007751937984496&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUHgQBPeJ4VZoV13ib2HY93ET3tGzaa4btG0wzrKP7nje8AoEiau9TvicBSdnmVNiaEfEtx7XI6icstH3cQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;645&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODc5ODgyMw==&amp;amp;mid=2653585879&amp;amp;idx=1&amp;amp;sn=35cf3079ee61f8326ef624a4c3f99813&amp;amp;chksm=bd1b155f8a6c9c49a48eaac27ea940464e439ffdec153d818bc07d2866c177fad1c57c71a72d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;273&quot; data-backw=&quot;546&quot; data-before-oversubscription-url=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUElpXebXbjgibum7I6LiboCtK6KV8gcYQ1mFV2XdonnCrOhaQdtBNh71z1u0JNzcdrx5EQRg56zb0IA/0?wx_fmt=jpeg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;273&quot; data-oversubscription-url=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUEUylg3O41wsJR8aiasuMebIJsicZ1HyIIL8XbjU22CGg8eV9ZciclQxtibdwcudh6PAicxj2D6ibG3T8mg/0?wx_fmt=jpeg&quot; data-ratio=&quot;0.5007751937984496&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUHgQBPeJ4VZoV13ib2HY93ETd4zC3JPWxyLQtE1VpofmV5u9fjKdCOZQbr4WJjza6IDttG5iaicicQTRw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;645&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;设为星标&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9037037&quot; data-type=&quot;png&quot; data-w=&quot;135&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUHbb6jzHdqCC83fulktKZtY2WUNN9vVlgibWSiaR7RDHYbVyTy8icCibHV04APOmEqXhdoJv7GHJDMgvg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;更新不错过&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4276db9912991544881cefde9c3946ca</guid>
<title>[推荐] 成为高效工程师的四步法则</title>
<link>https://toutiao.io/k/1xldt8h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;article&gt;&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;成为高效工程师并不只是具有很好的代码和架构能力，而是要能够站在业务、用户的角度理解自己所做的产品，让技术成为业务价值的基石，并能够不断扩大自己的影响力，通过撬动更多的资源提升整个团队的效能。原文：4 Steps To Be An Effective Engineer&lt;span&gt;[1]&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这篇文章是我和一位同事讨论的结果。我喜欢诚实、坦率的对待这些事情，但很多时候周围的人并不理解我的意图和想法。&lt;/p&gt;&lt;p&gt;我相信用诚实和坦率的态度分享知识和观点，对我们大家都有好处。&lt;/p&gt;&lt;p&gt;所以在这篇文章中，我将分享我对成为一名高效工程师的想法。&lt;/p&gt;&lt;p&gt;注意：其中某些想法可能会让你大叫“这完全就是胡扯!”，但请你坚持多看5分钟&lt;span&gt;[2]&lt;/span&gt;再做决定。&lt;/p&gt;&lt;h5&gt;”高效（to be effective）“到底是什么意思？&lt;/h5&gt;&lt;p&gt;“有效（Being effective）”意味着能够对周围的现实&lt;span&gt;产生明显和积极的影响&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;这些影响主要有以下几个方面：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;em&gt;价值&lt;/em&gt;&lt;br/&gt;你能够为所从事的业务增加价值。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;em&gt;机遇&lt;/em&gt;&lt;br/&gt;你有能力抓住机会，而不会留有遗憾。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;em&gt;关系&lt;/em&gt;&lt;br/&gt;人们喜欢你，和你一起工作后会保持积极的情绪。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;em&gt;进步&lt;/em&gt;&lt;br/&gt;你可以不断学习和提高自己。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;以上就是一份包含了解释的、简略的影响地图。&lt;/p&gt;&lt;h5&gt;第1步 - 承担责任&lt;/h5&gt;&lt;p&gt;责任意味着以一种理智和有效的方式应对挑战的能力。&lt;br/&gt;但在实践中怎么做呢？&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;自己的错误自己负责。如果你能够改正错误并从中获得学到东西，那错误和失败也不一定就是坏事。&lt;br/&gt;如果你需要一些处理错误的策略，可以阅读这篇文章&lt;span&gt;[3]&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;找出所有错误的根本原因。你需要学习如何防止把事情搞砸，以及如何快速解决搞砸的事情。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;找出所有决策背后的原因。你需要了解发生了什么以及为什么会发生，这会帮助你做出正确的决定。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不要害怕说“不”和“我不知道”。这确实很难，但这可以把不确定性暴露出来，从而帮助我们获得正确的期望，并阻止坏事的发生。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;给出反馈。反馈可以帮助人们更快地注意到不好的事情。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;第2步 - 创造价值&lt;/h5&gt;&lt;p&gt;鞭策我编写干净的代码和设计简单的系统的主要因素是最终用户的利益。&lt;br/&gt;也许你会问：“这又有什么关系？”&lt;/p&gt;&lt;p&gt;这里是我们需要关注的一些事情：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;确保我们的系统在&lt;span&gt;可控&lt;/span&gt;范围之内。我们需要知道，当用户需求发生变化，或者当商业模式被完善的时候，如何更改系统。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;尽量&lt;span&gt;快&lt;/span&gt;的解决用户的问题。用户真的很喜欢他们的问题突然间神奇的消失。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提升&lt;span&gt;用户体验&lt;/span&gt;和&lt;span&gt;系统响应&lt;/span&gt;能力。给用户更多的“啊哈!”时刻，让用户感到高兴。快乐的用户==快乐的业务。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;去和你的客户&lt;span&gt;谈谈&lt;/span&gt;。和用你产品的真实的人交谈，这是非常有价值的！&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;第3步 - 高效&lt;/h5&gt;&lt;p&gt;为了产生积极的影响，你需要了解你所处环境的所有影响因素。否则，你只能胡乱猜测。&lt;/p&gt;&lt;p&gt;下面是获得更好的理解的方法:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;分析周围的业务流程。你的工作基本上就是自动化的解决问题，你需要了解&lt;span&gt;什么&lt;/span&gt;是你应该自动化的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;试着做一些优化以&lt;span&gt;获得利润&lt;/span&gt;。我们做任何业务总是想要赚更多的钱。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;为了&lt;span&gt;削减成本&lt;/span&gt;，尽量优化流程。这是另一个赚更多钱的方法。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;尝试应用&lt;span&gt;新的知识和想法&lt;/span&gt;。这是我们所能做的让业务赚更多钱的最好的投资:)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;第4步 - 可替代&lt;/h5&gt;&lt;p&gt;这是最有争议的一步，但它对你和你的公司都很有价值。通过记住这个目标，你可以降低业务风险，而这实际上提高了你的价值（你为组织带来的可感知的收益）。&lt;/p&gt;&lt;p&gt;继续读下去，相信你会有所领悟。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分享&lt;/span&gt;想法和见解，帮助周围的人更有效率。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;编写&lt;span&gt;干净和可维护&lt;/span&gt;的代码，不要让别人在未来受苦。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;指导&lt;/span&gt;别人，传播知识，让你的队友更有能力，更有技巧。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;学习&lt;/span&gt;新的知识，让别人来指导你，这将帮助你认识和抓住新的机会和不可预见的前景。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在&lt;span&gt;代码&lt;/span&gt;中融入你的知识。没人喜欢看文档。但是每个人都必须阅读代码。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;基于上面这个事实给你的队友留下有用的提示（在这里阅读详细信息&lt;span&gt;[4]&lt;/span&gt;）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;“可替代”的基本思想是让你周围的人能够在你不参与的情况下解决问题。当这成为现实时，你会收获一些很棒的好处：容易的沟通、委派工作的能力、分担责任……&lt;/p&gt;&lt;p&gt;而这又是另一个话题了：）&lt;/p&gt;&lt;p&gt;最后，记住这几点：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;要成为一名高效的工程师，你需要承担责任、创造价值、高效和可替代。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Reference:&lt;/span&gt;&lt;br/&gt;[1] https://medium.com/@mr_mig_by/4-steps-to-be-an-effective-engineer-24c0d795dd19&lt;br/&gt;[2] https://signalvnoise.com/posts/3124-give-it-five-minutes&lt;br/&gt;[3] https://top.fse.guru/how-to-deal-with-mistakes-530922fc11dd&lt;br/&gt;[4] https://medium.com/@mr_mig_by/writing-good-code-comments-9047d3c1b378&lt;/p&gt;&lt;/blockquote&gt;&lt;/article&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ee94a84655a3fbf30982218ff97db4b0</guid>
<title>[推荐] DDD 之于逛逛内容营销中的应用</title>
<link>https://toutiao.io/k/qxynml6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages __bg_gif&quot; data-backh=&quot;96&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/33P2FdAnju95xNQaJWFlU3fWicicxBac5nuOMtveZ6lxCCnoZU1Xd6ITUVhoibJib5eyx6d2hePhGFNbQ4nT3Gicgpg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;636&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;88287&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;DDD指的是Domain-Driven Design 即领域驱动设计，DDD并不是关于技术的，而是关于讨论，聆听，理解和发现业务价值。&lt;/span&gt;&lt;span&gt;DDD让我们的关注点向软件系统所提供的业务价值方向思考。&lt;/span&gt;&lt;span&gt; DDD最大的好处是：&lt;/span&gt;&lt;span&gt;接触到需求第一步就是考虑领域模型，DDD让你首先考虑的是业务语言，而不是数据和行为。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我通过逛逛的内容营销项目来介绍一下DDD在逛逛内容营销中的应用。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;逛逛营销业务背景&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在做逛逛内容营销的这半年的里前端做了很多的营销活动，如下图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;232&quot; data-backw=&quot;450&quot; data-ratio=&quot;0.5155555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPfE3OEZvEIRWXpakg3vHeoELXvzoRZRMLelnmMO5RFsibSgZykc7nyYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们做了各种大大小小的营销活动后，觉得内容营销活动可以剥离出一套通用的解决方案，它们看起来总是大同小异，首先想到的就是搭建。把每一个业务模块开发成组件，然后开放给运营自由组合。然而这样有一个弊端就是：每个营销需求来了之后我们都需要评估哪些是已有组件，哪些需要新开发。而且对运营搭建的页面完全失去控制，对性能体验之类的也无从谈起--因为你完全不知道运营会搭建出哪些神奇的布局页面......&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;业务分析&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;从运营的角度看&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从业务方的角度思考营销活动，每次的营销都有一定的目的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;3.1481481481481484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPLFag5vYibj0jKCGKtHzbvCTxmeHdO8SsDyia3qUBSraDiccbzibo164fFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;108&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;3.1481481481481484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPiayKXMTq8rrfkbxPe1peibQadVOeNb4k0K9eCjFGUV7x1RYicJX77RPpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;108&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.0365853658536586&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPCNNdlyktsAgwfyzR91CDOhIMJ5aY0ekiaXnISV71XUwdesbGEEKMgUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;328&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;从运营的角度看不同角色的视角&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;不同角色对营销活动的视角是不一样的&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;内容浏览型，--为了给用户种草&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务打榜型，--吸引某些流量明星的粉丝&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;权益抽奖型。--采用权益刺激培养用户某些心智&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;轮播图+feed流&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;轮播图+任务列表&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;轮播图+权益+feed流&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个内容营销都可以理解成一种营销玩法，每个玩法都有一个核心组成，用户打开这个活动承载页，就要引导用户去完成这个核心玩法。所以浏览型的活动会突出海景房；任务型的会突出任务；权益类的会突出权益。诸如此类。其他的一些能力比如: banner位，关注卡，话题分类，拉起发布器这些都是非核心元素。他们的存在只是为了辅助装饰整个营销玩法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样我们就可以把玩法抽象成模版，每个模版对应一个玩法。那么如何划分玩法模版呢？这里就需要用到DDD的思想，领域驱动设计。&lt;br/&gt;&lt;br/&gt;从DDD经典架构的六边形架构得到一些启示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;img data-backh=&quot;380&quot; data-backw=&quot;450&quot; data-ratio=&quot;0.8444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPNwbVXQrZGQGzgmoHLQYDgPH9kFph5FMYIwibaxdmYAHEM9FibQzuFXpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;六边形架构又称为端口-适配器，六边形架构将系统分为内部（内部六边形）和外部，内部代表了应用的业务逻辑，外部代表应用的驱动逻辑、基础设施或其他应用。&lt;br/&gt;&lt;br/&gt;那么我们的营销活动架构设计可以参照此思想：把一个营销活动划分为核心模块&amp;amp;装饰性模块，核心玩法对应了内部业务逻辑，装饰性模块对应了外部驱动逻辑，他们一起组成了一个营销活动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;158&quot; data-backw=&quot;450&quot; data-ratio=&quot;0.3511111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPjDAzTCCkJ19mdfpzECCf5mZtC9MoxnMqv5DgPkMjYzW7WFVZxvUPRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;建立领域模型&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;领域驱动设计，旨在建立合适的领域模型。玩法模版就是我们要定义的领域模型&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;核心模块=&amp;gt;玩法模版=&amp;gt;活动页面&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们把&lt;/span&gt;&lt;span&gt;&lt;strong&gt;海景房(轮播图)、feed流、任务列表、权益抽奖&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;定义为核心模块，把&lt;/span&gt;&lt;span&gt;&lt;strong&gt;banner卡片、关注卡片、话题卡片、异步发布等&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;定义为装饰模块。核心模块的排列组合形成核心玩法，核心玩法与N个装饰模块形成一个营销活动，区别在于：核心模块是不可重复的，装饰性模块可以随意重复。也可以理解为：装饰性模块为活动玩法本身的能力的表现，这些模块唤起了这个能力。&lt;br/&gt;&lt;br/&gt;整体系统架构图如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-backh=&quot;443&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.7763975155279503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPWahQtDX6T4UXTiaaZhiaCpiaVbJCt2fhHYvfNyicDYSEAV4kQy9SBG3MWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们对这个架构有以下约束：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;核心模块运营同学无法删除or添加，只能隐藏&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;装饰性模块只能在核心模块的楼层上面or下面进行无限制的添加&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新增一个玩法需要新开发一个页面。一个玩法对应一个唯一的页面地址(分治法)。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此我们的营销活动整体链路如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;266&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4596069868995633&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPDJNWdFwVkjzibUAaCQ5HNgYxGgSBlIX2WRjoWXwZuuK1gD9yqEMTdibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1832&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;这套解决方案的核心在于：运营在开始一个营销活动的时候需要明确知道自己的活动目的是什么，然后选择对应的玩法模版(不同的玩法模版解决不同的运营诉求)，运营可以在核心模块的上下界限随意组合装饰模块，形成自己的活动页面。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;把每种玩法固化下来，也可以把相关的玩法数据沉淀下来，好的玩法用的人就越来越多。差的玩法业务数据不好，用的人就少了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;有的同学可能会觉得这套解决方案的缺点在于玩法的迭代需要依赖前端和产品去沟通确定，然后再进行组件的组合开发，不如把组件完全开放给运营自由组合方便，不过在我看来这并不是问题，作为业务前端我们本来就需要去深入理解每个业务需求，完全的自由预示着完全的失控，其次我举例说明一下这套模板化方案的优势：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;比如我需要在页面的两个元素唤起逛逛内容发布器，这两个模块长的不一样，那我可能需要引入两次发布器的能力，但是在这个模板化的解决方案中，发布器的能力已经集成，只需要把唤起发布器作为一个特殊逇素材坑位处理就行了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在于强控玩法之后我们可以对页面的性能做出很多优化措施既保证了视觉标准规范也保证页面的性能体验。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其实运营有时候并不需要那么多的营销玩法页面：参考蚂蚁保险的营销搭建体系的经验&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运营搭建了几百个营销页面真正有区别的只有&lt;/span&gt;&lt;span&gt;几十个页面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;✿ &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;&lt;span&gt;拓展阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650427571&amp;amp;idx=1&amp;amp;sn=bfc3c1c6f189965a1a4c7f3918012405&amp;amp;chksm=839698abb4e111bd5e02344f27d86c928ccfe4d3da1649817b02924c07f681fc1a7ea818f442&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;103&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.17844202898550723&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPnbwch5MHwuJ5j3Nb8ibSFXVGVvxRhc8kKRDcnwsvfUIoZBmRCG3K5Ew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1104&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650414919&amp;amp;idx=1&amp;amp;sn=0ad1df1a1b0e2488f7faa21008fdbdd0&amp;amp;chksm=8396d75fb4e15e49341b07022780dcb8dca66a0efb7f129d4de86a5ef5d8a890f6e0d2fd6432&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;94&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.16304347826086957&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPY9cZgJV13MZ20yKfSaffhK82gwg0PVxf5xckica3O5g2cic0tYv8JXGg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1104&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作者&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;泉脉&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;编辑|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;橙子君&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;出品|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;阿里巴巴新零售淘系技术&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;331&quot; data-backw=&quot;578&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOiboFmk6AE4WC0UFUU2MfXQS9E9ibVUdVZoMpic6wE97ylUl6r4olNpDow/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;720&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;412.318339100346&quot; data-ratio=&quot;0.5722222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOmYpQKzz1XI7PlgmOA3cPARTxwZuKFw6osZsksibeH7HrS9oiaVooQSZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;96&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9I3TY9EP8M3D7oDuMfTuEh37yxribyjc3viaicCKBT9nJhqBcib36SSRaib3vIobcZbx93RYyf9QvgzOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3757edf51727d7d4590065939cf24dfc</guid>
<title>[推荐] 分布式事务实战，用 Go 轻松完成一个 TCC</title>
<link>https://toutiao.io/k/4t8lwxs</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;TCC分布式事务来源于 2007 年Pat Helland发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文，TCC分别是Try、Confirm、Cancel的手写字母。&lt;/p&gt;&lt;h3&gt;组成&lt;/h3&gt;&lt;p&gt;TCC有三个分支&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Try 分支：预留锁定业务相关资源，如果资源不够，则返回失败&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Confirm 分支：如果前面的Try全部成功，则进入Confirm，进行数据变更，这个阶段不会返回失败&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Cancel 分支：如果前面的Try没有全部成功，有返回失败的，则进入Cancel。Cancel解冻Try锁定的资源，也类似Confirm是不会返回失败的。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;假设有一个银行跨行转账的业务，因为不同银行，数据不在同一个数据库，而更可能在不同微服务下的数据库里。这是一个典型的分布式事务场景，我们看看一个成功的TCC时序图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.169179229480737&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9m9OfQX94VvJvhjNGBvp23oCHMicZHFfWZ9zwPQIlhiabFoTcTE9W4pPePuiahLmkCyDctJceps7ic68qWBgeV3hbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1194&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3&gt;实践&lt;/h3&gt;&lt;p&gt;A转账给B的跨行转账操作，如果转账不成功，我们不想让用户看到自己账上的余额变动过，因此我们在Try阶段冻结相关的余额，Confirm阶段进行转账，Cancel阶段进行余额解冻。这样可以避免A看到自己的存款减少了，但是最后转账又失败的情况。&lt;/p&gt;&lt;p&gt;下面是具体的开发详情&lt;/p&gt;&lt;p&gt;我们采用go语言，使用https://github.com/yedf/dtm这个功能强大又简单易用的分布式事务框架&lt;/p&gt;&lt;p&gt;创建两张表，一个用户余额表，另一个是冻结资金表，语句如下：&lt;/p&gt;&lt;pre&gt;&lt;span&gt;CREATE&lt;/span&gt; TABLE dtm_busi.&lt;span&gt;`user_account`&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;`id`&lt;/span&gt; int(&lt;span&gt;11&lt;/span&gt;) AUTO_INCREMENT &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`user_id`&lt;/span&gt; int(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;UNIQUE&lt;/span&gt; ,&lt;br/&gt;  &lt;span&gt;`balance`&lt;/span&gt; decimal(&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; DEFAULT &lt;span&gt;&#x27;0.00&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`create_time`&lt;/span&gt; datetime DEFAULT now(),&lt;br/&gt;  &lt;span&gt;`update_time`&lt;/span&gt; datetime DEFAULT now()&lt;br/&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; TABLE dtm_busi.&lt;span&gt;`user_account_trading`&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;`id`&lt;/span&gt; int(&lt;span&gt;11&lt;/span&gt;) AUTO_INCREMENT &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`user_id`&lt;/span&gt; int(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;UNIQUE&lt;/span&gt; ,&lt;br/&gt;  &lt;span&gt;`trading_balance`&lt;/span&gt; decimal(&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; DEFAULT &lt;span&gt;&#x27;0.00&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`create_time`&lt;/span&gt; datetime DEFAULT now(),&lt;br/&gt;  &lt;span&gt;`update_time`&lt;/span&gt; datetime DEFAULT now()&lt;br/&gt;);&lt;/pre&gt;&lt;p&gt;trading表中trading_balance记录的是交易中的金额。&lt;/p&gt;&lt;p&gt;最重要的业务代码包括冻结/解冻资金和调整余额，代码如下&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;adjustTrading&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(uid &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, amount &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}, error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  幂等、悬挂处理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  dbr := sdb.Exec(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;update dtm_busi.user_account_trading t join dtm_busi.user_account a on t.user_id=a.user_id and t.user_id=? set t.trading_balance=t.trading_balance + ? where a.balance + t.trading_balance + ? &amp;gt;= 0&quot;&lt;/span&gt;, uid, amount, amount)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; dbr.Error == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; dbr.RowsAffected == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, fmt.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;update error, balance not enough&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  其他情况检查及处理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;adjustBalance&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(uid &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, amount &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(ret &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}, rerr error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  幂等、悬挂处理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  这里略去进行相关的事务处理，包括开启事务，以及在&lt;span class=&quot;code-snippet__keyword&quot;&gt;defer&lt;/span&gt;中处理提交或回滚&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  dbr := db.Exec(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;update dtm_busi.user_account_trading t join dtm_busi.user_account a on t.user_id=a.user_id and t.user_id=? set t.trading_balance=t.trading_balance + ?&quot;&lt;/span&gt;, uid, -amount)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; dbr.Error == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; dbr.RowsAffected == &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    dbr = db.Exec(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;update dtm_busi.user_account set balance=balance+? where user_id=?&quot;&lt;/span&gt;, amount, uid)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  其他情况检查及处理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;业务有个重要约束balance+trading_balance &amp;gt;= 0，表示用户最终的余额不能为负。如果约束不成立，返回失败&lt;/p&gt;&lt;p&gt;然后是Try/Confirm/Cancel的处理函数，他们比较简单&lt;/p&gt;&lt;pre&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransInTry&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; (&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Trading(1, &lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransInConfirm&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; TransInConfirm(&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Balance(1, &lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransInCancel&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; TransInCancel(&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Trading(1, -&lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransOutTry&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; TransOutTry(&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Trading(2, -&lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransOutConfirm&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; TransInConfirm(&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Balance(2, -&lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;RegisterPost(&lt;span&gt;app&lt;/span&gt;, &lt;span&gt;&quot;/api/TransOutCancel&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt; TransInCancel(&lt;span&gt;c&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;gin&lt;/span&gt;.Context)&lt;/span&gt; (interface{}, error) {&lt;br/&gt;  return adjust&lt;span&gt;Trading(2, &lt;span&gt;reqFrom&lt;/span&gt;(&lt;span&gt;c&lt;/span&gt;)&lt;/span&gt;.Amount)&lt;br/&gt;})&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;到此各个子事务的处理函数已经OK了，然后是开启TCC事务，进行分支调用&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;err := dtmcli.TccGlobalTransaction(DtmServer, gid, func(tcc *dtmcli.Tcc) (*resty.Response, error) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    resp, err := tcc.CallBranch(&amp;amp;TransRe&lt;span class=&quot;code-snippet__string&quot;&gt;q{Amount: 30}&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransOutTry&quot;&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransOutConfirm&quot;&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransOutCancel&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != nil {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; resp, err&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; tcc.CallBranch(&amp;amp;TransRe&lt;span class=&quot;code-snippet__string&quot;&gt;q{Amount: 30}&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransInTry&quot;&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransInConfirm&quot;&lt;/span&gt;, Busi+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/TccBTransInCancel&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  })&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;至此，一个TCC分布式事务全部完成。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;yedf/dtm项目中有完整的示例，您可以访问该项目，通过下面命令运行上述的示例&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;go run app/main.go tcc_barrier&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;回滚&lt;/h3&gt;&lt;p&gt;跨行转账有可能出现失败，例如A转账给B，但是B的账户由于各类原因异常，返回无法转入，这种情况会怎么样？我们可以修改代码，让我们的示例处理这种情况：&lt;/p&gt;&lt;pre&gt;RegisterPost(app, &lt;span&gt;&quot;/api/TransInTry&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *gin.Context)&lt;/span&gt; &lt;span&gt;(&lt;span&gt;interface&lt;/span&gt;{}, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; gin.H{&lt;span&gt;&quot;dtm_result&quot;&lt;/span&gt;:&lt;span&gt;&quot;FAILURE&quot;&lt;/span&gt;}, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;})&lt;/pre&gt;&lt;p&gt;因为B账户的异常，会导致整个全局事务的回滚，时序图如下：&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.219430485762144&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9m9OfQX94VvJvhjNGBvp23oCHMicZHFfWSnf5utwia7X1VIzY6HVnDTAVnqHHiahTnT6pvYXicx3nickq8rIy61Sj7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1194&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个时序图与成功的时序图非常相近，主要差别在于TransIn返回了失败，后续的操作由Confirm变成了Cancel。&lt;/p&gt;&lt;h3&gt;小结&lt;/h3&gt;&lt;p&gt;这篇文章完整的介绍了TCC事务的全过程，包括TCC事务的业务设计要点、一个成功完成的例子、一个成功回滚的例子。相信读者到这里，已经对TCC有了很清晰的理解。&lt;/p&gt;&lt;p&gt;全局事务进行过程中，可能出现各类网络异常，例如收到重复的Cancel或者未收到Try却收到Cancel等。这类难题的处理技巧，以及其他分布式事务模式如SAGA、XA等，可以参考我的另一篇文章《分布式事务最经典的七种解决方案》，里面有全面的讲解&lt;/p&gt;&lt;p&gt;文中使用的例子节选自github.com/yedf/dtm，该框架功能强大又简单易用。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;支持多种事务模式：TCC、SAGA、XA、事务消息； &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;跨语言支持，已支持 golang、python、PHP、nodejs等语言的客户端。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提供子事务屏障功能，优雅解决幂等、悬挂、空补偿等问题。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;阅读完此篇干货，欢迎大家访问https://github.com/yedf/dtm项目，给颗星星支持！&lt;/p&gt;&lt;p&gt;您可以点击左下角的“阅读原文”，直接访问项目&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>