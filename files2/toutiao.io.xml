<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f2714a6e862ac70abccad2990f481e92</guid>
<title>成为更好的开发者！行动起来！</title>
<link>https://toutiao.io/k/0qqtsd1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>be6093c6dd2d73c060a7333199bd62a4</guid>
<title>深入理解Java类加载机制，再也不用死记硬背了</title>
<link>https://toutiao.io/k/7fz66me</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;谈谈“会”的三个层次&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486732&amp;amp;idx=1&amp;amp;sn=523d754d7944be46985d098c82f79af2&amp;amp;chksm=fafde7a2cd8a6eb47d6145a8538b907b8b118b09ddb530cd57ba80feaa7b539559279debe893&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《说透分布式事务》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《说透分布式事务》&lt;/a&gt;中，我举例里说明了会与会的差别。对一门语言的学习，这里谈谈我理解的“会”的三个层次：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.9421487603305785&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlib1CWXmoFAMbp4EjiaogUaCv5KvibKJfF9oe1VqpJCKSJIOelRiaI97BIEHA7gjvQMvQuX4NYdpT5whA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;121&quot;/&gt;&lt;/p&gt;&lt;p&gt;第一层：了解这门语言的语法、写法，我把它叫做 hello world 级别；&lt;/p&gt;&lt;p&gt;第二层：了解这门语言的优劣势以及它的生态，了解这门语言的能力范围，我把它叫做 应用 级别；&lt;/p&gt;&lt;p&gt;第三层：了解这门语言的底层运行机制，这有利于对程序进行调优，以及当程序遇到了比较罕见的问题时能够从根上分析解决它。我把它叫做 掌握 级别。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在简历上写掌握某种语言的，一般面试官也会问一些很深入原理的问题，个人认为比较合理。自己作为一个15年一线Java开发，自认为有资格把掌握Java写在简历上。今天，我就来聊聊我对双亲委派机制一些理解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;插个题外话，在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486810&amp;amp;idx=1&amp;amp;sn=7fc09ea3625a2f2302a5fd67b92111ee&amp;amp;chksm=fafde7f4cd8a6ee2cbd81fc73e29014be77f30f87e7eff6109f419415cff631672203392c2b2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《高并发下秒杀商品，你必须知道的9个细节》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《高并发下秒杀商品，你必须知道的9个细节》&lt;/a&gt;中，有朋友问配图是用什么画的。这里介绍一下自己的经验：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）思维导图还是processon更加方便：&lt;/p&gt;&lt;p&gt;https://www.processon.com/i/594d313ae4b08b003f2ec84a&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）流程图还是draw.io，这个不推荐在线编辑，慢到怀疑人生。安装版本也是免费的，官网可轻松下载。开头图的框图效果是draw.io的框图有个 Sketch 样式。这个样式很好看，但是不建议用于文献等正式场合。正式场合的图最好方方正正，不要太圆润，粗细均匀。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）生成曲线图、柱状图这些，还是习惯用excel。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Java类加载机制&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先我们需要思考一件事，我们编写的Java代码，是如何在各种各样的操作系统上运行起来的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlib1CWXmoFAMbp4EjiaogUaCvbAq3I4tyKZIbBMOtER665T8nqHw7vU3we09SjaRiauMoK6yHG0gXYJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Java文件通过Javac编译成class文件，这种中间码被称为字节码。然后由JVM加载字节码。这个过程就称为类加载。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;运行时，由解释器将字节码解释为一行行的机器码来执行。在程序运行期间，即时编译器会针对热点代码，将该部分字节码编译成机器码以获取更高的执行效率。在整个运行时，解释器和即时编译器相互配合，使程序几乎能达到和编译型语言几乎一样的执行速度。这个部分交给专业的编译器开发人员来做，咱们本篇不做深入讲解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;到此上面那张图就讲完了，不要问我右上角那两个表情是怎么回事。就是发现编辑的时候竟然可以添加表情，觉得好玩就试试看。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;类的生命周期&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在详细讲解之前，我们明确一下类加载流程的目的。站在高处去看，就是把一份被javac编译过的文件通过加载，生成某种形式的class文件的数据结构送进内存。程序可以调用这个数据结构来构造出Java对象。这个过程是在运行时进行的，也是Java动态拓展性的根基。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42392444910807975&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlib1CWXmoFAMbp4EjiaogUaCvllPP7IS8a2T6ySySBNSibPyWclnopEsjutHMKVX6sKEtY65xB9O4tiag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1906&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面这张图表现了类的整个生命周期。而类加载呢，只包含了加载、链接和初始化三个阶段。加载只是类加载的第一个环节，两者要注意区分。解析部分是灵活的，它可以在初始化环节之前或者之后进行，实现后期绑定。类加载的其他环节的顺序是不可改变的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;加载&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;加载是一个读取class文件，将其转化为某种静态数据结构而存储在方法区内，并在堆中生成一个便于用户调用的Java对象的过程。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;这里值得注意的是，这个Java文件不一定是本地文件，泛指各种来源的二进制流，比如网络、数据库或者比如动态代理技术这样的即时生成的class文件。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;验证&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;验证的步骤很多，上面的图画得不完全准确。对文件格式的校验其实是发生在加载阶段的。通过才能顺利加载。顺利加载并不代表JVM完全认可了这个类，还要进行语法和语义上的分析，保证这个类不会危害JVM，这是对元数据和字节码上的验证。在解析阶段，还会进行符号引用的验证。随着JVM版本的升高，验证过程也在被不断丰富。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;准备&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;准备就是为静态变量赋初始值，注意这里的初始值是JVM默认初始值，是固定的，不是咱们写代码时的那个初始值。这里有个比较容易混淆的概念。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Java内存规范定义了方法区这种抽象概念。主流的JVM实现如HotSpot在JDK8之前使用永久代这种在堆中开辟专门空间的实现方式，JDK8之后使用元空间这种直接内存取代。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;HotSpot的实现：类的元信息、常量池、静态变量等都存在在JDK8之前都存在在永久代这种方法区的具体实现中。JDK8之后，常量池、静态变量被从方法区移除，转移到了堆中。元信息这些依然保留在方法区，具体的存储方式改成了元空间。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;解析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;解析是将符号引用替换为直接引用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;静态解析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;符号引用就是假如类A引用了类B，加载阶段是静态解析，这时候B还没有被放到JVM内存中，这时候A引用的只是代表B的符号，这是符号引用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;直接引用就是类A在解析阶段发现自己引用了B，如果这个时候B还没被加载。就是直接触发B的类加载，之后B的符号引用会被替换成实际地址。这被称为直接引用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;动态解析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本文类的生命周期部分引出了后期绑定这个概念。后期绑定其实就是动态解析。如果代码使用了多态。B是一个抽象类或者接口，A就不能知道究竟要用哪个来替换，只能等到实际发生调动时在进行实际地址的替换。这就是为什么有的解析发生在初始化之后。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;类加载的过程今天就讲这些。咱们来回顾一下类加载的五个阶段。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6417410714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlib1CWXmoFAMbp4EjiaogUaCvOGOzRmpBlOx0aHXkzVZurzLriccdIjQRjz2AJSEH10KttaHojVgmAew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;896&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从JVM的角度看，加载的读取二进制流和初始化阶段，是开放了主导权给用户的。用户可以使用动态代理等手段选择是否这个阶段进行加载。还可以使用多态的手段选择是否在这个阶段进行初始化。而剩下的所有部分都是JVM内部完成的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;此时你可以闭上眼睛回顾一下类加载的五个阶段，是不是不用死记硬背也能了然于胸了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;内容参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.bilibili.com/video/BV14U4y1L75q&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9390b227d897366d617158147d660c6b</guid>
<title>46张图带你了解网络传输、WIFI、以太网协议和网络寻址</title>
<link>https://toutiao.io/k/bd2ld9s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;45&quot; data-source-title=&quot;&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;来自：少数派，作者：方大落&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;链接：https://sspai.com/post/64640&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5852112676056338&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdG2pHjfLVSesaCics2Salic6ibFG74G8iaqdahgqTvE9IQwGV4fDB0dhjIMg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1420&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;一、线缆和Wi-Fi&lt;/span&gt;&lt;/h3&gt;&lt;p data-track=&quot;3&quot;&gt;&lt;span&gt;&lt;span&gt;首先我们需要知道，想要将设备连接到网络，有两种方式可供选择，那就是「&lt;/span&gt;&lt;span&gt;有线和无线&lt;/span&gt;&lt;span&gt;」。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;4&quot;&gt;&lt;span&gt;相信大家对这两兄弟都不陌生了，有线连接从很早以前就出现了，最早可追溯到1960年代，有线网络使用电缆进行连接。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;5&quot;&gt;&lt;span&gt;而无线技术的发展，也已经有相当长的一段历史了，最早可追溯到1990年代。说到无线电，我们最先想到的就是与它相关的移动设备，例如：收音机、手机、便携式笔记本电脑等。对于无线技术，我们经常称它为「Wi-Fi」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGWoY9BAVDibgx0OG2oSMAqng9Vn7Q8NqlFWNpEgEHibp417fnzPRwicNJg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;7&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 有线设备&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;8&quot;&gt;&lt;span&gt;电缆通常使用铜线制成，铜缆更便宜，常用于短距离传输，同时因为它是使用电信号进行信息传播，这就意味着它可能会受到外界电磁干扰的影响，所以，我们常见的网线多由多股线栏缠绕制成，后面的小节会讲到原因。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;9&quot;&gt;&lt;span&gt;光纤通常使用玻璃作为传输介质，可用于较长距离信号传输，因其使用光信号，所以不易受外界信号干扰，但因为其材质的特殊，导致光纤的价格通常都比较昂贵。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.562962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGQwNzGAqZjoKRyniaIGWuIKqbKl1BheqETRR4MyDvkMjemEgdfKrdXqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;10&quot;&gt;&lt;span&gt;铜缆&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;11&quot;&gt;&lt;span&gt;光纤&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;12&quot;&gt;&lt;span&gt;铜丝制作&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;13&quot;&gt;&lt;span&gt;玻璃制作&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;14&quot;&gt;&lt;span&gt;更便宜&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;15&quot;&gt;&lt;span&gt;更昂贵&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;16&quot;&gt;&lt;span&gt;短距离传输&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;17&quot;&gt;&lt;span&gt;较长距离传输&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;18&quot;&gt;&lt;span&gt;使用电信号&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;19&quot;&gt;&lt;span&gt;使用光信号&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;20&quot;&gt;&lt;span&gt;容易受到外界干扰&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;21&quot;&gt;&lt;span&gt;不受外界干扰&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-track=&quot;22&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 无线设备&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;23&quot;&gt;&lt;span&gt;无论是台式机，还是移动笔记本，或者是手机平板电脑，如果想要实现无线连接，就必须配备无线网卡，大部分情况下，台式机是没有无线网卡的，因此需要单独购买无线网卡，可以直接通过USB连接以实现无线上网。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;二、以太网协议&lt;/span&gt;&lt;/h3&gt;&lt;p data-track=&quot;25&quot;&gt;&lt;span&gt;&lt;span&gt;由于「&lt;/span&gt;&lt;span&gt;以太网&lt;/span&gt;&lt;span&gt;」构建简单、成本低、可扩展性强、与IP网能够很好地结合等特点，使它成为局域网网络构建中最常用的一种技术。对于「&lt;/span&gt;&lt;span&gt;以太网协议&lt;/span&gt;&lt;span&gt;」，则代表了接入以太网的节点设备都达成一致的一组规则。想要接入以太网，就必须按「&lt;/span&gt;&lt;span&gt;合同&lt;/span&gt;&lt;span&gt;」办事儿。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdG3NnssdWibIv0s1Dc5FgsLkiatFclEDk6Le82uBRjsD64zb69AkrRvG2Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;「&lt;/span&gt;&lt;span&gt;以太网&lt;/span&gt;&lt;span&gt;」由许多不同的部分组成，其中一部分描述了&lt;/span&gt;&lt;span&gt;线缆的类型&lt;/span&gt;&lt;span&gt;以及&lt;/span&gt;&lt;span&gt;不同线缆的传输速度&lt;/span&gt;&lt;span&gt;；另一部分则描述了数据应该&lt;/span&gt;&lt;span&gt;如何进行格式化&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;发送&lt;/span&gt;&lt;span&gt;的操作，这部分被称为「&lt;/span&gt;&lt;span&gt;媒体访问控制&lt;/span&gt;&lt;span&gt;」。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;29&quot;&gt;&lt;span&gt;&lt;span&gt;「&lt;/span&gt;&lt;span&gt;以太网&lt;/span&gt;&lt;span&gt;」这样来分层的主要原因，是为了兼容不同线缆以不同速度访问不同的设备，却依然能够保证设备间的正常通信，毕竟我们无法保证每台设备、线缆及其传输速度都相同，差异性是不可避免的问题！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGPGqWP11puNwOeEkyc5NxewK7yl5h2XnBQ0njLaopDYObE8O6KhlbpA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;999&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;30&quot;&gt;&lt;span&gt;本地主机访问服务器&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;31&quot;&gt;&lt;span&gt;举个例子：一个具有 1G b网络带宽的本地主机，想要将数据发送到具有10Gb带宽的服务器上，这中间经历了哪些操作？&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;32&quot;&gt;&lt;span&gt;首先，本地主机根据「媒体访问控制」规则准备一条信息，接下来，再根据它必须遵循的物理规则来发送信息；然后，信息通过物理线缆发送到了服务器这边，当服务器收到消息，它会对这段消息进行解码，并通过「媒体访问控制」，传递到服务器主机。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;33&quot;&gt;&lt;span&gt;正是因为本地主机与服务器主机都遵循了以太网的协议规则，才能保证彼此间的通信不会出现问题，并最终将信息传递到目的地。即使双方使用不同的线缆、带宽与设备， 该分层系统仍然畅通无阻 ！&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;34&quot;&gt;&lt;span&gt;1. 以太网协议为标准&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;35&quot;&gt;&lt;span&gt;以太网技术诞生以后，IEEE 组织制定了众多以太网不同的技术标准，每一个标准都会用一段代号来命名（就像007和9527一样）。以 802 开头的标准用于局域网技术。而以太网技术的代号是 802.3 ，再配合一到两个字母就组成了以太网不同的类型。&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;36&quot;&gt;&lt;span&gt;速度&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;37&quot;&gt;&lt;span&gt;常用名称&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;38&quot;&gt;&lt;span&gt;非正式名称&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;39&quot;&gt;&lt;span&gt;正式名称&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;40&quot;&gt;&lt;span&gt;线缆类型&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;41&quot;&gt;&lt;span&gt;最大传输距离&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;42&quot;&gt;&lt;span&gt;10Mbps&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;43&quot;&gt;&lt;span&gt;以太网&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;44&quot;&gt;&lt;span&gt;10BASE-T&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;45&quot;&gt;&lt;span&gt;802.3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;46&quot;&gt;&lt;span&gt;双绞线&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;47&quot;&gt;&lt;span&gt;100m&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;48&quot;&gt;&lt;span&gt;100Mbps&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;49&quot;&gt;&lt;span&gt;快速以太网&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;50&quot;&gt;&lt;span&gt;100BASE-T&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;51&quot;&gt;&lt;span&gt;802.3u&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;52&quot;&gt;&lt;span&gt;双绞线&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;53&quot;&gt;&lt;span&gt;100m&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;54&quot;&gt;&lt;span&gt;1Gbps&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;55&quot;&gt;&lt;span&gt;1吉比特以太网&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;56&quot;&gt;&lt;span&gt;1000BASE-LX&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;57&quot;&gt;&lt;span&gt;802.3z&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;58&quot;&gt;&lt;span&gt;光纤&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;59&quot;&gt;&lt;span&gt;5000m&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;60&quot;&gt;&lt;span&gt;1Gbps&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;61&quot;&gt;&lt;span&gt;1吉比特以太网&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;62&quot;&gt;&lt;span&gt;1000BASE-T&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;63&quot;&gt;&lt;span&gt;802.3ab&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;64&quot;&gt;&lt;span&gt;双绞线&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;65&quot;&gt;&lt;span&gt;100m&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p data-track=&quot;66&quot;&gt;&lt;span&gt;10Gbpx&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;67&quot;&gt;&lt;span&gt;10吉比特以太网&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;68&quot;&gt;&lt;span&gt;10GBASE-T&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;69&quot;&gt;&lt;span&gt;802.3an&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;70&quot;&gt;&lt;span&gt;双绞线&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p data-track=&quot;71&quot;&gt;&lt;span&gt;100m&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-track=&quot;72&quot;&gt;&lt;span&gt;单独通过正式名称来记忆这些类型实属不易，因此 IEEE 组织还给我们准备了便于记忆的非正式名称。拿 10GBASE-T 来举例，里面的10G代表了其传输速度为「10G比特每秒」，「比特」是传输速率的单位，比特值越高，其传输速度也越快；BASE = Baseband(cables) 是基带的意思，代表它使用数字信号进行传输（另一种是模拟信号）；而后面的T，则代表了所使用的线缆类型，T=UTP也就是双绞线（另一种是LX光纤）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGd9Am8L2nwhKIe1pic2AXEAYjxTLwTsnYjgv8wfwwVFwtCVbONMSHbTg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以太网标准&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;74&quot;&gt;&lt;span&gt;&lt;span&gt;我们已经知道了，电缆使用电信号来传输数据；而光纤使用光信号来传输数据；无论使用哪种信号，这里的数据指的都是我们熟知的「&lt;/span&gt;&lt;span&gt;01代码&lt;/span&gt;&lt;span&gt;」，接收器会对接收到的「&lt;/span&gt;&lt;span&gt;01代码&lt;/span&gt;&lt;span&gt;」进行相应解码，这就是所谓的「&lt;/span&gt;&lt;span&gt;编码方案&lt;/span&gt;&lt;span&gt;」。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;75&quot;&gt;&lt;span&gt;2. 电信号&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;77&quot;&gt;&lt;span&gt;&lt;span&gt;首先我们来看一下电信号，想要发送电信号，就需要拥有电路，这意味着我们需要准备多根电线以传输数据，而我们最常见的线缆称为「&lt;/span&gt;&lt;span&gt;非屏蔽双绞线&lt;/span&gt;&lt;span&gt;」（UTP，也就是常见的网线），每对电线构成一个电路。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGsaRPtOl1u0TuFJh92gibicgEY9f1B2bFBmibpzXibibhz04kLwmlGAPH97w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;非屏蔽双绞线（UTP）&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;79&quot;&gt;&lt;span&gt;听名字我们也知道了，它是非屏蔽的线缆，也就意味着如果外界有电磁干扰，它就会受影响，在初中的时候我们就学习过了，电和磁铁是有一定关系的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGsaRPtOl1u0TuFJh92gibicgEY9f1B2bFBmibpzXibibhz04kLwmlGAPH97w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;电磁干扰&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;81&quot;&gt;&lt;span&gt;&lt;span&gt;电流通过铜缆会产生磁场，同时也生成了电力。问题就出在这里，一对平行运行的电线会产生小的电磁场，如果一对铜线有电流经过，则必定会对其旁边的另一对电线的信号产生电磁干扰，我们称其为「&lt;/span&gt;&lt;span&gt;串扰&lt;/span&gt;&lt;span&gt;」。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGBbOZDFDybYmjIlTRbOoVkarwK5wjJocpmDria2uN6J1LFaP9AhzGs9Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;串扰&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;83&quot;&gt;&lt;span&gt;&lt;span&gt;为了解决「&lt;/span&gt;&lt;span&gt;串扰&lt;/span&gt;&lt;span&gt;」的问题，非屏蔽双绞线则将平行的两根铜缆绞在一起，这样一来，就有效地避免了电磁干扰，而这也是它名字的由来。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGAuN3QGmxr2Joljc4YiajFicYO594dwC99YicdfXot2RfkZeicZCUSGIsWg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;双绞线&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;85&quot;&gt;&lt;span&gt;如果条件允许的话，你可以找到一条废弃的双绞线，将水晶头去掉，观察一下内部的线缆，就&lt;/span&gt;&lt;span&gt;可以清晰地看到，线缆确实是绞在一起的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGiamGibd9V9MUkGNlcpKnu6stsb39uOPAbOaibe4EMqQE65hk6v1iaLqSng/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;span&gt;真实的双绞线&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;88&quot;&gt;&lt;span&gt;3. 双绞线&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;89&quot;&gt;&lt;span&gt;我们可以看到多种不同类型的双绞线，有的中间有塑料芯，有的则是一根细线。通常，我们使用颜色对其进行编码，每对电线都是由纯色和条纹色组成的，观察图片就不难看出。例如蓝色和蓝白线缆绞在一起，而棕色和棕白线缆绞在一起。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;90&quot;&gt;&lt;span&gt;通常，我们常见的网线都是由四对电线组成的，而在早期的标准中，其线缆并不一定是由四对组成的（例如：10BASE-T 和 100BASE-T 都是由两对绞线组成），但是如果想要让传输速度达到1Gbps或10Gbps，就必须使用全部四对电线才可以。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;91&quot;&gt;&lt;span&gt;不同的以太网标准，需要使用不同的线缆，我们应该都听说过 「5类线」 或 「6类线」 这样的名称，其实这就是不同网线的专用术语，不同的类别对应了不同线缆的标准（例如：线缆的对数、线缆的粗细以及线缆的交合程度）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.562962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGwrvJINZAlUA84Ew2oXJoepHvBibiaznJkIOxOTwNw2twuqgeGXsRJ94A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;线缆的不同标准&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;93&quot;&gt;&lt;span&gt;例如：Cat2 仅具有两对线缆，而Cat5具有四对线缆，Cat6 具有比 Cat5 更粗的四对线缆等等&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;94&quot;&gt;&lt;span&gt;不同类别的线缆会定义不同的名称，除了数字的不同，后面的英文字母也不同，比如：Cat5e，Cat6，Cat6a，数字越大，标准越新，意味着传输距离越远，速度越高！！&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;95&quot;&gt;&lt;span&gt;举一个现实一些的案例，我们可以在 100Mbps 的网络上使用5类线；但如果你想让网速达到千兆，就至少需要使用 Cat5e 这样标准的线缆；而如果你想让网速达到万兆，那就需要使用 Cat6 也就是6类网线才能达到理论速度。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;96&quot;&gt;&lt;span&gt;如果你的带宽达到了万兆，但你的线缆跟不上，仅仅使用5类线 Cat5，那你的实际使用网速肯定达不到万兆，其原因是线缆没法支持那么快的速度！&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;97&quot;&gt;&lt;span&gt;所以，回家赶紧看看你家网络的带宽是多少，为什么理论速度达到了，可实际使用却达不到那么快的网速，原因可能就是因为你的线缆太老旧了，扔了换新的吧。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;98&quot;&gt;&lt;span&gt;&lt;span&gt;线缆名称线缆介绍线缆速率&lt;/span&gt;&lt;span&gt;CAT-1以往用在传统电话的网络线路无CAT-2以往用在令牌环网络4 Mbit/sCAT-3提供16MHz的带宽，曾经常用在 10 Mbit/s 以太网络10 Mbit/sCAT-4提供20MHz的带宽，曾经常用在 16 Mbit/s 的令牌环网16 Mbit/sCAT-5提供100MHz的带宽，目前常用在快速以太网（100 Mbit/s）中100 Mbit/sCAT-5e提供125MHz的带宽，目前常用在快速以太网及千兆以太网（1000Mbit/s）中1000 Mbit/sCAT-6提供250MHz的带宽，比CAT-5与CAT-5e高出一倍半2500 Mbit/sCAT-6A提供500MHz的带宽，使用在万兆以太网（10 Gbit/s）中10 Gbit/sCAT-7设计供以600MHz频率传输信号未定&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;99&quot;&gt;&lt;span&gt;4. 电缆的连接器&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;100&quot;&gt;&lt;span&gt;我们的线缆两端都会安装一个连接器，这个连接器的名字叫做「rj45连接器」，其实就是我们所说的水晶头，它们是接入到网卡与交换机端口的部分，该连接器有八个引脚，它们与电缆内部的八根铜线对齐，必须按正确的顺序与引脚对齐才能保证通信。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGSMoODic6SS2ohPKMhudU5eHNJSCtvQAmiapmMEqC97eWQXwZ0ibicBBAOQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;101&quot;&gt;&lt;span&gt;线缆与引脚对齐方式&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;102&quot;&gt;&lt;span&gt;大家应该听到过连接线缆的口诀，那就是「橙白橙，绿白蓝，蓝白绿，棕白棕」，这种连接方式称为「568b」，其实就是图示中的这种顺序，确保顺序正确，再将其与水晶头的8个引脚对齐，这样就大功告成了！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdG0LMGHNzq3vBAJO4TMAko0PZqY2icFNdHmZvkrOJUicTEmLe08KhDqf2w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;103&quot;&gt;&lt;span&gt;引脚连接&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;104&quot;&gt;&lt;span&gt;在网络通信中，其实就是将一端的引脚1对接另一端的引脚1，引脚2对接另一端的引脚2，以此类推，因其线缆直通另一端线缆的特性，我们称这种连接方式为 「直通电缆(Straight Through)」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdG5RSY91h0I5nSCFzLWmyrEulGChS3XYFYYuUt0aOkNybFNicjgJ2JEiaQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据传输与接收&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;106&quot;&gt;&lt;span&gt;这些线缆中的一部分用于传输数据，另一部分则用于接收数据，在这里，我们使用TX表示传输，TR表示接收，如图所示，第一对引脚就用来传输数据，而第二对引脚则用来接收数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGOkWpibP0xrHESibSLH1jxOu1n4kdUFicicRQ8OF2liaBjrx26axxJQneakw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主机直连到交换机&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;108&quot;&gt;&lt;span&gt;当我们将一台主机通过网线接入到交换机上，交换机非常聪明，在它这一端的水晶头接口处，它知道用第一对引脚来接收数据，用第二对引脚来传输数据。也正因为此，它的名字叫做交换机，交换的就是这个位置的信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGGIgogu64XdG1peTKrrqLUuowxeNwgbDj3CyL9wVZ78zO4q0leon0Xg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主机直连到主机（或交换器）&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;110&quot;&gt;&lt;span&gt;但是，如果我们将这台主机的网线接入到另一台主机或路由器，而不是交换机呢？这会遇到什么情况？引脚的排列顺序不对了，它们使用相同的引脚来收发数据，这就导致数据传不出去了呀！所以，我们这里就不能使用「直通电缆」，而需要使用「交叉电缆(Crossover)」，那就是将用于传输数据一端的引脚对应接收数据的引脚，即可解决问题（将一台交换机接入到另一台交换机，也是同样的道理）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGSjWicEpT3FZxiaAtYnkzCaD5iax6F6Gzluth9Ka1aULEhyzicsjWuHh9Fg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Auto MDI-X 自动引脚逻辑切换功能&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;112&quot;&gt;&lt;span&gt;我能理解你此刻的心情，你肯定会说，这太痛苦了吧？不但要使用不同的以太网线缆或接头，还要保证线序完全对应，我只想说「恕臣无能！」。为了避免我们陷入此困境，我们拥有一项成为「Auto MDI-X」 的技术，尽管 「Auto MDI-X」 可以支持的设备可以检测是否使用了错误的线缆，然后，可以再逻辑上切换引脚的功能，使其与电缆相匹配，但是需要注意的是在以太网为 100BASE-T 及以上的标准才可以支持这项技术。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;113&quot;&gt;&lt;span&gt;因为现在我们现在应用的以太网标准基本都处于 100BASE-T 之上，所以我们可以不必担心直通电缆与交叉电缆的问题，不过我们还是应该记住它们两个之间的区别。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;114&quot;&gt;&lt;span&gt;当我们的以太网标准达到 1000BASE-TX 时，情况发生了一些变化，此时，我们会利用所有的四对电线进行数据传输（较旧的标准只需要使用两对），这里有两种工作方式，分别是 1000BASE-T 和 1000BASE-TX。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGZvQ8bAUWhRyWI4zA8lhlDgSbaoLNobNfRWDxGQyDI7T7FjwJiaouEKQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1000BASE-TX标准&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;116&quot;&gt;&lt;span&gt;1000BASE-TX 的标准是使用两对电线用于传输，另外两对电线用于接收，如果想要使用这种标准的话，我们需要将网线升级到 cat6 或更高级别。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGXVqpDTkqfziaiaCGmSjEZHyZmdiaaZ9DUAMO1PpPibVWO9iahCicibN1vzArA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1000BASE-T标准&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;118&quot;&gt;&lt;span&gt;1000BASE-T 的标准是使用所有的四对电线同时进行发送和接受，这是非常特别的一种方式，它只需要使用 cat5e 标准的线缆即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;119&quot;&gt;&lt;span&gt;5. 光纤&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.562962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGw86OTGPxtF17dJeUEB7JXiar22G4wXOmBuEfG8QWKv4roJ1t3nBxqzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;光纤&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;121&quot;&gt;&lt;span&gt;铜缆的替代品就是光纤，光纤使用的材质是「玻璃束」，使用这种材质，脉冲信号会从「玻璃束」的一端通过「玻璃束体」向另一端传递。回顾一下我们初中时做的物理实验，将一束光打到流动的弯曲水柱上，光会跟随水柱的方向进行传递，这里用的就是「光的全反射」原理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGicrCuMF7PQ7HMgcgJO4JHfxiancsicSMiabsr339T3WUy785F4cavGxZjg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;光的全反射&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;123&quot;&gt;&lt;span&gt;光纤通常用在路由器和交换机之类的网络设备之间，也可能用在我们从未见过的服务器中。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;124&quot;&gt;&lt;span&gt;6. 全双工与半双工&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;125&quot;&gt;&lt;span&gt;我们回过头来看一下全双工和半双工，看看它们是如何工作的。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;126&quot;&gt;&lt;span&gt;6.1 全双工（Full Duplex）&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;127&quot;&gt;&lt;span&gt;全双工的意思就是，UTP非屏蔽双绞线的线缆需要同时发送和接受信息，如图所示，这需要两端的设备都支持同时发送和接受。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGmjl7tLN4PQDqicQjibDBlxjG0LgSK0kIzjkescjdpCElJdNN1yl2sIXg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全双工&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;129&quot;&gt;&lt;span&gt;6.2 半双工（Half Duplex）&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;130&quot;&gt;&lt;span&gt;有时候，两端设备中的某一端可能并不支持同时发送和接受信息，因此，信息发送完毕后，需要等待一会，待收到对方回复信息后，才能再次发送信息，这种方式就是「半双工」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGaF6ah3T4tEoknFdKWicJQvZ6RjSvUJeL6IHtAnpTODmPW0n2Jib7KpxQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;半双工&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;132&quot;&gt;&lt;span&gt;根据全双工与半双工的特性，光纤就有两种不同的使用方式：&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;133&quot;&gt;&lt;span&gt;7. 单芯光纤与双芯光纤&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;134&quot;&gt;&lt;span&gt;7.1 单芯光纤（Single Core）&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;135&quot;&gt;&lt;span&gt;由于无法同时发送和接受，因此单芯光纤只能使用半双工模式运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGicT565iao6Teh4ZQkKcBTXicA8ZK8UkgueYLN23O9PpHc1cUycKmWsuUw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单芯光纤&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;137&quot;&gt;&lt;span&gt;7.2 双芯光纤（Dual Core）&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;138&quot;&gt;&lt;span&gt;因其双芯的特性，其中一个芯专用于发送，而另一个芯则用于接收，因此双芯光纤支持全双工模式的运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGicqwTUAFD47mWOcwmTATfPnQRrNNxC8MFpFI3PfdFXCib5vuR48sVjiaQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;双芯光纤&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;140&quot;&gt;&lt;span&gt;如果我们自行连接光纤，却不能正常使用时，可以尝试交换光纤方向，问题也许就可以解决。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.562962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGDibsSEfpkm2kjhuKdmSh4ibiadg6DkBoH9bAmU4ibhia5NxobfMDn1jpiclA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;双芯光纤与单芯光纤&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;142&quot;&gt;&lt;span&gt;企业网络通常使用双芯光纤，通常是使用在交换机、路由器和服务器之间。对于家庭中使用的光纤，网络服务提供商通常只会提供单核光纤。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;143&quot;&gt;&lt;span&gt;8. 单模与多模光纤&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;144&quot;&gt;&lt;span&gt;接下来，我们来聊一下单模光纤与多模光纤，它们可能看起来很相似，但因为使用光的类型不同而产生了很大的差别。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;145&quot;&gt;&lt;span&gt;8.1 单模光纤（SMF：Single Mode Fibre）&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;146&quot;&gt;&lt;span&gt;单模光纤使用激光作为光源，这是其价格更高，但这中广可以传输更远的距离，很容易就可以达到2公里或更长的距离，服务提供商通常会在不同的建筑中使用单模光纤，以方便每栋用户流畅的访问Internet。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24958402662229617&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdG6LmL74oXIv0wrICPLJDAm1ORAC8NkuIZETicNhrD4OgPav11gmib6Fug/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1202&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单模光纤&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;148&quot;&gt;&lt;span&gt;8.2 多模光纤（MMF：Multi Mode Fibre）&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;149&quot;&gt;&lt;span&gt;多模光纤使用LED作为光源，它并不是特别强的光， 所以只能在较短的距离（500m或更短）传输，通常用于同一栋建筑中的网络连接，效果非常好。同时因为LED的生产成本比较低，因此如果你很在乎价格，可以选择这种类型的光纤。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4521452145214521&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGIicDmmxiaBMHN0icB5j2ExpCtVDkrDOrsCmLOVqFSrxdzAJXVJVngrTdA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1212&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;150&quot;&gt;&lt;span&gt;多模光纤&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;151&quot;&gt;&lt;span&gt;9. 光纤弯曲程度&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;152&quot;&gt;&lt;span&gt;尽管光纤是由玻璃制成的，但它具有很强的柔韧性，即便对它进行一定程度的弯曲也不会造成它的损坏。光纤都具有最大弯曲半径（根据光纤的不同而不同），光纤缠绕的程度会导致不同程度的信号衰减（信号衰减或丢失的地方），如果你想知道你家的光纤最大的弯曲程度是多少，可以联系网络服务提供商。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGpckPXKUJh4aF9XVOcWC1jlG0fB42F12EZxmeTibjtzzrZvWiaGmBkbeQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;光纤的弯曲程度&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;154&quot;&gt;&lt;span&gt;10. 光纤的连接器&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;155&quot;&gt;&lt;span&gt;光纤有非常多不同类型的连接器（接头），这里大家要知道，光纤不仅仅用于网络连接，它可能还会有一些其他用途。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.562962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGICknLibhr1IsAMRvYTpRxPa2jlmxcQfOzP9riaXjEPaM0MhJGwoTomYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;光纤连接器&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;157&quot;&gt;&lt;span&gt;例如：LC类型的接头就通常用与与交换机和路由器的连接，我们通常会在双核配置中看到它们；而SC类型的接头属于比较老旧的类型，它看起来更大，通常我们会在配线柜中看到它。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7037037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGPOfQthuSy6HWTW1P5VICSqaV4ARAIfH8uVFd5IFNPibTjDDjsIEZEiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;158&quot;&gt;&lt;span&gt;配线柜&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;159&quot;&gt;&lt;span&gt;一些交换机会有一些看起来很空的特殊的接口，而一些交换机则完全由这些接口组成，这些接口都是用于安装收发器模块的，这些接口都可以用于不同目的，但通常情况下，他们都是用于很合匹配不同线缆的接头的，这些收发器接口支持不同的电缆类型，包括了单模和多模光纤。同时它们还支持不同的速度，例如1G或10G的速度；它们也支持不同的电缆长度，例如长40公里电缆的收发器比1公里的收法器要贵得多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGO8CYJw8Vhlp5Tr18r7Xyv4O44HiaO7ZY5GPV3yEMiaRWV7S3q5lRcCdg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;交换机上的特殊接口&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;161&quot;&gt;&lt;span&gt;这些交换机准备这么多端口最终原因是为了方便我们搭配不同的收发器，以完成不同的业务场景。我们甚至可以为其安装上「rj45收发器」，以满足我想要安装双绞线的需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGnI8cwjueABjP5xm9DouwogbFY6SO7D8KACgx8xEhibWib7fCUWoLyf4Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;162&quot;&gt;&lt;span&gt;rj45收发器&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;163&quot;&gt;&lt;span&gt;11. Wi-Fi连接&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;164&quot;&gt;&lt;span&gt;我们的另一种通信方法就是无线Wi-Fi通信，它不需要使用电缆连接，无线网络就像一个无线的交换机，可以让手机、笔记本之类的无线设备链接到接入点，但这个接入点是需要链接到有线网络的，此时，有线和无线设备可以在同一个网络当中使用。当然，并不是所有的设备都会连接到无线接入点的，例如我们不能把路由器或服务器连接到无线接入点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGw72nZWXhtAhJHHsFibJNOJMEriaPuicYzLSMsX3ibWlicibcqJNB1BgMicGxQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;165&quot;&gt;&lt;span&gt;无线网络&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;166&quot;&gt;&lt;span&gt;Wi-Fi网络不适用 802.3 的以太网标准，它使用的是 802.11 的标准（802.11 标准描述了信息是如何使用无线电波来格式化和编码信息），虽然它们不是同一个以太网，但它们都是由 IEEE 制定，因此在数据格式化方面有很多相似之处。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h1&gt;&lt;p data-track=&quot;168&quot;&gt;&lt;span&gt;1、网络可以是有线或无线的，网络连接可以使用铜缆或光缆&lt;br/&gt;2、以太网标准用于描述了物理连接线缆的类型以及如何格式化数据&lt;br/&gt;3、UTP有四对双绞线，其中一些用于数据发送，另一些用于数据接收&lt;br/&gt;4、线缆可以以直通方式或交叉方式连接到交换机&lt;br/&gt;5、现如今的大部分平台都支持 Auto MDI-X，可自动对线缆进行检测并做出调整&lt;br/&gt;6、双工设备可以同时发送和接受数据，半双工则需要收到响应后再发送数据&lt;br/&gt;7、双芯光纤支持全双工，单芯光纤支持半双工&lt;br/&gt;8、若想要短距离连接，并节省更多成本，可以选择多模光纤&lt;br/&gt;9、若想要远距离连接，则需要支付更高的价格，选择单模光纤，同时需采用正确收发器&lt;br/&gt;10、如果有线连接无法满足你的需求，可以采用无线网络连接&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/h1&gt;&lt;p data-track=&quot;170&quot;&gt;&lt;span&gt;1、1000BASE-T以什么速度运行？需要使用什么类型的电缆？&lt;br/&gt;2、使用哪种类型的UTP电缆将主机连接到交换机？那种类型的电缆可以将一个交换机连接到另一个交换机？&lt;br/&gt;3、哪种情况下我们需要使用 Auto MDI-X 技术？&lt;br/&gt;4、那种情况下需要使用光纤代替UTP？什么时候需要单模式光纤而不是多模光纤？&lt;br/&gt;5、什么是弯曲半径？使用哪种类型的电缆，需要特别注意弯曲半径？&lt;br/&gt;6、请简单阐述全双工工作模式的特点&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;三、网络寻址&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGo99icGlMwrSkic1zopMPjicWlqWTaib5UO5xeJtDYyzq8chED4F7rhk6Cw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;172&quot;&gt;&lt;span&gt;模拟soho网络&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;173&quot;&gt;&lt;span&gt;让我们回到 「soho网络」 ，一起来看一个比较特殊的案例，我们用下图作为一个模拟的 「soho网络」。假如，我们想通过网络中的一台主机，将需要打印的文件信息传递给打印机，因为打印机已入网，所以我们可以实现这一功能，在这个网络中有多个节点存在，试问一下，我们的电脑主机如何才能知道将信息发送到什么位置呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGibMMldxfk3g77UqAXONcIDwWxe6ictlmdwO81sDV6UlVfRia2r448hpug/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;174&quot;&gt;&lt;span&gt;soho网络中的节点同时发送信息&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;176&quot;&gt;&lt;span&gt;虽然，我们可以将打印信息发送给网络中的所有节点，然后让节点去判断这个信息是否是发给自己的，但这样一来信息的安全性且不说，效率低下才是最致命的；试想一下，如果所有的设备同时发送信息，该怎么办？如果网络环境下有多台打印机，该怎么办？会出现什么状况？网络将变得一团糟！所以呢，我们需要一个解决方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdG1dhUuhicyRqCMyPLOjObzfp0GhsQ41e9wVH2YtV6kIsuf8Hf9hc34Nw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;177&quot;&gt;&lt;span&gt;网络设备地址&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;178&quot;&gt;&lt;span&gt;其实，网络上的每台设备都有一个地址，这就类似于我们公司的、家庭的或亲朋好友的家庭住址，这个地址一定是唯一的，因此，我们邮寄包裹或网络购物可以找到准确的位置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5611111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGG0oNJDRWzht0VfnnCuWyFR65MJQekvDDXLJ9ibybKeRhqFS37aia6kxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;179&quot;&gt;&lt;span&gt;MAC地址与IP地址&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;180&quot;&gt;&lt;span&gt;在同一个域中，每台设备都会有两个地址，分别是MAC地址和IP地址，这两个地址的使用方式不同，目前，我们先大概了解它们的特点与基本使用，后面的章节会做展开讲解。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;181&quot;&gt;&lt;span&gt;1.MAC地址&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGF6OjicsHPAB33pqC4icjMft7C9gc9B1r7C4veGo90NvsKMbg6MojZ7wQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;182&quot;&gt;&lt;span&gt;MAC地址&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;183&quot;&gt;&lt;span&gt;首先来看一下「MAC地址」，每台设备都至少拥有一个「MAC地址」，确切地说，应该是每一块网卡都拥有一个「MAC地址」，如果你的机器有多块网卡，那就会拥有多个「MAC地址」。网卡从被生产出来就会被烧录一个永久的「MAC地址」。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;184&quot;&gt;&lt;span&gt;这非常类似于烙印在动物身上的标记，主要是为了方便我们快速寻找并确认这头羊是不是我的，是我的第几头羊……扯远了，回过头来，「MAC地址」就是烙印在网卡上的标记，且可以保证的是，每个「MAC地址」都是唯一的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGNCprSicUj3s9Iy8IhVp2jIrkpDIvuW5KQnx9mwm3tQ1uEpdsSBibrdaQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;185&quot;&gt;&lt;span&gt;MAC寻址并发送信息&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;186&quot;&gt;&lt;span&gt;在同一网络中，当一台设备想要快速找到另一台设备，可以通过该地址来寻找，因为「MAC地址」的唯一性，我们可以轻松的找到目标设备，并将信息精确的发送给它。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;187&quot;&gt;&lt;span&gt;2.IP地址&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGaQial7bcHxTaWpbmMutEzBic8PPxXKAWnJ4tkWDxjV3h6BFIuLqS5KMw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;188&quot;&gt;&lt;span&gt;IP地址&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;189&quot;&gt;&lt;span&gt;除了「MAC地址」，每台设备同时拥有另一个地址，那就是「IP地址」，改地址并不是烙印在设备上的，而是需要网络管理员来给我们分配。相比较「MAC地址」又长又无规律的特点，「IP地址」显得相对容易记忆，大家可能会问，都已经有一个」MAC地址「了，为什么还要用」IP地址「呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;190&quot;&gt;&lt;span&gt;这里我们要考虑一个问题，目前全球有60多亿人，如果每个人都拥有一台设备，那就意味着我们拥有60亿个「MAC地址」，这是一个庞大的「MAC地址库」，在这样庞大的库中查找具体的某一个设备无异于大海捞针。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGnSm3BYsia6uFxKBWDI4APZWyOG3R18vaY2TCTnsYS6rjftFO1jVlibwA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;192&quot;&gt;&lt;span&gt;所以「MAC地址」通常都用于局部网络中的设备查找，而「IP地址」因为由管理员分配，这意味着每个国家，每个地区，每个城市的「IP地址」都有具体分配的「IP地址段」，这就很方便我们查找了，当我们想要给一个异国他乡的亲友发送信息时，只需要先来确定它的「IP地址」所在地区，然后再具体查找它的设备，这将变得非常容易。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;193&quot;&gt;&lt;span&gt;3.网络寻址&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5634847080630213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGmjf1OT0nibQdKQ9Uf3JNTA6EicicOPIyOtcea9dYXtJ6ufceJeicibxp2wA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;span&gt;两个局域网连接&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;195&quot;&gt;&lt;span&gt;举个例子，当一个公司的规模越来越大，分公司必然会出现，这种情况下会出现多个网络区域，此时我们需要将两个网络通过路由器连接在一起，这个路由器同时属于两个局域网LAN的一部分，它的工作就是将一个网段的信息传递到另一个网段。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;196&quot;&gt;&lt;span&gt;通过刚才的学习，我们都知道了，MAC地址是用于本地局域网中的地址，因此，当我们想要把一段打印信息发送给另一个网段的打印机时，仅仅使用MAC地址就不够用了，此时我们就可以通过IP地址来定位打印机所处的位置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5645645645645646&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icRxcMBeJfcicNlPicichwQRXMehN0UB4IdGR4Piaxej30fA5Yibth0H68icicTroy3H8CIEnJdJ4zWd4QrdSmq9v4AyOQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;999&quot;/&gt;&lt;/p&gt;&lt;p data-track=&quot;197&quot;&gt;&lt;span&gt;IP地址的工作流程&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;198&quot;&gt;&lt;span&gt;我们看一下具体的工作流程，当一个网段中的电脑准备好了要传递给打印机打印信息，我们的电脑会在这段消息上追加一个「IP地址」，这个「IP地址」就是打印机的「IP地址」。同时，因为该打印机在另一段网络，所以，电脑又在该信息上追加了路由器的「MAC地址」，先找到路由器，路由器接到信息后把这个「MAC地址」更改成打印机的「MAC地址」，接着，就可以精确的将该信息传递给打印机。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;&lt;p data-track=&quot;200&quot;&gt;&lt;span&gt;1、主机都同时拥有一个MAC地址和一个IP地址&lt;br/&gt;2、MAC地址常用于一个局域网络&lt;br/&gt;3、IP地址可以可以在本地的网段使用，同样可以再其他网段使用&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;span&gt;--- EOF ---&lt;/span&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;推荐↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAxNTcyNzAyOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/NW4iaKVI4GNOJHFfxs3Dq0jLTT7riaETbUFsDsjYiaOftPu1tdHm0icq8sgibZo5ZEiaHGbLLxSVrd3B5psBZVwVCdHQ/0?wx_fmt=png&quot; data-nickname=&quot;运维&quot; data-alias=&quot;Operation1024&quot; data-signature=&quot;分享网络管理、网络运维、运维规划、运维开发、Python运维、Linux运维等知识，推广围绕DevOps理念的自动化运维、精益运维、智能运维等优秀实践，让运维工程师更加专注于自动化。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1d31dc4554fd9820be4861fe95b4d86f</guid>
<title>Golang 如何优雅的终止一个服务？</title>
<link>https://toutiao.io/k/o368ejn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;65&quot; data-source-title=&quot;https://leileiluoluo.com&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;大家好，我是浩然，网名“磊磊落落”。专注Golang、算法、DevOps、PostgreSQL及云原生，想学新技术，关注我就对了！&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3E%E5%A4%A7%E5%AE%B6%E5%A5%BD%EF%BC%8C%E6%88%91%E6%98%AF%E6%B5%A9%E7%84%B6%EF%BC%8C%E7%BD%91%E5%90%8D%E2%80%9C%E7%A3%8A%E7%A3%8A%E8%90%BD%E8%90%BD%E2%80%9D%E3%80%82%E4%B8%93%E6%B3%A8Golang%E3%80%81%E7%AE%97%E6%B3%95%E3%80%81DevOps%E3%80%81PostgreSQL%E5%8F%8A%E4%BA%91%E5%8E%9F%E7%94%9F%EF%BC%8C%E6%83%B3%E5%AD%A6%E6%96%B0%E6%8A%80%E6%9C%AF%EF%BC%8C%E5%85%B3%E6%B3%A8%E6%88%91%E5%B0%B1%E5%AF%B9%E4%BA%86%EF%BC%81%3C%2Fp%3E%22%2C%22digestLen%22%3A65%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22https%3A%2F%2Fleileiluoluo.com%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;https://leileiluoluo.com&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;采用常规方式启动一个 Golang http 服务时，若服务被意外终止或中断，即未等待服务对现有请求连接处理并正常返回且亦未对服务停止前作一些必要的处理工作，这样即会造成服务硬终止。这种方式不是很优雅。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参看如下代码，该 http 服务请求路径为根路径，请求该路径，其会在 2s 后返回 hello。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; addr = flag.String(&lt;span&gt;&quot;server addr&quot;&lt;/span&gt;, &lt;span&gt;&quot;:8080&quot;&lt;/span&gt;, &lt;span&gt;&quot;server address&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    http.HandleFunc(&lt;span&gt;&quot;/&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;        time.Sleep(&lt;span&gt;2&lt;/span&gt; * time.Second)&lt;br/&gt;        fmt.Fprintln(w, &lt;span&gt;&quot;hello&quot;&lt;/span&gt;)&lt;br/&gt;    })&lt;br/&gt;    http.ListenAndServe(*addr, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若服务启动后，请求&lt;code&gt;http://localhost:8080/&lt;/code&gt;，然后使用 Ctrl+C 立即中断服务，服务即会立即退出（exit status 2），请求未正常返回（ERR_CONNECTION_REFUSED），连接即马上断了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来介绍使用 http.Server 的 Shutdown 方法结合 signal.Notify 来优雅的终止服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1 Shutdown 方法&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Golang http.Server 结构体有一个终止服务的方法 Shutdown，其 go doc 如下。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func (srv *Server) Shutdown(ctx context.Context) error&lt;br/&gt;    Shutdown gracefully shuts down the server without interrupting any active&lt;br/&gt;    connections. Shutdown works by first closing all open listeners, then&lt;br/&gt;    closing all idle connections, and then waiting indefinitely for connections&lt;br/&gt;    to return to idle and then shut down. If the provided context expires before&lt;br/&gt;    the shutdown is complete, Shutdown returns the context&#x27;s error, otherwise it&lt;br/&gt;    returns any error returned from closing the Server&#x27;s underlying Listener(s).&lt;br/&gt;&lt;br/&gt;    When Shutdown is called, Serve, ListenAndServe, and ListenAndServeTLS&lt;br/&gt;    immediately return ErrServerClosed. Make sure the program doesn&#x27;t exit and&lt;br/&gt;    waits instead for Shutdown to return.&lt;br/&gt;&lt;br/&gt;    Shutdown does not attempt to close nor wait for hijacked connections such as&lt;br/&gt;    WebSockets. The caller of Shutdown should separately notify such long-lived&lt;br/&gt;    connections of shutdown and wait for them to close, if desired. See&lt;br/&gt;    RegisterOnShutdown for a way to register shutdown notification functions.&lt;br/&gt;&lt;br/&gt;    Once Shutdown has been called on a server, it may not be reused; future&lt;br/&gt;    calls to methods such as Serve will return ErrServerClosed.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由文档可知：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Shutdown 可以优雅的终止服务，其不会中断活跃连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其工作过程为：首先关闭所有开启的监听器，然后关闭所有闲置连接，最后等待活跃的连接均闲置了才终止服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若传入的 context 在服务完成终止前已超时，则 Shutdown 方法返回 context 的错误，否则返回任何由关闭服务监听器所引起的错误。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当 Shutdown 方法被调用时，Serve、ListenAndServe 及 ListenAndServeTLS 方法会立刻返回 ErrServerClosed 错误。请确保 Shutdown 未返回时，勿退出程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对诸如 WebSocket 等的长连接，Shutdown 不会尝试关闭也不会等待这些连接。若需要，需调用者分开额外处理（诸如通知诸长连接或等待它们关闭，使用 RegisterOnShutdown 注册终止通知函数）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一旦对 server 调用了 Shutdown，其即不可再使用了（会报 ErrServerClosed 错误）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了 Shutdown 方法，我们知道在服务终止前，调用该方法即可等待活跃连接正常返回，然后优雅的关闭。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但服务启动后的某一时刻，程序如何知道服务被中断了呢？服务被中断时如何通知程序，然后调用 Shutdown 作处理呢？接下来看一下系统信号通知函数的作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2 signal.Notify 函数&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;signal 包的 Notify 函数提供系统信号通知的能力，其 go doc 如下。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func Notify(c chan&amp;lt;- os.Signal, sig ...os.Signal)&lt;br/&gt;    Notify causes package signal to relay incoming signals to c. If no signals&lt;br/&gt;    are provided, all incoming signals will be relayed to c. Otherwise, just the&lt;br/&gt;    provided signals will.&lt;br/&gt;&lt;br/&gt;    Package signal will not block sending to c: the caller must ensure that c&lt;br/&gt;    has sufficient buffer space to keep up with the expected signal rate. For a&lt;br/&gt;    channel used for notification of just one signal value, a buffer of size 1&lt;br/&gt;    is sufficient.&lt;br/&gt;&lt;br/&gt;    It is allowed to call Notify multiple times with the same channel: each call&lt;br/&gt;    expands the set of signals sent to that channel. The only way to remove&lt;br/&gt;    signals from the set is to call Stop.&lt;br/&gt;&lt;br/&gt;    It is allowed to call Notify multiple times with different channels and the&lt;br/&gt;    same signals: each channel receives copies of incoming signals&lt;br/&gt;    independently.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由文档可知：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参数 c 是调用者的信号接收通道，Notify 可将进入的信号转到 c。sig 参数为需要转发的信号类型，若不指定，所有进入的信号都将会转到 c。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;信号不会阻塞式的发给 c：调用者需确保 c 有足够的缓冲空间，以应对指定信号的高频发送。对于用于通知仅一个信号值的通道，缓冲大小为 1 即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同一个通道可以调用 Notify 多次：每个调用扩展了发送至该通道的信号集合。仅可调用 Stop 来从信号集合移除信号。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;允许不同的通道使用同样的信号参数调用 Notify 多次：每个通道独立的接收进入信号的副本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，有了 signal.Notify，传入一个 chan 并指定中断参数，这样当系统中断时，即可接收到信号。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参看如下代码，当使用 Ctrl+C 时，c 会接收到中断信号，程序会在打印“program interrupted”语句后退出。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    c := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;chan&lt;/span&gt; os.Signal)&lt;br/&gt;    signal.Notify(c, os.Interrupt)&lt;br/&gt;    &amp;lt;-c&lt;br/&gt;    log.Fatal(&lt;span&gt;&quot;program interrupted&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; go run main.go&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Ctrl+C&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;2019/06/11 17:59:11 program interrupted&lt;br/&gt;exit status 1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3 Server 优雅的终止&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们使用如上 signal.Notify 结合 http.Server 的 Shutdown 方法实现服务优雅的终止。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下代码，Handler 与文章开始时的处理逻辑一样，其会在&lt;code&gt;2s&lt;/code&gt;后返回 hello。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个 http.Server 实例，指定端口与 Handler。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;声明一个 processed chan，其用来保证服务优雅的终止后再退出主 goroutine。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新启一个 goroutine，其会监听 os.Interrupt 信号，一旦服务被中断即调用服务的 Shutdown 方法，确保活跃连接的正常返回（本代码使用的 Context 超时时间为 3s，大于服务 Handler 的处理时间，所以不会超时）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;处理完成后，关闭 processed 通道，最后主 goroutine 退出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码同时托管在 GitHub，欢迎关注（github.com/olzhy/go-excercises）。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; addr = flag.String(&lt;span&gt;&quot;server addr&quot;&lt;/span&gt;, &lt;span&gt;&quot;:8080&quot;&lt;/span&gt;, &lt;span&gt;&quot;server address&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// handler&lt;/span&gt;&lt;br/&gt;    handler := http.HandlerFunc(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;        time.Sleep(&lt;span&gt;2&lt;/span&gt; * time.Second)&lt;br/&gt;        fmt.Fprintln(w, &lt;span&gt;&quot;hello&quot;&lt;/span&gt;)&lt;br/&gt;    })&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// server&lt;/span&gt;&lt;br/&gt;    srv := http.Server{&lt;br/&gt;        Addr:    *addr,&lt;br/&gt;        Handler: handler,&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// make sure idle connections returned&lt;/span&gt;&lt;br/&gt;    processed := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;chan&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;{})&lt;br/&gt;    &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;        c := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;chan&lt;/span&gt; os.Signal, &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;        signal.Notify(c, os.Interrupt)&lt;br/&gt;        &amp;lt;-c&lt;br/&gt;&lt;br/&gt;        ctx, cancel := context.WithTimeout(context.Background(), &lt;span&gt;3&lt;/span&gt;*time.Second)&lt;br/&gt;        &lt;span&gt;defer&lt;/span&gt; cancel()&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; err := srv.Shutdown(ctx); &lt;span&gt;nil&lt;/span&gt; != err {&lt;br/&gt;            log.Fatalf(&lt;span&gt;&quot;server shutdown failed, err: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;        }&lt;br/&gt;        log.Println(&lt;span&gt;&quot;server gracefully shutdown&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;close&lt;/span&gt;(processed)&lt;br/&gt;    }()&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// serve&lt;/span&gt;&lt;br/&gt;    err := srv.ListenAndServe()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; http.ErrServerClosed != err {&lt;br/&gt;        log.Fatalf(&lt;span&gt;&quot;server not gracefully shutdown, err :%v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// waiting for goroutine above processed&lt;/span&gt;&lt;br/&gt;    &amp;lt;-processed&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4ffe9beff7e2bed72bb9aa1fdb423342</guid>
<title>华为天才少年稚晖君自制的，又萌又硬的桌面小机器人，开源了！</title>
<link>https://toutiao.io/k/9o0g54r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>