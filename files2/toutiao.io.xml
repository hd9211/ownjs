<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>99b29f4319184389838ac64d4d21bfd3</guid>
<title>Go 源码里的这些 //go: 指令，你知道吗？</title>
<link>https://toutiao.io/k/6fs6k5s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你平时有翻看源码的习惯，你肯定会发现。咦，怎么有的方法上面总是写着 &lt;code&gt;//go:&lt;/code&gt;  这类指令呢。他们到底是干嘛用的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天和大家一同揭开他们的面纱，我将给你介绍一下他们的作用都是什么。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;go:linkname&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:linkname localname importpath.name&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该指令指示编译器使用 &lt;code&gt;importpath.name&lt;/code&gt; 作为源代码中声明为 &lt;code&gt;localname&lt;/code&gt; 的变量或函数的目标文件符号名称。但是由于这个伪指令，可以破坏类型系统和包模块化，只有引用了 unsafe 包才可以使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来讲，就是 &lt;code&gt;importpath.name&lt;/code&gt; 是 &lt;code&gt;localname&lt;/code&gt; 的符号别名，编译器实际上会调用 &lt;code&gt;localname&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用的前提是使用了 &lt;code&gt;unsafe&lt;/code&gt; 包才能使用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;time/time.go&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;...&lt;br/&gt;func now() (sec int64, nsec int32, mono int64)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;runtime/timestub.go&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import _ &lt;span&gt;&quot;unsafe&quot;&lt;/span&gt; // &lt;span&gt;for&lt;/span&gt; go:linkname&lt;br/&gt;&lt;br/&gt;//go:linkname time_now time.now&lt;br/&gt;func time_now() (sec int64, nsec int32, mono int64) {&lt;br/&gt; sec, nsec = walltime()&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; sec, nsec, nanotime() - startNano&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个案例中可以看到 &lt;code&gt;time.now&lt;/code&gt;，它并没有具体的实现。如果你初看可能会懵逼。这时候建议你全局搜索一下源码，你就会发现其实现在 &lt;code&gt;runtime.time_now&lt;/code&gt; 中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配合先前的用法解释，可得知在 runtime 包中，我们声明了 &lt;code&gt;time_now&lt;/code&gt; 方法是 &lt;code&gt;time.now&lt;/code&gt; 的符号别名。并且在文件头引入了 &lt;code&gt;unsafe&lt;/code&gt; 达成前提条件。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;go:noescape&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:noescape&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该指令指定下一个有声明但没有主体（意味着实现有可能不是 Go）的函数，不允许编译器对其做逃逸分析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般情况下，该指令用于内存分配优化。编译器默认会进行逃逸分析，会通过规则判定一个变量是分配到堆上还是栈上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但凡事有意外，一些函数虽然逃逸分析其是存放到堆上。但是对于我们来说，它是特别的。我们就可以使用 &lt;code&gt;go:noescape&lt;/code&gt; 指令强制要求编译器将其分配到函数栈上。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// memmove copies n bytes from &lt;span&gt;&quot;from&quot;&lt;/span&gt; to &lt;span&gt;&quot;to&quot;&lt;/span&gt;.&lt;br/&gt;// &lt;span&gt;in&lt;/span&gt; memmove_*.s&lt;br/&gt;//go:noescape&lt;br/&gt;func memmove(to, from unsafe.Pointer, n uintptr)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们观察一下这个案例，它满足了该指令的常见特性。如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;memmove_*.s：只有声明，没有主体。其主体是由底层汇编实现的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;memmove：函数功能，在栈上处理性能会更好&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;go:nosplit&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:nosplit&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该指令指定文件中声明的下一个函数不得包含堆栈溢出检查。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来讲，就是这个函数跳过堆栈溢出的检查。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:nosplit&lt;br/&gt;func key32(p *uintptr) *uint32 {&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; (*uint32)(unsafe.Pointer(p))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;go:nowritebarrierrec&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:nowritebarrierrec&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该指令表示编译器遇到写屏障时就会产生一个错误，并且允许递归。也就是这个函数调用的其他函数如果有写屏障也会报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来讲，就是针对写屏障的处理，防止其死循环。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:nowritebarrierrec&lt;br/&gt;func gcFlushBgCredit(scanWork int64) {&lt;br/&gt;    ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;go:yeswritebarrierrec&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:yeswritebarrierrec&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该指令与 &lt;code&gt;go:nowritebarrierrec&lt;/code&gt; 相对，在标注 &lt;code&gt;go:nowritebarrierrec&lt;/code&gt; 指令的函数上，遇到写屏障会产生错误。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而当编译器遇到 &lt;code&gt;go:yeswritebarrierrec&lt;/code&gt; 指令时将会停止。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:yeswritebarrierrec&lt;br/&gt;func &lt;span&gt;&lt;span&gt;gchelper&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt; ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;go:noinline&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该指令表示该函数禁止进行内联。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:noinline&lt;br/&gt;func unexportedPanicForTesting(b []byte, i int) byte {&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; b[i]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们观察一下这个案例，是直接通过索引取值，逻辑比较简单。如果不加上 &lt;code&gt;go:noinline&lt;/code&gt; 的话，就会出现编译器对其进行内联优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;显然，内联有好有坏。该指令就是提供这一特殊处理。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;go:norace&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:norace&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该指令表示禁止进行竞态检测。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见的形式就是在启动时执行 &lt;code&gt;go run -race&lt;/code&gt;，能够检测应用程序中是否存在双向的数据竞争，非常有用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:norace&lt;br/&gt;func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr *ProcAttr, sys *SysProcAttr, pipe int) (pid int, err Errno) {&lt;br/&gt;    ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;go:notinheap&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//go:notinheap&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该指令常用于类型声明，它表示这个类型不允许从 GC 堆上进行申请内存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在运行时中常用其来做较低层次的内部结构，避免调度器和内存分配中的写屏障，能够提高性能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// notInHeap is off-heap memory allocated by a lower-level allocator&lt;br/&gt;// like sysAlloc or persistentAlloc.&lt;br/&gt;//&lt;br/&gt;// In general, it&lt;span&gt;&#x27;s better to use real types marked as go:notinheap,&lt;br/&gt;// but this serves as a generic type for situations where that isn&#x27;&lt;/span&gt;t&lt;br/&gt;// possible (like &lt;span&gt;in&lt;/span&gt; the allocators).&lt;br/&gt;//&lt;br/&gt;//go:notinheap&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; notInHeap struct{}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在本文我们简单介绍了一些常见的指令集，让大家有了整体的系统了解。这些指令平时在 Go 工程中我们是用不到的，常见的瓶颈可能更多的在自身应用上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过在了解了这些机制后，对你阅读 Go 语言底层源码和了解运行机制会很有帮助 ：）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>61881fc8541a4a2db7d32629905be4af</guid>
<title>一篇文章讲懂 Prometheus</title>
<link>https://toutiao.io/k/6so2bnp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
      

      
        &lt;p&gt;作为云原生体系下的“默认”监控系统，prometheus正在获得越来越广泛的关注。今天，我们就讲一下prometheus的设计理念，看看它是如何用非常简单的设计支撑起如此复杂的功能的。&lt;/p&gt;
&lt;span id=&quot;more&quot;/&gt;

&lt;p&gt;首先，我们来思考一下，如果要做一个监控系统，都有哪些难点，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个服务的监控需求都不一样，那么对于监控系统来说，要怎么设计其数据模型，才能取得易用性和通用性之间的平衡&lt;/li&gt;
&lt;li&gt;大量的数据量要如何存储&lt;/li&gt;
&lt;li&gt;怎样能实现各种复杂的报表&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;带着这些问题，我们就来看看prometheus是怎么设计的。&lt;/p&gt;
&lt;h1 id=&quot;历史&quot;&gt;&lt;a href=&quot;#历史&quot; class=&quot;headerlink&quot; title=&quot;历史&quot;/&gt;历史&lt;/h1&gt;&lt;p&gt;让我们先从历史说起，prometheus最早由SoundCloud开发，后来捐赠到开源社区。在2016年假如CNCF, 即云原生计算基金会。Prometheus是CNCF的第二个项目，仅次于kubernets。 因此，可想而知，promethous在整个云原生体系中有多么重要的作用。Prometheus也逐渐成了云原生下监控系统的事实标准。&lt;/p&gt;
&lt;h1 id=&quot;核心设计理念&quot;&gt;&lt;a href=&quot;#核心设计理念&quot; class=&quot;headerlink&quot; title=&quot;核心设计理念&quot;/&gt;核心设计理念&lt;/h1&gt;&lt;p&gt;对于一个监控系统来说，核心要解决的问题其实就三个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监控指标用什么形式表示&lt;/li&gt;
&lt;li&gt;怎么收集和存储指标&lt;/li&gt;
&lt;li&gt;怎么利用指标生成报表&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于这三个问题，prometheus都给出了很巧妙的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;数据模型&quot;&gt;&lt;a href=&quot;#数据模型&quot; class=&quot;headerlink&quot; title=&quot;数据模型&quot;/&gt;数据模型&lt;/h2&gt;&lt;p&gt;romethous的数据模型，简而言之，就是一个「时序」的 Metric数据。所谓metric, 就是数据的测量值，而所谓时序，就是这些metric, 会源源不断的产生不同时间点的数据。&lt;/p&gt;
&lt;p&gt;Metric有唯一的名称标识，也可以设置多个label, 可以用于过滤和聚合，其格式如下。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;metric name&amp;gt;{&amp;lt;label name&amp;gt;=&amp;lt;label value&amp;gt;, ...}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;这样，对于任何业务，我们都可以将监控数据设计成统一的metric格式。这样对于promethous来说，方案可以足够简单，只用处理这一种数据格式就可以。而同时又足以方便的应对千变万化的业务场景。&lt;/p&gt;
&lt;p&gt;Prometheus提供了 counter, gauge, histogram, summary 四种核心的metric, 不过其区别仅体现在client端和promQL中。截至目前(2021.11)， 不同的metric 类型在 prometheus server 这一侧并不会有什么区别，&lt;/p&gt;
&lt;h2 id=&quot;数据收集和存储&quot;&gt;&lt;a href=&quot;#数据收集和存储&quot; class=&quot;headerlink&quot; title=&quot;数据收集和存储&quot;/&gt;数据收集和存储&lt;/h2&gt;&lt;p&gt;Prometheus server会定时从要监控的服务暴露出的http接口上抓取数据，是一种典型的拉模型。&lt;/p&gt;
&lt;p&gt;相对推模型，拉模型会有一些好处，比如更容易监测某一个节点是否正常；更容易本地调试等。当然，对于一个监控系统来说，采用推还是拉，其实并不是一个主要问题。&lt;/p&gt;
&lt;p&gt;Prometheus的数据是典型的时序数据，prometheus本身会将数据存储在本地磁盘上。要注意的是，本地存储不可复制，无法构建集群，如果本地磁盘或节点出现故障，存储将无法扩展和迁移。因此一般只能把本地存储视为近期数据的短暂滑动窗口。&lt;/p&gt;
&lt;p&gt;而关于持久化存储的问题，prometheus实际上并没有试图解决。它的做法是定义出标准的读写接口，从而可以将数据存储到任意一个第三方存储上。&lt;/p&gt;
&lt;h2 id=&quot;生成报表&quot;&gt;&lt;a href=&quot;#生成报表&quot; class=&quot;headerlink&quot; title=&quot;生成报表&quot;/&gt;生成报表&lt;/h2&gt;&lt;p&gt;Prometheus定义了功能强大的promQL, 可以满足各种复杂的查询场景，具体可参考 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://prometheus.io/docs/prometheus/latest/querying/basics/&quot;&gt;https://prometheus.io/docs/prometheus/latest/querying/basics/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;周边生态&quot;&gt;&lt;a href=&quot;#周边生态&quot; class=&quot;headerlink&quot; title=&quot;周边生态&quot;/&gt;周边生态&lt;/h1&gt;&lt;p&gt;一个开源项目的发展，当然离不开周边生态的发展。而prometheus目前已经有了很完善的生态，在java, go, python等主流的开发语言下，都有完善的client包可以使用； 像spring中，可以很容易的为多种组件增加打点，这一点，在下边的实战环节我们会细讲；在kubernetes中，可以轻易的配置自动去各个节点抓取prometheus数据；借助grafana等工具，也可以配置出多种多样的报表。&lt;/p&gt;
&lt;h1 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;/&gt;实战&lt;/h1&gt;&lt;p&gt;接下来，我们会以springboot项目为例，来看一看prometheus的实际效果。&lt;/p&gt;
&lt;p&gt;其核心思路就是使用spring-actuator 为springboot应用配置监控，并以promethous的结构暴露出来。&lt;/p&gt;
&lt;p&gt;首先，引入依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;implementation(&quot;org.springframework.boot:spring-boot-starter-actuator&quot;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;implementation(&quot;io.micrometer:micrometer-registry-prometheus&quot;)&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后添加spring配置&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;management:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  endpoints:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    web:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      exposure:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        include: &quot;prometheus&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  metrics:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    distribution:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      sla:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        http:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          server:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            requests: &quot;100ms,150ms,250ms,500ms,1s&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      percentiles-histogram:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        http:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          server:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            requests: true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    web:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      server:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        request:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          autotime:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            enabled: true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    export:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      prometheus:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        enabled: true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    tags:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      application: name&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个配置里，其实做了几件事：将数据以prometheus的格式暴露出来；自动为http请求添加histogram监控；增加一个application标识，这个标识会作为一个label出现在所有metric中。&lt;/p&gt;
&lt;p&gt;之后，启动springboot项目，并且访问/actuator/prometheus路径，就可以看到大量metric, 比如&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# HELP executor_pool_size_threads The current number of threads in the pool&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE executor_pool_size_threads gauge&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;executor_pool_size_threads{application=&quot;ads-programad&quot;,name=&quot;asyncExecutor&quot;,} 0.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP tomcat_servlet_request_seconds  &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE tomcat_servlet_request_seconds summary&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;tomcat_servlet_request_seconds_count{application=&quot;ads-programad&quot;,name=&quot;dispatcherServlet&quot;,} 1.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;tomcat_servlet_request_seconds_sum{application=&quot;ads-programad&quot;,name=&quot;dispatcherServlet&quot;,} 0.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP executor_pool_core_threads The core number of threads for the pool&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE executor_pool_core_threads gauge&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;executor_pool_core_threads{application=&quot;ads-programad&quot;,name=&quot;asyncExecutor&quot;,} 70.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE jvm_classes_unloaded_classes_total counter&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;jvm_classes_unloaded_classes_total{application=&quot;ads-programad&quot;,} 0.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP executor_completed_tasks_total The approximate total number of tasks that have completed execution&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE executor_completed_tasks_total counter&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;executor_completed_tasks_total{application=&quot;ads-programad&quot;,name=&quot;asyncExecutor&quot;,} 0.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP tomcat_threads_config_max_threads  &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE tomcat_threads_config_max_threads gauge&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;tomcat_threads_config_max_threads{application=&quot;ads-programad&quot;,name=&quot;http-nio-9000&quot;,} 500.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP process_cpu_usage The &quot;recent cpu usage&quot; for the Java Virtual Machine process&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE process_cpu_usage gauge&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;process_cpu_usage{application=&quot;ads-programad&quot;,} 0.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP tomcat_sessions_active_current_sessions  &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE tomcat_sessions_active_current_sessions gauge&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;tomcat_sessions_active_current_sessions{application=&quot;ads-programad&quot;,} 0.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE jvm_memory_committed_bytes gauge&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;jvm_memory_committed_bytes{application=&quot;ads-programad&quot;,area=&quot;heap&quot;,id=&quot;G1 Eden Space&quot;,} 3.5651584E7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;jvm_memory_committed_bytes{application=&quot;ads-programad&quot;,area=&quot;heap&quot;,id=&quot;G1 Old Gen&quot;,} 4.6137344E7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;jvm_memory_committed_bytes{application=&quot;ads-programad&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,} 5767168.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;jvm_memory_committed_bytes{application=&quot;ads-programad&quot;,area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;non-profiled nmethods&#x27;&quot;,} 8847360.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;jvm_memory_committed_bytes{application=&quot;ads-programad&quot;,area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;non-nmethods&#x27;&quot;,} 2555904.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;jvm_memory_committed_bytes{application=&quot;ads-programad&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,} 4.2287104E7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;jvm_memory_committed_bytes{application=&quot;ads-programad&quot;,area=&quot;heap&quot;,id=&quot;G1 Survivor Space&quot;,} 4194304.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP tomcat_servlet_request_max_seconds  &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE tomcat_servlet_request_max_seconds gauge&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;tomcat_servlet_request_max_seconds{application=&quot;ads-programad&quot;,name=&quot;dispatcherServlet&quot;,} 0.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP tomcat_connections_current_connections  &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE tomcat_connections_current_connections gauge&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;tomcat_connections_current_connections{application=&quot;ads-programad&quot;,name=&quot;http-nio-9000&quot;,} 3.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# HELP tomcat_sessions_active_max_sessions  &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;# TYPE tomcat_sessions_active_max_sessions gauge&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中，除了我们显式配置的http监控，其实还有大量的jvm, 机器负载等基础的监控信息。&lt;/p&gt;
&lt;p&gt;除此之外，对于其他组件的监控也很容易添加，诸如线程池、http连接池、自定义监控等，可以参考 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/lcy362/springboot-prometheus-demo&quot;&gt;https://github.com/lcy362/springboot-prometheus-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文地址: &lt;a href=&quot;http://lichuanyang.top/posts/28288/&quot;&gt;http://lichuanyang.top/posts/28288/&lt;/a&gt;&lt;/p&gt;

      
    &lt;/div&gt;
    
    
    
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fe556d889b62e0b23e24f2e6eb1a1e60</guid>
<title>ClickHouse 连接 ZK 频繁超时处理案例</title>
<link>https://toutiao.io/k/5cnybes</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、背景：&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们线上有一套clickhouse集群，5分片2副本总计10个实例，每个实例独占1台物理机，配套混布一个3节点zookeeper集群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件版本：centos 7.5  + CK 19.7.3 + ZK 3.4.13&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从昨天开始应用写入日志开始堆积，并不断的报错zookeeper session timeout。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;登录机器查看clickhouse的errlog，大量的timeout信息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;2021.09.29 05:48:19.940814 [ 32 ] {} &amp;lt;Warning&amp;gt; app.log_dev_local (ReplicatedMergeTreeRestartingThread): ZooKeeper session has expired. Switching to a new session.&lt;br/&gt;2021.09.29 05:48:19.949000 [ 25 ] {} &amp;lt;Warning&amp;gt; app.log_k8s_local (ReplicatedMergeTreeRestartingThread): ZooKeeper session has expired. Switching to a new session.&lt;br/&gt;2021.09.29 05:48:19.952341 [ 30 ] {} &amp;lt;Error&amp;gt; app.log_dev_local (ReplicatedMergeTreeRestartingThread): void DB::ReplicatedMergeTreeRestartingThread::run(): Code: 999, e.displayText() = Coordination::Exception: All con&lt;br/&gt;nection tries failed &lt;span&gt;while&lt;/span&gt; connecting to ZooKeeper. Addresses: 10.1.1.1:2181, 10.1.1.1.2:2181, 10.1.1.3:2181&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、诊断&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看zookeeper状态，3个实例都执行&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;stat&lt;/span&gt;|nc 127.0.0.1 2181&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100001388&quot; data-ratio=&quot;0.5103734439834025&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qaWuZTGK0vzCow8qNgibPJQA1tdZjicRVehMpCKj8jia87aL7kXuhh3yNsusBjyZic68sPJHkl5h6cnHAsnzrgFdTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;241&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回1个leader 2个follower，集群状态是正常的，但是该命令执行很慢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尝试登录zk实例&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;sh /usr/lib/zookeeper/bin/zkCli.sh -server 127.0.0.1:2181&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入登录界面后执行 ls /卡顿半天，然后返回timeout。应该是ZK集群通信出了问题，先对其进行滚动重启，重启后问题依然存在。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尝试调优zk参数，当前参数为&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;tickTime= 2000 &lt;br/&gt;syncLimit = 10&lt;br/&gt;minSessionTimeout = 4000&lt;br/&gt;maxSessionTimeout = 120000&lt;br/&gt;forceSync=yes&lt;br/&gt;leaderServes = yes&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调整成&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;tickTime= 2000 &lt;br/&gt;syncLimit = 100&lt;br/&gt;minSessionTimeout = 40000&lt;br/&gt;maxSessionTimeout = 600000&lt;br/&gt;forceSync= no&lt;br/&gt;leaderServes = no&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重启集群后问题依然存在。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们线上有4套CK集群，每套都独占一套zk，其余3套集群的zookeeper的内存只有几十K，Node count只有几万，而出问题的这套Node count有2千多万，zookeeper进程内存30G左右。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在怀疑是Node count过多，导致节点通信拥堵，于是想办法降低Node数量：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;该环境有一套kafka混用了ZK集群，为其搭建了一套专属ZK集群并将ZK元数据目录删除，node count和物理内存依然很高，问题没有解决。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;清理无用表，找出600多个表，执行drop后，node count和物理内存依然很高，问题没有解决。降低Node count的尝试失败。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;排查到现在，基本能想到的招数都已用到，再整理一下思路：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;ZK节点响应很慢，但是集群状态是正常的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CK的insert经常超时，但是偶尔能执行成功；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;增大ZK的超时参数，没有丝毫改善&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ZK的node count非常多，当前的3个ZK实例占用内存很高(RSS一直在30G上下浮动)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;zookeeper实例本质是1个java进程，有没有可能是达到内存上限频繁的触发full gc，进而导致ZK服务响应经常性卡顿？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搜索半天没有在机器上发现full gc的日志记录，只能直接验证一下猜想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在/usr/lib/zookeeper/conf目录下新建1个文件java.env，内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; JVMFLAGS=&lt;span&gt;&quot;-Xms16384m -Xmx32768m &lt;span&gt;$JVMFLAGS&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;滚动重启ZK集群，启动完毕后问题依然存在，但是ZK实例的RSS从原来的30G上升到了33G，超出了Xmx上限。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该是没吃饱，修改一下文件参数&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; JVMFLAGS=&lt;span&gt;&quot;-Xms16384m -Xmx65536m &lt;span&gt;$JVMFLAGS&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再次重启ZK集群，ZK实例的RSS飙升到55G左右就不再上升，困扰多时的问题也自动消失了，看来刚刚的full gc猜想是正确的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然已经证明是JVM heap内存的问题，那么刚刚调整的ZK参数就全部回滚，然后滚动重启ZK集群。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3、溯源&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统自此稳定了，但是zk进程占用的物理内存越来越大，没几天就达到了64G，照这个消耗速度，256G内存被耗光是迟早的事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么这套zk的node count会这么多，zk进程的RSS这么大？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;登录zk，随意翻找一个表的副本目录，发现parts目录居然有8000多个znode，&lt;img data-fileid=&quot;100001387&quot; data-ratio=&quot;0.18625678119349007&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qaWuZTGK0vzCow8qNgibPJQA1tdZjicRVezBb2OaKvj2n4PnGWuOib6Qf6icgibHA5fUjpstV49lvH12ia8zNgMlXmvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;登录到ck实例，执行&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;use system&lt;br/&gt;select substring(name,1,6),count(*) from zookeeper &lt;span&gt;where&lt;/span&gt; path=&lt;span&gt;&#x27;/clickhouse/tables/01-01/db/table/replicas/ch1/parts&#x27;&lt;/span&gt; group by substring(name,1,6) order by substring(name,1,6);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100001389&quot; data-ratio=&quot;0.6416382252559727&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qaWuZTGK0vzCow8qNgibPJQA1tdZjicRVe93AHsIxjIicorV5hUpvOibDXbNlM3rqlmhMW0SKzBLZsnZ5iaXmbKDPpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;293&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该表自从7月后znode part数量就一路飙升，在9月末达到最高值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尝试执行optimize table table final，对降低part没什么用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经和开发沟通后获悉，在7月的时候部分表的insert从每10s执行1次改成了1s执行1次，对应的就是part数量的飙升。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将这些表的insert统统改回了每10s执行1次，截止目前(10月28号)，10月份的part基本回落到了一个正常值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于如何清理已有的znode，目前有2种方法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;将部分离线表导出后drop，然后再导入，操作后znode从2400w下降到了1700w&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大部分表的数据都有生命周期，N个月后将不再需要的历史分区直接drop&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至少目前可以确信znode不会再暴涨，zk进程的内存也不会继续增加，可以保证clickhouse集群稳定的运行下去。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4、小结&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次案例前后耗费了2天的时间才得以定位原因并解决，又耗费了更长的时间才找到问题根源，距离发稿截止日期已经过了整整1个月，期间没有再复发过。&lt;br/&gt;java进程对Xms和Xmx设置很敏感，线上应用要密切关注其内存占用情况。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;作者简介: 任坤，现居珠海，先后担任专职 Oracle 和 MySQL DBA，现在主要负责 MySQL、mongoDB、Redis 和 Clickhouse 维护工作。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>468b432f576eed936f201bddee8e088f</guid>
<title>Go 并发编程一年回顾 (2021)</title>
<link>https://toutiao.io/k/o43fzwc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;
      
      
      
      &lt;p&gt;去年的时候我写了一篇&lt;a href=&quot;https://colobu.com/2020/07/05/the-state-of-go-sync-2020/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go并发编程一年回顾&lt;/a&gt;,如今2021年也快结束了，Go 1.18的特性已经冻结，美国页很快进入了假期模式，趁这个节点，我们回顾一下近一年Go并发编程的进展。&lt;/p&gt;
&lt;a id=&quot;more&quot;/&gt;
&lt;h2 id=&quot;TryLock终于要发布&quot;&gt;TryLock终于要发布&lt;/h2&gt;
&lt;p&gt;很久以来(可以追溯到2013年&lt;a href=&quot;https://github.com/golang/go/issues/6123&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#6123&lt;/a&gt;),就有人提议给Mutex增加TryLock的方法，被大佬们无情的拒绝了，断断续续，断断续续的一直有人提议需要这个方法，如今到了2021年，Go team大佬们终于松口了，增加了相应的方法(&lt;a href=&quot;https://github.com/golang/go/issues/45435&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#45435&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;一句话来说，Mutex增加了TryLock， 尝试获取锁, RWMutex 增加了 TryLock和TryRLock方法，尝试获取写锁和读锁。它们都返回bool类型。如果返回true,代表已经获取到了相应的锁，如果返回false,则表示没有获取到相应的锁。&lt;/p&gt;
&lt;p&gt;本质上，要实现这些方法并不麻烦，接下来我们看看相应的实现(去除了race代码)。&lt;/p&gt;
&lt;p&gt;首先是Mutex.TryLock:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (m *Mutex) TryLock() &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; atomic.CompareAndSwapInt32(&amp;amp;m.state,&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt;, mutexLocked) {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;也就是利用aromic.CAS操作state字段，如果当前没有被锁或者没有等待锁的情况，就可以成功获取到锁。不会尝试spin和与等待者竞争。&lt;/p&gt;
&lt;p&gt;不要吐槽上面的代码风格，可能你觉得不应该写成下面的方式吗？原因在于我删除了race代码，那些代码块中包含race代码，所以不能像下面一样简写：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (m *Mutex) TryLock() &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; atomic.CompareAndSwapInt32(&amp;amp;m.state,&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt;, mutexLocked)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;读写锁有些麻烦，因为它有读锁和写锁两种情况。&lt;/p&gt;
&lt;p&gt;首先看RWMutex.TryLock(去除了race代码):&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (rw *RWMutex) TryLock() &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !rw.w.TryLock() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !atomic.CompareAndSwapInt32(&amp;amp;rw.readerCount,&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt;, -rwmutexMaxReaders) {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;        rw.w.Unlock()&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;首先底层的Mutex.TryLock,尝试获取w字段的锁,如果成功，需要检查当前的Reader, 如果没有reader,则成功, 如果此时不幸还有reader没有释放读锁，那么尝试Lock也是不成功的,返回false。注意返回之前一定要把rw.w的锁释放掉。&lt;/p&gt;
&lt;p&gt;接下来看RWMutex.TryRLock(去除了race代码):&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (rw *RWMutex) TryRLock() &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;c := atomic.LoadInt32(&amp;amp;rw.readerCount)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c &amp;lt;&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; atomic.CompareAndSwapInt32(&amp;amp;rw.readerCount, c, c&lt;span class=&quot;number&quot;&gt;+1&lt;/span&gt;) {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这段代码首先检查readerCount,如果为负值，说明有writer，此时直接返回false。&lt;/p&gt;
&lt;p&gt;如果没有writer, 则使用atomic.CAS把reader加1, 如果成功，返回。如果不成功，那么此时可能有其它reader加入，或者也可能有writer加入，因为不能判断是reader还是writer加入，那么就用一个for循环再重试。&lt;/p&gt;
&lt;p&gt;如果是writer加入，那么下一次循环c可能就是负数，直接返回false,如果刚才是有reader加入，那么它再尝试加1就好了。&lt;/p&gt;
&lt;p&gt;以上就是新增的代码，不是特别复杂。Go team不情愿的把这几个方法加上了, 同时有很贴心的提示(恐吓):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that while correct uses of TryLock do exist, they are rare,&lt;br/&gt;and use of TryLock is often a sign of a deeper problem&lt;br/&gt; in a particular use of mutexes. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;WaitGroup的字段变化&quot;&gt;WaitGroup的字段变化&lt;/h2&gt;
&lt;p&gt;先前，WaitGroup类型使用&lt;code&gt;[3]uint32&lt;/code&gt;作为&lt;code&gt;state1&lt;/code&gt;字段的类型，在64位和32位编译器情况下，这个字段的byte的意义是不同的，主要是为了对齐。虽然使用一个字段很&quot;睿智&quot;,但是阅读起来却很费劲，现在，Go team把它改成了两个字段，根据对齐规则，64位编译器会对齐相应字段，讲真的，我们不差那4个字节。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;19&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;20&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;21&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;22&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;23&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;24&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;25&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; WaitGroup &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;noCopy noCopy&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 64-bit value: high 32 bits are counter, low 32 bits are waiter count.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 64-bit atomic operations require 64-bit alignment, but 32-bit&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// compilers only guarantee that 64-bit fields are 32-bit aligned.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// For this reason on 32 bit architectures we need to check in state()&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// if state1 is aligned or not, and dynamically &quot;swap&quot; the field order if&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// needed.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;state1 &lt;span class=&quot;typename&quot;&gt;uint64&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;state2 &lt;span class=&quot;typename&quot;&gt;uint32&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// state returns pointers to the state and sema fields stored within wg.state*.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (wg *WaitGroup) state() (statep *&lt;span class=&quot;typename&quot;&gt;uint64&lt;/span&gt;, semap *&lt;span class=&quot;typename&quot;&gt;uint32&lt;/span&gt;) {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; unsafe.Alignof(wg.state1) ==&lt;span class=&quot;number&quot;&gt; 8&lt;/span&gt; || &lt;span class=&quot;typename&quot;&gt;uintptr&lt;/span&gt;(unsafe.Pointer(&amp;amp;wg.state1))&lt;span class=&quot;number&quot;&gt;%8&lt;/span&gt; ==&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// state1 is 64-bit aligned: nothing to do.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;wg.state1, &amp;amp;wg.state2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;} &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// state1 is 32-bit aligned but not 64-bit aligned: this means that&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// (&amp;amp;state1)+4 is 64-bit aligned.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;state := (*&lt;span class=&quot;number&quot;&gt;[3&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;uint32&lt;/span&gt;)(unsafe.Pointer(&amp;amp;wg.state1))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (*&lt;span class=&quot;typename&quot;&gt;uint64&lt;/span&gt;)(unsafe.Pointer(&amp;amp;state&lt;span class=&quot;number&quot;&gt;[1&lt;/span&gt;])), &amp;amp;state&lt;span class=&quot;number&quot;&gt;[0&lt;/span&gt;]&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;64位对齐情况下state1和state2意义很明确，如果不是64位对齐，还得巧妙的转换一下。&lt;/p&gt;
&lt;h2 id=&quot;Pool中使用fastrandn替换fastrand&quot;&gt;Pool中使用fastrandn替换fastrand&lt;/h2&gt;
&lt;p&gt;Go运行时中提供了&lt;code&gt;fastrandn&lt;/code&gt;方法，要比&lt;code&gt;fastrand() % n&lt;/code&gt;快很多，相关的文章可以看下面中的注释中的地址。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;19&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;20&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;21&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;22&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;23&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;24&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;25&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;26&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;27&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:nosplit&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; fastrand() &lt;span class=&quot;typename&quot;&gt;uint32&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;mp := getg().m&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Implement wyrand: https://github.com/wangyi-fudan/wyhash&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; goarch.IsAmd64|goarch.IsArm64|goarch.IsPpc64|&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;goarch.IsPpc64le|goarch.IsMips64|goarch.IsMips64le|&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;goarch.IsS390x|goarch.IsRiscv64 ==&lt;span class=&quot;number&quot;&gt; 1&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;mp.fastrand +=&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt;xa0761d6478bd642f&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;hi, lo := math.Mul64(mp.fastrand, mp.fastrand&lt;span class=&quot;number&quot;&gt;^0&lt;/span&gt;xe7037ed1a0b428db)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;uint32&lt;/span&gt;(hi ^ lo)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Implement xorshift64+&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;t := (*&lt;span class=&quot;number&quot;&gt;[2&lt;/span&gt;]&lt;span class=&quot;typename&quot;&gt;uint32&lt;/span&gt;)(unsafe.Pointer(&amp;amp;mp.fastrand))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;s1, s0 := t&lt;span class=&quot;number&quot;&gt;[0&lt;/span&gt;], t&lt;span class=&quot;number&quot;&gt;[1&lt;/span&gt;]&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;s1 ^= s1 &amp;lt;&amp;lt;&lt;span class=&quot;number&quot;&gt; 17&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;s1 = s1 ^ s0 ^ s1&amp;gt;&lt;span class=&quot;number&quot;&gt;&amp;gt;7&lt;/span&gt; ^ s0&amp;gt;&lt;span class=&quot;number&quot;&gt;&amp;gt;16&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;t&lt;span class=&quot;number&quot;&gt;[0&lt;/span&gt;], t&lt;span class=&quot;number&quot;&gt;[1&lt;/span&gt;] = s0, s1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s0 + s1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:nosplit&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; fastrandn(n &lt;span class=&quot;typename&quot;&gt;uint32&lt;/span&gt;) &lt;span class=&quot;typename&quot;&gt;uint32&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This is similar to fastrand() % n, but faster.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// See https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;uint32&lt;/span&gt;(&lt;span class=&quot;typename&quot;&gt;uint64&lt;/span&gt;(fastrand()) * &lt;span class=&quot;typename&quot;&gt;uint64&lt;/span&gt;(n) &amp;gt;&amp;gt;&lt;span class=&quot;number&quot;&gt; 32&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所以sync.Pool中使用&lt;code&gt;fastrandn&lt;/code&gt;做了一点点修改，用来提高性能。好卷啊，这一点点性能都来压榨,关键，这还是开启race才会执行的代码。&lt;/p&gt;
&lt;h2 id=&quot;sync-Value增加了Swap和CompareAndSwap两个便利方法&quot;&gt;sync.Value增加了Swap和CompareAndSwap两个便利方法&lt;/h2&gt;
&lt;p&gt;如果使用sync.Value,这两个方法的逻辑经常会用到，现在这两个方法已经添加到标准库中了。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (v *Value) Swap(&lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;{}) (old &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;{}) &lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (v *Value) CompareAndSwap(old, &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;{}) (swapped &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;)&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go 1.18中虽然实现了泛型，但是一些库的修改有可能在将来的版本中实现了。在泛型推出来之后，atomic对类型的支持会有大大的加强，所以将来Value这个类型有可能退出历史舞台，很少被使用了。(参考Russ Cox的文章&lt;a href=&quot;https://research.swtch.com/gomm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Updating the Go Memory Model&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;整体来说，Go的并发相关的库比较稳定，并没有大的变化。&lt;/p&gt;

      
    &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5583a38b786e95247f8692220c58223c</guid>
<title>命令行解析 JSON 数据的神奇 jq</title>
<link>https://toutiao.io/k/0mmr8ag</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;343&quot; data-backw=&quot;578&quot; data-fileid=&quot;100000073&quot; data-ratio=&quot;0.5925925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/dOoqs5O3OOGvSpGBmbIicpnWiaqtd2gXBWibicdicZGOF7pswIXr6WPhTUxgkcEhUOTss0Qt3N2Z7ic1LKw5bOQHde1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;810&quot;/&gt;&lt;/p&gt;&lt;p&gt;JSON是一种广泛使用的结构化数据格式，通常用于大多数现代API和数据服务。由于其轻量级特性和与 JavaScript 的兼容性，它在 Web 应用程序中特别受欢迎。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不幸的是像Bash这样的shell不能直接解释和处理JSON,这意味着通过命令行使用JSON数据可能会很麻烦(又如sed,grep等工具组合进行文本操作)。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在本次讲解中，我们将看看如何使用jq（瑞士军刀般的JSON命令行处理器）解决如上的困难。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;安装jq&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;curl https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64 -o /usr/local/bin/jq &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 增加可执行权限&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;chmod a+x /usr/local/bin/jq &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// macos 安装办法&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;brew install jq&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// Linux(Ubuntu) 安装办法&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sudo apt-get install jq&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;准备工作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;虚拟伪数据下载：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;https://gist.githubusercontent.com/hzbd/1b635c71552e2c1a9213ac2aaea98756/raw/dc6e69600532e8be09508c3505952dd189700dd2/fake_userinfo.json&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;jq用法解析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;闲话少说，让我们看一些例子&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;注意点：我们在jq命令中会使用到过滤器各种组合，请注意用于封装所有过滤器的单引号。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 只打印整个JSON内容，且美化输出:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json |jq .&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;_id&quot;: &quot;6184d939a126d6f94387cb27&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;index&quot;: 0,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;guid&quot;: &quot;a9704008-a743-49a6-8c5f-45632e564509&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;isActive&quot;: true,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;balance&quot;: &quot;$2,380.51&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;picture&quot;: &quot;http://placehold.it/32x32&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;age&quot;: 26,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;eyeColor&quot;: &quot;brown&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当我们想要从API检索数据并以清晰可读的格式查看响应时，能够美化 JSON 尤其有用&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 基本的过滤 .[], .a&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 获取该数组中的所有元素，而不是数组本身&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json |jq &#x27;.[]&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;_id&quot;: &quot;6184d939a126d6f94387cb27&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;index&quot;: 0,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;guid&quot;: &quot;a9704008-a743-49a6-8c5f-45632e564509&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;isActive&quot;: true,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;balance&quot;: &quot;$2,380.51&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;picture&quot;: &quot;http://placehold.it/32x32&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;age&quot;: 26,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;eyeColor&quot;: &quot;brown&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;name&quot;: &quot;Fox Mcmahon&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 要仅获取每个item的名字字段，只需增加.name&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json |jq &#x27;.[].name&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Fox Mcmahon&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Mcfarland Baldwin&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Robyn Fernandez&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Craig Mitchell&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Tanner Figueroa&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Grace Lott&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Lula Miller&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Wade Walls&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Fitzgerald Clarke&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Fuentes Peters&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. 数组：索引、嵌套过滤器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;获取数组中的第一个item:&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq &#x27;.[0]&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;_id&quot;: &quot;6184d939a126d6f94387cb27&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;index&quot;: 0,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;guid&quot;: &quot;a9704008-a743-49a6-8c5f-45632e564509&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;isActive&quot;: true,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;balance&quot;: &quot;$2,380.51&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;picture&quot;: &quot;http://placehold.it/32x32&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;age&quot;: 26,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;eyeColor&quot;: &quot;brown&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;name&quot;: &quot;Fox Mcmahon&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;gender&quot;: &quot;male&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;company&quot;: &quot;PHARMACON&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;email&quot;: &quot;foxmcmahon@pharmacon.com&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;phone&quot;: &quot;+1 (934) 509-2056&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;address&quot;: &quot;192 Newkirk Placez, Grill, Northern Mariana Islands, 5877&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;about&quot;: &quot;Non eu qui nisi in culpa ad irure. Consectetur aute in adipisicing fugiat sunt fugiat ullamco fugiat. Pariatur minim non non labore.\r\n&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;registered&quot;: &quot;2020-02-19T02:32:34 -08:00&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;latitude&quot;: 46.538592,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;longitude&quot;: -123.07292,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;tags&quot;: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;cupidatat&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;Lorem&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;in&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;tempor&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;in&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;consectetur&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;reprehenderit&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;friends&quot;: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &quot;id&quot;: 0,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &quot;name&quot;: &quot;Maxwell Pace&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &quot;id&quot;: 1,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &quot;name&quot;: &quot;Lynda Lindsay&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &quot;id&quot;: 2,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &quot;name&quot;: &quot;Alyson Hyde&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;greeting&quot;: &quot;Hello, Fox Mcmahon! You have 7 unread messages.&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;favoriteFruit&quot;: &quot;banana&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，你可以附加更多过滤器，用于从第一项获取该人员的朋友栏的第一个friend的名字:&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq &#x27;.[0].friends[0].name&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;Maxwell Pace&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. 长度：array construction, length, pipe&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq &#x27;.[].email&#x27; | wc -l&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;74&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;这里你也可以使用jq自带的length的函数来实现，首先先将email构建为一个数组，然后length计算：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq &#x27;[.[].email] | length&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;74&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5. 过滤器：select, and, contains, ==&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果你想过滤这些电子邮件的后缀怎么办？grep当然可以使用，但是今天我们这里会有一个新的解决办法：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq &#x27;.[].email | select(. | contains(&quot;@netur.com&quot;))&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;wrightmoon@netur.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;又如我们在过滤器中再添加一个条件，从所有男性中过滤上述电子邮件：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq &#x27;.[] | select((.email | &lt;span class=&quot;code-snippet__built_in&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@netur&quot;&lt;/span&gt;)) and .gender == &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;male&quot;&lt;/span&gt;)&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;_id&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;6184d9397cad2b56c781d961&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;index&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;28&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;guid&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;40145e80-ff91-4efc-866b-dc974f923104&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;isActive&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;balance&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;$1,947.45&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;picture&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://placehold.it/32x32&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;age&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;eyeColor&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;brown&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Wright Moon&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;gender&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;male&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;company&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;NETUR&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;email&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;wrightmoon@netur.com&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;phone&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;+1 (923) 540-2056&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;address&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;265 Franklin Street, Martinez, Iowa, 9009&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;about&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Magna ea tempor sint occaecat laborum laboris. Anim ea labore reprehenderit officia consequat laborum ut officia consequat non magna aliqua. Cupidatat ullamco sit labore id veniam mollit aute sunt nostrud sint eu sit mollit ex.\r\n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;registered&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2021-03-08T08:55:08 -08:00&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;22.448976&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;: -&lt;span class=&quot;code-snippet__number&quot;&gt;119.825892&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;tags&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;aute&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;do&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;laborum&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;cillum&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;consequat&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;do&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;pariatur&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;friends&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Regina Miranda&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Blackburn Harding&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Lara Dawson&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;greeting&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello, Wright Moon! You have 7 unread messages.&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;favoriteFruit&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;仔细看我们发现此过滤器将返回1个item对象（不是电子邮件），因为第一个过滤器.[]返回我们使用select((.email | contains(&quot;@netur&quot;)) and .gender == &quot;male&quot;). 如果我们仔细看看这一点，我们将看到2个条件.gender == &quot;male&quot;和(.email | contains(&quot;@netur&quot;)。管道|用于应用select和contains功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;6. 对象构造和字符串插值：{}, (.a)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;假设我们想要一个只包含 3 个字段的对象数组：first_name,last_name和email。我们需要构造一些新对象，而且语法很直观。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq &#x27;.[] | {name: .name, company: .company, phone: .phone}&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;name&quot;: &quot;Fox Mcmahon&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;company&quot;: &quot;PHARMACON&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;phone&quot;: &quot;+1 (934) 509-2056&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;name&quot;: &quot;Mcfarland Baldwin&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;company&quot;: &quot;XUMONK&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;phone&quot;: &quot;+1 (836) 401-3549&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;7. 分组：group_by&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;jq 可以做的另一件很酷的事情是分组。我们可以通过按性别分组来证明这一点。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq group_by(.gender)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;虽然如上命令已经起作用了，但结果没什么可读性 - 它是一个包含2个子数组，其中包含分组的对象。接下来我们稍微调整一下。我们将分解 2 次（因为我们在数组中有数组）。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq &#x27;group_by(.gender) | .[] | .[] | {name: .name, gender: .gender}&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;name&quot;: &quot;Robyn Fernandez&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;gender&quot;: &quot;female&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;name&quot;: &quot;Grace Lott&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;gender&quot;: &quot;female&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;name&quot;: &quot;wuda Miller&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &quot;gender&quot;: &quot;male&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;看起来不错，但人员都放在一起。我们想保留2个不同的数组：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq &#x27;group_by(.gender) | .[] | [.[] | {name: .name, gender: .gender}]&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;name&quot;: &quot;Robyn Fernandez&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;gender&quot;: &quot;female&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;name&quot;: &quot;Fox Mcmahon&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;gender&quot;: &quot;male&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;让我们看看我们的数据集中有多少男人和多少女人。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json | jq &#x27;group_by(.gender) | .[] | [.[] | {name: .name, gender: .gender}] | length&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;35&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;39&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;8. 切片&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;jq还支持数组切片，这是另一个强大的功能。这在我们需要返回数组的子数组时特别有用。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ echo &#x27;[1,2,3,4,5,6,7,8,9,10]&#x27; | jq &#x27;.[6:9]&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 结果将是一个长度为3的新数组，包含从索引6（包括）到索引9（不包括）的item&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  7,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  8,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  9&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然也可以这样操作：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;[1,2,3,4,5,6,7,8,9,10]&#x27;&lt;/span&gt; | jq &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;.[:6]&#x27;&lt;/span&gt; | jq &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;.[-2:]&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;9. 支持正则表达式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 输出名字以字母“C”开头的所有人员的的email&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json|jq &#x27;.[] | select(.name|test(&quot;^C.&quot;)) | .email&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;craigmitchell@phuel.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;cortezdalton@emtrak.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;corrineburke@retrotex.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;cherrystewart@fleetmix.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;carolecote@stelaecor.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;caldwellschneider@futurize.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;10. 从JSON中删除敏感信息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 删除所有item的balance敏感信息字段&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cat mock.json|jq &#x27;del(.[].balance)&#x27;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;差不多就到这里了，jq是一个非常强大和轻量级的工具，每个开发人员至少应该对它的工作原理有一个基本的了解。更多的用法建议查看一下jq官方手册。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;参考：&lt;/p&gt;&lt;p&gt;&lt;em&gt;https://stedolan.github.io/jq/tutorial/&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;https://www.json-generator.com/     // 伪数据生成&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;https://jqplay.org/&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;br/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>