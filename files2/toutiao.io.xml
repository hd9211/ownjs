<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1caa30ebfd7f8b3a492dd697916734b9</guid>
<title>Java无垃圾稳态设计</title>
<link>https://toutiao.io/k/ly1kfiv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;最近在重构&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484045&amp;amp;idx=2&amp;amp;sn=25cf3c0399cf92edbd57e207f18afea3&amp;amp;chksm=fafde823cd8a61354d12e2355829b78b0a84b422ec4d3569bbbff711cb9b1cb3315eafaef9ac&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《简明日志规范》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;《简明日志规范》&lt;/a&gt;&lt;span&gt;，就是重构我自己之前开源的一个统一日志的组件。对于打印日志，最重要的我认为有两点：第一点是异步，不能因为打印日志而影响正常的程序执行，导致等待IO卡顿；第二点是尽量减少垃圾，&lt;span&gt;所谓垃圾是说&lt;/span&gt;&lt;span&gt;许多日志库在日志记录期间分配临时对象，如日志事件对象，字符串，字符数组，字节数组等。这会对垃圾收集器造成压力并增加GC暂停发生的频率。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;其中，异步设计已经是很成熟的领域了。&lt;/span&gt;但是低垃圾、无垃圾的研究还比较少。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486299&amp;amp;idx=1&amp;amp;sn=34ea00ad39901a51331bfd95dee0c641&amp;amp;chksm=fafde1f5cd8a68e31c7b8d5fa5b21fc70f5e49663f4cd6e6ea0a0639696556bc197b97ea241b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《应用程序怎样划分模块？》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《应用程序怎样划分模块？》&lt;/a&gt;里我提到使用登高类比法进行业界调研。业界调研自然不会放过Log4j、Logback这些都广泛认可的优秀日志组件。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Log4j2从版本2.6开始，默认情况下以“无垃圾”模式运行。&lt;/span&gt;&lt;span&gt;无垃&lt;/span&gt;圾原理就是&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486339&amp;amp;idx=1&amp;amp;sn=ca9b6a4ba1a98a9182b7ff9e81a7e7ea&amp;amp;chksm=fafde12dcd8a683b385853e053fb7444ef3772f09d39c977c1a69581e4ff294a45e8ab8fd53b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《ThreadLocal&amp;amp;MDC内存泄漏问题》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《ThreadLocal&amp;amp;MDC内存泄漏问题》&lt;/a&gt;中介绍的ThreadLocal。&lt;span&gt;因为&lt;/span&gt;&lt;span&gt;重用对象和缓冲区，并且尽可能不分配临时对象。从物理层面上，对象的内存区域是通过数据覆盖，而不是垃圾回收来达到日志读写和上下文信息保存的目的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以下是官网对无垃圾记录响应时间行为进行的试验：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1/&gt;&lt;p&gt;下图将 Log4j 的异步 Logger 的“经典”记录与无垃圾记录响应时间行为进行了比较。在图中，“ 100k”表示以 100,000 消息/秒的持续负载进行记录，“ 800k”表示 800,000 消息/秒的持续负载。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8YTHlRBJKRc4TjDgKxu4dID6miansD3hOFLlr2C9B6EvibFWLaEnCMsJ4HGPRKZGtkpN0Zu2X4cZcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;在“经典”模式下，我们看到大量次要垃圾回收，这些垃圾回收会使应用程序线程暂停 3 毫秒或更长时间。这很快就增加了将近 10 毫秒的响应时间延迟。如您在图表中所见，增加负载将曲线向左移动(存在更多尖峰)。这是有道理的：更多的日志记录意味着对垃圾收集器施加更大的压力，从而导致更小的 GC 暂停。我们做了一些实验，将负载减少到 50,000 甚至 5000 条消息/秒，但这并没有消除 3 毫秒的暂停，只是使它们的发生频率降低了。请注意，此测试中的所有 GC 暂停都是次要的 GC 暂停。我们没有看到任何完整的垃圾回收。&lt;/p&gt;&lt;p&gt;在“无垃圾”模式下，在各种负载下，最大响应时间仍远低于 1 毫秒。(最大 780 us，800,000 消息/秒，最大 407 us，600,000 消息/秒，其中 99％围绕 5 us 达到 800,000 消息/秒的所有负载.)增加或减少负载不会改变响应时间。我们没有调查在这些测试中看到的 200-300 微秒暂停的原因。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当我们进一步增加负载时，我们开始看到经典和无垃圾记录的响应时间都有较大的暂停。在 100 万条消息/秒或更多的持续负载下，我们开始接近底层 RandomAccessFile Appender 的最大吞吐量(请参见下面的同步日志记录吞吐量图表)。在这些负载下，环形缓冲区开始填满，反压开始起作用：在环形缓冲区已满时尝试添加另一条消息将阻塞，直到有可用插槽可用为止。我们开始看到响应时间为数十毫秒或更长；尝试进一步增加负载会导致越来越大的响应时间峰值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;试验可以看出无垃圾模式对性能提升上有极大的好处。那如果是自制结构化日志组件怎么实现无垃圾模式呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我自己做的简明日志组件是为了公司的结构化日志做抽象而产生。我将结构化日志要打印的列定义为一个对象LogBuilder。属性就是日志要输出的内容。这样大家就可以用面向对象的方式来组装日志对象了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;LogBuilder的变量有三种情况：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第一种是全局变量，比如机房信息，服务启动时机房就固定不变了。这种变量可以定义为静态变量，全局唯一，不会被垃圾回收器处理。&lt;/p&gt;&lt;p&gt;class LogBuilder {&lt;/p&gt;&lt;p&gt;    private static String idc; &lt;/p&gt;&lt;p&gt;    static {&lt;/p&gt;&lt;p&gt;         idc = 从配置文件等处读取并初始化；&lt;/p&gt;&lt;p&gt;    }&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第二种是线程唯一，比如线程追踪号，这种信息可以通过切面在请求入口处设置一次保存到MDC中，使用时从MDC中取得，&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486339&amp;amp;idx=1&amp;amp;sn=ca9b6a4ba1a98a9182b7ff9e81a7e7ea&amp;amp;chksm=fafde12dcd8a683b385853e053fb7444ef3772f09d39c977c1a69581e4ff294a45e8ab8fd53b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《ThreadLocal&amp;amp;MDC内存泄漏问题》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《ThreadLocal&amp;amp;MDC内存泄漏问题》&lt;/a&gt;中有介绍，MDC相对安全无内存泄漏风险。MDC由于跟着线程走，线程采用线程池时它可以被复写无需垃圾回收。&lt;/p&gt;&lt;p&gt;class LogBuilder {&lt;/p&gt;&lt;p&gt;    private static String traceId; &lt;/p&gt;&lt;p&gt;    &lt;/p&gt;&lt;p&gt;    public void static setTraceId(String traceId) {&lt;/p&gt;&lt;p&gt;         MDC.set(&quot;traceId&quot;, traceId);&lt;/p&gt;&lt;p&gt;    }&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第三种是线程内变化的，比如执行阶段，这种对象只能跟着LogBuilder的实例对象走，中间可以被重新赋值并打印。这时候就需要把整个LogBuilder对象放到ThreadLocal中，让它也跟着对象实例走。但是这里面有个关键，就是对象的toString方法被调用后这个打印的string就会被回收。所以我们打印日志时组装的字符串最好不用toString，而是新写一个方法来生成并将结果保存到LogBuilder的局部变量中。这样打印完成对象就不会被回收。而是在下次使用时被复写。&lt;/p&gt;&lt;p&gt;@Data&lt;/p&gt;&lt;p&gt;class LogBuilder {&lt;/p&gt;&lt;p&gt;    private static ThreadLocal threadLocal = new ThreadLocal();&lt;/p&gt;&lt;p&gt;    private static String idc; &lt;/p&gt;&lt;p&gt;    private static String traceId; &lt;/p&gt;&lt;p&gt;    private String step; &lt;/p&gt;&lt;p&gt;    private String toString;&lt;/p&gt;&lt;p&gt;    &lt;/p&gt;&lt;p&gt;    public static LogBuilder getInstance() {&lt;/p&gt;&lt;p&gt;          if(threadLocal.get()==null) {&lt;/p&gt;&lt;p&gt;            threadLocal.set(new LogBuilder());&lt;/p&gt;&lt;p&gt;          }&lt;br/&gt;          return threadLocal.get();&lt;/p&gt;&lt;p&gt;    }&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;    public String buildString() {&lt;/p&gt;&lt;p&gt;       toString = idc+&quot;|&quot;+traceId+&quot;|&quot;+step;&lt;/p&gt;&lt;p&gt;    }&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然这里只是为了说明无垃圾写的示例代码，实际上的实现使用了一些反射等技术，代码很精简，通用性强。实际原理和Log4j2的无垃圾稳态原理一致。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结和小技巧&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;LogBuilder对象最初我的设计是使用静态工厂方法new出来的。这也是《有效的Java》推荐的方式，可以很好的进行实例控制，保持清晰性和简洁性。后来加入了ThreadLocal来进行无垃圾稳态设计。这时要注意提供clear方法清空属性值，因为和主题无关，我在代码中省略了这一部分。关键来了，性能提升了，内存使用减少了怎么来测试验证呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我使用了jol工具来监控内存情况，使用方法，先上maven坐标：&lt;/p&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;org.openjdk.jol&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;jol-core&amp;lt;/artifactId&amp;gt;&lt;br/&gt;    &amp;lt;version&amp;gt;0.14&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;p&gt;代码中使用时&lt;/p&gt;&lt;pre&gt;&lt;span&gt;log&lt;/span&gt;.info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;内部信息：&lt;/span&gt;&lt;span&gt;[{}]&quot;&lt;/span&gt;, ClassLayout.&lt;span&gt;parseInstance&lt;/span&gt;(pojo).toPrintable());&lt;br/&gt;&lt;span&gt;log&lt;/span&gt;.info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;外部信息&lt;/span&gt;&lt;span&gt;[{}]&quot;&lt;/span&gt;, GraphLayout.&lt;span&gt;parseInstance&lt;/span&gt;(pojo).toPrintable());&lt;br/&gt;&lt;span&gt;log&lt;/span&gt;.info(&lt;span&gt;&quot;totalSize[{}]&quot;&lt;/span&gt;, GraphLayout.&lt;span&gt;parseInstance&lt;/span&gt;(pojo).totalSize());&lt;/pre&gt;&lt;p&gt;其中pojo是自己要监控的对象，有空不妨试一试。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不要假定，要证明！-----《程序员修炼之道》&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6727b3603d72053c4b0aa881a60de4d9</guid>
<title>工商银行实时大数据平台建设历程及展望</title>
<link>https://toutiao.io/k/mf1lxng</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e31cf957d8b89d5f30073ca19e705e5e</guid>
<title>面试官问: 说一说ReentrantReadWriteLock的实现原理与锁获取过程</title>
<link>https://toutiao.io/k/001uotl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h2&gt;一.面试题分析&lt;/h2&gt;

&lt;p&gt;在有些业务场景中，我们大多在读取数据，很少写入数据，这种情况下，如果仍使用独占锁，效率将及其低下。针对这种情况，Java提供了读写锁——ReentrantReadWriteLock有点类似MySQL数据库为代表的读写分离机制，既然我们知道了读写锁是用于读多写少的场景。那问题来了，ReentrantReadWriteLock是怎样来实现的呢，它与ReentrantLock的实现又有什么的区别呢？&lt;/p&gt;

&lt;h2&gt;二.ReentrantReadWriteLock简介&lt;/h2&gt;

&lt;p&gt;很多情况下有这样一种场景：对共享资源有读和写的操作，且写操作没有读操作那么频繁。&lt;/p&gt;

&lt;p&gt;在没有写操作的时候，多个线程同时读一个资源没有任何问题，所以应该允许多个线程同时读取共享资源，但是如果一个线程想去写这些共享资源，就不应该允许其他线程对该资源进行读和写的操作了。&lt;/p&gt;

&lt;p&gt;针对这种场景，JAVA的并发包提供了读写锁ReentrantReadWriteLock，它表示两个锁，一个是读操作相关的锁，称为共享锁；一个是写相关的锁，称为排他锁。&lt;/p&gt;

&lt;h2&gt;三.ReentrantReadWriteLock特性&lt;/h2&gt;

&lt;p&gt;公平性：读写锁支持非公平和公平的锁获取方式，非公平锁的吞吐量优于公平锁的吞吐量，默认构造的是非公平锁&lt;/p&gt;

&lt;p&gt;可重入：在线程获取读锁之后能够再次获取读锁，但是不能获取写锁，而线程在获取写锁之后能够再次获取写锁，同时也能获取读锁&lt;/p&gt;

&lt;p&gt;锁降级：线程获取写锁之后获取读锁，再释放写锁，这样实现了写锁变为读锁，也叫锁降级&lt;/p&gt;

&lt;h2&gt;四.ReentrantReadWriteLock的主要成员和结构图&lt;/h2&gt;

&lt;h3&gt;1. ReentrantReadWriteLock的继承关系&lt;/h3&gt;

&lt;p&gt;读写锁 ReadWriteLock&lt;/p&gt;

&lt;p&gt;读写锁维护了一对相关的锁，一个用于只读操作，一个用于写入操作。&lt;/p&gt;

&lt;p&gt;只要没有写入，读取锁可以由多个读线程同时保持,写入锁是独占的。&lt;/p&gt;

&lt;h3&gt;2.ReentrantReadWriteLock的核心变量&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.bytearch.com/images/reentranrwl/1.jpeg&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;public interface ReadWriteLock {
   /**
   * Returns the lock used for reading.
   *
   * @return the lock used for reading.
   */
   Lock readLock();
   /**
   * Returns the lock used for writing.
   *
   * @return the lock used for writing.
   */
   Lock writeLock();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;ReentrantReadWriteLock类包含三个核心变量：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ReaderLock：读锁,实现了Lock接口&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WriterLock：写锁,也实现了Lock接口&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sync：继承自AbstractQueuedSynchronize(AQS),可以为公平锁FairSync 或 非公平锁NonfairSync&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;3.ReentrantReadWriteLock的成员变量和构造函数&lt;/h3&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt; /**
     * 内部提供的读锁
     */
    private final ReentrantReadWriteLock.ReadLock readerLock;
    /**
     * 内部提供的写锁
     */
    private final ReentrantReadWriteLock.WriteLock writerLock;
    /**
     * AQS来实现的同步器
     */
    final Sync sync;

    /*** Creates a new {@code ReentrantReadWriteLock} with * 默认创建非公平的读写锁 */
    public ReentrantReadWriteLock() {
        this(false);
    }

    /*** Creates a new {@code ReentrantReadWriteLock} with * the given fairness policy. ** @param fair {@code true} if this lock should use a fair ordering policy */
    public ReentrantReadWriteLock(boolean fair) {
        sync = fair ? new FairSync() : new NonfairSync();
        readerLock = new ReadLock(this);
        writerLock = new WriteLock(this);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;五.ReentrantReadWriteLock的核心实现&lt;/h2&gt;

&lt;h3&gt;ReentrantReadWriteLock实现关键点，主要包括：&lt;/h3&gt;

&lt;p&gt;读写状态的设计&lt;/p&gt;

&lt;p&gt;写锁的获取与释放&lt;/p&gt;

&lt;p&gt;读锁的获取与释放&lt;/p&gt;

&lt;p&gt;锁降级&lt;/p&gt;

&lt;h3&gt;1.读写状态的设计&lt;/h3&gt;

&lt;p&gt;之前谈ReentrantLock的时候,Sync类是继承于AQS，主要以int state为线程锁状态,0表示没有被线程占用， 1 表示已经有线程占用。&lt;/p&gt;

&lt;p&gt;同样ReentrantReadWriteLock也是继承于AQS来实现同步，那int state怎样同时来区分读锁和写锁的？&lt;/p&gt;

&lt;p&gt;如果在一个整型变量上维护多种状态，就一定需要“按位切割使用”这个变量，&lt;/p&gt;

&lt;h3&gt;ReentrantReadWriteLock将int类型的state将变量切割成两部分：&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.bytearch.com/images/reentranrwl/2.png&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;高 16 位记录读锁状态&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;低 16 位记录写锁状态&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;abstract static class Sync extends AbstractQueuedSynchronizer {
                // 版本序列号
         private static final long serialVersionUID = 6317671515068378041L;
                // 高 16 位为读锁，低 16 位为写锁
                static final int SHARED_SHIFT = 16 ;
                // 读锁单位
                static final int SHARED_UNIT = ( 1 &amp;lt;&amp;lt; SHARED_SHIFT);
                // 读锁最大数量
                static final int MAX_COUNT = ( 1 &amp;lt;&amp;lt; SHARED_SHIFT) - 1 ;
                // 写锁最大数量
                static final int EXCLUSIVE_MASK = ( 1 &amp;lt;&amp;lt; SHARED_SHIFT) - 1 ;
                // 本地线程计数器
                private transient ThreadLocalHoldCounter readHolds;
                // 缓存的计数器
                private transient HoldCounter cachedHoldCounter;
        // 第一个读线程 
        private transient Thread firstReader = null; 
        // 第一个读线程的计数 
        private transient int firstReaderHoldCount;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2.写锁的获取与释放&lt;/h3&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt; protected final boolean tryAcquire(int acquires) {
            /*
             * Walkthrough:
             * 1. If read count nonzero or write count nonzero
             *    and owner is a different thread, fail.
             * 2. If count would saturate, fail. (This can only
             *    happen if count is already nonzero.)
             * 3. Otherwise, this thread is eligible for lock if
             *    it is either a reentrant acquire or
             *    queue policy allows it. If so, update state
             *    and set owner.
             */
            Thread current = Thread.currentThread();
            int c = getState();
           //获取独占锁(写锁)的被获取的数量
            int w = exclusiveCount(c);
            if (c != 0) {
                // (Note: if c != 0 and w == 0 then shared count != 0)
              //1.如果同步状态不为0，且写状态为0,则表示当前同步状态被读锁获取
              //2.或者当前拥有写锁的线程不是当前线程
                if (w == 0 || current != getExclusiveOwnerThread())
                    return false;
                if (w + exclusiveCount(acquires) &amp;gt; MAX_COUNT)
                    throw new Error(&quot;Maximum lock count exceeded&quot;);
                // Reentrant acquire
                setState(c + acquires);
                return true;
            }
            if (writerShouldBlock() ||
                !compareAndSetState(c, c + acquires))
                return false;
            setExclusiveOwnerThread(current);
            return true;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1)c是获取当前锁状态,w是获取写锁的状态。&lt;/p&gt;

&lt;p&gt;2)如果锁状态不为零，而写锁的状态为 0 ，则表示读锁状态不为 0 ，所以当前线程不能获取写锁。或者&lt;/p&gt;

&lt;p&gt;锁状态不为零，而写锁的状态也不为 0 ，但是获取写锁的线程不是当前线程，则当前线程不能获取写锁。&lt;/p&gt;

&lt;p&gt;3)写锁是一个可重入的排它锁，在获取同步状态时，增加了一个读锁是否存在的判断。&lt;/p&gt;

&lt;p&gt;写锁的释放与ReentrantLock的释放过程类似，每次释放将写状态减 1 ，直到写状态为 0 时，才表示该写锁被释放了。&lt;/p&gt;

&lt;h3&gt;3.读锁的获取与释放&lt;/h3&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;
    protected final int tryAcquireShared(int unused) {
        for (; ; ) {
            int c = getState();
            int nextc = c + (1 &amp;lt;&amp;lt; 16);
            if (nextc &amp;lt; c) {
                throw new Error(&quot;Maxumum lock count exceeded&quot;);
            }
            if (exclusiveCount(c) != 0 &amp;amp;&amp;amp; owner != Thread.currentThread()) return -1;
            if (compareAndSetState(c, nextc)) return 1;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1)读锁是一个支持重进入的共享锁，可以被多个线程同时获取。&lt;/p&gt;

&lt;p&gt;2)在没有写状态为 0 时，读锁总会被成功获取，而所做的也只是增加读状态（线程安全）
3)读状态是所有线程获取读锁次数的总和，而每个线程各自获取读锁的次数只能选择保存在ThreadLocal中，由线程自身维护。读锁的每次释放均减小状态（线程安全的，可能有多个读线程同时释放锁），减小的值是1&amp;lt;&amp;lt; 16 .&lt;/p&gt;

&lt;h3&gt;4. 锁降级&lt;/h3&gt;

&lt;p&gt;降级是指当前把持住写锁，再获取到读锁，随后释放(先前拥有的)写锁的过程。&lt;/p&gt;

&lt;p&gt;锁降级过程中的读锁的获取是否有必要，答案是必要的。主要是为了保证数据的可见性，如果当前线程不获取读锁而直接释放写锁，假设此刻另一个线程获取的写锁，并修改了数据，那么当前线程就步伐感知到线程T的数据更新，如果当前线程遵循锁降级的步骤，那么线程T将会被阻塞，直到当前线程使数据并释放读锁之后，线程T才能获取写锁进行数据更新。&lt;/p&gt;

&lt;h3&gt;5.读锁与写锁的整体流程&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.bytearch.com/images/reentranrwl/3.png&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;六.ReentrantReadWriteLock总结&lt;/h2&gt;

&lt;p&gt;本篇详细介绍了ReentrantReadWriteLock的特征、实现、锁的获取过程，通过 4 个关键点的核心设计：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;读写状态的设计&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;写锁的获取与释放&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;读锁的获取与释放&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;锁降级&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从而才能实现：共享资源有读和写的操作，且写操作没有读操作那么频繁的应用场景。&lt;/p&gt;

&lt;h2&gt;号外号外&lt;/h2&gt;

&lt;p&gt;给大家整理了Java最新大厂面试题及答案，并且整理成了PDF格式方便阅读。 欢迎大家关注”浅谈架构“ 公众号 (后台私信”面试“即可获取)。另外需要大厂内推同学也可以私信我。 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.bytearch.com/images/mianshiti.png&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4217335802dbb02008e0c0a9e164baf2</guid>
<title>Maven Archetype 多 Module 自定义代码脚手架</title>
<link>https://toutiao.io/k/7f3yjyf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;今天，就利用 Maven 的 Archetype 插件来简单实现这一功能。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4078282828282828&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUkj35ibqDBaiaA0XMV1NmQn6FpJP66VVLDP3luvkD7LZcWNKB67VDgVG2GiawNjOj56dW5jYcbA2ssqA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;792&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过上面的图很清楚可以看到，实际利用这个插件机制就简单的几个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;archetype:create-from-project ，根据自己的项目代码生成原型项目；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过 install 等命令生成原型文件；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;archetype:generate，通过原型生成目标项目。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看起来挺简单的，但是你会发现你用网上搜到的资料来玩的话，你生成的项目特别折腾，包括官方的文档。&lt;/span&gt;&lt;span&gt;我也真是没搞明白他们为何那么牛逼，一步两步……&lt;/span&gt;&lt;span&gt;就&lt;/span&gt;&lt;span&gt;好了？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一堆问题，比如 module 名称不会变、包名变了代码中没变，依赖报错一大堆问题，还是有必要说下中间要怎么做的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;创建 Archetype&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先，准备好我们自己的模板项目，保证代码都是 OK 的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;进入项目根目录，执行命令：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mvn archetype:&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt;-&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt;-&lt;span class=&quot;code-snippet__keyword&quot;&gt;project&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;然后项目根目录下会生成 target 文件夹，这个很简单，不会有任何障碍，你看下面的图，注意看每个模块的名字，这是我改过的！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;生成结果会发现不长这样，这就是问题啊！接着往下看吧。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9037735849056604&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUkj35ibqDBaiaA0XMV1NmQn6FiasrKBUwa6JvydDIMgvs3iclQTUxQVT5u7jnSOhiaYricH0n9yh5zNxNCA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1060&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里最核心的部分就在于怎么修改 &lt;strong&gt;target/generated-sources/src/main/resources/archetype-resources &lt;/strong&gt;下的文件。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果不修改直接继续的话，最终生成的项目会发现 module 的名称不会变，包名也不会变，代码里引用的会有一堆报错。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着，我们看看咋改的这一堆问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;修改父 pom&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先，找到根目录的 pom 文件，会发现缺少 module 信息，这个必须加上。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &amp;lt;modules&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &amp;lt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;module&lt;/span&gt;&amp;gt;${&lt;span class=&quot;code-snippet__title&quot;&gt;rootArtifactId&lt;/span&gt;}-&lt;span class=&quot;code-snippet__title&quot;&gt;client&lt;/span&gt;&amp;lt;/&lt;span class=&quot;code-snippet__title&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &amp;lt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;module&lt;/span&gt;&amp;gt;${&lt;span class=&quot;code-snippet__title&quot;&gt;rootArtifactId&lt;/span&gt;}-&lt;span class=&quot;code-snippet__title&quot;&gt;common&lt;/span&gt;&amp;lt;/&lt;span class=&quot;code-snippet__title&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &amp;lt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;module&lt;/span&gt;&amp;gt;${&lt;span class=&quot;code-snippet__title&quot;&gt;rootArtifactId&lt;/span&gt;}-&lt;span class=&quot;code-snippet__title&quot;&gt;service&lt;/span&gt;&amp;lt;/&lt;span class=&quot;code-snippet__title&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &amp;lt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;module&lt;/span&gt;&amp;gt;${&lt;span class=&quot;code-snippet__title&quot;&gt;rootArtifactId&lt;/span&gt;}-&lt;span class=&quot;code-snippet__title&quot;&gt;facade&lt;/span&gt;&amp;lt;/&lt;span class=&quot;code-snippet__title&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &amp;lt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;module&lt;/span&gt;&amp;gt;${&lt;span class=&quot;code-snippet__title&quot;&gt;rootArtifactId&lt;/span&gt;}-&lt;span class=&quot;code-snippet__title&quot;&gt;starter&lt;/span&gt;&amp;lt;/&lt;span class=&quot;code-snippet__title&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &amp;lt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/modules&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;父 pom 依赖引用的每个 module 也要修改，groupId 和 artifactId 按照我给出的方式来改，不要写死！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependencyManagement&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;${groupId}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;${rootArtifactId}-client&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;${project.version}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ... ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependencyManagement&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;修改module&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个就是图中的问题，默认生成的 module 可能就是模板项目的名字，需要修改成类似 __rootArtifactId__-client 这种形式，注意是&lt;strong&gt;双下划线&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;然后 module 中的互相引用 groupId 和 artifactId 按照父 pom 的方式对应修改。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;archetype-metadata 修改&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;找到 META-INF/maven/archetype-metadata.xml 文件，修改 modules 相关的部分，重点注意看 id 、dir、name 的修改方式。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;modules&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;${rootArtifactId}-client&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;dir&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;__rootArtifactId__-client&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;${rootArtifactId}-client&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;fileSets&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;fileSet&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;filtered&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;packaged&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;encoding&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;directory&lt;/span&gt;&amp;gt;&lt;/span&gt;src/main/java&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;directory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;includes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;include&lt;/span&gt;&amp;gt;&lt;/span&gt;**/*.java&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;include&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;includes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;fileSet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;fileSets&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ... ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;modules&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;修改完成之后，进入 target/generated-sources/archetype 目录，执行命令：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;mvn&lt;/span&gt; install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;顺便执行下 mvn deploy 上传到 nexus。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;使用 Archetype&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;经过上面的步骤，原型 Archetype 已经创建完成，其实最大的坑也就是上面那部分，花了老半天时间，简直坑爹啊。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面看看怎么使用吧，两种使用方式。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;命令行&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;随便进入你想保存项目的路径，执行命令。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mvn archetype:generate -DarchetypeCatalog=&lt;span class=&quot;code-snippet__built_in&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;依次按照提示输入 groupId、artifactId 即可完成创建。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那怎么给其他人使用？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你的本地 maven 仓库目录（比如 ~/.m2/repository）有一个文件 archetype-catalog.xml，共享给其他人就行了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;archetype-catalog&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://maven.apache.org/plugins/maven-archetype-plugin/archetype-catalog/1.0.0 http://maven.apache.org/xsd/archetype-catalog-1.0.0.xsd&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://maven.apache.org/plugins/maven-archetype-plugin/archetype-catalog/1.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;archetypes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;archetype&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;template-archetype&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0.0-SNAPSHOT&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;Example Project&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;archetype&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;archetypes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;archetype-catalog&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;IDEA&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;新建项目，选择 Maven，勾选 Create from archetype，选择 Add Archetype...&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.847723704866562&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUkj35ibqDBaiaA0XMV1NmQn6FNm0nmzJAKSDZj48T3kdmzGmJICHqJIcdmLdKcurCn7LBVvu7LfWQ2Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1274&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着，输入我们自定义的 Archetype 的 GroupId、ArtifactId、Version 信息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Add 成功之后就可以在列表中看到我们自己的 archetype，然后按照流程创建即可。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c144624fb2fcc3e48d88d54b52ce1a64</guid>
<title>35岁程序员，同样的阿里梦</title>
<link>https://toutiao.io/k/hjn8rpb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家好我是小Q，今天我来和大家继续聊聊“35所程序员那些事”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在IT行业兢兢业业的工作了10年，小Q是非常了解这个行业的潜规则的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多人都在说，“选择大于努力”，选择好了，只要不是傻子，都可以成就一番事业，都可以在自己的业务领域中有所建树。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小Q觉得这个确实是有道理的，但不是绝对的，因为对于大多数的人来说是没有选择的机会的，尤其是35岁的大龄程序员。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;所谓“同一起跑线”&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;ZH-CN&quot;/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大学生活是美好的，可以和玩伴们一起打篮球、一起踢足球、一起玩游戏，甚至一起泡妞，哈哈调侃下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们大部分人可能都会意识到，“人越年轻，时间越难熬，感觉每天都很长”，小Q也是这么认为的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在你年轻的时候，你身边的玩伴大部分都是和你一样的人，你们可能都会被叫做“穷屌丝”，少部分人了被叫做“白富美”和“高富帅”，还有一些“校花”和“校草”，只是那些和我们都没关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小Q也可以回想一下自己的校园生活，其实和大部分学生一样，都是懵懵懂懂的过来的，现在回想起来确实有些无趣。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小Q有时候总是在想，如果当初要是比同龄人稍微多做一点点有价值的事情，那么现在是不是另外一个人生呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所谓“同一起跑线”是很难的，但是我们怎么做到“输在起跑线，但是最后赢在终点呢“。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;35岁程序员的自律人生&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;活在当下，也是小Q非常喜欢的四个字，就是说只要自己努力了，你现在拥有的就是你应得的，你应该知足。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好吧，如果35岁程序员还有梦想，那就要开启自律的人生了。小Q看到过很多调侃“耍嘴炮”的笑话视频，比如“躲在被窝里，对自己说，明天我要早起，我要努力，我要超过别人，我要赚钱，我要一年挣一百万”，哈哈哈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开启自律的人生，那就从现在开始吧：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;35岁程序员的技术梦&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个程序员都有一个技术梦，可能曾经的你也是一个对技术有着梦想的2B青年，但是当你迈不过“35岁程序员的门槛”之后，你也许会觉得“技术真他妈的没用”，公司有很多“总监”和“总经理”都不是技术出生，他们技术都很菜，照样能做到高管。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;是的，有些公司确实是这样的，但是作为“35岁的程序员”的我们一定不要抱怨，因为你看到的是少部分的人的人生，大部分的还是一步一个脚印的去迈过人生的“独木桥”之后，才能走到河对岸的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然我们有技术梦，一定要把它走完，总会有结果的：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;比如，如果你喜欢微服务架构，那么请你把Spring Cloud Alibaba全家桶技术吃透，不要停留在技术的表面，而是想着如何在业务中落地，以及为了实现这些目标，我们要做什么；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;比如，如果你喜欢分布式链路追踪，那么请你把Skywalking全家桶技术吃透，才能更好的去领悟其他技术，比如Pinpoint、Cat等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;比如，你觉得你的算法太烂，那请你老老实实的将常见的算法亲自实现一遍，而不是停留在别人写的技术文章的表面；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; 比如，你觉得你们项目组的架构师水平太烂，那请你尝试着将自己当作某一个项目的架构师，自己重新去设计一套牛逼的架构，并变现为可以执行的业务和技术方案之后，再回过头来看看你觉得很烂的架构；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;比如，你觉得你的领导的技术很菜，那请你先思考下人家的优点，他为什么技术菜还能够做领导，而你不能，是不是你的技术比他还菜。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;35岁程序员的阿里梦&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大厂是有一个不成文的潜规则，35岁的程序员是进不了大厂的，比如阿里、腾讯等企业，小Q觉得这个是没有根据的，35岁程序员也是要有阿里梦的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小Q最近几年一直在负责招聘，面试了大量的形形色色的候选人，很多时候是一年到头都看不到一个“还没面试就想要他的简历”，好的候选人太少了，大多数是毫无规划的并且重复的项目经验，深度的聊下来，大部分是“为了工作而工作”的状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么35岁程序员如何实现自己的阿里梦呢？小Q为大家整理了如下几点心得供大家参考：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;如果你没有大厂经验，请把把技术的路走完。为什么要这么说了，因为你自己引以为傲的业务经验，在大厂的产品面前是不堪一击的，但是你的技术或多或少还是能为他们带来一些价值的。这个又怎么理解呢？在大厂中，很多人是纯碎干业务的，他们的技术或许还没你牛，哈哈哈。这个又费解了，为毛人家能一直干业务，还能呆在大厂，面试外面的候选人的时候“要求贼高呢”，那是因为人家已经在船上了（一个萝卜一个坑），而你是要买票上船的那个人，并且还不一定有位置；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果你是做管理的，请忘记你的优越感。为什么要这么说了，管理的本质是管人和管事，并拿结果，但是当你步入一个足够大的平台时，你的管理经验在大厂中犹如米粒一样，会变得一无是处，毫无用武之地，可能你的直接领导就是一个比你小一轮的年轻人；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果你想快速的在大平台上立足，请打造属于自己特色的技术品牌。大平台需要你要有足够强的认证能力，才能快速的去展开属于你角色的工作，并拿到大家都认可的结果，因为“35岁程序员”不能和年轻人一样，去频繁的试错（成本太高了）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;如果你想顺利的入职大平台，请将自己的思维归零，认真的对待每一次来之不易的面试机会。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，如果你已经是一个跨过“35岁程序员”独木桥的过河人，已经有很强的行业认证的IP能力，已经积累了很多人脉和关系网（这些都是自己平常业务和技术进步积攒起来的），那就另当别论。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好吧，今天就聊这么多吧，小Q是一个技术狂热爱好者，无论何时都会孜孜不倦的将它坚持下去。因为小Q是一个非计算机专业出生的程序员，所以深知输在起跑线的那种不是滋味的感受。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎书友们认真的品读小Q的技术品牌系列书籍“Spring Cloud Alibaba微服务架构实战派（上下册）“，多多熟悉更多牛逼的技术。”35岁程序员“有一个比较特色的口号，”不要让技术成为你跨越35岁门槛的瓶颈“，要让技术成为你的黄金圣衣，辅助你防御更多大Boss的组合拳。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小Q会孜孜不倦的给大家介绍“Spring Cloud Alibaba全家桶技术栈”，书友们也要持之以恒的多多关注小Q。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，Spring Cloud Alibaba是一个微服务基础框架，它本身具备一定的微服务治理的能力，比如分布式服务治理、分布式配置治理、分布式流量治理、分布式事务、分布式网关、分布式消息治理等。如果项目直接使用Spring Cloud Alibaba提供的功能，完全可以满足中等项目的微服务开发的业务场景，开发人员只需要熟悉Spring Cloud Alibaba就可以成为一个微服务领域的开发专家。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次，既然是微服务基础框架，它还可以扩展自身的没有的微服务治理能力，比如Skywalking、Discovery、ShardingSphere、DataX等。Spring Cloud Alibaba是基于Spring Boot的思想来设计的，Spring Boot又是基于Spring Framework来设计的，也就是说凡是Spring Framework生态的技术栈，Spring Cloud Alibaba均可以扩展。这样无论是开源社区提供的微服务技术能力，还是公司自研的微服务技术能力，都可以被Spring Cloud Alibaba引入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，Spring Cloud Alibaba是Spring Cloud的超集，它具备Spring Cloud整个微服务生态系统的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结，Spring Cloud Alibaba绝对是微服务架构领域的巨无霸，通过它开发人员可以快速的搭建高可用、高稳定性和高性能的微服务架构。在搭建的过程中，还会驱动开发人员去扩展Spring Cloud Alibaba还不支持的微服务技术。Spring Cloud Alibaba是让开发人员入门和进阶微服务架构的一步到位的最佳选择，通过它开发人员可以快速的熟悉微服务架构的全栈支撑技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;小Q最后告诉大家，大厂不一定好，适合自己才是王道。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;本公众号文章，全部是自己一手原创的，希望朋友们多多关注本人的公众号。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>