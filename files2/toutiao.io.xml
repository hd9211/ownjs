<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>35e98654a235566e1ff30563ec249071</guid>
<title>每个程序员都应该知道的 latency time</title>
<link>https://toutiao.io/k/ol06bm3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;385&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/la8s6uvJibdR3AKJ73XnRn9lyCPwrmC0ibce9eHibks0xAkDsmzVA4512KV0BRFq4JVFdRzHR4JwntE5aIK9cFpfg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Photo by &lt;/span&gt;&lt;span&gt;Denny Müller&lt;/span&gt;&lt;span&gt; on &lt;/span&gt;&lt;span&gt;Unsplash&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你是计算机系毕业的，可以不会修电脑，但应该了解几组关于 &lt;/span&gt;&lt;span&gt;“Latency time” &lt;/span&gt;&lt;span&gt;的数字，&lt;/span&gt;&lt;span&gt;&lt;span&gt;诸如&lt;/span&gt;：&lt;/span&gt;&lt;span&gt;L1 cache reference&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; c&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;he &lt;/span&gt;&lt;span&gt;reference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Disk seek  &lt;/span&gt;&lt;span&gt;等操作的耗时情况。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2001 &lt;/span&gt;&lt;span&gt;年，&lt;/span&gt;&lt;span&gt;Peter Norvig&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;&lt;span&gt;曾任 &lt;/span&gt;&lt;span&gt;Google &lt;/span&gt;&lt;span&gt;搜索质量总监，经典教材《人工智能：一种现代方法》的作者之一&lt;/span&gt;&lt;/span&gt;&lt;span&gt;）在 “ &lt;/span&gt;&lt;span&gt;Teach Yourself Programming in Ten Years” &lt;/span&gt;&lt;span&gt;一文中，首次讨论了&lt;span&gt;计算机领域&lt;/span&gt;中 &lt;/span&gt;&lt;span&gt;memory&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Cache&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Disk&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;network&lt;/span&gt;&lt;span&gt; 等相关延时的数据（&lt;/span&gt;&lt;span&gt;&lt;span&gt;By the way&lt;/span&gt;&lt;span&gt;，“ &lt;span&gt;Teach Yourself Programming in Ten Years&lt;/span&gt;”这篇文章本身也是神文，&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt; 年过去了，依旧经典&lt;/span&gt;&lt;/span&gt;&lt;span&gt;）&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img data-backh=&quot;323&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5583333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/la8s6uvJibdR3AKJ73XnRn9lyCPwrmC0ibrUO2pRfus2ibFibUU5dic8e4ydkagbYzwUjmml1knpOYnONLFsXB7EEvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而让这些数字再次受关注的，是 &lt;span&gt;Google &lt;/span&gt;&lt;/span&gt;&lt;span&gt;的另一位&lt;/span&gt;&lt;span&gt;&lt;span&gt;大神。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;2010 &lt;/span&gt;&lt;span&gt;年，&lt;/span&gt;&lt;span&gt;Jeff  Dean &lt;/span&gt;&lt;span&gt;在斯坦福做了一次精彩的演讲：“&lt;/span&gt;&lt;span&gt;Building Software Systems at Google and
Lessons Learned”&lt;/span&gt;&lt;span&gt;，其中又讨论了这些计算机领域的&lt;/span&gt;&lt;span&gt; latency&lt;/span&gt;&lt;span&gt; 。毕竟，要做出优秀的架构，反而需要更加关注那些基础的领域知识。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;436&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7540500736377025&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdR3AKJ73XnRn9lyCPwrmC0ibpQicichemZ12aopG9xILdl6ZYiaK9ottzS5k0dxDeyzPvkcl3vq92ticBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;679&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;随后，&lt;/span&gt;&lt;span&gt;&lt;span&gt;一名 &lt;/span&gt;&lt;span&gt;UC Berkeley&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;的学生&lt;/span&gt;&lt;/span&gt;将这些计算机系统中的 &lt;span&gt;latency time &lt;/span&gt;做了一个可交互的网页，&lt;span&gt;得出这些指标的&lt;/span&gt;&lt;span&gt;计算公式也写在网页的&lt;/span&gt;&lt;span&gt;源码里&lt;/span&gt;（&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://colin-scott.github.io/personal_website/research/interactive_latency.html&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拖动标记年份的滚动条,  我们可以很直观地看到，不同年份下，&lt;/span&gt;&lt;span&gt;CPU cache&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;main memory&lt;/span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;network &lt;/span&gt;&lt;span&gt;这些技术发展&lt;/span&gt;&lt;span&gt;对系统延迟时间的影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;246&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4254016832440704&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdR3AKJ73XnRn9lyCPwrmC0ibLw0n7LrheFuicsLAeoCD2EvCf0VVGjFE5zlXILLn0HDWntRJlZJdaCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1307&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;下面是 &lt;/span&gt;&lt;span&gt;2020 &lt;/span&gt;&lt;span&gt;年&lt;/span&gt;的数据：&lt;/span&gt;&lt;/p&gt;&lt;table align=&quot;center&quot; interlaced=&quot;disabled&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;span&gt;L1 cache reference&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;读取&lt;/span&gt; CPU &lt;/span&gt;&lt;span&gt;一级缓存 &lt;span&gt;latency&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;1 ns&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1 &lt;/span&gt;&lt;span&gt;纳秒&lt;/span&gt;&lt;span&gt; = 10 亿分之一秒&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;L2 cache &lt;/span&gt;&lt;span&gt;reference&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;读取&lt;/span&gt;&lt;span&gt; CPU&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 二级&lt;/span&gt;&lt;span&gt;缓存 &lt;span&gt;latency&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;left&quot;&gt;&lt;span&gt;4 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;CPU Branch mispredict&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;CPU&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 分支错误&lt;/span&gt;&lt;span&gt;预&lt;/span&gt;&lt;span&gt;测耗时&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;3 ns&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Mutex Lo&lt;/span&gt;&lt;span&gt;ck / Unlock&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加互斥锁 / 解锁&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;17 n&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;Main memory &lt;span&gt;reference&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;读取主内存数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;100 ns&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;Compress 1 KB with Zippy&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1 k&lt;/span&gt;&lt;span&gt; 字节压缩&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;2000 ns = 2 &lt;/span&gt;&lt;span&gt;μs&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1 微秒 = 100 万分之一秒&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Read 1,000,000 bytes sequentially from main memory&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;从主内存中顺序读取 1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;&lt;span&gt; 字节数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;left&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;μs&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;Solid State Drive (SSD) random read&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;span&gt;从 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;SSD&lt;/span&gt;&lt;span&gt;&lt;span&gt; 中读取数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt;&lt;span&gt;16 &lt;/span&gt;&lt;span&gt;&lt;span&gt;μs&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Read 1,000,000 bytes sequentially from SSD&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;从 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;SSD&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 中顺序读取 1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;&lt;span&gt; 字节数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;μs&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Read 1,000,000 bytes sequentially from disk&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;从机械&lt;span&gt;硬&lt;/span&gt;盘&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;中顺序读取 1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;&lt;span&gt; 字节数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;25 &lt;/span&gt;&lt;span&gt;μs&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;Disk (Hard / magnetic drive) seek&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从机械硬盘中随机读取数&lt;/span&gt;&lt;span&gt;据&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;2 ms&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1 毫秒 &lt;/span&gt;&lt;span&gt;= 1000 分之一秒&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;2&quot; rowspan=&quot;1&quot;&gt;&lt;strong&gt;&lt;span&gt;网络&lt;/span&gt; &lt;span&gt;latency&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Send 2000 bytes over commodity &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;network&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过商用网络发送 &lt;/span&gt;&lt;span&gt;2k&lt;/span&gt;&lt;span&gt; 字节数据&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;left&quot;&gt;&lt;span&gt;44 ns&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Round trip network request in same &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;data centre&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在同一数据中心的&lt;span&gt;一&lt;/span&gt;&lt;span&gt;次&lt;/span&gt;&lt;span&gt;网&lt;/span&gt;&lt;span&gt;络请&lt;/span&gt;&lt;span&gt;求&lt;/span&gt;往返&lt;/span&gt;&lt;span/&gt;&lt;span&gt;耗时&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;left&quot;&gt;&lt;span&gt;500 &lt;span&gt;μs&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Packet roundtrip CA to Netherlands &lt;/span&gt;&lt;span&gt;从加拿大到荷兰的&lt;span&gt;一次&lt;/span&gt;网&lt;/span&gt;&lt;span&gt;&lt;span&gt;络请&lt;/span&gt;&lt;span&gt;求&lt;/span&gt;&lt;/span&gt;&lt;span&gt;往返耗时&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;left&quot;&gt;&lt;span&gt;150 ms&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;通过分析这些变化，可以发现一些有意思的事情：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.  &lt;/span&gt;&lt;span&gt;从&lt;/span&gt;&lt;span&gt; 2006&lt;/span&gt;&lt;span&gt; 年开始，前两列操作的数值（&lt;/span&gt;&lt;span&gt;L1 cache&lt;span&gt;，&lt;/span&gt;L2 cache&lt;/span&gt;&lt;span&gt;，解压缩）基本不再变化。从另一侧面反映了 &lt;/span&gt;&lt;span&gt;CPU&lt;/span&gt;&lt;span&gt; 芯片发展的时代烙印：从注重提升主频到往&lt;/span&gt;&lt;span&gt;多核方向发展；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.  &lt;/span&gt;&lt;span&gt;机械硬盘的&lt;/span&gt;&lt;span&gt;随机读写&lt;/span&gt;&lt;span&gt;性能&lt;/span&gt;&lt;span&gt;很差&lt;/span&gt;&lt;span&gt;，比内存慢 &lt;/span&gt;&lt;span&gt;1000 &lt;/span&gt;&lt;span&gt;倍。而异地访问的网络请求时延，又比硬盘读慢 &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt; 倍&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;span&gt;SSD&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;的随机读取速度 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;&lt;span&gt; 年间基本&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;没有提升，而顺序读取速度却从&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 50 ms&lt;/span&gt;&lt;span&gt;&lt;span&gt; 提升到 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;49 &lt;span&gt;μs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，提升了 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;&lt;span&gt; 倍。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;在某些场景下，基于 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;SSD&lt;/span&gt;&lt;span&gt;&lt;span&gt; 的顺序读性能甚至好于内存的随机读；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.  &lt;/span&gt;&lt;span&gt;不管是在同一数据中心还是异地数据中心，&lt;/span&gt;&lt;span&gt;RTT &lt;/span&gt;&lt;span&gt;基本不变，&lt;/span&gt;&lt;span&gt;一致保持 &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;μs&lt;/span&gt; 和 &lt;/span&gt;&lt;span&gt;150 ms&lt;/span&gt;&lt;span&gt;。假设信号在光纤中以近似光速传播，理论上 &lt;/span&gt;&lt;span&gt;RTT&lt;/span&gt;&lt;span&gt; 由物理规律决定。比如：&lt;/span&gt;&lt;span&gt;杭州到北京&lt;/span&gt;&lt;span&gt;距离大约为 &lt;/span&gt;&lt;span&gt;1500&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;km&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;RTT &lt;/span&gt;&lt;span&gt;延迟至少在： ( &lt;/span&gt;&lt;span&gt;2 * 1500 km&lt;/span&gt;&lt;span&gt; ) / (&lt;/span&gt;&lt;span&gt;300,000 &lt;/span&gt;&lt;span&gt;km/s&lt;/span&gt;&lt;span&gt;) = &lt;/span&gt;&lt;span&gt;10 &lt;/span&gt;&lt;span&gt;ms&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上， &lt;/span&gt;&lt;span&gt;Enjoy ~&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考资源：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;1. http://norvig.com/21-days.html&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;2. &lt;/span&gt;&lt;span&gt;https://static.googleusercontent.com/media/research.google.com/en//people/jeff/Stanford-DL-Nov-2010.pdf&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;3. &lt;/span&gt;&lt;span&gt;https://colin-scott.github.io/personal_website/research/&lt;span&gt;interactive_latency.html&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dce718a19689e296868feac01abe5a73</guid>
<title>到达率 99.9%：闲鱼消息在高速上换引擎（集大成）</title>
<link>https://toutiao.io/k/9u3thf6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在2020年年初的时候接手了闲鱼的消息，当时的消息存在一些反馈：“闲鱼消息丢失”、“消息用户头像乱了”、“订单状态不对”。闲鱼消息的稳定性是个亟待解决的问题，我们调研了集团的一些解决方案，例如钉钉的IMPass。直接迁移的成本和风险都是比较大，包括服务端数据需要双写、新老版本兼容等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那基于闲鱼现有的消息架构和体系，如何来保证它的稳定性？治理应该从哪里开始？现在闲鱼的稳定性是什么样的？如何衡量稳定性？希望这篇文章，能让大家看到一个不一样的闲鱼消息。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;行业方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;消息的投递链路大致分为三步：发送者发送，服务端接收然后落库，服务端通知接收端。特别是移动端的网络环境比较复杂，可能你发着消息，网络突然断掉了；可能消息正在发送中，网络突然好了，需要重发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;189&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.5998336106489185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6RjvAGqqo10esHT7l1NPgf5KLxQVo7TXqpiaegVutEq4kZqXxzENDGNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2404&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在如此复杂的网络环境下，是如何稳定可靠的进行消息投递的？对发送者来说，它不知道消息是否有送达，要想做到确定送达，就需要加一个响应机制，类似下面的响应逻辑：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;发送者发送了一条消息“Hello”，进入等待状态。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接收者收到这条消息“Hello”，然后告诉发送者说我已经收到这条消息了的确认信息。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;发送者接收到确认信息后，这个流程就算完成了，否则会重试。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;上面流程看似简单，关键是中间有个服务端转发过程，问题就在于谁来回这个确认信息，什么时候回这个确认信息。网上查到比较多的是如下一个必达模型，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;98&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.31106612685560053&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6c6RyBmibrKckz8TLpTQibmUCEEtmukrwQCm1ZjWarO37RjIWQ5Mb53qA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2964&quot; title=&quot;null&quot;/&gt;&lt;img data-ratio=&quot;0.2487708947885939&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp67cHNMGJqGtbJwtNgoy1Jx1fZZqb7mpoIAL2AsCK7ym5D4Vb4yb3I0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2034&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;[发送流程]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;A向IM-server发送一个消息请求包，即msg:R1&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;IM-server在成功处理后，回复A一个消息响应包，即msg:A1&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果此时B在线，则IM-server主动向B发送一个消息通知包，即msg:N1（当然，如果B不在线，则消息会存储离线）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;[接收流程]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;B向IM-server发送一个ack请求包，即ack:R2&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;IM-server在成功处理后，回复B一个ack响应包，即ack:A2&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;则IM-server主动向A发送一个ack通知包，即ack:N2&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;一个可信的消息送达系统就是靠的6条报文来保证的，有这个投递模型来决定消息的必达，中间任何一个环节出错，都可以基于这个request-ack机制来判定是否出错并重试。看下在第4.2章中，也是参考了上面这个模型，客户端发送的逻辑是直接基于http的所以暂时不用做重试，主要是在服务端往客户端推送的时候，会加上重试的逻辑。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;闲鱼消息的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;刚接手闲鱼消息，没有稳定相关的数据，所以第一步还是要对闲鱼消息做一个系统的排查，首先对消息做了全链路埋点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;146&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.46415770609318996&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6bm4PP2xbnkicMKSDdeMkJSoZNSvexU2oKxgQH5fdgzXKy0HhdjQ6EcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2232&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于消息的整个链路，我们梳理出来了几个关键的指标：发送成功率、消息到达率、客户端落库率。整个数据的统计都是基于埋点来做的。在埋点的过程中，发现了一个很大的问题：闲鱼的消息没有一个全局唯一的ID，导致在全链路埋点的过程中，无法唯一确定这条消息的生命周期。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;消息唯一性问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-backh=&quot;152&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.48270787343635024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6HOXn00WoQ8PFrwsxHibic5OzYVrBcLria8eohN35ib59Mbn3YB0icgzCYlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2718&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前闲鱼的消息是通过3个变量来唯一确定一个消息&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;•SessionID: 当前会话的ID&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;•SeqID：用户当前本地发送的消息序号，服务端是不关心此数据，完全是透传&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;•Version：这个比较重要，是消息在当前会话中的序号，以服务端为准，但是客户端也会生成一个假的version&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上图为例，当A和B同时发送消息的时候，都会在本地生成如上几个关键信息，当A发送的消息（黄色）首先到达服务端，因为前面没有其他version的消息，所以会将原数据返回给A，客户端A接收到消息的时候，再跟本地的消息做合并，只会保留一条消息。同时服务端也会将此消息发送给B，因为B本地也有一个version=1的消息，所以服务端过来的消息就会被过滤掉，这就出现消息丢失的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当B发送消息到达服务端后，因为已经有version=1的消息，所以服务端会将B的消息version递增，此时消息的version=2。这条消息发送给A，和本地消息可以正常合并。但是当此消息返回给B的时候，和本地的消息合并，会出现2条一样的消息，出现消息重复，这也是为什么闲鱼之前总是出现消息丢失和消息重复最主要的原因。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;消息推送逻辑问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;之前闲鱼的消息的推送逻辑也存在很大的问题，发送端使用http请求，发送消息内容，基本不会出问题，问题是出现在服务端给另外一端推送的时候。如下图所示，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;105&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.33362218370883884&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6S0pvib3obVzXNr4cFcdjGwiav1wR7FuneIM2rZjjKdtQhgT8fsF25ic6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2308&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务端在给客户端推送的时候，会先判断此时客户端是否在线，如果在线才会推送，如果不在线就会推离线消息。这个做法就非常的简单粗暴。长连接的状态如果不稳定，导致客户端真实状态和服务端的存储状态不一致，就导致消息不会推送到端上。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;客户端逻辑问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;除了以上跟服务端有关系外，还有一类问题是客户端本身设计的问题，可以归结为以下几种情况：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多线程问题 反馈消息列表页面会出现布局错乱，本地数据还没有完全初始化好，就开始渲染界面&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;未读数和小红点的计数不准确 本地的显示数据和数据库存储的不一致。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;消息合并问题 本地在合并消息的时候，是分段合并的，不能保证消息的连续性和唯一性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;诸如以上的几种情况，我们首先是对客户端的代码做了梳理与重构，架构如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;253&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.804424778761062&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp60IoX66ccLIK3lbrWlgVPMyibMZBvyqic3sgicT7s1EI7qmOAqNSd9l8icw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1130&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我们的解法 - 引擎升级&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;进行治理的第一步就是，解决闲鱼消息的唯一性的问题。我们也调研了钉钉的方案，钉钉是服务端全局维护消息的唯一ID，考虑到闲鱼消息的历史包袱，我们这边采用UUID作为消息的唯一ID，这样就可以在消息链路埋点以及去重上得到很大的改善。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;消息唯一性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在新版本的APP上面，客户端会生成一个uuid，对于老版本无法生成的情况，服务端也会补充上相关信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;136&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.4322250639386189&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp634CED2wJZeOr7RX3qXJWLaxxtJokN2zUjqcbfFznfyJbqV075CNf5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2346&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;消息的ID类似&lt;/span&gt;&lt;code&gt;&lt;span&gt;a1a3ffa118834033ac7a8b8353b7c6d9&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，客户端在接收到消息后，会先根据MessageID来去重，然后基于Timestamp排序就可以了，虽然客户端的时间可能不一样，但是重复的概率还是比较小。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span&gt;- (&lt;span&gt;void&lt;/span&gt;)combileMessages:(&lt;span&gt;NSArray&lt;/span&gt;&amp;lt;PMessage*&amp;gt;*)messages {&lt;br/&gt;    ...&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 1. 根据消息MessageId进行去重&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;NSMutableDictionary&lt;/span&gt; *messageMaps = [&lt;span&gt;self&lt;/span&gt; containerMessageMap];&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (PMessage *message &lt;span&gt;in&lt;/span&gt; msgs) {&lt;br/&gt;        [messageMaps &lt;span&gt;set&lt;/span&gt;Object:message &lt;span&gt;for&lt;/span&gt;Key:message.messageId];&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 2. 消息合并后排序&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;NSMutableArray&lt;/span&gt; *tempMsgs = [&lt;span&gt;NSMutableArray&lt;/span&gt; array];&lt;br/&gt;&lt;span&gt;    [tempMsgs addObjectsFromArray:messageMaps.allValues]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    [tempMsgs sortUsingComparator:^NSComparisonResult(PMessage * _Nonnull obj1, PMessage * _Nonnull obj2) {&lt;br/&gt;        &lt;span&gt;// 根据消息的timestamp进行排序&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;obj1&lt;/span&gt;&lt;span&gt;.timestamp&lt;/span&gt; &amp;gt; &lt;span&gt;obj2&lt;/span&gt;&lt;span&gt;.timestamp&lt;/span&gt;;&lt;br/&gt;    }];&lt;br/&gt;&lt;br/&gt;    ...&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;重发重连&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-backh=&quot;110&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.3499005964214712&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp68WfJ4rt1420cNfRjb552pEiaHtJ6QFp3h8sh2ogNzPiccRhKvtLCDn7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2012&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;基于#2中的重发重连模型，闲鱼完善了服务端的重发的逻辑，客户端完善了重连的逻辑。&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;客户端会定时检测ACCS长连接是否联通&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务端会检测设备是否在线，如果在线会推送消息，并会有超时等待&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;客户端接收到消息之后，会返回一个Ack&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;已经有小伙伴发表了一篇文章：&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA==&amp;amp;mid=2247486684&amp;amp;idx=1&amp;amp;sn=9a3c17289e0fd67e61cb30fd4920cedc&amp;amp;scene=21#wechat_redirect&quot; title=&quot;《向消息延迟说bybye：闲鱼消息及时到达方案（详细）》&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《向消息延迟说bybye：闲鱼消息及时到达方案（详细）》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，讲解了下关于网络不稳定给闲鱼消息带来的问题，在这里就不多赘述了。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据同步&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;重发重连是解决的基础网络层的问题，接下来就要看下业务层的问题，很多复杂情况是通过在业务层增加兼容代码来解决的，闲鱼消息的数据同步就是一个很典型的场景。在完善数据同步的逻辑之前，我们也调研过钉钉的一整套数据同步方案，他们主要是由服务端来保证的，背后有一个稳定的长连接保证，大致流程如下：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-backh=&quot;161&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.5126262626262627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6tm7opyUKwrSpJhcLzNzFiawWmwEK07CPtJF1bKsDlpJF9ZJPSRy5LyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1584&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;闲鱼的服务端暂时还没有这种能力，原因详见4.5的服务端存储模型。所以闲鱼这边只能从客户端来控制数据同步的逻辑，数据同步的方式包括：拉取会话、拉取消息、推送消息等。因为涉及到的场景比较复杂，之前有个场景就是推送会触发增量同步，如果推送过多的话，会同时触发多次网络请求，为了解决这个问题，我们也做了相关的推拉队列隔离。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-backh=&quot;216&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.6849865951742627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6ugolstbj5P6sTGA3QAlEibOqSdDGgTDtTVnvb97D28IF4VUKjs6rsWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1492&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;客户端控制的策略就是如果在拉取的话，会先将push过来的消息加到缓存队列里面，等拉取的结果回来，会再跟本地缓存的逻辑做合并，这样就可以避免多次网络请求的问题。之前同事已经写了一篇关于推拉流控制的逻辑，&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA==&amp;amp;mid=2247486155&amp;amp;idx=1&amp;amp;sn=7d44cc32814283b332ea8cf78c3116df&amp;amp;scene=21#wechat_redirect&quot; title=&quot;《如何有效缩短闲鱼消息处理时长》&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《如何有效缩短闲鱼消息处理时长》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，这里也不过多赘述了。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;客户端模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;客户端在数据组织形式上，主要分2种：会话和消息，会话又分为虚拟节点、会话节点和文件夹节点。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-backh=&quot;214&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.6802721088435374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp659iayQ3pGOoMzLbqHj8FEtMQ4jakQ0tb28gycjgpnuntHqkYoMicLpFw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2058&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在客户端会构建上图一样的树，这棵树主要保存的是会话显示的相关信息，比如未读数、红点以及最新消息摘要，子节点更新，会顺带更新到父节点，构建树的过程也是已读和未读数更新的过程。其中比较复杂的场景是闲鱼情报社，这个其实是一个文件夹节点，它包含了很多个子的会话，这就决定了他的消息排序、红点计数以及消息摘要的更新逻辑会更复杂，服务端告知客户端子会话的列表，然后客户端再去拼接这些数据模型。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;服务端存储模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-backh=&quot;203&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.6446199407699901&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6SkJIl4FqYIW5YAfcrJLC4wibsd7tJJVH4MMHDVibqxuMYbyvRDPnIRKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2026&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在4.3中大概讲了客户端的请求逻辑，历史消息会分为增量和全量域同步。这个域其实是服务端的一层概念，本质上就是用户消息的一层缓存，消息过来之后会暂存在缓存中，加速消息读取。但是这个设计也存在一个缺陷，就是域环是有长度的，最多保存256条，当用户的消息数多于256条，只能从数据库中读取。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于服务端的存储方式，我们也调研过钉钉的方案，是写扩散，优点就是可以很好地对每位用户的消息做定制化，比如钉的逻辑，缺点就是存储量很很大。闲鱼的这套解决方案，应该是介于读扩散和写扩散之间的一种解决方案。这个设计方式不仅使客户端逻辑复杂，服务端的数据读取速度也会比较慢，后续这块也可以做优化。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我们的解法 - 质量监控&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;在做客户端和服务端的全链路改造的同时，我们也对消息线上的行为做了监控和排查的逻辑。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;全链路排查&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-backh=&quot;99&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.3132530120481928&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6aSdcQl2ib0b8yoKWmOvtrHSuskKuD1Ihtea0ezk3j4y332XyiaayYTIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2158&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;全链路排查是基于用户的实时行为日志，客户端的埋点通过集团实时处理引擎Flink，将数据清洗到SLS里面，用户的行为包括了消息引擎对消息的处理、用户的点击/访问页面的行为、以及用户的网络请求。服务端侧会有一些长连接推送以及重试的日志，也会清洗到SLS，这样就组成了从服务端到客户端全链路的排查的方案，详情请参考&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA==&amp;amp;mid=2247486473&amp;amp;idx=1&amp;amp;sn=a91aefc430776a4d0f15547016243a06&amp;amp;scene=21#wechat_redirect&quot; title=&quot;《消息质量平台系列文章|全链路排查篇》&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《消息质量平台系列文章|全链路排查篇》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;对账系统&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;当然为了验证消息的准确性，我们还做了对账系统。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-backh=&quot;198&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.6307385229540918&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6XnJ8GVMeNFgUmsYvhPQWT4XnGKHaxPQpsqwRpSSApMDfqvBwjJLibMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1002&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在用户离开会话的时候，我们会统计当前会话一定数量的消息，生成一个md5的校验码，上报到服务端。服务端拿到这个校验码之后再判定是否消息是正确的，经过抽样数据验证，消息的准确性基本都在99.99%。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;核心数据指标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;我们在统计消息的关键指标的时候，遇到点问题，之前我们是用用户埋点来统计的，发现会有3%~5%的数据差；所以后来我们采用抽样实时上报的数据来计算数据指标。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;消息到达率=客户端实际收到的消息量/客户端应该收到的消息量&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;客户端实际收到的消息的定义为消息落库才算是 该指标不区分离线在线，取用户当日最后一次更新设备时间，理论上当天且在此时间之前下发的消息都应该收到。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-backh=&quot;139&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.4412171507607192&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DUwiayJ0Mj1EdAU0LQrO8AzzuQ6cUUCp6vicypZBnkmBXPCVBMEJ6Xk67t1gGSQnZhlcicvbkFoj0kemST5xsibXjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1446&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;最新版本的到达率已经基本达到99.9%，从舆情上来看，反馈丢消息的也确实少了很多。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;未来规划&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;整体看来，经过一年的治理，闲鱼的消息在慢慢的变好，但还是存在一些待优化的方面：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;•现在消息的安全性不足，容易被黑产利用，借助消息发送一些违规的内容。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;•消息的扩展性较弱，增加一些卡片或者能力就要发版，缺少了动态化和扩展的能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;•现在底层协议比较难扩展，后续还是要规范一下协议。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;•从业务角度看，消息应该是一个横向支撑的工具性或者平台型的产品，规划可以快速对接二方和三方的快速对接。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在2021年，我们会持续关注消息相关的用户舆情，希望闲鱼消息能帮助闲鱼用户更好的完成二手交易。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;[参考资料]&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;http://www.52im.net/thread-464-1-1.html&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;闲不住？来闲鱼！&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7870968&quot; data-type=&quot;gif&quot; data-w=&quot;155&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/HvyYm0PI63T6ypu7tGic9rQS8shV87p7VOgVr8CqsPWHNJYLSl5F44KzGnNoyHNrgDmaT6GP32Cpoe2AeO5ZthA/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;PICK ME&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;闲鱼是阿里巴巴旗下品牌，是中国最大的闲置交易平台，于2014年成立至今，是继淘宝、天猫之后，阿里巴巴正在催生的第三个万亿级平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;闲鱼技术部不断在驱动业务变革，通过创新追寻更多价值。从出版书籍、峰会发声，到开源专利、海外传播。闲不住，上闲鱼——技术团队对极致的探索与深耕是我们的底气。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 立即加入 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、招&lt;/span&gt;&lt;span&gt;&lt;strong&gt;项目经理PMO&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;/客户端/服务端/前端/数据+算法/质量工程师&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、发简历给guicai.gxy@alibaba-inc.com&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、您还可以在头条、知乎、掘金、facebook、twitter找到我们&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>575b483db3ebe8537c9038fc407cbb88</guid>
<title>面试中 LRU / LFU 的青铜与王者</title>
<link>https://toutiao.io/k/o9kubh1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/7ef1f80f565008a419e31adb3407bbae52fef7d1b66d7315f70ee62b7f77bf40/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f302e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/7ef1f80f565008a419e31adb3407bbae52fef7d1b66d7315f70ee62b7f77bf40/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f302e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_0.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-面试中-lru--lfu-的青铜与王者&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#面试中-lru--lfu-的青铜与王者&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;面试中 LRU / LFU 的青铜与王者&lt;/h1&gt;
&lt;p&gt;已经 0202 年了，大厂面试手撸算法题已经是标配。第一轮就遇到手撸 LRU / LFU 的几率还是挺大的。LeetCode 上&lt;a href=&quot;https://leetcode.com/problems/lru-cache/&quot; rel=&quot;nofollow&quot;&gt;146. LRU Cache&lt;/a&gt; 和 &lt;a href=&quot;https://leetcode.com/problems/lfu-cache/&quot; rel=&quot;nofollow&quot;&gt;460. LFU Cache&lt;/a&gt;，LRU 是 Medium 难度，LFU 是 Hard 难度，面试官眼里认为这 2 个问题是最最最基础的。这篇文章就来聊聊面试中 LRU / LFU 的青铜与王者。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缓存淘汰算法不仅仅只有 LRU / LFU 这两种，还有很多种，&lt;strong&gt;TLRU&lt;/strong&gt; (Time aware least recently used)，&lt;strong&gt;PLRU&lt;/strong&gt; (Pseudo-LRU)，&lt;strong&gt;SLRU&lt;/strong&gt; (Segmented LRU)，&lt;strong&gt;LFRU&lt;/strong&gt; (Least frequent recently used)，&lt;strong&gt;LFUDA&lt;/strong&gt; (LFU with dynamic aging)，&lt;strong&gt;LIRS&lt;/strong&gt; (Low inter-reference recency set)，&lt;strong&gt;ARC&lt;/strong&gt; (Adaptive Replacement Cache)，&lt;strong&gt;FIFO&lt;/strong&gt; (First In First Out)，&lt;strong&gt;MRU&lt;/strong&gt; (Most recently used)，&lt;strong&gt;LIFO&lt;/strong&gt; (Last in first out)，&lt;strong&gt;FILO&lt;/strong&gt; (First in last out)，&lt;strong&gt;CAR&lt;/strong&gt; (Clock with adaptive replacement) 等等。感兴趣的同学可以把这每一种都用代码实现一遍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-倔强青铜&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#倔强青铜&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;倔强青铜&lt;/h2&gt;
&lt;p&gt;面试官可能就直接拿出 LeetCode 上这 2 道题让你来做的。在笔者拿出标准答案之前，先简单介绍一下 LRU 和 LFU 的概念。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/9c0f7cf01c4a8a8c4c33d4277ed93d27bb7c46203bf4524f5f95456028c223fb/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f315f2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/9c0f7cf01c4a8a8c4c33d4277ed93d27bb7c46203bf4524f5f95456028c223fb/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f315f2e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_1_.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LRU 是 Least Recently Used 的缩写，即最近最少使用，是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰。如上图，要插入 F 的时候，此时需要淘汰掉原来的一个页面。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/7f84aa263e95469060a623d8890bc261c1eb0bf02722cfdc831842ea1e59312b/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f325f302e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/7f84aa263e95469060a623d8890bc261c1eb0bf02722cfdc831842ea1e59312b/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f325f302e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_2_0.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据 LRU 的策略，每次都淘汰最近最久未使用的页面，所以先淘汰 A 页面。再插入 C 的时候，发现缓存中有 C 页面，这个时候需要把 C 页面放到首位，因为它被使用了。以此类推，插入 G 页面，G 页面是新页面，不在缓存中，所以淘汰掉 B 页面。插入 H 页面，H 页面是新页面，不在缓存中，所以淘汰掉 D 页面。插入 E 的时候，发现缓存中有 E 页面，这个时候需要把 E 页面放到首位。插入 I 页面，I 页面是新页面，不在缓存中，所以淘汰掉 F 页面。&lt;/p&gt;
&lt;p&gt;可以发现，&lt;strong&gt;LRU 更新和插入新页面都发生在链表首，删除页面都发生在链表尾&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;LRU 要求查询尽量高效，O(1) 内查询。那肯定选用 map 查询。修改，删除也要尽量 O(1) 完成。搜寻常见的数据结构，链表，栈，队列，树，图。树和图排除，栈和队列无法任意查询中间的元素，也排除。所以选用链表来实现。但是如果选用单链表，删除这个结点，需要 O(n) 遍历一遍找到前驱结点。所以选用双向链表，在删除的时候也能 O(1) 完成。&lt;/p&gt;
&lt;p&gt;由于 Go 的 container 包中的 list 底层实现是双向链表，所以可以直接复用这个数据结构。定义 LRUCache 的数据结构如下：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&quot;container/list&quot;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;Cap&lt;/span&gt;  &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;Keys&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;Element&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;List&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;K&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Constructor&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt; {
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;{
        &lt;span class=&quot;pl-c1&quot;&gt;Cap&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt;,
        &lt;span class=&quot;pl-c1&quot;&gt;Keys&lt;/span&gt;: &lt;span class=&quot;pl-en&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;Element&lt;/span&gt;),
        &lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;New&lt;/span&gt;(),
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里需要解释 2 个问题，list 中的值存的是什么？pair 这个结构体有什么用？&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
&lt;span class=&quot;pl-c&quot;&gt;// Next and previous pointers in the doubly-linked list of elements.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;// To simplify the implementation, internally a list l is implemented&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;// as a ring, such that &amp;amp;l.root is both the next element of the last&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;// list element (l.Back()) and the previous element of the first list&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;// element (l.Front()).&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Element&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;// The list to which this element belongs.&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;List&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;// The value stored with this element.&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;interface&lt;/span&gt;{}
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 container/list 中，这个双向链表的每个结点的类型是 Element。Element 中存了 4 个值，前驱和后继结点，双向链表的头结点，value 值。这里的 value 是 interface 类型。笔者在这个 value 里面存了 pair 这个结构体。这就解释了 list 里面存的是什么数据。&lt;/p&gt;
&lt;p&gt;为什么要存 pair 呢？单单指存 v 不行么，为什么还要存一份 key ？原因是在 LRUCache 执行删除操作的时候，需要维护 2 个数据结构，一个是 map，一个是双向链表。在双向链表中删除淘汰出去的 value，在 map 中删除淘汰出去 value 对应的 key。如果在双向链表的 value 中不存储 key，那么再删除 map 中的 key 的时候有点麻烦。如果硬要实现，需要先获取到双向链表这个结点 Element 的地址。然后遍历 map，在 map 中找到存有这个 Element 元素地址对应的 key，再删除。这样做时间复杂度是 O(n)，做不到 O(1)。所以双向链表中的 Value 需要存储这个 pair。&lt;/p&gt;
&lt;p&gt;LRUCache 的 Get 操作很简单，在 map 中直接读取双向链表的结点。如果 map 中存在，将它移动到双向链表的表头，并返回它的 value 值，如果 map 中不存在，返回 -1。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Keys&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;]; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;MoveToFront&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-smi&quot;&gt;pair&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;V&lt;/span&gt;
}
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LRUCache 的 Put 操作也不难。先查询 map 中是否存在 key，如果存在，更新它的 value，并且把该结点移到双向链表的表头。如果 map 中不存在，新建这个结点加入到双向链表和 map 中。最后别忘记还需要维护双向链表的 cap，如果超过 cap，需要淘汰最后一个结点，双向链表中删除这个结点，map 中删掉这个结点对应的 key。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Put&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Keys&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;]; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;pair&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;K&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;V&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;}
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;MoveToFront&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;)
} &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;PushFront&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;pair&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;K&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;V&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;})
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Keys&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;
}
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Len&lt;/span&gt;() &lt;span class=&quot;pl-c1&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Cap&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Back&lt;/span&gt;()
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;)
&lt;span class=&quot;pl-en&quot;&gt;delete&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Keys&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-smi&quot;&gt;pair&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;K&lt;/span&gt;)
}
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结，LRU 是由一个 map 和一个双向链表组成的数据结构。map 中 key 对应的 value 是双向链表的结点。双向链表中存储 key-value 的 pair。双向链表表首更新缓存，表尾淘汰缓存。如下图：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/ae31d6bd4789c29f8ba7561474c12c58b05a47d886b98510e0405bfbe394100f/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f392e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ae31d6bd4789c29f8ba7561474c12c58b05a47d886b98510e0405bfbe394100f/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f392e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_9.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提交代码以后，成功通过所有测试用例。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/bc5fd8aaa35b5e887ac5a6e09fe8cde4e60b0d5156b61c7f9414448a092ed95a/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f345f2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/bc5fd8aaa35b5e887ac5a6e09fe8cde4e60b0d5156b61c7f9414448a092ed95a/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f345f2e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_4_.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LFU 是 Least Frequently Used 的缩写，即最不经常最少使用，也是一种常用的页面置换算法，选择访问计数器最小的页面予以淘汰。如下图，缓存中每个页面带一个访问计数器。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/e846f7dcdc16fc7c90b5917a0bcb1d9722b7fb8dbcbb0df00751f2f5f43cb1c5/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f332e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/e846f7dcdc16fc7c90b5917a0bcb1d9722b7fb8dbcbb0df00751f2f5f43cb1c5/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f332e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_3.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据 LFU 的策略，每访问一次都要更新访问计数器。当插入 B 的时候，发现缓存中有 B，所以增加访问计数器的计数，并把 B 移动到访问计数器从大到小排序的地方。再插入 D，同理先更新计数器，再移动到它排序以后的位置。当插入 F 的时候，缓存中不存在 F，所以淘汰计数器最小的页面的页面，所以淘汰 A 页面。此时 F 排在最下面，计数为 1。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/041aa6c31e6106a837fc634f0d968b8037a0ffb9e79b8af41426b8e3f3769885/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f385f2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/041aa6c31e6106a837fc634f0d968b8037a0ffb9e79b8af41426b8e3f3769885/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f385f2e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_8_.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有一个比 LRU 特别的地方。如果淘汰的页面访问次数有多个相同的访问次数，选择最靠尾部的。如上图中，A、B、C 三者的访问次数相同，都是 1 次。要插入 F，F 不在缓存中，此时要淘汰 A 页面。F 是新插入的页面，访问次数为 1，排在 C 的前面。也就是说相同的访问次数，按照新旧顺序排列，淘汰掉最旧的页面。这一点是和 LRU 最大的不同的地方。&lt;/p&gt;
&lt;p&gt;可以发现，&lt;strong&gt;LFU 更新和插入新页面可以发生在链表中任意位置，删除页面都发生在表尾&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;LFU 同样要求查询尽量高效，O(1) 内查询。依旧选用 map 查询。修改和删除也需要 O(1) 完成，依旧选用双向链表，继续复用 container 包中的 list 数据结构。LFU 需要记录访问次数，所以每个结点除了存储 key，value，需要再多存储 frequency 访问次数。&lt;/p&gt;
&lt;p&gt;还有 1 个问题需要考虑，一个是如何按频次排序？相同频次，按照先后顺序排序。如果你开始考虑排序算法的话，思考方向就偏离最佳答案了。排序至少 O(nlogn)。重新回看 LFU 的工作原理，会发现它只关心最小频次。其他频次之间的顺序并不关心。所以不需要排序。用一个 min 变量保存最小频次，淘汰时读取这个最小值能找到要删除的结点。相同频次按照先后顺序排列，这个需求还是用双向链表实现，双向链表插入的顺序体现了结点的先后顺序。相同频次对应一个双向链表，可能有多个相同频次，所以可能有多个双向链表。用一个 map 维护访问频次和双向链表的对应关系。删除最小频次时，通过 min 找到最小频次，然后再这个 map 中找到这个频次对应的双向链表，在双向链表中找到最旧的那个结点删除。这就解决了 LFU 删除操作。&lt;/p&gt;
&lt;p&gt;LFU 的更新操作和 LRU 类似，也需要用一个 map 保存 key 和双向链表结点的映射关系。这个双向链表结点中存储的是 key-value-frequency 三个元素的元组。这样通过结点中的 key 和 frequency 可以反过来删除 map 中的 key。&lt;/p&gt;
&lt;p&gt;定义 LFUCache 的数据结构如下：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&quot;container/list&quot;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LFUCache&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
&lt;span class=&quot;pl-c1&quot;&gt;nodes&lt;/span&gt;    &lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;Element&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;    &lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;List&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;min&lt;/span&gt;      &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;       &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;     &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Constructor&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;LFUCache&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LFUCache&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;nodes&lt;/span&gt;: &lt;span class=&quot;pl-en&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;Element&lt;/span&gt;),
&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;:    &lt;span class=&quot;pl-en&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;List&lt;/span&gt;),
&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt;,
&lt;span class=&quot;pl-c1&quot;&gt;min&lt;/span&gt;:      &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
}
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LFUCache 的 Get 操作涉及更新 frequency 值和 2 个 map。在 nodes map 中通过 key 获取到结点信息。在 lists 删除结点当前 frequency 结点。删完以后 frequency ++。新的 frequency 如果在 lists 中存在，添加到双向链表表首，如果不存在，需要新建一个双向链表并把当前结点加到表首。再更新双向链表结点作为 value 的 map。最后更新 min 值，判断老的 frequency 对应的双向链表中是否已经为空，如果空了，min++。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LFUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;nodes&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
}
&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;node&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;].&lt;span class=&quot;pl-en&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;++&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;]; &lt;span class=&quot;pl-c1&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;New&lt;/span&gt;()
}
&lt;span class=&quot;pl-s1&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;]
&lt;span class=&quot;pl-s1&quot;&gt;newNode&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;newList&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;PushFront&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;nodes&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;newNode&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;pl-en&quot;&gt;Len&lt;/span&gt;() &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;++&lt;/span&gt;
}
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LFU 的 Put 操作逻辑稍微多一点。先在 nodes map 中查询 key 是否存在，如果存在，获取这个结点，更新它的 value 值，然后手动调用一次 Get 操作，因为下面的更新逻辑和 Get 操作一致。如果 map 中不存在，接下来进行插入或者删除操作。判断 capacity 是否装满，如果装满，执行删除操作。在 min 对应的双向链表中删除表尾的结点，对应的也要删除 nodes map 中的键值。&lt;/p&gt;
&lt;p&gt;由于新插入的页面访问次数一定为 1，所以 min 此时置为 1。新建结点，插入到 2 个 map 中。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LFUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Put&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
&lt;span class=&quot;pl-c&quot;&gt;// 如果存在，更新访问次数&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;currentValue&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;nodes&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;]; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;currentValue&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;node&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
&lt;span class=&quot;pl-c&quot;&gt;// 如果不存在且缓存满了，需要删除&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;nodes&lt;/span&gt;) {
&lt;span class=&quot;pl-s1&quot;&gt;currentList&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;min&lt;/span&gt;]
&lt;span class=&quot;pl-s1&quot;&gt;backNode&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;currentList&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Back&lt;/span&gt;()
&lt;span class=&quot;pl-en&quot;&gt;delete&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;nodes&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;backNode&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;node&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;currentList&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;backNode&lt;/span&gt;)
}
&lt;span class=&quot;pl-c&quot;&gt;// 新建结点，插入到 2 个 map 中&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;node&lt;/span&gt;{
&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;:       &lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;,
&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;:     &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;,
&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,
}
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;pl-c1&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;New&lt;/span&gt;()
}
&lt;span class=&quot;pl-s1&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lists&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]
&lt;span class=&quot;pl-s1&quot;&gt;newNode&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;newList&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;PushFront&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;currentNode&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;nodes&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;newNode&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结，LFU 是由两个 map 和一个 min 指针组成的数据结构。一个 map 中 key 存的是访问次数，对应的 value 是一个个的双向链表，此处双向链表的作用是在相同频次的情况下，淘汰表尾最旧的那个页面。另一个 map 中 key 对应的 value 是双向链表的结点，结点中比 LRU 多存储了一个访问次数的值，即结点中存储 key-value-frequency 的元组。此处双向链表的作用和 LRU 是类似的，可以根据 map 中的 key 更新双向链表结点中的 value 和 frequency 的值，也可以根据双向链表结点中的 key 和 frequency 反向更新 map 中的对应关系。如下图：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/623944d557b3778f1cb84da23afbd7805c5a9df6c1b25fd71ad206771693e02e/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31305f312e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/623944d557b3778f1cb84da23afbd7805c5a9df6c1b25fd71ad206771693e02e/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31305f312e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_10_1.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提交代码以后，成功通过所有测试用例。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/ccd04b23b7bbc7b8ed04e9cf24bcf1ccb4d65f41ecc6e8962330678ede39d66f/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f352e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ccd04b23b7bbc7b8ed04e9cf24bcf1ccb4d65f41ecc6e8962330678ede39d66f/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f352e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_5.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-荣耀黄金&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#荣耀黄金&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;荣耀黄金&lt;/h2&gt;
&lt;p&gt;面试中如果给出了上面青铜的答案，可能会被追问，“还有没有其他解法？” 虽然目前青铜的答案已经是最优解了，但是面试官还想考察多解。&lt;/p&gt;
&lt;p&gt;先考虑 LRU。数据结构上想不到其他解法了，但从打败的百分比上，看似还有常数的优化空间。笔者反复思考，觉得可能导致运行时间变长的地方是在 interface{} 类型推断，其他地方已无优化的空间。手写一个双向链表提交试试，代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
&lt;span class=&quot;pl-c1&quot;&gt;head&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Node&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;       &lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Node&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt;   &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt;   &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Node&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;ConstructorLRU&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;: &lt;span class=&quot;pl-en&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Node&lt;/span&gt;), &lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt;}
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;]; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt;
}
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Put&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;]; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
} &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Node&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;}
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;)
}
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;) &lt;span class=&quot;pl-c1&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt; {
&lt;span class=&quot;pl-en&quot;&gt;delete&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;tail&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;tail&lt;/span&gt;)
}
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Node&lt;/span&gt;) {
&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;head&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;head&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;
}
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;tail&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;
}
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Node&lt;/span&gt;) {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;head&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;
}
&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;tail&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;prev&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提交以后还真的 100% 了。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/e27f7e7bf5b2a90252f98a26a4d171c791d9949b1cf5feac2954e8a657c62ebf/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f362e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/e27f7e7bf5b2a90252f98a26a4d171c791d9949b1cf5feac2954e8a657c62ebf/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f362e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_6.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上述代码实现的 LRU 本质并没有优化，只是换了一个写法，没有用 container 包而已。&lt;/p&gt;
&lt;p&gt;LFU 的另外一个思路是利用 &lt;a href=&quot;https://algs4.cs.princeton.edu/24pq/&quot; rel=&quot;nofollow&quot;&gt;Index Priority Queue&lt;/a&gt; 这个数据结构。别被名字吓到，Index Priority Queue = map + Priority Queue，仅此而已。&lt;/p&gt;
&lt;p&gt;利用 Priority Queue 维护一个最小堆，堆顶是访问次数最小的元素。map 中的 value 存储的是优先队列中结点。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&quot;container/heap&quot;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LFUCache&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;pq&lt;/span&gt;       &lt;span class=&quot;pl-smi&quot;&gt;PriorityQueue&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Item&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt;  &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Constructor&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;LFUCache&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;lfu&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LFUCache&lt;/span&gt;{
&lt;span class=&quot;pl-c1&quot;&gt;pq&lt;/span&gt;:       &lt;span class=&quot;pl-smi&quot;&gt;PriorityQueue&lt;/span&gt;{},
&lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;:     &lt;span class=&quot;pl-en&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Item&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt;),
&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt;,
}
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;lfu&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Get 和 Put 操作要尽量的快，有 2 个问题需要解决。当访问次数相同时，如何删除掉最久的元素？当元素的访问次数发生变化时，如何快速调整堆？为了解决这 2 个问题，定义如下的数据结构：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-c&quot;&gt;// An Item is something we manage in a priority queue.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;     &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;// The value of the item; arbitrary.&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;       &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;// The priority of the item in the queue.&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;count&lt;/span&gt;     &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;// use for evicting the oldest element&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;// The index is needed by update and is maintained by the heap.Interface methods.&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;// The index of the item in the heap.&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;堆中的结点存储这 5 个值。count 值用来决定哪个是最老的元素，类似一个操作时间戳。index 值用来 re-heapify 调整堆的。接下来实现 PriorityQueue 的方法。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-c&quot;&gt;// A PriorityQueue implements heap.Interface and holds Items.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;PriorityQueue&lt;/span&gt; []&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Item&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;PriorityQueue&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Len&lt;/span&gt;() &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; { &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;) }

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;PriorityQueue&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Less&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;bool&lt;/span&gt; {
&lt;span class=&quot;pl-c&quot;&gt;// We want Pop to give us the highest, not lowest, priority so we use greater than here.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;].&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;j&lt;/span&gt;].&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;].&lt;span class=&quot;pl-c1&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;j&lt;/span&gt;].&lt;span class=&quot;pl-c1&quot;&gt;count&lt;/span&gt;
}
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;].&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;j&lt;/span&gt;].&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;PriorityQueue&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Swap&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) {
&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;], &lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;j&lt;/span&gt;] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;j&lt;/span&gt;], &lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;]
&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;].&lt;span class=&quot;pl-c1&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;j&lt;/span&gt;].&lt;span class=&quot;pl-c1&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;j&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;PriorityQueue&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Push&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;interface&lt;/span&gt;{}) {
&lt;span class=&quot;pl-s1&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;x&lt;/span&gt;.(&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Item&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;)
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;PriorityQueue&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Pop&lt;/span&gt;() &lt;span class=&quot;pl-k&quot;&gt;interface&lt;/span&gt;{} {
&lt;span class=&quot;pl-s1&quot;&gt;old&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;old&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;old&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]
&lt;span class=&quot;pl-s1&quot;&gt;old&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;  &lt;span class=&quot;pl-c&quot;&gt;// avoid memory leak&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;// for safety&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;old&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;pl-s1&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;
}

&lt;span class=&quot;pl-c&quot;&gt;// update modifies the priority and value of an Item in the queue.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;PriorityQueue&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;update&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Item&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) {
&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;frequency&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;heap&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Fix&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;pq&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;index&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Less() 方法中，frequency 从小到大排序，frequency 相同的，按 count 从小到大排序。按照优先队列建堆规则，可以得到，frequency 最小的在堆顶，相同的 frequency，count 最小的越靠近堆顶。&lt;/p&gt;
&lt;p&gt;在 Swap() 方法中，记得要更新 index 值。在 Push() 方法中，插入时队列的长度即是该元素的 index 值，此处也要记得更新 index 值。update() 方法调用 Fix() 函数。Fix() 函数比先 Remove() 再 Push() 一个新的值，花销要小。所以此处调用 Fix() 函数，这个操作的时间复杂度是 O(log n)。&lt;/p&gt;
&lt;p&gt;这样就维护了最小 Index Priority Queue。Get 操作非常简单：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LFUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
}
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;]; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;++&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;pq&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;update&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;
}
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 hashmap 中查询 key，如果存在，counter 时间戳累加，调用 Priority Queue 的 update 方法，调整堆。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LFUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Put&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;++&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;// 如果存在，增加 frequency，再调整堆&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;]; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;pq&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;update&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;frequency&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
&lt;span class=&quot;pl-c&quot;&gt;// 如果不存在且缓存满了，需要删除。在 hashmap 和 pq 中删除。&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;pq&lt;/span&gt;) &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;capacity&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;heap&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Pop&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;pq&lt;/span&gt;).(&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Item&lt;/span&gt;)
&lt;span class=&quot;pl-en&quot;&gt;delete&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;)
}
&lt;span class=&quot;pl-c&quot;&gt;// 新建结点，在 hashmap 和 pq 中添加。&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Item&lt;/span&gt;{
&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;,
&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;:   &lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;,
&lt;span class=&quot;pl-c1&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt;,
}
&lt;span class=&quot;pl-s1&quot;&gt;heap&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Push&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;pq&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;item&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用最小堆实现的 LFU，Put 时间复杂度是 O(capacity)，Get 时间复杂度是 O(capacity)，不及 2 个 map 实现的版本。巧的是最小堆的版本居然打败了 100%。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/219181a78bc25e9a1b321ae932f6c7133230ebc2421f9f2d9cd3c78cc2793d51/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f372e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/219181a78bc25e9a1b321ae932f6c7133230ebc2421f9f2d9cd3c78cc2793d51/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f372e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_7.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提交以后，LRU 和 LFU 都打败了 100%。上述代码都封装好了，&lt;a href=&quot;https://github.com/halfrost/LeetCode-Go/tree/master/template&quot;&gt;完整代码&lt;/a&gt;在 LeetCode-Go 中，讲解也更新到了 《LeetCode Cookbook》第三章的&lt;a href=&quot;https://books.halfrost.com/leetcode/ChapterThree/LRUCache/&quot; rel=&quot;nofollow&quot;&gt;第三节 LRUCache&lt;/a&gt;和&lt;a href=&quot;https://books.halfrost.com/leetcode/ChapterThree/LFUCache/&quot; rel=&quot;nofollow&quot;&gt;第四节 LFUCache&lt;/a&gt;中。LRU 的最优解是 map + 双向链表，LFU 的最优解是 2 个 map + 多个双向链表。其实热身刚刚结束，接下来才是本文的&lt;strong&gt;重点&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-最强王者&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#最强王者&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;最强王者&lt;/h2&gt;
&lt;p&gt;在面试者回答出黄金级的问题了以后，面试官可能会继续追问一个更高级的问题。“如何实现一个高并发且线程安全的 LRU 呢？”。遇到这个问题，上文讨论的代码模板就失效了。要想做到高并发，需要考虑 2 点，第一点内存分配与回收 GC 一定要快，最好是 Zero GC 开销，第二点执行操作耗时最少。详细的，由于要做到高并发，瞬间的 TPS 可能会很大，所以要最快的分配内存，开辟新的内存空间。垃圾回收也不能慢，否则内存会暴涨。针对 LRU / LFU 这个问题，执行的操作是 get 和 set，耗时需要最少。耗时高了，系统吞吐率会受到严重影响，TPS 上不去了。再者，在高并发的场景中，一定会保证线程安全。这里就需要用到锁。最简单的选用读写锁。以下举例以 LRUCache 为例。LFUCache 原理类似。（以下代码先给出改造新增的部分，最后再给出完整版）&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
    sync.&lt;span class=&quot;pl-smi&quot;&gt;RWMutex&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;RLock&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;RUnlock&lt;/span&gt;()

……
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Put&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) {
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Lock&lt;/span&gt;()
  &lt;span class=&quot;pl-k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Unlock&lt;/span&gt;()
  
……
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码虽然能保证线程安全，但是并发量并不高。因为在 Put 操作中，写锁会阻碍读锁，这里会锁住。接下来的优化思路很清晰，拆分大锁，让写锁尽可能的少阻碍读锁。一句话就是将锁颗粒化。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/a613987b7fbca4852abbfcc12b5eabc11a1a82a04dd71b49d54fb4e96514ec7e/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32372e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a613987b7fbca4852abbfcc12b5eabc11a1a82a04dd71b49d54fb4e96514ec7e/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32372e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_27.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如上图，将一个大的临界区拆分成一个个小的临界区。代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
    sync.&lt;span class=&quot;pl-smi&quot;&gt;RWMutex&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;shards&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCacheShard&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LRUCacheShard&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
  &lt;span class=&quot;pl-c1&quot;&gt;Cap&lt;/span&gt;  &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;Keys&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;Element&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;List&lt;/span&gt;
sync.&lt;span class=&quot;pl-smi&quot;&gt;RWMutex&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;GetShard&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
}
&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;RLock&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;RUnlock&lt;/span&gt;()

……
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Put&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) {
  &lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;GetShard&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Lock&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Unlock&lt;/span&gt;()

……
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;GetShard&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;bool&lt;/span&gt;) (&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCacheShard&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;bool&lt;/span&gt;) {
&lt;span class=&quot;pl-s1&quot;&gt;hasher&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sha1&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;New&lt;/span&gt;()
&lt;span class=&quot;pl-s1&quot;&gt;hasher&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Write&lt;/span&gt;([]&lt;span class=&quot;pl-smi&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;))
&lt;span class=&quot;pl-s1&quot;&gt;shardKey&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;fmt&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Sprintf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;%x&quot;&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;hasher&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Sum&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;))[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;]

&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lock&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;RLock&lt;/span&gt;()
&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;shards&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;shardKey&lt;/span&gt;]
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lock&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;RUnlock&lt;/span&gt;()

&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;create&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}

&lt;span class=&quot;pl-c&quot;&gt;//only time we need to write lock&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lock&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Lock&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;lock&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Unlock&lt;/span&gt;()
&lt;span class=&quot;pl-c&quot;&gt;//check again in case the group was created in this short time&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;shards&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;shardKey&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}

&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCacheShard&lt;/span&gt;{
&lt;span class=&quot;pl-c1&quot;&gt;Keys&lt;/span&gt;: &lt;span class=&quot;pl-en&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;Element&lt;/span&gt;),
&lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;New&lt;/span&gt;(),
}
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;shards&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;shardKey&lt;/span&gt;] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上述的改造，利用哈希把原来的 LRUCache 分为了 256 个分片(2^8)。并且写锁锁住只发生在分片不存在的时候。一旦分片被创建了，之后都是读锁。这里依旧是小瓶颈，继续优化，消除掉这里的写锁。优化代码很简单，在创建的时候创建所有分片。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;New&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;shards&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCacheShard&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;256&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;256&lt;/span&gt;; &lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;++&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;shards&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;fmt&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Sprintf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;%02x&quot;&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;)] &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCacheShard&lt;/span&gt;{
&lt;span class=&quot;pl-c1&quot;&gt;Cap&lt;/span&gt;:  &lt;span class=&quot;pl-s1&quot;&gt;capacity&lt;/span&gt;,
&lt;span class=&quot;pl-c1&quot;&gt;Keys&lt;/span&gt;: &lt;span class=&quot;pl-en&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;Element&lt;/span&gt;),
&lt;span class=&quot;pl-c1&quot;&gt;List&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;New&lt;/span&gt;(),
}
}
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;{
&lt;span class=&quot;pl-c1&quot;&gt;shards&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;shards&lt;/span&gt;,
}
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;GetShard&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;RLock&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;RUnlock&lt;/span&gt;()

……
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Put&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) {
  &lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;GetShard&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Lock&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Unlock&lt;/span&gt;()

……
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;GetShard&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;) (&lt;span class=&quot;pl-s1&quot;&gt;shard&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;LRUCacheShard&lt;/span&gt;) {
  &lt;span class=&quot;pl-s1&quot;&gt;hasher&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sha1&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;New&lt;/span&gt;()
  &lt;span class=&quot;pl-s1&quot;&gt;hasher&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Write&lt;/span&gt;([]&lt;span class=&quot;pl-smi&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;key&lt;/span&gt;))
  &lt;span class=&quot;pl-s1&quot;&gt;shardKey&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt;  &lt;span class=&quot;pl-s1&quot;&gt;fmt&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Sprintf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;%x&quot;&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;hasher&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Sum&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;))[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;]
  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;shards&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;shardKey&lt;/span&gt;]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里，大的临界区已经被拆分成细颗粒度了。在细粒度的锁内部，还包含双链表结点的操作，对结点的操作涉及到锁竞争。成熟的缓存系统如 memcached，使用的是全局的 LRU 链表锁，而 Redis 是单线程的所以不需要考虑并发的问题。回到 LRU，每个 Get 操作需要读取 key 值对应的 value，需要读锁。与此同时，Get 操作也涉及到移动最近最常使用的结点，需要写锁。Set 操作只涉及写锁。需要注意的一点，Get 和 Set 先后执行顺序非常关键。例如，先 get 一个不存在的 key，返回 nil，再 set 这个 key。如果先 set 这个 key，再 get 这个key，返回的就是不是 nil，而是对应的 value。所以在保证锁安全(不发生死锁)的情况下，还需要保证每个操作时序的正确性。能同时满足这 2 个条件的非带缓冲的 channel 莫属。先来看看消费 channel 通道里面数据的处理逻辑：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;CLRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;doMove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;list.&lt;span class=&quot;pl-smi&quot;&gt;Element&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;bool&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-smi&quot;&gt;Pair&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;MoveToFront&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;MoveToFront&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;
}
&lt;span class=&quot;pl-s1&quot;&gt;newel&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;PushFront&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-smi&quot;&gt;Pair&lt;/span&gt;))
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;bucket&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-smi&quot;&gt;Pair&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;).&lt;span class=&quot;pl-en&quot;&gt;update&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-smi&quot;&gt;Pair&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;newel&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还值得一提的是，get 和 set 的写操作有 2 种类型，一种是 MoveToFront，另外一种是当结点不存在的时候，需要先创建一个新的结点，并移动到头部。这个操作即 PushFront。笔者这里在结点中加入了 cmd 标识，默认值是 MoveToFront。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/105e79950970ab0ba56a77457c037db7a6bea80a2e9295e624d6ff857e037a9b/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32362e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/105e79950970ab0ba56a77457c037db7a6bea80a2e9295e624d6ff857e037a9b/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32362e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_26.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前为止，下一步的优化思路确定使用带缓冲的 channel 了。用几个呢？答案是用 2 个。除去上面讨论的写入操作，还要管理 remove 操作。由于 LRU 逻辑的特殊性，它保证了移动结点和移除结点一定分开在双链表两端。也就是说在双链表两边同时操作，相互不影响。双链表的临界区范围可以进一步的缩小，可以缩小到结点级。最终方案就定下来了。用 2 个带缓冲的 channel，分别处理移动结点和删除结点，这两个 channel 可以在同一个协程中一起处理，互不影响。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;CLRUCache&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;worker&lt;/span&gt;() {
&lt;span class=&quot;pl-k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;close&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;control&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;select&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;movePairs&lt;/span&gt;:
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;goto&lt;/span&gt; clean
}
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;doMove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;) &lt;span class=&quot;pl-c1&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Len&lt;/span&gt;() &lt;span class=&quot;pl-c1&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;cap&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Back&lt;/span&gt;()
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;bucket&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-smi&quot;&gt;Pair&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;).&lt;span class=&quot;pl-en&quot;&gt;delete&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt;.(&lt;span class=&quot;pl-smi&quot;&gt;Pair&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt;)
}
&lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;deletePairs&lt;/span&gt;:
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;control&lt;/span&gt;:
&lt;span class=&quot;pl-k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;control&lt;/span&gt;.(&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt;) {
&lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;clear&lt;/span&gt;:
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;buckets&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;bucket&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;clear&lt;/span&gt;()
}
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;New&lt;/span&gt;()
&lt;span class=&quot;pl-s1&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt;{}{}
}
}
}
clean:
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;select&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;deletePairs&lt;/span&gt;:
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;el&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;default&lt;/span&gt;:
&lt;span class=&quot;pl-en&quot;&gt;close&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;deletePairs&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
}
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终完整的代码放在&lt;a href=&quot;https://github.com/halfrost/LeetCode-Go/blob/master/template/CLRUCache.go&quot;&gt;这里&lt;/a&gt;了。最后简单的跑一下 Benchmark 看看性能如何。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下性能测试部分是面试结束后，笔者测试的。面试时写完代码，并没有当场 Benchmark。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;BenchmarkGetAndPut1&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;benchmem&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;cpuprofile&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;cpuprofile&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;memprofile&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;memprofile&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;goos: &lt;span class=&quot;pl-s1&quot;&gt;darwin&lt;/span&gt;
goarch: &lt;span class=&quot;pl-s1&quot;&gt;amd64&lt;/span&gt;
pkg: &lt;span class=&quot;pl-s1&quot;&gt;github&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;halfrost&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;LeetCode&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;Go&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;template&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;BenchmarkGetAndPut1&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;            &lt;span class=&quot;pl-c1&quot;&gt;368578&lt;/span&gt;              &lt;span class=&quot;pl-c1&quot;&gt;2474&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;op&lt;/span&gt;             &lt;span class=&quot;pl-c1&quot;&gt;530&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;op&lt;/span&gt;         &lt;span class=&quot;pl-c1&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;allocs&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;op&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;PASS&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;ok&lt;/span&gt;      &lt;span class=&quot;pl-s1&quot;&gt;github&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;halfrost&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;LeetCode&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;Go&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;template&lt;/span&gt;        &lt;span class=&quot;pl-c1&quot;&gt;1.022&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;s&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BenchmarkGetAndPut2 只是简单的全局加锁，会有死锁的情况。可以看到方案一的性能还行，368578 次循环平均出来的结果，平均一次 Get/Set 需要 2474 ns，那么 TPS 大约是 300K/s，可以满足一般高并发的需求。&lt;/p&gt;
&lt;p&gt;最后看看这个版本下的 CPU 消耗情况，符合预期：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/5ecd831a4e396f0a97ea06450f122fe6341c770b2d081b3dc968fdfed8178b22/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31315f302e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5ecd831a4e396f0a97ea06450f122fe6341c770b2d081b3dc968fdfed8178b22/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31315f302e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_11_0.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内存分配情况，也符合预期：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/c0e9704489c36624872081a3fec97c2647a9a760d2e423204d9cd14ff551ca4b/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31325f302e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c0e9704489c36624872081a3fec97c2647a9a760d2e423204d9cd14ff551ca4b/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31325f302e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_12_0.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至此，你已经是王者了。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-荣耀王者&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#荣耀王者&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;荣耀王者&lt;/h2&gt;
&lt;p&gt;这里是附加题部分。面试官问到这里就和 LRU/LFU 直接关系不大了，更多的考察的是如何设计一个高并发的 Cache。笔者之所以在这篇文章最后提一笔，是想给读者扩展思维。面试官会针对你给出的高并发版的 LRU 继续问，“你觉得你写的这个版本缺点在哪里？和真正的 Cache 比，还有哪些欠缺？”&lt;/p&gt;
&lt;p&gt;在上一节“最强王者”中，粗略的实现了一个高并发的 LRU。但是这个方案还不是最完美的。当高并发高到一个临界值的时候，即 Get 请求的速度达到 Go 内存回收速度的几百倍，几万倍的时候。bucket 分片被清空，试图访问该分片中的 key 的 goroutine 开始分配内存，而先前的内存仍未完全释放，从而导致内存使用量激增和 OOM 崩溃。所以这种方法的性能不能随内核数量很好地扩展。&lt;/p&gt;
&lt;p&gt;另外这种粗略的方式是以缓存数目作为 Cap 的，没有考虑每个 value 的大小。以缓存数目作为基准，是没法限制住内存大小的。如果高负载的业务，设置大的 Cap，极端的讲，每个 value 都非常大，几十个 MB，整体内存消耗可能上百 GB。如果是低负载的业务，设置很小的 Cap，极端情况，每个 value 特别小。总内存大小可能在 1KB。这样看，内存上限和下限浮动太大了，无法折中限制。&lt;/p&gt;
&lt;p&gt;欠缺的分为 2 部分，一部分是功能性，一部分是性能。功能性方面欠缺 TTL，持久化。TTL 是过期时间，到时间需要删除 key。持久化是将缓存中的数据保存至文件中，或者启动的时候从文件中读取。&lt;/p&gt;
&lt;p&gt;性能方面欠缺的是高效的 hash 算法，高命中率，内存限制，可伸缩性。&lt;/p&gt;
&lt;p&gt;高效的 hash 算法指的是类似 AES Hash，针对 CPU 是否支持 AES 指令集进行了判断，当 CPU 支持 AES 指令集的时候，它会选用 AES Hash 算法。一些高效的 hash 算法用汇编语言实现的。&lt;/p&gt;
&lt;p&gt;高命中率方面，可以参考 &lt;a href=&quot;https://dgraph.io/blog/refs/bp_wrapper.pdf&quot; rel=&quot;nofollow&quot;&gt;BP-Wrapper: A System Framework Making Any
Replacement Algorithms (Almost) Lock Contention Free&lt;/a&gt; 这篇论文，在这篇论文里面提出了 2 种方式：prefetching 和 batching。简单说一下 batching 的方式。在等待临界区之前，先填满 ring buffer。如该论文所述，借用 ring buffer 这种方式，几乎没有开销，从而大大降低了竞争。实现 ring buffer 可以考虑使用 sync.Pool 而不是其他的数据结构（切片，带区互斥锁等），原因是性能优势主要是由于线程本地存储的内部使用，而其他的数据结构没有这相关的 API。&lt;/p&gt;
&lt;p&gt;内存限制。无限大的缓存实际上是不可能的。高速缓存必须有大小限制。如何制定一套高效的淘汰的策略就变的很关键。LRU 这个淘汰策略好么？针对不同的使用场景，LRU 并不是最好的，有些场景下 LFU 更加适合。这里有一篇论文 &lt;a href=&quot;https://dgraph.io/blog/refs/TinyLFU%20-%20A%20Highly%20Efficient%20Cache%20Admission%20Policy.pdf&quot; rel=&quot;nofollow&quot;&gt;TinyLFU: A Highly Efficient Cache Admission Policy&lt;/a&gt;，这篇论文中讨论了一种高效缓存准入策略。TinyLFU 是一种与淘汰无关的准入策略，目的是在以很少的内存开销来提高命中率。主要思想是仅在新的 key 的估计值高于正要被逐出的 key 的估计值时才允许进入 Cache。当缓存达到容量时，每个新的 key 都应替换缓存中存在的一个或多个密钥。并且，传入 key 的估值应该比被淘汰出去的 key 估值高。否则新的 key 禁止进入缓存中。这样做也为了保证高命中率。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/aea2a216dd890be7ed435800b15a8270babd0272d9cc3b0d6360d89772924ca0/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32355f302e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/aea2a216dd890be7ed435800b15a8270babd0272d9cc3b0d6360d89772924ca0/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32355f302e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_25_0.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在将新 key 放入 TinyLFU 中之前，还可以使用 bloom 过滤器首先检查该密钥是否之前已被查看过。仅当 key 在布隆过滤器中已经存在时，才将其插入 TinyLFU。这是为了避免长时间不被看到的长尾键污染 TinyLFU。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/704b61dad0c72d3c3a74177c18bbcc4a5e23d7b72aa9e4e18d1f5331b90bcf41/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32332e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/704b61dad0c72d3c3a74177c18bbcc4a5e23d7b72aa9e4e18d1f5331b90bcf41/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32332e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_23.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于到底选择 LRU 还是 LFU 还是 LRU + LFU ，这个话题比较大，展开讨论又可以写好几篇新文章了。感兴趣的读者可以看看这篇论文，&lt;a href=&quot;https://dgraph.io/blog/refs/Adaptive%20Software%20Cache%20Management.pdf&quot; rel=&quot;nofollow&quot;&gt;Adaptive Software Cache Management&lt;/a&gt; ，从标题上看，自适应的软件缓存管理，就能看出它在探讨了这个问题。论文的基本思想是在主缓存段之前放置一个 LRU “窗口”，并使用爬山技术自适应地调整窗口大小以最大化命中率。&lt;a href=&quot;https://github.com/ben-manes/caffeine&quot;&gt;A high performance caching library for Java 8 — Caffeine&lt;/a&gt; 已经取得了很好的效果。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/40db8628871a8e147705bd477795890abaa604983e2b5c245a3df8ebba0eceb4/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32322e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/40db8628871a8e147705bd477795890abaa604983e2b5c245a3df8ebba0eceb4/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32322e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_22.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可伸缩性方面，选择合适的缓存大小，可以避免 &lt;a href=&quot;https://dzone.com/articles/false-sharing&quot; rel=&quot;nofollow&quot;&gt;False Sharing&lt;/a&gt;，在多核系统中，其中不同的原子计数器（每个8字节）位于同一高速缓存行（通常为64字节）中。对这些计数器之一进行的任何更新都会导致其他计数器被标记为无效。这将强制为拥有该高速缓存的所有其他核心重新加载高速缓存，从而在高速缓存行上创建写争用。为了实现可伸缩性，应该确保每个原子计数器完全占用完整的缓存行。因此，每个内核都在不同的缓存行上工作。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/b05803e27a4c10b4f7691ffb60d173215423941c87058ad13875efb9a5380348/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32342e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/b05803e27a4c10b4f7691ffb60d173215423941c87058ad13875efb9a5380348/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32342e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_24.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后看看 Go 实现的几个开源 Cache 库。关于这些 Cache 的源码分析，本篇文章就不展开了。(有时间可能会单独再开一篇文章详解)。感兴趣的读者可以自己查阅源码。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/allegro/bigcache&quot;&gt;bigcache&lt;/a&gt;，BigCache 根据 key 的哈希将数据分为 shards。每个分片都包含一个映射和一个 ring buffer。每当设置新元素时，它都会将该元素追加到相应分片的 ring buffer 中，并且缓冲区中的偏移量将存储在 map 中。如果同一元素被 Set 多次，则缓冲区中的先前条目将标记为无效。如果缓冲区太小，则将其扩展直到达到最大容量。每个 map 中的 key 都是一个 uint32 hash，其值是一个 uint32 指针，指向该值与元数据信息一起存储的缓冲区中的偏移量。如果存在哈希冲突，则 BigCache 会忽略前一个键并将当前键存储到映射中。预先分配较少，较大的缓冲区并使用 map[uint32]uint32 是避免承担 GC 扫描成本的好方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/coocood/freecache&quot;&gt;freecache&lt;/a&gt;，FreeCache 通过减少指针数量避免了 GC 开销。 无论其中存储了多少条目，都只有 512 个指针。通过 key 的哈希值将数据集分割为 256 个段。将新 key 添加到高速缓存时，将使用 key 哈希值的低八位来标识段 ID。每个段只有两个指针，一个是存储 key 和 value 的 ring buffer，另一个是用于查找条目的索引 slice。数据附加到 ring buffer 中，偏移量存储到排序 slice 中。如果 ring buffer 没有足够的空间，则使用修改后的 LRU 策略从 ring buffer 的开头开始，在该段中淘汰 key。如果条目的最后访问时间小于段的平均访问时间，则从 ring buffer 中删除该条目。要在 Get 的高速缓存中查找条目，请在相应插槽 slot 中的排序数组中执行二进制搜索。此外还有一个加速的优化，使用 key 的哈希的 LSB 9-16 选择一个插槽 slot。将数据划分为多个插槽 slot 有助于减少在缓存中查找键时的搜索空间。每个段都有自己的锁，因此它支持高并发访问。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/golang/groupcache&quot;&gt;groupCache&lt;/a&gt;，groupcache 是​​一个分布式的缓存和缓存填充库，在许多情况下可以替代 memcached。在许多情况下甚至可以用来替代内存缓存节点池。groupcache 实现原理和本文在上一章节中实现的方式是一摸一样的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/VictoriaMetrics/fastcache&quot;&gt;fastcache&lt;/a&gt;，fastcache 并没有缓存过期的概念。仅在高速缓存大小溢出时才从高速缓存中淘汰 key 值。key 的截止期限可以存储在该值内，以实现缓存过期。fastcache 缓存由许多 buckets 组成，每个 buckets 都有自己的锁。这有助于扩展多核 CPU 的性能，因为多个 CPU 可以同时访问不同的 buckets。每个 buckets 均由一个 hash（key）-&amp;gt;（key，value）的映射和 64KB 大小的字节 slice（块）组成，这些字节 slice 存储已编码的（key，value）。每个 buckets 仅包含 chunksCount 个指针。例如，64GB 缓存将包含大约 1M 指针，而大小相似的 map[string][]byte 将包含 1B指针，用于小的 key 和 value。这样做可以节约巨大的 GC 开销。与每个 bucket 中的单个 chunk 相比，64KB 大小的 chunk 块减少了内存碎片和总内存使用量。如果可能，将大 chunk 块分配在堆外。这样做可以减少了总内存使用量，因为 GC 无需要 GOGC 调整即可以更频繁地收集未使用的内存。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dgraph-io/ristretto&quot;&gt;ristretto&lt;/a&gt;，ristretto 拥有非常优秀的缓存命中率。淘汰策略采用简单的 LFU，性能与 LRU 相当，并且在搜索和数据库跟踪上具有更好的性能。存入策略采用 TinyLFU 策略，它几乎没有内存开销（每个计数器 12 位）。淘汰策略根据代价值判断，任何代价值大的 key 都可以淘汰多个代价值较小的 key（代价值可以是自定义的衡量标准）。&lt;/p&gt;
&lt;p&gt;以下是这几个库的性能曲线图：&lt;/p&gt;
&lt;p&gt;在一小时内对 CODASYL 数据库的引用：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/151e787801a41414167b70144115dce7901df2e40f0cb200a64d4b7c7947dd45/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31352e737667&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/151e787801a41414167b70144115dce7901df2e40f0cb200a64d4b7c7947dd45/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31352e737667&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_15.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在商业站点上运行的数据库服务器，该服务器在商业数据库之上运行 ERP 应用程序：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/29d9c85774962b3c969798488f3053ec2f18b0e86b6c927dfa6b0d54c7890bb4/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31362e737667&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/29d9c85774962b3c969798488f3053ec2f18b0e86b6c927dfa6b0d54c7890bb4/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31362e737667&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_16.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;循环访问模式：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/392a158e88b52230ef80269bfbeb2a3116324a87c5ed15c2174e1b0a3b47b29a/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31372e737667&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/392a158e88b52230ef80269bfbeb2a3116324a87c5ed15c2174e1b0a3b47b29a/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31372e737667&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_17.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大型商业搜索引擎响应各种 Web 搜索请求而启动的磁盘读取访问：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/2b7195d90cbfd7689ccd439aaf18f5eee7e1b2d5657c3ecba1927dc247ed95ce/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31382e737667&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2b7195d90cbfd7689ccd439aaf18f5eee7e1b2d5657c3ecba1927dc247ed95ce/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31382e737667&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_18.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;吞吐量：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/2a86c20b4a4f412877642b6090b7c27b76dce76020b3ab00199d3b19e13a752d/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31392e737667&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2a86c20b4a4f412877642b6090b7c27b76dce76020b3ab00199d3b19e13a752d/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f31392e737667&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_19.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/aef7013bbfc29f945ce7a6cc6ca5efabdb46916c5f3cb1c61820facca0042dc9/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32302e737667&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/aef7013bbfc29f945ce7a6cc6ca5efabdb46916c5f3cb1c61820facca0042dc9/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32302e737667&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_20.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/2f95703e7578ebb9759c145186a3604de428a00492682c0589272e7e341630b4/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32312e737667&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2f95703e7578ebb9759c145186a3604de428a00492682c0589272e7e341630b4/68747470733a2f2f696d672e68616c66726f73742e636f6d2f426c6f672f41727469636c65496d6167652f3134365f32312e737667&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.halfrost.com/Blog/ArticleImage/146_21.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-推荐阅读&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#推荐阅读&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;推荐阅读&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dgraph.io/blog/refs/bp_wrapper.pdf&quot; rel=&quot;nofollow&quot;&gt;BP-Wrapper: A System Framework Making Any
Replacement Algorithms (Almost) Lock Contention Free&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://dgraph.io/blog/refs/Adaptive%20Software%20Cache%20Management.pdf&quot; rel=&quot;nofollow&quot;&gt;Adaptive Software Cache Management&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://dgraph.io/blog/refs/TinyLFU%20-%20A%20Highly%20Efficient%20Cache%20Admission%20Policy.pdf&quot; rel=&quot;nofollow&quot;&gt;TinyLFU: A Highly Efficient Cache Admission Policy&lt;/a&gt;
&lt;a href=&quot;http://web.cse.ohio-state.edu/hpcs/WWW/HTML/publications/papers/TR-02-6.pdf&quot; rel=&quot;nofollow&quot;&gt;LIRS: An Efficient Low Inter-reference Recency Set Replacement Policy to Improve Buffer Cache Performance&lt;/a&gt;
&lt;a href=&quot;https://www.usenix.org/event/fast03/tech/full_papers/megiddo/megiddo.pdf&quot; rel=&quot;nofollow&quot;&gt;ARC: A Self-Tuning, Low Overhead Replacement Cache&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c06242eb61d43d3593cfa3561d2599ab</guid>
<title>实战：Express 模拟 CSRF 攻击</title>
<link>https://toutiao.io/k/sgmfmzm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 每日前端夜话 第483篇&lt;br/&gt;// 正文共：2400 字&lt;br/&gt;// 预计阅读时间：10 分钟&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ttJazfuZaRgN8tjWDn3KB4wIGsia3Ef9VcJ774P6AMe15Ry7iboYyjXRxv7YcFrX8D2HA2L74g1NXulFZh42vlKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5973333333333334&quot; data-w=&quot;750&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;CSRF攻击&lt;/strong&gt; 是前端领域常见的安全问题，概念方面不再赘述，可以参考维基百科。对于这些概念，包括名词定义、攻击方式、解决方案等估计大家都看过不少，但留下印象总是很模糊，要动手操作一番才能加深印象并能真正理解，所以我决定动手实现一个 CSRF 的攻击场景，并通过演示的方式讲解 CSRF 的防范手段。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;CSRF 攻击流程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CSRF 模拟攻击&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CSRF 防范方法&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;CSRF 攻击流程&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设用户先通过 bank.com/auth 访问银行网站A的授权接口，通过认证后拿到A返回的 cookie: userId=ce032b305a9bc1ce0b0dd2a，接着携带 cookie 访问 bank.com/transfer?number=15000&amp;amp;to=Bob 银行A的转账接口转给Bob 15000元，然后A返回 success 表示转账成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;钓鱼网站B(hack.com)通过邮件或者广告等方式引诱小明访问，并返回给小明恶意的 HTML 攻击代码，HTML 中会包含发往银行A的敏感操作：bank.com/transfer?number=150000&amp;amp;to=Jack ，此时浏览器会携带A的 cookie 发送请求，A拿到请求后，只通过 cookie 判断是个合法操作，于是在小明不知情的情况下，账户里150000元被转给了Jack，即恶意攻击者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就完成了一次基本的 CSRF 攻击。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CSRF 攻击流程图如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXXzVReApMvdSwaXxyzNhhr8ibBE3ngAuaibL0Pd0XtqXWIGlAh4lFibhD0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6138888888888889&quot; data-w=&quot;1080&quot;/&gt;&lt;span/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果现在看不懂没关系，可以看完演示再回头看此图就会恍然大悟了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;CSRF 模拟攻击&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先通过 express 搭建后端，以模拟 CSRF 攻击。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动银行 A 的服务器，端口 3001，包含 3 个接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;app.use(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, indexRouter);&lt;br/&gt;app.use(&lt;span&gt;&#x27;/auth&#x27;&lt;/span&gt;, authRouter);&lt;br/&gt;app.use(&lt;span&gt;&#x27;/transfer&#x27;&lt;/span&gt;, transferRouter);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;authRouter:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;router.get(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt;(req, res, next) {&lt;br/&gt;  res.cookie(&lt;span&gt;&#x27;userId&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;ce032b305a9bc1ce0b0dd2a&#x27;&lt;/span&gt;, { expires: new Date(Date.now() + 900000) })&lt;br/&gt;  res.end(&lt;span&gt;&#x27;ok&#x27;&lt;/span&gt;)&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;transferRouter：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;router.get(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt;(req, res, next) {&lt;br/&gt;  const { query } = req;&lt;br/&gt;  const { userId } = req.cookies;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(userId){&lt;br/&gt;    res.send({&lt;br/&gt;      status: &lt;span&gt;&#x27;transfer success&#x27;&lt;/span&gt;,&lt;br/&gt;      transfer: query.number&lt;br/&gt;    })&lt;br/&gt;  }&lt;span&gt;else&lt;/span&gt;{&lt;br/&gt;    res.send({&lt;br/&gt;      status: &lt;span&gt;&#x27;error&#x27;&lt;/span&gt;,&lt;br/&gt;      transfer: &lt;span&gt;&#x27;&#x27;&lt;/span&gt;&lt;br/&gt;    })&lt;br/&gt;  }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 ejs 提供银行转账页面：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br/&gt;&amp;lt;html lang=&lt;span&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;head&amp;gt;&lt;br/&gt;  &amp;lt;meta charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;meta name=&lt;span&gt;&quot;viewport&quot;&lt;/span&gt; content=&lt;span&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;title&amp;gt;&lt;br/&gt;    &amp;lt;%= title %&amp;gt;&lt;br/&gt;  &amp;lt;/title&amp;gt;&lt;br/&gt;&amp;lt;/head&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;  &amp;lt;h2&amp;gt;&lt;br/&gt;    转账&lt;br/&gt;  &amp;lt;/h2&amp;gt;&lt;br/&gt;  &amp;lt;script&amp;gt;&lt;br/&gt;    const h2 = document.querySelector(&lt;span&gt;&#x27;h2&#x27;&lt;/span&gt;);&lt;br/&gt;    h2.addEventListener(&lt;span&gt;&#x27;click&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;      fetch(&lt;span&gt;&#x27;/transfer?number=15000&amp;amp;to=Bob&#x27;&lt;/span&gt;).&lt;span&gt;then&lt;/span&gt;(res =&amp;gt; {&lt;br/&gt;        console.log(res.json());&lt;br/&gt;      })&lt;br/&gt;    })&lt;br/&gt;  &amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;/html&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设钓鱼网站 B 提供的恶意代码为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br/&gt;&amp;lt;html lang=&lt;span&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;head&amp;gt;&lt;br/&gt;  &amp;lt;meta charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;meta name=&lt;span&gt;&quot;viewport&quot;&lt;/span&gt; content=&lt;span&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;&lt;br/&gt;&amp;lt;/head&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;div class=&lt;span&gt;&quot;wrapper&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;iframe src=&lt;span&gt;&quot;http://bank.com/transfer?number=150000&amp;amp;to=Jack&quot;&lt;/span&gt; frameborder=&lt;span&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;br/&gt;&amp;lt;/div&amp;gt;&lt;br/&gt;  &amp;lt;script&amp;gt;&lt;br/&gt;&lt;br/&gt;  &amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&amp;lt;/html&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并将其启动在3002端口，再通过 Whistle 进行域名映射，因为两者都是 Localhost 域名，而 Cookie 不区分端口，所以需要区分域名。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXXKmdIgVPt64giaMWW2XLmbAicQkzJkN8mVbPQ8eJhCyqZGO830q8nPfXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.23478260869565218&quot; data-w=&quot;230&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先打开 Firefox 浏览器(暂时不用 Chrome )，访问银行 A 的 /auth获得授权：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXXdYfPwib3H2qyUia1ANagJicPu2L3jice545e2RCf8qqv0pOaVfO3spW6dA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.9563543003851092&quot; data-w=&quot;779&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后通过点击&lt;strong&gt;转账&lt;/strong&gt;按钮发送请求 http://bank.com/transfer?number=15000&amp;amp;to=Bob 进行转账操作：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXXRgbT4ba5WsicK8EGBWejv5KgrwF2Xyhua6ClkrVWagQPrNvtC5nSpNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.9563543003851092&quot; data-w=&quot;779&quot;/&gt;&lt;span/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户收到诱惑进入了 hack 网站，hack 网站首页有一个发往银行A的请求 http://bank.com/transfer?number=150000&amp;amp;to=Jack ,这个请求可以放在 iframe、img、script 等的 src 里面。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXXIzibLWia7VfokpsIMYDZL2WqC6JCtJvpfjwfteegiavSqfEtAicBmrTR3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.9029126213592233&quot; data-w=&quot;824&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到请求携带 cookie，并成功转账，这样一次 CSRF 攻击就完成了。当然这是一次简单的 GET 请求的攻击，POST 请求攻击可以通过自动提交表单实现，比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;form action=&lt;span&gt;&quot;bank.com/transfer&quot;&lt;/span&gt; method=POST&amp;gt;&lt;br/&gt;    &amp;lt;input &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;hidden&quot;&lt;/span&gt; name=&lt;span&gt;&quot;number&quot;&lt;/span&gt; value=&lt;span&gt;&quot;150000&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;input &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;hidden&quot;&lt;/span&gt; name=&lt;span&gt;&quot;to&quot;&lt;/span&gt; value=&lt;span&gt;&quot;Jack&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;&amp;lt;/form&amp;gt;&lt;br/&gt;&amp;lt;script&amp;gt; document.forms[0].submit(); &amp;lt;/script&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面可以看出，CSRF 攻击主要特点是：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;发生在第三方域名(hack.com)。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;攻击者只能使用 cookie 而拿不到具体的 cookie。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对以上特点，我们就能进行对应的防范了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;CSRF 防范方法&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CSRF 防范方法通常有以下几种：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;阻止不同域的访问&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;同源检测。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Samesite Cookie。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;提交时要求附加本域才能获取的信息。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;添加 CSRF Token。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;双重 Cookie验证。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;同源检测 - 通过 Origin 和 Referer 确定来源域名&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对第一个特点进行域名检查，HTTP 请求时会携带这两个 Header，用于标记来源域名，如果请求来源不是本域，直接进行拦截。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXXlJibxqeXpu6fJHdQRZ8FW5utpnFZTCHx9H8dTOIANadJvSjia8vmozDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.8895631067961165&quot; data-w=&quot;824&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是这两个 Header 也是可以不携带的，所以我们的策略是校验如果两个 Header 不存在或者存在但不是本域则阻拦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改 transferRouter 代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const csrfGuard = require(&lt;span&gt;&#x27;../middleware/csrfGuard&#x27;&lt;/span&gt;)&lt;br/&gt;/* GET users listing. */&lt;br/&gt;router.get(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, csrfGuard, &lt;span&gt;function&lt;/span&gt;(req, res, next) {&lt;br/&gt;  const { query } = req;&lt;br/&gt;  const { userId } = req.cookies;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(userId){&lt;br/&gt;    res.send({&lt;br/&gt;      status: &lt;span&gt;&#x27;transfer success&#x27;&lt;/span&gt;,&lt;br/&gt;      transfer: query.number&lt;br/&gt;    })&lt;br/&gt;  }&lt;span&gt;else&lt;/span&gt;{&lt;br/&gt;    next()&lt;br/&gt;  }&lt;br/&gt;});&lt;br/&gt;router.get(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt;(req, res, next) {&lt;br/&gt;  res.send({&lt;br/&gt;    status: &lt;span&gt;&#x27;error&#x27;&lt;/span&gt;,&lt;br/&gt;    transfer: &lt;span&gt;&#x27;&#x27;&lt;/span&gt;&lt;br/&gt;  })&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;csrfGuard.js:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;module.exports = &lt;span&gt;function&lt;/span&gt;(req, res, next){&lt;br/&gt;  const [Referer, Origin] = [req.get(&lt;span&gt;&#x27;Referer&#x27;&lt;/span&gt;), req.get(&lt;span&gt;&#x27;Origin&#x27;&lt;/span&gt;)]&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(Referer &amp;amp;&amp;amp; Referer.indexOf(&lt;span&gt;&#x27;bank.com&#x27;&lt;/span&gt;) &amp;gt; 0){&lt;br/&gt;    next();&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(Origin &amp;amp;&amp;amp; Origin.indexOf(&lt;span&gt;&#x27;bank.com&#x27;&lt;/span&gt;) &amp;gt; 0){&lt;br/&gt;    next();&lt;br/&gt;  }&lt;span&gt;else&lt;/span&gt;{&lt;br/&gt;    next(&lt;span&gt;&#x27;route&#x27;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;验证：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXXiaO77jicqhauYicMhXJPficiac0JL1f38H4jkjC4TPcPktDFSB8vaYRVodQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.9029126213592233&quot; data-w=&quot;824&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;Samesite Cookie&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在敏感 cookie 上携带属性 Samesite：Strict 或 Lax，可以避免在第三方不同域网站上携带 cookie，具体原因可以参考阮一峰老师的Cookie 的 SameSite 属性。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// authRouter.js&lt;br/&gt;router.get(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt;(req, res, next) {&lt;br/&gt;  res&lt;br/&gt;  .cookie(&lt;span&gt;&#x27;userId&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;ce032b305a9bc1ce0b0dd2a&#x27;&lt;/span&gt;, { expires: new Date(Date.now() + 900000), sameSite: &lt;span&gt;&#x27;lax&#x27;&lt;/span&gt; })&lt;br/&gt;  res.end(&lt;span&gt;&#x27;ok&#x27;&lt;/span&gt;)&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看 bank.com cookie:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXX4yv4IWQUD5vYgyw5ia5o36aQpyKsqyiayhktWogNhkBkXEkW5lPwiamdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7662203913491246&quot; data-w=&quot;971&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再次访问 hack.com，发现转账链接并未携带 cookie：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXXbdQrkiaEBNTkVqaAVRdqAr8FRzmKIlOfyqwIRHlSprwFDlHrkwaaJFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7662203913491246&quot; data-w=&quot;971&quot;/&gt;&lt;span/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就达到了防范的目的，兼容性 目前来看还可以，虽然没有达到完美覆盖，但大部分浏览器也都支持了&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;PS: 前面之所以没有使用 Chrome 浏览器做实验，是因为从 Chrome 80 版本起，Samesite 被默认设置为了 Lax，而 Firefox 仍然为 None。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;添加 CSRF Token&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先服务器生成一个动态的 token，传给用户，用户再次提交或者请求敏感操作时，携带此 token，服务端校验通过才返回正确结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;改写 indexRouter，使其返回 token 给页面：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;var express = require(&lt;span&gt;&quot;express&quot;&lt;/span&gt;);&lt;br/&gt;var router = express.Router();&lt;br/&gt;const jwt = require(&lt;span&gt;&quot;jsonwebtoken&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;router.get(&lt;span&gt;&quot;/&quot;&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt; (req, res, next) {&lt;br/&gt;    res.render(&lt;span&gt;&quot;index&quot;&lt;/span&gt;, { title: &lt;span&gt;&quot;Express&quot;&lt;/span&gt;, token: jwt.sign({&lt;br/&gt;      username: &lt;span&gt;&#x27;ming&#x27;&lt;/span&gt;&lt;br/&gt;    }, &lt;span&gt;&#x27;key&#x27;&lt;/span&gt;, {&lt;br/&gt;      expiresIn: &lt;span&gt;&#x27;1d&#x27;&lt;/span&gt;&lt;br/&gt;    }) });&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;module.exports = router;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前端页面：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// index.ejs&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;  &amp;lt;h2&amp;gt;&lt;br/&gt;    转账&lt;br/&gt;  &amp;lt;/h2&amp;gt;&lt;br/&gt;  &amp;lt;span id=&lt;span&gt;&#x27;token&#x27;&lt;/span&gt; data-token=&amp;lt;%= token %&amp;gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;br/&gt;  &amp;lt;script&amp;gt;&lt;br/&gt;    const h2 = document.querySelector(&lt;span&gt;&#x27;h2&#x27;&lt;/span&gt;);&lt;br/&gt;    const tokenElem = document.querySelector(&lt;span&gt;&#x27;#token&#x27;&lt;/span&gt;);&lt;br/&gt;    const token = tokenElem.dataset.token;&lt;br/&gt;    h2.addEventListener(&lt;span&gt;&#x27;click&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;      fetch(&lt;span&gt;&#x27;/transfer?number=15000&amp;amp;to=Bob&amp;amp;token=&#x27;&lt;/span&gt; + token).&lt;span&gt;then&lt;/span&gt;(res=&amp;gt;{&lt;br/&gt;        console.log(res.json());&lt;br/&gt;      })&lt;br/&gt;    })&lt;br/&gt;  &amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将 transferRouter 的验证中间件改成 token 验证：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const tokenVerify = require(&lt;span&gt;&#x27;../middleware/tokenVerify&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;router.get(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, tokenVerify, &lt;span&gt;function&lt;/span&gt;(req, res, next) {&lt;br/&gt;  const { query } = req;&lt;br/&gt;  const { userId } = req.cookies;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(userId){&lt;br/&gt;    res.send({&lt;br/&gt;      status: &lt;span&gt;&#x27;transfer success&#x27;&lt;/span&gt;,&lt;br/&gt;      transfer: query.number&lt;br/&gt;    })&lt;br/&gt;  }&lt;span&gt;else&lt;/span&gt;{&lt;br/&gt;    next()&lt;br/&gt;  }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JWT 验证：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const jwt = require(&lt;span&gt;&quot;jsonwebtoken&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;module.exports = &lt;span&gt;function&lt;/span&gt;(req, res, next){&lt;br/&gt;  const { token } = req.query;&lt;br/&gt;  jwt.verify(token,&lt;span&gt;&#x27;key&#x27;&lt;/span&gt;, (err, decode)=&amp;gt; {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(err){&lt;br/&gt;      next(&lt;span&gt;&#x27;route&#x27;&lt;/span&gt;)&lt;br/&gt;    }&lt;span&gt;else&lt;/span&gt;{&lt;br/&gt;      console.log(decode);&lt;br/&gt;      next()&lt;br/&gt;    }&lt;br/&gt;  })&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;携带 token 正常访问成功：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXXRehOj3AtACJHicY7UWGmiaqqQTqOGj7fWHI2kQuIug68SDEtycy9Q2gQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.8465909090909091&quot; data-w=&quot;880&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;钓鱼网站拿不到 token 所以攻击失败：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXXiaO77jicqhauYicMhXJPficiac0JL1f38H4jkjC4TPcPktDFSB8vaYRVodQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.9029126213592233&quot; data-w=&quot;824&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;以上为加深理解而写的代码，而在生产环境中，node 可以使用 csurf中间件来防御 csrf 攻击&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;双重Cookie验证&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置一个专用 cookie，因为攻击者拿不到 cookie，所以将 cookie 种到域名的同时，访问敏感操作也需要携带，攻击者带不上 cookie，就达到了防范的目的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// authRouter.js&lt;br/&gt;const randomString = require(&lt;span&gt;&#x27;random-string&#x27;&lt;/span&gt;);&lt;br/&gt;/* GET users listing. */&lt;br/&gt;router.get(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt;(req, res, next) {&lt;br/&gt;  res&lt;br/&gt;  .cookie(&lt;span&gt;&#x27;userId&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;ce032b305a9bc1ce0b0dd2a&#x27;&lt;/span&gt;, { expires: new Date(Date.now() + 900000) })&lt;br/&gt;  .cookie(&lt;span&gt;&#x27;csrfcookie&#x27;&lt;/span&gt;, randomString(), { expires: new Date(Date.now() + 900000) })&lt;br/&gt;  res.end(&lt;span&gt;&#x27;ok&#x27;&lt;/span&gt;)&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;bank.com 银行转账页面：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  &amp;lt;script&amp;gt;&lt;br/&gt;    const h2 = document.querySelector(&lt;span&gt;&#x27;h2&#x27;&lt;/span&gt;);&lt;br/&gt;    const csrfcookie = getCookie(&lt;span&gt;&#x27;csrfcookie&#x27;&lt;/span&gt;)&lt;br/&gt;    h2.addEventListener(&lt;span&gt;&#x27;click&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;      fetch(&lt;span&gt;&#x27;/transfer?number=15000&amp;amp;to=Bob&amp;amp;csrfcookie=&#x27;&lt;/span&gt; + csrfcookie).&lt;span&gt;then&lt;/span&gt;(res =&amp;gt; {&lt;br/&gt;        console.log(res.json());&lt;br/&gt;      })&lt;br/&gt;    })&lt;br/&gt;  &amp;lt;/script&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;验证中间件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// doubleCookie.js &lt;br/&gt;module.exports = &lt;span&gt;function&lt;/span&gt;(req, res, next){&lt;br/&gt;  const queryCsrfCookie = req.query.csrfcookie&lt;br/&gt;  const realCsrfCookie = req.cookies.csrfcookie;&lt;br/&gt;  console.log(queryCsrfCookie, realCsrfCookie);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(queryCsrfCookie === realCsrfCookie){&lt;br/&gt;    next()&lt;br/&gt;  }&lt;span&gt;else&lt;/span&gt;{&lt;br/&gt;    next(&lt;span&gt;&#x27;route&#x27;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;银行 bank.com:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KMMEiaf2ribSfRDkm3qEvzXX7CJMrymIdsxwc3JnKOygSru2RektqeIia3WVRhMV9p5dmYt3ZOulnhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7662203913491246&quot; data-w=&quot;971&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 hack.com 拿不到 csrfcookie 所以验证不通过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方法也是很有效的，比如请求库 axios 就是用的这种方式。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里大家是不是已经明白了 CSRF 攻击的原因所在，并可以提出针对性的解决方案了呢，防范关键其实就是防止其他人冒充你去做只有你能做的敏感操作，与此同时希望大家对于这类抽象性的问题可以自己动手敲一下，模拟一遍，用造重复轮子的方法去理解，动手比动眼管用的多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上过程和代码仅仅为帮助学习并做演示使用，如果用于生产力还是需要更成熟的解决方案。&lt;/p&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong/&gt;&lt;/p&gt;&lt;center data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt; 强力推荐前端面试刷题神器&lt;/strong&gt;&lt;span/&gt;&lt;/center&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/ttJazfuZaRhicyXjTlZhd1BYzPSicArYzVjZeXNfvbSXIEBKCC5IUq8iacDUbwtooY4Jqz2G6MrRVoqRkXoocO01w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-ratio=&quot;0.5555555555555556&quot; data-w=&quot;639&quot;/&gt;&lt;/figure&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3NzIzMDY0NA==&amp;amp;mid=2247489495&amp;amp;idx=2&amp;amp;sn=c1299551dd5bf4ec8e18ea6880f3a82b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ttJazfuZaRiaibmffk3MM8pQDGeMgP3avSPSia3K9AFfOhSaa7rADybxYm0MksaiaqsZy1hH4KiaAtMfSwsZBeLBBBg/640?wx_fmt=png&quot; title=&quot;![精彩文章回顾,点击直达&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5238095238095238&quot; data-w=&quot;945&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;span/&gt;精彩文章回顾,点击直达&lt;/figcaption&gt;&lt;/figure&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ttJazfuZaRiaLn2kDibyZPS4qzOXvOgvu5llnTZUodVhKpd6X19rnKTAiaxBHibyicwRia7XUBJWdgSyNuPuOQQmya2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.257847533632287&quot; data-w=&quot;892&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ttJazfuZaRhwoteJKscOG5NksdJXO1Unl0iaoGCuHnfHS1BQlXCa5FsLHuicQBNiaicLrluClictIQZpCHIAbR2e5Yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7272727272727273&quot; data-w=&quot;198&quot;/&gt;&lt;span/&gt;&lt;/figure&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b4ea26f141b467ee04c664b3b39b5991</guid>
<title>微信 8.0，初心改不改？</title>
<link>https://toutiao.io/k/7ewlvws</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.749741468459152&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/tBtlrdfxcQ3WoVsaFAhUB6plia920AW071bzXPlhLYo5yxovgBibd967vP8pWyWgWM0ej0ByjrlSk0eFkp1nxDibQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;967&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;题图：一颗播放键 | Alexander Shatov&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;qqmusic class=&quot;js_editor_qqmusic qqmusic_iframe js_uneditable custom_select_card&quot; musicid=&quot;270132541&quot; mid=&quot;003Ptb0A3AR1Qe&quot; albumurl=&quot;https://y.gtimg.cn/music/photo_new/T002R68x68M000003KT0dN02Niyz.jpg&quot; audiourl=&quot;http://isure6.stream.qqmusic.qq.com/C200003Ptb0A3AR1Qe.m4a?guid=2000001731&amp;amp;vkey=029056E1439868EFF0E7A385852368CD6663A7EED536F84974325810DB7CBF035789C0CED18122F991098D2CF99BFF1CD9D980AF9EBE7C69&amp;amp;uin=&amp;amp;fromtag=50&quot; music_name=&quot;Low Mist Var. 2(Day 1)&quot; singer=&quot;Mark Fowler - The Piano Collection, Vol. 3&quot; play_length=&quot;324&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/qqmusic_tmpl&amp;amp;singer=Mark%20Fowler%20-%20The%20Piano%20Collection%2C%20Vol.%203&amp;amp;music_name=Low%20Mist%20Var.%202(Day%201)&amp;amp;albumurl=https%3A%2F%2Fy.gtimg.cn%2Fmusic%2Fphoto_new%2FT002R68x68M000003KT0dN02Niyz.jpg&amp;amp;musictype=1&quot; musictype=&quot;1&quot; otherid=&quot;003Ptb0A3AR1Qe&quot; albumid=&quot;003KT0dN02Niyz&quot; jumpurlkey=&quot;&quot; data-pluginname=&quot;insertaudio&quot;/&gt;&lt;/section&gt;&lt;p cid=&quot;n2&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;1月19号，张小龙（以下尊称龙叔）在微信公开课上发表了《微信十年的产品思考》的演讲。随后，微信发布了8.0版的更新。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n3&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;看罢龙叔的演讲，有收获，也有异见。在此，分享我对微信的一些思考。&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n4&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n5&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;没看龙叔直播的同学，视频在&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;a spellcheck=&quot;false&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NTE4Njc4NQ==&amp;amp;mid=2657627783&amp;amp;idx=1&amp;amp;sn=b08cd3d0904b5038144a53bdd5697030&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这里&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，文稿在&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;a spellcheck=&quot;false&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NTE4Njc4NQ==&amp;amp;mid=2657627718&amp;amp;idx=1&amp;amp;sn=a3af8bc1b92618d1850fe339169333c0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这里&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n6&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;三年前，应在微信实习的同学的邀请，我写过一次自己对微信的看法，有兴趣的同学可以移步&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;a spellcheck=&quot;false&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5NDgyMTQ4NQ==&amp;amp;mid=2247483682&amp;amp;idx=1&amp;amp;sn=8062459d61b7d7dc0846704e371c18f9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这里&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 cid=&quot;n7&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;一、从一个通讯工具到一个生活方式&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n8&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们先走马观花地过一下微信的发展历程。&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n9&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n10&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;（龙叔）回头看十年前，当时的想法只是，希望有一个适合自己的通讯工具来用。…… 而微信，也真的成为了“一个生活方式”。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n11&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;你还能想象十年前的生活是怎样的吗？或者说，十年前的通讯是怎么样的？&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n12&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;十年前，我们在电脑上聊QQ、发邮件，用手机打电话、发短信。现在，一个微信就能满足几乎所有的通讯需求。&lt;/span&gt;&lt;span&gt;微信成了我们最主要的通讯工具，微信通讯录成了我们手机里真正意义上的通讯录&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n13&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;不只是通讯，事实上，微信能满足我们所有的上网需求。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n14&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;前几年，“ALL IN”的口号很火，从结果来看，反而是微信成就了某种意义上的“&lt;/span&gt;&lt;span&gt;ALL IN 微信&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;”。也就是龙叔所说的“微信成为了一个生活方式”。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n15&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;微信是如何重定义我们的生活方式的？&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n16&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;从龙叔分享的一组数据可见一斑：&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n17&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n18&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;每天——&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n19&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;有10.9亿用户&lt;/span&gt;&lt;span&gt;打开微信&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，3.3亿用户进行了&lt;/span&gt;&lt;span&gt;视频通话&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n20&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;有7.8亿用户进入&lt;/span&gt;&lt;span&gt;朋友圈&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，1.2亿用户发表&lt;/span&gt;&lt;span&gt;朋友圈&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n21&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;有3.6亿用户读&lt;/span&gt;&lt;span&gt;公众号文章&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，4亿用户使用&lt;/span&gt;&lt;span&gt;小程序&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n22&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;（移动）互联网时代，最重要的是连接。而微信诠释了什么叫“懂连接”——&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n23&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;起于人与人之间的连接，成于人与内容、场景的连接&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n24&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;1.1 起于人与人之间的连接&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n25&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;龙叔说：&lt;/span&gt;&lt;span&gt;长期以来，微信的最大价值是每个人的微信ID&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n259&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我个人的理解是：&lt;/span&gt;&lt;span&gt;在微信的早期（推出朋友圈时），微信ID承载的是人与人之间的连接&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。不夸张地说，这正是微信日后所有成功的基础。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n27&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;不知道各位是否有这样的感觉：&lt;/span&gt;&lt;span&gt;上网冲浪，像是流浪，累了倦了总是要回到微信的怀抱，仿佛这儿是我们在茫茫互联网上的家&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n28&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;虚拟世界的每一个APP，或产品或服务，都承接了我们在现实世界中的部分需求，比如以淘宝京东为代表的电商对购物需求的满足。始于通讯的微信恰好满足了我们对通讯、社交的需求。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n29&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;依马斯洛需求层次理论，在虚拟世界中，我们不必考虑下两层，即生理与安全的需求。社交、归属的需求就是最基础的需求。所以，&lt;/span&gt;&lt;span&gt;社交账号才是个人在虚拟世界中的门户&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;436&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.755&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/tBtlrdfxcQ3WoVsaFAhUB6plia920AW07xIOXCQT4ibKVwldiaLFKnrzCUM3iaJN9ecVIwwjuVJTnb1hZ4mhx6NGCA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n31&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;坐拥11亿日活用户，&lt;/span&gt;&lt;span&gt;网络效应&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;已经推着微信走了太远太远，远到所有其他社交APP合起来都望尘莫及。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n32&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;微信，坐实了中国社交APP的无冕之王。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n33&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;1.2 成于人与内容、场景的连接&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n34&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;然后，微信开始在通讯与社交之外的场景发力，先后做了公众号和小程序，现在在做视频号。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n35&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;为什么微信会想到要做公众号和小程序？我猜测的答案是一个词：&lt;/span&gt;&lt;span&gt;溢出&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n36&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这里的溢出有两重含义。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n37&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;其一，用户需求的溢出&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n38&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在基本的社交需求被满足之后，用户当然会想要更多。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n39&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;但是因为一些原因吧，比如各家应用之间相互屏蔽造成的割裂局面、对用户时间与注意力的争夺，每家公司都会适时地“出圈”，做一些看似与主营业务不相关的事儿，满足用户额外的需求。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n40&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;于是，身处社交圈的微信先有了公众号，挤进了媒体圈。从此，我们可以足不出微信而知国事、天下事了。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n41&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在我看来，&lt;/span&gt;&lt;span&gt;正是从公众号开始，微信ID开始更加关乎个人&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，不再局限人与人之间的连接。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n42&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;公众号连接了人与内容。我们订阅的、观看的、点赞的、转发的，都在不断地定义我们是谁。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n43&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;每个人的好友关系都是独一无二的，唯一却不可比。这使得基于社交网络能够精确地定位到个人，却无法准确地定义个人。（换新手机的时候，通过选择好友来确认是否本人正是此理）&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n44&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;只有当面对相同的信息：一个公众号，我订阅你忽略；一篇文章，我跳过你三连，我们不断地选择、被选择、再选择，平台才能了解我们的偏好，像有了意识一般能与我们进行交互。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n45&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这是微信满足用户需求的一大步，更是它商业化的一大步。此处先按下不表。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n46&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;其二，开发能力的溢出&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n47&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在小程序发布之前，微信已经做了许多大大小小的功能更新，比如微信支付、应用内对兄弟系产品的支持。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n48&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;事后看来，小程序的发布是一个很自然的、水到渠成的过程，只是原本对内的开发能力对外开放了。这一点很像云计算能力从亚马逊的溢出。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n49&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;小程序，极大地丰富了微信的使用场景。现在，我们足不出微信，就能满足绝大多数需求了，读书、听歌、刷剧、买票、购物、……&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n50&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;复杂的世界里，一个微信就够了。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n51&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;至此，我们可以说微信已经从一个好用的通讯工具脱胎成了一种生活方式。&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n52&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;二、关于视频号&lt;/span&gt;&lt;/h2&gt;&lt;blockquote cid=&quot;n53&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n54&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;声明：我是一个文字爱好者，爱文字胜过视频；只刷B站，没下载使用过短视频类APP，几乎没用过视频号。这部分内容会严重地有失偏颇。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n55&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;直到龙叔的演讲之前，我一直不理解短视频这样的内容形式，不理解为什么微信非要做视频号不可。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n56&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;此前，我一直认为“腾讯一定要拿下短视频、微信非要做视频号不可”的原因在于：抖音、快手的成功。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n57&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如果各位还记得“腾讯过去是如何做游戏的”，会有一种似曾相识的感觉。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n58&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;从过去的经验看，腾讯常常是后发先至，无往不利。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n59&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;此刻，二元对立，乾坤未定，视频号还有机会吗？&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n60&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;2.1 以正合以奇胜&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n61&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我认为，背靠微信，视频号的机会是很大的。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n62&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;《孙子兵法・兵势篇》有云：&lt;/span&gt;&lt;span&gt;凡战者，以正合，以奇（jī，多出来的意思）胜&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。曹公注解道：&lt;/span&gt;&lt;span&gt;先出合战为正，后出为奇&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。通俗地说，正、奇是一个先后的概念。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n63&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;腾讯所有后发先至的成功，以及其他大公司的不放弃社交却频频失利，无不揭示了这样一个道理：&lt;/span&gt;&lt;span&gt;从社交出发，接入其他用户需求，事半功倍；从其他用户需求出发，渗透社交，事倍功半&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n64&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;究其根本，&lt;/span&gt;&lt;span&gt;人是社交的动物&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。如前文所说，在互联网上，社交需求是最基本的需求。像微信这样的社交APP，就是我们在互联网上的家。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n65&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;最近，字节跳动打着“用户数据不是私产”的旗号，又双叒叕撕腾讯了。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n66&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;腾讯最重要最核心最不容他人染指的绝对是用户的社交关系。有了这一张社交网络，不管下一个十年科技如何发展、社会怎样剧变，腾讯都能不断地再造辉煌，始终立于浪潮之巅。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n67&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;字节跳动旗下的APP，像今日头条、抖音，全都是做内容的。论对用户的理解，字节跳动在国内应该是数一数二的。然而，一个人刷再多的新闻、视频，平台能挖掘的只是他个人的偏好。社交关系是很难挖掘的。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n262&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;拿得到手机通讯录，拿不到QQ/微信通讯录，字节跳动能不气吗？&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n68&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;本次诉讼的结果应该很明朗：一个是立司之本，一个是揩油，腾讯将誓死保护“用户数据”，“南山必胜客”必胜。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n69&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;2.2 重新认识视频号&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n70&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;一个半小时的演讲，龙叔花了一个小时在讲视频与视频号。他的故事，让我重新认识了视频号。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n71&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;旧时王谢堂前燕，飞入寻常百姓家&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。这句诗非常形象地描述了技术进步带来变化：普惠。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n266&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;微软过去的使命是：让每个家庭的每张桌子上都有一台电&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。它做到了！&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n72&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;再看来微信。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n73&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;公众号，连接了人与文章，归根结底，连接的是用户与创作者。它极大地降低了内容创作与传播的门槛。由此诞生了一大批自媒体人。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n74&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;但是，公众号依然不是大众化的表达工具。在视频号之前，微信里的大众化表达工具是朋友圈。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n75&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;龙叔在演讲里谈到的两点，揭示了微信做视频号的初心。即使没有抖音、快手在前，视频号也会是微信在小程序之后的下一个目标吧。&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n76&quot; mdtype=&quot;blockquote&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot; start=&quot;&quot; cid=&quot;n77&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n79&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;视频化表达应该是下一个十年的内容领域的一个主题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n81&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;随着时间的推移，视频化表达其实越来越成为普通人的习惯。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n82&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我自己是一名程序猿，我笃信未来会是一个全民编程的时代。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n83&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;但是我被龙叔说服了，他描述的未来更加真实，甚至正在呼啸而来：&lt;/span&gt;&lt;span&gt;人人&lt;/span&gt;&lt;span&gt;都可以用视频记录生活、分享和表达&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n84&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;2.3 视频号的困境&lt;/span&gt;&lt;/h3&gt;&lt;blockquote cid=&quot;n85&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n86&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;（龙叔）微信不再局限于社交领域，而是进入到公开信息领域。因此视频号的意义，与其说是视频，不如说是“号”。因为有了一个公开的号，意味着每个人都有了一个公开发声的身份。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n87&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在我看来，视频号真是一个太大胆的动作了，微信的这一步迈得有点大。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n88&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;按照信息的公开程度，有些内容是完全私密的，只能自己看的；有些内容是可以和朋友们分享，但是不会和陌生人分享的；有些内容可以和一些朋友分享，但是不方便分享给所有朋友的；还有些内容恰恰相反，不好和朋友们分享，但是陌生人知道又无所谓。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n89&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;微信，原来是一个熟人社交平台。我们在朋友圈里分享的，不会传递到陌生人。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n90&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;前段时间有一个🍉，一个女明星揭露另一个男明星：在朋友圈发的都是开心的，在微博发的都是忧伤的。这就是典型的不同的信息通过不同的渠道分享给不同的人。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n91&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;通过视频号，微信主动出圈了，其代价是把一种割裂感带给了用户，模糊了私密与公开的界限&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n92&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;前面，我一直在强调微信是我们在互联网上的一个家。我们欢迎朋友们来家里做客。但是来了一群陌生人，怎么办？&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n93&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在微信里，朋友圈已经承担了记录分享生活的功能。就这一功能而言，视频号与朋友圈是重叠的。下次发朋友圈的时候，如果需要考虑是否要发视频号，这就不是一个好的选项。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n94&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;以前，朋友圈是没有查看范围的限制的。后来，加了“三天”、“一个月”、“六个月”的限制，此举旨在加权对用户隐私的保护。但是视频号却矛盾地进入了公开信息领域。这就像，给用户的家上了三把锁以防恶客登门，却又在门口开辟了一块所有人都可以来玩的广场。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n95&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;所以说，视频号真是非常激进的一步。如何去做切割与圈定，是平台来做，还是交给用户自己？都是问题。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n96&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;龙叔自己也坦言：&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n97&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n98&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;而在一个产品里，承担两个身份，其实是很有挑战的。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 cid=&quot;n99&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;三、其他&lt;/span&gt;&lt;/h2&gt;&lt;h3 cid=&quot;n100&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;3.1 白色APP，黑色APP&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n101&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;此处的白色APP和黑色APP，参考了白色家电与黑色家电的概念。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n102&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;白色家电，像冰箱、洗衣机，能够减少、替代人类做家务，是节省时间的；黑色家电，像电视、游戏机，提供娱乐，是消耗时间的。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n103&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;小程序最初的口号是“用完即走”，它扮演了微信中白色APP的角色；相反地，公众号和视频号是微信中的黑色部分&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n104&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;a spellcheck=&quot;false&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MTMwNDMwODQ0MQ==&amp;amp;mid=2652894485&amp;amp;idx=1&amp;amp;sn=199f3cf07f36cee028c9a26c6109a50c&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;极客公园对龙叔的采访&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;中，恰好有这样一个问答：&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n105&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n106&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Q：&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;微信一直倡导用完即走，但 8.0 版本怎么给人感觉用完不走了？比如视频号加了更多推荐内容，似乎增加了用户的停留时长。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n107&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;龙叔：推荐的东西，如果把它定义为是娱乐时段的话，那么它是在这里娱乐消费的。目标是消耗时间的。在这一个板块，并不是说非要他立即就走。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n108&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;用完即走并不是说用户必须使用的时间越短越好。就像一个 120 分钟的剧，不是说为了让你用完即走，我用技术让你 60 分钟看完，这样就不合理了。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n109&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这个问题透露了对视频号的一个隐忧——&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n110&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;普通人在公开信息领域的发声是有压力的。如果视频号有违它的初心——满足普通人视频化表达的需求，而只是成为了一个刷视频的工具（30秒的视频，60分钟看完），也许商业上会成功，但是于微信自身而言算是一种失败吧。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n111&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;3.2 内容为谁而生&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n112&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;尽管微信自己不生产内容、不买内容，只做内容的承载与传递。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n113&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;但是只要有了内容，它就能准确地捕捉用户偏好，就可以卖广告了！&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n114&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;最近微信里的广告太多，我已经苦不堪言了：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot; start=&quot;&quot; cid=&quot;n115&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n117&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;朋友圈，4小时插播一条广告，一天5条广告（睡觉的8个小时，中间停一次，枕着广告睡去，伴着广告醒来）。&lt;/span&gt;&lt;span&gt;这是朋友圈戒断吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n119&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;公众号信息流，前5条是已订阅的推送，紧接着是2条推荐流（标注“推荐”，不确定是不是广告）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n121&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;公众号文章，50%的概率文末出广告。&lt;/span&gt;&lt;span&gt;这是公众号戒断吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p cid=&quot;n122&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;广告轰炸，让人不得不怀疑微信做公众号、视频号的初心：&lt;/span&gt;&lt;span&gt;通讯社交 TO C，内容平台 TO B&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n123&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;龙叔在演讲的最后这样说：&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n124&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n125&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;微信虽然是这么大用户量的产品了，并且经历了10年之久了，但我还是希望，它能一直保持自己的风格，一直像一个小而美的产品一样，有自己的灵魂，有自己的审美，有自己的创意，有自己的观念。而不仅仅是数字的奴隶。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n126&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我很喜欢微信，一些观念、审美偏好也一直受到龙叔与微信的影响。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n127&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;但是现在的微信不克制了，显得急功近利。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n128&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;龙叔说，有些功能（比如已读）微信不会做，因为不想给用户社交压力。那么个人的压力呢？&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p cid=&quot;n128&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;/&gt;&lt;span&gt;我坐在微信的家里。&lt;/span&gt;&lt;span&gt;门外是视频号的喧闹，门关着，我假装视而不见。&lt;/span&gt;&lt;span&gt;没有找人聊天，就安静地&lt;/span&gt;品&lt;span&gt;品文章，刷一下朋友圈。&lt;/span&gt;&lt;span&gt;突然，有人砸碎窗户扔进来一块东西，我定睛一看，上面写着：&lt;/span&gt;&lt;span&gt;雀巢咖啡中国。&lt;/span&gt;&lt;span&gt;然后噼里啪啦，不断有人扔东西进来。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n129&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我选择流浪。&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>