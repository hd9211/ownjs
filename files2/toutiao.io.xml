<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f8028b4fcba6fdffdceecadd411cf538</guid>
<title>欢迎加入读者圈子，一起交流！</title>
<link>https://toutiao.io/k/5fkxdkk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;strong&gt;欢迎加入读者圈子，一起交流！&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;圈子剧透&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、600+圈子成员，以中高级程序员为主，更有架构师、CTO坐镇交流；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、1000+优质主题，数十G独家资料，每日分享，精挑细选；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、全年52期专属邮件周报，让你轻松掌握业界资讯、技术干货，提升认知水平；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、全年52本好书共读，让你花最少的时间，获取更好的知识；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;心动不如行动，赶快加入吧！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3e40612db8263f63026cc75f080194e7</guid>
<title>Go语言如何应对供应链攻击</title>
<link>https://toutiao.io/k/o0h7bt0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;现代软件工程是协作进行的，且基于对开源软件的复用，因此容易受到供应链攻击，即通过破坏软件项目的依赖对其进行攻击。无论采取什么流程或技术措施，每个依赖都不可避免地基于一种信任关系。不过，Go 语言的工具和设计可以帮助我们在各个阶段降低风险。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;所有构建都是“锁定的”（locked）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;任何外部变化（例如某个依赖发布了一个新版本）都不会自动影响 Go 程序的构建。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;与大多数其他包管理器不同，Go module 没有单独的约束关系列表或者一个锁定特定版本的 lock 文件。任意 Go 构建里的每个依赖的版本完全由 main module 的 go.mod 文件确定。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;从 Go 1.16 开始，这种确定性是默认的行为，如果 go.mod 不完整，构建命令（go build, go test, go install, go run, ...）就会失败。唯一能改变 go.mod（从而改变构建）的命令是 go get 和 go mod tidy。这两个命令不是用来自动运行或者在 CI 里运行的，所以对依赖树的改动必须是有意为之，还有机会经过代码审查。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;这对于安全性非常重要，当一个 CI 系统或者在新机器上运行 go build 时，已经 check in 的代码才最终决定哪些东西会被构建。第三方无法影响这一点。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;此外，当使用 go get 添加依赖时，由于使用了最小版本选择（minimal version selection）方法，它会按照依赖的 go.mod 文件中指定的版本添加传递依赖（transitive dependencies），而不是按照最新版本添加。运行 go install example.com/cmd/devtoolx@latest 的时候也一样。在某些生态系统中（比如 NPM），运行这样的安装命令会绕过锁定的版本。而在 Go 里面，虽然它会获取最新版本的 example.com/cmd/devtoolx ，但所有的依赖的版本都是由用户的 go.mod 决定的。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;如果某个 module 遭到破坏，发布了一个恶意的新版本，不会有人受到影响，除非他们明确要更新那个依赖。我们有机会去审查这样的改动，整个生态也有时间去发现这种恶意事件。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;版本内容永远不变&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;确保构建不被第三方影响的另一个关键性质是一个 module 版本的内容是不可变的。否则如果攻击者能在入侵某个依赖以后还能重新上传一个已有的版本，那他就能直接入侵所有依赖它的项目了。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;这时就体现出了 go.sum 文件的作用。go.sum 文件中包含了构建所需的每个依赖的加密哈希值列表。与 go.mod 类似，不完整的 go.sum 会导致错误，而且只有 go get 和 go mod tidy 能够对其进行修改，所以它的任何改动都必将伴随着对依赖的有意改变。其他情况下的构建都保证有一套完整的校验值。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;大多数 lock 文件都有这一特性，但 Go 通过校验数据库（简称 sumdb）更进一步。sumdb 是一个全局的、只允许追加的（append-only）、可以加密验证的 go.sum 条目的列表。当 go get 需要在 go.sum 文件中添加一个条目时，它从 sumdb 中获取该条目，同时获取 sumdb 完整性的加密证明。这不仅确保了某个 module 的每个构建都使用相同的依赖内容，还确保了每个 module 都使用相同的依赖内容。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;sumdb 使得被破坏的依赖，甚至是 Google 运行的 Go 的基础设施，都不可能用篡改过的源代码来攻击某个特定依赖。这就保证了你使用的代码与其他人的代码完全一样，并且已经过审查。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;最后，我最喜欢的 sumdb 特性是：无需由 module 的作者来管理密钥，而且与 Go module 的去中心化特性完美契合。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;VCS 是真实的信息来源&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;大多数项目都是通过使用一些版本控制系统（Version Control System，VCS）来开发的。在其他语言的生态中，这些项目需要上传到指定的软件仓库（package repository，比如 NPM）。这意味着有两个账户可能被入侵：一个是 VCS 主机，另一个是软件仓库，而后者的使用次数更少，更容易被忽视。这也意味着上传到仓库的版本中更容易隐藏恶意代码，尤其是作为上传过程的一个步骤，需要例行修改源码时，比如 minimize 代码。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Go 不存在软件仓库账户。package 的 import 路径已经包含了 go mod download 所需要的信息，可以直接从 VCS 中获取对应的 module，而 VCS 里保存的 tag 就确定了版本。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;确实有一个东西叫做 Go Module Mirror，但它只是一个代理。module 的作者不需要注册账户，也不需要向代理上传版本。这个代理使用与 go 工具相同的逻辑（事实上，代理运行 go mod download）来获取、缓存一个版本。由于校验数据库确保一个特定的 module 版本只能有一个源码树，每个使用代理的人看到的结果与绕过代理直接从 VCS 获取的结果相同。如果该版本在 VCS 中不再可用，或者内容发生了变化，获取时将直接导致错误，而从代理获取可能仍然有效，这样提高了可用性，并且保护生态系统免受 “left-pad” 问题（“删库跑路”）的影响。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;在客户端运行 VCS 工具会暴露相当大的攻击面。这是另一处 Go Module Mirror 有用的地方：代理上的 go 工具在一个强大的沙盒中运行，并且经过配置，支持所有的 VCS 工具，而默认的配置则只能支持两个主要的 VCS 系统（git 和 Mercurial）。使用代理的人仍然可以获取由其他 VCS 系统所发布的代码，但在大多数客户端环境中，攻击者都无法直接碰到这些代码。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;构建但不执行代码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Go 的工具链有一个明确的安全设计目标，即获取和构建代码时都不会执行代码，无论代码是否是不受信任的恶意代码。这与大多数其他的生态系统不同，它们很多都原生支持在获取 package 的时候运行代码。在一个依赖被入侵以后，这些 post-install hooks（安装后运行的钩子）可以轻易入侵开发者的机器，进而对 module 作者进行蠕虫攻击。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;不过话说回来，获取代码往往意味着会在不久之后执行它，要么是作为开发者机器上的测试的一部分，要么是作为生产环境的二进制文件的一部分，所以缺乏 post-install hooks 只能延缓攻击。构建的结果里是没有安全边界的：构建所用到的任何 package 都可以定义一个 init 函数。尽管如此，它作为一个降低风险的措施是有意义的，因为你执行的一个二进制文件或测试的一个 package 可能只用了这个 module 的一部分依赖。比如如果你在 macOS 上构建并执行 example.com/cmd/devtoolx，那么针对 Windows 的依赖或 example.com/cmd/othertool 的依赖就不可能危害到你的机器。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;在 Go 中，某个构建没有用到的 module 对安全没有影响。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;A little copying is better than a little dependency&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;在 Go 的生态中，最后一个或许也是最重要的一个应对供应链风险的措施，同时也是最没有技术含量的一个，就是 Go 从文化上拒绝大型的依赖树，宁愿稍微复制一点代码，也不愿增加新的依赖。这可以追溯到 Go 的一句谚语：“A little copying is better than a little dependency”。高质量、可复用的 Go 模块往往有着光荣的“零依赖”标签。如果你只是需要一个库，通常不会面临需要依赖其他几十个 module 的情况。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;丰富的标准库和附加模块（golang.org/x/...）也使“零依赖”成为可能，它们提供了常用的上层基本功能，比如 HTTP、TLS、JSON。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;所有这些意味着只需少量的依赖就可以建立丰富、复杂的应用程序。但无论工具有多好，都不能消除复用代码的风险，所以最有力的应对措施永远都是一个比较小的依赖树。&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;👇 点击查看原文&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a01c45fc692e81dcc8e1edb796c7b9bb</guid>
<title>用最简的方式学Vuex</title>
<link>https://toutiao.io/k/xfa0qtk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;冲！！！！！！&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NjY2NTcyNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjaCTEjQdxnaIlEWiaGcw9zNV7AHZGgp5q9U0zPf3cmcIgBRYG1n2ydEBHJGgl8nEA1bKiaj1fibK2EA/0?wx_fmt=png&quot; data-nickname=&quot;前端之神&quot; data-alias=&quot;Sunshine_Lin_God&quot; data-signature=&quot;一位前端小菜鸡，写过100多篇原创文章，全网有5w+个前端朋友，梦想是成为”前端之神“~&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;一、基础&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Vuex是一个专为Vue.js应用程序开发的状态管理模式，采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化，每一个Vuex应用的核心是store（仓库）。为了使用Vuex，首先需要安装该包，执行如下命令完成该安装过程。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;npm install vuex@next --save&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;二、核心概念&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Vuex中核心概念主要有五个：State、Getters、Mutations、Actions、Modules，每一部分都有自己的功用，下面先来看一段简单的代码，该代码中涉及到了这些核心概念，然后在该代码的基础上进一步理解。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// index.js文件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; {createStore} &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;vuex&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; {moduleA} &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;./module/moduleA&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; store = createStore({&lt;br/&gt;    &lt;span&gt;// Vuex允许将store分割成模块（module），每个模块拥有自己的state、mutation、action、getter、甚至是嵌套子模块&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 访问moduleA的状态：store.state.moduleA&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;modules&lt;/span&gt;: {&lt;br/&gt;        moduleA&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// module/moduleA.js文件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 对于模块内部的mutation和getter，接收的第一个参数是模块的局部状态对象&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 对于模块内部的action，局部状态通过context.state暴露出来，根节点状态则为context.rootState&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 对于模块内部的getter，根节点状态会作为第三个参数暴露出来&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 在带命名空间的模块内访问全局内容&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 如果希望使用全局state和getter，rootState和rootGetters会作为第三和第四个参数传入getter，也会通过context对象的属性传入action&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 若需要在全局命名空间内分发action或提交mutation，将{root: true}作为第三个参数传给dispatch或commit即可。&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; moduleA = {&lt;br/&gt;    &lt;span&gt;// 默认情况下，模块内部的action、mutation和getter是注册在全局命名空间的，如果希望模块具有更高的封装度和复用性，可以通过添加namespaced:true的方式使其成为带命名空间的模块&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;namespaced&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;state&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;testState1&lt;/span&gt;: &lt;span&gt;&#x27;xxxx&#x27;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;testState2&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;a&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;b&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        },&lt;br/&gt;        &lt;span&gt;testState3&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;// 有的时候需要从store中的state中派生出一些状态，此时可以将该部分抽象出一个函数供多处使用。&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// Vuex允许在store中定义getter，像计算属性一样，getter的返回值会根据它的依赖被缓存起来，且只有当他的依赖值发生了改变才会被重新计算&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;getters&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;// getter接收state作为其第一个参数&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;testGetter1&lt;/span&gt;: &lt;span&gt;&lt;span&gt;state&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; state.testState1 + state.testState3;&lt;br/&gt;        },&lt;br/&gt;        &lt;span&gt;// getter可以接受其他getter作为第二个参数&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;testGetter2&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;state, getters&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; getters.testGetter1.length;&lt;br/&gt;        }&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;// 更改Vuex的store中的状态的唯一方法是提交mutation，每个mutation都有一个字符串的事件类型和一个回调函数，该回调函数接收state作为第一个参数，提交的载荷作为第二个参数&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 以相应的type调用store.commit方法来触发相应的回调函数&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// Mutation必须是同步函数&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;mutations&lt;/span&gt;: {&lt;br/&gt;        testMutation1(state) {&lt;br/&gt;            &lt;span&gt;// 变更状态&lt;/span&gt;&lt;br/&gt;            state.testState3++;&lt;br/&gt;        },&lt;br/&gt;        &lt;span&gt;// 第二个参数是载荷&lt;/span&gt;&lt;br/&gt;        testMutation2(state, payload) {&lt;br/&gt;            state.testState1 += payload.content;&lt;br/&gt;        }&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;// Action提交的是mutation，而不是直接变更状态&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// Action可以包含任意异步操作&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// Action函数接受一个与store实例具有相同方法和属性的context对象，因此可以调用context.commit提交一个mutation，或者通过context.state和context.getters来获取state和getters。&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// Action通过store.dispatch方法触发&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;actions&lt;/span&gt;: {&lt;br/&gt;        testAction1(context) {&lt;br/&gt;            setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                context.commit(&lt;span&gt;&#x27;testMutation1&#x27;&lt;/span&gt;);&lt;br/&gt;            }, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;        },&lt;br/&gt;        testAction2({commit}, payload) {&lt;br/&gt;            setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                commit({&lt;br/&gt;                    &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;testMutation2&#x27;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;content&lt;/span&gt;: payload.content&lt;br/&gt;                });&lt;br/&gt;            }, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;State&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Vuex使用单一状态树保存所有数据，作为唯一数据来源。如上所示代码，其包含了testState1、testState2、testState3，在组件中如何获取这些数据呢？（Vue3.x语法）&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;&amp;lt;h1&amp;gt;组件三&amp;lt;/h1&amp;gt;&lt;br/&gt;&amp;lt;p&amp;gt;{{testState1}}&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;p&amp;gt;{{testState2}}&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;p&amp;gt;{{testState3}}&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script setup&amp;gt;&lt;br/&gt;import {computed} from &#x27;vue&#x27;;&lt;br/&gt;import {useStore} from &#x27;vuex&#x27;;&lt;br/&gt;// 通过useStore函数来访问store，与选项式API&lt;br/&gt;const store = useStore();&lt;br/&gt;&lt;br/&gt;// 从store中读取状态并显示到Vue组件中最简单的办法是将其绑定到计算属性上&lt;br/&gt;// 如果想读取某一模块中的状态值，则需要store.state.模块名.状态名&lt;br/&gt;const testState1 = computed(() =&amp;gt; store.state.moduleA.testState1);&lt;br/&gt;const testState2 = computed(() =&amp;gt; store.state.moduleA.testState2.a + store.state.moduleA.testState2.b);&lt;br/&gt;const testState3 = computed(() =&amp;gt; store.state.moduleA.testState3);&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;style lang=&quot;less&quot;&amp;gt;&amp;lt;/style&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Getters&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;有的时候需要从store中的state中派生出一些状态，此时可以将该部分抽象出一个函数供多处使用。Vuex允许在store中定义getter，像计算属性一样，getter的返回值会根据它的依赖被缓存起来，且只有当他的依赖值发生了改变才会被重新计算。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;&amp;lt;h1&amp;gt;组件三&amp;lt;/h1&amp;gt;&lt;br/&gt;// ……&lt;br/&gt;&amp;lt;p&amp;gt;{{testGetter1}}&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;p&amp;gt;{{testGetter2}}&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script setup&amp;gt;&lt;br/&gt;import {computed} from &#x27;vue&#x27;;&lt;br/&gt;import {useStore} from &#x27;vuex&#x27;;&lt;br/&gt;// 通过useStore函数来访问store，与选项式API&lt;br/&gt;const store = useStore();&lt;br/&gt;&lt;br/&gt;// ……&lt;br/&gt;&lt;br/&gt;// 在computed函数中访问getter&lt;br/&gt;// 如果访问非模块中的getter，直接store.getters.名称&lt;br/&gt;// 如果访问模块中的getter，通过store.getters[&#x27;getter路径&#x27;]&lt;br/&gt;const testGetter1 = computed(() =&amp;gt; store.getters[&#x27;moduleA/testGetter1&#x27;]);&lt;br/&gt;const testGetter2 = computed(() =&amp;gt; store.getters[&#x27;moduleA/testGetter2&#x27;]);&lt;br/&gt;&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;style lang=&quot;less&quot;&amp;gt;&amp;lt;/style&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Mutations&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;更改Vuex的store中的状态的唯一方法是提交mutation，每个mutation都有一个字符串的事件类型和一个回调函数，该回调函数接收state作为第一个参数，提交的载荷作为第二个参数。（注意：Mutation必须是同步函数）&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;&amp;lt;h1&amp;gt;组件三&amp;lt;/h1&amp;gt;&lt;br/&gt;// ……&lt;br/&gt;&amp;lt;button @click=&quot;handleMutationsClick&quot;&amp;gt;改变&amp;lt;/button&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script setup&amp;gt;&lt;br/&gt;// ……&lt;br/&gt;&lt;br/&gt;// 与mutations相应的type调用store.commit方法来触发相应的回调函数&lt;br/&gt;const handleMutationsClick = () =&amp;gt; {&lt;br/&gt;    store.commit(&#x27;moduleA/testMutation1&#x27;);&lt;br/&gt;    store.commit(&#x27;moduleA/testMutation2&#x27;, {&lt;br/&gt;        content: &#x27;content&#x27;&lt;br/&gt;    });&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;style lang=&quot;less&quot;&amp;gt;&amp;lt;/style&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Actions&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Actions类似于mutation，但是仍然有一些不同点，一方面其提交的是mutation，而不是直接变更状态；另一方面Action可以包含任意异步操作。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;&amp;lt;h1&amp;gt;组件三&amp;lt;/h1&amp;gt;&lt;br/&gt;// ……&lt;br/&gt;&amp;lt;button @click=&quot;handleActionsClick&quot;&amp;gt;改变Action&amp;lt;/button&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script setup&amp;gt;&lt;br/&gt;// ……&lt;br/&gt;&lt;br/&gt;// Action函数接受一个与store实例具有相同方法和属性的context对象，因此可以调用context.commit提交一个mutation，或者通过context.state和context.getters来获取state和getters。&lt;br/&gt;// Action通过store.dispatch方法触发&lt;br/&gt;const handleActionsClick = () =&amp;gt; {&lt;br/&gt;    store.dispatch(&#x27;moduleA/testAction1&#x27;);&lt;br/&gt;    store.dispatch(&#x27;moduleA/testAction2&#x27;, {&lt;br/&gt;        content: &#x27;test&#x27;&lt;br/&gt;    });&lt;br/&gt;};&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;style lang=&quot;less&quot;&amp;gt;&amp;lt;/style&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;5&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Modules&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;由于使用单一状态树，应用的所有状态都会集中到一个较大的对象，当应用变的复杂时store会变的很难维护，为了解决该问题，Vuex允许将store分割成模块（module），每个模块拥有自己的state、mutation、action、getter、甚至是嵌套子模块，具体使用可见第二节中开头部分的代码，其中包含了其常见的使用方式。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三、插件&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 插件基础&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Vuex在实例化store的时候可以接受plugins选项，该选项可以添加一系列的插件，插件就可以帮助我们完成一系列的工作，节省人力和物力，下面我们自定义一个简单的插件并调用该插件。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// plugins/myPlugin.js&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 插件接收唯一的参数store&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; myPlugin = &lt;span&gt;&lt;span&gt;store&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// store上有一系列的方法，可以用在插件中https://next.vuex.vuejs.org/zh/api/#commit&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 注册一个动态模块用registerModule&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 替换store的根状态用replaceState&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 监听mutation的变化，该处理函数会在每个mutation完成后调用，接收mutation和经过mutation后的状态作为参数&lt;/span&gt;&lt;br/&gt;    store.subscribe(&lt;span&gt;(&lt;span&gt;mutation, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(mutation);&lt;br/&gt;    });&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; myPlugin;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// index.js&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; {createStore} &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;vuex&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; myPlugin &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;./plugins/myPlugin&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; store = createStore({&lt;br/&gt;    &lt;span&gt;// ……&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 一个数组，包含应用在store上的插件方法，这些插件直接接收store作为唯一参数，可以监听mutation或者提交mutation&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;plugins&lt;/span&gt;: [myPlugin]&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 数据持久化插件&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Vuex的状态存储并不能持久化，只要一刷新页面数据就丢失了，此时可引入vuex-persist插件来解决该问题，其会将状态保存至cookie或者localStorage中。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; {createStore} &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;vuex&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; VuexPersistence &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;vuex-persist&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; myPlugin &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;./plugins/myPlugin&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 利用该插件可实现对store数据的持久化&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; vuexLocal = &lt;span&gt;new&lt;/span&gt; VuexPersistence({&lt;br/&gt;    &lt;span&gt;storage&lt;/span&gt;: &lt;span&gt;window&lt;/span&gt;.localStorage&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; store = createStore({&lt;br/&gt;    &lt;span&gt;// ……&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 一个数组，包含应用在store上的插件方法，这些插件直接接收store作为唯一参数，可以监听mutation或者提交mutation&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;plugins&lt;/span&gt;: [myPlugin, vuexLocal.plugin]&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>449ef624e0b83851b42eb2eef5c27abd</guid>
<title>Apache Doris 在有赞的初步尝试</title>
<link>https://toutiao.io/k/mgymcz6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6666667&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR79PE4l6LL8jUWcdBYy5LpgK4iaCKhqM0heACgGpu24ob9CSFe9KthkuyIn9uQCoQJgrObS18psSXyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;点击关注“&lt;span&gt;有赞coder&lt;/span&gt;”&lt;/p&gt;&lt;p&gt;获取更多技术干货哦～&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;作者:&lt;/span&gt;&lt;span&gt;郑生俊&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;有赞OLAP&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;有赞作为一家商家服务公司，OLAP对有赞非常重要，从商家后台的数据看板，再到最近有赞门罗发布会上的有赞贾维斯，都离不开OLAP。&lt;span&gt;具体到技术栈，有赞的MOLAP采用Apache Kylin（&lt;/span&gt;&lt;span&gt;参考文章&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwODE3ODU5MA==&amp;amp;mid=2653082536&amp;amp;idx=1&amp;amp;sn=bfb919943201c2a32174519a58850c89&amp;amp;chksm=80a4ad59b7d3244f13bccc19a2ff4e9b89315ede3d78d0d375c0e404f39dfbb5a4cb324c7ee7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;有赞出品｜升级 Kylin 4 最强攻略！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;有赞出品｜升级 Kylin 4 最强攻略！&lt;/span&gt;&lt;/a&gt;&lt;span&gt;），&lt;/span&gt;&lt;span&gt;ROLAP 采用了ClickHouse&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;参考文章&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxOTY5MDMxNA==&amp;amp;mid=2455762137&amp;amp;idx=1&amp;amp;sn=0b7bd5536bfb0de350e1d12aed677820&amp;amp;chksm=8c6872fcbb1ffbea37ece218a8e7184bc9b09c17ad1f3ebc67a3dc44273d112f00fa6b7834c3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;ClickHouse 在有赞的实践之路&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;ClickHouse 在有赞的实践之路&lt;/span&gt;&lt;/a&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;Apache Kylin在有赞内部已经非常稳定了，支撑了大量的高QPS的场景，并且它的存储计算分离架构能够很好地做到弹性伸缩来应对流量的高峰低谷。而ClickHouse作为ROLAP引擎最主要的问题有两块，一是扩缩容麻烦，二是单机的Join性能差。其中扩缩容的高成本是有赞数据团队在ROLAP最为头疼的问题，比如有赞门罗发布会发布了MA的优惠之后，因为ClickHouse扩容的时效性和复杂度，我们需要提前准备较多的硬件为ClickHouse扩容，以应对有可能的业务剧增。尤其是如果ClickHouse之上又有实时写入的场景、做了数据正交分布时，扩容就难上加难了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;试水Apache Doris&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;为了解决上面的问题，团队也尝试了ClickHouse on Apache Doris，但后来因为一些计划变动没有继续投入。欣慰的是Apache Doris在今年推出了向量化引擎，也在6月15号正式孵化为Apache顶级项目，它的设计上能够解决ClickHouse上述的问题。进而细看了Apache Doris的向量化引擎，基本上借鉴了前辈ClickHouse的做法。既然是站在巨人的肩膀上，我们觉得它应该是能够承载ClickHouse之上的业务。为此我们做了初步的性能测试和与Druid的兼容性测试。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;查询性能：&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在初步的性能测试过程中，结果还是比较惊喜的，比Druid快很多，也比之前非向量化的版本快很多，有些场景和ClickHouse差不多。查询这块主要分享一下我们最近在2phase aggregate做的优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;背景是我们测试在merge aggregate的过程中，发现第二阶段的聚合比第一阶段的聚合速度慢很多。首先解释一下merge aggregate，对于分布式聚合查询，数据通常都需要在某个算子预聚合后，再汇聚到下一个算子进行merge聚合。但我们从Doris的执行信息看到第二阶段的聚合比第一阶段的聚合慢不少，而测试场景下，二阶段聚合的数据量比第一阶段的聚合少很多，反而二阶段聚合的耗时还更高了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先尝试使用perftools来分析瓶颈点，找到核心的耗时代码：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;144&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.2484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibO6HveicDsKMDSuG06qWvPhQS3B50nowBHKNrSUIKnUIWV9uJKqDibpjdtBH3sKOAVDMibUEpic0zNiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们找到上面代码，看了一下二阶段聚合的大致流程，大概有这么几步：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;反序列化一阶段的聚合结果，得到StringColumn&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将StringColumn，反序列化为对应列的数据类型（double、long、hll 等数据结构）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将对应的数据列（double、long、hll 等数据结构），转换为临时用来聚合的数据类型（AggregateData）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将临时的聚合对象与Hash表中存放的最终结果（也是AggregateData）进行聚合运算&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;销毁3步骤产生的临时聚合对象&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;结合上面的perf采样图，我们可以看到大量的CPU消耗在：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将StringColumn反序列化为对应的数据类型，比如long、int、hll 等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将聚合的输入数据（long、int、hll）等转换为聚合需要的AggregateData，这里就有大量临时 对象/内存 的频繁创建和销毁&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了解决上述第一个问题，尝试了在第一阶段聚合结束之后，直接将结果转换为第二个阶段需要的数据类型。这样第二阶段的数据读取，只需要做对应指针类型的强制类型转换即可，而不需要再从StringColumn反序列化获得。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了解决第二个问题，起初我尝试着分配整个块内存来存放要聚合的临时数据，然后最后释放整块内存，以此减少频繁的内存创建和销毁过程，但收效甚微。这时候我们去看看第一阶段聚合的代码为啥会更快，把原因说的通俗点就是：AggregateData可以直接与Block中的数据（double、long、hll 等数据结构）进行聚合运算，不需要将其转换为聚合的相同数据类型（AggregateData）进行聚合运算即可，这样避免大量 对象/内存 频繁的创建、销毁。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按照上面的思路改完代码之后，我们拿一个测试环境的例子看看性能提升，这是一个涉及到600w+数据读取的查询。查询了多次让磁盘数据进操作系统的cache之后比较RT，查询总耗时优化前810ms，优化后560ms，提升了30%的性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;优化前：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;194&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.33515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibO6HveicDsKMDSuG06qWvPhgNZMrzlmVIvOXUDQGJuiaDY4WROSqUSgxKzbNAGKQevcegRA54l53Kg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;优化后：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;181&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.31328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibO6HveicDsKMDSuG06qWvPhcYOMvMmQK3pOgGSDN5ia5gmNIGVHqcRTDZUk1ia7SZQt4DzBRRfyo0oA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然这个case从整体上看RT提升250ms，看着好像可有可无，但这是在降低了资源消耗的情况下达成，往往就意味着系统能够有更高的吞吐。而且数据量大了、查询更复杂之后会有更大的提升，毕竟Aggregate在OLAP中是一个高频操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从整体查询RT的视角，RT容易会有波动，但算子内MergeTime的指标统计不会，因为MergeTime指标统计的都是针对一个内存中Block的聚合耗时，排除了很多网络、IO的干扰因素。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;优化前：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.0700934579439252&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibO6HveicDsKMDSuG06qWvPhlpOpfsBMziaaQpbCzVZQIRybjImVgp87mKpHpTukhaKHoREibcqMCnEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;428&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;优化后：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.1422018348623852&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PfMGv3PxR7ibO6HveicDsKMDSuG06qWvPhlWKQvm5fVwaocONgexxlnd91cdLOhXmLOibh1EKgNYS1AAxPajwjkZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;436&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上图可以看到MergeTime也大大降低了（其中 ExecTime 指标的变化可以忽略，因为走了不同的代码逻辑，是包含在MergeTime的统计之中的）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好在Doris的代码写的挺合理的，所以这个优化涉及到的代码量不多，有兴趣可以参考代码：&lt;/span&gt;&lt;span&gt;https://github.com/apache/doris/pull/10618/files。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;兼容性&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;由于我们第一阶段的目标是将Doris替换Apache Druid，因此我们基于Druid场景做了一些兼容性测试。对于平台型团队而言，一旦上层有较多的业务，要推动底层的技术栈迭代和替换是比较困难的，因为通常业务方也很难抽出时间和我们陪跑做全面的兼容性测试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此我们在Druid Broker处理完查询之后，将一个查询的SQL、RT记录数等信息发送到Kafka。然后由一个Kafka消费者消费上Druid的请求，做SQL改写，将Druid SQL转换为Doris的查询语句发往Doris进行流量回放。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;一些SQL的基本语法都是相同的，比较大的区别是  builtin 函数。有一些Druid  Function 的函数的参数入参含义、个数，都和Apache Doris有较大不同，这导致SQL改写的过程繁琐一些，但这对于平台型的服务团队通常是不得不做的过程。通过流量回放一来可以知道哪些不兼容的SQL语句要做什么样的调整，二来可以通过模拟线上查询情况的过程中确定哪些性能不符合性能预期、哪些查询是有Bug的，比如Druid时序数据查询中经常使用到的time_round_function计算有误（参考代码：https://github.com/apache/doris/pull/9712/files）。确定了上述的各方面的性能和兼容性没问题后，我们才能更高效地协调业务方做一些改造工作。目前我们已经回放了一部分线上查询，整体的业务改动点还好，性能也有较大提升。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;后续计划&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;至于后续的计划，我们的目标是视资源情况推进Doris在有赞落地，尽量将ClickHouse、Druid的技术栈收敛为Apache Doris，解决前面提到的问题，同时也做技术栈的收敛、迭代。当然这还有一些工作要做，包括兼容性测试、性能测试，确保业务上Doris与ClickHouse、Druid有相当的体验，为此我们也在尝试一些手写SIMD优化关键执行代码，希望最终能够借助Apache Doris解决我们ROLAP的痛点问题。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;‍‍&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1bea0171f8018af701989578d648f911</guid>
<title>场景化面试：据说只有不到 5% 的开发者能正确读出这些英文单词</title>
<link>https://toutiao.io/k/vcnudk2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;面试官问：简历中描述到之前有过 API 网关的开发经历，那你能否说明下 Facade(正确发音：/&lt;strong&gt;fə&#x27;sɑːd&lt;/strong&gt;/)模式在 API 网关中的应用？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：额，什么模式？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：Facade，F，A，C，A，D，E。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：噢噢，你说的是 Facade(错误发音：/&lt;strong&gt;&#x27;feikeid&lt;/strong&gt;/) 吧？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：黑人问号？？？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;旁白&lt;/strong&gt;：在日常的项目研发中，开发者免不了需要互相沟通和交流，其中不少技术术语是用英文单词表达的，但由于英语不是母语，很多人发音并不正确，长此以往，会导致如下两个问题：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;由于不同开发者对同一个单词发音不同，导致沟通交流存在障碍，鸡同鸭讲，无论是在工作中还是在面试中，都会影响到沟通的效率；在上面的面试场景中，也会影响到面试官对你的第一印象&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;显得不专业，即使你本身技术很牛，但如果一开口，发音不正确，还是会影响到你在其他人心目中的大佬形象&lt;/span&gt;&lt;/p&gt;&lt;p&gt;下面的单词和发音是节选自 &lt;span&gt;中国程序员容易发音错误的单词&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;，为了突出重点单词，根据我的了解，删掉了其中大部分人都能正确发音的一些单词。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;欢迎大家在留言区把自己之前读错的单词写出来，如果有人是属于 5% 能正确发音的，也请留言让大家膜拜学习下。&lt;/p&gt;&lt;p&gt;由于微信公众号的限制，如果大家想听英文发音，可以点击阅读原文。&lt;/p&gt;&lt;/blockquote&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;单词&lt;/td&gt;&lt;td&gt;正确发音（英音）&lt;/td&gt;&lt;td&gt;正确发音（美音）&lt;/td&gt;&lt;td&gt;错误发音&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;access&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt; /&#x27;ækses/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt; /ˈækses/&lt;/td&gt;&lt;td&gt;❌ /ək&#x27;ses/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;admin&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt; /&#x27;ædmɪn/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt; /ˈædmɪn/&lt;/td&gt;&lt;td&gt;❌ /ɜ:d&#x27;mɪn/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;agile&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt; /&#x27;ædʒaɪl/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[7]&lt;/sup&gt;&lt;/span&gt; /ˈædʒl/&lt;/td&gt;&lt;td&gt;❌ /ə&#x27;dʒaɪl/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;amazon&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[8]&lt;/sup&gt;&lt;/span&gt; /&#x27;æməzən/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[9]&lt;/sup&gt;&lt;/span&gt; /ˈæməzɑːn/&lt;/td&gt;&lt;td&gt;❌ /&#x27;əmeizən/ /ə&#x27;meizən/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Angular&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[10]&lt;/sup&gt;&lt;/span&gt; /&#x27;æŋgjʊlə/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[11]&lt;/sup&gt;&lt;/span&gt; /ˈæŋɡjələr/&lt;/td&gt;&lt;td&gt;❌ /&#x27;æŋɡələ/ /&#x27;æŋdʒʌlə/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;AJAX&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[12]&lt;/sup&gt;&lt;/span&gt; /&#x27;eidʒæks/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[13]&lt;/sup&gt;&lt;/span&gt; /&#x27;eidʒæks/&lt;/td&gt;&lt;td&gt;❌ /ə&#x27;dʒʌks/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;alias&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[14]&lt;/sup&gt;&lt;/span&gt; /ˈeɪliəs/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[15]&lt;/sup&gt;&lt;/span&gt; /ˈeɪliəs/&lt;/td&gt;&lt;td&gt;❌ /ə&#x27;lais/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Apache&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[16]&lt;/sup&gt;&lt;/span&gt; /ə&#x27;pætʃɪ/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[17]&lt;/sup&gt;&lt;/span&gt; /əˈpætʃi/&lt;/td&gt;&lt;td&gt;❌ /ʌpʌtʃ/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;archive&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[18]&lt;/sup&gt;&lt;/span&gt; /&#x27;ɑːkaɪv/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[19]&lt;/sup&gt;&lt;/span&gt; /&#x27;ɑːkaɪv/&lt;/td&gt;&lt;td&gt;❌ /&#x27;ətʃɪv/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ASCII&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[20]&lt;/sup&gt;&lt;/span&gt; /&#x27;æski/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[21]&lt;/sup&gt;&lt;/span&gt; /ˈæski/&lt;/td&gt;&lt;td&gt;❌ /ɑːsk/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aspect&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[22]&lt;/sup&gt;&lt;/span&gt; /&#x27;æspekt/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[23]&lt;/sup&gt;&lt;/span&gt; /ˈæspekt/&lt;/td&gt;&lt;td&gt;❌ /ə&#x27;spekt/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;async&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[24]&lt;/sup&gt;&lt;/span&gt; /əˈsɪŋk/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[25]&lt;/sup&gt;&lt;/span&gt; /æˈsɪŋk/&lt;/td&gt;&lt;td&gt;❌ /&#x27;æsɪŋk/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cache&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[26]&lt;/sup&gt;&lt;/span&gt; /kæʃ/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[27]&lt;/sup&gt;&lt;/span&gt; /kæʃ/&lt;/td&gt;&lt;td&gt;❌ /kætʃ/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;canal&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[28]&lt;/sup&gt;&lt;/span&gt; /kəˈnæl/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[29]&lt;/sup&gt;&lt;/span&gt; /kəˈnæl/&lt;/td&gt;&lt;td&gt;❌ /ˈkænl/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;daemon&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[30]&lt;/sup&gt;&lt;/span&gt; /&#x27;diːmən/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[31]&lt;/sup&gt;&lt;/span&gt; /ˈdiːmən/&lt;/td&gt;&lt;td&gt;❌ /dæmən/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;deprecate&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[32]&lt;/sup&gt;&lt;/span&gt; /ˈdeprəkeɪt/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[33]&lt;/sup&gt;&lt;/span&gt; /ˈdeprəkeɪt/&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;deque&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[34]&lt;/sup&gt;&lt;/span&gt; /&#x27;dek/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[35]&lt;/sup&gt;&lt;/span&gt; /dɛk/&lt;/td&gt;&lt;td&gt;❌ /di&#x27;kju/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;digest&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[36]&lt;/sup&gt;&lt;/span&gt; n. /&#x27;dɑɪdʒɛst/ v. /dɑɪ&#x27;dʒɛst/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[37]&lt;/sup&gt;&lt;/span&gt; /daɪˈdʒest,dɪˈdʒest/&lt;/td&gt;&lt;td&gt;❌ /&#x27;dɪgɛst/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Django&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[38]&lt;/sup&gt;&lt;/span&gt; /ˈdʒæŋɡoʊ/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[39]&lt;/sup&gt;&lt;/span&gt; /ˈdʒæŋɡoʊ/&lt;/td&gt;&lt;td&gt;❌ /diˈdʒæŋɡoʊ/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;edition&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[40]&lt;/sup&gt;&lt;/span&gt; /ɪˈdɪʃ(ə)n/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[41]&lt;/sup&gt;&lt;/span&gt; /ɪˈdɪʃn/&lt;/td&gt;&lt;td&gt;❌ /eˈdɪʃn/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;execute&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[42]&lt;/sup&gt;&lt;/span&gt; /ˈeksɪkjuːt/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[43]&lt;/sup&gt;&lt;/span&gt; /ˈeksɪkjuːt/&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;executor&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[44]&lt;/sup&gt;&lt;/span&gt; /ɪɡˈzekjətə(r)/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[45]&lt;/sup&gt;&lt;/span&gt; /ɪɡˈzekjətər/&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;event&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[46]&lt;/sup&gt;&lt;/span&gt; /ɪ&#x27;vent/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[47]&lt;/sup&gt;&lt;/span&gt; /ɪˈvent/&lt;/td&gt;&lt;td&gt;❌ /&#x27;ɪvənt/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;exit&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[48]&lt;/sup&gt;&lt;/span&gt; /ˈeksɪt/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[49]&lt;/sup&gt;&lt;/span&gt; /ˈeksɪt; ˈeɡzɪt/&lt;/td&gt;&lt;td&gt;❌ /ig&#x27;zit/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;facade&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[50]&lt;/sup&gt;&lt;/span&gt; /fə&#x27;sɑːd/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[51]&lt;/sup&gt;&lt;/span&gt; /fəˈsɑːd/&lt;/td&gt;&lt;td&gt;❌ /&#x27;feikeid/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fedora&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[52]&lt;/sup&gt;&lt;/span&gt; /fɪ&#x27;dɔːrə/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[53]&lt;/sup&gt;&lt;/span&gt; /fɪˈdɔːrə/&lt;/td&gt;&lt;td&gt;❌ /&#x27;fedərə/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;format&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[54]&lt;/sup&gt;&lt;/span&gt; /&#x27;fɔːmæt/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[55]&lt;/sup&gt;&lt;/span&gt; /ˈfɔːrmæt/&lt;/td&gt;&lt;td&gt;❌ /fɔ&#x27;mæt/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;gauge&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[56]&lt;/sup&gt;&lt;/span&gt; /ɡeɪdʒ/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[57]&lt;/sup&gt;&lt;/span&gt; /ɡeɪdʒ/&lt;/td&gt;&lt;td&gt;❌ /ɡɑudʒ/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Git&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[58]&lt;/sup&gt;&lt;/span&gt; /ɡɪt/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[59]&lt;/sup&gt;&lt;/span&gt; /ɡɪt/&lt;/td&gt;&lt;td&gt;❌ /dʒɪt/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Grafana&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[60]&lt;/sup&gt;&lt;/span&gt; /grəˈfɑːnˌɑː/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[61]&lt;/sup&gt;&lt;/span&gt; /grəˈfɑːnˌɑː/&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GraphQL&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[62]&lt;/sup&gt;&lt;/span&gt; /græf kju ɛl/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[63]&lt;/sup&gt;&lt;/span&gt; /græf kju ɛl/&lt;/td&gt;&lt;td&gt;❌ /dʒɪgræf kju ɛl/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;height&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[64]&lt;/sup&gt;&lt;/span&gt; /haɪt/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[65]&lt;/sup&gt;&lt;/span&gt; /haɪt/&lt;/td&gt;&lt;td&gt;❌ /heɪt/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;implement&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[66]&lt;/sup&gt;&lt;/span&gt; /&#x27;ɪmplɪm(ə)nt/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[67]&lt;/sup&gt;&lt;/span&gt; /ˈɪmplɪmənt/ /ˈɪmpləˌment/&lt;/td&gt;&lt;td&gt;❌ /ɪm&#x27;plem(ə)nt/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;integer&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[68]&lt;/sup&gt;&lt;/span&gt; /&#x27;ɪntɪdʒə/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[69]&lt;/sup&gt;&lt;/span&gt; /ˈɪntɪdʒər/&lt;/td&gt;&lt;td&gt;❌ /ˈɪntaɪgə/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;issue&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[70]&lt;/sup&gt;&lt;/span&gt; /&#x27;ɪʃuː/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[71]&lt;/sup&gt;&lt;/span&gt; /ˈɪʃuː/&lt;/td&gt;&lt;td&gt;❌ /ˈaɪʃuː/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Java&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[72]&lt;/sup&gt;&lt;/span&gt; /&#x27;dʒɑːvə/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[73]&lt;/sup&gt;&lt;/span&gt; /ˈdʒɑːvə/&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;jpg&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[74]&lt;/sup&gt;&lt;/span&gt; /&#x27;dʒeɪpeɡ/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[75]&lt;/sup&gt;&lt;/span&gt; /&#x27;dʒeɪpeɡ/&lt;/td&gt;&lt;td&gt;❌ /ˈdʒeɪˈpi:ˈdʒiː/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Kubernetes&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[76]&lt;/sup&gt;&lt;/span&gt; /kubз&#x27;netɪs/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[77]&lt;/sup&gt;&lt;/span&gt; /kuːbə˞&#x27;netiz/&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;lambda&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[78]&lt;/sup&gt;&lt;/span&gt; /ˈlæmdə/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[79]&lt;/sup&gt;&lt;/span&gt; /ˈlæmdə/&lt;/td&gt;&lt;td&gt;❌ /ˈlɒŋmdɑ/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Linux&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[80]&lt;/sup&gt;&lt;/span&gt; /&#x27;lɪnəks/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[81]&lt;/sup&gt;&lt;/span&gt; /ˈlaɪnəks/ /ˈlɪnəks/&lt;/td&gt;&lt;td&gt;❌ /ˈlɪnʌks/ /ˈlɪnjuːks/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;locale&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[82]&lt;/sup&gt;&lt;/span&gt; /ləʊ&#x27;kɑːl/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[83]&lt;/sup&gt;&lt;/span&gt; /loʊˈkæl/&lt;/td&gt;&lt;td&gt;❌ /ˈloʊk(ə)l/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Lucene&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[84]&lt;/sup&gt;&lt;/span&gt; /lu&#x27;siːn/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[85]&lt;/sup&gt;&lt;/span&gt; /lu&#x27;siːn/&lt;/td&gt;&lt;td&gt;❌ /&#x27;lu:sən/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;macro&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[86]&lt;/sup&gt;&lt;/span&gt; /ˈmækrəʊ/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[87]&lt;/sup&gt;&lt;/span&gt; /ˈmækroʊ/&lt;/td&gt;&lt;td&gt;❌ /ˈmakroʊ/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;margin&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[88]&lt;/sup&gt;&lt;/span&gt; /&#x27;mɑːdʒɪn/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[89]&lt;/sup&gt;&lt;/span&gt; /ˈmɑːrdʒɪn/&lt;/td&gt;&lt;td&gt;❌ /&#x27;mʌgɪn/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;matrix&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[90]&lt;/sup&gt;&lt;/span&gt; /ˈmeɪtrɪks/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[91]&lt;/sup&gt;&lt;/span&gt; /ˈmeɪtrɪks/&lt;/td&gt;&lt;td&gt;❌ /ˈmɑ:trɪks/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;maven&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[92]&lt;/sup&gt;&lt;/span&gt; /&#x27;meɪvn/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[93]&lt;/sup&gt;&lt;/span&gt; /ˈmeɪvn/&lt;/td&gt;&lt;td&gt;❌ /&#x27;maːvn/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;max&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[94]&lt;/sup&gt;&lt;/span&gt; /mæks/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[95]&lt;/sup&gt;&lt;/span&gt; /mæks/&lt;/td&gt;&lt;td&gt;❌ /mɑ:ks/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;nginx&lt;/td&gt;&lt;td&gt;Engine X&lt;/td&gt;&lt;td&gt;Engine X&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;null&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[96]&lt;/sup&gt;&lt;/span&gt; /nʌl/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[97]&lt;/sup&gt;&lt;/span&gt; /nʌl/&lt;/td&gt;&lt;td&gt;❌ /naʊ/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OS X&lt;/td&gt;&lt;td&gt;OS ten&lt;/td&gt;&lt;td&gt;OS ten&lt;/td&gt;&lt;td&gt;❌ /ɔs eks/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;parameter&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[98]&lt;/sup&gt;&lt;/span&gt; /pə&#x27;ræmɪtə/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[99]&lt;/sup&gt;&lt;/span&gt; /pəˈræmɪtər/&lt;/td&gt;&lt;td&gt;❌ /&#x27;pærəmɪtə/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;privilege&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[100]&lt;/sup&gt;&lt;/span&gt; /&#x27;prɪvəlɪdʒ/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[101]&lt;/sup&gt;&lt;/span&gt; /ˈprɪvəlɪdʒ/&lt;/td&gt;&lt;td&gt;❌ /&#x27;prɪvɪlɪdʒ/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Prometheus&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[102]&lt;/sup&gt;&lt;/span&gt; /prə-ˈmē-thē-əs/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[103]&lt;/sup&gt;&lt;/span&gt; /pro&#x27;miθɪəs/&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;putty&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[104]&lt;/sup&gt;&lt;/span&gt; /ˈpʌti/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[105]&lt;/sup&gt;&lt;/span&gt; /ˈpʌti/&lt;/td&gt;&lt;td&gt;❌ /ˈpuːti/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;query&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[106]&lt;/sup&gt;&lt;/span&gt; /&#x27;kwɪəri/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[107]&lt;/sup&gt;&lt;/span&gt; /ˈkwɪri/&lt;/td&gt;&lt;td&gt;❌ /&#x27;kwaɪri/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;resume&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[108]&lt;/sup&gt;&lt;/span&gt; /rɪ&#x27;zju:m/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[109]&lt;/sup&gt;&lt;/span&gt; /rɪˈzuːm/&lt;/td&gt;&lt;td&gt;❌ /rɪ&#x27;sju:m/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;resolved&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[110]&lt;/sup&gt;&lt;/span&gt; /rɪ&#x27;zɒlvd/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[111]&lt;/sup&gt;&lt;/span&gt; /rɪˈzɑːlvd/&lt;/td&gt;&lt;td&gt;❌ /rɪ&#x27;səʊvd/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;retina&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[112]&lt;/sup&gt;&lt;/span&gt; /&#x27;retɪnə/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[113]&lt;/sup&gt;&lt;/span&gt; /ˈretɪnə/&lt;/td&gt;&lt;td&gt;❌ /ri&#x27;tina/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;route&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[114]&lt;/sup&gt;&lt;/span&gt; /ruːt/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[115]&lt;/sup&gt;&lt;/span&gt; /ruːt,raʊt/&lt;/td&gt;&lt;td&gt;❌ /rəʊt/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;safari&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[116]&lt;/sup&gt;&lt;/span&gt; /sə&#x27;fɑːrɪ/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[117]&lt;/sup&gt;&lt;/span&gt; /səˈfɑːri/&lt;/td&gt;&lt;td&gt;❌ /sæfərɪ/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;scheme&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[118]&lt;/sup&gt;&lt;/span&gt; /skiːm/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[119]&lt;/sup&gt;&lt;/span&gt; /skiːm/&lt;/td&gt;&lt;td&gt;❌ /s&#x27;kæmə/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;scala&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[120]&lt;/sup&gt;&lt;/span&gt; /ˈskɑːlɑ/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[121]&lt;/sup&gt;&lt;/span&gt; /ˈskɑːlɑ/&lt;/td&gt;&lt;td&gt;❌ /ˈskæːlɑ/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SQL&lt;/td&gt;&lt;td&gt;/ˈsiːkwəl/ /ˈesˈkjuːˈel/&lt;/td&gt;&lt;td&gt;/ˈsiːkwəl/ /ˈesˈkjuːˈel/&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sudo&lt;/td&gt;&lt;td&gt;/&#x27;suːduː/&lt;/td&gt;&lt;td&gt;/&#x27;suːduː/&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;suite&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[122]&lt;/sup&gt;&lt;/span&gt; /swiːt/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[123]&lt;/sup&gt;&lt;/span&gt; /swiːt/&lt;/td&gt;&lt;td&gt;❌ /sjuːt/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;telemetry&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[124]&lt;/sup&gt;&lt;/span&gt; /təˈlemətri/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[125]&lt;/sup&gt;&lt;/span&gt; /təˈlemətri/&lt;/td&gt;&lt;td&gt;❌ /ˈtelɪmətri/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;thymeleaf&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[126]&lt;/sup&gt;&lt;/span&gt; /ˈtaɪmˌlɪːf/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[127]&lt;/sup&gt;&lt;/span&gt; /ˈtaɪmˌlɪːf/&lt;/td&gt;&lt;td&gt;❌ /θiːmɪlɪːf/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;variable&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[128]&lt;/sup&gt;&lt;/span&gt; /&#x27;veəriəbl/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[129]&lt;/sup&gt;&lt;/span&gt; /ˈveriəbl,ˈværiəbl/&lt;/td&gt;&lt;td&gt;❌ /və&#x27;raiəbl/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;verbose&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[130]&lt;/sup&gt;&lt;/span&gt; /vɜːˈbəʊs/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[131]&lt;/sup&gt;&lt;/span&gt; /vɜːrˈboʊs/&lt;/td&gt;&lt;td&gt;❌ /&#x27;vɜːrboʊs/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;width&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[132]&lt;/sup&gt;&lt;/span&gt; /wɪdθ/&lt;/td&gt;&lt;td&gt;&lt;span&gt;🔊&lt;sup&gt;[133]&lt;/sup&gt;&lt;/span&gt; /wɪdθ,wɪtθ/&lt;/td&gt;&lt;td&gt;❌ /waɪdθ/&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; 中国程序员容易发音错误的单词: &lt;em&gt;https://github.com/shimohq/chinese-programmer-wrong-pronunciation&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=access&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=access&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[4]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=admin&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=admin&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[6]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=agile&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[7]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=agile&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[8]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=amazon&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[9]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=amazon&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[10]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=Angular&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[11]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=Angular&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[12]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=AJAX&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[13]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=AJAX&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[14]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=alias&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[15]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=alias&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[16]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=Apache&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[17]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=Apache&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[18]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=archive&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[19]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=archive&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[20]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=ascii&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[21]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=ascii&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[22]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=aspect&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[23]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=aspect&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[24]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=async&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[25]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=async&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[26]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=cache&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[27]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=cache&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[28]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=canal&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[29]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=canal&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[30]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=Daemon&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[31]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=Daemon&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[32]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=deprecate&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[33]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=deprecate&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[34]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=deque&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[35]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=deque&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[36]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=digest&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[37]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=digest&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[38]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=Django&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[39]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=Django&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[40]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=edition&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[41]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=edition&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[42]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=execute&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[43]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=execute&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[44]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=executor&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[45]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=executor&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[46]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=event&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[47]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=event&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[48]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=exit&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[49]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=exit&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[50]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=facade&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[51]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=facade&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[52]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=fedora&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[53]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=fedora&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[54]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=format&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[55]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=format&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[56]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=gauge&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[57]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=gauge&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[58]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=git&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[59]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=git&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[60]&lt;/code&gt; 🔊: &lt;em&gt;http://www.howtopronounce.cc/file/e204a97ed1e440c5ab15ea0117beb955.mp3&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[61]&lt;/code&gt; 🔊: &lt;em&gt;http://www.howtopronounce.cc/file/e204a97ed1e440c5ab15ea0117beb955.mp3&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[62]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=GraphQL&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[63]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=GraphQL&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[64]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=height&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[65]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=height&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[66]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=implement&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[67]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=implement&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[68]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=integer&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[69]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=integer&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[70]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=issue&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[71]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=issue&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[72]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=java&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[73]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=java&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[74]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=JPEG&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[75]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=JPEG&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[76]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=Kubernetes&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[77]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=Kubernetes&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[78]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=lambda&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[79]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=lambda&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[80]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=linux&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[81]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=linux&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[82]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=locale&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[83]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=locale&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[84]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=lucene&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[85]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=lucene&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[86]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=macro&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[87]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=macro&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[88]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=margin&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[89]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=margin&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[90]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=matrix&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[91]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=matrix&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[92]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=maven&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[93]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=maven&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[94]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=max&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[95]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=max&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[96]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=null&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[97]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=null&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[98]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=parameter&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[99]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=parameter&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[100]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=privilege&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[101]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=privilege&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[102]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=prometheus&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[103]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=prometheus&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[104]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=putty&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[105]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=putty&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[106]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=query&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[107]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=query&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[108]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=resume&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[109]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=resume&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[110]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=resolved&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[111]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=resolved&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[112]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=retina&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[113]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=retina&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[114]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=route&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[115]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=route&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[116]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=safari&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[117]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=safari&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[118]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=scheme&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[119]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=scheme&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[120]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=scala&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[121]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=scala&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[122]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=suite&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[123]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=suite&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[124]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=telemetry&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[125]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=telemetry&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[126]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=thymeleaf&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[127]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=thymeleaf&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[128]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=variable&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[129]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=variable&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[130]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=verbose&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[131]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=verbose&amp;amp;type=2&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[132]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=width&amp;amp;type=1&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[133]&lt;/code&gt; 🔊: &lt;em&gt;https://dict.youdao.com/dictvoice?audio=width&amp;amp;type=2&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>