<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6301a280edf2a2d67f99bba7dd4525fd</guid>
<title>这 5 个 GitHub 项目 + 3 个网站，助你一飞冲天</title>
<link>https://toutiao.io/k/ql650fu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小伙伴们周末好呀，这次来更新一波学习资源啦~ 👍&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前推荐过一些书，这次我们就来看看 &lt;strong&gt;4ye&lt;/strong&gt; 平时常关顾的一些学习网站叭！😋&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（同时会更新在菜单栏的 &lt;strong&gt;宝藏资源&lt;/strong&gt; 中，方便查找）&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;资源一览&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6080808080808081&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8ul4cnxKiamJ1rM0y4BL5aqicteOicQlLEZExVYSBeRuLqO5SvDkuvoNddA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;990&quot;/&gt;&lt;figcaption&gt;image-20210807235820378&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;CyC2018 / CS-Notes&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高达 &lt;strong&gt;136K&lt;/strong&gt; star 的项目! 😄&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;📚 技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概览图&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址👉  https://github.com/CyC2018/CS-Notes&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.762043795620438&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8uo9iaL5E3iayzKV0bW0ias0yyibwRWoe1NFFZDACTcvjne5xRloJgnSUusw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;685&quot;/&gt;&lt;figcaption&gt;image-20210807210235663&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;特点&lt;span/&gt;&lt;/h4&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Snailclimb / JavaGuide&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Guide哥的，高达 &lt;strong&gt;109k&lt;/strong&gt; star ！😄&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;「Java学习+面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概览图&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址 👉  https://github.com/Snailclimb/JavaGuide&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐国内地址👇（&lt;strong&gt;在线文档&lt;/strong&gt;）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://snailclimb.gitee.io/javaguide/#/&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.49222797927461137&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8uNEYNGjiaRYNzWkE3vAQibC7ouk23QE0aECZShPenock2pzaCAwdzAchw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1351&quot;/&gt;&lt;figcaption&gt;image-20210807213513537&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;特点&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;针对性比较强，主要是 &lt;code&gt;Java&lt;/code&gt; 以及常见的一些技术&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基础，进阶&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;面试&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你不知道怎么复习，打开网站文档看看目录就能很快明白了 😄&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;macrozheng / mall&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个超级棒的电商项目! 高达 &lt;strong&gt;51.6k&lt;/strong&gt; star ！😄&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且还有两个配套的项目！太顶了！👍&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;mall项目是一套电商系统，包括前台商城系统及后台管理系统，基于SpringBoot+MyBatis实现，采用Docker容器化部署。前台商城系统包含首页门户、商品推荐、商品搜索、商品展示、购物车、订单流程、会员中心、客户服务、帮助中心等模块。后台管理系统包含商品管理、订单管理、会员管理、促销管理、运营管理、内容管理、统计报表、财务管理、权限管理、设置等模块。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概览图&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址都在这了👇&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;http://www.macrozheng.com/#/README&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;https://github.com/macrozheng/mall-learning （配套的学习教程）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;https://github.com/macrozheng/mall-swarm (微服务版)&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.47533632286995514&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8up1MwvXAefWvV6t6pUtS2FIq11oeGictsUOlIWCU1SjjTgk0Dhs3M3pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1338&quot;/&gt;&lt;figcaption&gt;image-20210807223251628&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;特点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想找项目练练手的话，这是一个非常不错的选择~  从单体到微服务，都给你安排得明明白白的了，而且可以在线体验，有专门的教程！👍👍&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;doocs / advanced-java&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个开源组织 &lt;code&gt;doocs&lt;/code&gt; ， 哈哈 我加了好久了，还没贡献过（尴尬😅）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里只是列举了其中一个项目，还有其他好几个非常顶的，包括 &lt;code&gt;JVM&lt;/code&gt; 和 &lt;strong&gt;框架源码&lt;/strong&gt; ，算法，书籍等👍👍&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Core Interview Questions &amp;amp; Answers For Experienced Java(Backend) Developers | 互联网 Java 工程师进阶知识完全扫盲：涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概览图&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有这么多非常顶的项目！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址 👉   https://github.com/doocs&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5214723926380368&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8unBWy6yrt8lZdwnWo5l51wNOkKz3AQSqVmrPvzc4JcYda902d39z9sg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1141&quot;/&gt;&lt;figcaption&gt;image-20210807225219109&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中一个在线文档&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址 👉  https://adjava.netlify.app/#/?id=%e4%ba%92%e8%81%94%e7%bd%91-java-%e5%b7%a5%e7%a8%8b%e5%b8%88%e8%bf%9b%e9%98%b6%e7%9f%a5%e8%af%86%e5%ae%8c%e5%85%a8%e6%89%ab%e7%9b%b2&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4663133989401968&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8uibCpudSiaaFqcpphFXk0eWFDepWfhrYvjyYiaiaEhrSYk1WbcKmicPEUU5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1321&quot;/&gt;&lt;figcaption&gt;image-20210807225300343&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;特点&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;超级多优秀的文章 👍&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有源码分析专区！👍&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;进阶大厂必看系列 👍&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反正我把它当作进阶修炼的地方 哈哈哈哈 😄&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;shishan100 / Java-Interview-Advanced&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个就不用过多介绍了 哈哈，从上面 &lt;code&gt;doocs&lt;/code&gt; 仓库就知道这里的文章质量得多顶 ，而且确确实实帮我打开了眼界！😋&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;中华石杉--互联网Java进阶面试训练营&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概览图&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址 👉  https://github.com/shishan100/Java-Interview-Advanced&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6843501326259946&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8uAratM3uHyEwF9n03uDGtO5aG1TvHW1WsfHMQv87sd5cqq7f74gn2oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;754&quot;/&gt;&lt;figcaption&gt;image-20210807230930031&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;特点&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;进阶大厂必看系列 👍&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主要是 &lt;strong&gt;高并发&lt;/strong&gt; 类的文章👍&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业内很有名！&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;并发编程网&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到并发，就不得不提下这个网站了，里面的内容几乎都是关于并发的，是提升并发能力的好地方 😝&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就是网站的主题有点老了，不知道为啥看着就像是用 &lt;code&gt;wordpress&lt;/code&gt; 搭建的😂&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概览图&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址 👉  http://ifeve.com/&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1805243445692884&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8unWvlqRkt2gFCPg4QS0uaiaIYxjlKyejzsPuiaXfDRAwzVUXNa8lukNpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1335&quot;/&gt;&lt;figcaption&gt;image-20210807231718781&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;特点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高质量的并发文章，如果你对并发有啥不懂的话，这里肯定是个不错的选择！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且还有部分翻译了国外大佬的文章，能很好地解惑😄&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;阿里云知行动手实验室&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阿里的技术那没得说 哈哈&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且这个真的是超级赞，以前我们还要自己装环境啥的，跟着文档或者视频，一步步来，现在好了，直接云端给你安排了，直接在这里练习！！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那话咋说来的 ， 就吹爆！哈哈哈&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概览图&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址 👉  [https://start.aliyun.com](http://ifeve.com/)&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.46795366795366794&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8uPpibaqtW4dLLf1fWEibA1Nt9Pfb1Bu8EOBOYGELgDeRAquBibDga7HxCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1295&quot;/&gt;&lt;figcaption&gt;image-20210807232644268&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我选这个 &lt;strong&gt;Arthas 基础教程&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接左边文档，右边 &lt;code&gt;shell&lt;/code&gt; 窗口，这真的太方便了！！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.48535871156661786&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8uYsDG7SZ8RUSAZv0K7Qicx7Vdic7sTFzlUzPv3ibryHLyqpo77nIibRen3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1366&quot;/&gt;&lt;figcaption&gt;image-20210807233007404&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;特点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真的很赞，直接边看文档边敲代码，不用捣鼓环境先了！👍&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;力扣&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这肯定得推荐呀，因为 &lt;strong&gt;数据结构和算法&lt;/strong&gt; 真的特别重要，特别是越低层的开发，越重要！😄&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;crud 太无聊了，平时没事可以刷刷题锻炼下 哈哈 有种做数学题的感觉 还是很有意思的😝&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概览图&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址 👉  https://leetcode-cn.com/problemset/all&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到这里有非常多&lt;strong&gt;专业的讲解&lt;/strong&gt;！，&lt;strong&gt;超级棒(๑•̀ㅂ•́)و✧&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.45018450184501846&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8uvsZGqicllrsNmhMdVkv7PzGAI5w0p788icx4qB5ia6nd73S0GpfJ6kSMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1355&quot;/&gt;&lt;figcaption&gt;image-20210807234151768&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;特点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有很多优秀的解析！现在不用担心不会做了 哈哈😄&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;凑个数🤣&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自己的仓库 &lt;strong&gt;(lll￢ω￢)&lt;/strong&gt; ，就 &lt;code&gt;GitHub&lt;/code&gt; 主页好看些了 哈哈哈&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;不定期推荐优秀的学习资源，帮助你快速成长！共同进步，多摸鱼 哈哈哈&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址 👉  https://github.com/Java4ye&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.45298507462686566&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8ubx9a2mYhHXOOZnJRaFDHsw6xXcjQDvPhlMGFNxxvs84x7FHIWxo5Kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1340&quot;/&gt;&lt;figcaption&gt;image-20210807234617130&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;额，会不定期上传一些项目啦，哈哈 有时间再好好折腾下🐷&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3646055437100213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8u1rmIx7DklXWYJhgOwR8zrVkaC8Fzq6RkG4YFZzpK4bRLR1yaSWGWvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;938&quot;/&gt;&lt;figcaption&gt;image-20210807235451336&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老规矩，画个图叭😝&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6487964989059081&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8u9B6z4TOzyicuvoxic3OhFhtmiaIKsCOyZtibmwx3m0pWia06h1vmmsFHsDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot;/&gt;&lt;figcaption&gt;image-20210808002110587&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;别只收藏吃灰啦！&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这话也是对我自己说  哈哈哈哈&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9866220735785953&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFLt03csToVvV7xiaGPViaa8ustGExAQuOdJ6F3NfYjicJUdhbWiaRCcMdILdpFULicrSJEfpeXIAwzMEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;299&quot;/&gt;&lt;figcaption&gt;image-20210808091424597&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最后&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎小伙伴们来一起探讨问题~&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果你觉得本篇文章还不错的话，那&lt;strong&gt;拜托再点点赞&lt;/strong&gt;支持一下呀😝&lt;/p&gt;&lt;p&gt;&lt;strong&gt;让我们开始这一场意外的相遇吧！~&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;欢迎留言！谢谢支持！ヾ(≧▽≦*)o 冲冲冲！！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;我是4ye 咱们下期应该……很快再见！！&lt;/strong&gt; 😆&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>60710272a045417f743b0e8fcf58e083</guid>
<title>字节跳动正式开源 CloudWeGo</title>
<link>https://toutiao.io/k/c4yzbh1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dbb1e932bf335fba4ec111bd7a04bc57</guid>
<title>庖丁解牛：图解 MySQL 8.0 优化器查询解析篇</title>
<link>https://toutiao.io/k/inuemwy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFffVk6Sa8u3iatvUicEakd7jESC6SsFHd0usAX4zbS6m4dKia5XWKRSyFg6A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一  背景和架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们都知道，利用编写程序来动态实现我们应用所需要的逻辑，从而程序执行时得到我们需要的结果。那么数据库就是一种通过输入SQL字符串来快速获取数据的应用。当然，假设没有数据库这种系统应用，用程序如何实现呢？我们可能会发现，即使不管数据如何存储、数据是否并发访问，仍然需要不断通过修改程序处理不同应用对数据的不同请求。比如大数据领域，我们通常通过非关系型数据库的API，实现对数据的获取。然而这种方式虽然入门简单，但是维护极难，而且通用性不强，即使不断进行软件架构设计或者抽象重构，仍然需要不断地变换应用，这也是为何非关系型数据库回头拥抱数据库SQL优化器的原因。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.62&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFff8G64xskEtxt5SrB2Hq4EobJ8QC0IPIJCu8qFTOXNosu45qvGbk06nA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;SQL优化器本质上是一种高度抽象化的数据接口的实现，经过该设计，客户可以使用更通用且易于理解的SQL语言，对数据进行操作和处理，而不需要关注和抽象自己的数据接口，极大地解放了客户的应用程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文就来通过图形解说的方式介绍下MySQL 8.0 SQL优化器如何把一个简单的字符串（SQL），变成数据库执行器可以理解的执行序列，最终将数据返还给客户。强大的优化器是不需要客户关注SQL如何写的更好来更快获得需要的数据，因此优化器对原始SQL一定会做一些等价的变化。在&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247504340&amp;amp;idx=1&amp;amp;sn=d061b217a5be9e245964bb5d74a3887d&amp;amp;chksm=e92aecdbde5d65cdb6841d03e3ef124cce2e0d50428e1f3aae7a81582864334d31fa5266e7dd&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《MySQL 8.0 Server层最新架构详解》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《MySQL 8.0 Server层最新架构详解》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;一文中我们重点介绍了MySQL最新版本关于Server层解析器、优化器和执行器的总体介绍，包括一些代码结构和变化的详细展示，并且通过simple_joins函数抛砖引玉展示了MySQL优化器在逻辑变换中如何简化嵌套Join的优化。本文我们会一步一步带你进入神奇的优化器细节，详细了解优化器优化部分的每个步骤如何改变着一个SQL最终的执行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文基于最新MySQL8.0.25版本，因为优化器转换部分篇幅比较长，我们分成两篇文章来介绍，第一部分介绍基于基本结构的Setup和Resolve的解析转换过程，第二部分介绍更为复杂的子查询、分区表和连接的复杂转换过程，大纲如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;Setup and Resolve&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_tables : Set up table leaves in the query block based on list of tables.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;resolve_placeholder_tables/merge_derived/setup_table_function/setup_materialized_derived : Resolve derived table, view or table function references in query block.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_natural_join_row_types : Compute and store the row types of the top-most NATURAL/USING joins.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_wild : Expand all &#x27;*&#x27; in list of expressions with the matching column references.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_base_ref_items : Set query_block&#x27;s base_ref_items.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_fields : Check that all given fields exists and fill struct with current data.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_conds : Resolve WHERE condition and join conditions&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_group : Resolve and set up the GROUP BY list.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;m_having_cond-&amp;gt;fix_fields : Setup the HAVING clause.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;resolve_rollup : Resolve items in SELECT list and ORDER BY list for rollup processing&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;resolve_rollup_item : Resolve an item (and its tree) for rollup processing by replacing items matching grouped expressions with Item_rollup_group_items and updating properties (m_nullable, PROP_ROLLUP_FIELD). Also check any GROUPING function for incorrect column.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_order : Set up the ORDER BY clause.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;resolve_limits : Resolve OFFSET and LIMIT clauses.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Window::setup_windows1: Set up windows after setup_order() and before setup_order_final()&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_order_final: Do final setup of ORDER BY clause, after the query block is fully resolved.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_ftfuncs : Setup full-text functions after resolving HAVING&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;resolve_rollup_wfs : Replace group by field references inside window functions with references in the presence of ROLLUP.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;二  详细转换过程&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;转换的整个框架是由Query_expression到Query_block调用prepare函数(sql/sql_resolver.cc)并且根据不同转换规则的要求自顶向下或者自底向上的过程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.20859375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFffqV6NgkBzZDnfF8RV1SUlAlxp4UJzETRgiaBfKfs9WPsoXb4W6OteYbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;1  传递null到join的内表列表（propagate_nullability）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;prepare开始先要处理nullable table，它指的是table可能包含全为null的row，根据JOIN关系（top_join_list）null row可以被传播。如果能确定一个table为nullable会使得一些优化退化，比如access method不能为EQ_REF、outer join不能优化为inner join等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;2  解析设置查询块的leave_tables（setup_tables）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  t1.c1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; t1,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     (&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       t2.c1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; t2,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          (&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            t3.c1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; t3&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;UNION&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            t4.c1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; t4) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; t3a) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; t2a;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;未在setup_table调用之前，每个Query_block的leaf_tables是为0的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42323651452282157&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naI5zpdkI0MIeDpL35cIS4qtCHqxsNDQ4VXTs8bxgva1r6xg31R5dwO4MDRDKQM0jrmtJibkQFkZe4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1205&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该函数的作用就是构建leaf_tables，包括base tables和derived tables列表，用于后续的优化。setup_tables并不会递归调用，而是只解决本层的tables，并统计出本层derived table的个数。但是随后会调用resolve_placeholder_tables()-&amp;gt;resolve_derived()-&amp;gt;derived(Query_expression)::prepare-&amp;gt;Query_block::prepare来专门递归处理derived table对应的Query_expression。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFff6RUMyQEOOBdMv05mHZP4IXBKAeibjtDGLQa2zg92OKfPCaPjUjOicGibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1160&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来我们根据prepare的调用顺序，继续看下针对于derived table处理的函数resolve_placeholder_tables。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;3  解析查询块Derived Table、View、Table函数 （resolve_placeholder_tables）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这个函数用于对derived table、view和table function的处理，如果该table已经merged过了，或者是由于使用transform_grouped_to_derived()被调用到，已经决定使用materialized table方式，则直接忽略。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.244&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFffUqS0a5Xbiau1Ouyeibpl4iagG2os0yU8AGOwTkvePJ7tNlTMqAJvzibbvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;前面已经介绍过resolve_derived()的作用，我们重点介绍merge_derived()函数，merge_derived是改变Query_expression/Query_block框架结构，将derived table或者view合并到到query block中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;merge_derived 处理和合并Derived table&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;1）merge_derived transformation的先决条件&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;外层query block是否允许merge（allow_merge_derived）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;外层query expression的子查询为nullptr，derived table是第一层子查询&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;外层的外层query block可以allow_merge_derived=true，或者不包括外层的外层query block话是否为SELECT/SET&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;外层lex是否可以支持merge（lex-&amp;gt;can_use_merged()+lex-&amp;gt;can_no_use_merged()）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;derived table是否已经被标记为需要物化materialize，比如创建视图的方法是CREATE ALGORITHM=TEMPTABLE VIEW（derived_table-&amp;gt;algorithm == VIEW_ALGORITHM_TEMPTABLE）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;整个dervived table所在的查询表达式单元中，不能是（Query_expression::is_mergeable() ）：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Union查询&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;包含聚集、HAVING、DISTINCT、WINDOWS或者LIMIT&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;HINT或者optimizer_switch没有禁止derived_merge；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;heuristic建议合并(derived_query_expressionmerge_heuristic())；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果derived table包含的子查询SELECT list依赖于自己的列时，不支持；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果是dependant subquery需要多次执行时，不支持；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;derived table中如果查询块包含SEMI/ANTI-JOIN，并指定STRAIGHT_JOIN时，不支持；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果合并的derived table和现有query block的leaf table count大约 MAX_TABLES时，不支持；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;2）merge_derived transformation的转换过程&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;利用derived_table-&amp;gt;nested_join结构来辅助处理OUTER JOIN的情况。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;把derived table中的表merge到NESTED_JOIN结构体（derived_table-&amp;gt;merge_underlying_tables()）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将derived table中的所有表连接到父查询的table_list列表中，同时把derived table从父查询中删除。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对父查询的所有相关数据结构进行重新计算（leaf_table_count、derived_table_count、table_func_count、materialized_derived_table_count、has_sj_nests、has_aj_nests、partitioned_table_count、cond_count、between_count、select_n_having_items）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;传播设置父查询OPTION_SCHEMA_TABLE（add_base_options()）和如果是外查询JOIN的内表，传播设置nullable属性（propagate_nullability()）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;合并derived table的where条件到外查询中（merge_where()）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;建立对derived table需要获取的列的引用（create_field_translation()）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将Derived table的结构从父查询中删除（exclude_level()）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将derived table中的列或者表的重命名合并到父查询（fix_tables_after_pullout()/repoint_contexts_of_join_nests()）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;因为已经把derived table中包含的表merge到了父查询，所以需要对TABLE_LIST中的表所在的位置进行重新定位（remap_tables()）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将derived table合并到父查询之后，需要重新修改原来derived table中所有对derived table中所有列的引用（fix_tables_after_pullout()）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果derived table中包含ORDER BY语句，如果满足下列条件，derived table将会保留ORDER BY并合并到父查询中，其他情况ORDER BY将会被忽略掉：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果父查询允许排序并且正好是只有derived table&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不是一个UNION&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可以有WHERE条件，但是不能有group by或聚合函数&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;本身并不是有序的&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;过程简化为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.34453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFffCUes7cd9pHLMNbNCJicAAutB4gOaVb70ibFy0cwsIicBDDe92aJo3jmMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;merge_derived 图解过程&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;看起来官方的derived merge还是不够完美，无法自底向上的递归merge&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;包含的opt trace：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;trace_derived.add_utf8_table(derived_table)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       .&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;select#&quot;&lt;/span&gt;, derived_query_block-&amp;gt;select_number)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       .&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;merged&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;trace_derived.add_alnum(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;transformations_to_derived_table&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;removed_ordering&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该优化可以通过set optimizer_switch=&quot;derived_merge=on/off&quot;来控制。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;setup_materialized_derived 设置物化Derived Table&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于剩下不能采用 merge 算法的 derived table ，会转为materialize 物化方式去处理。但此时只是做一些变量设置等预处理，实际的物化执行是在executor阶段执行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_materialized_derived_tmp_table(): 设置一个临时表包含物化Derived Table的所有行数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;check_materialized_derived_query_blocks(): 设置属于当前Derived Table所在的查询块结构。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;trace_derived.add_utf8_table(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       .&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;select#&quot;&lt;/span&gt;, derived-&amp;gt;first_query_block()-&amp;gt;select_number)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       .&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;materialized&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;setup_table_function 处理表函数&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果 query block 中有 table function，整个过程会处理两遍。第一遍会跳过 table function 的 table ，第二遍才专门再对table function 的 table 执行一遍上述逻辑。这里的考虑应该是先 resolve 了外部环境（相对于table function），因为有可能函数参数会有依赖外部的 derived table。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;trace_derived.add_utf8_table(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       .add_utf8(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;function_name&quot;&lt;/span&gt;, func_name, func_name_len)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       .&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;materialized&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;4  将SELECT *的通配符展开成具体的fields（setup_wild）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.38515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFffJPO5z4fwAicA7Hotia6PrMD0UjtMO8xYsgicAsEeLhicTeM1Std3qFTibVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;5  建立Query_block级别的base_ref_items（setup_base_ref_items)&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;base_ref_items记录了所有Item的位置，方便查询块的其他Item可以进行引用，或者通过Item_ref及其Item_ref子类进行直接引用，例如子查询的引用（Item_view_ref）、聚合函数引用（Item_aggregate_ref）、外查询列的引用（Item_outer_ref）、subquery 子查询产生NULL value的引用辅助（Item_ref_null_helper）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举例说明比较复杂的Item_outer_ref：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.45703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFffvB4g6SZwpEiafN12FNMttTTcF9YGIicCaPqnGm16EQz2rPVPkUpc5ogg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;6  对select_fields进行fix_fields()和列权限检查（setup_fields）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;下图是比较复杂的带子查询的fixed field过程。有些field和表关联，有的要添加相应的Item_xxx_ref引用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFff19knesLIoZenTuF3ygkqXvXK481V6Hic2tX8oAgHLPtgyuhYa0ok6Ag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;7  解析和fixed_fields WHERE条件和Join条件（setup_conds）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;setup_join_cond如果有nested_join会递归调用setup_join_cond进行解析和设置。这里也顺带介绍下simplify_const_condition函数的作用，如果发现可以删除的const Item，则会用Item_func_true/Item_func_false来替代整个的条件，如图。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.20546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFff1gt7XAesA1OWsyspeJgtQxr71XJwfLXRlN7c1AXI0UjBBD6XtEfktQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;8  解析和设置ROLLUP语句（resolve_rollup）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在数据库查询语句中，在 GROUP BY 表达式之后加上 WITH ROLLUP 语句，可以使得通过单个查询语句来实现对数据进行不同层级上的分析与统计。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SELECT YEAR,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       country,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       product,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       SUM(profit) AS profit&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;FROM sales&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;GROUP BY YEAR,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         country,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         product WITH ROLLUP;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+------+---------+------------+--------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| year |&lt;/span&gt; country &lt;span class=&quot;code-snippet__params&quot;&gt;| product    |&lt;/span&gt; profit &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+------+---------+------------+--------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| Finland |&lt;/span&gt; Computer   &lt;span class=&quot;code-snippet__params&quot;&gt;|   1500 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2000 |&lt;/span&gt; Finland &lt;span class=&quot;code-snippet__params&quot;&gt;| Phone      |&lt;/span&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| Finland |&lt;/span&gt; NULL       &lt;span class=&quot;code-snippet__params&quot;&gt;|   1600 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2000 |&lt;/span&gt; India   &lt;span class=&quot;code-snippet__params&quot;&gt;| Calculator |&lt;/span&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| India   |&lt;/span&gt; Computer   &lt;span class=&quot;code-snippet__params&quot;&gt;|   1200 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2000 |&lt;/span&gt; India   &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL       |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;1350&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| USA     |&lt;/span&gt; Calculator &lt;span class=&quot;code-snippet__params&quot;&gt;|     75 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2000 |&lt;/span&gt; USA     &lt;span class=&quot;code-snippet__params&quot;&gt;| Computer   |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;1500&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| USA     |&lt;/span&gt; NULL       &lt;span class=&quot;code-snippet__params&quot;&gt;|   1575 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2000 |&lt;/span&gt; NULL    &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL       |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;4525&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2001&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| Finland |&lt;/span&gt; Phone      &lt;span class=&quot;code-snippet__params&quot;&gt;|     10 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2001 |&lt;/span&gt; Finland &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL       |&lt;/span&gt;     &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2001&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| USA     |&lt;/span&gt; Calculator &lt;span class=&quot;code-snippet__params&quot;&gt;|     50 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2001 |&lt;/span&gt; USA     &lt;span class=&quot;code-snippet__params&quot;&gt;| Computer   |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;2700&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2001&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| USA     |&lt;/span&gt; TV         &lt;span class=&quot;code-snippet__params&quot;&gt;|    250 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2001 |&lt;/span&gt; USA     &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL       |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;3000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2001&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL    |&lt;/span&gt; NULL       &lt;span class=&quot;code-snippet__params&quot;&gt;|   3010 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| NULL |&lt;/span&gt; NULL    &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL       |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;7535&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+------+---------+------------+--------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;相当于做了下面的查询：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SELECT *&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;FROM&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  (SELECT YEAR,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          country,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          product,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          SUM(profit) AS profit&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   FROM sales&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   GROUP BY YEAR,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            country,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            product&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   UNION ALL SELECT YEAR,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    country,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    NULL,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    SUM(profit) AS profit&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   FROM sales&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   GROUP BY YEAR,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            country&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   UNION ALL SELECT YEAR,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    NULL,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    NULL,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    SUM(profit) AS profit&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   FROM sales&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   GROUP BY YEAR&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   UNION ALL SELECT NULL,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    NULL,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    NULL,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    SUM(profit) AS profit&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   FROM sales) AS sum_table&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ORDER BY YEAR, country, product;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+------+---------+------------+--------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; YEAR &lt;span class=&quot;code-snippet__params&quot;&gt;| country |&lt;/span&gt; product    &lt;span class=&quot;code-snippet__params&quot;&gt;| profit |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+------+---------+------------+--------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| NULL |&lt;/span&gt; NULL    &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL       |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;7535&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL    |&lt;/span&gt; NULL       &lt;span class=&quot;code-snippet__params&quot;&gt;|   4525 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2000 |&lt;/span&gt; Finland &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL       |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;1600&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| Finland |&lt;/span&gt; Computer   &lt;span class=&quot;code-snippet__params&quot;&gt;|   1500 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2000 |&lt;/span&gt; Finland &lt;span class=&quot;code-snippet__params&quot;&gt;| Phone      |&lt;/span&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| India   |&lt;/span&gt; NULL       &lt;span class=&quot;code-snippet__params&quot;&gt;|   1350 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2000 |&lt;/span&gt; India   &lt;span class=&quot;code-snippet__params&quot;&gt;| Calculator |&lt;/span&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| India   |&lt;/span&gt; Computer   &lt;span class=&quot;code-snippet__params&quot;&gt;|   1200 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2000 |&lt;/span&gt; USA     &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL       |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;1575&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| USA     |&lt;/span&gt; Calculator &lt;span class=&quot;code-snippet__params&quot;&gt;|     75 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2000 |&lt;/span&gt; USA     &lt;span class=&quot;code-snippet__params&quot;&gt;| Computer   |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;1500&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2001&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL    |&lt;/span&gt; NULL       &lt;span class=&quot;code-snippet__params&quot;&gt;|   3010 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2001 |&lt;/span&gt; Finland &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL       |&lt;/span&gt;     &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2001&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| Finland |&lt;/span&gt; Phone      &lt;span class=&quot;code-snippet__params&quot;&gt;|     10 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2001 |&lt;/span&gt; USA     &lt;span class=&quot;code-snippet__params&quot;&gt;| NULL       |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;3000&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2001&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| USA     |&lt;/span&gt; Calculator &lt;span class=&quot;code-snippet__params&quot;&gt;|     50 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| 2001 |&lt;/span&gt; USA     &lt;span class=&quot;code-snippet__params&quot;&gt;| Computer   |&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;2700&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2001&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;| USA     |&lt;/span&gt; TV         &lt;span class=&quot;code-snippet__params&quot;&gt;|    250 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+------+---------+------------+--------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;排序由于有NULL的问题，所以分级汇总的效果非常难弄，而且group 列不同改变，SQL复杂度来回变化，而ROLLUP很简单就可以实现效果，下面看下rollup在解析过程做了什么样的转换达到了意想不到的效果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.40234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFffhZhP1oxrKtPpN8TL74afsVRPh9ibLkDx9ViabSstR3ic0voE7z7oRia9iag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;9  解析和设置GROUP BY/ORDER BY语句（setup_group/setup_order）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;其中一个函数find_order_in_list(): 尝试在select fields里去寻找可以映射的列，否则就得在最后投影的all fields里加上当前列，同时也做fix_fields。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIY6eXziawYicpSrvsMtkaFffX5fsfRoWGOmxR4snI89d04JAnVmOsateK1mJKWhofHH2Aiag3KDiajvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;m_having_cond-&amp;gt;fix_fields : 对having条件进行fixed_fields。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;resolve_limits : 处理OFFSET和LIMIT子句（offset_limit和select_limit的Items）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;setup_ftfuncs : 如果有full-text的函数，对相关Item进行fix_fields。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;remove_redundant_subquery_clause : 对于Table Subquery的表达式，通常是IN/ANY/ALL/EXISTS/etc，如果没有聚合函数和Having子句，通常可以考虑删除不必要的ORDER/DISTINCT/GROUP BY。该函数支持三种REMOVE_ORDER | REMOVE_DISTINCT | REMOVE_GROUP，如果是SINGLEROW_SUBS的子查询，只考虑删除REMOVE_ORDER。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; c1 &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; t1 &lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; t1.&lt;span class=&quot;code-snippet__function&quot;&gt;c2 &lt;span class=&quot;code-snippet__title&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; distinct c1 &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; t2 &lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; c1, c2 order &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; c1&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;转化为 =&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; c1 &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; t1 &lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; t1.&lt;span class=&quot;code-snippet__function&quot;&gt;c2 &lt;span class=&quot;code-snippet__title&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; c1 &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; t2&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;处理是否可以删除不必要的distinct语句，删除的条件就是GROUP BY的列都在SELECT列表中，并且没有ROLLUP和Window函数。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;is_grouped() &amp;amp;&amp;amp; hidden_group_field_count == 0 &amp;amp;&amp;amp; olap == UNSPECIFIED_OLAP_TYPE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如场景：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DISTINCT&lt;/span&gt; c1, &lt;span class=&quot;code-snippet__keyword&quot;&gt;max&lt;/span&gt;(c2) &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; t1 &lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; c1;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;10  解析和设置Window函数（Window::setup_windows1）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SELECT id,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       release_year,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       rating,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       avg(rating) over(PARTITION BY release_year) AS year_avg&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;FROM tw;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+------+--------------+--------+-------------------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;| id   |&lt;/span&gt; release_year &lt;span class=&quot;code-snippet__params&quot;&gt;| rating |&lt;/span&gt; year_avg          &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+------+--------------+--------+-------------------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|         2015 |&lt;/span&gt;      &lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|               8.5 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;|    3 |&lt;/span&gt;         &lt;span class=&quot;code-snippet__number&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|      9 |&lt;/span&gt;               &lt;span class=&quot;code-snippet__number&quot;&gt;8.5&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|         2015 |&lt;/span&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;8.5&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|               8.5 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;|    4 |&lt;/span&gt;         &lt;span class=&quot;code-snippet__number&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|    8.2 |&lt;/span&gt;               &lt;span class=&quot;code-snippet__number&quot;&gt;8.3&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|         2016 |&lt;/span&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;8.4&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|               8.3 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;|    6 |&lt;/span&gt;         &lt;span class=&quot;code-snippet__number&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|      7 |&lt;/span&gt;                 &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+------+--------------+--------+-------------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;执行的过程和结果类似于下图：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.32821341956346&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naI5zpdkI0MIeDpL35cIS4qthglpl2fv2LzEmTgKMcHrWWE2Wm8XDWJcm8YWbYI9E6d7YULxVl4yIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1237&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们看下它在开始Query_block::prepare解析过程做了哪些事情：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;select_lex-&amp;gt;m_windows 不为空，就调用 &lt;/span&gt;&lt;span&gt;Window::setup_windows1&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;遍历window函数列表，调用resolve_window_ordering来解析m_partition_by和m_order_by&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;处理inter-window的引用关系（如WINDOW w1 AS (w2), w2 AS (), w3 AS (w1)），但必须是一个有向无环图（DAG）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;重新遍历检查是否唯一名字check_unique_name、创建window partition by和window order by的引用items&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;检查窗口函数特征（Window::check_window_functions1(THD *thd, _block *select)）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;首先判断的是当前是静态窗口还是动态窗口；静态窗口即判断了 frame 的定义是否有定义上下边界。&lt;/span&gt;&lt;span&gt;m_static_aggregates&lt;/span&gt;&lt;span&gt; 为 true, 意味着是静态窗口，同时对每一个分区都可以进行一次评估。如果 &lt;/span&gt;&lt;span&gt;ma_static_aggregates &lt;/span&gt;&lt;span&gt;为 false, 则进一步判断其滑动窗口使用的是基于范围还是基于行。 &lt;/span&gt;&lt;span&gt;m_row_optimizable&lt;/span&gt;&lt;span&gt; 基于行 &lt;/span&gt;&lt;span&gt;m_range_optimizable&lt;/span&gt;&lt;span&gt; 基于范围 &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;获取聚合函数作为窗口函数时候窗口的特殊规格要求&lt;/span&gt;&lt;span&gt;wfs-&amp;gt;check_wf_semantics1(thd, select, &amp;amp;reqs)&lt;/span&gt;&lt;span&gt; 这个方法其实就是判断是不是需要row_buffer作为评估，如果我们只看当前分区的行无法进行正确的计算不需要，而需要看之后的或者之前的行，就需要使用row_buffer。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;三  综述&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;本文重点介绍了下优化器的基于规则的其中一部分优化，更多的偏重于SQL中的基本操作符，如表、列、函数、聚合、分组、排序等元素的解析和设置以及一些显而易见的结构变化。下一篇文章我们将继续介绍子查询、分区表和JOIN操作的转换部分，敬请期待。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;四  参考资料&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;《Mysql derived_MySQL · 新特性分析 · 5.7中Derived table变形记》&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;《WL#9236, WL#9603 and WL#9727 - Add SQL window functions to MySQL》&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;五  关于我们&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;PolarDB 是阿里巴巴自主研发的云原生分布式关系型数据库，于2020年进入Gartner全球数据库Leader象限，并获得了2020年中国电子学会颁发的科技进步一等奖。PolarDB 基于云原生分布式数据库架构，提供大规模在线事务处理能力，兼具对复杂查询的并行处理能力，在云原生分布式数据库领域整体达到了国际领先水平，并且得到了广泛的市场认可。在阿里巴巴集团内部的最佳实践中，PolarDB还全面支撑了2020年天猫双十一，并刷新了数据库处理峰值记录，高达1.4亿TPS。欢迎有志之士加入我们，简历请投递到daoke.wangc@alibaba-inc.com，期待与您共同打造世界一流的下一代云原生分布式关系型数据库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-spm-anchor-id=&quot;a2c6h.21258778.0.i0.3a747b80d6j217&quot;&gt;&lt;strong&gt;&lt;span&gt;数据库常见问题排查&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;开发者经常会遇到些数据库的问题，觉得无从下手，这严重影响了开发效率，也影响了开发者对数据库的热情。如何避免这样的窘境，如何降低数据库使用门槛以及运维的成本，如何在较短的时间内用云数据库的技术和理念来武装自己，提升自己。本课程通过实际的场景以及最佳实践出发，带给大家一些数据库问题的通用解决思路和方法，大家会发现数据库不再是一个黑盒，相反它看得见，摸得着，也能够轻松玩得转。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;点击阅读原文查看课程～&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c514fb35f4ab1923f9472a6f33aa6494</guid>
<title>TypeScript：我都传了 type 了，能不能给我自动推导出 data 类型啊？</title>
<link>https://toutiao.io/k/l020ane</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-hnrfcf&quot; options=&quot;[object Object]&quot;&gt;&lt;p&gt;我们先假设存在这么一个用于描述特定业务错误的类，就叫它 SomeError 吧，它拥有：&lt;b&gt;type&lt;/b&gt; 和 &lt;b&gt;data&lt;/b&gt; 两个属性。&lt;/p&gt;&lt;p&gt;于是当你抛出该异常的时候，你是这么写的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;someType1&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someTypeProp1&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就在你要将它 throw 出去的前 1 秒，类型敏感的你突然对着 &lt;code&gt;someType1&lt;/code&gt; 微微一笑，tsser 如何能容忍魔法字符串的存在？于是你：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;enum SomeErrorTypes {
  SomeType1 = &quot;someType1&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;new SomeError(SomeErrorTypes.SomeType1, { someTypeProp1: 1 })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你刚想露出满意的微笑，类型敏感的你又突然对着 &lt;code&gt;{ someTypeProp1: 1 }&lt;/code&gt; 虎躯一震！万一有人在里面瞎写可咋办？不行，我得再给 SomeError 整一个泛型来约束约束：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;interface SomeErrorType1Data {
  someTypeProp1: number
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;new SomeError&amp;lt;SomeErrorType1Data&amp;gt;(SomeErrorTypes.SomeType1, { someTypeProp1: 1 }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到了这一步，一个类型敏感且自觉超过了 tsser 平均水准的你不禁开始思考......我接下来该对着啥再来个啥呢。。。&lt;/p&gt;&lt;p&gt;有了！于是开始对着 &lt;code&gt;SomeErrorType1Data&lt;/code&gt; 。。。邪魅一笑？心道：&lt;b&gt;一旦别人不引入你的类型约束，那么所有的类型约束都是纸老虎；反过来说能主动意识到某个类可能会提供泛型约束且能够从一堆代码里专门去找到你的类型约束的人大概率也不需要约束&lt;/b&gt;（他需要的其实只是代码提示。&lt;/p&gt;&lt;p&gt;现在现实成了使用 &lt;code&gt;SomeError&lt;/code&gt; 这个类，开发者需要知道：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用 &lt;code&gt;SomeErrorTypes&lt;/code&gt; 作为 &lt;code&gt;type&lt;/code&gt; &lt;/li&gt;&lt;li&gt;使用 &lt;code&gt;SomeErrorType1Data&lt;/code&gt; 及将来可能有的  SomeErrorType2Data、SomeErrorType3Data... 作为 &lt;code&gt;data&lt;/code&gt; 的类型约束 &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么问题就来了，&lt;b&gt;这种设计对开发者的心智负担相比魔法字符串又强在哪里？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;痛定思痛后，你重新理了一下思路：魔法字符串为什么让开发者排斥？原因有二：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;它很可能会写错，因为没有代码提示。所以一般需要开发者去源码里找到之前用过它的地方复制粘贴&lt;/li&gt;&lt;li&gt;它如果是个可变的值，开发者需要从整个源码里查找一遍后才能确定它一共有多少个值&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所以枚举类型就成了以上问题的很好的解决方案&lt;b&gt;之一&lt;/b&gt;。本质上枚举类型是将若干个魔法字符串包装成了一个。是的，开发者依然需要记住枚举类型的名称，好在枚举名称本身在大多数 ts 友好的编辑器里也可以拥有代码输入提示，且之后其包装的魔法字符串都可以通过代码提示直接引用到。&lt;/p&gt;&lt;p&gt;没错，你又突然悟到了解决开发者心智负担的一个通用方法论：&lt;b&gt;将松散的变成收敛的，用引用来替代输入。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;接下来就好办了，类似的解法，为了不让开发者去记住每一个 SomeErrorTypeXData，你可以像封装 &lt;code&gt;SomeErrorTypes&lt;/code&gt; 那样再给  SomeError 的泛型提供一个主类型入口，更进一步地，你可以将其索引名称和 &lt;code&gt;SomeErrorTypes&lt;/code&gt; 里的值一一对应，这样可以又可以让开发者少记一些引用值了，且引用起来更符合直觉：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;interface SomeErrorData {
  [SomeErrorTypes.SomeType1]: {
    someTypeProp1: number
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;new SomeError&amp;lt;SomeErrorData[SomeErrorTypes.SomeType1]&amp;gt;(SomeErrorTypes.SomeType1, { someTypeProp1: 1 })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到此结束了么？不！你除了类型敏感，你还是一个对重复代码深恶痛绝的代码洁癖患者。你望着上面的 &lt;code&gt;SomeErrorTypes.SomeType1&lt;/code&gt; 坐立不安。&lt;/p&gt;&lt;p&gt;有办法的，一定有办法的，在程序里面，只要是重复的，就一定有办法优化的。&lt;/p&gt;&lt;p&gt;上面的改造，开发者依然需要记住 &lt;code&gt;SomeErrorData&lt;/code&gt; 和 &lt;code&gt;SomeErrorTypes&lt;/code&gt; 这两个主类型， 而且还是两个有映射关系的类型，那么。。。终于要点题了：&lt;b&gt;我都传了 type 了，能不能给我自动推导出 data 类型啊？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;能！&lt;/b&gt;代码如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// 首先泛型变成了 SomeErrorTypes
class SomeError&amp;lt;T extends SomeErrorTypes&amp;gt; {
  // 然后构造函数的 type 类型指向泛型，这样就可以根据传入的 type 类型自动推导出类的泛型
  // data 类型毫无疑问直接拿 SomeErrorData + 泛型 来引用即可
  constructor(type: T, data: SomeErrorData[T]) {
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是开发者终于可以体面地去 new SomeError 了！（附&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.tslang.cn/play/index.html%23src%3Denum%2520SomeErrorTypes%2520%257B%250D%250A%2520%2520SomeType1%2520%253D%2520%2522someType1%2522%250D%250A%257D%250D%250A%250D%250Ainterface%2520SomeErrorData%2520%257B%250D%250A%2520%2520%255BSomeErrorTypes.SomeType1%255D%253A%2520%257B%250D%250A%2520%2520%2520%2520someTypeProp1%253A%2520number%250D%250A%2520%2520%257D%250D%250A%257D%250D%250A%250D%250Aclass%2520SomeError%253CT%2520extends%2520SomeErrorTypes%253E%2520%257B%2520%252F%252F%2520%25E9%25A6%2596%25E5%2585%2588%25E6%25B3%259B%25E5%259E%258B%25E5%258F%2598%25E6%2588%2590%25E4%25BA%2586%2520SomeErrorTypes%250D%250A%2520%2520%252F%252F%2520%25E7%2584%25B6%25E5%2590%258E%25E6%259E%2584%25E9%2580%25A0%25E5%2587%25BD%25E6%2595%25B0%25E7%259A%2584%2520type%2520%25E7%25B1%25BB%25E5%259E%258B%25E6%258C%2587%25E5%2590%2591%25E6%25B3%259B%25E5%259E%258B%25EF%25BC%258C%25E8%25BF%2599%25E6%25A0%25B7%25E5%25B0%25B1%25E5%258F%25AF%25E4%25BB%25A5%25E6%25A0%25B9%25E6%258D%25AE%25E4%25BC%25A0%25E5%2585%25A5%25E7%259A%2584%2520type%2520%25E7%25B1%25BB%25E5%259E%258B%25E8%2587%25AA%25E5%258A%25A8%25E6%258E%25A8%25E5%25AF%25BC%25E5%2587%25BA%25E7%25B1%25BB%25E7%259A%2584%25E6%25B3%259B%25E5%259E%258B%250D%250A%2520%2520%252F%252F%2520data%2520%25E7%25B1%25BB%25E5%259E%258B%25E6%25AF%25AB%25E6%2597%25A0%25E7%2596%2591%25E9%2597%25AE%25E7%259B%25B4%25E6%258E%25A5%25E6%258B%25BF%2520SomeErrorData%2520%252B%2520%25E6%25B3%259B%25E5%259E%258B%2520%25E6%259D%25A5%25E5%25BC%2595%25E7%2594%25A8%25E5%258D%25B3%25E5%258F%25AF%250D%250A%2520%2520constructor%28type%253A%2520T%252C%2520data%253A%2520SomeErrorData%255BT%255D%29%2520%257B%250D%250A%2520%2520%257D%250D%250A%257D%250D%250A%250D%250Anew%2520SomeError%28SomeErrorTypes.SomeType1%252C%2520%257B%2520someTypeProp1%253A%25201%2520%257D%29&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在线 Demo&lt;/a&gt;）&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;new SomeError(SomeErrorTypes.SomeType1, { someTypeProp1: 1 })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原本文章到了这里就可以结束了，但是你控制不住你寄几，类型体操会上瘾。你脑海里突然又灵光一闪，对着 &lt;code&gt;SomeErrorTypes&lt;/code&gt; 。。。嫣然一笑？&lt;/p&gt;&lt;p&gt;虽然你干掉了调用者对类型的重复引用，但是你的类型声明里依然存在重复引用：之后你每在  &lt;code&gt;SomeErrorTypes&lt;/code&gt; 增加一个 type，就需要同步地给 &lt;code&gt;SomeErrorData&lt;/code&gt; 增加一个同名的 data type。所以这里可不可以将它们。。。合并？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;interface SomeErrorTypeData {
  someType1: {
    someTypeProp1: number
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// 泛型变成了 SomeErrorTypeData 的 key 值
class SomeError&amp;lt;T extends keyof SomeErrorTypeData&amp;gt; {
  // 其实和上面的改造原理一样就不多解释了
  constructor(type: T, data: SomeErrorTypeData[T]) {
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是开发者 new SomeError 就可以这样（附&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.tslang.cn/play/index.html%23src%3Dinterface%2520SomeErrorTypeData%2520%257B%250D%250A%2520%2520someType1%253A%2520%257B%250D%250A%2520%2520%2520%2520someTypeProp1%253A%2520number%250D%250A%2520%2520%257D%250D%250A%257D%250D%250A%250D%250A%250D%250Aclass%2520SomeError%253CT%2520extends%2520keyof%2520SomeErrorTypeData%253E%2520%257B%250D%250A%2520%2520constructor%28type%253A%2520T%252C%2520data%253A%2520SomeErrorTypeData%255BT%255D%29%2520%257B%250D%250A%2520%2520%257D%250D%250A%257D%250D%250A%250D%250A%250D%250Anew%2520SomeError%28%27someType1%27%252C%2520%257B%2520someTypeProp1%253A%25201%2520%257D%29&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在线 Demo&lt;/a&gt;）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;new SomeError(&#x27;someType1&#x27;, { someTypeProp1: 1 })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到了这里，你会神奇地发现上面这一行代码竟然又回到了文章开始的地方，难道这就是传说中的大道至简，看山还是山？看似优化了个寂寞，实则同样的调用方式却拥有了完备的类型提示。&lt;/p&gt;&lt;p&gt;且本文里的这个场景其实在真实开发中并不少见，比如你有没有好奇过某事件库为啥可以根据我传入的不同事件名，callback 不同的参数？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;someEvent.on(&#x27;ok&#x27;, (params) =&amp;gt; {
  // params 是 ok 时候的数据类型
})
someEvent.on(&#x27;error&#x27;, (e) =&amp;gt; {
  // e 在 error 时候自动变成了 Error 类型
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（当然，上面这个例子还可以对 someEvent.on 用函数重载来实现，感兴趣的可以试试）&lt;/p&gt;&lt;p&gt;另，枚举只是解决魔法字符串的手段之一，你当然还可以通过联合类型、keyof 等方式做输入约束，去掉枚举开发者还可以少记住一个主类型名称，new 完扩号一下编辑器就可以立刻给到你所有的 &lt;code&gt;type&lt;/code&gt; 字符串提示；不过多声明一个枚举的好处也是有的，比如它可以方便地被之后非 SomeError 的数据去引用以及享受枚举类型的相关特性。&lt;/p&gt;&lt;p&gt;然而话又说回来了，不单独声明枚举就不能方便地将某些「私有的」魔法字符串导出来了么？比如我如何拿到所有的 SomeErrorTypes？（假设 SomeErrorTypeData 是私有类型，你没办法直接对着它 keyof）可以这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;type SomeErrorTypes = ConstructorParameters&amp;lt;typeof SomeError&amp;gt;[0]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;type SomeErrorTypes = any extends SomeError&amp;lt;infer P&amp;gt; ? P : never&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以。。。类型体操爱好者自行发挥吧！对体操感兴趣的也推荐下我的另一篇文章：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/82459341&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-3d5377c6e2b4cbc3033b31e381a71e79_180x120.jpg&quot; data-image-width=&quot;1200&quot; data-image-height=&quot;500&quot; data-text=&quot;阿伟：TypeScript 疑难杂症&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p&gt;所以上面这段看似跑题的类型体操的意义是什么？难道就是为了装 x 么？（是，还有给上面那篇文章打广告。。。&lt;/p&gt;&lt;p&gt;开个玩笑，其实我是想来个总结的：&lt;b&gt;作为 ts 库的使用者，意识到哪些地方可能提供了泛型且需要你导入并显式地传入泛型来获得更好的类型提示要比你掌握了多少个工具泛型更重要；作为 ts 库的提供者，意识到哪些地方可以通过类型体操来帮助开发者减少心智负担要比你掌握了多少个类型体操更重要。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;说到这里又&lt;b&gt;不得不&lt;/b&gt;再给另一篇文章也打个广告了，ts 大法好，好在哪里？其实就是为了代码提示，仅此而已：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/62292091&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-ba2d1120e60e4727d6a0e95b48348518_180x120.jpg&quot; data-image-width=&quot;2000&quot; data-image-height=&quot;1105&quot; data-text=&quot;阿伟：TypeScript —— 面向编辑器编程&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b0901314c17decbc2b1722e3d4a6bab8</guid>
<title>如何做好算法迭代</title>
<link>https://toutiao.io/k/nvgsoo1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写这篇文章的背景是前几天听到的一次分享，若有所思，顺便再结合自己的经验进行分析和总结，希望对看到这篇文章的朋友有所帮助和思考。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开始之前说一些题外话，工作了这么些年其实也经历过或者见过一些领导的做事风格，不同领导的做事方法论肯定是不一样的，但其实大概是分为两种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;只沟通工作相关的内容，对员工无其他信息输入&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不仅沟通工作，也有一些认知、经验、上层意愿的信息输入&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不能说哪种风格好或者坏，只能说适合自己的才是最好的。我个人是比较喜欢后者的，因为作为你的领导，不管从资历，还是经验、认知都是比你优秀的，否则怎么能作为你的领导，在工作的输入之外，进行一些认知、经验层面的输入，对员工而言肯定是有益无害的，毕竟这种直面沟通和学习的机会并不多见。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前也推送过一篇关于部门leader的文章，可以拿出来再读读，&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI2MDU3OTgyOQ==&amp;amp;mid=2247494848&amp;amp;idx=1&amp;amp;sn=7de9424241f5e43caf4cc58a06d02b03&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;聊聊技术部门Leader是不是一定要技术大牛担任&lt;/a&gt;，言归正传，聊我们的主题：算法迭代。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;387&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.713506139154161&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/02kicEWsInicgjcgM8mCH0xu5oDR98E3HFALrbNFpYrYBGwpJbqceYaGRRfkZvstdeIMzjVCMJ2pf3FJrotK7gSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;733&quot;/&gt;&lt;figcaption&gt;DNN Epoch迭代&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的算法迭代并非指上图中DNN网络的一个又一个epoch，而是指一个项目在实施过程中的算法方法迭代和优化。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小步快跑&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如对于一个新业务做一个排序模型，如何进行选择？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;起初是没有必要直接上NN模型，可以选择一个能够快速上线进行实验的线性模型或者树模型，毕竟这些模型的应用成本也不高，对于上线初期的问题排查也不麻烦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上线一个基准模型之后，迅速进行调整和优化，比如从特征层面、数据层面、算法层面，小步快跑，多尝试，快迭代。避免出现搞一个技术方案，一个月都实现不了那种，毕竟公司里的人力成本、时间成本都是很高的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;关注数据&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们做一个项目需求的时候，要避免眼高手低，其实我在刚步入工作岗位的时候也会有一种错误的做法，一个需求，我会认为这个很简单呀，搞一个xxx模型跑一下就完事了，实在不行就再换一个牛逼一点的模型跑一下，肯定会有收益的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但其实这种想法是极其错误的，无论事情的大与小，我们要关注的是我们使用的数据以及解决这个事情时候的收益情况，如果数据本身有偏或者有误差，那么你最终做出来的结果也是有偏的，一个典型的例子就是，在一个头部效应十分明显的推荐场景中，使用用户的行为数据构建ItemCF，那么构建&lt;span&gt;出&lt;/span&gt;的i2i只会加重这种头部效应。因此要多关注底层数据和逻辑，避免南辕北辙。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外一个数据就是收益。解决一个需求之后，不管关注的指标是升是降，都要去思考为什么，如果数据指标是下降的，就要思考是哪个环节引起了问题，进行深入的分析，如果数据指标是上涨的，就要思考这个上涨符合预期吗？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;理解业务&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务永远是算法迭代的灯塔。没有具体的业务场景，算法是无法进行落地的，因此要关注业务、理解业务、思考业务，继而为我们的算法迭代提供思路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如电商平台当前的KPI指标是提高用户的点击率，那么我们的优化目标就是CTR，但如果KPI指标换成了GMV，那么优化的目标就是CXR了。但是如果你不知道、不了解业务目标的变化，就会导致上下层目标不一致的问题，就会做很多无用功。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;注重逻辑&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;逻辑是做一个需求形成闭环的关键，如果在你这里一个需求都无法形成闭环，那么这个需求做出来之后多半是废的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在做任何一个需求之前，都要想明白这个需求的背景是什么，需求的目标是什么，如何去设计处理逻辑才能更加高效、高质量的完成需求。事后也要去关注效果和自己的设计的处理逻辑预期是否相符，从而形成一个需求的闭环，这样无论对Leader、对PM、对自己都能交出一份满意的答卷，&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;独立思考&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;独立思考能力是一个算法工程师的必备修养，在我们负责一个业务的某个部分时，如果要想要做好算法的迭代，肯定是要有对这个业务的独立思考能力和算法优化的独立思考能力。因为这个部分是你负责，你要为它的结果直接负责，这时如果东一榔头西一棒槌，一味的加特征、换模型，那么最终只会杂乱无序、毫无收益。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此在做某一个具体的需求时，无论Leader、PM对你的输入是什么，你都有自己独立思考的权利，希望你对他们方案的认同是你经过思考之后才说出来的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;大局观&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大局观这个东西其实很大，其实也很不好讲，这里我主要想表达的是：&lt;strong&gt;跳出局部看整体&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个简单的例子就是，当你不理解你的领导为什么做出这样一个决定时，你要跳出你自己的认知，从整个业务、整个部门去看待这个事情，这个时候就会豁然开朗，直呼原来如此。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然避免不了一些leader下的无脑决定、或者因为私人关系分配的一些利益，但这毕竟是少数，做正确的事情，做好正确的事情！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么大局观如何和算法迭代进行关联呢？在我们优化某个算法时，如果短时间内找不到突破点，不妨停下来，重新梳理整个逻辑，从这个事情整体的角度去进行思考，寻找突破点，或者你就会豁然开朗。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，闲聊至此，以上都是个人拙见，希望能够帮助到你！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>