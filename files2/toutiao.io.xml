<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3e685de8cdcaef211fc9bc153a85a669</guid>
<title>Java 对象属性复制组件：Mapstruct 的项目改造指南</title>
<link>https://toutiao.io/k/ilsr2zz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-source-line=&quot;1&quot;&gt;本文介绍下Java对象属性复制组件（MapStruct），以及项目中引入遇到的坑。&lt;/p&gt;&lt;h2 data-source-line=&quot;3&quot;&gt;1. 问题背景&lt;/h2&gt;&lt;p data-source-line=&quot;5&quot;&gt;日常编程中，经常会碰到对象属性复制的场景，就比如下面这样一个常见的三层MVC架构。&lt;/p&gt;&lt;p data-source-line=&quot;7&quot;&gt;&lt;img data-ratio=&quot;1.4133333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OqTAl3WTC7FiaMvicf6yicWRFbUluDfickJybRUZkic6YmjK3fWCQhupdXpFicsMUHjaHIgpRicp6icGTr8uAiaoMN9jY5g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;9&quot;&gt;前端请求通过VO对象接收，并通过DTO对象进行流转，最后转换成DO对象与数据库DAO层进行交互，反之亦然。&lt;/p&gt;&lt;p data-source-line=&quot;11&quot;&gt;当业务简单的时候，可以通过手动编码getter/setter函数来复制对象属性。但是当业务变的复杂，对象属性变得很多，那么手写复制属性代码不仅十分繁琐，非常耗时间，并且还可能容易出错。&lt;/p&gt;&lt;p data-source-line=&quot;13&quot;&gt;为了解决这个痛点，在项目初期，小辉项目的解决方法是随手写的转换工具函数：根据变量名进行反射，对基础类型和枚举的变量进行赋值。&lt;/p&gt;&lt;p data-source-line=&quot;15&quot;&gt;总结下目前该工具函数的优缺点：&lt;/p&gt;&lt;p data-source-line=&quot;17&quot;&gt;优点：&lt;/p&gt;&lt;ol data-source-line=&quot;19&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;开发效率高，随时想要转换的时候，传入源对象以及指定class，调用下函数即可。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;21&quot;&gt;缺点：&lt;/p&gt;&lt;ol data-source-line=&quot;22&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;项目中大量的反射会严重影响代码执行效率&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;由于使用了反射，所以成员变量的使用被追踪就很麻烦&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;转换失败只有在运行中报错才会发现&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对于嵌套对象字段的情况无能为力&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;只能对基础类型进行复制&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对字段名不一致的属性无法赋值&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-source-line=&quot;29&quot;&gt;2. 开源组件选择&lt;/h2&gt;&lt;p data-source-line=&quot;31&quot;&gt;那如果想要更强大的功能，有哪些开源组件可以选择呢？&lt;/p&gt;&lt;p data-source-line=&quot;33&quot;&gt;下面小辉收集并盘点下相关开源组件的特点。&lt;/p&gt;&lt;h3 data-source-line=&quot;35&quot;&gt;1. Apache BeanUtils&lt;/h3&gt;&lt;ol data-source-line=&quot;37&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;底层原理运用反射。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;嵌套对象字段，将会与源对象使用同一对象，即使用浅拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字段名不一致的属性无法被复制。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类型不一致的字段，将会进行默认类型转化。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;42&quot;&gt;2. Spring BeanUtils：&lt;/h3&gt;&lt;ol data-source-line=&quot;43&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;底层原理同样运用反射，但相比Apache BeanUtils减少了反射校验，同时增加了缓存，所以提升了转换速度。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;嵌套对象字段，将会与源对象使用同一对象，即使用浅拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字段名不一致，属性无法复制。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类型不一致的字段，将会进行默认类型转化。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;48&quot;&gt;3. Cglib BeanCopier&lt;/h3&gt;&lt;ol data-source-line=&quot;49&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;字节码技术动态生成一个代理类，代理类实现get和set方法。生成代理类过程存在一定开销，但是一旦生成，我们可以缓存起来重复使用。相比前两个更好用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;嵌套对象字段，将会与源对象使用同一对象，即使用浅拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字段名不一致，属性无法复制。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类型不一致的字段，将会进行默认类型转化。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;54&quot;&gt;4. Dozer&lt;/h3&gt;&lt;ol data-source-line=&quot;55&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;运用反射。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;嵌套对象字段，不会与源对象使用同一对象，即深拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;默认支持类型不一致(基本类型/包装类型)转换。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过配置字段名的映射关系，不一样字段的属性也被复制。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;60&quot;&gt;5. orika&lt;/h3&gt;&lt;ol data-source-line=&quot;61&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;底层其使用了javassist生成字段属性的映射的字节码，然后直接动态加载执行字节码文件，相比于使用反射的工具类，速度上会快很多。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持深拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;默认支持类型不一致(基本类型/包装类型)转换。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过配置字段名的映射关系，不一样字段的属性也被复制。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;66&quot;&gt;上面介绍的这些工具类，不管使用反射，还是使用字节码技术，这些都需要在代码运行期间动态执行，所以相对于手写硬编码这种方式，上面这些工具类执行速度都会慢很多。&lt;/p&gt;&lt;p data-source-line=&quot;68&quot;&gt;而MapStruct与上面五个组件原理都不同。&lt;/p&gt;&lt;blockquote data-source-line=&quot;70&quot;&gt;&lt;p&gt;以上提到的属性无法复制，都是在不使用手动写Convert函数的情况下进行讨论的&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-source-line=&quot;72&quot;&gt;3. MapStruct&lt;/h2&gt;&lt;h3 data-source-line=&quot;74&quot;&gt;1. 为什么选择MapStruct&lt;/h3&gt;&lt;p data-source-line=&quot;76&quot;&gt;接下来就要介绍MapStruct 这个工具类，这个工具类之所以运行速度与硬编码差不多，这是因为MapStruct在编译期间就生成属性复制的代码，运行期间就无需使用反射或者字节码技术，从而确保了高性能。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.43478260869565216&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7FiaMvicf6yicWRFbUluDfickJyLzjNibhfgBr3ZicN9OllB0CUx2PVCAYw7lHgjOvNK5IX2hOdkgpyiamfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;460&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;78&quot;&gt;另外，由于编译期间就生成了代码，所以如果有任何问题，编译期间就可以提前暴露，这对于开发人员来讲就可以提前解决问题，而不用等到代码应用上线了，运行之后才发现错误。&lt;/p&gt;&lt;p data-source-line=&quot;80&quot;&gt;所以，为了克服项目中当前函数的被提到的五个缺点，笔者引入了MapStruct。&lt;/p&gt;&lt;h3 data-source-line=&quot;82&quot;&gt;2. 如何引入MapStruct&lt;/h3&gt;&lt;p data-source-line=&quot;84&quot;&gt;只需要引入MapStruct的依赖，同时由于MapStruct需要在编译器期间生成代码，所以我们需要maven-compiler-plugin插件中配置。&lt;/p&gt;&lt;p data-source-line=&quot;86&quot;&gt;如果项目中没有用到lombok，下面的lombok相关配置可以删除；如果用到lombok，由于MapStruct和Lombok都会在编译期间生成代码，为解决冲突使用如下配置即可。&lt;/p&gt;&lt;pre data-source-line=&quot;88&quot;&gt;&lt;code&gt;&lt;span&gt;// pom.xml&lt;/span&gt;&lt;br/&gt;        &amp;lt;dependency&amp;gt;&lt;br/&gt;            &amp;lt;groupId&amp;gt;org.MapStruct&amp;lt;/groupId&amp;gt;&lt;br/&gt;            &amp;lt;artifactId&amp;gt;MapStruct&amp;lt;/artifactId&amp;gt;&lt;br/&gt;            &amp;lt;version&amp;gt;&lt;span&gt;1.4&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;.Final&amp;lt;/version&amp;gt;&lt;br/&gt;        &amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-source-line=&quot;96&quot;&gt;&lt;code&gt;// pom.xml&lt;br/&gt;// &lt;span&gt;为了防止&lt;/span&gt;lombok&lt;span&gt;和&lt;/span&gt;MapStruct&lt;span&gt;的冲突，在&lt;/span&gt;pom.xml&lt;span&gt;加入如下配置&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;$&lt;span&gt;{plugin.compiler.version}&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;source&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;             &lt;br/&gt;                &lt;span&gt;&amp;lt;target&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;annotationProcessorPaths&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;path&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.MapStruct&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;MapStruct-processor&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;$&lt;span&gt;{MapStruct.version}&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;path&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;$&lt;span&gt;{lombok.version}&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;!-- other annotation processors --&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;/annotationProcessorPaths&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-source-line=&quot;127&quot;&gt;3. MapStruct的常见使用方法&lt;/h3&gt;&lt;p data-source-line=&quot;129&quot;&gt;使用MapStruct很简单，只需要创建一个mapper文件，然后在需要使用转换的地方，注入调用即可。&lt;/p&gt;&lt;p data-source-line=&quot;131&quot;&gt;下面列举了两个文件，涵盖项目中绝大多数的mapper文件写法。&lt;/p&gt;&lt;p data-source-line=&quot;133&quot;&gt;DO转成DTO的mapper：&lt;/p&gt;&lt;pre data-source-line=&quot;134&quot;&gt;&lt;code&gt;/**&lt;br/&gt; * componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;&lt;span&gt;：表明该类是一个&lt;/span&gt; spring &lt;span&gt;组件&lt;/span&gt;,&lt;span&gt;之后调用处只需要使用&lt;/span&gt;@Autowired&lt;span&gt;，即可引入该类实例&lt;/span&gt;&lt;br/&gt; * NullValuePropertyMappingStrategy.IGNORE&lt;span&gt;：如果遇到旧对象属性为&lt;/span&gt;null&lt;span&gt;，则跳过该属性赋值给新对象&lt;/span&gt;&lt;br/&gt; */&lt;br/&gt;@Mapper(componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;, nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)&lt;br/&gt;public interface UserTransMapper {&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;这个对象可用于非&lt;/span&gt;Spring&lt;span&gt;环境下获取当前对象实例。如果在&lt;/span&gt;Spring&lt;span&gt;环境下，该行代码可删除&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    UserTransMapper INSTANCE = Mappers.getMapper(UserTransMapper.class);&lt;br/&gt;    &lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;将&lt;/span&gt;Userinfo&lt;span&gt;对象中非&lt;/span&gt;null&lt;span&gt;的属性转化为&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;的对象&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;Info &lt;span&gt;从数据库读取的用户信息&lt;/span&gt;&lt;br/&gt;     * @return&lt;br/&gt;     */&lt;br/&gt;    UserD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;Info2userD&lt;span&gt;to&lt;/span&gt;(UserInfo &lt;span&gt;user&lt;/span&gt;Info);&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;将&lt;/span&gt;Userinfo&lt;span&gt;对象中非&lt;/span&gt;null&lt;span&gt;的属性更新到&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;的对象&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;Info &lt;span&gt;从数据库读取的用户信息&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt; &lt;span&gt;用户信息的&lt;/span&gt;dto&lt;br/&gt;     * &lt;span&gt;如果改&lt;/span&gt;void&lt;span&gt;为&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;，则函数会返回更新后的&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;对象&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    void updateUserInfo2userD&lt;span&gt;to&lt;/span&gt;(UserInfo &lt;span&gt;user&lt;/span&gt;Info, @MappingTarget UserD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;将&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;对象中非&lt;/span&gt;null&lt;span&gt;的属性转化为&lt;/span&gt;LoginEventD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;的对象&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt; &lt;span&gt;用户信息的&lt;/span&gt;dto&lt;br/&gt;     * @return LoginEventD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;继承&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    LoginEventD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;Dto2loginEventD&lt;span&gt;to&lt;/span&gt;(UserD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-source-line=&quot;169&quot;&gt;DTO转成VO的mapper：&lt;/p&gt;&lt;pre data-source-line=&quot;170&quot;&gt;&lt;code&gt;@Mapper(componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;, nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)&lt;br/&gt;public interface UserTransMapper {&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;对象中非&lt;/span&gt;null&lt;span&gt;的属性转化为&lt;/span&gt;UserInfoVo&lt;span&gt;的对象&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt; &lt;span&gt;用户信息的&lt;/span&gt;dto&lt;br/&gt;     * @return UserInfoVo&lt;span&gt;继承与&lt;/span&gt;UserBaseInfoVo&lt;span&gt;，都是用了&lt;/span&gt;@Data&lt;span&gt;，没有异常报错。&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    UserInfoVo &lt;span&gt;user&lt;/span&gt;Dto2userVo(UserD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;直接写嵌套&lt;/span&gt;List&lt;span&gt;等集合类，同样可以生效&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;List&lt;br/&gt;     * @return&lt;br/&gt;     */&lt;br/&gt;    List&lt;span&gt;&amp;lt;UserInfoVo&amp;gt;&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;Dto2userVo(List&lt;span&gt;&amp;lt;UserDto&amp;gt;&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;List);&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;如果&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;存在成员变量是类&lt;/span&gt;UserSubD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;，而&lt;/span&gt;UserInfoVo&lt;span&gt;存在成员变量是类&lt;/span&gt;UserSubVo&lt;span&gt;，想在上面转化的同时，让这两个成员变量进行赋值，只需要定义下面的函数即可。&lt;/span&gt;&lt;br/&gt;     *&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;SubD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;用户信息的&lt;/span&gt;dto&lt;span&gt;中的成员变量，类型为&lt;/span&gt;UserSubD&lt;span&gt;to&lt;/span&gt;&lt;br/&gt;     * @return&lt;br/&gt;     */&lt;br/&gt;    UserSubVo &lt;span&gt;user&lt;/span&gt;SubDto2userSubVo(UserSubD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;SubD&lt;span&gt;to&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;对象和&lt;/span&gt;FollowInfoD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;对象中非&lt;/span&gt;null&lt;span&gt;的属性转化为&lt;/span&gt;UserInfoVo&lt;span&gt;的对象&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt; &lt;span&gt;用户信息的&lt;/span&gt;dto&lt;br/&gt;     * @param followInfoD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;关注粉丝的&lt;/span&gt;dto&lt;br/&gt;     * @param hn &lt;span&gt;房子数量&lt;/span&gt;&lt;br/&gt;     * @return&lt;br/&gt;     */&lt;br/&gt;    @Mappings({&lt;br/&gt;            @Mapping(source = &lt;span&gt;&quot;userDto.regionId&quot;&lt;/span&gt;,target = &lt;span&gt;&quot;regionId&quot;&lt;/span&gt;),&lt;br/&gt;            @Mapping(source = &lt;span&gt;&quot;followInfoDto.price&quot;&lt;/span&gt;, target = &lt;span&gt;&quot;price&quot;&lt;/span&gt;, numberFormat = &lt;span&gt;&quot;0.00&quot;&lt;/span&gt;),&lt;br/&gt;            @Mapping(source = &lt;span&gt;&quot;hn&quot;&lt;/span&gt;,target = &lt;span&gt;&quot;houseNumber&quot;&lt;/span&gt;)&lt;br/&gt;    })&lt;br/&gt;    /**&lt;br/&gt;     * @Mapping&lt;span&gt;也就是手动映射字段的操作，使用简单，读者可自行研究&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    UserInfoVo &lt;span&gt;user&lt;/span&gt;Dto2userVo(UserD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;, FollowInfoD&lt;span&gt;to&lt;/span&gt; followInfoD&lt;span&gt;to&lt;/span&gt;, Integer hn);&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;假设从映射&lt;/span&gt;Person&lt;span&gt;到&lt;/span&gt;PersonD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;需要一些&lt;/span&gt;MapStruct&lt;span&gt;无法生成的特殊逻辑，可以定义一个&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;函数&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    &lt;span&gt;default&lt;/span&gt; PersonD&lt;span&gt;to&lt;/span&gt; personToPersonD&lt;span&gt;to&lt;/span&gt;(Person person) {&lt;br/&gt;        // &lt;span&gt;手动写映射逻辑&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-source-line=&quot;222&quot;&gt;4. 项目改造与踩坑提示&lt;/h2&gt;&lt;p data-source-line=&quot;224&quot;&gt;这次改造中相关依赖的版本：&lt;/p&gt;&lt;ol data-source-line=&quot;226&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;lombok版本1.16.22，改造时升级为1.18.12&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;项目原有依赖fastjson版本1.2.62&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;引入MapStruct版本为1.4.1.Final&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;230&quot;&gt;说明：&lt;/p&gt;&lt;ol data-source-line=&quot;232&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;之所以要升级lombok版本，是因为上面UserDto对象转化为LoginEventDto对象时，原有项目只在UserDto上添加@Builder，但是继承类LoginEventDto无法继承@Builder，导致MapStruct实例化的时候实例一个UserDto对象。&lt;br/&gt;解决方法：在继承层次结构的所有类(即LoginEventDto和UserDto)都需要使用@SuperBuilder可以，（类UserDto的@Builder要去掉）但这个@SuperBuilder只在更高的lombok版本才有，所以才升级了lombok版本。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;项目中使用了fastjson，因此业务代码中出现很多处需要反射调用无参构造函数。但在上面一步升级lombok的过程中，lombok对于@Builder的实现出现了一些修改：在1.16.22的生成代码中，是存在private级别的无参构造函数；而在1.18.12的生成代码中，并没有私有无参构造函数，从而导致了业务代码大量出现缺少默认构造函数的报错。&lt;br/&gt;解决方法：@Builder注解跟构造函数之间的冲突很常见。最佳实践是：在所有使用@Builder或者@SupserBuilder的类，增加@NoArgsConstructor和@AllArgsConstructor。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;237&quot;&gt;虽然本文极力推荐MapStruct，但如果是老项目的话，尤其是大项目的话，还是考虑下改造后的测试成本。本人在第一次引入的时候，过于自信，在父pom引入MapStruct并提升了lombok版本，直接导致开发环境的微服务集体报错。后来改为在单个微服务实验，并且放在开发环境长期观察（主要这个改动影响测试覆盖面太大，也不想让QA为了技术优化来加班），之后才敢放到生产。&lt;/p&gt;&lt;p data-source-line=&quot;239&quot;&gt;当然如果是新项目，非常推荐尝试下MapStruct。&lt;/p&gt;&lt;h2 data-source-line=&quot;241&quot;&gt;5. Q&amp;amp;A&lt;/h2&gt;&lt;ol data-source-line=&quot;243&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;在项目引入MapStruct时，有人会提出现在反射的性能消耗已经很低了，Spring、Mybatis等各种框架中大量使用反射，为什么还要使用MapStruct这种编译期生成代码的组件？&lt;br/&gt;主要有如下考虑：&lt;br/&gt;1.反射本身的性能损耗还是很大的，但由于开源库对反射进行了缓存等优化处理，才减少反射对性能损耗的影响。然而，相比调用MapStruct生成的方法，优化后的性能还是差很多。&lt;br/&gt;2.开源库使用反射是为了通用性考虑，但在具体的业务场景，对象之间的转换是很确定的。&lt;br/&gt;3.MapStruct组件本身使用很简单（看完这篇博客之后，可以解决大部分应用场景）。同时， MapStruct组件还能处理一些反射无法处理或者更加灵活解决一些应用问题。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;250&quot;&gt;参考&lt;/p&gt;&lt;ol data-source-line=&quot;252&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;https://github.com/MapStruct/MapStruct-examples&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;http://www.kailing.pub/MapStruct1.3/index.html&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://mapstruct.org/documentation/stable/reference/html/&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>36f4141fe272a58d6232f875cf7ffddf</guid>
<title>终于明白了，一文彻底理解 I/O 多路复用</title>
<link>https://toutiao.io/k/8c12y1i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;本篇是高性能、高并发系列的第三篇，承接上文&lt;/span&gt;《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484788&amp;amp;idx=1&amp;amp;sn=e2a084694bedf9b148bbcd5570747add&amp;amp;chksm=fcb9822acbce0b3cba63913ff6de1e37c133b878f02035bc816f7f2ec8423d908bd8560d3605&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;读取文件时程序经历了什么&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;读取文件时程序经历了什么&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;》，&lt;span&gt;在讲解了进程、线程以及I/O后，我们来到了高并发中又一关键技术，即I/O多路复用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在讲解该技术之前，我们需要预习一下文件以及文件描述符。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;什么是文件&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;程序员使用I/O最终都逃不过文件这个概念。&lt;/p&gt;&lt;p&gt;在Linux世界中文件是一个很简单的概念，作为程序员我们只需要将其理解为一个N byte的&lt;strong&gt;序列&lt;/strong&gt;就可以了：&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;b1, b2, b3, b4, ....... bN&lt;/strong&gt;&lt;/em&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;实际上所有的I/O设备都被抽象为了文件这个概念，一切皆文件，Everything is File，磁盘、网络数据、终端，甚至进程间通信工具管道pipe等都被当做文件对待。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.47844228094575797&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0tDTd5HtJx85rducEzeqRG9DFSQQsGiczkqZH322XyKtdBeRebJlvmew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;719&quot;/&gt;&lt;/section&gt;&lt;p&gt;所有的I/O操作也都可以通过文件读写来实现，&lt;strong&gt;这一非常优雅的抽象可以让程序员使用一套接口就能对所有外设I/O操作&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;常用的I/O操作接口一般有以下几类：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;打开文件，open&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;改变读写位置，seek&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;文件读写，read、write&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;关闭文件，close&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;程序员通过这几个接口几乎可以实现所有I/O操作，这就是文件这个概念的强大之处。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;文件描述符&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在上一篇《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484788&amp;amp;idx=1&amp;amp;sn=e2a084694bedf9b148bbcd5570747add&amp;amp;chksm=fcb9822acbce0b3cba63913ff6de1e37c133b878f02035bc816f7f2ec8423d908bd8560d3605&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;读取文件时，程序经历了什么&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;读取文件时，程序经历了什么&lt;/a&gt;》中我们讲到，要想进行I/O读操作，像磁盘数据，我们需要指定一个buff用来装入数据，一般都是这样写的：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;read&lt;/span&gt;(buff);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;但是这里我们忽略了一个关键问题，那就是虽然我们指定了往哪里写数据，但是我们该从哪里读数据呢？&lt;/section&gt;&lt;section&gt;从上一节中我们知道，通过文件这个概念我们能实现几乎所有I/O操作，&lt;strong&gt;因此这里少的一个主角就是文件&lt;/strong&gt;。&lt;/section&gt;&lt;p&gt;那么我们一般都怎样使用文件呢？&lt;/p&gt;&lt;p&gt;如果周末你去比较火的餐厅吃饭应该会有体会，一般周末人气高的餐厅都会排队，然后服务员会给你一个排队序号，通过这个序号服务员就能找到你，这里的好处就是服务员无需记住你是谁、你的名字是什么、来自哪里、喜好是什么、是不是保护环境爱护小动物等等，这里的关键点就是&lt;strong&gt;服务员对你一无所知，但依然可以通过一个号码就能找到你&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;同样的，在Linux世界要想使用文件，我们也需要借助一个号码，根据“&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484768&amp;amp;idx=1&amp;amp;sn=049db350af9e5eea5cf3523ceb83f447&amp;amp;chksm=fcb9823ecbce0b28ca28d021e68c78138cde4a1b86ea7209c0c667d3d544d223d8b2aecbccec&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;弄不懂原则&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;弄不懂原则&lt;/a&gt;”，这个号码就被称为了文件描述符，&lt;strong&gt;file descriptors&lt;/strong&gt;，在Linux世界中鼎鼎大名，其道理和上面那个排队号码一样。&lt;/p&gt;&lt;p&gt;因此，文件描述仅仅就是一个数字而已，但是通过这个数字我们可以操作一个打开的文件，这一点要记住。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1635434412265757&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0VoQpIAibEsDfwQibJ6AjvtueDkDSYLBAQAWjm8Pbcx2DzWwhvjSRt9Xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;587&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有了文件描述符，进程可以对文件一无所知&lt;/strong&gt;，比如文件在磁盘的什么位置、加载到内存中又是怎样管理的等等，这些信息统统交由操作系统打理，进程无需关心，操作系统只需要给进程一个文件描述符就足够了。&lt;/p&gt;&lt;p&gt;因此我们来完善上述程序：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; fd = &lt;span class=&quot;code-snippet__keyword&quot;&gt;open&lt;/span&gt;(file_name); &lt;span class=&quot;code-snippet__regexp&quot;&gt;//&lt;/span&gt; 获取文件描述符&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;read&lt;/span&gt;(fd, buff);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;怎么样，是不是非常简单。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;文件描述符太多了怎么办&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;经过了这么多的铺垫，终于要到高性能、高并发这一主题了。&lt;/p&gt;&lt;p&gt;从前几节我们知道，所有I/O操作都可以通过文件样的概念来进行，这当然包括网络通信。&lt;/p&gt;&lt;p&gt;如果你有一个web服务器，当三次握手成功以后，我们会调用accept来获取一个链接，调用该函数我们同样会得到一个文件描述符，通过这个文件描述符就可以处理客户端发送的请求并且把处理结果发送回去。也就是说通过这个描述符我们就可以和客户端进行通信了。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 通过&lt;span class=&quot;code-snippet__keyword&quot;&gt;accept&lt;/span&gt;获取客户端的文件描述符&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; conn_fd = &lt;span class=&quot;code-snippet__keyword&quot;&gt;accept&lt;/span&gt;(...);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;server的处理逻辑通常是读取客户端请求数据，然后执行某些特定逻辑：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;read&lt;/span&gt;(conn_fd, request_buff) &amp;gt; 0) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    do_something(request_buff);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;是不是非常简单，然而世界终归是复杂的，当然也不是这么简单的。&lt;/p&gt;&lt;p&gt;接下来就是比较复杂的了。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.708&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0Y6IbPK84RcJPC4nicAL1cibqOjK8FtEEprYKJichQAd3AZykrlQjdYrEQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;p&gt;既然我们的主题是高并发，那么&lt;strong&gt;server就不可能只和一个客户端通信&lt;/strong&gt;，而是可能会同时和成千上万个客户端进行通信。&lt;strong&gt;这时你需要处理不再是一个描述符这么简单，而是有可能要处理成千上万个描述符&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;为了不让问题一上来就过于复杂，我们先简单化，假设只同时处理两个客户端的请求。&lt;/p&gt;&lt;p&gt;有的同学可能会说，这还不简单，这样写不就行了：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(read(socket_fd1, buff) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    do_something();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(read(socket_fd2, buff) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    do_something();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;在上一篇《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484788&amp;amp;idx=1&amp;amp;sn=e2a084694bedf9b148bbcd5570747add&amp;amp;chksm=fcb9822acbce0b3cba63913ff6de1e37c133b878f02035bc816f7f2ec8423d908bd8560d3605&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;读取文件时，程序都经历了什么&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;读取文件时，程序都经历了什么&lt;/a&gt;》中我们讨论过这是非常典型的阻塞式I/O，如果此时没有数据可读那么进程会被阻塞而暂停运行，这时我们就无法处理第二个请求了，即使第二个请求的数据已经就位，这也就意味着处理某一个客户端时由于进程被阻塞导致剩下的所有其它客户端必须&lt;strong&gt;等待&lt;/strong&gt;，在同时处理几万客户端的server上，这显然是不能容忍的。&lt;/p&gt;&lt;p&gt;聪明的你一定会想到使用多线程，为每个客户端请求开启一个线程，这样一个客户端被阻塞就不会影响到处理其它客户端的线程了，注意，既然是高并发，那么我们要为成千上万个请求开启成千上万个线程吗，大量创建销毁线程会严重影响系统性能。&lt;/p&gt;&lt;p&gt;那么这个问题该怎么解决呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这里的关键点在于，我们事先并不知道一个文件描述对应的I/O设备是否是可读的、是否是可写的&lt;/strong&gt;，在外设的不可读或不可写的状态下进行I/O只会导致进程阻塞被暂停运行。&lt;/p&gt;&lt;p&gt;因此要优雅的解决这个问题，就要从其它角度来思考这个问题了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0BJ2icaAx4qQjBVVrIw7VamFqBmxLBRRnJCvxQ3SVVOtkl08xNDRADWw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;不要打电话给我，有需要我会打给你&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;大家生活中肯定会接到过推销电话，而且不止一个，一天下来接上十个八个推销电话你的身体会被掏空的。&lt;/p&gt;&lt;p&gt;这个场景的关键点在于打电话的人并不知道你是不是要买东西，只能来一遍遍问你，因此一种更好的策略是不要让他们打电话给你，记下他们的电话，有需要的话打给他们，这样推销员就不会一遍一遍的来烦你了(虽然现实生活中这并不可能)。&lt;/p&gt;&lt;p&gt;在这个例子中，你，就好比内核，推销者就好比应用程序，电话号码就好比文件描述符，和你用电话沟通就好比I/O。&lt;/p&gt;&lt;p&gt;现在你应该明白了吧，处理多个文件描述符的更好方法其实就存在于推销电话中。&lt;/p&gt;&lt;p&gt;因此相比上一节中我们通过I/O接口&lt;strong&gt;主动&lt;/strong&gt;问内核这些文件描述符对应的外设是不是已经就绪了，一种更好的方法是，我们把这些感兴趣的文件描述符一股脑扔给内核，并霸气的告诉内核：“&lt;strong&gt;我这里有1万个文件描述符，你替我监视着它们，有可以读写的文件描述符时你就告诉我，我好处理&lt;/strong&gt;”。而不是弱弱的问内核：“第一个文件描述可以读写了吗？第二个文件描述符可以读写吗？第三个文件描述符可以读写了吗？。。。”&lt;/p&gt;&lt;p&gt;这样应用程序就&lt;strong&gt;从“繁忙”的主动变为了清闲的被动&lt;/strong&gt;，&lt;strong&gt;反正文件描述可读可写了内核会通知我&lt;/strong&gt;，能偷懒我才不要那么勤奋。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv05kOtE9Se6jRyibLf346NDumLwjBx1chdzV3iayw5k4sTj1yZRibptJCgw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/section&gt;&lt;p&gt;这是一种更加高效的I/O处理机制，&lt;strong&gt;现在我们可以一次处理多路I/O了&lt;/strong&gt;，为这种机制起一个名字吧，再次祭出“&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484768&amp;amp;idx=1&amp;amp;sn=049db350af9e5eea5cf3523ceb83f447&amp;amp;chksm=fcb9823ecbce0b28ca28d021e68c78138cde4a1b86ea7209c0c667d3d544d223d8b2aecbccec&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;弄不懂原则&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;弄不懂原则&lt;/a&gt;”，就叫I/O多路复用吧，这就是 I/O multiplexing。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;I/O多路复用，I/O multiplexing&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;multiplexing一词其实多用于通信领域，为了充分利用通信线路，希望在一个信道中传输多路信号，要想在一个信道中传输多路信号就需要把这多路信号结合为一路，将多路信号组合成一个信号的设备被称为multiplexer，显然接收方接收到这一路组合后的信号后要恢复原先的多路信号，这个设备被称为demultiplexer，如图所示：&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3772032902467685&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8g3rwJPmya3k5TFfEicLibY7eJxAWPJZS6mXnPmJeB3IbwnRcJMBKXg8mn3SaUYL9K2nIAJV61dLYJRav9icp7xMQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;851&quot;/&gt;&lt;/section&gt;&lt;p&gt;回到我们的主题。&lt;/p&gt;&lt;p&gt;所谓I/O多路复用指的是这样一个过程：&lt;/p&gt;&lt;p&gt;1. 我们拿到了一堆文件描述符(不管是网络相关的、还是磁盘文件相关等等，任何文件描述符都可以)&lt;/p&gt;&lt;p&gt;2. 通过调用&lt;strong&gt;某个函数&lt;/strong&gt;告诉内核：“&lt;strong&gt;这个函数你先不要返回，你替我监视着这些描述符，当这堆文件描述符中有可以进行I/O读写操作的时候你再返回&lt;/strong&gt;”&lt;/p&gt;&lt;p&gt;3. 当调用的这个函数返回后我们就能知道哪些文件描述符可以进行I/O操作了。&lt;/p&gt;&lt;p&gt;也就是说&lt;strong&gt;通过I/O多路复用我们可以同时处理多路I/O&lt;/strong&gt;。那么有哪些函数可以用来进行I/O多路复用呢？&lt;/p&gt;&lt;p&gt;在Linux世界中有这样三种机制可以用来进行I/O多路复用：&lt;/p&gt;&lt;p&gt;接下来我们就来介绍一下牛掰的I/O多路复用三剑客。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.429042904290429&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0GepzW6Zr4GgCdQrVwMQvOpUCw6PrJO8ql1MHrqZqpVkNHJypFcVkiaw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;303&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;I/O多路复用三剑客&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本质上select、poll、epoll都是阻塞式I/O，也就是我们常说的同步I/O，原因在于调用这些I/O多路复用函数时如果任何一个需要监视的文件描述符都不可读或者可写那么进程会被阻塞暂停执行，直到有文件描述符可读或者可写才继续运行。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1，select：初出茅庐&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在select这种I/O多路复用机制下，我们需要把想监控的文件描述集合通过函数参数的形式告诉select，然后select会将这些文件描述符集合&lt;strong&gt;拷贝&lt;/strong&gt;到内核中，我们知道数据拷贝是有性能损耗的，因此为了减少这种数据拷贝带来的性能损耗，Linux内核对集合的大小做了限制，并规定用户监控的文件描述集合不能超过1024个，同时当select返回后&lt;strong&gt;我们仅仅能知道有些文件描述符可以读写了，但是我们不知道是哪一个&lt;/strong&gt;，因此程序员必须再遍历一边找到具体是哪个文件描述符可以读写了。&lt;/p&gt;&lt;p&gt;因此，总结下来select有这样几个特点：&lt;/p&gt;&lt;p&gt;因此我们可以看到，select机制的这些特性在高并发网络服务器动辄几万几十万并发链接的场景下无疑是低效的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5936507936507937&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0jofjqXUFYU9vTFWIbtv5Xlsp3I68iaxWicECgousqLpgLBMia4pauKSVQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;315&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2，poll：小有所成&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;poll和select是非常相似的，poll相对于select的优化仅仅在于解决了文件描述符不能超过1024个的限制，select和poll都会随着监控的文件描述数量增加而性能下降，因此不适合高并发场景。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3，epoll：独步天下&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在select面临的三个问题中，文件描述数量限制已经在poll中解决了，剩下的两个问题呢？&lt;/p&gt;&lt;p&gt;针对拷贝问题，epoll使用的策略是&lt;strong&gt;各个击破&lt;/strong&gt;与&lt;strong&gt;共享内存&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;实际上文件描述符集合的变化频率比较低，select和poll频繁的拷贝整个集合，内核都快被烦死了，epoll通过引入epoll_ctl很体贴的做到了只操作那些有变化的文件描述符，同时epoll和内核还成为了好朋友，共享了同一块内存，这块内存中保存的就是那些已经可读或者可写的的文件描述符集合，这样就减少了内核和程序的拷贝开销。&lt;/p&gt;&lt;p&gt;针对需要遍历文件描述符才能知道哪个可读可写这一问题，epoll使用的策略是“当小弟”。&lt;/p&gt;&lt;p&gt;在select和poll机制下，&lt;strong&gt;进程要亲自下场去各个文件描述符上等待&lt;/strong&gt;，任何一个文件描述可读或者可写就唤醒进程，但是进程被唤醒后也是一脸懵逼并不知道到底是哪个文件描述符可读或可写，还要再从头到尾检查一遍。&lt;/p&gt;&lt;p&gt;但epoll就懂事多了，主动找到进程要当小弟替大哥出头。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.494&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0ShdV4HDxVwG3K0hMfbqlib853kYuGRTuxDASibiaMFj81et8eqTNtm8qg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;p&gt;在这种机制下，进程不需要亲自下场了，进程只要等待在epoll上，epoll代替进程去各个文件描述符上等待，当哪个文件描述符可读或者可写的时候就告诉epoll，epoll用小本本认真记录下来然后唤醒大哥：“进程大哥，快醒醒，你要处理的文件描述符我都记下来了”，这样进程被唤醒后就无需自己从头到尾检查一遍，因为epoll小弟都已经记下来了。&lt;/p&gt;&lt;p&gt;因此我们可以看到，在epoll这种机制下，实际上利用的就是“不要打电话给我，有需要我会打给你”这种策略，进程不需要一遍一遍麻烦的问各个文件描述符，而是翻身做主人了，“你们这些文件描述符有哪个可读或者可写了主动报上来”，这种机制实际上就是大名鼎鼎的事件驱动，Event-driven，这也是我们下一篇的主题。&lt;/p&gt;&lt;p&gt;实际上在Linux平台，&lt;strong&gt;epoll基本上就是高并发的代名词&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;基于一切皆文件的设计哲学，I/O也可以通过文件的形式实现，高并发场景下要与多个文件交互，这就离不开高效的I/O多路复用技术，本文我们详细讲解了什么是I/O多路复用以及使用方法，这其中以epoll为代表的I/O多路复用(基于事件驱动)技术使用非常广泛，实际上你会发现但凡涉及到高并发、高性能的场景基本上都能见到事件驱动的编程方法，当然这也是下一篇我们要重点讲解的主题，敬请期待。&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__0&quot;&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2934&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2935&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2936&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2937&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2938&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2939&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2940&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2941&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2942&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2943&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;伟&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2944&quot;&gt;伟&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2945&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2946&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;分&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2947&quot;&gt;分&lt;/span&gt;&lt;span data-raw-text=&quot;割&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2948&quot;&gt;割&lt;/span&gt;&lt;span data-raw-text=&quot;线&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2949&quot;&gt;线&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2950&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2951&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2952&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2953&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2954&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2955&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2956&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2957&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2958&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2959&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2960&quot;&gt;-&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2961&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;H&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2962&quot;&gt;H&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2963&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2964&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2965&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2966&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot;(&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2967&quot;&gt;(&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2968&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2969&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2970&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;f&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2971&quot;&gt;f&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2972&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2973&quot;&gt;m&lt;/span&gt;&lt;span data-raw-text=&quot;i&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2974&quot;&gt;i&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2975&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;y&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2976&quot;&gt;y&lt;/span&gt;&lt;span data-raw-text=&quot;)&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2977&quot;&gt;)&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;98&quot; data-index=&quot;2978&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;由&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2979&quot;&gt;由&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2980&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;群&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2981&quot;&gt;群&lt;/span&gt;&lt;span data-raw-text=&quot;靠&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2982&quot;&gt;靠&lt;/span&gt;&lt;span data-raw-text=&quot;谱&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2983&quot;&gt;谱&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2984&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;人&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2985&quot;&gt;人&lt;/span&gt;&lt;span data-raw-text=&quot;建&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2986&quot;&gt;建&lt;/span&gt;&lt;span data-raw-text=&quot;立&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2987&quot;&gt;立&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2988&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;愿&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2989&quot;&gt;愿&lt;/span&gt;&lt;span data-raw-text=&quot;为&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2990&quot;&gt;为&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2991&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;H&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2992&quot;&gt;H&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2993&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2994&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;r&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2995&quot;&gt;r&lt;/span&gt;&lt;span data-raw-text=&quot;带&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2996&quot;&gt;带&lt;/span&gt;&lt;span data-raw-text=&quot;来&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2997&quot;&gt;来&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2998&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;些&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2999&quot;&gt;些&lt;/span&gt;&lt;span data-raw-text=&quot;值&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3000&quot;&gt;值&lt;/span&gt;&lt;span data-raw-text=&quot;得&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3001&quot;&gt;得&lt;/span&gt;&lt;span data-raw-text=&quot;细&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3002&quot;&gt;细&lt;/span&gt;&lt;span data-raw-text=&quot;细&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3003&quot;&gt;细&lt;/span&gt;&lt;span data-raw-text=&quot;品&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3004&quot;&gt;品&lt;/span&gt;&lt;span data-raw-text=&quot;味&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3005&quot;&gt;味&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3006&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3007&quot;&gt;精&lt;/span&gt;&lt;span data-raw-text=&quot;神&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3008&quot;&gt;神&lt;/span&gt;&lt;span data-raw-text=&quot;食&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3009&quot;&gt;食&lt;/span&gt;&lt;span data-raw-text=&quot;粮&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3010&quot;&gt;粮&lt;/span&gt;&lt;span data-raw-text=&quot;！&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3011&quot;&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__3&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot;&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3012&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3013&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3014&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot;只&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3015&quot;&gt;只&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3016&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3017&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;创&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3018&quot;&gt;创&lt;/span&gt;&lt;span data-raw-text=&quot;或&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3019&quot;&gt;或&lt;/span&gt;&lt;span data-raw-text=&quot;授&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3020&quot;&gt;授&lt;/span&gt;&lt;span data-raw-text=&quot;权&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3021&quot;&gt;权&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3022&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;表&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3023&quot;&gt;表&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3024&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3025&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3026&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3027&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;不&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3028&quot;&gt;不&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3029&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;载&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3030&quot;&gt;载&lt;/span&gt;&lt;span data-raw-text=&quot;网&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3031&quot;&gt;网&lt;/span&gt;&lt;span data-raw-text=&quot;上&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3032&quot;&gt;上&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3033&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3034&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3035&quot;&gt;章&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__5&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__6&quot;&gt;&lt;span data-raw-text=&quot;所&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3036&quot;&gt;所&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3037&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3038&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3039&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3040&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3041&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;均&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3042&quot;&gt;均&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3043&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;找&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3044&quot;&gt;找&lt;/span&gt;&lt;span data-raw-text=&quot;到&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3045&quot;&gt;到&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3046&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3047&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3048&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;进&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3049&quot;&gt;进&lt;/span&gt;&lt;span data-raw-text=&quot;行&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3050&quot;&gt;行&lt;/span&gt;&lt;span data-raw-text=&quot;沟&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3051&quot;&gt;沟&lt;/span&gt;&lt;span data-raw-text=&quot;通&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3052&quot;&gt;通&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3053&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__7&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__8&quot;&gt;&lt;span&gt;&lt;span data-raw-text=&quot;也&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3054&quot;&gt;也&lt;/span&gt;&lt;span data-raw-text=&quot;希&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3055&quot;&gt;希&lt;/span&gt;&lt;span data-raw-text=&quot;望&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3056&quot;&gt;望&lt;/span&gt;&lt;span data-raw-text=&quot;各&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3057&quot;&gt;各&lt;/span&gt;&lt;span data-raw-text=&quot;位&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3058&quot;&gt;位&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3059&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3060&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;打&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3061&quot;&gt;打&lt;/span&gt;&lt;span data-raw-text=&quot;赏&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3062&quot;&gt;赏&lt;/span&gt;&lt;span data-raw-text=&quot;（&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3063&quot;&gt;（&lt;/span&gt;&lt;span data-raw-text=&quot;算&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3064&quot;&gt;算&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3065&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3066&quot;&gt;稿&lt;/span&gt;&lt;span data-raw-text=&quot;费&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3067&quot;&gt;费&lt;/span&gt;&lt;span data-raw-text=&quot;给&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3068&quot;&gt;给&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3069&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3070&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3071&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3072&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;）&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3073&quot;&gt;）&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3074&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3075&quot;&gt;更&lt;/span&gt;&lt;span data-raw-text=&quot;希&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3076&quot;&gt;希&lt;/span&gt;&lt;span data-raw-text=&quot;望&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3077&quot;&gt;望&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3078&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;家&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3079&quot;&gt;家&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3080&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3081&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3082&quot;&gt;投&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;102&quot; data-index=&quot;3083&quot;&gt;稿&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__9&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__10&quot;&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3085&quot;&gt;投&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3086&quot;&gt;稿&lt;/span&gt;&lt;span data-raw-text=&quot;请&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3087&quot;&gt;请&lt;/span&gt;&lt;span data-raw-text=&quot;联&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3088&quot;&gt;联&lt;/span&gt;&lt;span data-raw-text=&quot;系&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3089&quot;&gt;系&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3090&quot;&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__11&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__12&quot;&gt;&lt;span data-raw-text=&quot;s&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3091&quot;&gt;s&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3092&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3093&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;n&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3094&quot;&gt;n&lt;/span&gt;&lt;span data-raw-text=&quot;z&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3095&quot;&gt;z&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3096&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3097&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3098&quot;&gt;1&lt;/span&gt;&lt;span data-raw-text=&quot;6&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3099&quot;&gt;6&lt;/span&gt;&lt;span data-raw-text=&quot;3&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3100&quot;&gt;3&lt;/span&gt;&lt;span data-raw-text=&quot;@&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3101&quot;&gt;@&lt;/span&gt;&lt;span data-raw-text=&quot;g&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3102&quot;&gt;g&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3103&quot;&gt;m&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3104&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;i&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3105&quot;&gt;i&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3106&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;.&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3107&quot;&gt;.&lt;/span&gt;&lt;span data-raw-text=&quot;c&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3108&quot;&gt;c&lt;/span&gt;&lt;span data-raw-text=&quot;o&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3109&quot;&gt;o&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3110&quot;&gt;m&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__13&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__14&quot;&gt;&lt;span data-raw-text=&quot;本&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3111&quot;&gt;本&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3112&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;由&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3113&quot;&gt;由&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3114&quot;&gt;  &lt;span&gt;码农的荒岛求生&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3118&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;授&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3119&quot;&gt;授&lt;/span&gt;&lt;span data-raw-text=&quot;权&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3120&quot;&gt;权&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3121&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3122&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3123&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3124&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3125&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3126&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;布&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3127&quot;&gt;布&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3128&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3129&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;载&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3130&quot;&gt;载&lt;/span&gt;&lt;span data-raw-text=&quot;请&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3131&quot;&gt;请&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3132&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;明&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3133&quot;&gt;明&lt;/span&gt;&lt;span data-raw-text=&quot;本&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3134&quot;&gt;本&lt;/span&gt;&lt;span data-raw-text=&quot;来&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3135&quot;&gt;来&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3136&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;信&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3137&quot;&gt;信&lt;/span&gt;&lt;span data-raw-text=&quot;息&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3138&quot;&gt;息&lt;/span&gt;&lt;span data-raw-text=&quot;和&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3139&quot;&gt;和&lt;/span&gt;&lt;span data-raw-text=&quot;以&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3140&quot;&gt;以&lt;/span&gt;&lt;span data-raw-text=&quot;下&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3141&quot;&gt;下&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3142&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3143&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3144&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3145&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;（&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3146&quot;&gt;（&lt;/span&gt;&lt;span data-raw-text=&quot;长&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3147&quot;&gt;长&lt;/span&gt;&lt;span data-raw-text=&quot;按&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3148&quot;&gt;按&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3149&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;识&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3150&quot;&gt;识&lt;/span&gt;&lt;span data-raw-text=&quot;别&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3151&quot;&gt;别&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3152&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3153&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3154&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3155&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3156&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;）&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3157&quot;&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__15&quot;&gt;&lt;span&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;other&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/LHDiahSVnXhunbEtuowcI7kF5kmUaeTrszibibQ3st6OU8hy2CoIotHHLxicicibyF1qkNI7HibXYHXGN6hRby4ZyjR6A/640?wx_fmt=other&quot;/&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c70d98262225ce5b5538991e4e8edf26</guid>
<title>深入 Spring Boot（十四）：jar/war 打包解决方案</title>
<link>https://toutiao.io/k/f0lsq51</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;最近有位网友通过公众号找到我咨询一个SpringBoot项目打包的问题。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.2935185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gDHRjEowjKRhFfHXAr8FVAyPoXQyKFtPs0VESkXQIXDqK0UE55Aiawc7wZnSLxiaJjgRXn605dyiachjGicTEXxEOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;这位朋友说网络上有很多重复、不可用的技术文章，这个倒是事实，更糟糕的一些自媒体为了流量抄来抄去，增加我们查找解决方案的时间成本，我也尝试去搜索了一下“SpringBoot打包”，结果不尽人意，所以，总结了这篇打包解决方案。&lt;/p&gt;&lt;p&gt;基于SpringBoot开发的项目代码可以打包成可执行jar，也可以打包成war，这个视不同需求而定，下面以SpringBoot2.4.0版本为例，分别列举了不同使用方式下的jar和war打包操作。&lt;/p&gt;&lt;h2&gt;构建可执行jar包&lt;/h2&gt;&lt;p&gt;SpringBoot推荐将应用系统构建成可执行jar包，使用内置应用服务器运行项目代码。&lt;/p&gt;&lt;h3&gt;继承spring-boot-starter-parent&lt;/h3&gt;&lt;p&gt;如果项目配置了pom继承spring-boot-starter-parent，就像下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-starter-parent&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.4.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;此时要把项目代码打包成jar，需要在pom中配置packaging=jar，就是下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;span&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;接着，使用finalName标签配置最终jar包的名字，然后配置spring-boot-maven-plugin插件，例如如下配置：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-maven-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上就是pom中的配置了，接下来执行jar打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打jar包。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7543478260869565&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gDHRjEowjKRhFfHXAr8FVAyPoXQyKFtPhicxiaRsibIpL2etZNq42K0dZjDNHQNiaL5we4SNzscOFvXcnK28MksRtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;460&quot;/&gt;&lt;/p&gt;&lt;p&gt;如果想通过执行mvn指令打jar，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打jar包。&lt;/p&gt;&lt;h3&gt;不继承spring-boot-starter-parent&lt;/h3&gt;&lt;p&gt;如果项目pom文件没有继承spring-boot-starter-parent，要想将项目代码构建成可执行jar包，同样需要在pom中配置packaging=jar，就是下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;span&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;接着，使用finalName标签配置最终jar包的名字，然后配置spring-boot-maven-plugin插件，这里不一样的是需要配置goal=repackage，例如如下配置：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-maven-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.4.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                    &lt;/span&gt;&lt;span&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                            &lt;/span&gt;&lt;span&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;&lt;span&gt;repackage&lt;/span&gt;&lt;span&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                    &lt;/span&gt;&lt;span&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上就是pom中的配置了，接下来执行jar打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打jar包；如果想通过执行mvn指令打jar，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打jar包。&lt;/p&gt;&lt;h2&gt;构建可部署war包&lt;/h2&gt;&lt;p&gt;如果需要将项目代码构建成war包，可参考如下两个不同的方式。不过需要注意，对于web应用，SpringBoot2.4使用Servlet3，所以war包需要部署在支持Servlet3的应用服务器上，例如tomcat8.0及以上版本。&lt;/p&gt;&lt;h3&gt;继承spring-boot-starter-parent&lt;/h3&gt;&lt;p&gt;如果配置了项目pom继承spring-boot-starter-parent，就像下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-starter-parent&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.4.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;此时要把项目代码打包成jar，需要在pom中配置packaging=war，就是下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;&lt;span&gt;war&lt;/span&gt;&lt;span&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;接着，使用finalName标签配置最终war包的名字，然后配置spring-boot-maven-plugin插件，例如如下配置：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-maven-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上就是pom中的配置了，接下来执行war打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打war包；如果想通过执行mvn指令打war，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打war包。&lt;/p&gt;&lt;h3&gt;不继承spring-boot-starter-parent&lt;/h3&gt;&lt;p&gt;如果项目pom文件没有继承spring-boot-starter-parent，要想将项目代码构建成war包，同样需要在pom中配置packaging=war，就是下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;&lt;span&gt;war&lt;/span&gt;&lt;span&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;接着，使用finalName标签配置最终war包的名字，然后配置构建war包需要使用到的插件，spring-boot-maven-plugin中同样需要配置goal=repackage，例如如下配置：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-antrun-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;1.8&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-assembly-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.3.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-clean-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.1.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-compiler-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.8.1&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-dependency-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.1.2&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-deploy-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.8.2&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-enforcer-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.0.0-M3&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-failsafe-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.22.2&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-help-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-install-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.5.2&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-invoker-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.1&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-jar-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-javadoc-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-resources-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-shade-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.4&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-source-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.1&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-surefire-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.22.2&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-war-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.3.1&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-maven-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.4.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                    &lt;/span&gt;&lt;span&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;&lt;span&gt;repackage&lt;/span&gt;&lt;span&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                    &lt;/span&gt;&lt;span&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上配置中的插件版本号参考自SpringBoot2.4.0中的spring-boot-dependencies-2.4.0.pom，它是spring-boot-starter-parent的父文件。&lt;/p&gt;&lt;p&gt;以上就是pom中的配置了，接下来执行war打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打war包；如果想通过执行mvn指令打war，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打war包。&lt;/p&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;从上述操作可以看到，是否继承spring-boot-starter-parent，打包配置还是有些不同的。因为spring-boot-starter-parent pom.xml中已经帮我们管理好了打包需要用到的spring-boot-maven-plugin插件和它需要依赖的其它插件，所以通过继承可以直接使用spring-boot-maven-plugin。有时，我们的项目有自己的parent pom.xml，此时没有继承spring-boot-starter-parent，那么如果还要想使用spring-boot-maven-plugin插件，就需要自定义管理它所依赖的maven插件。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484878&amp;amp;idx=1&amp;amp;sn=daee4e4702b0d3a44daf8599501d72e8&amp;amp;chksm=e9bf5750dec8de4656a9aaf85ada2ca8042921c8e52b57c494cc9af52e615e19fb101a485103&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;Java开发人员必知的常用类库，这些你都知道吗？&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484871&amp;amp;idx=1&amp;amp;sn=74ede98f0281459c8ded84bd5178caa0&amp;amp;chksm=e9bf5759dec8de4fa24d29ada560d50e73dd35264a02fdd85aab44c4a931af8f1f6e47d1b683&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;聊一聊Redis官方置顶推荐的Java客户端Redisson&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484828&amp;amp;idx=1&amp;amp;sn=bbdfbbed2c5e97dd58386df08fc011db&amp;amp;chksm=e9bf5702dec8de14016f5468ee387d8b326cdec0eca0013e8b5b95d945897f64a6cb817793d3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;我画了25张图展示线程池工作原理和实现原理，原创干货，建议先收藏再阅读&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484763&amp;amp;idx=1&amp;amp;sn=a67f151b04967d149c2b60ed648e5dbf&amp;amp;chksm=e9bf57c5dec8ded33ccfc6cd269c4736eec528b8e6ab4cc6c2beb11deb744e7f78d7b61ec72b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;Spring框架你敢写精通，面试官就敢问@Autowired注解的实现原理&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484742&amp;amp;idx=1&amp;amp;sn=54e9e3e9de14d3681a8d426d90f5d687&amp;amp;chksm=e9bf57d8dec8decec68531bd74f92a6dba3fb4e74564c27fa9933ece75290d27ffa317a4a8ae&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;面试被问为什么使用Spring Boot？答案好像没那么简单&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484730&amp;amp;idx=1&amp;amp;sn=dd043e8eb2fbf4ca7df266aabed45443&amp;amp;chksm=e9bf57a4dec8deb2e7162250c559dd4d2189681f6e08b37da371d04867698a26b9be062fc24b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;Spring声明式事务处理的实现原理，来自面试官的穷追拷问&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484712&amp;amp;idx=1&amp;amp;sn=982a0801e878700b42b48f7fae3e5f30&amp;amp;chksm=e9bf57b6dec8dea04544c551c8206897f66efb81f49532b65df4ff878ad284c261b48ad9e3dd&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;没使用加号拼接字符串，面试官竟然问我为什么&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484707&amp;amp;idx=1&amp;amp;sn=3eea7537f43fcf0cd646d9bc64fd657f&amp;amp;chksm=e9bf57bddec8deab4ffea25c68197d82c1b46ba58ad0963c9fc0ee6d79f9c47c29660875187f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;面试官一步一步的套路你，为什么SimpleDateFormat不是线程安全的&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484701&amp;amp;idx=1&amp;amp;sn=67ba3d2cedbd7a475371acfc474210e1&amp;amp;chksm=e9bf5783dec8de95e76115bc1fbd14401f8b41030d7aa5ebd42894eba56f138fd03f153718a4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;都说ThreadLocal被面试官问烂了，可为什么面试官还是喜欢继续问&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484696&amp;amp;idx=1&amp;amp;sn=54c8b5ad9373d88564032c8bc4bc0926&amp;amp;chksm=e9bf5786dec8de90506632f193789cc088165985e35320a5e2a64f6a1230f5d74c9118a811af&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;Java注解是如何玩转的，面试官和我聊了半个小时&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;学之多，而后知之少&lt;/strong&gt;&lt;span&gt;！朋友们点【在看】是我持续更新的最大动力!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-type=&quot;png&quot; data-ratio=&quot;0.5555555555555556&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gDHRjEowjKSxTAD3licFmGltOsliao1ZVHCicnRtbiarMjXCkm2y0FjRlsJ596O4ibOAoOib1XWGhXlYX8x0wYXIPfxg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ec46444fd145e74df6de3c00848d746c</guid>
<title>手撸卷积神经网络之手写数字识别 (Java)</title>
<link>https://toutiao.io/k/o6s132j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h1&gt;&lt;a id=&quot;user-content-digit-recognition-cnn-and-ann-using-mnist-with-gui&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#digit-recognition-cnn-and-ann-using-mnist-with-gui&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI&lt;/h1&gt;
&lt;p&gt;Training and testing using MNIST dataset (60000train set,1000test set) with 0.5% error (some drawings are out of 28*28, some drawings only half of them are scanned, or wrong labeling and so on)&lt;br/&gt;
There are some MNIST datasets in internet, you could download yourself or download from these links:&lt;br/&gt;
CSV: &lt;a href=&quot;https://pjreddie.com/projects/mnist-in-csv/&quot; rel=&quot;nofollow&quot;&gt;https://pjreddie.com/projects/mnist-in-csv/&lt;/a&gt;&lt;br/&gt;
TXT:&lt;a href=&quot;https://drive.google.com/drive/folders/10MfF2F5M40NxEFLSpaHWCMo4y8yEMivI&quot; rel=&quot;nofollow&quot;&gt;https://drive.google.com/drive/folders/10MfF2F5M40NxEFLSpaHWCMo4y8yEMivI&lt;/a&gt;&lt;br/&gt;
After download, move them to &quot;/dataset&quot;, change the invoking method in Datainfo.java constructor according to your dataset format, in my case, I use the txt one.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trainSets = ReadFile.readFromSingleCsv(&quot;mnist_train.csv&quot;);
trainSets = ReadFile.readFromSingleTxt(&quot;mnist_digits_train.txt&quot;);
trainSets = ReadFile.readFromSingle???(&quot;mnist_digits_train.???&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This program is based on Single layer Neural Network with 10 neurons using Softmax as output in both ANN and CNN mode.&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-drawing-with-cnn-model&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#drawing-with-cnn-model&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Drawing with CNN Model&lt;/h1&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/blob/master/imagesUpdated/MnistCNNDrawing.gif&quot;&gt;&lt;img src=&quot;https://github.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/raw/master/imagesUpdated/MnistCNNDrawing.gif&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-ann-accuray&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#ann-accuray&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;ANN accuray&lt;/h1&gt;
&lt;p&gt;Random try--training only 10+ seconds(3-5 epoches), test set 92.61%, train set 93.06% (without using back propagation and keep best weights)
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/ANN3and5epochAccuracy.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/ANN3and5epochAccuracy.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-cnn-accuray---train-7-mins-to-100&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#cnn-accuray---train-7-mins-to-100&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;CNN accuray-- train 7 mins to 100%&lt;/h1&gt;
&lt;p&gt;Training with 16 random designed filters without using back propagation and keep best weights, around 35 epoches is enough to reach 99% acc for train set, but it need more time to reach 100%, I randomly try like below gif, it takes 285 epoches to reach 100% acc, and too
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/blob/master/imagesUpdated/MnistCNN100Acc.gif&quot;&gt;&lt;img src=&quot;https://github.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/raw/master/imagesUpdated/MnistCNN100Acc.gif&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-the-changing-of-weights&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#the-changing-of-weights&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;The changing of weights&lt;/h1&gt;
&lt;p&gt;Following picture describe how weights change when it has only 2,5,10,20,30.....50 data sets respectively to be trained&lt;br/&gt;
Blue=positive, White=0, Red=negative, you could realize how weights work especially obviously in the 4th row and 2nd column example when the dataset only includes number &quot;1&quot; and &quot;4&quot;, you could also see the difference between ANN and CNNs&#x27; weights in the last row&#x27;s example
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/LessThan50DatasetsWeightsChanges.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/LessThan50DatasetsWeightsChanges.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;
Here is how weights change between 1st and 5th epoches for ANN
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/LR0.05Epoch1and5Difference.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/LR0.05Epoch1and5Difference.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-false-prediction-overfitting&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#false-prediction-overfitting&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;False prediction (Overfitting)&lt;/h1&gt;
&lt;p&gt;I made a function to show random false predictions of a selected number, try to use it after you try the model, and you will find out why the accuracy of a good model base on MNIST dataset should not be more than 99.5% as I mentioned in beginning, unless you accept wrong labeling the numbers(some are even not looking like numbers),
as you notice neuron for number &quot;8&quot; has a large loss all the time, so I will show you some of the false prediction about &quot;8&quot;, also check how it influence &quot;9&quot;&#x27;s prediction by overfitting
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/false8.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/false8.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;
Lets show a bit random numbers&#x27; false examples of train set(60000 data sets)
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/randomFalse.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/randomFalse.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;
      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>85dd3275f7318de27cf0154dbb6de832</guid>
<title>带领团队学习成长，干货总结 (2020)</title>
<link>https://toutiao.io/k/j2sfcli</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.33184855233853006&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRgzIV2YTLYP1C9K6m6ZesXIGMic8cBk5es1ZicMDfULrExGEw49a51icWhlYkA1pXmib62xNNUDrMgXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;898&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;正文共&lt;/span&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3166&lt;/span&gt;&lt;span&gt;字 &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;图  &lt;/span&gt;&lt;span&gt;预计阅读时间：&lt;/span&gt;&lt;span&gt; 8分钟&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在2020年这个非同寻常的年份里面，自己与团队小伙伴一起利用周例会时间，分享学习了《架构整洁之道》系列内容，同团队一起学习成长。在这个岁末年终的日子里，动，来对自己本年度带领团队学习成长做个总结，分享给大家参考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文主要内容思路围绕以下几点：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过系列学习分享，我们get到了什么？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们搞这个系列的分享，初衷是什么？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过系列分享，是否可以指导我们技术设计？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Part1：收获&lt;/h2&gt;&lt;h3&gt;1.1 《架构整洁之道》系列内容&lt;/h3&gt;&lt;p&gt;&lt;span&gt;主要内容总结一下，主要分以下几部分：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;编程范式（结构化编程、面向对象编程和函数式编程）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;设计原则（主要是SOLID）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;组件处理（依赖、边界）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;软件架构（其中讲了很多高屋建瓴的内容）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9689265536723164&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTSoWhM28lk2cKXlRNVuNPGXcPrFAO327dOzAhJK0kj3pEEQSvuMSr3hSE18t1rUEjhcWB5CGssew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;354&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单概况一下即包括 微观（代码层面）和宏观（架构层面）两个层面的主要开发技能。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;1.2 “架构”到底是什么？&lt;/h3&gt;&lt;p&gt;&lt;span&gt;可能我们天天会说到“架构”，那它到底是什么呢？&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;软件架构（software architecture）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。-- 来自维基百科&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;系统其实是一群关联个体的组成，系统中的个体需要“根据某种规则”协作，架构需要明确这种协作规则。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构＝骨&lt;span&gt;架&lt;/span&gt;、结&lt;span&gt;构&lt;/span&gt;，源于建筑学。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;骨架&lt;/span&gt; 揭示架构中内在的支撑物；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;结构&lt;/span&gt; 则表明架构关心支撑物相互结合的某种构造方式。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构的价值是什么呢？&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;1.3 “架构”的目的是什么？&lt;/h3&gt;&lt;p&gt;&lt;span&gt;架构设计的主要目的是&lt;span&gt;为了解决软件系统复杂度带来的问题。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当明确了架构的目的之后，会有哪些好处？&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;主要对于“老鸟”架构师与“新手”架构师区分而言&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现实中我们还会遇到一些这样的讨论：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;影响我们做决策的首要依据应该是系统复杂度，那该如何分析呢？&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;1.4 复杂度主要分析点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;系统复杂度主要分为以下几点：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;NoSQL为了解决关系型数据库无法对应高并发访问带来的访问压力&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全文搜索引擎为了解决关系型数据库like检索低效的问题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hadoop为了解决传统文件系统无法应对海量数据存储和计算的问题&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-indent-1=&quot;&quot;&gt;&lt;span&gt;量变引起质变&lt;/span&gt;&lt;/p&gt;&lt;p data-indent-1=&quot;&quot;&gt;&lt;span&gt;功能越多（数据越多），导致系统复杂度指数级上升&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3765432098765432&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTSoWhM28lk2cKXlRNVuNPGzs88b82nYic4KkT9iaAHX9e8tiagSRjrFn7a5FjIreVfkQhhrCrIgEd5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1296&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;1.5 架构设计的原则有哪些？&lt;/h3&gt;&lt;p&gt;&lt;span&gt;同样的代码，不论是不是同一人写的，执行结果是确定的，但是同一个系统，不同的架构师，最终都可以解决问题，但设计方案却可能大不相同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构设计的原则主要是&lt;span&gt;解决不确定性&lt;/span&gt;，也是优秀程序员与架构师区分点所在。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何解决这种“不确定性”呢？&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;合适原则&lt;/span&gt;&lt;span&gt;：合适优于业界领先&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;将军难打无兵之仗（人手不足，却想产出多）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;罗马不是一天建成的（例如各大电商平台的“双11”抢购技术能力支持）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;冰山下面才是关键（没有业务场景，却幻想灵光一现）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;简单原则&lt;/span&gt;&lt;span&gt;：简单优于复杂&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结构复杂性（组件多，关联多，故障概率大，定位问题困难）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;逻辑复杂性（集所有功能于一身）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《UNIX 编程艺术》KISS：Keep it Simple，Stupid!&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;演化原则&lt;/span&gt;&lt;span&gt;：演化优于一步到位&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就软件而言，变化才是主题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;满足当前的业务需要&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;应用过程中迭代，保留优秀，修复缺陷的设计，改正错误的设计&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务变化时，扩展、重构，甚至重写&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Part2：初衷&lt;/h2&gt;&lt;h3&gt;2.1 软件系统的价值&lt;/h3&gt;&lt;p&gt;&lt;span&gt;软件系统价值主要分为&lt;span&gt;行为价值&lt;/span&gt;和&lt;span&gt;架构价值&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事实表明，随着软件复杂度的上升，工程师人数随之增加，但是代码量到达一定量之后涨幅呈现缓慢。但是代码维护成本却呈指数级上升，同时工程师的生产效率也会随之降低，需求变更维护成本增大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.43829113924050633&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTSoWhM28lk2cKXlRNVuNPGR6ZLhDaLuHibs9ibS3ic0lb8o57X49jX3F3UMdbsog9k28lTUqa8JoGDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;632&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;2.2 对程序员的简单分类&lt;/h3&gt;&lt;p&gt;&lt;span&gt;编写代码的方式有很多，只要能让程序跑起来，能正确地处理业务流程和对数据进行计算，就可以说“会编写代码”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;程序员需要熟悉整个程序的逻辑及处理过程，需要熟悉程序语言的特性，还需要熟悉一些计算机操作系统的交互调用方式，才能写出从用户侧交互，到数据和业务逻辑处理，再到与计算机系统交互的代码，有效地把用户信息、数据、业务和计算机串联和拼装出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还需要易读、易扩展、易维护，甚至可以直接重用。于是，这些人使用各种各样的手段和技术不断提高代码的易读性、可扩展性、可维护性和重用性。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;2.3 我们的初衷&lt;/h3&gt;&lt;p&gt;&lt;span&gt;谈到我们学习《架构整洁之道》系列课程内容的初衷，其实即是回归软件系统的价值，利用多维的指导分析，帮我们做出正确的架构决策和架构设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3431174089068826&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTSoWhM28lk2cKXlRNVuNPGlPN5up4aas59GSXgKeXfFMEw5GlaJEvROyFl85p2l9uHMKDxUJhtPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1976&quot;/&gt;&lt;/p&gt;&lt;h2&gt;Part3：收益&lt;/h2&gt;&lt;h3&gt;3.1 架构分类&lt;/h3&gt;&lt;p&gt;&lt;span&gt;我们需要针对当前业务需求，选择合适的应用架构，关于如何支持当前业务发展，如何面向未来，保证架构平滑过渡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要架构分类：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;业务架构&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;战略层面，业务方向是什么，要做什么；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;应用架构&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;战术层面，承上启下作用；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;技术架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;装备层面，负责业务的具体落地实施。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;3.2 架构演进&lt;/h3&gt;&lt;p&gt;&lt;span&gt;架构的主要演进过程：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;单体式架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;俗称“烟囱式”架构&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分布式架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;按功能模块，服务化拆分&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SOA架构&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;微服务架构&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5633986928104575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTSoWhM28lk2cKXlRNVuNPGGDRbAzicfzpn3nOJkAC91TEr6vAgAPYEnpnMoeSpWvKiaFZvYc5WVRIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;765&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实无论哪种架构方式，在当时环境下都可以解决现实问题的，都具有一定的意义的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结起来还是那句话：&lt;/span&gt;&lt;span&gt;存在即是合理的&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;3.3 请求链路&lt;/h3&gt;&lt;p&gt;除了系统架构本身，还&lt;span&gt;需要关注每层技术架构的设计点。&lt;span&gt;过程质量关乎整体质量，各环节的架构合理性至关重要。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8278688524590164&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTSoWhM28lk2cKXlRNVuNPGMSHgUUy8W2abHOeXtq2qdRGj6nkRgHNdIHANZMFVgVporfiaNdCtmMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;488&quot;/&gt;&lt;/p&gt;&lt;h3&gt;3.4 编程之钻&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;编程之钻&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（The Programming Diamond）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7690763052208835&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTSoWhM28lk2cKXlRNVuNPGziaH54Bxia9IQMukxGLGEJEbhrYtldRjrSj6rDgqfmCq238ZfQLR5AAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;996&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图描绘了编程作为一个完整工作流程（work process）的四项最基本活动&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们开发任何一个软件功能、实现某个软件需求，一般都需要经历这 4 项基本的活动或状态。把这四个状态连起来恰好形成一个菱形，所以我把它叫作“编程之钻”（The Programming Diamond）。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;犹如一颗大钻镶嵌了四颗小钻，把它们称作编程的“钻石”，也凸显了这几个基本任务及其相关技术与方法在软件开发、软件工程中的重要性。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Part4：总结&lt;/h2&gt;&lt;h3&gt;4.1 “悖论”？&lt;/h3&gt;&lt;p&gt;&lt;span&gt;通常我们在解决具体问题时候，最常见的想法就是快速的完成自己的工作任务，这样一来，是不是建设优质的软件架构形成了悖论呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.28076923076923077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTSoWhM28lk2cKXlRNVuNPGZibJdmticu79CpYEwiaRx3U6KuibL2Xze9ghiaBmJLyx99cabs2QITyjlxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2080&quot;/&gt;&lt;/p&gt;&lt;h3&gt;4.2 观点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;无论是微观世界的代码，还是宏观层面的架构，无论是编程范式还是微服务架构，它们都在解决一个问题：&lt;strong&gt;分离控制和逻辑&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所谓控制就是对程序流转的与业务逻辑无关的代码或系统的控制（如多线程、异步、服务发现、部署、弹性伸缩等），所谓逻辑则是实实在在的业务逻辑，是解决用户问题的逻辑。控制和逻辑构成了整体的软件复杂度，有效地分离控制和逻辑会让你的系统得到最大的简化。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;其中 简单vs.简陋、平衡vs.妥协、迭代vs.半成品 就是我们需要涉及到软件架构中平衡的艺术。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;4.3 学习建议&lt;/h3&gt;&lt;p&gt;&lt;span&gt;最后给大家一些学习上的建议：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1w小时学习定律&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;不断的踩坑与填坑，会带给你真正的成长&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;关键点&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对技术的保持热情&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要持续不断的精力投入&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;坚持学习、实践、思考、总结&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;指导原则&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经验的沉淀与积累&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拓宽视野，不拘泥于现状&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;锻炼深度思考能力，抓本质问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4191666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgTSoWhM28lk2cKXlRNVuNPGdhmSguALSj8eVkCjS1z5mIH59QXOtibS4FCicSdADLTfH2XV8OSRmRsA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;大家好，我是「架构精进之路」公号作者 &lt;strong&gt;flyer0126&lt;/strong&gt;，公号文章主要来自于个人日常工作问题总结思考，相信问题及解决方案均具有普适性，希望同大家一起学习成长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家如有任何疑问/困惑，可关注公号回复关键字 “&lt;/span&gt;&lt;span&gt;&lt;strong&gt;wx&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;” 添加个人微信，继续勾搭~&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;往期热文推荐：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98311&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;395&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;395&quot; data-ratio=&quot;0.36484375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSxEpr7AzM5lGCicdEjfuE6jaiae9Rmj1CVCg85GJKaFKuico89ZlnhGicQiciciccOiaqVibE5cmKXwO1AOuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87502&quot;&gt;&lt;p&gt;&lt;span&gt;「技术架构精进」专注架构研究，技术分享&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Thanks for reading!&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>