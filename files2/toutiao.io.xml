<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>52a4e2b6d5b81394c97e94bf77c69458</guid>
<title>2021 年总结：数据可视化技巧</title>
<link>https://toutiao.io/k/0n94v6y</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p/&gt;&lt;p&gt;今年在公众号做了一次互推，对不起大家，给大家表演个节目。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;言归正传，提前1个多月写总结，不然过几天又忙的找不着北了。嗯……，好吧，我不忙的时候也找不着北。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8743455497382199&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsClicaic1YshP1V13TQIS64XoViaJx8jg747eawiadbib5ia0qZoGc6dBE1plw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;573&quot;/&gt;&lt;/p&gt;&lt;p&gt;用PDCA总结一下今年和自己的公众号【编程一生】那些事儿。&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCfD3zibJ3aib8ib1z13QrVgEnAuEDCXG6PWcyJCegR4Mn43jfZicUha8YKw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Plan&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;所有的计划都是应该围绕着目标来的。【编程一生】公众号的目标有于公于私两个方面。&lt;/p&gt;&lt;p&gt;于公：中国在互联网领域、支付领域的科技可以说是世界领先的。小小的我也希望在这些领先技术的带动下，更多的技术领域可以走在世界的前列。我希望可以把自己的技术输出，让大家一起进步，为加快中国科技的发展尽一份力。&lt;/p&gt;&lt;p&gt;于私：希望可以打造自己的品牌影响力。之前的一位带过我的领导，他理论知识非常强，带过的学生很多都在很短的时间晋升到比他还高的职级。他却很多年停留在一个职级上升不上去。别人和他谈及此事，他云淡风轻：“我桃李满天下，但凡有人感恩拉我一把，我不就上去了嘛。”就在那一年他晋升了。我的理想更多是做事，一个女孩子对什么职位什么的，倒是没什么要求。只是担心以后年级大了，怕没有一个能够发挥自己能力和价值的平台。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Do&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;基于上面的初心，年初的时候，大多数情况下我是关闭了赞赏功能的。因为我的目标是知识的传播，大家感恩在心就好啦。我还把收到的赞赏资金都&lt;span&gt;通过XX宝爱心捐献了。因为本来开着也不是有意开的，就是懒的输入作者名而已。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;收到了自然感恩和欢喜，但是就是想着和大家一起为那些可怜可爱的孩子们做些事情，就捐出去了。后来想想，其实我做的不对，我这么做经过那些支持我的朋友们的同意了嘛，就把人家的钱捐出去了。脑子是怎么长的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCaWapROWaIM8Aq5b25UO8fKEK6ShbKqVticPz4JZOCsrtTzB8Wp9CYcg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;360&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以现在，我一收到赞赏就买点奶茶什么的，一买买两杯，700毫升的。喝饱了好有力气写好文章嘛！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0300751879699248&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCaKdPjicV4byyibGLjm0fOVHG9M2cGG4TibDV8ZaYB6sLibvtwTnT0eibib4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;399&quot;/&gt;&lt;/p&gt;&lt;p&gt;希望为公益尽一份力呢，就自己尽呗，用劳动所得就好了。不过我发现，家里那位长的膀大腰圆，心比我还软，经常做这个。我就心安理得的等着他做就好了。&lt;/p&gt;&lt;p&gt;在文章质量方面，自我评价，文章90%以上都是干货吧。今年连什么感悟也很少写了。少写的原因是觉得要做个成年人，多做事，少发感慨。PDCA，一切围绕目标嘛，我的目标在技术上。但就是这个月，看了一下自己公众号的数据，因为没有推广和运营，经营数据惨淡。所以拜托朋友帮忙发了个朋友圈，还和朋友做了一次互推。希望持续有新的朋友加入讨论，给我新的思路。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Check&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;本文的技术重点来了，做项目也一样。第一重要的是有明确可行、基于&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484071&amp;amp;idx=1&amp;amp;sn=52157bf558c74a94de69e6fa8f138d51&amp;amp;chksm=fafde809cd8a611f0ec4dd66e40efa74f1f3ce4d69d89c23a2bc243e31dd3442cec8fc0a300d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SMART原则&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;SMART原则&lt;/a&gt;的目标设定；第二重要的就是要经常检查自己目标的达成情况。以下是我的check事项：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;用户趋势分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;【编程一生】公众号创立于2017年10月10日，正式经营应该从2018年3月算起。4年间用户趋势如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5969101123595506&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCrT4b1kqh2iaN2cNoHClytGw27rj70qZI2hicUpibIqDfmVfzR877V5vPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;712&quot;/&gt;&lt;/p&gt;&lt;p&gt;这是直接用Excel-插入图表做出来的时间趋势，可以看出头两年用户增长快，这两年反而慢了。我倒不觉得是个退步。头两年，实事求是的说，影响力还是有的。经常有同学找到我，因为我想转岗到我们组。这给我很大压力，工作上很忙很累，还要注意保持体重。因为公司经常各种活动找到我，要拍照。天天加班到半夜还不敢吃饱，营养不够头发一把一把的掉，脑力还感觉快不够用了。&lt;/p&gt;&lt;p&gt;然后我整理了一下状况，认清了一下现实：之前一直游刃有余不是因为自己会的太多，而是要的太少。突然给自己设置了太多的目标，没有分清主次。控制不好压力，会误了大事。其他的事情先放一放，先在工作上夯实基础，立足与长远发展。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;内容来源分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5335968379446641&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCbr1OkFL4NHdeBSicT11O8GXpVReKZWurrkEjknrfucicbA6uMNVyEh7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;759&quot;/&gt;&lt;/p&gt;&lt;p&gt;今天是2021年11月21日，当然当朋友们看到这篇文章的时候应该是过了几天了。不用怀疑，你们在工作日看到我发出的文章基本都是我在周末或者节假日写的。来来来，卷起来，给你们点压力&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;20&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsC2VExz27Z5YzzzkyxqbwUeENicmYib8oMIMDic23de3lJvEz9m3EzcrRicA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsC1Ccy7v7iaiaWRaOuDIrka51Vy9TKUZ7xVad0gYdg61iahXoBVcKF6a1bg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;360&quot;/&gt;&lt;/p&gt;&lt;p&gt;我要说的是上面的饼图是2021年10月21日到2021年11月20日的数据，展现了这段时间各个阅读来源渠道的占比情况。因为坚持原创的原因，很多朋友和平台都订阅转发我的文章。&lt;/p&gt;&lt;p&gt;大家可能在很多平台上看到过我的文章。但是只有公众号里我基本都是有回音的。因为其他平台很多是后台系统自己同步过去的，我就是授权一次后，其他不需要做什么了。&lt;/p&gt;&lt;p&gt;感谢坚持转发我文章的朋友们，出于隐私保护的原因，就不点名道谢了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;老铁用户分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4107391910739191&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCPbH2SMjOj55tBHGu0fNsaa4n9ibfOx7icdibCfMeDmFAL50d7hQn0ouibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1434&quot;/&gt;&lt;/p&gt;&lt;p&gt;从上面柱状图看，2月份开始，常读用户出现明显下降，原因是2月份春节整月没有更新；5月也是整月没有更新；一直到9月份之前更新频率较低。从2月开始的数据和工作繁忙程度基本是成反比的。9月和10月都有在平时每周一篇的基础上有加更。但是因为10月跨了国庆节，有朋友出去玩了，数据有所下降，这是好事&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;20&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCHFiaGL7lL9bAHf09h9TbQ1Wk4Me51XkKITib0gNDYCF0icHVibQze9yY1w/640?wx_fmt=png&quot;/&gt;。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;单篇内容分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;觉得眼晕的可以直接跳过这些表格往下看。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5561797752808989&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCvkVt2ZT6Mq6nI07ZwMoGdJlvkzNm2jTHOia2zbplibHa6va2oYHZWSeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;890&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40065502183406115&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCM8kTFibV5EopuMwglDx8cBCASzkRnibxVF7ObLkH9nzzIWySIvZicbhuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;916&quot;/&gt;&lt;/p&gt;&lt;p&gt;从内容阅读上分析看，大家比较关心的内容有面试、架构和明显结构化容易理解的内容。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5514124293785311&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsC6ySjPNDD4QhmIZrIX6oLyh0UicAKv9ahIjaZSHE5xwD6PzdhgNjGHgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;885&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40065502183406115&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCKXTxcljZLuXblickfNz5hiaVnof8NccNZ6ScGrOFt8kyzXy6Sf0ibIh4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;916&quot;/&gt;&lt;/p&gt;&lt;p&gt;上面的数据，个人认为代表了文章的质量和朋友们需求的综合。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5328310010764262&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCZdn462mNv7TRKnTdLlo7gxaB0DYiasVFqjeYdsxTEaaeQY04LNrt9zw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;929&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3865979381443299&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCGYe7soOlic6sPsQQtr2klnYlxxs5icjRricsIYktTRAww6WDuHKtJfdew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;970&quot;/&gt;&lt;/p&gt;&lt;p&gt;从用户兴趣上，面试和架构的兴趣高。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4027777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCgeb4xfOgPTRZyhgiaKyUodkvBA2Fz3NbGPhsr3tO9u73ctFY8eRXiaww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1224&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.28959627329192544&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCIdhuN1nJAibkoKZwW6lvqnH6DuictNS5zqb8RyDhqhCu7icyqiawIIEysQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1288&quot;/&gt;&lt;/p&gt;&lt;p&gt;从分享数据上，侧重于某一领域的深入文章，依赖朋友的分享会产生更好的效果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.37947122861586313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsC5I16zBRWhuLDDpHEeyf3ETmQEA9CxTHMwkqMw7kRWCNUsGFnneplibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1286&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.27165932452276065&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsC5qLKlkPTNzTjrxYxLuGPPics5SaRRHwFK2sEWcjSCUl0kf7YD17vicjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1362&quot;/&gt;&lt;/p&gt;&lt;p&gt;阅读完成率很大程度上和文章长短有关；对于实际工作中遇到的重大问题也受到比较多的关注。&lt;/p&gt;&lt;p&gt;这一堆表格，是不是有点晕了。要的就是这个效果，因为下面要介绍的就是怎么避免在实际工作中给大家造成这样的困扰。这就要用到我的看家本领&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247483912&amp;amp;idx=1&amp;amp;sn=3e5e7697fd63db30e1170c2bdcd8443b&amp;amp;chksm=fafde8a6cd8a61b0d95fc9a956d24d8c777454a23fc92d8bcb2bd523866bca4b6fe58f5109ef&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【鱼骨图】&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【鱼骨图】&lt;/a&gt;了，想想都激动。&lt;/p&gt;&lt;p&gt;鱼骨图类型介绍：&lt;/p&gt;&lt;p&gt;A、整理问题型鱼骨图（各要素与特性间不存在原因关系，而是结构构成关系）&lt;/p&gt;&lt;p&gt;B、原因型鱼骨图（鱼头在右，特性通常以“为什么……”来写）&lt;/p&gt;&lt;p&gt;C、对策型鱼骨图（鱼头在左，特性通常以“如何提高/改善……”来写）&lt;/p&gt;&lt;p&gt;这次使用原因型鱼骨图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4477234401349072&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCFf8ibZh0cwJeorlnkLnrI0s2iahcz33gCuUK2n5HvWzibrIm39Gv8oCsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1186&quot;/&gt;&lt;/p&gt;&lt;p&gt;先从介绍图表使用的角度来看，因为涉及的数据太多，这里使用鱼骨图直接展示了分析后的结论，属于总结性分析。鱼骨图还适合表现完全没有明确数据的情况，比如整理头脑风暴的结论。&lt;/p&gt;&lt;p&gt;其实针对每篇文章在多维上有明确数据，很合适用雷达图来展示各方面的优劣，我就不具体画了，随便找了个雷达图的例子:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5363128781318665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlicK6XXGqtcKJcDuFmkia1jXgz4DsBop7S4fZ6TRGUrVPBkVP8wSibq23fXC9RAA8M8BOMibBbQNFn40A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;895&quot;/&gt;&lt;/p&gt;&lt;p&gt;从数据的分析上，其实个人认为自己那篇&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485916&amp;amp;idx=1&amp;amp;sn=84085fd0b7ecc1889a55a036186cbb8a&amp;amp;chksm=fafde372cd8a6a640826bc67df523a6d87b9aba19c164ebffab942e336ca224b311233f53228&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《深入理解函数式编程》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《深入理解函数式编程》&lt;/a&gt;写的好，但是阅读量不高，看到数据之前个人分析哈：一方面是我发文不注重时间，大周六，还是一大早，性子急嘛，写好就很想发出来跟大家讨论讨论&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;20&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCoDVCpuWOVIxCbgeq7FrugJTUWSCxRB102H77dst2kIDeqic9ia7jklgQ/640?wx_fmt=png&quot;/&gt;。另外一方面，语言限制受众面本来就有局限，实际从数据来看并不理想。&lt;/p&gt;&lt;p&gt;如果说题目上嘛，看很多公众号文章题目很抢眼。目标不同，所以处理方式也不同，我的文章名副其实很重要，内容与题目的质量标准统一也很重要。小心砸了招牌&lt;img data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;20&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCZvMAicfpgRkqvsvujJBh5btGqGwFaXlkmre0wrlA2JcGeib1QBoPzGDQ/640?wx_fmt=png&quot;/&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Action&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;分析了原因，怎么改进呢？&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方面一&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;从数据分析上看到，更新频率低是用户黏性降级的最主要原因。提高产量？这个还是看实际情况吧，工作是第一位的。但是如果我能把产量提上去，就说明我工作比以前做的好了呀。因为事情井井有条，所以有精力写文章，值得为之努力，但努力的方式一定是先把工作搞好。不然就违背了PDCA的P。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7724550898203593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCaTLIhnj7YOEaycZDqNHTk3e6C6hfArZjbEiccEmfcU7kjOmCB9lJbNQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;501&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;方面二&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;关键还是要提高质量，不能降低标准。做到下面几个关键词：&lt;/p&gt;&lt;p&gt;生动、有趣、易懂、深入、抽象能通用能力&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方面三&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;加强交流。&lt;span&gt;很多&lt;/span&gt;&lt;span&gt;朋友&lt;/span&gt;&lt;span&gt;怕自己&lt;/span&gt;&lt;span&gt;媳妇在&lt;/span&gt;&lt;span&gt;家不工作，&lt;/span&gt;&lt;span&gt;会慢慢&lt;/span&gt;&lt;span&gt;与社会&lt;/span&gt;&lt;span&gt;脱节。这&lt;/span&gt;&lt;span&gt;其实也是一样的道理。&lt;/span&gt;&lt;span&gt;交流少&lt;/span&gt;&lt;span&gt;会造成&lt;/span&gt;&lt;span&gt;决策上的独断专行&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;思想上的落后&lt;/span&gt;&lt;span/&gt;。本身写文章的一个目的就是要借助文章发现自己的盲点和误区，提高自身，这点是要重点加强的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;本文用了几类常见的图表来做总结说明。其中柱状图和折线图都可以表示时间等单一维度的变化，但是用折线图更多的是线上的单个点数据太多或者不重要，趋势更重要的情况。用图表说话是通用能力，各个方面都能用到，还可以帮助整理思路。&lt;/p&gt;&lt;p&gt;这方面经典的书有&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484443&amp;amp;idx=1&amp;amp;sn=7cad7cdf24a4174a244475a3bb8648f1&amp;amp;chksm=fafdeeb5cd8a67a3d920ef99619db06e9a55dbb8923f9329e78b9bb8078b087b4fbdba7db4a0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《跃迁-成为高手的技术》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《跃迁-成为高手的技术》&lt;/a&gt;和&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484234&amp;amp;idx=1&amp;amp;sn=7adaeffeb0f815673256caefd7eb43eb&amp;amp;chksm=fafde9e4cd8a60f26c2bdbe908df3fd68835c43913e5ac938e2788f7ec0c3200be4da732ec13&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《金字塔原理》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《金字塔原理》&lt;/a&gt;，推荐给大家。&lt;/p&gt;&lt;p&gt;我把自己看过的经典电子书总结打包上传了一下，做活动时分享在了朋友的公众号上。自家铁粉不给这个福利实在不厚道。获取方式：&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUzNjAxODg4MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlic1g1jGjiaBS1uNgC9uX4jDFicf7wBxXh5ic9WicdiaDq0qtNYgXjqOWZtpXqnXVibuZlfn7gzrWPObnEDQ/0?wx_fmt=png&quot; data-nickname=&quot;编程一生&quot; data-alias=&quot;cloudrise1986&quot; data-signature=&quot;致力于写大家都能看懂的、有深度的技术文章&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关注「编程一生」公众号&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;回复：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;6&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;66&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 获取经典技术书籍&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a663a1f97217ff6b26057d0ff4278f47</guid>
<title>洋葱都吃过了，怎么还不知道中间件的原理？</title>
<link>https://toutiao.io/k/2bf8xga</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxMDM4OTE4Ng==&amp;amp;action=getalbum&amp;amp;album_id=2014720037936300032#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2014720037936300032&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#GoLang进阶&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;9个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;237&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/oiccOczwQpFicAEqfYiatp7xxe8ZibvanNGyUiaeEAiaMzWFBlX68kIL3IIA4yIZ9UDgql3lOkbiaBQTAAicX3N6nv6liaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我相信开发过 WEB 项目， 那一定都接触过中间件，&lt;span&gt;不&lt;/span&gt;&lt;span&gt;管你用 beego 还是 gin&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你是否有思考过，中间件是怎么实现的么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章就带你一起去了解中间件的实现原理。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.38745019920318724&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/oiccOczwQpFicFjP48rDgEmVAE0uIgJr7aBLplHgicic39pgK3YCJQOIkcmPd6uHy4rmOiawYNvrUia6CqvZR8ZsVcBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1004&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAxMDM4OTE4Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/oiccOczwQpFibibo18fyFiayicVL4FZV4ic7vibkR4NkVichWgwlZ3uURnJTGBrHNFpGafadfoQic1XOPPtgawW3kQuvNNA/0?wx_fmt=png&quot; data-nickname=&quot;GoLang全栈&quot; data-alias=&quot;GolangStackDev&quot; data-signature=&quot;我们专注于以go语言为核心，go名库，go框架，go+，go ORM，GRPC应用，设计模式，数据结构与算法，K8S，Docker，微服务的系列文章分享。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你吃过洋葱不？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;咯，给你切一个我家的洋葱。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/oiccOczwQpFicAEqfYiatp7xxe8ZibvanNGy9OsPaGpxOLweT4Tv5loCLQdqy3WV4MwRmt5YOMdeAibeqjLxTb0Ow1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;中间件和洋葱有啥关系？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你请仔细看他的横切面，是不是特别有意思，一个圈套一圈的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这其实就是我们中间件的实现思路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最里面的芯就是我们的路由方法，然后外面的一圈一圈的就是中间件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当用户请求过来的时候，就从最外面，一层一层的往里面剥洋葱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是觉得非常有意思，&lt;span&gt;看来以后做程序员要多下厨了，说不定接下来你就会发现还有茄子模型，黄花模型，哈哈，开玩笑。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;手动实现一个&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们首先来定义一个结构体：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Context &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; handlers []&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *Context)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt; index &lt;span&gt;int8&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结构体名字你随意，我就取 Context 了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;里面有两个关键的元素 handlers 和 index；handlers用来存储我们一层一层的洋葱；index 用来存储我们当前剥到第几层了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;so，&lt;strong&gt;我们的路由控制器方法去哪里了？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实我们的路由控制器方法也是属于洋葱的一层，只是我们到他那一层就不剥了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以路由控制器方法，也是中间件方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;模拟 Use&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用过 Gin 的朋友，就一定不会对 Use 方法陌生，他是添加中间件的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是我们也来模拟下这个方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(this *Context)&lt;/span&gt; &lt;span&gt;Use&lt;/span&gt;&lt;span&gt;(f &lt;span&gt;func&lt;/span&gt;(c *Context)&lt;/span&gt;)&lt;/span&gt; {&lt;br/&gt; this.handlers = &lt;span&gt;append&lt;/span&gt;(this.handlers, f)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就是往我们的 handlers 数组里面添加方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;模拟 Next&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在中间件里面，经常会用到 next 方法，干啥用的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;就是往下剥一层洋葱&lt;/strong&gt;，所以，就这样去实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(this *Context)&lt;/span&gt; &lt;span&gt;Next&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; this.index++&lt;br/&gt; this.handlers[this.index](this)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;模拟 GET&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们再来模拟一个添加路由控制器的方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(this *Context)&lt;/span&gt; &lt;span&gt;GET&lt;/span&gt;&lt;span&gt;(path &lt;span&gt;string&lt;/span&gt;, f &lt;span&gt;func&lt;/span&gt;(c *Context)&lt;/span&gt;)&lt;/span&gt; {&lt;br/&gt; this.handlers = &lt;span&gt;append&lt;/span&gt;(this.handlers, f)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我这里直接忽略了 path 这个变量，真实项目中，这个变量肯定是有用的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;开始剥洋葱&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后我们开始剥洋葱：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(this *Context)&lt;/span&gt; &lt;span&gt;Run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; { &lt;span&gt;//剥开第一层&lt;/span&gt;&lt;br/&gt; this.handlers[&lt;span&gt;0&lt;/span&gt;](this)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;使用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的模型建立好了，现在开始享用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; c := &amp;amp;Context{}&lt;br/&gt; &lt;br/&gt; c.Use(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;mid1 start&quot;&lt;/span&gt;)&lt;br/&gt;  c.Next()&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;mid1 end&quot;&lt;/span&gt;)&lt;br/&gt; })&lt;br/&gt;&lt;br/&gt; c.Use(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;mid2 start&quot;&lt;/span&gt;)&lt;br/&gt;  c.Next()&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;mid2 end&quot;&lt;/span&gt;)&lt;br/&gt; })&lt;br/&gt;&lt;br/&gt; c.GET(&lt;span&gt;&quot;/&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;GET handler func&quot;&lt;/span&gt;)&lt;br/&gt; })&lt;br/&gt;&lt;br/&gt; c.Run()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码是不是和我们的 Gin 非常相似。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行之后就能得到结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ go run main.go &lt;br/&gt;mid1 start&lt;br/&gt;mid2 start&lt;br/&gt;GET handler func&lt;br/&gt;mid2 end&lt;br/&gt;mid1 end&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后再画一个更加形象的图吧！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7485955056179775&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/oiccOczwQpFicAEqfYiatp7xxe8ZibvanNGyicBaM0WmdibiaYVVMv99r3ssoz859I77FYgER8jaJNA5oQ0hJD5uibTdbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1424&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拜拜，我们下一篇文章见！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45717131474103584&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/oiccOczwQpFicFjP48rDgEmVAE0uIgJr7aPbXiaC7JIT5vb8Ijsz5OHR8tB5UneEXFRziaA5wMyFwUp6iaOtFkS9yjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1004&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/oiccOczwQpFicFjP48rDgEmVAE0uIgJr7aGyok12Qf5cMTO2dw1w8tFdnkUwlAkpA4EDqV3JgSonbM7KwFAicAwGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;&gt;一元也是爱呀~&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a0a97015fa69bfa4732e372ed459bb40</guid>
<title>从头带你撸一个 Spring Boot Starter</title>
<link>https://toutiao.io/k/h7wj37b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K7IVueebAHkq5Y1erzbicmYB7kQ8pduVnVrCgkx1REsqCqb03SIiczXp1WKC4p3BQibbyy9olR4vzncGibs41bTCXQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们知道 SpringBoot 提供了很多的 Starter 用于引用各种封装好的功能：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;名称&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;功能&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;spring-boot-starter-web&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;支持 Web 开发，包括 Tomcat 和 spring-webmvc&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;spring-boot-starter-redis&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;支持 Redis 键值存储数据库，包括 spring-redis&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;spring-boot-starter-test&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;支持常规的测试依赖，包括 JUnit、Hamcrest、Mockito 以及 spring-test 模块&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;spring-boot-starter-aop&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;支持面向切面的编程即 AOP，包括 spring-aop 和 AspectJ&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;spring-boot-starter-data-elasticsearch&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;支持 ElasticSearch 搜索和分析引擎，包括 spring-data-elasticsearch&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;spring-boot-starter-jdbc&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;支持 JDBC 数据库&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;spring-boot-starter-data-jpa&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;支持 JPA ，包括 spring-data-jpa、spring-orm、Hibernate&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SpringBoot 通过 Starter 机制将各个独立的功能从 jar 包的形式抽象为统一框架中的一个子集，从而使得 SpringBoot 的完整度从框架层面达到了统一。其实现的机制也不复杂，SpringBoot 在启动时会从依赖的 starter 包中寻找 &lt;/span&gt;&lt;code&gt;&lt;span&gt;/META-INF/spring.factories&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件，然后根据文件中配置的启动类完成 Starter 的初始化，同 Java 的 SPI 机制类似。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;考虑到 SpringBoot Starter 机制的意义本身就是对独立功能的封装，这些功能要求改动少，可以作为多个项目的公共部分对外提供服务。那么对于我们日常项目中底层不变经常变的公共服务是否可以起到借鉴意义。或者对于公司内部项目的架构师来说也是首选。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果想自定义 Starter，首先需要实现自动化配置，实现自动化配置需要满足以下两个条件：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;能够自动配置项目所需要的配置信息，也就是自动加载依赖环境；&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;能够根据项目提供的信息自动生成 Bean，并且注册到 Bean 管理容器中；&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;条件 1 的实现需要引入如下两个 jar 包：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-autoconfigure&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.0.0.RELEASE&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-configuration-processor&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.0.0.RELEASE&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;optional&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;span&gt;optional&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过 autoconfigure 根据项目 jar 包的依赖关系自动配置应用程序。&lt;/span&gt;&lt;code&gt;&lt;span&gt;spring.factories&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件指定了&lt;em&gt;AutoConfiguration&lt;/em&gt; 类列表，只有在列表中的自动配置才会被检索到。Spring 会检测 classpath 下所有的&lt;/span&gt;&lt;code&gt;&lt;span&gt;META-INF/spring.factories&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件；若要引入自定义的自动配置，需要将自定义的 &lt;em&gt;AutoConfiguration&lt;/em&gt; 类添加到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;spring.factories&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件中。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;条件 2 则是在条件 1 的基础上加载你自定义的 bean。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;命名规范&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于 SpringBoot 官方的 jar 包都是有一套命名规则：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;规则：&lt;/span&gt;&lt;code&gt;&lt;span&gt;spring-boot-starter-模块名&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。比如：&lt;/span&gt;&lt;code&gt;&lt;span&gt;spring-boot-starter-web、spring-boot-starter-jdbc&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于我们自己自定义的 Starter，为了区别于普通的 jar 包我们也应该有明显的 starter 标识，比如：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;模块-spring-boot-starter&lt;/span&gt;&lt;/code&gt;&lt;span&gt;通过这种方式让调用方更直观的知道这是一个 Starter，从而很快就知道使用方式。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一个可以运行的示例&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以下代码可以从 Github 仓库找到：&lt;/span&gt;&lt;span&gt;redis-sentinel-spring-boot-starter&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;em&gt;https://github.com/rickiyang/redis-sentinel-spring-boot-starter&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们通过自己实现一个可以运行的示例来演示实际开发中如何通过 Starter 快速搭建基础服务。下面的示例主要功能实现是重写 Springboot 的 Redis Sentinel，底层将 Lettuce 替换为 Jedis。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们的整体项目框架如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.1425661914460286&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K7IVueebAHkq5Y1erzbicmYB7kQ8pduVnMAhFdlibQ0vfUQYCh4wfFwyhf3V7qjQJCpiaa9GRTfAKBztxOfaYd9iaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;491&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如同别的 Starter 一样，我们要实现引用方通过自定义配置来使用 Redis，那我们要提供配置解析类：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; com.rickiyang.redis.config;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; lombok.Data;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.boot.context.properties.ConfigurationProperties;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@date&lt;/span&gt;: 2021/11/16 11:39 上午&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt;: rickiyang&lt;br/&gt; * &lt;span&gt;@Description&lt;/span&gt;:&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;(prefix = RedisSentinelClientProperties.SENTINEL_PREFIX)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RedisSentinelClientProperties&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String SENTINEL_PREFIX = &lt;span&gt;&quot;rickiyang.redis.sentinel&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String masterName;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String sentinels;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; maxWait;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxIdle;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxActive;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; blockWhenExhausted;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; maxWaitMillis;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxTotal;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; minIdle;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; minEvictableIdleTimeMillis;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; testOnBorrow;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; testOnReturn;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; testWhileIdle;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; numTestsPerEvictionRun;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; softMinEvictableIdleTimeMillis;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; timeBetweenEvictionRunsMillis;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt; whenExhaustedAction;&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如何将 yml 中的配置解析出来呢？这就需要我们去定义一个 yml 解析文件。resources 下新增 META-INF 文件夹，新增配置解析类：spring-configuration-metadata.json&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;{&lt;br/&gt;  &lt;span&gt;&quot;hints&quot;&lt;/span&gt;: [],&lt;br/&gt;  &lt;span&gt;&quot;groups&quot;&lt;/span&gt;: [&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.block-when-exhausted&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Boolean&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.masterName&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.String&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.max-active&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.max-idle&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.max-total&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.max-wait&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.time.Duration&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.min-evictable-idle-time-millis&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Long&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.min-idle&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.num-tests-per-eviction-run&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.sentinels&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.String&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.soft-min-evictable-idle-time-millis&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Long&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.test-on-borrow&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Boolean&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.test-on-return&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Boolean&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.test-while-idle&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Boolean&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.time-between-eviction-runs-millis&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Long&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;sourceType&quot;&lt;/span&gt;: &lt;span&gt;&quot;com.starter.demo.config.RedisSentinelClientProperties&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;defaultValue&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;rickiyang.redis.sentinel.when-exhausted-action&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;java.lang.Byte&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  ]&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这一套配置解析规则就是通过我们上面引入的两个 Spring 配置解析相关的 jar 包来实现的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SpringBoot 遵循约定大于配置的思想，通过约定好的配置来实现代码简化。@ConfigurationProperties 可以把指定路径下的属性注入到对象中。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SpringAutoConfigration 自动配置&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SpringBoot 没出现之前所有的配置都是通过 xml 的方式进行解析。一个项目里面的依赖一旦多了起来开发者光是理清里面的依赖关系都很头疼。SpringBoot 的 AutoConfig 基本思想就是通过项目的 jar 包依赖关系来自动配置程序。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;em&gt;@EnableAutoConfiguration&lt;/em&gt; 和 &lt;em&gt;@SpringBootApplication&lt;/em&gt; 都有开启 AutoConfig 能力。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;@SpringBootApplication 的作用等同于一起使用这三个注解：@Configuration、@EnableAutoConfiguration、和@ComponentScan&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;em&gt;spring.factories&lt;/em&gt; 文件指定了&lt;em&gt;AutoConfiguration&lt;/em&gt;类列表，只有在列表中的自动配置才会被检索到。Spring 会检测 classpath 下所有的 &lt;em&gt;META-INF/spring.factories&lt;/em&gt; 文件；若要引入自定义的自动配置，需要将自定义的&lt;em&gt;AutoConfiguration&lt;/em&gt; 类添加到 &lt;em&gt;spring.factories&lt;/em&gt; 文件中。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;em&gt;spring.factories&lt;/em&gt; 的解析由 &lt;em&gt;SpringFactoriesLoader&lt;/em&gt; 负责。&lt;em&gt;SpringFactoriesLoader.loadFactoryNames()&lt;/em&gt; 扫描所有 jar 包类路径下 &lt;em&gt;META-INF/spring.factories&lt;/em&gt;文件， 把扫描到的这些文件的内容包装成 properties 对象从 properties 中获取到 &lt;em&gt;EnableAutoConfiguration.class&lt;/em&gt; 类（类名）对应的值，然后把他们添加在容器中 。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同样我们的项目中也配置了自动加载配置的启动类，spring.factories：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# Initializers&lt;br/&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration=\&lt;br/&gt;  com.starter.demo.config.RedisSentinelClientAutoConfiguration&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;AutoConfigration 启动的时候会去检测配置类是否从 application.yml 获取到对应的配置值，如果没有则使用默认配置或者抛异常。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上例中的 Redis autoConfigration 对应的配置类：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; com.rickiyang.redis.config;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.google.common.collect.Sets;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.rickiyang.redis.annotation.EnableRedisSentinel;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.rickiyang.redis.redis.RedisClient;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.rickiyang.redis.redis.sentinel.RedisSentinelFactory;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; lombok.extern.slf4j.Slf4j;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.boot.autoconfigure.condition.ConditionalOnClass;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.boot.context.properties.EnableConfigurationProperties;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; javax.annotation.Resource;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.lang.reflect.Field;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.lang.reflect.Method;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; com.rickiyang.redis.config.RedisSentinelClientProperties.SENTINEL_PREFIX;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@date&lt;/span&gt;: 2021/11/16 9:52 上午&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt;: rickiyang&lt;br/&gt; * &lt;span&gt;@Description&lt;/span&gt;:&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@ConditionalOnClass&lt;/span&gt;(EnableRedisSentinel&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;@&lt;span&gt;ConditionalOnProperty&lt;/span&gt;(&lt;span&gt;prefix&lt;/span&gt; &lt;/span&gt;= SENTINEL_PREFIX, name = &lt;span&gt;&quot;masterName&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(RedisSentinelClientProperties&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;RedisSentinelClientAutoConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Resource&lt;/span&gt;&lt;br/&gt;    RedisSentinelClientProperties redisSentinelClientProperties;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;(initMethod = &lt;span&gt;&quot;init&quot;&lt;/span&gt;, destroyMethod = &lt;span&gt;&quot;destroy&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; RedisSentinelFactory &lt;span&gt;redisSentinelClientFactory&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        RedisSentinelFactory redisSentinelClientFactory = &lt;span&gt;new&lt;/span&gt; RedisSentinelFactory();&lt;br/&gt;&lt;br/&gt;        String[] sentinels = redisSentinelClientProperties.getSentinels().split(&lt;span&gt;&quot;,&quot;&lt;/span&gt;);&lt;br/&gt;        redisSentinelClientFactory.setMasterName(redisSentinelClientProperties.getMasterName());&lt;br/&gt;        redisSentinelClientFactory.setServers(Sets.newHashSet(sentinels));&lt;br/&gt;        reflectProperties(redisSentinelClientFactory);&lt;br/&gt;        log.info(&lt;span&gt;&quot;[init redis sentinel factory, redisSentinelClientProperties={}]&quot;&lt;/span&gt;, redisSentinelClientProperties);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; redisSentinelClientFactory;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; RedisClient &lt;span&gt;redisClient&lt;/span&gt;&lt;span&gt;(RedisSentinelFactory redisSentinelFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RedisClient(redisSentinelFactory);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; String &lt;span&gt;createGetMethodName&lt;/span&gt;&lt;span&gt;(Field propertiesField, String fieldName)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String convertFieldName = fieldName.substring(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;).toUpperCase() + fieldName.substring(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; propertiesField.getType() == &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;.&lt;span&gt;class&lt;/span&gt; ? &quot;&lt;span&gt;is&lt;/span&gt;&quot; + &lt;span&gt;convertFieldName&lt;/span&gt; : &quot;&lt;span&gt;get&lt;/span&gt;&quot; + &lt;span&gt;convertFieldName&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; String &lt;span&gt;createSetMethodName&lt;/span&gt;&lt;span&gt;(String fieldName)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String convertFieldName = fieldName.substring(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;).toUpperCase() + fieldName.substring(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;set&quot;&lt;/span&gt; + convertFieldName;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;isPropertyBlank&lt;/span&gt;&lt;span&gt;(Object value)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; value == &lt;span&gt;null&lt;/span&gt; || &lt;span&gt;&quot;0&quot;&lt;/span&gt;.equals(value.toString()) || &lt;span&gt;&quot;false&quot;&lt;/span&gt;.equals(value.toString());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;reflectProperties&lt;/span&gt;&lt;span&gt;(RedisSentinelFactory redisSentinelClientFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        Field[] propertiesFields = RedisSentinelClientProperties&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;.&lt;span&gt;getDeclaredFields&lt;/span&gt;()&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (Field propertiesField : propertiesFields) {&lt;br/&gt;            String fieldName = propertiesField.getName();&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;masterName&quot;&lt;/span&gt;.equals(fieldName) || &lt;span&gt;&quot;sentinels&quot;&lt;/span&gt;.equals(fieldName) || &lt;span&gt;&quot;SENTINEL_PREFIX&quot;&lt;/span&gt;.equals(fieldName)) {&lt;br/&gt;                &lt;span&gt;continue&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;            Method getMethod = RedisSentinelClientProperties&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;.&lt;span&gt;getMethod&lt;/span&gt;(&lt;span&gt;createGetMethodName&lt;/span&gt;(&lt;span&gt;propertiesField&lt;/span&gt;, &lt;span&gt;fieldName&lt;/span&gt;))&lt;/span&gt;;&lt;br/&gt;            Object value = getMethod.invoke(redisSentinelClientProperties);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (!isPropertyBlank(value)) {&lt;br/&gt;                Method setMethod = RedisSentinelFactory&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;.&lt;span&gt;getMethod&lt;/span&gt;(&lt;span&gt;createSetMethodName&lt;/span&gt;(&lt;span&gt;fieldName&lt;/span&gt;), &lt;span&gt;propertiesField&lt;/span&gt;.&lt;span&gt;getType&lt;/span&gt;())&lt;/span&gt;;&lt;br/&gt;                setMethod.invoke(redisSentinelClientFactory, value);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可以看到类头加了一些注解，这些注解的作用是限制这个类被加载的条件和时机。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;常用的类加载限定条件有：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;@ConditionalOnBean：当容器里有指定的 bean 时生效。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;@ConditionalOnMissingBean：当容器里不存在指定 bean 时生效。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;@ConditionalOnClass：当类路径下有指定类时生效。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;@ConditionalOnMissingClass：当类路径下不存在指定类时生效。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;@ConditionalOnProperty：指定的属性是否有指定的值，比如&lt;/span&gt;&lt;code&gt;&lt;span&gt;@ConditionalOnProperty(prefix=”aaa.bb”, value=”enable”, matchIfMissing=true)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，表示当 &lt;em&gt;aaa.bb&lt;/em&gt; 为 enable 时条件的布尔值为 true，如果没有设置的情况下也为 true 的时候这个类才会被加载。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;除了 Condition 开头的限定类注解之外，还有 Import 开头的注解，主要作用是引入类并将其声明为一个 bean。主要目的是将多个分散的 bean 配置融合为一个更大的配置类。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;@Import：在注解使用类加载之前先加载被引入的类。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;@ImportResource：在注解使用类加载之前引入配置文件。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面的 Config 类头有一个注解：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@ConditionalOnClass&lt;/span&gt;(EnableRedisSentinel&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;即加载的限定条件是 &lt;em&gt;EnableRedisSentinel&lt;/em&gt; 类要先加载。EnableRedisSentinel 是一个注解：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@Target&lt;/span&gt;(ElementType.TYPE)&lt;br/&gt;&lt;span&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;br/&gt;&lt;span&gt;@Documented&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;@interface&lt;/span&gt; EnableRedisSentinel {&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个注解的使用同别的 Starter 一样都是放在项目的启动类上即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;基础的代码部分大概如上，关于 Redis 连接相关的代码大家可以看源码部分自己参考。将代码现在下来之后本地通过 maven 打成 jar 包，然后新开一个 SpringBoot 项目引入 maven jar 包。在启动类加上注解 &lt;em&gt;@EnableRedisSentinel&lt;/em&gt; ，application.yml 文件中配置：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;rickiyang:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;redis:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;sentinel:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;masterName:&lt;/span&gt; &lt;span&gt;redis-sentinel-test&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;sentinels:&lt;/span&gt; &lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;:20012::,127.0.0.2:20012::,127.0.0.3:20012&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;maxTotal:&lt;/span&gt; &lt;span&gt;1000&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;maxIdle:&lt;/span&gt; &lt;span&gt;50&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;minIdle:&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;maxWaitMillis:&lt;/span&gt; &lt;span&gt;15000&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;启动项目就能看到我们的 Starter 被加载起来。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引用：&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ca512584737e4e9072f8d09b023a3be7</guid>
<title>Kafka 基本架构和概述</title>
<link>https://toutiao.io/k/w9iywmv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-inner&quot;&gt;
                                                    
&lt;p&gt;我想大家对Kafka或多或少都有所耳闻，那么它究竟是什么呢？其实说白了也很简单，它其实就是一个分布式的消息队列，也就是我们通常所说的消息的发布和订阅，只是它的目标更倾向于高吞吐和低延迟。那我们就从头开始来看看Kafka究竟是如何诞生的。&lt;/p&gt;



&lt;h1&gt;发布/订阅消息&lt;/h1&gt;



&lt;p&gt;在正式开始聊Kafka之前，我们来看看什么是消息的发布和订阅。我们先来看这样一个例子：系统中有两个应用程序，然后我们有一个metrics的dashboard，当这两个应用程序开始运行时，会把相关的metric数据发送到dashboard所在的server，然后就可以把它们的metric显示出来，简单的架构如下所示：&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-13.png&quot; alt=&quot;&quot; class=&quot;wp-image-1128&quot; srcset=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-13.png 624w, https://donggeitnote.com/wp-content/uploads/2021/11/image-13-300x175.png 300w&quot; sizes=&quot;(max-width: 624px) 100vw, 624px&quot;/&gt;&lt;/figure&gt;



&lt;p&gt;这种架构看起来还是很清晰的，但是当我们的系统变得稍微庞大起来，有了更多的应用，也需要有了不同的metric处理方式，比如我们既需要显示metrics的数据到一个UI上，又需要分析这个metric或者根据metric的数据来做一些monitor发送alerts之类的，那整个系统就可能变得复杂起来，甚至有时你会觉得有一些系统，比如monitor其实并不需要你一直把metric发送过去，最好是做个poll的形式，让monitor主动找application来拿数据，于是你的系统变成了下面这样：&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-14.png&quot; alt=&quot;&quot; class=&quot;wp-image-1129&quot; srcset=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-14.png 624w, https://donggeitnote.com/wp-content/uploads/2021/11/image-14-300x106.png 300w&quot; sizes=&quot;(max-width: 624px) 100vw, 624px&quot;/&gt;&lt;/figure&gt;



&lt;p&gt;这样一来整个系统看起来就很乱，程序员的特性让你蠢蠢欲动，捋起袖子来refactor一下呗，你想啊想，要是能在中间加一层，让所有的应用端把数据都发送给这一层，然后对这个数据感兴趣的server再统一到这一层来拿就完美了，于是你的想法就变成了下面这样的一个架构：&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-15.png&quot; alt=&quot;&quot; class=&quot;wp-image-1130&quot; srcset=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-15.png 624w, https://donggeitnote.com/wp-content/uploads/2021/11/image-15-300x127.png 300w&quot; sizes=&quot;(max-width: 624px) 100vw, 624px&quot;/&gt;&lt;/figure&gt;



&lt;p&gt;而这就是最基本的消息发布和订阅的形式。&lt;/p&gt;



&lt;p&gt;这个架构运行得还不错，于是你在吃饭的时候和同事吹嘘了一下，你的同事发现它在处理log和tracking的时候也有类似的需求，于是他来和你学习了一下，把它那边的处理逻辑也改成了这个机制，所以你们的系统变成了下面这样：&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-16.png&quot; alt=&quot;&quot; class=&quot;wp-image-1131&quot; srcset=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-16.png 624w, https://donggeitnote.com/wp-content/uploads/2021/11/image-16-300x143.png 300w&quot; sizes=&quot;(max-width: 624px) 100vw, 624px&quot;/&gt;&lt;/figure&gt;



&lt;p&gt;这样一来你的系统里面有了三个类似的发布/订阅系统，他们的business逻辑有所不同，但技术层面是类似的。所以当你们把这个架构demo给老板看并要求提职加薪的时候，老板说，你们能不能搞一个统一的系统，这样可以给所有有类似需求的team一起使用，而且也不需要单独处理各自的bug等等。这个时候Kafka就诞生了，它就是这样一个统一的系统，来处理类似的功能需求的。&lt;/p&gt;



&lt;h1&gt;消息&lt;/h1&gt;



&lt;p&gt;我们把各个应用给Kafka发送的内容称之为消息，然后各个处理的模块只要订阅相应的消息就可以了。对Kafka本身来说看，消息是什么样子的它并不关心，因为它只是一个转发中心，只要接受端的各个处理模块能理解就好。我们可以简单把消息理解成类似数据库中的一条记录，当然可以有它定义的格式或者schema，但是对数据库本身来说，它并不关心这个schema的定义。&lt;/p&gt;



&lt;h1&gt;Topics和partitions&lt;/h1&gt;



&lt;p&gt;Kafka中的消息会被分类成一个topics，用数据库来理解，topics就类似一个表。每个topics会被分成多个partition。所以当你写数据到topics时，会按照partition的规律写到各个partition中，在每个partition中它是有序的，有点类似数据库的append-only log的方式，但是多个partition之间数据的顺序是无法保证的。&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-17.png&quot; alt=&quot;&quot; class=&quot;wp-image-1132&quot; srcset=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-17.png 624w, https://donggeitnote.com/wp-content/uploads/2021/11/image-17-300x108.png 300w&quot; sizes=&quot;(max-width: 624px) 100vw, 624px&quot;/&gt;&lt;/figure&gt;



&lt;p&gt;上面这个图就显示了一个拥有4个partition的topic，也许你会问为什么要这个partition啊，这里有很多好处，比如说我们可以把不同的partition部署到不同的机器上，这样就可以在大吞吐量的时候做到很好的scalability，当然我们还可以对每个partition做replication，从而提高high availability以防止单点的fail。&lt;/p&gt;



&lt;p&gt;我们通常所说的数据流在Kafka这里对应的其实就是一个topic。&lt;/p&gt;



&lt;h1&gt;Producer和Consumer&lt;/h1&gt;



&lt;p&gt;Producer和Consumer这两个概念比较好理解，前者产生消息，后者需要接收处理消息。&lt;/p&gt;



&lt;p&gt;对producer来说，主要需要注意的就是把消息发送给谁，也就是topics中的哪个partition，需要有一定的机制来决定发送到的partition，可以是类似hash的map来选择partition，这样同样的消息能发送到同一个partition，也可以是均匀的partition分布或者是基于consumer的partition分布，这些方式的选取取决于你的数据形式和business的需求。只是需要注意的是不同的partition之间的顺序是无法保证的，但是同一个partition则是可以保证这一点的。&lt;/p&gt;



&lt;p&gt;Consumer可以订阅多个topics中的多个partition的消息，它是通过消息的offset来判断是否已经取得了相应的消息，offset是一个递增的数值，每个消息的这个offset都不一样（同一parition中），这样一来consumer就可以使用这个值来区分不同的消息。只要保存好这个offset，哪怕有重启等事件的发生，也能够继续从上次的地方取消息。&lt;/p&gt;



&lt;p&gt;多个consumer还可以组成一个consumer group，他们可以共同订阅一个topics的消息，但是一个partition只能被consumer group中的一个consumer来进行处理，当这个consumer group中的某个consumer出现了问题之后，可以让consumer group中别的consumer来继续处理出问题的consumer所对应的partition，示意图如下所示：&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-18.png&quot; alt=&quot;&quot; class=&quot;wp-image-1133&quot; srcset=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-18.png 624w, https://donggeitnote.com/wp-content/uploads/2021/11/image-18-300x125.png 300w&quot; sizes=&quot;(max-width: 624px) 100vw, 624px&quot;/&gt;&lt;/figure&gt;



&lt;h1&gt;Broker和Cluster&lt;/h1&gt;



&lt;p&gt;我们称每个Kafka中的server就是一个broker，它一方面接收producer的消息，给他们加上offset，把这些消息写到磁盘中。另一个方面它还要服务consumer，处理它们请求消息的request。一般来说，一个broker可以支持几千个partition，每秒处理百万基本的消息（当然不同的硬件也有不同的处理能力）。&lt;/p&gt;



&lt;p&gt;多个broker可以组成cluster，其中一个broker会被选举成controller，这个controller需要做一些特殊的操作，比如把不同的partition assign给不同的broker，监控处理fail的broker等。&lt;/p&gt;



&lt;p&gt;同样在partition level还有一个leader的概念，我们前面提到partition可以有多份拷贝（replication），他们中只有一份拷贝是leader，另外的我们称之为followers，一般来说会分布在不同的broker上，从而达到高可靠性的目的。所有的producer都必须把消息发布给leader，而consumer则可以从leader或者followers来获取消息。其实和数据库的读写一样，写必须经过leader，读则可以到任意节点。简单的示意如下图所示：&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-19.png&quot; alt=&quot;&quot; class=&quot;wp-image-1134&quot; srcset=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-19.png 624w, https://donggeitnote.com/wp-content/uploads/2021/11/image-19-300x178.png 300w&quot; sizes=&quot;(max-width: 624px) 100vw, 624px&quot;/&gt;&lt;/figure&gt;



&lt;p&gt;另外一个Kafka很重要的特性就是它的持久保存，也就是说每个broker都会把消息保存一段时间或者直到保存的消息大于某个大小。这个多长时间的设置一般会设置在topic这个层级上。&lt;/p&gt;



&lt;h1&gt;多个cluster&lt;/h1&gt;



&lt;p&gt;很多时候我们会使用多个cluster，这样做有各种各样的原因，一般来说下面这三种原因会比较主流：&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;隔离不同类型的数据&lt;/li&gt;&lt;li&gt;因为安全的原因进行隔离&lt;/li&gt;&lt;li&gt;不同数据库的隔离&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;有时候我们希望消息能够在不同的cluster之间交互，这个时候就引入了一个新的技术，我们称之为MirrorMaker。下图所示的例子就是数据中心A、B通过MirroMaker组成了一个新的aggregate的cluster，然后这个aggregate的消息又被数据中心C订阅，然后发布给数据中心C的aggregate的cluster，从而被数据中心C的consumer使用。&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-20.png&quot; alt=&quot;&quot; class=&quot;wp-image-1135&quot; srcset=&quot;https://donggeitnote.com/wp-content/uploads/2021/11/image-20.png 624w, https://donggeitnote.com/wp-content/uploads/2021/11/image-20-300x213.png 300w&quot; sizes=&quot;(max-width: 624px) 100vw, 624px&quot;/&gt;&lt;/figure&gt;



&lt;h1&gt;Kafka的特性&lt;/h1&gt;



&lt;p&gt;我们上面简单介绍了Kafka中的各种概念，下面来看看我们为什么要选择Kafka：&lt;/p&gt;



&lt;h2&gt;支持多producer&lt;/h2&gt;



&lt;p&gt;Kafka支持多个producer，就像我们上面例子中提到的一样，多个应用可以很自然地送消息给同个topic或者不同的topic。这样一来consumer就可以只需要处理一个数据流。&lt;/p&gt;



&lt;h2&gt;支持多consumer&lt;/h2&gt;



&lt;p&gt;Kafka支持多个consumer读哪怕是同一个数据流，这和别的类似系统中消息只能被一个consumer读取不太相同。当然你也可以把这些consumer放到同一个consumer group中，这样一个消息就只被一个consumer读取了。&lt;/p&gt;



&lt;h2&gt;数据持久保存到磁盘&lt;/h2&gt;



&lt;p&gt;Kafka的消息是被持久保存到磁盘上的，这样一来consumer就不需要实时来拿消息了，这也就意味着即使consumer很慢也不用担心有消息会丢失，甚至可以把consumer拿出去维护一下，然后再加回来也是可以继续获取消息而不需要担心有任何问题。&lt;/p&gt;



&lt;h2&gt;Scalable&lt;/h2&gt;



&lt;p&gt;Kafka的这种架构很容易处理大量的数据，production环境可以搞个几十或者几百个broker的cluster完全没有问题。而且因为replication的存在，所以对failure的处理也有保证。&lt;/p&gt;



&lt;h2&gt;高性能&lt;/h2&gt;



&lt;p&gt;把上面这些特性结合起来也就意味着Kafka的性能很容易就可以做得很好，毕竟多producer/consumer加上cluster完全可以高效地处理很大的流量。&lt;/p&gt;



&lt;h1&gt;总结&lt;/h1&gt;



&lt;p&gt;至此本文就把Kafka相关的基本概念和总体架构进行了简单介绍，希望大家能够对Kafka有个初步的了解。&lt;/p&gt;&lt;p class=&quot;post-views post-1126 entry-meta&quot;&gt;&amp;#13;
&lt;span class=&quot;post-views-icon dashicons dashicons-chart-bar&quot;/&gt;&amp;#13;
&lt;span class=&quot;post-views-label&quot;&gt;Post Views:&lt;/span&gt;&amp;#13;
&lt;span class=&quot;post-views-count&quot;&gt;99&lt;/span&gt;&amp;#13;
&lt;/p&gt;          &lt;nav class=&quot;pagination group&quot;&gt;
                      &lt;/nav&gt;
        &lt;/div&gt;

        
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cf704a2ac33f933cea7eb5896bf5e529</guid>
<title>一文搞懂 Kubernetes 日志收集的那些套路</title>
<link>https://toutiao.io/k/cy74456</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;准备&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关于容器日志&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Docker的日志分为两类，一类是 Docker引擎日志；另一类是容器日志。引擎日志一般都交给了系统日志，不同的操作系统会放在不同的位置。本文主要介绍容器日志，容器日志可以理解是运行在容器内部的应用输出的日志，默认情况下，docker logs 显示当前运行的容器的日志信息，内容包含 STOUT(标准输出) 和 STDERR(标准错误输出)。日志都会以 &lt;em&gt;json-file 的格式存储于 &lt;strong&gt;/var/lib/docker/containers/&amp;lt;容器id&amp;gt;/&amp;lt;容器id&amp;gt;-json.log&lt;/strong&gt;&lt;/em&gt; ，不过这种方式并不适合放到生产环境中。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;默认方式下容器日志并不会限制日志文件的大小，容器会一直写日志，导致磁盘爆满，影响系统应用。(docker log-driver 支持log文件的rotate)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Docker Daemon 收集容器的标准输出，当日志量过大时会导致Docker Daemon 成为日志收集的瓶颈，日志的收集速度受限。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;日志文件量过大时，利用docker logs -f 查看时会直接将Docker Daemon阻塞住，造成docker ps等命令也不响应。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Docker提供了logging drivers配置，用户可以根据自己的需求去配置不同的log-driver，可参考官网 Configure logging drivers 。但是上述配置的日志收集也是通过Docker Daemon收集，收集日志的速度依然是瓶颈。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;log-driver 日志收集速度
syslog 14.9 MB/s
json-file 37.9 MB/s&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;能不能找到不通过Docker Daemon收集日志直接将日志内容重定向到文件并自动 rotate的工具呢？答案是肯定的采用S6基底镜像。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;S6-log 将 CMD 的标准输出重定向到/.../default/current，而不是发送到 Docker Daemon，这样就避免了 Docker Daemon 收集日志的性能瓶颈。本文就是采用S6基底镜像构建应用镜像形成统一日志收集方案。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关于k8s日志&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;k8s日志收集方案分成三个级别：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;应用(Pod)级别&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;节点级别&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;集群级别&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pod级别的日志 , 默认是输出到标准输出和标志输入，实际上跟docker 容器的一致。使用 kubectl logs pod-name -n namespace 查看，具体参考。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Node级别的日志 , 通过配置容器的log-driver来进行管理 , 这种需要配合logrotare来进行 , 日志超过最大限制 , 自动进行rotate操作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8ZFzrRjqatrYUmrq5sPxwicGJj9hOiajbSI83m2L1aY2Dk8Z5tEDdU0O3X5th4zbia4HYkNmeNGE8ricDEqleILrfg/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群级别的日志收集 , 有三种&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;节点代理&lt;/strong&gt;方式，在node级别进行日志收集。一般使用DaemonSet部署在每个node中。这种方式优点是耗费资源少，因为只需部署在节点，且对应用无侵入。缺点是只适合容器内应用日志必须都是标准输出。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img data-ratio=&quot;0.7&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8ZFzrRjqatrYUmrq5sPxwicGJj9hOiajbS7EyhHrKXe1Yb0hicWJ18LiaGibK1C8B5zpQ1ic1cCjrPzk1zRn7icmkQoRQ/640?wx_fmt=jpeg&quot;/&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;使用&lt;strong&gt;sidecar container&lt;/strong&gt;作为容器日志代理，也就是在pod中跟随应用容器起一个日志处理容器，有两种形式：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;mp-miniprogram data-miniprogram-appid=&quot;wxde8ac0a21135c07d&quot; data-miniprogram-path=&quot;/index/pages/h5/h5?f_userId=1&amp;amp;f_token=1&amp;amp;s_cps=0&amp;amp;weburl=https%3A%2F%2Fdpurl.cn%2FJEpdnGwz&quot; data-miniprogram-nickname=&quot;美团团购丨优选外卖单车美食酒店&quot; data-miniprogram-avatar=&quot;http://mmbiz.qpic.cn/sz_mmbiz_png/nGDT6vKQ2NcAMdqubWjgmhZJ5QicJib2f8YNOppFwJg2XN2ydIl84j1QBACZLrm2ILZGcmk8ZH6Q4JibX1RDibqb7w/640?wx_fmt=png&amp;amp;wxfrom=200&quot; data-miniprogram-title=&quot;美团大额外卖红包，点击领取&quot; data-miniprogram-imageurl=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/8ZFzrRjqatqQmpZFTlIWpHu1tgMT5vYibhpIGIGItGiaS4sxfItGUqPr8tDTqDJKLovXIOiadBbzZdbBrS1hY1CibQ/0?wx_fmt=jpeg&quot; data-miniprogram-type=&quot;card&quot; data-miniprogram-servicetype=&quot;0&quot; class=&quot;js_editor_weapp&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一种是直接将应用容器的日志收集并输出到标准输出（叫做&lt;/span&gt;&lt;strong&gt;Streaming sidecar container&lt;/strong&gt;&lt;span&gt;），但需要注意的是，这时候，宿主机上实际上会存在两份相同的日志文件：&lt;/span&gt;&lt;span&gt;一份是应用自己写入的；&lt;/span&gt;&lt;span&gt;另一份则是 sidecar 的 stdout 和 stderr 对应的 JSON 文件。&lt;/span&gt;&lt;span&gt;这对磁盘是很大的浪费 , 所以说，除非万不得已或者应用容器完全不可能被修改。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8ZFzrRjqatrYUmrq5sPxwicGJj9hOiajbSHJol5DYu0lgicfvafI9gaicuZNg2nOibF26yWibHtFHESBICdSSNCPa2icQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一种是每一个pod中都起一个&lt;strong&gt;日志收集agent&lt;/strong&gt;（比如logstash或fluebtd）也就是相当于把方案一里的 logging agent放在了pod里。但是这种方案资源消耗(cpu，内存)较大，并且日志不会输出到标准输出，kubectl logs 会看不到日志内容。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8ZFzrRjqatrYUmrq5sPxwicGJj9hOiajbSBkgPrvBo9cskNdvroT1GYULt84VAibWdagnIwa7lNQQ7XibdJkEF5AaA/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;应用容器中直接将日志推到存储后端，&lt;/strong&gt; 这种方式就比较简单了，直接在应用里面将日志内容发送到日志收集服务后端。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img data-ratio=&quot;0.3&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8ZFzrRjqatrYUmrq5sPxwicGJj9hOiajbStaGMSkCndeJKuffjJArO9SnDEwy8OC7yNjIK7HW0hiaMqdlDsjDhtcw/640?wx_fmt=jpeg&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;日志架构&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上文对 k8s 日志收集方案的介绍，要想设计一个统一的日志收集系统，可以采用&lt;strong&gt;节点代理&lt;/strong&gt;方式收集每个节点上容器的日志，日志的整体架构如图所示。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5319444444444444&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8ZFzrRjqatrYUmrq5sPxwicGJj9hOiajbS6vwoPq4ialHDKTBf3exgv2e6WrK5fy3LQjAvUicGw7sNBR89iaydHly4w/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解释如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;所有应用容器都是基于s6基底镜像的，容器应用日志都会重定向到宿主机的某个目录文件下比如/data/logs/namespace/appname/podname/log/xxxx.log&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;log-agent 内部 包含 filebeat ，logrotate 等工具，其中filebeat是作为日志文件收集的agent&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过filebeat将收集的日志发送到kafka&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kafka在将日志发送的es日志存储/kibana检索层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;logstash 作为中间工具主要用来在es中创建index和消费kafka 的消息&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个流程很好理解，但是需要解决的是&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用户部署的新应用，如何动态更新filebeat配置，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何保证每个日志文件都被正常的rotate，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果需要更多的功能则需要二次开发filebeat，使filebeat 支持更多的自定义配置。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;付诸实践&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;解决上述问题，就需要开发一个log-agent应用以daemonset形式运行在k8s集群的每个节点上，应用内部包含filebeat，logrotate，和需要开发的功能组件。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个问题，如何动态更新filebeat配置，可以利用http://github.com/fsnotify/fsnotify 工具包监听日志目录变化create、delete事件，利用模板渲染的方法更新filebeat配置文件&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; data-category_id_list=&quot;1|11|16|17|22|24|26|27|28|29|3|31|32|35|36|37|39|41|42|43|45|46|47|48|49|5|50|51|52|53|54|55|6|7|8&quot; data-id=&quot;1624957861127&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1624957861127&quot;/&gt;第二个问题，利用http://github.com/robfig/cron 工具包 创建cronJob，定期rotate日志文件，注意应用日志文件所属用户，如果不是root用户所属，可以在配置中设置切换用户&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/var/&lt;span&gt;log&lt;/span&gt;/xxxx/xxxxx.log {&lt;br/&gt;      su www-data www-data&lt;br/&gt;      missingok&lt;br/&gt;      notifempty&lt;br/&gt;      size 1G&lt;br/&gt;      copytruncate&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三个问题，关于二次开发filebeat，可以参考博文 https://www.jianshu.com/p/fe3ac68f4a7a&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本文只是对 k8s 日志收集提供了一个简单的思路，关于日志收集可以根据公司的需求，因地制宜。&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span&gt;参考文献&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;https://kubernetes.io/docs/concepts/cluster-administration/logging/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://support.rackspace.com/how-to/understanding-logrotate-utility/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://github.com/elastic/beats/tree/master/filebeat&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;http://skarnet.org/software/s6/&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本文转载自：「 知乎 」，原文：https://tinyurl.com/taz5cfzv ，版权归原作者所有。欢迎投稿，投稿邮箱: editor@hi-linux.com。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>