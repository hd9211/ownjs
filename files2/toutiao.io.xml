<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>7e713fec1368de203559b85cdfebc4c2</guid>
<title>快手实时数仓建设实践</title>
<link>https://toutiao.io/k/21bsuqp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;a class=&quot;weui-flex original_primary_card appmsg_card_context wx_tap_card js_wx_tap_highlight&quot; href=&quot;#&quot; id=&quot;copyright_info&quot;&gt;
                                
                                &lt;div class=&quot;weui-flex__item&quot; role=&quot;option&quot;&gt;
                                    &lt;strong class=&quot;original_primary_nickname&quot;&gt;Apache Flink&lt;/strong&gt;
                                                                            &lt;span class=&quot;weui-hidden_abs&quot;&gt;.&lt;/span&gt;
                                        &lt;p class=&quot;original_primary_desc&quot;&gt;Flink 中文社区官微，Flink PMC 维护&lt;/p&gt;
                                                                    &lt;/div&gt;
                                &lt;p class=&quot;weui-flex__ft&quot;/&gt;
                            &lt;/a&gt;
                        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ff8c596ee779d910bb850b613bf71bee</guid>
<title>用 JuiceFS 备份 Nginx 日志可以这么简单</title>
<link>https://toutiao.io/k/mqopme2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post_content markdown&quot;&gt;&lt;p&gt;前一段，我们写了一篇讲异地备份重要性的文章，一周之后北京真的地震了，当时的时间是傍晚 6 点多一点，大部分工程师写代码正嗨的时候，地震之后就看到朋友圈里有人说感觉到地震的第一反应就是 git push，多么冰雪聪明、尽职尽责，可是你的线上数据做好备份了么？&lt;/p&gt;&lt;p&gt;在我们线上的生产环境中要备份的东西很多，各种服务日志、数据库数据、用户上传数据、代码等等。用 JuiceFS 来备份可以节省你大量时间，我们会围绕这个主题写一系列的教程，整理出一套最佳实践，方便大家。&lt;/p&gt;&lt;p&gt;今天第一篇就写写最常用的 Nginx 日志备份。&lt;/p&gt;&lt;h1 id=&quot;如何用-juicefs-备份-nginx-日志&quot;&gt;如何用 JuiceFS 备份 Nginx 日志&lt;/h1&gt;&lt;p&gt;生产环境中的 Nginx 经常作为反向代理，配置多台，用来对接后面的各种应用服务。日志主要有两类，访问日志 (access.log) 和错误日志 (error.log)。&lt;/p&gt;&lt;p&gt;日志是分散在每个 Nginx 节点的磁盘上的，每台机器自己的磁盘并不安全，而且分散的日志也难以维护和使用。所以，我们都会将日志汇总在一个更靠谱的存储系统中，一方面长期存储安全可靠，一方面也方便做分析使用。&lt;/p&gt;&lt;p&gt;在日志的存储上需要里，容量扩展性强，稳定安全，方便运维操作，价格便宜，最好按使用量付费是重点，对于存储性能的要求会低一些。目前常用的有 NFS、HDFS、对象存储等，把这些存储与 JuiceFS 做个比较：&lt;/p&gt;&lt;p&gt;说到日志的收集方式，主要有两种：&lt;strong&gt;定时收集&lt;/strong&gt; 和 &lt;strong&gt;实时收集&lt;/strong&gt;，我们在下面分别说明。JuiceFS 使用客户自己的对象存储保存文件数据，所以也自然继承了对象存储的好处，在此之上，我们提供了高性能的元数据服务和完整的 POSIX 兼容，使用上又比对象存储便利的多。&lt;/p&gt;&lt;h2 id=&quot;定时收集&quot;&gt;定时收集&lt;/h2&gt;&lt;p&gt;通常按照 小时、天，把日志拷贝到一个统一的存储点。这方面的工具集很多，我们用 Linux 默认安装的 logrotate 举例说明。&lt;/p&gt;&lt;p&gt;首先，要在 &lt;a href=&quot;https://juicefs.com&quot;&gt;JuiceFS 网站&lt;/a&gt; 注册个账号，并创建了一个文件系统，假设叫 super-backup。&lt;/p&gt;&lt;p&gt;第一步，每台机器安装 JuiceFS 客户端，挂载到 &lt;code&gt;/jfs&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;下载 JuiceFS 客户端&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl -L juicefs.io/static/juicefs -o juicefs &amp;amp;&amp;amp; chmod +x juicefs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;挂载文件系统&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo ./juicefs mount super-backup /jfs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在自动化配置管理中使用 JuiceFS 也同样方便，具体方法请在上手指南中查看 &lt;a href=&quot;https://juicefs.io/docs/zh/getting_started.html#remember-authentication&quot;&gt;如何通过命令行认证&lt;/a&gt; 和 &lt;a href=&quot;https://juicefs.io/docs/zh/getting_started.html#mount-on-boot&quot;&gt;开机自动挂载&lt;/a&gt;，我们支持 &lt;a href=&quot;https://juicefs.io/docs/zh/getting_started.html#docker&quot;&gt;Docker 中挂载&lt;/a&gt; 和 &lt;a href=&quot;https://juicefs.io/docs/zh/use_juicefs_in_kubernetes.html&quot;&gt;Kubernates&lt;/a&gt; 中挂载。&lt;/p&gt;&lt;p&gt;第二步，在每台机器上用 logrotate 配置日志的滚动策略，修改 &lt;code&gt;/etc/logrotate.d/nginx&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;/var/log/nginx/*.log {
    daily    # 每天滚动一次
    compress
    dateext # 把日期添加到文件名中
    sharedscripts
    postrotate
        [ -f /var/run/nginx.pid ] &amp;amp;&amp;amp; kill -USR1 `cat /var/run/nginx.pid` # 重新加载日志文件
    endscript
    lastaction
        rsync -au *.gz /jfs/nginx-logs/`hostname -s`/ # 把压缩好的日志同步到 JuiceFS
    endscript
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到此，Nginx 日志就可以每天 rotate 并保存到 JuiceFS 中了。增加 Nginx 节点时，只需要在新增节点上做同样的配置即可。&lt;/p&gt;&lt;p&gt;如果使用 NFS，在 logrotate 中的配置是基本一样的。但是 NFS 有几个不足之处：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;大部分 NFS 存在单点故障，而 JuiceFS 是高可用的（专业版承诺 99.95% SLA）。&lt;/li&gt;&lt;li&gt;NFS 协议传输不加密，所以你需要保证 NFS 和 Nginx 在同一个 VPC 中，如果还有其他要备份的服务，部署上就很麻烦。JuiceFS 传输有 SSL 加密，不受 VPC 限制。&lt;/li&gt;&lt;li&gt;NFS 需要事先容量规划，JuiceFS 是弹性扩容，按容量付费的，更省心，更便宜。
如果使用 HDFS 或者 对象存储，日后访问备份数据时，就比较麻烦。JuiceFS 就简单很多，比如可以直接用 &lt;code&gt;zgrep&lt;/code&gt; 查询。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;再分享几个 Tips：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;执行 &lt;code&gt;logrotate -f /etc/logrotate.d/nginx&lt;/code&gt; 立即执行对 logrotate 配置做个验证。还可以用 -d 做调试。&lt;/li&gt;&lt;li&gt;Logrotate 基于 cron 运行，无论你设置 weekly、daily 还是 hourly，具体的执行时间可以在 &lt;code&gt;/etc/crontab&lt;/code&gt; 中修改。&lt;/li&gt;&lt;li&gt;如果你觉得日志文件太多，我们还提供了 &lt;code&gt;juicefs merge&lt;/code&gt; 命令可以快速合并 gzip 压缩过的日志文件。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;说完定时汇总，下一节我们再说说日志实时收集。&lt;/p&gt;&lt;h2 id=&quot;实时收集&quot;&gt;实时收集&lt;/h2&gt;&lt;p&gt;日志的实时收集已经有了很多开源工具，常用的有 &lt;a href=&quot;https://www.elastic.co/products/logstash&quot;&gt;Logstash&lt;/a&gt;、&lt;a href=&quot;https://flume.apache.org/&quot;&gt;Flume&lt;/a&gt;、&lt;a href=&quot;https://github.com/facebookarchive/scribe&quot;&gt;Scribe&lt;/a&gt;、&lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Kafka&lt;/a&gt; 等。&lt;/p&gt;&lt;p&gt;在集群不是很大的时候，日志收集、分析、索引、展示有个全家桶方案 ELK，其中用 &lt;a href=&quot;https://www.elastic.co/products/logstash&quot;&gt;Logstash&lt;/a&gt; 做日志收集和分析。&lt;/p&gt;&lt;p&gt;需要下面的部署方式：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在每台机器上部署一个 Logstash Agent（Flume 等其他工具同理）；&lt;/li&gt;&lt;li&gt;部署一个 Logstash Central 做日志汇总；&lt;/li&gt;&lt;li&gt;部署一个 Redis 做整个服务的 Broker，目的是在日志收集和写入中间做个缓冲，避免 Central 挂了导致日志丢失；&lt;/li&gt;&lt;li&gt;然后再配置 Central 的落盘方式，将日志存储到 JuiceFS / NFS / 对象存储 / HDFS 等。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;先看看架构图：&lt;/p&gt;&lt;p&gt;这里不讲 Logstash 在收集、分析、过滤环节的配置了，网络上有很多文章可查（比如：&lt;a href=&quot;https://doc.yonyoucloud.com/doc/logstash-best-practice-cn/index.html&quot;&gt;Logstash 最佳实践&lt;/a&gt;），说一下输出环节。&lt;/p&gt;&lt;p&gt;把 Logstash 收集处理好的日志保存到 JuiceFS 只要在配置的 output 部分设置一下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;output {
   file {
       path =&amp;gt; &quot;/jfs/nginx-logs/%{host}-%{+yyyy/MM/dd/HH}.log.gz&quot;
       message_format =&amp;gt; &quot;%{message}&quot;
       gzip =&amp;gt; true
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;存储到 NFS 也可以用上面的配置，&lt;strong&gt;缺点和上文定时收集部分提到的相同&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;如果要保存到对象存储、HDFS，需要再配置 Logstash 的第三方插件，大部分是非官方的，随着 Logstash 版本的升级，使用时可能需要折腾一下。&lt;/p&gt;&lt;h2 id=&quot;最简单的实时收集方案&quot;&gt;最简单的实时收集方案&lt;/h2&gt;&lt;p&gt;其实还有更简单的实时日志收集方法，就是直接让 Nginx 把日志输出到 JuiceFS 中，省去了维护和部署日志收集系统的麻烦。使用这个方案可能会担心 JuiceFS 出问题时影响 Nginx 的正常运行，有两方面可以帮大家减少一些顾虑：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;JuiceFS 本身是一个高可用的服务，专业版承诺 99.95%的可用性，应该跟你的数据库等服务在一个可用性级别；&lt;/li&gt;&lt;li&gt;Nginx 的日志输出是使用异步IO来实现的，即使 JuiceFS 出现暂时性的抖动，也基本不影响 Nginx 的正常运行（restart 或者 reload 可能会受影响）。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果不喜欢运维复杂的日志收集系统，这个方案值得一试。&lt;/p&gt;&lt;h1 id=&quot;给-nginx-日志加一份异地备份&quot;&gt;给 Nginx 日志加一份异地备份&lt;/h1&gt;&lt;p&gt;定时收集和实时收集都讲完了，在 super-backup 中存储的 Nginx 日志如何做个&lt;strong&gt;异地备份&lt;/strong&gt;呢？&lt;/p&gt;&lt;p&gt;只要两步：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;去 JuiceFS 网站控制台中，访问你文件系统的设置菜单，勾选 “启动复制”，然后选择你要复制到的对象存储，保存。&lt;/li&gt;&lt;li&gt;在所有挂载 super-backup 的机器上重新挂载 super-backup 即可。之后新写入的数据会很快同步到要复制的 Bucket 中，旧的数据也会在客户端定时扫描（默认每周一次）时同步。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这样可以全自动的在另外一个对象存储中同步一份数据，有效防止单一对象存储的故障或者所在区域的灾难。&lt;/p&gt;&lt;p&gt;你一定会问：JuiceFS 挂了怎么办？元数据访问不了，光有对象存储里的数据也没用啊。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;我们最近发布了一个重要功能 – 兼容模式的 JuiceFS&lt;/strong&gt;，所有的文件会按原样保存在对象存储中，脱离 JuiceFS 的元数据服务，也仍然可以访问里面的文件。对于备份这类一次写入不做修改的场景适合使用。&lt;/p&gt;&lt;h1 id=&quot;后记&quot;&gt;后记&lt;/h1&gt;&lt;p&gt;上面我们详细讲解了在 JuiceFS 备份 Nginx 日志的方法，后续还会介绍如何备份 Gitlab、MySQL、MongoDB、用户上传数据等等，欢迎大家踊跃&lt;a href=&quot;mailto:success@juicedata.io&quot;&gt;提需求和投稿&lt;/a&gt;。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>71718c23052e15e48f95825864043e77</guid>
<title>基于 Kafka 的实时数仓在搜索的实践应用</title>
<link>https://toutiao.io/k/tynr8z3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;24&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;作者：vivo互联网服务器团队-Deng jie&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、概述&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Apache Kafka 发展至今，已经是一个很成熟的消息队列组件了，也是大数据生态圈中不可或缺的一员。Apache Kafka 社区非常的活跃，通过社区成员不断的贡献代码和迭代项目，使得 Apache Kafka 功能越发丰富、性能越发稳定，成为企业大数据技术架构解决方案中重要的一环。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Apache Kafka 作为一个热门消息队列中间件，具备高效可靠的消息处理能力，且拥有非常广泛的应用领域。那么，今天就来聊一聊基于 Kafka 的实时数仓在搜索的实践应用。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、为什么需要 Kafka&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在设计大数据技术架构之前，通常会做一些技术调研。我们会去思考一下为什么需要 Kafka？怎么判断选择的 Kafka 技术能否满足当前的技术要求？&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.1 早期的数据架构&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;早期的数据类型比较简单，业务架构也比较简单，就是将需要的数据存储下来。比如将游戏类的数据存储到数据库（MySQL、Oracle）。但是，随着业务的增量，存储的数据类型也随之增加了，然后我们需要使用的大数据集群，利用数据仓库来将这些数据进行分类存储，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;236&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4087301587301587&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHbOv5Z4kzKJ5SDEUUDn19fWLNAA10OJYLj32wTop6y31s1xhha8Q6Pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;756&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;但是，数据仓库存储数据是有时延的，通常时延为T+1。而现在的数据服务对象对时延要求均有很高的要求，例如物联网、微服务、移动端APP等等，皆需要实时处理这些数据。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.2 Kafka 的出现&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Kafka 的出现，给日益增长的复杂业务，提供了新的存储方案。将各种复杂的业务数据统一存储到 Kafka 里面，然后在通过 Kafka 做数据分流。如下图所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;268&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.46365914786967416&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHic6iaIbZg6bfmdoiap8VYiaM2WSqJK0y5y7icM2mqNIDXAFG3SkS8lLxVeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1197&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;这里，可以将视频、游戏、音乐等不同类型的数据统一存储到 Kafka 里面，然后在通过流处理对 Kafka 里面的数据做分流操作。例如，将数据存储到数据仓库、将计算的结果存储到KV做实时分析等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通常消息系统常见的有两种，它们分别是：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这两种方式都是有效和实用的，通过消息队列将工作内容分开，用于容错和扩展；生产和消费能够允许多租户，来使得系统解耦。而 Apache Kafka 的优点之一在于它将消息队列、生产和消费结合到了一个强大的消息系统当中。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同时，Kafka 拥有正确的消息处理特性，主要体现在以下几个方面：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;：当 Kafka 的性能（如存储、吞吐等）达到瓶颈时，可以通过水平扩展来提升性能；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;真实存储&lt;/strong&gt;：Kafka 的数据是实时落地在磁盘上的，不会因为集群重启或故障而丢失数据；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;实时处理&lt;/strong&gt;：能够集成主流的计算引擎（如Flink、Spark等），对数据进行实时处理；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;顺序写入&lt;/strong&gt;：磁盘顺序 I/O 读写，跳过磁头“寻址”时间，提高读写速度；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;内存映射&lt;/strong&gt;：操作系统分页存储利用内存提升 I/O 性能，实现文件到内存的映射，通过同步或者异步来控制 Flush；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;零拷贝&lt;/strong&gt;：将磁盘文件的数据复制到“页面缓存”一次，然后将数据从“页面缓存”直接发送到网络；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;高效存储&lt;/strong&gt;：Topic 和 Partition 拆为多个文件片段（Segment），定期清理无效文件。采用稀疏存储，间隔若干字节建立一条索引，防止索引文件过大。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.3 简单的应用场景&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;这里，我们可以通过一个简单直观的应用场景，来了解 Kafka 的用途。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;场景：假如用户A正在玩一款游戏，某一天用户A喜欢上了游戏里面的一款道具，打算购买，于是在当天 14:00 时充值了 10 元，在逛游戏商店时又喜欢上了另一款道具，于是在 14:30 时又充值了 30 元，接着在 15:00 时开始下单购买，花费了 20 元，剩余金额为 20 元。那么，整个事件流，对应到库表里面的数据明细应该是如下图所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;226&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3911792905081496&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXH4nFeKsqKQiccyeQpkia4QPGDwKusmCtGyumzOzBsb9jRBVsbic4FmfW7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1043&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、Kafka解决了什么问题&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;早期为响应项目快速上线，在服务器或者云服务器上部署一个 WebServer，为个人电脑或者移动用户提供访问体验，然后后台在对接一个数据库，为 Web 应用提供数据持久化以及数据查询，流程如下图所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;397&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6862275449101797&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHMenfH7gmQlsxqdBYEwPKDcNcYNBMX9cjicibAMV8mXYFkcu3p6SoCVibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;835&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;但是，随着用户的迅速增长，用户所有的访问都直接通过 SQL 数据库使得它不堪重负，数据库的压力也越来越大，不得不加上缓存服务以降低 SQL 数据库的荷载。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同时，为了理解用户行为，又开始收集日志并保存到 Hadoop 这样的大数据集群上做离线处理，并且把日志放在全文检索系统（比如 ElasticSearch）中以便快速定位问题。由于需要给投资方看业务状况，也需要把数据汇总到数据仓库（比如 Hive）中以便提供交互式报表。此时的系统架构已经具有一定的复杂性了，将来可能还会加入实时模块以及外部数据交互。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本质上，这是一个数据集成问题。没有任何一个系统能够解决所有的事情，所以业务数据根据不同用途，存放在不同的系统，比如归档、分析、搜索、缓存等。数据冗余本身没有任何问题，但是不同系统之间太过复杂的数据同步却是一种挑战。如下图所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7608142493638677&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHnIKbtOuMHcHSGMOQKpqDKGagQqPgXU7rlayMuTjT8zgO2NYBjyqAfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;786&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;而 Kafka 可以让合适的数据以合适的形式出现在合适的地方。Kafka 的做法是提供消息队列，让生产者向队列的末尾添加数据，让多个消费者从队列里面依次读取数据然后自行处理。如果说之前连接的复杂度是 O(N^2)，那么现在复杂度降低到了 O(N)，扩展起来也方便多了，流程如下图所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.665083135391924&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHpLYwqQgw7XcJaCT2NRIpZp44aibJic25p7tsTQM3jgWzE3NCcpNxHH8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;842&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、Kafka的实践应用&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.1 为什么需要建设实时数仓&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;4.1.1 目的&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通常情况下，在大数据场景中，存储海量数据建设数据仓库一般都是离线数仓（时延T+1），通过定时任务每天拉取增量数据，然后创建各个业务不同维度的数据，对外提供 T+1 的数据服务。计算和数据的实时性均比较差，业务人员无法根据自己的即时性需求获取几分钟之前的实时数据。数据本身的价值随着时间的流逝会逐步减弱，因此数据产生后必须尽快的到达用户的手中，实时数仓的建设需求由此而来。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;4.1.2 目标&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了适应业务高速迭代的特点，分析用户行为，挖掘用户价值，提高用户留存，在实时数据可用性、可扩展性、易用性、以及准确性等方面提供更好的支持，因此需要建设实时数仓。主要目标包含如下所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.2 如何构建实时数仓为搜索提供数据&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;当前实时数仓比较主流的架构一般来说包含三个大的模块，它们分别是消息队列、计算引擎、以及存储。结合上述对 Kafka 的综合分析，结合搜索的业务场景，引入 Kafka 作为消息队列，复用大数据平台（BDSP）的能力作为计算引擎和存储，具体架构如下图所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6093591047812817&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHO9AIzIshksuN2x0BgtLibhZGbxn1PM4ut8GFJotl2BbeK8hGcGjwgSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;983&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.3 流处理引擎选择&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;目前业界比较通用的流处理引擎主要有两种，它们分别是Flink和Spark，那么如何选择流处理引擎呢？我们可以对比以下特征来决定选择哪一种流处理引擎？&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;254&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.43867243867243866&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHcK5QeNJ0xfHiagfMTCPCfYwzXZIpgDvFntRY1dOicfTpeaicAlOEjCl9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;693&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Flink作为一款开源的大数据流式计算引擎，它同时支持流批一体，引入Flink作为实时数仓建设的流引擎的主要原因如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;高吞吐、低延时；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;灵活的流窗口；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;轻量级容错机制；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;流批一体&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.4 建设实时数仓遇到的问题&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在建设初期，用于实时处理的 Kafka 集群规模较小，单个 Topic 的数据容量非常大，不同的实时任务都会消费同一个大数据量的 Topic，这样会导致 Kafka 集群的 I/O 压力非常的大。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因此，在使用的过程中会发现 Kafka 的压力非常大，经常出现延时、I/O能性能告警。因此，我们采取了将大数据量的单 Topic 进行实时分发来解决这种问题，基于 Flink 设计了如下图所示的数据分发流程。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHIiaMdoXuGZDJicfvKernZ29sXNxggwCOX3cia7ukKUamUVcUnAJMWu2og/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;上述流程，随着业务类型和数据量的增加，又会面临新的问题：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.5 实时数仓方案进阶&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;目前，主流的实时数仓架构通常有2种，它们分别是Lambda、Kappa。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.5.1 Lambda&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着实时性需求的提出，为了快速计算一些实时指标（比如，实时点击、曝光等），会在离线数仓大数据架构的基础上增加一个实时计算的链路，并对消息队列实现数据来源的流失处理，通过消费消息队列中的数据 ，用流计算引擎来实现指标的增量计算，并推送到下游的数据服务中去，由下游数据服务层完成离线和实时结果的汇总。具体流程如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHx8YkTBU4u1OJF482vyfXbnob0c5rQ79cY6MDSq3P9GUVo80Hjtl2Pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;4.5.2 Kappa&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Kappa架构只关心流式计算，数据以流的方式写入到 Kafka ，然后通过 Flink 这类实时计算引擎将计算结果存放到数据服务层以供查询。可以看作是在Lambda架构的基础上简化了离线数仓的部分。具体流程如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXH2f7SsJ4bCU8FULRMLkibn56SCHB4ue2ka4H5Br3GxIAO3HWKibgvBNNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在实际建设实时数仓的过程中，我们结合这2种架构的思想来使用。实时数仓引入了类似于离线数仓的分层理念，主要是为了提供模型的复用率，同时也要考虑易用性、一致性、以及计算的成本。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;4.5.3 实时数仓分层&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在进阶建设实时数仓时，分层架构的设计并不会像离线数仓那边复杂，这是为了避免数据计算链路过长造成不必要的延时情况。具体流程图如下所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHtZDYvXiam5DkkyF8Ka5AYV5ILw3iaibDrOl3R78yxsRZMsPRLa0K3MopQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;ODS层&lt;/strong&gt;：以Kafka 作为消息队列，将所有需要实时计算处理的数据放到对应的 Topic 进行处理；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;DW层&lt;/strong&gt;：通过Flink实时消费Topic中的数据，然后通过数据清理、多维度关联（JOIN）等，将一些相同维度的业务系统、维表中的特征属性进行关联，提供数据易用性和复用性能力，最终得到实时明细数据；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;DIM层&lt;/strong&gt;：用来存储关联的查询的维度信息，存储介质可以按需选择，比如HBase、Redis、MySQL等；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;DA层&lt;/strong&gt;：针对实时数据场景需求，进行高度聚合汇总，服务于KV、BI等场景。OLAP分析可以使用ClickHouse，KV可以选择HBase（若数据量较小，可以采用Redis）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过上面的流程，建设实时数仓分层时，确保了对实时计算要求比较高的任务不会影响到BI报表、或者KV查询。但是，会有新的问题需要解决：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;27&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;Kafka 实时数据如何点查？&lt;/p&gt;&lt;p&gt;消费任务异常时如何分析？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.5.4 Kafka监控&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;针对这些问题，我们调研和引入了Kafka 监控系统——Kafka Eagle（目前改名为EFAK）。复用该监控系统中比较重要的维度监控功能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Kafka Eagle处理能够满足上诉两个维度的监控需求之外，还提供了一些日常比较实用的功能，比如Topic记录查看、Topic容量查看、消费和生产任务的速率、消费积压等。我们采用了 Kafka-Eagle 来作为对实时数仓的任务监控。Kafka-Eagle 系统设计架构如下图所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;371&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6418242491657397&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHRvfaYYemEfaSVLc950FHtpdyCicoY3w3PyQXBcuj0XZHDPdnDt6yNbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;899&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Kafka-Eagle 是一款完全开源的对 Kafka 集群及应用做全面监控的系统，其核心由以下几个部分组成：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据采集&lt;/strong&gt;：核心数据来源 JMX 和 API 获取；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据存储&lt;/strong&gt;：支持 MySQL 和 Sqlite 存储；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据展示&lt;/strong&gt;：消费者应用、图表趋势监控（包括集群状态、消费生产速率、消费积压等）、开发的分布式 KSQL 查询引擎，通过 KSQL 消息查询；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据告警&lt;/strong&gt;：支持常用的 IM 告警（微信，钉钉，WebHook等），同时邮件、短信、电话告警也一并支持。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;部分预览截图如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）Topic最近7天写入量分布&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;默认展示所有Topic的每天写入总量分布，可选择时间维度、Topic聚合维度，来查看写入量的分布情况，预览截图如下所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;180&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3109375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHe04uicakXl7dMv5fhCria3r50nFGkyHwRDbSqYkTe3pPLfASRhddJHYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2）KSQL查询Topic消息记录&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;可以通过编写SQL语句，来查询（支持过滤条件）Topic中的消息记录，预览截图如下所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;315&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHUib0icea9QCd0zvzGZBsO0hUv9Mo4UEGUslGOHwreNV8O3uBpPXL3CqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3）消费Topic积压详情&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;可以监控所有被消费的Topic的消费速率、消费积压等详情，预览截图如下所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;264&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.45703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6XCXAChXeKHX0IrwCiaJYXHeBicJxLicdUj8qeKSj9KJGN5gMGEBJSBMiaS5G1qOVN5S19e4WXCYanYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、参考资料&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://kafka.apache.org/documentation/&quot; textvalue=&quot;https://kafka.apache.org/documentation/&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;1.https://kafka.apache.org/documentation/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2.&lt;a target=&quot;_blank&quot; href=&quot;http://www.kafka-eagle.org/&quot; textvalue=&quot;http://www.kafka-eagle.org/&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;http://www.kafka-eagle.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;3.&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/smartloli/EFAK&quot; textvalue=&quot;https://github.com/smartloli/kafka-eagle&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://github.com/smartloli/kafka-eagle&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:119.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>242c08229b14d10b5b8bca413c2f029a</guid>
<title>《Rust 编码规范》</title>
<link>https://toutiao.io/k/injccgg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8495412d4ad1aa78fb579eb80f5d8545</guid>
<title>系统困境与软件复杂度，为什么我们的系统会如此复杂</title>
<link>https://toutiao.io/k/7kraspn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                                    


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naJnLMXiaepYqzV6JqXicG9NnibLAPUAjKalp2QNzfeLXRjDWKYC9WmxqHJVJLW7DibWkcpywJHAQl3qTg/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;读 &lt;/span&gt;&lt;span&gt;A Philosophy of Software Design&lt;/span&gt;&lt;span&gt; 有感，软件设计与架构复杂度，你是战术龙卷风吗？&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{&amp;quot;copyFrom&amp;quot;:1516441855},[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8alhhtfk7ak&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;读 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A Philosophy of Software Design&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 有感，软件设计与架构复杂度，你是战术龙卷风吗？&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4uh7ydyiw1pl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;前言&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4kr4q6lgjc4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;有一天，一个医生和一个土木工程师在一起争论“谁是世界上最古老的职业”。医生说：“上帝用亚当的肋骨造出了夏娃，这是历史上第一次外科手术，所以最古老的职业应该是医生”，土木工程师说：“在创世纪之前，上帝从混沌中创造了天堂与人间，这是更早之前的一次土木作业，所以最古老的职业应该是土木工程”。这时软件工程师拖着键盘走出来说，“那你认为，是谁创造了那片混沌？”&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4tzx82sspdx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;建筑师不会轻易给100层的高楼增加一个地下室，但我们却经常在干这样的事，并且总有人会对你说，“这个需求很简单”。到土里埋个地雷，这确实不复杂，但我们往往面临的真实场景其实是：“在这片雷区里加一个雷”，而雷区里哪里有雷，任何人都不知道 🤷🏻‍♂️。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4kra233ota1k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;什么是复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5o3abiu1w2xg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们一直在说系统很复杂，那到底什么是复杂性？关于复杂的定义有很多种，其中比较有代表的是&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://en.wikipedia.org/wiki/Thomas_J._McCabe,_Sr.&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Thomas J. McCabe&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 在1976提出的理性派的复杂性度量，与&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://en.wikipedia.org/wiki/John_Ousterhout&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;John Ousterhout&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 教授提出的感性派的复杂性认知。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5udp5nzf8sqc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;理性度量&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5oj9cgi3y6vc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/4ad8acd3-86a1-4da8-92b6-3364dc61083f.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:288.95145631067965,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;4ad8acd3-86a1-4da8-92b6-3364dc61083f&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5cnylxcjsra&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性并不是什么新概念，早在上世纪70年代，软件就已经极其复杂，开发与维护的成本都非常高。1976年McCabe&amp;amp;Associates公司开始对软件进行结构测试，并提出了&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://github.com/niexiaolong/niexiaolong.github.io/blob/master/mccabe.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;McCabe Cyclomatic Complexity Metric&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，我们也称之为McCabe圈复杂度。它通过多个维度来度量软件的复杂度，从而判断软件当前的开发/维护成本。&amp;quot;]]],[&amp;quot;table&amp;quot;,{&amp;quot;colsWidth&amp;quot;:[162,162,162,162],&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5nzq6lx6kgfp&amp;quot;},[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;代码状况&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;测性成本&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度1 - 10&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;清晰/结构化&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可测性高&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本低&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度10 - 20&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可测性中&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本中&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度20 - 30&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;非常复杂&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可测性低&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本高&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度30&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不可读&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不可测&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本非常高&amp;quot;]]]]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5oygey7dzdbd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5sx4leviy3p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;感性认知&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5ph6ou1b1sq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂度高的代码一定不是好代码，但复杂度低的也不一定就是好代码。John Ousterhout教授认为软件的复杂性相对理性的分析，可能更偏感性的认知。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5dt89mvqdg7c&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Complexity is anything that makes software hard to understand or to modify&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：所谓复杂性，就是任何使得软件难于理解和修改的因素。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev57s8csqqr62r&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;50年后的今天，John Ousterhout教授在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A Philosophy of Software Design&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 书中提到了一个非常主观的见解，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性就是任何使得软件难于理解和修改的因素。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev53cq2puw6yjz&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;模糊性与依赖性是引起复杂性的2个主要因素，模糊性产生了最直接的复杂度，让我们很难读懂代码真正想表达的含义，无法读懂这些代码，也就意味着我们更难去改变它。而依赖性又导致了复杂性不断传递，不断外溢的复杂性最终导致系统的无限腐化，一旦代码变成意大利面条，几乎不可能修复，成本将成指数倍增长。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5xy1cnfmb3lk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性的表现形式&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5dxloidunlvq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂的系统往往也有一些非常明显的特征，John教授将它抽象为变更放大（Change amplification）、认知负荷（Cognitive load）与未知的未知（Unknown unknowns）这3类。当我们的系统出现这3个特征，说明我们的系统已经开始逐渐变得复杂了。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5awvknk7gpf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;症状1-变更放大&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev50oj3hmznlhnl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Change amplification: a seemingly simple change requires code modifications in many different places.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：看似简单的变更需要在许多不同地方进行代码修改。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev51og07el3av4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;变更放大（Change amplification）指得是看似简单的变更需要在许多不同地方进行代码修改。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;比较典型的代表是Ctrl-CV式代码开发，领域模型缺少内聚与收拢，当需要对某段业务进行调整时，需要改动多个模块以适应业务的发展。&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5kbjtgaxcjq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;/**\n * 销售捡入客户\n */\npublic void pick(String salesId, String customerId) {\n    // 查询客户总数\n    long customerCnt = customerDao.findCustomerCount(salesId);\n    // 查询销售库容\n    long capacity = capacityDao.findSalesCapacity(salesId);\n    // 判断是否超额\n    if(customerCnt &amp;gt;= capacity) {\n        throws new BizException(\&amp;quot;capacity over limit\&amp;quot;);\n    }\n    // 代码省略 do customer pick\n}\n&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5083cr1cqcla&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在CRM领域，销售捡入客户时需要进行库容判断，这段代码也确实可以满足需求。但随着业务的发展，签约的客户要调整为不占库容。而客户除了销售捡入，还包括主管分发、leads分发、手工录入、数据采买等多个场景，如果没对库容域做模型的收拢，一个简单的逻辑调整，就需要我们在多个场景做适配才能满足诉求。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5prjgfwwwbs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;症状2-认知负荷&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5cqqkc1utmw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Cognitive load: how much a developer needs to know in order to complete a task.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：开发人员需要多少知识才能完成一项任务。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5oddrjmv0ej&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;认知负荷（Cognitive load）是指开发人员需要多少知识才能完成一项任务。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;使用功能性框架时，我们希望它操作简单，部署复杂系统时，我们希望它架构清晰，其实都是降低一项任务所需的成本。盲目的追求高端技术，设计复杂系统，增加学习与理解成本都属于本末倒置的一种。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/f91838dc-60ce-4e07-89f1-3af1e98556c4.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:429.1766666666667,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;f91838dc-60ce-4e07-89f1-3af1e98556c4&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5x8qvc8g3yo8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5qydo8at72jo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TMF是整个星环的支柱，也是业务中台面向可复用可扩展架构的核心。但TMF太过复杂，认知与学习成本非常高，我们日常中所面临的一些扩展诉求99%（或者应该说100%）都不适合TMF，可能通过一些设计模式或者就是一些if else，可能更适合解决我们的问题。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5yl5sm7o34ti&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;除此之外，还包括一些简单搜索场景却用到了blink等流式引擎，简单后台系统通过DDD进行构建，几个商品发布的状态机转换用上了规则引擎等等，都属于认知负荷复杂度的一种。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev55wn9i85v2vn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;症状3-未知的未知&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5caivk21vpdh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Unknown unknowns: it is not obvious which pieces of code must be modified to complete a task&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：必须修改哪些代码才能完成任务。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5p2gmps49uff&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/37c1670e-8aa3-4de7-a200-cfd7f8824542.gif&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;show&amp;quot;,&amp;quot;width&amp;quot;:380,&amp;quot;height&amp;quot;:213,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;37c1670e-8aa3-4de7-a200-cfd7f8824542&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5df2992jtt5n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;未知的未知（Unknown unknowns）是指必须修改哪些代码才能完成任务&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，或者说开发人员必须获得哪些信息才能成功地执行任务。这一项也是John Ousterhout教授认为复杂性中最糟糕的一个表现形式。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5bcnq3h71l2c&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当你维护一个有20年历史的项目时，这种问题的出来相对而言就没那么意外。由于代码的混乱与文档的缺失，导致你无法掌控一个500万行代码的应用，并且代码本身也没有明显表现出它们应该要阐述的内容。这时“未知的未知”出现了，你不知道改动的这行代码是否能让程序正常运转，也不知道这行代码的改动是否又会引发新的问题。这时候我们发现，那些“上帝类”真的就只有上帝能拯救了。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5zyl1x3ahyj8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;为什么会产生复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5trcaphalml&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;那软件为什么越来越复杂，是不是减少一些犯错就能避免一场浩劫呢？回顾那些复杂的系统，我们可以找到很多因素导致系统腐化。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5ez6v7ehcis8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;想简单图省事，没有及时治理不合理的内容&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev55b7z1b6pfrd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;缺少匠心追求，对肮脏代码视而不见&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev57e1ye91any2&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;技术能力不够，无法应对复杂系统&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev679t1pue2ebf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;交接过渡缺失，三无产品几乎无法维护&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6f3kpfze07kf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;除了上述内容外，还可以想到很多理由。但我们发现他们好像有一个共同的指向点 - &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件工程师&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，似乎所有复杂的源头就是软件工程师的不合格导致，所以其实一些罪恶的根因是我们自己？&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6h4qvxxbfu1b&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;统一的中国与分裂的欧洲&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6its8960j1us&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/7ed6a6f1-5081-4088-bdd4-2c68a0443fd7.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:360.9449715370019,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;7ed6a6f1-5081-4088-bdd4-2c68a0443fd7&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev66o506le2g36&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6uv0mp0kj1sq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;欧洲大陆面积大体与中国相当，但为什么欧洲是分裂的，而中国是统一的。有人说他们文化不一样，也有人说他们语言不通是主要原因，也有人说他们缺一个秦始皇😄。其实我们回顾欧洲的历史，欧洲还真不缺一个大一统的帝国。罗马帝国曾经让地中海成为自己的内海，拿破仑鼎盛时期掌管着1300万平方公里的领地。欧洲也曾出现过伟大的帝国，但都未走向统一。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6blia7o6yoy9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们再观察地图，其实除了中国、俄罗斯以外，全世界99%的国家都是小国。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;分裂才是常态，统一才不正常&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。马老师也曾说过，成功都有偶然性只有失败才存在必然。只有极少国家才实现了大一统，所以我们不应该问为什么欧洲是分裂的，而应该问为什么中国是统一的。类比到我们的软件也同样如此，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂才是常态，不复杂才不正常。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6regc6q5o4i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件固有的复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6qr5cp55782&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;The Complexity of software is an essential property, not an accidental one.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Grady Booch 《Object-Oriented Analysis and Design with Applications》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：软件的复杂性是一个基本特征，而不是偶然如此。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6mgh9yeby68m&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Grady Booch在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://niexiaolong.github.io/Object%20Oriented%20Analysis%20and%20Design%20with%20Applications.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Object-Oriented Analysis and Design with Applications&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 中提出这样一个观念，他认为软件的复杂性是固有的，包括问题域的复杂性、管理开发过程的困难性、通过软件可能实现的灵活性与刻画离散系统行为的问题，这4个方面来分析了软件的发展一定伴随着复杂，这是软件工程这本科学所必然伴随的一个特性。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6dph46e0zjom&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Everything, without exception, requires additional energy and order to maintain itself. I knew this in the abstract as the famous second law of thermodynamics, which states that everything is falling apart slowly.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Kevin Kelly 《The Inevitable》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：世间万物都需要额外的能量和秩序来维持自身，无一例外。这就是著名的热力学第二定律，即所有的事务都在缓慢地分崩离析。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6j6b7jgbl58&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Kevin Kelly在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://github.com/niexiaolong/niexiaolong.github.io/blob/master/The-Inevitable-byKevin-Kelly.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;The Inevitable&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 也有提过类似的观点，他认为世间万物都需要额外的能量和秩序来维持自身，所有的事物都在缓慢地分崩离析。没有外部力量的注入事物就会逐渐崩溃，这是世间万物的规律，而非我们哪里做得不对。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6cst5x2a0kgl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件架构治理复杂度&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6dwu5tsphgzs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;为软件系统注入的外力就是我们的软件架构，以及我们未来的每一行代码。软件架构有很多种，从最早的单体架构，到后面的分布式架构、SOA、微服务、FaaS、ServiceMesh等等。所有的软件架构万变不离其宗，都在致力解决软件的复杂性。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6cx2mvy4xqpb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;架构的本质&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6gwy7654vjk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;编程范式指的是程序的编写模式，软件架构发展到今天只出现过3种编程范式( &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;paradigm&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; ),分别是结构化编程，面向对象编程与函数式编程。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;py5ychg6p9j&amp;quot;,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6clflhp3g01l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;结构化编程取消 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/goto%E8%AF%AD%E5%8F%A5/7603004&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;goto&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 移除跳转语句，对程序控制权的直接转移进行了限制和规范&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;py5ychg6p9j&amp;quot;,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev68b3etduxzdg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面向对象编程限制 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;指针&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 的使用，对程序控制权的间接转移进行了限制和规范&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;py5ychg6p9j&amp;quot;,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6h6dhwyeskm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;函数式编程以 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%CE%BB%E6%BC%94%E7%AE%97/8019133&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;λ演算法&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 为核心思想，对程序中的赋值进行了限制和规范&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev64cgq6m2q80f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面向对象的五大设计原则 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://wiwiki.kfd.me/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;S.O.L.I.D&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。依赖倒置限制了模块的依赖顺序、单一职责限制模块的职责范围、接口隔离限制接口的提供形式。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ax6vyysbrw9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件的本质是约束。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;商品的代码不能写在订单域，数据层的方法不能写在业务层。70年的软件发展，并没有告诉我们应该怎么做，而是教会了我们不该做什么。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6kzjjr4v5w1p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;递增的复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6j56bums0yjs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件的复杂性不会凭空消失，并且会逐级递增。针对递增的复杂性有3个观点：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;qxtzs6edkz&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6rkmpixz2yck&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;模糊性创造了复杂，依赖性传播了复杂&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;qxtzs6edkz&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev608viu1qklh5i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性往往不是由单个灾难引起的&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;qxtzs6edkz&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6smwbpcfz5q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们可以容易地说服自己，当前变更带来的一点点复杂性没什么大不了&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6t6yfhw5l84f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;曾经小李跟我抱怨，说这段代码实在是太恶心了，花了很长时间才看懂，并且代码非常僵硬，而正好这个需求需要改动到这里，代码真的就像一坨屎。我问他最后是怎么处理的，他说，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我给它又加了一坨💩&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6zrcxx8yql7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;编程思维论&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6xcmxs0ehf48&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:13.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;战术编程&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev656nma847klv&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;其实小李的这种做法并非是一个个体行为，或许我们在遇到复杂代码时都曾这样苟且过，John教授这种编程方法称之为“战术编程”。战术编程最主要的特点是快，同时具备如下几个特点。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6sdam97uqgk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当前一定是最快的 🚀&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ksxjmtda4bf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不会花费太多时间来寻找最佳设计&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ohpd7bznjw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;每个编程任务都会引入一些复杂度&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev69tsfu70nog7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;重构会减慢当前任务速度，所以保持最快速度&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev66i0ymz1tffl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;@HSFProvider(serviceInterface = AgnDistributeRuleConfigQueryService.class)\npublic class AgnDistributeRuleConfigQueryServiceImpl implements AgnDistributeRuleConfigQueryService {\n\n    @Override\n    public ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt;queryAgnDistributeRuleConfigById(String id) {\n        logger.info(\&amp;quot;queryAgnDistributeRuleConfigById id=\&amp;quot; + id);\n        ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt;result = new ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt;();\n        if(StringUtils.isBlank(id)){\n            result.setSuccess(false);\n            result.setErrorMsg(\&amp;quot;id cannot be blank\&amp;quot;);\n            return result\n        }\n        try {\n            AgnDistributeRuleConfigDto agnDistributeRuleConfigDto = new AgnDistributeRuleConfigDto();\n            AgnDistributeRuleConfig agnDistributeRuleConfig = agnDistributeRuleConfigMapper.selectById(id);\n            if(agnDistributeRuleConfig == null){\n                logger.error(\&amp;quot;agnDistributeRuleConfig is null\&amp;quot;);\n                result.setSuccess(false);\n                result.setErrorMsg(\&amp;quot;agnDistributeRuleConfig is null\&amp;quot;);\n                return result\n            }\n            this.filterDynamicRule(agnDistributeRuleConfig);\n            BeanUtils.copyProperties(agnDistributeRuleConfig, agnDistributeRuleConfigDto);\n            result.setSuccess(true);\n            result.setTotal(1);\n            result.setValues(agnDistributeRuleConfigDto);\n        } catch (Exception e) {\n            logger.error(\&amp;quot;queryAgnDistributeRuleConfigById error,\&amp;quot;, e);\n            result.setSuccess(false);\n            result.setErrorMsg(e.getMessage());\n        }\n        return result;\n    }\n} \n&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6cq8zvilipkc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们看上面这段代码，是一段查询分发规则的业务逻辑。虽然功能能够work，但不规范的地方其实非常多&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6q8vn485pumk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Facade层定义全部逻辑 - 未做结构分层&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ue2b9o98rg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;业务与技术未做分离 - 耦合接口信息与业务数据&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6nzjofdeeldd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Try catch 满天飞 - 缺少统一异常处理机制&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev74gi53jne3jp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;没有规范化的日志格式 - 日志格式混乱&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pi7ayouu6ia&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;但不可否认，他一定是当前最快的。这就是战术设计的特点之一，永远按当前最快速交付的方案进行推进，甚至很多组织鼓励这种工作方式，为了使功能更快运作，只注重短期收益而忽略长期价值。&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7f8lpnwkq9f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:13.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;战术龙卷风&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev73c1gttpjn8u&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/39e3d84f-e42f-4533-b5a8-2a9e8ad603cf.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:293.49072356215214,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;39e3d84f-e42f-4533-b5a8-2a9e8ad603cf&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7l3hu5tyvqi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Almost every software development organization has at least one developer who takes tactical programming to the extreme: a tactical tornado.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：几乎每个软件开发组织都有至少一个将战术编程发挥到极致的开发人员：战术龙卷风。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7lkx0glhuwf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;将战术编程发挥到极致的人，叫战术龙卷风。战术龙卷风以腐化系统为代价换取当前最高效的解决方案（或许他自己并未觉得）。战术龙卷风也有如下几个特点：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;y3lk86wbc9r&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7zxvkvvbq8k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;是一位多产的程序员，没人比龙卷风更快完成任务&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;y3lk86wbc9r&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev72vh6qu1lyds&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;总能留下龙卷风后毁灭的痕迹🌪留给后人去清理&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;y3lk86wbc9r&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev773k4xf6w1n4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;是真的很卷&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7w7fkq7iuyzd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;一些组织甚至会将战术龙卷风视为英雄，为什么能干得又多又快？&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;purple&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;因为他将成本放到了未来。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件工程最大的成本在于维护，我们每一次代码的改动，都应该是对历史代码的一次整理，而非单一的功能堆积。龙卷风能赢得现在，但终将失去未来，而这个失败的未来或许需要全团队与他一起买单。&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev74j326g8lvia&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:13.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;战略编程&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7qz1owicwzf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/514a1d2b-9706-44db-b803-fb96f303a95c.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:522,&amp;quot;height&amp;quot;:314,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;514a1d2b-9706-44db-b803-fb96f303a95c&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev788ejshywohk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;John教授提出与战术编程相对的是战略编程，战略编程更注重长期价值，不满足于功能work，致力于制作出色的设计，以满足对未来扩展的诉求（注意，不要过度）。战略设计有如下4个特点&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7cgfh20h7a2j&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;工作代码远远不够&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7454lvtwc8vn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;引入不必要的复杂度不可接受&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7gx4pfjqh4tj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不断对系统设计进行小幅改进&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7ep1mbwouiqi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;投资心态（每位工程师都需要对良好的设计进行连续的少量投资 10~20%）&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pxpt67car1l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;John Ousterhout教授在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A Philosophy of Software Design&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 书中提到了战略设计与战术设计的总成本投入。随着时间的流逝，战略设计可以有效控制软件成本，但战术设计会随着时间的推移线性递增。这与Martin Fowler在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://martinfowler.com/books/eaa.html&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Patterns of Enterprise Application Architecture&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 这本书中所提的关于数据驱动与领域驱动关于复杂度的治理是同样的含义，要致力于长期的价值投资。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7sxbr5qkctn8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;系统的困境与演进&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pdbiz6nz6n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/92a27166-0834-4075-b8a6-634890c530d0.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:323.5,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;92a27166-0834-4075-b8a6-634890c530d0&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pxg1sn4sxt&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;没有系统是天然复杂的，为了快速完成任务不断引入新的复杂度至系统逐渐腐化，无限增长与无限传递的复杂度让软件需求越来越难“快速完成”。当有一天我们意识到系统的复杂性时再试图通过战略设计进行软件的迭代，你会发现举步维艰，一处很小的修改需要投入大量的基建修复，最终我们不得不向成本低头，不断再通过战术设计无限的苟且。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7airfi37ebvl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A condition that is often incorrectly labeled software maintenance. To be more precise, it is maintenance when we correct errors; it is evolution when we respond to changing requirements; it is preservation when we continue to use extraordinary means to keep an ancient and decaying piece of software in operation. Unfortunately, reality suggests that an inordinate percent- age of software development resources are spent on software preservation.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Grady Booch 《Object-Oriented Analysis and Design with Applications》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：我们总是说我们需要“维护”这些老系统。而准确的说，在软件发展过程里，只有我们修正错误时，才是维护；在我们应对改变的需求时，这是演进；&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;red&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当我们使用一些极端的手段来保持古老而陈腐的软件继续工作时，这是保护（苟且）。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;事实证明我们更多的时间是在应对最后一种状况。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7exs8tb5elul&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如同Grady Booch在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://niexiaolong.github.io/Object%20Oriented%20Analysis%20and%20Design%20with%20Applications.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Object-Oriented Analysis and Design with Applications&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 中所提到的观点，当我们使用一些极端的手段来保持古老而陈腐的软件继续工作时，这确实是一种苟且。我们小心翼翼、集成测试、灰度发布、及时回滚等等，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;purple&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们没有在“维护”他们，而是以一种丑陋的方式让这些丑陋的代码继续能够成功苟且下去。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当代码变成意大利面条时，将几乎是不可能修复，成本将成指数倍增长，并且似乎我们的系统已经存在这样的代码，并且可能还在持续增加中。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/de605a4c-17f1-4c3a-9eff-571f62287bd0.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:151.31451612903226,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;de605a4c-17f1-4c3a-9eff-571f62287bd0&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7fik8q7by825&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;架构伪论&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7xv3h6g9ia9l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在架构设计中，总有一些软件工程师所坚信的诗和远方，但到不了的乌托邦不一定就是遥不可及的美好圣地，实则也可能是对系统无益甚至有害的架构设计。这里列举其中2条可能存在的架构伪论。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7tp8wlyi2d6q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;好的代码自解释&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7zim2cxquvb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Comments do not make up for bad code&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Martin Fowler 《Clean Code》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：注释不是对劣质代码的补救&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7v0tn2yv8wx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Martin Fowler在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/9226259&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Clean Code&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 书中提到注释不是对劣质代码的补救，以前我也一直坚信如果代码足够好是不需要注释的。但实则这是一个伪命题，John教授这么评价它 &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;‘good code is self-documenting’ is a delicious myth&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7txjbgggewhi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;/**\n * 批量查询客户信息\n */\npublic List&amp;lt;CustomerVO&amp;gt;queryCustomerList(){\n    // 查询参数准备\n    UserInfo userInfo = context.getLoginContext().getUserInfo();\n    if(userInfo == null || StringUtils.isBlank(userInfo.getUserId())){\n        return Collections.emptyList();\n    }\n    LoginDTO loginDTO = userInfoConvertor.convert(userInfo);\n    // 查询客户信息\n    List&amp;lt;CustomerSearchVO&amp;gt;customerSearchVOList = customerRemoteQueryService.queryCustomerList(loginDTO);\n    Iterator&amp;lt;CustomerSearchVO&amp;gt;it = customerSearchVOList.iterator();\n    // 排除不合规客户\n    while(it.hasNext()){\n        CustomerSearchVO customerSearchVO = it.next();\n        if(isInBlackList(customerSearchVO) || isLowQuality(customerSearchVO)){\n            it.remove();\n        }\n    }\n    // 补充客户其他属性信息\n    batchFillCustomerPositionInfo(customerSearchVOList);\n    batchFillCustomerAddressInfo(customerSearchVOList);\n    return customerSearchVOList;\n}\n&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev71jgooade5k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这段代码我们可以很轻松的在5秒内看明白这个函数是做什么的，并且知道它内部的一些业务规则。无限的私有方法封装会让代码链路过深，无限类的拆解会造成更多网状依赖，至少有3点内容，让我们绝不能抛弃注释。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;tkbq7havdqg&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7msu6xue5lua&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;无法精准命名&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;命名的含义是抽象实体隐藏细节，我们不能在一个名字上赋予它全部的信息，而必要的注释可以完美的进行辅佐。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;tkbq7havdqg&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev75f2113o6rn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;设计思想的阐述&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;代码只能实现设计不能阐述设计，这也是为什么一些复杂的架构设计我们需要文档的支撑而非代码的‘自解释’，在文档与代码之间的空隙，由注释来填补。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;tkbq7havdqg&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7e4gc73e6js&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;母语的力量&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这点尤其适合我们中国人，有时并不是因为注释少代码多，所以我们下意识会首先看代码。而是我们几十年感受的文化，让我们对中文与ABC具有完全不一样的感观。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7dn2gu4m1ya&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;永远追求最优雅&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7ickm2zw7e9n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;雷布斯曾自夸自己写的代码像诗一样优雅，追求优雅的代码应该是每个软件工程师的心中的圣地。但有时存在一些不优雅，存在一些‘看似不合理’并不代表就不对，反而有时在追求更优雅的路上我们持续跑偏。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7mvi970vo97p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;The goal of software architecture is to minimize the human resources required&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;to build and maintain the required system.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Robert C.Martin 《Clean Architecture》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev78wzz8lekngo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Robert C.Martin在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Clean Architecture&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 一书中提到了架构终极目标，用最小的人力成本来满足构建和维护该系统的需求。架构始终是我们解决复杂度的一个工具，如果当前系统并不复杂，我们不需要为了所谓的优雅去过分改造与优化它，持续将成本置在一个较低水位，就是软件最好的解决办法。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7gdgq0pdvwai&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;业务简单的系统不应用DDD架构，弱交互场景也无需进行前后端分离，哪怕是邓总设计师在规划新中国的发展上，也是制定了一套‘中国特色社会主义’制度。不要盲从一些教条的观念，选择适合自己的，控制在可控制范围内，既不过度也不缺失。毕竟没有绝对的优雅，甚至没有绝对的正确。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8ntzcpovtrqb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;写在最后&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8vu9akfqe9lh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;很多人认为做业务开发显得没那么有挑战性，但其实正好相反。最难解决的bug是无法重现的bug，最难处理的问题域是不确定性的问题域。业务往往是最复杂的，面向不确定性设计才是最复杂的设计。软件工程学科最难的事情是抽象，因为它没有标准、没有方法、甚至没有对错。如何在软件固有的复杂性上找到一条既不过度也不缺失的路，是软件工程师的终身课题，或许永远也无法达到，或许我们已经在路上了。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8dg6cr0xdfg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;参阅书籍&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《A Philosophy of Software Design》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8p4saka3kcu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev85ler5xrx1cb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://niexiaolong.github.io/Object%20Oriented%20Analysis%20and%20Design%20with%20Applications.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Object Oriented Analysis and Design with Applications》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8dke638wrvm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev80qsat11csrt9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/9226259&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Clean Code》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8t3ko03y2jmn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8mxoezywzcag&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://detail.tmall.com/item.htm?id=654392764249&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Clean Architecture》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8hi8i1pwu2tb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8rxkupc83kb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://martinfowler.com/books/eaa.html&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Patterns of Enterprise Application Architecture》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]&quot;&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;一  前言&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;有一天，一个医生和一个土木工程师在一起争论“谁是世界上最古老的职业”。医生说：“上帝用亚当的肋骨造出了夏娃，这是历史上第一次外科手术，所以最古老的职业应该是医生”，土木工程师说：“在创世纪之前，上帝从混沌中创造了天堂与人间，这是更早之前的一次土木作业，所以最古老的职业应该是土木工程”。这时软件工程师拖着键盘走出来说，“那你认为，是谁创造了那片混沌？”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;建筑师不会轻易给100层的高楼增加一个地下室，但我们却经常在干这样的事，并且总有人会对你说，“这个需求很简单”。到土里埋个地雷，这确实不复杂，但我们往往面临的真实场景其实是：“在这片雷区里加一个雷”，而雷区里哪里有雷，任何人都不知道 。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;二  什么是复杂性&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们一直在说系统很复杂，那到底什么是复杂性？关于复杂的定义有很多种，其中比较有代表的是Thomas J. McCabe 在1976提出的理性派的复杂性度量，与John Ousterhout 教授提出的感性派的复杂性认知。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;1  理性度量&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44660194174757284&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKO6J4icpqw3T5V0rnaXtQ73AAiacm29j89e13HbdIKbJBroT8wOSKV7DPUKgIzgEYYMmftPcpobYjg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;复杂性并不是什么新概念，早在上世纪70年代，软件就已经极其复杂，开发与维护的成本都非常高。1976年McCabe&amp;amp;Associates公司开始对软件进行结构测试，并提出了McCabe Cyclomatic Complexity Metric，我们也称之为McCabe圈复杂度。它通过多个维度来度量软件的复杂度，从而判断软件当前的开发/维护成本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;圈复杂度&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;代码状况&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;测性成本&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;维护成本&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;圈复杂度1 - 10&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;清晰/结构化&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;可测性高&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;维护成本低&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;圈复杂度10 - 20&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;复杂&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;可测性中&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;维护成本中&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;圈复杂度20 - 30&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;非常复杂&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;可测性低&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;维护成本高&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;圈复杂度30&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;不可读&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;不可测&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;维护成本非常高&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;2  感性认知&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;复杂度高的代码一定不是好代码，但复杂度低的也不一定就是好代码。John Ousterhout教授认为软件的复杂性相对理性的分析，可能更偏感性的认知。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;Complexity is anything that makes software hard to understand or to modify&lt;br data-path=&quot;13,1&quot;/&gt;-- John Ousterhout 《A Philosophy of Software Design》&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;13,3&quot;/&gt;译：所谓复杂性，就是任何使得软件难于理解和修改的因素。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;50年后的今天，John Ousterhout教授在 A Philosophy of Software Design 书中提到了一个非常主观的见解，复杂性就是任何使得软件难于理解和修改的因素。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;模糊性与依赖性是引起复杂性的2个主要因素，模糊性产生了最直接的复杂度，让我们很难读懂代码真正想表达的含义，无法读懂这些代码，也就意味着我们更难去改变它。而依赖性又导致了复杂性不断传递，不断外溢的复杂性最终导致系统的无限腐化，一旦代码变成意大利面条，几乎不可能修复，成本将成指数倍增长。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;三  复杂性的表现形式&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;复杂的系统往往也有一些非常明显的特征，John教授将它抽象为变更放大（Change amplification）、认知负荷（Cognitive load）与未知的未知（Unknown unknowns）这3类。当我们的系统出现这3个特征，说明我们的系统已经开始逐渐变得复杂了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;症状1-变更放大&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;Change amplification: a seemingly simple change requires code modifications in many different places.&lt;/span&gt;&lt;br data-path=&quot;19,1&quot;/&gt;&lt;span&gt;-- John Ousterhout 《A Philosophy of Software Design》&lt;/span&gt;&lt;br data-path=&quot;19,3&quot;/&gt;&lt;span&gt;译：看似简单的变更需要在许多不同地方进行代码修改。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;变更放大（Change amplification）指得是看似简单的变更需要在许多不同地方进行代码修改。比较典型的代表是Ctrl-CV式代码开发，领域模型缺少内聚与收拢，当需要对某段业务进行调整时，需要改动多个模块以适应业务的发展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String salesId, String customerId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; customerCnt = customerDao.findCustomerCount(salesId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; capacity = capacityDao.findSalesCapacity(salesId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(customerCnt &amp;gt;= capacity) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;throws &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BizException&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;capacity over limit&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;在CRM领域，销售捡入客户时需要进行库容判断，这段代码也确实可以满足需求。但随着业务的发展，签约的客户要调整为不占库容。而客户除了销售捡入，还包括主管分发、leads分发、手工录入、数据采买等多个场景，如果没对库容域做模型的收拢，一个简单的逻辑调整，就需要我们在多个场景做适配才能满足诉求。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;症状2-认知负荷&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;Cognitive load: how much a developer needs to know in order to complete a task.&lt;/span&gt;&lt;br data-path=&quot;24,1&quot;/&gt;&lt;span&gt;-- John Ousterhout 《A Philosophy of Software Design》&lt;/span&gt;&lt;br data-path=&quot;24,3&quot;/&gt;&lt;span&gt;译：开发人员需要多少知识才能完成一项任务。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;认知负荷（Cognitive load）是指开发人员需要多少知识才能完成一项任务。使用功能性框架时，我们希望它操作简单，部署复杂系统时，我们希望它架构清晰，其实都是降低一项任务所需的成本。盲目的追求高端技术，设计复杂系统，增加学习与理解成本都属于本末倒置的一种。&lt;br data-path=&quot;25,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TMF是整个星环的支柱，也是业务中台面向可复用可扩展架构的核心。但TMF太过复杂，认知与学习成本非常高，我们日常中所面临的一些扩展诉求99%（或者应该说100%）都不适合TMF，可能通过一些设计模式或者就是一些if else，可能更适合解决我们的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除此之外，还包括一些简单搜索场景却用到了blink等流式引擎，简单后台系统通过DDD进行构建，几个商品发布的状态机转换用上了规则引擎等等，都属于认知负荷复杂度的一种。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;症状3-未知的未知&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;Unknown unknowns: it is not obvious which pieces of code must be modified to complete a task&lt;/span&gt;&lt;br data-path=&quot;30,1&quot;/&gt;&lt;span&gt;-- John Ousterhout 《A Philosophy of Software Design》&lt;/span&gt;&lt;br data-path=&quot;30,3&quot;/&gt;&lt;span&gt;译：必须修改哪些代码才能完成任务。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;未知的未知（Unknown unknowns）是指必须修改哪些代码才能完成任务，或者说开发人员必须获得哪些信息才能成功地执行任务。这一项也是John Ousterhout教授认为复杂性中最糟糕的一个表现形式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当你维护一个有20年历史的项目时，这种问题的出来相对而言就没那么意外。由于代码的混乱与文档的缺失，导致你无法掌控一个500万行代码的应用，并且代码本身也没有明显表现出它们应该要阐述的内容。这时“未知的未知”出现了，你不知道改动的这行代码是否能让程序正常运转，也不知道这行代码的改动是否又会引发新的问题。这时候我们发现，那些“上帝类”真的就只有上帝能拯救了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;四  为什么会产生复杂性&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;那软件为什么越来越复杂，是不是减少一些犯错就能避免一场浩劫呢？回顾那些复杂的系统，我们可以找到很多因素导致系统腐化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;想简单图省事，没有及时治理不合理的内容&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缺少匠心追求，对肮脏代码视而不见&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;技术能力不够，无法应对复杂系统&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;交接过渡缺失，三无产品几乎无法维护&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了上述内容外，还可以想到很多理由。但我们发现他们好像有一个共同的指向点 - 软件工程师，似乎所有复杂的源头就是软件工程师的不合格导致，所以其实一些罪恶的根因是我们自己？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;1  统一的中国与分裂的欧洲&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;欧洲大陆面积大体与中国相当，但为什么欧洲是分裂的，而中国是统一的。有人说他们文化不一样，也有人说他们语言不通是主要原因，也有人说他们缺一个秦始皇。其实我们回顾欧洲的历史，欧洲还真不缺一个大一统的帝国。罗马帝国曾经让地中海成为自己的内海，拿破仑鼎盛时期掌管着1300万平方公里的领地。欧洲也曾出现过伟大的帝国，但都未走向统一。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们再观察地图，其实除了中国、俄罗斯以外，全世界99%的国家都是小国。分裂才是常态，统一才不正常。马老师也曾说过，成功都有偶然性只有失败才存在必然。只有极少国家才实现了大一统，所以我们不应该问为什么欧洲是分裂的，而应该问为什么中国是统一的。类比到我们的软件也同样如此，复杂才是常态，不复杂才不正常。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;2  软件固有的复杂性&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;The Complexity of software is an essential property, not an accidental one.&lt;/span&gt;&lt;br data-path=&quot;44,1&quot;/&gt;&lt;span&gt;-- Grady Booch 《Object-Oriented Analysis and Design with Applications》&lt;/span&gt;&lt;br data-path=&quot;44,3&quot;/&gt;&lt;span&gt;译：软件的复杂性是一个基本特征，而不是偶然如此。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Grady Booch在 Object-Oriented Analysis and Design with Applications 中提出这样一个观念，他认为软件的复杂性是固有的，包括问题域的复杂性、管理开发过程的困难性、通过软件可能实现的灵活性与刻画离散系统行为的问题，这4个方面来分析了软件的发展一定伴随着复杂，这是软件工程这本科学所必然伴随的一个特性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;Everything, without exception, requires additional energy and order to maintain itself. I knew this in the abstract as the famous second law of thermodynamics, which states that everything is falling apart slowly.&lt;/span&gt;&lt;br data-path=&quot;46,1&quot;/&gt;&lt;span&gt;-- Kevin Kelly 《The Inevitable》&lt;/span&gt;&lt;br data-path=&quot;46,3&quot;/&gt;&lt;span&gt;译：世间万物都需要额外的能量和秩序来维持自身，无一例外。这就是著名的热力学第二定律，即所有的事务都在缓慢地分崩离析。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Kevin Kelly在 The Inevitable 也有提过类似的观点，他认为世间万物都需要额外的能量和秩序来维持自身，所有的事物都在缓慢地分崩离析。没有外部力量的注入事物就会逐渐崩溃，这是世间万物的规律，而非我们哪里做得不对。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;五  软件架构治理复杂度&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;为软件系统注入的外力就是我们的软件架构，以及我们未来的每一行代码。软件架构有很多种，从最早的单体架构，到后面的分布式架构、SOA、微服务、FaaS、ServiceMesh等等。所有的软件架构万变不离其宗，都在致力解决软件的复杂性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;1  架构的本质&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;编程范式指的是程序的编写模式，软件架构发展到今天只出现过3种编程范式( paradigm ),分别是结构化编程，面向对象编程与函数式编程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;结构化编程取消 goto 移除跳转语句，对程序控制权的直接转移进行了限制和规范&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;面向对象编程限制 指针 的使用，对程序控制权的间接转移进行了限制和规范&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;函数式编程以 λ演算法 为核心思想，对程序中的赋值进行了限制和规范&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;面向对象的五大设计原则 S.O.L.I.D。依赖倒置限制了模块的依赖顺序、单一职责限制模块的职责范围、接口隔离限制接口的提供形式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;软件的本质是约束。商品的代码不能写在订单域，数据层的方法不能写在业务层。70年的软件发展，并没有告诉我们应该怎么做，而是教会了我们不该做什么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;2  递增的复杂性&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;软件的复杂性不会凭空消失，并且会逐级递增。针对递增的复杂性有3个观点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;模糊性创造了复杂，依赖性传播了复杂&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;复杂性往往不是由单个灾难引起的&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;我们可以容易地说服自己，当前变更带来的一点点复杂性没什么大不了&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;曾经小李跟我抱怨，说这段代码实在是太恶心了，花了很长时间才看懂，并且代码非常僵硬，而正好这个需求需要改动到这里，代码真的就像一坨乱麻。我问他最后是怎么处理的，他说，我给它又加了一坨。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;3  编程思维论&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;战术编程&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;其实小李的这种做法并非是一个个体行为，或许我们在遇到复杂代码时都曾这样苟且过，John教授这种编程方法称之为“战术编程”。战术编程最主要的特点是快，同时具备如下几个特点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当前一定是最快的 &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不会花费太多时间来寻找最佳设计&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个编程任务都会引入一些复杂度&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;重构会减慢当前任务速度，所以保持最快速度&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@HSFProvider&lt;/span&gt;(serviceInterface = AgnDistributeRuleConfigQueryService.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AgnDistributeRuleConfigQueryServiceImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AgnDistributeRuleConfigQueryService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;queryAgnDistributeRuleConfigById&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String id)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        logger.info(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;queryAgnDistributeRuleConfigById id=&quot;&lt;/span&gt; + id);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt; result = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(StringUtils.isBlank(id)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            result.setSuccess(&lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            result.setErrorMsg(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;id cannot be blank&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            AgnDistributeRuleConfigDto agnDistributeRuleConfigDto = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AgnDistributeRuleConfigDto();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            AgnDistributeRuleConfig agnDistributeRuleConfig = agnDistributeRuleConfigMapper.selectById(id);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(agnDistributeRuleConfig == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                logger.error(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;agnDistributeRuleConfig is null&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                result.setSuccess(&lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                result.setErrorMsg(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;agnDistributeRuleConfig is null&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.filterDynamicRule(agnDistributeRuleConfig);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            BeanUtils.copyProperties(agnDistributeRuleConfig, agnDistributeRuleConfigDto);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            result.setSuccess(&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            result.setTotal(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            result.setValues(agnDistributeRuleConfigDto);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            logger.error(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;queryAgnDistributeRuleConfigById error,&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            result.setSuccess(&lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            result.setErrorMsg(e.getMessage());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;我们看上面这段代码，是一段查询分发规则的业务逻辑。虽然功能能够work，但不规范的地方其实非常多&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Facade层定义全部逻辑 - 未做结构分层&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务与技术未做分离 - 耦合接口信息与业务数据&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Try catch 满天飞 - 缺少统一异常处理机制&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;没有规范化的日志格式 - 日志格式混乱&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但不可否认，他一定是当前最快的。这就是战术设计的特点之一，永远按当前最快速交付的方案进行推进，甚至很多组织鼓励这种工作方式，为了使功能更快运作，只注重短期收益而忽略长期价值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;战术龙卷风&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4536178107606679&quot; data-type=&quot;png&quot; data-w=&quot;2156&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKO6J4icpqw3T5V0rnaXtQ73D8CLoXm51HKUnQJ9yWBJwGO1TSXq8s5SyaZjib0XmTWiacShATrnzyxQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{&amp;quot;copyFrom&amp;quot;:1516441855},[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8alhhtfk7ak&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;读 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A Philosophy of Software Design&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 有感，软件设计与架构复杂度，你是战术龙卷风吗？&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4uh7ydyiw1pl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;前言&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4kr4q6lgjc4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;有一天，一个医生和一个土木工程师在一起争论“谁是世界上最古老的职业”。医生说：“上帝用亚当的肋骨造出了夏娃，这是历史上第一次外科手术，所以最古老的职业应该是医生”，土木工程师说：“在创世纪之前，上帝从混沌中创造了天堂与人间，这是更早之前的一次土木作业，所以最古老的职业应该是土木工程”。这时软件工程师拖着键盘走出来说，“那你认为，是谁创造了那片混沌？”&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4tzx82sspdx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;建筑师不会轻易给100层的高楼增加一个地下室，但我们却经常在干这样的事，并且总有人会对你说，“这个需求很简单”。到土里埋个地雷，这确实不复杂，但我们往往面临的真实场景其实是：“在这片雷区里加一个雷”，而雷区里哪里有雷，任何人都不知道 🤷🏻‍♂️。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4kra233ota1k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;什么是复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5o3abiu1w2xg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们一直在说系统很复杂，那到底什么是复杂性？关于复杂的定义有很多种，其中比较有代表的是&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://en.wikipedia.org/wiki/Thomas_J._McCabe,_Sr.&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Thomas J. McCabe&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 在1976提出的理性派的复杂性度量，与&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://en.wikipedia.org/wiki/John_Ousterhout&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;John Ousterhout&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 教授提出的感性派的复杂性认知。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5udp5nzf8sqc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;理性度量&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5oj9cgi3y6vc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/4ad8acd3-86a1-4da8-92b6-3364dc61083f.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:288.95145631067965,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;4ad8acd3-86a1-4da8-92b6-3364dc61083f&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5cnylxcjsra&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性并不是什么新概念，早在上世纪70年代，软件就已经极其复杂，开发与维护的成本都非常高。1976年McCabe&amp;amp;Associates公司开始对软件进行结构测试，并提出了&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://github.com/niexiaolong/niexiaolong.github.io/blob/master/mccabe.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;McCabe Cyclomatic Complexity Metric&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，我们也称之为McCabe圈复杂度。它通过多个维度来度量软件的复杂度，从而判断软件当前的开发/维护成本。&amp;quot;]]],[&amp;quot;table&amp;quot;,{&amp;quot;colsWidth&amp;quot;:[162,162,162,162],&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5nzq6lx6kgfp&amp;quot;},[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;代码状况&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;测性成本&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度1 - 10&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;清晰/结构化&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可测性高&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本低&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度10 - 20&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可测性中&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本中&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度20 - 30&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;非常复杂&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可测性低&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本高&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度30&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不可读&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不可测&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本非常高&amp;quot;]]]]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5oygey7dzdbd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5sx4leviy3p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;感性认知&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5ph6ou1b1sq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂度高的代码一定不是好代码，但复杂度低的也不一定就是好代码。John Ousterhout教授认为软件的复杂性相对理性的分析，可能更偏感性的认知。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5dt89mvqdg7c&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Complexity is anything that makes software hard to understand or to modify&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：所谓复杂性，就是任何使得软件难于理解和修改的因素。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev57s8csqqr62r&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;50年后的今天，John Ousterhout教授在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A Philosophy of Software Design&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 书中提到了一个非常主观的见解，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性就是任何使得软件难于理解和修改的因素。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev53cq2puw6yjz&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;模糊性与依赖性是引起复杂性的2个主要因素，模糊性产生了最直接的复杂度，让我们很难读懂代码真正想表达的含义，无法读懂这些代码，也就意味着我们更难去改变它。而依赖性又导致了复杂性不断传递，不断外溢的复杂性最终导致系统的无限腐化，一旦代码变成意大利面条，几乎不可能修复，成本将成指数倍增长。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5xy1cnfmb3lk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性的表现形式&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5dxloidunlvq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂的系统往往也有一些非常明显的特征，John教授将它抽象为变更放大（Change amplification）、认知负荷（Cognitive load）与未知的未知（Unknown unknowns）这3类。当我们的系统出现这3个特征，说明我们的系统已经开始逐渐变得复杂了。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5awvknk7gpf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;症状1-变更放大&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev50oj3hmznlhnl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Change amplification: a seemingly simple change requires code modifications in many different places.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：看似简单的变更需要在许多不同地方进行代码修改。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev51og07el3av4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;变更放大（Change amplification）指得是看似简单的变更需要在许多不同地方进行代码修改。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;比较典型的代表是Ctrl-CV式代码开发，领域模型缺少内聚与收拢，当需要对某段业务进行调整时，需要改动多个模块以适应业务的发展。&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5kbjtgaxcjq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;/**\n * 销售捡入客户\n */\npublic void pick(String salesId, String customerId) {\n    // 查询客户总数\n    long customerCnt = customerDao.findCustomerCount(salesId);\n    // 查询销售库容\n    long capacity = capacityDao.findSalesCapacity(salesId);\n    // 判断是否超额\n    if(customerCnt &amp;gt;= capacity) {\n        throws new BizException(\&amp;quot;capacity over limit\&amp;quot;);\n    }\n    // 代码省略 do customer pick\n}\n&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5083cr1cqcla&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在CRM领域，销售捡入客户时需要进行库容判断，这段代码也确实可以满足需求。但随着业务的发展，签约的客户要调整为不占库容。而客户除了销售捡入，还包括主管分发、leads分发、手工录入、数据采买等多个场景，如果没对库容域做模型的收拢，一个简单的逻辑调整，就需要我们在多个场景做适配才能满足诉求。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5prjgfwwwbs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;症状2-认知负荷&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5cqqkc1utmw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Cognitive load: how much a developer needs to know in order to complete a task.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：开发人员需要多少知识才能完成一项任务。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5oddrjmv0ej&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;认知负荷（Cognitive load）是指开发人员需要多少知识才能完成一项任务。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;使用功能性框架时，我们希望它操作简单，部署复杂系统时，我们希望它架构清晰，其实都是降低一项任务所需的成本。盲目的追求高端技术，设计复杂系统，增加学习与理解成本都属于本末倒置的一种。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/f91838dc-60ce-4e07-89f1-3af1e98556c4.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:429.1766666666667,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;f91838dc-60ce-4e07-89f1-3af1e98556c4&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5x8qvc8g3yo8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5qydo8at72jo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TMF是整个星环的支柱，也是业务中台面向可复用可扩展架构的核心。但TMF太过复杂，认知与学习成本非常高，我们日常中所面临的一些扩展诉求99%（或者应该说100%）都不适合TMF，可能通过一些设计模式或者就是一些if else，可能更适合解决我们的问题。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5yl5sm7o34ti&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;除此之外，还包括一些简单搜索场景却用到了blink等流式引擎，简单后台系统通过DDD进行构建，几个商品发布的状态机转换用上了规则引擎等等，都属于认知负荷复杂度的一种。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev55wn9i85v2vn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;症状3-未知的未知&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5caivk21vpdh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Unknown unknowns: it is not obvious which pieces of code must be modified to complete a task&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：必须修改哪些代码才能完成任务。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5p2gmps49uff&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/37c1670e-8aa3-4de7-a200-cfd7f8824542.gif&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;show&amp;quot;,&amp;quot;width&amp;quot;:380,&amp;quot;height&amp;quot;:213,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;37c1670e-8aa3-4de7-a200-cfd7f8824542&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5df2992jtt5n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;未知的未知（Unknown unknowns）是指必须修改哪些代码才能完成任务&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，或者说开发人员必须获得哪些信息才能成功地执行任务。这一项也是John Ousterhout教授认为复杂性中最糟糕的一个表现形式。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5bcnq3h71l2c&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当你维护一个有20年历史的项目时，这种问题的出来相对而言就没那么意外。由于代码的混乱与文档的缺失，导致你无法掌控一个500万行代码的应用，并且代码本身也没有明显表现出它们应该要阐述的内容。这时“未知的未知”出现了，你不知道改动的这行代码是否能让程序正常运转，也不知道这行代码的改动是否又会引发新的问题。这时候我们发现，那些“上帝类”真的就只有上帝能拯救了。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5zyl1x3ahyj8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;为什么会产生复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5trcaphalml&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;那软件为什么越来越复杂，是不是减少一些犯错就能避免一场浩劫呢？回顾那些复杂的系统，我们可以找到很多因素导致系统腐化。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5ez6v7ehcis8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;想简单图省事，没有及时治理不合理的内容&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev55b7z1b6pfrd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;缺少匠心追求，对肮脏代码视而不见&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev57e1ye91any2&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;技术能力不够，无法应对复杂系统&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev679t1pue2ebf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;交接过渡缺失，三无产品几乎无法维护&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6f3kpfze07kf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;除了上述内容外，还可以想到很多理由。但我们发现他们好像有一个共同的指向点 - &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件工程师&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，似乎所有复杂的源头就是软件工程师的不合格导致，所以其实一些罪恶的根因是我们自己？&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6h4qvxxbfu1b&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;统一的中国与分裂的欧洲&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6its8960j1us&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/7ed6a6f1-5081-4088-bdd4-2c68a0443fd7.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:360.9449715370019,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;7ed6a6f1-5081-4088-bdd4-2c68a0443fd7&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev66o506le2g36&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6uv0mp0kj1sq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;欧洲大陆面积大体与中国相当，但为什么欧洲是分裂的，而中国是统一的。有人说他们文化不一样，也有人说他们语言不通是主要原因，也有人说他们缺一个秦始皇😄。其实我们回顾欧洲的历史，欧洲还真不缺一个大一统的帝国。罗马帝国曾经让地中海成为自己的内海，拿破仑鼎盛时期掌管着1300万平方公里的领地。欧洲也曾出现过伟大的帝国，但都未走向统一。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6blia7o6yoy9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们再观察地图，其实除了中国、俄罗斯以外，全世界99%的国家都是小国。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;分裂才是常态，统一才不正常&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。马老师也曾说过，成功都有偶然性只有失败才存在必然。只有极少国家才实现了大一统，所以我们不应该问为什么欧洲是分裂的，而应该问为什么中国是统一的。类比到我们的软件也同样如此，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂才是常态，不复杂才不正常。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6regc6q5o4i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件固有的复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6qr5cp55782&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;The Complexity of software is an essential property, not an accidental one.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Grady Booch 《Object-Oriented Analysis and Design with Applications》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：软件的复杂性是一个基本特征，而不是偶然如此。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6mgh9yeby68m&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Grady Booch在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://niexiaolong.github.io/Object%20Oriented%20Analysis%20and%20Design%20with%20Applications.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Object-Oriented Analysis and Design with Applications&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 中提出这样一个观念，他认为软件的复杂性是固有的，包括问题域的复杂性、管理开发过程的困难性、通过软件可能实现的灵活性与刻画离散系统行为的问题，这4个方面来分析了软件的发展一定伴随着复杂，这是软件工程这本科学所必然伴随的一个特性。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6dph46e0zjom&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Everything, without exception, requires additional energy and order to maintain itself. I knew this in the abstract as the famous second law of thermodynamics, which states that everything is falling apart slowly.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Kevin Kelly 《The Inevitable》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：世间万物都需要额外的能量和秩序来维持自身，无一例外。这就是著名的热力学第二定律，即所有的事务都在缓慢地分崩离析。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6j6b7jgbl58&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Kevin Kelly在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://github.com/niexiaolong/niexiaolong.github.io/blob/master/The-Inevitable-byKevin-Kelly.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;The Inevitable&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 也有提过类似的观点，他认为世间万物都需要额外的能量和秩序来维持自身，所有的事物都在缓慢地分崩离析。没有外部力量的注入事物就会逐渐崩溃，这是世间万物的规律，而非我们哪里做得不对。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6cst5x2a0kgl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件架构治理复杂度&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6dwu5tsphgzs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;为软件系统注入的外力就是我们的软件架构，以及我们未来的每一行代码。软件架构有很多种，从最早的单体架构，到后面的分布式架构、SOA、微服务、FaaS、ServiceMesh等等。所有的软件架构万变不离其宗，都在致力解决软件的复杂性。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6cx2mvy4xqpb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;架构的本质&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6gwy7654vjk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;编程范式指的是程序的编写模式，软件架构发展到今天只出现过3种编程范式( &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;paradigm&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; ),分别是结构化编程，面向对象编程与函数式编程。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;py5ychg6p9j&amp;quot;,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6clflhp3g01l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;结构化编程取消 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/goto%E8%AF%AD%E5%8F%A5/7603004&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;goto&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 移除跳转语句，对程序控制权的直接转移进行了限制和规范&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;py5ychg6p9j&amp;quot;,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev68b3etduxzdg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面向对象编程限制 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;指针&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 的使用，对程序控制权的间接转移进行了限制和规范&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;py5ychg6p9j&amp;quot;,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6h6dhwyeskm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;函数式编程以 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%CE%BB%E6%BC%94%E7%AE%97/8019133&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;λ演算法&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 为核心思想，对程序中的赋值进行了限制和规范&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev64cgq6m2q80f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面向对象的五大设计原则 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://wiwiki.kfd.me/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;S.O.L.I.D&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。依赖倒置限制了模块的依赖顺序、单一职责限制模块的职责范围、接口隔离限制接口的提供形式。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ax6vyysbrw9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件的本质是约束。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;商品的代码不能写在订单域，数据层的方法不能写在业务层。70年的软件发展，并没有告诉我们应该怎么做，而是教会了我们不该做什么。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6kzjjr4v5w1p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;递增的复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6j56bums0yjs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件的复杂性不会凭空消失，并且会逐级递增。针对递增的复杂性有3个观点：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;qxtzs6edkz&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6rkmpixz2yck&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;模糊性创造了复杂，依赖性传播了复杂&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;qxtzs6edkz&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev608viu1qklh5i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性往往不是由单个灾难引起的&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;qxtzs6edkz&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6smwbpcfz5q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们可以容易地说服自己，当前变更带来的一点点复杂性没什么大不了&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6t6yfhw5l84f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;曾经小李跟我抱怨，说这段代码实在是太恶心了，花了很长时间才看懂，并且代码非常僵硬，而正好这个需求需要改动到这里，代码真的就像一坨屎。我问他最后是怎么处理的，他说，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我给它又加了一坨💩&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6zrcxx8yql7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;编程思维论&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6xcmxs0ehf48&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:13.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;战术编程&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev656nma847klv&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;其实小李的这种做法并非是一个个体行为，或许我们在遇到复杂代码时都曾这样苟且过，John教授这种编程方法称之为“战术编程”。战术编程最主要的特点是快，同时具备如下几个特点。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6sdam97uqgk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当前一定是最快的 🚀&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ksxjmtda4bf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不会花费太多时间来寻找最佳设计&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ohpd7bznjw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;每个编程任务都会引入一些复杂度&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev69tsfu70nog7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;重构会减慢当前任务速度，所以保持最快速度&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev66i0ymz1tffl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;@HSFProvider(serviceInterface = AgnDistributeRuleConfigQueryService.class)\npublic class AgnDistributeRuleConfigQueryServiceImpl implements AgnDistributeRuleConfigQueryService {\n\n    @Override\n    public ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt;queryAgnDistributeRuleConfigById(String id) {\n        logger.info(\&amp;quot;queryAgnDistributeRuleConfigById id=\&amp;quot; + id);\n        ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt;result = new ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt;();\n        if(StringUtils.isBlank(id)){\n            result.setSuccess(false);\n            result.setErrorMsg(\&amp;quot;id cannot be blank\&amp;quot;);\n            return result\n        }\n        try {\n            AgnDistributeRuleConfigDto agnDistributeRuleConfigDto = new AgnDistributeRuleConfigDto();\n            AgnDistributeRuleConfig agnDistributeRuleConfig = agnDistributeRuleConfigMapper.selectById(id);\n            if(agnDistributeRuleConfig == null){\n                logger.error(\&amp;quot;agnDistributeRuleConfig is null\&amp;quot;);\n                result.setSuccess(false);\n                result.setErrorMsg(\&amp;quot;agnDistributeRuleConfig is null\&amp;quot;);\n                return result\n            }\n            this.filterDynamicRule(agnDistributeRuleConfig);\n            BeanUtils.copyProperties(agnDistributeRuleConfig, agnDistributeRuleConfigDto);\n            result.setSuccess(true);\n            result.setTotal(1);\n            result.setValues(agnDistributeRuleConfigDto);\n        } catch (Exception e) {\n            logger.error(\&amp;quot;queryAgnDistributeRuleConfigById error,\&amp;quot;, e);\n            result.setSuccess(false);\n            result.setErrorMsg(e.getMessage());\n        }\n        return result;\n    }\n} \n&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6cq8zvilipkc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们看上面这段代码，是一段查询分发规则的业务逻辑。虽然功能能够work，但不规范的地方其实非常多&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6q8vn485pumk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Facade层定义全部逻辑 - 未做结构分层&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ue2b9o98rg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;业务与技术未做分离 - 耦合接口信息与业务数据&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6nzjofdeeldd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Try catch 满天飞 - 缺少统一异常处理机制&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev74gi53jne3jp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;没有规范化的日志格式 - 日志格式混乱&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pi7ayouu6ia&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;但不可否认，他一定是当前最快的。这就是战术设计的特点之一，永远按当前最快速交付的方案进行推进，甚至很多组织鼓励这种工作方式，为了使功能更快运作，只注重短期收益而忽略长期价值。&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7f8lpnwkq9f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:13.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;战术龙卷风&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev73c1gttpjn8u&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/39e3d84f-e42f-4533-b5a8-2a9e8ad603cf.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:293.49072356215214,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;39e3d84f-e42f-4533-b5a8-2a9e8ad603cf&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7l3hu5tyvqi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Almost every software development organization has at least one developer who takes tactical programming to the extreme: a tactical tornado.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：几乎每个软件开发组织都有至少一个将战术编程发挥到极致的开发人员：战术龙卷风。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7lkx0glhuwf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;将战术编程发挥到极致的人，叫战术龙卷风。战术龙卷风以腐化系统为代价换取当前最高效的解决方案（或许他自己并未觉得）。战术龙卷风也有如下几个特点：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;y3lk86wbc9r&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7zxvkvvbq8k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;是一位多产的程序员，没人比龙卷风更快完成任务&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;y3lk86wbc9r&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev72vh6qu1lyds&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;总能留下龙卷风后毁灭的痕迹🌪留给后人去清理&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;y3lk86wbc9r&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev773k4xf6w1n4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;是真的很卷&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7w7fkq7iuyzd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;一些组织甚至会将战术龙卷风视为英雄，为什么能干得又多又快？&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;purple&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;因为他将成本放到了未来。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件工程最大的成本在于维护，我们每一次代码的改动，都应该是对历史代码的一次整理，而非单一的功能堆积。龙卷风能赢得现在，但终将失去未来，而这个失败的未来或许需要全团队与他一起买单。&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev74j326g8lvia&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:13.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;战略编程&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7qz1owicwzf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/514a1d2b-9706-44db-b803-fb96f303a95c.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:522,&amp;quot;height&amp;quot;:314,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;514a1d2b-9706-44db-b803-fb96f303a95c&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev788ejshywohk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;John教授提出与战术编程相对的是战略编程，战略编程更注重长期价值，不满足于功能work，致力于制作出色的设计，以满足对未来扩展的诉求（注意，不要过度）。战略设计有如下4个特点&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7cgfh20h7a2j&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;工作代码远远不够&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7454lvtwc8vn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;引入不必要的复杂度不可接受&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7gx4pfjqh4tj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不断对系统设计进行小幅改进&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7ep1mbwouiqi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;投资心态（每位工程师都需要对良好的设计进行连续的少量投资 10~20%）&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pxpt67car1l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;John Ousterhout教授在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A Philosophy of Software Design&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 书中提到了战略设计与战术设计的总成本投入。随着时间的流逝，战略设计可以有效控制软件成本，但战术设计会随着时间的推移线性递增。这与Martin Fowler在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://martinfowler.com/books/eaa.html&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Patterns of Enterprise Application Architecture&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 这本书中所提的关于数据驱动与领域驱动关于复杂度的治理是同样的含义，要致力于长期的价值投资。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7sxbr5qkctn8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;系统的困境与演进&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pdbiz6nz6n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/92a27166-0834-4075-b8a6-634890c530d0.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:323.5,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;92a27166-0834-4075-b8a6-634890c530d0&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pxg1sn4sxt&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;没有系统是天然复杂的，为了快速完成任务不断引入新的复杂度至系统逐渐腐化，无限增长与无限传递的复杂度让软件需求越来越难“快速完成”。当有一天我们意识到系统的复杂性时再试图通过战略设计进行软件的迭代，你会发现举步维艰，一处很小的修改需要投入大量的基建修复，最终我们不得不向成本低头，不断再通过战术设计无限的苟且。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7airfi37ebvl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A condition that is often incorrectly labeled software maintenance. To be more precise, it is maintenance when we correct errors; it is evolution when we respond to changing requirements; it is preservation when we continue to use extraordinary means to keep an ancient and decaying piece of software in operation. Unfortunately, reality suggests that an inordinate percent- age of software development resources are spent on software preservation.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Grady Booch 《Object-Oriented Analysis and Design with Applications》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：我们总是说我们需要“维护”这些老系统。而准确的说，在软件发展过程里，只有我们修正错误时，才是维护；在我们应对改变的需求时，这是演进；&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;red&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当我们使用一些极端的手段来保持古老而陈腐的软件继续工作时，这是保护（苟且）。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;事实证明我们更多的时间是在应对最后一种状况。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7exs8tb5elul&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如同Grady Booch在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://niexiaolong.github.io/Object%20Oriented%20Analysis%20and%20Design%20with%20Applications.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Object-Oriented Analysis and Design with Applications&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 中所提到的观点，当我们使用一些极端的手段来保持古老而陈腐的软件继续工作时，这确实是一种苟且。我们小心翼翼、集成测试、灰度发布、及时回滚等等，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;purple&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们没有在“维护”他们，而是以一种丑陋的方式让这些丑陋的代码继续能够成功苟且下去。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当代码变成意大利面条时，将几乎是不可能修复，成本将成指数倍增长，并且似乎我们的系统已经存在这样的代码，并且可能还在持续增加中。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/de605a4c-17f1-4c3a-9eff-571f62287bd0.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:151.31451612903226,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;de605a4c-17f1-4c3a-9eff-571f62287bd0&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7fik8q7by825&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;架构伪论&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7xv3h6g9ia9l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在架构设计中，总有一些软件工程师所坚信的诗和远方，但到不了的乌托邦不一定就是遥不可及的美好圣地，实则也可能是对系统无益甚至有害的架构设计。这里列举其中2条可能存在的架构伪论。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7tp8wlyi2d6q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;好的代码自解释&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7zim2cxquvb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Comments do not make up for bad code&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Martin Fowler 《Clean Code》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：注释不是对劣质代码的补救&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7v0tn2yv8wx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Martin Fowler在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/9226259&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Clean Code&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 书中提到注释不是对劣质代码的补救，以前我也一直坚信如果代码足够好是不需要注释的。但实则这是一个伪命题，John教授这么评价它 &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;‘good code is self-documenting’ is a delicious myth&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7txjbgggewhi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;/**\n * 批量查询客户信息\n */\npublic List&amp;lt;CustomerVO&amp;gt;queryCustomerList(){\n    // 查询参数准备\n    UserInfo userInfo = context.getLoginContext().getUserInfo();\n    if(userInfo == null || StringUtils.isBlank(userInfo.getUserId())){\n        return Collections.emptyList();\n    }\n    LoginDTO loginDTO = userInfoConvertor.convert(userInfo);\n    // 查询客户信息\n    List&amp;lt;CustomerSearchVO&amp;gt;customerSearchVOList = customerRemoteQueryService.queryCustomerList(loginDTO);\n    Iterator&amp;lt;CustomerSearchVO&amp;gt;it = customerSearchVOList.iterator();\n    // 排除不合规客户\n    while(it.hasNext()){\n        CustomerSearchVO customerSearchVO = it.next();\n        if(isInBlackList(customerSearchVO) || isLowQuality(customerSearchVO)){\n            it.remove();\n        }\n    }\n    // 补充客户其他属性信息\n    batchFillCustomerPositionInfo(customerSearchVOList);\n    batchFillCustomerAddressInfo(customerSearchVOList);\n    return customerSearchVOList;\n}\n&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev71jgooade5k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这段代码我们可以很轻松的在5秒内看明白这个函数是做什么的，并且知道它内部的一些业务规则。无限的私有方法封装会让代码链路过深，无限类的拆解会造成更多网状依赖，至少有3点内容，让我们绝不能抛弃注释。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;tkbq7havdqg&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7msu6xue5lua&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;无法精准命名&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;命名的含义是抽象实体隐藏细节，我们不能在一个名字上赋予它全部的信息，而必要的注释可以完美的进行辅佐。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;tkbq7havdqg&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev75f2113o6rn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;设计思想的阐述&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;代码只能实现设计不能阐述设计，这也是为什么一些复杂的架构设计我们需要文档的支撑而非代码的‘自解释’，在文档与代码之间的空隙，由注释来填补。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;tkbq7havdqg&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7e4gc73e6js&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;母语的力量&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这点尤其适合我们中国人，有时并不是因为注释少代码多，所以我们下意识会首先看代码。而是我们几十年感受的文化，让我们对中文与ABC具有完全不一样的感观。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7dn2gu4m1ya&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;永远追求最优雅&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7ickm2zw7e9n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;雷布斯曾自夸自己写的代码像诗一样优雅，追求优雅的代码应该是每个软件工程师的心中的圣地。但有时存在一些不优雅，存在一些‘看似不合理’并不代表就不对，反而有时在追求更优雅的路上我们持续跑偏。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7mvi970vo97p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;The goal of software architecture is to minimize the human resources required&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;to build and maintain the required system.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Robert C.Martin 《Clean Architecture》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev78wzz8lekngo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Robert C.Martin在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Clean Architecture&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 一书中提到了架构终极目标，用最小的人力成本来满足构建和维护该系统的需求。架构始终是我们解决复杂度的一个工具，如果当前系统并不复杂，我们不需要为了所谓的优雅去过分改造与优化它，持续将成本置在一个较低水位，就是软件最好的解决办法。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7gdgq0pdvwai&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;业务简单的系统不应用DDD架构，弱交互场景也无需进行前后端分离，哪怕是邓总设计师在规划新中国的发展上，也是制定了一套‘中国特色社会主义’制度。不要盲从一些教条的观念，选择适合自己的，控制在可控制范围内，既不过度也不缺失。毕竟没有绝对的优雅，甚至没有绝对的正确。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8ntzcpovtrqb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;写在最后&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8vu9akfqe9lh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;很多人认为做业务开发显得没那么有挑战性，但其实正好相反。最难解决的bug是无法重现的bug，最难处理的问题域是不确定性的问题域。业务往往是最复杂的，面向不确定性设计才是最复杂的设计。软件工程学科最难的事情是抽象，因为它没有标准、没有方法、甚至没有对错。如何在软件固有的复杂性上找到一条既不过度也不缺失的路，是软件工程师的终身课题，或许永远也无法达到，或许我们已经在路上了。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8dg6cr0xdfg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;参阅书籍&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《A Philosophy of Software Design》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8p4saka3kcu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev85ler5xrx1cb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://niexiaolong.github.io/Object%20Oriented%20Analysis%20and%20Design%20with%20Applications.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Object Oriented Analysis and Design with Applications》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8dke638wrvm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev80qsat11csrt9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/9226259&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Clean Code》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8t3ko03y2jmn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8mxoezywzcag&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://detail.tmall.com/item.htm?id=654392764249&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Clean Architecture》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8hi8i1pwu2tb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8rxkupc83kb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://martinfowler.com/books/eaa.html&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Patterns of Enterprise Application Architecture》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]&quot;&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;Almost every software development organization has at least one developer who takes tactical programming to the extreme: a tactical tornado.&lt;/span&gt;&lt;br data-path=&quot;69,1&quot;/&gt;&lt;span&gt;-- John Ousterhout 《A Philosophy of Software Design》&lt;/span&gt;&lt;br data-path=&quot;69,3&quot;/&gt;&lt;span&gt;译：几乎每个软件开发组织都有至少一个将战术编程发挥到极致的开发人员：战术龙卷风。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;将战术编程发挥到极致的人，叫战术龙卷风。战术龙卷风以腐化系统为代价换取当前最高效的解决方案（或许他自己并未觉得）。战术龙卷风也有如下几个特点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;是一位多产的程序员，没人比龙卷风更快完成任务&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;总能留下龙卷风后毁灭的痕迹🌪留给后人去清理&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;是真的很卷&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一些组织甚至会将战术龙卷风视为英雄，为什么能干得又多又快？因为他将成本放到了未来。软件工程最大的成本在于维护，我们每一次代码的改动，都应该是对历史代码的一次整理，而非单一的功能堆积。龙卷风能赢得现在，但终将失去未来，而这个失败的未来或许需要全团队与他一起买单。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;战略编程&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6015325670498084&quot; data-type=&quot;png&quot; data-w=&quot;522&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKO6J4icpqw3T5V0rnaXtQ73hWW8Zpyeqj1RUbuaRuP6nFrVP0MP1MFXMGF2f3AL2UbekliaUT1tmCg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;John教授提出与战术编程相对的是战略编程，战略编程更注重长期价值，不满足于功能work，致力于制作出色的设计，以满足对未来扩展的诉求（注意，不要过度）。战略设计有如下4个特点&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;工作代码远远不够&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;引入不必要的复杂度不可接受&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不断对系统设计进行小幅改进&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;投资心态（每位工程师都需要对良好的设计进行连续的少量投资 10~20%）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;John Ousterhout教授在 A Philosophy of Software Design 书中提到了战略设计与战术设计的总成本投入。随着时间的流逝，战略设计可以有效控制软件成本，但战术设计会随着时间的推移线性递增。这与Martin Fowler在 Patterns of Enterprise Application Architecture 这本书中所提的关于数据驱动与领域驱动关于复杂度的治理是同样的含义，要致力于长期的价值投资。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;4  系统的困境与演进&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5032362459546925&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1236&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKO6J4icpqw3T5V0rnaXtQ73IMlEFECw05eicIqmA5hURF9c8KNTNCPuM6bfibSS3CAC7Bu3iaj9OO3dA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{&amp;quot;copyFrom&amp;quot;:1516441855},[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8alhhtfk7ak&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;读 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A Philosophy of Software Design&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 有感，软件设计与架构复杂度，你是战术龙卷风吗？&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4uh7ydyiw1pl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;前言&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4kr4q6lgjc4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;有一天，一个医生和一个土木工程师在一起争论“谁是世界上最古老的职业”。医生说：“上帝用亚当的肋骨造出了夏娃，这是历史上第一次外科手术，所以最古老的职业应该是医生”，土木工程师说：“在创世纪之前，上帝从混沌中创造了天堂与人间，这是更早之前的一次土木作业，所以最古老的职业应该是土木工程”。这时软件工程师拖着键盘走出来说，“那你认为，是谁创造了那片混沌？”&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4tzx82sspdx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;建筑师不会轻易给100层的高楼增加一个地下室，但我们却经常在干这样的事，并且总有人会对你说，“这个需求很简单”。到土里埋个地雷，这确实不复杂，但我们往往面临的真实场景其实是：“在这片雷区里加一个雷”，而雷区里哪里有雷，任何人都不知道 🤷🏻‍♂️。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev4kra233ota1k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;什么是复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5o3abiu1w2xg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们一直在说系统很复杂，那到底什么是复杂性？关于复杂的定义有很多种，其中比较有代表的是&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://en.wikipedia.org/wiki/Thomas_J._McCabe,_Sr.&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Thomas J. McCabe&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 在1976提出的理性派的复杂性度量，与&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://en.wikipedia.org/wiki/John_Ousterhout&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;John Ousterhout&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 教授提出的感性派的复杂性认知。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5udp5nzf8sqc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;理性度量&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5oj9cgi3y6vc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/4ad8acd3-86a1-4da8-92b6-3364dc61083f.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:288.95145631067965,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;4ad8acd3-86a1-4da8-92b6-3364dc61083f&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5cnylxcjsra&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性并不是什么新概念，早在上世纪70年代，软件就已经极其复杂，开发与维护的成本都非常高。1976年McCabe&amp;amp;Associates公司开始对软件进行结构测试，并提出了&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://github.com/niexiaolong/niexiaolong.github.io/blob/master/mccabe.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;McCabe Cyclomatic Complexity Metric&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，我们也称之为McCabe圈复杂度。它通过多个维度来度量软件的复杂度，从而判断软件当前的开发/维护成本。&amp;quot;]]],[&amp;quot;table&amp;quot;,{&amp;quot;colsWidth&amp;quot;:[162,162,162,162],&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5nzq6lx6kgfp&amp;quot;},[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;代码状况&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;测性成本&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.06)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度1 - 10&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;清晰/结构化&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可测性高&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本低&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度10 - 20&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可测性中&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本中&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度20 - 30&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;非常复杂&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可测性低&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本高&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;圈复杂度30&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不可读&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不可测&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;highlight&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.03)&amp;quot;,&amp;quot;sz&amp;quot;:10.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;维护成本非常高&amp;quot;]]]]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5oygey7dzdbd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5sx4leviy3p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;感性认知&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5ph6ou1b1sq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂度高的代码一定不是好代码，但复杂度低的也不一定就是好代码。John Ousterhout教授认为软件的复杂性相对理性的分析，可能更偏感性的认知。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5dt89mvqdg7c&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Complexity is anything that makes software hard to understand or to modify&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：所谓复杂性，就是任何使得软件难于理解和修改的因素。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev57s8csqqr62r&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;50年后的今天，John Ousterhout教授在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A Philosophy of Software Design&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 书中提到了一个非常主观的见解，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性就是任何使得软件难于理解和修改的因素。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev53cq2puw6yjz&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;模糊性与依赖性是引起复杂性的2个主要因素，模糊性产生了最直接的复杂度，让我们很难读懂代码真正想表达的含义，无法读懂这些代码，也就意味着我们更难去改变它。而依赖性又导致了复杂性不断传递，不断外溢的复杂性最终导致系统的无限腐化，一旦代码变成意大利面条，几乎不可能修复，成本将成指数倍增长。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5xy1cnfmb3lk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性的表现形式&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5dxloidunlvq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂的系统往往也有一些非常明显的特征，John教授将它抽象为变更放大（Change amplification）、认知负荷（Cognitive load）与未知的未知（Unknown unknowns）这3类。当我们的系统出现这3个特征，说明我们的系统已经开始逐渐变得复杂了。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5awvknk7gpf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;症状1-变更放大&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev50oj3hmznlhnl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Change amplification: a seemingly simple change requires code modifications in many different places.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：看似简单的变更需要在许多不同地方进行代码修改。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev51og07el3av4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;变更放大（Change amplification）指得是看似简单的变更需要在许多不同地方进行代码修改。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;比较典型的代表是Ctrl-CV式代码开发，领域模型缺少内聚与收拢，当需要对某段业务进行调整时，需要改动多个模块以适应业务的发展。&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5kbjtgaxcjq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;/**\n * 销售捡入客户\n */\npublic void pick(String salesId, String customerId) {\n    // 查询客户总数\n    long customerCnt = customerDao.findCustomerCount(salesId);\n    // 查询销售库容\n    long capacity = capacityDao.findSalesCapacity(salesId);\n    // 判断是否超额\n    if(customerCnt &amp;gt;= capacity) {\n        throws new BizException(\&amp;quot;capacity over limit\&amp;quot;);\n    }\n    // 代码省略 do customer pick\n}\n&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5083cr1cqcla&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在CRM领域，销售捡入客户时需要进行库容判断，这段代码也确实可以满足需求。但随着业务的发展，签约的客户要调整为不占库容。而客户除了销售捡入，还包括主管分发、leads分发、手工录入、数据采买等多个场景，如果没对库容域做模型的收拢，一个简单的逻辑调整，就需要我们在多个场景做适配才能满足诉求。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5prjgfwwwbs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;症状2-认知负荷&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5cqqkc1utmw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Cognitive load: how much a developer needs to know in order to complete a task.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：开发人员需要多少知识才能完成一项任务。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5oddrjmv0ej&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;认知负荷（Cognitive load）是指开发人员需要多少知识才能完成一项任务。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;使用功能性框架时，我们希望它操作简单，部署复杂系统时，我们希望它架构清晰，其实都是降低一项任务所需的成本。盲目的追求高端技术，设计复杂系统，增加学习与理解成本都属于本末倒置的一种。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/f91838dc-60ce-4e07-89f1-3af1e98556c4.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:429.1766666666667,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;f91838dc-60ce-4e07-89f1-3af1e98556c4&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5x8qvc8g3yo8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5qydo8at72jo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TMF是整个星环的支柱，也是业务中台面向可复用可扩展架构的核心。但TMF太过复杂，认知与学习成本非常高，我们日常中所面临的一些扩展诉求99%（或者应该说100%）都不适合TMF，可能通过一些设计模式或者就是一些if else，可能更适合解决我们的问题。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5yl5sm7o34ti&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;除此之外，还包括一些简单搜索场景却用到了blink等流式引擎，简单后台系统通过DDD进行构建，几个商品发布的状态机转换用上了规则引擎等等，都属于认知负荷复杂度的一种。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev55wn9i85v2vn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;症状3-未知的未知&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5caivk21vpdh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Unknown unknowns: it is not obvious which pieces of code must be modified to complete a task&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：必须修改哪些代码才能完成任务。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5p2gmps49uff&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/37c1670e-8aa3-4de7-a200-cfd7f8824542.gif&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;show&amp;quot;,&amp;quot;width&amp;quot;:380,&amp;quot;height&amp;quot;:213,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;37c1670e-8aa3-4de7-a200-cfd7f8824542&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5df2992jtt5n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;未知的未知（Unknown unknowns）是指必须修改哪些代码才能完成任务&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，或者说开发人员必须获得哪些信息才能成功地执行任务。这一项也是John Ousterhout教授认为复杂性中最糟糕的一个表现形式。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5bcnq3h71l2c&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当你维护一个有20年历史的项目时，这种问题的出来相对而言就没那么意外。由于代码的混乱与文档的缺失，导致你无法掌控一个500万行代码的应用，并且代码本身也没有明显表现出它们应该要阐述的内容。这时“未知的未知”出现了，你不知道改动的这行代码是否能让程序正常运转，也不知道这行代码的改动是否又会引发新的问题。这时候我们发现，那些“上帝类”真的就只有上帝能拯救了。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5zyl1x3ahyj8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;为什么会产生复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5trcaphalml&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;那软件为什么越来越复杂，是不是减少一些犯错就能避免一场浩劫呢？回顾那些复杂的系统，我们可以找到很多因素导致系统腐化。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev5ez6v7ehcis8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;想简单图省事，没有及时治理不合理的内容&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev55b7z1b6pfrd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;缺少匠心追求，对肮脏代码视而不见&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev57e1ye91any2&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;技术能力不够，无法应对复杂系统&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;rzwxivj355&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev679t1pue2ebf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;交接过渡缺失，三无产品几乎无法维护&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6f3kpfze07kf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;除了上述内容外，还可以想到很多理由。但我们发现他们好像有一个共同的指向点 - &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件工程师&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，似乎所有复杂的源头就是软件工程师的不合格导致，所以其实一些罪恶的根因是我们自己？&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6h4qvxxbfu1b&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;统一的中国与分裂的欧洲&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6its8960j1us&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/7ed6a6f1-5081-4088-bdd4-2c68a0443fd7.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:360.9449715370019,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;7ed6a6f1-5081-4088-bdd4-2c68a0443fd7&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev66o506le2g36&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6uv0mp0kj1sq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;欧洲大陆面积大体与中国相当，但为什么欧洲是分裂的，而中国是统一的。有人说他们文化不一样，也有人说他们语言不通是主要原因，也有人说他们缺一个秦始皇😄。其实我们回顾欧洲的历史，欧洲还真不缺一个大一统的帝国。罗马帝国曾经让地中海成为自己的内海，拿破仑鼎盛时期掌管着1300万平方公里的领地。欧洲也曾出现过伟大的帝国，但都未走向统一。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6blia7o6yoy9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们再观察地图，其实除了中国、俄罗斯以外，全世界99%的国家都是小国。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;分裂才是常态，统一才不正常&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。马老师也曾说过，成功都有偶然性只有失败才存在必然。只有极少国家才实现了大一统，所以我们不应该问为什么欧洲是分裂的，而应该问为什么中国是统一的。类比到我们的软件也同样如此，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂才是常态，不复杂才不正常。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6regc6q5o4i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件固有的复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6qr5cp55782&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;The Complexity of software is an essential property, not an accidental one.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Grady Booch 《Object-Oriented Analysis and Design with Applications》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：软件的复杂性是一个基本特征，而不是偶然如此。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6mgh9yeby68m&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Grady Booch在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://niexiaolong.github.io/Object%20Oriented%20Analysis%20and%20Design%20with%20Applications.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Object-Oriented Analysis and Design with Applications&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 中提出这样一个观念，他认为软件的复杂性是固有的，包括问题域的复杂性、管理开发过程的困难性、通过软件可能实现的灵活性与刻画离散系统行为的问题，这4个方面来分析了软件的发展一定伴随着复杂，这是软件工程这本科学所必然伴随的一个特性。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6dph46e0zjom&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Everything, without exception, requires additional energy and order to maintain itself. I knew this in the abstract as the famous second law of thermodynamics, which states that everything is falling apart slowly.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Kevin Kelly 《The Inevitable》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：世间万物都需要额外的能量和秩序来维持自身，无一例外。这就是著名的热力学第二定律，即所有的事务都在缓慢地分崩离析。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6j6b7jgbl58&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Kevin Kelly在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://github.com/niexiaolong/niexiaolong.github.io/blob/master/The-Inevitable-byKevin-Kelly.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;The Inevitable&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 也有提过类似的观点，他认为世间万物都需要额外的能量和秩序来维持自身，所有的事物都在缓慢地分崩离析。没有外部力量的注入事物就会逐渐崩溃，这是世间万物的规律，而非我们哪里做得不对。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6cst5x2a0kgl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件架构治理复杂度&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6dwu5tsphgzs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;为软件系统注入的外力就是我们的软件架构，以及我们未来的每一行代码。软件架构有很多种，从最早的单体架构，到后面的分布式架构、SOA、微服务、FaaS、ServiceMesh等等。所有的软件架构万变不离其宗，都在致力解决软件的复杂性。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6cx2mvy4xqpb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;架构的本质&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6gwy7654vjk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;编程范式指的是程序的编写模式，软件架构发展到今天只出现过3种编程范式( &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;paradigm&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; ),分别是结构化编程，面向对象编程与函数式编程。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;py5ychg6p9j&amp;quot;,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6clflhp3g01l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;结构化编程取消 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/goto%E8%AF%AD%E5%8F%A5/7603004&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;goto&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 移除跳转语句，对程序控制权的直接转移进行了限制和规范&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;py5ychg6p9j&amp;quot;,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev68b3etduxzdg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面向对象编程限制 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;指针&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 的使用，对程序控制权的间接转移进行了限制和规范&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;py5ychg6p9j&amp;quot;,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6h6dhwyeskm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;函数式编程以 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%CE%BB%E6%BC%94%E7%AE%97/8019133&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;λ演算法&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 为核心思想，对程序中的赋值进行了限制和规范&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev64cgq6m2q80f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;面向对象的五大设计原则 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://wiwiki.kfd.me/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;S.O.L.I.D&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。依赖倒置限制了模块的依赖顺序、单一职责限制模块的职责范围、接口隔离限制接口的提供形式。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ax6vyysbrw9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件的本质是约束。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;商品的代码不能写在订单域，数据层的方法不能写在业务层。70年的软件发展，并没有告诉我们应该怎么做，而是教会了我们不该做什么。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6kzjjr4v5w1p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;递增的复杂性&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6j56bums0yjs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件的复杂性不会凭空消失，并且会逐级递增。针对递增的复杂性有3个观点：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;qxtzs6edkz&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6rkmpixz2yck&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;模糊性创造了复杂，依赖性传播了复杂&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;qxtzs6edkz&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev608viu1qklh5i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;复杂性往往不是由单个灾难引起的&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;qxtzs6edkz&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6smwbpcfz5q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们可以容易地说服自己，当前变更带来的一点点复杂性没什么大不了&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6t6yfhw5l84f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;曾经小李跟我抱怨，说这段代码实在是太恶心了，花了很长时间才看懂，并且代码非常僵硬，而正好这个需求需要改动到这里，代码真的就像一坨屎。我问他最后是怎么处理的，他说，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我给它又加了一坨💩&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6zrcxx8yql7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;编程思维论&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6xcmxs0ehf48&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:13.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;战术编程&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev656nma847klv&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;其实小李的这种做法并非是一个个体行为，或许我们在遇到复杂代码时都曾这样苟且过，John教授这种编程方法称之为“战术编程”。战术编程最主要的特点是快，同时具备如下几个特点。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6sdam97uqgk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当前一定是最快的 🚀&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ksxjmtda4bf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不会花费太多时间来寻找最佳设计&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ohpd7bznjw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;每个编程任务都会引入一些复杂度&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;g31nas08yrl&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev69tsfu70nog7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;重构会减慢当前任务速度，所以保持最快速度&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev66i0ymz1tffl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;@HSFProvider(serviceInterface = AgnDistributeRuleConfigQueryService.class)\npublic class AgnDistributeRuleConfigQueryServiceImpl implements AgnDistributeRuleConfigQueryService {\n\n    @Override\n    public ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt;queryAgnDistributeRuleConfigById(String id) {\n        logger.info(\&amp;quot;queryAgnDistributeRuleConfigById id=\&amp;quot; + id);\n        ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt;result = new ResultModel&amp;lt;AgnDistributeRuleConfigDto&amp;gt;();\n        if(StringUtils.isBlank(id)){\n            result.setSuccess(false);\n            result.setErrorMsg(\&amp;quot;id cannot be blank\&amp;quot;);\n            return result\n        }\n        try {\n            AgnDistributeRuleConfigDto agnDistributeRuleConfigDto = new AgnDistributeRuleConfigDto();\n            AgnDistributeRuleConfig agnDistributeRuleConfig = agnDistributeRuleConfigMapper.selectById(id);\n            if(agnDistributeRuleConfig == null){\n                logger.error(\&amp;quot;agnDistributeRuleConfig is null\&amp;quot;);\n                result.setSuccess(false);\n                result.setErrorMsg(\&amp;quot;agnDistributeRuleConfig is null\&amp;quot;);\n                return result\n            }\n            this.filterDynamicRule(agnDistributeRuleConfig);\n            BeanUtils.copyProperties(agnDistributeRuleConfig, agnDistributeRuleConfigDto);\n            result.setSuccess(true);\n            result.setTotal(1);\n            result.setValues(agnDistributeRuleConfigDto);\n        } catch (Exception e) {\n            logger.error(\&amp;quot;queryAgnDistributeRuleConfigById error,\&amp;quot;, e);\n            result.setSuccess(false);\n            result.setErrorMsg(e.getMessage());\n        }\n        return result;\n    }\n} \n&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6cq8zvilipkc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们看上面这段代码，是一段查询分发规则的业务逻辑。虽然功能能够work，但不规范的地方其实非常多&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6q8vn485pumk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Facade层定义全部逻辑 - 未做结构分层&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6ue2b9o98rg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;业务与技术未做分离 - 耦合接口信息与业务数据&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev6nzjofdeeldd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Try catch 满天飞 - 缺少统一异常处理机制&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;k0xeuqo7gfd&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev74gi53jne3jp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;没有规范化的日志格式 - 日志格式混乱&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pi7ayouu6ia&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;但不可否认，他一定是当前最快的。这就是战术设计的特点之一，永远按当前最快速交付的方案进行推进，甚至很多组织鼓励这种工作方式，为了使功能更快运作，只注重短期收益而忽略长期价值。&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7f8lpnwkq9f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:13.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;战术龙卷风&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev73c1gttpjn8u&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/39e3d84f-e42f-4533-b5a8-2a9e8ad603cf.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:293.49072356215214,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;39e3d84f-e42f-4533-b5a8-2a9e8ad603cf&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7l3hu5tyvqi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Almost every software development organization has at least one developer who takes tactical programming to the extreme: a tactical tornado.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- John Ousterhout 《A Philosophy of Software Design》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：几乎每个软件开发组织都有至少一个将战术编程发挥到极致的开发人员：战术龙卷风。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7lkx0glhuwf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;将战术编程发挥到极致的人，叫战术龙卷风。战术龙卷风以腐化系统为代价换取当前最高效的解决方案（或许他自己并未觉得）。战术龙卷风也有如下几个特点：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;y3lk86wbc9r&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7zxvkvvbq8k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;是一位多产的程序员，没人比龙卷风更快完成任务&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;y3lk86wbc9r&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev72vh6qu1lyds&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;总能留下龙卷风后毁灭的痕迹🌪留给后人去清理&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;y3lk86wbc9r&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev773k4xf6w1n4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;是真的很卷&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7w7fkq7iuyzd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;一些组织甚至会将战术龙卷风视为英雄，为什么能干得又多又快？&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;purple&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;因为他将成本放到了未来。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;软件工程最大的成本在于维护，我们每一次代码的改动，都应该是对历史代码的一次整理，而非单一的功能堆积。龙卷风能赢得现在，但终将失去未来，而这个失败的未来或许需要全团队与他一起买单。&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev74j326g8lvia&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:13.5,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;战略编程&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7qz1owicwzf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/514a1d2b-9706-44db-b803-fb96f303a95c.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:522,&amp;quot;height&amp;quot;:314,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;514a1d2b-9706-44db-b803-fb96f303a95c&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev788ejshywohk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;John教授提出与战术编程相对的是战略编程，战略编程更注重长期价值，不满足于功能work，致力于制作出色的设计，以满足对未来扩展的诉求（注意，不要过度）。战略设计有如下4个特点&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7cgfh20h7a2j&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;工作代码远远不够&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7454lvtwc8vn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;引入不必要的复杂度不可接受&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7gx4pfjqh4tj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不断对系统设计进行小幅改进&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;dxhngt5ijno&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7ep1mbwouiqi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;投资心态（每位工程师都需要对良好的设计进行连续的少量投资 10~20%）&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pxpt67car1l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;John Ousterhout教授在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A Philosophy of Software Design&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 书中提到了战略设计与战术设计的总成本投入。随着时间的流逝，战略设计可以有效控制软件成本，但战术设计会随着时间的推移线性递增。这与Martin Fowler在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://martinfowler.com/books/eaa.html&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Patterns of Enterprise Application Architecture&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 这本书中所提的关于数据驱动与领域驱动关于复杂度的治理是同样的含义，要致力于长期的价值投资。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7sxbr5qkctn8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;系统的困境与演进&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pdbiz6nz6n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/92a27166-0834-4075-b8a6-634890c530d0.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:323.5,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;92a27166-0834-4075-b8a6-634890c530d0&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7pxg1sn4sxt&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;没有系统是天然复杂的，为了快速完成任务不断引入新的复杂度至系统逐渐腐化，无限增长与无限传递的复杂度让软件需求越来越难“快速完成”。当有一天我们意识到系统的复杂性时再试图通过战略设计进行软件的迭代，你会发现举步维艰，一处很小的修改需要投入大量的基建修复，最终我们不得不向成本低头，不断再通过战术设计无限的苟且。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7airfi37ebvl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;A condition that is often incorrectly labeled software maintenance. To be more precise, it is maintenance when we correct errors; it is evolution when we respond to changing requirements; it is preservation when we continue to use extraordinary means to keep an ancient and decaying piece of software in operation. Unfortunately, reality suggests that an inordinate percent- age of software development resources are spent on software preservation.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Grady Booch 《Object-Oriented Analysis and Design with Applications》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：我们总是说我们需要“维护”这些老系统。而准确的说，在软件发展过程里，只有我们修正错误时，才是维护；在我们应对改变的需求时，这是演进；&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;red&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当我们使用一些极端的手段来保持古老而陈腐的软件继续工作时，这是保护（苟且）。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;事实证明我们更多的时间是在应对最后一种状况。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7exs8tb5elul&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如同Grady Booch在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://niexiaolong.github.io/Object%20Oriented%20Analysis%20and%20Design%20with%20Applications.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Object-Oriented Analysis and Design with Applications&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 中所提到的观点，当我们使用一些极端的手段来保持古老而陈腐的软件继续工作时，这确实是一种苟且。我们小心翼翼、集成测试、灰度发布、及时回滚等等，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;color&amp;quot;:&amp;quot;purple&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们没有在“维护”他们，而是以一种丑陋的方式让这些丑陋的代码继续能够成功苟且下去。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当代码变成意大利面条时，将几乎是不可能修复，成本将成指数倍增长，并且似乎我们的系统已经存在这样的代码，并且可能还在持续增加中。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MeYVOLb6j6Lznpz2/img/de605a4c-17f1-4c3a-9eff-571f62287bd0.png&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:151.31451612903226,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;de605a4c-17f1-4c3a-9eff-571f62287bd0&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7fik8q7by825&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;架构伪论&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7xv3h6g9ia9l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在架构设计中，总有一些软件工程师所坚信的诗和远方，但到不了的乌托邦不一定就是遥不可及的美好圣地，实则也可能是对系统无益甚至有害的架构设计。这里列举其中2条可能存在的架构伪论。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7tp8wlyi2d6q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;好的代码自解释&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7zim2cxquvb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Comments do not make up for bad code&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Martin Fowler 《Clean Code》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：注释不是对劣质代码的补救&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7v0tn2yv8wx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Martin Fowler在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/9226259&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Clean Code&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 书中提到注释不是对劣质代码的补救，以前我也一直坚信如果代码足够好是不需要注释的。但实则这是一个伪命题，John教授这么评价它 &amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;‘good code is self-documenting’ is a delicious myth&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;。&amp;quot;]]],[&amp;quot;code&amp;quot;,{&amp;quot;syntax&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;theme&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7txjbgggewhi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;/**\n * 批量查询客户信息\n */\npublic List&amp;lt;CustomerVO&amp;gt;queryCustomerList(){\n    // 查询参数准备\n    UserInfo userInfo = context.getLoginContext().getUserInfo();\n    if(userInfo == null || StringUtils.isBlank(userInfo.getUserId())){\n        return Collections.emptyList();\n    }\n    LoginDTO loginDTO = userInfoConvertor.convert(userInfo);\n    // 查询客户信息\n    List&amp;lt;CustomerSearchVO&amp;gt;customerSearchVOList = customerRemoteQueryService.queryCustomerList(loginDTO);\n    Iterator&amp;lt;CustomerSearchVO&amp;gt;it = customerSearchVOList.iterator();\n    // 排除不合规客户\n    while(it.hasNext()){\n        CustomerSearchVO customerSearchVO = it.next();\n        if(isInBlackList(customerSearchVO) || isLowQuality(customerSearchVO)){\n            it.remove();\n        }\n    }\n    // 补充客户其他属性信息\n    batchFillCustomerPositionInfo(customerSearchVOList);\n    batchFillCustomerAddressInfo(customerSearchVOList);\n    return customerSearchVOList;\n}\n&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev71jgooade5k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这段代码我们可以很轻松的在5秒内看明白这个函数是做什么的，并且知道它内部的一些业务规则。无限的私有方法封装会让代码链路过深，无限类的拆解会造成更多网状依赖，至少有3点内容，让我们绝不能抛弃注释。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;tkbq7havdqg&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7msu6xue5lua&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;无法精准命名&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;命名的含义是抽象实体隐藏细节，我们不能在一个名字上赋予它全部的信息，而必要的注释可以完美的进行辅佐。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;tkbq7havdqg&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev75f2113o6rn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;设计思想的阐述&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;代码只能实现设计不能阐述设计，这也是为什么一些复杂的架构设计我们需要文档的支撑而非代码的‘自解释’，在文档与代码之间的空隙，由注释来填补。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;tkbq7havdqg&amp;quot;,&amp;quot;isOrdered&amp;quot;:true,&amp;quot;level&amp;quot;:0,&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;%1.&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;}},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7e4gc73e6js&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;母语的力量&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这点尤其适合我们中国人，有时并不是因为注释少代码多，所以我们下意识会首先看代码。而是我们几十年感受的文化，让我们对中文与ABC具有完全不一样的感观。&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7dn2gu4m1ya&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:18,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;永远追求最优雅&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7ickm2zw7e9n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;雷布斯曾自夸自己写的代码像诗一样优雅，追求优雅的代码应该是每个软件工程师的心中的圣地。但有时存在一些不优雅，存在一些‘看似不合理’并不代表就不对，反而有时在追求更优雅的路上我们持续跑偏。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7mvi970vo97p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;The goal of software architecture is to minimize the human resources required&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;to build and maintain the required system.&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-- Robert C.Martin 《Clean Architecture》&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;color&amp;quot;:&amp;quot;rgba(0, 0, 0, 0.5)&amp;quot;,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;译：软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev78wzz8lekngo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Robert C.Martin在 &amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;italic&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Clean Architecture&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; 一书中提到了架构终极目标，用最小的人力成本来满足构建和维护该系统的需求。架构始终是我们解决复杂度的一个工具，如果当前系统并不复杂，我们不需要为了所谓的优雅去过分改造与优化它，持续将成本置在一个较低水位，就是软件最好的解决办法。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev7gdgq0pdvwai&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;业务简单的系统不应用DDD架构，弱交互场景也无需进行前后端分离，哪怕是邓总设计师在规划新中国的发展上，也是制定了一套‘中国特色社会主义’制度。不要盲从一些教条的观念，选择适合自己的，控制在可控制范围内，既不过度也不缺失。毕竟没有绝对的优雅，甚至没有绝对的正确。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;line&amp;quot;:1},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8ntzcpovtrqb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:21,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;写在最后&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8vu9akfqe9lh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;很多人认为做业务开发显得没那么有挑战性，但其实正好相反。最难解决的bug是无法重现的bug，最难处理的问题域是不确定性的问题域。业务往往是最复杂的，面向不确定性设计才是最复杂的设计。软件工程学科最难的事情是抽象，因为它没有标准、没有方法、甚至没有对错。如何在软件固有的复杂性上找到一条既不过度也不缺失的路，是软件工程师的终身课题，或许永远也无法达到，或许我们已经在路上了。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8dg6cr0xdfg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;参阅书籍&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://www.amazon.com/-/zh/dp/173210221X/ref=sr_1_1?qid=1636246895&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《A Philosophy of Software Design》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8p4saka3kcu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev85ler5xrx1cb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://niexiaolong.github.io/Object%20Oriented%20Analysis%20and%20Design%20with%20Applications.pdf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Object Oriented Analysis and Design with Applications》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8dke638wrvm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev80qsat11csrt9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/9226259&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Clean Code》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8t3ko03y2jmn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8mxoezywzcag&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://detail.tmall.com/item.htm?id=654392764249&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Clean Architecture》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8hi8i1pwu2tb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;kzwblev8rxkupc83kb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://martinfowler.com/books/eaa.html&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;《Patterns of Enterprise Application Architecture》&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;span&gt;没有系统是天然复杂的，为了快速完成任务不断引入新的复杂度至系统逐渐腐化，无限增长与无限传递的复杂度让软件需求越来越难“快速完成”。当有一天我们意识到系统的复杂性时再试图通过战略设计进行软件的迭代，你会发现举步维艰，一处很小的修改需要投入大量的基建修复，最终我们不得不向成本低头，不断再通过战术设计无限的苟且。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;A condition that is often incorrectly labeled software maintenance. To be more precise, it is maintenance when we correct errors; it is evolution when we respond to changing requirements; it is preservation when we continue to use extraordinary means to keep an ancient and decaying piece of software in operation. Unfortunately, reality suggests that an inordinate percent- age of software development resources are spent on software preservation.&lt;/span&gt;&lt;br data-path=&quot;81,1&quot;/&gt;&lt;span&gt;-- Grady Booch 《Object-Oriented Analysis and Design with Applications》&lt;/span&gt;&lt;br data-path=&quot;81,3&quot;/&gt;&lt;span&gt;译：我们总是说我们需要“维护”这些老系统。而准确的说，在软件发展过程里，只有我们修正错误时，才是维护；在我们应对改变的需求时，这是演进；当我们使用一些极端的手段来保持古老而陈腐的软件继续工作时，这是保护（苟且）。事实证明我们更多的时间是在应对最后一种状况。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如同Grady Booch在 Object-Oriented Analysis and Design with Applications 中所提到的观点，当我们使用一些极端的手段来保持古老而陈腐的软件继续工作时，这确实是一种苟且。我们小心翼翼、集成测试、灰度发布、及时回滚等等，我们没有在“维护”他们，而是以一种丑陋的方式让这些丑陋的代码继续能够成功苟且下去。当代码变成意大利面条时，将几乎是不可能修复，成本将成指数倍增长，并且似乎我们的系统已经存在这样的代码，并且可能还在持续增加中。&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;六  架构伪论&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在架构设计中，总有一些软件工程师所坚信的诗和远方，但到不了的乌托邦不一定就是遥不可及的美好圣地，实则也可能是对系统无益甚至有害的架构设计。这里列举其中2条可能存在的架构伪论。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;1  好的代码自解释&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;Comments do not make up for bad code&lt;/span&gt;&lt;br data-path=&quot;86,1&quot;/&gt;&lt;span&gt;-- Martin Fowler 《Clean Code》&lt;/span&gt;&lt;br data-path=&quot;86,3&quot;/&gt;&lt;span&gt;译：注释不是对劣质代码的补救&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Martin Fowler在 Clean Code 书中提到注释不是对劣质代码的补救，以前我也一直坚信如果代码足够好是不需要注释的。但实则这是一个伪命题，John教授这么评价它 ‘good code is self-documenting’ is a delicious myth。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;CustomerVO&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;queryCustomerList&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    UserInfo userInfo = context.getLoginContext().getUserInfo();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(userInfo == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; || StringUtils.isBlank(userInfo.getUserId())){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Collections.emptyList();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    LoginDTO loginDTO = userInfoConvertor.convert(userInfo);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    List&amp;lt;CustomerSearchVO&amp;gt; customerSearchVOList = customerRemoteQueryService.queryCustomerList(loginDTO);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Iterator&amp;lt;CustomerSearchVO&amp;gt; it = customerSearchVOList.iterator();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;(it.hasNext()){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        CustomerSearchVO customerSearchVO = it.next();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(isInBlackList(customerSearchVO) || isLowQuality(customerSearchVO)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            it.&lt;span class=&quot;code-snippet__keyword&quot;&gt;remove&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    batchFillCustomerPositionInfo(customerSearchVOList);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    batchFillCustomerAddressInfo(customerSearchVOList);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; customerSearchVOList;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这段代码我们可以很轻松的在5秒内看明白这个函数是做什么的，并且知道它内部的一些业务规则。无限的私有方法封装会让代码链路过深，无限类的拆解会造成更多网状依赖，至少有3点内容，让我们绝不能抛弃注释。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;无法精准命名&lt;br data-path=&quot;90,0,0,1&quot;/&gt;命名的含义是抽象实体隐藏细节，我们不能在一个名字上赋予它全部的信息，而必要的注释可以完美的进行辅佐。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;设计思想的阐述&lt;br data-path=&quot;90,1,0,1&quot;/&gt;代码只能实现设计不能阐述设计，这也是为什么一些复杂的架构设计我们需要文档的支撑而非代码的‘自解释’，在文档与代码之间的空隙，由注释来填补。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;母语的力量&lt;br data-path=&quot;90,2,0,1&quot;/&gt;这点尤其适合我们中国人，有时并不是因为注释少代码多，所以我们下意识会首先看代码。而是我们几十年感受的文化，让我们对中文与ABC具有完全不一样的感观。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;2  永远追求最优雅&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;雷布斯曾自夸自己写的代码像诗一样优雅，追求优雅的代码应该是每个软件工程师的心中的圣地。但有时存在一些不优雅，存在一些‘看似不合理’并不代表就不对，反而有时在追求更优雅的路上我们持续跑偏。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;The goal of software architecture is to minimize the human resources required&lt;/span&gt;&lt;br data-path=&quot;93,1&quot;/&gt;&lt;span&gt;to build and maintain the required system.&lt;/span&gt;&lt;br data-path=&quot;93,3&quot;/&gt;&lt;span&gt;-- Robert C.Martin 《Clean Architecture》&lt;/span&gt;&lt;br data-path=&quot;93,5&quot;/&gt;&lt;span&gt;译：软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Robert C.Martin在 Clean Architecture 一书中提到了架构终极目标，用最小的人力成本来满足构建和维护该系统的需求。架构始终是我们解决复杂度的一个工具，如果当前系统并不复杂，我们不需要为了所谓的优雅去过分改造与优化它，持续将成本置在一个较低水位，就是软件最好的解决办法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;业务简单的系统不应用DDD架构，弱交互场景也无需进行前后端分离，哪怕是邓总设计师在规划新中国的发展上，也是制定了一套‘中国特色社会主义’制度。不要盲从一些教条的观念，选择适合自己的，控制在可控制范围内，既不过度也不缺失。毕竟没有绝对的优雅，甚至没有绝对的正确。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;七  写在最后&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;很多人认为做业务开发显得没那么有挑战性，但其实正好相反。最难解决的bug是无法重现的bug，最难处理的问题域是不确定性的问题域。业务往往是最复杂的，面向不确定性设计才是最复杂的设计。软件工程学科最难的事情是抽象，因为它没有标准、没有方法、甚至没有对错。如何在软件固有的复杂性上找到一条既不过度也不缺失的路，是软件工程师的终身课题，或许永远也无法达到，或许我们已经在路上了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;参阅书籍&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;98,1&quot;/&gt;《A Philosophy of Software Design》&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;《Object Oriented Analysis and Design with Applications》&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;《Clean Code》&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;《Clean Architecture》&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;《Patterns of Enterprise Application Architecture》&lt;/span&gt;&lt;/section&gt;&lt;/article&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-spm-anchor-id=&quot;a2c6h.21258778.0.i0.2baa4caa7JMSeq&quot;&gt;&lt;strong&gt;&lt;span&gt;程序员最重要的能力是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;点击阅读原文查看详情！&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>