<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>9f4415494a3f08475c2db1fa95a390ec</guid>
<title>高并发服务优化篇：从 RPC 预热转发看服务端性能调优</title>
<link>https://toutiao.io/k/vatr36l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前的文章中，我们详细阐述了RPC的调用过程，分析了其耗时组成，为我们日常性能调优提供了理论支持。有兴趣的可以点击&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4ODUzMDg5NQ==&amp;amp;mid=2650001443&amp;amp;idx=1&amp;amp;sn=4da4c8636b6334caab71bb1b2f1f0210&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《详解RPC的一次调用过程》&lt;/a&gt;浏览查看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了更好的体验和更优的性能，其实RPC悄悄的做了很多工作，本篇就带大家来看下RPC的一些高级特性和其背后的原因。（还是以开源的dubbo和sofa为例来说明）&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Part1&lt;/span&gt;&lt;span/&gt;&lt;span&gt;RPC为了性能做了哪些努力&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;1.1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Provider分组和直连&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;路由寻址，负载均衡是很好，可以保证流量均匀从而保护服务节点稳定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，我们有的时候其实不希望我们的请求乱跑，最好能打到指定的机器上。比如联调和测试的时候，直连功能就显得很重要了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只有经历过多方合作联调时请求到处乱跑的痛，才知道分组和直连的功能对开发是多么的友好。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//以sofa为例&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Extension&lt;/span&gt;(value = &lt;span&gt;&quot;directUrl&quot;&lt;/span&gt;, order = -&lt;span&gt;20000&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@AutoActive&lt;/span&gt;(consumerSide = &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DirectUrlRouter&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Router&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;//...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到直连路由策略的order属性，被赋予了一个极小的值，变成了优先级最高的路由策略，所以只要配置的直连列表，则会优先走配置中的列表地址。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.901481004507405&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xE6oscyT531mOT1VUCvNaycKtasYAUXYXja6IsS4gfYGUddzpicmnXyFBcPZkuuGVtMltpW3TBbU8iaicxxvQtiaHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1553&quot;/&gt;&lt;figcaption&gt;摘自:www.sofastack.tech&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;1.2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;异步调用&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.44&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xE6oscyT531mOT1VUCvNaycKtasYAUXYAibia17ichoNcAibiaZ5ygdaib8nfkA6D4lgz58yfRPxgTt80nqa6cQWUWKA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;825&quot;/&gt;&lt;figcaption&gt;Future异步调用&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;异步调用对服务性能和并发的支持起到很大的作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般异步调用有Futurn和callback等方式，这里我们说下Future的原理：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用下游之后，先返回一个Future，上游通过Future.get()方法对结果进行获取，如果结果未返回则会让出CPU资源进入等待，直到结果到达或超时后触发回调方法才被唤醒。由于篇幅问题，Future的核心逻辑的相关注释就不放了，之前的消息消费顺序保障的文章中也有叙述，有兴趣的同学可以看下~&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;1.3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;本地优先、远程优先&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多时候，我们会遇到消费端和服务端可能都是自己的情况。这个时候，在常规的路由寻址之外，又提供给我们一种调用的可能性，就是直接调用当前服务器上的程序，这样做的好处比较明显，省去了网络传输等时间损耗，效率更高。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;List&amp;lt;ProviderInfo&amp;gt; localProviderInfo = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;ProviderInfo&amp;gt;();&lt;br/&gt;&lt;span&gt;// 解析IP，看是否和本地一致&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (ProviderInfo providerInfo : providerInfos) { &lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (localhost.equals(providerInfo.getHost())) {&lt;br/&gt;        localProviderInfo.add(providerInfo);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 命中本机的服务端&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (CommonUtils.isNotEmpty(localProviderInfo)) { &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;.doSelect(invocation, localProviderInfo);&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; { &lt;br/&gt;  &lt;span&gt;// 没有命中本机上的服务端&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;.doSelect(invocation, providerInfos);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，也需要看业务和内部服务路由的实际情况，比如在阿里的单元化部署下，需要根据用户ID路由到对应的zone进行处理，如果还是优先本机，那就可能在操作数据库的时候涉及到跨zone调用，比走远程rpc更加耗时。因此这种情况下就需要禁用本机优先策略。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;1.4&lt;/span&gt;&lt;/span&gt;&lt;span&gt;延迟暴露&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多时候，我们的服务需要依赖一些其他内容才可以正常提供服务，比如缓存预热、线程池预热等等，所以，在服务真正就绪之后再注册到配置中心是很有必要的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//服务注册之前，先延迟&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;export&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 根据配置延迟加载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (providerConfig.getDelay() &amp;gt; &lt;span&gt;0&lt;/span&gt;) { &lt;br/&gt;        Thread thread = factory.newThread(&lt;span&gt;new&lt;/span&gt; Runnable() {&lt;br/&gt;         &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;         &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;             &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                  Thread.sleep(providerConfig.getDelay());&lt;br/&gt;             } &lt;span&gt;catch&lt;/span&gt; (Throwable ignore) { &lt;br/&gt;             }&lt;br/&gt;              &lt;span&gt;//真正的服务注册逻辑&lt;/span&gt;&lt;br/&gt;              doExport();&lt;br/&gt;         }&lt;br/&gt;      });&lt;br/&gt;      thread.start();&lt;br/&gt;   } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;       doExport();&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;1.5&lt;/span&gt;&lt;/span&gt;&lt;span&gt;粘滞连接&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;问：&lt;/em&gt; 我们需要每次都进行路由寻址和负载均衡来确定服务地址么？&lt;br/&gt;&lt;em&gt;答：&lt;/em&gt; 大部分情况是有利的，不过有些特殊的场景，更希望多次请求连接到同一台服务器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，有状态的服务（很多带数据功能的服务都是有状态的，比如很久之前的带登陆session的Tomcat服务、存储集群服务等），其实希望每次请求都连接到相同的服务器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就用到了粘滞连接功能。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt; ProviderInfo &lt;span&gt;select&lt;/span&gt;&lt;span&gt;(...)&lt;/span&gt;&lt;span&gt;throws&lt;/span&gt; SofaRpcException &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 判断isSticky 粘滞连接配置&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (consumerConfig.isSticky()) {&lt;br/&gt;        &lt;span&gt;//如果最后一次使用的provider不为空，则使用&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (lastProviderInfo != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            ProviderInfo providerInfo = lastProviderInfo;        &lt;br/&gt;            &lt;span&gt;//获取对应连接&lt;/span&gt;&lt;br/&gt;            ClientTransport lastTransport = connectionHolder.getAvailableClientTransport(providerInfo);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (lastTransport != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; lastTransport.isAvailable()) {&lt;br/&gt;               checkAlias(providerInfo, message);&lt;br/&gt;               &lt;span&gt;return&lt;/span&gt; providerInfo;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;1.6&lt;/span&gt;&lt;/span&gt;&lt;span&gt;预热转发&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面扯了那么多，其实，这个才是我们今天想说的重点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;预热转发是针对服务节点的负载均衡来说的。因为在服务刚启动的时候，如果请求过多可能会影响机器性能和正常业务，如果将处于预热期的机器的请求转发到集群内其它机器，过了预热期之后再恢复正常，则可以保证服务节点的性能和服务整体的可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么这个功能是怎么实现的呢？--带权重的随机负载均衡。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2909441233140655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xE6oscyT531mOT1VUCvNaycKtasYAUXYFn7xEmIqibRiaJWibS2ARAB9AA5koD7hgBKF7eA0PA3QVSImEGqnQHbyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1038&quot;/&gt;&lt;figcaption&gt;摘自sofastack：权重随机的原理&lt;/figcaption&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;//累加总权重totalWeight，代码忽略。。。&lt;/span&gt;&lt;br/&gt; &lt;br/&gt; &lt;span&gt;//在总权重内随机得到一个值&lt;/span&gt;&lt;br/&gt; &lt;span&gt;int&lt;/span&gt; offset = random.nextInt(totalWeight);&lt;br/&gt; &lt;br/&gt; &lt;span&gt;//确定随机值落在哪个片断上&lt;/span&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; size; i++) {&lt;br/&gt;     offset -= getWeight(providerInfos.get(i));&lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; (offset &amp;lt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        providerInfo = providerInfos.get(i);&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;     }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置示例:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;core_proxy_url=weightStarting:0.2,during:60,weightStarted:0.2,address:x.x.x.x,uniqueId:core_unique&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上，预热权重20%，预热持续时长60s。这样，按照上述计算方式，权重小的服务节点被选到的几率就相对小，以此达到权重随机的效果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;那么，为什么刚发布的服务需要预热呢？预热可以起到什么作用呢？&lt;/em&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Part2&lt;/span&gt;&lt;span/&gt;&lt;span&gt;什么是JIT优化&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;都说C++快，Java慢，都是高级语言，是什么导致了运行速度的差别呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个涉及到了两种执行方式：&lt;em&gt;解释执行&lt;/em&gt; 和 &lt;em&gt;编译执行&lt;/em&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相对于C++直接将代码编译成机器码运行的方式，Java为了实现跨平台、高度抽象等特性，增加了虚拟机层来实现Java代码到机器码的转换，Java程序先是被编译成符合虚拟机规范的.class字节码逐条将字节码翻译成机器码然后执行，所以，速度上就慢一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然，JVM的加入，给Java的运行速度增加了不少损耗，但是好处也很多，除了跨平台，还为我们实现了诸如内存管理、垃圾回收等容器级通用功能，让研发人员可以更加聚焦业务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;不过，Java也是要面子的，我允许自己慢，但我不允许自己慢那么多！&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么办呢？遵循二八原则，是不是可以找寻程序当中的贡献了大部分调用量的核心代码，把这部分编译成机器码，提升其速度，不就把整体的速度提上去了么，JVM也是这么做的~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，JVM兼容了解释执行和编译执行两种方式，也就是我们常说的&lt;em&gt;即时编译&lt;/em&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;前面的问题到这里其实就可以回答了。为什么需要预热转发呢？是为了用小流量对程序进行预热，目的是为了让核心代码进行及时编译，提高峰值运行速率，提升服务响应~&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面让我们详细看下JIT。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;2.1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;即时编译器&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了权衡编译时间和执行效率，JVM设置了多种即时编译器：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;C1（Client 编译器）：基于字节码完成部分优化，如方法内联、常量传递，相对于C2，速度快，但性能稍差。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;C2（Server 编译器）：耗时较长的全局优化，如无用代码消除、重排序、循环展开、公共子表达式替代、常量传播等等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Graal（新的JIT编译器）：侧重于性能和语言操作性。在一些负载上提供比传统编译器更好的峰值性能；用 Graal 执行的语言可以互相调用，可以使用来自其他语言的库。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;2.2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JIT优化触发条件&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们说过，JVM其实是希望找到承担更多调用请求的代码块进行优化，那，怎么来确认哪些代码时优化目标呢？--&lt;em&gt;热点探测&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;基于采样的热点探测&lt;/strong&gt;：&lt;br/&gt;周期采样，检测各线程栈顶方法，经常出现的方法即为热点方法。好处是简单高效，缺点是不精确，容易受线程运行状态的影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;基于计数的热点探测&lt;/strong&gt;：&lt;br/&gt; （包括方法调用计数器和回边计数器）每个方法建立计数器，用来统计调用次数。如果该方法执行次数超过阈值，则该方法被认定为热点方法。好处是足够精确。缺点是空间损耗大，且实现较难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，可以通过如XX:CompileThreshold等参数来修改阈值，不过，没有绝对把握，还是不要动为好。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Part3&lt;/span&gt;&lt;span/&gt;&lt;span&gt;JIT指导代码优化&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;3.1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;方法内联&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么我们在刚写代码的时候，总是被建议不要写很大的方法体？方法内联的JIT优化策略就是其中一个重要的原因。（还有GC友好等原因）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JVM内的每一次方法调用，都是栈帧在内存中出栈入栈的过程，方法多了性能损耗自然大，所以要进行方法内联，即把方法执行逻辑直接复制到调用方内部，避免方法调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，方法内联是有方法大小限制的，超过了一定大小的方法，没法做内联优化。所以，平常应该注意，尽量避免写很大很冗长的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让我们来举个栗子实际感受一下~&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.42788461538461536&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xE6oscyT531mOT1VUCvNaycKtasYAUXYf0L5ketJNicskbDhEEoYSNiaMsHD55URY8Gtjt2BPkUY8z01LsV86Gng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1248&quot;/&gt;&lt;figcaption&gt;两种书写风格的大数相加&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所示，两个字符串型整数相加，都能实现功能，前一种写法，把中间过程全都拆开，罗列在的方法内，整个方法虽然理解起来稍微方便些，但整体显得冗长；第二种方法，把各个条件都囊括在了for循环条件内，三行代码完成整体操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要去评价，我觉得大部分人都会说第二种写的好，但是，第二种的好难道真的局限于优雅么?&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//添加JVM启动参数，用于打印代码执行过程中的编译详情&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//-XX:+PrintCompilation&lt;/span&gt;&lt;br/&gt;String num1 = &lt;span&gt;&quot;12345&quot;&lt;/span&gt;;&lt;br/&gt;String num2 = &lt;span&gt;&quot;23456&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;//循环15000次，因为1.8分层编译下,各层阈值不一样，我们取最大阈值&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;15001&lt;/span&gt;;i++) {&lt;br/&gt;    rejectionLB1.stringAdd(num1, num2);&lt;br/&gt;    &lt;span&gt;//rejectionLB1.stringAdd2(num1, num2);&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7463087248322148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xE6oscyT531mOT1VUCvNaycKtasYAUXYXEyrT5gdibUxpDafuiauQqIEbcbeZ9962uuV7MaJ4Fp8MS1fjKjGY8VQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;745&quot;/&gt;&lt;figcaption&gt;执行15000次写法1&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（图中编译层次这一列中，3代表C1编译，4代表C2编译）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看到，随着代码的执行次数的增加，一些方法，进行了C1编译，如我们的主方法&lt;em&gt;stringAdd&lt;/em&gt;，而少数方法，从C1编译提升到了C2编译，如AbstractStringBuilder::append方法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8464730290456431&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xE6oscyT531mOT1VUCvNaycKtasYAUXYmNbB0shCXW6u7YLzCcg1IkBKcicObC5F1ane3CxibozknxtXZc5VkH1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;723&quot;/&gt;&lt;figcaption&gt;执行15000次写法2&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看到了什么，&lt;em&gt;stringAdd2&lt;/em&gt; 居然在进行到运行后期执行了C2编译，而且很明显，方法二的C2编译的方法，比方法一要多不少。所以，平常写代码该注意些什么，是不是显而易见了。。。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;3.2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;其他优化&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方法内联虽然只是一种简单优化，但是，是后续其他优化的基石。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而JVM的分层优化涉及的点非常多&lt;span/&gt;&lt;sup&gt;[1]&lt;/sup&gt;：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;局部优化&lt;/strong&gt;：关注局部数据流分析，数组越界检查消除；寄存器优化，优化跳转、循环、异常处理等；代码简化，如公共表达式提取等等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;控制流优化&lt;/strong&gt;：专注于代码重排序、循环缩减、循环展开、异常定位优化等等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;全局优化&lt;/strong&gt;：主要关注冗余消除，如方法调用、锁；逃逸分析；GC和内存分配优化等等等。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Part4&lt;/span&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇从RPC的预热转发功能，引出了其背后的理论依据--JIT优化。阐述了JIT的基本概念，并用一个实例说明了代码编写风格对JIT优化的实际影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JIT相关的优化实现起来非常难，不过其原理和作用对我们普通研发也不是特别难理解，学习JIT优化的目的，在于了解JVM底层的运行逻辑和实现，让我们可以更加信任托管，聚焦业务逻辑，同时在编写代码时，尽量用JVM友好的方式进行，从而达到更好看、更高效的目的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;推荐阅读:&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4ODUzMDg5NQ==&amp;amp;mid=2650001031&amp;amp;idx=1&amp;amp;sn=75b0eea86788b7b59c61875745b38c4c&amp;amp;chksm=882fa427bf582d31e60fcc7dcecec9c2594f0a69a9333524b0d6296a53d9c32118fe8d709e06&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;3. 高并发架构优化：从BAT实际案例看消息中间件的妙用&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4ODUzMDg5NQ==&amp;amp;mid=2650001071&amp;amp;idx=1&amp;amp;sn=fe00cfd25ae6c8595bcc2aef84ed102f&amp;amp;chksm=882fa40fbf582d19be791b763a2ebf0f8d753c1c498a8ae31ee31db1b4984d9e3afeeac4ac5c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;4. 高并发存储优化：细说数据库索引原理及其优化策略&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4ODUzMDg5NQ==&amp;amp;mid=2650001108&amp;amp;idx=1&amp;amp;sn=5c246e6888438575f74147892671c2d1&amp;amp;chksm=882fa474bf582d62a63d7e0d6dddd2655657c64107520b96ab85fe107679eb66e953100999bd&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;5. 高并发存储优化：许是史上最详尽分库分表文章之一&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4ODUzMDg5NQ==&amp;amp;mid=2650001136&amp;amp;idx=1&amp;amp;sn=2585d7dcf8b0e4328fe07eca4e7fe085&amp;amp;chksm=882fa450bf582d468bc4d92389c9ad6f92ffccf7203495ba7ef139a05904b668d1fcf32ad1b2&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;6. 高并发存储优化：数据库索引优化Explain实战&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4ODUzMDg5NQ==&amp;amp;mid=2650001189&amp;amp;idx=1&amp;amp;sn=87606749ae2be031a9171d272fd73819&amp;amp;chksm=882fa585bf582c932863bd0bfb282c3e8d4b3ff975cabbf9a7c13707ca52cc5d8c17e9eb5551&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;7. 高并发存储番外：阿里数据中间件源码不完全解析&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4ODUzMDg5NQ==&amp;amp;mid=2650001219&amp;amp;idx=1&amp;amp;sn=6c41849dbfa9f7078d455014aa8781c0&amp;amp;chksm=882fa5e3bf582cf521e4c6a71b20020eba215af83ba61983f9989db85ed90e9f6944875878b3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;8. 高并发存储优化：诸多策略，缓存为王&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4ODUzMDg5NQ==&amp;amp;mid=2650001291&amp;amp;idx=1&amp;amp;sn=c8f0f25f975d950fbb1f63a629ca2d6c&amp;amp;chksm=882fa52bbf582c3df852fc303ef5e2ab0d5b104677f2013644e5b73f9442aad8d62f30c51994&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;9. 高并发存储番外：redis套路，一网打尽&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4ODUzMDg5NQ==&amp;amp;mid=2650001404&amp;amp;idx=1&amp;amp;sn=6a2aa3cd274f85d2b5dbb11ab0fe5da8&amp;amp;chksm=882fa55cbf582c4a0d0f15c25a2ccbd1bfdc0b5d48aa10f43f3b320b6fb69e2c6af4dc96a5b5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;10. 高并发服务优化：浅谈数据库连接池&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4ODUzMDg5NQ==&amp;amp;mid=2650001443&amp;amp;idx=1&amp;amp;sn=4da4c8636b6334caab71bb1b2f1f0210&amp;amp;chksm=882fba83bf583395af9e911527c4b2b378a757e2c4d37618dc5a575768e1039c2ec3edfd003c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;11. 高并发服务优化：详解RPC的一次调用过程&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;JIT 编译器如何优化代码: &lt;em&gt;&quot;https://www.ibm.com/docs/zh/sdk-java-technology/8?topic=compiler-how-jit-optimizes-code&quot;&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e6f0166764d33f18e512c2a1915da834</guid>
<title>Java 代码中，如何监控 MySQL 的 Binlog？</title>
<link>https://toutiao.io/k/dg2ld8v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近在工作中，遇到了这样一个业务场景，我们需要关注一个业务系统数据库中某几张表的数据，当数据发生新增或修改时，将它同步到另一个业务系统数据库中的表中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一提到数据库的同步，估计大家第一时间想到的就是基于&lt;code&gt;binlog&lt;/code&gt;的主从复制了，但是放在我们的场景中，还有几个问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一，并不是需要复制所有表的数据，复制对象只有少量的几张表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二，也是比较麻烦的，两个业务系统数据库表结构可能不一致。例如，要同步数据库1的A表中的某些字段到数据库2的B表中，在这一过程中，A表和B表的字段并不是完全相同&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样的话，我们只能通过代码的方式，首先获取到数据库1表中数据的变动，再通过手动映射的方式，插入到数据库2的表中。但是，获取变动数据的这一过程，还是离不开&lt;code&gt;binlog&lt;/code&gt;，因此我们就需要在代码中对&lt;code&gt;binlog&lt;/code&gt;进行一下监控。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先说结论，我们最终使用了一个开源工具&lt;code&gt;mysql-binlog-connector-java&lt;/code&gt;，用来监控&lt;code&gt;binlog&lt;/code&gt;变化并获取数据，获取数据后再手动插入到另一个库的表中，基于它来实现了数据的同步。这个工具的git项目地址如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/shyiko/mysql-binlog-connector-java&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在正式开始前，还是先简单介绍一下&lt;code&gt;mysql&lt;/code&gt;的&lt;code&gt;binlog&lt;/code&gt;，&lt;code&gt;binlog&lt;/code&gt;是一个二进制文件，它保存在磁盘中，是用来记录数据库表结构变更、表数据修改的二进制日志。其实除了数据复制外，它还可以实现数据恢复、增量备份等功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动项目前，首先需要确保&lt;code&gt;mysql&lt;/code&gt;服务已经启用了&lt;code&gt;binlog&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;show variables like &#x27;log_bin&#x27;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果为值为&lt;code&gt;OFF&lt;/code&gt;，表示没有启用，那么需要首先启用&lt;code&gt;binlog&lt;/code&gt;，修改配置文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;log_bin=mysql-bin&lt;br/&gt;binlog-format=ROW&lt;br/&gt;server-id=1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对参数做一个简要说明：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在配置文件中加入了&lt;code&gt;log_bin&lt;/code&gt;配置项后，表示启用了&lt;code&gt;binlog&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;binlog-format&lt;/code&gt;是&lt;code&gt;binlog&lt;/code&gt;的日志格式，支持三种类型，分别是&lt;code&gt;STATEMENT&lt;/code&gt;、&lt;code&gt;ROW&lt;/code&gt;、&lt;code&gt;MIXED&lt;/code&gt;，我们在这里使用&lt;code&gt;ROW&lt;/code&gt;模式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;server-id&lt;/code&gt;用于标识一个sql语句是从哪一个&lt;code&gt;server&lt;/code&gt;写入的，这里一定要进行设置，否则我们在后面的代码中会无法正常监听到事件&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在更改完配置文件后，重启&lt;code&gt;mysql&lt;/code&gt;服务。再次查看是否启用&lt;code&gt;binlog&lt;/code&gt;，返回为&lt;code&gt;ON&lt;/code&gt;，表示已经开启成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Java项目中，首先引入&lt;code&gt;maven&lt;/code&gt;坐标：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.shyiko&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-binlog-connector-java&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.21.0&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写一段简单的示例，看看它的具体使用方式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    BinaryLogClient client = &lt;span&gt;new&lt;/span&gt; BinaryLogClient(&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span&gt;3306&lt;/span&gt;, &lt;span&gt;&quot;hydra&quot;&lt;/span&gt;, &lt;span&gt;&quot;123456&quot;&lt;/span&gt;);&lt;br/&gt;    client.setServerId(&lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    client.registerEventListener(event -&amp;gt; {&lt;br/&gt;        EventData data = event.getData();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (data &lt;span&gt;instanceof&lt;/span&gt; TableMapEventData) {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;Table:&quot;&lt;/span&gt;);&lt;br/&gt;            TableMapEventData tableMapEventData = (TableMapEventData) data;&lt;br/&gt;            System.out.println(tableMapEventData.getTableId()+&lt;span&gt;&quot;: [&quot;&lt;/span&gt;+tableMapEventData.getDatabase() + &lt;span&gt;&quot;-&quot;&lt;/span&gt; + tableMapEventData.getTable()+&lt;span&gt;&quot;]&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (data &lt;span&gt;instanceof&lt;/span&gt; UpdateRowsEventData) {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;Update:&quot;&lt;/span&gt;);&lt;br/&gt;            System.out.println(data.toString());&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (data &lt;span&gt;instanceof&lt;/span&gt; WriteRowsEventData) {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;Insert:&quot;&lt;/span&gt;);&lt;br/&gt;            System.out.println(data.toString());&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (data &lt;span&gt;instanceof&lt;/span&gt; DeleteRowsEventData) {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;Delete:&quot;&lt;/span&gt;);&lt;br/&gt;            System.out.println(data.toString());&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        client.connect();&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;        e.printStackTrace();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，创建一个&lt;code&gt;BinaryLogClient&lt;/code&gt;客户端对象，初始化时需要传入&lt;code&gt;mysql&lt;/code&gt;的连接信息，创建完成后，给客户端注册一个监听器，来实现它对&lt;code&gt;binlog&lt;/code&gt;的监听和解析。在监听器中，我们暂时只对4种类型的事件数据进行了处理，除了&lt;code&gt;WriteRowsEventData&lt;/code&gt;、&lt;code&gt;DeleteRowsEventData&lt;/code&gt;、&lt;code&gt;UpdateRowsEventData&lt;/code&gt;对应增删改操作类型的事件数据外，还有一个&lt;code&gt;TableMapEventData&lt;/code&gt;类型的数据，包含了表的对应关系，在后面的例子中再具体说明。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里，客户端监听到的是数据库级别的所有事件，并且可以监听到表的&lt;code&gt;DML&lt;/code&gt;语句和&lt;code&gt;DDL&lt;/code&gt;语句，所以我们只需要处理我们关心的事件数据就行，否则会收到大量的冗余数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动程序，控制台输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;com.github.shyiko.mysql.binlog.BinaryLogClient openChannelToBinaryLogStream&lt;br/&gt;信息: Connected to 127.0.0.1:3306 at mysql-bin.000002/1046 (sid:2, cid:10)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;连接mysql的&lt;code&gt;binlog&lt;/code&gt;成功，接下来，我们在数据库中插入一条数据，这里操作的数据库名字是&lt;code&gt;tenant&lt;/code&gt;，表是&lt;code&gt;dept&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; dept &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;8&lt;/span&gt;,&lt;span&gt;&quot;人力&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;1&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，控制台就会打印监听到事件的数据：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Table:&lt;br/&gt;108: [tenant-dept]&lt;br/&gt;Insert:&lt;br/&gt;WriteRowsEventData{tableId=108, includedColumns={0, 1, 2, 3}, rows=[&lt;br/&gt;    [8, 人力, , 1]&lt;br/&gt;]}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们监听到的事件类型数据有两类，第一类是&lt;code&gt;TableMapEventData&lt;/code&gt;，通过它可以获取操作的数据库名称、表名称以及表的&lt;code&gt;id&lt;/code&gt;。之所以我们要监听这个事件，是因为之后监听的实际操作中返回数据中包含了表的&lt;code&gt;id&lt;/code&gt;，而没有表名等信息，所以如果我们想知道具体的操作是在哪一张表的话，就要先维护一个&lt;code&gt;id&lt;/code&gt;与表的对应关系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二个打印出来的监听事件数据是&lt;code&gt;WriteRowsEventData&lt;/code&gt;，其中记录了&lt;code&gt;insert&lt;/code&gt;语句作用的表，插入涉及到的列，以及实际插入的数据。另外，如果我们只需要对特定的一张或几张表进行处理的话，也可以提前设置表的名单，在这里根据表&lt;code&gt;id&lt;/code&gt;到表名的映射关系，实现数据的过滤，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们再执行一条&lt;code&gt;update&lt;/code&gt;语句：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;update&lt;/span&gt; dept &lt;span&gt;set&lt;/span&gt; tenant_id=&lt;span&gt;3&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;8&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;9&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;控制台输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Table:&lt;br/&gt;108: [tenant-dept]&lt;br/&gt;Update:&lt;br/&gt;UpdateRowsEventData{tableId=108, includedColumnsBeforeUpdate={0, 1, 2, 3}, includedColumns={0, 1, 2, 3}, rows=[&lt;br/&gt;    {before=[8, 人力, , 1], after=[8, 人力, , 3]},&lt;br/&gt;    {before=[9, 人力, , 1], after=[9, 人力, , 3]}&lt;br/&gt;]}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在执行&lt;code&gt;update&lt;/code&gt;语句时，可能会作用于多条数据，因此在实际修改的数据中，可能包含多行记录，这一点体现在上面的&lt;code&gt;rows&lt;/code&gt;中，包含了&lt;code&gt;id&lt;/code&gt;为8和9的两条数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，再执行一条&lt;code&gt;delete&lt;/code&gt;语句：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;delete&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; dept &lt;span&gt;where&lt;/span&gt; tenant_id=&lt;span&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;控制台打印如下，&lt;code&gt;rows&lt;/code&gt;中同样返回了生效的两条数据：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Table:&lt;br/&gt;108: [tenant-dept]&lt;br/&gt;Delete:&lt;br/&gt;DeleteRowsEventData{tableId=108, includedColumns={0, 1, 2, 3}, rows=[&lt;br/&gt;    [8, 人力, , 3],&lt;br/&gt;    [9, 人力, , 3]&lt;br/&gt;]}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单的使用原理介绍完成后，再回到我们原先的需求上，需要将一张表中新增或修改的数据同步到另一张表中，问题还有一个，就是如何将返回的数据对应到所在的列上。这时应该怎么实现呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以&lt;code&gt;update&lt;/code&gt;操作为例，我们要对提取的数据后进行一下处理，更改上面例子中的方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; (data &lt;span&gt;instanceof&lt;/span&gt; UpdateRowsEventData) {&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;Update:&quot;&lt;/span&gt;);&lt;br/&gt;    UpdateRowsEventData updateRowsEventData = (UpdateRowsEventData) data;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (Map.Entry&amp;lt;Serializable[], Serializable[]&amp;gt; row : updateRowsEventData.getRows()) {&lt;br/&gt;        List&amp;lt;Serializable&amp;gt; entries = Arrays.asList(row.getValue());&lt;br/&gt;        System.out.println(entries);&lt;br/&gt;        JSONObject dataObject = getDataObject(entries);&lt;br/&gt;        System.out.println(dataObject);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在将&lt;code&gt;data&lt;/code&gt;强制转换为&lt;code&gt;UpdateRowsEventData&lt;/code&gt;后，可以使用&lt;code&gt;getRows&lt;/code&gt;方法获取到更新的行数据，并且能够取到每一列的值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后，调用了一个自己实现的&lt;code&gt;getDataObject&lt;/code&gt;方法，用它来实现数据到列的绑定过程：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; JSONObject &lt;span&gt;getDataObject&lt;/span&gt;&lt;span&gt;(List message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    JSONObject resultObject = &lt;span&gt;new&lt;/span&gt; JSONObject();&lt;br/&gt;    String format = &lt;span&gt;&quot;{\&quot;id\&quot;:\&quot;0\&quot;,\&quot;dept_name\&quot;:\&quot;1\&quot;,\&quot;comment\&quot;:\&quot;2\&quot;,\&quot;tenant_id\&quot;:\&quot;3\&quot;}&quot;&lt;/span&gt;;&lt;br/&gt;    JSONObject json = JSON.parseObject(format);&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (String key : json.keySet()) {&lt;br/&gt;        resultObject.put(key, message.get(json.getInteger(key)));&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; resultObject;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;format&lt;/code&gt;字符串中，提前维护了一个数据库表的字段顺序的字符串，标识了每个字段位于顺序中的第几个位置。通过上面这个函数，能够实现数据到列的填装过程，我们再执行一条&lt;code&gt;update&lt;/code&gt;语句来查看一下结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;update&lt;/span&gt; dept &lt;span&gt;set&lt;/span&gt; tenant_id=&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;comment&lt;/span&gt;=&lt;span&gt;&quot;1&quot;&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;控制台打印结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Table:&lt;br/&gt;108: [tenant-dept]&lt;br/&gt;Update:&lt;br/&gt;[8, 人力, 1, 3]&lt;br/&gt;{&quot;tenant_id&quot;:3,&quot;dept_name&quot;:&quot;人力&quot;,&quot;comment&quot;:&quot;1&quot;,&quot;id&quot;:8}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，将修改后的这一条记录中的属性填装到了它对应的列中，之后我们再根据具体的业务逻辑，就可以根据字段名取出数据，将数据同步到其他的表了。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f6feae21f25f36dc381a00cc6067ef6b</guid>
<title>离职期员工的信息安全管控实践</title>
<link>https://toutiao.io/k/h6lpu4v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;感激InfoQ的小编约稿，鞭策自己不断写作，郑重感谢黎同学。&lt;/p&gt;&lt;p&gt;InfoQ 文章地址：&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651081284&amp;amp;idx=2&amp;amp;sn=71be4f7712f632c3c01ddd8112a46e0e&amp;amp;scene=21#wechat_redirect&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;离职期的程序员注意了，公司会对你做这些管控措施&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;全文约1880字，阅读约5分钟。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着“互联网+”逐年深化，各行各业对信息技术依赖日益显著，众多企业的 IT 系统都承载并积累了大量用户数据或个人信息。前些年，企业的信息安全风险主要集中在互联网在线业务攻击导致的数据泄露，而近些年，数据买卖猖獗，利益诱惑巨大，企业内部员工的违法违规导致数据泄露屡增不减，很多大中型企业的信息安全建设，也逐步从攻防对抗的安全防御建设，到日趋重视员工的违法违规安全管控建设。本文针对离职期员工（以下简称“预离职”或“待离职”员工）的信息安全管控策略进行实践总结和经验分享。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一节：预离职员工的工作权限回收&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;员工的工作权限回收特指账号回收、特权回收，包括两种机制：一种是系统自动清理机制，一种是手工工单流程清理机制。前者需要在 HR 系统中明确离职日期，由各 IT 系统与 HR 系统自动完成离职日过期后的账号权限自动清理动作；后者需要预离职员工自己主动发起工单流程，在最后离职日审核前，完成相关账号权限的清理动作。发生上述两类行为时，对其直接上级自动触发离职员工权限审视电子流。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一般的员工工作权限包括日常办公权限和业务工作权限两类，可以参考下表的安全管控策略进行建设。需注意的是，对于大型集团公司，跨公司转岗应等同于离职情况处理；对大中型企业公司，跨部门转岗应等同于离职情况处理，上述两种情况均应按离职策略管控。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6574074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cicjwWJEiaibIBZhibZwJZ7n9ibTVM8XnGLJfZ8DeGhSTDPQj9zgoGjLOBbSw3UtCReXZiaryU4wxbNlLiae5xKSqKrGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第二节：预离职员工的日常行为监控和预警&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在员工提出正式离职后，应对员工的日常工作行为监控，并对异常行为进行预警。可采取的常规措施包括：追溯离职前的员工异常行为、每日发送行为跟踪报告、高敏操作实时审计、已有安全管控措施升级。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;追溯发起离职日前六个月的异常行为报告，通过邮件将报告发给员工上级领导提醒关注。异常行为报告的内容应包括六个月内触发的异常行为记录，含告警时间、告警类型、告警事件等描述。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;每日邮件发送员工行为跟踪报告给员工及其直接上级，员工行为跟踪报告内容可包括办公类信息如办公 IM 日沟通量、日桌面操作时长、日邮件发送量、考勤信息等，也可包括业务操作信息如 IT 运维使用堡垒机记录、开发人员请求代码记录、业务人员访问业务系统记录等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;针对高敏操作进行实时审计，特别是对日常使用含有敏感数据的业务系统的员工，或 IT 运维、开发人员进行数据库访问、查询取数、下载数据、同步数据、源代码等行为。对高敏操作审计要同步到信息安全监控系统中，由信息安全团队或部门安全员进行实时检视，一旦研判为可疑行为应和预离职员工领导第一时间确认是否正常。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;已有安全管控措施升级，是指在不影响员工体验的情况下，可以采取强化升级的安全管控措施增加对员工违法违规的威慑。如已部署屏幕水印 /APP 水印可以水印加深，通讯录查询数量、次数限制、已部署文件 / 磁盘加密措施自动加密笔记本数据类的大文件或高密级文档等。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第三节：预离职员工的继续教育&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在离职期间内，除了采用技术措施加强企业的信息安全管控，还需不断加强员工个人的法律意识，避免存在侥幸心理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;在离职流程中，签署《信息安全和保密承诺书》声明，员工承诺“不记录、不带走、不泄露”各项公司资料和敏感信息，归还或销毁在职期间各类已获得的公司资料或敏感信息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在离职期间内，完成《安全意识培训课程》和《违法违规案例警示》学习，并通过在线安全教育考试，考试成绩通过邮件发送至本人及其直接上级，若第一次考试不通过，可第二次考试，两次考试均不通过，延迟离职期一个月，直至考试通过。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对部分核心、高级岗位，在离职流程中，签署《竞业协议》文件，保护企业的商业机密。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第四节：预离职员工的工作申请和审批&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在离职期间内，针对一些数据分析、IT 运维、系统开发等岗位员工，为使其能正常完成相关工作，依然需要保留一定的系统权限，这时需要对这些岗位的高敏操作采用“一用一申请，一用一审批”的流程机制，降低员工违规风险。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于核心或机要岗位员工，应规定在职期间的脱密期，一般为六个月，根据企业情况可以给予一定的保密津贴，员工离职前至少提前六个月申请脱密，并强化保密义务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于员工丢失办公机或因各种原因无法归还办公机的情况，应由员工提供公安机关出具的报案证明，方可启动资产报废流程。同时信息安全团队和办公团队应建立办公机互联网上线监控机制，远程定位机制，远程擦除办公机数据机制等技术措施，进一步防范企业的数据泄露风险。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;综上所述，为便于企业对离职员工的信息安全管控，可以形成一份信息安全管控举措清单供读者交流和学习分享，如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.549074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cicjwWJEiaibIBZhibZwJZ7n9ibTVM8XnGLJffQc0KUVpjhCMGurAo0RREIljDtzkWvNGchdEF2nXOibianWK8FmvVgmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;坚信少却更好，坚定元认知传播，坚持安全美学，拿个主题，讲300秒就够了。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a2be6063324d85dd589bd523d91e7e8c</guid>
<title>微服务入门（二）：使用 go-kit 实现简易 user 服务</title>
<link>https://toutiao.io/k/0dxcg8d</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;go-kit可以很方便跟web框架结合起来，这里用mux路由扩展，mux是一个执行http请求的路由和分发的第三方扩展包。&lt;/section&gt;&lt;section&gt;这个案例实现的功能很简单，就是获取用户名和更改用户名的功能，没有使用数据库，用户名是用map数据结构存储。&lt;br/&gt;    &lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;定义Service层&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;主要是实现业务逻辑，代码比较简单，主要是一定要定义抽象接口，方便以后扩展和修改。&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; user_service&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; users &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; ErrorUserNotFound = errors.New(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;用户不存在&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  users = &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  users[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1&quot;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;chris&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; IUserService &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  GetUserName(userId &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;) (&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  UpdateUserName(userId, userName &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;) error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; UserService &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(service UserService)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;GetUserName&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(userId &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; user, ok := users[userId]; ok {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; user, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;, ErrorUserNotFound&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(service UserService)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UpdateUserName&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(userId, userName &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; _, ok := users[userId]; ok {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    users[userId] = userName&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; ErrorUserNotFound&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;定义Endpoint层&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;该层主要定义请求的数据格式和参数类型，Transport层不能直接调用Service层，只能由Endpoint层去调用。&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; user_service&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/go-kit/kit/endpoint&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Endpoints &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  GetUserNameEndpoint endpoint.Endpoint&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  UpdateUserNameEndpoint endpoint.Endpoint&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; GetUserNameRequest &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  UserId &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;user_id&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; GetUserNameResponse &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  UserName &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;user_name&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; UpdateUserNameRequest &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  UserId &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;user_id&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  UserName &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;user_name&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; UpdateUserNameResponse &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MakeGetUserNameEndpoint&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(svc IUserService)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;endpoint&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Endpoint&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, request &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(response &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}, err error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    req := request.(GetUserNameRequest)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    userName, err := svc.GetUserName(req.UserId)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; GetUserNameResponse{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      UserName: userName,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MakeUpdateUserNameEndpoint&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(svc IUserService)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;endpoint&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Endpoint&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, request &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(response &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}, err error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    req := request.(UpdateUserNameRequest)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, svc.UpdateUserName(req.UserId, req.UserName)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;定义Transport层&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;Transport层主要负责对请求和响应的数据进行解码和编码，支持多种协议。另外我在该层定义了路由器，每个请求对应一个Endpoint。&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; user_service&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;encoding/json&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/go-kit/kit/log&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  kithttp &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/go-kit/kit/transport/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/gorilla/mux&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; ErrorBadRequest = errors.New(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;invalid request parameter&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MakeHttpHandler&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, endpoints Endpoints, logger log.Logger)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Handler&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  r := mux.NewRouter()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  options := []kithttp.ServerOption{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    kithttp.ServerErrorLogger(logger),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    kithttp.ServerErrorEncoder(kithttp.DefaultErrorEncoder),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  r.Methods(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GET&quot;&lt;/span&gt;).Path(&lt;span class=&quot;code-snippet__string&quot;&gt;`/user/{user_id}`&lt;/span&gt;).Handler(kithttp.NewServer(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    endpoints.GetUserNameEndpoint,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    DecodeGetUserNameRequest,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    EncodeGetUserNameResponse,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    options...,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  r.Methods(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;POST&quot;&lt;/span&gt;).Path(&lt;span class=&quot;code-snippet__string&quot;&gt;`/user/{user_id}/{user_name}`&lt;/span&gt;).Handler(kithttp.NewServer(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    endpoints.UpdateUserNameEndpoint,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    DecodeUpdateUserNameRequest,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    EncodeUpdateUserNameResponse,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    options...,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; r&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DecodeGetUserNameRequest&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(_ context.Context, r *http.Request)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}, error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  vars := mux.Vars(r)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  userId, ok := vars[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; !ok {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, ErrorBadRequest&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; GetUserNameRequest{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    UserId: userId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;EncodeGetUserNameResponse&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(_ context.Context, w http.ResponseWriter, response &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  w.Header().Set(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;application/json;charset=utf-8&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; json.NewEncoder(w).Encode(response)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DecodeUpdateUserNameRequest&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(_ context.Context, r *http.Request)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}, error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  vars := mux.Vars(r)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  userId, ok := vars[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; !ok {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, ErrorBadRequest&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  userName, ok := vars[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;user_name&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; !ok {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, ErrorBadRequest&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; UpdateUserNameRequest{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    UserId:   userId,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    UserName: userName,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;EncodeUpdateUserNameResponse&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(_ context.Context, w http.ResponseWriter, response &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  w.Header().Set(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;application/json;charset=utf-8&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; json.NewEncoder(w).Encode(response)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;运行服务&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;go-kit还能自定义日志格式，这里只要定义好对应的变量，用go自带的http服务就能跑起来。&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/go-kit/kit/log&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;kit-demo/user_service&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;os/signal&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;syscall&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  errChan := &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; error) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; svc user_service.IUserService&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  svc = user_service.UserService{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  getUserNameEndpoint := user_service.MakeGetUserNameEndpoint(svc)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  updateUserNameEndpoint := user_service.MakeUpdateUserNameEndpoint(svc)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  endpoints := user_service.Endpoints{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    GetUserNameEndpoint:    getUserNameEndpoint,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    UpdateUserNameEndpoint: updateUserNameEndpoint,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; logger log.Logger&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    logger = log.NewLogfmtLogger(os.Stderr)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    logger = log.With(logger, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ts&quot;&lt;/span&gt;, log.DefaultTimestampUTC)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    logger = log.With(logger, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;caller&quot;&lt;/span&gt;, log.DefaultCaller)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  r := user_service.MakeHttpHandler(context.Background(), endpoints, logger)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;服务启动，端口8080&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    errChan &amp;lt;- http.ListenAndServe(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, r)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    c := &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; os.Signal, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    errChan &amp;lt;- fmt.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, &amp;lt;-c)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.Println(&amp;lt;-errChan)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;总结&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;go-kit的三层架构对新手来说不好理解，需要慢慢消化，我也是需要经常练习才能上手。go-kit上手还是很快的，不但能与mux路由扩展结合，还能与gin等web框架结合。&lt;/section&gt;&lt;section&gt;下一篇打算更新自定义错误，在这个案例上扩展。&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b89a1cbe4619ea71baaaa040996ac8fe</guid>
<title>从 0 到 1，使用 OpenPPL 实现一个 AI 推理应用</title>
<link>https://toutiao.io/k/u8ktct0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;span&gt;深度学习推理框架 OpenPPL 已经开源了，本文以一个图像分类实例，从 0 到 1 讲解如何部署一个深度学习模型，完成一个 AI 推理应用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;最终效果：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;通过上传一张猫咪照片（狗狗也可以），识别出图片中的动物 🐱&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;背景知识&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.02666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJtKEey0hPY533fpibxanI0U85VuicLBnicd9oVaZKApEJqUs2UFnKCgRiaNnvOKeq9HkibP18sxDSwNj7f7ffichBMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;OpenPPL 是基于自研高性能算子库的推理引擎，提供云原生环境下 的 AI 模型多后端部署能力，并支持 OpenMMLab 等深度学习模型的高效部署。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;以下以在 Linux x86 平台上部署图像分类模型为例，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;详述 OpenPPL 的安装与使用流程，帮助同学们从 0 到 1 来实现一个人工智能应用推理服务。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.02666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJtKEey0hPY533fpibxanI0U85VuicLBnicd9oVaZKApEJqUs2UFnKCgRiaNnvOKeq9HkibP18sxDSwNj7f7ffichBMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;1. 下载 PPL.NN 源码&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/openppl-public/ppl.nn.git&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2. 安装依赖&lt;/strong&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;PPLNN 编译依赖如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;GCC &amp;gt;= 4.9 或 LLVM/Clang &amp;gt;= 6.0&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CMake &amp;gt;= 3.13&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Git &amp;gt;= 2.7.0&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文讲解的图像分类例程 classification 还需要额外安装 OpenCV：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于 apt 包管理系统（如：Ubuntu/Debian）：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;sudo apt install libopencv-dev&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;对于 yum 包管理系统（如：CentOS）：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;sudo yum install opencv opencv-devel&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;或者从源码直接安装 OpenCV。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意：编译时会自动检测是否安装了OpenCV，如果没安装的话，不会生成本文的例程&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;3. 编译&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;cd&lt;/span&gt; ppl.nn&lt;br/&gt;build.sh -DHPCC_USE_OPENMP=ON   &lt;span&gt;# 不开启多线程的话，可以不加后面的-DHPCC_USE_OPENMP选项&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;编译完成后，图像分类例程 classification 会生成在&lt;/span&gt; &lt;code&gt;pplnn-build/samples/cpp/run_model/&lt;/code&gt; &lt;span&gt;目录下，可以读取图片和模型文件，输出分类结果。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;更多编译相关描述请&lt;/span&gt;&lt;span&gt;参见：building-from-source.md&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图像分类例程讲解&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.02666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJtKEey0hPY533fpibxanI0U85VuicLBnicd9oVaZKApEJqUs2UFnKCgRiaNnvOKeq9HkibP18sxDSwNj7f7ffichBMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;图像分类例程源码在 samples/cpp/run_model/classification.cpp 内，本节将对其主要部分进行讲解。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1. 图像预处理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;OpenCV 读入的数据格式为 BGR HWC uint8 格式，而 ONNX 模型需要的输入格式为 RGB NCHW fp32，需要对图像数据进行转换：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;int32_t&lt;/span&gt; &lt;span&gt;ImagePreprocess&lt;/span&gt;&lt;span&gt;(&lt;span&gt;const&lt;/span&gt; Mat&amp;amp; src_img, &lt;span&gt;float&lt;/span&gt;* in_data)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int32_t&lt;/span&gt; height = src_img.rows;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int32_t&lt;/span&gt; width = src_img.cols;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int32_t&lt;/span&gt; channels = src_img.channels();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 将颜色空间从 BGR/GRAY 转换到 RGB&lt;/span&gt;&lt;br/&gt;    Mat rgb_img;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (channels == &lt;span&gt;3&lt;/span&gt;) {&lt;br/&gt;        cvtColor(src_img, rgb_img, COLOR_BGR2RGB);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (channels == &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;        cvtColor(src_img, rgb_img, COLOR_GRAY2RGB);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;fprintf&lt;/span&gt;(&lt;span&gt;stderr&lt;/span&gt;, &lt;span&gt;&quot;unsupported channel num: %d\n&quot;&lt;/span&gt;, channels);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 将 HWC 格式的三通道分开&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;vector&lt;/span&gt;&amp;lt;Mat&amp;gt; &lt;span&gt;rgb_channels&lt;/span&gt;&lt;span&gt;(&lt;span&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    split(rgb_img, rgb_channels);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 这里构造 cv::Mat 时，直接用 in_data 为 cv::Mat 提供数据空间。这样当 cv::Mat 变化时，数据会直接写到 in_data 内&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Mat &lt;span&gt;r_channel_fp32&lt;/span&gt;&lt;span&gt;(height, width, CV_32FC1, in_data + &lt;span&gt;0&lt;/span&gt; * height * width)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;Mat &lt;span&gt;g_channel_fp32&lt;/span&gt;&lt;span&gt;(height, width, CV_32FC1, in_data + &lt;span&gt;1&lt;/span&gt; * height * width)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;Mat &lt;span&gt;b_channel_fp32&lt;/span&gt;&lt;span&gt;(height, width, CV_32FC1, in_data + &lt;span&gt;2&lt;/span&gt; * height * width)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;vector&lt;/span&gt;&amp;lt;Mat&amp;gt; rgb_channels_fp32{r_channel_fp32, g_channel_fp32, b_channel_fp32};&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 将 uint8 数据转换为 fp32，并减均值除标准差，y = (x - mean) / std&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; mean[&lt;span&gt;3&lt;/span&gt;] = {&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;}; &lt;span&gt;// 根据数据集和训练参数调整均值和方差&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;[&lt;span&gt;3&lt;/span&gt;] = {&lt;span&gt;255.0f&lt;/span&gt;, &lt;span&gt;255.0f&lt;/span&gt;, &lt;span&gt;255.0f&lt;/span&gt;};&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;uint32_t&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; rgb_channels.size(); ++i) {&lt;br/&gt;        rgb_channels[i].convertTo(rgb_channels_fp32[i], CV_32FC1, &lt;span&gt;1.0f&lt;/span&gt; / &lt;span&gt;std&lt;/span&gt;[i], -mean[i] / &lt;span&gt;std&lt;/span&gt;[i]);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2. 从 ONNX 模型生成 runtime builder&lt;/strong&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先需要创建并注册想使用的 engine，每个 engine 对应一个推理后端，目前支持 x86 和 CUDA。&lt;/span&gt;&lt;span&gt;本文仅使用 x86 engine：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;auto&lt;/span&gt; x86_engine = X86EngineFactory::Create(); &lt;span&gt;// 创建 x86 engine&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 注册所有想使用的 engine&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;vector&lt;/span&gt;&amp;lt;&lt;span&gt;unique_ptr&lt;/span&gt;&amp;lt;Engine&amp;gt;&amp;gt; engines;&lt;br/&gt;    &lt;span&gt;vector&lt;/span&gt;&amp;lt;Engine*&amp;gt; engine_ptrs;&lt;br/&gt;    engines.emplace_back(&lt;span&gt;unique_ptr&lt;/span&gt;&amp;lt;Engine&amp;gt;(x86_engine));&lt;br/&gt;    engine_ptrs.emplace_back(engines[&lt;span&gt;0&lt;/span&gt;].get());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着使用 ONNXRuntimeBuilderFactory::Create() 函数，读入ONNX model，根据注册的 engine 创建 runtime builder：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;auto&lt;/span&gt; builder = &lt;span&gt;unique_ptr&lt;/span&gt;&amp;lt;ONNXRuntimeBuilder&amp;gt;(&lt;br/&gt;        ONNXRuntimeBuilderFactory::Create(ONNX_model_path, engine_ptrs.data(), engine_ptrs.size()));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;补充说明：PPLNN 框架层面支持多种异构设备混合推理。可以注册多种不同的 engine，框架会自动将计算图拆分成多个子图，并调度不同的 engine 进行计算。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3. 创建 runtime&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用 runtime_options 配置 runtime 选项，例如配置 mm_policy 字段到 MM_LESS_MEMORY（省内存模式）：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;RuntimeOptions runtime_options;&lt;br/&gt;runtime_options.mm_policy = MM_LESS_MEMORY; &lt;span&gt;// 使用省内存模式&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用上一步生成的 runtime builder 创建一个 runtime 实例：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;unique_ptr&lt;/span&gt;&amp;lt;Runtime&amp;gt; runtime;&lt;br/&gt;runtime.reset(builder-&amp;gt;CreateRuntime(runtime_options));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一个 runtime builder 可以创建多个 runtime 实例。这些 runtime 实例会共享常量数据（权重等）和网络拓扑，从而节省内存开销。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4. 设置网络输入数据&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先通过 GetInputTensor() 接口获取 runtime 的输入 tensor：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;auto&lt;/span&gt; input_tensor = runtime-&amp;gt;GetInputTensor(&lt;span&gt;0&lt;/span&gt;); &lt;span&gt;// 分类网络仅有一个输入&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reshape 输入 tensor，并重新分配 tensor 的内存：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;::&lt;span&gt;vector&lt;/span&gt;&amp;lt;&lt;span&gt;int64_t&lt;/span&gt;&amp;gt; input_shape{&lt;span&gt;1&lt;/span&gt;, channels, height, width};&lt;br/&gt;input_tensor-&amp;gt;GetShape().Reshape(input_shape); &lt;span&gt;// 即使 ONNX 模型里已经将输入尺寸固定，PPLNN 仍会动态调整输入尺寸&lt;/span&gt;&lt;br/&gt;&lt;span&gt;auto&lt;/span&gt; status = input_tensor-&amp;gt;ReallocBuffer();   &lt;span&gt;// 当调用了 Reshape 后，必须调用此接口重新分配内存&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;跟 ONNX Runtime 不同的是，即使 ONNX 模型里固定了输入尺寸，PPLNN 仍可以动态调整网络的输入尺寸（但需保证输入尺寸是合理的）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上文预处理得到的数据 in_data 数据类型为 fp32，格式为 NDARRAY（4 维数据 NDARRAY 等同于 NCHW），由此定义用户输入数据的格式描述：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;TensorShape src_desc = input_tensor-&amp;gt;GetShape();&lt;br/&gt;src_desc.SetDataType(DATATYPE_FLOAT32);&lt;br/&gt;src_desc.SetDataFormat(DATAFORMAT_NDARRAY); &lt;span&gt;// 对于4维数据来说，NDARRAY 等同于 NCHW&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后调用 ConvertFromHost() 接口将数据 in_data 转换成 input_tensor 所需的格式，完成数据填充：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;status = input_tensor-&amp;gt;ConvertFromHost(in_data, src_desc);&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;5. 模型推理&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;status = runtime-&amp;gt;Run(); &lt;span&gt;// 执行网络推理&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;6. 获取网络输出数据&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过 GetOutputTensor() 接口获取 runtime 的输出 tensor：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;auto&lt;/span&gt; output_tensor = runtime-&amp;gt;GetOutputTensor(&lt;span&gt;0&lt;/span&gt;); &lt;span&gt;// 分类网络仅有一个输出&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;分配数据空间来存储网络输出：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;uint64_t&lt;/span&gt; output_size = output_tensor-&amp;gt;GetShape().GetElementsExcludingPadding();&lt;br/&gt;&lt;span&gt;&lt;span&gt;std&lt;/span&gt;::&lt;span&gt;vector&lt;/span&gt;&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt; &lt;span&gt;output_data_&lt;/span&gt;&lt;span&gt;(output_size)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;float&lt;/span&gt;* output_data = output_data_.data();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;和输入数据一样，需要先定义想要的输出格式描述：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;p&gt;TensorShape dst_desc = output_tensor-&amp;gt;GetShape();&lt;br/&gt;dst_desc.SetDataType(DATATYPE_FLOAT32);&lt;br/&gt;dst_desc.SetDataFormat(DATAFORMAT_NDARRAY); &lt;span&gt;// 对于1维数据而言，NDARRAY 等同于 vector&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调用 ConvertToHost() 接口将 output_tensor 的数据转换成 dst_desc 所描述的格式，得到输出数据：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;p&gt;status = output_tensor-&amp;gt;ConvertToHost(output_data, dst_desc);&lt;/p&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;7. 解析输出结果&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;解析网络输出的score，获取分类结果：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;int32_t&lt;/span&gt; &lt;span&gt;GetClassificationResult&lt;/span&gt;&lt;span&gt;(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;* scores, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int32_t&lt;/span&gt; size)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;vector&lt;/span&gt;&amp;lt;pair&amp;lt;&lt;span&gt;float&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &lt;span&gt;pairs&lt;/span&gt;&lt;span&gt;(size)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int32_t&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; size; i++) {&lt;br/&gt;        pairs[i] = make_pair(scores[i], i);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;auto&lt;/span&gt; cmp_func = [](&lt;span&gt;const&lt;/span&gt; pair&amp;lt;&lt;span&gt;float&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;amp; p0, &lt;span&gt;const&lt;/span&gt; pair&amp;lt;&lt;span&gt;float&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;amp; p1) -&amp;gt; &lt;span&gt;bool&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; p0.first &amp;gt; p1.first;&lt;br/&gt;    };&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int32_t&lt;/span&gt; top_k = &lt;span&gt;5&lt;/span&gt;;&lt;br/&gt;    nth_element(pairs.begin(), pairs.begin() + top_k, pairs.end(), cmp_func); &lt;span&gt;// get top K results &amp;amp; sort&lt;/span&gt;&lt;br/&gt;    sort(pairs.begin(), pairs.begin() + top_k, cmp_func);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;printf&lt;/span&gt;(&lt;span&gt;&quot;top %d results:\n&quot;&lt;/span&gt;, top_k);&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int32_t&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; top_k; ++i) {&lt;br/&gt;        &lt;span&gt;printf&lt;/span&gt;(&lt;span&gt;&quot;%dth: %-10f %-10d %s\n&quot;&lt;/span&gt;, i + &lt;span&gt;1&lt;/span&gt;, pairs[i].first, pairs[i].second, imagenet_labels_tab[pairs[i].second]);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;运行&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.02666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJtKEey0hPY533fpibxanI0U85VuicLBnicd9oVaZKApEJqUs2UFnKCgRiaNnvOKeq9HkibP18sxDSwNj7f7ffichBMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1. 准备 ONNX 模型&lt;/strong&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们在 tests/testdata 下准备了一个分类模型 mnasnet0_5.onnx，可用于测试。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过如下手段可以获取更多的 ONNX 模型：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;从 OpenMMLab/PyTorch 导出 ONNX 模&lt;/span&gt;&lt;span&gt;型：model-convert-guide.md&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;从 ONNX Model Zoo 获取模型：https://github.com/onnx/models&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;ONNX Model Zoo 的模型 opset 版本都较低，可以通过 tools 下的 convert_onnx_opset_version.py 将 opset 转换为 11：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    python convert_onnx_opset_version.py --input_model input_model.onnx --output_model output_model.onnx --output_opset 11&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;转换 opset 具体请&lt;/span&gt;&lt;span&gt;参考：onnx-model-opset-convert-guide.md&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2. 准备测试图片&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;测试图片使用任何格式均可。我们在 tests/testdata 下准备了 cat0.png（我们家喵主子的大头照）和 cat1.jpg（ImageNet 的验证集图片）：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9397590361445783&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xNm29D5VjSiasXHjpTd17Ibics7mL5z1R1reYncxl7j25U8u1HgMXia1fJBmiaKibBwO118ZCGYjgeLE6GDHwQDWRFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;498&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;喵主子从猫包里探头&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;任意大小的图片都可以正常运行，如果想要 resize 到 224 x 224 的话，可以修改程序里的如下变量：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; resize_input = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;// 想要resize的话，修改为true即可&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;3. 测试推理服务&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;运行&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;pplnn-build/samples/cpp/run_model/classification &amp;lt;image_file&amp;gt; &amp;lt;onnx_model_file&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;推理完成后，会得到如下输出：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;image preprocess succeed!&lt;br/&gt;[INFO][2021-07-23 17:29:31.341][simple_graph_partitioner.cc:107] total partition(s) of graph[torch-jit-export]: 1.&lt;br/&gt;successfully create runtime builder!&lt;br/&gt;successfully build runtime!&lt;br/&gt;successfully &lt;span&gt;set&lt;/span&gt; input data to tensor [input]!&lt;br/&gt;successfully run network!&lt;br/&gt;successfully get outputs!&lt;br/&gt;top 5 results:&lt;br/&gt;1th: 3.416199   284        n02123597 Siamese cat, Siamese&lt;br/&gt;2th: 3.049764   285        n02124075 Egyptian cat&lt;br/&gt;3th: 2.989676   606        n03584829 iron, smoothing iron&lt;br/&gt;4th: 2.812310   283        n02123394 Persian cat&lt;br/&gt;5th: 2.796991   749        n04033901 quill, quill pen&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;不难看出，这个程序正确判断了我家猫主子是真猫 (&amp;gt;^ω^&amp;lt;)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;至此 OpenPPL 的安装与图像分类模型推理已完成 &lt;strong&gt;&lt;span&gt;💐&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，在 &lt;code&gt;pplnn-build/tools&lt;/code&gt;&lt;span&gt; 目录下有可执行文件 pplnn，可以进行任意模型推理、dump 输出数据、benchmark 等操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;具体用法可使用 --help 选项查看。大家可以基于该示例进行改动，从而更熟悉 OpenPPL&lt;/span&gt; &lt;span&gt;的用法 👨‍💻👩‍💻&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>