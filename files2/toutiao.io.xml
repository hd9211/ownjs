<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>54ddd50b188ff919b8d6d4f108ff1ab9</guid>
<title>《非常时期囤货手册》</title>
<link>https://toutiao.io/k/vunyh1v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-非常时期囤货手册&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#非常时期囤货手册&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;非常时期囤货手册&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;本仓库维护者：&lt;a href=&quot;https://vip.manong.io/&quot; rel=&quot;nofollow&quot;&gt;周刊菌&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/j4ecrRVqhHZtJLiIPMCThA&quot; rel=&quot;nofollow&quot;&gt;拒绝焦虑，不妨从这份Newsletter开始！&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;本手册来自推特网友集体编辑，无版权。（源自 &lt;a href=&quot;https://twitter.com/shuilovesbooks&quot; rel=&quot;nofollow&quot;&gt;@shuilovesbooks&lt;/a&gt; &lt;a href=&quot;https://twitter.com/shuilovesbooks/status/1512783540793925632&quot; rel=&quot;nofollow&quot;&gt;推文&lt;/a&gt;，审校主编：&lt;a href=&quot;https://twitter.com/haoel&quot; rel=&quot;nofollow&quot;&gt;@haoel&lt;/a&gt;）&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;本手册目的是给出一个可供选择的居家封闭情况下的商品列表&lt;/li&gt;
&lt;li&gt;本手册分为 简单有效的“快速版” 和 面面俱到的“详细版”&lt;/li&gt;
&lt;li&gt;本手册是大众文档，你可以复制本文档进行个性化的删增修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-2小时囤货策略&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#2小时囤货策略&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;2小时囤货策略&lt;/h1&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-一原则&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#一原则&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;一、原则&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;1个月，3口之家 （主要以快速和必要为主）&lt;/li&gt;
&lt;li&gt;这个决策很快作出，只要2小时内搞定超市就行（购买的东西、简单有效）。&lt;/li&gt;
&lt;li&gt;不要浪费时间在决策上，应该花时间在行动上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-二食物&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#二食物&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;二、食物&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;50kg 各种米面干粮&lt;/li&gt;
&lt;li&gt;方便面、饼干、面包、蛋糕、巧克力、糖果、蜂蜜 若干&lt;/li&gt;
&lt;li&gt;1袋盐，1桶植物油&lt;/li&gt;
&lt;li&gt;饮用水，有糖饮料 10L 或 两箱&lt;/li&gt;
&lt;li&gt;火腿肠，午餐肉罐头，水果罐头  若干&lt;/li&gt;
&lt;li&gt;冰冻肉 10kg，鸡蛋100个，牛奶 5L&lt;/li&gt;
&lt;li&gt;土豆，萝卜，白菜、各种干菜 若干&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-三生活&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#三生活&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;三、生活&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;家庭医用包、应急医疗包，药品：退烧，消炎药，抗生素&lt;/li&gt;
&lt;li&gt;食物保存用品。如：保鲜膜，保鲜盒&lt;/li&gt;
&lt;li&gt;蜡烛、打火机、放大镜&lt;/li&gt;
&lt;li&gt;多功能刀具&lt;/li&gt;
&lt;li&gt;手机充电设备&lt;/li&gt;
&lt;li&gt;洗澡用品，洗衣用品&lt;/li&gt;
&lt;li&gt;女性卫生用品&lt;/li&gt;
&lt;li&gt;垃圾袋&lt;/li&gt;
&lt;li&gt;卫生纸&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-详细囤货策略&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#详细囤货策略&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;详细囤货策略&lt;/h1&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-一食物类&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#一食物类&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;一、食物类&lt;/h2&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-11-干粮--干货&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#11-干粮--干货&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;1.1 干粮 &amp;amp; 干货&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;大米5kg*10，分袋真空压缩包装，每天一斤，可够3口之家吃两个月&lt;/li&gt;
&lt;li&gt;各色杂粮：红豆、绿豆、鹰嘴豆、黑豆、红芸豆、红豆薏米、糙米、小米、燕麦米、藜麦、糯米各一斤多，玉米糊1斤、豆浆粉（可直接冲泡的）&lt;/li&gt;
&lt;li&gt;压缩饼干 10包 (200g左右每包真空可保存4年)&lt;/li&gt;
&lt;li&gt;苏打饼干 1kg装 * 3&lt;/li&gt;
&lt;li&gt;挂面20斤、快速面饼最低3箱（按照家庭人口，足够一家人3个月-6个月用量）&lt;/li&gt;
&lt;li&gt;面条：荞麦面30包，魔芋面20包&lt;/li&gt;
&lt;li&gt;各种麦片约 5斤&lt;/li&gt;
&lt;li&gt;各种方便面、粉丝、粉条、干米线&lt;/li&gt;
&lt;li&gt;各种脱水水果、干果（具体见下）&lt;/li&gt;
&lt;li&gt;罐头（肉类、果蔬、豆类）20份（具体见下）&lt;/li&gt;
&lt;li&gt;面粉25公斤&lt;/li&gt;
&lt;li&gt;发酵粉（或酵母）20包（记得买小包装，开封后容易失效，且新手容易翻车，应多储备）&lt;/li&gt;
&lt;li&gt;意大利面，一餐消耗75克到100克（意面可保存5年）&lt;/li&gt;
&lt;li&gt;巧克力补充能量充饥&lt;/li&gt;
&lt;li&gt;自加热盒饭&lt;/li&gt;
&lt;li&gt;植物拉丝蛋白（TVP）：有汤就能吃，高蛋白高纤维。&lt;/li&gt;
&lt;li&gt;代餐粉（营养全面，容易储存和计量）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-12-饮用水&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#12-饮用水&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;1.2 饮用水&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;饮用水 5L*8，空瓶裝滿自來水存放備用&lt;/li&gt;
&lt;li&gt;各种饮料（后期作为安慰食物）&lt;/li&gt;
&lt;li&gt;野外净水片1瓶（二氧化氯、高锰酸钾、碘泡腾片：必须能灭菌），明矾淨水后取上层清水煮开即可饮用&lt;/li&gt;
&lt;li&gt;滤水壶&lt;/li&gt;
&lt;li&gt;可折叠容水器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-13-油盐酱醋调味料&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#13-油盐酱醋调味料&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;1.3 油盐酱醋（调味料）&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;植物油5L、椰子油250g、黄油约1斤，豬油（板油自己煉），菜籽油，大豆油&lt;/li&gt;
&lt;li&gt;盐（重要）、料酒、生抽、醋、白糖（可止血）、红糖、冰糖、香油、麻油&lt;/li&gt;
&lt;li&gt;榨菜、咖喱、沙拉酱&lt;/li&gt;
&lt;li&gt;老干妈，豆瓣酱、番茄酱、红葱酱，黄豆酱，蒜蓉酱&lt;/li&gt;
&lt;li&gt;五香粉、十三香、辣椒面、黑白胡椒、八角、花椒&lt;/li&gt;
&lt;li&gt;小块的火锅底料，基本万能，煮面条米粉肉片麻辣烫红烧均可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-14-肉蛋奶&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#14-肉蛋奶&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;1.4 肉蛋奶&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;鸡蛋 50个（买后不能清洗，否则不经放）圆头在上尖头在下，延长存放期限&lt;/li&gt;
&lt;li&gt;全蛋粉2.5kg (耐储存，可代替鸡蛋使用)&lt;/li&gt;
&lt;li&gt;牛奶2箱（8L）（建议更多，UHT奶即常温奶可以存放6-9个月）&lt;/li&gt;
&lt;li&gt;奶粉/蛋白粉2斤（奶粉尽量选择脱脂，全脂奶粉开封后更容易变质）老少皆宜&lt;/li&gt;
&lt;li&gt;蛋白棒2盒约1斤&lt;/li&gt;
&lt;li&gt;鸡胸肉 5斤、猪肉3斤、速冻饺子3斤、包子5斤、手抓饼2斤&lt;/li&gt;
&lt;li&gt;火腿肠、腊肠、包装香肠、熏腊肉 2-5kg 火腿，牛肉干巴&lt;/li&gt;
&lt;li&gt;牛排（保质期一年，可以多屯一点）&lt;/li&gt;
&lt;li&gt;新鲜海鲜若干（冰冻虾仁，三文鱼，鳕鱼等）、干海鲜&lt;/li&gt;
&lt;li&gt;罐头
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;午餐肉罐头10个（普通罐头淀粉多，牛肉罐头腥味重，红烧肉罐头较肥）&lt;/li&gt;
&lt;li&gt;豆豉鲮鱼罐头、黄花鱼罐头、金枪鱼罐头、沙丁鱼罐头(红肉罐头中有亚硝酸盐，鱼类罐头则不含）&lt;/li&gt;
&lt;li&gt;黄豆、碗豆、花生等豆类罐头（茄汁法保质期2年）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;注&lt;/strong&gt;：-18°冷冻层空间有限的情况下，优先存储肉类这种能量密度高营养丰富的食材，速冻包子饺子不划算。长期停电冰箱保存的食物可能会在吃完之前变质，所以建议增加罐头储备。&lt;/p&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-15-蔬菜&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#15-蔬菜&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;1.5 蔬菜&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;&lt;strong&gt;储存时间较短（3-4天）&lt;/strong&gt;：小白菜、奶白菜、乌塌菜、油菜、油菜心、菠菜、鸡毛菜、茼蒿、苦菊、油麦菜、空心菜、红薯叶、生菜、球生菜、罗马生菜、香椿、苜蓿、荠菜、茴香菜、苋菜、芹菜、韭菜、韭黄、蒜苗、小葱、草菇、杨树菇、口蘑、香菇、平菇、杏鲍菇、金针菇、豌豆苗、黑豆苗、绿豆芽、黄豆芽、黄瓜、苦瓜、切片冬瓜、丝瓜、西葫芦、樱桃番茄、荸荠&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;储存时间中等（5-7天）&lt;/strong&gt;：茄子、番茄、彩椒、辣椒、秋葵、佛手瓜、韭菜苔、茭白、莲藕、菱角、莴笋、花椰菜、西兰花、芥菜、卷心菜、紫甘蓝、芥蓝、芦笋、洋姜、毛豆、芸豆、豇豆、扁豆、荷兰豆、嫩豌豆、蚕豆（鲜）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储时间较长（8-14天）&lt;/strong&gt;：白萝卜、红萝卜、青萝卜、樱桃萝卜、胡萝卜、芥菜头、甜菜根、生姜、冬笋、大白菜、南瓜、整个冬瓜、大蒜、大葱、山药、土豆、红薯、紫薯、芋头、洋葱&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脱水蔬菜长期储存&lt;/strong&gt;：脱水萝卜干、紫菜、小虾皮、白菜、葱段、香菜、贡菜、黄花菜、干香菇、干豆角、土豆干、盐渍海带、木耳、腐竹、笋干、脱水综合蔬菜&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;冷冻蔬菜：冷冻综合蔬菜包&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生长型蔬菜：&lt;/strong&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;干黄豆米、绿豆（用于生长豆芽）&lt;/li&gt;
&lt;li&gt;有根小葱，将葱须切下种植在阳台花盆中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;蔬菜罐头&lt;/strong&gt;：西红柿罐头、玉米罐头、青豆罐头&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-16-水果&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#16-水果&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;1.6 水果&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;苹果、橙子、香梨、柚子&lt;/li&gt;
&lt;li&gt;各种脱水水果、干果&lt;/li&gt;
&lt;li&gt;各种水果罐头&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-17--其它准备3-6个月用量&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#17--其它准备3-6个月用量&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;1.7  其它（准备3-6个月用量）&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;零食：
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;棒棒糖、水果糖半斤&lt;/li&gt;
&lt;li&gt;饼干两包&lt;/li&gt;
&lt;li&gt;巧克力约1斤&lt;/li&gt;
&lt;li&gt;每日坚果 30包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;酒水
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;红酒5瓶，威士忌3瓶，冷天暖身&lt;/li&gt;
&lt;li&gt;白酒五十度以上 5瓶 （关键时刻可以做消毒剂和燃料）&lt;/li&gt;
&lt;li&gt;啤酒2箱（听装）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;茶叶 ，红茶白茶绿茶 若干&lt;/li&gt;
&lt;li&gt;咖啡，约 50 小盒（手冲咖啡的话，咖啡豆 及200张滤纸）&lt;/li&gt;
&lt;li&gt;香烟，这个是硬通货，非常时期不好买&lt;/li&gt;
&lt;li&gt;蜂蜜，大瓶裝，可封閉出血傷口，快速補糖&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-二食物注意事项&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#二食物注意事项&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;二、食物注意事项&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;记录采购日期和过期时间，依照先进先出和安全库存原则，优先消耗保质期短采购时间较长的食品，及时替换库存，阴凉避光通风干燥是储存基本条件&lt;/p&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-21-成年人每日营养所需&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#21-成年人每日营养所需&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;2.1 成年人每日营养所需&lt;/h3&gt;
&lt;p dir=&quot;auto&quot;&gt;健康的饮食包括以下内容：（数据来源： &lt;a href=&quot;https://www.who.int/news-room/fact-sheets/detail/healthy-diet&quot; rel=&quot;nofollow&quot;&gt;WHO Healthy diet&lt;/a&gt;）&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;水果、蔬菜、豆类、坚果和全谷物&lt;/li&gt;
&lt;li&gt;400g水果和蔬菜/人/天，不包括土豆、红薯、木薯和其他淀粉根&lt;/li&gt;
&lt;li&gt;不到 10% 的总能量摄入来自游离糖（食品饮料中所有糖，及存在于蜂蜜、糖浆、果汁和浓缩果汁中的糖）&lt;/li&gt;
&lt;li&gt;少于 30% 的总能量摄入来自脂肪&lt;/li&gt;
&lt;li&gt;每天少于 5 克盐（相当于约一茶匙）。盐应该加碘。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-22-囤货频率&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#22-囤货频率&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;2.2 囤货频率&lt;/h3&gt;
&lt;p dir=&quot;auto&quot;&gt;留足X个星期的多余食物，平日吃一份旧食物，买一份新食物。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;动态保证家里有X个星期的存货，又不过期&lt;/p&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-23-食物保存方式&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#23-食物保存方式&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;2.3 食物保存方式&lt;/h3&gt;
&lt;h4 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-231-常备食材冷冻方法&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#231-常备食材冷冻方法&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;2.3.1 常备食材冷冻方法&lt;/h4&gt;
&lt;p dir=&quot;auto&quot;&gt;冷冻论据：UC Davis researchers发现，冷冻和冷鲜比，有相同或者更高的营养（&lt;a href=&quot;https://pubs.acs.org/doi/10.1021/jf5058793&quot; rel=&quot;nofollow&quot;&gt;点击查看原文&lt;/a&gt;）&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;原则：趁新鲜冷冻，擦干表面水分再冷冻，提前分成小份包装（强调密封），标记内容和日期&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;来源：《&lt;a href=&quot;https://m.douban.com/book/subject/34927505/&quot; rel=&quot;nofollow&quot;&gt;超级冰箱收纳术&lt;/a&gt;》- 岛本美由纪-日本&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;葱姜蒜，小米辣等小料： 切碎冷冻&lt;/li&gt;
&lt;li&gt;菠菜，卷心菜等绿叶： 切段冷冻，或焯水擦干冷冻&lt;/li&gt;
&lt;li&gt;土豆，胡萝卜，山药等根茎蔬菜：切块直接冷冻，或者焯水后擦干冷冻&lt;/li&gt;
&lt;li&gt;米饭，面包等主食： 直接分装冷冻&lt;/li&gt;
&lt;li&gt;鱼和肉： 切块后冷冻，生熟皆可&lt;/li&gt;
&lt;li&gt;鸡蛋和牛奶：鸡蛋去壳冻蛋液，大包装用冰格分装&lt;/li&gt;
&lt;li&gt;高汤，酱汁：普通高汤分装冷冻，咖喱等易染色的用一次性容器冷冻&lt;/li&gt;
&lt;li&gt;乾燥的沙子可以儲存土豆紅薯姜蒜等食材，濕潤的沙子可以用來催芽或者種植&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-232-常备食材冷鲜方法&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#232-常备食材冷鲜方法&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;2.3.2 常备食材冷鲜方法&lt;/h4&gt;
&lt;p dir=&quot;auto&quot;&gt;蔬菜：（不要洗）叶子菜，豆角，花菜&lt;/p&gt;

&lt;p dir=&quot;auto&quot;&gt;用报纸/纸巾/其他纸把菜裹住装进保鲜袋，扎好袋口&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;放到冰箱里&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;1周依然很新鲜&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;蔬菜：（不要洗）果蔬类&lt;/p&gt;
&lt;div class=&quot;snippet-clipboard-content position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;西红柿： 柿蒂朝下，室温保存&amp;#10;&amp;#10;黄瓜玉米青椒：擦干水分，保鲜袋放冰箱&quot;&gt;&lt;pre&gt;&lt;code&gt;西红柿： 柿蒂朝下，室温保存

黄瓜玉米青椒：擦干水分，保鲜袋放冰箱
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p dir=&quot;auto&quot;&gt;蔬菜：（不要洗）菌菇类&lt;/p&gt;

&lt;p dir=&quot;auto&quot;&gt;蔬菜：（不要洗）根茎类&lt;/p&gt;
&lt;div class=&quot;snippet-clipboard-content position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;南瓜：整个南瓜，通风阴凉处放置&amp;#10;&amp;#10;切开的南瓜：挖掉瓤，分开装保鲜袋，放冰箱&amp;#10;&amp;#10;胡萝卜：纸巾包好，放进保鲜袋，阴凉通风处放置&amp;#10;&amp;#10;洋葱，红薯，紫薯，芋头： 直接放阴凉通风处&amp;#10;&amp;#10;土豆：春天可以直接阴凉通风处放置&quot;&gt;&lt;pre&gt;&lt;code&gt;南瓜：整个南瓜，通风阴凉处放置

切开的南瓜：挖掉瓤，分开装保鲜袋，放冰箱

胡萝卜：纸巾包好，放进保鲜袋，阴凉通风处放置

洋葱，红薯，紫薯，芋头： 直接放阴凉通风处

土豆：春天可以直接阴凉通风处放置
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p dir=&quot;auto&quot;&gt;肉类：&lt;/p&gt;

&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-24-冰箱效率提升&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#24-冰箱效率提升&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;2.4 冰箱效率提升&lt;/h3&gt;
&lt;p dir=&quot;auto&quot;&gt;来源：《&lt;a href=&quot;https://m.douban.com/book/subject/34927505/&quot; rel=&quot;nofollow&quot;&gt;超级冰箱收纳术&lt;/a&gt;》- 岛本美由纪-日本&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;大房子建议再买个冰箱/冰柜，零度保鲜功能可以有效延长蔬菜水果保存时间；&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;普通人就提高冰箱空间利用率：&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;小散货：袋装，写好日期，竖放&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;/toutiaoio/A-Guide-To-Stockpiling/blob/main/images/image6.png&quot;&gt;&lt;img src=&quot;/toutiaoio/A-Guide-To-Stockpiling/raw/main/images/image6.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;肉等无法压缩的：分好格子，写好日期&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;/toutiaoio/A-Guide-To-Stockpiling/blob/main/images/image5.png&quot;&gt;&lt;img src=&quot;/toutiaoio/A-Guide-To-Stockpiling/raw/main/images/image5.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;土豆，水果等，可做成土豆泥，果酱，极大节约空间&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;/toutiaoio/A-Guide-To-Stockpiling/blob/main/images/image4.png&quot;&gt;&lt;img src=&quot;/toutiaoio/A-Guide-To-Stockpiling/raw/main/images/image4.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-三生活用品类&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#三生活用品类&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;三、生活用品类&lt;/h2&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-31-通用&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#31-通用&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;3.1 通用&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;40公分宽度的保鲜膜一大卷，以及封口夹，能够大大延长食物的保存期限。&lt;/li&gt;
&lt;li&gt;打火机、太阳能点火器、火柴、充气点火器（充气瓶）、镁棒打火石、放大镜&lt;/li&gt;
&lt;li&gt;充电宝/充电线（充电宝最好带太阳能充电或者支持手摇充电、容量选1万以上，充电线最好是三插头，避免插头损坏）&lt;/li&gt;
&lt;li&gt;哨子 或 扩音喇叭&lt;/li&gt;
&lt;li&gt;无电式手电筒，最好带SOS求救闪烁功能&lt;/li&gt;
&lt;li&gt;蜡烛&lt;/li&gt;
&lt;li&gt;瓦斯气炉（即卡式炉）+6罐气&lt;/li&gt;
&lt;li&gt;白酒（火源、消毒等备用目的）&lt;/li&gt;
&lt;li&gt;热水壶（电、火烧）、保溫杯&lt;/li&gt;
&lt;li&gt;多功能组合刀具，推荐瑞士军刀 。&lt;/li&gt;
&lt;li&gt;如果近视，至少有一副冗余的框架眼镜。&lt;/li&gt;
&lt;li&gt;常见的灯泡，灯板替换装&lt;/li&gt;
&lt;li&gt;你家需要的各种型号电池
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;1号，热水器、燃气灶常见；&lt;/li&gt;
&lt;li&gt;2号，某些门禁；&lt;/li&gt;
&lt;li&gt;5号，最常用之一，建议多储备；&lt;/li&gt;
&lt;li&gt;7号，最常用之二，且容量比5号少，建议多储备；&lt;/li&gt;
&lt;li&gt;CR2032 纽扣电池。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;厨具 （以下为最低配置）
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;电饭锅&lt;/li&gt;
&lt;li&gt;炒锅汤锅各一口（通用火源，无涂层，电磁炉可用）&lt;/li&gt;
&lt;li&gt;不锈钢锅铲、长柄汤勺&lt;/li&gt;
&lt;li&gt;洗洁精，洗碗布，钢丝球&lt;/li&gt;
&lt;li&gt;菜刀、万用刀、剪刀、刨皮刀、菜板、简易磨刀器&lt;/li&gt;
&lt;li&gt;罐头开罐器&lt;/li&gt;
&lt;li&gt;一次性餐具（碗/碟/勺子或叉子）足够套（停电停水时节水用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-32-卫生&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#32-卫生&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;3.2 卫生&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;牙膏3支&lt;/li&gt;
&lt;li&gt;洗发液2瓶&lt;/li&gt;
&lt;li&gt;香皂8块、沐浴露、肥皂&lt;/li&gt;
&lt;li&gt;卫生纸25包 （建议卷纸，单位体积下更耐用）&lt;/li&gt;
&lt;li&gt;洗衣液4袋&lt;/li&gt;
&lt;li&gt;洗面奶3支&lt;/li&gt;
&lt;li&gt;花露水3瓶（喷雾型，首选带避蚊胺的，不过孕妇慎用）&lt;/li&gt;
&lt;li&gt;垃圾袋100只&lt;/li&gt;
&lt;li&gt;厨房用洗洁精、油污清洗剂、管道疏通&lt;/li&gt;
&lt;li&gt;电蚊香，驱蚊液（避蚊胺）&lt;/li&gt;
&lt;li&gt;84消毒液或者二氧化氯泡腾片，后者单位体积更小，更耐储，可飲用水消毒&lt;/li&gt;
&lt;li&gt;紫外线消毒灯（带臭氧适用范围广），365波長紫外手電筒，檢驗黃曲霉污染&lt;/li&gt;
&lt;li&gt;指甲刀&lt;/li&gt;
&lt;li&gt;电动理发工具&lt;/li&gt;
&lt;li&gt;一次性手套（清洁用）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-33-女生&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#33-女生&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;3.3 女生&lt;/h3&gt;

&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-34-婴儿&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#34-婴儿&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;3.4 婴儿&lt;/h3&gt;

&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-四医用药品类&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#四医用药品类&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;四、医用药品类&lt;/h2&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-41-常规&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#41-常规&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;4.1 常规&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;&lt;strong&gt;家庭医用包、应急医疗包&lt;/strong&gt; （内容物参照DIN 13164标准（机动车急救包），包含弹性绷带，三角巾，一次性手套，急救毯，剪刀，多种尺寸的创可贴，伤口敷料等）&lt;/li&gt;
&lt;li&gt;酒精，体积分数 66-75% 。如无，可以高度白酒代替。&lt;/li&gt;
&lt;li&gt;医用棉签和纱布若干、医用镊子及医用棉球&lt;/li&gt;
&lt;li&gt;创可贴&lt;/li&gt;
&lt;li&gt;碘伏棉签&lt;/li&gt;
&lt;li&gt;体温计&lt;/li&gt;
&lt;li&gt;葡萄糖，糖盐水&lt;/li&gt;
&lt;li&gt;血压计、血糖仪及血糖试纸&lt;/li&gt;
&lt;li&gt;云南白药喷雾&lt;/li&gt;
&lt;li&gt;一次性手套&lt;/li&gt;
&lt;li&gt;风油精、十滴水（防止中暑）&lt;/li&gt;
&lt;li&gt;口罩，大人小孩的，要有N95的 1860 或者 9123&lt;/li&gt;
&lt;li&gt;(可选)止血带，或者乳胶管&lt;/li&gt;
&lt;li&gt;(可选)医用护目镜或者医用隔离面罩&lt;/li&gt;
&lt;li&gt;(可选)血氧仪&lt;/li&gt;
&lt;li&gt;(可选)呼吸机&lt;/li&gt;
&lt;li&gt;(可选) CELOX或类似的止血粉，以及粘有止血粉的三角巾。&lt;/li&gt;
&lt;li&gt;(可选)氧气罐头&lt;/li&gt;
&lt;li&gt;(可选)雾化机（贵的 雾化效果过好的 别买超声波雾化类型的）&lt;/li&gt;
&lt;li&gt;(可选)雾化机面罩&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-42-药品&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#42-药品&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;4.2 药品&lt;/h3&gt;
&lt;p dir=&quot;auto&quot;&gt;药物使用前务必认真研读说明书，如果有任何疑问，请以专业医师的建议为准。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;越小的婴幼儿家庭用药越需谨慎，务必事先征询儿科医师的建议。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-421-常规药物-otc&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#421-常规药物-otc&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;4.2.1 常规药物 (OTC)&lt;/h4&gt;
&lt;p dir=&quot;auto&quot;&gt;关于常备药，可以参看这个  &lt;a href=&quot;https://drive.google.com/file/d/15F4Cgv7RpkPiz5V8YIcvds4ueWIpS3a6/view?usp=sharing&quot; rel=&quot;nofollow&quot;&gt;PDF文档&lt;/a&gt;  有更为详细的说明。&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;布洛芬退烧，止疼&lt;/li&gt;
&lt;li&gt;头疼粉退烧，止疼（注1）&lt;/li&gt;
&lt;li&gt;对乙酰氨基酚（泰诺林）退烧&lt;/li&gt;
&lt;li&gt;美林（小儿布洛芬）小孩退烧  （最好是小瓶装 多准备几瓶）&lt;/li&gt;
&lt;li&gt;妈咪爱（小儿益生菌）小孩止泻&lt;/li&gt;
&lt;li&gt;奥美拉唑胃炎&lt;/li&gt;
&lt;li&gt;氯雷他定/西替利嗪/氯苯那敏缓解过敏状态&lt;/li&gt;
&lt;li&gt;蒙脱石散止泻（吸附药，无此药时可换为同类陶土）&lt;/li&gt;
&lt;li&gt;正露丸/盐酸小檗碱止泻（抗菌药）&lt;/li&gt;
&lt;li&gt;口服补液盐治疗急性腹泻脱水&lt;/li&gt;
&lt;li&gt;益生菌（双歧杆菌等）调节肠道菌群，改善便秘、腹泻等症状&lt;/li&gt;
&lt;li&gt;盐酸特比萘芬                     杀皮肤病真菌（轻症买外用，严重买口服）&lt;/li&gt;
&lt;li&gt;铝碳酸镁片胃酸相关的胃部不适&lt;/li&gt;
&lt;li&gt;复方醋酸地塞米松乳膏皮肤瘙痒&lt;/li&gt;
&lt;li&gt;红霉素软膏皮肤感染和轻度烫伤&lt;/li&gt;
&lt;li&gt;多酶片消化不良，便秘&lt;/li&gt;
&lt;li&gt;复方氨酚烷胺片缓解感冒症状&lt;/li&gt;
&lt;li&gt;维生素C维生素缺乏（纯制剂，常备）（注2）&lt;/li&gt;
&lt;li&gt;复合维生素B维生素缺乏（纯制剂，常备）（注2）&lt;/li&gt;
&lt;li&gt;碘伏消毒液皮肤消毒&lt;/li&gt;
&lt;li&gt;百多邦外用抗菌&lt;/li&gt;
&lt;li&gt;Nulax(乐康片)/开塞露便秘&lt;/li&gt;
&lt;li&gt;西地碘片        口腔类炎症&lt;/li&gt;
&lt;li&gt;口服补液盐腹泻、感冒时补水（可以用盐、糖自配）（注3）&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;注1&lt;/strong&gt;：阿司匹林、咖啡因、对乙酰氨基酚复方，也有片剂“复方对乙酰氨基酚片”，可手动组合取代）&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;注2&lt;/strong&gt;：复合维生素、矿物质维生素缺乏（日常用，推荐多维元素片 (21) 或任何药店自有品牌）價格虛高，有效劑量低&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;注3&lt;/strong&gt;：ORS 为重要腹泻药物。补水是腹泻的第一应对方案，对降低全球小儿腹泻死亡率起关键作用&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;使用自有品牌及通用名药物时价格不高，且有效剂量“低”是符合膳食推荐避免过量&lt;/p&gt;
&lt;h4 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-422-处方药rx&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#422-处方药rx&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;4.2.2 处方药(Rx)&lt;/h4&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;抗生素&lt;/strong&gt;&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;阿莫西林抗生素&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B7%A6%E6%B0%A7%E6%B0%9F%E6%B2%99%E6%98%9F&quot; rel=&quot;nofollow&quot;&gt;左氧氟沙星&lt;/a&gt;细菌性腹泻，呼吸道、泌尿生殖道感染&lt;/li&gt;
&lt;li&gt;阿奇霉素呼吸道、泌尿生殖道感染&lt;/li&gt;
&lt;li&gt;阿奇霉素（冲剂 儿童） 消炎&lt;/li&gt;
&lt;li&gt;甲硝唑片口腔炎、咽炎，阴道炎&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;慢性病用药：建议根据家里老人平时用药，直接多开1个月的量。有的处方药自己也买不了。不少城市自从2020之后，一次可开几周甚至几个月的药。&lt;/strong&gt;&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;心血管：阿司匹林、波立维、硝酸甘油、速效救心丸、复方丹参滴丸&lt;/li&gt;
&lt;li&gt;糖尿病：胰岛素，格华止、捷诺达、捷诺维、拜糖平&lt;/li&gt;
&lt;li&gt;高血压：拜新同、洛丁新&lt;/li&gt;
&lt;li&gt;高血脂：立普妥，&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;需要注意的相关疾病&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;心脑血管疾病：包括高血压病、糖尿病，以及冠状动脉硬化性心脏病、脑梗死&lt;/li&gt;
&lt;li&gt;消化系统疾病：慢性胃炎、消化性溃疡&lt;/li&gt;
&lt;li&gt;骨病：骨质疏松症、骨关节病&lt;/li&gt;
&lt;li&gt;精神系统疾病：焦虑症、抑郁症、睡眠障碍&lt;/li&gt;
&lt;li&gt;呼吸系统疾病：慢性支气管炎、慢性阻塞性肺病&lt;/li&gt;
&lt;li&gt;其他疾病：阿尔茨海默病、白内障、外周血管疾病，还有颈椎病、慢性疼痛、慢性肾炎、痛风、高尿酸血症、肝硬化、肿瘤，以及衰弱、肌少症、营养不良等疾病&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-423-老人相关&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#423-老人相关&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;4.2.3 老人相关&lt;/h4&gt;
&lt;p dir=&quot;auto&quot;&gt;给老人傻瓜式配药&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;购买关键词&lt;/strong&gt;：配药盒&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;配药频率&lt;/strong&gt;：提前1周，准备下一周，或者下两周&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;优势&lt;/strong&gt;：早中晚吃什么药，安排明白，不吃错。子女不在可以撑一撑
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;/toutiaoio/A-Guide-To-Stockpiling/blob/main/images/image7.png&quot;&gt;&lt;img src=&quot;/toutiaoio/A-Guide-To-Stockpiling/raw/main/images/image7.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;老人急症必备：&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;制氧机：哮喘，呼吸道疾病，或年龄偏大的，可以备着。&lt;/p&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-43保健品&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#43保健品&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;4.3保健品&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;维生素A.B.C.D.E维生素&lt;/li&gt;
&lt;li&gt;膳食纤维(洋车前子壳粉,菊粉)改善便秘,补充膳食纤维,防止肛裂&lt;/li&gt;
&lt;li&gt;蛋白质补充剂(分离乳清蛋白等)长期隔离可能引起蛋白质缺乏&lt;/li&gt;
&lt;li&gt;低聚果糖少量补充预防便秘&lt;/li&gt;
&lt;li&gt;芦荟胶囊少量补充预防便秘&lt;/li&gt;
&lt;li&gt;鱼油补充必须脂肪酸&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;非常时期缺乏运动，便秘是健康的头号杀手，如果因为便秘引起肛裂在非常时期很难去医院进行处理。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;对于一般人而言，维生素和微量元素的补充还是更建议使用预先配置好的元素片。不建议分开购买各种维生素和微量元素。不然每天早上配药都是一种痛苦。对于没有接触过相关知识的人而言很难掌握剂量。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content--其它待讨论---&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#-其它待讨论---&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;–== 其它待讨论 ==--&lt;/h2&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-开车及野外&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#开车及野外&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;开车及野外&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;指南针&lt;/li&gt;
&lt;li&gt;全波段短波收音机，Ham（业余无线电爱好者）可准备短波电台&lt;/li&gt;
&lt;li&gt;自卫武器（撬棍、防狼喷雾、消防斧、工兵铲、充电可录音扩音喇叭）&lt;/li&gt;
&lt;li&gt;旮旯应急电源，家用小型发电机&lt;/li&gt;
&lt;li&gt;应急救生哨  可吹出高频求救信号 （2.1中已包含此项）&lt;/li&gt;
&lt;li&gt;搬运物品用的买菜车、平板车等&lt;/li&gt;
&lt;li&gt;逃生绳索、8字环、野外高空穿戴全身或半身&lt;/li&gt;
&lt;li&gt;三角架、支架配挂钩和绳子组合&lt;/li&gt;
&lt;li&gt;千斤顶&lt;/li&gt;
&lt;li&gt;拆卸螺丝刀、万用螺丝套装&lt;/li&gt;
&lt;li&gt;拖车绳&lt;/li&gt;
&lt;li&gt;应急启动电源/ 柴油发电机&lt;/li&gt;
&lt;li&gt;折叠摔棒&lt;/li&gt;
&lt;li&gt;紧急破窗器（预防大水、掉水里）&lt;/li&gt;
&lt;li&gt;帐篷&lt;/li&gt;
&lt;li&gt;多功能兵工铲&lt;/li&gt;
&lt;li&gt;防寒毯，防曬毯&lt;/li&gt;
&lt;li&gt;游泳眼镜、口罩（火灾逃生用)&lt;/li&gt;
&lt;li&gt;防烟面罩，车载灭火器（放前座储备箱，出事故的话去后座来不及拿，求生工具存放位置同理）&lt;/li&gt;
&lt;li&gt;极限防疫物资；3M 面罩配合7093滤盒，能使用很长时间直到闻到异味，能用1个月以上&lt;/li&gt;
&lt;li&gt;太阳能充电宝，220V那种以便不时之需&lt;/li&gt;
&lt;li&gt;大剪钳，能剪断铁丝网围栏那种，有的时候被困真的受不了就得挺而冒险突围，建议配合大白衣服一起用&lt;/li&gt;
&lt;li&gt;男生武器；野猪长矛，铁锤，救生斧头，冰凿，潜水刀，棒球棍&lt;/li&gt;
&lt;li&gt;女生武器；硬塑料伸缩棍,射钢珠的弹弓（备多几条皮筋）&lt;/li&gt;
&lt;li&gt;睡袋，防潮垫&lt;/li&gt;
&lt;li&gt;对讲机配套，能长于15城市公里以上通信距离最好&lt;/li&gt;
&lt;li&gt;净水药片，生命吸管&lt;/li&gt;
&lt;li&gt;液压钳，无线切机&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aa15da1476e74af56df84fc14a2b7ec9</guid>
<title>手撕spring核心源码，彻底搞懂spring流程</title>
<link>https://toutiao.io/k/vzyeicl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;strong&gt;引子&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;十几年前，刚工作不久的程序员还能过着很轻松的日子。记得那时候公司里有些开发和测试的女孩子，经常有问题解决不了的，不管什么领域的问题找到我，我都能帮她们解决。但是那时候我没有主动学习技术的意识，只是满足于解决问题，错过了能力提升最好的阶段。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;老公是个截然相反的类型，我就看他天天在宿舍里学习。学来学去也就那样了。他不陪我玩，我虽然心里不乐意，但是还好那时候未卜先知：知道自己能生一个长的帅、和我兴趣相投、天天粘我，我在他旁边他睡觉都能笑出声的儿子，就忍下了。我就自己学学历史、文学，出去上个外语培训班，什么感兴趣学什么。就是正经工作中的东西不学。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;后来才发现自己犯了多大一个错误：没有尽早建立一个系统性的知识体系和思维，还影响了思维上的连续性和逻辑性。武侠故事里一夜得到神功是骗人的，功夫还在平时。老公看似做了十几年长进不大的事，基础却非常扎实，有功力。但是如果他能头脑再活络些，掌握要领，可以事半功倍。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;很多朋友想学习Spring，总是很快地从入门到放弃。原因是头脑中没有框架，学到的东西没有索引，最终被深藏于记忆深处。本文通过手撕spring核心源码的方式，旨在让大家可以在头脑中形成一个spring框架，然后自己在工作中可以带着问题翻看源码，给这个框架添枝加叶，最终形成了一个饱满的spring知识体系。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本文整体采用由浅入深的逻辑结构。侧重于面向于平时工作或学习中用spring写过业务代码的朋友。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;HelloWorld版本Spring启动代码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有些朋友可能写过或者见过ClassPathXmlApplicationContext、AnnotationConfigApplicationContext，它们都是常见的spring容器或者是上下文。既然说到这里，就先来解释什么是spring容器，什么是spring上下文。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Spring的核心就是容器，负责对象的整个生命周期：创建、管理、销毁程序执行过程中需要的对象。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Spring容器又分为两种类型：第一种是BeanFactory，最简单的容器，只能提供基本的DI功能）另一种是:继承了BeanFactory后派生而来的ApplicationContext，被称之为Spring上下文。能提供更多企业级的服务。咱们最常用的还是基于&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484928&amp;amp;idx=1&amp;amp;sn=dc3ce3b2f4c76cb712d384843e241cc8&amp;amp;chksm=fafdecaecd8a65b83f622d170c5ebd328c7b8071a935a19c768e9ebe8632db20588f0fb6d9f2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;IOC(控制反转)&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;IOC(控制反转)&lt;/a&gt;的上下文容器。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;现在SpringBoot使用的很多，所以今天咱们手撕的主要是实现 AnnotationConfigApplicationContext 这个注解上下文的原理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;咱们开始手撕。参照下面咱们用 spring 的方法，首先要有一个上下文将配置参数传入，然后有一个 getBean 可以获取对象来使用。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2583404619332763&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbibibIMrEvjhZ3VdPn0TFsXVMfzKcQgGfJTicIe9cZ1toDIbG6NVibAJBDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1169&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那咱们就根据这两个特质自己写一个类，要点如下图1和2两步。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3797814207650273&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbERJaCePj0icCibiakScX4MXYTfT7ho8ibDeouwmmGT3icjjODnPrOgBZLMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1098&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;既然需要将configClass配置类作为参数传入，就先来构造一个空的配置类。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.44135429262394194&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLb1IUKNldf370YYblu3YgrQWAq7xuPgucbZztJW0g1oQMlibn2WdTrC7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;827&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这样从表面上，就可以像使用AnnotationConfigApplicationContext一样使用Spring容器了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.18028643639427128&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLboFhMh2t4acevBW8UsVdEBCLVgiawYFIOyNQuNtvd8F0ZHPbxNxLvdDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1187&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了标注重点和屏蔽用户终端差异带来的文章阅读体验差异，这里我直接用的截图。代码文字在 https://github.com/xiexiaojing/yuna 里可以找到。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;手撕Spring扫描流程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所谓HelloWorld版本就是除了入门，其他没有任何作用。咱们希望它可以实现自动扫描文件夹下的带有@Component注解的Bean完成注入。首先自己来新建一个@Component注解：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5866666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbrE2v13f0Se7ibBX9T8vFlWWjhISk9rEbqc5r2A1hMUiblHDEofnkD1Gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;并在UserService中使用这个注解：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.616969696969697&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbA3YmdibtcJ0pPLKWwez74AibKgwibH0xdYE5PwdzckG3dn0gN01Vk2icrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;825&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，Component注解是用来扫描的，那还得来定义一个扫描注解，就是把Component注解复制一份，改个名字：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5538461538461539&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbkcqIq08UjezzA4xfzKBkWReuv4Efia1gbem4Y5GUXdUtpTj4FuJSgbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;780&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;ComponentScan这个注解要加在YunaConfig上，通过它来加载扫描配置：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.631079478054567&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbbpTHJSgRy9fUicSXzXbysB7zKhhRzGuCwvMMU2MPlgr24oYUEicC5ZjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;843&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;咱们再回到YunaApplicationContext，配置类定义完之后，咱们下一步上下文就来解析它：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3013888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbGDibvj11EoVCvspM7cCOBicOCZHQWjT4eiaic7rD94eyxZUatU5mysHxOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1440&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这时候咱们回到main方法，运行结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3055303717135086&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbF9kOapibj1ibX34xmFIiao0pFOfgDYyssGoqXJ1Nk1g8b6LUkvOCraNgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1103&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;咱们拿到了解析路径，但是UserService这个Bean还是空的。重点来了，下面的代码要注意看:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7034482758620689&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbPVC4kjexSAMDoDLyDO1l4KXHIcEuS7MeR3tzMtbUWOuDbPBCZNia5eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1015&quot;/&gt;&lt;/p&gt;&lt;p&gt;上面首先使用hutool工具扫描path得到包下类的集合，然后从集合中过滤留下使用了Component注解的class。是不是还挺简单的？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，这里类还没有被实例化，所以这里只是打印一下类名看看效果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6573576799140709&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbvCH6HJFaldic6ianHEXFLrFImJnP50OVfmO1rfpxwBQtzYLwPHwtX0mw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;931&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从结果可以看到类已经获取到了。下一步实例化。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;手撕Spring实例化对象流程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;实例化对象，主要有两种作用域。一种是单例的，一种是多例的。这又要给用户选择了。给用户选择的地方都是通过注解。再将Component注解类复制一份，改名叫Scope。value默认是singleon，单例。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5990338164251208&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbczkFdgzFoyRF0CGl4IN4ytg5FAicyhia5V3Fvz2k0XibibNLibe3B4mStdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;实例化对象需要一个容器来存放，首先要定义一个对象BeanDefination来存放对象的描述：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5026041666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLb30MzMMIPsHXkK4auj9RmIlWH302zWib2VBcEbE5tkhzjZicNpzKXGg9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;768&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;每个class对应一个BeanDefination，存放到一个map容器中：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6234269119070668&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbMRMJ2ECibKNljOfK0knFwbItucYjt0dBJOBUjgTqRZMH6rA6RFbAMEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1033&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;要获取实例的时候需要判断是否是单例的，单例的就用一个map存起来下次获取时直接用，不是单例就直接实例化。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7230419977298524&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbvP8WibbySBchfic50NVRlz2JkNqibqxvpXmftUIrNiapanovA0xUiaTH0nQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;881&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;运行看看效果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.32114467408585057&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbkxdjsREI0ARONcxTdmR80iaXPS7Urn2vFrOEG7RTu4ibBic4mBcHnuDFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这次不是null，而是具体的实例了。但是咱们不满足于用getBean获取呀，下面咱们来看怎么自动注入。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;手撕Spring依赖注入流程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先来定义ige标识注入的注解Autowired:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5238095238095238&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbjAExarnbIJhsKJnbz4YvLicuEpwwAnQSK3P8xiasH71KiaSXvhuUJ8S4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;882&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;再任意定义一个Bean做注入测试：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6495132127955494&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbVF2nibv9FyPhwqhtjiaYJa2oORDFnH8BZjhIBoQ6lw918eVibZDzkzxCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;719&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;注入到UserService对象中：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4385786802030457&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLb4NicBD7GQ5NZ3BFJxYu8aAJhjaib3N6Ba4uQFyqv7L884esDqw9icnWJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;985&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;把newInstance实例化的地方单独提取一个方法，实例化时获取类是否有Autowired注解的，有的化先实例化它：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.806609547123623&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbP0IEH22ky6uRXyc1jic50G0vVkSH620c1aScvNicPnTibxUGhwibrS0mbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;817&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;测试效果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.39747899159663863&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibb5Oar2gXrgFMSpjfyEhLbEouZ9ibtoyW3sEtmMGlQAV3nIiac8IzAmPm6udsRGJaT4E83LIAHzOkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1190&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这里面的代码咱们在平时业务开发中常用，我也没多解释。大家有没有感觉整个流程就像做业务开发一样顺畅。其实写底层容器就是这样，原理了解了一点都不难。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;大家说完这篇之后建议读读其他spring的文章，试试是不是有了深层的理解？&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;&lt;span&gt;编程一生&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;因为公众号平台更改了推送规则，如果不想错过内容，记得读完点一下“在看”，加个“星标”，这样每次新文章推送才会第一时间出现在你的订阅列表里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486113&amp;amp;idx=1&amp;amp;sn=f3623b2cf257aa37ea83768fd4325762&amp;amp;chksm=fafde00fcd8a691928c66f7e484ab2b7f6fa7797dc32833a7f777bb4ebde58c010750f13c118&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;PDCA方法论&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;PDCA方法论&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;，检查自己是否错过更新：每周三晚上8点左右，我都会更新文章，如果你没有收到，记得点开【编程一生】公众号找一下(*^▽^*)。如果没有找到，那可能是像本周一样，我记错了日子(꒦_꒦)&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>61b04eba2ac7d41307509bb06fc67b8c</guid>
<title>万字长文，教你用go开发区块链应用</title>
<link>https://toutiao.io/k/3f3i7ey</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大概 2 年前，碰巧学习区&lt;/span&gt;&lt;span&gt;块链（Hyperledger Fabric），便写了一个入门级的项目放在 GitHub 上，公众号有不少读者是通过这个项目关注到我的，也经常问我，有没有区块链这方面的学习资料，有没有这个项目的详细讲解，如何搭建一个区块链网络，林林总总。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于这些问题，我每次的回复都一样，学习资料我倒是没有，但是 &lt;span&gt;官方文档&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 就是最好的资料了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过今天，我想还是通过这篇文章来记录一下我对之前区块链学习的一次总结吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对了，这个项目的地址是：&lt;span&gt;https://github.com/togettoyou/fabric-realty&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; ，有帮助的话点个 star &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmcBicwFPEXicFnAic2FjKXE14hTZK9fRa0xyNYlVh5WTUKzlJvkrCABYI93GG3MHTcTsgqricSEE4rJaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmcBicwFPEXicFnAic2FjKXE14hTZK9fRa0xyNYlVh5WTUKzlJvkrCABYI93GG3MHTcTsgqricSEE4rJaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ub8Xn54XTmcBicwFPEXicFnAic2FjKXE14hTZK9fRa0xyNYlVh5WTUKzlJvkrCABYI93GG3MHTcTsgqricSEE4rJaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;预警：为了照顾到更多读者，本篇尽量从新手的视角出发，可能会有很多特别基础的内容，对于已经懂的部分，选择跳过即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再次预警：文章内容有点长，请耐心看，最好跟着一起动手实践，如果中途发现了错误之处，欢迎告知我。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;技术栈&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，以下这些我提到的技术要求你事先稍微学习掌握一下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、yaml 文件的编写&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意一下几个规则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;大小写敏感&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用缩进表示层级关系&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缩进不允许使用 tab，只允许空格&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缩进的空格数不重要，只要相同层级的元素左对齐即可&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;#&lt;/code&gt; 表示注释&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 用来建立锚点，&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 表示合并到当前数据，&lt;code&gt;*&lt;/code&gt; 用来引用锚点&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、Docker 和 Docker Compose&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，可以将应用以及所需要的环境一起打包到一个轻量级、可移植的容器中，从而可以快速交付软件。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Docker Compose 是用来定义和运行多容器的工具。可以通过 yaml 文件来配置应用程序需要的所有服务。说白了，就是批量管理 Docker 容器。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续区块链的节点以及应用程序的部署我们都会使用 Docker Compose 来管理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、 go 语言&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的项目包括本篇文章的示例都是使用 go 语言开发的，虽然 fabric 也提供了 Java，nodejs，python 等语言的 SDK ，但个人还是比较推荐 go 语言，毕竟 fabric 自身也是 go 实现的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;题外话：以上这些技能除了在 fabric 区块链体系中需掌握，在如今火热的云原生技术下也一样是基础。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;区块链基础知识&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、什么是区块&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Block&lt;/code&gt; ，每个区块记录着上一个区块的 &lt;code&gt;hash&lt;/code&gt; 值、本区块中的交易集合、本区块的 &lt;code&gt;hash&lt;/code&gt; 等基础数据。由于每个区块都有上一区块的 &lt;code&gt;hash&lt;/code&gt; 值，区块间由这个值两两串联，形成了区块链。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、什么是区块链&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Blockchain&lt;/code&gt; ，最早起源于比特币的底层技术，并在其后不断演进发展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区块链本质上就是一个多方共享的&lt;strong&gt;分布式账本&lt;/strong&gt;技术，用来记录网络上发生的所有交易。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而其中&lt;strong&gt;去中心化&lt;/strong&gt;的概念，是因为账本信息会被复制到许多网络参与者中，每个参与者都在&lt;strong&gt;协作&lt;/strong&gt;维护账本，不像传统应用的数据被中心管理着。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外信息只能以附加的方式记录到账本上，并使用加密技术保证一旦将交易添加到账本就无法修改。这种&lt;strong&gt;不可修改&lt;/strong&gt;的属性简化了信息的溯源，因为参与者可以确定信息在记录后没有改变过。所以区块链有时也被称为&lt;strong&gt;证明系统&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、什么是公链、联盟链和私链&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区块链分为公有链、联盟链、私有链三种基本类型。其中：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;完全去中心化：公链，人人都可以参与，就像比特币（挖矿相当于在记账）。主要采取工作量证明机制(POW)、权益证明机制(POS)、股份授权证明机制(DPOS)等方式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;部分去中心化：联盟链，参与者是指定的。联盟链可以是几家公司共同拥有的链，也可能是几个国家共同承认的链。这是后续发展的趋势。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;中心化：私链，写入权限仅在一个组织手里的区块链，仅对特定的团队、组织或者个人开放。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、什么是交易&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Transaction&lt;/code&gt; ，区块链接收的数据称之为交易。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、什么是智能合约&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Smart contract&lt;/code&gt;，为了支持以同样的方式更新信息，并实现一整套账本功能（交易，查询等），区块链使用智能合约来提供对账本的受控访问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;智能合约不仅是在网络中封装和简化信息的关键机制，它还可以被编写成自动执行参与者的特定交易的合约。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，可以编写智能合约以规定运输物品的成本，其中运费根据物品到达的速度而变化。根据双方同意并写入账本的条款，当收到物品时，相应的资金会自动转手。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通俗易懂点，智能合约就是按照大家约定好的规则编写的业务逻辑代码实现，然后只能通过这些合约来操作区块链网络这个账本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6、什么是共识&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;保持账本在整个网络中同步的过程称为共识。该过程确保账本仅在交易被相应参与者批准时才会更新，并且当账本更新时，它们以相同的顺序更新相同的交易。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Hyperledger Fabric 基础知识&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、什么是 Hyperledger Fabric&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Linux 基金会于 2015 年创建了 Hyperledger（超级账本）项目，而 Hyperledger Fabric 是其中一个用 Go 语言实现的版本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hyperledger Fabric 网络的成员只能从可信赖的成员服务提供者（MSP） 注册，也就是说 Hyperledger Fabric 搭建的区块链是一种联盟链。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hyperledger Fabric 的账本包括两个组件： 世界状态和交易日志。并且每个参与者都拥有他们所属的每个 Hyperledger Fabric 网络的账本的副本。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;世界状态：描述了在给定时间点的账本的状态。它是账本的数据库。默认情况下，使用 LevelDB 键值存储数据库，可插拔，可替换为 CouchDB 。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;交易日志：记录产生世界状态中当前值的所有交易。这是世界状态的更新历史。它只记录区块链网络使用账本数据库前后的值。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结：Hyperledger Fabric 是一种账本技术，其账本包括世界状态数据库和交易日志历史记录。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、什么是联盟&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;联盟指参与一个基于区块链的业务协作或业务交易网络的所有组织的集合，一个联盟一般包含多个组织。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般由联盟发起方或运营方创建 &lt;code&gt;Orderer&lt;/code&gt; 排序节点，并负责交易排序、区块产生和达成共识。联盟发起方或运营方邀请各个组织实例加入联盟，进而创建通道。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、什么是组织&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;组织代表的是参与区块链网络的企业、政府机构、团体等实体。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个组织实例主要包含如下节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;CA&lt;/code&gt; ：区块链节点类型之一，全称 Certificate Authority ，数字证书颁发机构，负责组织内部成员的 &lt;code&gt;register&lt;/code&gt; 和 &lt;code&gt;enroll&lt;/code&gt; 等，为该组织的区块链用户生成和颁发数字证书。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;Peer&lt;/code&gt; ：区块链节点类型之一，负责保存和记录账本数据、对交易背书、运行智能合约等。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、什么是节点&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;节点（Peers）是区块链的通信实体。它只是一个逻辑功能，只要能在“信任域”中分组并与控制它们的逻辑实体相关联，就可以将不同类型的多个节点运行在同一个物理服务器上，比如用 Docker 部署。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;Orderer&lt;/code&gt; 排序服务节点 或 排序节点：Orderer 是一个运行实现交付担保的通信服务节点，例如原子性或总顺序广播。排序节点负责接受交易并排序（排序算法有: SOLO，KAFKA，RAFT，PBFT），最后将排序好的交易按照配置中的约定整理为区块之后提交给记账节点进行处理。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;Peer&lt;/code&gt; 节点：Peer 是业务参与方组织在区块链网络中所拥有的参与共识和账本记录的节点。可以有多种角色。作为 &lt;code&gt;Committing Peer&lt;/code&gt; 记账节点时，无需安装链码，只负责验证从 Orderer 发出的区块和交易的合法性、并存储账本区块信息。作为 &lt;code&gt;Endorsing Peer&lt;/code&gt; 背书节点时，必须安装链码，在交易时需进行签名背书。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;Anchor&lt;/code&gt; 锚节点：为了实现高可用，每个参与方组织一般包含两个或多个 &lt;code&gt;Peer&lt;/code&gt; 节点，可以设置其中的一个为 &lt;code&gt;Anchor&lt;/code&gt; ，与区块链网络中的其他组织进行信息同步。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;客户端节点：客户端扮演了代表最终用户的实体，可以同时与 &lt;code&gt;Peer&lt;/code&gt; 和 &lt;code&gt;Orderer&lt;/code&gt; 通信，创建并调用交易。这里客户端可以指应用程序、SDK、命令行等。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、什么是通道&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hyperledger Fabric 中的通道（&lt;code&gt;Channel&lt;/code&gt;）是两个或两个以上特定网络成员之间通信的专用“子网”，用于进行私有和机密的交易。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以理解为组织间拉了个群聊，这个群聊就是通道，在里面聊天交易，一个联盟链中可以有多个群聊（通道），一个组织可以加入多个群聊，每个群聊可以代表一项具体的业务，有自身对应的一套账本，群聊间互不干扰，互相隔离。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6、什么是链码&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hyperledger Fabric 的智能合约用链码（&lt;code&gt;Chaincode&lt;/code&gt;）编写。在大多数情况下，链码只与账本的数据库即世界状态交互，而不与交易日志交互。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链码可以用多种编程语言实现。有 Go、Node.js 和 Java 链码等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;搭建区块链网络&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基础知识过完，接下来就到了本篇核心的项目实战环节。首先是搭建一个区块链网络，只需按照下面几个顺序，一步步来就行（推荐在 Linux 或 MacOS 下操作）：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、下载 fabric 二进制工具&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以 &lt;code&gt;v1.4.12&lt;/code&gt; 版本为例， fabric 二进制工具的下载地址在：&lt;span&gt;https://github.com/hyperledger/fabric/releases/tag/v1.4.12&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自行根据你的系统环境下载对应的包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中几个主要的工具说明：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;cryptogen&lt;/code&gt; ：用来生成 Hyperledger Fabric 密钥材料的工具，这个过程是静态的。&lt;code&gt;cryptogen&lt;/code&gt; 工具通过一个包含网络拓扑的 &lt;code&gt;crypto-config.yaml&lt;/code&gt; 文件，为所有组织和属于这些组织的组件生成一组证书和秘钥。&lt;code&gt;cryptogen&lt;/code&gt; 适合用于测试开发环境，在生产环境建议使用动态的 CA 服务。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;configtxgen&lt;/code&gt; ：用于创建和查看排序节点的创世区块、通道配置交易等相关的工具。&lt;code&gt;configtxgen&lt;/code&gt; 使用 &lt;code&gt;configtx.yaml&lt;/code&gt; 文件来定义网络配置。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;configtxlator&lt;/code&gt;：fabric 中 &lt;code&gt;Protobuf&lt;/code&gt; 和 &lt;code&gt;JSON&lt;/code&gt; 格式转换的工具，fabric 中任何的使用 &lt;code&gt;Protobuf&lt;/code&gt; 定义的类型，都可使用该工具进行转换。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;peer&lt;/code&gt;：peer 命令有 5 个不同的子命令，每个命令都可以让指定的 peer 节点执行特定的一组任务。比如，可以使用子命令 &lt;code&gt;peer channel&lt;/code&gt; 让一个 peer 节点加入通道，或者使用 &lt;code&gt;peer chaincode&lt;/code&gt; 命令把智能合约链码部署到 peer 节点上。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、将 fabric 二进制工具添加到环境变量&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了后续方便使用命令，可以将第 1 步下载的工具添加到系统环境变量中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;export&lt;/span&gt; PATH=&lt;span&gt;${PWD}&lt;/span&gt;/hyperledger-fabric-linux-amd64-1.4.12/bin:&lt;span&gt;$PATH&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、生成证书和秘钥&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将使用 &lt;code&gt;cryptogen&lt;/code&gt; 工具生成各种加密材料（ x509 证书和签名秘钥）。这些证书是身份的代表，在实体相互通信和交易的时候，可以对其身份进行签名和验证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先创建 &lt;code&gt;crypto-config.yaml&lt;/code&gt; 文件，定义网络拓扑，为所有组织和属于这些组织的组件（也就是节点）生成一组证书和秘钥，内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 排序节点的组织定义&lt;/span&gt;&lt;br/&gt;&lt;span&gt;OrdererOrgs:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Name:&lt;/span&gt; &lt;span&gt;QQ&lt;/span&gt; &lt;span&gt;# 名称&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Domain:&lt;/span&gt; &lt;span&gt;qq.com&lt;/span&gt; &lt;span&gt;# 域名&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Specs:&lt;/span&gt; &lt;span&gt;# 节点域名：orderer.qq.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Hostname:&lt;/span&gt; &lt;span&gt;orderer&lt;/span&gt; &lt;span&gt;# 主机名&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# peer节点的组织定义&lt;/span&gt;&lt;br/&gt;&lt;span&gt;PeerOrgs:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# Taobao-组织&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Name:&lt;/span&gt; &lt;span&gt;Taobao&lt;/span&gt; &lt;span&gt;# 名称&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Domain:&lt;/span&gt; &lt;span&gt;taobao.com&lt;/span&gt; &lt;span&gt;# 域名&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Template:&lt;/span&gt; &lt;span&gt;# 使用模板定义。Count 指的是该组织下组织节点的个数&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;Count:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;# 节点域名：peer0.taobao.com 和 peer1.taobao.com&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Users:&lt;/span&gt; &lt;span&gt;# 组织的用户信息。Count 指该组织中除了 Admin 之外的用户的个数&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;Count:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;# 用户：Admin 和 User1&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;# JD-组织&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Name:&lt;/span&gt; &lt;span&gt;JD&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Domain:&lt;/span&gt; &lt;span&gt;jd.com&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Template:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;Count:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;# 节点域名：peer0.jd.com 和 peer1.jd.com&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Users:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;Count:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;# 用户：Admin 和 User1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着执行 &lt;code&gt;cryptogen generate&lt;/code&gt; 命令，生成结果将默认保存在 &lt;code&gt;crypto-config&lt;/code&gt; 文件夹中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; cryptogen generate --config=./crypto-config.yaml&lt;/span&gt;&lt;br/&gt;taobao.com&lt;br/&gt;jd.com&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看看在 &lt;code&gt;crypto-config&lt;/code&gt; 文件夹里生成了什么：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; tree crypto-config&lt;/span&gt;&lt;br/&gt;crypto-config&lt;br/&gt;├── ordererOrganizations&lt;br/&gt;│   └── qq.com&lt;br/&gt;│       ├── ca&lt;br/&gt;│       │   ├── 3e41f960bb5a3002a1e436e9079311d79cf8846c2ad2a09080ea8575e16bb5b7_sk&lt;br/&gt;│       │   └── ca.qq.com-cert.pem&lt;br/&gt;│       ├── msp&lt;br/&gt;│       │   ├── admincerts&lt;br/&gt;│       │   │   └── Admin@qq.com-cert.pem&lt;br/&gt;│       │   ├── cacerts&lt;br/&gt;│       │   │   └── ca.qq.com-cert.pem&lt;br/&gt;│       │   └── tlscacerts&lt;br/&gt;│       │       └── tlsca.qq.com-cert.pem&lt;br/&gt;│       ├── orderers&lt;br/&gt;│       │   └── orderer.qq.com&lt;br/&gt;│       │       ├── msp&lt;br/&gt;│       │       │   ├── admincerts&lt;br/&gt;│       │       │   │   └── Admin@qq.com-cert.pem&lt;br/&gt;│       │       │   ├── cacerts&lt;br/&gt;│       │       │   │   └── ca.qq.com-cert.pem&lt;br/&gt;│       │       │   ├── keystore&lt;br/&gt;│       │       │   │   └── 6bd45f78877b96cfbcd040262ee4c808bd6d894cabfed44552fb7c22d6d427d1_sk&lt;br/&gt;│       │       │   ├── signcerts&lt;br/&gt;│       │       │   │   └── orderer.qq.com-cert.pem&lt;br/&gt;│       │       │   └── tlscacerts&lt;br/&gt;│       │       │       └── tlsca.qq.com-cert.pem&lt;br/&gt;│       │       └── tls&lt;br/&gt;│       │           ├── ca.crt&lt;br/&gt;│       │           ├── server.crt&lt;br/&gt;│       │           └── server.key&lt;br/&gt;│       ├── tlsca&lt;br/&gt;│       │   ├── bd48b5360c82ce5beeb31dea1b7e8e7918a5e7246d3f8892889fe1b2efadc1aa_sk&lt;br/&gt;│       │   └── tlsca.qq.com-cert.pem&lt;br/&gt;│       └── users&lt;br/&gt;│           └── Admin@qq.com&lt;br/&gt;│               ├── msp&lt;br/&gt;│               │   ├── admincerts&lt;br/&gt;│               │   │   └── Admin@qq.com-cert.pem&lt;br/&gt;│               │   ├── cacerts&lt;br/&gt;│               │   │   └── ca.qq.com-cert.pem&lt;br/&gt;│               │   ├── keystore&lt;br/&gt;│               │   │   └── f28c1ed4c67fd438a891e420a2e53b20352bdf40907a0a8ee39095505475c99f_sk&lt;br/&gt;│               │   ├── signcerts&lt;br/&gt;│               │   │   └── Admin@qq.com-cert.pem&lt;br/&gt;│               │   └── tlscacerts&lt;br/&gt;│               │       └── tlsca.qq.com-cert.pem&lt;br/&gt;│               └── tls&lt;br/&gt;│                   ├── ca.crt&lt;br/&gt;│                   ├── client.crt&lt;br/&gt;│                   └── client.key&lt;br/&gt;└── peerOrganizations&lt;br/&gt;    ├── jd.com&lt;br/&gt;    │   ├── ca&lt;br/&gt;    │   │   ├── 5672a9717fd943d0dcd2269ea1700c10309ad49d16b849e9c6e24225deafceb5_sk&lt;br/&gt;    │   │   └── ca.jd.com-cert.pem&lt;br/&gt;    │   ├── msp&lt;br/&gt;    │   │   ├── admincerts&lt;br/&gt;    │   │   │   └── Admin@jd.com-cert.pem&lt;br/&gt;    │   │   ├── cacerts&lt;br/&gt;    │   │   │   └── ca.jd.com-cert.pem&lt;br/&gt;    │   │   └── tlscacerts&lt;br/&gt;    │   │       └── tlsca.jd.com-cert.pem&lt;br/&gt;    │   ├── peers&lt;br/&gt;    │   │   ├── peer0.jd.com&lt;br/&gt;    │   │   │   ├── msp&lt;br/&gt;    │   │   │   │   ├── admincerts&lt;br/&gt;    │   │   │   │   │   └── Admin@jd.com-cert.pem&lt;br/&gt;    │   │   │   │   ├── cacerts&lt;br/&gt;    │   │   │   │   │   └── ca.jd.com-cert.pem&lt;br/&gt;    │   │   │   │   ├── keystore&lt;br/&gt;    │   │   │   │   │   └── 012700eb44d6e19becb63c944e685a18d69ea9f1120aaa45fe549236c6a90fb6_sk&lt;br/&gt;    │   │   │   │   ├── signcerts&lt;br/&gt;    │   │   │   │   │   └── peer0.jd.com-cert.pem&lt;br/&gt;    │   │   │   │   └── tlscacerts&lt;br/&gt;    │   │   │   │       └── tlsca.jd.com-cert.pem&lt;br/&gt;    │   │   │   └── tls&lt;br/&gt;    │   │   │       ├── ca.crt&lt;br/&gt;    │   │   │       ├── server.crt&lt;br/&gt;    │   │   │       └── server.key&lt;br/&gt;    │   │   └── peer1.jd.com&lt;br/&gt;    │   │       ├── msp&lt;br/&gt;    │   │       │   ├── admincerts&lt;br/&gt;    │   │       │   │   └── Admin@jd.com-cert.pem&lt;br/&gt;    │   │       │   ├── cacerts&lt;br/&gt;    │   │       │   │   └── ca.jd.com-cert.pem&lt;br/&gt;    │   │       │   ├── keystore&lt;br/&gt;    │   │       │   │   └── b1e81b66080705595f5e56cc8d78575b0e935b79c8f674001e46cae452a71f32_sk&lt;br/&gt;    │   │       │   ├── signcerts&lt;br/&gt;    │   │       │   │   └── peer1.jd.com-cert.pem&lt;br/&gt;    │   │       │   └── tlscacerts&lt;br/&gt;    │   │       │       └── tlsca.jd.com-cert.pem&lt;br/&gt;    │   │       └── tls&lt;br/&gt;    │   │           ├── ca.crt&lt;br/&gt;    │   │           ├── server.crt&lt;br/&gt;    │   │           └── server.key&lt;br/&gt;    │   ├── tlsca&lt;br/&gt;    │   │   ├── f4c7d0b660575f383d189696480bf559f312d798eb0352c9102f8be6ecde52d6_sk&lt;br/&gt;    │   │   └── tlsca.jd.com-cert.pem&lt;br/&gt;    │   └── users&lt;br/&gt;    │       ├── Admin@jd.com&lt;br/&gt;    │       │   ├── msp&lt;br/&gt;    │       │   │   ├── admincerts&lt;br/&gt;    │       │   │   │   └── Admin@jd.com-cert.pem&lt;br/&gt;    │       │   │   ├── cacerts&lt;br/&gt;    │       │   │   │   └── ca.jd.com-cert.pem&lt;br/&gt;    │       │   │   ├── keystore&lt;br/&gt;    │       │   │   │   └── d7f476884ff36a19aa7100c63aa30f8f378cc5ec826ca58977539e1c9c6b22df_sk&lt;br/&gt;    │       │   │   ├── signcerts&lt;br/&gt;    │       │   │   │   └── Admin@jd.com-cert.pem&lt;br/&gt;    │       │   │   └── tlscacerts&lt;br/&gt;    │       │   │       └── tlsca.jd.com-cert.pem&lt;br/&gt;    │       │   └── tls&lt;br/&gt;    │       │       ├── ca.crt&lt;br/&gt;    │       │       ├── client.crt&lt;br/&gt;    │       │       └── client.key&lt;br/&gt;    │       └── User1@jd.com&lt;br/&gt;    │           ├── msp&lt;br/&gt;    │           │   ├── admincerts&lt;br/&gt;    │           │   │   └── User1@jd.com-cert.pem&lt;br/&gt;    │           │   ├── cacerts&lt;br/&gt;    │           │   │   └── ca.jd.com-cert.pem&lt;br/&gt;    │           │   ├── keystore&lt;br/&gt;    │           │   │   └── e83862c8e78509f2a4362d3282214421179fa47f3d655f75cb3539d5534f7494_sk&lt;br/&gt;    │           │   ├── signcerts&lt;br/&gt;    │           │   │   └── User1@jd.com-cert.pem&lt;br/&gt;    │           │   └── tlscacerts&lt;br/&gt;    │           │       └── tlsca.jd.com-cert.pem&lt;br/&gt;    │           └── tls&lt;br/&gt;    │               ├── ca.crt&lt;br/&gt;    │               ├── client.crt&lt;br/&gt;    │               └── client.key&lt;br/&gt;    └── taobao.com&lt;br/&gt;        ├── ca&lt;br/&gt;        │   ├── 4a31791b9fade54ab70496f03169707f6b9643c04d1bc734da15b0c625628865_sk&lt;br/&gt;        │   └── ca.taobao.com-cert.pem&lt;br/&gt;        ├── msp&lt;br/&gt;        │   ├── admincerts&lt;br/&gt;        │   │   └── Admin@taobao.com-cert.pem&lt;br/&gt;        │   ├── cacerts&lt;br/&gt;        │   │   └── ca.taobao.com-cert.pem&lt;br/&gt;        │   └── tlscacerts&lt;br/&gt;        │       └── tlsca.taobao.com-cert.pem&lt;br/&gt;        ├── peers&lt;br/&gt;        │   ├── peer0.taobao.com&lt;br/&gt;        │   │   ├── msp&lt;br/&gt;        │   │   │   ├── admincerts&lt;br/&gt;        │   │   │   │   └── Admin@taobao.com-cert.pem&lt;br/&gt;        │   │   │   ├── cacerts&lt;br/&gt;        │   │   │   │   └── ca.taobao.com-cert.pem&lt;br/&gt;        │   │   │   ├── keystore&lt;br/&gt;        │   │   │   │   └── 914648b8c4dc4783b0505a22b5c7630e424c3cf8dd54e2fe05b47dc321a4e61b_sk&lt;br/&gt;        │   │   │   ├── signcerts&lt;br/&gt;        │   │   │   │   └── peer0.taobao.com-cert.pem&lt;br/&gt;        │   │   │   └── tlscacerts&lt;br/&gt;        │   │   │       └── tlsca.taobao.com-cert.pem&lt;br/&gt;        │   │   └── tls&lt;br/&gt;        │   │       ├── ca.crt&lt;br/&gt;        │   │       ├── server.crt&lt;br/&gt;        │   │       └── server.key&lt;br/&gt;        │   └── peer1.taobao.com&lt;br/&gt;        │       ├── msp&lt;br/&gt;        │       │   ├── admincerts&lt;br/&gt;        │       │   │   └── Admin@taobao.com-cert.pem&lt;br/&gt;        │       │   ├── cacerts&lt;br/&gt;        │       │   │   └── ca.taobao.com-cert.pem&lt;br/&gt;        │       │   ├── keystore&lt;br/&gt;        │       │   │   └── 3eef8defc07afb547e94f08702a5b30807d2e2a672e3d437bfb54dd1590b0fa7_sk&lt;br/&gt;        │       │   ├── signcerts&lt;br/&gt;        │       │   │   └── peer1.taobao.com-cert.pem&lt;br/&gt;        │       │   └── tlscacerts&lt;br/&gt;        │       │       └── tlsca.taobao.com-cert.pem&lt;br/&gt;        │       └── tls&lt;br/&gt;        │           ├── ca.crt&lt;br/&gt;        │           ├── server.crt&lt;br/&gt;        │           └── server.key&lt;br/&gt;        ├── tlsca&lt;br/&gt;        │   ├── 296a941f625974153aa5ab6cf57b0933023aaa13b0e4363a7378e5c527de26a1_sk&lt;br/&gt;        │   └── tlsca.taobao.com-cert.pem&lt;br/&gt;        └── users&lt;br/&gt;            ├── Admin@taobao.com&lt;br/&gt;            │   ├── msp&lt;br/&gt;            │   │   ├── admincerts&lt;br/&gt;            │   │   │   └── Admin@taobao.com-cert.pem&lt;br/&gt;            │   │   ├── cacerts&lt;br/&gt;            │   │   │   └── ca.taobao.com-cert.pem&lt;br/&gt;            │   │   ├── keystore&lt;br/&gt;            │   │   │   └── a2af975d659f77182b2aca318321797d281036f085dda9799ab79b6400e5e970_sk&lt;br/&gt;            │   │   ├── signcerts&lt;br/&gt;            │   │   │   └── Admin@taobao.com-cert.pem&lt;br/&gt;            │   │   └── tlscacerts&lt;br/&gt;            │   │       └── tlsca.taobao.com-cert.pem&lt;br/&gt;            │   └── tls&lt;br/&gt;            │       ├── ca.crt&lt;br/&gt;            │       ├── client.crt&lt;br/&gt;            │       └── client.key&lt;br/&gt;            └── User1@taobao.com&lt;br/&gt;                ├── msp&lt;br/&gt;                │   ├── admincerts&lt;br/&gt;                │   │   └── User1@taobao.com-cert.pem&lt;br/&gt;                │   ├── cacerts&lt;br/&gt;                │   │   └── ca.taobao.com-cert.pem&lt;br/&gt;                │   ├── keystore&lt;br/&gt;                │   │   └── c65d45e1c7e1070e3f1b00bd8ac41e91d2bfaea10a769d75b9599590791ccc02_sk&lt;br/&gt;                │   ├── signcerts&lt;br/&gt;                │   │   └── User1@taobao.com-cert.pem&lt;br/&gt;                │   └── tlscacerts&lt;br/&gt;                │       └── tlsca.taobao.com-cert.pem&lt;br/&gt;                └── tls&lt;br/&gt;                    ├── ca.crt&lt;br/&gt;                    ├── client.crt&lt;br/&gt;                    └── client.key&lt;br/&gt;&lt;br/&gt;109 directories, 101 files&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结：在这个环节中，我们假设 &lt;code&gt;QQ&lt;/code&gt; 作为一个运营方，提供了 1 个 Orderer 节点 &lt;code&gt;orderer.qq.com&lt;/code&gt; 来创建联盟链的基础设施， 而 &lt;code&gt;Taobao&lt;/code&gt; 和 &lt;code&gt;JD&lt;/code&gt; 则是作为组织成员加入到链中，各自提供 2 个 Peer 节点 &lt;code&gt;peer0.xx.com&lt;/code&gt; 和 &lt;code&gt;peer1.xx.com&lt;/code&gt; 参与工作，以及还各自创建了 2 个组织用户 &lt;code&gt;Admin&lt;/code&gt; 和 &lt;code&gt;User1&lt;/code&gt; 。然后我们使用 &lt;code&gt;crypto-config.yaml&lt;/code&gt; 文件和 &lt;code&gt;cryptogen&lt;/code&gt; 工具为其定义所需要的证书文件以供后续使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、创建排序通道创世区块&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以使用 &lt;code&gt;configtx.yaml&lt;/code&gt; 文件和 &lt;code&gt;configtxgen&lt;/code&gt; 工具轻松地创建通道的配置。&lt;code&gt;configtx.yaml&lt;/code&gt; 文件可以以易于理解和编辑的 &lt;code&gt;yaml&lt;/code&gt; 格式来构建通道配置所需的信息。&lt;code&gt;configtxgen&lt;/code&gt; 工具通过读取 &lt;code&gt;configtx.yaml&lt;/code&gt; 文件中的信息，将其转成 Fabric 可以读取的 &lt;code&gt;protobuf&lt;/code&gt; 格式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来创建 &lt;code&gt;configtx.yaml&lt;/code&gt; 文件，内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 定义组织机构实体&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Organizations:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&amp;amp;QQ&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Name:&lt;/span&gt; &lt;span&gt;QQ&lt;/span&gt; &lt;span&gt;# 组织的名称&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ID:&lt;/span&gt; &lt;span&gt;QQMSP&lt;/span&gt; &lt;span&gt;# 组织的 MSPID&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;MSPDir:&lt;/span&gt; &lt;span&gt;crypto-config/ordererOrganizations/qq.com/msp&lt;/span&gt; &lt;span&gt;#组织的证书相对位置（生成的crypto-config目录)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&amp;amp;Taobao&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Name:&lt;/span&gt; &lt;span&gt;Taobao&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ID:&lt;/span&gt; &lt;span&gt;TaobaoMSP&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;MSPDir:&lt;/span&gt; &lt;span&gt;crypto-config/peerOrganizations/taobao.com/msp&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AnchorPeers:&lt;/span&gt; &lt;span&gt;# 组织锚节点的配置&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Host:&lt;/span&gt; &lt;span&gt;peer0.taobao.com&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;Port:&lt;/span&gt; &lt;span&gt;7051&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&amp;amp;JD&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Name:&lt;/span&gt; &lt;span&gt;JD&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ID:&lt;/span&gt; &lt;span&gt;JDMSP&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;MSPDir:&lt;/span&gt; &lt;span&gt;crypto-config/peerOrganizations/jd.com/msp&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AnchorPeers:&lt;/span&gt; &lt;span&gt;# 组织锚节点的配置&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Host:&lt;/span&gt; &lt;span&gt;peer0.jd.com&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;Port:&lt;/span&gt; &lt;span&gt;7051&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 定义了排序服务的相关参数，这些参数将用于创建创世区块&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Orderer:&lt;/span&gt; &lt;span&gt;&amp;amp;OrdererDefaults&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 排序节点类型用来指定要启用的排序节点实现，不同的实现对应不同的共识算法&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;OrdererType:&lt;/span&gt; &lt;span&gt;solo&lt;/span&gt; &lt;span&gt;# 共识机制&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;Addresses:&lt;/span&gt; &lt;span&gt;# Orderer 的域名（用于连接）&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;orderer.qq.com:7050&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;BatchTimeout:&lt;/span&gt; &lt;span&gt;2s&lt;/span&gt; &lt;span&gt;# 出块时间间隔&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;BatchSize:&lt;/span&gt; &lt;span&gt;# 用于控制每个block的信息量&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;MaxMessageCount:&lt;/span&gt; &lt;span&gt;10&lt;/span&gt; &lt;span&gt;#每个区块的消息个数&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AbsoluteMaxBytes:&lt;/span&gt; &lt;span&gt;99&lt;/span&gt; &lt;span&gt;MB&lt;/span&gt; &lt;span&gt;#每个区块最大的信息大小&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;PreferredMaxBytes:&lt;/span&gt; &lt;span&gt;512&lt;/span&gt; &lt;span&gt;KB&lt;/span&gt; &lt;span&gt;#每个区块包含的一条信息最大长度&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;Organizations:&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 定义Peer组织如何与应用程序通道交互的策略&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 默认策略：所有Peer组织都将能够读取数据并将数据写入账本&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Application:&lt;/span&gt; &lt;span&gt;&amp;amp;ApplicationDefaults&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;Organizations:&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 用来定义用于 configtxgen 工具的配置入口&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 将 Profile 参数（ TwoOrgsOrdererGenesis 或 TwoOrgsChannel ）指定为 configtxgen 工具的参数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Profiles:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;#  TwoOrgsOrdererGenesis配置文件用于创建系统通道创世块&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;#  该配置文件创建一个名为SampleConsortium的联盟&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;#  该联盟在configtx.yaml文件中包含两个Peer组织Taobao和JD&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;TwoOrgsOrdererGenesis:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Orderer:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span&gt;*OrdererDefaults&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;Organizations:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;*QQ&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Consortiums:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;SampleConsortium:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;Organizations:&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;-&lt;/span&gt; &lt;span&gt;*Taobao&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;-&lt;/span&gt; &lt;span&gt;*JD&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 使用TwoOrgsChannel配置文件创建应用程序通道&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;TwoOrgsChannel:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Consortium:&lt;/span&gt; &lt;span&gt;SampleConsortium&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Application:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span&gt;*ApplicationDefaults&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;Organizations:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;*Taobao&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;*JD&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行 &lt;code&gt;configtxgen&lt;/code&gt; 命令，并指定 Profile 为 &lt;code&gt;TwoOrgsOrdererGenesis&lt;/code&gt; 参数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./config/genesis.block -channelID firstchannel&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;排序区块是排序服务的创世区块，通过以上命令就可以预先生成创世区块的 &lt;code&gt;protobuf&lt;/code&gt; 格式的配置文件 &lt;code&gt;./config/genesis.block&lt;/code&gt; 了。这一步也是为后续做准备用的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、创建通道配置交易&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们需要继续使用 &lt;code&gt;configtxgen&lt;/code&gt; 根据去创建通道的交易配置，和第 4 步不同的是，这次需要指定 Profile 为 &lt;code&gt;TwoOrgsChannel&lt;/code&gt; 参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成通道配置事务 &lt;code&gt;./config/appchannel.tx&lt;/code&gt; ：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./config/appchannel.tx -channelID appchannel&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为 &lt;code&gt;Taobao&lt;/code&gt; 组织定义锚节点，生成 &lt;code&gt;./config/TaobaoAnchor.tx&lt;/code&gt; ：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./config/TaobaoAnchor.tx -channelID appchannel -asOrg Taobao&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为 &lt;code&gt;JD&lt;/code&gt; 组织定义锚节点，生成 &lt;code&gt;./config/JDAnchor.tx&lt;/code&gt; ：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./config/JDAnchor.tx -channelID appchannel -asOrg JD&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这一步也是为后续使用做准备的。不过至此，需要准备的配置都齐了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来看看现在 &lt;code&gt;config&lt;/code&gt; 文件夹都有什么：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; tree config&lt;/span&gt;&lt;br/&gt;config&lt;br/&gt;├── JDAnchor.tx&lt;br/&gt;├── TaobaoAnchor.tx&lt;br/&gt;├── appchannel.tx&lt;br/&gt;└── genesis.block&lt;br/&gt;&lt;br/&gt;0 directories, 4 files&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6、创建并启动各组织的节点&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们说过：我们假设 &lt;code&gt;QQ&lt;/code&gt; 作为一个运营方，提供了 1 个 Orderer 节点 &lt;code&gt;orderer.qq.com&lt;/code&gt; 来创建联盟链的基础设施， 而 &lt;code&gt;Taobao&lt;/code&gt; 和 &lt;code&gt;JD&lt;/code&gt; 则是作为组织成员加入到链中，各自提供 2 个 Peer 节点 &lt;code&gt;peer0.xx.com&lt;/code&gt; 和 &lt;code&gt;peer1.xx.com&lt;/code&gt; 参与工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在这些组织及其节点所需要的配置已经准备好了。我们接下来就可以使用 Docker Compose 来模拟启动这些节点服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于这些节点之间需要互相通信，所以我们需要将这些节点都放入到一个 Docker 网络中，以 &lt;code&gt;fabric_network&lt;/code&gt; 为例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;docker-compose.yaml&lt;/code&gt; 的内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;version:&lt;/span&gt; &lt;span&gt;&#x27;2.1&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;orderer.qq.com:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer0.taobao.com:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer1.taobao.com:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer0.jd.com:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer1.jd.com:&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;fabric_network:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;fabric_network&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;services:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 排序服务节点&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;orderer.qq.com:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;container_name:&lt;/span&gt; &lt;span&gt;orderer.qq.com&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;hyperledger/fabric-orderer:1.4.12&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;GODEBUG=netdns=go&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;ORDERER_GENERAL_LISTENADDRESS=0.0.0.0&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;ORDERER_GENERAL_GENESISMETHOD=file&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/config/genesis.block&lt;/span&gt; &lt;span&gt;# 注入创世区块&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;ORDERER_GENERAL_LOCALMSPID=QQMSP&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/orderer/msp&lt;/span&gt; &lt;span&gt;# 证书相关&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;command:&lt;/span&gt; &lt;span&gt;orderer&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;7050:7050&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;volumes:&lt;/span&gt; &lt;span&gt;# 挂载由cryptogen和configtxgen生成的证书文件以及创世区块&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./config/genesis.block:/etc/hyperledger/config/genesis.block&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./crypto-config/ordererOrganizations/qq.com/orderers/orderer.qq.com/:/etc/hyperledger/orderer&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;orderer.qq.com:/var/hyperledger/production/orderer&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;fabric_network&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;#  Taobao 组织 peer0 节点&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer0.taobao.com:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;extends:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;file:&lt;/span&gt; &lt;span&gt;docker-compose-base.yaml&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;service:&lt;/span&gt; &lt;span&gt;peer-base&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;container_name:&lt;/span&gt; &lt;span&gt;peer0.taobao.com&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_ID=peer0.taobao.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_LOCALMSPID=TaobaoMSP&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_ADDRESS=peer0.taobao.com:7051&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;7051:7051&quot;&lt;/span&gt; &lt;span&gt;# grpc服务端口&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;7053:7053&quot;&lt;/span&gt; &lt;span&gt;# eventhub端口&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./crypto-config/peerOrganizations/taobao.com/peers/peer0.taobao.com:/etc/hyperledger/peer&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;peer0.taobao.com:/var/hyperledger/production&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;orderer.qq.com&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;#  Taobao 组织 peer1 节点&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer1.taobao.com:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;extends:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;file:&lt;/span&gt; &lt;span&gt;docker-compose-base.yaml&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;service:&lt;/span&gt; &lt;span&gt;peer-base&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;container_name:&lt;/span&gt; &lt;span&gt;peer1.taobao.com&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_ID=peer1.taobao.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_LOCALMSPID=TaobaoMSP&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_ADDRESS=peer1.taobao.com:7051&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;17051:7051&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;17053:7053&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./crypto-config/peerOrganizations/taobao.com/peers/peer1.taobao.com:/etc/hyperledger/peer&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;peer1.taobao.com:/var/hyperledger/production&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;orderer.qq.com&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;#  JD 组织 peer0 节点&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer0.jd.com:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;extends:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;file:&lt;/span&gt; &lt;span&gt;docker-compose-base.yaml&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;service:&lt;/span&gt; &lt;span&gt;peer-base&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;container_name:&lt;/span&gt; &lt;span&gt;peer0.jd.com&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_ID=peer0.jd.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_LOCALMSPID=JDMSP&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_ADDRESS=peer0.jd.com:7051&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;27051:7051&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;27053:7053&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./crypto-config/peerOrganizations/jd.com/peers/peer0.jd.com:/etc/hyperledger/peer&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;peer0.jd.com:/var/hyperledger/production&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;orderer.qq.com&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;#  JD 组织 peer1 节点&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer1.jd.com:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;extends:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;file:&lt;/span&gt; &lt;span&gt;docker-compose-base.yaml&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;service:&lt;/span&gt; &lt;span&gt;peer-base&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;container_name:&lt;/span&gt; &lt;span&gt;peer1.jd.com&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_ID=peer1.jd.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_LOCALMSPID=JDMSP&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_ADDRESS=peer1.jd.com:7051&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;37051:7051&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;37053:7053&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./crypto-config/peerOrganizations/jd.com/peers/peer1.jd.com:/etc/hyperledger/peer&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;peer1.jd.com:/var/hyperledger/production&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;orderer.qq.com&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;# 客户端节点&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;cli:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;container_name:&lt;/span&gt; &lt;span&gt;cli&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;hyperledger/fabric-tools:1.4.12&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;tty:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# go 环境设置&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;GO111MODULE=auto&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;GOPROXY=https://goproxy.cn&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_ID=cli&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;command:&lt;/span&gt; &lt;span&gt;/bin/bash&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./config:/etc/hyperledger/config&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./crypto-config/peerOrganizations/taobao.com/:/etc/hyperledger/peer/taobao.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./crypto-config/peerOrganizations/jd.com/:/etc/hyperledger/peer/jd.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./../chaincode:/opt/gopath/src/chaincode&lt;/span&gt; &lt;span&gt;# 链码路径注入&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;fabric_network&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;orderer.qq.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;peer0.taobao.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;peer1.taobao.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;peer0.jd.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;peer1.jd.com&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便，这里我还定义了一个 &lt;code&gt;docker-compose-base.yaml&lt;/code&gt; 作为 Peer 节点的公共模板，内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;version:&lt;/span&gt; &lt;span&gt;&#x27;2.1&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;services:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer-base:&lt;/span&gt; &lt;span&gt;# peer的公共服务&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;hyperledger/fabric-peer:1.4.12&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;GODEBUG=netdns=go&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_LOGGING_PEER=info&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_CHAINCODE_LOGGING_LEVEL=INFO&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/msp&lt;/span&gt; &lt;span&gt;# msp证书（节点证书）&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_LEDGER_STATE_STATEDATABASE=goleveldb&lt;/span&gt; &lt;span&gt;# 状态数据库的存储引擎（or CouchDB）&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_network&lt;/span&gt; &lt;span&gt;# docker 网络&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;/var/run/docker.sock:/host/var/run/docker.sock&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;working_dir:&lt;/span&gt; &lt;span&gt;/opt/gopath/src/github.com/hyperledger/fabric&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;command:&lt;/span&gt; &lt;span&gt;peer&lt;/span&gt; &lt;span&gt;node&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;fabric_network&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意观察，在 &lt;code&gt;volumes&lt;/code&gt; 配置项中，我们将 &lt;code&gt;config&lt;/code&gt; 和 &lt;code&gt;crypto-config&lt;/code&gt; 内的配置文件都挂载到相对应的节点中了。并且在 peer 的公共服务中，我们还挂载了 &lt;code&gt;/var/run/docker.sock&lt;/code&gt; 文件，有了该文件，在容器内就可以向其发送 http 请求和 Docker Daemon 通信，通俗理解，就是有了它，就可以在容器内操作宿主机的 Docker 了，比如在容器内控制 Docker 再启动一个容器出来。而这，就是为了后面可以部署智能合约（节点部署链码其实就是启动一个链码容器）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在继续将这些节点服务启动起来：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker-compose up -d&lt;/span&gt;&lt;br/&gt;Creating network &quot;fabric_network&quot; with the default driver&lt;br/&gt;Creating volume &quot;network_orderer.qq.com&quot; with default driver&lt;br/&gt;Creating volume &quot;network_peer0.taobao.com&quot; with default driver&lt;br/&gt;Creating volume &quot;network_peer1.taobao.com&quot; with default driver&lt;br/&gt;Creating volume &quot;network_peer0.jd.com&quot; with default driver&lt;br/&gt;Creating volume &quot;network_peer1.jd.com&quot; with default driver&lt;br/&gt;Creating orderer.qq.com ... done&lt;br/&gt;Creating peer1.taobao.com ... done&lt;br/&gt;Creating peer0.jd.com     ... done&lt;br/&gt;Creating peer1.jd.com     ... done&lt;br/&gt;Creating peer0.taobao.com ... done&lt;br/&gt;Creating cli              ... done&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哦对了，除了必须的节点服务，我还启动了一个 &lt;code&gt;cli&lt;/code&gt; 服务，来自 &lt;code&gt;hyperledger/fabric-tools&lt;/code&gt; 镜像，这个其实就是集成了前面第 1 步提到的 fabric 工具的容器，我们接下来的命令执行就使用这个容器内的工具来完成了，你也可以继续使用自己下载的二进制工具，只是个人觉得环境配置起来会比较麻烦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7、为 &lt;code&gt;cli&lt;/code&gt; 服务配置环境&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们要使用 &lt;code&gt;cli&lt;/code&gt; 服务来执行 &lt;code&gt;peer&lt;/code&gt; 命令，所以要为其先配置一下环境变量，使用四个不同的变量 &lt;code&gt;TaobaoPeer0Cli&lt;/code&gt;、&lt;code&gt;TaobaoPeer1Cli&lt;/code&gt;、&lt;code&gt;JDPeer0Cli&lt;/code&gt;、&lt;code&gt;JDPeer1Cli&lt;/code&gt; ，代表 &lt;code&gt;cli&lt;/code&gt; 服务代表着不同的节点：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; TaobaoPeer0Cli=&lt;span&gt;&quot;CORE_PEER_ADDRESS=peer0.taobao.com:7051 CORE_PEER_LOCALMSPID=TaobaoMSP CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/taobao.com/users/Admin@taobao.com/msp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; TaobaoPeer1Cli=&lt;span&gt;&quot;CORE_PEER_ADDRESS=peer1.taobao.com:7051 CORE_PEER_LOCALMSPID=TaobaoMSP CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/taobao.com/users/Admin@taobao.com/msp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; JDPeer0Cli=&lt;span&gt;&quot;CORE_PEER_ADDRESS=peer0.jd.com:7051 CORE_PEER_LOCALMSPID=JDMSP CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/jd.com/users/Admin@jd.com/msp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; JDPeer1Cli=&lt;span&gt;&quot;CORE_PEER_ADDRESS=peer1.jd.com:7051 CORE_PEER_LOCALMSPID=JDMSP CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/jd.com/users/Admin@jd.com/msp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;8、开始创建通道&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通道主要用于实现区块链网络中业务的隔离。一个联盟中可以有多个通道，每个通道可代表一项业务，并且对应一套账本。通道内的成员为业务参与方（即联盟内的组织），一个组织可以加入多个通道。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们现在有请 &lt;code&gt;Taobao&lt;/code&gt; 组织的 &lt;code&gt;peer0&lt;/code&gt; 节点来创建一个通道 &lt;code&gt;appchannel&lt;/code&gt; ：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$TaobaoPeer0Cli&lt;/span&gt; peer channel create -o orderer.qq.com:7050 -c appchannel -f /etc/hyperledger/config/appchannel.tx&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通道就相当于“群聊”， &lt;code&gt;Taobao&lt;/code&gt; 组织的 &lt;code&gt;peer0&lt;/code&gt; 节点创建了一个名称为 &lt;code&gt;appchannel&lt;/code&gt; 的“群聊”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;9、将所有节点加入通道&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将所有的节点都加入到通道 &lt;code&gt;appchannel&lt;/code&gt; 中（正常是按需加入）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$TaobaoPeer0Cli&lt;/span&gt; peer channel join -b appchannel.block&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$TaobaoPeer1Cli&lt;/span&gt; peer channel join -b appchannel.block&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$JDPeer0Cli&lt;/span&gt; peer channel join -b appchannel.block&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$JDPeer1Cli&lt;/span&gt; peer channel join -b appchannel.block&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时相当于大家都加入到了 &lt;code&gt;appchannel&lt;/code&gt; “群聊”中，之后大家都可以在里面“聊天”了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;10、更新锚节点&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;锚节点是必需的。普通节点只能发现本组织下的其它节点，而锚节点可以跨组织服务发现到其它组织下的节点，建议每个组织都选择至少一个锚节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;利用之前准备好的配置文件，向通道更新锚节点：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$TaobaoPeer0Cli&lt;/span&gt; peer channel update -o orderer.qq.com:7050 -c appchannel -f /etc/hyperledger/config/TaobaoAnchor.tx&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$JDPeer0Cli&lt;/span&gt; peer channel update -o orderer.qq.com:7050 -c appchannel -f /etc/hyperledger/config/JDAnchor.tx&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，&lt;code&gt;Taobao&lt;/code&gt; 和 &lt;code&gt;JD&lt;/code&gt; 组织间的节点就都可以互相发现了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，我们的区块链网络基本已经搭建好了，但是还差最关键的智能合约。一个没有智能合约的通道是没有灵魂的，啥事都做不了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;编写智能合约&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;fabric 的智能合约称为链码，编写智能合约也就是编写链码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链码其实很简单，可以由 Go 、 node.js 、或者 Java 编写，其实只是实现一些预定义的接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以 Go 为例，创建一个 &lt;code&gt;main.go&lt;/code&gt; 文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/hyperledger/fabric/core/chaincode/shim&quot;&lt;/span&gt;&lt;br/&gt; pb &lt;span&gt;&quot;github.com/hyperledger/fabric/protos/peer&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; MyChaincode &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Init 初始化时会执行该方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *MyChaincode)&lt;/span&gt; &lt;span&gt;Init&lt;/span&gt;&lt;span&gt;(stub shim.ChaincodeStubInterface)&lt;/span&gt; &lt;span&gt;pb&lt;/span&gt;.&lt;span&gt;Response&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;链码初始化&quot;&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; shim.Success(&lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Invoke 智能合约的功能函数定义&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *MyChaincode)&lt;/span&gt; &lt;span&gt;Invoke&lt;/span&gt;&lt;span&gt;(stub shim.ChaincodeStubInterface)&lt;/span&gt; &lt;span&gt;pb&lt;/span&gt;.&lt;span&gt;Response&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; funcName, args := stub.GetFunctionAndParameters()&lt;br/&gt; &lt;span&gt;switch&lt;/span&gt; funcName {&lt;br/&gt;&lt;br/&gt; &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(fmt.Sprintf(&lt;span&gt;&quot;没有该功能: %s&quot;&lt;/span&gt;, funcName))&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; err := shim.Start(&lt;span&gt;new&lt;/span&gt;(MyChaincode))&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们定义的 &lt;code&gt;MyChaincode&lt;/code&gt; 结构体实现了 &lt;code&gt;shim.Chaincode&lt;/code&gt; 接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// Chaincode interface must be implemented by all chaincodes. The fabric runs&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// the transactions by calling these functions as specified.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Chaincode &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// Init is called during Instantiate transaction after the chaincode container&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// has been established for the first time, allowing the chaincode to&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// initialize its internal data&lt;/span&gt;&lt;br/&gt; Init(stub ChaincodeStubInterface) pb.Response&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// Invoke is called to update or query the ledger in a proposal transaction.&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// Updated state variables are not committed to the ledger until the&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// transaction is committed.&lt;/span&gt;&lt;br/&gt; Invoke(stub ChaincodeStubInterface) pb.Response&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在启动入口 &lt;code&gt;main&lt;/code&gt; 函数中调用 &lt;code&gt;shim.Start(new(MyChaincode))&lt;/code&gt; 就完成了链码的启动，没错，就是这么简单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道链码其实就是用来处理区块链网络中的成员一致同意的业务逻辑。比如 &lt;code&gt;Taobao&lt;/code&gt; 和 &lt;code&gt;JD&lt;/code&gt; 规定了一个规则，将其编写成链码，后面双方就只能遵循这个规则了，因为链码到时候即部署在你的节点，也会部署在我的节点上，你偷偷改了逻辑，我的节点不会认可你的，这也正是区块链的作用之一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链码的功能定义在 &lt;code&gt;Invoke&lt;/code&gt; 方法中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个简易的示例如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;encoding/json&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;errors&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;strconv&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/hyperledger/fabric/core/chaincode/shim&quot;&lt;/span&gt;&lt;br/&gt; pb &lt;span&gt;&quot;github.com/hyperledger/fabric/protos/peer&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; MyChaincode &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Init 初始化时会执行该方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *MyChaincode)&lt;/span&gt; &lt;span&gt;Init&lt;/span&gt;&lt;span&gt;(stub shim.ChaincodeStubInterface)&lt;/span&gt; &lt;span&gt;pb&lt;/span&gt;.&lt;span&gt;Response&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;链码初始化&quot;&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;// 假设A有1000元，以复合主键 userA 的形式写入账本&lt;/span&gt;&lt;br/&gt; err := WriteLedger(stub, &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}{&lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;A&quot;&lt;/span&gt;, &lt;span&gt;&quot;balance&quot;&lt;/span&gt;: &lt;span&gt;1000&lt;/span&gt;}, &lt;span&gt;&quot;user&quot;&lt;/span&gt;, []&lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;A&quot;&lt;/span&gt;})&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;// 假设B有1000元，以复合主键 userB 的形式写入账本&lt;/span&gt;&lt;br/&gt; err = WriteLedger(stub, &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}{&lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;B&quot;&lt;/span&gt;, &lt;span&gt;&quot;balance&quot;&lt;/span&gt;: &lt;span&gt;1000&lt;/span&gt;}, &lt;span&gt;&quot;user&quot;&lt;/span&gt;, []&lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;B&quot;&lt;/span&gt;})&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; shim.Success(&lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Invoke 智能合约的功能函数定义&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *MyChaincode)&lt;/span&gt; &lt;span&gt;Invoke&lt;/span&gt;&lt;span&gt;(stub shim.ChaincodeStubInterface)&lt;/span&gt; &lt;span&gt;pb&lt;/span&gt;.&lt;span&gt;Response&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; funcName, args := stub.GetFunctionAndParameters()&lt;br/&gt; &lt;span&gt;switch&lt;/span&gt; funcName {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;query&quot;&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; query(stub, args)&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;transfer&quot;&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; transfer(stub, args)&lt;br/&gt; &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(fmt.Sprintf(&lt;span&gt;&quot;没有该功能: %s&quot;&lt;/span&gt;, funcName))&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;query&lt;/span&gt;&lt;span&gt;(stub shim.ChaincodeStubInterface, args []&lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;pb&lt;/span&gt;.&lt;span&gt;Response&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 如果 args 为空，则表示查询所有 user&lt;/span&gt;&lt;br/&gt; results, err := ReadLedger(stub, &lt;span&gt;&quot;user&quot;&lt;/span&gt;, args)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; users []&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; _, result := &lt;span&gt;range&lt;/span&gt; results {&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; user &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err = json.Unmarshal(result, &amp;amp;user); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt;  }&lt;br/&gt;  users = &lt;span&gt;append&lt;/span&gt;(users, user)&lt;br/&gt; }&lt;br/&gt; usersByte, err := json.Marshal(&amp;amp;users)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; shim.Success(usersByte)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;(stub shim.ChaincodeStubInterface, args []&lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;pb&lt;/span&gt;.&lt;span&gt;Response&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 验证参数&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;(args) != &lt;span&gt;3&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(&lt;span&gt;&quot;参数个数不满足&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt; from := args[&lt;span&gt;0&lt;/span&gt;]&lt;br/&gt; to := args[&lt;span&gt;1&lt;/span&gt;]&lt;br/&gt; money, err := strconv.ParseFloat(args[&lt;span&gt;2&lt;/span&gt;], &lt;span&gt;64&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;// 从账本查询 from 用户&lt;/span&gt;&lt;br/&gt; fromResults, err := ReadLedger(stub, &lt;span&gt;&quot;user&quot;&lt;/span&gt;, []&lt;span&gt;string&lt;/span&gt;{from})&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;(fromResults) != &lt;span&gt;1&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(&lt;span&gt;&quot;没有该用户 &quot;&lt;/span&gt; + from)&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; fromUser &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err = json.Unmarshal(fromResults[&lt;span&gt;0&lt;/span&gt;], &amp;amp;fromUser); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;// 从账本查询 to 用户&lt;/span&gt;&lt;br/&gt; toResults, err := ReadLedger(stub, &lt;span&gt;&quot;user&quot;&lt;/span&gt;, []&lt;span&gt;string&lt;/span&gt;{to})&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;(toResults) != &lt;span&gt;1&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(&lt;span&gt;&quot;没有该用户 &quot;&lt;/span&gt; + to)&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; toUser &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err = json.Unmarshal(toResults[&lt;span&gt;0&lt;/span&gt;], &amp;amp;toUser); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;// from 用户扣除余额&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; money &amp;gt; fromUser[&lt;span&gt;&quot;balance&quot;&lt;/span&gt;].(&lt;span&gt;float64&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(&lt;span&gt;&quot;余额不足&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt; fromUser[&lt;span&gt;&quot;balance&quot;&lt;/span&gt;] = fromUser[&lt;span&gt;&quot;balance&quot;&lt;/span&gt;].(&lt;span&gt;float64&lt;/span&gt;) - money&lt;br/&gt; &lt;span&gt;// to 用户增加余额&lt;/span&gt;&lt;br/&gt; toUser[&lt;span&gt;&quot;balance&quot;&lt;/span&gt;] = toUser[&lt;span&gt;&quot;balance&quot;&lt;/span&gt;].(&lt;span&gt;float64&lt;/span&gt;) + money&lt;br/&gt; &lt;span&gt;// 写回账本&lt;/span&gt;&lt;br/&gt; err = WriteLedger(stub, fromUser, &lt;span&gt;&quot;user&quot;&lt;/span&gt;, []&lt;span&gt;string&lt;/span&gt;{from})&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; err = WriteLedger(stub, toUser, &lt;span&gt;&quot;user&quot;&lt;/span&gt;, []&lt;span&gt;string&lt;/span&gt;{to})&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; shim.Error(err.Error())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; shim.Success([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;ok&quot;&lt;/span&gt;))&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; err := shim.Start(&lt;span&gt;new&lt;/span&gt;(MyChaincode))&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// WriteLedger 写入账本&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// obj 为要写入的数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// objectType和keys 共同组成复合主键&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;WriteLedger&lt;/span&gt;&lt;span&gt;(stub shim.ChaincodeStubInterface, obj &lt;span&gt;interface&lt;/span&gt;{}, objectType &lt;span&gt;string&lt;/span&gt;, keys []&lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;//创建复合主键&lt;/span&gt;&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; key &lt;span&gt;string&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; val, err := stub.CreateCompositeKey(objectType, keys); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; errors.New(fmt.Sprintf(&lt;span&gt;&quot;%s-创建复合主键出错 %s&quot;&lt;/span&gt;, objectType, err.Error()))&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  key = val&lt;br/&gt; }&lt;br/&gt; bytes, err := json.Marshal(obj)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; err&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;//写入区块链账本&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err := stub.PutState(key, bytes); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; errors.New(fmt.Sprintf(&lt;span&gt;&quot;%s-写入区块链账本出错: %s&quot;&lt;/span&gt;, objectType, err.Error()))&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ReadLedger 根据复合主键查询账本数据(适合获取全部或指定的数据)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// objectType和keys 共同组成复合主键&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ReadLedger&lt;/span&gt;&lt;span&gt;(stub shim.ChaincodeStubInterface, objectType &lt;span&gt;string&lt;/span&gt;, keys []&lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(results [][]&lt;span&gt;byte&lt;/span&gt;, err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 通过主键从区块链查找相关的数据，相当于对主键的模糊查询&lt;/span&gt;&lt;br/&gt; resultIterator, err := stub.GetStateByPartialCompositeKey(objectType, keys)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errors.New(fmt.Sprintf(&lt;span&gt;&quot;%s-获取全部数据出错: %s&quot;&lt;/span&gt;, objectType, err))&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;defer&lt;/span&gt; resultIterator.Close()&lt;br/&gt;&lt;br/&gt; &lt;span&gt;//检查返回的数据是否为空，不为空则遍历数据，否则返回空数组&lt;/span&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; resultIterator.HasNext() {&lt;br/&gt;  val, err := resultIterator.Next()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errors.New(fmt.Sprintf(&lt;span&gt;&quot;%s-返回的数据出错: %s&quot;&lt;/span&gt;, objectType, err))&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  results = &lt;span&gt;append&lt;/span&gt;(results, val.GetValue())&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; results, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这段链码中，初始化的时候我们假设有用户 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; ，并且都各自有 &lt;code&gt;1000&lt;/code&gt; 元余额，我们在 &lt;code&gt;Invoke&lt;/code&gt; 方法中为其定义了两个功能函数 &lt;code&gt;query&lt;/code&gt; 和 &lt;code&gt;transfer&lt;/code&gt; 。
其中 &lt;code&gt;query&lt;/code&gt; 函数可以查询 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; 或指定用户的余额信息， &lt;code&gt;transfer&lt;/code&gt; 函数可以通过传入转账人，被转账人，金额，三个参数来实现转账功能。例如 &lt;code&gt;{&quot;Args&quot;:[&quot;transfer&quot;,&quot;A&quot;,&quot;B&quot;,&quot;100.0&quot;]}&lt;/code&gt; 代表 &lt;code&gt;A&lt;/code&gt; 向 &lt;code&gt;B&lt;/code&gt; 转账 &lt;code&gt;100&lt;/code&gt; 元。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;部署链码&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将刚刚编写的智能合约也就是链码安装到区块链网络中，同样是借助 &lt;code&gt;cli&lt;/code&gt; 服务，我们在 &lt;code&gt;Taobao&lt;/code&gt; 组织的 &lt;code&gt;peer0&lt;/code&gt; 节点和 &lt;code&gt;JD&lt;/code&gt; 组织的 &lt;code&gt;peer0&lt;/code&gt; 节点上都安装上链码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$TaobaoPeer0Cli&lt;/span&gt; peer chaincode install -n fabric-realty -v 1.0.0 -l golang -p chaincode&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$JDPeer0Cli&lt;/span&gt; peer chaincode install -n fabric-realty -v 1.0.0 -l golang -p chaincode&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 &lt;code&gt;-n&lt;/code&gt; 参数是链码名称，可以自己随便设置，&lt;code&gt;-v&lt;/code&gt; 是链码版本号，&lt;code&gt;-p&lt;/code&gt; 是链码的目录（我们已经将链码挂载到 &lt;code&gt;cli&lt;/code&gt; 容器中了，在 &lt;code&gt;/opt/gopath/src/&lt;/code&gt; 目录下）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链码安装后，还需要实例化后才可以使用，只需要在任意一个节点实例化就可以了，以 &lt;code&gt;Taobao&lt;/code&gt; 组织的 &lt;code&gt;peer0&lt;/code&gt; 节点为例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$TaobaoPeer0Cli&lt;/span&gt; peer chaincode instantiate -o orderer.qq.com:7050 -C appchannel -n fabric-realty -l golang -v 1.0.0 -c &#x27;{\&quot;Args\&quot;:[\&quot;init\&quot;]}&#x27; -P \&quot;AND (&#x27;TaobaoMSP.member&#x27;,&#x27;JDMSP.member&#x27;)\&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实例化链码主要就是传入 &lt;code&gt;{&quot;Args&quot;:[&quot;init&quot;]}&lt;/code&gt; 参数，此时会调用我们编写的 &lt;code&gt;func (c *MyChaincode) Init&lt;/code&gt; 方法，进行链码的初始化。其中 &lt;code&gt;-P&lt;/code&gt; 参数用于指定链码的背书策略，&lt;code&gt;AND (&#x27;TaobaoMSP.member&#x27;,&#x27;JDMSP.member&#x27;)&lt;/code&gt; 代表链码的写入操作需要同时得到 &lt;code&gt;Taobao&lt;/code&gt;和 &lt;code&gt;JD&lt;/code&gt; 组织成员的背书才允许通过。&lt;code&gt;AND&lt;/code&gt; 也可以替换成 &lt;code&gt;OR&lt;/code&gt;，代表任意一组织成员背书即可，更多具体用法，可以去看官方文档。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链码实例化成功之后就会启动链码容器，而启动的方法，就是我们之前提过的 peer 节点服务挂载了 &lt;code&gt;/var/run/docker.sock&lt;/code&gt; 文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看启动的链码容器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker ps -a | awk &lt;span&gt;&#x27;($2 ~ /dev-peer.*fabric-realty.*/) {print $2}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;dev-peer0.taobao.com-fabric-realty-1.0.0-4f127a0415dd835529133a69b480ce24581dd5ddcaf18426ecc1d3dfb02b4670&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为我们使用 &lt;code&gt;Taobao&lt;/code&gt; 组织的 &lt;code&gt;peer0&lt;/code&gt; 节点实例化链码，所以此时还只有这个节点的链码容器启动起来了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以试着使用 &lt;code&gt;cli&lt;/code&gt; 服务去调用链码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$TaobaoPeer0Cli&lt;/span&gt; peer chaincode invoke -C appchannel -n fabric-realty -c &#x27;{\&quot;Args\&quot;:[\&quot;query\&quot;]}&#x27;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;2022-03-22 21:13:40.152 UTC [chaincodeCmd] InitCmdFactory -&amp;gt; INFO 001 Retrieved channel (appchannel) orderer endpoint: orderer.qq.com:7050&lt;br/&gt;2022-03-22 21:13:40.157 UTC [chaincodeCmd] chaincodeInvokeOrQuery -&amp;gt; INFO 002 Chaincode invoke successful. result: status:200 payload:&quot;[{\&lt;br/&gt;&quot;balance\&quot;:1000,\&quot;name\&quot;:\&quot;A\&quot;},{\&quot;balance\&quot;:1000,\&quot;name\&quot;:\&quot;B\&quot;}]&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，使用&lt;code&gt;JD&lt;/code&gt;组织的节点也是可以的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; cli bash -c &lt;span&gt;&quot;&lt;span&gt;$JDPeer0Cli&lt;/span&gt; peer chaincode invoke -C appchannel -n fabric-realty -c &#x27;{\&quot;Args\&quot;:[\&quot;query\&quot;]}&#x27;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;2022-03-22 21:14:45.397 UTC [chaincodeCmd] InitCmdFactory -&amp;gt; INFO 001 Retrieved channel (appchannel) orderer endpoint: orderer.qq.com:7050&lt;br/&gt;2022-03-22 21:14:45.402 UTC [chaincodeCmd] chaincodeInvokeOrQuery -&amp;gt; INFO 002 Chaincode invoke successful. result: status:200 payload:&quot;[{\&lt;br/&gt;&quot;balance\&quot;:1000,\&quot;name\&quot;:\&quot;A\&quot;},{\&quot;balance\&quot;:1000,\&quot;name\&quot;:\&quot;B\&quot;}]&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，因为我们查询了 &lt;code&gt;JD&lt;/code&gt; 组织的 &lt;code&gt;peer0&lt;/code&gt; 节点上的链码，所以对应的链码容器也会启动起来了，再次查看启动的链码容器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker ps -a | awk &lt;span&gt;&#x27;($2 ~ /dev-peer.*fabric-realty.*/) {print $2}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;dev-peer0.jd.com-fabric-realty-1.0.0-5c5e915cdcd47324151383f9619a0ff9a33283d969555e6029aa256cc389ebc9&lt;br/&gt;dev-peer0.taobao.com-fabric-realty-1.0.0-4f127a0415dd835529133a69b480ce24581dd5ddcaf18426ecc1d3dfb02b4670&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，我们的智能合约就成功部署到区块链网络的通道中了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;编写应用程序&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在部署链码之后，我们是使用 &lt;code&gt;cli&lt;/code&gt; 服务去调用的，但这种方式一般只是作为验证使用，更多情况下，应该是我们自己编写应用程序集成 fabric 提供的 &lt;code&gt;SDK&lt;/code&gt; 去调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 语言可以使用官方的 &lt;code&gt;github.com/hyperledger/fabric-sdk-go&lt;/code&gt; 库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个 SDK 使用起来也很简单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步调用其 &lt;code&gt;New&lt;/code&gt; 方法创建一个 &lt;code&gt;FabricSDK&lt;/code&gt; 实例，后续使用这个实例就可以调用操作合约的方法了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// New 根据提供的一组选项初始化 SDK&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ConfigOptions 提供应用程序配置&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;New&lt;/span&gt;&lt;span&gt;(configProvider core.ConfigProvider, opts ...Option)&lt;/span&gt; &lt;span&gt;(*FabricSDK, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; pkgSuite := defPkgSuite{}&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; fromPkgSuite(configProvider, &amp;amp;pkgSuite, opts...)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 &lt;code&gt;configProvider&lt;/code&gt; 可以从 &lt;code&gt;Reader&lt;/code&gt;(实现了&lt;code&gt;io.Reader&lt;/code&gt;接口的实例) 、 &lt;code&gt;File&lt;/code&gt;(文件) 或 &lt;code&gt;Raw&lt;/code&gt;(&lt;code&gt;[]byte&lt;/code&gt;) 获取。我们选择最简单的文件方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个 &lt;code&gt;config.yaml&lt;/code&gt; ，配置如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;version:&lt;/span&gt; &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# GO SDK 客户端配置&lt;/span&gt;&lt;br/&gt;&lt;span&gt;client:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 客户端所属的组织，必须是organizations定义的组织&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;organization:&lt;/span&gt; &lt;span&gt;JD&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 日志级别&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;logging:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;level:&lt;/span&gt; &lt;span&gt;info&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# MSP证书的根路径&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;cryptoconfig:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;path:&lt;/span&gt; &lt;span&gt;/network/crypto-config&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 通道定义&lt;/span&gt;&lt;br/&gt;&lt;span&gt;channels:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;appchannel:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;orderers:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;orderer.qq.com&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;peers:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;peer0.jd.com:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;endorsingPeer:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;chaincodeQuery:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;ledgerQuery:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;eventSource:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;peer1.jd.com:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;endorsingPeer:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;chaincodeQuery:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;ledgerQuery:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;eventSource:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 组织配置&lt;/span&gt;&lt;br/&gt;&lt;span&gt;organizations:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;JD:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;mspid:&lt;/span&gt; &lt;span&gt;&quot;JDMSP&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;cryptoPath:&lt;/span&gt; &lt;span&gt;peerOrganizations/jd.com/users/{username}@jd.com/msp&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;peers:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;peer0.jd.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;peer1.jd.com&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# orderer节点列表&lt;/span&gt;&lt;br/&gt;&lt;span&gt;orderers:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;orderer.qq.com:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;url:&lt;/span&gt; &lt;span&gt;orderer.qq.com:7050&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 传递给gRPC客户端构造函数&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;grpcOptions:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;ssl-target-name-override:&lt;/span&gt; &lt;span&gt;orderer.qq.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-time:&lt;/span&gt; &lt;span&gt;0s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-timeout:&lt;/span&gt; &lt;span&gt;20s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-permit:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;fail-fast:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;allow-insecure:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# peers节点列表&lt;/span&gt;&lt;br/&gt;&lt;span&gt;peers:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# peer节点定义，可以定义多个&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer0.jd.com:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# URL用于发送背书和查询请求&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;url:&lt;/span&gt; &lt;span&gt;peer0.jd.com:7051&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 传递给gRPC客户端构造函数&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;grpcOptions:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;ssl-target-name-override:&lt;/span&gt; &lt;span&gt;peer0.jd.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-time:&lt;/span&gt; &lt;span&gt;0s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-timeout:&lt;/span&gt; &lt;span&gt;20s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-permit:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;fail-fast:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;allow-insecure:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer1.jd.com:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;url:&lt;/span&gt; &lt;span&gt;peer1.jd.com:7051&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;grpcOptions:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;ssl-target-name-override:&lt;/span&gt; &lt;span&gt;peer1.jd.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-time:&lt;/span&gt; &lt;span&gt;0s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-timeout:&lt;/span&gt; &lt;span&gt;20s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-permit:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;fail-fast:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;allow-insecure:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer0.taobao.com:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;url:&lt;/span&gt; &lt;span&gt;peer0.taobao.com:7051&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;grpcOptions:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;ssl-target-name-override:&lt;/span&gt; &lt;span&gt;peer0.taobao.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-time:&lt;/span&gt; &lt;span&gt;0s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-timeout:&lt;/span&gt; &lt;span&gt;20s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-permit:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;fail-fast:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;allow-insecure:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;peer1.taobao.com:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;url:&lt;/span&gt; &lt;span&gt;peer1.taobao.com:7051&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;grpcOptions:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;ssl-target-name-override:&lt;/span&gt; &lt;span&gt;peer1.taobao.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-time:&lt;/span&gt; &lt;span&gt;0s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-timeout:&lt;/span&gt; &lt;span&gt;20s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;keep-alive-permit:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;fail-fast:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;allow-insecure:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们假定是 &lt;code&gt;JD&lt;/code&gt; 组织来编写这个应用程序，该配置主要就是用于验证 &lt;code&gt;JD&lt;/code&gt; 组织及其节点的身份。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中组织配置中 &lt;code&gt;{username}&lt;/code&gt; 为动态传递， MSP 证书的根路径我们后续会挂载进去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在开始编写代码，我们先来实例化 SDK ，创建 &lt;code&gt;sdk.go&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;github.com/hyperledger/fabric-sdk-go/pkg/client/channel&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/hyperledger/fabric-sdk-go/pkg/core/config&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/hyperledger/fabric-sdk-go/pkg/fabsdk&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 配置信息&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; (&lt;br/&gt; sdk           *fabsdk.FabricSDK                              &lt;span&gt;// Fabric SDK&lt;/span&gt;&lt;br/&gt; channelName   = &lt;span&gt;&quot;appchannel&quot;&lt;/span&gt;                                 &lt;span&gt;// 通道名称&lt;/span&gt;&lt;br/&gt; username      = &lt;span&gt;&quot;Admin&quot;&lt;/span&gt;                                      &lt;span&gt;// 用户&lt;/span&gt;&lt;br/&gt; chainCodeName = &lt;span&gt;&quot;fabric-realty&quot;&lt;/span&gt;                              &lt;span&gt;// 链码名称&lt;/span&gt;&lt;br/&gt; endpoints     = []&lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;peer0.jd.com&quot;&lt;/span&gt;, &lt;span&gt;&quot;peer0.taobao.com&quot;&lt;/span&gt;} &lt;span&gt;// 要发送交易的节点&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// init 初始化&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; err error&lt;br/&gt; &lt;span&gt;// 通过配置文件初始化SDK&lt;/span&gt;&lt;br/&gt; sdk, err = fabsdk.New(config.FromFile(&lt;span&gt;&quot;config.yaml&quot;&lt;/span&gt;))&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ChannelExecute 区块链交互&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ChannelExecute&lt;/span&gt;&lt;span&gt;(fcn &lt;span&gt;string&lt;/span&gt;, args [][]&lt;span&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(channel.Response, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 创建客户端，表明在通道的身份&lt;/span&gt;&lt;br/&gt; ctx := sdk.ChannelContext(channelName, fabsdk.WithUser(username))&lt;br/&gt; cli, err := channel.New(ctx)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; channel.Response{}, err&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;// 对区块链账本的写操作（调用了链码的invoke）&lt;/span&gt;&lt;br/&gt; resp, err := cli.Execute(channel.Request{&lt;br/&gt;  ChaincodeID: chainCodeName,&lt;br/&gt;  Fcn:         fcn,&lt;br/&gt;  Args:        args,&lt;br/&gt; }, channel.WithTargetEndpoints(endpoints...))&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; channel.Response{}, err&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;//返回链码执行后的结果&lt;/span&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; resp, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ChannelQuery 区块链查询&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ChannelQuery&lt;/span&gt;&lt;span&gt;(fcn &lt;span&gt;string&lt;/span&gt;, args [][]&lt;span&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(channel.Response, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 创建客户端，表明在通道的身份&lt;/span&gt;&lt;br/&gt; ctx := sdk.ChannelContext(channelName, fabsdk.WithUser(username))&lt;br/&gt; cli, err := channel.New(ctx)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; channel.Response{}, err&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;// 对区块链账本查询的操作（调用了链码的invoke），只返回结果&lt;/span&gt;&lt;br/&gt; resp, err := cli.Query(channel.Request{&lt;br/&gt;  ChaincodeID: chainCodeName,&lt;br/&gt;  Fcn:         fcn,&lt;br/&gt;  Args:        args,&lt;br/&gt; }, channel.WithTargetEndpoints(endpoints...))&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; channel.Response{}, err&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;//返回链码执行后的结果&lt;/span&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; resp, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这段代码中，我们将使用 &lt;code&gt;Admin&lt;/code&gt; 的身份去调用合约，并将每次的交易同时发送给 &lt;code&gt;peer0.jd.com&lt;/code&gt; 和 &lt;code&gt;peer0.taobao.com&lt;/code&gt; 节点进行背书，这是因为我们在实例化链码的时候指定了背书策略为 &lt;code&gt;AND (&#x27;TaobaoMSP.member&#x27;,&#x27;JDMSP.member&#x27;)&lt;/code&gt; ，代表交易需要同时得到 &lt;code&gt;Taobao&lt;/code&gt;和 &lt;code&gt;JD&lt;/code&gt; 组织成员的背书才允许通过。每次写入账本时，会验证这两个节点的数据一致性，只有当这两个节点的数据一致时，交易才算最终成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续编写 &lt;code&gt;main.go&lt;/code&gt; ，我们使用 &lt;code&gt;gin&lt;/code&gt; 来创建一个 http 服务：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;bytes&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;encoding/json&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; g := gin.Default()&lt;br/&gt; g.GET(&lt;span&gt;&quot;/query&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  args := &lt;span&gt;make&lt;/span&gt;([][]&lt;span&gt;byte&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;  user := c.Query(&lt;span&gt;&quot;user&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; user != &lt;span&gt;&quot;&quot;&lt;/span&gt; {&lt;br/&gt;   args = &lt;span&gt;append&lt;/span&gt;(args, []&lt;span&gt;byte&lt;/span&gt;(user))&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;// 调用链码的query函数&lt;/span&gt;&lt;br/&gt;  resp, err := ChannelQuery(&lt;span&gt;&quot;query&quot;&lt;/span&gt;, args)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   c.AbortWithStatusJSON(&lt;span&gt;500&lt;/span&gt;, gin.H{&lt;span&gt;&quot;err&quot;&lt;/span&gt;: err.Error()})&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; data []&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err = json.Unmarshal(bytes.NewBuffer(resp.Payload).Bytes(), &amp;amp;data); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   c.AbortWithStatusJSON(&lt;span&gt;500&lt;/span&gt;, gin.H{&lt;span&gt;&quot;err&quot;&lt;/span&gt;: err.Error()})&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  c.JSON(&lt;span&gt;200&lt;/span&gt;, data)&lt;br/&gt; })&lt;br/&gt; g.POST(&lt;span&gt;&quot;/transfer&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  from := c.Query(&lt;span&gt;&quot;from&quot;&lt;/span&gt;)&lt;br/&gt;  to := c.Query(&lt;span&gt;&quot;to&quot;&lt;/span&gt;)&lt;br/&gt;  money := c.Query(&lt;span&gt;&quot;money&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; from == &lt;span&gt;&quot;&quot;&lt;/span&gt; || to == &lt;span&gt;&quot;&quot;&lt;/span&gt; || money == &lt;span&gt;&quot;&quot;&lt;/span&gt; {&lt;br/&gt;   c.AbortWithStatusJSON(&lt;span&gt;400&lt;/span&gt;, gin.H{&lt;span&gt;&quot;err&quot;&lt;/span&gt;: &lt;span&gt;&quot;参数不能为空&quot;&lt;/span&gt;})&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  args := &lt;span&gt;make&lt;/span&gt;([][]&lt;span&gt;byte&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;  args = &lt;span&gt;append&lt;/span&gt;(args, []&lt;span&gt;byte&lt;/span&gt;(from), []&lt;span&gt;byte&lt;/span&gt;(to), []&lt;span&gt;byte&lt;/span&gt;(money))&lt;br/&gt;  &lt;span&gt;// 调用链码的transfer函数&lt;/span&gt;&lt;br/&gt;  resp, err := ChannelExecute(&lt;span&gt;&quot;transfer&quot;&lt;/span&gt;, args)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   c.AbortWithStatusJSON(&lt;span&gt;500&lt;/span&gt;, gin.H{&lt;span&gt;&quot;err&quot;&lt;/span&gt;: err.Error()})&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  c.JSON(&lt;span&gt;200&lt;/span&gt;, gin.H{&lt;span&gt;&quot;msg&quot;&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;(resp.Payload)})&lt;br/&gt; })&lt;br/&gt; g.Run(&lt;span&gt;&quot;0.0.0.0:8000&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;main&lt;/code&gt; 函数中，我们创建了两个接口 &lt;code&gt;GET /query&lt;/code&gt; 和 &lt;code&gt;POST /transfer&lt;/code&gt; ，其中 &lt;code&gt;/query&lt;/code&gt; 接口调用链码的 &lt;code&gt;query&lt;/code&gt; 函数功能实现查询用户余额，&lt;code&gt;/transfer&lt;/code&gt; 接口调用链码的 &lt;code&gt;transfer&lt;/code&gt; 函数功能实现转账功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将继续使用 Docker 部署该应用程序，这样的好处是可以和区块链网络处于同一网络下，方便调用节点，当然你也可以更改 &lt;code&gt;config.yaml&lt;/code&gt; 文件去调用暴露在宿主机的节点端口也是可以的，首先编写 &lt;code&gt;Dockerfile&lt;/code&gt; 文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;FROM&lt;/span&gt; golang:&lt;span&gt;1.14&lt;/span&gt; AS app&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; GO111MODULE=on&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; GOPROXY https://goproxy.cn,direct&lt;br/&gt;&lt;span&gt;WORKDIR&lt;/span&gt;&lt;span&gt; /root/togettoyou&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; . .&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; CGO_ENABLED=0 go build -v -o &lt;span&gt;&quot;app&quot;&lt;/span&gt; .&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; scratch&lt;br/&gt;&lt;span&gt;WORKDIR&lt;/span&gt;&lt;span&gt; /root/togettoyou/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; --from=app /root/togettoyou/app ./&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; --from=app /root/togettoyou/config.yaml ./&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENTRYPOINT&lt;/span&gt;&lt;span&gt; [&lt;span&gt;&quot;./app&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt; 文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;version:&lt;/span&gt; &lt;span&gt;&#x27;2.1&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;fabric_network:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;external:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;fabric_network&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;services:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;app:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;build:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;app:latest&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;8000:8000&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;./../network/crypto-config:/network/crypto-config&lt;/span&gt; &lt;span&gt;# 挂载搭建区块链网络时生成的crypto-config文件夹&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;fabric_network&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中挂载的 &lt;code&gt;crypto-config&lt;/code&gt; 文件夹就是之前搭建区块链网络时生成的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译部署应用程序：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker-compose build&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker-compose up&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用应用程序的接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; curl &lt;span&gt;&quot;http://localhost:8000/query&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[{&quot;balance&quot;:1000,&quot;name&quot;:&quot;A&quot;},{&quot;balance&quot;:1000,&quot;name&quot;:&quot;B&quot;}]&lt;br/&gt;&lt;span&gt;&lt;br/&gt;$&lt;/span&gt;&lt;span&gt; curl &lt;span&gt;&quot;http://localhost:8000/query?user=A&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[{&quot;balance&quot;:1000,&quot;name&quot;:&quot;A&quot;}]&lt;br/&gt;&lt;span&gt;&lt;br/&gt;$&lt;/span&gt;&lt;span&gt; curl &lt;span&gt;&quot;http://localhost:8000/query?user=B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[{&quot;balance&quot;:1000,&quot;name&quot;:&quot;B&quot;}]&lt;br/&gt;&lt;span&gt;&lt;br/&gt;$&lt;/span&gt;&lt;span&gt; curl -X POST &lt;span&gt;&quot;http://localhost:8000/transfer?from=A&amp;amp;to=B&amp;amp;money=500&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;{&quot;msg&quot;:&quot;ok&quot;}&lt;br/&gt;&lt;span&gt;&lt;br/&gt;$&lt;/span&gt;&lt;span&gt; curl &lt;span&gt;&quot;http://localhost:8000/query&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[{&quot;balance&quot;:500,&quot;name&quot;:&quot;A&quot;},{&quot;balance&quot;:1500,&quot;name&quot;:&quot;B&quot;}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，我们就已经完整地实现了一个区块链应用了。你也可以继续为这个区块链应用实现前端页面。流程呢，和传统前后端分离架构也没什么区别。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最后&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于对 fabric 的了解程度，我已经尽可能地毫无保留了，但是对于真正想要进入区块链这一领域的读者来讲，fabric 技术只是区块链中的冰山一角，更多的还需要你们自己去探索。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而为什么我没有选择继续往区块链这一领域发展，理由很简单，因为个人比较喜欢云原生方向。&lt;span/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;官方文档: &lt;em&gt;https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;p&gt;项目地址: &lt;em&gt;https://github.com/togettoyou/fabric-realty&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3] &lt;/span&gt;&lt;p&gt;fabric v1.4.12 二进制工具: &lt;em&gt;https://github.com/hyperledger/fabric/releases/tag/v1.4.12&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0d91cc49dd9c10502b8f28a3e17b403c</guid>
<title>从 VSCode 看大型 IDE 技术架构</title>
<link>https://toutiao.io/k/acuovgh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section&gt;&lt;span&gt;‍‍‍‍&lt;/span&gt;&lt;span&gt;由阿里集团和蚂蚁集团共同打造的 IDE 研发框架 &lt;span&gt;OpenSumi &lt;/span&gt;于近日正式对外开源，&lt;/span&gt;&lt;span&gt;查看详情：&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3NzczMDI4Ng==&amp;amp;mid=2247484341&amp;amp;idx=1&amp;amp;sn=86090197154c0fff324010b313bb75af&amp;amp;chksm=fd016034ca76e9225792d7d97cb64192843ee6182c51313ecab3c5e356c16be68b3f5cd9f19c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;阿里 &amp;amp; 蚂蚁自研 IDE 研发框架 OpenSumi 正式开源&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;阿里 &amp;amp; 蚂蚁自研 IDE 研发框架 OpenSumi 正式开源&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;一、VSCode 是什么&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;官方定义&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote data-pid=&quot;AqH0qMGl&quot;&gt;&lt;span&gt;https://code.visualstudio.com/&lt;/span&gt;&lt;/blockquote&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42572062084257206&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6dpar3ibhDzbcb3ibRARh6qxKAvm7Kl9ibzfXFdeCvzIbFNLnB6zTUtiaOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;902&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;gpTh2GDS&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;gpTh2GDS&quot;&gt;&lt;span&gt;关键词：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;gpTh2GDS&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11921708185053381&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6cZE2ZMIBh45sdzZvCCKIxibyRr8TiaoJ1myE6u6o5atSeia20CJjCwicrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2248&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6a9UleA3GwYOg7NLk3jFib283Lu0mn2icNerVUKdiaJibuYQ9KT4Wporpfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;pre&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;点评：&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;发展历程&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;zGbxGwJQ&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;zGbxGwJQ&quot;&gt;&lt;span&gt;团队负责人：Erich Gamma . JUnit 作者之一，《设计模式》作者之一， Eclipse 架构师。2011 加入微软，在瑞士苏黎世组建团队开发基于 web 技术的编辑器，也就是后来的 monaco-editor。VSCode 开发团队从 10 来个人开始，早期成员大多有 Eclipse 开发团队的背景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote data-pid=&quot;H7JSWRx-&quot;&gt;&lt;span&gt;Visual Studio Code有哪些工程方面的亮点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;维护一个大型开源项目是怎样的体验？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;「Shape Up」 适合中小团队的一种工作方式&lt;/span&gt;&lt;/blockquote&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6ReZuCAM2KgU6wn03v7ClEpknr8d2axtiaibAIoXAdeeJPNdr4hrXbQHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;408&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-pid=&quot;1NmwU1XC&quot;&gt;&lt;span&gt;Erich Gamma 在 GOTO 2016 发表了主题为 《The journey of visual studio code: Building an App Using JS/TypeScript, Node, Electron &amp;amp; 100 OSS Components》的演讲，详细讲解了这个项目的发展历程：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;1NmwU1XC&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;t3ipZq3N&quot;&gt;&lt;span&gt;PPT 的第一页，就是 Erich Gamma 截取自己正式加入微软之后收到的工作内容描述的邮件：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;87oEJBqY&quot;&gt;&lt;span&gt;”探索一种全新的和桌面 IDE 一样成功的在线开发工具模式“&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6U7WicfmOboFGOepk6lpEQ5X1ylWPqagHxaHClhEicTOyf8l4YayJBiaUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-pid=&quot;-Bb862H2&quot;&gt;&lt;span&gt;整个团队从大致 10 个人开始，混合老中新三代不同水平的程序员，在微软这个巨无霸的商业公司里面想要落地这样一个宏大的愿景是不容易的，团队一开始定下的思路就是像 start up 一样工作，每月每年都要 ship 东西。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;-Bb862H2&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;3qSZrG74&quot;&gt;&lt;span&gt;同时他也提出早期会疯狂的在公司内部寻找落地场景，比如 Visual Studio Online 的在线 Code DIff 页面，TypeScript 的官网的 Playground 编辑器，OneDrive 代码文件，Edge 浏览器 Dev Tool 的代码浏览等。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;3qSZrG74&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;X0PQBIcl&quot;&gt;&lt;span&gt;一个重要转折点是微软本身发生的巨大变化：&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6m4csGibWKB8UKPqEubbY3Zd6NAJQ8XncqYVv0PDXkm694N8aE3Z8L0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;-_8ZKaJS&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;-_8ZKaJS&quot;&gt;&lt;span&gt;伴随微软整个的开放开源跨平台风潮，Erich Gamma 敏锐的决定将产品从 Browser Based IDE 转向跨平台的 Desktop IDE，但仍然使用 Web 技术，于是 electron 完美契合，VSCode 团队花了六个月使用 Electron 将 Web 编辑器桌面化，又花了六个月将整个 IDE 插件化，最终 VSCode 成为一个流行的产品同时也成为一个典型的 Electron 客户端开源项目。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;-_8ZKaJS&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6jS1Ll7MYzMCndcEjnlYuXm5tiap7LREalEtWyU1m16QGickkXZhShrEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;产品定位&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;8G1OO6m3&quot;&gt;&lt;span&gt;Erich Gamma 在 2017 SpringOne Platform 上有一个 关于 VSCode 的分享，讲解了在他开发 Eclipse 的过往经验基础上，对 VSCode 进行顶层设计时的诸多思路与决策，其中提到过对于 VSCode 的产品定位：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;8G1OO6m3&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5861111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic64oficadkGa2HxiacicK58tIdzsSoHOLWpQD4mJXqup9nvyck7MUhCarxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;GiU6B2DC&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;GiU6B2DC&quot;&gt;&lt;span&gt;从图中可以看出 VSCode 定位是处于编辑器和 IDE 的中间并且偏向轻量编辑器一侧的。&lt;br/&gt;VSCode 的核心是“编辑器 + 代码理解 + 调试“，围绕这个关键路径做深做透，其他东西非常克制，产品保持轻量与高性能。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;GiU6B2DC&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;点评：&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;二、Electron 是什么&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-pid=&quot;0HkpQL0s&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;0HkpQL0s&quot;&gt;&lt;span&gt;上文提到 VSCode 有一个特性是跨平台，它的跨平台实质是通过 electron 实现的。所以我们需要先简单了解下 electron&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;0HkpQL0s&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;官方定义&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49533333333333335&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6nhzyIHXmicWpre0rKsTT0xyAoBDxicho9OTtZQAicHvFLfzTibU7INXSLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3586666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic62iaibSeQskGtySqE5n2uE2DPwAQicQKiciasScpcDCoXLTBnCeFbneQyA7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;核心技术&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5626666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6MkycibNICVmMEibgB8AVj6mFAggK2hLSI34DZEwfFCljYkaXTBxbCRqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;应用架构&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote data-pid=&quot;Vkdez0gD&quot;&gt;&lt;span&gt;https://electronjs.org/docs/tutorial/application-architecture&lt;/span&gt;&lt;/blockquote&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.202226345083488&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6QTRknSXctOib3BRznxebAUWOYWCZTDbfWLCYs1awbQGSicfickNEGLHfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;539&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;85oEF8Tx&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;85oEF8Tx&quot;&gt;&lt;span&gt;进程间通讯：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;85oEF8Tx&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;点评： &lt;/p&gt;&lt;ul lake-indent=&quot;0&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;普通 web 页面无法调用 native api，因此缺少一些能力&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;electron 的 web 页面所处的 Render 进程可以将任务转发至运行在 NodeJS 环境的 Main 进程，从而实现 native API&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;这套架构大大扩展了 electron app 相比 web app 的能力丰富度，但同时又保留了 web 快捷流畅的开发体验，再加上 web 本身的跨平台优势，结合起来让 electron 成为性价比非常高的方案&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;三、VSCode 技术架构&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;多进程架构&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6180555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6u0QNBwysnqLIDVZ9D5jiaLqjbUwdXRgc2L2CWuUoFbk75FibJU1Cic5nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/figure&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;主进程：VSCode 的入口进程，负责一些类似窗口管理、进程间通信、自动更新等全局任务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;渲染进程：负责一个 Web 页面的渲染&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;插件宿主进程：每个插件的代码都会运行在一个独属于自己的 NodeJS 环境的宿主进程中，插件不允许访问 UI&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Debug 进程：Debugger 相比普通插件做了特殊化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Search 进程：搜索是一类计算密集型的任务，单开进程保证软件整体体验与性能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;开发流程&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开发文档：github.com/Microsoft/vs&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;主仓库：github.com/microsoft/vs&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其它关联项目：github.com/Microsoft/vs&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# 检出代码&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;git clone git@github.com:microsoft/vscode.git&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cd vscode&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# 安装依赖&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yarn&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# 启动 web 版&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yarn watch &amp;amp;&amp;amp; yarn web&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# 启动 桌面 版&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yarn watch &amp;amp;&amp;amp; ./scripts/code.sh&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# 打包&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yarn run gulp vscode-[platform]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yarn run gulp vscode-[platform]-min&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# platforms: win32-ia32 | win32-x64 | darwin | linux-ia32 | linux-x64 | linux-arm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;源码组织&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote data-pid=&quot;2m8wpdXK&quot;&gt;&lt;span&gt;https://github.com/microsoft/vscode/wiki/Source-Code-Organization&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-pid=&quot;pdfKRKVg&quot;&gt;&lt;span&gt;下面是整个 VSCode project 的一些顶级的重点文件夹，后文会重点关注 src 与 extensions:&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├── build         # 构建脚本├── extensions    # 内置插件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├── scripts       # 工具脚本&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├── out           # 产物目录&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├── src           # 源码目录&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├── test          # 测试代码&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-pid=&quot;7Dw07QDM&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;7Dw07QDM&quot;&gt;&lt;span&gt;VSCode 的代码架构也是随着产品阶段演进而不断更迭的：&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6RnJQDfxgNgqRrtg6kickOHrwHjzibSlMCibv2Jc8GDdh20b3HCoNSUh3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;NmPV3zxr&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;NmPV3zxr&quot;&gt;&lt;span&gt;下文会分享一些整个 VScode 源码组织的一些亮点与特色：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;NmPV3zxr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1. 隔离内核 (src) 与插件 (extensions)，内核分层模块化&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;ul lake-indent=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;ul lake-indent=&quot;0&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;/src/vs/base: 通用的公共方法和公共视图组件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;/src/vs/code: VSCode 应用主入口&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;/src/vs/platform：可被依赖注入的各种纯服务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;/src/vs/editor: 文本编辑器&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;/src/vs/workbench：整体视图框架&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul lake-indent=&quot;0&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;/src/typings: 公共基础类型&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;/extensions：内置插件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2. 每层按环境隔离&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p data-pid=&quot;SGrUVfLo&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;SGrUVfLo&quot;&gt;&lt;span&gt;内核里面每一层代码都会遵守 electron 规范，按不同环境细分文件夹:&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;SGrUVfLo&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;common: 公共的 js 方法，在哪里都可以运行的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;browser: 只使用浏览器 API 的代码，可以调用 common&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;node: 只使用 NodeJS API 的代码，可以调用 common&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;electron-browser: 使用 electron 渲染线程和浏览器 API 的代码，可以调用 common，browser，node&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;electron-main: 使用 electron 主线程和 NodeJS API 的代码，可以调用 common， node&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;test: 测试代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;点评： &lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3. 内核代码本身也采用扩展机制: Contrib&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p data-pid=&quot;UxNnQJZ0&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;UxNnQJZ0&quot;&gt;&lt;span&gt;可以看到 /src/vs/workbench/contrib 这个目录下存放着非常多的 VSCode 的小的功能单元：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;UxNnQJZ0&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;├── backup&lt;br/&gt;├── callHierarchy&lt;br/&gt;├── cli&lt;br/&gt;├── codeActions&lt;br/&gt;├── codeEditor&lt;br/&gt;├── comments&lt;br/&gt;├── configExporter&lt;br/&gt;├── customEditor&lt;br/&gt;├── debug&lt;br/&gt;├── emmet&lt;br/&gt;├──....中间省略无数....&lt;br/&gt;├── watermark&lt;br/&gt;├── webview&lt;br/&gt;└── welcome&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p data-pid=&quot;gh2OYOFW&quot;&gt;&lt;span&gt;Contrib 有一些特点：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;gh2OYOFW&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Contrib 目录下的所有代码不允许依赖任何本文件夹之外的文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Contrib 主要是使用 Core 暴露的一些扩展点来做事情&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;每一个 Contrib 如果要对外暴露，将API 在一个出口文件里面导出 eg: contrib/search/common/search.ts&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一个 Contrib 如果要和另一个 Contrib 发生调用，不允许使用除了出口 API 文件之外的其它文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接上一条，即使 Contrib 事实上可以调用另一个 Contrib 的出口 API，也要审慎的考虑并尽量避免两个 Contrib 互相依赖&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-pid=&quot;i8-Lfo8A&quot;&gt;&lt;span&gt;VSCode 开发团队做这个设计的目的我猜大概是因为重型的工具软件功能点实在太多，而且非常多的地方都是采用相似的模式去横向扩展，如果这些功能代码直接采用原始的模块引用的方式在 core 里面硬编码聚合拼装起来，是一个自顶向下的架构，对维护性的挑战比较大。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;E295UFSu&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;E295UFSu&quot;&gt;&lt;span&gt;而采用暴露扩展点的方式，可以将依赖关系反转，依附于扩展点协议，独立的小功能的代码实现可以单独聚合，核心模块无需硬编码和集成所有判断，整体是一个松散式的架构，降低了代码信息密度与提升维护性，也更好扩展。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;_rbFX6gU&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;_rbFX6gU&quot;&gt;&lt;span&gt;但是 VSCode Contrib 的具体业务代码组织其实看起来没有太多范式，而且这个内核代码的扩展机制 Contrib 和 VSCode 开放给外界的插件化机制 extension 是有差异的，读起来十分头疼。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;K-NcAmcN&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;K-NcAmcN&quot;&gt;&lt;span&gt;通过和兄弟团队 CloudIDE 开发组的专家交流，我得到两条主要差异性：&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;4. 依赖注入&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;0eEjoxuw&quot;&gt;&lt;span&gt;上一小节提到了 VSCode 的代码大量使用了依赖注入，这项技术的具体实现细节本文不会展开细讲，感兴趣的可以阅读一些好的实现：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;5TFmFsx4&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;5TFmFsx4&quot;&gt;&lt;span&gt;TS 依赖注入常见的实现原理是使用 reflect-metadata 设置与获取元信息，从而可以实现在运行时拿到本来属于编辑态的 TypeScript 类型相关元信息，具体来说就是下面这些 API：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;5TFmFsx4&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Reflect.getMetadata(&quot;design:type&quot;, , target, key): 获取 class 属性类型元信息&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Reflect.getMetadata(&quot;design:paramtypes&quot;, target, key): 获取 class 方法参数元信息&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Reflect.getMetadata(&quot;design:returntype&quot;, target, key)：获取 class 方法返回值元信息&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)：设置元信息&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Reflect.getMetadata(metadataKey, target, propertyKey): 获取元信息&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;mdD6nE53&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;mdD6nE53&quot;&gt;&lt;span&gt;不过具体到 VSCode 的依赖注入，它没有使用 reflect-metadata 这一套，而是基于 decorator 去标注元信息，整个实现了一套自己的依赖注入方式，具体可以参考&lt;/span&gt;&lt;span&gt;vscode 源码解析-依赖注入&lt;/span&gt;&lt;span&gt; 这篇文章，大致包含如下几类角色：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Service：服务的实现逻辑&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Interface：服务的接口描述&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Client：服务使用方&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Manger：服务管理器&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;Q9fCqdSU&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;Q9fCqdSU&quot;&gt;&lt;span&gt;举个例子来看，在 /src/core/platform 里面定义了大量 service，其他地方消费者 Client 都可以用依赖注入的方式使用到，伪代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;Q9fCqdSU&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre/&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;class Client {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  // 构造函数参数注入（依赖注入方式的一种）&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  constructor(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 必选&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @IModelService modelService: IModelService,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 可选&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @optional(IEditorService) editorService: IEditorService&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // use services&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 实例化&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;instantiationService.createInstance(Client);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;5. 绝对路径 import&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7563971340839304&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6n9lnpT2FOVGtSribJL8xk4uuOa9ZUc9ojvmOdZrkicsktoxKGmzLiaViag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;977&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9824561403508771&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6icKjn5mkficG5ticjCzKdRXHtqkupps1TS1wmicTOLktZQwEbQg3vL05DQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;513&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;点评：绝对路径 import 是一个非常值得学习的技巧，具体的方式是配置 TypeScript compilerOptions.paths&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;6. 命令系统&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p data-pid=&quot;dXNYcM7L&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;dXNYcM7L&quot;&gt;&lt;span&gt;VSCode 和 monaco-editor 都有自己的命令系统，蚂蚁 CloudIDE 团队的同学也曾经对命令系统的优势做过总结：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;X21_Np1l&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;X21_Np1l&quot;&gt;&lt;span&gt;传统的模块调用是个网状，不太好找到一个切面来理解或治理：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7745098039215687&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic66MTFHcdSCAZibIOLP3wHxYFF5BTfxJz5huOIFzPxgKVaQicR4SnqWfaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;306&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-pid=&quot;xZ0LZBI0&quot;&gt;&lt;span&gt;而命令系统是中心化的，各功能末端变成了扁平化的结构：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37367303609341823&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic69IyWPsngL4NDE1rX0oTJQe5Jia9Wc9NMyiakZBDo7pUaGAqgia4iaLZlaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;471&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;点评：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;7. TypeScript&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6SE8j4xibjj7iciaaEMbLVLIDxOEbKcb1zoW9azg9ZJ2D1efg1gY6eESEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic68LY5qWwFt7gOSnottLIRwUqbc2bDkwSib607w1VSRcUFwaIddlEEtUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6EfuHs0oPXsPjTlQe8pQeP1BBibm2WyCB2DicmibQSognUhmc9k20swpFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;启动流程 （TLDR）&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p data-pid=&quot;BYYSEnVQ&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;BYYSEnVQ&quot;&gt;&lt;span&gt;上文初步了解了 vscode 的技术架构与源码组织，手痒的同学估计有点等不及尝试走一遍 vscode 的启动流程了。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;udQxcaXN&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;udQxcaXN&quot;&gt;&lt;span&gt;然后在正式发车之前，我需要给大家一点友情提醒，如果你没耐心看完下面的 VSCode 的启动流程，应该知道，人生得过且过 o(╥﹏╥)o&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;4sSS85Pw&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;4sSS85Pw&quot;&gt;&lt;span&gt;总体来看，VSCode 的启动代码真正 show 给我们看了一个复杂的客户端软件的代码会工程化到什么地步，这其中掺杂了大量的基于 TypeScript 的 OOP 式的代码组织，各种对边界，宿主环境，上下文的处理，本来简单的启动 APP 渲染一个页面流程变得极其复杂。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;Y-6qY_0Y&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;Y-6qY_0Y&quot;&gt;&lt;span&gt;下面精简抽取核心启动链路的文件和方法看一看：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// /src/main.js 的精简核心链路&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;const { app, protocol } = require(&#x27;electron&#x27;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;app.once(&#x27;ready&#x27;, function () {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  // electron 启动好之后，调用 vscode 的入口&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    onReady();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;async function onReady() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 获取缓存文件目录地址和语言配置，执行启动&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        const [cachedDataDir, nlsConfig] = await Promise.all([nodeCachedDataDir.ensureExists(), resolveNlsConfiguration()]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        startup(cachedDataDir, nlsConfig);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;function startup(cachedDataDir, nlsConfig) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  // 先加载 vscode 自己开源的 AMD Loader https://github.com/Microsoft/vscode-loader/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  // 再使用这个 loader 去加载 VSCode 的主入口文件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    require(&#x27;./bootstrap-amd&#x27;).load(&#x27;vs/code/electron-main/main&#x27;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// /src/vs/code/electron-main/main.ts 精简核心链路&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 初始化主类&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;const code = new CodeMain();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 执行主入口函数&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;code.main();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;class CodeMain {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  main() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // vscode 的 class public 入口一般只是空壳，真正的都在 private 逻辑里面&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    this.startUp();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  private async startup() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 先创建依赖的初始化 service&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        const [instantiationService, instanceEnvironment] = this.createServices();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 创建编辑器实例并调用 startUp 方法&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    return instantiationService.createInstance(CodeApplication).startup();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// /src/vs/code/electron-main/app.ts&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;export class CodeApplication extends Disposable {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    async startup(): Promise&amp;lt;void&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // IPC Server&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        const electronIpcServer = new ElectronIPCServer();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // SharedProcess&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        const sharedProcess = this.instantiationService.createInstance(SharedProcess, machineId, this.userEnv);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 创建一大堆依赖的 service&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // IUpdateService IWindowsMainService IDialogMainService IMenubarService IStorageMainService......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        const appInstantiationService = await this.createServices(machineId, trueMachineId, sharedProcess, sharedProcessClient);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 打开一个窗口&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            const windows = appInstantiationService.invokeFunction(accessor =&amp;gt; this.openFirstWindow(accessor, electronIpcServer, sharedProcessClient));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      private openFirstWindow() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      const windowsMainService = this.windowsMainService = accessor.get(IWindowsMainService);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return windowsMainService.open();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// /src/vs/platform/windows/electron-main/windowsMainService.ts&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;export class WindowsMainService extends Disposable implements IWindowsMainService {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  open() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 执行 open&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    this.doOpen();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  private doOpen() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 打开浏览器窗口&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    this.openInBrowserWindow();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  private openInBrowserWindow() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            // 创建窗口&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            const createdWindow = window = this.instantiationService.createInstance(CodeWindow, {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                state,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                extensionDevelopmentPath: configuration.extensionDevelopmentPath,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                isExtensionTestHost: !!configuration.extensionTestsPath&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private doOpenInBrowserWindow() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 加载页面&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    window.load(configuration);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// /src/vs/code/electron-main/window.ts&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;export class CodeWindow extends Disposable implements ICodeWindow {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  load() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 调用 electron 的 api 加载一个 url 的 html 页面&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        this._win.loadURL(this.getUrl(configuration));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private getUrl() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 获取要打开的 url&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    let configUrl = this.doGetUrl(config);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    return configUrl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private doGetUrl(config: object): string {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 终于看到 html 了！！泪流满面〒▽〒&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 打开 VSCode 的工作台，也就是 workbench  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        return `${require.toUrl(&#x27;vs/code/electron-browser/workbench/workbench.html&#x27;)}?config=${encodeURIComponent(JSON.stringify(config))}`;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;代码编辑器技术&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p data-pid=&quot;aj8mfWDo&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;aj8mfWDo&quot;&gt;&lt;span&gt;因为本文关注的重点并不在真正的代码编辑器技术而是在调研一下大型软件的工程化，因此本文只会简要介绍一下代码编辑相关的的一些核心技术：&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4144960362400906&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6Xdib5WdH8YXflDJwZhcQsAUmPeicjPtosLSMUZshziciaFPIl5moyOBKyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;883&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic65RqBaGY7SQ7t6lx1ia41gfvJ8j6rQHbFnjFZtFrBgNQLicw1Zic0naX0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34913793103448276&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6qHeVW4H91icicXohy6CribVuIvJsjHbWdW2nfibBPQYpN58lmwh2nIBhiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;696&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic63PhrhrDdUznCtzEicIu6aMib4ueAiczvwON18TDUOoc4wTuq3UG4vwwxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6tjgUaNQuNkmuQHda74lm2eLZob83brQQhnu7yoCHR3AjL3wKl0U2Qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;pre&gt;&lt;br/&gt;&lt;/pre&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;点评：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;四、VSCode 插件系统&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;理念差异&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6Q5FuWjc82YibmJichlbcaNdqdfRBmev6kqHb1NG2icia0XPATick06a2PhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;arHcNH3q&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;arHcNH3q&quot;&gt;&lt;span&gt;对比几大 IDE：&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;VSCode 插件的强隔离&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6253333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6yoxBKpe8WzOXy4XSUBp6J5TFcPAlre3hlcReTpic8K3MZxM7yibwKS0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;/&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;独立进程：VSCode plugin 代码运行在只属于自己的独立 Extension Host 宿主进程里&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;逻辑与视图隔离：插件完全无法访问 DOM 以及操作 UI，插件只能响应 VSCode Core 暴露的扩展点&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;视图扩展能力非常弱：VSCode 有非常稳定的交互与视觉设计，提供给插件的 UI 上的洞（component slot）非常少且稳定&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;只能使用限制的组件来扩展：VSCode 对视图扩展的能力限制非常强，洞里面的 UI 是并不能随意绘制的，只能使用一些官方提供的内置组件，比如 TreeView 之类&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-pid=&quot;ipvx4M3_&quot;&gt;&lt;span&gt;vscode 有哪些扩展能力？                        &lt;/span&gt;&lt;span&gt;https://code.visualstudio.com/api/extension-capabilities/overview&lt;/span&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;点评： &lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;span&gt;视图扩展的克制带来统一的视觉与交互风格，带来好的用户体验，便于建立稳定的用户心智&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;插件独立进程，与视图隔离，保证整体软件的质量、性能、安全性&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;Workbench 视图结构&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote data-pid=&quot;IOIMAsWZ&quot;&gt;&lt;span&gt;https://code.visualstudio.com/docs/getstarted/userinterface&lt;/span&gt;&lt;/blockquote&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6324786324786325&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6VAkiach06tFCJ1mq6vRSpVY2Hh1dKxBlAfrfhDv9bZOhcicLicufw5geQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;标题栏: Title Bar&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;活动栏: Activity Bar&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;侧边栏: Side Bar&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面板: Panal&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;编辑器: Editor&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;状态栏: Status Bar&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;tFXfRH-E&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;tFXfRH-E&quot;&gt;&lt;span&gt;在这个视图结构里面有哪些可扩展呢？详见 extending workbench：&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6966666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic6zRc0UDicicxibmdViaVY7El7X1qrqicpqcws3WtbOpeRtBwHnVrZKoHEuXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;插件 API 注入&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p data-pid=&quot;nih7EKgX&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;nih7EKgX&quot;&gt;&lt;span&gt;插件开发者调用 core 能力时需要引入名为 vscode 的 npm 模块&lt;/span&gt;&lt;/p&gt;&lt;pre/&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import * as vscode from &#x27;vscode&#x27;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p data-pid=&quot;5hkLMMoX&quot;&gt;&lt;span&gt;而实际上这只是一个 vscode.d.ts 类型声明文件，它声明了所有插件可用的 API 类型。&lt;br/&gt;这些 API 的具体实现在 &lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;5hkLMMoX&quot;&gt;&lt;span&gt;src/vs/workbench/api/common/extHost.api.impl.ts createApiFactoryAndRegisterActors&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;xMH8vlfa&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;xMH8vlfa&quot;&gt;&lt;span&gt;那么具体这些 API 在 plugin 执行上下文是何时注入的呢？其实是在插件 import 语句执行的时候动了手脚。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// /src/vs/workbench/api/common/extHostRequireInterceptor.ts&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;class VSCodeNodeModuleFactory implements INodeModuleFactory {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public load(_request: string, parent: URI): any {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // get extension id from filename and api for extension&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        const ext = this._extensionPaths.findSubstr(parent.fsPath);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        if (ext) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            let apiImpl = this._extApiImpl.get(ExtensionIdentifier.toKey(ext.identifier));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            if (!apiImpl) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                apiImpl = this._apiFactory(ext, this._extensionRegistry, this._configProvider);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                this._extApiImpl.set(ExtensionIdentifier.toKey(ext.identifier), apiImpl);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return apiImpl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // fall back to a default implementation&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        if (!this._defaultApiImpl) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            let extensionPathsPretty = &#x27;&#x27;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            this._extensionPaths.forEach((value, index) =&amp;gt; extensionPathsPretty += `\t${index} -&amp;gt; ${value.identifier.value}\n`);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            this._logService.warn(`Could not identify extension for &#x27;vscode&#x27; require call from ${parent.fsPath}. These are the extension path mappings: \n${extensionPathsPretty}`);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            this._defaultApiImpl = this._apiFactory(nullExtensionDescription, this._extensionRegistry, this._configProvider);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        return this._defaultApiImpl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p data-pid=&quot;a8wC-QXZ&quot;&gt;&lt;span&gt;vscode plugin 的 require 全部被 Microsoft/vscode-loader 劫持了，通过对 require 的 hack 将插件 API 注入到了运行环境。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;a8wC-QXZ&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;插件开发与配置&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p data-pid=&quot;_RUZC3TH&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;_RUZC3TH&quot;&gt;&lt;span&gt;脚手架：github.com/Microsoft/vs&lt;/span&gt;&lt;br/&gt;&lt;span&gt;官方 demo: github.com/Microsoft/vs&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;npm install -g yo generator-code&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yo code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p data-pid=&quot;4_Wv_V17&quot;&gt;&lt;span&gt;一个插件核心就是一个配置文件：Extension Manifest JSON (package.json 里面的一个字段)&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-pid=&quot;YWhadIU3&quot;&gt;&lt;span&gt;https://code.visualstudio.com/api/references/extension-manifest&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-pid=&quot;hq9XPUpe&quot;&gt;&lt;span&gt;一些关键配置如下：&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;main：主文件入口，比如导出一个 activate 方法，可以接受 ctx 做一些事情&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;main&quot;: &quot;./src/extension.js&quot;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// extension.js&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;const vscode = require(&quot;vscode&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;function activate(context) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  console.log(&#x27;Congratulations, your extension &quot;helloworld&quot; is now active!&#x27;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  let disposable = vscode.commands.registerCommand(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;extension.helloWorld&quot;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    function() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      vscode.window.showInformationMessage(&quot;Hello World!&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  );&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  context.subscriptions.push(disposable);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;exports.activate = activate;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;br/&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;Activation Events 激活时机&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onLanguage：包含该语言类型的文件被打开&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onLanguage:json&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onCommand：某个命令&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onCommand:extension.sayHello&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onDebug：开始调试&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onDebugInitialConfigurations&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onDebugResolve&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;workspaceContains：有匹配规则的文件被打开&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;workspaceContains:**/.editorconfig&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onFileSystem：打开某个特殊协议的文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onFileSystem:sftp&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onView：某个 id 的视图被显示&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onView:nodeDependencies&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onUri：向操作系统注册的 schema&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;vscode://vscode.git/init&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onWebviewPanel：某种 viewType 的 webview 打开时&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;onWebviewPanel:catCoding&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;*：启动就立即打开&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;Contribution Points 扩展点&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;contributes.configuration：本插件有哪些可供用户配置的选项&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;contributes.configurationDefaults：覆盖 vscode 默认的一些编辑器配置&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;contributes.commands：向 vscode 的命令系统注册一些可供用户调用的命令&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;contributes.menus：扩展菜单&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;五、感想&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-pid=&quot;cfqnoR_y&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;cfqnoR_y&quot;&gt;&lt;span&gt;Eric Raymond 有一本非常知名的著作 《大教堂与集市》，其中提到过一些有意思的观点：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;PaZouwAj&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;PaZouwAj&quot;&gt;&lt;span&gt;VSCode 的一些工程上的优秀设计，比如依赖注入、绝对路径引用、命令系统对于云凤蝶来说是可以马上学以致用的，而 contrib 与 extension 的扩展系统，则非一日之功，也并不宜盲目下手。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;VImVTPtd&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;VImVTPtd&quot;&gt;&lt;span&gt;而事实上在尝试打造每一个开发者都梦想的万物皆 plugin 式的工具软件之前，有一些通用的问题需要先冷静下来思考：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;xvZQoYTR&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;xvZQoYTR&quot;&gt;&lt;span&gt;对 VSCode 而言：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;-Xy38UE1&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;-Xy38UE1&quot;&gt;&lt;span&gt;对云凤蝶而言：&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;ckB2ie4U&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;ckB2ie4U&quot;&gt;&lt;span&gt;围绕这个思考，云凤蝶将持续吸纳优秀的思想与架构，持续将编辑器的核心功能链路打磨通透，底层架构搭建稳定。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;ckB2ie4U&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;六、相关资料&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul lake-indent=&quot;0&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;https://www.youtube.com/watch?v=uLrnQtAq5Ec&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://www.youtube.com/watch?v=Vs3AGfeuNKU&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://github.com/JChehe/blog/issues/5&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://www.electronjs.org/docs/latest/tutorial/application-architecture&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://zhuanlan.zhihu.com/p/54289476&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;http://phosphorjs.github.io/&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;http://developer.egret.com/#010-disp-basic&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://developer.chrome.com/docs/extensions/mv3/getstarted/&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://zhaomenghuan.js.org/blog/vscode-custom-development-basic-preparation.html&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-pid=&quot;ckB2ie4U&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1503268&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/I8SfHxT94hUNg3F6bwv6oHeYRDAa9cic64Rx8WS4m66PRo5nlW8P1vNJibfWyjhHvsLf3yoD6sqzLNyxUpANbsibA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;306&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-darkmode-color-16494102943254=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16494102943254=&quot;#fff|rgb(178, 178, 178)&quot; data-style=&quot;color: rgb(178, 178, 178); font-size: 15px;&quot; class=&quot;js_darkmode__10&quot;&gt;如果还想了解更多内容，这里有更多的研究成果推荐：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3NzczMDI4Ng==&amp;amp;mid=2247484368&amp;amp;idx=1&amp;amp;sn=faa63788bc4e7a6d11a5675217c4c36e&amp;amp;chksm=fd016051ca76e947498604ece940245abedd4fe9786de4be56084564a23c1c5e91b10f1c554f&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; class=&quot;weui-desktop-mass-appmsg__title&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;什么是 DevOps 可见度?&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU3NzczMDI4Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hU6P7Y4EMhbdHr7WDSMZt9wjEZfR28HDTcOac5u4A8ibiaIR2Miad2cCILq1FCH6NHZesEoOXLeuBopA/0?wx_fmt=png&quot; data-nickname=&quot;蚂蚁研发效能&quot; data-alias=&quot;AntLinkE&quot; data-signature=&quot;蚂蚁集团研发效能部有业界领先的工程和学术造诣，致力于为蚂蚁和多家金融企业提供核电级的全生命周期研发产品。&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6976a324a89804032627ca54df5d1e28</guid>
<title>知乎的用户画像与实时数据的架构与实践</title>
<link>https://toutiao.io/k/0up430p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;383&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.662962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WtGGOCsU5FOkgKaiaIgiboLIAljSCdzbuvMsTuZ7Ptibjp6jlic0B9lfy442opSGDYhEpdfwfa6yQyYNe1dbCRpVwA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;来源：知乎@侯容&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;全文共&lt;/span&gt;&lt;span&gt;&lt;strong&gt;8399&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;个字，建议阅读&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;18&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;分钟&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一、前言&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;section&gt;知乎业务中，随着各业务线业务的发展，逐渐对用户画像和实时数据这两部分的诉求越来越多。对用户画像方面，期望有更快、更准、更方便的人群筛选工具和方便的用户群体分析能力。对于实时数据方面，期望拥有可以实时响应的用户行为流，同时在算法特征、指标统计、业务外显等业务场景有愈来愈多的数据实时化的诉求。&lt;/section&gt;&lt;section&gt;在 2021 年 8 月，知乎&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Mjc0MDU2NQ==&amp;amp;mid=2247489312&amp;amp;idx=1&amp;amp;sn=6fcbf449884dabcd676626dade3e64cb&amp;amp;chksm=e976eb1ade01620c3249978aa26a44bafe389a78496410f0672dd6fdcfd5548408b02d80e4ff&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;平台&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;平台&lt;/a&gt;团队成立数据赋能组。针对历史实时数据需求无承接方的现象，已有用户画像系统无法满足多样的人群定向的现状，及业务方进一步人群分析的业务诉求。故提出基础设施层选用百度智能云的 Palo 作为实时数据仓库，业务工具层建设实时数据集成、实时数据调度、实时数据质量中心等系统，应用层建设实时数据应用和用户画像应用的方案。该方案针对性地解决了业务痛点，满足了业务诉求。&lt;/section&gt;&lt;section&gt;拆分当前业务主要在实时数据和用户画像两大部分有难点，共包含如下的三个方向目标：&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDAxNzY4OQ==&amp;amp;mid=2247493497&amp;amp;idx=1&amp;amp;sn=dacbe0890bab7790f5b973baf3a7182e&amp;amp;chksm=9ec1908fa9b619999e8f6ca710f2c9443e63800a41d8ecf64add1ed6fbda615723323d43b252&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;实‍时业务&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;实时业务&lt;/a&gt;数据&lt;br/&gt; 1、通过提供实时的业务指标，解决业务对热点、潜力的把控，助力生产、消费，提升优质创作量及内容消费能力。&lt;br/&gt; 2、提供实时的复杂计算的外显指标，加强用户体验，解决业务侧通过后端脚本计算的高维护成本和复杂性，节约成本，提升人效。&lt;br/&gt;实时算法特征&lt;br/&gt; 1、以实时数据为基础，提供多样的实时算法特征，与算法团队共同提升 DAU、留存、用户付费等核心指标。用户画像&lt;br/&gt; 1、用户筛选，做到多维、多类型的定向筛选，并接入营销、广告、 运营平台等系统，提高业务效率，降低人员成本。&lt;br/&gt; 1、用户分析，做到多角度用户分析，定向用户分析报告 0 成本，助力业务部门快速把握核心客户市场。&lt;br/&gt;本文就知乎平台的数据赋能团队，基于以上三个方向的目标，就这四个问题，来逐一介绍这方面的技术实践经验和心得体会：&lt;br/&gt; 1、如何通过实时数据驱动业务发展？&lt;br/&gt; 2、如何从 0 -&amp;gt; 1 搭建实时数据中心？&lt;br/&gt; 3、如何搭建一套高效快速的用户画像系统来解决历史系统的多种问题？&lt;br/&gt; 4、如何快速高效的开发业务功能和保证业务质量？&lt;br/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.1 名词解释&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3500697350069735&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kjBlpo3eStEWLibtH6qqs7p1WP0t12qKorc3UJeqyq4ad9wVt8D4rfUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;717&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.2 实时数据与用户画像与各业务的结合&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9222222222222223&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kicibgHabT7ClzgSRTk2mgO8wqy9mm8vRcgmJXoMUqibT4BuH66rz0FIKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二、面临的挑战和痛点&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;针对当前业务目标，主要有以下几个具体要求。&lt;/section&gt;&lt;section&gt;&lt;strong&gt;1）有价值&lt;/strong&gt;&lt;br/&gt; 1、如何通过实效性发现业务价值？&lt;br/&gt;  1.1、搭建热点、潜力等紧随时间的指标和相关的排行榜，直接支持业务发展。&lt;br/&gt; 2、如何让用户画像的筛选和分析能力最大化？&lt;br/&gt;  2.1、要全面覆盖多维度用户筛选的多种需求。&lt;br/&gt;  2.2、多角度、多方式覆盖用户分析。&lt;br/&gt;&lt;strong&gt;2）数据实效性&lt;/strong&gt;&lt;br/&gt; 1、推荐页首屏浏览 6 条内容，如何在第二刷的时候就立即感知到最新的用户行为？&lt;br/&gt;  1.1、通过 UBS 建设提升实效性（下面介绍）。&lt;br/&gt; 2、在推荐算法中，非常实时的特征推荐算法效果要比天级别更新特征的算法效果好很多，如何保证 10 分钟内算法受到特征变更？&lt;br/&gt;  2.1、通过实时数据系统与 Palo 配合共同建设，提升到 10 分钟内更新（下面介绍）。&lt;br/&gt;&lt;strong&gt;3）接口实时性&lt;/strong&gt;&lt;br/&gt; 1、热点运营场景，期望用户画像服务能在秒级别快速筛选出大量人群，用户后续的推送等运营场景，如何解决？&lt;br/&gt;  1.1、通过用户画像系统与 Palo 配合共同建设，提升人群筛选的速度（下面介绍）。&lt;br/&gt;&lt;strong&gt;4）复杂性&lt;/strong&gt;&lt;br/&gt; 1、实时数据几乎没有 count、sum 需求。几乎都是复杂去重和多数据联合计算的情况。&lt;br/&gt;  1.1、以播放量为例。在启播、暂停、完播、心跳等多个条件下，会同时有多个点，要进行去重。同时基于视频回答、视频的关系和双作者联合创作的关系，需要叠加，同时保证在父子内容异常状态的情况下过滤其中部分播放行为。&lt;br/&gt; 2、人群分析业务，期望多角度、各维度进行人群关联计算，同时基于全部用户特征针对当前人群和对比人群进行 TGI 计算，筛选出显著特征，如何解决？&lt;br/&gt;  2.1、通过用户画像系统与 Palo 配合共同建设，解决复杂的人群分析（下面介绍）。&lt;br/&gt; 3、业务数据中有增 / 删 / 改逻辑，如何实时同步？&lt;br/&gt;  3.1、实时数据集成系统与 Palo 配合共同建设，解决增 / 删 / 改逻辑（下面介绍）。&lt;br/&gt; 4、明细数据异常发现滞后，异常发现后，需要针对性修正构建方式，及回溯数据修复，如何解决？&lt;br/&gt;  4.1、通过选择 Lambda 架构作为数据架构解决（下面介绍）。&lt;br/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三、实践及经验分享&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 整体业务架构&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;基于当前的业务，从顶层至底层进行了拆分。主要分为&lt;strong&gt;应用层、业务模型层、业务工具层、基础设施层&lt;/strong&gt;。基于我们当前的业务形态，自上而下&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;应用层&lt;/strong&gt;：负责当前我们的业务应用，直接为业务提供工具或提供业务的某些模块，与业务共担目标，为业务赋能。&lt;br/&gt;&lt;strong&gt;业务模型层&lt;/strong&gt;：支持应用层建设和一定的实时分析能力，同时也作为业务某一个流程的功能模块接入使用，为外部业务和自身应用层建设，与业务共担目标，为业务赋能。&lt;br/&gt;&lt;strong&gt;业务工具层&lt;/strong&gt;：支持应用层和业务模型层的开发，提供通用的工具，面向降低应用层和业务模型层的建设成本，提升整体建设的工程效能，保证业务稳定和数据质量准确。&lt;br/&gt;&lt;strong&gt;基础设施&lt;/strong&gt;：技术中台提供的基础设施和云服务，提供稳定可用的基础功能，保证上层建筑的稳定性。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4126679462571976&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6keOXU9icYjaNHVGv7yRUibektQzkicsk3lDklusczUMBZtgUfLx6RKUATw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;521&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 实时数据的数据架构选型&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;解决当前问题的数据架构，一般有 Lambda 架构和 Kappa 架构。针对当前业务特点，计算复杂、偶发的异常问题需要大数据量回溯等特性。&lt;strong&gt;当前实时数据的数据架构采用的是 Lambda 架构&lt;/strong&gt;。由 Palo 承载分钟级的批处理，&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Mjc0MDU2NQ==&amp;amp;mid=2247488577&amp;amp;idx=1&amp;amp;sn=d79254fd52d5e9670152e9e98efeba2a&amp;amp;chksm=e976e87bde01616db5d982d257c608e907ae12d58d19c60b2eae67b7fc5c15e216c9807121d9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Flink&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;Flink&lt;/a&gt; 来承载秒级别简单逻辑的流处理。具体如下：&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24305555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kMBZ6VWs7npa2shVCTRSeRDCs425pyjtFdRLu7F4RjCfVSOE37ib5RXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3 应用层建设经验分享&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3.1 实时数据系统&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;strong&gt;业务场景&lt;/strong&gt;&lt;br/&gt;实时数据系统主要有两个大方向：实时业务数据和实时算法特征。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;实时业务数据。&lt;/strong&gt;&lt;br/&gt; 1、通过提供实时的业务指标，解决业务对热点、潜力的把控，助力生产、消费，提 升优质创作量及内容消费能力。&lt;br/&gt; 2、提供实时的复杂计算的外显指标，加强用户体验，解决业务侧通过后端脚本计算的高维护成本和复杂性，节约成本，提升人效。&lt;br/&gt;&lt;strong&gt;实时算法特征。&lt;/strong&gt;&lt;br/&gt; 1、以实时数据为基础，提供多样的实时算法特征，与推荐算法团队共同提升 DAU、留存、用户付费等核心指标。&lt;br/&gt;&lt;strong&gt;面临的困难&lt;/strong&gt;&lt;br/&gt; 1、依赖数据源多，计算规则复杂。以我们的播放量计算为例：&lt;br/&gt;  1.1、行为有多条，需要针对行为进行去重。&lt;br/&gt;  1.2、过滤和加和规则很多，需要依赖多个数据源的不同数据结果进行计算。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2979452054794521&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kLfsxbaH6TILWvcIQg6eyGYIQHAxwtWdGD7Tb6SInqnNv7Y8NIrz4nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3948787061994609&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6k1aCQAjzKXrp1tQS59FIxJl46PHZVUAlN9SQolOvmflKm85uGpbkPtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;742&quot;/&gt;&lt;/p&gt;&lt;section&gt; 2、时间敏感性高&lt;br/&gt;  2.1、以算法特征为例，用户浏览某内容后，针对后续关联的一系列计算后，需要在一定时间内产出计算结果（10min 未产出后续推荐效果会有波动，26min 该特征的效果会降为 0）&lt;br/&gt; 3、调度过程中协调成本高&lt;br/&gt;  3.1、需要调度系统中，同时能识别 kafka 流消费的进度和任务完成情况。&lt;br/&gt;  3.2、需要严格拉齐多个依赖的消费进度，当达到统一进度后，集中进行后续任务计算。&lt;br/&gt;解决方案&lt;br/&gt;搭建实时数据基座，建设相应的数据模型，降低建设成本。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9013888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kcr0GBYbZpqXZDHMNaV7rqojWRmZRic6xMVWmNsKaqOHBCzLFokj5Ctg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;section&gt;针对依赖数据众多、计算规则复杂、质量难以保证等问题。通过建设工具降低解决问题的成本。&lt;br/&gt; 1、通过建设实时数据集成和实时数据调度的能力，保障数据接入和数据模型建设的速度，降低接入时间，提升业务接入效率（具体见下方）&lt;br/&gt; 2、通过建设实时数据质量中心，保障数据质量，降低发现数据质量问题的时间，提升发现效率，保证业务交付结果（具体见下方）&lt;br/&gt;时间敏感性高，加强监控、与 Palo 集群共同提升吞吐效率和计算效率。&lt;br/&gt; 1、搭建写入延迟、计算延迟等监控，快速发现问题。&lt;br/&gt; 2、Palo 集群进行参数变更，调整批量写入的数据量、时间和频率等进行优化。&lt;br/&gt;  2.1、当前我们的 Load 主要有 Broker Load 和 Routine Load。其中时效性要求高的是 Routine Load。我们针对性的进行了参数调整。&lt;br/&gt; 3、Palo 增加了 Runtime Filter，通过 BloomFilter 提升 Join 性能。&lt;br/&gt;  3.1、Palo 集群在 0.14 版本中加入了 Runtime Filter 的过滤，针对 Join 大量 key 被过滤的情况有明显提升；&lt;br/&gt;  3.2、该变更针对我们当前的几个业务调度性能，有明显提升。时间从 40+s 提升至 10s 左右；&lt;br/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3.2 用户画像系统 DMP&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;strong&gt;业务场景&lt;/strong&gt;&lt;br/&gt;用户画像系统主要有两大功能：&lt;strong&gt;用户检索和用户分析&lt;/strong&gt;。&lt;br/&gt; &lt;strong&gt;1、用户检索&lt;/strong&gt;。重点在于快速完成人群包圈选同时在圈选条件变更过程中，需要快速计算出预计能圈的用户有哪些？&lt;br/&gt; &lt;strong&gt;2、用户分析&lt;/strong&gt;。重点在于多人群包的各个维度对比分析，通过分析结论找到最明显的用户特征（通过 TGI 值判断）&lt;br/&gt;&lt;strong&gt;面临的困难&lt;/strong&gt;&lt;br/&gt; 1、数据规模大。我们当前是 200+ 个标签，每个标签均有不同的枚举值，总计有 300+ 万的 tag。tag 对用户的打标量级在 900+ 亿条记录。由于标签每日更新导入量级十分大。&lt;br/&gt; 2、筛选响应时间要求高。针对简单的筛选，要求在秒级别出结果，针对复杂的人群筛选，筛选后人群量大的情况，要求在 20s 内完成人群包生成。&lt;br/&gt; 3、人群包除了 long 类型的用户 id 外，还需要有多种不同的设备 id 和设备 id md5 作为筛选结果。&lt;br/&gt; 4、用户分析场景下，针对 300+ 万 tag 的多人群交叉 TGI 计算，需要在 10min 内完成。&lt;br/&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;DMP 业务架构&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8944444444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kx9MJU8GIO6Z9IhOupuxfqvsGP9B3bobgINhTJWmkB4hrNc1H0ULV0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;DMP 业务流程&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9324324324324325&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kp77h1VIAoaX2vbGGibibS82wRI3217NzlI9bYqVSMkS2deFsds471Otg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;666&quot;/&gt;&lt;/p&gt;&lt;section&gt;性能问题针对性解决&lt;br/&gt;数据规模大，提升导入性能，分而治之。&lt;br/&gt; 1、数据模型变更，拆分文件。&lt;br/&gt;  Palo 的存储是按照 Tablet 分散在集群上的。通过调整数据模型，确保分布均匀及每个文件尽可能的小。&lt;br/&gt; 2、导入变更，拆分导入。&lt;br/&gt;  由于每个 Broker Load 导入都是有性能瓶颈的，将 900+ 亿行数据，拆分为 1000+ 个 Broker Load 的导入任务，确保每个导入总量都足够小。&lt;br/&gt;提升人群筛选和人群分析的计算速度，分而治之。&lt;br/&gt;&lt;/section&gt;&lt;section&gt; 1、业务逻辑变更，拆分用户。&lt;br/&gt;  1.1、将用户每 0 ～ 100 万拆分为一组。&lt;br/&gt;  1.2、针对全部用户的交并差，等价于对所有组用户交并差后的并集。&lt;br/&gt;  1.3、针对全部用户的交并差的总数，等价于对分组用户交并差后的总数进行 sum。&lt;br/&gt; 2、数据模型变更，拆分文件。&lt;br/&gt;  2.1、设置 bitmap 的分组参数，将分组设置为 colocate group。确保每个分组的交并差计算均在自己所在 BE 完成，无需 shuffle。&lt;br/&gt;  2.1、将 bitmap 表的分桶拆分更多，通过更多文件同时计算加速结果。&lt;br/&gt; 3、计算参数变更，提升并发。&lt;br/&gt;  3.1、由于计算过程通过分治的手段，拆分为多个小任务。通过提升并行度 parallel_fragment_exec_instance_num 再进一步优化计算速度。&lt;br/&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;br/&gt;上线后，接入了知乎多个主要场景的业务，支持多业务方的人群定向和分析能力。为业务带来曝光量、转化率等直接指标的提升。&lt;br/&gt;同时在工具性能上，有如下表现：&lt;br/&gt; 1、导入速度。当前每日 900+ 亿行数据，在 3 小时内完成导入。&lt;br/&gt; 2、人群预估。人群预估基本可在 1s 内完成，P95 985ms。&lt;br/&gt; 3、人群圈选。人群圈选过程在 5s 内完成，整体圈人在 2min 左右。（待提升中介绍）&lt;br/&gt; 4、人群分析。人群分析过程在 5min 内完成。&lt;br/&gt;&lt;strong&gt;待提升&lt;/strong&gt;&lt;br/&gt;功能扩展&lt;br/&gt; 1、缺乏定制的人群扩散能力。多业务场景对已有人群进行扩散有复杂且多样的需求。&lt;br/&gt; 2、缺乏用户人群染色，无法再多个环节完成用户效果的回收和进行后续的分析。&lt;br/&gt;性能提升&lt;br/&gt; 1、当前 Palo 的行列转换功能在建设中。在用户画像业务中，将用户 id 更换为设备 id，人群缩减（将具体人群包缩减为一个比较小的人群包用于后续运营动作）过程是通过业务代码实现的，降低了性能。&lt;br/&gt;  1.1、后续结果由行列转换后，用户画像结果处理流程中会将设备 id 获取方式通过 join 维度表来实现，人群缩减通过 order by rand limit 来实现，会有比较明显的性能提升。&lt;br/&gt; 2、当前 Palo 的读取 bitmap 功能在建设中。业务代码无法读取到 bitmap，只能先通过 bitmap_to_string 方法读取到转换为文本的 bitmap，加大了传输量，降低了圈选性能。&lt;br/&gt;  2.1、后续可以直接读取 bitmap 后，业务逻辑中会替换为直接获取 bitmap，会极大程度的减少数据传输量，同时业务逻辑可以针对性缓存，。&lt;br/&gt; 3、针对人群预估逻辑，当前是通过例如 bitmap_count(bitmap_and) 两个函数完成的，后续 Palo 会提供 bitmap_and_count 合并为一个函数，替换后可提升计算效率。&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.4 工具层建设经验分享&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.4.1 数据集成&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;strong&gt;业务场景&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;“巧妇难为无米之炊”，没有数据也就没有后面的一切，数据采集作为基础至关重要。Palo 数据仓库自带的多种数据导入方式 对于数据入仓非常便利，但是在我们的使用过程中也遇到了一些问题。比如：&lt;br/&gt; 1、在从离线数仓进行 broker load 的时候数据依赖丢失，上游数据错误无法评估受影响的范围。&lt;br/&gt; 2、需要编写冗长的 etl 处理逻辑代码，小的操作变更流程很长，需要全流程（至少 30 分钟）的上线操作；此外每次部署操作还有可能遇到各种初始化 MQ 消费者的问题&lt;br/&gt; 3、缺少运行状态监控，出现异常问题无法在分钟甚至小时级别的时间发现；&lt;br/&gt; 4、在线导入仅支持 kafka json，上游的 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Mjc0MDU2NQ==&amp;amp;mid=2247486834&amp;amp;idx=1&amp;amp;sn=745f3a795cda1ea0795612c50607b15f&amp;amp;chksm=e976f148de01785e54e41e5099bd13654840a1fe0d3ea9aae199b327022395536b199ed8c1cb&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;pulsar&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;pulsar&lt;/a&gt;、protobuf 数据仍需要代码开发进行转发，导致每次接入数据都需要转换函数的开发以及同样全流程的上线操作；&lt;br/&gt; 5、业务逻辑中，期望业务是什么样，Palo 中的数据就是什么样，让业务无感知。这种全增量同步期望被包住，而不是做很多配置或开发很多代码来实现。&lt;br/&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;br/&gt;在建设实时数据模型的过程中。需要依赖众多业务的数据，同时需要针对数据逐层建设数据模型。摸索并搭建了实时数据集成系统和实时调度系统，并下沉到工具层。&lt;br/&gt; 1、实时数据集成。建设快速且自定义的配置，针对不同的数据源建设导入能力。&lt;br/&gt; 2、与 Palo 的 Broker Load 和 Routine Load 进行配合，在此基础上搭建针对业务的全增量同步。&lt;br/&gt; 3、封装集成能力对内部暴露的接口，业务层无需理解中间过程，只选择同步的数据库和数据表即可进行实时同步。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8418367346938775&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kmJH3ib3eYJoUAficajBts0V57PchuwzwNDwW6q6mo05CXadA1IRbicdlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;588&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;br/&gt;同步配置&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.269406392694064&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6k2nPHYfqjQkZCVNrHHMIBGjyHV9UMMYd9TqqdxDe35hwqhl2iaUQcjPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;657&quot;/&gt;&lt;/p&gt;&lt;section&gt;同步任务&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1101871101871102&quot; data-type=&quot;png&quot; data-w=&quot;1443&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6k1Ul4YLCepszWiccx8KFnHrKp3Ddcp3jceWrKb9W8lHQCetma66hypRw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;上线前&lt;br/&gt;&lt;/section&gt;&lt;section&gt; 1、早期使用 Palo 开发实时数据业务过程中，由于需要某个数据全/增量同步，同时进行数据转换。需要建 Palo 数据模型，完成全量数据导入，建设增量数据 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Mjc0MDU2NQ==&amp;amp;mid=2247486994&amp;amp;idx=1&amp;amp;sn=0ed1cc70fef59cb57b87f55716a0123b&amp;amp;chksm=e976f228de017b3e356bce0825575684a2d4b04936f7f7449ad5c1ed70b604f2e8e5269c9bb5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;ETL&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;ETL&lt;/a&gt; 和 Routine Load 等开发，需要 1 名工程师 1 天才能将一张表接入到 Palo 中并进行全增量实时同步。&lt;br/&gt; 2、中间链路多，缺乏报警，针对重要的链路，建设打点和报警成本高，需要 0.5 天左右。&lt;br/&gt;  2.1、全量：原始数据库 TiDB -&amp;gt; 中间部分（DataX）-&amp;gt; Palo&lt;br/&gt;  2.2、增量：原始数据库 TiDB -&amp;gt; TiCDC -&amp;gt; Canal Binlog Kafka -&amp;gt; ETL（填充数据）-&amp;gt; Kafka -&amp;gt; Routine Load -&amp;gt; Palo&lt;br/&gt;&lt;br/&gt;上线后&lt;br/&gt; 1、仅需要 10min 的配置，数据集成包含模型，数据导入及中间 ETL 的转化和额外数据补充以及 Routine Load 全部建好。业务层无需感知数据中间链路，仅需要描述我期望那个表被同步。&lt;br/&gt; 2、上线后无需业务关心，完成第一步配置后，后续的监控和报警以及一致性，集成全面解决。&lt;br/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.4.2 数据调度&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;strong&gt;业务场景&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;我们在初期通过 Palo 建设实时数据的过程中，是通过 Routine Load 后的数据，再定时任务执行后续计算逻辑，后再将计算结果导出到承载存储，如 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Mjc0MDU2NQ==&amp;amp;mid=2247483795&amp;amp;idx=1&amp;amp;sn=ec3b8cd3b18f9fd82584880693a92f6e&amp;amp;chksm=e976fda9de0174bf77a546c7ae4ce5dc69663f0797dcf196596cfd0b3ed5aa0655ed2fa13c35&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Redis&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;Redis&lt;/a&gt;、Zetta（知乎自研 HBase 协议） 中完成外部压力承载。在这个过程中遇到了如下问题：&lt;br/&gt;&lt;/section&gt;&lt;section&gt; 1、依赖未就绪后续任务就执行。如最近 24 小时的曝光，在 15:05 运行昨日 15:00 - 今日 15:00 的查询。此时如果 Routine Load 仅导入到 14:50 的数据，这次执行结果异常；&lt;br/&gt; 2、Palo 资源有限，但很多任务都是某些整点整分钟的，一次性大量的计算任务造成集群崩溃；&lt;br/&gt; 3、任务是否执行成功，任务是否延迟，是否影响到业务，无报警无反馈；&lt;br/&gt; 4、导出存储过程通用，重复代码开发，每次都需要 0.5 - 1 人天的时间开发写入和业务接口。&lt;br/&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;br/&gt;架构图&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8238747553816047&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6k5LJtBcJxP7iaAdlRbOl95tRyial0DsUa9QShByVWg5iaib2z2hNSKf0icQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;511&quot;/&gt;&lt;/p&gt;&lt;section&gt;流程图&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4888888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kBEMol5dd72MLSc6elb0jiczI72TWiccX3ouwRoqIt7TAR2sZmZRGq8Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;br/&gt;同步任务&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6791666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kbLCawlTtKR8RS2ibBFLLUyDV4HNpmv2z1xwCKOSR06SVDcKc03xWOJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;section&gt;收益&lt;br/&gt;&lt;/section&gt;&lt;section&gt; 1、建立任务依赖机制，通过 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Mjc0MDU2NQ==&amp;amp;mid=2247489314&amp;amp;idx=1&amp;amp;sn=8ea693a7122bf275e13be70e81812389&amp;amp;chksm=e976eb18de01620ebdcaf401577272eb0355e4cc79086d6860858c913ee4103fecc2ebd3300f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;kafka&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;kafka&lt;/a&gt; 的 offset 和前置表是否完成计算，判断当前计算任务能否执行。后续再也没有出现过数据还未导入就先开始进行数据计算的情况。&lt;br/&gt; 2、通过退让策略，监控当前 Palo 指标，在高负载情况下避免提交 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Mjc0MDU2NQ==&amp;amp;mid=2247490460&amp;amp;idx=1&amp;amp;sn=415639271938b64094c180ff69eacd12&amp;amp;chksm=e976e7a6de016eb0c18f438e547db87b1780753e54874c8df5a52254e02fc3ccd0188952483f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SQL&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;SQL&lt;/a&gt;。避峰趋谷，完成资源最大利用。后续通过这种方案，一定程度的避免了瞬时跑高整体集群的问题。&lt;br/&gt; 3、全链路监控任务执行情况，和延迟情况，一旦延迟报警，及时沟通解决和恢复业务。一旦任务延迟，监控可非常快速的发现相关问题，多数情况能在业务可接受范围内完成恢复。&lt;br/&gt; 4、上线后，原先需要 1 天的工程能力开发时间降低至 0。只需要在 Palo 中有一个可查询的 SQL，经过简单配置即可完成一定时间交付给业务相关数据、排行榜的需求。&lt;br/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.4.3 数据质量&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;strong&gt;业务场景&lt;/strong&gt;&lt;br/&gt;数据，已经成为互联网企业非常依赖的重要资产。数据质量的好坏直接关系到信息的精准度，也影响到企业的生存和竞争力。Michael Hammer（《Reengineering the Corporation》一书的作者）曾说过，看起来不起眼的数据质量问题，实际上是拆散业务流程的重要标志。&lt;strong&gt;数据质量&lt;/strong&gt;&lt;strong&gt;管理是测度、提高和验证质量，以及整合组织数据的方法等一套处理准则，而体量大、速度快和多样性的特点，决定了大数据质量所需的处理，有别于传统信息治理计划的质量管理方式。&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;具体到针对知乎的各个业务：&lt;br/&gt;AI平台、增长团队、内容平台等已经将部分或全部业务渐渐迁移到实时计算平台，在接入数据更实时，更迅速的接入带来的所享受的收益外，数据质量更加变得重要。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8095238095238095&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kBx7RHW6AQ48Tjau0ygEfzatcorWMVJMkxn3p7esPoHT2O3EDll9BLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;735&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;完整性: &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;数据完整性问题包括：模型设计不完整，例如：唯一性约束不完整、参照不完整；数据条目不完整，例如：数据记录丢失或不可用；数据属性不完整，例如：数据属性空值。不完整的数据所能借鉴的价值就会大大降低，也是数据质量问题最为基础和常见的一类问题；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一致性: &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;多源数据的数据模型不一致，例如：命名不一致、数据结构不一致、约束规则不一致。数据实体不一致，例如：数据编码不一致、命名及含义不一致、分类层次不一致、生命周期不一致……相同的数据有多个副本的情况下的数据不一致、数据内容冲突的问题；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;准确性: &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;准确性也叫可靠性，是用于分析和识别哪些是不准确的或无效的数据，不可靠的数据可能会导致严重的问题，会造成有缺陷的方法和糟糕的决策；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;唯一性: &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;用于识别和度量重复数据、冗余数据。重复数据是导致业务无法协同、流程无法追溯的重要因素，也是数据治理需要解决的最基本的数据问题；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;关联性: &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;数据关联性问题是指存在数据关联的数据关系缺失或错误，例如：函数关系、相关系数、主外键关系、索引关系等。存在数据关联性问题，会直接影响数据分析的结果，进而影响管理决策；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;真实性: &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;数据必须真实准确的反映客观的实体存在或真实的业务，真实可靠的原始统计数据是企业统计工作的灵魂，是一切管理工作的基础，是经营者进行正确经营决策必不可少的第一手资料；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;及时性: &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;数据的及时性是指能否在需要的时候获到数据，数据的及时性与企业的数据处理速度及效率有直接的关系，是影响业务处理和管理效率的关键指标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解决方案：全流程的数据链路和各级质量保证方法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37083333333333335&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kiaMaksoRXCibTQiaQdL9hJ1IhrlYGialdBXtUj0C8JTq1ldobcbEFMHheg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;业务架构&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.975&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kfSDcVgYOhtIHhNLpqeTic8FDCDgE8RJa03Y98ic5ryiacibJFZ5KZmdL1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;section&gt;业务流程&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6263888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kxRibPeQibtvQhNTluNWF5OSZsYUxfEicoy42lADjaqVy2AZBVhnibAa4Yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;br/&gt;某业务健康情况监控&lt;br/&gt;以通过 DQC 监控的某一个业务的健康情况，该业务由多个导出任务和中间计算任务及部分数据源组成，当前情况是一切正常。期间如果出现某节点任意异常后，都可及时发现。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1097222222222223&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kM5GuicDVbrL3jGc6lVvG5wYic1JpEicCJ5DQaIkRgoTt2jyj600o1RCicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;section&gt;某任务中间逻辑监控&lt;br/&gt;&lt;/section&gt;&lt;section&gt;该任务中间计算中其中部分规则未达标，导致该任务未通过。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13055555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/fBHtXf4CBicKGdHIXaXLgaVtI6S17uS6kVlaEd5zxX7PR4icZFCpYsKsdgdgB0GQXtAVibXpfG11SjcOoQ7ssRAWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;收益&lt;/strong&gt;&lt;br/&gt;上线前&lt;br/&gt; 1、早期无类似 DQC 系统保证的前提下，我们很多问题都是天级别甚至上线后，才发现存在数据异常，出现过 3 次问题，造成的返工和交付不靠谱的情况，对业务影响巨大。&lt;br/&gt; 2、早期开发中，在开发过程需要不断针对各种细节规则进行比对，总会花费一定时间逐层校验，成本巨大。&lt;br/&gt;&lt;br/&gt;上线后&lt;br/&gt; 1、在上线 1 个月内，通过 DQC 系统规则，当前已发现了 14 个错异常，在 1 - 2h 左右发现，立即修复。对业务的影响降低到最小。&lt;br/&gt; 2、在系统上线后，在开发过程中，开发完相关数据，如有异常，就产生了异常报警，大幅节省了人工发现的成本，因为修复时间早，在后续开发启动前，就已经修复，极大程度降低开发过程中的返工成本。&lt;br/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;四、总结与展望&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1 收益总结&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1.1 业务发展方面&lt;/span&gt;&lt;/h3&gt;&lt;section&gt; 1、针对实时业务数据&lt;br/&gt;  1.1、提供了基于时效性的热点、潜力的把控。加速业务在生产、消费方面的使用，进而提升优质创作量及用户对内容消费能力。&lt;br/&gt;  1.2、同时提供了提供实时的复杂计算的外显指标，加强用户体验，下线了业务后端通过脚本计算指标的方法，降低了业务的复杂性，节约了成本，提升人效。&lt;br/&gt; 2、针对实时算法特征&lt;br/&gt;  2.1、提供了基于创作者、内容、消费者的实时算法特征，与算法团队共同在多个项目中，针对 DAU、留存、用户付费等核心指标有了明显的提升。&lt;br/&gt; 3、针对用户画像&lt;br/&gt;  3.1、完善和升级用户筛选，做到多维、多类型的定向筛选，并接入了运营平台、营销平台等系统，提高了业务效率，降低了业务人员进行人群定向的成本。&lt;br/&gt;  3.2、搭建和完善用户分析，做到多角度用户分析，定向用户分析报告 0 成本，助力业务部门快速把握核心客户市场。&lt;br/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1.2 工具建设方面&lt;/span&gt;&lt;/h3&gt;&lt;section&gt; 1、完成了实时数据领域和用户领域的布局，建设了相关的开发和维护工具，解决了先前在此方面无基础设施，无业务工具，开发成本高的问题。&lt;br/&gt; 2、搭建了集成、调度、质量系统。通过工具的方式降低了业务发展和迭代的成本，让业务快速发展，同时也保证了交付质量提高了业务基线。&lt;br/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1.3 人员组织方面&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;自上而下的拆分了实时数据和用户画像的能力，分为应用层、业务模型层、业务工具层和基础设施层。通过组织划分，明确了不同层次的边界和加速了业务目标的达成。&lt;br/&gt;搭建并完善了多层次团队人员梯队。根据针对不同方向的同学，给予不同的 OKR 目标，做到跨层次方向隔离，同层次方向一致，同模块目标一致。共同为整体实时数据与用户画像服务建设而努力。&lt;br/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2 未来展望&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;从 2021 年 8 月成立至今，我们一直思考如何提供更好的实时数据服务？实时数据能建设什么方面的应用，为业务创造价值？如何将用户画像服务做好？用户画像服务的筛选、分析能力如何为业务创造更大价值？摸着石头过河的同时，我们也在不断摸索和建设相关的业务能力和基础建设。在明年的发展中，我们还会针对以下方面进一步发展：&lt;br/&gt; 1、基于实时数据&lt;br/&gt;  1.1、强化基础能力工具层的建设，持续降低基于实时数据方面的建设、交付成本。&lt;br/&gt;  1.2、提升数据质量工具覆盖能力，为业务模型提供质量保障，并提供基于实时数据的画像质量保障能力。&lt;br/&gt;  1.3、基于当前业务诉求，部分场景针对 5 分钟级实时无法满足，进一步探索秒级别复杂情况实时能力，并提供能力支持。&lt;br/&gt;     2、基于用户画像&lt;br/&gt;  2.1、加强并针对用户画像、用户理解、用户洞察 &amp;amp; 模型等进一步建设。通过与具体业务结合，建设贴合业务场景的用户理解成果和相应的分析能力，找到业务的留存点。&lt;br/&gt;  2.2、进一步加强新的工具能力的建设，通过建设用户理解工具、用户分析工具，降低产生理解及对业务分析的成本，提升业务效率，快速发现业务价值。&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文来源：知乎@侯容&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原文链接：https://zhuanlan.zhihu.com/p/444879814&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;据统计，99%的数据大咖都关注了这个公众号&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI1NzYwNTMzNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/WtGGOCsU5FNz9OlL7yibicFLJX5v7skicPibPnAibAeXmTXicOWOXJ2x3xwNxdG2329W9QFdgjSpmP9PicANz2vSWicD1g/0?wx_fmt=png&quot; data-nickname=&quot;谈数据&quot; data-alias=&quot;learning-bigdata&quot; data-signature=&quot;聚焦数据治理，数字化转型，数据中台等领域专业知识总结和实战分享，做你身边最有价值的数据号！&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大家还在看：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NzYwNTMzNw==&amp;amp;mid=2247490172&amp;amp;idx=1&amp;amp;sn=9a7da23b96585a11be5da5b49a714a55&amp;amp;chksm=ea15b1cadd6238dc948e79f30ddaf594ea6f6b6df0de37bb6b94262775a2c1d7c2205dc47c65&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数据中台为什么要建标签体系，分类它不香吗？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;数据中台为什么要建标签体系，分类它不香吗？&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NzYwNTMzNw==&amp;amp;mid=2247494359&amp;amp;idx=1&amp;amp;sn=3a185b3de17f9480e4aaaabbd7945dc1&amp;amp;chksm=ea164161dd61c8777109eb3d31b5db31a774d937efe0a20c6f6c8e5ad7b7197febd53df96c6f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数据中台的OneID是个什么鬼，主数据它不香吗？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;数据中台的OneID是个什么鬼，主数据它不香吗？&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NzYwNTMzNw==&amp;amp;mid=2247498181&amp;amp;idx=1&amp;amp;sn=4db057351cbd29b78e5e41731cc2be52&amp;amp;chksm=ea165273dd61db6513a369e82c67bdafcdbb32ac751f9535d53abbe233385fbc7708723cb44f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;用户标签体系的设计和效果评估！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;用户标签体系的设计和效果评估！&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NzYwNTMzNw==&amp;amp;mid=2247485561&amp;amp;idx=1&amp;amp;sn=615ed841f2522c6c9b4f5376ddecffec&amp;amp;chksm=ea15a3cfdd622ad9893521e324501b5a5113978b1095f279e311e8dafb4dc16ae893e5b19ae4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数据中台：基于标签体系的360°用户画像&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;数据中台：基于标签体系的360°用户画像&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NzYwNTMzNw==&amp;amp;mid=2247494751&amp;amp;idx=1&amp;amp;sn=901ef661a04d1627950faeff2239f37b&amp;amp;chksm=ea1647e9dd61ceff0e2a1f13e73c2957ad316488d47fc20e7363bbe55e10eae3f518a5852c02&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;用户画像标签体系指南？？？（被洗稿了！）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;用户画像标签体系指南？？？（被洗稿了！）&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;199&quot; data-backw=&quot;562&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;205&quot; data-fileid=&quot;100010093&quot; data-ratio=&quot;0.35447540011855366&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WtGGOCsU5FMrIdD4UrYXj3CnJF5vYS2AneFiaXkf8SdyyrAyiaTIGYHrvF8iazrV9XcWYnb8yHKABAvDfLXcnq20g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1687&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>