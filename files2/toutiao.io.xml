<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>0cfa9673d650e06a9de39aa16d51ecd1</guid>
<title>AI场景存储优化：云知声超算平台基于 JuiceFS 的存储实践</title>
<link>https://toutiao.io/k/1ih3vod</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post_content markdown&quot;&gt;&lt;blockquote&gt;&lt;p&gt;本文作者介绍：
吕冬冬，云知声超算平台架构师，负责云知声大规模分布式机器学习平台架构设计与新功能演进，负责深度学习算法应用优化与 AI 模型加速。研究领域包括大规模集群调度、高性能计算、分布式文件存储、分布式缓存等。云原生开源社区爱好者。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;01-背景&quot;&gt;01 背景&lt;/h1&gt;&lt;p&gt;云知声是一家专注于语音及语言处理的技术公司。Atlas 超级计算平台是云知声的计算底层基础架构，为云知声在 AI 各个领域（如语音、自然语言处理、视觉等）的模型迭代提供训练加速等基础计算能力。Atlas 平台深度学习算力超过 57 PFLOPS（5.7 亿亿次／秒，是的你没有看错，是亿亿次图片），深度学习算力是衡量一个 AI 平台计算性能的核心指标。除了满足公司内部的业务需求，平台也为外部企业和院校机构提供定制化计算服务。&lt;/p&gt;&lt;p/&gt;&lt;small class=&quot;d-flex justify-content-center&quot;&gt;云知声 Atlas 平台架构图&lt;/small&gt;&lt;p&gt;本文主要分享云知声 Atlas 超算平台（以下简称 Atlas）的存储建设历程以及基于 JuiceFS 建设高效存储的实践。&lt;/p&gt;&lt;h1 id=&quot;02-存储建设历程&quot;&gt;02 存储建设历程&lt;/h1&gt;&lt;p&gt;一个性能卓越的超算平台，不仅需要充足的算力支持，也离不开高效的存储系统。结合 Atlas 上的任务特点和类型，高效存储系统应具备几个特点，如：满足多种类型的结构化与非结构化数据存储需求、兼容 POSIX 接口、海量小文件场景下具有较好的性能等。&lt;/p&gt;&lt;p&gt;在最早期进行 Atlas 超算平台建设的时候，我们尝试部署过 CephFS，开源版的 CephFS 在存储规模达到几千万小文件的时候，开始出现较为严重的性能问题，用户在操作文件时会遇到卡顿甚至在高 IO 的场景下整套存储系统会直接卡死，用户体验不太好。&lt;/p&gt;&lt;p&gt;后期，我们转到了 HPC 领域使用较为广泛的 Lustre 分布式文件存储系统， 构建了多套不同规模的 Lustre 集群，作为平台核心的存储系统，生产环境上目前主要有 40G 以太网与 100G InfiniBand 类型的集群，Lustre 分布式存储支持着用户在 Atlas 超算集群中进行数据处理、模型训练、源码编译与调试、数据归档等一系列数据操作。但是受限于 Lustre 在高并发请求下的性能瓶颈，无法满足对带宽与 IOPS 要求较高的场景需求。因此我们采用 Alluxio + Fluid 进行 IO 加速，分布式缓存给我们带来了 AI 模型训练速度上的提升以及存储系统总带宽的下降。&lt;/p&gt;&lt;p&gt;但是以上方案依然不是我们认为的最终方案，因此我们也在探索新的存储系统。&lt;strong&gt;在我们的场景上对这个新存储系统的核心需求是&lt;/strong&gt;：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;运维要足够简单：存储研发人员要能够较快的上手，运维人员后期的扩容、故障处理足够简单。Lustre 提供了 &lt;a href=&quot;https://whamcloud.github.io/Online-Help/docs/IML_Help_TOC.html&quot;&gt;IML&lt;/a&gt; 一系列的自动化部署与监控工具，在运维方面较为方便。但是由于 Lustre 的软件代码是在内核上运行，如果出现故障，问题定位就显得不那么直观，需要从内核消息这边定位，大部分操作涉及重启操作系统；&lt;/li&gt;&lt;li&gt;数据可靠性：数据是 AI 公司宝贵的资产，算法工程师在存储上的数据要足够稳定与安全。Lustre 目前不支持文件系统级的冗余，只能通过硬件的 RAID 来抵御硬盘故障；&lt;/li&gt;&lt;li&gt;客户端多级缓存功能：构建大规模数据存储系统（PB 量级以上）为了考虑成本数据大部分会存储在 HDD 上，为了自动区分冷热数据，并充分利用我们 GPU 服务器的接近 TB 级的内存与大量的独立 SSD 盘，我们希望具备客户端多级自动缓存功能 ，以应对高密集 I/O 的读写场景；&lt;/li&gt;&lt;li&gt;社区活跃度：社区活跃度也是我们考虑的因素，活跃的社区在功能版本的迭代与 bug 的解决方面能有更快的响应。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;03-初识-juicefs&quot;&gt;03 初识 JuiceFS&lt;/h1&gt;&lt;p&gt;云知声团队在 2021 年初了解到了 JuiceFS，并跟 Juicedata 团队进行了早期的方案对接、PoC 测试，目前 JuiceFS 已经上线到生产环境，我们也参与到 JuiceFS 开源社区的建设中。&lt;/p&gt;&lt;h2 id=&quot;juicefs-的架构与优势&quot;&gt;JuiceFS 的架构与优势&lt;/h2&gt;&lt;p&gt;JuiceFS 整体的架构由元数据引擎、对象存储集群以及 JuiceFS 客户端组成，其中元数据引擎与对象存储提供了多种方案供用户选择。通过 JuiceFS 存储的数据将持久化到对象存储（如 Amazon S3）中，相应的元数据可以根据场景和需求持久化到 Redis、MySQL、SQLite 以及 TiKV 等各种数据库引擎中。&lt;/p&gt;&lt;p/&gt;&lt;small class=&quot;d-flex justify-content-center&quot;&gt;JuiceFS 架构图&lt;/small&gt;&lt;p&gt;不管是元数据引擎还是对象存储都有很多成熟的方案可以选择，如果是在公有云上使用通常也有全托管的服务开箱即用。JuiceFS 的元数据自动备份、回收站等特性一定程度上保障了数据的可靠性，避免一些意外情况导致数据丢失，当然如果是自己运维元数据引擎和对象存储依然需要做好数据备份。JuiceFS 的本地缓存特性可以自动将频繁访问的数据缓存到内存以及磁盘中，同时也会对文件的元数据进行 &lt;a href=&quot;https://juicefs.com/docs/zh/community/cache_management&quot;&gt;缓存&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;poc-测试&quot;&gt;PoC 测试&lt;/h2&gt;&lt;p&gt;PoC 测试我们主要是在小规模环境上做可行性验证，关注的点是产品特性、运维方式、与上游调度、业务框架对接是否可行等。&lt;/p&gt;&lt;p&gt;PoC 测试环境我们搭建了一个单节点的 Redis + 3 节点的 Ceph 对象存储集群，在环境搭建方面因为 Redis 跟 Ceph 都比较成熟，部署运维方案可以参考的资料也比较全，而 JuiceFS 客户端能够以较为简单的方式对接元数据引擎跟对象存储。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;业务的适配方面，JuiceFS 完全兼容 POSIX 协议，我们上层的业务可以无缝切换与对接，业务使用无感，JuiceFS 也支持以 CSI Driver 这种云原生的方式调度，与我们整个平台的技术栈契合。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在性能测试方面，我们在测试环境进行了文字识别模型的训练，实验环境为：模型采用服务器版中文识别模型 backbone 为 ResNet-18，数据整体总量是 98G 采用 LMDB 格式存储，在 6 张 NVIDIA Tesla V100 进行了三组实验，分别是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;直接在 Lustre 读&lt;/li&gt;&lt;li&gt;在带有 200G 内存缓存的 JuiceFS 读&lt;/li&gt;&lt;li&gt;在带有 960G SSD 缓存的 JuiceFS 上读&lt;/li&gt;&lt;/ul&gt;&lt;p/&gt;&lt;small class=&quot;d-flex justify-content-center&quot;&gt;耗时对比&lt;/small&gt;&lt;p&gt;JuiceFS 客户端拥有多级缓存功能，因而在性能测试中，&lt;strong&gt;在数据读方面有较大性能提升，相比 Lustre 性能有1倍以上的提升&lt;/strong&gt;，这与我们的业务特点比较契合。&lt;/p&gt;&lt;p&gt;综合考虑运维方式、业务契合度以及性能表现，我们决定将 JuiceFS 带上生产。&lt;/p&gt;&lt;h1 id=&quot;04-juicefs-在-atlas-的使用场景与收益&quot;&gt;04 JuiceFS 在 Atlas 的使用场景与收益&lt;/h1&gt;&lt;p&gt;JuiceFS 客户端多级缓存目前主要应用在我们的&lt;strong&gt;文字识别、语音降噪以及语音识别场景。由于 AI 模型训练的数据读取特点是读多写少，我们充分利用 JuiceFS 客户端的缓存带来 IO 读取的加速收益。&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;收益一-加速-ai模型训练&quot;&gt;收益一：加速 AI模型训练&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1）语音降噪测试&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;降噪场景模型的测试中使用的是散文件，每个数据都是 wav 格式的小于 100k 的语音小文件，在降噪场景我们测试了数据 dataload 阶段的 I/O 数据，JuiceFS 客户端节点的内存缓存为 512G，在 500h 规模的数据下、以 40 的 batch size 进行测试。&lt;/p&gt;&lt;p/&gt;&lt;small class=&quot;d-flex justify-content-center&quot;&gt;Lustre vs. JuiceFS 每秒处理数据量对比&lt;/small&gt;&lt;p&gt;从测试结果来看，单从数据读取效率上，在 wav 小文件方面，&lt;strong&gt;JuiceFS 为 6.45 it/s，而 Lustre 为 5.15 it/s，性能提升25%。JuiceFS 有效加速了我们端到端的模型训练，整体缩短了模型的产出时间。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）文字识别场景&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在文字识别场景中，模型为 CRNN backbone 为 MobileNet v2 ，测试环境如下：&lt;/p&gt;&lt;p&gt;| 模型 | CRNN backbone 为 MobileNet v2 |
| 深度学习框架 | PyTorch |
| 数据规模 | 3*32*320 的图像生成的 50G LMDB 数据 |
| 数据类型 | LMDB |
| GPU Server | 6 * NVIDIA Tesla V100 / 512G MEM / 56 CPU Cores |
| 缓存 | 200G 的内存缓存 |
| Batch size | 6*400 |&lt;/p&gt;&lt;p/&gt;&lt;small class=&quot;d-flex justify-content-center&quot;&gt;Lustre vs. JuiceFS 每个 batch 耗时对比&lt;/small&gt;&lt;p&gt;在这个测试中，主要做了 JuiceFS 跟 Lustre 的速度对比，&lt;strong&gt;从实验的结果来看从 Lustre 读每个 batch 耗时 1.5s，从 JuiceFS 读每个 batch 耗时为 1.1s，提升36%。从模型收敛的时间来看，从 Lustre 的 96 小时下降到 JuiceFS 的 86 小时，使用 JuiceFS 能够将 CRNN 模型的产出时间缩短 10 小时。&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;收益二-加速-ai模型开发&quot;&gt;收益二：加速 AI模型开发&lt;/h2&gt;&lt;p/&gt;&lt;small class=&quot;d-flex justify-content-center&quot;&gt;模型开发示意图&lt;/small&gt;&lt;p&gt;在算法工程师将 AI 模型训练任务正式提交到超算集群之前，其模型需要经过大量的调试，我们为用户提供了调试环境，Dev Node 跟 Atlas 正式训练集群一样都是使用相同的存储，开发节点与训练节点都挂载 JuiceFS 客户端，因此在开发机的修改能够无缝迁移到 Atlas 训练集群。&lt;/p&gt;&lt;p&gt;用户在开发机上可以灵活地选择开发环境，既可以在宿主机搭配 Anaconda 进行远程调试，也可以使用容器的方式运行开发环境。用户的调试模型大部分是 PyTorch 跟 TensorFlow 类型的框架，我们发现在调试的时候需要频繁地 import Python 包，例如 numpy、torch 等，这种包都是大量的小文件组成的，基于旧的存储系统，用户 import 包的耗时需要几秒或者几十秒。算法人员反馈模型调试的效率比较低。&lt;strong&gt;作为统一开发环境，伴随着大量的安装包导入、代码编译、日志读写、样本下载，这要求调试机既能有较高的吞吐量，又能快速处理大量小文件。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通过引入 JuiceFS，我们在开发机上挂载了 JuiceFS 客户端，客户端挂载时候使用元数据缓存以及数据读缓存机制。在元数据缓存方面，当 JuiceFS 客户端使用 open() 操作打开一个文件的时候，其文件属性（attribute）就会自动缓存在客户端内存中，只要缓存未失效则随后执行的 getattr() 跟 open() 操作都会从内存缓存中立即返回结果。在执行 read() 操作的时候文件的 chunk 和 slice 信息也会自动缓存在客户端内存。数据缓存方面我们使用内存作为缓存介质，采用该方式用户调试的 Python 包在经过第一次 import 之后会全部缓存在内存上，第二次调试的时候，直接从内存缓存读取文件。&lt;strong&gt;相比之前的方式，整体速度有 2-4 倍的提速 ，极大地提高了用户的调试效率，用户的体验也更加好。&lt;/strong&gt;&lt;/p&gt;&lt;h1 id=&quot;05-juicefs-在-atlas-的使用方式&quot;&gt;05 JuiceFS 在 Atlas 的使用方式&lt;/h1&gt;&lt;p&gt;在数据的存放管理方式上，我们采用兼容现有分布式存储系统的管理方式，JuiceFS 集群的节点也都是对接 LDAP，每个节点会通过 LDAP 的客户端与 LDAP Server 集群进行交互认证。&lt;/p&gt;&lt;p&gt;超算平台上的每个组归属于不同的目录，每个目录下是各自组内或者部门内的成员，不同组之间的目录是不可见的。目录的权限是基于 Linux 的权限管控机制。用户在 Atlas 集群提交训练任务的时候，集群的任务提交工具会自动读取系统上用户的 UID 与 GID 信息然后将其注入用户提交的任务 Pod 的 securityContext 字段，则 Atlas 集群上运行的容器 Pod 内所有容器的进程运行的 UID 与存储系统上的信息一致，保证权限不越界。&lt;/p&gt;&lt;p/&gt;&lt;small class=&quot;d-flex justify-content-center&quot;&gt;存储权限认证架构图&lt;/small&gt;&lt;p&gt;在数据的访问方式上，云知声目前有 2 种使用方式：
1. 一种是通过计算节点的 HostPath 访问数据；
2. 另一种是更加云原生的方式，通过结合 Fluid + JuiceFS 对利用 JuiceFS 客户端为 Atlas 的应用提供数据的访问与加速。&lt;/p&gt;&lt;p&gt;1）HostPath Volume&lt;/p&gt;&lt;p/&gt;&lt;small class=&quot;d-flex justify-content-center&quot;&gt;HostPath Volume 数据读取示意图&lt;/small&gt;&lt;p&gt;第 1 种还是沿用之前的访问分布式文件存储系统的方式，通过 Kubernetes HostPath 的方式直接访问本地的存储系统客户端，我们在所有的 CPU 与 GPU 计算节点都部署了 JuiceFS 的客户端，用户提交计算任务的时候需要指定 Kubernetes volume 为 HostPath 的方式，将 JuiceFS 的目录映射。这种方式的缓存管理就比较裸，在用户侧是无法对缓存进行管理的。&lt;/p&gt;&lt;p&gt;2） Fluid + JuiceFS&lt;/p&gt;&lt;p&gt;第 2 种方式是结合 Fluid + JuiceFS 的方式，关于如何使用的具体方式可以参考&lt;a href=&quot;https://juicefs.com/blog/cn/posts/fluid-with-juicefs/&quot;&gt;我们之前的文章&lt;/a&gt; ，这里仅对架构做个简单的说明。&lt;/p&gt;&lt;p/&gt;&lt;small class=&quot;d-flex justify-content-center&quot;&gt;基于 Fluid 数据读取示意图&lt;/small&gt;&lt;p&gt;Fluid 会启动 JuiceFS 相关的组件包括 FUSE 跟 Worker pod，其中 FUSE Pod 提供了 JuiceFS 客户端的缓存能力，Worker Pod 则实现了对缓存生命周期的管理，Atlas 平台的 AI 离线训练任务通过与 FUSE Pod 客户端交互，进行 AI 训练数据的读取，通过 Fluid 提供的缓存调度能力以及数据集的可观测性，平台的用户可以通过亲和调度将缓存部署在特定的计算节点上，同时用户能够直观的看到缓存的使用情况（例如缓存数据集的大小、缓存的百分比、缓存的容量等）。&lt;/p&gt;&lt;h1 id=&quot;06-juicefs-存储生产环境建设&quot;&gt;06 JuiceFS 存储生产环境建设&lt;/h1&gt;&lt;h2 id=&quot;元数据引擎&quot;&gt;元数据引擎&lt;/h2&gt;&lt;p&gt;目前我们生产环境的元数据引擎采用 Redis，Redis 节点的系统盘做了 RAID1，同时 Redis 持久化的数据会定期同步到另一台备份节点上。Redis 的数据持久化我们采用 AOF + RDB 的方案，每秒进行一次数据持久化，相关配置如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;appendonly yes 
appendfsync everysec 
aof-load-truncated yes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于我们节点采用的是 100G InifiBand，IB 的 &lt;a href=&quot;https://www.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed&quot;&gt;网卡驱动&lt;/a&gt; 需要用户根据自己的操作系统版本下载对应的 ISO。目前我们的节点是采用 Kernel 5.4 的版本，由于 IB 驱动跟操作系统还有 Kernel 版本有较强的耦合性，当我们 Kernel 升级到 5.4 版本，驱动需要重新编译安装，驱动版本 MLNX_OFED_LINUX-5.5-1.0.3.2-rhel7.6-x86_64.iso 注意 GCC 的版本一定要是 GCC 9 的才行，否则编译过程会出现各种莫名其妙的问题。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 安装 gcc9 
yum --enablerepo=extras install centos-release-scl-rh 
yum install devtoolset-9-gcc scl enable devtoolset-9 bash 
# 进行 IB 驱动编译 
mount /dev/sr0 ib 
./mlnx_add_kernel_support.sh -m /root/ib -k (kernel 版本)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;对象存储&quot;&gt;对象存储&lt;/h2&gt;&lt;p&gt;对象存储采用自建的 Ceph 集群，Ceph 集群采用 Cephadm 进行部署，目前生产环境用的是 Octopus 版本。Cephadm 是随着 Ceph 新版本 v15.2.0（Octopus）发布的安装工具，并且不支持 Ceph 的旧版本，Cephadm 不依赖于外部配置工具，如 Ansible、 Rook 和 Salt，它通过 SSH 将管理器守护进程连接到主机来实现这一点。管理器守护进程可以添加、删除和更新 Ceph 容器。&lt;/p&gt;&lt;p&gt;通过 Cephadm 引导一个单节点的集群，Cephadm 会在执行 bootstrap 引导的节点部署 mgr 跟 mon 服务，当添加其他节点的时候，会自动在其中一台部署 mgr 管理节点，目前我们生产采用 2 个管理节点 3 个监控节点。&lt;/p&gt;&lt;p&gt;在 Ceph 调优方面我们借鉴了社区其他用户分享的方案，感谢携程的工程师在我们调优过程中提供的帮助 （&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg4NTU0MzEyMg==&amp;amp;mid=2247495811&amp;amp;idx=2&amp;amp;sn=475c9f9cb910f05f9eb93a8de1033e4a&amp;amp;scene=21#wechat_redirect&quot;&gt;点击此处查看&lt;/a&gt;），主要做了以下实践：&lt;/p&gt;&lt;p&gt;服务器层面（&lt;a href=&quot;https://docs.ceph.com/en/latest/start/hardware-recommendations&quot;&gt;参考&lt;/a&gt;）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;42Cores 256GB 24*18T HDD&lt;/li&gt;&lt;li&gt;系统盘: 2* 960G SAS SSD&lt;/li&gt;&lt;li&gt;BlueStore&lt;/li&gt;&lt;li&gt;关闭 NUMA&lt;/li&gt;&lt;li&gt;升级 kernel: 5.4.146 开启 io_uring&lt;/li&gt;&lt;li&gt;Kernel pid max，修改 /proc/sys/kernel/pid_max&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Ceph 配置方面：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ceph RADOS：直接调用 librados 接口，不走 S3 协议&lt;/li&gt;&lt;li&gt;Bucket shard&lt;/li&gt;&lt;li&gt;关闭 pg 的自动调整功能&lt;/li&gt;&lt;li&gt;OSD 日志存储（采用 bluestore，建议裸容量配比—— block : block.db : block.wal = 100:1:1，后两者建议采用 SSD 或 NVMe SSD）&lt;/li&gt;&lt;li&gt;3 副本&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;juicefs-客户端&quot;&gt;JuiceFS 客户端&lt;/h2&gt;&lt;p&gt;我们环境中 JuiceFS 对接的对象存储是 Ceph RADOS，JuiceFS 采用 librados 与 Ceph 进行交互，因此需要重新编译 JuiceFS 客户端，建议 librados 的版本要跟 Ceph 的对应，例如在我们的环境 Ceph 版本是 Octopus（v15.2.*），librados 的版本建议为 v15.2.*，CentOS 自带的 librados 版本比较低，因此我们可以在官网自己下载对应的包，我们的环境上只需要下载 librados2-15.2.10-0.el7.x86_64.rpm 和 librados-devel-15.2.10-0.el7.x86_64.rpm。然后运行如下命令安装：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yum localinstall -y librad*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装 librados 后即可编译 JuiceFS 客户端了（推荐 Go 1.17+ 、GCC 5.4+）：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make juicefs.ceph
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译完 JuiceFS 即可创建文件系统并在计算节点进行 JuiceFS 客户端的挂载了。目前 JuiceFS 在我们的生产环境使用还是有一大部分是直接通过 Kubernetes 的 HostPath 进行挂载，因此我们在各个 GPU、CPU 节点中都挂载了 JuiceFS 客户端，并通过 systemctl 管理 JuiceFS 的挂载进程，实现开机自动挂载与故障的恢复。&lt;/p&gt;&lt;h1 id=&quot;07-未来展望与规划&quot;&gt;07 未来展望与规划&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;最后归纳下 Lustre 与 JuiceFS 的特点与适用场景&lt;/strong&gt;，企业可以根据自身的业务场景、运维能力以及存储规模做出相应的选择。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lustre 作为老牌 HPC 领域的存储系统，为许多全球最大的超算系统提供动力，具有多年的生产环境经验。其具有符合 POSIX 标准、支持各种高性能低时延的网络，允许 RDMA 访问的优点，适用于传统 HPC 领域的高性能计算，但是在云原生场景的适配上还不够完善，目前只能采用 HostPath Volume 对接，而且其软件运行在 Linux 内核之上，对运维人员要求更高；&lt;/li&gt;&lt;li&gt;JuiceFS 是一款云原生领域的分布式存储系统产品，提供了 CSI Driver 以及 Fluid 等方式使用能够更好地与 Kubernetes 进行结合。在运维部署方面为用户提供了更多灵活的选择，用户既可以选择在云上也可以选择私有化部署，在存储扩容运维方面较为简单。完全兼容 POSIX 标准使得深度学习的应用可以无缝迁移，但是由于后端对象存储的特点其在随机写方面会有较高的延迟，在只读的场景可以使用客户端的多级缓存进行加速较为符合我们的业务特点。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Atlas 平台未来与 JuiceFS 相关的规划是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;元数据引擎升级：TiKV 适合在 1 亿以上文件数量（最多可以支撑到百亿级文件），对性能以及数据安全都有较高要求的场景，目前我们已经完成了 TiKV 的内部测试也在积极跟进社区的进展，后续要将元数据引擎迁移到 TiKV。&lt;/li&gt;&lt;li&gt;基于目录（项目）的文件配额：开源版本目前还不支持基于目录的配额，目前我们每个部门是归属在 JuiceFS 的不同的目录下，需要对目录的配额做限制。JuiceFS 社区版已经在规划实现这个特性，会在 v1.0.0 之后的版本正式发布。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;感谢 JuiceFS 开源社区在云知声 Atlas 计算平台高效存储建设的过程中提供的技术支持，云知声也在积极地进行内部测试，争取后续将开发的功能以及改进回馈到开源社区。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>357b8e00abe61e39f52bd4ca8d7b3581</guid>
<title>看完这篇还不会搞「策略模式」算我输. . .</title>
<link>https://toutiao.io/k/d9ai32f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.66875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z85sZvtmju1ITB5pCPeoYmFdq6lZbhyLjhIuTWmibJgueIjLALCFUqAjV8GRcibQsUwicMnsIWp5iaMg8NBczeLPfQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;首先简单讨论几个问题：&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;设计模式就是为了重用代码？基本是的，同时也方便扩展维护&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;策略模式就是一堆if...else...？是的&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;策略模式通常和什么模式搞基？最直观模版模式。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;最初原型：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;红包&quot;&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;equals&lt;/span&gt;(grantType)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;会员&quot;&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;equals&lt;/span&gt;(grantType)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;这么写有问题吗？我个人觉得没有任何问题，但确实新增判断分支时需要改这块代码逻辑，不易维护扩展，而且每个条件分支没什么依赖，却被耦合在一起，使用switch...case...类似。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;不建议使用map&amp;lt;type,Bean&amp;gt;:&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我为什么不建议使用map将处理类型和处理bean收集起来？假设使用map进行收集，那么你需要初始化组装这个map，如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;, Bean&amp;gt; map = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;, Bean&amp;gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;){{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    put(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;红包&quot;&lt;/span&gt;,getBean());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    put(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;会员&quot;&lt;/span&gt;,getBean());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;按类型进行收集，然后用的时候再根据类型获取对应的bean。显然这里put操作需要维护，所以不建议使用这种方式。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;不建议使用applicationContext去getBean：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;还有具体的处理类的名字当作一种类型，通过这个beanName来获取bean，如下：&lt;em&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.getBean&lt;/span&gt;(&quot;红包&quot;,&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;ICouponService&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.class&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;需要根据beanName来获取bean，beanName需要作为参数传进来，先不说beanName和业务类型名字大相径庭，传beanName就有点诡异。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;个人愚见：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用接口定义规范&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ICouponService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;canDiscount&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String couponStrArr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;discount&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(CouponContext couponContext)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getMinusAmount&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; userid)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;    2.最常见的模式：模版模式&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AbstractCouponService&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ICouponService&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;discount&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(CouponContext couponContext)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        couponContext.finalAmount = couponContext.totalAmount - getMinusAmount(couponContext.getUid());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;    3.if判断应该在策略类里&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RedPacketCouponServiceImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AbstractCouponService&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    String grantType = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;红包优惠&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;canDiscount&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String couponStrArr)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; couponStrArr.contains(grantType);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getMinusAmount&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; uid)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;VipCouponServiceImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AbstractCouponService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    String grantType = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;会员优惠&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;canDiscount&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String couponStrArr)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; couponStrArr.contains(grantType);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;discount&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(CouponContext couponContext)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        couponContext.finalAmount = couponContext.finalAmount * getMinusAmount(couponContext.getUid()) / &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getMinusAmount&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; uid)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;    4.支持哪些策略应该动态配置，这里使用apollo&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@RequestMapping(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;/coupon&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CouponController&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Value(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;&lt;span class=&quot;code-snippet__subst&quot;&gt;${coupon.strarr:}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    String couponStrArr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}    &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;    5.使用List收集所有策略&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__keyword&quot;&gt;Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;private List&amp;lt;ICouponService&amp;gt; couponServiceList;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__keyword&quot;&gt;GetMapping&lt;/span&gt;(&quot;&lt;span class=&quot;code-snippet__keyword&quot;&gt;cacl&lt;/span&gt;&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public ResultInfo caclCoupon(int totalAmount){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;CouponContext&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;couponContext&lt;/span&gt; = &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;CouponContext&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.builder&lt;/span&gt;()&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.totalAmount&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;totalAmount&lt;/span&gt;)&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.build&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;couponServiceList&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.stream&lt;/span&gt;()&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.filter&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;e-&lt;/span&gt;&amp;gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.canDiscount&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;couponStrArr&lt;/span&gt;))&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.forEach&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;e-&lt;/span&gt;&amp;gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.discount&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;couponContext&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;ResultInfo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.success&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;couponContext&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;本文从实际应用出发，抽象出简化版的优惠扣减模型，采用模版模式&amp;amp;策略模式完成。策略模式本质就是if...else...，开发应用也不该被设计模式所束缚，策略多了自然就会使用策略模式了。同意作者请点在看，觉得有用请点个赞。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5226390685640362&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z85sZvtmju2ZMvElmjsA4IjbhwMTv9HFQHMSCWvDnX6DtgEiaVYia6ZlZL9jPGvBDIyIDK5tAP1oZGlJxDhFYSYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;773&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1733a6f416dc871a7b3de7e82122a005</guid>
<title>RocketMQ的原理和实战</title>
<link>https://toutiao.io/k/grrdmf6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body blogpost-body-html&quot;&gt;
&lt;ol class=&quot;list-paddingleft-2&quot;&gt;
&lt;li&gt;
&lt;p&gt;搭建环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;helloworld&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我也不例外，直接搞起来。&lt;/p&gt;
&lt;h1 class=&quot;eye-protector-processed&quot;&gt;一、RocketMQ的安装&lt;/h1&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;1、文档&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;官方网站&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;http://rocketmq.apache.org&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;https://github.com/apache/rocketmq&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;2、下载&lt;/h2&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;wget https://mirror.bit.edu.cn/apache/rocketmq/4.7.0/rocketmq-all-4.7.0-bin-release.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们是基于Centos8来的，面向官方文档学习，所以下载地址自然也是官方的。&lt;/p&gt;
&lt;p&gt;去官方网站找合适的版本进行下载，目前我这里最新的是4.7.0版本。&lt;/p&gt;
&lt;p&gt;http://rocketmq.apache.org/dowloading/releases/&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java0-1593308598.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java0-1593308598.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.7.0/rocketmq-all-4.7.0-bin-release.zip&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java5-1593308598.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java5-1593308598.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;3、准备工作&lt;/h2&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;3.1、解压&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;unzip rocketmq-all-4.7.0-bin-release.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;3.2、安装jdk&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;sudo yum install java-1.8.0-openjdk-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;4、启动&lt;/h2&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;4.1、启动namesrv&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;cd rocketmq-all-4.7.0-bin-release/bin
./mqnamesrv
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;4.2、启动broker&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;cd rocketmq-all-4.7.0-bin-release/bin
./mqbroker -n localhost:9876
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常见错误以及解决方案：&lt;/p&gt;
&lt;p&gt;常见错误：启动broker失败 &lt;code class=&quot;eye-protector-processed&quot;&gt;Cannot allocate memory&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;[root@node-113b bin]# ./mqbroker -n localhost:9876
Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000005c0000000, 8589934592, 0) failed
; error=&#x27;Cannot allocate memory&#x27; (errno=12)#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 8589934592 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /usr/local/rocketmq/bin/hs_err_pid1997.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;是由于默认内存分配的太大了，超出了本机内存，直接OOM了。&lt;/p&gt;
&lt;p&gt;修改bin/目录下的如下两个脚本&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;runbroker.sh
runserver.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这两个脚本里都搜索&lt;code class=&quot;eye-protector-processed&quot;&gt;-server -Xms&lt;/code&gt;，将其内存分配小点，自己玩的话512MB就足够了，够够的了！&lt;/p&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;4.3、启动成功标识&lt;/h3&gt;
&lt;p&gt;namesrv启动成功标识：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java7-1593308598.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java7-1593308598.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;broker启动成功标识：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java2-1593308598.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java2-1593308598.png&quot;/&gt;&lt;/p&gt;
&lt;h1 class=&quot;eye-protector-processed&quot;&gt;二、RocketMQ控制台的安装&lt;/h1&gt;
&lt;p&gt;控制台目前获取方式有如下两种：&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot;&gt;
&lt;li&gt;
&lt;p&gt;第三方网站去下载现成的，比如csdn等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;官方源码包自己编译而成，官方没有现成的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们这里当然采取官方方式。&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;1、官方文档&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;github仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;https://github.com/apache/rocketmq-externals&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中文指南&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;https://github.com/apache/rocketmq-externals/blob/master/rocketmq-console/doc/1_0_0/UserGuide_CN.md&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;2、下载源码&lt;/h2&gt;
&lt;p&gt;https://github.com/apache/rocketmq-externals/tree/release-rocketmq-console-1.0.0&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;3、修改配置（可选）&lt;/h2&gt;
&lt;p&gt;我们下载完解压后的文件目录如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2022.cnblogs.com/blog/420532/202206/420532-20220618094036965-975680575.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改&lt;code class=&quot;eye-protector-processed&quot;&gt;rocketmq-console/src/main/resources/application.properties&lt;/code&gt;文件的&lt;code class=&quot;eye-protector-processed&quot;&gt;server.port&lt;/code&gt;就欧了。默认8080。&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;4、编译打包&lt;/h2&gt;
&lt;p&gt;进入&lt;code class=&quot;eye-protector-processed&quot;&gt;rocketmq-console&lt;/code&gt;，然后用maven进行编译打包， 如果没有mvn， 安装它： yum install maven ，然后：&lt;/p&gt;
&lt;pre class=&quot;language-bash highlighter-hljs&quot;&gt;&lt;code&gt;mvn clean package -DskipTests&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打包完会在target下生成我们spring boot的jar程序，直接&lt;code class=&quot;eye-protector-processed&quot;&gt;java -jar&lt;/code&gt;启动完事。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java5-1593308598-1.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java5-1593308598-1.png&quot;/&gt;&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;5、启动控制台&lt;/h2&gt;
&lt;p&gt;将编译打包好的springboot程序扔到服务器上，执行如下命令进行启动&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;java -jar rocketmq-console-ng-1.0.1.jar --rocketmq.config.namesrvAddr=127.0.0.1:9876
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class=&quot;eye-protector-processed&quot;&gt;
&lt;p&gt;如果想后台启动就nohup &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;访问一下看看效果：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java4-1593308598.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java4-1593308598.png&quot;/&gt;&lt;/p&gt;
&lt;h1 class=&quot;eye-protector-processed&quot;&gt;三、测试&lt;/h1&gt;
&lt;blockquote class=&quot;eye-protector-processed&quot;&gt;
&lt;p&gt;rocketmq给我们提供了测试工具和测试类，可以在安装完很方便的进行测试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;0、准备工作&lt;/h2&gt;
&lt;p&gt;rocketmq给我们提供的默认测试工具在bin目录下，叫&lt;code class=&quot;eye-protector-processed&quot;&gt;tools.sh&lt;/code&gt;。我们测试前需要配置这个脚本，为他指定namesrv地址才可以，否则测试发送/消费消息的时候会出现如下错误 &lt;strong&gt;connect to null failed&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;22:49:02.470 [main] DEBUG i.n.u.i.l.InternalLoggerFactory - Using SLF4J as the default logging framework
RocketMQLog:WARN No appenders could be found for logger (io.netty.util.internal.PlatformDependent0).
RocketMQLog:WARN Please initialize the logger system properly.
java.lang.IllegalStateException: org.apache.rocketmq.remoting.exception.RemotingConnectException: connect to null failed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置如下：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;vim tools.sh
# 在export JAVA_HOME上面添加如下这段代码
export NAMESRV_ADDR=localhost:9876
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;1、发送消息&lt;/h2&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;./tools.sh org.apache.rocketmq.example.quickstart.Producer&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class=&quot;eye-protector-processed&quot;&gt;
&lt;p&gt;成功的话会看到哗哗哗的日志，因为这个类会发送1000条消息到TopicTest这个Topic下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;2、消费消息&lt;/h2&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;./tools.sh org.apache.rocketmq.example.quickstart.Consumer&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class=&quot;eye-protector-processed&quot;&gt;
&lt;p&gt;成功的话会看到哗哗哗的日志，因为这个类会消费TopicTest下的全部消息。刚发送的1000条都会被消费掉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;3、控制台&lt;/h2&gt;
&lt;p&gt;发送成功后我们自然也能来到管控台去看消息和消费情况等等等信息&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java1-1593308598.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java1-1593308598.png&quot;/&gt;&lt;/p&gt;
&lt;h1 class=&quot;eye-protector-processed&quot;&gt;四、架构图以及角色&lt;/h1&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;1、架构图&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java4-1593308598-1.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java4-1593308598-1.png&quot;/&gt;&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;2、角色&lt;/h2&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;2.1、Broker&lt;/h3&gt;
&lt;ul class=&quot;list-paddingleft-2&quot;&gt;
&lt;li&gt;
&lt;p&gt;理解成RocketMQ本身&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;broker主要用于producer和consumer接收和发送消息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;broker会定时向nameserver提交自己的信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是消息中间件的消息存储、转发服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个Broker节点，在启动时，都会遍历NameServer列表，与每个NameServer建立长连接，注册自己的信息，之后定时上报&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;2.2、Nameserver&lt;/h3&gt;
&lt;ul class=&quot;list-paddingleft-2&quot;&gt;
&lt;li&gt;
&lt;p&gt;理解成zookeeper的效果，只是他没用zk，而是自己写了个nameserver来替代zk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;底层由netty实现，提供了路由管理、服务注册、服务发现的功能，是一个无状态节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nameserver是服务发现者，集群中各个角色（producer、broker、consumer等）都需要定时向nameserver上报自己的状态，以便互相发现彼此，超时不上报的话，nameserver会把它从列表中剔除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nameserver可以部署多个，当多个nameserver存在的时候，其他角色同时向他们上报信息，以保证高可用，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NameServer集群间互不通信，没有主备的概念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nameserver内存式存储，nameserver中的broker、topic等信息默认不会持久化，所以他是无状态节点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;2.3、Producer&lt;/h3&gt;

&lt;h3 class=&quot;eye-protector-processed&quot;&gt;2.4、Consumer&lt;/h3&gt;

&lt;h2 class=&quot;eye-protector-processed&quot;&gt;3、核心流程&lt;/h2&gt;
&lt;ul class=&quot;list-paddingleft-2&quot;&gt;
&lt;li&gt;
&lt;p&gt;Broker都注册到Nameserver上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Producer发消息的时候会从Nameserver上获取发消息的topic信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Producer向提供服务的所有master建立长连接，且定时向master发送心跳&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consumer通过NameServer集群获得Topic的路由信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consumer会与所有的Master和所有的Slave都建立连接进行监听新消息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 class=&quot;eye-protector-processed&quot;&gt;五、核心概念&lt;/h1&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;1、Message&lt;/h2&gt;
&lt;p&gt;消息载体。Message发送或者消费的时候必须指定Topic。Message有一个可选的Tag项用于过滤消息，还可以添加额外的键值对。&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;2、topic&lt;/h2&gt;
&lt;p&gt;消息的逻辑分类，发消息之前必须要指定一个topic才能发，就是将这条消息发送到这个topic上。消费消息的时候指定这个topic进行消费。就是逻辑分类。&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;3、queue&lt;/h2&gt;
&lt;p&gt;1个Topic会被分为N个Queue，数量是可配置的。message本身其实是存储到queue上的，消费者消费的也是queue上的消息。多说一嘴，比如1个topic4个queue，有5个Consumer都在消费这个topic，那么会有一个consumer浪费掉了，因为负载均衡策略，每个consumer消费1个queue，5&amp;gt;4，溢出1个，这个会不工作。&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;4、Tag&lt;/h2&gt;
&lt;p&gt;Tag 是 Topic 的进一步细分，顾名思义，标签。每个发送的时候消息都能打tag，消费的时候可以根据tag进行过滤，选择性消费。&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;5、Message Model&lt;/h2&gt;
&lt;p&gt;消息模型：集群（Clustering）和广播（Broadcasting）&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;6、Message Order&lt;/h2&gt;
&lt;p&gt;消息顺序：顺序（Orderly）和并发（Concurrently）&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;7、Producer Group&lt;/h2&gt;
&lt;p&gt;消息生产者组&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;8、Consumer Group&lt;/h2&gt;
&lt;p&gt;消息消费者组&lt;/p&gt;
&lt;h1 class=&quot;eye-protector-processed&quot;&gt;六、ACK&lt;/h1&gt;
&lt;p&gt;首先要明确一点：&lt;strong&gt;ACK机制是发生在Consumer端的，不是在Producer端的&lt;/strong&gt;。也就是说Consumer消费完消息后要进行ACK确认，如果未确认则代表是消费失败，这时候Broker会进行重试策略（仅集群模式会重试）。ACK的意思就是：Consumer说：ok，我消费成功了。这条消息给我标记成已消费吧。&lt;/p&gt;
&lt;h1 class=&quot;eye-protector-processed&quot;&gt;七、消费模式&lt;/h1&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;1、集群模式（Clustering）&lt;/h2&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;1.1、图解&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java0-1593308598-1.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java0-1593308598-1.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;1.2、特点&lt;/h3&gt;

&lt;h2 class=&quot;eye-protector-processed&quot;&gt;2、广播模式（Broadcasting）&lt;/h2&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;2.1、图解&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java2-1593308599.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java2-1593308599.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;2.2、特点&lt;/h3&gt;
&lt;ul class=&quot;list-paddingleft-2&quot;&gt;
&lt;li&gt;
&lt;p&gt;消费进度由consumer维护&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保证每个消费者都消费一次消息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消费失败的消息不会重投&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 class=&quot;eye-protector-processed&quot;&gt;八、Java API&lt;/h1&gt;
&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;pom如下&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.rocketmq&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;rocketmq-client&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;4.7.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;1、Producer&lt;/h2&gt;
&lt;blockquote class=&quot;eye-protector-processed&quot;&gt;
&lt;p&gt;发消息肯定要必备如下几个条件：&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot;&gt;
&lt;li&gt;
&lt;p&gt;指定生产组名（不能用默认的，会报错）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置namesrv地址（必须）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定topic name（必须）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定tag/key（可选）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;验证消息是否发送成功：消息发送完后可以启动消费者进行消费，也可以去管控台上看消息是否存在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;1.1、send（同步）&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;public class Producer {
    public static void main(String[] args) throws Exception {
        // 指定生产组名为my-producer
        DefaultMQProducer producer = new DefaultMQProducer(&quot;my-producer&quot;);
        // 配置namesrv地址
        producer.setNamesrvAddr(&quot;124.57.180.156:9876&quot;);
        // 启动Producer
        producer.start();
        // 创建消息对象，topic为：myTopic001，消息内容为：hello world
        Message msg = new Message(&quot;myTopic001&quot;, &quot;hello world&quot;.getBytes());
        // 发送消息到mq，同步的
        SendResult result = producer.send(msg);
        System.out.println(&quot;发送消息成功！result is : &quot; + result);
        // 关闭Producer
        producer.shutdown();
        System.out.println(&quot;生产者 shutdown！&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;发送消息成功！result is : SendResult [sendStatus=SEND_OK, msgId=A9FE854140F418B4AAC26F7973910000, offsetMsgId=7B39B49D00002A9F00000000000589BE, messageQueue=MessageQueue [topic=myTopic001, brokerName=broker-a, queueId=0], queueOffset=7]
生产者 shutdown！
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;1.2、send（批量）&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;public class ProducerMultiMsg {
    public static void main(String[] args) throws Exception {
        // 指定生产组名为my-producer
        DefaultMQProducer producer = new DefaultMQProducer(&quot;my-producer&quot;);
        // 配置namesrv地址
        producer.setNamesrvAddr(&quot;124.57.180.156:9876&quot;);
        // 启动Producer
        producer.start();

        String topic = &quot;myTopic001&quot;;
        // 创建消息对象，topic为：myTopic001，消息内容为：hello world1/2/3
        Message msg1 = new Message(topic, &quot;hello world1&quot;.getBytes());
        Message msg2 = new Message(topic, &quot;hello world2&quot;.getBytes());
        Message msg3 = new Message(topic, &quot;hello world3&quot;.getBytes());
        // 创建消息对象的集合，用于批量发送
        List&amp;lt;Message&amp;gt; msgs = new ArrayList&amp;lt;&amp;gt;();
        msgs.add(msg1);
        msgs.add(msg2);
        msgs.add(msg3);
        // 批量发送的api的也是send()，只是他的重载方法支持List&amp;lt;Message&amp;gt;，同样是同步发送。
        SendResult result = producer.send(msgs);
        System.out.println(&quot;发送消息成功！result is : &quot; + result);
        // 关闭Producer
        producer.shutdown();
        System.out.println(&quot;生产者 shutdown！&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;cnb-code-toolbar&quot;&gt;&lt;span class=&quot;cnb-code-toolbar-item&quot;&gt;JAVA&lt;span class=&quot;cnb-code-toolbar-item&quot;&gt; 复制&lt;span class=&quot;cnb-code-toolbar-item&quot;&gt; 全屏&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;发送消息成功！result is : SendResult [sendStatus=SEND_OK, msgId=A9FE854139C418B4AAC26F7D13770000,A9FE854139C418B4AAC26F7D13770001,A9FE854139C418B4AAC26F7D13770002, offsetMsgId=7B39B49D00002A9F0000000000058A62,7B39B49D00002A9F0000000000058B07,7B39B49D00002A9F0000000000058BAC, messageQueue=MessageQueue [topic=myTopic001, brokerName=broker-a, queueId=0], queueOffset=8]
生产者 shutdown！
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class=&quot;eye-protector-processed&quot;&gt;
&lt;p&gt;从结果中可以看到只有一个msgId，所以可以发现虽然是三条消息对象，但是却只发送了一次，大大节省了client与server的开销。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;错误情况：&lt;/p&gt;
&lt;p&gt;批量发送的topic必须是同一个，如果message对象指定不同的topic，那么批量发送的时候会报错：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;Exception in thread &quot;main&quot; org.apache.rocketmq.client.exception.MQClientException: Failed to initiate the MessageBatch
For more information, please visit the url, http://rocketmq.apache.org/docs/faq/
    at org.apache.rocketmq.client.producer.DefaultMQProducer.batch(DefaultMQProducer.java:950)
    at org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:898)
    at com.chentongwei.mq.rocketmq.ProducerMultiMsg.main(ProducerMultiMsg.java:29)
Caused by: java.lang.UnsupportedOperationException: The topic of the messages in one batch should be the same
    at org.apache.rocketmq.common.message.MessageBatch.generateFromList(MessageBatch.java:58)
    at org.apache.rocketmq.client.producer.DefaultMQProducer.batch(DefaultMQProducer.java:942)
    ... 2 more
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;1.3、sendCallBack（异步）&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;public class ProducerASync {
    public static void main(String[] args) throws Exception {
       // 指定生产组名为my-producer
        DefaultMQProducer producer = new DefaultMQProducer(&quot;my-producer&quot;);
        // 配置namesrv地址
        producer.setNamesrvAddr(&quot;124.57.180.156:9876&quot;);
        // 启动Producer
        producer.start();

        // 创建消息对象，topic为：myTopic001，消息内容为：hello world async
        Message msg = new Message(&quot;myTopic001&quot;, &quot;hello world async&quot;.getBytes());
        // 进行异步发送，通过SendCallback接口来得知发送的结果
        producer.send(msg, new SendCallback() {
            // 发送成功的回调接口
            @Override
            public void onSuccess(SendResult sendResult) {
                System.out.println(&quot;发送消息成功！result is : &quot; + sendResult);
            }
            // 发送失败的回调接口
            @Override
            public void onException(Throwable throwable) {
                throwable.printStackTrace();
                System.out.println(&quot;发送消息失败！result is : &quot; + throwable.getMessage());
            }
        });

        producer.shutdown();
        System.out.println(&quot;生产者 shutdown！&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;生产者 shutdown！
java.lang.IllegalStateException: org.apache.rocketmq.remoting.exception.RemotingConnectException: connect to [124.57.180.156:9876] failed
    at org.apache.rocketmq.client.impl.factory.MQClientInstance.updateTopicRouteInfoFromNameServer(MQClientInstance.java:681)
    at org.apache.rocketmq.client.impl.factory.MQClientInstance.updateTopicRouteInfoFromNameServer(MQClientInstance.java:511)
    at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.tryToFindTopicPublishInfo(DefaultMQProducerImpl.java:692)
    at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:556)
    at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.access$300(DefaultMQProducerImpl.java:97)
    at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl$4.run(DefaultMQProducerImpl.java:510)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.rocketmq.remoting.exception.RemotingConnectException: connect to [124.57.180.156:9876] failed
    at org.apache.rocketmq.remoting.netty.NettyRemotingClient.getAndCreateNameserverChannel(NettyRemotingClient.java:441)
    at org.apache.rocketmq.remoting.netty.NettyRemotingClient.getAndCreateChannel(NettyRemotingClient.java:396)
    at org.apache.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:365)
    at org.apache.rocketmq.client.impl.MQClientAPIImpl.getTopicRouteInfoFromNameServer(MQClientAPIImpl.java:1371)
    at org.apache.rocketmq.client.impl.MQClientAPIImpl.getTopicRouteInfoFromNameServer(MQClientAPIImpl.java:1361)
    at org.apache.rocketmq.client.impl.factory.MQClientInstance.updateTopicRouteInfoFromNameServer(MQClientInstance.java:624)
    ... 10 more
发送消息失败！result is : org.apache.rocketmq.remoting.exception.RemotingConnectException: connect to [124.57.180.156:9876] failed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为啥报错了？很简单，他是异步的，从结果就能看出来，由于是异步的，我还没发送到mq呢，你就先给我shutdown了。肯定不行，所以我们在shutdown前面sleep 1s在看效果&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;public class ProducerASync {
    public static void main(String[] args) throws Exception {
       // 指定生产组名为my-producer
        DefaultMQProducer producer = new DefaultMQProducer(&quot;my-producer&quot;);
        // 配置namesrv地址
        producer.setNamesrvAddr(&quot;124.57.180.156:9876&quot;);
        // 启动Producer
        producer.start();

        // 创建消息对象，topic为：myTopic001，消息内容为：hello world async
        Message msg = new Message(&quot;myTopic001&quot;, &quot;hello world async&quot;.getBytes());
        // 进行异步发送，通过SendCallback接口来得知发送的结果
        producer.send(msg, new SendCallback() {
            // 发送成功的回调接口
            @Override
            public void onSuccess(SendResult sendResult) {
                System.out.println(&quot;发送消息成功！result is : &quot; + sendResult);
            }
            // 发送失败的回调接口
            @Override
            public void onException(Throwable throwable) {
                throwable.printStackTrace();
                System.out.println(&quot;发送消息失败！result is : &quot; + throwable.getMessage());
            }
        });

        Thread.sleep(1000);

        producer.shutdown();
        System.out.println(&quot;生产者 shutdown！&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;发送消息成功！result is : SendResult [sendStatus=SEND_OK, msgId=A9FE854106E418B4AAC26F8719B20000, offsetMsgId=7B39B49D00002A9F0000000000058CFC, messageQueue=MessageQueue [topic=myTopic001, brokerName=broker-a, queueId=1], queueOffset=2]
生产者 shutdown！
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;1.4、sendOneway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;public class ProducerOneWay {
    public static void main(String[] args) throws Exception {
        // 指定生产组名为my-producer
        DefaultMQProducer producer = new DefaultMQProducer(&quot;my-producer&quot;);
        // 配置namesrv地址
        producer.setNamesrvAddr(&quot;124.57.180.156:9876&quot;);
        // 启动Producer
        producer.start();

        // 创建消息对象，topic为：myTopic001，消息内容为：hello world oneway
        Message msg = new Message(&quot;myTopic001&quot;, &quot;hello world oneway&quot;.getBytes());
        // 效率最高，因为oneway不关心是否发送成功，我就投递一下我就不管了。所以返回是void
        producer.sendOneway(msg);
        System.out.println(&quot;投递消息成功！，注意这里是投递成功，而不是发送消息成功哦！因为我sendOneway也不知道到底成没成功，我没返回值的。&quot;);
        producer.shutdown();
        System.out.println(&quot;生产者 shutdown！&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;投递消息成功！，注意这里是投递成功，而不是发送消息成功哦！因为我sendOneway也不知道到底成没成功，我没返回值的。
生产者 shutdown！
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;1.5、效率对比&lt;/h3&gt;
&lt;p&gt;sendOneway &amp;gt; sendCallBack &amp;gt; send批量 &amp;gt; send单条&lt;/p&gt;
&lt;p&gt;很容易理解，sendOneway不求结果，我就负责投递，我不管你失败还是成功，相当于中转站，来了我就扔出去，我不进行任何其他处理。所以最快。&lt;/p&gt;
&lt;p&gt;而sendCallBack是异步发送肯定比同步的效率高。&lt;/p&gt;
&lt;p&gt;send批量和send单条的效率也是分情况的，如果只有1条msg要发，那还搞毛批量，直接send单条完事。&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;2、Consumer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;每个consumer只能关注一个topic。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发消息肯定要必备如下几个条件：&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot;&gt;
&lt;li&gt;
&lt;p&gt;指定消费组名（不能用默认的，会报错）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置namesrv地址（必须）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定topic name（必须）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定tag/key（可选）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;2.1、CLUSTERING&lt;/h3&gt;
&lt;p&gt;集群模式，默认。&lt;/p&gt;
&lt;p&gt;比如启动五个Consumer，Producer生产一条消息后，Broker会选择五个Consumer中的其中一个进行消费这条消息，所以他属于点对点消费模式。&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;public class Consumer {
    public static void main(String[] args) throws Exception {
        // 指定消费组名为my-consumer
        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(&quot;my-consumer&quot;);
        // 配置namesrv地址
        consumer.setNamesrvAddr(&quot;124.57.180.156:9876&quot;);
        // 订阅topic：myTopic001 下的全部消息（因为是*，*指定的是tag标签，代表全部消息，不进行任何过滤）
        consumer.subscribe(&quot;myTopic001&quot;, &quot;*&quot;);
        // 注册监听器，进行消息消息。
        consumer.registerMessageListener(new MessageListenerConcurrently() {
            @Override
            public ConsumeConcurrentlyStatus consumeMessage(List&amp;lt;MessageExt&amp;gt; msgs, ConsumeConcurrentlyContext consumeConcurrentlyContext) {
                for (MessageExt msg : msgs) {
                    String str = new String(msg.getBody());
                    // 输出消息内容
                    System.out.println(str);
                }
                // 默认情况下，这条消息只会被一个consumer消费，这叫点对点消费模式。也就是集群模式。
                // ack确认
                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
            }
        });
        // 启动消费者
        consumer.start();
        System.out.println(&quot;Consumer start&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;2.2、BROADCASTING&lt;/h3&gt;
&lt;p&gt;广播模式。&lt;/p&gt;
&lt;p&gt;比如启动五个Consumer，Producer生产一条消息后，Broker会把这条消息广播到五个Consumer中，这五个Consumer分别消费一次，每个都消费一次。&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;// 代码里只需要添加如下这句话即可：
consumer.setMessageModel(MessageModel.BROADCASTING); 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;2.3、两种模式对比&lt;/h3&gt;

&lt;h2 class=&quot;eye-protector-processed&quot;&gt;3、TAG&amp;amp;&amp;amp;KEY&lt;/h2&gt;
&lt;blockquote class=&quot;eye-protector-processed&quot;&gt;
&lt;p&gt;发送/消费 消息的时候可以指定tag/key来进行过滤消息，支持通配符。*代表消费此topic下的全部消息，不进行过滤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看下&lt;code class=&quot;eye-protector-processed&quot;&gt;org.apache.rocketmq.common.message.Message&lt;/code&gt;源码可以发现发消息的时候可以指定tag和keys：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;public Message(String topic, String tags, String keys, byte[] body) {
    this(topic, tags, keys, 0, body, true);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;public class ProducerTagsKeys {
    public static void main(String[] args) throws Exception {
        // 指定生产组名为my-producer
        DefaultMQProducer producer = new DefaultMQProducer(&quot;my-producer&quot;);
        // 配置namesrv地址
        producer.setNamesrvAddr(&quot;124.57.180.156:9876&quot;);
        // 启动Producer
        producer.start();
        // 创建消息对象，topic为：myTopic001，消息内容为：hello world，且tags为：test-tags，keys为test-keys
        Message msg = new Message(&quot;myTopic001&quot;, &quot;test-tags&quot;, &quot;test-keys&quot;, &quot;hello world&quot;.getBytes());
        // 发送消息到mq，同步的
        SendResult result = producer.send(msg);
        System.out.println(&quot;发送消息成功！result is : &quot; + result);
        // 关闭Producer
        producer.shutdown();
        System.out.println(&quot;生产者 shutdown！&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;发送消息成功！result is : SendResult [sendStatus=SEND_OK, msgId=A9FE854149DC18B4AAC26FA4B7200000, offsetMsgId=7B39B49D00002A9F0000000000058DA6, messageQueue=MessageQueue [topic=myTopic001, brokerName=broker-a, queueId=3], queueOffset=3]
生产者 shutdown！
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看管控台，可以发现tags和keys已经生效了：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages medium-zoom-image&quot; title=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java1-1593308599.png&quot; alt=&quot;RocketMQ入门到入土（一）新手也能看懂的原理和实战！&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2020/06/java1-1593308599.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;消费的时候如果指定*那就是此topic下的全部消息，我们可以指定前缀通配符，比如：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;// 这样就只会消费myTopic001下的tag为test-*开头的消息。
consumer.subscribe(&quot;myTopic001&quot;, &quot;test-*&quot;);

// 代表订阅Topic为myTopic001下的tag为TagA或TagB的所有消息
consumer.subscribe(&quot;myTopic001&quot;, &quot;TagA||TagB&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还支持SQL表达式过滤，不是很常用。不BB了。&lt;/p&gt;
&lt;h2 class=&quot;eye-protector-processed&quot;&gt;4、常见错误&lt;/h2&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;4.1、sendDefaultImpl call timeout&lt;/h3&gt;
&lt;h4 class=&quot;eye-protector-processed&quot;&gt;4.1.1、异常&lt;/h4&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;Exception in thread &quot;main&quot; org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout
    at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:666)
    at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1342)
    at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1288)
    at org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:324)
    at com.chentongwei.mq.rocketmq.Producer.main(Producer.java:18)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 class=&quot;eye-protector-processed&quot;&gt;4.1.2、解决&lt;/h4&gt;
&lt;p&gt;1.如果你是云服务器，首先检查安全组是否允许9876这个端口访问，是否开启了防火墙，如果开启了的话是否将9876映射了出去。&lt;/p&gt;
&lt;p&gt;2.修改配置文件&lt;code class=&quot;eye-protector-processed&quot;&gt;broker.conf&lt;/code&gt;，加上：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;brokerIP1=我用的是阿里云服务器，这里是我的公网IP
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动namesrv和broker的时候加上本机IP（我用的是阿里云服务器，这里是我的公网IP）：&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;./bin/mqnamesrv -n IP:9876
./bin/mqbroker -n IP:9876 -c conf/broker.conf&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;eye-protector-processed&quot;&gt;4.2、No route info of this topic&lt;/h3&gt;
&lt;h4 class=&quot;eye-protector-processed&quot;&gt;4.2.1、异常&lt;/h4&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;Exception in thread &quot;main&quot; org.apache.rocketmq.client.exception.MQClientException: No route info of this topic: myTopic001
See http://rocketmq.apache.org/docs/faq/ for further details.
    at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:684)
    at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1342)
    at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1288)
    at org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:324)
    at com.chentongwei.mq.rocketmq.Producer.main(Producer.java:18)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 class=&quot;eye-protector-processed&quot;&gt;4.2.2、解决&lt;/h4&gt;
&lt;p&gt;很明显发送成功了，不再是刚才的超时了，但是告诉我们没有这个topic。那不能每次都手动创建呀，所以启动broker的时候可以指定参数让broker为我们自动创建。如下&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums eye-protector-processed highlighter-hljs&quot;&gt;&lt;code&gt;./bin/mqbroker -n IP:9876 -c conf/broker.conf autoCreateTopicEnable=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8e65ef0d1d898b8ffcf1e86871c74d80</guid>
<title>Android 开发中那些无中生有的事</title>
<link>https://toutiao.io/k/i3lbygm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

          

          
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c5bdbdfedf48dcdbe624ba9c02e179da</guid>
<title>大众点评搜索相关性技术探索与实践</title>
<link>https://toutiao.io/k/dpawan7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;58&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBVHPgeBXgTUj0ib1Kwfosl82xO1Aw7x6gccLuuYs1dbxI7REI7OcjbGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总第521&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2022年 第038篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;103&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;103&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBic5ADGrKxgSd0tibyMiasOHXjb46qFBw7PTfuWAxXzWq32lDkL05icwkMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot; data-width=&quot;100%&quot; opacity=&quot;&quot; title=&quot;undefined&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; data-style=&quot;text-align: left; font-size: 14px; color: inherit;&quot;&gt;&lt;section&gt;&lt;span&gt;搜索相关性用于衡量Query和Doc的相关程度，是搜索引擎的重要环节，本文主要讲述大众点评搜索团队在相关性计算上的技术探索和实践，通过多相似矩阵模型结构、多阶段训练等方法提升预训练模型在相关性问题上的效果，同时解决基于交互的模型在线预测的性能问题，希望为从事相关工作的同学能够带来一些启发或者帮助。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1. 背景&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2. 搜索相关性现有技术&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3. 点评搜索相关性计算&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4. 应用实战&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;5. 总结与展望&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 背景&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;点评搜索是大众点评App的核心入口之一，用户通过搜索来满足不同场景下对生活服务类商户的找店需求。搜索的长期目标是持续优化搜索体验，提升用户的搜索满意度，这需要我们理解用户搜索意图，准确衡量搜索词与商户之间的相关程度，尽可能展示相关商户并将更相关的商户排序靠前。因此，搜索词与商户的相关性计算是点评搜索的重要环节。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大众点评搜索场景面临的相关性问题复杂多样，用户的搜索词比较多样，例如搜索商户名、菜品、地址、类目以及它们之间的各种复杂组合，同时商户也有多种类型的信息，包括商户名、地址信息、团单信息、菜品信息以及其他各种设施和标签信息等，导致Query与商户的匹配模式异常复杂，容易滋生出各种各样的相关性问题。具体来说，可以分为如下几种类型：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;文本误匹配&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在搜索时，为保证更多商户被检索和曝光，Query可能会被拆分成更细粒度的词进行检索，因此会带来Query错误匹配到商户不同字段的问题，如图1(a)所示的用户搜“生蚝火锅”应该想找汤底中包含生蚝的火锅，而“生蚝”和“火锅”分别匹配到商户的两个不同菜品。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;语义偏移&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Query与商户字面匹配，但商户与Query的主要意图在语义上不相关，如“奶茶”-“黑糖珍珠奶茶包”，如图1(b)所示。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;类目偏移&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Query与商户字面匹配且语义相关，但主营类目与用户需求不符，例如用户搜索“水果”时一家提供“果盘”的KTV商户明显与用户的需求不相关。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;386&quot; data-ratio=&quot;0.6908212560386473&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBHRJ1AZEj6hnUyIiaDSOTaMx42PbSeyVl58elTDxUFicpdAJtzN45A3tw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;(a) 文本误匹配示例&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;260&quot; data-ratio=&quot;0.46618357487922707&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBiaHqdqx8eDibE6X5oqlBibWw69Kv81yNLskI9xqicbicibz4NeoENvPCttKg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;(b) 语义偏移示例&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;图1 点评搜索相关性问题示例&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;基于字面匹配的相关性方法无法有效应对上述问题，为了解决搜索列表中的各类不符合用户意图的不相关问题，需要更准确地刻画搜索词与商户的深度语义相关性。本文在基于美团海量业务语料训练的MT-BERT预训练模型的基础上，在大众点评搜索场景下优化Query与商户（&lt;/span&gt;&lt;span&gt;POI，对应通用搜索引擎中的Doc&lt;/span&gt;&lt;span&gt;）的深度语义相关性模型，并将Query与POI的相关性信息应用在搜索链路各环节。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文将从搜索相关性现有技术综述、点评搜索相关性计算方案、应用实战、总结与展望四个方面对点评搜索相关性技术进行介绍。其中点评搜索相关性计算章节将介绍我们如何解决商户输入信息构造、使模型适配点评搜索相关性计算及模型上线的性能优化等三项主要挑战，应用实战章节将介绍点评搜索相关性模型的离线及线上效果。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 搜索相关性现有技术&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;搜索相关性旨在计算Query和返回Doc之间的相关程度，也就是判断Doc中的内容是否满足用户Query的需求，对应NLP中的语义匹配任务（&lt;/span&gt;&lt;span&gt;Semantic Matching&lt;/span&gt;&lt;span&gt;）。在大众点评的搜索场景下，搜索相关性就是计算用户Query和商户POI之间的相关程度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;文本匹配方法&lt;/strong&gt;：早期的文本匹配任务仅考虑了Query与Doc的字面匹配程度，通过TF-IDF、BM25等基于Term的匹配特征来计算相关性。字面匹配相关性线上计算效率较高，但基于Term的关键词匹配泛化性能较差，缺少语义和词序信息，且无法处理一词多义或者多词一义的问题，因此漏匹配和误匹配现象严重。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;传统语义匹配模型&lt;/strong&gt;：为弥补字面匹配的缺陷，语义匹配模型被提出以更好地理解Query与Doc的语义相关性。传统的语义匹配模型主要包括基于隐式空间的匹配：将Query和Doc都映射到同一个空间的向量，再用向量距离或相似度作为匹配分，如Partial Least Square（&lt;/span&gt;&lt;span&gt;PLS&lt;/span&gt;&lt;span&gt;）&lt;sup&gt;[1]&lt;/sup&gt;；以及基于翻译模型的匹配：将Doc映射到Query空间后进行匹配或计算Doc翻译成Query的概率&lt;sup&gt;[2]&lt;/sup&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着深度学习和预训练模型的发展，深度语义匹配模型也被业界广泛应用。深度语义匹配模型从实现方法上分为基于表示（&lt;/span&gt;&lt;span&gt;Representation-based&lt;/span&gt;&lt;span&gt;）的方法及基于交互（&lt;/span&gt;&lt;span&gt;Interaction-based&lt;/span&gt;&lt;span&gt;）的方法。预训练模型作为自然语言处理领域的有效方法，也被广泛使用在语义匹配任务中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;456&quot; data-ratio=&quot;0.8165137614678899&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBLpcibCmw6DsC90ynibSWadn7g8gCexEg2ChhEsNMXNeyAib8ibDIiaSVnbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;(a) 基于表示的多域相关性模型&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;383&quot; data-ratio=&quot;0.6859688195991092&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBYr2peT4WXmOPu91j7hF18icWGxuKkFDMxjMmoHFYX1MMLjnthv7dRcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;898&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;(b) 基于交互的相关性模型&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;图2 深度语义匹配相关性模型&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于表示的深度语义匹配模型&lt;/strong&gt;：基于表示的方法分别学习Query及Doc的语义向量表示，再基于两个向量计算相似度。微软的DSSM模型&lt;sup&gt;[3]&lt;/sup&gt;提出了经典的双塔结构的文本匹配模型，即分别使用相互独立的两个网络构建Query和Doc的向量表示，用余弦相似度衡量两个向量的相关程度。微软Bing搜索的NRM&lt;sup&gt;[4]&lt;/sup&gt;针对Doc表征问题，除了基础的Doc标题和内容，还考虑了其他多源信息（&lt;/span&gt;&lt;span&gt;每类信息被称为一个域Field&lt;/span&gt;&lt;span&gt;），如外链、用户点击过的Query等，考虑一个Doc中有多个Field，每个Field内又有多个实例（&lt;/span&gt;&lt;span&gt;Instance&lt;/span&gt;&lt;span&gt;），每个Instance对应一个文本，如一个Query词。模型首先学习Instance向量，将所有Instance的表示向量聚合起来就得到一个Field的表示向量，将多个Field的表示向量聚合起来得到最终Doc的向量。SentenceBERT&lt;sup&gt;[5]&lt;/sup&gt;将预训练模型BERT引入到双塔的Query和Doc的编码层，采用不同的Pooling方式获取双塔的句向量，通过点乘、拼接等方式对Query和Doc进行交互。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大众点评的搜索相关性早期模型就借鉴了NRM和SentenceBERT的思想，采用了图2(a)所示的基于表示的多域相关性模型结构，基于表示的方法可以将POI的向量提前计算并存入缓存，线上只需计算Query向量与POI向量的交互部分，因此在线上使用时计算速度较快。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于交互的深度语义匹配模型&lt;/strong&gt;：基于交互的方法不直接学习Query和Doc的语义表示向量，而是在底层输入阶段就让Query和Doc进行交互，建立一些基础的匹配信号，再将基础匹配信号融合成一个匹配分。ESIM&lt;sup&gt;[6]&lt;/sup&gt;是预训练模型引入之前被业界广泛使用的经典模型，首先对Query和Doc进行编码得到初始向量，再用Attention机制进行交互加权后与初始向量进行拼接，最终分类得到相关性得分。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;引入预训练模型BERT进行交互计算时，通常将Query和Doc拼接作为BERT句间关系任务的输入，通过MLP网络得到最终的相关性得分&lt;sup&gt;[7]&lt;/sup&gt;，如图2(b)所示。CEDR&lt;sup&gt;[8]&lt;/sup&gt;在BERT句间关系任务获得Query和Doc向量之后，对Query和Doc向量进行拆分，进一步计算Query与Doc的余弦相似矩阵。美团搜索团队&lt;sup&gt;[9]&lt;/sup&gt;将基于交互的方法引入美团搜索相关性模型中，引入商户品类信息进行预训练，并引入实体识别任务进行多任务学习。美团到店搜索广告团队&lt;sup&gt;[10]&lt;/sup&gt;提出了将基于交互的模型蒸馏到基于表示的模型上的方法，实现双塔模型的虚拟交互，在保证性能的同时增加Query与POI的交互。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 点评搜索相关性计算&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;基于表示的模型重在表示POI的全局特征，缺乏线上Query与POI的匹配信息，基于交互的方法可以弥补基于表示方法的不足，增强Query和POI的交互，提升模型表达能力，同时，鉴于预训练模型在文本语义匹配任务上的强劲表现，点评搜索相关性计算确定了基于美团预训练模型MT-BERT&lt;sup&gt;[11]&lt;/sup&gt;的交互式方案。将基于预训练模型的交互式BERT应用在点评搜索场景的相关性任务中时，仍存在诸多挑战：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何更好地构造POI侧模型输入信息&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Doc侧模型输入信息的构造是相关性模型中的重要环节。在通用网页搜索引擎中，Doc的网页标题对相关性的判断极为重要，但在点评搜索场景下，POI信息具有字段多、信息复杂的特点，不存在能提供类似“网页标题”信息量的字段，每个商户都通过商户名、类目、地址、团单、商户标签等多种结构化信息来表达。在计算相关性分数时，大量多源商户信息无法全部输入到模型中，而仅使用商户名和类目等基础信息又会因为信息缺失无法达到满意的效果，因此如何更好地构造具有丰富信息量的POI侧模型输入是我们要解决的首要问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何优化模型来更好地适配点评搜索相关性计算&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：大众点评搜索场景中的文本信息与通用的预训练模型语料信息有一定差异，例如通用语义场景下“开心”和“高兴”同义，但在点评搜索的场景下“开心烧烤”和“高兴烧烤”却是两家完全不同的品牌。同时，Query和POI的相关性判定逻辑与通用NLP场景的语义匹配任务也不完全相同，Query和POI的匹配模式非常复杂，当Query匹配到POI的不同字段时，相关性的判定结果也有所不同，例如Query“水果”匹配到“水果店”商户类目时相关性较高，而命中KTV的“水果拼盘”标签时则相关性较弱。因此，相比通用的基于交互的BERT句间关系语义匹配任务，相关性计算还需要关注Query和POI两部分之间的具体匹配情况。如何优化模型来适配点评搜索的场景，并能处理复杂多样的相关性判断逻辑，尽可能地解决各种不相关问题，是我们面临的主要挑战。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;如何解决预训练相关性模型的在线性能瓶颈&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：基于表示的模型虽计算速度较快但表达能力有限，基于交互的模型可以增强Query和POI的交互从而提升模型效果，但在线上使用时存在较大的性能瓶颈。因此，在线上使用12层BERT的基于交互的模型时，如何在保证模型计算效果的同时保证整个计算链路的性能，使其在线上稳定高效运行，是相关性计算线上应用的最后一道关卡。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;经过不断探索与尝试，我们针对POI侧的复杂多源信息，构造了适配点评搜索场景的POI文本摘要；为了让模型更好地适配点评搜索相关性计算，采用了两阶段训练的方法，并根据相关性计算的特点改造了模型结构；最后，通过优化计算流程、引入缓存等措施，成功降低了模型实时计算和整体应用链路的耗时，满足了线上实时计算BERT的性能要求。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 如何更好地构造POI侧模型输入信息&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;在判定Query与POI的相关程度时，POI侧有十几个参与计算的字段，某些字段下的内容特别多（&lt;/span&gt;&lt;span&gt;例如一个商户可能有上百个推荐菜&lt;/span&gt;&lt;span&gt;），因此需要找到合适的方式抽取并组织POI侧信息，输入到相关性模型中。通用搜索引擎（&lt;/span&gt;&lt;span&gt;如百度&lt;/span&gt;&lt;span&gt;），或常见垂类搜索引擎（&lt;/span&gt;&lt;span&gt;如淘宝&lt;/span&gt;&lt;span&gt;），其Doc的网页标题或商品标题信息量丰富，通常是相关性判定过程中Doc侧模型输入的主要内容。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如图3(a)所示，在通用搜索引擎中，通过搜索结果的标题可以一眼看出对应网站的关键信息及是否与Query相关，而在图3(b)大众点评App的搜索结果中，仅通过商户名字段无法得到充足的商户信息，需要结合商户类目（&lt;/span&gt;&lt;span&gt;奶茶果汁&lt;/span&gt;&lt;span&gt;）、用户推荐菜品（&lt;/span&gt;&lt;span&gt;奥利奥利奶茶&lt;/span&gt;&lt;span&gt;）、标签（&lt;/span&gt;&lt;span&gt;网红店&lt;/span&gt;&lt;span&gt;）、地址（&lt;/span&gt;&lt;span&gt;武林广场&lt;/span&gt;&lt;span&gt;）多个字段才能判断该商户与Query“武林广场网红奶茶”的相关性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;388&quot; data-ratio=&quot;0.6790540540540541&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBgcTuTESmQ6G96fuj3LprFp3S4rmouE6DVQ2ZichNibEZ0GgwcxsJJ9lA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1184&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;(a) 通用搜索引擎搜索结果示例&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;557&quot; data-ratio=&quot;0.9975845410628019&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBBONb3X6GmXPg8Qwhy26DTvzuEL0LLZOQQ51nZBRibR5wQCYtQGNpgicw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;(b) 大众点评App搜索结果示例&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;图3 通用搜索引擎与大众点评搜索结果对比&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;标签抽取是业界比较通用的抽取主题信息的途径，因此我们首先尝试了通过商户标签来构造POI侧模型输入的方法，根据商户的评论、基础信息、菜品、商户对应的头部搜索点击词等抽取出具有代表性的商户关键词来作为商户标签。在线上使用时，将已抽取的商户标签，及商户名和类目基础信息一起作为模型的POI侧输入信息，与Query进行交互计算。然而，商户标签对商户信息的覆盖仍不够全面，例如用户搜索菜品“鸡蛋羹”时，某个距用户很近的韩式料理店有鸡蛋羹售卖，但该店的招牌菜、头部点击词等均与“鸡蛋羹”无关，导致该店所抽取的标签词也与“鸡蛋羹”相关性较低，因此模型会将该店判断为不相关，从而对用户体验带来伤害。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了获取最全面的POI表征，一种方案是不抽取关键词，直接将商户的所有字段拼接到模型输入中，但是这种方式会因为模型输入长度过长而严重影响线上性能，且大量冗余信息也会影响模型表现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为构造更具信息量的POI侧信息作为模型输入，我们提出了&lt;strong&gt;POI匹配字段摘要抽取&lt;/strong&gt;的方法，即结合线上Query的匹配情况实时抽取POI的匹配字段文本，并构造匹配字段摘要作为POI侧模型输入信息。POI匹配字段摘要抽取流程如图4所示，我们基于一些文本相似度特征，将与Query最相关且最具信息量的文本字段提取出来，并融合字段类型信息构建成匹配字段摘要。线上使用时，将已抽取的POI匹配字段摘要、商户名及类目基础信息一起作为POI侧模型输入。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;217&quot; data-ratio=&quot;0.3759213759213759&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBmiarjbTbtzVrHdjnQsKkx01Gj63rH36xs3x59vpHorYEyaia35UkzEyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1628&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图4 POI匹配字段摘要抽取流程&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在确定POI侧模型输入信息后，我们采用BERT句间关系任务，先用MT-BERT对Query侧和POI侧匹配字段摘要信息进行编码，然后使用池化后的句向量计算相关分。采用POI匹配字段摘要的方案构造POI侧模型输入信息后，配合样本迭代，相比基于标签的方法，模型的效果有了极大的提升。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 如何优化模型来更好地适配点评搜索相关性计算&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;让模型更好地适配点评搜索相关性计算任务包含两层含义：大众点评搜索场景下的文本信息与MT-BERT预训练模型使用的语料在分布上存在着一定的差异；预训练模型的句间关系任务与Query和POI的相关性任务也略有不同，需要对模型结构进行改造。经过不断探索，我们采用&lt;strong&gt;基于领域数据的两阶段训练&lt;/strong&gt;方案，结合训练样本构造，使预训练模型更适配点评搜索场景的相关性任务；并提出了&lt;strong&gt;基于多相似矩阵的深度交互相关性模型&lt;/strong&gt;，加强Query和POI的交互，提升模型对复杂的Query和POI信息的表达能力，优化相关性计算效果。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2.1 基于领域数据的两阶段训练&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;为了有效利用用户点击数据，并使预训练模型MT-BERT更适配点评搜索相关性任务，我们借鉴百度搜索相关性&lt;sup&gt;[12]&lt;/sup&gt;的思想，引入多阶段训练方法，采用用户点击和负采样数据进行第一阶段领域适配的预训练（&lt;/span&gt;&lt;span&gt;Continual Domain-Adaptive Pre-training&lt;/span&gt;&lt;span&gt;），采用人工标注数据进行第二阶段训练（&lt;/span&gt;&lt;span&gt;Fine-Tune&lt;/span&gt;&lt;span&gt;），模型结构如下图5所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;290&quot; data-ratio=&quot;0.5010006671114076&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBOQbDlVm4m2cQphC72s4Dicl3jLOKymOpqLp8s7DDJLDRGGSIQtVCjNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1499&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图5 基于点击及人工标注数据的两阶段训练模型结构&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于点击数据的第一阶段训练&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;引入点击数据作为第一阶段训练任务的直接原因是在点评搜索场景下存在着一些特有的问题，例如“开心”和“高兴”两个词在通用场景下是几乎完全同义的词，但是在点评搜索的场景下“开心烧烤”和“高兴烧烤”却是两家完全不同的品牌商户，因此点击数据的引入能够帮助模型学习到搜索场景下的一些特有知识。但是直接将点击样本用于相关性判断会存在较大噪声，因为用户点击某个商户可能是由于排序较为靠前导致的误点击，而未点击某个商户也可能仅仅是因为商户距离较远，而并不是因为相关性问题，因此我们引入了多种特征和规则来提高训练样本自动标注的准确率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在构造样本时，通过统计是否点击、点击位次、最大点击商户距用户的距离等特征筛选候选样本，将曝光点击率大于一定阈值的Query-POI对作为正例，并根据业务特点对不同类型商户调整不同的阈值。在负例的构造上，Skip-Above采样策略将位于点击商户之前且点击率小于阈值的商户才做为负样本。此外，随机负采样的方式可以为训练样本补充简单负例，但考虑随机负采样时也会引入一些噪声数据，因此我们利用人工设计的规则对训练数据进行降噪：当Query的类目意图与POI的类目体系较为一致时或者与POI名高度匹配时，则将其从负样本中剔除。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于人工标注数据的第二阶段训练&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;经过第一阶段训练后，考虑到无法完全清除掉点击数据中的噪音，以及相关性任务的特点，因此需要引入基于人工标注样本的第二阶段训练来对模型进行纠偏。除了随机采样一部分数据交给人工去标注外，为了尽可能提升模型的能力，我们通过难例挖掘和对比样本增强方式生产大量高价值样本交给人工去标注。具体如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1）&lt;strong&gt;难例挖掘&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;特定类型样本挖掘&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：通过设计一种基于Query和POI的特征和两者的匹配情况来刻画BadCase类型的方法，自动化从候选数据集中筛选出特定BadCase类型的样本进行送标。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;用户点击过但线上旧版模型判定为不相关的&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：该方法可以挖掘出当前线上模型预测错误及语义接近的用户难以区分的难例。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;边缘采样&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：通过边缘采样的方式挖掘具有较高不确定性的样本，如抽取模型预测得分在阈值附近的样本。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;模型或人工识别困难的样本&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：用当前模型预测训练集，将模型预测结果与标注标签不一致的样本，及人工标注标签有冲突的样本类型重新送标。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;2）&lt;strong&gt;对比样本增强&lt;/strong&gt;：借鉴对比学习的思想，为一些高度匹配的样本生成对比样本进行数据增强，并进行人工标注确保样本标签的准确率。通过对比样本之间的差异，模型可以关注到真正有用的信息，同时提升对同义词的泛化能力，从而得到更好的效果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;243&quot; data-ratio=&quot;0.42035398230088494&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBqFlK2CHjiaVTMNZPibTEy0d7bZRrj0BHCLnUicLuiaQ5lb08djc2YibPt6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1356&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图6 对比样本增强示例&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以跨菜品匹配的相关性问题为例，如上图6所示，同样是Query拆开后与商户的多个推荐菜字段匹配的情况，Query“榴莲蛋糕”与推荐菜“榴莲千层、黑森林蛋糕”是相关的，但Query“鹅肝汉堡”与“铁板鹅肝、芝士牛肉汉堡”是不相关的，为了增强模型对这类高度匹配但结果相反的Case的识别能力，我们构造了“榴莲蛋糕”与“榴莲千层”、“鹅肝汉堡”与“铁板鹅肝”这两组对比样本，去掉了与Query在文本上匹配但对模型判断没有帮助的信息，让模型学到真正决定是否相关的关键信息，同时提升模型对“蛋糕”和“千层”这类同义词的泛化能力。类似地，其他类型的难例同样可以用这种样本增强方式来提升效果。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2.2 基于多相似矩阵的深度交互模型&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;BERT句间关系是一个通用的NLP任务，用于判断两个句子的关系，而相关性任务是计算Query和POI的相关程度。在计算过程中，句间关系任务不仅计算Query与POI的交互，还计算Query内部和POI内部的交互，而相关性计算更关注Query与POI的交互。此外，在模型迭代过程中，我们发现部分类型的困难BadCase对模型的表达能力有更高要求，例如文本高度匹配但不相关的类型。因此，为进一步提升模型对复杂的Query和POI在相关性任务上的计算效果，我们对第二阶段训练中的BERT句间关系任务进行改造，提出了基于多相似矩阵的深度交互模型，通过引入多相似矩阵来对Query和POI进行深度交互，引入indicator矩阵以更好地解决困难BadCase问题，模型结构如下图7所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;506&quot; data-ratio=&quot;0.8745158791634392&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBlVKJMLYxTGX1ShSEsoeS6g5AWwotic4AHL85JXqeOOkV9MXAsVuOebg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1291&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图7 基于多相似矩阵的深度交互相关性模型&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;受CEDR&lt;sup&gt;[8]&lt;/sup&gt;的启发，我们将经过MT-BERT编码后的Query和POI向量进行拆分，用于显式地计算两部分的深度交互关系，将Query和POI拆分并进行深度交互，一方面可以专门用于学习Query与POI的相关程度，另一方面，增加的参数量可以提升模型的拟合能力。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;参考MatchPyramid&lt;sup&gt;[13]&lt;/sup&gt;模型，深度交互相关性模型计算了四种不同的Query-Doc相似矩阵并进行融合，包括Indicator、Dot-product、余弦距离及欧氏距离，并与POI部分的输出进行Attention加权。其中Indicator矩阵用来描述Query与POI的Token是否一致，计算方式如下：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;M_{ij}=I_{T_{q_i}=T_{d_j}}=\begin{cases}&amp;#10;\small 1,\quad \text{if}\ T_{q_i}=T_{d_j} \\&amp;#10;\small 0,\quad \small\text{otherwise}&amp;#10;\end{cases},&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VaschwibukUjHmhagf4p3zibGn2nUEKohHSKVUBeCWF3Dp64rndibEm9DKpYL1ZiaiaAjcHoIvWSDmO24a/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其中&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 1555.3 977.2&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(970, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(345, 0)&quot;&gt;&lt;path data-c=&quot;6A&quot; d=&quot;M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;代表匹配矩阵的第&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -661 345 672&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;行&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -661 412 865&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6A&quot; d=&quot;M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;列对应的元素，&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 1157.2 964.2&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(584, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;71&quot; d=&quot;M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(446, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;代表Query的第&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -661 345 672&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;个Token，&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 1243.1 1035.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(584, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;64&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(520, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;6A&quot; d=&quot;M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;代表POI的第&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -661 412 865&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6A&quot; d=&quot;M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;个Token。由于Indicator矩阵是表示Query与POI是否字面匹配的矩阵，与另外三个语义匹配矩阵的输入格式不同，Dot-product、余弦距离、欧式距离三个匹配矩阵先进行融合，再将得到的结果与Indicator矩阵进一步融合后再计算最终的相关性得分。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Indicator矩阵可以较好地刻画Query和POI的匹配关系，该矩阵的引入主要考虑到判定Query和POI相关程度时的一个难点：有时即使文本高度匹配，两者也不相关。基于交互的BERT模型结构更容易将文本匹配程度高的Query和POI判定为相关，但是在点评搜索场景中，有些难例却未必如此。比如“豆汁”和“绿豆汁”虽然高度匹配，但并不相关。“猫空”和“猫的天空之城”虽然是拆开匹配，但因为前者是后者的缩写而相关。因此，将不同的文本匹配情况通过Indicator矩阵直接输入给模型，让模型显式地接收“包含”、“拆开匹配”等文本匹配情况，在帮助模型提升对难例判别能力的同时，也不会影响大部分正常的Case的表现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基于多相似矩阵的深度交互相关性模型将Query和POI拆分后计算相似矩阵，相当于让模型对Query和POI进行显式交互，使模型更加适配相关性任务。多个相似矩阵则增加了模型对Query和POI相关程度计算的表征能力，而Indicator矩阵则是针对相关性任务中复杂的文本匹配情况做的特殊设计，让模型对不相关结果的判断更加准确。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3 如何解决预训练相关性模型的在线性能瓶颈&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;将相关性计算部署在线上时，现有方案通常会采用知识蒸馏的双塔结构&lt;sup&gt;[10,14]&lt;/sup&gt;以保证线上计算效率，但此种处理方式或多或少对于模型的效果是有损的。点评搜索相关性计算为保证模型效果，在线上使用了基于交互的12层BERT预训练相关性模型，需要对每个Query下的数百个POI经过12层BERT的模型预测。为保证线上计算效率，我们从模型实时计算流程和应用链路两个角度出发，通过引入缓存机制、模型预测加速、引入前置黄金规则层、将相关性计算与核心排序并行化等措施优化相关性模型在线上部署时的性能瓶颈，使得12层基于交互的BERT相关性模型在线上稳定高效运行，保证可以支持数百个商户和Query间的相关性计算。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3.1 相关性模型计算流程性能优化&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBRSrk3I1wcN2cqKhVBu3BrRlrqy27vAldxm45YZgexEbl6NsBJHFN5g/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1057.3155080213903&quot; data-cropy1=&quot;5.684491978609626&quot; data-cropy2=&quot;801.5133689839572&quot; data-ratio=&quot;0.7540208136234626&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsU2zk0q52HtKQjubeUEyZHB9LwgBfwvclyDdBHvANg2J3icf3CwBmaicBWnV5QLbQbYmOJj8cicpmzIg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1057&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图8 相关性模型线上计算流程图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点评搜索相关性模型的线上计算流程如图8所示，通过缓存机制及TF-Serving模型预测加速来优化模型实时计算的性能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为有效利用计算资源，模型线上部署引入缓存机制，将高频Query的相关性得分写入缓存。后续调用时会优先读取缓存，若命中缓存则直接输出打分，未命中缓存的则进行线上实时计算。缓存机制大大节省了计算资源，有效缓解在线计算的性能压力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对未命中缓存的Query，将其处理为Query侧模型输入，通过图4所述的流程获取每个POI的匹配字段摘要，并处理为POI侧模型输入格式，再调用线上相关性模型输出相关分。相关性模型部署在TF-Serving上，在模型预测时，采用美团机器学习平台的模型优化工具ART框架（&lt;/span&gt;&lt;span&gt;基于Faster-Transformer&lt;sup&gt;[15]&lt;/sup&gt;改进&lt;/span&gt;&lt;span&gt;）进行加速，在保证精度的同时极大地提高了模型预测速度。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3.2 应用链路性能优化&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;578&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBiaIKaF0TXYLC2FISfXNI2E7Z2PUDNZadXbPmXlZicQRfE8w3VLp3tPZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1181&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图9 相关性模型在点评搜索链路中的应用&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;相关性模型在搜索链路中的应用如上图9所示，通过引入前置黄金规则、将相关性计算与核心排序层并行化来优化整体搜索链路中的性能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了进一步对相关性调用链路加速，我们引入了前置黄金规则对Query分流，对部分Query通过规则直接输出相关分，从而缓解模型计算压力。在黄金规则层中利用文本匹配特征对Query和POI进行判断，例如，若搜索词跟商户名完全一致，则通过黄金规则层直接输出“相关”的判定，而无需通过相关性模型计算相关分。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在整体计算链路中，相关性计算过程与核心排序层进行并发操作，以保证相关性计算对搜索链路的整体耗时基本无影响。在应用层，相关性计算被用在搜索链路的召回和排序等多个环节。为降低搜索列表的首屏不相关商户占比，我们将相关分引入到LTR多目标融合排序中进行列表页排序，并采用多路召回融合策略，利用相关性模型的结果，仅将补充召回路中的相关商户融合到列表中。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. 应用实战&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1 离线效果&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;为精准反映模型迭代的离线效果，我们通过多轮人工标注方式构造了一批Benchmark，考虑到当前线上实际使用时主要目标为降低BadCase指标，即对不相关商户的准确识别，我们采用负例的准确率、召回率、F1值作为衡量指标。经过两阶段训练、样本构造及模型迭代带来的收益如下表1所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;281&quot; data-ratio=&quot;0.4867469879518072&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBAx2Yg8Y3luR4hIdWVeqD7icGosp4JIjClppeJpPtUySV6DMnQcS9K2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;表1 点评搜索相关性模型迭代离线指标&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;初始方法（&lt;/span&gt;&lt;span&gt;Base&lt;/span&gt;&lt;span&gt;）采用Query拼接POI匹配字段摘要信息的BERT句对分类任务，Query侧模型输入采用用户输入的原始Query，POI侧采用商户名、商户类目及匹配字段摘要文本拼接方式。引入基于点击数据的两阶段训练后，负例F1指标相比Base方法提升1.84%，通过引入对比样本、难例样本持续迭代训练样本并配合第二阶段的模型输入构造，负例F1相比Base显著提升10.35%，引入基于多相似矩阵的深度交互方法后，负例F1相比Base提升11.14%。模型在Benchmark上的整体指标也达到了AUC为0.96，F1为0.97的高值。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2 线上效果&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;为有效衡量用户搜索满意度，点评搜索每天对线上实际流量进行抽样并人工标注，采用列表页首屏BadCase率作为相关性模型效果评估的核心指标。相关性模型上线后，点评搜索的月平均BadCase率指标相比上线前显著下降了2.9pp（&lt;/span&gt;&lt;span&gt;Percentage Point，百分比绝对点&lt;/span&gt;&lt;span&gt;），并在后续几周BadCase率指标稳定在低点附近，同时，搜索列表页的NDCG指标稳定提升2pp。可以看出相关性模型可以有效识别不相关商户，显著降低了搜索的首屏不相关性问题占比，从而提升了用户的搜索体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图10列举了部分线上BadCase解决示例，小标题是该示例对应的Query，左边为应用了相关性模型的实验组，右边为对照组。图10(a)中当搜索词为“佩姐”时，相关性模型将商户核心词包含“佩姐”的商户“佩姐名品”判断为相关，并将用户可能想找但输错的高质目标商户“珮姐老火锅”也判断为相关，同时，通过引入地址字段标识，将地址中位于“珮姐”旁边的商户判断为不相关；图10(b)中用户通过Query“柚子日料自助”想找一家名为“柚子”的日料自助店，相关性模型将拆词匹配到有柚子相关商品售卖的日料自助店“竹若金枪鱼”正确判断为不相关并将其排序靠后，保证展示在靠前的均为更符合用户主要需求的商户。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;553&quot; data-ratio=&quot;0.9561855670103093&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBfg55bptU9oY8eLndVSnfkd1boE3NTmuR2FCuz4vzGxldcMIibOsyObA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1164&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;(a) 佩姐&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;550&quot; data-ratio=&quot;0.9512961508248232&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBtnJiaDsE7cwcGARy5B05rhPcI0ClBtYiboRl6Mz8z6x8SP1ia7ejoYxiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1273&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;(b) 柚子日料自助&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图10 线上BadCase解决示例&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5. 总结与展望&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;本文介绍了大众点评搜索相关性模型的技术方案及应用实战。为了更好地构造商户侧模型输入信息，我们引入了实时抽取商户匹配字段摘要文本的方法来构造商户表征作为模型输入；为了优化模型来更好地适配点评搜索相关性计算，使用了两阶段训练的方式，采用基于点击和人工标注数据的两阶段训练方案来有效利用大众点评的用户点击数据，并根据相关性计算的特点提出了基于多相似矩阵的深度交互结构，进一步提升相关性模型的效果；为缓解相关性模型的线上计算压力，在线上部署时引入缓存机制和TF-Serving预测加速，引入黄金规则层对Query分流，将相关性计算与核心排序层并行化，从而满足了线上实时计算BERT的性能要求。通过将相关性模型应用在搜索链路各环节，显著降低了不相关问题占比，有效改善了用户的搜索体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前，点评搜索相关性模型在模型表现及线上应用上仍有提升空间，在模型结构方面，我们将探索更多领域先验知识的引入方式，例如识别Query中实体类型的多任务学习、融入外部知识优化模型的输入等；在实际应用方面，将进一步细化为更多档位，以满足用户对于精细化找店的需求。我们还会尝试将相关性的能力应用到非商户模块中，优化整个搜索列表的搜索体验。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6. 作者简介&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;校娅&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;、沈元*、朱迪、汤彪、张弓等，均来自美团/点评事业部搜索技术中心。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;*为本文共同一作。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7. 参考文献&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;[1] Rosipal R, Krämer N. Overview and recent advances in partial least squares[C]//International Statistical and Optimization Perspectives Workshop&quot; Subspace, Latent Structure and Feature Selection&quot;. Springer, Berlin, Heidelberg, 2005: 34-51.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[2] Gao J, He X, Nie J Y. Clickthrough-based translation models for web search: from word models to phrase models[C]//Proceedings of the 19th ACM international conference on Information and knowledge management. 2010: 1139-1148.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[3] Huang P S, He X, Gao J, et al. Learning deep structured semantic models for web search using clickthrough data[C]//Proceedings of the 22nd ACM international conference on Information &amp;amp; Knowledge Management. 2013: 2333-2338.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[4] Zamani, H., Mitra, B., Song, X., Craswell, N., &amp;amp; Tiwary, S. (2018, February). Neural ranking models with multiple document fields. In Proceedings of the eleventh ACM international conference on web search and data mining(WSDM) (pp. 700-708).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[5] Reimers N, Gurevych I. Sentence-bert: Sentence embeddings using siamese bert-networks[J]. arXiv preprint arXiv:1908.10084, 2019.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[6] Chen Q, Zhu X, Ling Z H, et al. Enhanced LSTM for Natural Language Inference[C]//Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). 2017: 1657-1668.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[7] Nogueira R, Yang W, Cho K, et al. Multi-stage document ranking with bert[J]. arXiv preprint arXiv:1910.14424, 2019.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[8] MacAvaney S, Yates A, Cohan A, et al. CEDR: Contextualized embeddings for document ranking[C]//Proceedings of the 42nd International ACM SIGIR Conference on Research and Development in Information Retrieval. 2019: 1101-1104.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[9] 李勇, 佳昊等. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651752296&amp;amp;idx=1&amp;amp;sn=6c20fd97bfd9cc7e5557e40e867f123b&amp;amp;chksm=bd125e258a65d7335e7b649796248908d5a19c7d64f6f8935ab162c11539397feac3d830c3aa&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;BERT在美团搜索核心排序的探索和实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;BERT在美团搜索核心排序的探索和实践&lt;/a&gt;.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[10] 邵雯, 杨扬等. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765882&amp;amp;idx=1&amp;amp;sn=4fcc6685f2d3321e2a01ef5895eb0b2e&amp;amp;chksm=bd1265378a65ec21178ce034086a312e78f3add1507af84d81e642ed6d43148df008a29d1bd6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;预训练技术在美团到店搜索广告中的应用&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;预训练技术在美团到店搜索广告中的应用&lt;/a&gt;.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[11] 杨扬, 佳昊等. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651750945&amp;amp;idx=1&amp;amp;sn=713f16c46065db1f831a495ffb1d9a78&amp;amp;chksm=bd125b6c8a65d27adb13bb234f027d619950a979259ae1c035427c4c025c95e26d7485194232&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;美团BERT的探索和实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;美团BERT的探索和实践&lt;/a&gt;.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[12] Zou L, Zhang S, Cai H, et al. Pre-trained language model based ranking in Baidu search[C]//Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery &amp;amp; Data Mining. 2021: 4014-4022.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[13] Pang L, Lan Y, Guo J, et al. Text matching as image recognition[C]//Proceedings of the AAAI Conference on Artificial Intelligence. 2016, 30(1).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[14] &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1NTMyOTI4Mw==&amp;amp;mid=2247512107&amp;amp;idx=2&amp;amp;sn=ce7ce209d594b0574518e5b62a60998a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;阿里文娱深度语义搜索相关性探索&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;阿里文娱深度语义搜索相关性探索&lt;/a&gt;.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[15] &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/NVIDIA/DeepLearningExamples/tree/master/FasterTransformer&quot; textvalue=&quot;Faster Transformer&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;Faster Transformer&lt;/a&gt;.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;----------  END  ----------&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;招聘信息&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-source=&quot;bj.96weixin.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;美团/点评事业部-搜索技术中心，致力于打造一流的搜索系统和搜索体验，满足大众点评用户的多样搜索需求，支撑各业务在大众点评App上的搜索需求。欢迎感兴趣的同学发送简历至：&lt;/span&gt;&lt;span&gt;edp.itu.zhaopin@meituan.com&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;美团科研合作&lt;/span&gt;&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;section data-source=&quot;bj.96weixin.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;美团科研合作致力于搭建美团技术团队与高校、科研机构、智库的合作桥梁和平台，依托美团丰富的业务场景、数据资源和真实的产业问题，开放创新，汇聚向上的力量，围绕机器人、人工智能、大数据、物联网、无人驾驶、运筹优化等领域，共同探索前沿科技和产业焦点宏观问题，促进产学研合作交流和成果转化，推动优秀人才培养。面向未来，我们期待能与更多高校和科研院所的老师和同学们进行合作。欢迎老师和同学们发送邮件至：&lt;/span&gt;&lt;span&gt;&lt;span&gt;‍&lt;/span&gt;meituan.oi@meituan.com&lt;/span&gt;&lt;span&gt;&lt;span&gt;‍&lt;/span&gt; 。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;也许你还想看&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  | &lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651750945&amp;amp;idx=1&amp;amp;sn=713f16c46065db1f831a495ffb1d9a78&amp;amp;chksm=bd125b6c8a65d27adb13bb234f027d619950a979259ae1c035427c4c025c95e26d7485194232&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;美团BERT的探索和实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt;&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651751586&amp;amp;idx=1&amp;amp;sn=a61c9da125e9b7e68473b32e0278b0ea&amp;amp;chksm=bd125def8a65d4f9d20b682345365d5001e9c863d5046acf683da6116b265d168c0340754fc9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Transformer 在美团搜索排序中的实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651769148&amp;amp;idx=2&amp;amp;sn=f046a03fe1a02abf525c065963ae4038&amp;amp;chksm=bd1210718a65996725b53e639b2b6c3b51eb28f9ac53152a1c695746cf1c15d202535ee5f71f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;端智能在大众点评搜索重排序的应用实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;端智能在大众点评搜索重排序的应用实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阅读更多&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;---&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765958&amp;amp;idx=1&amp;amp;sn=8201546812e5a95a2bee9dffc6d12f00&amp;amp;chksm=bd12658b8a65ec9de2f5be1e96796dfb3c8f1a374d4b7bd91266072f557caf8118d4ddb72b07&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;前端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://t.1yb.co/jo7v&quot; textvalue=&quot; 安全&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765981&amp;amp;idx=1&amp;amp;sn=c2dd86f15dee2cbbc89e27677d985060&amp;amp;chksm=bd1265908a65ec86d4d08f7600d1518b61c90f6453074f9b308c96861c045712280a73751c73&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;算‍法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;算法&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765982&amp;amp;idx=1&amp;amp;sn=231b41f653ac7959f3e3b8213dcec2b0&amp;amp;chksm=bd1265938a65ec85630c546169444d56377bc2f11401d251da7ca50e5d07e353aa01580c7216&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;后端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765964&amp;amp;idx=1&amp;amp;sn=ab6d8db147234fe57f27dd46eec40fef&amp;amp;chksm=bd1265818a65ec9749246dd1a2eb3bf7798772cc4d5b4283b15eae2f80bc6db63a1471a9e61e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数‍据&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;数据&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765965&amp;amp;idx=1&amp;amp;sn=37e0c56c8b080146ce5249243bfd84d8&amp;amp;chksm=bd1265808a65ec96d3a2b2c87c6e27c910d49cb6b149970fb2db8bf88045a0a85fed2e6a0b84&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;安‍全&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;安全&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765972&amp;amp;idx=1&amp;amp;sn=afe02ec92762c1ce18740d03324c4ac3&amp;amp;chksm=bd1265998a65ec8f10d5f58d0f3681ddfc5325137218e568e1cda3a50e427749edb5c6a7dcf5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;And‍roid&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Android&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765973&amp;amp;idx=1&amp;amp;sn=32a23bf1d278dda0398f993ab60a697e&amp;amp;chksm=bd1265988a65ec8e630ef4d24b4946ab6bd7e66702c1d712481cf3c471468a059c470a14c30d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;iO‍S&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;iOS&lt;/span&gt;&lt;/a&gt;&lt;span&gt; &lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765963&amp;amp;idx=1&amp;amp;sn=a3de9ef267d07d94118c1611776a4b28&amp;amp;chksm=bd1265868a65ec906592d25ad65f2a8516338d07ec3217059e6975fc131fc0107d66a8cd2612&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运‍维&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;运维&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765974&amp;amp;idx=1&amp;amp;sn=763c1e37d04acffd0142a2852ecfb000&amp;amp;chksm=bd12659b8a65ec8dfcfeb2028ef287fae7c38f134a665375ba420556ce5d2e4cf398147bd12e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;测‍试&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;测试&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5NjQ5MTI5OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVGibnsaEib3aNlqF0tOrA2RGEmNSbia2nnohE4Tpf95UyTiaSjDVbHRfY8WNBeTuLLTaVdSckkNyEx1Q/0?wx_fmt=png&quot; data-nickname=&quot;美团技术团队&quot; data-alias=&quot;meituantech&quot; data-signature=&quot;10000+工程师，如何支撑中国领先的生活服务电子商务平台？数亿消费者、数百万商户、2000多个行业、几千亿交易额背后是哪些技术在支撑？这里是美团、大众点评、美团外卖、美团配送、美团优选等技术团队的对外窗口。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>