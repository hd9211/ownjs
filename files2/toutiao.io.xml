<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>15555f3d314b903a2e862883b6e608b7</guid>
<title>CTO 们邀请你加入码农周刊 VIP，升职加薪不再难！</title>
<link>https://toutiao.io/k/z9xjxc0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;码农周刊 VIP 新年特惠&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;原价 365 元/年&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;，现价仅需 108 元！&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;全年 52 期「VIP 会员专属邮件周报」&lt;br/&gt;只限 VIP 会员加入的交流圈子&lt;br/&gt;大厂「内推机会」&lt;br/&gt;N 多福利，你值得拥有！&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;CTO 们邀请你加入码农周刊 VIP，升职加薪不再难！&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;31&quot; data-cropselx2=&quot;291&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;350&quot; data-ratio=&quot;1.0857487922705313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNav9LRTqibic3sUoh5tv76OXCpNTWbZ0gCYsFDShjwfRVvM157WDel2cr2dy5ghjxDCCwRc2Mu8bgehnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;「码农周刊 VIP 会员」是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简介版&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;码农周刊 VIP 会员 = 全年 52 期「VIP 会员专属邮件周报」 + 只限 VIP 会员加入的交流圈子 + 大厂「内推机会」 + N 多福利&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;详细版&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击「阅读原文」即可查看详细介绍&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CTO 们邀请你加入码农周刊 VIP，升职加薪不再难！&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;31&quot; data-cropselx2=&quot;291&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;350&quot; data-ratio=&quot;1.0857487922705313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNav9LRTqibic3sUoh5tv76OXCpNTWbZ0gCYsFDShjwfRVvM157WDel2cr2dy5ghjxDCCwRc2Mu8bgehnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1ca1c1501148d269b8fb4d6fb2c4ce66</guid>
<title>揭秘 QUIC 的性能与安全</title>
<link>https://toutiao.io/k/c0c23kp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;在当代网络通讯中，高速且安全的网络接入服务已为互联网厂商的共同追求。针对传统的TCP + TLS的安全互联网服务，在各大头部互联网厂商中反响激烈，如google有提出各种升级和补丁方案，例如TCP fastopen, TLS1.3等，而基于TCP的传统体系已经有运行几十年，形成了固化甚至僵化的网络基础设施，导致补丁升级或者新方案融入变得非常困难。为了更体系化更自然且原生的解决这个问题，google从UDP的途径另辟蹊径创建性能更好、安全性更高的QUIC（Quick UDP Internet Connection）。IETF也把QUIC作为HTTP3的标准基础通讯设施。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;310&quot; data-ratio=&quot;0.5370370370370371&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kVCSSCFiaG8KbZibFUzzF4gXqwOr5zVc2YibEsPDGyNSyj9G6cZTYtVCKkugDj7oY8SFKvvXtXHM5Tdn6gd7wbzicQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 基于TCP+TLS的低效传输&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在web的世界里，我们以一次简单的https请求如以www.XXX.com为例，从发出请求到收到数据，我们可以很容易的从tcpdump和wireshark中发现整个链路中数据的通讯过程以及在这个过程中数据经历了一个什么样的流动，同时我们也可以很清楚的看到在真正用户数据之前需要做哪些前期准备。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一，域名解析，域名解析一般由你使用网络运营商的DNS服务提供，运营商的DNS服务一般都有缓存，这个缓存会缩短网络时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次，需要经历TCP建立连接的三次握手，这需要消耗1个RTT（最后一个ACK可以随数据一起发送）；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来是TLS的握手操作，就以当前使用最为广泛的TLS1.2来说，四次TLS握手需要消耗完整的2个RTT；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面做了这么多铺垫，最后才是真正的用户数据传输，假设用户的数据量很小，一个数据包就传输完了（比如1K左右），只需要一个1RTT。那么这里的数据传输效率就显得很低了，整个传输过程耗费了DNS时间+4个RTT的通讯时间，其中只有一个RTT是在承载用户数据，传输效率只有25%。可以从下面的数据传输序列图中清晰的看到每个阶段的通讯交互情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;310&quot; data-ratio=&quot;0.8863198458574181&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kVCSSCFiaG8KbZibFUzzF4gXqwOr5zVc2YQCr0qQDjBqA9mj4NReaEiaLb50L3u3IHN4KHK2icN1xiaonnahtuPZcyg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1038&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. QUIC的性能提升&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上面的分析中可以看到，基于TCP的HTTPS传输所带来的额外开销变得很大，如何降低这75%的额外开销就变成了人们在网络传输优化路上一直追求的目标了。去掉TLS则安全性完全无法得到保障，明文传输，中间人攻击等等对数据在互联网上传输带来的巨大安全威胁。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;传统的TCP性能提升做法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在安全日益成为人们生活必须部分的过程中，TLS现在只会增强，而不可能再去掉了。那么该如何提升数据的传输效率呢，在TLS层面后来出现了一些优化手段，例如TLS的握手链接复用等。使用sessionID或者ticket的方式来减少TLS握手的数据交互次数，使原本需要两个RTT的TLS握手在一部分情况下（产生连接复用的情况，例如曾经成功握手并且在有效期内）变成一个RTT，节省出来一个RTT使得效率可以从25%提升到33%。不仅仅是TLS层，在TCP上像google这类全球顶级的科技公司也一直致力于优化TCP的性能。其中有提出像TFO（tcp fastopen）这样的新特性用来提升tcp的传输效率，但是这些都有较高内核版本的要求，然而在全球来说整体网络TCP层的基础设施基本已经僵化，导致补丁升级或者新方案融入变得非常困难。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;QUIC使用UDP的1-RTT握手效率提升&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;人们追求性能极致的脚步是无法阻挡的，在TCP基本僵化的情况下，google另辟蹊径，率先实验采用UDP来重新改写整个传输方案，逐渐形成了一套新的传输方案gQUIC。随后google向IETF提交实验性传输层网络协议QUIC的提案，在2016年11月国际互联网工程任务组(IETF)召开的第一次QUIC工作组会议，受到了业界的广泛关注。这也意味着QUIC开始了它的标准化过程，成为新一代传输层协议，形成了最新的iQUIC。在原始的gQUIC中是google自己设计的一套类似TLS的传输加密协议，然后当QUIC进入IETF后，随着整个QUIC的标准化进程，加上近年来出现TLS1.3版本，在性能和安全性上都有很大的提升，IETF在QUIC的加密协议上就放弃了google的加密协议使用了标准的TLS1.3。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;259&quot; data-ratio=&quot;0.4492063492063492&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kVCSSCFiaG8KbZibFUzzF4gXqwOr5zVc2Y6TZmHMJ4fgHCLnaJLeIc8YFhTpp4vYyoy1UAM2nZDNlaCGN68TLPZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1260&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;QUIC的通讯过程在初次没有建立过连接时使用1-RTT的握手机制，同时保证连接的建立和达到安全的保障。以下是QUIC的1-RTT的握手过程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.Server端会持有0-RTT公私钥对，并且生成SCFG（服务端的配置信息对象），把公钥放入SCFG中；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.客户端初次请求时，需要向服务端获取0-RTT公钥，这个需要消耗一个RTT，这也QUIC的1-RTT的所在；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.客户端在收到0-RTT公钥以后会缓存起来，同时生成自己的临时公私钥对，经过前面的一个RTT后客户端把自己的临时私钥与服务端发过来的0-RTT的公钥根据DH算法生成一个加密密钥K1，同时使用K1加密数据同时附送自己的临时公钥一起发送服务端，此时已有用户数据发送；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4.在服务端收到用户使用K1加密的用户数据和客户端发来的临时公钥以后，会做如下几件事：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用0-RTT私钥与客户端发来的临时公钥通过DH算法生成K1解密用户数据并递交到应用；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;生成服务端临时公私钥对，使用临时公私钥对的私钥，与客户端发来的客户端临时公钥，生成K2加密服务端要传输的数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;把服务端的临时公钥和使用K2加密的应用数据发送到客户端&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;5.客户端收到服务端发送的服务端临时公钥和使用K2加密的应用数据后会再次使用DH算法把服务端的临时公钥和客户端原来的临时私钥重新生成K2解密数据，并且从此以后使用K2进行数据层的加解密&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;备注：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里服务端为什么要重新再生成临时公私钥对再使用DH算法来生成加密密钥K2呢？其核心考虑到的是安全性，如果没有服务端的临时公私钥和K2，那么在通讯过程中使用的K1是不安全的，因为服务端的SCFG中的0-RTT公私钥是对所有客户端，并且长期保持直到过期，而且这个过期时间一般会比较长。一旦服务端的0-RTT私钥泄露则所有客户端的通讯都无法确保前向安全性了。攻击者只需要把包抓下来，获取到0-RTT私钥即可破解所有通讯数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;QUIC的0-RTT握手效率极大提升&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;0-RTT是QUIC一个很关键的属性，能够在连接的第一个数据报文就可以携带用户数据。但是我们也可以看到如果客户端和服务端从来没有通讯过，那么是不存在0-RTT的，需要一个完成的RTT之后才能承载用户数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;310&quot; data-ratio=&quot;0.671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kVCSSCFiaG8KbZibFUzzF4gXqwOr5zVc2YJVaQicz5NSOBLiboyyVSzoupQtYufHjTyBnU3HicIVq6pv1bAwGu9icjNw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个是QUIC的1-RTT过程，那么他的0-RTT又是怎么做的呢？其实很明显，客户端把0-RTT的握手公钥和相关信息保存起来，后续再建连接的时候就可以直接使用之前保存的数据了，只要这个数据没有过期，服务端都会承认的。因此可以避免掉公钥发送的这一个RTT，直接生成K1加密用户数据传输。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;407&quot; data-ratio=&quot;0.70390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kVCSSCFiaG8KbZibFUzzF4gXqwOr5zVc2Y5ALuCyRkXoJA20lMETcm3O4blJ79K6akoyicaA7fiaNXkzD1RHa38rjA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个流程是gQUIC的流程，iQUIC由于使用的是TLS1.3，握手阶段报文的细节会有些不一样，例如首个请求的是证书、PSK等信息。在0-RTT阶段使用的是session复用的ticket方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上面的分析我们可以看到QUIC在握手阶段的性能提升是很大的，最大延迟只增加一个RTT，性能上可以保持和基于明文的http一致，但是安全性可以和https保持一致。如果使用了0-RTT特性，将会更高效的提升数据效率，但是在安全性上会略有下降，因为0-RTT特性必然存在重放攻击。总体来说用户数据的传输效率有不小的提升，从原来最快的33%提升到了50%，0-RTT情况下甚至提升到了100%，从第一个报文就开始传输用户数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不管是gQUIC还是iQUIC，都把连接的管理和安全性合二为一融为一体，让传输协议具有原生安全属性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. QUIC的安全性分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;QUIC带来如此大的性能提升，是否就标志我们可以不顾一切，奋不顾身的把所有流量全部切入到QUIC呢？接下来我们一起看看QUIC的这些新的特性在安全性上如何，安全人员以及QUIC的使用人员需要注意哪些安全问题，以及QUIC在当前阶段在哪些类型的业务上使用是收效最大，哪些业务不适合QUIC或者不适合QUIC的某些特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;协议不成熟性与产品稳定性带来的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;QUIC作为一个新生代的协议，包括是拥塞控制算法也好，其他安全策略也好，成熟度都还不是特别高，当前在生产环境也没有一个通用性和兼容性成熟的实现，各个厂家都是根据自己的情况来实现QUIC部分的特性，还有部分特性并没有完全实现，或是实现的机制有待商榷，亦或是导致某些安全特性牺牲掉了，因此在使用过程中都会遇到各种各样的问题。在这种情况下，作为中小厂商使用一些开源实现的QUIC服务会带来很多问题，诸如安全性、稳定性、可靠性、资源消耗等等都会遇到很多挑战。完全自研实现却又需要耗费大量的人力物力，所以其实现在不太建议中小型厂商在QUIC上完全跟进。还是应该等待协议成熟，有成熟的产品以后再切入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;SCFG的签名计算安全问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.46504559270516715&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8L1ib9yjkpOrahseAGlUByQMqia327XAO2C9JDBo3PuNQ30c6Cwbe1yEMpswKQILHMuibCufa0ItrY1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;329&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从前面的分析，我们可以看到SCFG的重要性非常关键，在0-RTT的场景完全依靠这个数据来获得0-RTT握手公钥，而且需要在客户端和服务端传输流转。那么它的安全可信就非常重要，QUIC是如何保障呢，如何防止中间人攻击呢，是否会带来其他安全风险？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在QUIC中给这个数据增加了一个签名机制，同时也设置了过期时间来保障安全性。签名是通过公有证书的私钥来签的，在客户端需要对证书进行认证，这样可以确保无法实现中间人攻击，SCFG的过期时间也可以很大程度上缓解SCFG被恶意收集。我们都知道签名是使用非对称算法来做的，如果使用RSA做签名则会使服务端的签名耗费大量的计算资源，借此攻击者可能会对服务端产生算力攻击导致DoS，在生产环境中需要使用硬件加速卡来offload签名计算，这样可以对其有效进行缓解，同时使用ECC的证书做签名也会比较好的计算性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;0-RTT公钥泄露带来的安全问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.752&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8L1ib9yjkpOrahseAGlUByQMloZJVr73qnafNiaTJMX4ouXRvVkibXjiaKKDNlXibf5DGpVFm1JjibbPAsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;250&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;0-RTT公钥在客户端可以保存，在服务端也几乎能持久保持且各个客户端是共享的，同时在0-RTT的通讯过程中，0-RTT的第一个数据包就会携带用户数据（使用上述性能分析中的K1加密用户数据），因此带来的安全问题很明显，失去了前向安全性。因为数据包被抓下来之后一旦服务端0-RTT私有被泄漏则数据就可以被破解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;0-RTT前向安全性的破坏可以在下图中看到具体的过程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;234&quot; data-ratio=&quot;0.4046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kVCSSCFiaG8KbZibFUzzF4gXqwOr5zVc2YzhdicrwXK2PZT8dQwqe3KpmicZoWMSeVEeUNib7wYvZiaYLhFawY3TWPPA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;0-RTT造成重放攻击安全问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任何0-RTT机制都无法避免重放攻击（不伦是TLS1.3的0-RTT，还是gQUIC的0-RTT机制），所有0-RTT机制在提升性能的同时也是对安全性有一个很大损伤的特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7078651685393258&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8L1ib9yjkpOrahseAGlUByQMAp9ricg5HMThJW5FfvE1AJ7NcT5UbVEhctXckk119DQ38XvDtjUsEDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;267&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;0-RTT不提供前向安全能力(PFS)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;0-RTT首包没有源地址验证能力&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;0-RTT之后或者握手之后QUIC/TLS1.3提供了key exchange机制保障了PFS&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面的分析我们也看到了，0-RTT是没有前向安全能力的，数据可以持续被抓包，等待握手私钥泄露就可以破解数据。QUIC的非0-RTT数据包都有提供源地址的验证能力，在有风险的场景下可以发起源地址挑战验证。QUIC提供了一个STK机制，在客户端第一次发送数据包时服务端会根据数据包的源地址和服务器的时间戳等因子生成一个源地址TOKEN（STK），随后和响应数据包一起发送到客户端，而在后续的数据传输过程中客户端需要透传这个STK到服务端，从而服务端可以进行校验。当然这里服务端会为了性能考虑并非每次都会校验，而是在发现源地址和连接ID的对应关系发生变化或者连接迁移时会发起验证挑战。然而在0-RTT的首个数据包上无法进行此次验证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于安全性要求比较高的业务操作，例如具备有POST或者PUT操作时为了确保安全性通常会把0-RTT关闭，包括像facebook或者cloudflare也都是在一些关键操作上禁用0-RTT功能，只有幂等操作（如GET、HEAD等）才使用0-RTT。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;重放攻击的过程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9934456928838952&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8L1ib9yjkpOrahseAGlUByQMGIZlwNDgTNZhQKSsIjkrMJ8y8L2nSh2oBEVV1Hj94ta6maykBoRE4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1068&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;UDP相比TCP的弱安全性问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;UDP的安全性存在的几个关键的地方，源地址欺骗攻击，UDP放大攻击等。在QUIC中有设计了源地址TOKEN（STK）验证的安全机制来解决源地址的欺骗攻击，在通讯过程中服务器要求确认客户端的源地址TOKEN，这个源地址TOKEN根据数据包的源地址和服务器的时间戳等因子生成STK，随后和响应数据包一起发送到客户端，而在后续的数据传输过程中客户端需要透传这个STK到服务端，从而服务端可以进行校验。当服务端发现连接对应的源地址发送变化时会主动发送RETRY报文进行服务端主动源地址验证。客户端也可以主动发起源地址验证信息。源地址验证可以保护两类攻击问题，源地址欺骗攻击和UDP放大攻击。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;连接建立时，为了验证客户端的地址是否是攻击者伪造的，服务端会生成一个令牌（token）并通过重试包（Retry packet）响应给客户端。客户端需要在后续的初始包（Initial packet）带上这个令牌，以便服务端进行地址验证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务端可以在当前连接中通过 NEW_TOKEN 帧预先发布令牌，以便客户端在后续的新连接使用，这是 QUIC 实现 0-RTT 很重要的一个功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当我们的网络路径变化时（比如从蜂窝网络切换到 WIFI），QUIC 提供了连接迁移（connection migration）的功能来避免连接中断。QUIC 通过路径验证（Path Validation）验证网络新地址的可达性（reachability），防止在连接迁移中的地址是攻击者伪造的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.44433781190019195&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8L1ib9yjkpOrahseAGlUByQMd6e7xGPUDWLw3VuuIKemPveJG7URSnHk2SXkWVNEhKeeP6XOMAEYIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1042&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于握手的不对称性，还可以造成放大攻击：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4557291666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8L1ib9yjkpOrahseAGlUByQMZhQRbF0opDh3toowJsxQRnZMoMic3V2cqTN160VLQicxXApf5Zlk0ACg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;768&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;QUIC协议的制定对放大攻击提供了一些缓解的方式如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;连接迁移造成的源地址欺骗和路径欺骗的安全问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我们的网络路径变化时（比如从蜂窝网络切换到WIFI或者NAT后的地址重绑定），QUIC 提供了连接迁移的功能来避免连接中断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;551&quot; data-ratio=&quot;0.9536423841059603&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kVCSSCFiaG8KbZibFUzzF4gXqwOr5zVc2YAXWTZ3EFUy3opqUD4wEMh6w0LyCI5eEHJMlSjrFZgldCoBPCY5875w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;906&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;QUIC当源地址发生改变后并不马上终止传输进行地址验证挑战，而是基于性能等原因的考虑继续当前传输，在随后再进行源地址验证挑战或者路径验证挑战。那么在这中间会形成一个空档期可以进行地址欺骗攻击甚至是放大攻击。一些能够缓解的方式主要是在地址变动后可以做限速配置，直到完成新的挑战成功或者挑战失败退回到上一个连接。同时在验证失败后需要恢复到旧的有效连接以防止重置链路攻击。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;当前的特性场景需要注意的点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于当前QUIC协议的成熟性和安全性都存在有不足，所以在当前阶段有很多需要注意的点，以下做了一个简单的分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据修改等场景需要限制使用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由0-RTT导致的前向安全性缺失和可重放攻击的问题可以看出，在很关键的场景例如转账操作等是不是适合开启0-RTT特性的，因为重放攻击会带来非常大的数据被篡改的问题。在业界很多顶级公司对安全非常关注，一般只会在幂等操作如GET操作等场景才开启0-RTT,其他场景会禁用0-RTT功能，甚至连接迁移的功能也是有限使用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;有高安全场景需求的业务需要谨慎使用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对应安全性高的业务场景例如账号等在使用QUIC的时候当前也是持谨慎态度，握手阶段或者连接迁移阶段容易发生源地址欺骗可能会造成账号异常&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;视频、游戏等高实时要求场景的效果明显&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于QUIC在首次连接和网络类型切换过程中有很好的性能提升，对于下载类业务、视频类业务。尤其是在秒开场景会有非常好的提升效果。这类业务当下比较好的方式是信令数据走单独从传输方式（例如TCP等），而视频数据类可以走QUIC，可以更好的兼顾安全性与传输效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;4. QUIC在OPPO的实践&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;OPPO在海外的业务发展非常迅速，用户量成指数级增长，已经达到亿级规模。在海外尤其是印度、印尼等东南亚地区网络的覆盖情况比较差，使用https链接的成功率比较低，下载延迟也比较大。同时用户在WiFi和4G的切换过程也非常多不稳定的情况，有些地方甚至出现QoS限流的情况。如何提升网络体验已经成为我们面临的非常大的难题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;安全增强的架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了更好的提升用户体验，解决这些问题，以及OPPO在技术上的极致追求，非常积极的跟进业绩先进技术的发展，在一些用户高体验场景下采用QUIC协议来提升用户体验。同时OPPO是一家非常关注安全的企业，在使用QUIC之前做了大量的调研工作，也对QUIC带来的网络性能提升以及带来的安全问题做了上面细致的分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面我们列举了几个OPPO在安全上重点考虑的几个关键的点：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在QUIC协议的基础增加WAF的支持；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于0-RTT特性谨慎使用；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;安全治理模块来对接QUIC的地址验证；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3495400788436268&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8L1ib9yjkpOrahseAGlUByQMr2iavJtibdugrMNgG8kqXcP5wt7l5XUqbfdIa8IIbUPVrFm6vicyyDfLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1522&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了提升QUIC的安全能力，我们在使用QUIC基础支持WAF安全能力，把WAF直接融入到安全QUIC服务的处理中。同时从QUIC里面抽象出安全治理模块可以在很多场景直接发起对源地址的验证挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在0-RTT的使用上，我们采用只有在幂等操作（如GET、HEAD等）的场景下才允许使用O-RTT，0-RTT作为一个非常谨慎使用的模块，在前期甚至都不支持这个特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;性能实验结果&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在OPPO弱网实验室的测试效果如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.35841170323928945&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8L1ib9yjkpOrahseAGlUByQMAia4DcLE23M7llgiboFHEGcGtJGcenYWLASRfPVicTClrPQlW1D1kRH0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;957&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从实验室数据我们可以看到有非常好的提升，然而线上环境多变且复杂，在线上我们采取了谨慎的策略，目前部分海外业务已经陆续灰度上线。而从上线的效果来看，在弱网环境下对延迟的提升还是有比较好的效果，对于延迟大约有11%的提升，目前还只有部分灰度，线上环境相对比较复杂，可能有的用户本地网络对UDP的支持并不太好，在线上环境的拥塞控制也需要根据现实情况来单独优化。接下来还有许多功能特性需要持续支持，包括线上环境的拥塞控制，UDP包的底层处理通过DPDK来提升处理性能，提高系统利用率和吞吐。QUIC的安全治理模块目前还是实验阶段，后续还需要持续优化和调整，以达到更好的安全效果，平衡安全与性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;IETF指定了QUIC作为HTTP3的传输承载协议，征求意见文档（RFC）有望在2021年会发出。届时会有更多的网站和应用程序会跑在QUIC上，同时业界头部厂商（google，facebook，腾讯，阿里，华为等）已逐步开启对QUIC的支持，相信其安全能力也会在随后的大规模运行中更加完善。对应我们而言，QUIC是一个起点，我们会更好的提升人们在OPPO上的用户体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;☆ &lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;END&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt; ☆&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你可能还喜欢&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section label=&quot;Copyright Reserved by PLAYHUDONG.&quot; donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section label=&quot;Copyright Reserved by PLAYHUDONG.&quot; donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section label=&quot;Copyright Reserved by PLAYHUDONG.&quot; donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyNzc4Mzk3MQ==&amp;amp;mid=2247486080&amp;amp;idx=1&amp;amp;sn=d863c75ac9ffece2dd6078d89f23eae7&amp;amp;chksm=fa7b0bcccd0c82daf627c867929239a9567b99eb0c7c0c2288b11da50b191d0f432f5a7b6500&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyNzc4Mzk3MQ==&amp;amp;mid=2247486694&amp;amp;idx=1&amp;amp;sn=65153cfd1cfa97b1fb079bf601ade84e&amp;amp;chksm=fa7b0daacd0c84bc5a6d68a9ff5617254da173f63bb07ddd6c01575cd812a77f7877b0977e9e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;让密钥消失不见——AES密钥白盒及其攻防&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyNzc4Mzk3MQ==&amp;amp;mid=2247486080&amp;amp;idx=1&amp;amp;sn=d863c75ac9ffece2dd6078d89f23eae7&amp;amp;chksm=fa7b0bcccd0c82daf627c867929239a9567b99eb0c7c0c2288b11da50b191d0f432f5a7b6500&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;OSRC 2周年第二弹——第五次奖励升级&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyNzc4Mzk3MQ==&amp;amp;mid=2247486168&amp;amp;idx=1&amp;amp;sn=9c2b467885e449d630008a97bd18daee&amp;amp;chksm=fa7b0b94cd0c82820314716c179f7cd7246309dd4c0ee19042caac251c2fa13b8b405d3c0c7f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;OPPO互联网DevSecOps实践&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyNzc4Mzk3MQ==&amp;amp;mid=2247486504&amp;amp;idx=2&amp;amp;sn=a04134339307eed5812430da859c39df&amp;amp;chksm=fa7b0d64cd0c8472e17dc20706ff81e0d4bbb2415e5cf72fe2a7e65d1f50e5c5be851853b305&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;OPPO安全最新招聘信息&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyNzc4Mzk3MQ==&amp;amp;mid=2247486653&amp;amp;idx=1&amp;amp;sn=d08dce1a48c128cc53e03ab95e484a02&amp;amp;chksm=fa7b0df1cd0c84e725016899ee9b3aad448e256d464a7f4cf59b42feff82f660cc6e08282e6a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;OPPO终端安全岗位招聘火热进行中&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;更多技术干货&lt;/span&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;扫码关注&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;OPPO互联网技术&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;120&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;120&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ECThdibSVDxjYDM1fnDY1N9LLUp4gJV8ulKxP20jO66gHdE8q9DgFIB5hvxfBxEERyWeSxpc6nor8SPgiadWNVsQ/640?wx_fmt=jpeg&quot;/&gt; &lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95172&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;我就知道你“在看”&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1.0377358490566038&quot; data-type=&quot;gif&quot; data-w=&quot;53&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ECThdibSVDxjYDM1fnDY1N9LLUp4gJV8uk9kQ2Hw3Ucae5fnjEfVb2noBlx2NuTgMwzuiceEL19F9prbiaKnZZd3A/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7205428158614e761bf80c64789e51d1</guid>
<title>抓包神器 Wireshark，帮你快速定位线上网络故障（一）</title>
<link>https://toutiao.io/k/5b2dh6z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section&gt;&lt;section data-mpa-template-id=&quot;1544239&quot; data-mpa-category=&quot;收藏&quot;&gt;&lt;section data-mpa-template-id=&quot;1495&quot; data-mpa-category=&quot;title&quot;&gt;&lt;section label=&quot;Copyright © 2017 playhudong All Rights Reserved.&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;1&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; 开篇：吊足胃口 &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;em&gt;&lt;em&gt;&lt;span mpa-is-content=&quot;t&quot;/&gt;&lt;/em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;「&lt;/span&gt;&lt;span&gt;初入职场的菜菜同学&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;&lt;span&gt;一心想靠 Java 技术来改变世界，未成想被网络环境问题缠身，于是&lt;/span&gt;&lt;span&gt;抱着电脑，满怀希望的去找运维同事&lt;/span&gt;&lt;span&gt;寻求帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;菜菜问：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;运维大佬&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;帮忙看看这是什么问题？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;153&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.26434426229508196&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/waH0DGXhQWMJkpjtX0ZDKcHFOB3KkdaQSSWnsFwgqYhKYVjK8qqpvQvasLs3G2uqSwAoLticDkez1qka1KiaQNCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;976&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;运维答：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;很明显是网络上出了问题，那你就抓个包看看呗，难道不会抓包？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;菜菜同学被多次鄙视后，心中怒火越积越重，于是暗下决心，好好深入研究一番 W&lt;/span&gt;&lt;span&gt;ireshark，待我羽翼丰满（学会）之日，便是我翱翔天际（离职）之时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;「&lt;/span&gt;&lt;span&gt;久居职场的菜菜同学&lt;/span&gt;&lt;span&gt;」经过数年的打击与修炼，菜菜同学成了经验颇丰的系统研发高级专家（老油条）。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总监问：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;假如你的项目在开发、测试环境上与三方联调都没有问题，一旦部署到生产环境，就表现出Connection reset、Connection timeout等各种水土不服，关键是三方还坚定他们的环境很正常，该咋办？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;菜菜答：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;莫慌，我会点 Wireshark，专治各种扯皮、不服。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CTO问：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;假如你的项目出现性能瓶颈了，你觉得可能会是哪些方面，怎么解决问题？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;菜菜答：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;个人觉得项目性能瓶颈，不外乎网络环境、操作系统、程序代码三个大因素。若真想要解决瓶颈，应该先定位瓶颈的位置究竟是在哪里？而三大因素中最简单的莫过于网络环境，我常用 Wireshark来辅助分析，bulabula。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不知道胃口吊足了没有？&lt;span&gt;上面谈及的那&lt;span&gt;些&lt;/span&gt;&lt;span&gt;场景，估计很多猿媛们都遇到过。&lt;span&gt;对于像菜菜这样的 Java 程序员而言，&lt;/span&gt;&lt;/span&gt;Wireshark &lt;/span&gt;&lt;span&gt;主要用&lt;/span&gt;&lt;span&gt;来帮助快速分析网络环境问题，进而拿到实锤，&lt;/span&gt;&lt;span&gt;把三方的&lt;/span&gt;&lt;span&gt;锅扔回去&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;希望&lt;/span&gt;&lt;span&gt;通过接下来几篇文章的分享，能&lt;/span&gt;&lt;span&gt;让你轻松掌握Wireshark。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template-id=&quot;1544239&quot; data-mpa-category=&quot;收藏&quot;&gt;&lt;section data-mpa-template-id=&quot;1495&quot; data-mpa-category=&quot;title&quot;&gt;&lt;section label=&quot;Copyright © 2017 playhudong All Rights Reserved.&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;2&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; Wireshark：前世今生 &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;160&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.276268115942029&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/waH0DGXhQWMQ3MAuzChDQhIv7G2kFY0u3K7H7TkW0ugsTyeicttqYb0ibk20BMibpNsMRSHsRVawk7YwlcwPlbfuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2208&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是一个无关技术的小故事。但是作为 Wireshark 爱好者,了解一下这个软件的前世今生也是极好的，谁不想在中午和同（ling）事（dao）一起吃饭的时候讲个业内小故事，显得自己业务精湛又品味不俗呢?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;故事要从 20 世纪 90 年代开始说起。那时的 IT 业欣欣向荣：摩托罗拉正野心勃勃地实施铱星计划；Google 的两位创始人还在房东的车库里研究搜索引擎。我们故事的主人公 Gerald Combs 还是默默无闻的青年。和那个时代的很多工程师一样，Gerald 技术精湛，热情上进，动手能力极强。他就职于一家网络提供商，时常需要分析软件来辅助工作。可是这样的软件太少了，而且一个 license 就要80,000 美金。即便在今天的美国，这也不是一笔小数目。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;和我们中的很多人不一样，Gerald 没有下载盗版软件，而是决定自己写一个。他单枪匹马忙碌了几个月。我们今天仍能想见其中的艰辛—即便是从业多年的工程师，对很多网络协议还一知半解，更不要说开发一个能分析协议的软件了。而一位工程师既精通多种协议，又能写好代码，更是常人难以企及的境界。但谦虚的 Gerald 一直对此轻描淡写，「I spent several months doing research and making notes.」到了 1998 年 7 月，这个软件终于面世了。它带来了这样的功能：当你透过它看到网络时，不再是没有意义的 0 和 1，而是可以理解的简洁文字。有了它的专业解说，我们几乎能直接看懂网络上发生的一切。以前难以排查的问题，在它介入后便显露无遗。它还提供了权威的分析报告，比如重传率统计、响应时间和对话列表等，这解放了原本负担繁重的网络管理员，使他们有更多时间专注其他事务。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Gerald 把这个软件命名为 Ethereal，正对应了它的功能—还原以太网的真相。Ethereal 的代码版权自然属于 Gerald，而他所在的公司 NIS(Network Integration Services) 则拥有 Ethereal 商标。当时谁也没有想到，这个归属权会在多年后引起一场风波。由于 Ethereal 写得太好了，而且是以 GNU GPL 开源许可证发布的，世界各地的开发者纷纷参与到这个项目中。没过多久，它就涵盖了世界上大多数通信协议，成为广受欢迎的网络分析软件。它可以用于教学，如果网络教师用它辅助上课，可以大大提高学生的兴趣。也可以辅助开发和测试，是调试网络程序的好工具。当然它最大的用途还是诊断问题；从数据链路层到应用层的种种协议，几乎涉及网络的地方就有它的用武之地。更难得的是，Gerald 并没有打算从中获利，它至今还是完全免费的，每位愿意学习的工程师都可以受益。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;世界的变化总是超乎我们的想象，尤其是在IT业。没几年时间，铱星计划彻底破产；Google却成了最大的网络公司。只有Gerald没有变化，一直在兢兢业业地维护 Ethereal。每个月都有新的协议出现，已有的协议也在推出新版本，他永远有忙不完的活。中间仅仅发生过一次改名风波：2006 年他离开 NIS，加入了 CACE。由于和老东家在 Ethereal 的商标问题上无法达成一致，Gerald 把项目改名为 Wireshark。从此 Ethereal 这个风靡多年的项目停止了，只留下 www.ethereal.com 域名。我们至今还能访问它，但是会被重定向到一家叫 AOS 的公司。为什么不是重定向到 NIS 呢？因为 NIS 在 2011 年被 AOS 合并了。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Wireshark 延续了 Ethereal 的成功，现在有成千上万的开发者在追随 Gerald。每年还会召开一次为期 4 天的 Sharkfest 大会。2011 年 Wireshark 在 SecTools 排行第一，2012 年被 Insecure.org 评为「No. 1 Packet Sniffers」。美国的技术作家们开始为它著书立说，中国的出版社也在引进(比如人民邮电出版社引进出版的《Wireshark数据包分析实战(第2版)》)。值得一提的是，CACE 后来被 Riverbed 收购了，Riverbed 成了 Wireshark 项目的赞助商。很多中国工程师可能觉得 Riverbed 名不见经传，但说到 Linux 里常用的 tcpdump 命令就不会陌生。tcpdump 的开发者之一 Steve McCanne 就是 Riverbed 的 CTO。而 WinPcap 的开发者 Loris Degioanni 也在 Riverbed 工作。似乎冥冥之中自有天意，Riverbed 把网络探测界的先锋们聚到了一起。我们要向 Riverbed 致敬，多亏了这些伟大的工具，我们才得以窥探网络的秘密。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Gerald 不久前在 Twitter 上宣布「Wireshark is, and will always be open source。」其实 Wireshark 即便不再开源也不会抹杀他的成就。改变世界的 IT 英雄，可以像 Jobs 一样领导一个成功的公司,更可以像 Gerald 一样创造一件传世的作品。他们的成就一样会被镌刻在 IT 历史的丰碑上。&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;24&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;故事引自《Wireshark网络分析就这么简单》&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section data-mpa-template-id=&quot;1544239&quot; data-mpa-category=&quot;收藏&quot;&gt;&lt;section data-mpa-template-id=&quot;1495&quot; data-mpa-category=&quot;title&quot;&gt;&lt;section label=&quot;Copyright © 2017 playhudong All Rights Reserved.&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;3&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; Wireshark：安装 &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;工欲善其事必先利其器，打开官方网站进行下载，&lt;/span&gt;&lt;span&gt;下载适合自己操作系统的版本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;345&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5963060686015831&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/waH0DGXhQWMJkpjtX0ZDKcHFOB3KkdaQwzVfnr96ejiaFQUh2vbicfa1ZA5cGz0uYiaL05rAu20nNx7dUmS4l0U9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1516&quot;/&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;44&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;下载链接：https://www.wireshark.org/download.html&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本次 Wireshark 开篇分享就写到这里，没上干货，主要是初步认识一下 Wireshark，接下来几篇会重点讲讲 Wireshark 的实战，敬请期待。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一起聊技术、谈业务、喷架构，少走弯路，不踩大坑。&lt;/strong&gt;&lt;span&gt;会持续输出原创精彩分享，敬请期待！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;211&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3649122807017544&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1710&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/waH0DGXhQWOwkpyEoA1IiakYviaHIX4GnoUHGE4kNCqHqAM54WmxryEd76E7Uf1xibO18pftGiafQqI8ibxqMHG34xA/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bf88adc47237ab977ec9d5aeaf71daae</guid>
<title>如何写出一篇技术博客</title>
<link>https://toutiao.io/k/gaqteq9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;引子&lt;/h2&gt;&lt;p&gt;众所周知，写博客是一种入门门槛低，疗效好，还能带来长期影响力的过程。几乎每一位爱上写博客的开发者总是乐于向其他人分享写博客的乐趣和益处，但即便如此，身边的人还是很难体会到写博客的好处。&lt;/p&gt;&lt;p&gt;哪怕有时有的公司付费鼓励员工通过知识库的形式分享平时自己遇到的问题和解决问题时的思考，也鲜有员工薅到这样的羊毛，这确实是一件令人费解的事情。会不会是由于同事们不差钱呢？显然并非如此，每个月从200元到500元不等的奖金，每年累计下来也要大几千，估计很少有人能够克制这样的诱惑。&lt;/p&gt;&lt;p&gt;其实也许是因为存在一种心理障碍。年轻的开发者们还没有完成心路历程的转变，没有深刻的体会到写博客其实不是写作文，它不需要灵感，也不需要写出太高大上的文字，他的门槛其实是如此之低，与其说是知识输出，倒不如说是更像是软文或应用文。有时，你无需花太多的时间，只需按照一些简单的套路，其实就能踏上这条贼船。隔行如隔山，信息不对称的危害可见一斑。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.66625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EwukgicNDWBs9g8QZ2eF4P29fjXcHQxANG6Hicuev3RwZ5F5V68Ak7qtnQXjwPMFJsib3xgbRXCyiblBPq9TWiaSMog/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;写博客的套路就是：提出一个问题，分析问题，解决问题，记下来。&lt;/p&gt;&lt;p&gt;啥华丽的辞藻，啥专业的解读，啥深度剖析，这些都不重要，这些都是循序渐进的过程。经典的小说千千万，经典的博客却少之又少。作为菜鸟的我们，又何必追求写出那么经典的博客呢？&lt;/p&gt;&lt;p&gt;为了让读者能够更加切实的体会这个观点，本文就是这样的示例代码（本文虽然是一篇博客，同样像一篇应用文，前面铺垫大家都可以理解为废话。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、提出问题&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;在软件开发过程中，我们经常会遇到各种各样的问题，有的看起来毫不起眼，但也让人发人深思，有的问题则看起来就很复杂，但解决之道却如此简单。&lt;/section&gt;&lt;section&gt;所以，如何提出你发现的问题，就是写博客的第一步。&lt;/section&gt;&lt;section&gt;举一个很简单的例子：Thread.Sleep方法，好像参数只需一个整型数，就能享受让主线程阻塞的优雅性能。（阻塞线程显然不能带来性能快感，但有时吧。。）但你想过没，这个Thread.Sleep的最小值，居然不是0，而是-1，这是为啥呢？&lt;/section&gt;&lt;section&gt;如果你发现了这个问题，并提出这个质疑，也许一篇优秀的文章就在等着你。（当然，就.NET而言，微软官方已经围绕这个问题进行了解释）。&lt;/section&gt;&lt;section&gt;当然，这样的例子非常常见，我们也可以从http协议开始理解，这种无处不在的协议，究竟是如何运作的？这也是一个很不错的问题。&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、分析问题&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;透过问题的表象，看看问题本质的东西，这本身也许需要积累，有时也需要一些机遇。但在我们初涉博客时，只需多从几个角度剖析问题，借助一些知识整理，也许就能看到之前从未涉及的视角。&lt;/section&gt;&lt;section&gt;有时，我们也不必纠结写博客质量太低，担心被人称作南郭先生，其实大部分友好的技术社区大部分正常的读者，对持续坚持写博客的博主总是比较友好的。多关注于技术和作品本身，反而有助于我们屏蔽外界干扰，并从钻研技术的过程中获得更多乐趣。&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3、尝试解决问题&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;依托互联网媒介，寻找问题的解决办法，并将解决问题的过程客观真实的描述下来。有时也许只需一行代码，或一个流程图，就能给读者解决很多问题。&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4、稍微修饰一下&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;当然，如果你能再写完博客后，花一点点时间对内容进行一些修饰，自然而然就会获得更多的读者了。&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;加强文章的排版，注意字体大小的错落，注意换行等。在手机上阅读大段大段的文字着实不便，如果我们能控制每段的文字数大概在100字左右，也许读者会轻松许多。&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;去掉那些过于华丽的辞藻。作为一篇技术博客，辞藻华丽不仅仅没有优点，反而会让读者远离。。&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;注意引文的实时性。考虑到技术博客本身刷新的频率特别高，如果你能基于最新的知识体系进行写作，自然而然也会让更多开发人员从中获益。&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;适当的留下伏笔。虽然一篇文章力求解决一个问题，但如何能够为下一篇文章介绍的内容埋下伏笔，也能让你的博客获得更多吸引力。&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5、多坚持一下&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;对大多数人而言，技术写作是一件令人困惑的事情，俯拾即是的技术问题，难免都会让人产生动笔的冲动，但自我怀疑和混乱迷思，却打破了我们的思考节奏，让我们最终没能迈出这一步。我们也可能会在文思泉涌和下笔如枯之间摇摆，有时搜出一些边边角角的话题，然后写出了一篇越写越没劲的话题。但也许，我们的工匠精神也正是在这样的每一瞬间慢慢积累，并让我们最终获益。&lt;/section&gt;&lt;section&gt;抛弃幻想，放下自我，让博客能够更好的成为我们成长的利器，投入更多的坚持到我们真正需要关注的东西本身--技术上，确实会让我们获益匪浅。&lt;/section&gt;&lt;section&gt;在追求互联网速度、被各种应用干掉了大部分碎片时间的我们可能很难抽出写一篇博客的时间，但我们可以尝试一周输出一篇1500字的博客。每天花15分钟稍微写一点点，再周末花一点点时间打磨一下，也许一篇质量还不错的博客就形成了。&lt;/section&gt;&lt;section&gt;如果我们能坚持下去，一切都将大不一样。&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7bb3407a446378b9633dfdd85e7953cc</guid>
<title>前端进阶不可错过的 10 个 Github 仓库</title>
<link>https://toutiao.io/k/2eo05hp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2021 年已经来了，相信有一些小伙伴已经开始立 2021 年的 flag 了。在 2020 年有一些小伙伴，私下问阿宝哥有没有前端的学习资料。为了统一回答这个问题，阿宝哥在元旦期间，精心挑选了 Github 上 10 个不错的开源项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然这 10 个开源项目不仅限于前端领域，希望这些项目对小伙伴的进阶能有所帮助。下面我们先来介绍第一个项目 —— build-your-own-x。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;build-your-own-x&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;🤓 Build your own (insert technology here)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;https://github.com/danistefanovic/build-your-own-x&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Watch&lt;/th&gt;&lt;th&gt;Star&lt;/th&gt;&lt;th&gt;Fork&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;3.5K&lt;/td&gt;&lt;td&gt;92.3K&lt;/td&gt;&lt;td&gt;8.1K&lt;/td&gt;&lt;td&gt;2021-01-04&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该仓库涉及了 27 个领域的内容，每个领域会使用特定的语言来实现某个功能。下图是与前端领域相关的内容：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V3X2Ze0rhUM6P7hJYF9YHqvRBwpyJYMvdVuBBtfkVUUnoVtFflosU6icwbLicdMMFibk9yTOjMt4IAZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.6444444444444445&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;JavaScript Algorithms&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;📝 Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;https://github.com/trekhleb/javascript-algorithms&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Watch&lt;/th&gt;&lt;th&gt;Star&lt;/th&gt;&lt;th&gt;Fork&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;3.6K&lt;/td&gt;&lt;td&gt;91.6K&lt;/td&gt;&lt;td&gt;15.4K&lt;/td&gt;&lt;td&gt;2021-01-04&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该仓库包含了多种 &lt;strong&gt;基于 JavaScript 的算法与数据结构&lt;/strong&gt;。每种算法和数据结构都有自己的 README，包含相关说明和链接，以便进一步阅读 (还有相关的视频) 。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V3X2Ze0rhUM6P7hJYF9YHqvIola1CjQaZxKoCfLFoB0dELhGicABKq23fba5WnInlKbnvqjXbIRT2w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.6305555555555555&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;30 Seconds of Code&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Short JavaScript code snippets for all your development needs&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;https://github.com/30-seconds/30-seconds-of-code&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Watch&lt;/th&gt;&lt;th&gt;Star&lt;/th&gt;&lt;th&gt;Fork&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;2K&lt;/td&gt;&lt;td&gt;66.9K&lt;/td&gt;&lt;td&gt;7.4K&lt;/td&gt;&lt;td&gt;2021-01-04&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该仓库包含了众多能满足你开发需求，简约的 JavaScript 代码片段。比如以下的 &lt;code&gt;listenOnce&lt;/code&gt; 函数，可以保证事件处理器只执行一次。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; listenOnce = &lt;span&gt;(&lt;span&gt;el, evt, fn&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; fired = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  el.addEventListener(evt, (e) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!fired) fn(e);&lt;br/&gt;    fired = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  });&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;listenOnce(&lt;br/&gt;  &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;my-btn&#x27;&lt;/span&gt;),&lt;br/&gt;  &lt;span&gt;&#x27;click&#x27;&lt;/span&gt;,&lt;br/&gt;  () =&amp;gt; &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hello!&#x27;&lt;/span&gt;)&lt;br/&gt;);  &lt;span&gt;// &#x27;Hello!&#x27; will only be logged on the first click&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V3X2Ze0rhUM6P7hJYF9YHqv3wwsg3b9wGn6Sz1n34VdmictA96wghgW9ke6MDnczjmlVjTib452g8pg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5722222222222222&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Node Best Practices&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;✅ The Node.js best practices list&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;https://github.com/goldbergyoni/nodebestpractices&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Watch&lt;/th&gt;&lt;th&gt;Star&lt;/th&gt;&lt;th&gt;Fork&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1.7K&lt;/td&gt;&lt;td&gt;58.5K&lt;/td&gt;&lt;td&gt;5.6K&lt;/td&gt;&lt;td&gt;2021-01-04&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该仓库介绍了 Node.js 应用的最佳实践，包含以下的内容：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V3X2Ze0rhUM6P7hJYF9YHqvLfRQGuRkVUbvjJToDHz565AdUDbgY4GNLlxjl8ODvYfVXV6oDHMj4w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.42685185185185187&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;RealWorld example apps&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&quot;The mother of all demo apps&quot; — Exemplary fullstack Medium.com clone powered by React, Angular, Node, Django, and many more 🏅&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;https://github.com/gothinkster/realworld&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Watch&lt;/th&gt;&lt;th&gt;Star&lt;/th&gt;&lt;th&gt;Fork&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1.6K&lt;/td&gt;&lt;td&gt;52.5K&lt;/td&gt;&lt;td&gt;4.5K&lt;/td&gt;&lt;td&gt;2021-01-04&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于大多数的 “Todo” 示例来说，它们只是简单介绍了框架的功能，并没有完整介绍使用该框架和相关技术栈，构建真正应用程序所需要的知识和视角。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RealWorld 解决了这个问题，它允许你选择任意前端框架（React，Vue 或 Angular 等）和任意后端框架（Node，Go，Spring 等）来驱动一个真实的、设计精美的全栈应用程序 “Conduit“ 。下图是目前已支持的前端框架（内容较多，只截取部分内容）：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V3X2Ze0rhUM6P7hJYF9YHqvjaWjQcjHN1vbsasgocSicPOd6hO0YdvLiaoADmUrb0o35pE650rx0klg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5611111111111111&quot; data-w=&quot;1080&quot;/&gt;clean-code-javascript&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;🛁 Clean Code concepts adapted for JavaScript&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;https://github.com/ryanmcdermott/clean-code-javascript&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Watch&lt;/th&gt;&lt;th&gt;Star&lt;/th&gt;&lt;th&gt;Fork&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1.5K&lt;/td&gt;&lt;td&gt;43.9K&lt;/td&gt;&lt;td&gt;5.3K&lt;/td&gt;&lt;td&gt;2021-01-04&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该仓库介绍了如何写出整洁的 JavaScript 代码，比如作者建议使用可检索的名称：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;不好的&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 86400000 的用途是什么？&lt;/span&gt;&lt;br/&gt;setTimeout(blastOff, &lt;span&gt;86400000&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;好的&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 使用通俗易懂的常量来描述该值&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; MILLISECONDS_IN_A_DAY = &lt;span&gt;60&lt;/span&gt; * &lt;span&gt;60&lt;/span&gt; * &lt;span&gt;24&lt;/span&gt; * &lt;span&gt;1000&lt;/span&gt;; &lt;span&gt;//86400000;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;setTimeout(blastOff, MILLISECONDS_IN_A_DAY);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该仓库包含了 11 个方面的内容，具体的目录如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V3X2Ze0rhUM6P7hJYF9YHqvicIlfjAgcg81G6wTE82OQLdWL40EVcGB17ib6YUnsCksuyrUXnGtdq1g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.6046296296296296&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;javascript-questions&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;A long list of (advanced) JavaScript questions, and their explanations ✨&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;https://github.com/lydiahallie/javascript-questions&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Watch&lt;/th&gt;&lt;th&gt;Star&lt;/th&gt;&lt;th&gt;Fork&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;850&lt;/td&gt;&lt;td&gt;27K&lt;/td&gt;&lt;td&gt;3.6K&lt;/td&gt;&lt;td&gt;2021-01-04&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该仓库包含了从基础到进阶的 JavaScript 知识，利用该仓库你可以测试你对 JavaScript 知识的掌握程度，也可以帮助你准备面试。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V3X2Ze0rhUM6P7hJYF9YHqvUeZA5NsciceNiafmRRtcYBIHiaibPjpBHyjFKK5gqiatNRaFexOajrQN2mA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.45740740740740743&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;awesome-design-patterns&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;A curated list of software and architecture related design patterns.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;https://github.com/DovAmir/awesome-design-patterns&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Watch&lt;/th&gt;&lt;th&gt;Star&lt;/th&gt;&lt;th&gt;Fork&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;477&lt;/td&gt;&lt;td&gt;11.6K&lt;/td&gt;&lt;td&gt;931&lt;/td&gt;&lt;td&gt;2021-01-04&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该仓库包含了软件与架构相关的设计模式的精选列表。在软件工程中，设计模式（Design Pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人在1990年代从建筑设计领域引入到计算机科学的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V3X2Ze0rhUM6P7hJYF9YHqvxtWbWSGhGf5pbNDwphv22aUGYdAZGdvRBd4BpbEQMBicU2l8tDTlrgg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.6046296296296296&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;developer-roadmap&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Roadmap to becoming a web developer in 2021&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;https://github.com/kamranahmedse/developer-roadmap&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Watch&lt;/th&gt;&lt;th&gt;Star&lt;/th&gt;&lt;th&gt;Fork&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;7.4K&lt;/td&gt;&lt;td&gt;142K&lt;/td&gt;&lt;td&gt;21.3K&lt;/td&gt;&lt;td&gt;2021-01-04&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该仓库包含一组图表，这些图表展示了成为一个 Web 开发者的学习路线图。该仓库含有前端、后端和 DevOps 的学习路线图，这里我们只介绍前端的学习路线图（原图是长图，这里只截取部分区域）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V3X2Ze0rhUM6P7hJYF9YHqvcSuxwngQcIUlxGyQeuAOicM5Tde4KGUexsNYIEnRkt8WGWmCpcymsnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5740740740740741&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Free Programming Books&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;📚 Freely available programming books&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;https://github.com/EbookFoundation/free-programming-books&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Watch&lt;/th&gt;&lt;th&gt;Star&lt;/th&gt;&lt;th&gt;Fork&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;9.2K&lt;/td&gt;&lt;td&gt;170K&lt;/td&gt;&lt;td&gt;39.8K&lt;/td&gt;&lt;td&gt;2021-01-04&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该仓库包含了多种语言的免费学习资源列表，下图是中文免费资源列表（内容较多，只截取部分内容）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V3X2Ze0rhUM6P7hJYF9YHqvn0cicjYEuCPXnibGlM2PPHDAbsQD2wFYf0eR5BrBExyhWBrfib1Jvo6WQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5851851851851851&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好的，到这里所有的开源项目都已经介绍完了，如果小伙伴有其他不错的开源项目，欢迎给阿宝哥留言哟。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>