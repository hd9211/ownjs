<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>2e8922cc6ae4b24efc244df2d47c5cc5</guid>
<title>一个 MySQL 锁和面试官大战三十回合，我霸中霸</title>
<link>https://toutiao.io/k/irs8xav</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我，小Y。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;又来面试了，还是之前那家公司，即将和之前那个老面试官进行第二次 battle，心情还是xue微有点忐忑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没看过第一次 battle 的同学可以看这里，&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkxNTE3NjQ3MA==&amp;amp;mid=2247490249&amp;amp;idx=1&amp;amp;sn=4348983da767ff28982324acc1760ce5&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;一个MVCC和面试官大战三十回合&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;又一抹光亮闪过，面试官推门而入，我抬头望去，没错，还是那味儿。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8848484848484849&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nFibcnYFna3csYWFiaNcmiaDEMv4UBicpEaUjH17iaBQLGve4dH3972A5MCZJNq855v5UYddJ11MyKaVcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;330&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到面试官头上那“傲然矗立”的头发，差点又想站起来给他敬了个礼，算了先稳住，低调一点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官瞥了我一眼：来吧，咱们继续面试，上次没办法，女朋友就是粘人，这次问 MySQL InnoDB 的锁喔。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：.....(行，我知道你有女朋友了)，好的面试官，您请。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：MySQL InnoDB 的锁 和 MyISAM 的锁有什么区别？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：MyISAM 只支持表锁，一锁就锁整张表，而 InnoDB 不仅支持表锁，还支持粒度更低的行锁，仅对相关的记录上锁即可，所以对于写入操作来说 InnoDB 的性能更高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：那不论表锁还是行锁，其实有分为两类的，你知道是哪两类吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：你指的是 shared (S) locks 和 exclusive (X) locks 吗？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;S锁，称为共享锁，事务在读取记录的时候获取 S 锁，它允许多个事务同时获取 S 锁，互相之间不会冲突。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;X锁，称为独占锁，事务在修改记录的时候获取 X 锁，且只允许一个事务获取 X 锁，其它事务需要阻塞等待。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 S 锁之间不冲突，X 锁则为独占锁，所以 X 之间会冲突， X 和 S 也会冲突。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不论是表级别锁还是行级别锁，S 和 X 的特性都是一样的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：你说事务在读取记录的时候需要获取 S 锁？这不对吧？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：确实不准确。益与 MVCC 的功劳，&lt;span&gt;普通的 select 是不需要加锁的&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 &lt;code&gt;SELECT ... LOCK IN SHARE MODE;&lt;/code&gt; 这种读取需要对记录上  S 锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SELECT ... FOR UPDATE;&lt;/code&gt; &lt;span&gt;这种&lt;/span&gt;需要对记录上 X 锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：对了，你刚提到表级锁，那你平时用过 InnoDB 的表锁吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：没用过，InnoDB 的表锁很鸡肋，我知道：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;LOCK TABLES yes READ&lt;/code&gt; 是对 yes 这个表上 S 锁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;LOCK TABLES yes WRITE&lt;/code&gt; 是对 yes 这个表上 X 锁。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是基本上没用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：噢？怎么个鸡肋了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：平日的 update 、select 要用也是用行锁了，不可能用粒度粗的表锁。唯一能想到用上表锁的就是 DDL 语句了，比如 ALTER TABLE 的时候，应该锁定整个表，防止查询和修改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是这个 server 已经提供了一个叫 MDL 的东西，即 &lt;code&gt;Metadata Locks&lt;/code&gt;，所以已经用 MDL 来阻塞了，表锁也就排不上用场了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真要用表锁，估计也就是数据恢复的时候，手动锁表还原数据了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官摸了摸头上的反光处：可以，但是如果真要到用表锁的时候，那表锁和行锁之间不是会冲突的吗？如果表里面已经加了行锁怎么办？得一条记录一条记录遍历过去找行锁吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：这确实是一种实现方式，但是性能太差了，假设数据库里有上千万的数据，这加个表锁得找死。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以有了个叫意向锁（Intention Locks）的东西。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;IS（Intention Shared Lock），共享意向锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IX（Intention Exclusive Lock），独占意向锁。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个锁是表级别的锁，当需要对表中的某条记录上 S 锁的时候，先在表上加个 IS 锁，表明此时表内有 S 锁。当需要对表中的某条记录上 X 锁的时候，先在表上加个 IX 锁，表明此时表内有 X 锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样操作之后，如果要加表锁，就不需要遍历所有记录去找了，直接看看表上面有没有 IS 和 IX 锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，此时要上表级别的 S 锁，如果表上没有 IX ，说明表中没有记录有独占锁，其实就可以直接上表级 S 锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果此时要上表级别的 X 锁，如果表上没有 IX 和 IS ，说明表中的所有记录都没加锁，其实就可以直接上表级 X 锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因此 IS 和 IX 的作用就是在上表级锁的时候，可以快速判断是否可以上锁，而不需要遍历表中的所有记录&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以  IS 和 IX 互相之间是不会冲突的，因为它们的作用只是打个标记，来丰富一下上面的表格：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;冲突&lt;/th&gt;&lt;th&gt;S&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;IS&lt;/th&gt;&lt;th&gt;IX&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;不冲突&lt;/td&gt;&lt;td&gt;冲突&lt;/td&gt;&lt;td&gt;不冲突&lt;/td&gt;&lt;td&gt;冲突&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;冲突&lt;/td&gt;&lt;td&gt;冲突&lt;/td&gt;&lt;td&gt;冲突&lt;/td&gt;&lt;td&gt;冲突&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IS&lt;/td&gt;&lt;td&gt;不冲突&lt;/td&gt;&lt;td&gt;冲突&lt;/td&gt;&lt;td&gt;不冲突&lt;/td&gt;&lt;td&gt;不冲突&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IX&lt;/td&gt;&lt;td&gt;冲突&lt;/td&gt;&lt;td&gt;冲突&lt;/td&gt;&lt;td&gt;不冲突&lt;/td&gt;&lt;td&gt;不冲突&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：行，那再来说说行锁吧，InnoDB 有几类行锁？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：有记录锁（Record Locks）、间隙锁（Gap Locks）、Next-Key Locks。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：详细说说看？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：记录锁顾名思义就是锁住当前的记录，它是作用到索引上的。我们都知道 innodb 是肯定有索引的，即使没有主键也会创建隐藏的聚簇索引，所以&lt;span&gt;记录锁总是锁定索引记录&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，此时一个事务 A 执行 &lt;code&gt;SELECT * FROM yes WHERE name = &#x27;xx&#x27; FOR UPDATE;&lt;/code&gt; 那么 name = xx 这条记录就被锁定了，其他事务无法插入、删除、修改 name = xx 的记录。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时事务 A 还未提交，另一个事务 B 要执行 &lt;code&gt;insert into yes (name) values (&#x27;xx&#x27;)&lt;/code&gt;，此时会被阻塞，这个很好理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，如果另一个事务 C 执行了 &lt;code&gt;insert into yes (name) values (&#x27;aa&#x27;)&lt;/code&gt;，这个语句会被阻塞吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看情况&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果 name 没有索引&lt;/span&gt;。前面提到记录锁是加到索引上的，但是 name 没索引啊，那只能去找聚簇索引，但聚簇索引上面只有主键啊，它哪知道各自的 name 是什么，所以咋办？都锁了呗！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，&lt;span&gt;如果 name 没有索引，那么事务 C 会被阻塞，如果有索引，则不会被阻塞&lt;/span&gt;！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以这里要注意，没索引的列不要轻易的锁，不要以为有行锁就可以为所欲为，并不是这样滴。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：哟，有点东西，继续继续。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：然后是间隙锁，这个东西它有点东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面说了，记录锁需要加到记录上，但是如果&lt;span&gt;要给此时还未存在的记录加锁怎么办&lt;/span&gt;？也就是要预防幻读的出现！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候间隙锁就派上用场了，它是给间隙加上锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如此时有 1、3、5、10 这四条记录，之前的文章分析过，数据页中还有两条虚拟的记录，分别是 &lt;code&gt;Infimum&lt;/code&gt; 和 &lt;code&gt;Supremum&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.45480631276901007&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nFibcnYFna3csYWFiaNcmiaDEMxNXBPBPTTkVc0WsAAqSaG5iblCSl1ADh91Y1ia2WQ4OW4tvGDOrwtIaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;697&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，记录之前都有间隙，&lt;span&gt;那间隙锁呢，锁的就是这个间隙&lt;/span&gt;！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我把 3 和 5 之间的间隙锁了，此时要插入 id = 4 的记录，就会被这个间隙锁给阻塞了，这样就避免了幻读的产生！也就实现了锁定未插入的记录的需求！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有个 &lt;code&gt;Next-Key Locks&lt;/code&gt; 就是记录锁+间隙锁，像上面间隙锁的举例，只能锁定(3,5) 这个区间，而 &lt;code&gt;Next-Key Locks&lt;/code&gt; 是一个前开后闭的区间(3,5]，这样能防止查询 id=5 的这个幻读。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：那间隙锁之间会不会冲突？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我 ：不会，&lt;span&gt;间隙锁的唯一目的就是防止其他事务插入数据到间隙中&lt;/span&gt; ，所以即使两个间隙锁要锁住相同的间隙也没有关系，因为它们的目的是一致的，所以不冲突。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：那间隙锁可以显式禁用吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我 ：可以的。间隙锁是在事务隔离级别为可重复读的时候生效的，如果将事务隔离级别更改为 READ COMMITTED，就会禁用了，此时，间隙锁对于搜索和索引扫描是禁用的，仅用于外键约束检查和重复键检查。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：说到间隙锁，那你知道什么是插入意向锁吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：插入意向锁，即 Insert Intention Locks，&lt;span&gt;它也是一类间隙锁&lt;/span&gt;，但是它不是锁定间隙，而是等待某个间隙。比如上面举例的 id = 4 的那个事务 C ，由于被间隙锁给阻塞了，所以事务 C 会生成一个插入意向锁，表明等待这个间隙锁的释放。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且插入意向锁之间不会阻塞，因为它们的目的也是只等待这个间隙被释放，所以插入意向锁之间没有冲突。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：所以这个插入意向锁其实没什么用的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：确实，它的目的不在于锁定资源防止别人访问，我个人觉得更像是为了遵循 MySQL 的锁代码实现而为之。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;锁其实就是内存里面的一个结构&lt;/span&gt;，每个事务为某个记录或者间隙上锁就是创建一个锁对象来争抢资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果某个事务没有抢到资源，那也会生成一个锁对象，只是状态是等待的，而当拥有资源的事务释放锁之后，就会寻找正在等待当前资源的锁结构，然后选一个让它获得资源并唤醒对应的事务使之得以执行。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7614314115308151&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nFibcnYFna3csYWFiaNcmiaDEMXkgWgLlQNxyzcLmuJ2j9P17z4Ro4bwcRHSZu3lmsxHV2loZouh8Dhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;503&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以按照这么个逻辑，&lt;span&gt;那些在等待间隙锁的插入事务，也需要对应的建立一个锁结构，然后锁类型是插入意向锁&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样一来，间隙锁的事务在释放间隙锁的时候，才能得以找到那些等待插入的事务，然后进行唤醒，而由锁的类型也可以得知是插入意向锁，之间不需要阻塞，所以可以一起执行插入。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6243243243243243&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nFibcnYFna3csYWFiaNcmiaDEMbQ57IHytUia0dictOM8yDyxaVtBqKVHhmS6ROLx9MPgiaia5678njVicy1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;740&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：说到插入新记录我问你个问题，如果插入的事务还未提交，现在有另一个事务通过&lt;code&gt;SELECT ... LOCK IN SHARE MODE&lt;/code&gt; 或者&lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; 打算读取这条记录怎么办？此时生效的是什么锁？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：(我丢，面试官想给我挖坑？哼，但是这难不倒我霸中霸！)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;插入的事务还未提交，此时普通 select 没问题，有 MVCC 在，所以读不到未提交的版本。而 SELECT ... LOCK IN SHARE MODE&lt;code&gt;或者&lt;/code&gt;SELECT ... FOR UPDATE`  是要获取记录 S 锁和 X 锁的，但是此时事务还未提交，因此这两类 select 会阻塞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体是怎么阻塞的呢？因为有事务ID！通过 MVCC 可以利用事务ID 来进行判断当前记录是否可见，这其实相当于一把&lt;span&gt;隐式锁&lt;/span&gt;！知道当前记录不可见，于是这个查询事务会为之前未提交的插入的事务生成一个锁结构，然后查询事务自己也生成锁结构，接着等待插入事务的释放，这样就完成了阻塞！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：(这小子，我要压不住他了！)行，那你知道什么是 AUTO-INC Locks 锁吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：知道，Auto-Inc Lock 是一个特殊的表级锁，用于自增列插入数据时使用。在插入一条数据的时候，需要在表上加个 Auto-Inc Lock，然后为自增列分配递增的值，在语句插入结束之后，再释放 Auto-Inc Lock。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 MySQL 5.1.22 版本之后，又弄了个互斥量来进行自增减的累加。互斥量的性能高于 Auto-Inc Lock，因为 Auto-Inc Lock是语句插入完毕之后才释放锁，而互斥量是在语句插入的时候，&lt;span&gt;获得递增值之后，就可以释放锁&lt;/span&gt;，所以性能更好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是我们还需要考虑主从的情况，由于&lt;span&gt;并发插入&lt;/span&gt;的情况，基于 statement -based binlog 复制时，自增的值顺序无法把控，可能会导致主从数据不一致。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 MySQL 有个 innodb_autoinc_lock_mode 配置，一共有三个值：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;0，只用 Auto-Inc Lock。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;1，&lt;span&gt;默认值&lt;/span&gt;，对于插入前已知插入行数的插入，用互斥量，对于插入前不知道具体插入数的插入，用 Auto-Inc Lock，这样即使基于 statement -based binlog 复制也是安全的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2，只用互斥量。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：那 MyISAM 有 AUTO-INC Locks 锁吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：没啊，MyISAM 插入本来就用了表锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：（这小子行啊，我得找回行子）那你还知道 MySQL 有什么锁吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：（这还没问够？？）表锁、IS、IX、MDL、记录锁、间隙锁、Next-key locks、插入意向锁、Auto-Inc Locks，还有啥？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官瞥了我一眼：(好小子，总算治了你了)不知道了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：（该怂的时候，还是得怂）知识盲区了，请面试官教教我。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：还有个 Predicate Locks，谓词锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：什么玩意？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：InnoDB 是支持空间数据的，所以有空间索引，为了处理涉及空间索引的操作的锁定，next-key locking 不好使，因为多维数据中没有绝对排序的概念，因此不清楚“下一个” key 在哪。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以为了支持具有空间索引的表的隔离级别，InnoDB使用谓词锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;空间索引包含最小边界矩形（MBR）值，因此 InnodB 通过在用于查询的 MBR 值上设置谓词锁定，使得 InnoDB 在索引上执行一致性读， 其他事务无法插入或修改与查询条件匹配的行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：(.....果然超出了我的知识范围，这个B被他装到了)老面试官您真的是66666。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：行吧，你今天答的马马虎虎还可以，下次再问问你啥 buffer pool、change buffer、doublewrite buffer 啥的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：(？？？？还问呢)，这是还继续面吗？这算三面吗？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.055350553505535&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nFibcnYFna3csYWFiaNcmiaDEM63juCLWyLJSebTUXMicXXToPyeiaSRuMY84Wibw7AxPx8dvTibFmg7QLow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;271&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：你管我，我就想多面面你，充分了解一下，我们公司很严格的，人不是随便招的！赶紧回去等通知！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：行行行，您老等着，就一堆 buffer 是吧，我回去好好准备准备哈~&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天就到这儿，&lt;span&gt;下篇我再画个图总结汇总一波今天的锁&lt;/span&gt;~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我有个面试群，想成为霸中霸，可以加我微信备注&lt;/span&gt;&lt;span&gt;面试&lt;/span&gt;&lt;span&gt;，个人微信：&lt;/span&gt;&lt;span&gt;yes_oba&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkxNTE3NjQ3MA==&amp;amp;mid=2247489472&amp;amp;idx=2&amp;amp;sn=20da41118ddb4208d57e16eceea677c3&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;一对一解答服务&lt;/a&gt;持续开放，不走知识星球直接私聊我。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐阅读：《从根儿上理解 MySQL》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天的分享到此结束，等我下篇哈，如果觉得文章不错。来个点赞、在看、分享三连哟！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是 yes，从一点点到亿点点，我们下篇见。&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fb0e2d3ce2f01110c03481236beb359e</guid>
<title>一款专为开发者开发的一站式写作、管理、发布的更简单且下载即用的效率工具</title>
<link>https://toutiao.io/k/py6lwml</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;logged-out env-production page-responsive&quot; id=&quot;readabilityBody&quot;&gt;
    

    

  &lt;p id=&quot;start-of-content&quot; class=&quot;show-on-focus&quot;/&gt;






    


    

  &lt;include-fragment class=&quot;js-notification-shelf-include-fragment&quot; data-base-src=&quot;https://github.com/notifications/beta/shelf&quot;/&gt;





  &lt;div class=&quot;application-main &quot; data-commit-hovercards-enabled=&quot;&quot; data-discussion-hovercards-enabled=&quot;&quot; data-issue-and-pr-hovercards-enabled=&quot;&quot;&gt;
        &lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SoftwareSourceCode&quot; class=&quot;&quot;&gt;
    &lt;main id=&quot;js-repo-pjax-container&quot; data-pjax-container=&quot;&quot;&gt;
      

      
    






  


  



&lt;div class=&quot;clearfix new-discussion-timeline container-xl px-3 px-md-4 px-lg-5&quot;&gt;
  &lt;div id=&quot;repo-content-pjax-container&quot; class=&quot;repository-content &quot;&gt;

    


    
      
    &lt;div&gt;
  &lt;p class=&quot;d-none d-lg-block mt-6 mr-3 Popover top-0 right-0 color-shadow-medium col-3&quot;&gt;
    
  &lt;/p&gt;

  &lt;div data-view-component=&quot;true&quot; class=&quot;gutter-condensed gutter-lg flex-column flex-md-row d-flex&quot;&gt;

  &lt;div data-view-component=&quot;true&quot; class=&quot;flex-shrink-0 col-12 col-md-9 mb-4 mb-md-0&quot;&gt;      
      &lt;div class=&quot;file-navigation mb-3 d-flex flex-items-start&quot;&gt;
  



  

  &lt;p class=&quot;flex-auto&quot;/&gt;

  &lt;include-fragment data-test-selector=&quot;overview-actions-fragment&quot; src=&quot;/oncework/kuaixieya/overview_actions/main&quot;/&gt;


    &lt;span class=&quot;d-none d-md-flex ml-2&quot;&gt;

      
&lt;get-repo class=&quot;&quot;&gt;
    
    &lt;details class=&quot;position-relative details-overlay details-reset&quot; data-action=&quot;toggle:get-repo#onDetailsToggle&quot;&gt;
      &lt;summary class=&quot;btn btn-primary&quot; data-hydro-click=&quot;{&amp;quot;event_type&amp;quot;:&amp;quot;repository.click&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;repository_id&amp;quot;:314759811,&amp;quot;target&amp;quot;:&amp;quot;CLONE_OR_DOWNLOAD_BUTTON&amp;quot;,&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/oncework/kuaixieya?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&amp;quot;,&amp;quot;user_id&amp;quot;:null}}&quot; data-hydro-click-hmac=&quot;4e8e3dccea3ac9316c97f9daea81959abe61202894c82db3e235d87a6f8198c5&quot;&gt;
        Code
        &lt;span class=&quot;dropdown-caret&quot;/&gt;
&lt;/summary&gt;      &lt;div class=&quot;position-relative&quot;&gt;
        &lt;div class=&quot;dropdown-menu dropdown-menu-sw p-0&quot;&gt;
          


          
          
          &lt;div class=&quot;p-3&quot; data-targets=&quot;get-repo.platforms&quot; data-platform=&quot;xcode&quot; hidden=&quot;&quot;&gt;
            &lt;h4 class=&quot;lh-condensed mb-3&quot;&gt;Launching Xcode&lt;span class=&quot;AnimatedEllipsis&quot;/&gt;&lt;/h4&gt;
            &lt;p class=&quot;color-text-secondary&quot;&gt;If nothing happens, &lt;a href=&quot;https://developer.apple.com/xcode/&quot;&gt;download Xcode&lt;/a&gt; and try again.&lt;/p&gt;
            &lt;button data-action=&quot;click:get-repo#onDetailsToggle&quot; type=&quot;button&quot; data-view-component=&quot;true&quot; class=&quot;btn-link&quot;&gt;
  
  
              Go back

  

&lt;/button&gt;          &lt;/div&gt;
          &lt;div class=&quot;p-3 &quot; data-targets=&quot;get-repo.platforms&quot; data-target=&quot;new-codespace.loadingVscode prefetch-pane.loadingVscode&quot; data-platform=&quot;vscode&quot; hidden=&quot;&quot;&gt;
  &lt;poll-include-fragment data-target=&quot;get-repo.vscodePoller new-codespace.vscodePoller prefetch-pane.vscodePoller&quot;&gt;
    &lt;h4 class=&quot;lh-condensed mb-3&quot;&gt;Launching Visual Studio Code&lt;span class=&quot;AnimatedEllipsis&quot; data-hide-on-error=&quot;&quot;/&gt;&lt;/h4&gt;
    &lt;p class=&quot;color-text-secondary&quot; data-hide-on-error=&quot;&quot;&gt;Your codespace will open once ready.&lt;/p&gt;
    &lt;p class=&quot;color-text-secondary&quot; data-show-on-error=&quot;&quot; hidden=&quot;&quot;&gt;There was a problem preparing your codespace, please try again.&lt;/p&gt;
  &lt;/poll-include-fragment&gt;
&lt;/div&gt;

        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/details&gt;

&lt;/get-repo&gt;

        
    &lt;/span&gt;
&lt;/div&gt;

      


&lt;div class=&quot;Box mb-3&quot;&gt;
  
  &lt;h2 id=&quot;files&quot; class=&quot;sr-only&quot;&gt;Files&lt;/h2&gt;
  


    &lt;a class=&quot;d-none js-permalink-shortcut&quot; data-hotkey=&quot;y&quot; href=&quot;/oncework/kuaixieya/tree/8e184c2389cc23ca465f7a58f2f66fc699ac4966&quot;&gt;Permalink&lt;/a&gt;

  &lt;div data-view-component=&quot;true&quot; class=&quot;include-fragment-error flash flash-error flash-full py-2&quot;&gt;
  &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;&lt;p&gt;
  
    Failed to load latest commit information.


  
&lt;/p&gt;&lt;/div&gt;  &lt;div class=&quot;js-details-container Details&quot;&gt;
    &lt;div role=&quot;grid&quot; aria-labelledby=&quot;files&quot; class=&quot;Details-content--hidden-not-important js-navigation-container js-active-navigation-container d-md-block&quot; data-pjax=&quot;&quot;&gt;
      &lt;div class=&quot;sr-only&quot; role=&quot;row&quot;&gt;
        &lt;p role=&quot;columnheader&quot;&gt;Type&lt;/p&gt;
        &lt;p role=&quot;columnheader&quot;&gt;Name&lt;/p&gt;
        &lt;p role=&quot;columnheader&quot; class=&quot;d-none d-md-block&quot;&gt;Latest commit message&lt;/p&gt;
        &lt;p role=&quot;columnheader&quot;&gt;Commit time&lt;/p&gt;
      &lt;/div&gt;

        
        
        
    &lt;/div&gt;
    &lt;p class=&quot;Details-content--shown Box-footer d-md-none p-0&quot;&gt;
      &lt;button aria-expanded=&quot;false&quot; type=&quot;button&quot; data-view-component=&quot;true&quot; class=&quot;js-details-target btn-link d-block width-full px-3 py-2&quot;&gt;
  
  
        View code

  

&lt;/button&gt;    &lt;/p&gt;
  &lt;/div&gt;




&lt;/div&gt;

    &lt;readme-toc&gt;

    &lt;div id=&quot;readme&quot; class=&quot;Box md js-code-block-container Box--responsive&quot;&gt;

      

        &lt;div data-target=&quot;readme-toc.content&quot; class=&quot;Box-body px-5 pb-5&quot;&gt;
          &lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;「快写鸭」是一款专为开发者开发的一站式写作、管理、发布的更简单且下载即用的效率工具，去除繁琐配置但又极具丰富且自定义性质等功能。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content--效率更高效&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#-效率更高效&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class=&quot;g-emoji&quot; alias=&quot;bulb&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png&quot;&gt;💡&lt;/g-emoji&gt; 效率更高效&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;程序员和技术人员常常会写「技术文章」和「博客」，用作「技术分享」、「产品分享」或「提供咨询」等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;技术博主通常需要在多个媒体渠道发布文章，诸如「掘金」、「SegmentFault」、「CSDN」、「知乎」、「简书」、「微信公众号」等等，以求最大的关注度。但是，发布文章到这么多平台费时费神，需要不断地复制粘贴和修改排版；同时，作者想查看阅读数时还需要来回切换各个网站来进行「统计」(To be continue...)。这非常不方便。「快写鸭」主要就是为了来解决上述这些问题的。&lt;/li&gt;
&lt;li&gt;一方面，市面上已经存在「一文多发」平台了，例如 「OpenWrite」，为何还要搞这个软件呢？或许其他一文多发平台也是一个替代方案，但它们要求用户将自己的账户信息例如 「Cookie」 或「账号密码」上传到对方服务器，这很不安全，一旦平台发生问题，自己的账户信息会遭到泄漏。虽然我相信一般平台不会恶意操作用户的账户，但如果出现误操作，您的账户「隐私」将遭到「泄漏」，平台上的财产也可能遭到损坏，有这样的风险需要考虑。「快写鸭」不提供任何接口保存用户账号信息，所有账户信息全部保存在用户自己的本地数据库里，因此规避了这个安全风险。&lt;/li&gt;
&lt;li&gt;另一方面，相对还有其他的一文多发平台，都存在一个问题就是「安装繁琐」，或者「占用内存大」，无法立即使用发布功能，因此「快写鸭」就诞生了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id=&quot;user-content--发布原理&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#-发布原理&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class=&quot;g-emoji&quot; alias=&quot;boom&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png&quot;&gt;💥&lt;/g-emoji&gt; 发布原理&lt;/h2&gt;
&lt;p&gt;通过 「Electron」 和 「Puppeteer」的通信，编写「自动化脚本」来进行一键发布。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content--详细文档&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#-详细文档&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class=&quot;g-emoji&quot; alias=&quot;books&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png&quot;&gt;📚&lt;/g-emoji&gt; 详细文档&lt;/h2&gt;
&lt;p&gt;更丰富的功能介绍，&lt;a href=&quot;https://www.yuque.com/daolong/kxy&quot; rel=&quot;nofollow&quot;&gt;点击查看文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content--功能预览&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#-功能预览&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class=&quot;g-emoji&quot; alias=&quot;duck&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f986.png&quot;&gt;🦆&lt;/g-emoji&gt; 功能预览&lt;/h2&gt;
&lt;p&gt;快写鸭正在快速地开发中，如果你有好的建议可以随时找我哦~&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/h7enVH&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8396f2704bf950f8816ac49ec3a6eace5b0f1c654bcab1c2f9d9aab93c25242d/68747470733a2f2f7a332e617831782e636f6d2f323032312f30392f30382f6837656e56482e706e67&quot; alt=&quot;管理渠道.png&quot; data-canonical-src=&quot;https://z3.ax1x.com/2021/09/08/h7enVH.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/h7eVKO&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8166122402b1c29e543e1ad6a33f5526c8a9efccb8e382249caccba37208664a/68747470733a2f2f7a332e617831782e636f6d2f323032312f30392f30382f683765564b4f2e706e67&quot; alt=&quot;管理文章.png&quot; data-canonical-src=&quot;https://z3.ax1x.com/2021/09/08/h7eVKO.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/h7euad&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/3ca86f49f0cfeeea5f52ebb6f1e01736bdfb2b77958500aec5459dab7156ba12/68747470733a2f2f7a332e617831782e636f6d2f323032312f30392f30382f6837657561642e706e67&quot; alt=&quot;发布文章.png&quot; data-canonical-src=&quot;https://z3.ax1x.com/2021/09/08/h7euad.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/h7eZrD&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8d86810d6eaa4324a5f5d2895e16ca9159c81b9fad71f272df13bf9a36789462/68747470733a2f2f7a332e617831782e636f6d2f323032312f30392f30382f6837655a72442e706e67&quot; alt=&quot;自定义渠道.png&quot; data-canonical-src=&quot;https://z3.ax1x.com/2021/09/08/h7eZrD.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content--如何下载&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#-如何下载&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class=&quot;g-emoji&quot; alias=&quot;dog&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f436.png&quot;&gt;🐶&lt;/g-emoji&gt; 如何下载&lt;/h2&gt;
&lt;p&gt;Github地址：&lt;a href=&quot;https://github.com/oncework/kuaixieya&quot;&gt;https://github.com/oncework/kuaixieya&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://github.com/oncework/kuaixieya/releases&quot;&gt;https://github.com/oncework/kuaixieya/releases&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content--联系方式&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#-联系方式&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class=&quot;g-emoji&quot; alias=&quot;envelope_with_arrow&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f4e9.png&quot;&gt;📩&lt;/g-emoji&gt; 联系方式&lt;/h2&gt;
&lt;p&gt;Email: &lt;a href=&quot;mailto:xudaolong@gmail.com&quot;&gt;xudaolong@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WeChat:&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/db926d693533772bcda65d5ada3855d689f52d18938036cd39f7ae7c3e0dee80/68747470733a2f2f7a332e617831782e636f6d2f323032312f30392f30382f68485a5946412e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/db926d693533772bcda65d5ada3855d689f52d18938036cd39f7ae7c3e0dee80/68747470733a2f2f7a332e617831782e636f6d2f323032312f30392f30382f68485a5946412e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://z3.ax1x.com/2021/09/08/hHZYFA.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/4551603453c178881a081d3fb7ed30df2d508c6c9fb7bb1d8c312bec85763972/68747470733a2f2f7777772e6b75616978696579612e636f6d2f696d672f77656978696e2d70726f66696c652e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4551603453c178881a081d3fb7ed30df2d508c6c9fb7bb1d8c312bec85763972/68747470733a2f2f7777772e6b75616978696579612e636f6d2f696d672f77656978696e2d70726f66696c652e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://www.kuaixieya.com/img/weixin-profile.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;
        &lt;/div&gt;
    &lt;/div&gt;

  &lt;/readme-toc&gt;


&lt;/div&gt;

    &lt;div data-view-component=&quot;true&quot; class=&quot;flex-shrink-0 col-12 col-md-3&quot;&gt;      

      &lt;div class=&quot;BorderGrid BorderGrid--spacious&quot; data-pjax=&quot;&quot;&gt;
        &lt;div class=&quot;BorderGrid-row hide-sm hide-md&quot;&gt;
          &lt;div class=&quot;BorderGrid-cell&quot;&gt;
              &lt;h2 class=&quot;mb-3 h4&quot;&gt;About&lt;/h2&gt;

    &lt;p class=&quot;f4 mt-3&quot;&gt;
      「快写鸭」是一款专为开发者开发的一站式写作、管理、发布的更简单且下载即用的效率工具，去除繁琐配置但又极具丰富且自定义性质等功能。
    &lt;/p&gt;
    

  &lt;h3 class=&quot;sr-only&quot;&gt;Topics&lt;/h3&gt;
  

  &lt;h3 class=&quot;sr-only&quot;&gt;Resources&lt;/h3&gt;
  

  &lt;h3 class=&quot;sr-only&quot;&gt;License&lt;/h3&gt;
  

  &lt;include-fragment aria-label=&quot;Loading...&quot; src=&quot;/oncework/kuaixieya/hovercards/citation/sidebar_partial?commit=8e184c2389cc23ca465f7a58f2f66fc699ac4966&quot;&gt;
  &lt;/include-fragment&gt;

          &lt;/div&gt;
        &lt;/div&gt;
          
          
          
      &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;



  &lt;/div&gt;
&lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;

  &lt;/div&gt;

          




  &lt;div id=&quot;ajax-error-message&quot; class=&quot;ajax-error-message flash flash-error&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;button type=&quot;button&quot; class=&quot;flash-close js-ajax-error-dismiss&quot; aria-label=&quot;Dismiss error&quot;&gt;
      &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
    &lt;/button&gt;&lt;p&gt;
    You can’t perform that action at this time.
  &lt;/p&gt;&lt;/div&gt;

  &lt;div class=&quot;js-stale-session-flash flash flash-warn flash-banner&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-in&quot; hidden=&quot;&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-out&quot; hidden=&quot;&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
  &lt;/div&gt;
    &lt;template id=&quot;site-details-dialog&quot;&gt;
  &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-text-primary hx_rsm&quot; open=&quot;&quot;&gt;
    &lt;summary role=&quot;button&quot; aria-label=&quot;Close dialog&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal&quot;&gt;
      &lt;button class=&quot;Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
        &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
      &lt;/button&gt;
      &lt;p class=&quot;octocat-spinner my-6 js-details-dialog-spinner&quot;/&gt;
    &lt;/details-dialog&gt;
  &lt;/details&gt;
&lt;/template&gt;

    

    &lt;template id=&quot;snippet-clipboard-copy-button&quot;&gt;
  
&lt;/template&gt;




  &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>783dc387bca9ef82b4df2a34712a54bf</guid>
<title>征服傅里叶变换</title>
<link>https://toutiao.io/k/yr8f2qp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-style=&quot;box-sizing: border-box; padding: 0px; margin: 0px; line-height: 1.75em;font-size: 14px; color: rgb(12, 12, 12);&quot; deep=&quot;6&quot;&gt;&lt;p&gt;&lt;span&gt;能有效和能非常简单地领会的原因是我们使用了一种不太传统的逼近。重要的是你将学习傅立叶变换的要素而完全不用超过加法和乘法的数学计算! 我将设法在不超过以下六节里解释在对音像信号处理中傅立叶变换的实际应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;strong&gt;步骤 1: 一些简单的前提&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;在下面，您需要理解以下四件最基本的事情: 加法，乘、除法。什么是正弦，余弦和正弦信号。明显地，我将跳第一二件事和将解释位最后一个。您大概还记得您在学校学过的“ 三角函数”[1] ，它神秘地用于 与角度一起从它们的内角计算它们的边长，反之亦然。我们这里不需要所有这些事，我们只需要知道二个 最重要的三角函数，&quot;正弦&quot; 和&quot;余弦&quot; 的外表特征。这相当简单: 他们看起来象是以峰顶和谷组成的从观察点向左右无限伸展的非常简单的波浪。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6291208791208791&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/QfOX6PoObkAzGGs3ppTWKL7aWLqFjpARicFTNiafveSGUTbdJ4xiaH2iaxK88yMJ3bfB7MIiaPl7TDGqico4Yl6YL6WA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;364&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;（附图一）&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如同你所知道的，这两种波形是周期性的，这意味着在一定的时间、周期之后，它们看起来再次一样。两种波形看起来也很象，但当正弦波在零点开始时余弦波开始出现在最大值。在实践中，我们如何判定我们在一个给定时间所观测到的波形是开始在它的最大值或在零? 问的好: 我们不能。实践上没有办法区分正弦波和余弦波，因此看起来象正弦或余弦波的我们统称为正弦波，在希腊语中译作&quot;正弦类&quot;。正弦波的一个重要性质是&quot;频率&quot;。它告诉我们在一个给定的时间内有多少个波峰和波谷。高频意味许多波峰和波谷， 低频率意味少量波峰和波谷:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5782122905027933&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/QfOX6PoObkAzGGs3ppTWKL7aWLqFjpARMx3sSsHkVjD7MicA2W5LVFgkg9FZd4v6OZVvdfVXQyWT6eXQwgFBxCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;358&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;（附图二）&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;步骤 2: 了解傅立叶定理&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Jean-Baptiste Joseph Fourier 是孩子们中让父母感到骄傲和惭愧的的一个，因为他十四岁时就开始对他们说非常复杂的数学用语。他的一生中做了很多重要工作，但最重大的发现可能是解决了材料热传导问题。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;他推导出了描述热在某一媒介中如何传导的公式，即用三角函数的无穷级数来解决这个问题（就是我们在上面讨论过的正弦、余弦函数）。主要和我们话题有关的是：傅里叶的发现总结成一般规律就是任意复杂的信号都能由一个个混合在一起的正弦函数的和来表示。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;这是一个例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.3402061855670102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/QfOX6PoObkAzGGs3ppTWKL7aWLqFjpAR9YPoEewek2gIlXa4Q5vO1EClB1eHtTAttQnorfCKmeicibBjqMdqnnsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;291&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;（附图三）&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这里你看到的是一个原始的信号，以及如何按某一确定的关系（“ 配方” ）混合在一起的正弦函数混合物（我们称它们为分量）所逼近。我们将简略地谈论一下那份配方。如你所知，我们用的正弦函数愈多 其结果就愈精确地接近我们的原始信号波形。在“ 现实” 世界中，在信号连续的地方，即你能以无穷小的间 隔来测量它们，精度仅受你的测试设备限制，你需要无限多的正弦函数才能完美地建立任意一个给定的信 号。幸运地是，和数字信号处理者们一样，我们不是生活在那样的世界。相反，我们将处理仅以有限精度 每隔一定间隔被测量的现实世界的采样信号。因而，我们不需要无限多地正弦函数，我们只需要非常多。稍后我们也将讨论这个“ 非常多” 是多少。目前重要的一点是你能够想象，任意一个在你计算机上的信号， 都能用简单正弦波按配方组成。&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;strong&gt;步骤 3: “ 非常多” 是多少&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;正如我们所知道的，复杂形状的波形能由混合在一起的正弦波所建立。我们也许要问需要多少正弦波来 构造任意一个在计算机上给定的信号。当然，倘若我们知道正在处理的信号是如何组成的，这可能至少是 一个单个正弦波。在许多情况下，我们处理的现实世界的信号可能有非常复杂的结构，以至于我们不能深 入知道实际上有多少“ 分量” 波存在。在这种情况下，即使我们无法知道原始的信号是由多少个正弦波来构 成的，肯定存在一个我们将需要多少正弦波的上限。尽管如此，这实际上没解决有多少的问题。让我们试 着来直观地逼近它: 假设一个信号我们有 1000 个样采，可能存在的最短周期正弦波（即多数波峰波谷在其 中）以交替的波峰波谷分布在每个采样内。因此，最高频率的正弦波将有 500 个波峰和 500 个波谷在我 们的 1000 个采样中，且每隔一个采样是波峰。下图中的黑点表示我们的采样，所以，最高频率的正弦波 以看起来象这样:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.46710526315789475&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/QfOX6PoObkAzGGs3ppTWKL7aWLqFjpAR7lmPDa9rw5rbF2SKjwCjqlDjc1rUvwVnWhYTKz2rUvgiaWZUA6ddfvQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;152&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;The highest frequency sine wave（附图四）&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在让我们来看一下最低频率正弦波可能多么低。如果我们只给一个单独的采样点，我们将如何能测量穿过这点的正弦波的峰顶和谷? 我们做不到，因为有许多不同周期正弦波穿过这点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3415841584158416&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/QfOX6PoObkAzGGs3ppTWKL7aWLqFjpAR3YweXvSVKla2MibJsSqgU8bwibaWIImqSoN47VVmL52D6NrQFe3V7aiaQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;202&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;（附图五）&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，一个单独数据点不足以告诉我们关于频率的任何事。现在，如果我们有两个采样，那么穿过这 两点的正弦波的最低频率是什么？在这种情况下它很常简单。只有一个穿过这两点的非常低频率的正弦 波。它看起来向这样：&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3817204301075269&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/QfOX6PoObkAzGGs3ppTWKL7aWLqFjpARSFDFj5mDfCZYuQ9QVuDOryibJjNg37bJricbP6HDOaiaZ98oGVnwyEfIw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;186&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;The lowest frequency sine wave（附图六）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想象最左面的两个点是二个钉子和一个跨越它们之间的弦（图六描述三个数据点是因为正弦波的周期性，但我们实际上只需要最左面的两点说明它的频率）。我们能领会的最低的频率是来回地摆动在二个钉 子之间的弦，象是图六中左边两点之间的正弦波所做的。如果我们有 1000 个采样，那么两个“ 钉子” 相当 于第一个或最后的采样，比如 1 号采样和 1000 号采样。从对乐器的体验我们知道，当长度增加时弦的频 率将下降。所以我们可以想象，当我们将两个钉子向彼此远离的方向移开时，最小正弦波的频率将变得更 低。例如，如果我们选择 2000 个采样，因为我们的“ 钉子” ，在 1 号或 2000 号采样间，所以最低正弦波将 更低。事实上，它将低两倍，因为因为我们的钉子比 1000 个采样时远两倍。这样，如果我们有更多的采 样，我们将能辨别出一个更低频率的正弦波，因为它们的零交叉点（我们的“ 钉子” ）将移动得更远。这对 了解下面的解释是非常重要的。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;象我们看到的那样，在两个“ 钉子” 之后，我们的波形开始重复上升斜坡（第一个钉子和第三个钉子同样）。这意味着任意两个相邻的钉子准确地包含完整正弦波的一半，换句话说一个峰或一个谷或半个周期。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;概括一下我们刚学过的东西，我们知道，一个采样正弦波的上限频率是所有其它有一个波峰和波谷的 采样，并且，低频下限是我们看到的正好匹配采样数的正弦波的周期的一半。但等一下，这难到不意味着， 当上限频率保持固定时，当有很多采样时最低频率可以降低？确实如此! 结果我们将从一个低频开始增加 更多正弦波来组成一个较长的未知内容的信号。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;一切都清楚了，但我们仍然不知道我们最终需要多少正弦波。就象我们现在知道任意正弦波分量所能 具的有上下限频率一样，我们能计算出适合这两个极限之间的量是多少。既然我们沿着最左到最右的采样 固定了最低正弦波分量，我们要所有其它正弦波最好也使用这些钉子(为什么我们要不同地对待他们? 所有的正弦波被同等的创建！)。假设正弦波束是系在吉他上二个固定点的弦。它们能只摇摆在二个钉子之间(除非他们断了)，就象我们下图的正弦波。这导致如下关系，我们的最低分量（1）以 1/2 周期装配，第二分量（2）以 1 个周期装配，第三分量以 1 1/2 周期装配以此类推直到我们看到的 1000 个采样。形象地, 看起来象这:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8280632411067194&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/QfOX6PoObkAzGGs3ppTWKL7aWLqFjpARibc137TKf96KicQc5VibHcgIPolc9vPLI05Fx0dkHib5Wo6P2gePDQRVkw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;506&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;（附图七）&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在，如果我们算一下要多少正弦波以那种方法装配我们的 1000 个采样，就会发现我们精确地需要1000 个正弦波叠加起来表示 1000 个采样。实际上，我们总是发现我们需要和采样一样多的正弦波。&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;strong&gt;步骤 4 关于烹饪食谱&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;在前面的段落我们看到, 任一个给定的在计算机上的信号能被正弦波混合物来构造。我们考虑了他们的频率，并且考虑了需要多大的最低和最高频率的正弦波来完美地重建任一个我们所分析信号。我们明白 了为确定所需最低的正弦波分量，我们考察的采样的数量是重要，但我们还未论述实际正弦波如何必需被 混合产生某一确定的结果。由叠加正弦波组成任何指定的信号，我们需要测量他们的另外一个方面。实际 上，频率不是我们需要知道的唯一的事。我们还需要知道正弦波的幅度，也就是说每个正弦波幅度有多高 才能混合在一起产生我们需要的输入信号。高度是正弦波的峰顶的高度，意即峰顶和零线之间距离。幅度 赿高，我们听到的声音也就赿大。所以，如果您有一个含有许多低音的信号，无疑可以预期混合体中的低 频率正弦波的分量比例比高频正弦波分量更大。因此一般情况下，低音中的低频正弦波有一个比高频正弦 波更高的幅度。在我们的分析中，我们将需要确定各个分量正弦波的幅度以完成我们的配方。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;步骤 5：关于苹果和桔子&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;如果你一直跟着我，我们几乎完成了通向傅里叶变换的旅程。我们学了需要多少正弦波，它的数量依 赖于我们查看的采样的数量有一个频率上下限界，并且不知道怎么确定单个分量的幅度以完成我们的配 方。我们一直不清楚究竟如何从我们的采样来确定实际的配方。直观上我们可以断定能找到正弦波的幅度， 设法把一个已知频率正弦波和采样作对比，我们测量找出它们有多么接近。如果它们精确地相等，我们知 道该正弦波存在着相同的幅度，如果我们发现我们的信号与参考正弦波一点也不匹配，我们将认为这个不 存在。尽管如此，我们如何高效地把一个已知的正弦波同采样信号进行比较？幸运地是，数字信号处理工 作者早已解决了如何作这些。事实上，这象加法和乘法一样容易－我们取一个已知频率的单位正弦波（这意味着它的振幅是 1，可从我们的计算器或计算机中精确地获得）和我们的信号采样相乘。累加乘积之后， 我们将得到我们正在观测的这个频率上正弦波分量的幅度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是个举例，一个简单的完成这些工作的 C 代码片段：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;Listing 1.1: The direct realization of the Discrete Sine Transform (DST):&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; M_PI 3.14159265358979323846&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; bin,k;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; arg;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (bin = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; bin &amp;lt; transformLength; bin++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;transformData[bin] = &lt;span class=&quot;code-snippet__number&quot;&gt;0.&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (k = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; k &amp;lt; transformLength; k++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;arg = (&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;)bin * M_PI *(&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;)k / (&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;)transformLength;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;transformData[bin] += inputData[k] * &lt;span class=&quot;code-snippet__built_in&quot;&gt;sin&lt;/span&gt;(arg);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这段代码变换存储在 inputData[0...transformLength-1]中我们测量的采样点成为一个正弦波分量的幅度队列 transformData[0...transformLength-1]。根据通用术语，我们称参考正弦波的频率步长为盒（bin），&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;这意味着它们被认为象是一个我们放置我们估计的任意分量波的幅度的容器。离散正弦变换(DST)是一个普通程序，它假设我们无法想象我们的信号看起来象什么样，否则我们能使用一个更加高效率的方法来确 定正弦波分量的幅度（例如，我们予先知道, 我们的信号是一个已知频率的正弦波。我们能直接地找出它 的高度而不用计算正弦波的整个范围。实现这个有效的逼近是基于傅里叶原理，它能在文献的戈策尔(Goe rtzel)算法条目下找到）。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;这些就是你坚持想要的我们为什么用这样的方法计算正弦变换的一个解释：对我们用一个已知频率正弦 波的乘积来作一种非常直观逼近的理由，可以设想，这大致相当于一个固有频率的“ 共振” 在系统内发生时 物理世界发生的事情。sin(arg)项本质上是一个获得由输入信号波形激励的谐振器。如果输入（信号）有在 我们正观测的频率上的分量，它的输出将是参考正弦波谐振的幅度。因为我们的参考波是单位幅度的，输出是一个在那个频率上的分量的实际幅度的一个直接测量。因为谐振器只是简单的滤波器，变换（不可否 认是在稍微宽松条件下）被认为有极窄的带通滤波器组的特征，它位于我们估值的频率中心的周围。这有 助于解释一个事实，为什么傅立叶变换提供了对信号进行过滤的一个高效工具。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;只是为了完备性: 当然，上述程序是可逆的，当我们知道它的正弦波分量时，我们的信号(在数字精确度 极限内)能完全被重建，通过简单地把正弦波加起来。这留下给读者做为一个练习。同样程序能改变使用余 弦波做为基本函数工作-我们只需简单地改变 sin(arg)条件到 cos(arg)来获得离散余弦变换的直接实现(DC T)。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;现在，就象在这篇文章较前面的段落中我们讨论过的那样，我们在实践中没有办法区分一个被测量的正 弦类函数象是正弦波还是余弦波。做为代替我们总是测量正弦信号，且正弦和余弦变换在实践中没有太大 的用途，除了一些特殊情况（象图象压缩的地方，即毎块图象具有能用一个基本的余弦或正弦函数较好模 拟特性，例如能用余弦基本函数较好表现的相同颜色的大区域）。正弦信号是一个比正弦或余弦波更一般 的片断，因为它可以开始在在它的周期中的一个任意位置。我们记得，当余弦波开始于 1 时，正弦波总开 始在 0。当我们采取正弦波作为参考，余弦波开始在它的周期的最后 1/4 之处。一般用度或弧度测量它们 的偏移量，这是两个一般与三角函数相关的单位。一个完整的周期等于 360°（代表 &quot;度&quot;) 或 2π 个弧度(代表&quot;2π&quot; ，&quot;π&quot; 发音象“pie” 。π 是希腊字表示数 3.14159265358979323846... 在三角学方面有重要意义) 。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;余弦波因而有一个 90°或 π/2 的偏移。这偏移叫正弦信号的相位，因此余弦波相对正弦信号有 90°或 π/2 相位。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;相位的事情就有这些内容。因为我们一直不能限定信号在 0°或 90°相位开始（因为我们正观测一个我们 可能无法控制的信号），它对同时直接唯一的描述信号的频率、振幅、相位至关重要。以正弦或余弦做变换相位限制在 0°或 90°，一个具有任意相位的正弦信号将引起相邻频率出现假峰（因为它们试图“ 帮助” 分析，强制给被测信号加上一个 0°或 90°的相位作用）。它有些象用一圆石头去填满一个方孔：你需要小一 些的圆石头去填充剩余的空间，并且更小的石头填好依然留出空的空间，等等。我们所需要的是能处理一 般信号的变换，它能处理任意相位正弦波构成的信号。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;strong&gt;步骤 6：离散傅叶变换&lt;/strong&gt;&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;从正弦变换到傅里叶变换的步骤是简单的，只需用更一般的方法。在正弦变换中对每个频率上的测度 使用正弦波，在傅里叶变换中正弦、余弦波二者都使用。就是说，对任意的当前频率，我们以同一频率的 正弦和余弦波来“ 比较” （或“ 共振” ）被测信号。如果我们的信号看起来很象正弦波，变换的正弦部份将有 一个大的幅值。如果它看起来象余弦波，变换的余弦部份将有一个大的幅值。如果看起来象反相的正弦波， 也就是说，它开始于 0 但下降至－1 取代上升至 1，它的正弦部份将有一个大的负幅值。这表明用＋、－ 符号和正弦、余弦相位能表示任意给定频率的正弦信号[2]。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;Listing 1.2: The direct realization of the Discrete Fourier Transform[3]:&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; M_PI 3.14159265358979323846&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; bin, k;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; arg, sign = &lt;span class=&quot;code-snippet__number&quot;&gt;-1.&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (bin = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; bin &amp;lt;= transformLength/&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;; bin++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cosPart[bin] = (sinPart[bin] = &lt;span class=&quot;code-snippet__number&quot;&gt;0.&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (k = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; k &amp;lt; transformLength; k++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;arg = &lt;span class=&quot;code-snippet__number&quot;&gt;2.&lt;/span&gt;*(&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;)bin*M_PI*(&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;)k/(&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;)transformLength;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sinPart[bin] += inputData[k] * sign * &lt;span class=&quot;code-snippet__built_in&quot;&gt;sin&lt;/span&gt;(arg);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cosPart[bin] += inputData[k] * &lt;span class=&quot;code-snippet__built_in&quot;&gt;cos&lt;/span&gt;(arg);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;我们仍遗留着一个问题，就是如何获得傅里叶变换所缺乏的那些有用的东西。我说过傳里叶变换的优赿性超过正弦和余弦变换是因为用正弦信号工作。但至今我们还未看到任何正弦信号，仍只有正弦和余弦。好，这需要一点附加处理步聚：&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; M_PI 3.14159265358979323846&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; bin;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (bin = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; bin &amp;lt;= transformLength/&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;; bin++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;frequency[bin] = (&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;)bin * sampleRate / (&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;)transformLength;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;magnitude[bin] = &lt;span class=&quot;code-snippet__number&quot;&gt;20.&lt;/span&gt; * &lt;span class=&quot;code-snippet__built_in&quot;&gt;log10&lt;/span&gt;( &lt;span class=&quot;code-snippet__number&quot;&gt;2.&lt;/span&gt; * &lt;span class=&quot;code-snippet__built_in&quot;&gt;sqrt&lt;/span&gt;(sinPart[bin]*sinPart[bin] + cosPart[bin]*c&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;osPart[bin]) / (&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;)transformLength);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;phase[bin] = &lt;span class=&quot;code-snippet__number&quot;&gt;180.&lt;/span&gt;*&lt;span class=&quot;code-snippet__built_in&quot;&gt;atan2&lt;/span&gt;(sinPart[bin], cosPart[bin]) / M_PI - &lt;span class=&quot;code-snippet__number&quot;&gt;90.&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;在运行清单 1.3 所示的关于 DFT 输出的代码段之后，我们结束被看作以正弦信号波的和的输入信号表示。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;K 序正弦信号是用 frequency[k],magnitude[k]和 phase[k]来描述的。单位是 Hz(Hertz,周/秒)，dB(Decibel),和°(Degree)。请注意在经过清单 1.3 的后加工（处理）即把正弦和余弦函数部份转换成一个单一的正弦信 号之后，我们命名 K 序正弦信号的振幅－DFT 存贮为幅度，且它总是取相对值。我们可以说一个-1.0 的振 幅对应于 1.0 的幅度，对应于相位+或-180°。在文献中，做做傅里叶变换的场合，队列 magnitude[] 被称 作被测信号的幅度谱，队列 phase[]被称作被测信号的相位谱。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;如用分贝测量存贮幅度的参考，输入波也期望有一个在[-1.0,1.0]之间的采样值，相对于 0dB 幅度满刻 度数字。做为一个 DFT 的有趣应用，比如清单 1.3 就可被用于写一个基于离散傅里叶变换的谱分析。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;象我们已知那样，傅里叶变换和其系列的离散正弦和余弦变换，提供了把一个信号分解成一束分波的 便利工具。结果有正弦或余弦之一，或正弦信号（用正弦和余弦波的组合来描述）。在傅里叶变换中同时 使用正弦和余弦波的好处是我们因而能引入相位的概念，它使变换更一般化，因而我们能用它有效清楚地 分析既不是纯正弦也不是纯余弦的正弦信号，当然其它信号也一样。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;傅里叶变换与被考察信号无关，因而无论我们正分析的信号是一个正弦信号或是一些其它的更复杂的， 变换需要相同的操作数。这就是为什么傅里叶变换被称做无参数变换的原因，这意味着它对需要的信号“ 智能的” 分析没有直接的帮助（在考察一个我们已知是一个信号是正弦曲线的情况下，我们更喜欢精确地获 得关于相位，频率，幅度的信息以代替一串在一些预定频率上的正弦和余弦波）。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;现在我们也知道了我们是在求输入信号在一组固定频率栅格上的值，输入信号实际存在的频率组在这 组栅格上可能不起作用。我们在分析中利用的栅格是人为的，因为我们几乎按照关于它们的频率的尝试来 选择参考正弦、余弦波。说到了这些，马上清楚了一个将要很容易遇到的要点，即被测信号的频率位于变 换栅格的频率之间。因此，有一个频率发生在位于两个频率栅格之间的正弦曲线，在变换中将不好被描述。包围着与输入信号频率最接近的栅格的相邻的栅格将试图‘改正’ 频率的背离。因而，输入信号的能量将拖 尾至数个相邻的栅格。这也是傅里叶变换不能迅速地分析声音返回它的基波和谐波（并且，这也是为什么 我们称正弦和余弦波为分波而不谐波和泛音）。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;简单的说，没有进一步的快速处理，DFT 和一个狭窄的坝一样，细小并行的带通滤波器组（“ 通道” ）和每个通道带有附加的相位信息。这对分析信号、做滤波器和运用其它的技巧是有益的（改变一个信号的 音调而不改变它的速度是它们其中之一，说明在 DSPdimension.com 上另一篇不同的文章中），但它需 要对少量普通任务附加快速处理。同样，它能被认为是使用除了正弦和余弦波基本函数的变换系列的一个 特例。在这个方向上展开概念超出了这篇文章的范围。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;最后，重要的是要提及一个更高效的 DFT 工具，也就是一个被称做快速傅里叶变换的算法。它最初是由库利和图克在 1969 年构思的（它的根源仍然要追溯到高斯和其它人的工作）。FFT 只是一个高效的 算法，它比上面给出的以直接逼近计算 DFT 所化的时间少，它是结果完全相同的其它方法。无论如何，F FT 是以库利/图克算法实施的，它需要变换长度是 2 的幂。在实践中，对大多数应用来说这是一个可以接 受的限制。有大量的以不同方法实施 FFT 的可利用的文献，因而，可以说有足够多不同的 FFT 实现，其中一些并不需要经典 FFT 的 2 的幂的限制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面清单 1.4 以程序 smbFft()给出了一个 FFT 的实现。&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Listing 1.4: The Discrete Fast Fourier Transform (FFT):&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;void smbFft(float *fftBuffer, long fftFrameSize, long sign)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/*&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;FFT routine, (C)1996 S.M.Bernsee. Sign = -1 is FFT, 1 is iFFT (inverse) Fills fftBuffer[0...2*fftFrameSize-1] with the Fourier transform of the time domain data in fftBuffer [0...2*fftFrameSize-1]. The FFT array takes and returns the cosine and sine parts in an interleaved manner, ie. fftBuffer[0] = cosPart[0], fftBuffer[1] = sinPart[0], asf. fftFrameSize must be a power of 2. It expects a complex input signal (see footnote 2), ie. when working with ＇common＇ audio signals our input signal has to be passed as {in[0],0.,in[1],0.,in[2],0.,...} asf. In that case, the transform of the frequencies of interest is in fftBuffer[0...fftFrameSize].&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;float wr, wi, arg, *p1, *p2, temp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;float tr, ti, ur, ui, ur, ui, *p1r, *p1i, *p2r, *p2i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;long i, bitm, j, le, le2, k;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;for (i = 2; i &amp;lt; 2*fftFrameSize-2; i += 2) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;for (bitm = 2, j = 0; bitm &amp;lt; 2*fftFrameSize; bitm &amp;lt;&amp;lt;= 1) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;if (i &amp;amp; bitm) j++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;j &amp;lt;&amp;lt;= 1;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;if (i &amp;lt; j) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p1 = fftBuffer+i; p2 = fftBuffer+j;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;temp = *p1; *(p1++) = *p2;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;*(p2++) = temp; temp = *p1;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;*p1 = *p2; *p2 = temp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;for (k = 0, le = 2; k &amp;lt; (long)(log(fftFrameSize)/log(2.)); k++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;le &amp;lt;&amp;lt;= 1;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;le2 = le&amp;gt;&amp;gt;1;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ur = 1.0;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ui = 0.0;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;arg = M_PI / (le2&amp;gt;&amp;gt;1);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;wr = cos(arg);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;wi = sign*sin(arg);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;for (j = 0; j &amp;lt; le2; j += 2) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p1r = fftBuffer+j; p1i = p1r+1;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p2r = p1r+le2; p2i = p2r+1;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;for (i = j; i &amp;lt; 2*fftFrameSize; i += le) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;tr = *p2r * ur - *p2i * ui;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ti = *p2r * ui + *p2i * ur;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;*p2r = *p1r - tr; *p2i = *p1i - ti;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;*p1r += tr; *p1i += ti;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p1r += le; p1i += le;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p2r += le; p2i += le;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;tr = ur*wr - ui*wi;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ui = ur*wi + ui*wr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ur = tr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e66b6cf08fca77546cecc4cf7272979e</guid>
<title>携程数据血缘构建及应用</title>
<link>https://toutiao.io/k/bmgekrk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; role=&quot;option&quot; title=&quot;链接&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot;&gt;
                                            
                                                                                    &lt;span class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5MDI3MjA5MQ==&amp;amp;action=getalbum&amp;amp;album_id=1748286673357963265#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1748286673357963265&quot; data-tag_source=&quot;3&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;#&lt;/span&gt;大数据&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span class=&quot;article-tag-card__right&quot;&gt;&lt;span class=&quot;weui-hidden_abs&quot;&gt;,&lt;/span&gt;8个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:0.title1&quot;&gt;&lt;p&gt;&lt;strong&gt;作者简介&lt;/strong&gt;&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;cxzl25，携程软件技术专家，关注大数据领域生态建设，对分布式计算和存储、调度等方面有浓厚兴趣。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;一、前言&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Data lineage includes the data origin, what happens to it and where it moves over time. Data lineage gives visibility while greatly simplifying the ability to trace errors back to the root cause in a data analytics process. ──百科Data lineage&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大数据时代，数据的来源极其广泛，各种类型的数据在快速产生，数据也是爆发性增长。从数据的产生，通过加工融合流转产生新的数据，到最终消亡，数据之间的关联关系可以称之为数据血缘关系。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据血缘是元数据管理、数据治理、数据质量的重要一环，追踪数据的来源、处理、出处，对数据价值评估提供依据，描述源数据流程、表、报表、即席查询之间的流向关系，表与表的依赖关系、表与离线ETL任务，调度平台，计算引擎之间的依赖关系。数据仓库是构建在Hive之上，而Hive的原始数据往往来自于生产DB，也会把计算结果导出到外部存储，异构数据源的表之间是有血缘关系的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据血缘用途：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;追踪数据溯源：当数据发生异常，帮助追踪到异常发生的原因；影响面分析，追踪数据的来源，追踪数据处理过程。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;评估数据价值：从数据受众、更新量级、更新频次等几个方面给数据价值的评估提供依据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;生命周期：直观地得到数据整个生命周期，为数据治理提供依据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;安全管控：对源头打上敏感等级标签后，传递敏感等级标签到下游。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;本文介绍携程数据血缘如何构建及应用场景。第一版T+1构建Hive引擎的表级别的血缘关系，第二版近实时构建Hive，Spark，Presto多个查询引擎和DataX传输工具的字段级别血缘关系。&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;二、构建血缘的方案&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2.1 收集方式&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;方案一&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：只收集SQL，事后分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当SQL执行结束，收集SQL到DB或者Kafka。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：当计算引擎和工具不多的时候，语法相对兼容的时候，用Hive自带的LineageLogger重新解析SQL可以获得表和字段级别的关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：重放SQL的时候可能元数据发生改变，比如临时表可能被Drop，没有临时自定义函数UDF，或者SQL解析失败。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;方案二&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：运行时分析SQL并收集。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当SQL执行结束后立即分析Lineage，异步发送到Kafka。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：运行时的状态和信息是最准确的，不会有SQL解析语法错误。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：需要针对各个引擎和工具开发解析模块，解析速度需要足够快。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2.2 开源方案&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;Apache Atlas&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Apache Atlas是Hadoop社区为解决Hadoop生态系统的元数据治理问题而产生的开源项目，它为Hadoop集群提供了包括数据分类、集中策略引擎、数据血缘、安全和生命周期管理在内的元数据治理核心能力。官方插件支持HBase、Hive、Sqoop、Storm、Storm、Kafka、Falcon组件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hook在运行时采集血缘数据，发送到Kafka。Atlas消费Kafka数据，将关系写到图数据库JanusGraph，并提供REST API。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中Hive Hook支持表和列级别血缘，Spark需要使用GitHub的hortonworks-spark/spark-atlas-connector，不支持列级别，Presto则不支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.67375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5SmeianxeFcxNMAibEkTe4PClSdr0bZJq7mLZrVo1yLVs9M5SJy1Pk9Rew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;Linkedin DataHub&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;WhereHows项目已于2018年重新被LinkedIn公司设计为DataHub项目。它从不同的源系统中采集元数据，并进行标准化和建模，从而作为元数据仓库完成血缘分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;社区提供了一个Demo，演示地址：&lt;a target=&quot;_blank&quot; href=&quot;https://demo.datahubproject.io/&quot; textvalue=&quot;https://demo.datahubproject.io/&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://demo.datahubproject.io/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与Airflow集成较好，支持数据集级别血缘，字段级别在2021Q3的Roadmap。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.55875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5SLy1Zas5MGYdKiaKiaIib3S1vFbUuo7nWZc05jibxibjMemu6icianu9tNGB5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;三、携程方案&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;携程采用了方案二，运行时分析SQL并收集分析结果到Kafka。由于开源方案在现阶段不满足需求，则自行开发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于当时缺少血缘关系，对数据治理难度较大，表级别的血缘解析难度较低，表的数量远小于字段的数量，早期先快速实现了表级别版本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在16-17年实现和上线了第一个版本，收集常用的工具和引擎的表级别的血缘关系，T+1构建关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在19年迭代了第二个版本，支持解析Hive，Spark，Presto多个查询引擎和DataX传输工具的字段级别血缘关系，近实时构建关系。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;四、第一个版本-表级别血缘关系&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;4.1 处理流程&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对Hive引擎开发了一个Hook，实现ExecuteWithHookContext接口，从HookContext可以获得执行计划，输入表，输出表等丰富信息，异步发送到Kafka，部署的时候在hive.exec.post.hooks添加插件即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在17年引入Spark2后，大部分Hive作业迁移到Spark引擎上，这时候针对Spark SQL CLI快速开发一个类似Hive Hook机制，收集表级别的血缘关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传输工具DataX作为一个异构数据源同步的工具，单独对其开发了收集插件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在经过解析处理后，将数据写到图数据库Neo4j，提供元数据系统展示和REST API服务，落地成Hive关系表，供用户查询和治理使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6482334869431644&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5SibRQVsYh0oYYpQMjzibVLsTEic9XOvliaHTrScFzA1GibnLQbp6129tZrLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;651&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;4.2 效果&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在元数据系统上，可以查看一张表多层级的上下游血缘关系，在关系边上会有任务ID等一些属性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.51375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5SPEYZs3x6KaymljQg7mojtcORqFXA5G0TicLOx8qou899PRVyRRa1vibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;4.3 痛点&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;随着计算引擎的增加，业务的增长，表级别的血缘关系已经不满足需求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;覆盖面不足，缺少Spark ThriftServer , Presto引擎，缺少即席查询平台，报表平台等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;关系不够实时，期望写入表后可以快速查询到关系，用户可以直观查看输入和输出，数据质量系统，调度系统可以根据任务ID查询到输出表，对表执行质量校验任务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;图数据库Neo4j社区版为单机版本，存储数量有限，稳定性欠佳，当时使用的版本较低，对边不能使用索引(3.5支持)，这使得想从关系搜索到关联的上下游较为麻烦。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;五、第二版本-字段级别血缘关系&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前实现的第一个版本，对于细粒度的治理和追踪还不够，不仅缺少对字段级别的血缘关系，也不支持采集各个系统的埋点信息和自定义扩展属性，难以追踪完整链路来源，并且关系是T+1，不够实时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对各个计算引擎和传输工具DataX开发不同的解析插件，将解析好的血缘数据发送到Kafka，实时消费Kafka，把关系数据写到分布式图数据JanusGraph。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5501955671447197&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5SlrdSCpI0VqCD19nIbuvv5bZ9N7dDlqgIh5GVaWAb9qlZu25ajBR1icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;767&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;5.1 传输工具DataX&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里开源的Druid是一个 JDBC 组件库，包含数据库连接池、SQL Parser 等组件。通过重写MySqlASTVisitor、SQLServerASTVisitor来解析MySQL / SQLServer的查询SQL，获得列级别的关系。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;5.2 计算引擎&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;计算引擎统一格式，收集输入表、输出表，输入字段、输出字段，流转的表达式等一些信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;2.27&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5S1PV6GNXtmuliccpE9T4DT8DcjJNuATDHXrwxrA4bfHbk2iaGG0BMgicEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;Hive&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考 org.apache.hadoop.hive.ql.hooks.LineageLogger 实现，异步发送血缘数据到 Kafka。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Atlas的HiveHook也是实现ExecuteWithHookContext接口，从HookContext获得LineageInfo，也可以参考HIVE-19288 引入的org.apache.hadoop.hive.ql.hooks.HiveProtoLoggingHook，采集更多引擎相关的信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中遇到几个问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过HiveServer2执行获取的start time不正确&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HIVE-10957 QueryPlan&#x27;s start time is incorrect in certain cases&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HIVE-12709 further improve user level explain&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;获取执行计划有可能出现卡住，可以加个调用超时。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;Spark&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;前置条件：引入 SPARK-19558 Add config key to register QueryExecutionListeners automatically，实现自动注册QueryExecutionListener。&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实现方式：通过实现QueryExecutionListener接口，在onSuccess回调函数拿到当前执行的QueryExecution，通过LogicalPlan的output方法，获得所有Attribute，利用NamedExpression的exprId映射关系，对其进行遍历和解析，构建列级别关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;覆盖范围：Spark SQL CLI、Thrift Server、使用Dataset/DataFrame API（如spark-submit、spark-shell、pyspark）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;遇到问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;打上Patch SPARK-13983 ，可以实现第一步，传递变量，但是这个变量在每次执行新的statement都重新初始化，导致用户set的变量不可更新。&lt;/span&gt;&lt;span&gt;后续给社区提交PR SPARK-26598，修复变量不可更新的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SPARK-13983 Fix HiveThriftServer2 can not get &quot;--hiveconf&quot; and &quot;--hivevar&quot; variables since 2.0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SPARK-26598 Fix HiveThriftServer2 cannot be modified hiveconf/hivevar variables&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在DropTableCommand增加了一个标志位，真正在有执行Drop操作的话再置为True，保证收集的血缘数据是对的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Transform不像java UDF，只输入需要用到的字段即可，而是需要将所有后续用到的字段都输入到自定义脚本，脚本再决定输出哪些字段，这其中列与列之间的映射关系无法通过执行计划获得，只能简单的记录输出列的表达式，如transform(c1,c2,c3) script xxx.py to c4。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Presto&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开发Presto EventListener Plugin，实现EventListener接口，从queryCompleted回调函数的QueryCompletedEvent解析得到相应的信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上线的时候遇到一个无法加载Kafka加载StringSerializer的问题（StringSerializer could not be found）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kafka客户端使用 Class.forName(trimmed, true, Utils.getContextOrKafkaClassLoader()) 来加载Class，优先从当前线程的ContextClassLoader加载，与Presto的ThreadContextClassLoader有冲突，需要初化始KafkaProducer的时候，将ContextClassLoader暂时置为NULL。&lt;a target=&quot;_blank&quot; href=&quot;https://stackoverflow.com/a/50981469/1673775&quot; textvalue=&quot;https://stackoverflow.com/a/50981469/1673775&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://stackoverflow.com/a/50981469/1673775&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;5.3 图数据库JanusGraph&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;JanusGraph是一个开源的分布式图数据库。具有很好的扩展性，通过多机集群可支持存储和查询数百亿的顶点和边的图数据。JanusGraph是一个事务数据库，支持大量用户高并发地执行复杂的实时图遍历。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;生产上，存储我们使用Cassandra，索引使用Elasticsearch，使用Gremlin查询/遍历语言来读写JanusGraph，有上手难度，熟悉Neo4j的Cypher语法可以使用cypher-for-gremlin plugin。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.66&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5SncR1jKeia8Ax9A7fcI0S9rjgVhviboMTyiaicpmybGhAibBaS5TfBDgL9Pw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下是数据血缘写入图数据库的模型，Hive字段单独为一个Lable，关系型DB字段为一个Label，关系分两种，LABELWRITE，LABELWRITE_TTL。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只有输入没有输出（Query查询操作），只有输出没有输入（建表等DDL操作）也会强制绑定一个来源系统的ID及扩展属性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在生产上使用JanusGraph，存储亿级的血缘关系，但是在开发过程中也遇到了一些性能问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以DB名+表名+字段名作为唯一key，实现getOrCreateVertex，并对vertex id缓存，加速顶点的加载速度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关系LABELWRITETTL表示写入的关系有存活时间（TTL-Time to live），这是因为在批量删除关系的时候，JanusGraph速度相当慢，而且很容易OOM。比如要一次性删除，Label为WRITE，x=y，写入时间小于等于某个时间的边，这时候Vertex和Edge load到内存中，容易OOM。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;g.E().hasLabel(&quot;WRITE&quot;).has(&quot;x&quot;,eq(&quot;y&quot;)).has(&quot;publishedDate&quot;,P.lte(new Date(1610640000))).drop().iterate()&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;尝试使用多线程+分批次的方式，即N个线程，每个线程删除1000条，速度也不太可接受。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时候采用了折中的方案，需要删除关系用另外一种Label来表示，并在创建Label指定了TTL，由于Cassandra支持cell level TTL，所以边的数据会自动被删除。但是ES不支持TTL，实现一个定时删除ES过期数据即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.54375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5SM9icbVYY4NeyuOnvCb1MyxPusiafzgbCiaLicRO2nLB8QWGRkgGQZZQtIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;5.4 覆盖范围&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Zeus调度平台 （ETL操作INSERT、CTAS，QUERY）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Ad-Hoc即席查询平台 （CTAS，QUERY）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;报表平台 （QUERY）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;元数据平台 （DDL操作）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GPU平台 （PySpark）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过ETL任务ID，查询任务ID，报表ID，都可以获取到输入，输出的表和字段的关系。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;5.5 局限&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用MapReduce、Spark RDD读写HDFS的血缘暂时没有实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;思路可以在JobClient.submitJob的时候采集输入和输出路径，又或者通过HDFS的AuditLog、CallerContext来关联。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;5.6 效果&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在第一版使用图的方式展示血缘关系，在上下游关系较多的时候，显示较为混乱，第二版改成树状表格的方式展示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;字段operator在调度系统Zeus被转换成hive_account，最后输出是ArtNova报表系统的一张报表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7306733167082294&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5Shg72T1ajykNepfhSXQ1y0EmYwzIcQqKd7iaZFQgkQBQk2F06h6ESmicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;802&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;六、实际应用场景&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;6.1 数据治理&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;6.2 元数据管理&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5465631929046563&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5SnO0pr2WeLSlgLicfvuFWicu1LzfaCZNMbbickYuv2saRyQicnW6icpsrUFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;902&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;6.3 调度系统&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;得益于在图数据库JanusGraph可以使用关系边的key作为索引，可以根据任务ID可以轻松获得该任务输入和输出表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7830423940149626&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dic8yHPAwTdqf64WGPo6w5SOzw3Dnd8SHoic2o8ibaDW0PkuwlS2EpBHMsjgwKlibR2tcSjODIZSLqdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;802&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;6.4 敏感等级标签&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当源头的数据来自生产DB时，生产DB有些列的标签已打上了敏感等级，通过血缘关系，下游的表可以继承敏感等级，自动打上敏感标签。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;七、总结&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上描述了携程如何构建表和字段级别的血缘关系，及在实际应用的场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着业务需求和数据的增长，数据的加工流程越来越复杂，构建一套数据血缘，可以轻松查询到数据之间的关系，进行表和字段级的血缘追溯，在元数据管理，数据治理，数据质量上承担重要一环。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;团队招聘信息&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们是携程集团的大数据平台研发团队，主要负责携程大数据平台的建设，包括但不限于Hadoop生态源码二次开发，任务调度，查询平台的开发，致力于为集团提供稳定、高效、易用的大数据存储和计算服务，实现高效的资源调度，打造服务于所有业务的数据平台产品、服务与应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;团队怀有前瞻的技术视野，积极拥抱开源建设，紧跟业界技术趋势，在这里有浓厚的技术氛围，你可以和团队成员一同参与开源建设，深入探索和交流技术原理，也有技术实施的广阔场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简历投递邮箱：tech@trip.com，邮件标题：【姓名】-【携程大数据平台】-【投递职位方向】。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;【推荐阅读】&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1fGBTdBzCmMCTkoXmLiaibIJSvoqeccpekiaDEqzicPRowuu3TSWDKlyBAY4YaA5uM6F21PzuictynI8Fg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; “携程技术”公众号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;  分享，交流，成长&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7fe3481621e6d3a75c0563e5cd415fad</guid>
<title>Java 内存管理：SRE 的必修课</title>
<link>https://toutiao.io/k/z2jhyw1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
        &lt;p&gt;在过去三年 SRE 的经历中，遇到过多起因为 JVM OOM 导致的线上故障。其中印象最深的一次排查经历：收到故障外呼后，几个大男人现场梳理业务链路，经过一番排查，最后发现根因竟然是部分网关应用动态加载数据库中的 groovy 脚本，导致 &lt;code&gt;Metaspace out of memory&lt;/code&gt; 报错，影响了部分 XX 商户的代扣业务，最终落了一个 P4 故障。&lt;/p&gt;
&lt;p&gt;但是之后很长一段时间内，都不太明白 Metaspace 是什么，为什么会耗尽？和 perm 区的关系是？不同线程本地变量和全局对象的关系？&lt;/p&gt;
&lt;p&gt;正好趁这次机会，系统性的整理和分享一下 ：）&lt;/p&gt;
&lt;a id=&quot;more&quot;/&gt;

&lt;h2 id=&quot;一、走近 -Java&quot;&gt;&lt;a href=&quot;# 一、走近 -Java&quot; class=&quot;headerlink&quot; title=&quot;一、走近 Java&quot;/&gt;一、走近 Java&lt;/h2&gt;&lt;p&gt;首先预热一下，简单解释几个常见名词：JVM -&amp;gt; JRE -&amp;gt; JDK &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JVM（Java Virtual Machine）：Java 虚拟机，它实现了一次编译到处运行，例如 HotSpot 等&lt;/li&gt;
&lt;li&gt;JRE（Java Runtime Environment），JRE 是支持 Java 程序运行的标准环境。包含 Java SE API 子集 / 虚拟机 &lt;/li&gt;
&lt;li&gt;JDK（Java Development Kit）：Java 程序开发的最小环境。包含 程序语言 / 虚拟机 / 基础类库等，例如 OpenJDK 等 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书中有一段总结挺有意思的，分享一下：&lt;em&gt;“Oracle 收购 Sun 是 Java 发展历史上一道明显的分界线。在 Sun 掌舵的前十几年里，Java 获得巨大成功，同时也渐渐显露出来语言演进的缓慢与社区决策的老朽；而在 Oracle 主导 Java 后，引起竞争的同时也带来新的活力，Java 发展的速度要显著高于 Sun 时代。Java 的未来是继续向前、再攀高峰，还是由盛转衰、锋芒挫缩，你我拭目以待”&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、自动内存管理&quot;&gt;&lt;a href=&quot;# 二、自动内存管理&quot; class=&quot;headerlink&quot; title=&quot;二、自动内存管理&quot;/&gt;二、自动内存管理 &lt;/h2&gt;&lt;p&gt; 进入正文！&lt;/p&gt;
&lt;h3 id=&quot;Java- 内存区域&quot;&gt;&lt;a href=&quot;#Java- 内存区域&quot; class=&quot;headerlink&quot; title=&quot;Java 内存区域&quot;/&gt;Java 内存区域 &lt;/h3&gt;&lt;p&gt; 网上很多文章因为 java 版本的问题，存在不同程度的过时。&lt;/p&gt;
&lt;p&gt;所以花了一点时间，尝试通过「堆」和「栈」两个视角，将 java8 的内存分布重新绘制一遍（如果有不对的地方辛苦帮忙指正）：&lt;br/&gt;&lt;img src=&quot;/images/loading/loading.svg&quot; data-original=&quot;/images/blog/2021-09-04-jvm-note/16307787626886.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;关键点说明&quot;&gt;&lt;a href=&quot;# 关键点说明&quot; class=&quot;headerlink&quot; title=&quot;关键点说明&quot;/&gt;关键点说明 &lt;/h3&gt;&lt;p&gt; 为了解决持久代内存溢出 &amp;amp; 不同虚拟机融合等目的，持久代（PermGen）在 1.8 以后被 Metaspace 取代。&lt;/p&gt;
&lt;p&gt;我个人理解最大不同在于：1.8 之前，持久代与 Heap &amp;amp; Stack 都归属 &lt;strong&gt; 虚拟机内存 &lt;/strong&gt;，而 Metaspace 侧使用的&lt;strong&gt; 本地内存 &lt;/strong&gt;（native memory），&lt;strong&gt; 默认不做限制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;既然没有限制，文章开头故障为什么还会发生呢？？&lt;/strong&gt;&lt;br/&gt;因为通常还是习惯设置 &lt;code&gt;-XX:MaxMetaspaceSize&lt;/code&gt; 参数。。所以如果代码编写不当，类占据的空间还是很可能超过指定的空间大小，造成&lt;code&gt;java.lang.OutOfMemoryError: Metaspace&lt;/code&gt; 异常 :(&lt;/p&gt;
&lt;h4 id=&quot;2- 关于栈帧（Stack-Frame）&quot;&gt;&lt;a href=&quot;#2- 关于栈帧（Stack-Frame）&quot; class=&quot;headerlink&quot; title=&quot;2. 关于栈帧（Stack Frame）&quot;/&gt;2. 关于栈帧（Stack Frame）&lt;/h4&gt;&lt;p&gt;程序运行本质上是方法的套娃调用，也就是不断入栈与出栈的过程。&lt;/p&gt;
&lt;p&gt;而每个栈帧（Stack Frame）中，本地变量（Local Variables）与 Heap 的关系如下：&lt;br/&gt;&lt;img src=&quot;/images/loading/loading.svg&quot; data-original=&quot;/images/blog/2021-09-04-jvm-note/16307786911033.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;3- 关于运行时常量池（Run-Time-Constant-Pool）&quot;&gt;&lt;a href=&quot;#3- 关于运行时常量池（Run-Time-Constant-Pool）&quot; class=&quot;headerlink&quot; title=&quot;3. 关于运行时常量池（Run-Time Constant Pool）&quot;/&gt;3. 关于运行时常量池（Run-Time Constant Pool）&lt;/h4&gt;&lt;h5 id=&quot;1）首先理解 -class- 文件的常量池（Constant-Pool）-amp- 符号应用&quot;&gt;&lt;a href=&quot;#1）首先理解 -class- 文件的常量池（Constant-Pool）-amp- 符号应用&quot; class=&quot;headerlink&quot; title=&quot;1）首先理解 class 文件的常量池（Constant Pool）&amp;amp; 符号应用&quot;/&gt;1）首先理解 class 文件的常量池（Constant Pool）&amp;amp; 符号应用 &lt;/h5&gt;&lt;p&gt; 参考下面的例子，通过 &lt;code&gt;javac&lt;/code&gt;  + &lt;code&gt;javap&lt;/code&gt;查看编译后的 &lt;code&gt;.class&lt;/code&gt; 文件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Scratch&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;methodA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;methodA()....&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;methodB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;methodB()....&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        methodA();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        num++;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. javac Scratch.java &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 源代码转化为字节码（byte code = 1111_1111），&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. javap -v Scratch.class&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The `javap` tool is used to get the information of any class or interface.&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;➜  test git:(master) ✗ javap -v Scratch      &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Warning: Binary file Scratch contains test.Scratch&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Classfile /Users/henry/IdeaProjects/Head-First-Design-Patterns/src/test/Scratch&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;  &lt;span class=&quot;title&quot;&gt;Last&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;modified&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Aug&lt;/span&gt; 15, 2021&lt;/span&gt;; size &lt;span class=&quot;number&quot;&gt;554&lt;/span&gt; bytes&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  MD5 checksum &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;dac5a22a5ccc66bfd64ee3185a1587e&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  Compiled from &lt;span class=&quot;string&quot;&gt;&quot;Scratch.java&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Scratch&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  minor version: 0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  major version: &lt;span class=&quot;number&quot;&gt;52&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  flags: ACC_PUBLIC, ACC_SUPER&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Constant pool:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   #1 = Methodref          #9.#20         // java/lang/Object.&quot;&amp;lt;init&amp;gt;&quot;:()V&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   #2 = Fieldref           #8.#21         // test/Scratch.num:I&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   #3 = Fieldref           #22.#23        // java/lang/System.out:Ljava/io/PrintStream;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   #4 = String             #24            // methodA()....&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   #5 = Methodref          #25.#26        // java/io/PrintStream.println:(Ljava/lang/String;)V&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   #6 = String             #27            // methodB()....&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   #7 = Methodref          #8.#28         // test/Scratch.methodA:()V&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   #8 = Class              #29            // test/Scratch&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   #9 = Class              #30            // java/lang/Object&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  #10 = Utf8               num&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  #11 = Utf8               I&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到 class 文件包含一段 &lt;code&gt;Constant pool&lt;/code&gt; 区域，用于存放编译期生成的各种字面量（ Literal ）和 符号引用（Symbolic References）。不难理解，在编译阶段，并不知道所引用类 / 方法的地址（实际地址），所以将 &lt;strong&gt; 符号引用 &lt;/strong&gt; 保存至变量池（Constant pool）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;其中第一列 &lt;code&gt;#1&lt;/code&gt;，&lt;code&gt;#2&lt;/code&gt; 等等代表 &lt;strong&gt; 符号引用&lt;/strong&gt;（symbolic references）&lt;/li&gt;
&lt;li&gt;methodB 调用 methodA 对应的指令是 &lt;code&gt;9: invokevirtual #36 // Method methodA:()V&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;2）所以 -Run-Time-Constant-Pool- 是什么？&quot;&gt;&lt;a href=&quot;#2）所以 -Run-Time-Constant-Pool- 是什么？&quot; class=&quot;headerlink&quot; title=&quot;2）所以 Run-Time Constant Pool 是什么？&quot;/&gt;2）所以 Run-Time Constant Pool 是什么？&lt;/h5&gt;&lt;p&gt;先来回顾 jvm 加载一个类时，会经历 &lt;strong&gt;加载 -&amp;gt; 连接(验证 | 准备 | 解析) -&amp;gt; 初始化&lt;/strong&gt; 三个阶段。&lt;/p&gt;
&lt;p&gt;首先在第一步 &lt;strong&gt;加载阶段&lt;/strong&gt;：虚拟机加载 Class 文件后，会在内存方法区中生成这个类的 java.lang.Class 对象，供外部访问。同时将上文常量池中的符号引用（字段 / 方法 / 类的引用）转移至 Run-Time Constant Pool 中。&lt;/p&gt;
&lt;p&gt;然后将对应的「符号引用」转化为「直接引用」（实际运行时内存布局中的入口地址），这个过程叫做“方法调用”，而它又分为以下两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;解析调用 &lt;/strong&gt;：在&lt;strong&gt; 连接 &lt;/strong&gt; 最后一步的 &lt;strong&gt; 解析 &lt;/strong&gt; 阶段，完成直接引用的转化。&lt;br/&gt;例如静态方法、私有方法、实例构造器、父类方法，以及被 final 修饰的实例方法，在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的，所以在类加载时就能完成直接引用的转化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分派调用&lt;/strong&gt;（Dispatch）：每一次运行期间确认直接引用 &lt;ol&gt;
&lt;li&gt;静态分派：重载（Oveload）- 根据静态类型决定重载的版本&lt;/li&gt;
&lt;li&gt;动态分派：重写（Override）- 根据对象的实际类型，选择重写的方法 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;3）总而言之&quot;&gt;&lt;a href=&quot;#3）总而言之&quot; class=&quot;headerlink&quot; title=&quot;3）总而言之&quot;/&gt;3）总而言之 &lt;/h5&gt;&lt;p&gt; 运行时常量池（Run-Time Constant Pool）保存的是 class 文件常量池构建的符号引用，同时包含翻译后真实内存地址的直接引用。&lt;/p&gt;
&lt;p&gt;p.s. 我们常说的 &lt;strong&gt;动态连接&lt;/strong&gt;（Dynamic Linking）：指的是在开头内存分布大图中，栈帧 （Stack Frame） 存在一个指向 Run-Time Constant Pool 的连接&lt;/p&gt;
&lt;h2 id=&quot;三、垃圾收集器与内存分配策略&quot;&gt;&lt;a href=&quot;# 三、垃圾收集器与内存分配策略&quot; class=&quot;headerlink&quot; title=&quot;三、垃圾收集器与内存分配策略&quot;/&gt;三、垃圾收集器与内存分配策略&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;对象是否存活？&lt;ul&gt;
&lt;li&gt;引用计数算法：引用为 0 的对象可以被当作垃圾收集（循环引用 &amp;amp; 线程安全等问题）&lt;/li&gt;
&lt;li&gt;可达性分析法：从 gc roots 开始，引用关系遍历对象图，能被遍历到的对象就判定为存活的，其余的对象判定为死亡。&lt;br/&gt;gc roots 是什么？&lt;br/&gt;例如全局引用（例如静态变量）&amp;amp; 执行的上下文（栈帧中的本地变量）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分代收集理论：&lt;ul&gt;
&lt;li&gt;对象初始化 -&amp;gt; &lt;strong&gt;Eden&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Eden 空间不足 -&amp;gt; &lt;strong&gt;Minor GC(YGC)&lt;/strong&gt; - 标记 + 复制&lt;ul&gt;
&lt;li&gt;（从 Eden&amp;amp;S0 复制到 S1 或 老年代，然后交换 S0 与 S1，同时年龄 +1）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;老年代空间不足 -&amp;gt; &lt;strong&gt;Major GC&lt;/strong&gt; - 标记 + 整理
&lt;/li&gt;
&lt;li&gt;heap 满了 -&amp;gt; &lt;strong&gt;Full GC&lt;/strong&gt; - metaspace &amp;amp; 整个 heap 进行回收&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于垃圾回收相关的知识网上遍布都是，就简单 copy 了一下自己的读书笔记，暂时不展开班门弄斧了。&lt;/p&gt;
&lt;h2 id=&quot;The-End&quot;&gt;&lt;a href=&quot;#The-End&quot; class=&quot;headerlink&quot; title=&quot;The End&quot;/&gt;The End&lt;/h2&gt;&lt;p&gt;java 小白历险记，文中如有错误请多包涵，欢迎指正交流。&lt;br/&gt;&lt;img src=&quot;/images/loading/loading.svg&quot; data-original=&quot;/images/blog/2021-09-04-jvm-note/3FB01AAE-67BF-4755-B6ED-0A301FFB3B36_1_105_c.jpeg&quot; alt=&quot;3FB01AAE-67BF-4755-B6ED-0A301FFB3B36_1_105_c&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;# 参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;/&gt;参考&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dedao.cn/eBook/qPKdG1m9B8MaveyJdxRzNnKYlqgVZ3k4Jlwo5pL7E4m1r26kQjXDAPObGkYgJ4pN&quot;&gt;《深入理解 JVM 虚拟机》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.yuque.com/wanghuaihoho/aw880k/zsgm3i&quot;&gt;《解析与分派》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/122&quot;&gt;JEP 122: Remove the Permanent Generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;

    &lt;/div&gt;

      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>