<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1d747fd1c9546c0ec9c26923840fb06b</guid>
<title>JVM 源码分析之一个 Java 进程究竟能创建多少线程</title>
<link>https://toutiao.io/k/bshy7j1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;src-views-article-detail-main-module__content--2qOBd markdown-body&quot;&gt;&lt;h1&gt;概述&lt;/h1&gt;
&lt;p&gt;虽然这篇文章的标题打着JVM源码分析的旗号，不过本文不仅仅从 JVM 源码角度来分析，更多的来自于 Linux Kernel 的源码分析，今天要说的是 JVM 里比较常见的一个问题。&lt;/p&gt;
&lt;p&gt;这个问题可能有几种表述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个Java进程到底能创建多少线程？&lt;/li&gt;
&lt;li&gt;到底有哪些因素决定了能创建多少线程？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.lang.OutOfMemoryError: unable to create new native thread&lt;/code&gt;的异常究竟是怎么回事&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过我这里先声明下可能不能完全百分百将各种因素都理出来，因为毕竟我不是做 Linux Kernel 开发的，还有不少细节没有注意到的，我将我能分析到的因素和大家分享一下，如果大家在平时工作中还碰到别的因素，欢迎在文章下面留言，让更多人参与进来讨论&lt;/p&gt;
&lt;h1&gt;从 JVM 说起&lt;/h1&gt;
&lt;p&gt;线程大家都熟悉，&lt;code&gt;new Thread().start()&lt;/code&gt;即会创建一个线程，这里我首先指出一点&lt;code&gt;new Thread()&lt;/code&gt;其实并不会创建一个真正的线程，只有在调用了 start 方法之后才会创建一个线程，这个大家分析下 Java 代码就知道了，Thread 的构造函数是纯 Java 代码，start 方法会调到一个 native 方法 start0 里，而 start0 其实就是&lt;code&gt;JVM_StartThread&lt;/code&gt;这个方法。&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/243773&quot; alt=&quot;1.jpg&quot;/&gt;&lt;br/&gt;
从上面代码里首先要大家关注下最后的那个 if 判断 &lt;code&gt;if (native_thread-&amp;gt;osthread() == NULL)&lt;/code&gt;，如果 osthread 为空，那将会抛出大家比较熟悉的 &lt;code&gt;unable to create new native thread OOM &lt;/code&gt;异常，因此 osthread 为空非常关键，后面会看到什么情况下osthread会为空。&lt;/p&gt;
&lt;p&gt;另外大家应该注意到了&lt;code&gt;native_thread = new JavaThread(&amp;amp;thread_entry, sz)&lt;/code&gt;，在这里才会真正创建一个线程。&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/243801&quot; alt=&quot;2.jpg&quot;/&gt;&lt;br/&gt;
上面代码里的&lt;code&gt;os::create_thread(this, thr_type, stack_sz)&lt;/code&gt;会通过&lt;code&gt;pthread_create&lt;/code&gt;来创建线程，而 Linux 下对应的实现如下：&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/243804&quot; alt=&quot;3.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a.perfma.net/img/243811&quot; alt=&quot;4.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a.perfma.net/img/243842&quot; alt=&quot;5.jpg&quot;/&gt;&lt;br/&gt;
如果在 &lt;code&gt;new OSThread &lt;/code&gt;的过程中就失败了，那显然 osthread 为 NULL，那再回到上面第一段代码，此时会抛出&lt;code&gt;java.lang.OutOfMemoryError: unable to create new native thread&lt;/code&gt;的异常，而什么情况下&lt;code&gt;new OSThread&lt;/code&gt;会失败，比如说内存不够了，而这里的内存其实是 C Heap，而非 Java Heap，由此可见从 JVM 的角度来说，影响线程创建的因素包括了 Xmx，MaxPermSize，MaxDirectMemorySize，ReservedCodeCacheSize 等，因为这些参数会影响剩余的内存&lt;/p&gt;
&lt;p&gt;另外注意到如果&lt;code&gt;pthread_create&lt;/code&gt;执行失败，那通过&lt;code&gt;thread-&amp;gt;set_osthread(NULL)&lt;/code&gt;会设置空值，这个时候 osthread 也为 NULL，因此也会抛出上面的 OOM 异常，导致创建线程失败，因此接下来要分析下 pthread_create 失败的因素。&lt;/p&gt;
&lt;h1&gt;glibc 中的 pthread_create&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;stack_size&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;pthread_create 的实现在 glibc 里，&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/243849&quot; alt=&quot;6.jpg&quot;/&gt;&lt;br/&gt;
上面我主要想说的一段代码是&lt;code&gt;int err = ALLOCATE_STACK (iattr, &amp;amp;pd)&lt;/code&gt;，顾名思义就是分配线程栈，简单来说就是根据 iattr 里指定的 stackSize，通过 mmap 分配一块内存出来给线程作为栈使。&lt;/p&gt;
&lt;p&gt;那我们来说说 stackSize，这个大家应该都明白，线程要执行，要有一些栈空间，试想一下，如果分配栈的时候内存不够了，是不是创建肯定失败？而 stackSize 在 JVM 下是可以通过 -Xss 指定的，当然如果没有指定也有默认的值，下面是 JDK6 之后(含)默认值的情况。&lt;/p&gt;
&lt;h1&gt;Linux Kernel 里的 clone&lt;/h1&gt;
&lt;p&gt;如果栈分配成功，那接下来就要创建线程了，大概逻辑如下&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/243864&quot; alt=&quot;7.jpg&quot;/&gt;&lt;br/&gt;
而create_thread其实是调用的系统调用clone&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/243887&quot; alt=&quot;8.jpg&quot;/&gt;&lt;br/&gt;
系统调用这块就切入到了 Linux Kernel 里&lt;/p&gt;
&lt;p&gt;clone 系统调用最终会调用&lt;code&gt;do_fork&lt;/code&gt;方法，接下来通过剖解这个方法来分析 Kernel 里还存在哪些因素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;max_user_processes&lt;/strong&gt;&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/243898&quot; alt=&quot;9.jpg&quot;/&gt;&lt;br/&gt;
先看这么一段，这里其实就是判断用户的进程数有多少，大家知道在linux下，进程和线程其数据结构都是一样的，因此这里说的进程数可以理解为轻量级线程数，而这个最大值是可以通过&lt;code&gt;ulimit -u&lt;/code&gt;可以查到的，所以如果当前用户起的线程数超过了这个限制，那肯定是不会创建线程成功的，可以通过&lt;code&gt;ulimit -u value&lt;/code&gt;来修改这个值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;max_map_count&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个过程中不乏有 mallo c的操作，底层是通过系统调用 brk 来实现的，或者上面提到的栈是通过 mmap 来分配的，不管是 malloc 还是 mmap，在底层都会有类似的判断。&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/243916&quot; alt=&quot;10.jpg&quot;/&gt;&lt;br/&gt;
如果进程被分配的内存段超过&lt;code&gt;sysctl_max_map_count&lt;/code&gt;就会失败，而这个值在 linux 下对应&lt;code&gt;/proc/sys/vm/max_map_count&lt;/code&gt;，默认值是 65530，可以通过修改上面的文件来改变这个阈值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;max_threads&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还存在&lt;code&gt;max_threads&lt;/code&gt;的限制，代码如下：&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/243944&quot; alt=&quot;11.jpg&quot;/&gt;&lt;br/&gt;
如果要修改或者查看可以通过&lt;code&gt;/proc/sys/kernel/threads-max&lt;/code&gt;来操作， 这个值是受到物理内存的限制，在&lt;code&gt;fork_init&lt;/code&gt;的时候就计算好了。&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/243967&quot; alt=&quot;12.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pid_max&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pid 也存在限制&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a.perfma.net/img/243986&quot; alt=&quot;13.jpg&quot;/&gt;&lt;br/&gt;
而&lt;code&gt;alloc_pid&lt;/code&gt;的定义如下&lt;br/&gt;
&lt;img src=&quot;https://a.perfma.net/img/244014&quot; alt=&quot;14.jpg&quot;/&gt;&lt;br/&gt;
在&lt;code&gt;alloc_pidmap&lt;/code&gt;中会判断&lt;code&gt;pid_max&lt;/code&gt;,而这个值的定义如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a.perfma.net/img/244036&quot; alt=&quot;15.jpg&quot;/&gt;&lt;br/&gt;
这个值可以通过 &lt;code&gt;/proc/sys/kernel/pid_max&lt;/code&gt; 来查看或者修改&lt;/p&gt;
&lt;h1&gt;总结&lt;/h1&gt;
&lt;p&gt;通过对 JVM，glibc，Linux kernel 的源码分析，我们暂时得出了一些影响线程创建的因素，包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JVM：Xmx，Xss，MaxPermSize，MaxDirectMemorySize，ReservedCodeCacheSize 等&lt;/li&gt;
&lt;li&gt;Kernel：max_user_processes，max_map_count，max_threads，pid_max 等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于对 kernel 的源码研读时间有限，不一定总结完整，大家可以补充。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cfb5b72cda11455f4b407e66815618c6</guid>
<title>月薪两万程序员应该知道的编程模型</title>
<link>https://toutiao.io/k/3kwp297</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;我承认这篇文章有标题党的嫌疑，看完这篇文章并不会让你月薪两万。如果想月薪两万甚至更多，并不是靠一篇文章，一本书，一个项目来实现的。&lt;/p&gt;&lt;p&gt;但是一个合格的程序员对响应式编程多少都应该有些了解，甚至有个清楚的认识。&lt;/p&gt;&lt;p&gt;希望这边文章能够让你对响应式编程有个基本的认识，以及响应式编程会带来哪些好处，解决哪些问题，或者说为什么响应式编程如此重要。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;响应式编程发展过程&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;响应式编程的概念是微软最开始提出并且在&lt;code&gt;.net&lt;/code&gt;平台上实现&lt;/span&gt;的&lt;span&gt;一个库。&lt;/span&gt;&lt;span&gt;后来这个模型被大家接受并认可，&lt;/span&gt;&lt;code&gt;ReactiveX&lt;/code&gt;&lt;span&gt; 就实现了很多其它语言对应的库，大名鼎鼎的&lt;/span&gt;&lt;code&gt;RXJava&lt;/code&gt;&lt;span&gt;就是针对&lt;/span&gt;&lt;code&gt;Java&lt;/code&gt;&lt;span&gt;语言实现的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;后来&lt;code&gt;ReactiveX&lt;/code&gt; 和 &lt;code&gt;Reactor&lt;/code&gt;共同制定了&lt;code&gt;Reactive Stream&lt;/code&gt;标准，&lt;code&gt;ReactiveX&lt;/code&gt;和&lt;code&gt;Reactor&lt;/code&gt;都是在这个标准下实现的框架。&lt;code&gt;Spring5&lt;/code&gt; 正式引入&lt;code&gt;Reactor&lt;/code&gt; 并基于该框架实现了&lt;code&gt;WEB-FLUX&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;此外&lt;code&gt;Java8&lt;/code&gt;引进了&lt;code&gt;Stream&lt;/code&gt;流以及&lt;code&gt;lamada&lt;/code&gt;表达式，&lt;code&gt;Java9&lt;/code&gt;引入了&lt;code&gt;Flow&lt;/code&gt;，也是对响应式编程的一种支持。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;什么是响应式编程&lt;/span&gt;&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;reactive programming is a declarative programming paradigm concerned with data streams and the propagation of change&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这是维基百科对响应式编程给出的定义。我对这个定义的评价是，懂的自然懂，不懂的还是不懂。&lt;/p&gt;&lt;p&gt;我提炼一下这个定义的关键词 &lt;strong&gt;声明式&lt;/strong&gt;，&lt;strong&gt;数据流&lt;/strong&gt;， &lt;strong&gt;传递变化（响应）&lt;/strong&gt;，我自己再给加一个&lt;strong&gt;异步&lt;/strong&gt;，因为实际上生产级别代码都是进行异步响应的，几乎很少进行同步响应。&lt;/p&gt;&lt;p&gt;在具体介绍响应式编程之前，先简单解释一下这几个关键词的含义。&lt;/p&gt;&lt;h5&gt;&lt;span&gt;声明式编程&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;声明式和指令式对应。指令式大家比较熟悉，就是依次写出完成某个任务的每条指令。&lt;/p&gt;&lt;p&gt;比如从一个苹果列表里，找出所有红色的苹果，指令式编程是这样做的。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;List&amp;lt;Apple&amp;gt; apples = new ArrayList&amp;lt;Apple&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;for (Apple apple : apples){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    if (apple.getColor() == &quot;red&quot;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(apple);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;声明式编程，只要写出你想要什么就OK了。&lt;/p&gt;&lt;p&gt;典型的声明式语言的就是&lt;code&gt;sql&lt;/code&gt;，对应上面的找红色苹果的需求，应该是这样的 &lt;code&gt;select * from apple where color = red&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;简单的讲，声明式编程就是聊天式编程，和计算机说你想要什么就OK了。&lt;/p&gt;&lt;h5&gt;&lt;span&gt;数据流&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;再说说数据流，其实数据流可以把它想象成水流，里面流淌的是数据,事件，信号等内容。如果大家对&lt;code&gt;Java8&lt;/code&gt;引入的&lt;code&gt;Stream&lt;/code&gt;流有一定了解的话，就会好理解。如果不了解的可以通过我&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMzE4MDY0Nw==&amp;amp;mid=2247483888&amp;amp;idx=1&amp;amp;sn=4bf8b2819070d6ad2466cd64579265b9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;这篇文章&lt;/a&gt;做个入门。&lt;/p&gt;&lt;h5&gt;&lt;span&gt;传递变化（响应）&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;传递变化(响应)，其实就是对响应二字的体现。所谓的响应就是你和某个人打了招呼，然后某人回应你了。某人对你的回应就是响应。&lt;/p&gt;&lt;p&gt;将上面的场景对应到面向对象的编程里面，就是观察者（订阅）模式。观察者对被观察者的某些行为做出对应的动作。&lt;/p&gt;&lt;p&gt;有些前端程序员对观察者模式可能比较陌生，那么大家比较熟悉的&lt;code&gt;Ajax&lt;/code&gt;回调函数也是响应式编程的一种体现，比如如下&lt;code&gt;JS&lt;/code&gt;代码&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$.ajax(&quot;example.action&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .done(function(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        console.log(&quot;success&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .fail(function(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        console.log(&quot;error&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .always(function(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        console.log(&quot;complete&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;这就是典型的异步回调，当请求成功的时候会有一种响应动作，请求失败的时候会有另一种响应动作。&lt;/p&gt;&lt;h5&gt;&lt;span&gt;异步&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;关于响应的方式，有同步响应和异步响应。实际应用中大部分都会采用异步响应。&lt;/p&gt;&lt;p&gt;同步：你给旅行社打电话预定一张机票，接线员接到你的电话后，开始查询航班信息，然后进行预订，这期间你一直拿着电话等他的结果。&lt;/p&gt;&lt;p&gt;异步：你给旅行社打电话预定一张机票，接线员接到电话后，记录下你要预定的航班信息，然后就挂掉电话。等他预定好之后，把预定结果打电话告诉你。这就是异步。&lt;/p&gt;&lt;p&gt;&lt;span&gt;很明显异步操作对你来说效率更高，因为你不用一&lt;/span&gt;直&lt;span&gt;等接线员的操作，你可以干其他事情。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;上面的场景也被很多人称为好莱坞规则。很多好演员去好莱坞报名拍戏，经纪公司会登记下演员的姓名，等有合适的机会的时候，经纪公司会给演员打电话，而不用演员一直在现场等，或者不断的给经纪公司打电话询问。&lt;code&gt;don&#x27;t call me I will call you&lt;/code&gt;。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;小试牛刀&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;其实介绍完上面那些东西，可能对响应式编程的理解还是模糊的。那么我们就以&lt;code&gt;Reactor&lt;/code&gt;框架为例子做一个简单的说明。毕竟程序员都喜欢&lt;code&gt;show me the code&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;上面提到了响应式编程的核心是基于观察者(订阅)模式的。观察者观察被观察者的行为，根据不同的行为做出不同的响应行为。&lt;/p&gt;&lt;p&gt;在&lt;code&gt;Reactor&lt;/code&gt;框架中用两个类来表示&lt;code&gt;Publisher&lt;/code&gt;，分别是&lt;code&gt;Flux&lt;/code&gt;和&lt;code&gt;Mono&lt;/code&gt;。&lt;code&gt;Flux&lt;/code&gt;表示&lt;code&gt;0...N&lt;/code&gt;个元素序列；&lt;code&gt;Mono&lt;/code&gt;表示零或一个元素序列。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Flux/Mono&lt;/code&gt;可以发布三类值 正常数值，异常信号，完成信号。三类信号不会同时存在，最多同时发布两类信号。&lt;/p&gt;&lt;p&gt;举个例子，我们假设让&lt;code&gt;Flux&lt;/code&gt;发射一个&lt;code&gt;1-6&lt;/code&gt;的&lt;code&gt;6&lt;/code&gt;个整数的数字流，&lt;code&gt;6&lt;/code&gt;个数字流发送完成后，会紧跟着发送一个完成信号，告诉订阅者或者观察者，数据流完成。同样的，如果发送正常数据的过程中出现异常，也可以发送一个异常信号给订阅者或者观察者，表示出现异常，将停止发送。异常信号和完成信号不能同时存在，因为出现任何一个该数据流都将结束。但是信号流里面可以即没有异常信号也没有完成信号，这表示该流是一个无限流。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Flux.just(1,2,3,4,5,6)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;上面这行代码表示发布者发布了&lt;code&gt;6&lt;/code&gt;条消息，下面我们订阅者&lt;code&gt;6&lt;/code&gt;条消息，也就是对这&lt;code&gt;6&lt;/code&gt;条消息进行响应。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Flux.just(1,2,3,4,5,6).subscribe(System.out::print)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;在控制台将会打印出&lt;code&gt;1，2，3，4，5，6&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;em&gt;注意，只有订阅的时候才会对事件或者元素进行响应。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;上面的例子，我们对元素或者事件没有做任何操作，仅仅是将它们原封不动的打印了出来，这显然不是我们想要的。接下来我们对元素做一些有意义的操作。&lt;/p&gt;&lt;h6&gt;&lt;span&gt;操作符&lt;/span&gt;&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;map&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对数据流里面的每个元素执行一次&lt;code&gt;map&lt;/code&gt;里面的函数。示意图如下&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.436435124508519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/jmjNkE9L9Qj3BBuIm0thug2dxWLt6G0rm5z1TMpTkh7kmH1Io82xzkWJ4gO1v1ichapYqzcthFPJKciajezMw0aQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/p&gt;&lt;p&gt;代码示例&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Flux.range(1,6).map(i -&amp;gt; i*i).subscribe(System.out::println);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;将会输出 &lt;code&gt;1 4 9 16 25 36&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;flatmap&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;该操作符逻辑上包含两个操作，第一个操作是&lt;code&gt;map&lt;/code&gt;操作，第二个是&lt;code&gt;flatten&lt;/code&gt;，&lt;code&gt;flatten&lt;/code&gt;类似于&lt;code&gt;merge&lt;/code&gt;操作，将对每个元素进行映射之后，合并成一个新的流。示意图如下。&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4364963503649635&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/jmjNkE9L9Qj3BBuIm0thug2dxWLt6G0r1cVemJ1wb5ELmUGkaPM6z2q4dCGWjY1HicK2E8fl0JChjeuEZM4dToA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;685&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p&gt;代码示例&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Flux.just(&quot;apple-1&quot;,&quot;pear-2&quot;).flatMap(i -&amp;gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Flux.fromArray(i.split(&quot;-&quot;))).subscribe(System.out::println);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上代码将会输出 &lt;code&gt;apple 1 pear 2&lt;/code&gt;；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;filter&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;过滤出符合条件的元素。&lt;/p&gt;&lt;p&gt;代码示例&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Flux.range(1,6).filter(i -&amp;gt; i&amp;gt;3).subscribe(System.out::println)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上代码将会输出 &lt;code&gt;4,5,6&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;zip&lt;/strong&gt; &lt;code&gt;zip&lt;/code&gt;英文单词有拉链的意思，在&lt;code&gt;Reactor&lt;/code&gt;中，表示将两个数据流合并到一起。示意图如下。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5100133511348465&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/jmjNkE9L9Qj3BBuIm0thug2dxWLt6G0rcChCXOVVlnvISRLPzzvJu41MUM8qscJn5glOc76ueg4jm9E44mXfTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;749&quot;/&gt;&lt;/p&gt;&lt;p&gt;示例代码&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Flux.zip(       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Flux.just(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Flux.just(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    (x,y) -&amp;gt; x + y        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ).subscribe(System.out::println);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上代码输出 &lt;code&gt;A1 B2 C3&lt;/code&gt;&lt;/p&gt;&lt;p&gt;还有很多操作符这里不一一介绍了，感兴趣的可以看官网。&lt;/p&gt;&lt;h5&gt;&lt;span&gt;线程调度&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;Reactor&lt;/code&gt;自然也是支持多线程的。而且多线程调度很简单。 &lt;code&gt;Reactor&lt;/code&gt;中创建线程是通过&lt;code&gt;Scheduler&lt;/code&gt;接口来表示的。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;//创建一个线程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Scheduler single = Schedulers.single();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;//创建等于CPU核心数量的线程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Scheduler parallel = Schedulers.parallel();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;//创建有界限的线程池，不传参数的默认创建10倍于CPU核心数量&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Scheduler elastic = Schedulers.boundedElastic();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;创建了线程，自然要分配线程，也就是线程调度。切换线程上下文主要通过&lt;code&gt;publishOn()&lt;/code&gt;和&lt;code&gt;subscribeOn()&lt;/code&gt;两个函数实现。&lt;/p&gt;&lt;p&gt;&lt;code&gt;publishOn()&lt;/code&gt;会影响调用该函数之后的操作。而&lt;code&gt;subscribeOn()&lt;/code&gt;会从源头影响整个操作链，无论&lt;code&gt;subscribeOn()&lt;/code&gt;调用发生在何处。&lt;/p&gt;&lt;p&gt;举个例子：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Flux.just(&quot;hello&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .map(s -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.out.println(&quot;[map] Thread name: &quot; + Thread.currentThread().getName());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return s.concat(&quot; world!&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //只改变publishOn()之后的操作的线程。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .publishOn(Schedulers.newSingle(&quot;thread-publishOn&quot;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .filter(s -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.out.println(&quot;[filter] Thread name: &quot; + Thread.currentThread().getName());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return s.startsWith(&quot;h&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //从源头变整个操作链的线程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .subscribeOn(Schedulers.newSingle(&quot;thread-subscribeOn&quot;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .subscribe(s -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.out.println(&quot;[subscribe] Thread name: &quot; + Thread.currentThread().getName());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.out.println(s);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;上面的代码输出结果是这样的&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[map] Thread name: thread-subscribeOn-1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[filter] Thread name: thread-publishOn-2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[subscribe] Thread name: thread-publishOn-2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;hello world!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;建议各位把上面这段代码复制到本地运行一下，同时可以把&lt;code&gt;subscribeOn()&lt;/code&gt;和&lt;code&gt;publishOn()&lt;/code&gt;分别注释掉，感受一下区别。&lt;/p&gt;&lt;p&gt;这两个函数经常用于有阻塞操作的时候，将阻塞操作调度到新的线程，以便提高效率。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;响应编程解决哪些问题&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;响应式编程可以帮助解决两类棘手问题，第一个问题就是大家熟悉的&lt;code&gt;callback hell&lt;/code&gt;，第二个问题就是同步阻塞效率低的问题。&lt;/p&gt;&lt;p&gt;先说第一个问题，这里拿&lt;code&gt;reactor&lt;/code&gt;官方的例子做个说明，找出某个用户最喜爱的五个爱好。通过&lt;code&gt;Callback&lt;/code&gt;的方式实现是这样的。&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7304347826086957&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/jmjNkE9L9Qj3BBuIm0thug2dxWLt6G0rnl38MpoB3DOiczz5kMZsvFVIndeic7T0dHtJTU4Lia7DctTf3ZJhYXyDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1035&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;基于回调的服务使用一个匿名 &lt;code&gt;Callback&lt;/code&gt; 作为参数。后者的两个方法分别在异步执行成功或异常时被调用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;获取到&lt;code&gt;Favorite ID&lt;/code&gt;的&lt;code&gt;list&lt;/code&gt;后调用第一个服务的回调方法&lt;code&gt;onSuccess&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 &lt;code&gt;list&lt;/code&gt; 为空， 调用 &lt;code&gt;suggestionService&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务 &lt;code&gt;suggestionService&lt;/code&gt; 传递 &lt;code&gt;List&amp;lt;Favorite&amp;gt;&lt;/code&gt; 给第二个回调。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;既然是处理 &lt;code&gt;UI&lt;/code&gt;，我们需要确保消费代码运行在 &lt;code&gt;UI&lt;/code&gt; 线程。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用 &lt;code&gt;Java 8 Stream&lt;/code&gt; 来限制建议数量为5，然后在 &lt;code&gt;UI&lt;/code&gt; 中显示。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在每一层，我们都以同样的方式处理错误：在一个 &lt;code&gt;popup&lt;/code&gt; 中显示错误信息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;回到&lt;code&gt;Favorite ID&lt;/code&gt;这一层，如果返回 &lt;code&gt;list&lt;/code&gt;，我们需要使用&lt;code&gt;favoriteService&lt;/code&gt; 来获取 &lt;code&gt;Favorite&lt;/code&gt;对象。由于只想要5个，因此使用 &lt;code&gt;stream&lt;/code&gt; 。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;再一次回调。这次对每个&lt;code&gt;ID&lt;/code&gt;，获取 &lt;code&gt;Favorite&lt;/code&gt; 对象在 &lt;code&gt;UI&lt;/code&gt; 线程中推送到前端显示。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;采用&lt;code&gt;Reactor&lt;/code&gt; 响应式编程代码大概应该是这个样子的&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.20206766917293234&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/jmjNkE9L9Qj3BBuIm0thug2dxWLt6G0rVspK0ndow4DakSp2bMnW8njp6LvbDErVHzlotG9XDPl9pZCsFFcbRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1064&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;我们获取到&lt;code&gt;Favorite ID&lt;/code&gt;的流。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我们 异步地转换 它们(ID)为 &lt;code&gt;Favorite&lt;/code&gt; 对象（使用&lt;code&gt;flatMap&lt;/code&gt;），现在我们有了&lt;code&gt;Favorite&lt;/code&gt;流。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一旦 &lt;code&gt;Favorite&lt;/code&gt; 为空，切换到 &lt;code&gt;suggestionService&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我们只关注流中的最多5个元素。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后，我们希望在 &lt;code&gt;UI&lt;/code&gt; 线程中进行处理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过描述对数据的最终处理（在 &lt;code&gt;UI&lt;/code&gt; 中显示）和对错误的处理（显示在 &lt;code&gt;popup&lt;/code&gt; 中）来触发（&lt;code&gt;subscribe&lt;/code&gt;）。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可以看到通过采用响应式编程，大大提高了代码的可读性，逻辑表达也更清晰。&lt;/p&gt;&lt;p&gt;再&lt;span&gt;来看第二个问题，同步阻塞通常被认为是低效率的。而异步非阻塞被认为是高效率的。而响应式编程，天生就是异步非阻塞的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;来举个简单例子说明一下，为什么同步阻塞是低效率的而异步非阻塞是高效率的。&lt;/p&gt;&lt;p&gt;同步和异步描述的是服务提供者提供服务的能力。当调用者向服务者发起请求后，服务提供者能够立即返回，并且在处理完后通过某种方式通知调用者，那么就是异步的。相反如果服务提供者只在处理完之后才返回，或者要求调用者主动去查询处理结果，就是同步。&lt;/p&gt;&lt;p&gt;阻塞和非阻塞描述的是调用者的状态。当调用者向服务提供者发起请求后，一直等待处理结果返回，否则无法执行后续操作，就是阻塞状态。如果调用后直接返回，继续执行后续操作就是非阻塞状态。&lt;/p&gt;&lt;p&gt;上面提到的打电话的例子就是异步非阻塞的例子，你给旅行社打电话，预定一张机票。旅行社接线员收到你的请求，就立刻给你回复(异步)，告诉你请求已经收到，稍后会通知你。然后你就挂掉电话，去处理其他事情(非阻塞)，等旅行社预定好之后，会立刻给你打电话通知你结果。&lt;/p&gt;&lt;p&gt;如果是同步阻塞的话，场景应该是这样的，你给旅行社打电话预定机票，接线员接听你的电话，然后处理订票请求，你在电话另一端一直在等待，什么都做不了。更可怕的是，其他旅客的订票请求一直打不进来，因为线路资源一直被你占用。这将是多么低效的处理方式。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;响应式编程虽好，但并不是包治百病，首先掌握起来就有一定难度，同时&lt;code&gt;Debug&lt;/code&gt;也需要有一定的相关经验。更主要的是，我们要根据业务场景来决定响应式编程是否能给我们带来真正的好处。记住软件工程里面，没有银弹。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMzE4MDY0Nw==&amp;amp;mid=2247484022&amp;amp;idx=1&amp;amp;sn=d3176ea73e48360b64c3f50e8fd622bf&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;1. Java并发编程那些事儿(十)——最后的总结&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMzE4MDY0Nw==&amp;amp;mid=2247484130&amp;amp;idx=1&amp;amp;sn=eb09dd99d1a8e892a3de73d898c04b0c&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;2. 程序员应该掌握的常用网络问题定位工具&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMzE4MDY0Nw==&amp;amp;mid=2247483893&amp;amp;idx=1&amp;amp;sn=85f6a2063048cc244aedde3172444e32&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;3. Awk这件上古神兵你会用了吗&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMzE4MDY0Nw==&amp;amp;mid=2247483852&amp;amp;idx=1&amp;amp;sn=6efb0db3d5dff639fae2aaec978c2160&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;4. 手把手教你搭建一套ELK日志搜索运维平台&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>94bca472fc6e9560ec086a28db666226</guid>
<title>领域驱动设计、可视化与遗留系统的微服务改造</title>
<link>https://toutiao.io/k/96b5kbd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneJFzQ1omEOHl586bTlGbLWg0XmicxriaVJSDCnfkrQM5rpmCszME2O2fw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneMlJgAKvpkibhbrbpqZ7G3QmicbGibMpYFzXfFhl7X9xbjCjGBG64BxddQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznehkKiaMAP6aRM5p2Ptr8KGKtUHBMO2jTQSlMoEsWN4icnx0p4TVO6LxWw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;任何人类的设计都会腐化，很遗憾&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneduWtic235C15VuUQmIwusvpuJ8vVyWvoZFK4RxtDmF5IFDQQ95v78pg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;软件尤其会...&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznep8cTfJXbZ6PwkOxrwNKhpeHMGyibCPiaxAJTiaeotXic47ypNk0eK0OeJw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;其实，对于单体系统，也可以按照上下文拆分领域。如果这样做了，再把代码级的领域拆分为部署视角的微服务，也不是那么难的事情了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneqichpLicMQkGTLibwHJrk4VbdqicM8h5grP5uzjAicO4NAa3xQuFcDGxvxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;微服务架构的九大特征&lt;/p&gt;&lt;p&gt;这里提一个思考题，这些特征哪些是必须的？没有就不能称之为微服务架构？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneyVtZGvmeU30xl9Zg0cMvoantA23AvbHDQw2cRTjN3rstibLgWu2IqDQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;可视化是有好处的，能帮我们什么？&lt;/p&gt;&lt;p&gt;一图胜千言&lt;/p&gt;&lt;p&gt;掌握系统业务&lt;/p&gt;&lt;p&gt;明确系统边界&lt;/p&gt;&lt;p&gt;小步改造系统&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneKWkibSJFVnsJ4aTIzJiaNT7kuMcBY8KvYSZj0OP8Friag0qdAPolKwLsg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneibLdniczl6APIPaQibvicq8ibOnHG0IiaBWtBDfComAMW3nm7EdMrERWkfOQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneFicic17cWUtLD8cfXBJfXRLcqnYhibAuwIVMMbct99DSKKk67KuUMMorQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneUGNs3e3ISX63rv1GpiccA2slCjqVI9BiapzIdh5icz7T7bxGIplXDGgRA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;用户画像和旅程&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneXdxBrCYrJf8BOIdGSyXziaMLbOdwibic4ticr2qBdiaLATU8wQZcgl8GmiaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneQY9jyZeOqojS6VjngGNNmFDzCucibcR9rdDmp7eyspuNa2rdMnJCQvQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneqCBeMrZDEumllzgWQELgwyx6SQHeZ2ZI0McUmVCQuJeczDKkL5MzlQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznezjdug839Seua7ibx0x5q5y3kjrliaXHGgqdqibgAUiawcbgQb98AJicK9TQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznedY60Nqk5PgDQiaao3dVRqr6REhNcibEdMfmlBphfGtQVBjYwYn83PhJA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneE7O1RcyoYEowvRPQCyoLEIoz3GiboWNibsVDv6kSRKibEcsArf57xvxvw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;事件风暴&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneOukaggAhkuvApQDt1IPl2riaMRR7Lichx8GIANps5FqWARnkmzDhHk0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneIrT2rIARiafJdNKpIibPhBAnhxq4FzXMGIES3wLIAqJrK3306Yf2Xpibg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneaJHGN5X5eWWK7twekpLicgputaK4IxpVgL6PHGdHoOt2PNAicGcJMAlQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznetBSb2sx1tfSVvQs56Phn028PfWKekuZKHicmIlbZFMEAOo1rZhr41Ng/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;聚合示例&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneYIFEyEbTibBefNOsxGTREz4hTon9oCE2HeTFgAkCXlMGjhylH1NHeyg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznerick6icDwKcKVpick5oJuN2P2RacWRjk2fk251kEzzYibpL0ASCalGbkmQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznehZqiaSkMQ0icDOUIj2ib6YLGeQ5p81O0KB0iapbCFicpbMBhUC7438r1TjA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneiahcIys3EEyazuhFKY9ibCPJNE8ib4fNuybJ7QTKia4F3wbRVib2NDNekCw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;服务画布&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneBXbiaibQ8xicglDRLeM7rOAiaIaVZ6CiaJAWKb1rcrvjZ09BSOnXymycEdg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazne6jb0TI3NyFPiag0GR9Izxn0nJb0MJNdkMKpVsicBTtuFflCXTUTnRVdw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznefYibPsgjyVq9HbybUFU8BqpF41zalqFvDkv5yJH49m3ibjBPibVXwl3ZA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneTslBbZ2gWaWZvX3gr3LLkv48hPUMZ8JeFVvXUt8vvqJuC1aCNEnAFQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;干遗留系统的几种模式&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneHEjX4wI7qgfX3la0OsFkULeWzKicvSJ01ecYOjicAvX4pW3qR4OTUA6w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneFKXqMNl86RraA9DVk2plW1CSjNI14L4tozUGD4uBcLybj0TYKKsggQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneJBRRfjoRK73eicjNQOctyXicBu9iavhS8DOsDibOC9kicsI8GOz1D4CNFdg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznecIJKYzrqhSicnUYMbPYHwI2qiaxNaEO19G41QPTCiaHLYJ7pIBymA2fpg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneZ05ibsUR9eDLVK3h9wke47AMZXAytXGibelFibiac2oibkGYZdC4p6c48cA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneNpGaPaEXmsOfqUQwzgSo9OUjrEQDBwibaeyV2HbD7ibvL4Q4BYALvaMQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneAMzt0vbMGM0R8mmNLRAs8X3Nhf5ozjWKQsONplK7XbG9MOnv6mPTbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneVD47RdI89Hiacy0DIU5iax1M7nnPzxorLI8RkaKA7Rz6UBPbI328bibwg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneyfROqluUX0uZWVOnqjTibyDkU66XDRvicDMgrqrrnWldhLzPJn6DHP2A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznejBYgPIhOkCVnEq0QAp5UCYCMHM4KzVfhGgHC81qDfegY2QmsMJcWQQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneR1o1ay3R3I8JLEarrl1Yehu8tYeX7UnUP7wdzSTzk60kAibB7LPhVnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneUr17lIKZv5xianmjbgHyv5OXK8rjypic66Kmmm6yQeRlXuh9PYnaoBibg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazne8UdL89PYxBjVFLWE3nysVvXs2lyU1zicoLxG83asFtyTI0icgibntsC5w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznekpOBrGOzsQFbPHeiacUjh8kBMlOicj8RTObxbGibEy4BlBKVQL3hM6QCQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznew202eG4iaMibXdpZzqjib7iaQAStwzCiaypl3jD7RwnbMZg9hLGltKqFRVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznevMkDKWnpRLWWP2o67zJVXy6TwGkL1Y4iau98hyP4Vo5Xp4nM6Wl348w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneLOKniapkBn5LI2h1Q8AvQ8L4bPPuMvkSguOBbibJVAtOQhzAAgniaFxmg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneY1YicZaZNOsmic85X7wia2YaeX4NupiaJsAf1WTicYNkiaJ7WUl5RaPrbfww/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznewNiasRMG1V5d7TichxOUqNLNHIMPjyY0hHfPoiaqiaHeajib1EhlBx73DJQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneicIA3knOPqQmnXAMrESzarg7aLkXYicwB3b3ib5HTYxdTmhRIzGWqHPRQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznelYotGQUr2A8ulJBr1sOTqstc7SZSwJ65IKuFHH1aCMcQIMOnPaWDTA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneDVBicT4HbTgj1ubibDjJTAaczRf7IENClpJI14xQH7yc7ictQvOVFvAcQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiaznewUWfl2tWibVJWnpLyQIkzrX3VHGL5sNXcRDzNnnmEomCbfaVEpm72jg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWHtF3lynK31Rl1IqQoOiazneic60N0pDl4XEcmnnInTELiarqSyQ43F6WwhE7uw9HicgXxSGIP2f0W2sw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; max-width: 100%; min-height: 1em; color: rgb(63, 63, 63); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); font-family: -webkit-standard; letter-spacing: 1px; line-height: 1.75em; text-align: left; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__224&quot;&gt;&lt;span data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;strong data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;span data-darkmode-bgcolor-16211578103366=&quot;rgb(255, 76, 0)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)|rgb(255, 76, 0)&quot; data-darkmode-color-16211578103366=&quot;rgb(255, 255, 255)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)|rgb(255, 255, 255)&quot;&gt;往期推荐&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;/&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;max-width: 100%; min-height: 1em; color: rgb(63, 63, 63); font-size: 16px; letter-spacing: 0.544px; text-align: center; white-space: normal; background-color: rgb(255, 255, 255); font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__228&quot;&gt;&lt;br data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;/&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;padding-right: 0em; padding-left: 0em; max-width: 100%; box-sizing: border-box; color: rgb(63, 63, 63); font-size: 16px; letter-spacing: 0.544px; text-align: center; white-space: normal; background-color: rgb(255, 255, 255); font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__229&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;section data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;section data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;section data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;section data-darkmode-bgcolor-16211578103366=&quot;rgb(95, 156, 239)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)|rgb(95, 156, 239)&quot; data-darkmode-color-16211578103366=&quot;rgb(255, 255, 255)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)|rgb(255, 255, 255)&quot;&gt;&lt;p data-darkmode-bgcolor-16211578103366=&quot;rgb(95, 156, 239)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)|rgb(95, 156, 239)&quot; data-darkmode-color-16211578103366=&quot;rgb(255, 255, 255)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16211578103366=&quot;rgb(95, 156, 239)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)|rgb(95, 156, 239)&quot; data-darkmode-color-16211578103366=&quot;rgb(255, 255, 255)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)|rgb(255, 255, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16211578103366=&quot;rgb(95, 156, 239)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)|rgb(95, 156, 239)&quot; data-darkmode-color-16211578103366=&quot;rgb(255, 255, 255)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)|rgb(255, 255, 255)&quot;&gt;技术琐话 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;p data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;br data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot; data-style=&quot;margin-top: -3.5em; margin-left: 8px; padding: 3.5em 10px 10px; max-width: 100%; font-family: -webkit-standard; font-size: 14px; letter-spacing: 1px; caret-color: rgb(51, 51, 51); border: 1px solid rgb(204, 204, 204); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__230&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;section data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;section data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;p data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;span data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(156, 156, 156)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)|rgb(74, 74, 74)&quot; data-style=&quot;max-width: 100%; color: rgb(74, 74, 74); font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif; white-space: pre-line; font-size: 14px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__231&quot;&gt;以分布式设计、架构、体系思想为基础，兼论研发相关的点点滴滴，不限于代码、质量体系和研发管理。本号由坐馆老司机技术团队维护。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;br data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;/&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16211578103366=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16211578103366=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16211578103366=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16211578103366=&quot;#fff|rgb(63, 63, 63)&quot;&gt;&lt;img class=&quot;js_darkmode__232&quot; data-copyright=&quot;0&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;188&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;188&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWEup6pcFSoqDWX2CnKtr2ibick4zKc3GbnGwOU6OfRibTYDbP4ueZgYDVIQX96Wic9KibEX710j1jsqWicg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;860&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>eb4a591ee785f2202878f51980b2490e</guid>
<title>源码解析：一文读懂 Kubelet</title>
<link>https://toutiao.io/k/797m815</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;本文主要介绍 kubelet 功能、核心组件，以及启动流程的源码分析，总结了 kubelet 的工作原理。&lt;/p&gt;&lt;h2&gt;kubelet 简介&lt;/h2&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.47406225059856344&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tMghG0NOfxc9bFCecPYYgtytbUGkU8sibYT2pqOlNEOFCpKtBd8MIEvRSkghaVRXWvsyiaXnrPHh8XgWibricgicl2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2506&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Kubernetes 的架构图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;从官方的架构图中很容易就能找到 &lt;code&gt;kubelet&lt;/code&gt;&lt;/p&gt;&lt;p&gt;执行 &lt;code&gt;kubelet -h&lt;/code&gt; 看到 kubelet 的功能介绍：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubelet 是每个 Node 节点上都运行的主要“节点代理”。使用如下的一个向 apiserver 注册 Node 节点：主机的 &lt;code&gt;hostname&lt;/code&gt;；覆盖 &lt;code&gt;host&lt;/code&gt; 的参数；或者云提供商指定的逻辑。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubelet 基于 &lt;code&gt;PodSpec&lt;/code&gt; 工作。&lt;code&gt;PodSpec&lt;/code&gt; 是用 &lt;code&gt;YAML&lt;/code&gt; 或者 &lt;code&gt;JSON&lt;/code&gt; 对象来描述 Pod。Kubelet 接受通过各种机制（主要是 apiserver）提供的一组 &lt;code&gt;PodSpec&lt;/code&gt;，并确保里面描述的容器良好运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;除了由 apiserver 提供 &lt;code&gt;PodSpec&lt;/code&gt;，还可以通过以下方式提供：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;文件&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;HTTP 端点&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;HTTP 服务器&lt;/span&gt;&lt;/p&gt;&lt;p&gt;kubelet 功能归纳一下就是上报 Node 节点信息，和管理（创建、销毁）Pod。功能看似简单，实际不然。每一个点拿出来都需要很大的篇幅来讲，比如 Node 节点的计算资源，除了传统的 CPU、内存、硬盘，还提供扩展来支持类似 GPU 等资源；Pod 不仅仅有容器，还有相关的网络、安全策略等。&lt;/p&gt;&lt;h2&gt;kubelet 架构&lt;/h2&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1.7272727272727273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tMghG0NOfxc9bFCecPYYgtytbUGkU8sibcEYqcP0SC2taia71NAr6Cd8TB4C10p0WSXdbhibY2ofbmprAKzJ6ic50g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1430&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;2021-06-14-21-55-08&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;重要组件&lt;/h3&gt;&lt;p&gt;kubelet 的架构由 N 多的组件组成，下面简单介绍下比较重要的几个：&lt;/p&gt;&lt;h4&gt;PLEG&lt;/h4&gt;&lt;p&gt;即 &lt;strong&gt;Pod Lifecycle Event Generator&lt;/strong&gt;，字面意思 Pod 生命周期事件（&lt;code&gt;ContainerStarted&lt;/code&gt;、&lt;code&gt;ContainerDied&lt;/code&gt;、&lt;code&gt;ContainerRemoved&lt;/code&gt;、&lt;code&gt;ContainerChanged&lt;/code&gt;）生成器。&lt;/p&gt;&lt;p&gt;其维护着 Pod 缓存；定期通过 &lt;code&gt;ContainerRuntime&lt;/code&gt; 获取 Pod 的信息，与缓存中的信息比较，生成如上的事件；将事件写入其维护的通道（channel）中。&lt;/p&gt;&lt;h4&gt;PodWorkers&lt;/h4&gt;&lt;p&gt;处理事件中 Pod 的同步。核心方法 &lt;code&gt;managePodLoop()&lt;/code&gt; 间接调用 &lt;code&gt;kubelet.syncPod()&lt;/code&gt; 完成 Pod 的同步：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;如果 Pod 正在被创建，记录其延迟&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;生成 Pod 的 API Status，即 &lt;code&gt;v1.PodStatus&lt;/code&gt;：从运行时的 status 转换成 api status&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;记录 Pod 从 &lt;code&gt;pending&lt;/code&gt; 到 &lt;code&gt;running&lt;/code&gt; 的耗时&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;在 &lt;code&gt;StatusManager&lt;/code&gt; 中更新 pod 的状态&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;杀掉不应该运行的 Pod&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;如果网络插件未就绪，只启动使用了主机网络（host network）的 Pod&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;如果 static pod 不存在，为其创建镜像（Mirror）Pod&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;为 Pod 创建文件系统目录：Pod 目录、卷目录、插件目录&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;使用 &lt;code&gt;VolumeManager&lt;/code&gt; 为 Pod 挂载卷&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;获取 image pull secrets&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;调用容器运行时（container runtime）的 &lt;code&gt;#SyncPod()&lt;/code&gt; 方法&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;PodManager&lt;/h4&gt;&lt;p&gt;存储 Pod 的期望状态，kubelet 服务的不同渠道的 Pod&lt;/p&gt;&lt;h4&gt;StatsProvider&lt;/h4&gt;&lt;p&gt;提供节点和容器的统计信息，有 &lt;code&gt;cAdvisor&lt;/code&gt; 和 &lt;code&gt;CRI&lt;/code&gt; 两种实现。&lt;/p&gt;&lt;h4&gt;ContainerRuntime&lt;/h4&gt;&lt;p&gt;顾名思义，容器运行时。与遵循 CRI 规范的高级容器运行时进行交互。&lt;/p&gt;&lt;h4&gt;Deps.PodConfig&lt;/h4&gt;&lt;p&gt;PodConfig 是一个配置多路复用器，它将许多 Pod 配置源合并成一个单一的一致结构，然后按顺序向监听器传递增量变更通知。&lt;/p&gt;&lt;p&gt;配置源有：文件、apiserver、HTTP&lt;/p&gt;&lt;h4&gt;&lt;code&gt;#syncLoop&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;接收来自 &lt;code&gt;PodConfig&lt;/code&gt; 的 Pod 变更通知、定时任务、&lt;code&gt;PLEG&lt;/code&gt; 的事件，以及 &lt;code&gt;ProbeManager&lt;/code&gt; 的事件，将 Pod 同步到&lt;strong&gt;期望状态&lt;/strong&gt;。&lt;/p&gt;&lt;h4&gt;PodAdmitHandlers&lt;/h4&gt;&lt;p&gt;Pod admission 过程中调用的一系列处理器，比如 eviction handler（节点内存有压力时，不会驱逐 QoS 设置为 &lt;code&gt;BestEffort&lt;/code&gt; 的 Pod）、shutdown admit handler（当节点关闭时，不处理 pod 的同步操作）等。&lt;/p&gt;&lt;h4&gt;OOMWatcher&lt;/h4&gt;&lt;p&gt;从系统日志中获取容器的 OOM 日志，将其封装成事件并记录。&lt;/p&gt;&lt;h4&gt;VolumeManger&lt;/h4&gt;&lt;p&gt;VolumeManager 运行一组异步循环，根据在此节点上调度的 pod 确定需要附加/挂载/卸载/分离哪些卷并执行操作。&lt;/p&gt;&lt;h4&gt;CertificateManager&lt;/h4&gt;&lt;p&gt;处理证书轮换。&lt;/p&gt;&lt;h4&gt;ProbeManager&lt;/h4&gt;&lt;p&gt;实际上包含了三种 Probe，提供 probe 结果缓存和通道。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;LivenessManager&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;ReadinessManager&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;StartupManager&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;EvictionManager&lt;/h4&gt;&lt;p&gt;监控 Node 节点的资源占用情况，根据驱逐规则驱逐 Pod 释放资源，缓解节点的压力。&lt;/p&gt;&lt;h4&gt;PluginManager&lt;/h4&gt;&lt;p&gt;PluginManager 运行一组异步循环，根据此节点确定哪些插件需要注册/取消注册并执行。如 CSI 驱动和设备管理器插件（Device Plugin）。&lt;/p&gt;&lt;h4&gt;CSI&lt;/h4&gt;&lt;p&gt;Container Storage Interface，由存储厂商实现的存储驱动。&lt;/p&gt;&lt;h4&gt;设备管理器插件（Device Plugin）&lt;/h4&gt;&lt;p&gt;Kubernetes 提供了一个 设备插件框架，你可以用它来将系统硬件资源发布到 Kubelet。&lt;/p&gt;&lt;p&gt;供应商可以实现设备插件，由你手动部署或作为 DaemonSet 来部署，而不必定制 Kubernetes 本身的代码。目标设备包括 GPU、高性能 NIC、FPGA、 InfiniBand 适配器以及其他类似的、可能需要特定于供应商的初始化和设置的计算资源。&lt;/p&gt;&lt;h2&gt;kubelet 的启动流程&lt;/h2&gt;&lt;p&gt;要分析 kubelet 的启动流程，可以从 kubelet 运行方式着手。找一个 Node 节点，很容易就能找到 kubelet 的进程。由于其是以 &lt;code&gt;systemd&lt;/code&gt; 的方式启动，也可以通过 &lt;code&gt;systemctl&lt;/code&gt; 查看其状态。&lt;/p&gt;&lt;h3&gt;kubelet 启动命令&lt;/h3&gt;&lt;p&gt;kubelet 的启动命令（minikube 环境）&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ ps &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;aux &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;&#x27;/kubelet&#x27;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;v grep&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;root        &lt;/span&gt;&lt;span&gt;4917&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;2.6&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;0.3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1857652&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;106152&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;Ssl&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;01&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;binaries&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;21.0&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubeconfig&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;runtime&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;docker &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;override&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1.21&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;kubeconfig&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;64.5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;或者&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ systemctl status kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;●&lt;/span&gt;&lt;span&gt; kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;service &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; kubelet&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;The&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Kubernetes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Node&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Agent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Loaded&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; loaded &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/usr/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;systemd&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; disabled&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; vendor preset&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; enabled&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;Drop&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;In&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;systemd&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;             &lt;/span&gt;&lt;span&gt;└─&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubeadm&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Active&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; active &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;running&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; since &lt;/span&gt;&lt;span&gt;Sun&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;06&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;01&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;&lt;span&gt; UTC&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11h&lt;/span&gt;&lt;span&gt; ago&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;Docs&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; http&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//kubernetes.io/docs/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;Main&lt;/span&gt;&lt;span&gt; PID&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4917&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;Tasks&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;limit&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;38314&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Memory&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;39.4M&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;CGroup&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/system.slice/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;             &lt;/span&gt;&lt;span&gt;└─&lt;/span&gt;&lt;span&gt;4917&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;binaries&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;21.0&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubeconfig&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;runtime&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;docker &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;override&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1.21&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;kubeconfig&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3&gt;源码分析&lt;/h3&gt;&lt;p&gt;从 &lt;code&gt;git@github.com:kubernetes/kubernetes.git&lt;/code&gt; 仓库获取代码，使用最新的 &lt;code&gt;release-1.21&lt;/code&gt; 分支。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;code&gt;cmd/kubelet/kubelet.go:35&lt;/code&gt; 的 &lt;code&gt;main&lt;/code&gt; 方法为程序入口。&lt;span&gt;&lt;span&gt;•&lt;/span&gt;调用 &lt;code&gt;NewKubeletCommand&lt;/code&gt; 方法，创建 command&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;执行 command&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;code&gt;cmd/kubelet/app/server.go:434&lt;/code&gt; 的 &lt;code&gt;Run&lt;/code&gt; 方法。&lt;span&gt;&lt;span&gt;•&lt;/span&gt;调用 &lt;code&gt;RunKubelet&lt;/code&gt; 方法。&lt;span&gt;&lt;span&gt;•&lt;/span&gt;调用 &lt;code&gt;createAndInitKubelet&lt;/code&gt; 方法，创建并初始化 kubelet&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;code&gt;pkg/kubelet/kubelet.go&lt;/code&gt; 的 &lt;code&gt;NewMainKubelet&lt;/code&gt; 方法，创建 kubelet的 各种组件。共十几个组件，见 kubelet 的构架。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;调用 &lt;code&gt;BirtyCry&lt;/code&gt; 方法：放出 &lt;code&gt;Starting&lt;/code&gt; 事件&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;调用 &lt;code&gt;StartGarbageCollection&lt;/code&gt; 方法，开启 &lt;code&gt;ContainerGC&lt;/code&gt; 和 &lt;code&gt;ImageGC&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;调用 &lt;code&gt;startKubelet&lt;/code&gt; 方法（大量使用 goroutine 和通道）&lt;span&gt;&lt;span&gt;•&lt;/span&gt;goroutine：&lt;code&gt;kubelet.Run()&lt;/code&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;初始化模块&lt;span&gt;&lt;span&gt;•&lt;/span&gt;metrics 相关&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;创建文件系统目录目录&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;创建容器日志目录&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;启动 &lt;code&gt;ImageGCManager&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;启动 &lt;code&gt;ServerCertificateManager&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;启动 &lt;code&gt;OOMWatcher&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;启动 &lt;code&gt;ResourceAnalyzer&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;goroutine：&lt;code&gt;VolumeManager.Run()&lt;/code&gt; 开始处理 Pod Volume 的卸载和挂载&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;goroutine：状态更新 &lt;code&gt;fastStatusUpdateOnce()&lt;/code&gt; （更新 Pod CIDR -&amp;gt; 更新 &lt;code&gt;ContainerRuntime&lt;/code&gt; 状态 -&amp;gt; 更新 Node 节点状态）&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;goroutine： &lt;code&gt;NodeLeaseController.Run()&lt;/code&gt; 更新节点租约&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;goroutine：&lt;code&gt;podKiller.PerformPodKillingWork&lt;/code&gt; 杀掉未被正确处理的 pod&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;code&gt;StatusManager.Start()&lt;/code&gt; 开始向 apiserver 更新 Pod 状态&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;code&gt;RuntimeClassManager.Start()&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;code&gt;PLEG.Start()&lt;/code&gt;：持续从 &lt;code&gt;ContainerRuntime&lt;/code&gt; 获取 Pod/容器的状态，并与 kubelet 本地 cache 中的比较，生成对应的 &lt;code&gt;Event&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;code&gt;syncLoop()&lt;/code&gt; 重点，&lt;strong&gt;&lt;span&gt;持续监控并处理来自文件、apiserver、http 的变更&lt;/span&gt;&lt;/strong&gt;。包括 Pod 的增加、更新、优雅删除、非优雅删除、调和。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;启动 server，暴露 &lt;code&gt;/healthz&lt;/code&gt; 端点&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;通知 &lt;code&gt;systemd&lt;/code&gt; &lt;code&gt;kuberlet&lt;/code&gt; 服务已经启动&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;kubelet 的工作原理&lt;/h2&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1.1472556894243642&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tMghG0NOfxc9bFCecPYYgtytbUGkU8sibHlibp9TZiciaYpWxtgSn7yYKYroReiacosyFDQG99NKeIuuVv7dSgdr5Ew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1494&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;来静态文件、apiserver 以及 HTTP 请求的 Pod 配置变更，被发送到 &lt;code&gt;kubelet.syncLoop&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;PLEG 会定期通过容器运行时获取节点上 Pod 的状态，与其缓存中的 Pod 信息进行比较，封装成事件，进入 PLEG 的通道&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;定期检查工作队列中的 Pod&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;ProbeManager 的通道中的 Pod&lt;/span&gt;&lt;span&gt;&lt;span&gt;5.&lt;/span&gt;以上 1~4，都会进入 &lt;code&gt;syncLoopIteration&lt;/code&gt;，并从对应的通道中获取到对应 Pod，将 Pod 的信息保存到 &lt;code&gt;PodManager&lt;/code&gt;；然后分发给 &lt;code&gt;PodWorker&lt;/code&gt;，完成一些列的同步工作。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;kubelet 启动流量就讲到这里，虽然复杂，还是有迹可循。只要了解了 kubelet 在 Kubernetes 中的定位及角色，就很容易理解其工作流量。&lt;/p&gt;&lt;p&gt;后面会再深入分析 Pod 创建及启动流程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>824463c15d63ff6edaadf7c3cb536a86</guid>
<title>面试侃集合：PriorityBlockingQueue 篇</title>
<link>https://toutiao.io/k/er7w0q0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试官：来了啊小伙子，以前经常有小菜鸟被我虐个两三轮就不敢来了，看你忍耐力还不错，以后应该挺能加班的样子。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：那可是，我卷起来真的是连我自己都害怕啊！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试官：那咱们今天就继续死磕队列，聊聊&lt;/strong&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;PriorityBlockingQueue&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;strong&gt;吧。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：没问题啊，&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;是一个支持优先级的无界阻塞队列，之前介绍的队列大多是&lt;code&gt;FIFO&lt;/code&gt;先进先出或&lt;code&gt;LIFO&lt;/code&gt;后进先出的，&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;不同，可以按照自然排序或自定义排序的顺序在队列中对元素进行排序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我还是先写一个例子吧，使用&lt;code&gt;offer&lt;/code&gt;方法向队列中添加5个随机数，然后使用&lt;code&gt;poll&lt;/code&gt;方法从队列中依次取出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;PriorityBlockingQueue&amp;lt;Integer&amp;gt; queue=&lt;span&gt;new&lt;/span&gt; PriorityBlockingQueue&amp;lt;Integer&amp;gt;(&lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;Random random = &lt;span&gt;new&lt;/span&gt; Random();&lt;br/&gt;System.out.println(&lt;span&gt;&quot;add:&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;5&lt;/span&gt;; i++) {&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; j = random.nextInt(&lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;    System.out.print(j+&lt;span&gt;&quot;  &quot;&lt;/span&gt;);&lt;br/&gt;    queue.offer(j);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;System.out.println(&lt;span&gt;&quot;\r\npoll:&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;5&lt;/span&gt;; i++) {&lt;br/&gt;    System.out.print(queue.poll()+&lt;span&gt;&quot;  &quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看运行结果，可以看到输出顺序与插入顺序是不同的，默认情况下最终会按照自然排序的顺序进行输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;add:&lt;br/&gt;68  34  40  31  44  &lt;br/&gt;poll:&lt;br/&gt;31  34  40  44  68&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;队列就像下面这个神奇的容器，不管你按照什么顺序往里塞数据，在取出的时候一定是按照排序完成后的顺序出队的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.28735632183908044&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicZ8kdOFb1hcC6zN4kx5y4md23Sx0bT95lskt4qcI26ZDY0nJ6HkuiaqbQf5GZ4lpyQZloK0Xdjz1mA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;870&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;试官：怎么感觉这功能有点鸡肋啊，很多情况下我不想用自然排序怎么办？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：一看你就没仔细听我前面讲的，除了自然排序外，也可以自定义排序顺序。如果我们想改变排序算法，也可以在构造器中传入一个&lt;code&gt;Comparator&lt;/code&gt;对象，像下面这么一改就可以变成降序排序了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;PriorityBlockingQueue queue=&lt;span&gt;new&lt;/span&gt; PriorityBlockingQueue&amp;lt;Integer&amp;gt;(&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;Integer&amp;gt;() {&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;compare&lt;/span&gt;(Integer o1, Integer o2) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; o2-o1;&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;试官：我就随口问一句你还真以为我不知道啊，说一下底层是怎么实现的吧？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：在讲底层的原理之前，就不得不先提一下&lt;strong&gt;二叉堆&lt;/strong&gt;的数据结构了。二叉堆是一种特殊的堆，它的结构和完全二叉树非常类似。如果父节点的值总小于子节点的值，那么它就是一个最小二叉堆，反之则是最大二叉堆，并且每个节点的左子树和右子树也是一个二叉堆。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以一个最小二叉堆为例：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7016574585635359&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicb9IibgHziaHbTy1GdYHnADDNfReg5uedERxnk7mXfd7QkzwVqnUGCvFsRgHN9uMuBtKhe9zIE5I9MA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;362&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个最小二叉堆保存在数组中的顺序是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[1,2,3,4,5,6,7,8,9]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据它的特性，可以轻松的计算出一个节点的父节点或子节点在数组中对应的位置。假设一个元素在数组中的下标是&lt;code&gt;t&lt;/code&gt;，那么父节点、左右子节点的下标计算公式如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;parent(t) = (t - 1) &amp;gt;&amp;gt;&amp;gt; 1 &lt;br/&gt;left(t) = t &amp;lt;&amp;lt; 1 + 1&lt;br/&gt;right(t) = t &amp;lt;&amp;lt; 1 + 2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上面的二叉堆中的元素6为例，它在数组中的下标是5，可以计算出它的父节点下标为2，对应元素为3：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;parent(5) = 100 &amp;gt;&amp;gt;&amp;gt; 1 = 2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要计算元素4的左右子节点的话，它的下标是3，计算出的子节点坐标分别为7,8，对应的元素为8,9：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;left(3) = 11 &amp;lt;&amp;lt; 1 + 1 = 7&lt;br/&gt;right(3) = 11 &amp;lt;&amp;lt; 1 + 2 = 8&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上面计算元素的数组位置过程中使用了左移右移操作，是不是感觉非常酷炫？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;官：行了别贫了，铺垫了半点，赶紧说队列的底层原理。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：别急，下面就讲了，在&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;中，关键的属性有下面这些：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; Object[] queue;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; Comparator&amp;lt;? &lt;span&gt;super&lt;/span&gt; E&amp;gt; comparator;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ReentrantLock lock;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Condition notEmpty;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们也说了，二叉堆可以用数组的形式存储，所以队列的底层仍然是使用数组来存放元素的。在无参构造函数中，队列的初始容量是11，&lt;code&gt;comparator&lt;/code&gt;为空，也就是使用元素自身的&lt;code&gt;compareTo&lt;/code&gt;方法来进行比较排序。和&lt;code&gt;ArrayBlockingQueue&lt;/code&gt;类似，底层通过&lt;code&gt;ReentrantLock&lt;/code&gt;实现线程间的并发控制, 并使用&lt;code&gt;Condition&lt;/code&gt;实现线程的等待及唤醒。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面&lt;/strong&gt;&lt;strong&gt;试官：这么一看，属性和&lt;/strong&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;ArrayBlockingQueue&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;strong&gt;还真是&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;基本差不多啊，那结构就介绍到这吧，说重点，元素是怎么按照排序方法插入的？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：我们先对&lt;code&gt;offer&lt;/code&gt;方法的执行流程进行分析，如果队列中元素未满，且在默认情况下&lt;code&gt;comparator&lt;/code&gt;为空时，按照自然顺序排序，会执行&lt;code&gt;siftUpComparable&lt;/code&gt;方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;siftUpComparable&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; k, T x, Object[] array) &lt;/span&gt;{&lt;br/&gt;    Comparable&amp;lt;? &lt;span&gt;super&lt;/span&gt; T&amp;gt; key = (Comparable&amp;lt;? &lt;span&gt;super&lt;/span&gt; T&amp;gt;) x;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; (k &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; parent = (k - &lt;span&gt;1&lt;/span&gt;) &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        Object e = array[parent];&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (key.compareTo((T) e) &amp;gt;= &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        array[k] = e;&lt;br/&gt;        k = parent;&lt;br/&gt;    }&lt;br/&gt;    array[k] = key;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果队列为空，那么元素直接入队，如果队列中已经有元素了，那么就需要判断插入的位置了。首先获取父节点的坐标，将自己的值和父节点进行比较，可以分为两种情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果新节点的值比父节点大，那么说明当前父节点就是较小的元素，不需要进行调整，直接将元素添加到队尾&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果新节点的值比父节点小的话，那么就要进行&lt;strong&gt;上浮&lt;/strong&gt;操作。先将父节点的值复制到子节点的位置，下一次将新节点的值与父节点的父节点进行比较。这一上浮过程会持续进行，直到新节点的值比父节点大，或新节点上浮成为根节点为止&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是以上面数据插入过程为例，来演示二叉树的构建过程：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46511627906976744&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicb49MzNOHD7sib2DJm7YBys5JiakCm1fN4ibSEGv1zklicRiaXz90MlPgDFgq6rics74lrpwAPwmBOrNuYQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;860&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在将新元素添加到队列中后，队列中元素的计数加1，并且去唤醒阻塞在&lt;code&gt;notEmpty&lt;/code&gt;上的等待线程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;试官：那么如果不是自然排序的时候，逻辑会发生改变吗？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：如果&lt;code&gt;comparator&lt;/code&gt;不为空的话，逻辑与上面的方法基本一致，唯一不同的是在进行比较时调用的是传入的自定义&lt;code&gt;comparator&lt;/code&gt;的&lt;code&gt;compare&lt;/code&gt;方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面&lt;/strong&gt;&lt;strong&gt;试官：刚才你在讲&lt;/strong&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;offer&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;strong&gt;方法的时候，强调了&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;队列中元素未满&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;这一个条件，开始的时候不是说&lt;/strong&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;PriorityBlockingQueue&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;strong&gt;是一个无界队列么，那为什么还要加这一个条件？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：虽然说它是一个无界队列，但其实队列的长度上限是&lt;code&gt;Integer.MAX_VALUE - 8&lt;/code&gt;，并且底层是使用的数组保存元素，在初始化数组的时候也会指定一个长度，如果超过这个长度的话，那么就需要进行扩容，执行&lt;code&gt;tryGrow&lt;/code&gt;方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;tryGrow&lt;/span&gt;(Object[] array, &lt;span&gt;int&lt;/span&gt; oldCap) &lt;/span&gt;{&lt;br/&gt;    lock.unlock(); &lt;span&gt;// 释放锁&lt;/span&gt;&lt;br/&gt;    Object[] newArray = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (allocationSpinLock == &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp;&lt;br/&gt;        &lt;span&gt;//cas 加锁&lt;/span&gt;&lt;br/&gt;        UNSAFE.compareAndSwapInt(&lt;span&gt;this&lt;/span&gt;, allocationSpinLockOffset,&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;)) {&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;//计算扩容后的容量&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; newCap = oldCap + ((oldCap &amp;lt; &lt;span&gt;64&lt;/span&gt;) ?&lt;br/&gt;                                   (oldCap + &lt;span&gt;2&lt;/span&gt;) : &lt;span&gt;// grow faster if small&lt;/span&gt;&lt;br/&gt;                                   (oldCap &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;));&lt;br/&gt;            &lt;span&gt;// 避免超出上限&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (newCap - MAX_ARRAY_SIZE &amp;gt; &lt;span&gt;0&lt;/span&gt;) {    &lt;br/&gt;                &lt;span&gt;int&lt;/span&gt; minCap = oldCap + &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (minCap &amp;lt; &lt;span&gt;0&lt;/span&gt; || minCap &amp;gt; MAX_ARRAY_SIZE)&lt;br/&gt;                    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; OutOfMemoryError();&lt;br/&gt;                newCap = MAX_ARRAY_SIZE;&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (newCap &amp;gt; oldCap &amp;amp;&amp;amp; queue == array)&lt;br/&gt;                &lt;span&gt;//申请新的数组&lt;/span&gt;&lt;br/&gt;                newArray = &lt;span&gt;new&lt;/span&gt; Object[newCap];&lt;br/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;//释放cas锁标志位&lt;/span&gt;&lt;br/&gt;            allocationSpinLock = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//其他线程正在扩容，让出CPU&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (newArray == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;// back off if another thread is allocating&lt;/span&gt;&lt;br/&gt;        Thread.yield();&lt;br/&gt;    &lt;span&gt;//加独占式锁，拷贝原先队列中的数据&lt;/span&gt;&lt;br/&gt;    lock.lock();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (newArray != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; queue == array) {&lt;br/&gt;        queue = newArray;&lt;br/&gt;        System.arraycopy(array, &lt;span&gt;0&lt;/span&gt;, newArray, &lt;span&gt;0&lt;/span&gt;, oldCap);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先说锁的操作，在进行扩容前，会先释放独占式的&lt;code&gt;lock&lt;/code&gt;，因为扩容操作需要一定的时间，如果在这段时间内还持有锁的话会降低队列的吞吐量。因此这里使用&lt;code&gt;cas&lt;/code&gt;的方式保证扩容这一操作本身是排他性的，即只有一个线程来实现扩容。在完成新数组的申请后，会释放&lt;code&gt;cas&lt;/code&gt;锁的标志位，并在拷贝队列中原有数据到新数组前，再次加独占式锁&lt;code&gt;lock&lt;/code&gt;，保证线程间的数据安全。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于扩容操作也很简单，假设当前数组长度为&lt;code&gt;n&lt;/code&gt;，如果小于64的话那么数组长度扩为&lt;code&gt;2n+2&lt;/code&gt;，如果大于64则扩为&lt;code&gt;1.5n&lt;/code&gt;，并且扩容后的数组不能超过上面说的上限值。申请完成新的数组空间后，使用&lt;code&gt;native&lt;/code&gt;方法实现数据的拷贝。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设初始长度为5，当有新元素要入队时，就需要进行扩容，如图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.28865979381443296&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicZ8kdOFb1hcC6zN4kx5y4md9vCHJsNsoxxsJ8agoSSIaicictmqf52nUTXqJbZl1melkoibePRicEtodw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;970&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;试官：ok，讲的还不赖，该说出队的方法了吧？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：嗯，有了前面的基础，出队过程理解起来也非常简单，还是以自然排序为例，看一下&lt;code&gt;dequeue&lt;/code&gt;方法（省略了部分不重要的代码）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; E &lt;span&gt;dequeue&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; n = size - &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;    Object[] array = queue;&lt;br/&gt;    E result = (E) array[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;    E x = (E) array[n];&lt;br/&gt;    array[n] = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt; &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;    siftDownComparable(&lt;span&gt;0&lt;/span&gt;, x, array, n);&lt;br/&gt; &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;    size = n;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; result;    &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果队列为空，&lt;code&gt;dequeue&lt;/code&gt;方法会直接返回&lt;code&gt;null&lt;/code&gt;，否则返回数组中的第一个元素。在将队尾元素保存后，清除队尾节点，然后调用&lt;code&gt;siftDownComparable&lt;/code&gt;方法，调整二叉堆的结构，使其成为一个新的最小二叉堆：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;siftDownComparable&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; k, T x, Object[] array,&lt;span&gt;int&lt;/span&gt; n) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (n &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        Comparable&amp;lt;? &lt;span&gt;super&lt;/span&gt; T&amp;gt; key = (Comparable&amp;lt;? &lt;span&gt;super&lt;/span&gt; T&amp;gt;)x;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; half = n &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;;           &lt;span&gt;// loop while a non-leaf&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (k &amp;lt; half) {&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; child = (k &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;// assume left child is least&lt;/span&gt;&lt;br/&gt;            Object c = array[child];&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; right = child + &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (right &amp;lt; n &amp;amp;&amp;amp;&lt;br/&gt;                ((Comparable&amp;lt;? &lt;span&gt;super&lt;/span&gt; T&amp;gt;) c).compareTo((T) array[right]) &amp;gt; &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;                c = array[child = right];&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (key.compareTo((T) c) &amp;lt;= &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;                &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            array[k] = c;&lt;br/&gt;            k = child;&lt;br/&gt;        }&lt;br/&gt;        array[k] = key;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先解释一下&lt;code&gt;half&lt;/code&gt;的作用，它用来寻找队列的中间节点，所有&lt;strong&gt;非叶子节点&lt;/strong&gt;的坐标都不会超过这个&lt;code&gt;half&lt;/code&gt;值。分别以树中含有奇数个节点和偶数个节点为例：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.38978829389788294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicb9IibgHziaHbTy1GdYHnADDN3nWtlsDzhXfibwsWicRuHSuwER8mriaS1FGmo8xib8LlhgaJc06lDkwmHQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;803&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[n=9]  1001 &amp;gt;&amp;gt;&amp;gt; 1 =100 =4&lt;br/&gt;[n=8]  1000 &amp;gt;&amp;gt;&amp;gt; 1 =100 =4&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，奇数和偶数的情况下计算出的&lt;code&gt;half&lt;/code&gt;值都是4，即非叶子节点的下标不会超过4，对应上图中的元素为5。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;官：计算二叉树最后非叶子节点坐标这点知识，大一学过数据结构的新生都知道，赶紧说正题！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：着什么急啊，前面我们也说了，在将堆顶元素取出后，堆顶位置的元素出现空缺，需要调整堆结构使二叉堆的结构特性保持不变。这时候比较简单的方法就是将尾结点直接填充到堆顶，然后从堆顶开始调整结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此在代码中，每次执行堆顶节点的出队后，都将尾节点取出，然后从根节点开始向下比较，这一过程可以称为&lt;strong&gt;下沉&lt;/strong&gt;。下沉过程从根节点开始，首先获取左右子节点的坐标，并取出存储的元素值较小的那个，和&lt;code&gt;key&lt;/code&gt;进行比较：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果&lt;code&gt;key&lt;/code&gt;比左右节点都要小，那么说明找到了位置，比较结束，直接使用它替换父节点即可&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;否则的话，调整二叉堆结构，将较小的子节点上浮，使用它替换父节点。然后将用于比较的父节点坐标&lt;code&gt;k&lt;/code&gt;下移调整为较小子节点，准备进行下一次的比较&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;别看我白话这么一大段，估计你还是不明白，给你画个图吧，以上面的队列执行一次&lt;code&gt;poll&lt;/code&gt;方法为例：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46511627906976744&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicb9IibgHziaHbTy1GdYHnADDN52oOYibic4fvN4LJHrGwZ77vSA1aRfEe5AzMTvFicAjXrrGOHnmYDA8Pg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;860&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面的操作也是以此类推，分析到这出队操作也就结束了，&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;也没什么其他好讲的了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;官：我发现你现在开始偷懒了，前面的面试里你还分一下阻塞和非阻塞方法，现在不说一下这两种方式的区别就想蒙混过关了？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：嗨，在&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;里阻塞和非阻塞的区别其实并不大，首先因为它是一个无界的队列，因此添加元素的操作是不会被阻塞的，如果看一下源码，你就会发现其他的添加方法&lt;code&gt;add&lt;/code&gt;、&lt;code&gt;put&lt;/code&gt;也是直接调用的&lt;code&gt;offer&lt;/code&gt;方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而取出元素操作会受限制于队列是否为空，因此可能会发生阻塞，阻塞方法&lt;code&gt;take&lt;/code&gt;和非阻塞的&lt;code&gt;poll&lt;/code&gt;会稍有不同，如果出现队列为空的情况，&lt;code&gt;poll&lt;/code&gt;会直接返回&lt;code&gt;null&lt;/code&gt;，而&lt;code&gt;take&lt;/code&gt;会将线程在&lt;code&gt;notEmpty&lt;/code&gt;上进行阻塞，等待队列中被添加元素后唤醒。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;官：嗯，优先级队列我们也聊的差不多了，反正都聊了这么久的队列了，不介意我们把剩余的几个也说完吧？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：没问题啊，毕竟我能有什么选择呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0879120879120878&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicb9IibgHziaHbTy1GdYHnADDNU2etlBbq0CwJtlguyVRVZEJsSh9MXhsiaZypKibtT4pNBlRUsUo3phjQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;182&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>