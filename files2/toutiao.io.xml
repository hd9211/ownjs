<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6c7354be1671cbf92b65ca027ded182f</guid>
<title>数据智能的未来，是不提大数据但其无所不在的时代</title>
<link>https://toutiao.io/k/4yeshi4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4124860646599777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCvEco375K13UdJ0uLAfOz4341Nacican7659BxxII4YhRoP6JpYPmoaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1794&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;回首过去十年，我们见证了大数据从概念诞生到行业落地，逐渐发展到基于数据中台驱动决策的数据智能时代。作为后互联网时代的产物，数据智能必将是未来很长一个发展阶段的核心所在。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;每日互动（个推）作为数据智能行业的代表企业之一，于今年迎来了第一个十年。在这十年间，个推以消息推送起家，借助技术力量拓宽以数据智能为核心的业务范畴，现已成长为一家在A股上市的数据智能企业。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但“数据智能”这个词，对于大众来说仍然相对比较陌生。&lt;strong&gt;&lt;span&gt;数据行业资深从业者如何定义“数据智能”？过去的十年间，个推经历了怎么样的发展历程？即将到来的“数据智能”新十年，个推又将以什么样的角色参与当中？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在个推十周年之际，个推 CTO 叶新江针对上述疑问，与 SegmentFault 思否展开了一次对话。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;40&quot; data-cropselx2=&quot;372&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;294&quot; data-ratio=&quot;0.7125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YC2kunpxjNEjJW3T9SqHH1Fmb8rqKRH8GgogPxpHsIGSyicBMZcCMoib9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;320&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;何谓“数据智能”？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;随着移动互联网时代的到来，互联网内容传播和展现形式发生了巨大的变化，也让数据的量级和形态发生了改变，数据服务也随之发生了转变。传统的数据服务基本只针对于数据本身，而数据智能作为一种由数据、算力和算法等驱动的技术手段，具备着赋能企业进行管理和决策的能力。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q1、数据智能是今年非常热门的一个话题，能否谈谈对于「数据智能」和「数据中台」的定义与理解？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前数据经济在国家层面是一个非常重要的发展方向，但同时也延伸出了一个亟待解决的问题 —— &lt;strong&gt;&lt;span&gt;如何把各个行业的数据作为生产要素，通过数据治理发挥出更进一步的作用。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;针对看不见摸不着的数据，需要有一个东西能进行有感管理，数据中台就是一种用来进行数据治理的产品或者平台，而数据智能则属于一个更为广义的范畴，它是以数据作为生产资料，通过结合大规模数据处理、数据挖掘、机器学习、人机交互、可视化、云计算等多种技术，从大量的数据中提炼、发掘、获取知识，为人们在制定决策时提供有效的支持，减少或者消除不确定性的解决方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这两个词看起来很接近，但其实是不同维度的。以我们公司来讲，数据中台更多的是一个产品，体现了我们公司的数据能力；而数据智能则包含更多技术，融合了更多的行业知识，中台是其中一个很重要的工具。打一个形象的比喻，数据中台或者平台是一个电脑的操作系统，而数据智能则是结合业务，使用这个电脑，利用多种技术进行APP开发，并且不断进行优化的过程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q2、您认为数据中台的「行业壁垒」和「技术壁垒」分别是什么？个推作为一个成功上市的专业数据智能服务公司，自身在这个领域内具备的最大优势是什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前市面上有很多数据中台类的产品，据我们观察，其中大部分的重点仍主要聚焦于数据治理的能力，但这可能只是数据中台的“第一步”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于数据中台产品来讲，技术壁垒可能并不是很高。&lt;strong&gt;&lt;span&gt;中台会应用到的技术，虽然有些功能可以通过直接使用开源产品来实现，但也有不少标准或者要求，比如安全性、实时性、可视化能力等，需要专业的技术来定制实现。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然在数据中台层面，采用的技术架构不同、产品设计的理念不同也是可以有差异的，譬如是否容易使用、容易理解、对资源要求是否经济等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果希望通过数据中台中来解决业务问题，实现降本增效或者发现新的业务模式，这就不是数据治理能解决的问题，需要有对行业的深度理解，也就是所谓的行业壁垒。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个推和其他大数据公司的差别，就体现在如何挖掘数据价值的层面。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推的第一款产品是消息推送服务，这是一项跟数据紧密相关的业务。为了支撑这项业务的进行，实现消息推送在海量数据量下的快速响应，个推一直在尝试为企业内部打造一个业务 + 数据平台的协同闭环。这也为之后公司推出数据服务产品打下了很好的基础。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5650429799426934&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YC2YWCVB0D6gv8Qx9lNB0Xmg21iaxf55YxznryV8sA1uQD5vpwof4q4Lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1745&quot;/&gt;&lt;/p&gt;&lt;p&gt;在数据服务层面，个推既是服务的提供者也是使用者，这是我们在这个领域内最大的优势。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q3、数据服务领域是否有一套标准化的判定体系？如何评定服务能力与技术水平的高低？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据服务领域暂时还没有一套国际或者国家权威机构提出的行业标准。&lt;strong&gt;&lt;span&gt;究其原因，是因为数据服务在不同的行业间有着很大的差别，与一般的技术体系相比，具备更强的服务属性。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于客户来说，挑选数据服务的时候会有几个考量的维度：&lt;/p&gt;&lt;p&gt;● 平台是否可以快速部署；&lt;/p&gt;&lt;p&gt;●  部署所耗费的资源是否合理；&lt;/p&gt;&lt;p&gt;●  能否借助数据服务快速实现业务提升；&lt;strong&gt;&lt;span&gt;譬如是否能快速开发出业务的新需求，是否能很好地完成内部各个角色之间的协同。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这三项标准会是客户选择服务时的决策依据。但在选择完之后，服务商应该如何完成、如何实现客户提出的需求，因为没有清晰的界定与评判方式，需要客户在选型时进行综合性的考虑，并在后续实际的业务场景中去感受平台的服务能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这种情况其实也和市场需求有关。目前国内企业提出的需求都较为“定制化”，再加上不同行业间的差异，导致国内的数据服务公司大部分是结合行业提供垂直的数据服务能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;个推发展的每一步，踩的都是行业需求&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;我国的数字经济发展才刚刚开始，数据智能服务的能力也在不断迭代、发展。人工智能、区块链、知识图谱、可视化等新兴技术，都可以作为底层的技术支撑为数据智能服务赋能，从而让我们的数据服务具备更强大的能力，产生更多价值。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Q1、个推的发展经历了多个阶段，技术也在不断迭代和演进。能否简要分享一下不同阶段的业务逻辑重点以及技术研发重点？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推是我们的消息推送产品，做得比较早并且比较成熟了。但其实我们公司发展到现在已经十年了，业务范畴也早就不止是消息推送了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;公司发展的第一个阶段是 2010 年到 2013年。当时我们的核心团队主要是在打磨消息推送的能力，也就是一套大规模的通信系统 + 互联网搜索系统，这是一个比较垂直但对于技术要求很高的领域。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2014年至2018年，公司进入了数据价值的“掘金”与“实践”阶段。在不断精进推送能力的同时，我们发现系统产生了非常多的数据，如何让这些数据发挥价值成为了我们需要思考和解决的问题&lt;span&gt;&lt;strong&gt;。也是从这个阶段开始，个推开始致力于大数据系统的研发。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推的消息推送产品每天会产生几十个 T 的数据，如何存储、清洗、建模，如何在业务场景中产生商业化的价值，这是这一阶段我们的研发重点。经过几年的业务培养与场景实践，我们将在数据服务领域沉淀下来的能力和 know how（知识、经验、流程） ，变成一种可以服务于更多行业的产品，可以说公司正式进入到了数据智能的阶段。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2019年3月，每日互动成功在A股创业板上市，也引起了数据智能领域的一次新风潮。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCiaibk3x5Gbt6iaG6sicFsic5iaNSicT54DPGLnicOh4Jl9X1u71KWqkGVBAorg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在今年的疫情过程中，个推数据智能的能力得到了相当程度的验证。疫情期间，我们与李兰娟院士取得联系，与李兰娟院士团队合作成立联合战队。通过大数据技术，联合战队对疫情发展态势进行了研判，帮助疫情防控部门找到工作重点区域、重点人群和重点场景。在全国逐步有序恢复生产的时候，个推也充分发挥大数据能力并参与其中，为多个省份的疫情联防联控与民生保障、复工复产的有序统筹提供了决策参考依据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，个推的数据智能服务仍然是在不断迭代发展的。随着人工智能、区块链、知识图谱、可视化等等新兴技术的发展，这项基于数据的服务也将产生更多的价值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q2、个推致力于打造“每日治数平台”，目标方向是什么样的？与一般的中台产品有什么区别？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;「每日治数平台」其实也是数据中台的概念，但我们提供的数据服务主要是应用于数据治理领域，所以命名为治数平台更为准确。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个平台还有一个提炼后的名字 —— &lt;strong&gt;&lt;span&gt;DMP。D 代表了数据（DATA），M 代表了 机器（MACHINE），而 P 则代表了人（PEOPLE）和专业（PRO）。&lt;/span&gt;&lt;/strong&gt;这几个关键词也代表了我们平台的定位，即数据作为底层资料，快速专业地服务于具体业务当中。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我国的数字经济发展其实才刚刚开始，据了解，不少企业并不知道该如何进行数字化、智能化的转型，业内也缺乏专业的数据人才。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因此，我们的目标方向和传统的数据中台不同。我们希望真正将个推 know how 的能力沉淀下来，形成客户可以复用的服务或平台产品。之所以想要打造这样的一个平台，背后其实也是基于用户的实际需求。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q3、个推的第一个客户是哪家企业？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推消息推送业务的第一个客户是新浪微博。当时微博非常火，有着上亿的用户量，消息推送对他们来说是不可或缺的一项功能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2011年，我们主动联系了微博相关业务的负责人，表示可以提供专业的消息推送服务，用更低的成本来实现更好的效果，这也是我们能够打动他们的原因。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之所以第一个客户就敢挑战“行业顶配”的难度，一方面是技术团队自身具备扎实的技术基础和行业基础，另一方面就是前面提到的，我们在支持自身业务的过程当中沉淀下来的数据和技术能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有这样一个需求明确的大客户，让我们的技术服务能力得以更加高效地迭代，大大加快了技术进步的速度。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;接受挑战并做到“极致”，正是我们公司的工程师文化，&lt;/span&gt;&lt;/strong&gt;对此我们感觉很自豪。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q4、目前面向的客户群体有哪些，涉及哪些领域？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着数据能力的增强，以及对于行业理解的不断加深，&lt;span&gt;&lt;strong&gt;我们目前的服务客户已经扩展到四大领域 —— 互联网、公共服务、风控服务和品牌营销服务。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以金融领域为例， 很多金融机构内部有自己的 App，涉及推送、统计、分析之类非常繁复的数据和信息处理场景。我们帮他们打造了一个集成的消息平台中心，解决了消息处理的分散问题，改善了工作流程。在深度沟通之后，我们发现数据智能服务在金融行业中是一个非常重度的业务场景，为此我们也在考虑开发专门针对金融行业的治数平台。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q5、对于数据公司来说，数据安全是红线。个推如何保障数据安全性？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推团队自建立之初，便非常注重对于数据安全的保障。正如问题所说，数据安全对数据公司来说是红线，&lt;strong&gt;&lt;span&gt;个推始终认为保护用户数据隐私是企业必须要坚守和捍卫的行业准则、道德底线，并要时刻保持对数据安全的敬畏之心。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推在严格落实合规和监管要求的同时，倡导行业自律，积极联合行业伙伴的力量，共同推动行业的健康发展。今年8月，由个推牵头起草的《信息安全技术移动互联网应用程序（App）SDK安全指南》国家标准项目，获得全国信息安全标准化技术委员会正式立项，这将有助于SDK行业在开发、运营、信息处理、安全管理等环节向更规范的方向迈进。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.3907407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCell3gJYEgOwq2fvnMlE9Sx2kpyibWPcXpS15GzWvp6Vs5YloXXwT93A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在今年的浙江省网络攻防演练当中，个推在395家参选企业中不借助外部安全公司的力量，仅凭公司自身的安全能力，便取得了第 14 名的成绩，还是很自豪的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;大数据的未来，是不提大数据但是数据又无处不在的时代，“你意识不到我的存在就是我最大的存在”&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;随着数据产业的规模越来越大，生态分工在未来将会越来越细，数据服务也将越来越细。而随着人工智能、云计算、物联网等技术的发展，大数据会不会和互联网一样，不再成为人们单独讨论的概念，而是成为像水电一样的基础设施，服务于各行各业中？&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Q1、随着社会的发展，未来的数据会呈现多形态共存的状态。您认为未来几年大数据领域会出现什么样的一些变化？哪些因素将推动这些变化？你们的生态布局是怎么样的？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着 5G 的成熟，数据领域的发展将从基础的量变迎来一次质变，成为像水电一样的社会基础设施。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;近几年大家其实很少再单独讨论互联网的概念，其中的一个因素，我认为是互联网已经不再是新鲜事物，现阶段技术的发展基于互联网但又高于互联网，大数据之后的发展肯定也会这样，&lt;span&gt;&lt;strong&gt;数据智能的未来，虽然基于大数据，但是不会再单独讨论大数据的概念。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从技术层面来看，大数据行业的发展对海量数据的存储、处理、挖掘需求肯定会越来越高，未来可能也会诞生出几个巨头，将行业进行更加明确的细分。这是一个大家已经能够观察到的趋势。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着数据产业的规模越来越大，生态分工在未来将会越来越明确，数据类的服务也将越来越精细化。我们打造的个推每日治数平台，就是希望能够参与到生态的建设当中，甚至围绕平台打造出一种新的生态。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q2、业内最近有个观点：“云原生体系架构是云服务时代的数据管理方法论”，从技术角度来看，您如何评判云与数据智能间的关系？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不同的人评价同一件事肯定会有不同的出发点，这个观点看起来应该是云服务厂商提出的（笑）。很巧，我前一阵也跟吉利公司的人在讨论这个问题，他们最近刚从一家云厂商中迁移出来。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对企业来说，上不上云、选择公有云还是私有云、选择哪家云厂商需要考虑几个维度：&lt;span&gt;&lt;strong&gt;成本吃不吃得消、是否自主可控、当不满足业务需求或者服务需求时是否方便切换等。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以个推为例，我们目前不会将数据放到第三方的云上，但从资源的调度、成本的控制等方面来看，云体系已经是一个公认的标准答案，所以我们也会使用云计算的相关技术，比如容器云、虚拟化等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q3、物联网、AI、机器学习等新技术的出现，对行业来说是机会还是挑战？个推应对技术的发展是否有做哪些前瞻性的探索？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;新技术的出现，对行业来讲既是机会也是挑战。每次新技术的出现，都能为人类解放生产力或者提高生产力提供了可能性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但一些技术因为过于“新”，暂时还没有找到发挥能力的场景，没办法发挥出实际的社会价值，让企业的投入与产出不成正比。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推还成立了数据智能研究院，目前研究的方向是探索如何将技术更好地服务于具体的业务当中。比如我们对物联网技术方向的探索，是想将自身的推送技术能力延伸到电视机、汽车等场景当中；对机器学习和区块链的探索则是为了进行一些业务模式的研究。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;技术是面向未来的，但用户的需求是现在的。&lt;/span&gt;&lt;/strong&gt;对于我们来说，目前的重点还是如何借助技术快速迭代服务能力，为用户以及行业赋能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCJn4ycqXKYeycLhW4bUDVWFt3hpTblyNWb9OJVJ9dC5JaLuU6icf8Y4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;300&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;回顾大数据行业和个推的发展时间线，不难发现个推成立的这十年，恰巧也是大数据从一种辅助工具向引领发展方向的核心引擎转变的十年。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着大数据行业的发展，国家正在大力发展数字经济，企业正在迎来一波借助数据智能实现数字化、智能化的转型新浪潮。&lt;strong&gt;&lt;span&gt;在这股浪潮中，开始“治数”的个推将会扮演一个什么样的角色？我们拭目以待。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;限时福利&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;在十周年之际，个推为广大开发者准备了重磅福利 —— &lt;strong&gt;&lt;span&gt;爆款SDK免费用1年、热门大数据产品0门槛试用！&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;点击阅读原文，&lt;/span&gt;&lt;/strong&gt;即可参与，还有丰富的惊喜礼盒限时领取！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCWNaQqxNkpxdoTJ7zOChMOI1eQmXicHrjgKIeoe427q9P7w1KcHPlDDA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MDc1MjcyMQ==&amp;amp;mid=2247484780&amp;amp;idx=1&amp;amp;sn=eb3f3e453559de485c34f4905f3927df&amp;amp;chksm=fc027452cb75fd44ab0a0f9fde3d66c6cb023315d14ec1eee2f8aabffc18651ed4af0fdeee49&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.25&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCUeeSyHPm4j04DTdIudpJ52QZqZ6OnFU6bptMDia1dPx2NicRvIOeBMQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MDc1MjcyMQ==&amp;amp;mid=2247486015&amp;amp;idx=1&amp;amp;sn=e117d4c8516166c1714badbaf663b2cf&amp;amp;chksm=fc027b01cb75f217d335734f2fb346a394b8901048cc651e9e3eb96db2600de26cadf21bba6f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.25&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCR7jk3TibdREDohUxSWDvmZCdPHXcllDEQE8SicUNSA1IKbOweefZzZKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8cHicoiacTv8JqGJmY1vPHn4JX87favPMp4hm8cibDwyJ0C0P4kvgeo97vk0etSPE6tUic4J0iaxuojABvxvlELLM0g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.005128205128205&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8cHicoiacTv8JVOE5ibzQy7MmiadREHZ5jdb7lnZHBwRicz7V79AywTRCpiaVb7dvLF4PtB6iaIsKNUxAuwic21BrTqiaSA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;390&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCQd7NXZlYIzdHDRPdL3Om3VFmh3ppvpqrplD4Umq5SDDRRyJiaIXge0A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;300&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;立即参与，&lt;strong&gt;&lt;span&gt;领取福利！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>105d25c0a94c5d671671e36d5b7d2287</guid>
<title>一文串联 HTTP、TCP、IP、以太网</title>
<link>https://toutiao.io/k/dqkrq0f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近部门组织了一次前端性能优化交流会，大家从输入页面 URL 到最终页面展示内容这个过程提出了许多优化点。但同时发现很多同学对 HTTP 协议层的知识不能串联起来，于是整理了这篇文章，希望可以给大家带来一丝灵感。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们在页面上发起一个 AJAX 请求的时候，在网络协议层面都经历了哪些内容？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 发起请求&lt;/span&gt;&lt;br/&gt;fetch(&lt;span&gt;&#x27;https://baidu.com&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;// 协议层1...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 协议层2...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 协议层3...&lt;/span&gt;&lt;br/&gt;.then(&lt;span&gt;&lt;span&gt;res&lt;/span&gt;=&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 得到结果&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(res)&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上述代码所示，我们对 &lt;code&gt;baidu.com&lt;/code&gt; 发起了一个网络请求，最终在 then 方法中得到了具体的响应内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Wireshark 抓包结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3148542999289268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOM27eiaCiattnCddIJk66GwcTQGMRK5EOzjeibkZAZLj5QzX9ygx3t0Q1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1407&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图中可以看到，请求 baidu.com 时，首先通过 TCP 3 次握手建立连接，然后通过 HTTP 传输内容，最后通过 TCP 4 次挥手断开连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真实的过程更加复杂，我们主要分析以下几点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;建立连接阶段&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过 IP 寻址找到目标服务器（网络层）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 Mac 寻址找到服务器硬件接口（数据链路层）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过网线向服务器硬件接口传输比特信息（物理层）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DNS 域名解析（应用层）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建立 TCP 连接（传输层）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;发送数据阶段&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;建立 SSL 安全连接（应用层）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送 HTTP 请求（应用层）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;建立连接阶段&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要获取 baidu.com 的网页内容，就需要和 baidu 服务器建立连接，怎样建立这个连接呢？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过 DNS 获取 baidu 的 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建立 TCP 连接。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DNS 域名解析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 DNS 解析，我们就能找到 baidu 服务器对应的 IP 地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4074373484236055&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOm8ib4RnLBIARxYoJuUa0OcsHpL9DeUycf8Z2kPbKetMMjsK1YEwAlZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1237&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过 DNS 解析后，我们就能得到 baidu.com 的 IP 地址了：39.156.69.79 和 220.181.38.148，通常客户端会随机选中一个 IP 地址进行通信。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;域名的解析步骤&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实 IP 不一定要通过 DNS 解析才能获取，它通常会被客户端缓存，只有在 DNS 缓存都没有命中的时候才会请求 DNS 服务器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;判断步骤如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;判断浏览器是否有缓存 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断本机是否有缓存该 IP 地址，如：检查 Host 文件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断本地域名解析服务器是否有缓存 IP 地址，如：电信，联通等运营商。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;向 DNS 根域名解析服务器，解析域名 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;向 DNS 二根域名解析服务器，解析域名 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以此类推，最终获得 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;建立 TCP 连接&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了 IP 地址之后，客户端和服务器端就能建立连接了，首先是建立 TCP 连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 是一种面向连接的、&lt;strong&gt;可靠的&lt;/strong&gt;、基于&lt;strong&gt;字节流&lt;/strong&gt;的传输层通信协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这一层，我们传输的数据会按照一个个的字节装入报文中，当报文的长度达到最大分段（MSS）时，就会发送这个报文。如果传输的报文很长，可能会被拆分成多个 TCP 报文进行传输。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 报文头如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.32439446366782004&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOqAqlN0kVibuv9pPbuzlYaib1wNFibGUb3gW3ziav8IUaCTNpPlXzia6x2hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2312&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们主要看以下几点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;源端口、目的端口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;序列号：seq，报文的唯一标识。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;确认号：ack，报文的确认标识，便于确认 seq 是否已经收到。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TCP 标记：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;SYN 为 1 表示这是连接请求或是连接接受请求。用于创建连接和同步序列号。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ACK 为 1 表示确认号字段有效。注意这里大写的 ACK 只是一个标记，和确认号 ack 并不相同。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;FIN 为 1 表示要求释放连接。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;窗口：表示发送方可以接收的字节数，即接收窗口大小，用于流量控制。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们看一下 TCP 是怎样建立连接的？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6535433070866141&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7L9icdzjNYAUiaCrjHys7vMrViaaibK6eOFLEWygx1NHfZLTB5j2bVJjX9ZSdq6mArAyy0XkYOFiaib0Htg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;889&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图所示，建立 TCP 连接需要 3 个步骤，俗称三次握手。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一次握手：客户端向服务器端发送序列号 seq=x 的标识，表示开始建立连接。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二次握手：服务器端回发一个 ack=x+1 的标识，表示确认收到第一次握手，同时发送自己的标识 seq=y。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三次握手：客户端发送 ack=y+1 的标识，标识确认收到第二次握手。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过了 3 次握手，即保证了客户端和服务器端都能正常发送和接收数据，TCP 连接也就建立成功了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;TCP 可靠传输原理&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上文中说到，TCP 是可靠的传输，这是为什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是因为 TCP 内部使用了 &lt;strong&gt;停止等待协议 ARQ&lt;/strong&gt; ，它通过 &lt;strong&gt;确认&lt;/strong&gt; 和 &lt;strong&gt;重传&lt;/strong&gt; 机制，实现了信息的可靠传输。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3952333664349553&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibO7aX8Y9BdibiaQ7CicYHID19u5Mv5y6h33IPgd0XJrtxiae26icwMAYLEo7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1007&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送数据 M1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端确认数据 M1 收到&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端发送数据 M2&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端确认数据 M2 收到&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;依次类推 ...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这期间，如果某一条数据很久都没有得到确认，客户端就会重传这条数据。这样一来，对于与每一次发送的数据，服务器端都得到了确认，即保证了数据的可靠性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然 ARQ 可以满足数据可靠性，但每次只能发送和确认一个请求，效率太低了，于是就产生了连续 ARQ 协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;连续 ARQ 协议&lt;/strong&gt; 会连续发送一组数据，然后再批量等待这一组数据的确认信息，好比把单线程 ARQ 变成了多线程，大大提高了资源的利用效率。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8008982035928144&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOgESc640pdVu5Piciav08Ytg5AxCIQdIlG4pJ5m11Hia5iaXssMtEibFb6qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1336&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送数据 M1、M2、M3、M4。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端确认数据 M4 收到，表示 M4 及之前的数据都收到了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端发送数据 M5、M6、M7、M8。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端确认数据 M8 收到，表示 M8 及之前的数据都收到了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个流程中，服务器端不需要对每一个数据都返回确认信息，而是接收到多个数据时一并确认，这个方式叫做 &lt;strong&gt;累计确认&lt;/strong&gt;。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有个疑问，TCP 的每一次握手，是怎么找到目的服务器呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：通过 IP 协议。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;根据 IP 协议找到目标服务器&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;IP 协议的目的是实现网络层的数据转发，它通过路由器不断跳转，最终把数据成功送达目的地。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上文中的每一次 TCP 握手以及数据交互，都是通过 IP 协议去传输的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;IP 报文头如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5153949129852744&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7L9icdzjNYAUiaCrjHys7vMrViaD3iaRDRZ7pqZ4AawXNMx3UQGzCwibHJv2rzBRqLBnHHyDjzXW4qYKkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;747&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们关注以下两点就可以了：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发起一个 IP 请求执行流程如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;构建 IP 请求头（源 IP、目标 IP）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IP 协议通过算法，计算出一条通往服务器端的路径。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送端查询路由表，找出下一跳的 IP 地址（通常是路由器），并发送数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;路由器查询路由表，找出下一跳的 IP 地址，并发送数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不断重复步骤 4，直到找到目的局域网。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送数据。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;路由表存在于计算机或路由器中，由目的 IP 地址、子网掩码、下一跳地址、发送接口四部分组成。通过目的 IP 地址，即可找到下一跳的地址，进行转发。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：A 要向 G 发送 IP 数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6015625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOPTibAXtXqquwicGqREhp55ibFYam7VTbsHtpQUibfEsyy0muJ5fEeta6sQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1536&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体流程如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;A 生成 IP 头部（源 IP：A ，目的 IP：G）&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;A 查询路由表，发现下一跳为 B，于是把数据传给 B。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;B 生成 IP 头部（源 IP：A ，目的 IP：G）&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;B 查询路由表，发现下一跳为 E，于是把数据传给 E。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;E 生成 IP 头部（源 IP：A ，目的 IP：G）&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;E 查询路由表，发现下一跳为 G，于是把数据传给 G。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;到达目的地 G。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你是否有疑惑，为什么 IP 会按照这条路径向 G 传输数据呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，上图中的路径并非只有一条，我们通过 ABEG 到达了目的地 G，同样也可以通过 ABCFHG 到达 G，这两种路径都能完成任务，为什么 IP 不选择 ABCFHG 这条路径呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就涉及到了 IP 寻址的算法。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;IP 寻址算法&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以把网络中的所有计算机都看做是一个点，计算机之间的连接看做是一条线，这些点和线就组合成了一个图。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5635294117647058&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/SM05zvmibH7L9icdzjNYAUiaCrjHys7vMrVHvdPlrBm8A9mfW9nqIxlVbMbQo6KZwNfqcUicPQHLFK5C3jmSo0H9gQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上图，我们就把复杂的网络转化成了数学问题。IP 寻址算法，其实就是图论中的最短路径的算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最短路径算法在 IP 协议中有 2 种实现：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;RIP 协议&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;每个节点中都保存有其他节点的位置信息（跳数和下一跳的 IP）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过和邻居节点进行数据交换，更新自己到目的地的最短距离，不断重复，即可得到起点到终点的最短路径。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现简单，开销很小，适用于小型网络。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用距离矢量算法，&lt;strong&gt;确保 IP 路由跳转的次数最小&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;原理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;OSPF 协议&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;从起始点开始，采用贪心算法的策略，每次遍历到始点距离最近且未访问过的顶点的邻接节点，直到扩展到终点为止。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;适用于大型网络。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用迪杰斯特拉算法，&lt;strong&gt;确保 IP 路由跳转的速度最快&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;原理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过以上两个协议，我们就能找到通往目的地的路径了。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里抛出一个问题：IP 数据是怎样从一个路由器跳到另一个路由器呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：通过以太网协议。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;通过 Mac 寻址找到服务器硬件接口&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;IP 协议主要是用来寻找最优路径的，具体的传输是由以太网协议来做的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以太网属于数据链路层，它主要负责相邻设备的通信。原理是通过查询交换机 Mac 表，找到通信双方的物理接口，进而开始通信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以太网报文头如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.26247987117552335&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOOloRAzcDYXgvWIKOXXTFPBxn5Tnx1h87u6u5LfxDb21FUaia71Ss6WQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1242&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们只用关心以下 3 个点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;源 Mac 地址&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;目的 Mac 地址&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;校验码 CRC：校验当前帧是否有效。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，以太网层都是通过 Mac 地址进行通信的，这里的 Mac 地址是哪里来的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：通过 ARP 协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;ARP 协议&lt;/strong&gt; 是一个通过解析 IP 地址来找寻 Mac 地址的协议。IP 地址转换成 Mac 地址后，就能进行以太网数据传输了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7013232514177694&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOqoUQa4r0mM1U3wgvYPGHawp5ryMNXMorZU1T9aJItFVDtSHfCODQNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当机器 A 向机器 C 发送数据时：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;A 构建以太网报文（源地址：A，目的地址：C），并通过网卡发出数据帧。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据帧到达交换机 B，交换机取出目的地址 C 的 Mac 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;B 查询 Mac 表，根据目的地 Mac 地址，匹配 C 的硬件接口。&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果找到 C 的硬件接口，发送数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果未找到 C 的硬件接口，向 B 直连的所有机器发送广播信息找 C，找到后会把 C 记录到 Mac 表中。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过上述的流程，我们就找到了目的机器的硬件接口。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过以太网协议，我们找到了目标机器的硬件接口，接下来要怎么发送信息呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：通过物理层。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;通过网线向服务器硬件接口传输比特信息&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在没有 WiFi 的年代，我们只能通过插网线来进行上网，网线其实就是物理层的设备之一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网线可以由多种材料组成，最常见的就是光纤和电缆。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;光纤和电缆的传输原理类似，都是通过两个信号来模拟二进制数据的，一个信号即为一个比特。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;电缆中：高电位表示 1 ，低点位表示 0。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;光纤中：光亮表示 1，光熄灭表示 0。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如：在光纤中，我们通过观察光的闪动，即可得知传输的二进制数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了这些物理设备，我们就能把复杂的数据转换成光信号或者电信号进行传输了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;发送数据阶段&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送数据可以分为两个步骤：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;建立安全层 SSL&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文的案例是发送一个 HTTPS 的请求，所以在发送数据之前，会创建一个 SSL 安全层，用于数据加密。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常的加密方法有两种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;非对称加密&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;A 有钥匙，B 没有钥匙，且他们都有一个公共的锁，B 给 A 发送数据时，都会先把数据锁起来再发送。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接收数据时，A 用钥匙解开锁，即可得到数据。除 A 以外，其他人没有钥匙，也就获取不到数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现了单向通信加密。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;对称加密&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;A、B 双方都有一把相同的钥匙和一个公共的锁，每次发送数据时，都把数据放在锁里进行发送。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接收数据时，A、B 双方就用各自的钥匙来解锁。其他人没有钥匙，也就获取不到数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现了双向通信加密。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;互联网通信是双向的，所以我们需要使用对称加密，可是，怎样才能保证通信双方都有一把相同的钥匙呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前的解决方案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先使用非对称加密，进行秘钥协商，让通信双方拿到相同的钥匙。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后使用对称加密，进行加密传输。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;秘钥协商过程如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4583741429970617&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOfUCI9aN0xicYP8Kp1stmjfdzaro3NVVnDFaUciaDFibj3vn0hhj5wto1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2042&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图中划重点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送自身支持的加密算法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端选择一种加密算法，同时返回数字证书。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端确认证书有效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端生成随机数，并使用证书中的服务器公钥加密，然后发送给服务器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端使用私钥解密，获得随机数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;双方使用第 2 步确定的加密算法，把随机数进行加密，即可获得相同的对称加密秘钥。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Ok，秘钥协商之后，我们的 SSL 安全层也就建好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;秘钥协商时存在一个问题：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;秘钥协商时，怎么保证是和真正的服务器在协商，而不是一个中间人呢？&lt;/p&gt;&lt;p&gt;答：&lt;strong&gt;数字证书&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数字证书重点关注 2 个部分：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，数字签名又是由服务器公钥和证书私钥加密生成的，目的是为了防止服务器公钥被篡改。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.567741935483871&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7L9icdzjNYAUiaCrjHys7vMrVwI6mqIECJdtwQYNjKfYnU8qIeatWmsyXSRWP8aibv1zDNcQJo8yia3dg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;620&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了数字证书，客户端就能通过验证证书，来判断服务器是否是真正的服务器了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;验证逻辑如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4420289855072464&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7L9icdzjNYAUiaCrjHys7vMrVDZicM8WzylfjreSicVhcp9zGUaf5HkzOgOgTwkb8F2sCLYaqcJcYKfyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，数字证书通过同样的算法进行解密，如果得到相同的信息摘要，就能保证数据是有效的，如果不一致，则会验证失败，拒绝后续的请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里为止，所有的准备工作都就绪了，接下来才是发送 HTTP 请求。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;发送 HTTP 请求&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTP 协议其实就是制定了一个通信规则，规定了客户端和服务器之间的通信格式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以请求 baidu 首页为例：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5910165484633569&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibO0qHibtlSTZvWsou5YWpW7E1voe6aqKibhJDLsiaGdh41VoXyAq8gzbBtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;846&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所示，发起 HTTP 请求时，必须遵守以下规则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;请求方法（必填） &lt;code&gt;GET&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;请求地址（必填） &lt;code&gt;/&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;HTTP 协议版本（必填） &lt;code&gt;1.1&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他 HTTP 头部字段（可选） &lt;code&gt;Host&lt;/code&gt;、&lt;code&gt;User-Agent&lt;/code&gt;、&lt;code&gt;Accept&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;请求参数，放在空行后面（可选）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器响应请求时，同样遵守了 HTTP 响应规则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;HTTP 协议版本（必填） &lt;code&gt;1.1&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;响应状态码（必填） &lt;code&gt;200&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;状态码描述（必填） &lt;code&gt;OK&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他 HTTP 头部字段（可选） &lt;code&gt;Date&lt;/code&gt;、&lt;code&gt;Server&lt;/code&gt;、&lt;code&gt;ETag&lt;/code&gt;、&lt;code&gt;Last-Modified&lt;/code&gt; 等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;请求参数，放在空行后面（可选）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要我们遵守这个规则，就能进行 HTTP 通信了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到目前为止，我们已经分析完成了数据请求的所有过程，你是否都理解了呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;思考与总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文通过一个网络请求，对整个 HTTP、TCP、IP、以太网等协议进行了流程化分析，最后再梳理一下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;请求 baidu.com。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DNS 解析 baidu.com，得到 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建立 TCP 连接。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IP 协议通过算法，计算出一条通往服务器最优路径。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IP 沿着路径跳转时，会通过 ARP 协议把 IP 地址转换成 Mac 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以太网通过 Mac 地址，找到通信双方的硬件接口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;物理层通过网线作为载体，在两个硬件接口之间传输比特信号。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TCP 连接建立完毕。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建立 SSL 安全层。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送 HTTP 请求。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，如果你对此有任何想法，欢迎留言评论！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOicoUdfIzlr9RlvLLOvgVeUIRxITZZDGQzhwaBdqLA3aWCP6SGasiboEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>57b4f92b08dfbf31e9214798151c366f</guid>
<title>5 分钟掌握 Spring Boot 自动配置原理</title>
<link>https://toutiao.io/k/8p5funr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;       随着互联网越来越流行，springboot已经成为我们无论是工作，还是面试当中，不得不掌握的技术。说起springboot笔者认为最重要的功能非自动配置莫属了，为什么这么说？如果参与过以前spring复杂项目的朋友肯定，有过这样的经历，每次需要一个新功能，比如事务、AOP等，需要大量的配置，需要导出找jar包，时不时会出现jar兼容性问题，可以说苦不堪言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;      springboot的出现得益于“习惯优于配置”的理念，没有繁琐的配置、难以集成的内容（大多数流行第三方技术都被集成），这是基于Spring 4.x以上的版本提供的按条件配置Bean的能力。有了springboot的自动配置的功能，我们可以快速的开始一个项目。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一 什么是自动配置&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道朋友们在工作当中有没有这样的经历:&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1 引入redisTemplate&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要我们在pom.xml文件中引入spring-boot-starter-data-redis-xxx.jar包，然后只要在配置文件中配置redis连接，如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spring.redis.database = 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spring.redis.timeout = 10000&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spring.redis.host = 10.72.16.9&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spring.redis.port = 6379&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spring.redis.pattern = 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就可以在service方法中直接注入&lt;code&gt;StringRedisTemplate&lt;/code&gt;对象的实例，可以直接使用了。朋友们有没有想过这是为什么？&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__keyword&quot;&gt;Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;private StringRedisTemplate stringRedisTemplate;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2  引入transactionTemplate&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在项目中只要引入spring-boot-starter-xxx.jar，事务就自动生效了，并且可以直接在service方法中&lt;/span&gt;&lt;span&gt;直接注入&lt;/span&gt;&lt;span&gt;&lt;span&gt;TransactionTemplate&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，用它开发编程式事务代码。是不是很神奇？这又是为什么？&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.3  使用@ConfigurationProperties&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;使用&lt;span&gt;@ConfigurationProperties&lt;/span&gt;可以把指定路径下的属性，直接注入到实体对象中，看看下面这个例子：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Data&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Component&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@ConfigurationProperties(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;jump.threadpool&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ThreadPoolProperties&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; corePoolSize;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; maxPoolSize;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; keepAliveSeconds;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; queueCapacity;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;只要&lt;span&gt;application.properties&lt;/span&gt;这样配置，就可以自动注入到上面的实体中&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.threadpool&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.corePoolSize&lt;/span&gt;=8&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.threadpool&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.maxPoolSize&lt;/span&gt;=16&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.threadpool&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.keepAliveSeconds&lt;/span&gt;=10&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.threadpool&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.queueCapacity&lt;/span&gt;=100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;没错，这三个例子都是springboot自动配置在起作用，我们分为两种情况：bean的自动配置 和 属性的自动配置。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二 工作原理&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 bean的自动配置&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Spring Boot的启动类上有一个&lt;/span&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;span&gt;注解，这个注解是Spring Boot项目必不可少的注解。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先看看&lt;span&gt;@SpringBootApplication&lt;/span&gt;注解&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.29335260115606937&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFKbF3EAtJWnG77cKicgGnWiawpMy4TQRkUS8KvyxbhSqT6Cj0eXASnCJNWmm1nUsASAvU9auFEHibkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1384&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它上面定义了另外一个注解：&lt;span&gt;@EnableAutoConfiguration&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.35572139303482586&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFKbF3EAtJWnG77cKicgGnWianVzqZzEboSH0tp5JU7pnBKwrQezqfbfVO0CMhrFzn8FTFMxzEBjOlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该注解的&lt;span&gt;&lt;span&gt;&lt;span&gt;关&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;键功能由&lt;span&gt;@Import&lt;/span&gt;提供，其导入的&lt;span&gt;AutoConfigurationImportSelector&lt;/span&gt;的&lt;span&gt;selectImports&lt;/span&gt;()&lt;span&gt;方法通过SpringFactoriesLoader.loadFacto&lt;/span&gt;&lt;span&gt;ryNames()扫描所有具有META-INF/spring.factories的jar包下面key是EnableAutoConfiguration全名的，所有自动配置类。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看看springboot的spring-boot-autoconfigure-xxx.jar&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7259528130671506&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFKbF3EAtJWnG77cKicgGnWiaPLCNsv51ucjqBhCpz8vuzc32uWO5HOr5iax4bQx0QD5Y5eeGFsEfHPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1102&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该jar包里面就有&lt;span&gt;META-INF/spring.factories&lt;/span&gt;文件。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4740810556079171&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFKbF3EAtJWnG77cKicgGnWia5z1PSiacpCMT1dwx6Nd1srADa2vgy7VLcezDSwwKplFqMiao8rwJ9VLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2122&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个&lt;span&gt;spring.factories&lt;/span&gt;文件是一组一组的key=value的形式，其中一个key是&lt;span&gt;EnableAutoConfiguration&lt;/span&gt;类的全类名，而它的value是一个xxxxAutoConfiguration的类名的列表，这些类名以逗号分隔。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;@EnableAutoConfiguration&lt;/span&gt;注解通过&lt;span&gt;@SpringBootApplication&lt;/span&gt;被间接的标记在了Spring Boot的启动类上。在&lt;span&gt;SpringApplication.run&lt;/span&gt;(...)的内部就会执行&lt;span&gt;selectImports&lt;/span&gt;()方法，找到所有JavaConfig自动配置类的全限定名对应的class，然后将所有自动配置类加载到Spring容器中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SpringApplication.run&lt;/span&gt;&lt;span&gt;(...)&lt;/span&gt;方法怎么调到&lt;span&gt;selectImports&lt;/span&gt;&lt;span&gt;()方法&lt;/span&gt;的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加载过程大概是这样的：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SpringApplication.run(...)&lt;/span&gt;&lt;span&gt;方法 &lt;/span&gt; 》 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AbstractApplicationContext.refresh()方法  》 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;invokeBeanFactoryPostProcessors(...)方法  》 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(...) 方法  》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(..)方法  》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AutoConfigurationImportSelector.selectImports&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方法会找到自动配置的类，并给打了@Bean注解的方法创建对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;postProcessBeanDefinitionRegistry&lt;/span&gt;方法是最核心的方法，它负责解析&lt;span&gt;@Configuration&lt;/span&gt;、&lt;span&gt;@Import&lt;/span&gt;、&lt;span&gt;@ImportSource&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;@Component&lt;/span&gt;、&lt;span&gt;@ComponentScan&lt;/span&gt;、&lt;span&gt;@Bean&lt;/span&gt;等，完成bean的自动配置功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到刚刚第二个例子&lt;span&gt;TransactionTemplate&lt;/span&gt;为什么可以直接引用？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是因为在spring-boot-autoconfigure-xxx.jar的spring.factories配置文件中，&lt;span&gt;EnableAutoConfiguration&lt;/span&gt;&lt;span&gt;全类名&lt;/span&gt;下配置了&lt;span&gt;TransactionAutoConfiguration&lt;span&gt;全&lt;/span&gt;&lt;/span&gt;类名，springboot在启动的时候会加载这个类。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3888048411497731&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDG6vzDZpMIq4uSWtiazr40l6A9CAicq9o95w9odvBuLKYiaq3XthWqhRFicHJw5iaCzHSpGJ0ZC2R66vdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1322&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;span&gt;TransactionAutoConfiguration&lt;/span&gt;类是一个配置类，它里面创建&lt;span&gt;TransactionTemplate&lt;/span&gt;类的实例。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6620689655172414&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDG6vzDZpMIq4uSWtiazr40l6BiaaAhkUiaveVv3US0Dl2tBXgZQE9IjeiaMbmOeS37hrq2pRFQNmf7sGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1740&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样在其他地方就可以直接注入&lt;/span&gt;&lt;span&gt;TransactionTemplate&lt;/span&gt;&lt;span&gt;类的实例&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2 属性的自动配置&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;属性的自动配置是通过&lt;span&gt;ConfigurationPropertiesBindingPostProcessor&lt;/span&gt;类的&lt;span&gt;postProcessBeforeInitialization&lt;/span&gt;方法完成，&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Object postProcessBeforeInitialization(Object bean, String beanName)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    throws BeansException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ConfigurationProperties &lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt; = getAnnotation(bean, beanName,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ConfigurationProperties.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt; != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    bind(bean, beanName, &lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; bean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;它会解析@&lt;span&gt;ConfigurationProperties&lt;/span&gt;注解上的属性，将配置文件中对应key的值绑定到属性上。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三 自动配置的生效条件&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;每个&lt;span&gt;xxxxAutoConfiguration类&lt;/span&gt;上都可以定义一些生效条件，这些条件基本都是从&lt;span&gt;@Conditional&lt;/span&gt;派生出来的。&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;常用的条件如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnBean&lt;/span&gt;：当容器里有指定的bean时生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnMissingBean&lt;/span&gt;：当容器里不存在指定bean时生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnClass&lt;/span&gt;：当类路径下有指定类时生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnMissingClass&lt;/span&gt;：当类路径下不存在指定类时生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnProperty&lt;/span&gt;：指定的属性是否有指定的值，比如&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnProperties&lt;/span&gt;(prefix=”xxx.xxx”, value=”enable”, matchIfMissing=&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;)，代表当xxx.xxx为enable时条件的布尔值为&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;，如果没有设置的情况下也为&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个比较常用的例子看看&lt;span&gt;TransactionAutoConfiguration&lt;/span&gt;，是如何使用条件的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.41797432239657634&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFKbF3EAtJWnG77cKicgGnWiau5HlHLjY12iaCTMdv7wiaN6LAFRNKibICzicIKkZvYI3FiacibFwUiaWN5D3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1402&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到，条件用的是：&lt;span&gt;@ConditionalOnClass&lt;/span&gt;，表示&lt;span&gt;TransactionAutoConfiguration&lt;/span&gt;类只有在&lt;span&gt;PlatformTransactionManager&lt;/span&gt;类存在时才会生效。&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;如何自定义自动配置类？&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;请阅读《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484236&amp;amp;idx=1&amp;amp;sn=e7eb1011b39ab1f1bbeb46e1b6228b93&amp;amp;chksm=f9800596cef78c80416c7cdaa9177af8fac8c98959beea95af46c7ac45e8892f73228cb9f879&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;老司机手把手教你编写自己的springboot starter&lt;/a&gt;》里面有详细步骤。&lt;br/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇文章从什么是自动配置，工作原理 和 自动配置的生效条件 三个方面介绍了自动配置的相关知识点。自动配置又分为：&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;的自动配置 和 属性的自动配置&lt;/span&gt;，二者的实现原理不一样。自动配置的生效条件用得非常多，建议朋友们好好研究一下。至于如何自定义自动配置类，本篇没有讲，是因为我在另外一篇文章&lt;span&gt;《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484236&amp;amp;idx=1&amp;amp;sn=e7eb1011b39ab1f1bbeb46e1b6228b93&amp;amp;chksm=f9800596cef78c80416c7cdaa9177af8fac8c98959beea95af46c7ac45e8892f73228cb9f879&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;老司机手把手教你编写自己的springboot starter&lt;/a&gt;&lt;span&gt;》&lt;/span&gt;中仔细介绍过的，有需要的朋友可以自行查阅。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;如果这篇文档对您有所帮助的话，麻烦关注一下我的公众账号：苏三说技术，或者帮忙点赞或转发，坚持原创不易，您的支持是我坚持最大的动力。后面我会分享更多更实用的干货，谢谢大家的支持。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4e85ce03f6e05229e274a4d2ac2dcfd5</guid>
<title>肝了 3 版才满意：分布式系统之 CAP 理论，我们对它的理解和误解</title>
<link>https://toutiao.io/k/q2fkii4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;引言&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 理论，相信很多人都听过，它是指：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么要理解 CAP 理论？我能说出很多理由来。如果是在职场上，也许最合适的理由是，当领导给出的任务不靠谱时，我们可以依据 CAP 去否决它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，有这么一个任务，给你定了三大目标：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;既要提升系统的可用性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;又要保证数据的实时可见&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;还有提升系统的容错能力&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到“既要、又要、还要”，是不是想到了阿里……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，如果你深刻理解了 CAP，你会发现完成这个任务是不可能的。但是，如果你不理解 CAP，然后又拍了胸脯保证完成任务，不好意思，职场是不需要眼泪和后悔的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有点跑题了，书归正传。CAP 理论是分布式设计中最基础最重要的理论，不懂它，你可能连分析一套分布式系统的核心设计理念都做不到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于 CAP 为何你读了那么多文章都还是搞不明白呢？因为 CAP 理论来自学术界，而解读 CAP 理论的人尝试用工程师的方式去阐述它，这本身就有了问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 本身基于状态，基于瞬态，是一个描述性的理论，它并不解决工程问题。但是，很多工程师却总是尝试为 CAP 做过多解读。比如，非要说 CAP 理论只能适合某某场景，非要说 CAP 理论里的一致性是非常强的一致性，把其和事务的一致性混为一谈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 CAP 是学术理论，并不是工程理论，它会舍弃很多现实世界的问题。比如网络的时长，比如节点内部的处理速度不一致，比如节点间存储方式和速度的不一致。它说的一致性就是客户端是否能拿到最新数据，它说的可用性就是允许客户端拿不到最新数据。而这些东西被工程师们的过多脑补，导致了文章和文章说法不一样，解析不一样，阐述背景不一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在今天这篇文章中，我们只解释和说明，不脑补，不过多从工程角度解读，只说本质，只指核心，希望能真正说清楚、讲明白 CAP 理论。望本文能达到这个目的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来你看到文字，我前前后后写了 10 天，已经是这篇文章的第三版了，前两版写了一半都被我推翻重写了，因为我自己看了不满意。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一方面是对自己知识掌握程度不满意，本以为自己明白 CAP 了，直到写的时候，发现有些还是拿不准。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面是不满意自己的写的太晦涩、太教科书，能把知识讲的通俗易懂，才是我希望的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给大家看看文章上辈子的模样。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7de13Ay4VwjTWZWElOjvicFk1OVBgoX80dweibXdkf04QbQ7oQ2KicVjyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.2532188841201717&quot; data-w=&quot;466&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. CAP 的由来&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要理解 CAP，首先我们要清楚，为何会有人提出 CAP？提出 CAP 是为了解决什么问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间回到 1985 年，彼时，后来证明了 CAP 理论的 Lynch 教授此时给当时的 IT 界来了一记惊雷：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;她通过不可辩驳的证明告诉业界的工程师们，如果在一个不稳定（消息要么乱序要么丢了）的网络环境里（分布式异步模型），想始终保持数据一致是不可能的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是个什么概念呢？就是她打破了那些既想提供超高质量服务，又想提供超高性能服务的技术人员的幻想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本质是在告诉大家，在分布式系统里，需要妥协。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，如何妥协？分布式系统里到底应该怎么权衡这种 trade-off？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以想象一下，在 CAP 定理提出之前，没有这些方向性的指引，在设计和实施分布式系统时该有多么混乱。一套分布式系统是由多个模块组成的，这些模块本身可能由不同的开发人员去完成。然而，对于这些人，在公共层面，竟然没有一个原则去指导他们该怎么完成这套功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们在同步两个节点的数据时，如果发生了错误，到底我们应该怎么做呢？如果没有统一的标准和方向，那很可能在一套分布式系统中的不同模块，会出现不同的处理情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设一套系统，由 A、B 两个模块构成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;A 模块的设计理念是：节点间出现了问题，它可能会选择不断的重试，一直等到节点通信恢复。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7Sz5tMgqjRByonTWZ733mtfvC9vvgHcKIZpyKhQ88iaoLvFJiboXfDzxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.4981481481481482&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 B 的设计理念是：节点间出现了问题，它断开就是了，可能最多就记录下状态，等以后处理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7UBt01HgagILpplvO14XezPuYrfeicA5f1FTvyaXjDEBa4iaIrw84o15g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5212962962962963&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，当 A、B 之间出现了通信怎么办？那会出现 A 往 B 发请求，出问题会不断重试。而 B 往 A 发请求，出问题则直接断开的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，在后面我们会说明，CAP 的理念在实际工程中，会允许这种不一致。可是，那种不一致是提前设计好和规划好的，是根据实际数据的重要性和业务需求做的妥协，而不是这种混乱的妥协。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，IT 界的人们就一直在摸索，试图找到一些纲领去指导分布式系统的设计，这一找就找了 15 年。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2000 年时，Eric Brewer 教授在 PODC 会议上提出了 CAP 理论，但是由于没有被证明过，所以，当时只能被称为 CAP 猜想。这个猜想引起了巨大的反响，因为 CAP 很符合人们对设计纲领的预期。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2002 年后，经过 Seth Gilbert 和 Nancy Lynch 从理论上证明了 CAP 猜想后，CAP 理论正式成为了分布式系统理论的基石之一。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. CAP 到底是什么&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 定理表达了一个分布式系统里不可能同时满足以下的三个特性：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1. C：数据一致性&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是数据一致性？咋一看真的很让人糊涂，一致性是什么？是指数据能一起变化，是能让数据整齐划一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题又来了，数据何时会变化？数据怎么才能被称为一起变化？我们现在来回答这些问题，当我们搞清楚了这些问题，那么对数据一致性就会有了清晰的理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先第一个问题，数据何时会一起变化？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是：仅且仅当包含数据的服务，收到数据更新请求的时候，数据才会发生变化。而数据更新请求则仅包括数据的增、删、改这三种请求，而这三种请求又被统称为写请求。所以，数据只有在写请求的时候才会发生变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们来回答第二个问题，数据要怎么样才能被称为一起变化了？即谁来判断数据是最终变化了？是服务器对写请求的返回结果吗？告诉写请求成功，数据就一定发生一致性变化了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NO，数据发生变化是否一致是需要经过读请求来做检验的。那么读请求判断的依据是什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设，我们的分布式存储系统有两个节点，每个节点都包含了一部分需要被变化的数据。如果经过一次写请求后，两个节点都发生了数据变化。然后，读请求把这些变化后的数据都读取到了，我们就把这次数据修改称为数据发生了一致性变化。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7bUxeZKcABQ6lDc9oW7jpQ0aWRmQRb8ffTG6M8wBE5oHAeoGLEQicGJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.937037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，这还不是完整的一致性。因为系统不可能永久的正常运行下去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果系统内部发生了问题从而导致系统的节点无法发生一致性变化会怎么样呢？当我们这样做的时候，就意味着想看到最新数据的读请求们，很可能会看到旧数据，或者说获取到不同版本的数据。此时，为了保证分布式系统对外的数据一致性，于是选择不返回任何数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub75ichYvUC3DoHYNWg3O6121kumKUY2iayP6AhYeIPw0qOStQMwxBhfokA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6111111111111112&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里需要注意一下，CAP 定理是在说在某种状态下的选择，和实际工程的理论是有差别的。上面描述的一致性和 ACID 事务中的一致性是两回事。事务中的一致性包含了实际工程对状态的后续处理。但是 CAP 定理并不涉及到状态的后续处理，对于这些问题，后续出现了 BASE 理论等工程结论去处理，目前，只需要明白 CAP 定理主要描述的是状态。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2. A：可用性&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;奥维德曾经说过：“行动被人们遗忘，结果却将永存”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这句话说明了结果的重要性，而可用性在 CAP 里就是对结果的要求。它要求系统内的节点们接收到了无论是写请求还是读请求，都要能处理并给回响应结果。只是它有两点必须满足的条件：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;条件 1：返回结果必须在合理的时间以内，这个合理的时间是根据业务来定的。业务说必须 100 毫秒内返回，合理的时间就是 100 毫秒，需要 1 秒内返回，那就是 1 秒，如果业务定的 100 毫秒，结果却在 1 秒才返回，那么这个系统就不满足可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;条件 2：需要系统内能正常接收请求的所有节点都返回结果。这包含了两重含义：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果节点不能正常接收请求了，比如宕机了，系统崩溃了，而其他节点依然能正常接收请求，那么，我们说系统依然是可用的，也就是说，部分宕机没事儿，不影响可用性指标。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果节点能正常接收请求，但是发现节点内部数据有问题，那么也必须返回结果，哪怕返回的结果是有问题的。比如，系统有两个节点，其中有一个节点数据是三天前的，另一个节点是两分钟前的，如果，一个读请求跑到了包含了三天前数据的那个节点上，抱歉，这个节点不能拒绝，必须返回这个三天前的数据，即使它可能不太合理。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7r3q9LjBCW9uLCrIeUtaRjxGjYib0k1VkReHGelUXRVBpmkkb3XqfialQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.1111111111111112&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3. P：分区容忍性&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式的存储系统会有很多的节点，这些节点都是通过网络进行通信。而网络是不可靠的，当节点和节点之间的通信出现了问题，此时，就称当前的分布式存储系统出现了分区。但是，值得一提的是，分区并不一定是由网络故障引起的，也可能是因为机器故障。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们的分布式存储系统有 A、B 两个节点。那么，当 A、B 之间由于可能路由器、交换机等底层网络设备出现了故障，A 和 B 通信出现了问题，但是 A、B 依然都在运行，都在对外提供服务。这时候，就说 A 和 B 发生了分区。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一种情况也会发生分区，当 A 出现了宕机，A 和 B 节点之间通信也是出现了问题，那么我们也称 A 和 B 发生了分区。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，我们可以知道，只要在分布式系统中，节点通信出现了问题，那么就出现了分区。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub77AgVQ9MCqdibbNvp8cbfJhrd7kLJqCYXWNPUwIO7aIdr32b5M8iaVfAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.825925925925926&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，分区容忍性是指什么？它是说，如果出现了分区问题，我们的分布式存储系统还需要继续运行。不能因为出现了分区问题，整个分布式节点全部就熄火了，罢工了，不做事情了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7qoWQEM741EUG5J0n7Nwkoo2SKglgDAd3seFM7LlsMgkQafGTk9GPzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.8898148148148148&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. CAP 怎么选择&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们上面已经知道了，在设计分布式系统时，架构师们在 C、A、P 这三种特性里，只能选择两种。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，这道 CAP 的选择题，就像别人在问你“小明的父亲有三个孩子，老大叫大朗，老二叫二郎，请问老三叫什么”一样。在以分布式存系统为限定条件的 CAP 世界里，P 是早已经确定的答案，P 是必须的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为，在分布式系统内，P 是必然的发生的，不选 P，一旦发生分区错误，整个分布式系统就完全无法使用了，这是不符合实际需要的。所以，对于分布式系统，我们只能能考虑当发生分区错误时，如何选择一致性和可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而根据一致性和可用性的选择不同，开源的分布式系统往往又被分为 CP 系统和 AP 系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一套系统在发生分区故障后，客户端的任何请求都被卡死或者超时，但是，系统的每个节点总是会返回一致的数据，则这套系统就是 CP 系统，经典的比如 Zookeeper。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一套系统发生分区故障后，客户端依然可以访问系统，但是获取的数据有的是新的数据，有的还是老数据，那么这套系统就是 AP 系统，经典的比如 Eureka。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说了这么多，其实 CAP 定理本质很简单，它就是一种分布式系统设计的不同理念概括，包括它说的一致性，可用性和分区容错性。这就类似一个大学的校训，是极度概念化的东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，大白话来形容下 CAP 吧，CAP 就是告诉程序员们当分布式系统出现内部问题了，你要做两种选择：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;要么迁就外部服务，像外包公司。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要么让外部服务迁就你，像银行。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;迁就外部服务就是我们不能因为我们自己的问题让外部服务的业务运行受到影响，所以要优先可用性。而让外部服务迁就我们，就要优先一致性。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 对 CAP 的常见误解&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;误解一：分布式系统因为 CAP 定理放弃了 C 或者 A 中的其中一个&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人在没有对 CAP 做深入了解的情况下，听到很多人说分布式系统必须在 CAP 三个特性里选择两个，就觉得一套分布式系统肯定要么只有可用性要么只有一致性，不存在完整的可用性和一致性功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种理解是大有问题的。因为，P 这种问题发生的概率非常低，所以：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;当没有出现分区问题的时候，系统就应该有完美的数据一致性和可用性。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你什么时候见过一个系统，当内部没有问题的时候，会经常让外部请求卡一下的？要么就冷不丁的提供陈旧的老数据？那还能叫系统吗？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;误解二：C 和 A 之间的选择是针对整个分布式系统的，只能整体考虑 C 和 A 之间的选择&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个理解也是不对的。当分区发生的时候，其实对一致性和可用性的抉择是局部性的，而不是针对整个系统的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能是在一些子系统做一些抉择，甚至很可能只需要对某个事件或者数据，做一致性和可用性的抉择而已。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，当我们做一套支付系统的时候，会员的财务相关像账户余额，账务流水是必须强一致性的。这时候，你就要考虑选 C。但是，会员的名字，会员的支付设置就不必考虑强一致性，可以选择可用性 A。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一套分布式系统的运行，就像人生一样，就是一次又一次的选择。在不同阶段，不同的时刻有不同的事件发生的时候，又怎么可能会有完全一样的选择呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;误解三：CAP 的三个特性只有是和否两种极端选择，而不是一个范围&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种二元性的理解更是极其误导人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 理论的三种特性不是 Boolean 类型的，不是一致和不一致，可用和不可用，分区和没分区的这类二选一的选项。而是这三种特性都是范围类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿可用性来说，就像我从银行取钱。当我目的是派发压岁钱的时候，我很可能就想全要新票子，但是，新票子很可能就还得多一个步骤，就是需要拿旧票子去换一些新票，此时，我可以多等会儿，能拿到新票子就好。而当我的目的就是做生活花销的时候，票子是新是旧，我根本不那么关心，快点拿到钱就行。这就是可用性的范围需求之一，对时延性的要求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如，分区容错则由于探测机制的问题，可能还得各节点搞投票去协商分区是否存在，当某一台机器出现了问题，可能不影响业务的话，就会被机器投票认为分区不存在。然后一直等到多数机器出现了问题，才会投票确认出现了分区问题。这就好像新冠疫情，还会分低、中、高风险区呢，不是一出现通信故障就都被逻辑认定为分区问题。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. CAP 理论的一些疑问&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;疑问一：在遵从 CAP 定理的系统中是否适合任意的写请求&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，在 CAP 定理中，关于一致性会有多种说法，但是总的来说，都是在描述数据最新版本的可见性。而这些可见性往往代表的是读请求返回的数据的可见性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题来了，当我们要求读数据的可见性的时候，对写数据有什么要求吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们系统有三个节点，一个客户端给这个系统发了一个写请求，要求系统写入一个值为 20 的数据。那么，如果要满足 CAP 定理中的一致性，就需要在写完 20 这个数据之后，当其他客户端请求读取这个值为 20 的数据之后，无论请求被转发到系统中任何节点都能返回这个值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就要求写入这个值为 20 的写请求必须成功写到三个节点上，此时，系统就满足了写一致性的。所以，我们可以说对于读一致性的要求是同时约束了写一致性的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7vMa6aI6nPmmDuLtSVpvfJmJHqAWU7tOAbibYsn9oia9Z8lUJOtl5K17w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5324074074074074&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，在 CAP 定理中，可用性本身要求对读、写请求都要处理。如果我们以可用性作为标准的时候，在发生分区错误时，由于我们对读请求并没有强行要求返回完全准确的数据，所以，可能在本次读请求之前的最近一次写请求可能是部分失败的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的例子，我们的分布式系统由三个节点组成，最近一次写请求想把值为 20 的数据写到三个节点上。但是，由于发生了分区问题，有一个节点通信故障，写请求写不过去，因此只有两个节点包含了值为 20 的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，写请求会返回给客户端一个结果，可能会告诉客户端写入成功了，也可能告诉客户端写入部分成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，当后续的读请求恰巧被发送到有通信故障的那个节点，系统可能只能返回一个空的结果。但是，由于系统处理和返回了读写请求，所以，系统是满足了 CAP 中的可用性的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7IJRh1WQyaTgz3mHpBjxumrEVdtzXfOia0sj3iagzL9E4K7mYMwTgV5rg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5287037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;疑问二：数据分片和数据副本的分布式系统是否都遵守 CAP 定理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道，在一套大规模的分布式系统里，一定是既需要把海量数据做切分，存储到不同的机器上，也需要对这些存储了数据的机器做副本备份的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，如果，一个分布式系统里只有数据分片存储或者只有数据副本存储，他们都会遵守 CAP 定理吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是当数据分片时，也是要遵守 CAP 定理，但是，是种非常特殊的遵守。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当在一套分布式系统只有分片存储的时候，CAP 理论会表现成什么样？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们有个分布式系统，由三个节点 a、b、c 组成。其中节点 a 存放了 A 表的数据，b 存放了 B 表的数据，c 存放了 C 表的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有一个业务，它的意图是想往 A 表插入一条新数据，在 B 表删除一条已有数据，在 C 表更新一条老数据，这个分布式系统该怎么处理这种业务？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术上我们对这种一个意图想做多件事的情况往往会包装成一个事务。当我们包装成一个事务以后，我们可能会通过先在 a 节点执行，然后去 b 节点执行，最后去 c 节点执行，等到都成功了，才会返回成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，发生了分区以后怎么办？当在 a、b 节点都成功了，到 c 发现发生了通信故障？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，根据 CAP 定理，你有两个选择，要么就直接返回一个部分成功的结果给客户端，要么直接卡死等客户端超时或者返回失败给客户端。当返回部分成功的时候，这就是选择了可用性（A），当卡死或者返回失败给客户端的时候，就是选择了一致性（C）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，我们将请求包装成了事务，而事务是要求要么都成功，要么都失败……为了遵守这种要求，对于分布式只有分片的情况，迫于客观条件，只能选择C。所以分片的分布式系统，往往都是 CP 的系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可选择，但是无法选择是分布式系统只有分片数据存储的情况时，遵守 CAP 定理的特殊表现。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7B5JxhWjDyjGsOg9IlaggZfOxDl1F2ZqeibQ5mvic40wfvlcJ0qvRibblQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7537037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而当分布式系统是多个节点，每个节点存储了完整的一套数据，别的节点只是完整数据的备份的时候，即使事务只在一台机器上成功，当发生分区故障的时候，我们也是可以有充分的余地选择是&lt;strong&gt;单机事务的回退&lt;/strong&gt; or &lt;strong&gt;就此认为写成功的&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单机事务的回退，就可以对外表现为选择了一致性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7R0picGFzgA5TyCma6vKmf5gsibib4BNRBiafIFtIMA2OfeUm8ThCOQ03Cg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5203703703703704&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就此认为写成功，则可以认为选择了可用性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7fya5icVnbWbJbEzicEnx0glIDBe6IGmUcb66xUHnelVLhSnudUlJxauw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5018518518518519&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;疑问三：为何有时候区分一个系统是 AP 还是 CP 是如此之难&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为，就像我们前面讲过的，由于 AP 或者 CP 的选择，可能仅局限为整套系统的局部，甚至某些特殊的数据上，而我们又是用这种局部的特性去描述了整套系统，所以就导致了区分的困难。而这本身其实也日渐成为了 CAP 的一个大问题，从而被人诟病。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. CAP 的不足&lt;/span&gt;&lt;/h1&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CAP 定理本身是没有考虑网络延迟的问题的，它认为一致性是立即生效的，但是，要保持一致性，是需要时间成本的，这就导致往往分布式系统多选择 AP 方式&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;由于时代的演变，CAP 定理在针对所有分布式系统的时候，出现了一些力不从心的情况，导致很多时候它自己会把以前很严谨的数学定义改成了比较松弛的业务定义，类似于我们看到，CAP 定理把一致性、可用性、分区容错都变成了一个范围属性，而这和 CAP 定理本身这种数学定理般的称呼是有冲突的，出现了不符合数学严谨定义的问题。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在实践中以及后来 CAP 定理的提出者也承认，一致性和可用性并不仅仅是二选一的问题，只是一些重要性的区别，当强调一致性的时候，并不表示可用性是完全不可用的状态。比如，Zookeeper 只是在 master 出现问题的时候，才可能出现几十秒的不可用状态，而别的时候，都会以各种方式保证系统的可用性。而强调可用性的时候，也往往会采用一些技术手段，去保证数据最终是一致的。CAP 定理并没有给出这些情况的具体描述。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CAP 理论从工程角度来看只是一种状态的描述，它告诉大家当有错的时候，分布式系统可能处在什么状态。但是，状态是可能变化的。状态间如何转换，如何修补，如何恢复是没有提供方向的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. 引申出来的 BASE&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正因为 CAP 以上的种种不足，epay 的架构师 Dan Pritchett 根据他自身在大规模分布式系统的实践经验，总结出了 BASE 理论。BASE 理论是对 CAP 理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BASE 理论是实践工程的理论，它弥补了CAP 理论过于抽象的问题，也同时解决了 AP 系统的总体工程实践思想，是分布式系统的核心理论之一，我们将在下一篇文章里，详细的讲解此套理论。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. 大厂面试题&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在文章最后，来几道大厂关于 CAP 的面试真题，检验一下你的学习效果，hiahiahia&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;什么是 CAP 理论？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CAP 中的 P 是什么意思？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;为什么说分布式系统，只能在 C、A 中二选一？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;结合实际应用，CP、AP 该怎么选择？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;微信公众号改变了推送规则，&lt;span&gt;为了能正常看到文章，欢迎大家看完文章后，时常可以点点文末右下角的在看。&lt;/span&gt;&lt;span&gt;也可以把“四猿外”公众号加上星标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7068645640074211&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KTvmrffCdjtDe9IhiaiazkHSNbiakNHZfwfUkaYxUkn52dVFyfFewEHXbIs4bRU4b0HkqZbicN7hGtT1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;539&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我最近建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。欢迎加我微信，拉你入群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9852216748768473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KQibCDibpTo0kqofPehQvDDibibcb3bQUELdY3Knsl4r0RcgsV9l4icr3icmZQfaBXtSFNTxmdQlAZT1OQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;智能人工推荐&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484883&amp;amp;idx=1&amp;amp;sn=ae8c6aced4797e859fd2c224a11fea75&amp;amp;chksm=fcd8c992cbaf40848d237c4e499ec1ba7eff9fe5c3e9863af3a91e47782b5285b1673523e9cc&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;架构师的成长之路，第一步该怎么迈？我给大家准备好了&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484862&amp;amp;idx=1&amp;amp;sn=be1f32643415f605da7080f791ed64f9&amp;amp;chksm=fcd8c9ffcbaf40e936ac5aedde29c3b259026a2b2945ea195613087caab036df144f7c2d8937&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;优秀！一鼓作气学会“一致性哈希”，就靠这 18 张图了&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484826&amp;amp;idx=1&amp;amp;sn=35378fc344195edc643c5a68f896bc40&amp;amp;chksm=fcd8c9dbcbaf40cdcad84dd15b972afed8cf477f584748167ee67dc3a2a3532474497aa4d6c1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一个技术总监的忠告：精通那么多技术，你为何还是受不到重用？&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d22267c8960fdbf958878efe07d1531f</guid>
<title>来和大家聊聊我是如何刷题的（第三弹）</title>
<link>https://toutiao.io/k/ryuf0yg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前两篇的地址在这里，没有看过的同学建议先看下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本章或许是这个系列的最终章。这次给大家聊一点硬核的，聊一些几乎所有算法题都能用得上的超实用思想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一节给大家抛出了两个问题，分别是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「如何锁定使用哪种算法」&lt;/strong&gt;？比如我看到了这道题，我怎么知道该用什么解法呢？二分？动态规划？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一看就会，一写就废， 如何克服？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天，我就来圆一个当初吹下的牛逼。话不多说，直接上干货。如果你觉得有用，请三连支持我一下，让我能够坚持下去，给大家带来更多的干货。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何锁定使用哪种算法？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么很多人刚看了一眼题目就知道怎么解？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一种可能是 ta 之前做过同样或者类似的题目，形成了内在的记忆，直接提取了之前的记忆。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;另一种可能是题目给出了明确的提示信息，他们根据这些信息”蒙“的，这种蒙就是&lt;strong&gt;「题感」&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后一种是刚开始也没思路，尝试暴力解，发现某些步骤可以优化，慢慢剥茧抽丝，推导出最终答案。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们来聊下第二种和第三种。至于第一种则不是一篇文章能解决的，这需要大家多做题，并且做题的时候要多总结多交流。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;关键字&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关键字可以对解题起到提示作用。这很好理解，假设题目没有限制信息等关键字，那就是耍流氓，毫无算法可言了。比如”在一个数组中找 target“，这道题就很无聊，正常不会有这种算法题。可能的出题形式是&lt;strong&gt;「加上有序两个字，变成有序数组」&lt;/strong&gt;。那有序就是关键字了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他的例子有很多，接下来我们来看下常见的关键字以及对应的可能解法有哪些。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果题目是求极值，计数，很有可能是动态规划，堆等。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果题目是有序的，则可能是双指针。比如二分法。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果题目要求连续，则可能是滑动窗口。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果题目要求所有可能，需要路径信息，则可能是回溯。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上的这些只是看到关键词你应该第一时间想到的&lt;strong&gt;「可能解法」&lt;/strong&gt;，究竟正确与否，以及复杂度是否达标需要在脑子里二次加工。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;关于复杂度是否达标这一点，后面给大家介绍。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;限制条件&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多题目都会给一些数据范围的提示，大家一定要注意看。比如 &lt;code&gt;1681. 最小不兼容性&lt;/code&gt;，题目描述就不看了，我们不打算在这里讲具体怎么解。这道题的函数签名如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;minimumIncompatibility&lt;/span&gt;&lt;span&gt;(self, nums: List[int], k: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题的提示是这样的:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= nums.length &amp;lt;= 16&lt;br/&gt;nums.length 能被 k 整除。&lt;br/&gt;1 &amp;lt;= nums[i] &amp;lt;= nums.length&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到了这个你有什么想法么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意到 nums 的长度和值都很小，这道题很可能是暴力回溯 + 状态压缩。关于回溯和状态压缩技巧可以翻翻我的历史文章。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里再给大家一个超实用小技巧。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果 n 是 10 左右，那么算法通常是 n! 的时间复杂度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 n 是 20 左右，那么算法通常是 2^n 的时间复杂度&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此 &lt;code&gt;1681. 最小不兼容性&lt;/code&gt; 这道题的复杂度很可能就是指数级别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那为什么 10 左右就是 n!，20 是 2^n? 这里给大家介绍一个你可能不知道的技巧。请大家记住一个数字 &lt;strong&gt;「1000 万」&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7526881720430108&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGg5ciba4ZqJuKr8cGBKYftdElQ1NP3TBCwW1C1kLBGFLT0lIHpW08NGvw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;744&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面之所以是 10 左右， 20 左右就是因为你把 n 带进去差不多都是 &lt;strong&gt;「1000 万」&lt;/strong&gt;。再比如一道题是 n 是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^7&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -871.1 1403.6 893.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;37&quot; d=&quot;M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，那很可能是&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;复杂度，因为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10 ^7&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -871.1 1403.6 893.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;37&quot; d=&quot;M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 就是 &lt;strong&gt;「1000 万」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如，我之前写的一篇文章&lt;span&gt;《穿上衣服我就不认识你了？来聊聊最长上升子序列》&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;，上面所有的题时间复杂度都是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;N^2&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -833.9 1358.6 833.9&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(955, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，基本都可以通过所有的测试用例。为什么？因为题目数据范围差不多是 2500，那 2500 的平方是多少？是 600 多万，因此数据范围是 3000 以内， 平方差不多都可解，当然我说的只是大多数情况，并且需要注意&lt;strong&gt;「越接近临界值越可能超时」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如&lt;code&gt;1631. 最小体力消耗路径&lt;/code&gt;。题目描述：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;你准备参加一场远足活动。给你一个二维 rows x columns 的地图 heights ，其中 heights[row][col] 表示格子 (row, col) 的高度。一开始你在最左上角的格子 (0, 0) ，且你希望去最右下角的格子 (rows-1, columns-1) （注意下标从 0 开始编号）。你每次可以往 上，下，左，右 四个方向之一移动，你想要找到耗费 体力 最小的一条路径。&lt;br/&gt;&lt;br/&gt;一条路径耗费的 体力值 是路径上相邻格子之间 高度差绝对值 的 最大值 决定的。&lt;br/&gt;&lt;br/&gt;请你返回从左上角走到右下角的最小 体力消耗值 。。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例 1：&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGgIAtBSegzC31XuUBDG8fcDx5CHT2qmWaLn7JkrmKFLm1sK3OXcjDhNQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;323&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;输入：heights = [[1,2,2],[3,8,2],[5,3,5]]&lt;br/&gt;输出：2&lt;br/&gt;解释：路径 [1,3,5,3,5] 连续格子的差值绝对值最大为 2 。&lt;br/&gt;这条路径比路径 [1,2,2,2,5] 更优，因为另一条路径差值最大值为 3 。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题的函数签名如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;minimumEffortPath&lt;/span&gt;&lt;span&gt;(self, heights: List[List[int]])&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题的提示是这样的:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;rows == heights.length&lt;br/&gt;columns == heights[i].length&lt;br/&gt;1 &amp;lt;= rows, columns &amp;lt;= 100&lt;br/&gt;1 &amp;lt;= heights[i][j] &amp;lt;= 10^6&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们至少需要从左上走到右下，那么时间复杂度就已经是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(rows * columns)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 8341.4 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1603, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2088, 0)&quot;&gt;&lt;path data-c=&quot;77&quot; d=&quot;M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2804, 0)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3495.2, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4217.4, 0)&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4650.4, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5135.4, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5433.4, 0)&quot;&gt;&lt;path data-c=&quot;75&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6005.4, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6883.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7483.4, 0)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(7952.4, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 了。题目说了这两个数字都不大于 100，因此最大就是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^4&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -871.8 1403.6 893.8&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;34&quot; d=&quot;M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。而对于路线上的高度差绝对值的数据范围也不超过 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^6&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -864 1403.6 886&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;36&quot; d=&quot;M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;暴力法就是一个个试， 复杂度是二者直接相乘，也就是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^10&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -864 1903.6 886&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1403.6, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，大于前面给大家讲的 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^7&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -871.1 1403.6 893.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;37&quot; d=&quot;M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，因此这个复杂度通常是不能 AC 的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而上面说了 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(rows * columns)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 8341.4 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1603, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2088, 0)&quot;&gt;&lt;path data-c=&quot;77&quot; d=&quot;M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2804, 0)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3495.2, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4217.4, 0)&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4650.4, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5135.4, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5433.4, 0)&quot;&gt;&lt;path data-c=&quot;75&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6005.4, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6883.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7483.4, 0)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(7952.4, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 是不可能省的，因为你至少要走一次。但如果 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^6&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -864 1403.6 886&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;36&quot; d=&quot;M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 不是线性去试，而是指数的话呢？而指数复杂度首先想到二分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此题的伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;minimumEffortPath&lt;/span&gt;&lt;span&gt;(self, heights: List[List[int]])&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;&lt;span&gt;(mid, x, y)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# dosomething&lt;/span&gt;&lt;br/&gt;        l, r = &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;**&lt;span&gt;6&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 最左满足条件的值的二分模板。大家可以去 leetcode-cheatsheet 插件获取更多算法模板&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; l &amp;lt;= r:&lt;br/&gt;            mid = (l + r) // &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# 测试有没有一条路径从(0,0)出发到达(rows-1,cols-1)，且路径上的高度绝对值差不大于 mid&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; test(mid, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;):&lt;br/&gt;                r = mid - &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;                l = mid + &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; l&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你说 &lt;strong&gt;「1000 万这个数字重要不重要」&lt;/strong&gt;？1000 万不仅是我的人生目标，更是做题时刻铭记的一个数字！^_^&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;暴力优化&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后给大家介绍的”识别题目可能的解法“的技巧是暴力优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一句话概括就是&lt;strong&gt;「先暴力解，然后思考性能瓶颈，再尝试使用数据结构和算法对瓶颈进行优化」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 &lt;span&gt;316. 去除重复字母&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;，我就是先暴力求出来。发现每次都直接判断是否在是否在栈上需要 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的时间，太慢了。由于我就用了哈希表进行优化。而使用哈希表这点，绝对不是我一开始就想到的，而是先暴力求解，求解的过程发现算法的性能瓶颈才意识到该用哈希表的。关于这道题的详细的解法就不再这里讲了，大家点进去看我的题解就行。或者直接去力扣搜题，排名第一的非官方题解应该就是我。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结一下就是，大家一定不要小看暴力法。暴力法解出来剪剪枝说不定就过了。如果不过，思考下瓶颈在哪，用合适的数据结构和算法优化一下说不定也就过了。这可不是随便说说。比如下面要讲的硬币找零问题，就是暴力解发现瓶颈，加个记忆化去除重复子问题就是动态规划了&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一看就会，一写就废， 如何克服？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这个问题，之前我给大家的建议是&lt;strong&gt;「多复习」&lt;/strong&gt;， &lt;strong&gt;「多动手写」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来我和几个朋友聊了一下，发现自己有点&lt;strong&gt;「幸存者偏差」&lt;/strong&gt;。我发现很多人&lt;strong&gt;「在没有算法思维的情况下就开始学习算法了」&lt;/strong&gt;，这很不可取。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过算法思维这东西你让我在这一篇文章给你整的明明白白的，这也不现实。今天我给大家分享一个我认为最最重要的一个算法思想 - &lt;strong&gt;「分治」&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;分治思维&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“一看就会，一写就废， 如何克服？”，有一个可能是你没有分治思维。我们的大脑天生适合&lt;strong&gt;「处理一些简单」&lt;/strong&gt;的东西，而不适合处理看起来就很复杂的东西。因此面对一个很复杂的东西，第一件事情应该是思考&lt;strong&gt;「是否可以将其分解」&lt;/strong&gt; ，然后逐个击破。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子给大家，如下是一道力扣的 hard 题 &lt;span&gt;《2 出现的次数》&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;，题目描述如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;编写一个方法，计算从 0 到 n (含 n) 中数字 2 出现的次数。&lt;br/&gt;&lt;br/&gt;示例:&lt;br/&gt;&lt;br/&gt;输入: 25&lt;br/&gt;输出: 9&lt;br/&gt;解释: (2, 12, 20, 21, 22, 23, 24, 25)(注意 22 应该算作两次)&lt;br/&gt;提示：&lt;br/&gt;&lt;br/&gt;n &amp;lt;= 10^9&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人一看到题就蒙了，这要多少种情况啊? 总不可能一个数字一个数字试过去吧？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;其实看一眼数据范围中 n 上限是 10^9，大于 1000 万，就知道不能这样暴力。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是悄悄打开题解，不仅感叹“原来是这样啊！”，“这怎么想到的？这什么脑子啊！”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来让我告诉你，你缺啥。你缺的不是一个好使的脑子，而是一个&lt;strong&gt;「懂得将复杂问题变成若干个简单问题的意识和能力」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以这道题来说， 我可以将其分解为几个子问题。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;从 0 到 n (含 n) 中 &lt;strong&gt;「个位」&lt;/strong&gt; 数字 2 出现的次数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从 0 到 n (含 n) 中 &lt;strong&gt;「十位」&lt;/strong&gt; 数字 2 出现的次数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;。。。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终的答案就是以上几个&lt;strong&gt;「子问题的和」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过这样的思路，大家一下子就能打开思路。剩下的任务就简单了。因为每次固定一位之后，就将数字分为了左右两部分，那么该位是 2 的次数就是左右所有可能的笛卡尔积，即 a * b。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.31759656652360513&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGgvYJEV9JLEldyNolF6EsBjETsesicRNCxqh0ttw36XA9N2AxZFlibMB0Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;932&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 n 是 135。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;百位上不可能是 2，因为 2xx 一定超过 135 了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那十位有多少个 2 呢？按照上面的思路：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;左边就是百位，百位可能是 0 或者 1，共 2 种可能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;右边就是个位，个位可能是 [0 - 9] 共 10 种可能。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么十位是 2 的次数就是 2 * 10 = 20。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那个位有多少个 2 呢？按照上面的思路：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;左边就是十位和百位，其可能是 [0-13]，共 14 种可能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;右边啥都没有，1 种可能。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么个位是 2 的次数就是 14 种。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此不超过 135 的数字中 2 的出现次数就是 20 + 14 = 34 种。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这里面还有一些细节，比如如果某一位比 2 小或者正好是 2 怎么办？我就不在这里讲了。这里直接贴下代码，大家自己继续完成好了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;numberOf2sInRange&lt;/span&gt;&lt;span&gt;(self, n: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        ans = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        m = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; m &amp;lt;= n:&lt;br/&gt;            cur = n // m % &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; cur &amp;gt; &lt;span&gt;2&lt;/span&gt;: ans += (n // m // &lt;span&gt;10&lt;/span&gt; + &lt;span&gt;1&lt;/span&gt;) * m&lt;br/&gt;            &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; cur == &lt;span&gt;2&lt;/span&gt;: ans += n % m + &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;                ans += (n // m // &lt;span&gt;10&lt;/span&gt;) * m&lt;br/&gt;            m *= &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ans&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;把 2 换成其他数字 x，那就可以计算不超过 n 的 x 的出现次数。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举这个例子就想告诉大家为啥一些题目你压根就没有思路的原因：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;要么就是这种题没见过，那没办法，多做题呗。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要么就是你算法思维还不够。比如我上面讲的分治的算法思维。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一看就会又说明&lt;code&gt;这种题你是回答过的&lt;/code&gt;，因此&lt;strong&gt;「一看就会，一写就废，一般都是没有养成良好的算法思维，而分治就是一种非常重要的算法思维」&lt;/strong&gt;。当算法思维有了，剩下的细节就慢慢练习就好了，这没有捷径。但是算法思维是有捷径的，大家在刷题之前要特别注重算法思维的学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我再举几个例子给大家，帮助大家加深理解。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;三个题目带你理解分治思想&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在一个数组 nums 中找值为 target 的元素，并返回数组下标，题目保证 nums 中有且仅有一个数等于 target。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回  -1。你可以认为每种硬币的数量是无限的。（322. 零钱兑换）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。（51. N 皇后）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这几道题覆盖了简单中等和困难三种难度。接下来，我们来看下这几个题。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;第一题&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于第一题， 答案无非就是 [0, n - 1]。因此我们可以将问题分解为以下几个子问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;是 0 么？no&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是 1 么？no&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是 2 么？no&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;。。。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6259445843828715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGgicvkiaZdWDeJxq7T6mIIqict0n2bXyIRVmiaQrrkJrdBZIdpicKsRS9lbWg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1588&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终的答案就是子问题中回答为 “yes” 的索引。严格意义上来说，这里只有分，没有治，而且这个分和前面的分有微妙的差异。前面的分完之后后面还要用，这个分是直接给扔掉了。类似的有二分法，二分法就是一种只有分没有治的“分治法”。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;第二题&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;coins 是个变量， amount 也是变量，它们关系感觉好多的样子？我该怎么理清呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们从特殊入手，比如 coins = [1, 2, 5], amount = 11。为了方便描述，原问题我用 f([1,2,5], 11) 表示 coins 为 [1,2,5]，amount 为 11 的最少需要多少硬币凑齐。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我也不知道最终的&lt;strong&gt;「最少硬币方案」&lt;/strong&gt;是怎么选的。那我就所有情况都走一遍呗，比较一下哪种方案用硬币最少就用哪个不就行了么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终的算法还真就是基于这个朴实的想法来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选第一枚硬币的时候，一共只有三种情况：选择 1，选择 2，选择 5。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果我们先选了 1，那么再凑出 10 就行了。那怎么凑出 10 呢？不就是 f([1, 2, 5], 10) 么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果我们先选了 2，那么再凑出 9 就行了。那怎么凑出 9 呢？不就是 f([1, 2, 5], 9) 么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果我们先选了 5，那么再凑出 6 就行了。那怎么凑出 6 呢？不就是 f([1, 2, 5], 6) 么？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面是选取一个硬币的情况，由于没有凑到 amount，我们继续重复，直到凑到 amount。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是你可以画出类似如下的逻辑树结构，由于节点太多我没有画全。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5425790754257908&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGgvXngUlPGaib4JoXhAlonVKgh0wWNmyO1hGCeIYR3qBghibc7c4Ru2aicg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1644&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有没有发现你的大脑直接处理大问题没有思路，但将其分解为小问题就简单了许多？&lt;strong&gt;「分」&lt;/strong&gt;完了，我们还要&lt;strong&gt;「治」&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这就好像你是主管，向下面布置了作业，布置完了你还要收作业将他们汇总起来搞个 ppt 啥的。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过这也不难。由于问题是最少硬币，那么治就取最少呗。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt; + min(f([&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;], &lt;span&gt;10&lt;/span&gt;),f([&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;], &lt;span&gt;9&lt;/span&gt;),f([&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;], &lt;span&gt;6&lt;/span&gt;))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结一下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题的分我们可以从几个特例入手就可以打开思维。上面的&lt;strong&gt;「分」&lt;/strong&gt;的手段用伪代码描述就是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; coin : coins) {&lt;br/&gt;    f(coins, amount - coin)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分完了就是处理边界和&lt;strong&gt;「治」&lt;/strong&gt;了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整的分治代码就是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;(coins, amount)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (amount &amp;lt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;// 非法解，用正无穷表示&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Float.POSITIVE_INFINITY&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 叶子节点&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (amount == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;// 找到一个解，是不是最小的”治“阶段处理。&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; ans = Float.&lt;span&gt;POSITIVE_INFINITY&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;span&gt;int&lt;/span&gt; coin : coins)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ans = Math.min(ans, &lt;span&gt;1&lt;/span&gt; + f(coins, amount - coins))&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; ans&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;为了突出我的算法主框架，略去了一些细节。比如原题在无解的时候需要返回 - 1，而我返回的是正无穷。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果之前做过这道题的朋友应该知道这是一个典型的背包问题。如果现在让我做，我可能也直接自底向上 dp table 解决了（不过 dp table 和记忆化递归没有本质的思维差别）。但是算法是如何想出来的这一点，是如何一步一步优化的，大家一定&lt;strong&gt;「钻到底」&lt;/strong&gt;，这样刷题效率才高。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;第三题&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不懂题目意思的可以去看下力扣原题 51. N 皇后。这道题就是典型的回溯题目，什么是回溯？一言以蔽之，那就是一个一个试，不行了就返回上一步继续试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么多格子我该放哪呢？每个格子还有制约关系！好乱，没有思路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;别急，继续使用分治的思维。这道题是让我们将 N 个皇后放到 N X N 的棋盘上。那不就是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一行的皇后应该放到第几列？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二行的皇后应该放到第几列？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三行的皇后应该放到第几列？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;。。。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;改成”第 x 列的皇后应该放到第几行？”这种子问题划分模式也是可以的。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;placeRow&lt;/span&gt;&lt;span&gt;(i)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 决定应该放到第几列&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++) {&lt;br/&gt;    placeRow(i)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果上面的子问题都解决了，那整个问题不就解决了么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是上面的子问题，还是无法直接解决。比如“第一行的皇后应该放到第几列？”我也不知道啊。没关系，我们继续对“第一行的皇后应该放到第几列？” 这个问题进行分解。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一行的皇后放到第 1 列么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第一行的皇后放到第 2 列么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第一行的皇后放到第 3 列么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;。。。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续完善上面的 placeRow 代码即可。这里给出伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;  &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;canPlaceQueue&lt;/span&gt;&lt;span&gt;(i, j)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 根据目前的棋局（放了是否能不相互攻击），分析 i 和 j 这个位置能否放女王。&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;placeRow&lt;/span&gt;&lt;span&gt;(i)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;n;j++) {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (canPlaceQueue(i, j)) {&lt;br/&gt;            &lt;span&gt;// 将女王放到 (i,j)，更新当前棋局&lt;/span&gt;&lt;br/&gt;            placeQueue(i, j)&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.679144385026738&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGgTnAqsmo88nTzaZrjdcPBWRYJZaLkxAQZFmXlQ9ts45wX1On7mDFLNg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1496&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在的问题就只剩下实现&lt;code&gt;canPlaceQueue(i, j)&lt;/code&gt; 和 &lt;code&gt;placeQueue(i, j)&lt;/code&gt;了，这两个函数根据题目要求模拟实现即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是我们做了一个&lt;code&gt;placeQueue(i, j)&lt;/code&gt; 的操作，这&lt;strong&gt;「可能」&lt;/strong&gt;是一个 mutable 的操作。因此如果一条路行不通需要回溯，那么 mutable 的数据需要撤销修改。当然如果你的数据是 immutable 就无所谓了。不过 immutable 则有可能内存移除或者超时的风险。&lt;/p&gt;&lt;img data-ratio=&quot;0.44594594594594594&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGgDib26ddx4ib3bZZ8q4NsduCC0ahqNrdjnfsdWzic2SB6MJXOQfVR0aJtg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2368&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于这里只是讲思维的，不是讲题目本身的，因此还是点到为止，后面的算法细节我就不讲了，希望读者能自己将代码完善一下。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;更多&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似的例子实在太多了，根本举不过来，我随口给大家说几个。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果让你求一个数组的连续子数组总个数，你会如何求？其中连续指的是数组的索引连续。比如 [1,3,4]，其连续子数组有：[1], [3], [4], [1,3], [3,4] , [1,3,4]，你需要返回 6。分治就好了，连续子数组个数等于：以索引为 0 结尾的子数组个数 + 以索引为 1 结尾的子数组个数 + … + 以索引为 n - 1 结尾的子数组个数&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;70. 爬楼梯&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 让你求爬到最后一级台阶有多少种方法。这太多了，我数不过来。但是我可以将其分解成两个子问题。如果我用 f(n) 表示爬到第 n 级的方法数，那么 f(n) = f(n - 1) + f(n - 2)。但是 n - 1 我也不会啊，没关系，我们继续分解。这和上面的硬币问题有多大差别么？对于这道题，分就是拆成两个子问题，治就是求和。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6179245283018868&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGgzUWX7eGxLOkEwPSpI6eYCBJNhR9BNaLKkPmW1KXw9AOLIPmLJt8XbQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;848&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这就是最简单的无选择的&lt;strong&gt;「递推」&lt;/strong&gt;动态规划&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;746. 使用最小花费爬楼梯&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; 换了个皮又来了？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;220 场周赛 - 跳跃游戏 VI 这不还是上面爬楼梯换皮么？这次变成了一次能爬 k 级台阶罢了。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4970131421744325&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGgXeiaribKUhkxiaia7eQHib60YtYYJzMibBvTSJDXsMic2icVo0SiabytcONTTkQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1674&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这道题数组长度是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^5&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -864 1403.6 886&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;35&quot; d=&quot;M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，如果不做优化复杂度会是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;N^2&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -833.9 1358.6 833.9&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(955, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，算起来就是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^10&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -864 1903.6 886&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1403.6, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 过不了，大于上面给大家讲的 1000 万。如何优化有点跑题了，就不在这里讲了。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;62. 不同路径&lt;sup&gt;[6]&lt;/sup&gt; 穿个二维的衣服就看不出你是爬楼梯了？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6820512820512821&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGgH4QyiciaGg5kq13EnWgf1gXSOPXyKGQcZ4ennOVzoIUESQiccoTR85oicA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;780&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相关换皮题目太多，大家可以去我的插件里看。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8084210526315789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTcztPvFbyC0r0Yu3sMguIGgmfwZsGc8gCa8GfDicdGktuA54buvp8TYeNSUMANhAodAo0ibhdEhewlQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;950&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次给大家分享了一个很重要的算法思想&lt;strong&gt;「分治」&lt;/strong&gt;，很多题都可以用到这个思想。能运用分治思想的专题有“动态规划”,”分治“，“回溯” 等，大家在平时做题的时候可以参考我的这种思考方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你碰到一个复杂的问题，可以尝试以下几个方法。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;不妨先尝试将其拆解，看能否将其拆解成几个小问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在草稿上画画图，从特殊情况入手，看能否发现什么蛛丝马迹&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;暴力模拟。看能否通过剪枝和添加恰当的数据结构来优化算法，使之通过。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你有更好的干货技巧，非常希望你能和我交流，万分期待！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了算法思想，我还和大家分享两个超实用的技巧，分别是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;看关键字。关键字很多时候起到了提示作用，甭管对不对，咱要想到。想到之后迅速脑子中过一下能不能 AC。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;看限制条件。记住一个数字就行了，1000 万。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后和大家说了一个小心得 - ”不要小看暴力法“。暴力法不仅能帮助你打开思路，有时候甚至暴力 + 剪枝（或数据结构优化）就过了。&lt;strong&gt;「大力出奇迹，欧耶！(^o^)/」&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;爱心三连击&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;1.看到这里了就点个在看支持下吧，你的&lt;strong&gt;在看&lt;/strong&gt;是我创作的动力。&lt;/p&gt;&lt;p&gt;2.关注公众号&lt;strong&gt;力扣加加&lt;/strong&gt;，带你啃下算法这块硬骨头！&lt;strong&gt;加个星标&lt;/strong&gt;，不错过每一条成长的机会。&lt;/p&gt;&lt;p&gt;3.如果你觉得本文的内容对你有帮助，就帮我&lt;strong&gt;转发&lt;/strong&gt;一下吧。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;穿上衣服我就不认识你了？来聊聊最长上升子序列: &lt;span&gt;https://lucifer.ren/blog/2020/06/20/LIS/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;316. 去除重复字母: &lt;span&gt;https://leetcode-cn.com/problems/remove-duplicate-letters/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-4/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;《2 出现的次数》: &lt;span&gt;https://leetcode-cn.com/problems/number-of-2s-in-range-lcci/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;70. 爬楼梯: &lt;span&gt;https://leetcode-cn.com/problems/climbing-stairs/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;746. 使用最小花费爬楼梯: &lt;span&gt;https://leetcode-cn.com/problems/min-cost-climbing-stairs/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;62. 不同路径: &lt;span&gt;https://leetcode-cn.com/problems/unique-paths/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>