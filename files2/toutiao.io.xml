<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>aa8b9b7db22de7209399f7bd8541dfca</guid>
<title>https引起的跨域问题-COE&amp;casestudy</title>
<link>https://toutiao.io/k/bim4wzo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;问题很简单，开发一个后台服务。这个服务呢，包含了几个团队的后台服务之间的相互调用。这些后台服务之间的顶级域名(相关概念后面会解释)相同，请求却报错说有跨域问题。经调查，原因是调用方是http服务，被调用方是https服务，引起的跨域问题。如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5040983606557377&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibVMxkeEkgWAyRgXpvBFIp0vUl4LnKIGibq7c9drnW8OFty66GCpjavW7dbWOmgvwnQlTXeaCcUkbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;488&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里假设问题到生产环境才发现，本篇使用COE的写法来论述问题。COE(correction of error)更正错误，是很多公司用来做问题或者事故复盘的手段。COE因为名称中带着“有人犯错啦”的意思，很多公司为了表明“追究责任不是目的，重要的是吸取教训，避免同样和同类的问题”，把COE叫做casestudy个案研究。实践证明，不管叫什么，恐惧一点也不会减少。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5058977719528178&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibVMxkeEkgWAyRgXpvBFIp0EAlk0ViasRvadDIggvlVIHQaicfmhhIXJj4icJNJDgGiaAZouMMiaHThYPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;事故描述&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;red服务从前端调用gray服务时报错：跨域错误。经排查确认由于http的域名下从前端调用https导致。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;事故责任人&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;都是我的错&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;事故影响&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;新服务上线，无正式业务接入，无业务影响。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;时间线&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;14:00 灰度发布新版本并进行验证&lt;/p&gt;&lt;p&gt;14:20 验证发现使用Chrome浏览器通过【检查】-【网络】功能观察到发起了一个OPTIONS类型的COR跨域请求，请求报错：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4275&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/2tk5ianItRl8VKfdZ0mhHrQgeXt1r32v8QYNoluojvc0sbxBx07FBneeibibZia7Q6OLnpeGGicibxu6YBMgKFqnFBvA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;15:00 确认是http访问https导致违反了同源策略，导致跨域问题。新服务上线，无正式业务接入，无业务影响。所以未进行版本回滚。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;根本原因分析&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1、为什么会发生问题？&lt;/p&gt;&lt;p&gt;出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。当一个资源从与该资源本身所在的服务器不同源，请求一个资源时，资源会发起一个跨域 HTTP 请求。&lt;/p&gt;&lt;p&gt;同源的判断标准是：&lt;/p&gt;&lt;p&gt;以上三者都要相同。发生问题的请求，由于其中域名默认只要求顶级域名相同，此条件满足；协议一个是https，一个是http，不满足；https端口为443，http端口为80，不满足。总体不满足同源策略，而且被访问的后端没有做跨域处理。&lt;/p&gt;&lt;p&gt;2、为什么没有做跨域处理？&lt;/p&gt;&lt;p&gt;因为顶级域名相同，并未考虑到有跨域问题。且整个在测试环境下测试通过，并未发生问题。&lt;/p&gt;&lt;p&gt;3、为什么测试环境没有问题？&lt;/p&gt;&lt;p&gt;因为测试环境，同时支持http和https两种方式，当时配置时没有考虑两者直接的差异，直接使用http的路径。&lt;/p&gt;&lt;p&gt;在生产环境，根据安全的要求，关闭了http方式，只能使用https方式，造成问题。&lt;/p&gt;&lt;p&gt;4、为什么调用端使用http协议？&lt;/p&gt;&lt;p&gt;因为调用端的框架是几年前的老系统，线上环境追求稳定性，变更成本高，目前还维持之前的现状。&lt;/p&gt;&lt;p&gt;5、为什么调用方是post调用，实际上的请求却是options?&lt;/p&gt;&lt;p&gt;出于安全考虑，并不是所有域名访问后端服务都可以。其实在正式跨域之前，浏览器会根据需要发起一次预检（也就是option请求）。预检请求不成功，不会发起正式请求。&lt;/p&gt;&lt;p&gt;浏览器将CORS请求分为两类：简单请求（simple request）和非简单请求（not-simple-request）,简单请求浏览器不会预检，而非简单请求会预检。&lt;/p&gt;&lt;p&gt;同时满足下列三大条件，就属于简单请求，否则属于非简单请求&lt;/p&gt;&lt;p&gt;对于简单请求，浏览器直接请求，会在请求头信息中，增加一个origin字段，来说明本次请求来自哪个源（协议+域名+端口）。服务器根据这个值，来决定是否同意该请求，服务器返回的响应会多几个头信息字段，如图所示：上面的头信息中，三个与CORS请求相关，都是以Access-Control-开头。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Access-Control-Allow-Origin：该字段是必须的，* 表示接受任意域名的请求，还可以指定域名&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Access-Control-Allow-Credentials：该字段可选，是个布尔值，表示是否可以携带cookie，（注意：如果Access-Control-Allow-Origin字段设置*，此字段设为true无效）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Access-Control-Allow-Headers：该字段可选，里面可以获取Cache-Control、Content-Type、Expires等，如果想要拿到其他字段，就可以在这个字段中指定。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;经验教训&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;首先是知识方面：之前对同域有误解，认为只需要顶级域名相同。实际上需要符合域名、协议和端口三者同源的同源策略。&lt;/p&gt;&lt;p&gt;其次是没有对线上线下的差异做仔细的调研分析。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;后续优化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;首先要修复问题，跨域有风险。可以使用调用方自带的代理功能。被调用方提供一个RPC调用，调用方使用代理来转换。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;小知识&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;根域名&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;简单的来说就是类似.com这种，或者中国的.cn英国的.uk日本的.jp，这些是由“互联网名称与数字地址分配机构”（The Internet Corporation for Assigned Names and Numbers ，简称ICANN）来分配的。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;顶级域名&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;简单来说顶级域名就是就是在根域名的前面加上你自己定义的字母或数字等字符串包括连字符-（包括连字符但是不能连续是连字符，且连字符不能在第一个）例如这样web.com或者web.cn这样的既是顶级域名。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二级域名&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;当你注册了一个顶级域名后，例如web.cn，你就可以在你的互联网服务提供商的dns解析系统上自由分配你的二级域名或者三级域名等等，web1.web.cn,web2.web1.web.cn等等，以此类推根域名前面有几个字符串就是几级域名。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d081e3cebb803036ea6694458e4e2276</guid>
<title>网易严选实时计算平台建设实践</title>
<link>https://toutiao.io/k/67cbep8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-backh=&quot;156&quot; data-backw=&quot;562&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;156&quot; data-fileid=&quot;100072321&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjicBGnN2Sv2xfMf0eh07fxe53FSEJr7ogaf9QJMSV0iboV8bKNibavEhvl3VqpqOQVXI1r4kwgIhLjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;288&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.49676025917926564&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9j8KEfvKP46qoDSC0viaxOlicn6EkZck12iaRPMcTxRsHcEFoxeibiaBoU2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1852&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-bottom: -10px; margin-left: -8px; max-width: 100%; width: 18px; height: 18px; border-top: 8px solid rgb(54, 65, 173); border-left: 8px solid rgb(54, 65, 173); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;br data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;section data-bgopacity=&quot;50%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot; data-style=&quot;max-width: 100%; width: 543.333px; background: rgb(247, 247, 247); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;分享嘉宾：王杰瑞 (前)网易 资深服务端研发&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;编辑整理：宋灵城&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;出品平台：DataFunTalk&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; width: 18px; height: 18px; border-bottom: 8px solid rgb(54, 65, 173); border-right: 8px solid rgb(54, 65, 173); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;网易严选作为一家品牌电商，对数据实时驱动业务有较高要求。在严选，实时计算被广泛应用在实时数仓、风控、业务监控等场景中。本文将分享网易严选实时计算平台的建设思路和实践，并介绍平台后续的一些发展规划。从如下几个方面展开：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;背景介绍&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实时任务SQL化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Flink服务化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据治理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;后续规划&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;背景介绍&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 发展历程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;网&lt;/span&gt;&lt;span&gt;易严选是一家电商平台，我们的业务链路主要涉及商品采购，销售，物流以及售后等一系列服务，拥有非常丰富的数据业务使用场景，在很多业务决策上都需要用到实时的数据来进行分析，因此，平台本身对数据的时效性和准确性有很高的要求。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;326&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9l8bTmJ2fv7ArBUVSH1L7dpERN0BVIvMGibhMJB2dicphcQIkvn769laA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;从2017年开始，我们进行平台化的建设，在整个过程中，我们的发展历程如上图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 平台现状&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm92Mia79cjKxtqcckibLjiar83bvA9GiaZXLwxy11ibSgoicbxrOhbGsSbicOag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前，整个平台大概运行了5000多个任务，每天峰值流量可以达到每秒2000万左右，平台从数据采集到对外提供服务，整体延时在秒级别。在网易严选，实时计算覆盖的场景非常丰富，比如：实时大屏，实时风控算法，日志业务监控以及APM预警等基础服务方面的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 平台架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9WicXGYV0cTL8XYoiaIeWsOg0dwLJZkYsWfLjIAocO6pGGjQicPGLV0fSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图是我们实时计算平台的整体架构图，最底层是数据的基建层，主要提供了kafka、pulsar等消息队列，Yarn、K8s等计算资源以及其他存储组件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数据基础架构层之上，我们做了一个服务化的抽象，主要是为了屏蔽Flink任务和底层基础设施的交互过程，以服务的形式开放给上层平台或第三方系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再往上是平台层，是应用开发的主要入口，我们向用户提供了开发运维等使用功能，以及监控报警等基础功能，同时我们也提供了元数据管理，血缘分析等任务治理方面的工具。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在平台层的基础上，我们基于实时计算构建了丰富的应用，比如ETL，数仓，风控等一系列数据方面的应用。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;实时任务SQL化&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;在大数据领域，无论是实时计算还是离线计算，整体的发展趋势都是朝着SQL化的方向在演进。&lt;/span&gt;&lt;span&gt;我们平台建设之初，用户需要使用java或者scala自行编写Flink任务jar包，托管到平台上运行。这种方式存在两个问题：&lt;/span&gt;&lt;span&gt;一个是开发门槛相对较高，另一个问题是在任务调试和线上调优时非常困难。&lt;/span&gt;&lt;span&gt;所以我们希望提供一个能开箱即用的开发环境，来降低用户使用实时计算的门槛。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;326&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9mySic0h8ZxgjibiaeWmwtIF2f1IESvOtHkUnoOr86eVHfnjTWdfEXxTOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图是Atom开发平台，是我们提供的FlinkSQL开发IDE，用户可以在这里完成整个任务的开发，调试以及上线等过程，并且Atom集成了统一元数据，UDF仓库以及版本控制等基础功能，能进一步提升用户开发SQL任务的效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SQL平台的设计思路主要围绕如下四个方面展开：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9Lqmjib4vA0aaCUYBLZ4jYQMHPzwHJxDz5fxIbeiaL0cYkbGIib8CTiau0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 统一元数据管理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9V1rwXunHPGLfANlQWKzKBAxkQHVvrzgcQjCKANKkZdTRxHm2JWhYUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在元数据管理方面，初期我们通过DDL语句将外部存储以表的形式映射到FlinkSQL中，这样做存在明显的缺点，一个是使用起来非常繁琐，另一个是应用之间服务无法复用。因此为了避免开发前的繁琐工作，我们对主流的存储（比如：kafka，Hbase等）做了全方位的打通，用户开发过程中不需要关心具体的消息格式问题，IDE会提供统一的格式解析插件来处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. UDF管理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9xzpUEiam0MicEWWdyhy7OhY0GLly8Httbic5bPX9IUXhD9XEry9iaToTlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;在UDF方面，首先我们对FlinkSQL本身所欠缺但是很常用服务做了扩展，比如说Json解析，时间处理以及近似去重等。&lt;/span&gt;&lt;span&gt;另外，我们提供了UDF仓库，类似于maven仓库，用户可以自由的去上传自定义的UDF，仓库会对这些UDF做统一的管理和复用，等它发布后，这些UDF就可以在不同开发人员之间共享。&lt;/span&gt;&lt;span&gt;当一个任务需要引用某一个UDF后，平台会自动去完成资源的加载和UDF的注册。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 功能扩展&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9JZx44x0Tel9yeOlW7gXYjXeCE978nWSO4Am7Qfict4STOh1RRDptVTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;4. 任务提交与调试&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9EnJWQYYoFuiaibCGMn3QQsT6nebvOHNuteJrKOkuyibMdO6CrFtaD3YuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在任务提交和调试方面，目前我们采用将用户提交的SQL编译成JobGraph，然后提交到集群去运行，在这个过程中也会去加载任务所依赖的各种connector和UDF等一系列的资源。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，平台提供了调试模式来支持在线调试FlinkSQL任务，在调试模式下，平台会对SQL进行改写，然后实时拦截调试的输出结果，来让用户及时观察任务的运行结果，同时调试的过程中可以自定义的制定线上数据采样的时间段，使调试更加灵活与准确。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Flink服务化&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;服务化是为了简&lt;/span&gt;&lt;span&gt;化我们对任务管理的复杂度，对于上层的应用或者整个平台来说，可以屏蔽掉Flink与底层资源的交互细节，上层的平台可直接通过 rest或者RPC与服务层进行交互来操作任务，比如控制任务的起停，状态监听或者观察checkpoint和savepoint等，同时还提供了任务失败自动恢复等机制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm91h9hdgCgIibHIicuZbuiaIicqDJXU0Frt7yxjVjDtFicIGliaAibHnlibWYVDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们通过插件的方式来支持多版本的Flink 任务，不同的版本可以共存；平台也可以支持底层的计算资源的多样性，可以通过插拔的方式切换多个yarn或者K8s集群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过服务化的方式，我们就可以将整个实时计算的生产能力开放出去，不仅仅是供我们的平台使用，而是可以提供给其他服务使用，比如日志平台或者监控平台等，这些平台的实时计算需求，就可以直接通过服务化的接口统一处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 资源优化 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9UGns7WfBzkzwU8551lRiceBpvKVkmjBFHs0vhcfvc9TMnDMVQgbufUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着任务数越来越多，作为平台方就需要进一步考虑资源优化问题。&lt;/span&gt;&lt;span&gt;在讲具体优化之前我们先对比下Flink常用的两种部署模式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm93eb6ibdQtpTIO6y3TkoEP9kTe7ctadCibZ7JTZNyyx5nW8as1Ebk028A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;综合分析上面两种部署模式的优缺点后，我们做了一些改进措施。采用了基于session的一种新部署模式。通过提供任务资源策略和资源池的方式来提高session模式下的资源方式。我们抽象出一个资源策略的概念，即根据作业的类型，以及它的对资源申请的需求做的一个抽象，通过这个资源策略来划分不同的资源池。当提交一个任务时，平台会根据它所声明的资源策略来选择性的决定该任务应该分配到哪一个资源池的哪一个session中，这样分配一方面可以复用jobManager和taskManager的计算资源，另一方面可以保证在同一个session中，所运行的任务的资源申请粒度是一致的。所以在这种模式下，可以实现平台在任务的隔离性和资源利用率之间的相对平衡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 云原生部署 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9ibKibqlX0Hq1ialZbXgJyo4iad5niaOIgNU3yNfaxxicEPiaH9vdBo4SWhgjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在服务化的过程中，我们还完成了任务云原生的部署方式。在早期平台任务都部署在Yarn集群上，因为一些历史原因，Yarn集群没有使用cgroup等方式做CPU的资源隔离，这常常出现同一机器上的不同任务CPU资源占用的情况。而且整个Yarn集群是基于物理机来部署的，当需要对集群资源做临时的扩容时就显得非常不方便，且周期很长。另外，整体的运维人力成本也比较高。所以我们考虑使用K8s来代替Yarn集群，K8s的主要优点是资源隔离相对彻底，而且支持快速的弹性扩缩容，这样就可以满足我们多类型任务的混合部署，从而提升计算资源的整体利用率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm97DW0akASr6HXmiacAuAyKcsQdIKQHA8iaQNUHmqBM6eevmNib3ltCZmbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在网易严选，我们在2019年底，基于Flink1.6版本完成了Flink on k8s的落地。并且在2020年，完成Flink1.10版本的整合，目前平台任务的容器化部署覆盖率超过80%。同时根据业务需要，我们还做了一些自适应的扩展。具体扩展如下所示：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持通过Node Selector来按照标签去选择性调度任务，做到资源隔离&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;引入ingress是来提供对外的rest服务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;增强对API Server连接抖动、网络异常的容忍度&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持通过Sidecar进行日志收集，Service Mesh等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;优化Native内存泄漏问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持基于Zookeeper的jobManager HA能力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据治理&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9vviaicmVTFg6z7obnctCcB9V4s6YZGvWummEfB0662icXQhe7QPs0AP1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如上图是网易严选在数据处理中的整体链路，通过分层的结构来支持数仓的需求。从图中可以看到整体链路比较长，且任务之间的依赖关系复杂，所以我们需要对整个数据体系进行全链路的治理。数据治理的目的就是为了保障数据能够高效稳定的产出，同时推进全链路的资源优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;1. 任务监控&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9PHkg6FCzMIiaveJkHedh5Y1sbibibYicp96hvaJoxHNdyR6cvJNTWvQfiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数据治理过程中，我们需要完善对任务处理情况的监控，比如像风控等业务，对任务的稳定性和时效性比较敏感，无法容忍任务长时间故障或者异常延迟等。Flink本身提供了丰富的metrics指标用来监控任务全生命周期的健康情况，但是当任务数量越来越多时，Flink metrics的体量也会非常大，我们经过调研和对比常用的时序数据库后，选择使用OpenTSDB来作为metrics的存储，同时通过加盐哈希的方式来分散存储和查询热点。另外，我们统一为各种连接器提供访问延迟、缓存命中等多项指标，同时将指标的粒度细化到算子级别，方便我们定位和排查问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 数据血缘追踪&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm92wKbwibvicPtSUrGEzQd4xLNxibwDcrAW5vzicETB0Dg3skSUAnV2v6PuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数据治理中另一个重要的基础服务是对数据血缘的管理，Flink任务中SQL任务，我们通过对SQL做语法树的遍历来拿到它血缘情况，而针对用户自定义的jar任务，需要在生成JobGraph时获取它的DAG结构，然后通过反射机制来获取血缘的元数据。统一的血缘管理，可以清晰的获取到任务的上下游关系，方便问题的快速定位和排查。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;3. 全链路数据治理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9bmzeezS3s0LcePfYXgGibV3AOztz5AkPQK9GUjX5a7N8LTJnTZSzptA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;依托我们提供的统一元数据、任务监控以及统一血缘管理这三个基础服务，我们就可以对数据做全链路治理。在数据治理中，我们主要从两个维度来考虑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先是表的维度，所谓表，在实时中大部分指kafka，而在离线中指hive等各种存储。依赖于全链路的数据，我们可以建立数据的访问模型，通过模型可以很好的识别表的冷热情况，然后针对不同的情况做一些分级的治理。比如在kafka这一块，我们会对一些热点表做资源分区的调整及扩容，而对一些无效的表，我们会自动的清除。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次是任务的维度，依托对任务的全生命周期管理以及监控指标的聚合分析，通过智能诊断框架去自动识别任务的问题所在，比如任务延迟，数据倾斜、反压以及资源不足等，然后通过进一步的分析，对任务做资源的优化及调整。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过全链路的数据治理，我们把任务的延迟控制在秒以内，提升了平台的整体稳定性。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;05&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;后续规划&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;1. 流批一体探索&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9kiapRzugeF7k0QicQCSeFqGTBQ8xqHddyXWPdGVDT0ibibnlFJR0oCtiaIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在流批一体的探索过程中，目前我们初步完成了Iceberg数据湖的集成，接下来会进一步探索计算及存储层面的批流一体架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 作业智能诊断优化&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9icPagkspjv3kB2gfMUndsRFoJVlcGgoax4MTx0NQfpNArffvYzLMbBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进一步强化作业智能诊断能力，引入作业管控服务，当诊断框架给出调优方案之后，通过作业管控服务自适应的对任务做具体的调优，从而减少人工的介入，提升作业整体的可用性。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;06&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;精彩问答&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;Q：&lt;/span&gt;&lt;span&gt;存在update情况下，Flinksink到下游输出时，如何实现幂等性？比如Flink写到Hbase如何实现幂等性？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A：FlinkSQL本身在retract模式或者upsert模式下，若下游存储存在主键，比如Hbase的rowKey，更新或者删除操作都是根据主键来实现，所以结果是具有幂等性的。若下游存储没有主键，比如kafka，就需要下游存储自身做幂等的操作，这种情况会更复杂。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Q：用户对调试功能需求高吗?其主要的实现思路是什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A：实际业务开发过程中，FlinkSQL通常会比较复杂，代码量比较大，所以很难一次性完整的写出来，所以调试功能的使用是非常高频的。无论是构造的数据还是采样线上的数据，我们在调试模式下需要及时的展现这段SQL的结果，方便用户来判断其SQL的逻辑是否达到自己想要的效果，实现思路大概是：对SQL任务source和sink做替换，对source，我们会实现Kafka采样的功能或使用用户上传的样例数据，对sink，我们会替换成webSocket输出或者文件输出，方便用户的查看。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;今天的分享就到这里，谢谢大家。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;在文末分享、点赞、在看，给个3连击呗~&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享嘉宾：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;289&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1gwFCnz4pXib4XicGSQHPAm9MboR6m1eQSxic4OBJ7TfGZyhYxm2nhtQcx4ibWbxoZyIxgicMWCQmiaJZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;活动推荐：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想了解更多数据湖的知识吗？&lt;/span&gt;&lt;span&gt;12月19日，在DataFunCon年终大会上，由&lt;/span&gt;&lt;span&gt;腾讯专家工程师张觅&lt;/span&gt;&lt;span&gt;老师出品的智能数据湖论坛，将邀请来自腾讯、网易数帆、阿里、华为的6位嘉宾，与大家一起探讨智能数据湖的架构与实践，感兴趣的小伙伴，欢迎识别下图二维码，免费报名参与收看直播~&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;1642&quot; data-backw=&quot;520&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1743&quot; data-galleryid=&quot;&quot; data-ratio=&quot;3.1566666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPgJ4pyzsLn0RYJthxpmEfxofZrn4AXBKnAOdVacmziaVEChYElPModVVn0bO6gLrWadMhNxayxtWjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关于我们：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DataFun：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;专注于大数据、人工智能技术应用的分享与交流。发起于2017年，在北京、上海、深圳、杭州等城市举办超过100+线下和100+线上沙龙、论坛及峰会，已邀请近1000位专家和学者参与分享。其公众号 DataFunTalk 累计生产原创文章500+，百万+阅读，12万+精准粉丝。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3MTU2ODMzNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm0Gnd52mVCVYjEDG4DoqUqvicKHdzia1o5YsgkMwyv5wjic9Q3f0GJNerzNucU0HVJKxLiavF4OsRMkeA/0?wx_fmt=png&quot; data-nickname=&quot;DataFunSummit&quot; data-alias=&quot;DataFunSummit&quot; data-signature=&quot;DataFun旗下，专注于大数据、人工智能领域，相关峰会信息、嘉宾演讲内容的分享。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;🧐&lt;strong&gt;分享、点赞、在看&lt;/strong&gt;，给个&lt;strong&gt;3连击&lt;/strong&gt;呗！&lt;strong&gt;👇&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1ee76ed61324d676ce16d258437fe061</guid>
<title>CompletableFuture：让你的代码免受阻塞之苦</title>
<link>https://toutiao.io/k/141ukrd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;写在前面&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过阅读本篇文章你将了解到：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;CompletableFuture的使用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CompletableFure异步和同步的性能测试&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;已经有了Future为什么仍需要在JDK1.8中引入CompletableFuture&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CompletableFuture的应用场景&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对CompletableFuture的使用优化&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;场景说明&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询所有商店某个商品的价格并返回，并且查询商店某个商品的价格的API为同步 一个Shop类，提供一个名为getPrice的同步方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Shop&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Random random = &lt;span&gt;new&lt;/span&gt; Random();&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 根据产品名查找价格&lt;br/&gt;     * */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; &lt;span&gt;getPrice&lt;/span&gt;&lt;span&gt;(String product)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; calculatePrice(product);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 计算价格&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; product&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     * */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; &lt;span&gt;calculatePrice&lt;/span&gt;&lt;span&gt;(String product)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        delay();&lt;br/&gt;        &lt;span&gt;//random.nextDouble()随机返回折扣&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; random.nextDouble() * product.charAt(&lt;span&gt;0&lt;/span&gt;) + product.charAt(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 通过睡眠模拟其他耗时操作&lt;br/&gt;     * */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;delay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            Thread.sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询商品的价格为同步方法，并通过sleep方法模拟其他操作。这个场景模拟了当需要调用第三方API，但第三方提供的是同步API，在无法修改第三方API时如何设计代码调用提高应用的性能和吞吐量，这时候可以使用CompletableFuture类&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;CompletableFuture使用&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Completable是Future接口的实现类，在JDK1.8中引入&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;CompletableFuture的创建：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;说明：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;两个重载方法之间的区别 =&amp;gt; 后者可以传入自定义Executor，前者是默认的，使用的ForkJoinPool&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;supplyAsync和runAsync方法之间的区别 =&amp;gt; 前者有返回值，后者无返回值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Supplier是函数式接口，因此该方法需要传入该接口的实现类，追踪源码会发现在run方法中会调用该接口的方法。因此使用该方法创建CompletableFuture对象只需重写Supplier中的get方法，在get方法中定义任务即可。又因为函数式接口可以使用Lambda表达式，和new创建CompletableFuture对象相比代码会&lt;strong&gt;简洁&lt;/strong&gt;不少&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用new方法&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;CompletableFuture&amp;lt;Double&amp;gt; futurePrice = &lt;span&gt;new&lt;/span&gt; CompletableFuture&amp;lt;&amp;gt;();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用CompletableFuture#completedFuture静态方法创建&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;completedFuture&lt;/span&gt;&lt;span&gt;(U value)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CompletableFuture&amp;lt;U&amp;gt;((value == &lt;span&gt;null&lt;/span&gt;) ? NIL : value);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数的值为任务执行完的结果，一般该方法在实际应用中较少应用&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用 CompletableFuture#supplyAsync静态方法创建 supplyAsync有两个重载方法：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//方法一&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;supplyAsync&lt;/span&gt;&lt;span&gt;(Supplier&amp;lt;U&amp;gt; supplier)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; asyncSupplyStage(asyncPool, supplier);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//方法二&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;supplyAsync&lt;/span&gt;&lt;span&gt;(Supplier&amp;lt;U&amp;gt; supplier,&lt;br/&gt;                                                   Executor executor)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; asyncSupplyStage(screenExecutor(executor), supplier);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用CompletableFuture#runAsync静态方法创建 runAsync有两个重载方法&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//方法一&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span&gt;runAsync&lt;/span&gt;&lt;span&gt;(Runnable runnable)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; asyncRunStage(asyncPool, runnable);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//方法二&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span&gt;runAsync&lt;/span&gt;&lt;span&gt;(Runnable runnable, Executor executor)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; asyncRunStage(screenExecutor(executor), runnable);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;结果的获取：&lt;/strong&gt; 对于结果的获取CompltableFuture类提供了四种方式&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//方式一&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; T &lt;span&gt;get&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//方式二&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; T &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;span&gt;long&lt;/span&gt; timeout, TimeUnit unit)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//方式三&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; T &lt;span&gt;getNow&lt;/span&gt;&lt;span&gt;(T valueIfAbsent)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//方式四&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; T &lt;span&gt;join&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：&lt;/p&gt;&lt;p&gt;示例：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;get()和get(long timeout, TimeUnit unit) =&amp;gt; 在Future中就已经提供了，后者提供超时处理，如果在指定时间内未获取结果将抛出超时异常&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;getNow =&amp;gt; 立即获取结果不阻塞，结果计算已完成将返回结果或计算过程中的异常，如果未计算完成将返回设定的valueIfAbsent值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;join =&amp;gt; 方法里不会抛出异常&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AcquireResultTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; ExecutionException, InterruptedException &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;//getNow方法测试&lt;/span&gt;&lt;br/&gt;      CompletableFuture&amp;lt;String&amp;gt; cp1 = CompletableFuture.supplyAsync(() -&amp;gt; {&lt;br/&gt;          &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;              Thread.sleep(&lt;span&gt;60&lt;/span&gt; * &lt;span&gt;1000&lt;/span&gt; * &lt;span&gt;60&lt;/span&gt; );&lt;br/&gt;          } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;              e.printStackTrace();&lt;br/&gt;          }&lt;br/&gt;  &lt;br/&gt;          &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;hello world&quot;&lt;/span&gt;;&lt;br/&gt;      });&lt;br/&gt;  &lt;br/&gt;      System.out.println(cp1.getNow(&lt;span&gt;&quot;hello h2t&quot;&lt;/span&gt;));&lt;br/&gt;  &lt;br/&gt;      &lt;span&gt;//join方法测试&lt;/span&gt;&lt;br/&gt;      CompletableFuture&amp;lt;Integer&amp;gt; cp2 = CompletableFuture.supplyAsync((()-&amp;gt; &lt;span&gt;1&lt;/span&gt; / &lt;span&gt;0&lt;/span&gt;));&lt;br/&gt;      System.out.println(cp2.join());&lt;br/&gt;  &lt;br/&gt;      &lt;span&gt;//get方法测试&lt;/span&gt;&lt;br/&gt;      CompletableFuture&amp;lt;Integer&amp;gt; cp3 = CompletableFuture.supplyAsync((()-&amp;gt; &lt;span&gt;1&lt;/span&gt; / &lt;span&gt;0&lt;/span&gt;));&lt;br/&gt;      System.out.println(cp3.get());&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;第一个执行结果为hello h2t，因为要先睡上1分钟结果不能立即获取&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;join方法获取结果方法里不会抛异常，但是执行结果会抛异常，抛出的异常为CompletionException&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;get方法获取结果方法里将抛出异常，执行结果抛出的异常为ExecutionException&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;异常处理：&lt;/strong&gt; 使用静态方法创建的CompletableFuture对象无需显示处理异常，使用new创建的对象需要调用completeExceptionally方法设置捕获到的异常，举例说明：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CompletableFuture completableFuture = &lt;span&gt;new&lt;/span&gt; CompletableFuture();&lt;br/&gt;&lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt; {&lt;br/&gt;   &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;       &lt;span&gt;//doSomething，调用complete方法将其他方法的执行结果记录在completableFuture对象中&lt;/span&gt;&lt;br/&gt;       completableFuture.complete(&lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;   } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;       &lt;span&gt;//异常处理&lt;/span&gt;&lt;br/&gt;       completableFuture.completeExceptionally(e);&lt;br/&gt;    }&lt;br/&gt;}).start();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;同步方法Pick异步方法查询所有店铺某个商品价格&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;店铺为一个列表：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;Shop&amp;gt; shopList = Arrays.asList(&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; Shop(&lt;span&gt;&quot;BestPrice&quot;&lt;/span&gt;),&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; Shop(&lt;span&gt;&quot;LetsSaveBig&quot;&lt;/span&gt;),&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; Shop(&lt;span&gt;&quot;MyFavoriteShop&quot;&lt;/span&gt;),&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; Shop(&lt;span&gt;&quot;BuyItAll&quot;&lt;/span&gt;)&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;同步方法：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span&gt;findPriceSync&lt;/span&gt;&lt;span&gt;(String product)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; shopList.stream()&lt;br/&gt;            .map(shop -&amp;gt; String.format(&lt;span&gt;&quot;%s price is %.2f&quot;&lt;/span&gt;,&lt;br/&gt;                    shop.getName(), shop.getPrice(product)))  &lt;span&gt;//格式转换&lt;/span&gt;&lt;br/&gt;            .collect(Collectors.toList());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;异步方法：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span&gt;findPriceAsync&lt;/span&gt;&lt;span&gt;(String product)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    List&amp;lt;CompletableFuture&amp;lt;String&amp;gt;&amp;gt; completableFutureList = shopList.stream()&lt;br/&gt;            &lt;span&gt;//转异步执行&lt;/span&gt;&lt;br/&gt;            .map(shop -&amp;gt; CompletableFuture.supplyAsync(&lt;br/&gt;                    () -&amp;gt; String.format(&lt;span&gt;&quot;%s price is %.2f&quot;&lt;/span&gt;,&lt;br/&gt;                            shop.getName(), shop.getPrice(product))))  &lt;span&gt;//格式转换&lt;/span&gt;&lt;br/&gt;            .collect(Collectors.toList());&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; completableFutureList.stream()&lt;br/&gt;            .map(CompletableFuture::join)  &lt;span&gt;//获取结果不会抛出异常&lt;/span&gt;&lt;br/&gt;            .collect(Collectors.toList());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;性能测试结果：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Find Price Sync Done in &lt;span&gt;4141&lt;/span&gt;&lt;br/&gt;Find Price Async Done in &lt;span&gt;1033&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;异步&lt;/strong&gt;执行效率&lt;strong&gt;提高四倍&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为什么仍需要CompletableFuture&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在JDK1.8以前，通过调用线程池的submit方法可以让任务以异步的方式运行，该方法会返回一个Future对象，通过调用get方法获取异步执行的结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span&gt;findPriceFutureAsync&lt;/span&gt;&lt;span&gt;(String product)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    ExecutorService es = Executors.newCachedThreadPool();&lt;br/&gt;    List&amp;lt;Future&amp;lt;String&amp;gt;&amp;gt; futureList = shopList.stream().map(shop -&amp;gt; es.submit(() -&amp;gt; String.format(&lt;span&gt;&quot;%s price is %.2f&quot;&lt;/span&gt;,&lt;br/&gt;            shop.getName(), shop.getPrice(product)))).collect(Collectors.toList());&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; futureList.stream()&lt;br/&gt;            .map(f -&amp;gt; {&lt;br/&gt;                String result = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;                &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                    result = f.get();&lt;br/&gt;                } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;                    e.printStackTrace();&lt;br/&gt;                } &lt;span&gt;catch&lt;/span&gt; (ExecutionException e) {&lt;br/&gt;                    e.printStackTrace();&lt;br/&gt;                }&lt;br/&gt;&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;            }).collect(Collectors.toList());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既生瑜何生亮，为什么仍需要引入CompletableFuture？对于简单的业务场景使用Future完全没有，但是想将多个异步任务的计算结果组合起来，后一个异步任务的计算结果需要前一个异步任务的值等等，使用Future提供的那点API就囊中羞涩，处理起来不够优雅，这时候还是让CompletableFuture以&lt;strong&gt;声明式&lt;/strong&gt;的方式优雅的处理这些需求。而且在Future编程中想要拿到Future的值然后拿这个值去做后续的计算任务，只能通过轮询的方式去判断任务是否完成这样非常占CPU并且代码也不优雅，用伪代码表示如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;while&lt;/span&gt;(future.isDone()) {&lt;br/&gt;    result = future.get();&lt;br/&gt;    doSomrthingWithResult(result);&lt;br/&gt;} &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但CompletableFuture提供了API帮助我们实现这样的需求&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;其他API介绍&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;whenComplete计算结果的处理：&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对前面计算结果进行处理，无法返回新值
提供了三个方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//方法一&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; CompletableFuture&amp;lt;T&amp;gt; &lt;span&gt;whenComplete&lt;/span&gt;&lt;span&gt;(BiConsumer&amp;lt;? &lt;span&gt;super&lt;/span&gt; T,? &lt;span&gt;super&lt;/span&gt; Throwable&amp;gt; action)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//方法二&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; CompletableFuture&amp;lt;T&amp;gt; &lt;span&gt;whenCompleteAsync&lt;/span&gt;&lt;span&gt;(BiConsumer&amp;lt;? &lt;span&gt;super&lt;/span&gt; T,? &lt;span&gt;super&lt;/span&gt; Throwable&amp;gt; action)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//方法三&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; CompletableFuture&amp;lt;T&amp;gt; &lt;span&gt;whenCompleteAsync&lt;/span&gt;&lt;span&gt;(BiConsumer&amp;lt;? &lt;span&gt;super&lt;/span&gt; T,? &lt;span&gt;super&lt;/span&gt; Throwable&amp;gt; action, Executor executor)&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;BiFunction&amp;lt;? super T,? super U,? extends V&amp;gt; fn参数 =&amp;gt; 定义对结果的处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Executor executor参数 =&amp;gt; 自定义线程池&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以async结尾的方法将会在一个新的线程中执行组合操作&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WhenCompleteTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        CompletableFuture&amp;lt;String&amp;gt; cf1 = CompletableFuture.supplyAsync(() -&amp;gt; &lt;span&gt;&quot;hello&quot;&lt;/span&gt;);&lt;br/&gt;        CompletableFuture&amp;lt;String&amp;gt; cf2 = cf1.whenComplete((v, e) -&amp;gt;&lt;br/&gt;                System.out.println(String.format(&lt;span&gt;&quot;value:%s, exception:%s&quot;&lt;/span&gt;, v, e)));&lt;br/&gt;        System.out.println(cf2.join());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;thenApply转换：&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将前面计算结果的的CompletableFuture传递给thenApply，返回thenApply处理后的结果。可以认为通过thenApply方法实现&lt;code&gt;CompletableFuture&amp;lt;T&amp;gt;&lt;/code&gt;至&lt;code&gt;CompletableFuture&amp;lt;U&amp;gt;&lt;/code&gt;的转换。白话一点就是将CompletableFuture的计算结果作为thenApply方法的参数，返回thenApply方法处理后的结果
提供了三个方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//方法一&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;thenApply&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;    Function&amp;lt;? &lt;span&gt;super&lt;/span&gt; T,? extends U&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; uniApplyStage(&lt;span&gt;null&lt;/span&gt;, fn);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//方法二&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;thenApplyAsync&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;    Function&amp;lt;? &lt;span&gt;super&lt;/span&gt; T,? extends U&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; uniApplyStage(asyncPool, fn);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//方法三&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;thenApplyAsync&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;    Function&amp;lt;? &lt;span&gt;super&lt;/span&gt; T,? extends U&amp;gt; fn, Executor executor)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; uniApplyStage(screenExecutor(executor), fn);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Function&amp;lt;? super T,? extends U&amp;gt; fn参数 =&amp;gt; 对前一个CompletableFuture 计算结果的转化操作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Executor executor参数 =&amp;gt; 自定义线程池&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以async结尾的方法将会在一个新的线程中执行组合操作 示例：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThenApplyTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; ExecutionException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        CompletableFuture&amp;lt;Integer&amp;gt; result = CompletableFuture.supplyAsync(ThenApplyTest::randomInteger).thenApply((i) -&amp;gt; i * &lt;span&gt;8&lt;/span&gt;);&lt;br/&gt;        System.out.println(result.get());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Integer &lt;span&gt;randomInteger&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里将前一个CompletableFuture计算出来的结果扩大八倍&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;thenAccept结果处理：&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;thenApply也可以归类为对结果的处理，thenAccept和thenApply的区别就是没有返回值
提供了三个方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//方法一&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span&gt;thenAccept&lt;/span&gt;&lt;span&gt;(Consumer&amp;lt;? &lt;span&gt;super&lt;/span&gt; T&amp;gt; action)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; uniAcceptStage(&lt;span&gt;null&lt;/span&gt;, action);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//方法二&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span&gt;thenAcceptAsync&lt;/span&gt;&lt;span&gt;(Consumer&amp;lt;? &lt;span&gt;super&lt;/span&gt; T&amp;gt; action)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; uniAcceptStage(asyncPool, action);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//方法三&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span&gt;thenAcceptAsync&lt;/span&gt;&lt;span&gt;(Consumer&amp;lt;? &lt;span&gt;super&lt;/span&gt; T&amp;gt; action,&lt;br/&gt;                                               Executor executor)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; uniAcceptStage(screenExecutor(executor), action);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Consumer&amp;lt;? super T&amp;gt; action参数 =&amp;gt; 对前一个CompletableFuture计算结果的操作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Executor executor参数 =&amp;gt; 自定义线程池&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同理以async结尾的方法将会在一个新的线程中执行组合操作 示例：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThenAcceptTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        CompletableFuture.supplyAsync(ThenAcceptTest::getList).thenAccept(strList -&amp;gt; strList.stream()&lt;br/&gt;                .forEach(m -&amp;gt; System.out.println(m)));&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span&gt;getList&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Arrays.asList(&lt;span&gt;&quot;a&quot;&lt;/span&gt;, &lt;span&gt;&quot;b&quot;&lt;/span&gt;, &lt;span&gt;&quot;c&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将前一个CompletableFuture计算出来的结果打印出来&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;thenCompose异步结果流水化：&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;thenCompose方法可以将两个异步操作进行流水操作
提供了三个方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//方法一&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;thenCompose&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;    Function&amp;lt;? &lt;span&gt;super&lt;/span&gt; T, ? extends CompletionStage&amp;lt;U&amp;gt;&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; uniComposeStage(&lt;span&gt;null&lt;/span&gt;, fn);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//方法二&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;thenComposeAsync&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;    Function&amp;lt;? &lt;span&gt;super&lt;/span&gt; T, ? extends CompletionStage&amp;lt;U&amp;gt;&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; uniComposeStage(asyncPool, fn);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//方法三&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;thenComposeAsync&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;    Function&amp;lt;? &lt;span&gt;super&lt;/span&gt; T, ? extends CompletionStage&amp;lt;U&amp;gt;&amp;gt; fn,&lt;br/&gt;    Executor executor)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; uniComposeStage(screenExecutor(executor), fn);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Function&amp;lt;? super T, ? extends CompletionStage&amp;lt;U&amp;gt;&amp;gt; fn&lt;/code&gt;参数 =&amp;gt; 当前CompletableFuture计算结果的执行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Executor executor参数 =&amp;gt; 自定义线程池&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同理以async结尾的方法将会在一个新的线程中执行组合操作
示例：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThenComposeTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; ExecutionException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        CompletableFuture&amp;lt;Integer&amp;gt; result = CompletableFuture.supplyAsync(ThenComposeTest::getInteger)&lt;br/&gt;                .thenCompose(i -&amp;gt; CompletableFuture.supplyAsync(() -&amp;gt; i * &lt;span&gt;10&lt;/span&gt;));&lt;br/&gt;        System.out.println(result.get());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getInteger&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;666&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;expandValue&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; num * &lt;span&gt;10&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行流程图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/N34tfh8WYkiahg74DUViaraK9PSjAvycy1Zx0KmIBMazZfcCzsEAsCrsOclmklaK06078KZ8X8RLB8vytgB3Xia6w/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-ratio=&quot;0.6125&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;thenCombine组合结果：&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;thenCombine方法将两个无关的CompletableFuture组合起来，第二个Completable并不依赖第一个Completable的结果
提供了三个方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//方法一&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;U,V&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;V&amp;gt; &lt;span&gt;thenCombine&lt;/span&gt;&lt;span&gt;( &lt;br/&gt;    CompletionStage&amp;lt;? extends U&amp;gt; other,&lt;br/&gt;    BiFunction&amp;lt;? &lt;span&gt;super&lt;/span&gt; T,? &lt;span&gt;super&lt;/span&gt; U,? extends V&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; biApplyStage(&lt;span&gt;null&lt;/span&gt;, other, fn);&lt;br/&gt;}&lt;br/&gt;  &lt;span&gt;//方法二&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; &amp;lt;U,V&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;V&amp;gt; &lt;span&gt;thenCombineAsync&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;      CompletionStage&amp;lt;? extends U&amp;gt; other,&lt;br/&gt;      BiFunction&amp;lt;? &lt;span&gt;super&lt;/span&gt; T,? &lt;span&gt;super&lt;/span&gt; U,? extends V&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; biApplyStage(asyncPool, other, fn);&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;//方法三&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; &amp;lt;U,V&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;V&amp;gt; &lt;span&gt;thenCombineAsync&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;      CompletionStage&amp;lt;? extends U&amp;gt; other,&lt;br/&gt;      BiFunction&amp;lt;? &lt;span&gt;super&lt;/span&gt; T,? &lt;span&gt;super&lt;/span&gt; U,? extends V&amp;gt; fn, Executor executor)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; biApplyStage(screenExecutor(executor), other, fn);&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;CompletionStage&amp;lt;? extends U&amp;gt; other参数 =&amp;gt; 新的CompletableFuture的计算结果&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BiFunction&amp;lt;? super T,? super U,? extends V&amp;gt; fn参数 =&amp;gt; 定义了两个CompletableFuture对象&lt;strong&gt;完成计算后&lt;/strong&gt;如何合并结果，该参数是一个函数式接口，因此可以使用Lambda表达式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Executor executor参数 =&amp;gt; 自定义线程池&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同理以async结尾的方法将会在一个新的线程中执行组合操作&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThenCombineTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Random random = &lt;span&gt;new&lt;/span&gt; Random();&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; ExecutionException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        CompletableFuture&amp;lt;Integer&amp;gt; result = CompletableFuture.supplyAsync(ThenCombineTest::randomInteger).thenCombine(&lt;br/&gt;                CompletableFuture.supplyAsync(ThenCombineTest::randomInteger), (i, j) -&amp;gt; i * j&lt;br/&gt;        );&lt;br/&gt;&lt;br/&gt;        System.out.println(result.get());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Integer &lt;span&gt;randomInteger&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; random.nextInt(&lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将两个线程计算出来的值做一个乘法在返回 执行流程图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/N34tfh8WYkiahg74DUViaraK9PSjAvycy1Zx0KmIBMazZfcCzsEAsCrsOclmklaK06078KZ8X8RLB8vytgB3Xia6w/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-ratio=&quot;0.6125&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;allOf&amp;amp;anyOf组合多个CompletableFuture：&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方法介绍：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//allOf&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span&gt;allOf&lt;/span&gt;&lt;span&gt;(CompletableFuture&amp;lt;?&amp;gt;... cfs)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; andTree(cfs, &lt;span&gt;0&lt;/span&gt;, cfs.length - &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//anyOf&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; CompletableFuture&amp;lt;Object&amp;gt; &lt;span&gt;anyOf&lt;/span&gt;&lt;span&gt;(CompletableFuture&amp;lt;?&amp;gt;... cfs)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; orTree(cfs, &lt;span&gt;0&lt;/span&gt;, cfs.length - &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;allOf =&amp;gt; 所有的CompletableFuture都执行完后执行计算。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;anyOf =&amp;gt; 任意一个CompletableFuture执行完后就会执行计算&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AllOfTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; ExecutionException, InterruptedException &lt;/span&gt;{&lt;br/&gt;      CompletableFuture&amp;lt;Void&amp;gt; future1 = CompletableFuture.supplyAsync(() -&amp;gt; {&lt;br/&gt;          System.out.println(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;);&lt;br/&gt;          &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;      });&lt;br/&gt;      CompletableFuture&amp;lt;Void&amp;gt; future2 = CompletableFuture.supplyAsync(() -&amp;gt; {&lt;br/&gt;          System.out.println(&lt;span&gt;&quot;world&quot;&lt;/span&gt;); &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;      });&lt;br/&gt;      CompletableFuture&amp;lt;Void&amp;gt; result = CompletableFuture.allOf(future1, future2);&lt;br/&gt;      System.out.println(result.get());&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;allOf方法没有返回值，适合没有返回值并且需要前面所有任务执行完毕才能执行后续任务的应用场景&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AnyOfTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Random random = &lt;span&gt;new&lt;/span&gt; Random();&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; ExecutionException, InterruptedException &lt;/span&gt;{&lt;br/&gt;      CompletableFuture&amp;lt;String&amp;gt; future1 = CompletableFuture.supplyAsync(() -&amp;gt; {&lt;br/&gt;          randomSleep();&lt;br/&gt;          System.out.println(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;);&lt;br/&gt;          &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;hello&quot;&lt;/span&gt;;});&lt;br/&gt;      CompletableFuture&amp;lt;String&amp;gt; future2 = CompletableFuture.supplyAsync(() -&amp;gt; {&lt;br/&gt;          randomSleep();&lt;br/&gt;          System.out.println(&lt;span&gt;&quot;world&quot;&lt;/span&gt;);&lt;br/&gt;          &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;world&quot;&lt;/span&gt;;&lt;br/&gt;      });&lt;br/&gt;      CompletableFuture&amp;lt;Object&amp;gt; result = CompletableFuture.anyOf(future1, future2);&lt;br/&gt;      System.out.println(result.get());&lt;br/&gt; }&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;randomSleep&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;          Thread.sleep(random.nextInt(&lt;span&gt;10&lt;/span&gt;));&lt;br/&gt;      } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;          e.printStackTrace();&lt;br/&gt;      }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两个线程都会将结果打印出来，但是get方法只会返回最先完成任务的结果。该方法比较适合只要有一个返回值就可以继续执行其他任务的应用场景&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;注意点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多方法都提供了异步实现【带async后缀】，但是需小心谨慎使用这些异步方法，因为异步意味着存在上下文切换，可能性能不一定比同步好。如果需要使用异步的方法，&lt;strong&gt;先做测试&lt;/strong&gt;，用测试数据说话！！！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;CompletableFuture的应用场景&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;存在IO密集型的任务可以选择CompletableFuture，IO部分交由另外一个线程去执行。Logback、Log4j2异步日志记录的实现原理就是新起了一个线程去执行IO操作，这部分可以以CompletableFuture.runAsync(()-&amp;gt;{ioOperation();})的方式去调用。如果是CPU密集型就不推荐使用了推荐使用并行流&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;优化空间&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;supplyAsync执行任务底层实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;supplyAsync&lt;/span&gt;&lt;span&gt;(Supplier&amp;lt;U&amp;gt; supplier)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; asyncSupplyStage(asyncPool, supplier);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;static&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span&gt;asyncSupplyStage&lt;/span&gt;&lt;span&gt;(Executor e, Supplier&amp;lt;U&amp;gt; f)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (f == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NullPointerException();&lt;br/&gt;    CompletableFuture&amp;lt;U&amp;gt; d = &lt;span&gt;new&lt;/span&gt; CompletableFuture&amp;lt;U&amp;gt;();&lt;br/&gt;    e.execute(&lt;span&gt;new&lt;/span&gt; AsyncSupply&amp;lt;U&amp;gt;(d, f));&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; d;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;底层调用的是线程池去执行任务，而CompletableFuture中默认线程池为ForkJoinPool&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Executor asyncPool = useCommonPool ?&lt;br/&gt;        ForkJoinPool.commonPool() : &lt;span&gt;new&lt;/span&gt; ThreadPerTaskExecutor();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ForkJoinPool线程池的大小取决于CPU的核数。CPU密集型任务线程池大小配置为CPU核心数就可以了，但是IO密集型，线程池的大小由**CPU数量 * CPU利用率 * (1 + 线程等待时间/线程CPU时间)**确定。而CompletableFuture的应用场景就是IO密集型任务，因此默认的ForkJoinPool一般无法达到最佳性能，我们需自己根据业务创建线程池&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ce8a621d12bd6668e3e8ff1098f0b8e0</guid>
<title>如何把Python应用构建为Docker容器</title>
<link>https://toutiao.io/k/ybi7p4m</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在云原生越来越流行, 容器化势在必行, 作为一个开发人员， 多多少少也要接触一些容器相关的操作， 其中最基础的操作是如何把自己的应用构建为一个&lt;code&gt;Docker&lt;/code&gt;容器， 并管理。本文以&lt;code&gt;starlette&lt;/code&gt;框架和后台的开发常见3件套&lt;code&gt;Nginx&lt;/code&gt;， &lt;code&gt;MySQL&lt;/code&gt;和&lt;code&gt;Redis&lt;/code&gt;为底创建一个简单的Web后台演示项目, 并一步一步介绍如何编写成一个容器以及容器的运行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注: 2021-02-07增加了示例代码
注: 2021-12-12部分内容进行重写&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.创建项目&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步会先创建一个&lt;code&gt;Python&lt;/code&gt;后台项目， 这个项目包含3个接口， 一个接口用来测试服务是否正常， 另外一个是测试&lt;code&gt;MySQL&lt;/code&gt;调用， 最后一个是测试&lt;code&gt;Redis&lt;/code&gt;调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是创建一个后台项目以及依赖:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;➜  example_python git:(master) mkdir python_on_docker          &lt;br/&gt;➜  example_python git:(master) &lt;span&gt;cd&lt;/span&gt; python_on_docker &lt;br/&gt;&lt;span&gt;# 一个项目配套一个虚拟环境, 如果熟悉, 建议用porety来处理项目的python和venv配套环境问题, 这里为了演示方便, 使用了venv&lt;/span&gt;&lt;br/&gt;➜  python_on_docker git:(master) python3.7 -m venv venv&lt;br/&gt;➜  python_on_docker git:(master) &lt;span&gt;source&lt;/span&gt; venv/bin/activate &lt;br/&gt;➜  python_on_docker git:(master) touch __init__.py  &lt;span&gt;# 每个Python项目要确保有一个__init__.py文件 &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 可以看到多了个venv的环境, 目前已经切到venv, 开始安装依赖&lt;/span&gt;&lt;br/&gt;(venv) ➜  python_on_docker git:(master) pip install starlette aiomysql aioredis uvicorn&lt;br/&gt;(venv) ➜  python_on_docker git:(master) pip install cryptography  &lt;span&gt;# aiomysql需要该模块提供加密算法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 生成pip安装的依赖文件&lt;/span&gt;&lt;br/&gt;(venv) ➜  python_on_docker git:(master) python -m pip freeze &amp;gt; requirements.txt&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后创建项目主文件&lt;code&gt;example.py&lt;/code&gt;, 该文件主要提供API服务，里面包含上面所说的3个接口, 示例代码如下(源码):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; typing &lt;span&gt;import&lt;/span&gt; Optional, Tuple&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; aiomysql&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; aioredis&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; starlette.applications &lt;span&gt;import&lt;/span&gt; Starlette&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; starlette.config &lt;span&gt;import&lt;/span&gt; Config&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; starlette.requests &lt;span&gt;import&lt;/span&gt; Request&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; starlette.responses &lt;span&gt;import&lt;/span&gt; JSONResponse, PlainTextResponse&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; starlette.routing &lt;span&gt;import&lt;/span&gt; Route&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;config: Config = Config(&lt;span&gt;&quot;.env&quot;&lt;/span&gt;)&lt;br/&gt;mysql_pool: Optional[aiomysql.Pool] = &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;redis: Optional[aioredis.Redis] = &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;async&lt;/span&gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;on_start_up&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;&quot;&quot;连接MySQL和Redis&quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;global&lt;/span&gt; mysql_pool&lt;br/&gt;    &lt;span&gt;global&lt;/span&gt; redis&lt;br/&gt;&lt;br/&gt;    mysql_pool = &lt;span&gt;await&lt;/span&gt; aiomysql.create_pool(&lt;br/&gt;        host=config(&lt;span&gt;&quot;MYSQL_HOST&quot;&lt;/span&gt;),&lt;br/&gt;        port=config(&lt;span&gt;&quot;MYSQL_PORT&quot;&lt;/span&gt;, cast=int),&lt;br/&gt;        user=config(&lt;span&gt;&quot;MYSQL_USER&quot;&lt;/span&gt;),&lt;br/&gt;        password=config(&lt;span&gt;&quot;MYSQL_PW&quot;&lt;/span&gt;),&lt;br/&gt;        db=config(&lt;span&gt;&quot;MYSQL_DB&quot;&lt;/span&gt;),&lt;br/&gt;    )&lt;br/&gt;    redis = aioredis.Redis(&lt;br/&gt;        &lt;span&gt;await&lt;/span&gt; aioredis.create_redis_pool(&lt;br/&gt;            config(&lt;span&gt;&quot;REDIS_URL&quot;&lt;/span&gt;),&lt;br/&gt;            minsize=config(&lt;span&gt;&quot;REDIS_POOL_MINSIZE&quot;&lt;/span&gt;, cast=int),&lt;br/&gt;            maxsize=config(&lt;span&gt;&quot;REDIS_POOL_MAXSIZE&quot;&lt;/span&gt;, cast=int),&lt;br/&gt;            encoding=config(&lt;span&gt;&quot;REDIS_ENCODING&quot;&lt;/span&gt;)&lt;br/&gt;        )&lt;br/&gt;    )&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;async&lt;/span&gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;on_shutdown&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;&quot;&quot;关闭MySQL和Redis连接&quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; mysql_pool.wait_closed()&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; redis.wait_closed()&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;hello_word&lt;/span&gt;&lt;span&gt;(request: Request)&lt;/span&gt; -&amp;gt; PlainTextResponse:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;&quot;&quot;测试接口调用接口&quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; PlainTextResponse(&lt;span&gt;&quot;Hello Word!&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;async&lt;/span&gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;mysql_demo&lt;/span&gt;&lt;span&gt;(request: Request)&lt;/span&gt; -&amp;gt; JSONResponse:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;&quot;&quot;测试MySQL调用接口&quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;    count: int = int(request.query_params.get(&lt;span&gt;&quot;count&quot;&lt;/span&gt;, &lt;span&gt;&quot;0&quot;&lt;/span&gt;))&lt;br/&gt;    &lt;span&gt;async&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; mysql_pool.acquire() &lt;span&gt;as&lt;/span&gt; conn:&lt;br/&gt;        &lt;span&gt;async&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; conn.cursor() &lt;span&gt;as&lt;/span&gt; cur:&lt;br/&gt;            &lt;span&gt;await&lt;/span&gt; cur.execute(&lt;span&gt;&quot;SELECT %s;&quot;&lt;/span&gt;, (count, ))&lt;br/&gt;            mysql_result_tuple: Tuple[int] = &lt;span&gt;await&lt;/span&gt; cur.fetchone()&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; JSONResponse({&lt;span&gt;&quot;result&quot;&lt;/span&gt;: mysql_result_tuple})&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;async&lt;/span&gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;redis_demo&lt;/span&gt;&lt;span&gt;(request: Request)&lt;/span&gt; -&amp;gt; JSONResponse:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;&quot;&quot;测试Redis调用接口&quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;    count: int = int(request.query_params.get(&lt;span&gt;&quot;count&quot;&lt;/span&gt;, &lt;span&gt;&quot;0&quot;&lt;/span&gt;))&lt;br/&gt;    key: str = request.query_params.get(&lt;span&gt;&quot;key&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; key:&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; JSONResponse(&lt;span&gt;&quot;key is empty&quot;&lt;/span&gt;)&lt;br/&gt;    result: int = &lt;span&gt;await&lt;/span&gt; redis.incrby(key, count)&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; redis.expire(key, &lt;span&gt;60&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; JSONResponse({&lt;span&gt;&quot;count&quot;&lt;/span&gt;: result})&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;app: Starlette = Starlette(&lt;br/&gt;    routes=[&lt;br/&gt;        Route(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, hello_word),&lt;br/&gt;        Route(&lt;span&gt;&#x27;/mysql&#x27;&lt;/span&gt;, mysql_demo),&lt;br/&gt;        Route(&lt;span&gt;&#x27;/redis&#x27;&lt;/span&gt;, redis_demo)&lt;br/&gt;    ],&lt;br/&gt;    on_startup=[on_start_up],&lt;br/&gt;    on_shutdown=[on_shutdown]&lt;br/&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目文件创建完毕, 接着再创建一个配套的配置文件&lt;code&gt;.env&lt;/code&gt;(&lt;code&gt;starlette&lt;/code&gt;的config会自动加载&lt;code&gt;.env&lt;/code&gt;的配置):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 按自己的配置信息更改配置&lt;/span&gt;&lt;br/&gt;MYSQL_DB=&lt;span&gt;&quot;mysql&quot;&lt;/span&gt;&lt;br/&gt;MYSQL_HOST=&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;br/&gt;MYSQL_PORT=&lt;span&gt;&quot;3306&quot;&lt;/span&gt;&lt;br/&gt;MYSQL_USER=&lt;span&gt;&quot;root&quot;&lt;/span&gt;&lt;br/&gt;MYSQL_PW=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;REDIS_URL=&lt;span&gt;&quot;redis://localhost&quot;&lt;/span&gt;&lt;br/&gt;REDIS_POOL_MINSIZE=1&lt;br/&gt;REDIS_POOL_MAXSIZE=10&lt;br/&gt;REDIS_ENCODING=&lt;span&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到现在为止, 目录里只有&lt;code&gt;example.py&lt;/code&gt;主文件, &lt;code&gt;.env&lt;/code&gt;配置文件以及&lt;code&gt;requirements.txt&lt;/code&gt;的依赖文件, 现在开始启动应用查看应用是否能正常启动(注意修改mysql和redis的配置文件, 目前假设已经在本地安装好mysql和redis):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 使用python -m uvicorn可以防止调用到外部的uvicorn&lt;/span&gt;&lt;br/&gt;python -m uvicorn example:app&lt;br/&gt;&lt;span&gt;# 以下为终端输出&lt;/span&gt;&lt;br/&gt;INFO:     Started server process [4616]&lt;br/&gt;INFO:     Waiting &lt;span&gt;for&lt;/span&gt; application startup.&lt;br/&gt;INFO:     Application startup complete.&lt;br/&gt;INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过终端的输出可以看到我们的服务已经启动并监听本机的8000端口,接下来测试接口可否正常使用:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;➜  curl http://127.0.0.1:8000&lt;br/&gt;Hello Word!&lt;br/&gt;➜  curl http://127.0.0.1:8000/mysql&lt;br/&gt;{&lt;span&gt;&quot;result&quot;&lt;/span&gt;:[0]}&lt;br/&gt;➜  curl http://127.0.0.1:8000/mysql\?count\=10&lt;br/&gt;{&lt;span&gt;&quot;result&quot;&lt;/span&gt;:[10]}&lt;br/&gt;➜  curl http://127.0.0.1:8000/mysql\?count\=50&lt;br/&gt;{&lt;span&gt;&quot;result&quot;&lt;/span&gt;:[50]}&lt;br/&gt;➜  curl http://127.0.0.1:8000/redis\?key\=&lt;span&gt;test&lt;/span&gt;&lt;br/&gt;{&lt;span&gt;&quot;count&quot;&lt;/span&gt;:0}&lt;br/&gt;➜  curl http://127.0.0.1:8000/redis\?key\=&lt;span&gt;test&lt;/span&gt;\&amp;amp;count\=2&lt;br/&gt;{&lt;span&gt;&quot;count&quot;&lt;/span&gt;:2}&lt;br/&gt;➜  curl http://127.0.0.1:8000/redis\?key\=&lt;span&gt;test&lt;/span&gt;\&amp;amp;count\=2&lt;br/&gt;{&lt;span&gt;&quot;count&quot;&lt;/span&gt;:4}&lt;br/&gt;➜  curl http://127.0.0.1:8000/redis\?key\=&lt;span&gt;test&lt;/span&gt;\&amp;amp;count\=2&lt;br/&gt;{&lt;span&gt;&quot;count&quot;&lt;/span&gt;:6}&lt;br/&gt;➜  curl http://127.0.0.1:8000/redis\?key\=&lt;span&gt;test&lt;/span&gt;\&amp;amp;count\=2&lt;br/&gt;{&lt;span&gt;&quot;count&quot;&lt;/span&gt;:8}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过输出可以发现, 我们的测试结果正常, 接口可以正常使用,前菜到此结束, 接下来是开始利用&lt;code&gt;Docker&lt;/code&gt;部署Python Web应用之旅.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.为项目创建镜像并运行&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前我们还没碰过&lt;code&gt;Docker&lt;/code&gt;, 从这里开始, 就开始使用&lt;code&gt;Docker&lt;/code&gt;了, 但在使用之前要确保自己安装了&lt;code&gt;Docker&lt;/code&gt;, 每个平台都有不同的安装方法且资料很多， 官方资料也很详细, 这里就不多做描述了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;Docker&lt;/code&gt;中创建镜像很简单， 只需要通过一个&lt;code&gt;Dockerfile&lt;/code&gt;文件来告诉&lt;code&gt;Docker&lt;/code&gt;如何制作镜像即可, &lt;code&gt;Dockerfile&lt;/code&gt;主要包括两个用途, 一个是对当前镜像的描述；一个是指导&lt;code&gt;Docker&lt;/code&gt;完成应用的容器化（创建一个包含当前应用的镜像),&lt;code&gt;Dockerfile&lt;/code&gt;能实现开发和部署两个过程的无缝切换, 同时&lt;code&gt;Dockerfile&lt;/code&gt;还能帮助新手快速熟悉这个项目(&lt;code&gt;Dockerfile&lt;/code&gt;对当前的应用及其依赖有一个清晰准确的描述，并且非常容易阅读和理解，因此，要像重视你的代码一样重视这个文件，并且将它纳入到源控制系统当中.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单的了解后开始编写对应的&lt;code&gt;Dockerfile&lt;/code&gt;文件， 文件如下(源码):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 拉取python的基础镜像, 具体使用python -V查看刚才自己是哪个版本的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; python:&lt;span&gt;3.7&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-alpine&lt;br/&gt;&lt;span&gt;# 设置当前镜像的维护者&lt;/span&gt;&lt;br/&gt;&lt;span&gt;LABEL&lt;/span&gt;&lt;span&gt; maintainer=&lt;span&gt;&quot;so1nxxxx@gmail.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 设置工作目录&lt;/span&gt;&lt;br/&gt;&lt;span&gt;WORKDIR&lt;/span&gt;&lt;span&gt; /data/app&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 复制本地依赖, 每个COPY会新建一个镜像层&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; . .&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 设置环境变量&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 不要生成pyc文件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; PYTHONDONTWRITEBYTECODE &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; PYTHONUNBUFFERED &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 安装依赖, 由于aioredis依赖的hiredis以及cryptography需要编译, 所以这里需要add这些包, 这样依赖，容器就会变得很大...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; apk add --update gcc musl-dev python3-dev libffi-dev openssl-dev build-base &amp;amp;&amp;amp; pip install --upgrade pip &amp;amp;&amp;amp; pip install -r requirements.txt&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 指明监听的端口&lt;/span&gt;&lt;br/&gt;&lt;span&gt;EXPOSE&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 运行的命令&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CMD&lt;/span&gt;&lt;span&gt; [&lt;span&gt;&quot;uvicorn&quot;&lt;/span&gt;, &lt;span&gt;&quot;--host&quot;&lt;/span&gt;, &lt;span&gt;&quot;0.0.0.0&quot;&lt;/span&gt;, &lt;span&gt;&quot;example:app&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Dockerfile&lt;/code&gt;文件中的命令虽然有点多, 但是不复杂, 理解后就会发现这些命令可读性很高, 以下是各个命令的解读:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;FROM: 每个&lt;code&gt;Dockerfile&lt;/code&gt;文件第一行都是FROM指令, FROM指令指定的镜像，都会作为当前镜像的一个基础镜像层，后续命令产生的镜像都会作为新增镜像层添加到基础镜像层之上。这里我们使用&lt;code&gt;python:xxx-alpine&lt;/code&gt;的镜像都是官方的镜像, 这个镜像的Python是建立在一个alpine Linux的镜像上面, alpine Linux体积非常小, 不过麻雀虽小, 但五脏俱全。使用FROM指令引用官方基础镜像是一个很好的习惯，这是因为官方的镜像通常会遵循一些最佳实践，并且能帮助使用者规避一些已知的问题。除此之外，使用FROM的时候选择一个相对较小的镜像文件通常也能避免一些潜在的问题.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;LABEL: &lt;code&gt;Dockerfile&lt;/code&gt;中通过标签（LABLE）方式指定了当前镜像的维护者。每个标签其实是一个键值对（Key-Value），在一个镜像当中可以通过增加标签的方式来为镜像添加自定义元数据.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;WORKDIR: 指明在镜像中的工作目录&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;COPY: 复制本地目录, 将应用相关文件从构建上下文复制到了当前镜像中，并且新建一个镜像层来存储.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ENV: 设置该镜像运行时的环境变量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RUN: 执行命令, RUN指令会在FROM指定的alpine基础镜像之上，新建一个镜像层来存储这些安装内容.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;EXPOSE: 指明监听的端口, 实际上并没有任何作用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CMD: 启动时运行的命令&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些命令都很简单, 不过我在&lt;code&gt;COPY&lt;/code&gt;和&lt;code&gt;RUN&lt;/code&gt;命令注释中, 都说到了新建了一个镜像层, 在&lt;code&gt;Docker&lt;/code&gt;镜像中， 每多一个镜像层就意味&lt;span&gt;着&lt;/span&gt;这个镜像会占用更多存储空间, 同时也会更难用, 更慢。 所以大家一般都会追求构建的镜像都尽量的小， 不喜欢因为几个命令导致镜像占用过多的空间。那我们该怎么区分命令， 判断哪些命令会新增一个镜像层呢?&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于如何区分命令是否会新建镜像层的一个基本原则是，如果指令的作用是向镜像中增添新的文件或者程序，那么这条指令就会新建镜像层， 如果只是告诉&lt;code&gt;Docker&lt;/code&gt;如何完成构建或者如何运行应用程序，那么就只会增加镜像的元数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外， 不同的&lt;code&gt;Dockerfile&lt;/code&gt;写法都会导致镜像层数量的不同, 比如在&lt;code&gt;Dockerfile&lt;/code&gt;中每一个&lt;code&gt;RUN&lt;/code&gt;指令基本都会新增一个镜像层, 我们可以通过使用&amp;amp;&amp;amp;连接多个命令或者使用反斜杠（\）换行的方法，将多个命令包含在一个RUN指令中, 这样就可以减少镜像层的产生。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过有些时候要把&lt;code&gt;RUN&lt;/code&gt;拆分的, 因为&lt;code&gt;Docker&lt;/code&gt;自带了一个缓存机制, 如果这个&lt;code&gt;RUN&lt;/code&gt;执行时构建的镜像层在缓存中时, &lt;code&gt;Docker&lt;/code&gt;会直接引用， 这样构建速度就会比较快, 而在把所有&lt;code&gt;RUN&lt;/code&gt;合并到同一条时, 基本上就很难命中缓存了(需要注意的是, docker在执行到第一句不命中缓存的命令后, 后面的所有命令是都不会通过缓存构建的)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在&lt;code&gt;Dockerfile&lt;/code&gt;编写完了， 在构建镜像之前, 我们先检查我们的目录:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;(venv) ➜  python_on_docker git:(master) ls -a&lt;br/&gt;Dockerfile  example.py  requirements.txt __pycache__  venv .env&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发现目录下面有&lt;code&gt;__pycache__&lt;/code&gt;和&lt;code&gt;venv&lt;/code&gt;文件, 这两个文件我是不想编进镜像里的， 但是开发的时候需要用到, 这时就可以使用&lt;code&gt;Docker&lt;/code&gt;中一个类似于&lt;code&gt;gitignore&lt;/code&gt;的机制, 我们通过&lt;code&gt;.dockerignore&lt;/code&gt;文件编写我们要忽略的文件即可让&lt;code&gt;Docker&lt;/code&gt;在构建镜像时忽略这些文件:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;__pycache__/&lt;br/&gt;.venv&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，&lt;code&gt;Dockerfile&lt;/code&gt;和&lt;code&gt;.dockerignore&lt;/code&gt;文件创建完了, 可以通过以下的命令开始构建自己的镜像了:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# -t后面是标签, 可以自己填写, .代表当前目录&lt;/span&gt;&lt;br/&gt;➜  docker image build -t app:latest .&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构建完镜像后就可以查看当前镜像了&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 查看当前的镜像&lt;/span&gt;&lt;br/&gt;➜  version_1 git:(master) docker image ls&lt;br/&gt;REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE&lt;br/&gt;app                 latest              3351ee7a79ac        About a minute ago   435MB&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到我们的镜像已经创建成功了， 不过显示这个简单的镜像占用了435MB的空间， 这是不合理的， 我们可以通过&lt;code&gt;docker image inspect xxx&lt;/code&gt;查看镜像有多少层, 有哪些卷和配置信息, 进一步解决镜像过大的问题(由于返回的数据会比较多, 这里就不展示了)。此外， 我们还可以通过&lt;code&gt;history&lt;/code&gt;命令查看我们的镜像构建情况, 了解是哪一个步骤导致镜像变大的:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;➜  version_1 git:(master) docker &lt;span&gt;history&lt;/span&gt; app&lt;br/&gt;IMAGE               CREATED              CREATED BY                                      SIZE                COMMENT&lt;br/&gt;3351ee7a79ac        About a minute ago   /bin/sh -c &lt;span&gt;#(nop)  CMD [&quot;uvicorn&quot; &quot;--host&quot; &quot;…   0B                  &lt;/span&gt;&lt;br/&gt;f7fedcb216b0        About a minute ago   /bin/sh -c &lt;span&gt;#(nop)  EXPOSE 8080                  0B                  &lt;/span&gt;&lt;br/&gt;190fd056b947        About a minute ago   /bin/sh -c apk add --update gcc musl-dev pyt…   313MB               &lt;br/&gt;66901ff8b9d4        5 minutes ago        /bin/sh -c &lt;span&gt;#(nop)  ENV PYTHONUNBUFFERED=1       0B                  &lt;/span&gt;&lt;br/&gt;7e85b2fa504e        5 minutes ago        /bin/sh -c &lt;span&gt;#(nop)  ENV PYTHONDONTWRITEBYTECO…   0B                  &lt;/span&gt;&lt;br/&gt;a2714bff8c12        5 minutes ago        /bin/sh -c &lt;span&gt;#(nop) COPY dir:26dace857b0be9773…   23.7MB              &lt;/span&gt;&lt;br/&gt;dc4d69bd98e5        5 minutes ago        /bin/sh -c &lt;span&gt;#(nop) WORKDIR /data/app             0B                  &lt;/span&gt;&lt;br/&gt;db1533598434        5 minutes ago        /bin/sh -c &lt;span&gt;#(nop)  LABEL maintainer=so1nxxxx…   0B                  &lt;/span&gt;&lt;br/&gt;f309434dea3a        16 months ago        /bin/sh -c &lt;span&gt;#(nop)  CMD [&quot;python3&quot;]              0B                  &lt;/span&gt;&lt;br/&gt;&amp;lt;missing&amp;gt;           16 months ago        /bin/sh -c &lt;span&gt;set&lt;/span&gt; -ex;   wget -O get-pip.py &lt;span&gt;&quot;&lt;span&gt;$P&lt;/span&gt;…   6.24MB              &lt;br/&gt;&amp;lt;missing&amp;gt;           16 months ago        /bin/sh -c #(nop)  ENV PYTHON_GET_PIP_SHA256…   0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           16 months ago        /bin/sh -c #(nop)  ENV PYTHON_GET_PIP_URL=ht…   0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           16 months ago        /bin/sh -c #(nop)  ENV PYTHON_PIP_VERSION=19…   0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago        /bin/sh -c cd /usr/local/bin  &amp;amp;&amp;amp; ln -s idle3…   32B                 &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago        /bin/sh -c set -ex  &amp;amp;&amp;amp; apk add --no-cache --…   86.4MB              &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago        /bin/sh -c #(nop)  ENV PYTHON_VERSION=3.7.4     0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago        /bin/sh -c #(nop)  ENV GPG_KEY=0D96DF4D4110E…   0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago        /bin/sh -c apk add --no-cache ca-certificates   551kB               &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago        /bin/sh -c #(nop)  ENV LANG=C.UTF-8             0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago        /bin/sh -c #(nop)  ENV PATH=/usr/local/bin:/…   0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago        /bin/sh -c #(nop)  CMD [&quot;&lt;/span&gt;/bin/sh&lt;span&gt;&quot;]              0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago        /bin/sh -c #(nop) ADD file:fe64057fbb83dccb9…   5.58MB&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到, 第3条命令的&lt;code&gt;apk ...&lt;/code&gt;那里占用的空间最大, 这是因为在&lt;code&gt;RUN&lt;/code&gt;的时候需要安装一些编译依赖后才能安装我们的想要的&lt;code&gt;Python&lt;/code&gt;库, 但这些依赖都非常大。幸好&lt;code&gt;Docker&lt;/code&gt;针对这种情况提供了多阶段构建的功能(还有建造者模式, 但不如多阶段构建), 多阶段构建方式是一个&lt;code&gt;Dockerfile&lt;/code&gt;文件包含了多个FROM指令， 在这个文件中每一个FROM指令都是一个新的构建阶段（Build Stage），并且每个新的构建接单都可以方便地复制之前阶段完成的构件, 也就是可以先通过依赖构建一个比较重的Docker镜像， 然后基于该镜像构建一个用户真正想要的镜像， 最终只保留最后构建的镜像。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是我们可以把我们的&lt;code&gt;Dockerfile&lt;/code&gt;文件进行改写， 使用第一个构建阶段解决好依赖安装， 然后在第二个构建阶段时基于第一阶段的依赖构建一个新的镜像， 最后输出第二个构建阶段的镜像， 该示例文件如下：(源码):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;#####################&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 编译依赖的配置文件#&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#####################&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 第一阶段&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 设置该阶段的别名为builder&lt;/span&gt;&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; python:&lt;span&gt;3.7&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-alpine as builder&lt;br/&gt;&lt;span&gt;# 设置工作目录&lt;/span&gt;&lt;br/&gt;&lt;span&gt;WORKDIR&lt;/span&gt;&lt;span&gt; /data/app&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 复制本地依赖&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; . .&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 设置环境变量&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 不要生成pyc文件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; PYTHONDONTWRITEBYTECODE &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; PYTHONUNBUFFERED &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 安装依赖并编译文件到/data/python_wheels&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; apk add --update gcc musl-dev python3-dev libffi-dev openssl-dev build-base &amp;amp;&amp;amp; pip install --upgrade pip &amp;amp;&amp;amp; pip wheel --no-cache-dir --no-deps --wheel-dir /data/python_wheels -r requirements.txt&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#####################&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 线上使用的配置文件#&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#####################&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 第二阶段&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 拉取python的基础镜像, 具体使用python -V查看刚才自己是哪个版本的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; python:&lt;span&gt;3.7&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-alpine&lt;br/&gt;&lt;span&gt;# 设置当前镜像的维护者&lt;/span&gt;&lt;br/&gt;&lt;span&gt;LABEL&lt;/span&gt;&lt;span&gt; maintainer=&lt;span&gt;&quot;so1nxxxx@gmail.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 设置工作目录&lt;/span&gt;&lt;br/&gt;&lt;span&gt;WORKDIR&lt;/span&gt;&lt;span&gt; /data/app&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 复制本地依赖&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; . .&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 将第一构建阶段生成的编译文件复制到容器对应的路径下面&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; --from=builder /data/python_wheels /data/python_wheels&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 通过wheels安装python依赖&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; pip install --no-cache /data/python_wheels/*&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 指明监听的端口&lt;/span&gt;&lt;br/&gt;&lt;span&gt;EXPOSE&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 运行的命令&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CMD&lt;/span&gt;&lt;span&gt; [&lt;span&gt;&quot;uvicorn&quot;&lt;/span&gt;, &lt;span&gt;&quot;--host&quot;&lt;/span&gt;, &lt;span&gt;&quot;0.0.0.0&quot;&lt;/span&gt;, &lt;span&gt;&quot;example:app&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所示的&lt;code&gt;Dockerfile&lt;/code&gt;文件中有两个&lt;code&gt;FROM&lt;/code&gt;, 一个&lt;code&gt;FROM&lt;/code&gt;代表一个单独的构建阶段， 第一个阶段是根据当前的&lt;code&gt;Python&lt;/code&gt;环境, 安装并编译需要的依赖, 然后根据&lt;code&gt;requirements&lt;/code&gt;生成&lt;code&gt;Python&lt;/code&gt;的 wheel文件, 生成的位置是&lt;code&gt;/data/python_wheels&lt;/code&gt;。第二个&lt;code&gt;FROM&lt;/code&gt;还是跟刚才的一样, 直到&lt;code&gt;COPY&lt;/code&gt;语句,这里是一个&lt;code&gt;COPY --from&lt;/code&gt;指令，它从之前的阶段构建的镜像中仅复制生产环境相关的依赖，而不会复制生产环境不需要的依赖, 这个语句的意思是从builder构建阶段的&lt;code&gt;/data/python_wheels&lt;/code&gt;复制到当前构建阶段的&lt;code&gt;/data/python_wheels&lt;/code&gt;。接下来&lt;code&gt;RUN&lt;/code&gt;语句也发生改变, 由于在第一阶段已经编译好了依赖, 这里直接使用依赖进行安装即可. 后面的就跟前面一样, 没有什么变化, &lt;code&gt;Dkckerfile&lt;/code&gt;文件编写好了, 开始构建自己的镜像:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# -t后面是标签, 可以自己填写, .代表当前目录&lt;/span&gt;&lt;br/&gt;➜  docker image build -t app_1:latest .&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构建完成后查看构建完的镜像:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;➜  version_2 git:(master) docker image ls&lt;br/&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;br/&gt;app_1               latest              a71a4a7db157        7 seconds ago       116MB&lt;br/&gt;app                 latest              3351ee7a79ac        9 minutes ago       435MB&lt;br/&gt;&lt;br/&gt;➜  version_2 git:(master) docker &lt;span&gt;history&lt;/span&gt; app_1&lt;br/&gt;IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT&lt;br/&gt;a71a4a7db157        43 seconds ago      /bin/sh -c &lt;span&gt;#(nop)  CMD [&quot;uvicorn&quot; &quot;--host&quot; &quot;…   0B                  &lt;/span&gt;&lt;br/&gt;d4d38b71a1ba        43 seconds ago      /bin/sh -c &lt;span&gt;#(nop)  EXPOSE 8080                  0B                  &lt;/span&gt;&lt;br/&gt;5fb10c8afea8        43 seconds ago      /bin/sh -c pip install --no-cache /data/pyth…   15.3MB              &lt;br/&gt;e454bbe54adb        46 seconds ago      /bin/sh -c &lt;span&gt;#(nop) COPY dir:ff6195d46738a79a1…   2.13MB              &lt;/span&gt;&lt;br/&gt;d70a8a552490        46 seconds ago      /bin/sh -c &lt;span&gt;#(nop) COPY dir:fbe9ac8ac1636d3d7…   3.63kB              &lt;/span&gt;&lt;br/&gt;dc4d69bd98e5        14 minutes ago      /bin/sh -c &lt;span&gt;#(nop) WORKDIR /data/app             0B                  &lt;/span&gt;&lt;br/&gt;db1533598434        14 minutes ago      /bin/sh -c &lt;span&gt;#(nop)  LABEL maintainer=so1nxxxx…   0B                  &lt;/span&gt;&lt;br/&gt;f309434dea3a        16 months ago       /bin/sh -c &lt;span&gt;#(nop)  CMD [&quot;python3&quot;]              0B                  &lt;/span&gt;&lt;br/&gt;&amp;lt;missing&amp;gt;           16 months ago       /bin/sh -c &lt;span&gt;set&lt;/span&gt; -ex;   wget -O get-pip.py &lt;span&gt;&quot;&lt;span&gt;$P&lt;/span&gt;…   6.24MB              &lt;br/&gt;&amp;lt;missing&amp;gt;           16 months ago       /bin/sh -c #(nop)  ENV PYTHON_GET_PIP_SHA256…   0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           16 months ago       /bin/sh -c #(nop)  ENV PYTHON_GET_PIP_URL=ht…   0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           16 months ago       /bin/sh -c #(nop)  ENV PYTHON_PIP_VERSION=19…   0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago       /bin/sh -c cd /usr/local/bin  &amp;amp;&amp;amp; ln -s idle3…   32B                 &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago       /bin/sh -c set -ex  &amp;amp;&amp;amp; apk add --no-cache --…   86.4MB              &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago       /bin/sh -c #(nop)  ENV PYTHON_VERSION=3.7.4     0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago       /bin/sh -c #(nop)  ENV GPG_KEY=0D96DF4D4110E…   0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago       /bin/sh -c apk add --no-cache ca-certificates   551kB               &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago       /bin/sh -c #(nop)  ENV LANG=C.UTF-8             0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago       /bin/sh -c #(nop)  ENV PATH=/usr/local/bin:/…   0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago       /bin/sh -c #(nop)  CMD [&quot;&lt;/span&gt;/bin/sh&lt;span&gt;&quot;]              0B                  &lt;br/&gt;&amp;lt;missing&amp;gt;           17 months ago       /bin/sh -c #(nop) ADD file:fe64057fbb83dccb9…   5.58MB &lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到现在的镜像大小已经减少很多了, 差不多只剩4分之一，非常完美! 如果还想让镜像更小一点, 那可以在使用&lt;code&gt;bliud&lt;/code&gt;命令时, 添加&lt;code&gt;--squash&lt;/code&gt;选项, 这样&lt;code&gt;Docker&lt;/code&gt;在&lt;code&gt;build&lt;/code&gt;的时候就会把所有镜像层合并为一个, 但这也是有缺点的, 因为合并的镜像层无法共享镜像层, 而且镜像在&lt;code&gt;push&lt;/code&gt;和&lt;code&gt;pull&lt;/code&gt;的时候开销会变得很大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;镜像终于创建完了, 终于可以启动容器查看我们构建的镜像的运行效果了:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 执行容器运行命令, --name参数可以自己定, -p 参数指定容器的端口(第二个)绑定到本机的端口(第一), 最后一个参数为image id每次生成的镜像都不同&lt;/span&gt;&lt;br/&gt;➜  docker container run -d --name docker_app_1 -p 8000:8000 app_1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用了启动命令后， 通过&lt;code&gt;ps&lt;/code&gt;命令你给查看容器运行情况:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 启动后查看容器启动失败, 很正常, 配置用的是`127.0.0.1`而容器没有安装mysql和redis,肯定是连不上的 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 查看容器状态&lt;/span&gt;&lt;br/&gt;➜  version_2 git:(master) docker ps -a&lt;br/&gt;CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES&lt;br/&gt;3070cf77c951        app_1               &lt;span&gt;&quot;uvicorn --host 0.0.…&quot;&lt;/span&gt;   7 seconds ago       Exited (0) 6 seconds ago                       docker_app_1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过输出可以发现镜像运行失败, 但是不知道为啥失败, 只能通过运行日志查看为什么失败:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 查看运行日志&lt;/span&gt;&lt;br/&gt;➜  version_2 git:(master) docker logs -f -t --tail 10 docker_app_1 &lt;br/&gt;2021-02-07T09:01:16.062239955Z     await pool._fill_free_pool(False)&lt;br/&gt;2021-02-07T09:01:16.062241993Z   File &lt;span&gt;&quot;/usr/local/lib/python3.7/site-packages/aiomysql/pool.py&quot;&lt;/span&gt;, line 168, &lt;span&gt;in&lt;/span&gt; _fill_free_pool&lt;br/&gt;2021-02-07T09:01:16.062250734Z     **self._conn_kwargs)&lt;br/&gt;2021-02-07T09:01:16.062253106Z   File &lt;span&gt;&quot;/usr/local/lib/python3.7/site-packages/aiomysql/connection.py&quot;&lt;/span&gt;, line 75, &lt;span&gt;in&lt;/span&gt; _connect&lt;br/&gt;2021-02-07T09:01:16.062255305Z     await conn._connect()&lt;br/&gt;2021-02-07T09:01:16.062257318Z   File &lt;span&gt;&quot;/usr/local/lib/python3.7/site-packages/aiomysql/connection.py&quot;&lt;/span&gt;, line 523, &lt;span&gt;in&lt;/span&gt; _connect&lt;br/&gt;2021-02-07T09:01:16.062259455Z     self._host) from e&lt;br/&gt;2021-02-07T09:01:16.062275244Z pymysql.err.OperationalError: (2003, &lt;span&gt;&quot;Can&#x27;t connect to MySQL server on &#x27;127.0.0.1&#x27;&quot;&lt;/span&gt;)&lt;br/&gt;2021-02-07T09:01:16.062277250Z &lt;br/&gt;2021-02-07T09:01:16.062279127Z ERROR:    Application startup failed. Exiting.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从报错日志可以看到, 镜像启动失败是由于连不上&lt;code&gt;127.0.0.1&lt;/code&gt;地址导致报错了, 可是本机上面已经安装了&lt;code&gt;MySQL&lt;/code&gt;啊, 为什么还会连不上呢? 这是因为&lt;code&gt;Docker&lt;/code&gt;容器运行的时候会选择一个网络模式， 共有&lt;code&gt;host&lt;/code&gt;、&lt;code&gt;bridge&lt;/code&gt;和&lt;code&gt;none&lt;/code&gt;三种网络可供配置：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;bridge  该模式是&lt;code&gt;Docker&lt;/code&gt;的默认选项. bridge即桥接网络，以桥接模式连接到宿主机, 这时候容器内的应用访问&lt;code&gt;127.0.0.1&lt;/code&gt;是指容器本身的网络(在本机通过&lt;code&gt;ifconfig&lt;/code&gt;命令可以看到有个类似于&lt;code&gt;docker0&lt;/code&gt;的展示), 该模式下如果要连接到宿主机的网络, 只能把&lt;code&gt;127.0.0.1&lt;/code&gt;改为本机的局域网ip；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;host  host是宿主网络，即&lt;code&gt;Docker&lt;/code&gt;与宿主机共用网络, 在该模式下， &lt;code&gt;Docker&lt;/code&gt;容器内的应用使用网络时跟平时一样正常使用即可, 同时该模式的网络性能也是最好的, 如果在使用bridge模式时发现有网络瓶颈, 或者应用对网络延迟和并发有极高的要求时, 记得切为host网络模式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;none则表示无网络，容器内应用将无法联网.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解了&lt;code&gt;Docker&lt;/code&gt;的网络模式后， 我们可以通过把网络模式改为&lt;code&gt;host&lt;/code&gt;来解决连不上的问题了， 具体操作是通过去掉&lt;code&gt;-p 8000:8000&lt;/code&gt;选项, 增加&lt;code&gt;--net=host&lt;/code&gt;选项来启动容器 (如果旧容器存在, 记得删除掉, 不然会占用空间):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 启动容器&lt;/span&gt;&lt;br/&gt;➜  version_2 git:(master) docker container run -d --name docker_app_1 --net=host app_1  &lt;br/&gt;cd1ea057cdb6ec6ee3917d13f9c3c55db2a2949e409716d1dbb86f34bb1356e5&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 查看启动日志， 正常！&lt;/span&gt;&lt;br/&gt;➜  version_2 git:(master) docker logs -f -t --tail 10 docker_app_1&lt;br/&gt;2021-02-07T09:06:35.403888447Z INFO:     Started server process [1]&lt;br/&gt;2021-02-07T09:06:35.403903761Z INFO:     Waiting &lt;span&gt;for&lt;/span&gt; application startup.&lt;br/&gt;2021-02-07T09:06:35.437776480Z INFO:     Application startup complete.&lt;br/&gt;2021-02-07T09:06:35.438466743Z INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 调用接口发现启动成功&lt;/span&gt;&lt;br/&gt;➜  curl 127.0.0.1:8000&lt;br/&gt;127.0.0.1, Hello Word!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;则此, 我们终于把python的web应用构建成镜像, 并正常启动镜像了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.单引擎模式部署和管理多容器应用&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在懂了如何制作容器之后, 就可以开始准备成为Yaml工程师了, 上面我们只构建一个&lt;code&gt;Python&lt;/code&gt;应用的镜像, 然后连接了本地的&lt;code&gt;MySQL&lt;/code&gt;和&lt;code&gt;Redis&lt;/code&gt;服务, 现在我们也可以把&lt;code&gt;MySQL&lt;/code&gt;和&lt;code&gt;Redis&lt;/code&gt;这两个服务一起容器化, 不过这时候每个服务都通过一个特定&lt;code&gt;Dockerfile&lt;/code&gt;来配置并使用的话就太麻烦了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有一个像&lt;code&gt;Dockerfile&lt;/code&gt;的文件, 文件里写了如何安装这3个镜像, 然后我们执行一个命令就可以把这三个服务都安装到服务器上, 那就很方便了, 在&lt;code&gt;Docker&lt;/code&gt;中是由&lt;code&gt;Docker Compose&lt;/code&gt;提供了这个功能。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果用过&lt;code&gt;Ansible&lt;/code&gt;, 就知道会有一个&lt;code&gt;palybook&lt;/code&gt;的yaml配置文件, 只要在控制主机上存放一个&lt;code&gt;palybook&lt;/code&gt;文件， 就可以控制其它机器执行任何操作, 比如为其它主机安装应用等到, 而&lt;code&gt;Docker Compose&lt;/code&gt;有点类似, 基于该功能可以做到在一台机器上同时管理多个&lt;code&gt;Docker&lt;/code&gt;容器。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Docker Compose&lt;/code&gt;通过一个声明式的配置文件描述整个应用，从而使用一条命令完成部署。应用部署成功后，还可以通过一系列简单的命令实现对其完整生命周期的管理。此外，配置文件还可以置于版本控制系统中进行存储和管理, 这个工具会跟&lt;code&gt;docker&lt;/code&gt;一起安装。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来就是实战了， 本次实例相比于之前的服务多了个&lt;code&gt;Nginx&lt;/code&gt;服务， 而且&lt;code&gt;Nginx&lt;/code&gt;是需要一个配置文件都，所以需要先为&lt;code&gt;Nginx&lt;/code&gt;单独配置一个&lt;code&gt;Dockerfile&lt;/code&gt;文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先, 在目录创建一个&lt;code&gt;nginx&lt;/code&gt;文件夹, 然后在文件夹里面编写配置文件&lt;code&gt;nginx.conf&lt;/code&gt;(源码):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;upstream app_server {&lt;br/&gt;    server app:8000;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;server {&lt;br/&gt;&lt;br/&gt;    listen 80;&lt;br/&gt;&lt;br/&gt;    location / {&lt;br/&gt;        proxy_pass http://app_server;&lt;br/&gt;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;br/&gt;        proxy_set_header Host $host;&lt;br/&gt;        proxy_redirect off;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时可能发现配置文件里的&lt;code&gt;upstream&lt;/code&gt;里面有个奇怪的配置&lt;code&gt;app:8000&lt;/code&gt;,我们先不管, 继续创建&lt;code&gt;Nginx&lt;/code&gt;的&lt;code&gt;Dockerfile&lt;/code&gt;(源码)文件:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;FROM&lt;/span&gt; nginx:&lt;span&gt;1.19&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-alpine&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 移除Nginx的默认配置文件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; rm /etc/nginx/conf.d/default.conf&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 使用我们编写的配置文件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; nginx.conf /etc/nginx/conf.d&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在， &lt;code&gt;Nginx&lt;/code&gt;的容器文件已经准备完毕， 开始编写我们的&lt;code&gt;docker-compose.yml&lt;/code&gt;文件, 假设我们现在的单服务器需要有&lt;code&gt;Python&lt;/code&gt;的Web服务, &lt;code&gt;Nginx&lt;/code&gt;, &lt;code&gt;Redis&lt;/code&gt;和&lt;code&gt;MySQL&lt;/code&gt;服务(源码):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# version是必须指定的，而且总是位于文件的第一行。它定义了Compose文件格式（主要是API）的版本。建议使用最新版本。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;version:&lt;/span&gt; &lt;span&gt;&quot;3.5&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 用于定义不同的应用服务&lt;/span&gt;&lt;br/&gt;&lt;span&gt;services:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;redis:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 基于redis:alpine镜像启动一个独立的名为redis的容器。&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;&quot;redis:alpine&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 使得Docker可以将服务连接到指定的网络上。这个网络应该是已经存在的，或者是在networks一级key中定义的网络。&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;local-net&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 指定Docker将容器内（-target）的6379端口映射到主机（published）的63790端口。&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;target:&lt;/span&gt; &lt;span&gt;6379&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;published:&lt;/span&gt; &lt;span&gt;63790&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;mysql:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;mysql&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;command:&lt;/span&gt; &lt;span&gt;mysqld&lt;/span&gt; &lt;span&gt;--character-set-server=utf8mb4&lt;/span&gt; &lt;span&gt;--collation-server=utf8mb4_unicode_ci&lt;/span&gt; &lt;span&gt;#设置utf8字符集&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;restart:&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;local-net:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# 通过环境变量设置 mysql需要的用户名和密码等&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;MYSQL_DATABASE:&lt;/span&gt; &lt;span&gt;&#x27;test&#x27;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;MYSQL_USER:&lt;/span&gt; &lt;span&gt;&#x27;root&#x27;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;MYSQL_PASSWORD:&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;MYSQL_ROOT_PASSWORD:&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;MYSQL_ALLOW_EMPTY_PASSWORD:&lt;/span&gt; &lt;span&gt;&#x27;true&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;# 指定Docker将容器内（-target）的3306端口映射到主机（published）的33060端口。&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;target:&lt;/span&gt; &lt;span&gt;3306&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;published:&lt;/span&gt; &lt;span&gt;33060&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 设置MySQL容易存储内容在哪个目录&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;type:&lt;/span&gt; &lt;span&gt;volume&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;source:&lt;/span&gt; &lt;span&gt;local-vol&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;target:&lt;/span&gt; &lt;span&gt;/example_volumes&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;app:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 指定Docker基于当前目录（.）下Dockerfile中定义的指令来构建一个新镜像。该镜像会被用于启动该服务的容器。&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;build:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 指定Docker在容器中执行的命令, 由于我们的Dockerfile中已经有了， 这里就注释掉&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# command:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 指定Docker将容器内（-target）的8000端口映射到主机（published）的8000端口。&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;target:&lt;/span&gt; &lt;span&gt;8000&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;published:&lt;/span&gt; &lt;span&gt;8000&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;local-net&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 挂载到本地的卷&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;type:&lt;/span&gt; &lt;span&gt;volume&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;source:&lt;/span&gt; &lt;span&gt;local-vol&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;target:&lt;/span&gt; &lt;span&gt;/example_volumes&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 声明需要依赖上面的服务, 只有上面的服务起来， 这个才能起&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;mysql&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;redis&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;nginx:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;build:&lt;/span&gt; &lt;span&gt;./nginx&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;# 指定Docker将容器内（-target）的80端口映射到主机（published）的8001端口。&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;local-net&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;target:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;published:&lt;/span&gt; &lt;span&gt;8001&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;app&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# networks用于指引Docker创建新的网络。默认情况下，Docker Compose会创建bridge网络。这是一种单主机网络，只能够实现同一主机上容器的连接。当然，也可以使用driver属性来指定不同的网络类型。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;networks:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;local-net:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;driver:&lt;/span&gt; &lt;span&gt;bridge&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;local-vol:&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文件创建完了, 如果直接启动， 会发现虽然容器都会将端口映射到主机上面, 但是由于全部服务都配置了一个&lt;code&gt;local-net&lt;/code&gt;网络, 它是&lt;code&gt;bridge&lt;/code&gt;模式的网络, 所以容器里面访问&lt;code&gt;127.0.0.1&lt;/code&gt;是访问不到其他容器了, 不过这几个容器应用都可以通过&lt;code&gt;local-net&lt;/code&gt;网络建立连接, 只要通过访问容器服务名就可以直接访问到对应的容器(国内的教程很多都没说, 巨坑), 所以上面的&lt;code&gt;nginx.conf&lt;/code&gt;配置才有&lt;code&gt;app:8000&lt;/code&gt;这个选项, 指的是让&lt;code&gt;Nginx&lt;/code&gt;与我们的Python应用(服务名为app)的8000端口连接。除此之外, 我们还需要改下我们的.env配置文件, 把他们的host进行修改:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# MySQL访问的是mysql， 相当于访问自己的网络, 与127.0.0.1是类似的&lt;/span&gt;&lt;br/&gt;MYSQL_DB=&lt;span&gt;&quot;mysql&quot;&lt;/span&gt;&lt;br/&gt;MYSQL_HOST=&lt;span&gt;&quot;mysql&quot;&lt;/span&gt;&lt;br/&gt;MYSQL_PORT=&lt;span&gt;&quot;3306&quot;&lt;/span&gt;&lt;br/&gt;MYSQL_USER=&lt;span&gt;&quot;root&quot;&lt;/span&gt;&lt;br/&gt;MYSQL_PW=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;REDIS_URL=&lt;span&gt;&quot;redis://redis&quot;&lt;/span&gt;&lt;br/&gt;REDIS_POOL_MINSIZE=1&lt;br/&gt;REDIS_POOL_MAXSIZE=10&lt;br/&gt;REDIS_ENCODING=&lt;span&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后还需要改下app的&lt;code&gt;Dockerfile&lt;/code&gt;启动命令, 让他5秒后启动, 防止有些服务还没起来自己就先运行了:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;CMD&lt;/span&gt;&lt;span&gt; CMD sh -c &lt;span&gt;&#x27;sleep 5 &amp;amp;&amp;amp; uvicorn --host 0.0.0.0 example:app&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;万事俱备, 终于可以通过执行&lt;code&gt;docker-compose up -d&lt;/code&gt;命令来启动我们的容器群了, 在这个命令中d是后台运行的意思, 然后自通过几个命令查看运行情况:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 使用docker-compose up命令来查看应用的状态。输出中会显示容器名称、其中运行的Command、当前状态以及其监听的网络端口。&lt;/span&gt;&lt;br/&gt;➜  version_3 git:(master) docker-compose ps           &lt;br/&gt;      Name                     Command               State                 Ports               &lt;br/&gt;-----------------------------------------------------------------------------------------------&lt;br/&gt;version_3_app_1     uvicorn --host 0.0.0.0 exa ...   Up      0.0.0.0:8000-&amp;gt;8000/tcp, 8080/tcp  &lt;br/&gt;version_3_mysql_1   docker-entrypoint.sh mysql ...   Up      0.0.0.0:33060-&amp;gt;3306/tcp, 33060/tcp&lt;br/&gt;version_3_nginx_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:8001-&amp;gt;80/tcp              &lt;br/&gt;version_3_redis_1   docker-entrypoint.sh redis ...   Up      0.0.0.0:63790-&amp;gt;6379/tcp &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 使用docker-compose top命令列出各个服务（容器）内运行的进程。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 其中PID编号是在Docker主机上（而不是容器内）的进程ID。&lt;/span&gt;&lt;br/&gt;➜  version_3 git:(master) docker-compose top&lt;br/&gt;version_3_app_1&lt;br/&gt;UID    PID    PPID   C   STIME   TTY     TIME                                       CMD                                  &lt;br/&gt;-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;root   1802   1786   0   16:05   ?     00:00:00   /usr/&lt;span&gt;local&lt;/span&gt;/bin/python /usr/&lt;span&gt;local&lt;/span&gt;/bin/uvicorn --host 0.0.0.0 example:app&lt;br/&gt;&lt;br/&gt;version_3_mysql_1&lt;br/&gt;  UID      PID    PPID   C   STIME   TTY     TIME                                         CMD                                    &lt;br/&gt;---------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;deepin-+   1047   1018   0   16:05   ?     00:00:00   mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci&lt;br/&gt;&lt;br/&gt;version_3_nginx_1&lt;br/&gt;  UID      PID    PPID   C   STIME   TTY     TIME                        CMD                    &lt;br/&gt;------------------------------------------------------------------------------------------------&lt;br/&gt;root       1355   1339   0   16:05   ?     00:00:00   nginx: master process nginx -g daemon off;&lt;br/&gt;systemd+   1467   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1468   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1469   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1470   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1471   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1472   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1473   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1474   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1475   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1476   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1477   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;systemd+   1478   1355   0   16:05   ?     00:00:00   nginx: worker process                     &lt;br/&gt;&lt;br/&gt;version_3_redis_1&lt;br/&gt;  UID      PID    PPID   C   STIME   TTY     TIME         CMD     &lt;br/&gt;------------------------------------------------------------------&lt;br/&gt;deepin-+   1048   1014   0   16:05   ?     00:00:00   redis-server&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 查看目前的网络&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 查看network的详细信息 docker network inspect version_3_local-net  &lt;/span&gt;&lt;br/&gt;➜  version_3 git:(master) docker network ls&lt;br/&gt;NETWORK ID          NAME                  DRIVER              SCOPE&lt;br/&gt;b39273f15fb3        bridge                bridge              &lt;span&gt;local&lt;/span&gt;&lt;br/&gt;23ef7eb0fba0        host                  host                &lt;span&gt;local&lt;/span&gt;&lt;br/&gt;ab8439cd985c        none                  null                &lt;span&gt;local&lt;/span&gt;&lt;br/&gt;5bcd17ecd747        version_3_local-net   bridge              &lt;span&gt;local&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 查看卷&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 查看详情 docker volume inspect version_3_local-vol &lt;/span&gt;&lt;br/&gt;➜  version_3 git:(master) docker volume ls&lt;br/&gt;DRIVER              VOLUME NAME&lt;br/&gt;&lt;span&gt;local&lt;/span&gt;               version_3_local-vol&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上述的几个命令可以发现服务是正常运行的， 如果这时候要停止, 可以使用&lt;code&gt;docker-compose stop&lt;/code&gt;命令, 它会停止应用，但并不会删除资源, 不过对于已停止的应用，可以使用&lt;code&gt;docker-compose rm&lt;/code&gt;命令来进行删除, 这会删除应用相关的容器和网络，但是不会删除卷和镜像。而直接使用&lt;code&gt;docker-compose down&lt;/code&gt;这一个命令就可以停止和关闭应用, 然后应用被删除，仅留下了镜像、卷和源码。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此， Python应用的容器化就已经介绍完毕， 但是这只是一个简单的开始， 后面需要慢慢的了解多机的容器应用的怎么控制和执行的。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b3161e7e8022f7d3318fee4c20799201</guid>
<title>V2er -- 双端开源的V2EX客户端（SwiftUI+RXJava）</title>
<link>https://toutiao.io/k/59ctye1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;logged-out env-production page-responsive&quot; id=&quot;readabilityBody&quot;&gt;
    

    

  &lt;p id=&quot;start-of-content&quot; class=&quot;show-on-focus&quot;/&gt;







    


    

  &lt;include-fragment class=&quot;js-notification-shelf-include-fragment&quot; data-base-src=&quot;https://github.com/notifications/beta/shelf&quot;/&gt;





  &lt;div class=&quot;application-main &quot; data-commit-hovercards-enabled=&quot;&quot; data-discussion-hovercards-enabled=&quot;&quot; data-issue-and-pr-hovercards-enabled=&quot;&quot;&gt;
      &lt;main id=&quot;js-pjax-container&quot; data-pjax-container=&quot;&quot;&gt;
        







&lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Organization&quot;&gt;
  

&lt;header class=&quot;pagehead orghead border-bottom-0 pt-0&quot;&gt;
    &lt;include-fragment src=&quot;/orgs/v2er-app/survey_banner&quot; data-test-selector=&quot;survey-banner-selector&quot;&gt;
  &lt;/include-fragment&gt;


  &lt;div class=&quot;container-xl pt-4 pt-lg-0 p-responsive clearfix&quot;&gt;



    &lt;div class=&quot;d-flex flex-wrap flex-items-start flex-md-items-center my-3&quot;&gt;
        
      &lt;div class=&quot;flex-1&quot;&gt;
        &lt;h1 class=&quot;h2 lh-condensed&quot;&gt;
          v2er.app
        &lt;/h1&gt;

          &lt;div class=&quot;color-fg-muted&quot;&gt;&lt;p&gt;Let&#x27;s build the best V2EX client toghter ~&lt;/p&gt;&lt;/div&gt;

        
      &lt;/div&gt;

      &lt;p class=&quot;flex-self-start mt-3&quot;&gt;


      &lt;/p&gt;

    &lt;/div&gt;
  &lt;/div&gt;

  

&lt;/header&gt;


  &lt;div class=&quot;container-xl&quot;&gt;
    &lt;div data-view-component=&quot;true&quot; class=&quot;gutter-condensed gutter-lg flex-column flex-md-row d-flex&quot;&gt;

  &lt;div data-view-component=&quot;true&quot; class=&quot;flex-shrink-0 col-12 col-md-9 mb-4 mb-md-0&quot;&gt;        &lt;div class=&quot;position-relative&quot;&gt;
          

      
&lt;div class=&quot;container-lg p-responsive js-pinned-items-reorder-container clearfix&quot;&gt;

  
    &lt;div class=&quot;js-pinned-items-reorder-container&quot;&gt;
  &lt;h2 class=&quot;f4 mb-2 text-normal&quot;&gt;
        Pinned

    &lt;span role=&quot;status&quot;&gt;
  &lt;span class=&quot;sr-only&quot;&gt;Loading&lt;/span&gt;
  &lt;svg viewbox=&quot;0 0 16 16&quot; fill=&quot;none&quot; data-view-component=&quot;true&quot; class=&quot;spinner pinned-items-spinner js-pinned-items-spinner v-align-text-bottom ml-1 anim-rotate&quot;&gt;
    &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;7&quot; stroke=&quot;currentColor&quot; stroke-opacity=&quot;0.25&quot; stroke-width=&quot;2&quot; vector-effect=&quot;non-scaling-stroke&quot;/&gt;
    &lt;path d=&quot;M15 8a7.002 7.002 0 00-7-7&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; vector-effect=&quot;non-scaling-stroke&quot;/&gt;
&lt;/svg&gt;&lt;/span&gt;

    &lt;span class=&quot;ml-2 color-fg-muted f6 js-pinned-items-reorder-message&quot; role=&quot;status&quot; aria-live=&quot;polite&quot; data-error-text=&quot;Something went wrong.&quot; data-success-text=&quot;Order updated.&quot;/&gt;
  &lt;/h2&gt;

      &lt;ol class=&quot;d-flex flex-wrap list-style-none gutter-condensed mb-2 js-pinned-items-reorder-list&quot;&gt;
      &lt;li class=&quot;mb-3 d-flex flex-content-stretch col-12 col-md-6 col-lg-4&quot;&gt;
  &lt;div class=&quot;Box d-flex pinned-item-list-item p-3 width-full js-pinned-item-list-item public sortable-button-item source&quot;&gt;
    &lt;div class=&quot;pinned-item-list-item-content&quot;&gt;
      


      &lt;p class=&quot;pinned-item-desc color-fg-muted text-small d-block mt-2 mb-3&quot;&gt;
        The source of V2er.Android
      &lt;/p&gt;

      &lt;p class=&quot;mb-0 f6 color-fg-muted&quot;&gt;
          &lt;span class=&quot;d-inline-block mr-3&quot;&gt;
  &lt;span class=&quot;repo-language-color&quot;/&gt;
  &lt;span itemprop=&quot;programmingLanguage&quot;&gt;Java&lt;/span&gt;
&lt;/span&gt;

          &lt;a href=&quot;/v2er-app/Android/stargazers&quot; class=&quot;pinned-item-meta Link--muted &quot;&gt;
            &lt;svg aria-label=&quot;stars&quot; role=&quot;img&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-star&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25zm0 2.445L6.615 5.5a.75.75 0 01-.564.41l-3.097.45 2.24 2.184a.75.75 0 01.216.664l-.528 3.084 2.769-1.456a.75.75 0 01.698 0l2.77 1.456-.53-3.084a.75.75 0 01.216-.664l2.24-2.183-3.096-.45a.75.75 0 01-.564-.41L8 2.694v.001z&quot;/&gt;
&lt;/svg&gt;
            104
          &lt;/a&gt;
          &lt;a href=&quot;/v2er-app/Android/network/members&quot; class=&quot;pinned-item-meta Link--muted &quot;&gt;
            &lt;svg aria-label=&quot;forks&quot; role=&quot;img&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-repo-forked&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z&quot;/&gt;
&lt;/svg&gt;
            11
          &lt;/a&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/li&gt;

      &lt;li class=&quot;mb-3 d-flex flex-content-stretch col-12 col-md-6 col-lg-4&quot;&gt;
  &lt;div class=&quot;Box d-flex pinned-item-list-item p-3 width-full js-pinned-item-list-item public sortable-button-item source&quot;&gt;
    &lt;div class=&quot;pinned-item-list-item-content&quot;&gt;
      


      &lt;p class=&quot;pinned-item-desc color-fg-muted text-small d-block mt-2 mb-3&quot;&gt;
        The source of V2er.iOS
      &lt;/p&gt;

      &lt;p class=&quot;mb-0 f6 color-fg-muted&quot;&gt;
          &lt;span class=&quot;d-inline-block mr-3&quot;&gt;
  &lt;span class=&quot;repo-language-color&quot;/&gt;
  &lt;span itemprop=&quot;programmingLanguage&quot;&gt;Swift&lt;/span&gt;
&lt;/span&gt;

          &lt;a href=&quot;/v2er-app/iOS/stargazers&quot; class=&quot;pinned-item-meta Link--muted &quot;&gt;
            &lt;svg aria-label=&quot;stars&quot; role=&quot;img&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-star&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25zm0 2.445L6.615 5.5a.75.75 0 01-.564.41l-3.097.45 2.24 2.184a.75.75 0 01.216.664l-.528 3.084 2.769-1.456a.75.75 0 01.698 0l2.77 1.456-.53-3.084a.75.75 0 01.216-.664l2.24-2.183-3.096-.45a.75.75 0 01-.564-.41L8 2.694v.001z&quot;/&gt;
&lt;/svg&gt;
            127
          &lt;/a&gt;
          &lt;a href=&quot;/v2er-app/iOS/network/members&quot; class=&quot;pinned-item-meta Link--muted &quot;&gt;
            &lt;svg aria-label=&quot;forks&quot; role=&quot;img&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-repo-forked&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z&quot;/&gt;
&lt;/svg&gt;
            26
          &lt;/a&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/li&gt;

      &lt;li class=&quot;mb-3 d-flex flex-content-stretch col-12 col-md-6 col-lg-4&quot;&gt;
  &lt;div class=&quot;Box d-flex pinned-item-list-item p-3 width-full js-pinned-item-list-item public sortable-button-item source&quot;&gt;
    &lt;div class=&quot;pinned-item-list-item-content&quot;&gt;
      


      &lt;p class=&quot;pinned-item-desc color-fg-muted text-small d-block mt-2 mb-3&quot;&gt;
        The source of https://v2er.app
      &lt;/p&gt;

      &lt;p class=&quot;mb-0 f6 color-fg-muted&quot;&gt;
          &lt;span class=&quot;d-inline-block mr-3&quot;&gt;
  &lt;span class=&quot;repo-language-color&quot;/&gt;
  &lt;span itemprop=&quot;programmingLanguage&quot;&gt;CSS&lt;/span&gt;
&lt;/span&gt;

          &lt;a href=&quot;/v2er-app/v2er.app/stargazers&quot; class=&quot;pinned-item-meta Link--muted &quot;&gt;
            &lt;svg aria-label=&quot;stars&quot; role=&quot;img&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-star&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25zm0 2.445L6.615 5.5a.75.75 0 01-.564.41l-3.097.45 2.24 2.184a.75.75 0 01.216.664l-.528 3.084 2.769-1.456a.75.75 0 01.698 0l2.77 1.456-.53-3.084a.75.75 0 01.216-.664l2.24-2.183-3.096-.45a.75.75 0 01-.564-.41L8 2.694v.001z&quot;/&gt;
&lt;/svg&gt;
            12
          &lt;/a&gt;
          &lt;a href=&quot;/v2er-app/v2er.app/network/members&quot; class=&quot;pinned-item-meta Link--muted &quot;&gt;
            &lt;svg aria-label=&quot;forks&quot; role=&quot;img&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-repo-forked&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z&quot;/&gt;
&lt;/svg&gt;
            5
          &lt;/a&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/li&gt;

&lt;/ol&gt;

&lt;/div&gt;


    
&lt;/div&gt;




        &lt;/div&gt;
&lt;/div&gt;

    &lt;div data-view-component=&quot;true&quot; class=&quot;flex-shrink-0 col-12 col-md-3&quot;&gt;        &lt;div class=&quot;px-3 px-md-0&quot;&gt;
              &lt;div class=&quot;my-3 py-3&quot;&gt;
    &lt;div class=&quot;&quot; id=&quot;org-members&quot;&gt;
      &lt;a class=&quot;d-block color-fg-default&quot; href=&quot;/orgs/v2er-app/people&quot; data-ga-click=&quot;Orgs, go to people, location:profile people module; text:People&quot;&gt;
        &lt;h4 class=&quot;f4 text-normal&quot;&gt;People&lt;/h4&gt;
      &lt;/a&gt;
      &lt;p class=&quot;color-fg-muted mt-3 mb-0&quot;&gt;
        This organization has no public members. You must be a member to see who’s a part of this organization.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;


    




    


    



        &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;

      &lt;/main&gt;
  &lt;/div&gt;

            





  &lt;div id=&quot;ajax-error-message&quot; class=&quot;ajax-error-message flash flash-error&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;button type=&quot;button&quot; class=&quot;flash-close js-ajax-error-dismiss&quot; aria-label=&quot;Dismiss error&quot;&gt;
      &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
    &lt;/button&gt;&lt;p&gt;
    You can’t perform that action at this time.
  &lt;/p&gt;&lt;/div&gt;

  &lt;div class=&quot;js-stale-session-flash flash flash-warn flash-banner&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-in&quot; hidden=&quot;&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-out&quot; hidden=&quot;&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
  &lt;/div&gt;
    &lt;template id=&quot;site-details-dialog&quot;&gt;
  &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm&quot; open=&quot;&quot;&gt;
    &lt;summary role=&quot;button&quot; aria-label=&quot;Close dialog&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal&quot;&gt;
      &lt;button class=&quot;Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
        &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
      &lt;/button&gt;
      &lt;p class=&quot;octocat-spinner my-6 js-details-dialog-spinner&quot;/&gt;
    &lt;/details-dialog&gt;
  &lt;/details&gt;
&lt;/template&gt;

    

    &lt;template id=&quot;snippet-clipboard-copy-button&quot;&gt;
  
&lt;/template&gt;




  &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>