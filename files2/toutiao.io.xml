<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>27d538b8454ac774b86b28fce52ee20d</guid>
<title>过去的 2020 年，我经历了什么？</title>
<link>https://toutiao.io/k/r56x1n3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;2020 年，终于过去了！过去的一年，你经历了什么？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;感谢开发者头条上的分享者们&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;复制文章/项目链接，打开开发者头条 App，分享只需 3 秒！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;我们选取了其中一些作者的分享，希望在新的一年，你我都可以成为更好的自己。&lt;br/&gt;我的微信号：&lt;/span&gt;&lt;span&gt;toutiaoio007&lt;/span&gt;&lt;span&gt; ，欢迎加我，拉你入群！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;weapp_text_link js_weapp_entry&quot; data-miniprogram-appid=&quot;wxdf0163eaa1cf1699&quot; data-miniprogram-path=&quot;pages/articles/detail?id=2161763&amp;amp;share=1&quot; data-miniprogram-nickname=&quot;开发者热榜&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-servicetype=&quot;0&quot; href=&quot;&quot;&gt;&lt;span&gt;2020 年，我在编程时遇见的几个好物&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;年年都写年终总结，确实没什么新意，虽然今年也做了总结，但写完之后总觉得过于悲观，只是到了年底应该要有些什么表示，想着今年是该换个花样了，于是便有了这篇。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这篇文章介绍的，有框架，有工具，有软件，都是自己在编程时遇到的有用的，而且自己比较喜欢的，这里分享给大家。(雇个城管打天下)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;weapp_text_link js_weapp_entry&quot; data-miniprogram-appid=&quot;wxdf0163eaa1cf1699&quot; data-miniprogram-path=&quot;pages/articles/detail?id=2161947&amp;amp;share=1&quot; data-miniprogram-nickname=&quot;开发者热榜&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-servicetype=&quot;0&quot; href=&quot;&quot;&gt;&lt;span&gt;靠写作杀出一条 “血” 路：我的 2020 年终总结&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2012 年到 2020 年，持续 8 年坚持博客输出，鬼知道经历了什么？！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我天资 “愚笨” 一些，并不聪明。经历过鲜有人经历的：中考失败、高考失败、考研失败。但，还是咬牙都挺过来了。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;11 年前的考研失败，我买的唯一一本书就是俞敏洪的《永不言败》，二战前我分析自己的利弊得失，写了很详细的备战战略。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;白天工作晚上备战，几乎没有耽误一天上班时间，乏力的时候就听俞敏洪的小草和大树、河流的演讲鼓励自己，热泪盈眶并嚎啕大哭之后，继续刷题备战。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这也是很多读者留言反馈：“怎么你的文章都多少有点励志的味道？”，经历和阅历使然。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;人和人的经历不同，那些越苦的经历越是刻骨铭心，那些心底的反思更是会指引我们前行。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前也说过，当时陆陆续续写过几个厚本子的内容，现在还 “陈列” 在老家的橱子里，每每想起，都激动万分。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当时，不觉得有什么？当我把：写作、积累、坚持、长远串联起来的时候，仿佛就找到了人生的意义和方向。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总得给后代留下点什么吧？财富那是身外之物，没有意义。唯有文字是永恒的精神财富、价值没法也不能用金钱衡量。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当看到《曾国藩家书》、《傅雷家书》、计算机科学家吴军老师的《态度》后，我更坚信写作的意义重大。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，从去年开始，每到我家孩子生日前夕，我都会写一篇生日寄语，并且，这份寄语我承诺至少会写 18 年。特殊的日期，如：新冠复工前夕还会加一篇，完完整整的通过文字记录下当时的想法。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;的确，短期看真没有太大意义，但是 18 年甚至 N 多年以后，这终将变成传家宝、可传承的家族财富。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那为什么要杀出 “血” 路呢？是因为：比我厉害的人、比我们聪明的人多的去了，人外有人，天外有天。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个例子：我有幸跟黑客一起共事过，和黑客相比，我们所谓的开发无非是相对小儿科。道理是相通的。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比不过怎么办？那就学呗！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;学不会怎么办？那就多练习几遍，反复积累呗！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;做长远的事儿，在大方向正确的前提下苦哈哈的坚持，然后等待时间的回报！(铭毅天下001)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;weapp_text_link js_weapp_entry&quot; data-miniprogram-appid=&quot;wxdf0163eaa1cf1699&quot; data-miniprogram-path=&quot;pages/articles/detail?id=2162111&amp;amp;share=1&quot; data-miniprogram-nickname=&quot;开发者热榜&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-servicetype=&quot;0&quot; href=&quot;&quot;&gt;&lt;span&gt;YourBatman 2020 年感悟关键词：科比、裁员、管理层、活着&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今年是近十年最差的一年，却是将来十年最好的一年。与其忧心忡忡，惴惴不安，倒不如多多思考、多多学习。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后想说一句：滚蛋吧，2020。虽然这句话说得毫不客气，但 who care？毕竟 2020 也没对咱客气过，不是麽！(YourBatman)&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;加入「码农周刊 VIP 会员」，与上市公司 CTO 一起成长！&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全年 52 期「VIP 会员专属邮件周报」 + 只限 VIP 会员加入的交流圈子 + 大厂「内推机会」 + N 多福利，你值得拥有！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;原价 365 元/年&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;，现价仅需 108 元！&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;260&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;350&quot; data-ratio=&quot;1.3478260869565217&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNav9pqkGat4y9Liby9Umh4V4ssMvlqB4u4iau7xTfKzerArGc4SOo34g5tgibFAhPWNrlbicpraIr2RBNeQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c96d40c5001975a1791e5a1bb2ac414b</guid>
<title>2021 年管理 Monorepo 代码库的 11 种出色工具</title>
<link>https://toutiao.io/k/tjw1lqq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.531&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlgmathcJJfb0mFnia0PLcVzEPxZa0eMibibDt1qicbEwwCLogcXw9E6XcUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;如今，许多工具可以在20个不同的文件夹中运行“npm install”和“npm run build”。但是，并不是所有的工具都能促进正确的monorepo。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;促进一个正确的单体开发意味着要解决一些挑战，比如为分离的模块运行测试和构建过程，能够从项目中独立发布模块，以及管理变更对项目中每个受影响的依赖模块的部分影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;挑战的清单还在继续，甚至包括“琐碎”的事情，比如你如何管理issues和PRs，这可能会随着你的开发规模而变得困难。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;请注意，&lt;strong&gt;一个monorepo不是一个整体的应用程序(!)&lt;/strong&gt; ——它不是一次性构建或部署的，它是一组单独开发的应用程序。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;什么是 monorepo？&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;国庆期间10月5日尤大公开了vue3.0已完成的源码，也是采用了monorepo管理模式，看来monorepo确实有其独到的优势。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;monorepo是一种将多个package放在一个repo中的代码管理模式，摒弃了传统的多个package多个repo的模式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前 Babel, React, Angular, Ember, Meteor, Jest等许多开源项目都使用该种模式来管理代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;解决的问题&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;多个repo难以管理，编辑器需要打开多个项目；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;某个模块升级，依赖改模块的其他模块需要手动升级，容易疏漏；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;公用的npm包重复安装，占据大量硬盘容量，比如打包工具webpack会在每个项目中安装一次；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对新人友好，一句命令即可完成所有模块的依赖安装，且整个项目模块不用到各个仓库去找；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;带来的问题&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;所有package代码集中在一个项目，单个项目体积较大；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;所有package代码对所有人可见，无法做权限管理；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;还不知道monorpo的同学可以阅读以下文章（&lt;/span&gt;&lt;span&gt;&lt;strong&gt;带链接版文章请点击文末左下角&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;阅读原文&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;链接&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;）：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;精读《Monorepo 的优势》&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Vue3.0中的monorepo管理模式的实现&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Lerna包管理&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;在这篇综述中，我收集了一些世界上最好的工具来构建一个“monorepo”，你可以在一个项目里面构建多个模块，并且有不错的开发者体验，可以扩展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个列表并没有进行排名，旨在根据每个工具的优点来概述其优势。希望能帮助你节省时间，找到合适的工具。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;欢迎在下方评论，分享自己的心得。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. Yarn Workspaces&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Yarn Workspaces&lt;/strong&gt; 的目标是简化与monorepos的工作，以更明确的方式解决 &lt;/span&gt;&lt;code&gt;&lt;span&gt;yarn link&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的一个主要用例。你的依赖关系可以链接在一起，这意味着你的工作空间可以相互依赖，同时总是使用最新的代码。这也是比 &lt;/span&gt;&lt;code&gt;&lt;span&gt;yarn link&lt;/span&gt;&lt;/code&gt;&lt;span&gt;更好的机制，因为它只影响你的工作空间树而不是你的整个系统。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Workspaces有助于解决一些问题，使其成为一个很好的单兵装备。&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;它设置了一个单一的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;node_modules&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，不需要在项目中的不同包中重复或克隆依赖关系。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;你的所有项目依赖都将被安装在一起，从而给Yarn更大的空间来更好地优化它们。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Yarn将使用一个单一的锁文件，而不是为每个项目使用不同的锁文件，这意味着更少的冲突和更容易的审查。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;它允许你改变你的一个软件包的代码，并让使用它的其他软件包立即看到这些变化。对一个包的源代码的任何修改都会立即应用到其他包中。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;因此，Yarn Workspaces是一个非常强大的组合，可以和列表中的几乎所有工具，特别是Bit、Nx和Lerna等工具一起使用，作为你的monorepo管理抽象的下层。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不过，你也可以直接用workspaces发布。当一个工作空间被打包到一个存档中时，它会动态地将任何 &lt;/span&gt;&lt;code&gt;&lt;span&gt;workspace:&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 依赖关系替换为一个包的版本，因此您可以将结果包发布到远程注册表，而无需运行中间步骤——消费者将能够像使用任何其他包一样使用发布的工作空间。太酷了！&lt;/span&gt;&lt;/section&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1608912879699&quot; data-category_id_list=&quot;1|16|24|26|29|36|37|42|43|48|5|50|51|53|54|55&quot; data-id=&quot;1608912879699&quot;/&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;参考阅读&lt;/strong&gt;：基于lerna和yarn workspace的monorepo工作流&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. Bit&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Bit&lt;/strong&gt;是用于构建模块化项目的下一代工具。这是一种新的、令人兴奋的单仓库方法，在这种方法中，由同一个项目（同一个Bit工作空间）管理的模块实际上分布在不同的范围内，而不考虑仓库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Bit让你以完全解耦的方式拆分模块的开发，享受简单的、整体的开发体验来协调一切。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4863588667366212&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlZ71DKI7ib7Vdme0EV91bphF9Un42Z0Xd1MS7c8Nib3SBm5cUicYwZl5Aw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1906&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;使用bit，你可以在你的项目中解耦组件，这样每个组件都是独立开发、构建、测试和发布的。每个组件都是使用特殊的环境进行开发和构建的，这些环境是可扩展和可重用的，这样你就可以快速定制和再次使用它们。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Bit的工作空间管理着项目中所有组件之间的关系。当你对任何组件进行更改时，Bit会单独构建和测试它，并将更改传播到依赖关系图中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;组件可以作为独立的包，批量发布到NPM和/或bit.dev平台，用于协作、消费和文档。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5621428571428572&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVln9JK7F1ziaPQurm6Ne7Ov207RsoicXLia0zggiaiaGRXx8SVykbfx2iafkvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;Bit的UI可以帮助你查看你的monorepo的开发情况。当你编写代码时，每个组件都会被记录、测试、构建等，你可以通过实时反馈和热重载直观地看到正在发生的事情。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Bit提供了解耦的开发环境--可重用和可定制的模块，这些模块将独立组件整个生命周期所需的不同服务配置和“捆绑”在一起，如编译、捆绑、测试、磨合、文档等。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1819444444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVl2ib6kwC7ib8A2xXy2rO6SiauW7EIuQeuuc9qvAHoQytN4FiauAbQ1pHL2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;figcaption&gt;Bit的工作空间以简单而全面的方式解耦组件开发&lt;/figcaption&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;掌握组件图&lt;/strong&gt;——Bit定义、管理并帮助你利用项目中所有组件之间的关系。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;图形驱动的构建&lt;/strong&gt;——当您对某个组件进行更改时，Bit会自动检测依赖于它的其他组件，并“知道”只构建依赖组件的受影响的图形。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“图形驱动的构建”也意味着，万一一个组件被标记了新的发布版本（在被导出到Bit的云端之前），Bit不仅会在每个受影响的组件上运行构建，而且会确保给它们标记一个新的发布版本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;隔离的测试和构建&lt;/strong&gt;——每个组件都是在项目外部隔离地构建和测试的，因此您可以确切地看到更改的影响。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;组件构建管道&lt;/strong&gt;——您可以在可重用的管道中构建作业，该管道可应用于项目或所有项目中的所有组件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;批量发布&lt;/strong&gt;——在Bit monorepo中开发的每个组件都可以作为一个独立的包发布。Bit去掉了配置每个组件的“package.json”和其他设置文件的所有开销。你要做的就是运行&#x27;bit tag&#x27;，这样Bit就会自动给所有修改过的组件打上版本补丁（支持semver规则），然后批量发布修改。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;可重复使用的文档模板&lt;/strong&gt;——每个组件都使用可重复使用和可定制的模板进行文档化，Bit为您自动完成大部分工作。用MDX工作？也许还可以添加一些可视化的例子？没问题。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5621428571428572&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVl2KHXlicMq9Ber8G4oY1btKozhWCLibe3OoopJE3q8GayJ7Y0UomI0Xcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;独立渲染的组合&lt;/strong&gt;——每个组件都是完全独立渲染的，完全在项目之外渲染，渲染的视觉效果(在编写代码时热重新加载)成为每个组件文档的一部分。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. NX&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;NX&lt;/strong&gt;是一套先进的可扩展的开发工具，适用于monorepos，非常强调现代全栈Web技术。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8225152129817445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVl9NscKqDhTLDbsXe9h5Dqia8gQpaPrXMQLGzvYibNgOHKO0IHUhJhBtfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;986&quot;/&gt;&lt;figcaption&gt;空NX monorepo&lt;/figcaption&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;NX的目标是通过CLI（带编辑器插件）提供整体的开发体验，并提供可控代码共享和一致代码生成的功能。它还提供了增量构建，因此它不会在你的每一次提交中重建和重新测试所有内容，从而加快构建时间。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0230263157894737&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlsKS5ewlyemGweRxd3BvdLrnV2v4A4HkQjibI2MlfaahYic9LbMrF8hMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;608&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;有了Nx，你可以使用你喜欢的框架，集成你可能已经在使用的现代工具。例如，NX可以让你使用与Cypress、Jest、Typescript、Prettier和其他工具的开箱即用的集成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;NX团队还提供了NX云，通过云中的智能计算记忆和更快的构建来帮助使用NX的团队更快地交付。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6905882352941176&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlsRQxI68bUDnCe0B8XTk34kT9gYsSCwgaN2q4hmmf2BnBkNCuibZJfJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;850&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6725978647686833&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVl6Y7KrPw86caS2cOlWPLFCsXiaYUrnAevvuXoRgQ0rIIyKKXpULX5icbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;843&quot;/&gt;&lt;figcaption&gt;8&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. Rush&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;Rush是由微软+开源的一个强大的monorepo基础设施，它的目的是帮助你在一个仓库中构建和发布许多包。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.40959119496855345&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlYibe1NyiczA05mWcHO7AgCURAZGcFhjarzrOOhGAOsiaq9jEepjctdsmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1272&quot;/&gt;&lt;figcaption&gt;登陆页面和一些组件，两个项目，一个仓库&lt;/figcaption&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;rush的一些主要功能包括一个单一的NPM安装（也可以和Yarn和pnpm一起使用），所以你可以将所有项目的所有依赖关系安装到一个共同的文件夹中，使用隔离的符号链接为每个项目重新构建一个准确的“node_modules”文件夹。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这也有助于确保没有幻影依赖，所以你不会意外地导入一个在package.json中缺失的库，也不会在node_modules中发现10份lib的依赖重复。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3042198233562316&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlN7Kjpoe7Kbzrte093BoBicticFvn7TWZJOSGXJcj4Tb5fia8kcvnXB8LA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1019&quot;/&gt;&lt;figcaption&gt;Rush交互式CLI不错&lt;/figcaption&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;自动本地链接意味着你所有的项目都会自动地相互建立符号链接，当你做了一个改变，你可以看到下游的效果，而不需要发布任何东西，也没有任何 &lt;/span&gt;&lt;code&gt;&lt;span&gt;npm link&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的麻烦。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVl3j0U1wS2AWkJIwc2LCJpmJmcYdLlxLFDP01XDjmI5ibcq0IicNkxl1yQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;Rush独特的安装策略为你的所有项目生成一个快速安装的单一收缩/锁定文件。Rush会检测你的依赖关系图，并以正确的顺序构建你的项目，所以如果两个包之间没有直接的依赖关系，Rush会将它们作为单独的进程并行构建。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你只打算使用你的repo中的几个项目，Rush提供了子集和增量构建，所以 &lt;/span&gt;&lt;code&gt;&lt;span&gt;rush rebuild --to &amp;lt;project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 只对你的上游依赖进行干净的构建。在你做了修改之后，&lt;/span&gt;&lt;code&gt;&lt;span&gt;rush rebuild --from &amp;lt;project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 只对受影响的下游项目进行清理。而 &lt;/span&gt;&lt;code&gt;&lt;span&gt;rush build&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 则提供了强大的跨项目增量构建，Rush甚至可以通过分离项目的版本来处理循环依赖关系。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当你想发布的时候，Rush支持批量发布，所以它会检测哪些包有变化，自动跳转所有相关的版本号，并在每个文件夹中运行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;npm publish&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Rush还有助于实施和执行发展政策。例如，当创建PR时，你可以要求开发人员提供受影响项目的主要/次要/补丁日志条目，这些条目随后将在发布时汇总到一个变更日志文件中。它还可以帮助你执行诸如发布前的审查、特定的依赖版本等东西。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5. Lerna&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;Lerna（以多头野兽Hydra的家命名）是一个“用于管理带有多个包的JavaScript项目的工具”。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3710280373831776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlMUvG0nlESfuPf98nE6nN7BHHWjeQp07l2C0MyOwQDqG37FQlxJtHNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1070&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;Lerna的创建是为了解决Babel的多包问题，以优化使用git和npm管理多包仓库的工作流程，它本质上是一种工具和脚本，可以有效地管理和发布许多独立版本的包在一个Git仓库中。&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;my-lerna-repo/&lt;br/&gt;  package.json&lt;br/&gt;  packages/&lt;br/&gt;    package-1/&lt;br/&gt;      package.json&lt;br/&gt;    package-2/&lt;br/&gt;      package.json&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;Lerna 的两个主要命令是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;lerna bootstrap&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;lerna publish&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;code&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 会将 repo 中的依赖关系连接在一起，&lt;/span&gt;&lt;code&gt;&lt;span&gt;publish&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 会帮助发布任何更新的包。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;您可以使用以下两种模式之一来管理项目：固定(Fixed)或独立(Independent)。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;固定模式的Lerna项目是以单一的版本行来操作的，版本是保存在你的项目根目录下的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;lerna.json&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件中的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;version&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 键。当您运行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;lerna publish&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 时，如果一个模块在上次发布后被更新，它将被更新到您发布的新版本。这是Babel目前使用的模式。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8942857142857142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVliaC6MBXvQKE3Hicudud6hE6F2wAt6WmGoe9QRmfMYX93IDIFic2c4NnNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;figcaption&gt;一个带有Yarn Workspaces的Lerna例子&lt;/figcaption&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;独立模式Lerna项目允许维护者相互独立地增加包的版本，每次发布时，你都会收到一个提示，提示你每一个已经改变的软件包，以指定它是一个补丁，小的，大的或自定义的变化。独立模式可以让你更具体地更新每个包的版本，对于一组包来说是有意义的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“lerna.json”文件是一个匹配包含 &lt;/span&gt;&lt;code&gt;&lt;span&gt;package.json&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的目录的globs列表，这也是lerna识别“叶子”包的方式(相对于管理整个repo的开发依赖和脚本)。例子：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;version&quot;&lt;/span&gt;: &lt;span&gt;&quot;1.1.3&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;npmClient&quot;&lt;/span&gt;: &lt;span&gt;&quot;npm&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;command&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;publish&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;ignoreChanges&quot;&lt;/span&gt;: [&lt;span&gt;&quot;ignored-file&quot;&lt;/span&gt;, &lt;span&gt;&quot;*.md&quot;&lt;/span&gt;],&lt;br/&gt;      &lt;span&gt;&quot;message&quot;&lt;/span&gt;: &lt;span&gt;&quot;chore(release): publish&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;registry&quot;&lt;/span&gt;: &lt;span&gt;&quot;https://npm.pkg.github.com&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;&quot;bootstrap&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;ignore&quot;&lt;/span&gt;: &lt;span&gt;&quot;component-*&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;npmClientArgs&quot;&lt;/span&gt;: [&lt;span&gt;&quot;--no-package-lock&quot;&lt;/span&gt;]&lt;br/&gt;    }&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;packages&quot;&lt;/span&gt;: [&lt;span&gt;&quot;packages/*&quot;&lt;/span&gt;]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;即使你不打算发布到NPM，Lerna仍然可以在monorepo中帮助管理版本管理和常见的开发任务。&lt;/span&gt;&lt;/section&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1608912910198&quot; data-category_id_list=&quot;1|16|24|26|29|36|37|42|43|48|5|50|51|53|54|55&quot; data-id=&quot;1608912910198&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;6. Bazel构建系统 (Google)&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;谷歌推出了&lt;strong&gt;Bazel build system&lt;/strong&gt;，它是一个类似于Make、Maven和Gradle的开源构建和测试工具，使用的是人类可读的高级构建语言。Bazel支持多种语言的项目，并为多种平台构建输出。它支持大型单一仓库中的大型代码库或跨多个仓库的大型代码库和大量用户。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6398916967509025&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlHfiblTpWUV1hWnPyThc8geefmxNw0daU1Lhpba2aWHEOgmRXRIghBSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1108&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;Uber开发者使用Bazel来构建他们的Go monorepo。Uber用Go编写了大部分的后端服务和库，在2018年，这些服务和库都被归纳到一个大型的Go monorepo中，现在有超过10万个文件。Bazel让这个项目得以扩展，缩短了构建时间，并支持其发展。&lt;/span&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;这是一个不错的小型开源项目，以Bazel作为演示：thundergolfer/example-bazel-monorepo&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;Bazel被设计成大规模工作，并支持跨分布式基础设施的增量密封构建，这是大型代码库所必需的。有了Bazel的远程缓存，构建服务器还可以共享它们的构建工件。Bazel缓存所有以前完成的工作，并跟踪对文件内容和构建命令的更改。只有在包或包的依赖关系发生更改时，才构建和测试包。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Bazel可以在Linux、macOS和Windows上运行。Bazel可以从同一个项目为多个平台构建二进制文件和可部署的包，包括桌面、服务器和移动设备。支持许多语言，你可以扩展Bazel来支持任何其他语言或框架。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7. Buck构建系统 (Facebook)&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;Buck是一个鼓励创建由代码和资源组成的小型可重用模块的构建系统，支持不同平台上的各种语言。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4409090909090909&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVl4ZdeN4gTySL7rUia4HMhqHBHzZ8JTHr3Ed9TpSQc9by7AfKy5lLph2A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;440&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;它是由Facebook开发和使用的，作为FB单体的官方构建系统，由于被Uber开发者等团队使用，大大缩短了构建时间，因此名声大噪。而AirbnbEng的团队则将构建速度提高了50%，将应用程序缩小了30%。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5209125475285171&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlT6vhuGVeLfNMxrnRPUsAvvHia12WAm56LTicjZ9hqfVUthDboJWEHlHQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;526&quot;/&gt;&lt;figcaption&gt;Uber凭借buck获得了更好的构建结果&lt;/figcaption&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;Buck被设计用来构建一个monorepo，而对monorepo设计的支持激发了Buck对cell和项目的支持。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Facebook的经验是，将所有的依赖关系维护在同一个版本库中，可以更容易地确保所有开发者拥有正确的代码版本，并简化了进行原子提交的过程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Buck常用于Android和iOS开发。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;8. Pants构建系统(Twitter)&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;2014年，Twitter推出了名为Pants的monorepo构建系统。今天，在v2版本上，Pants的目标是成为一个快速、可扩展的构建系统，以适应不断增长的代码库。目前，它的重点是Python，很快就会支持其他语言。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7692307692307693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlJujAxKq0HZZyMsawSKPzI7VsqOh66Kibibt7LibybcDZu6baXdmNoj0KQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;884&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;Pants使用细粒度的工作流，并将每个工作单元与副作用隔离，因此可以利用所有可用的内核。Pant的一些最佳特性包括明确的依赖建模、细粒度的无效化、共享结果缓存、并发执行、远程执行，以及通过插件API的可扩展性和可定制性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Pants引擎是用Rust写的，为的是性能。构建规则是用类型化的Python 3写的，为了熟悉和简单。该引擎的设计使得细粒度的无效化、并发性、密封性、缓存和远程执行自然发生，而无需规则作者的干预。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;9. Please构建系统&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Please&lt;/strong&gt;是一个跨语言的构建系统，强调高性能、可移植性、可扩展性和正确性。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36745886654478976&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlgg5jbnLboPKcDOQGVkZ8icS8DXm7pdIgvvdwRSzuMxgXUGkawW7RL4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1094&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;请确保构建步骤是在自己的密封环境中执行的，只能访问被赋予权限的文件和env变量。增量构建意味着它只构建它需要的东西，它还提供了任务并行性，以及分布式缓存，以实现大规模的可靠和高性能的构建系统。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Please的目标也是专注于开发体验，所以你可以享受一个常用的CLI，并为使用自动完成的常见任务定义别名。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Please用Go编写，Please提供所有这些用户体验，没有运行时依赖。并且，没有需要处理太多配置的单个大工作区文件。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;10. Oao&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;Oao并不是列表中最成熟、最丰富、最容易使用的工具，但它还是很有趣。它是一个基于Yarn的，有意见的monorepo管理工具，p提供monorepo功能，如安装所有的依赖关系，添加/删除/升级子包的依赖关系，验证版本号，确定更新的子包，一次性发布所有的东西，更新变更日志等。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8139904610492846&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/WYoaOn5t0AMPbOLhQAHkTo9fY9ZKPtVlUZk40lQ86HJvUgaQVLW3XjYFLexpYNS2icrjhd5aVVbTiaT3JoeV30Jw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;629&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;Oao可以让你在所有子包上运行命令或 &lt;/span&gt;&lt;code&gt;&lt;span&gt;package.json&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 脚本，串行或并行，可选择遵循反向依赖树。而且，它支持yarn workspaces，从整体上优化了monorepo依赖树，简化了bootstrap以及依赖的添加/升级/删除。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;支持非单包发布：从&lt;em&gt;oao&lt;/em&gt;’s的发布前检查、标签、版本选择、变更日志更新等方面受益，也可以在你的单包、非单包中使用。需要注意的是，Oao使用的是同步版本方案，所以在根级的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;package.json&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中配置了一个主版本，而子包也将与该版本同步。你可以在这里尝试一下。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;11. Bolt&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;Boltpkg旨在成为一个“超级功能JavaScript项目管理工具”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Bolt在Yarn的基础上实现了workspaces的概念。Bolt CLI在很大程度上是Yarn CLI的替代品，你可以在任何Yarn项目中使用它。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们知道，workspaces是嵌套在一个更大的项目/repo中的，每个workspaces都可以有自己的依赖关系，有自己的代码和脚本。workspaces也可以归入子目录进行组织。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用Bolt，你可以一次安装所有这些包的依赖关系（而且你可以做得非常非常快）。而且，当你从一个工作区指定一个依赖关系到另一个工作区时，它将被链接到源代码。这样，当你去测试你的代码时，你所有的变化都会被一起测试。&lt;/span&gt;&lt;/section&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;来源：https://blog.bitsrc.io/11-tools-to-build-a-monorepo-in-2021-7ce904821cc2&lt;br/&gt;&lt;/span&gt;&lt;span&gt;作者：&lt;/span&gt;&lt;span&gt;Jonathan Saring&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;粉丝福利&lt;/h4&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;149期留言+在看幸运用户：暂无&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;临走前留下，&lt;span&gt;今天的福利&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;福利1：&lt;/span&gt;&lt;span&gt;&lt;span&gt;《MongoDB 4.0从入门到达人》&lt;/span&gt;&lt;span&gt;获取资源请在公众号对话框中回复关键字：&lt;/span&gt;&lt;span&gt;043，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;如果没有关注请扫下面的二维码。更多福利资料请查看公众号菜单&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;福利2：&lt;/span&gt;&lt;span&gt;在看+留言&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;我随机抽取一位认真留言的小伙伴，给他发一个红包奖励&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;最近文章&lt;/h4&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;点赞 + 在看 + 留言，下一个幸运儿就是你！&lt;br/&gt;走心的分享更容易被抽中~&lt;/span&gt;&lt;br/&gt;&lt;span&gt;开奖时间 下期文末&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-type=&quot;png&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0APOE4dXIpvXLgmGfqHMfYFFGudrHkx4trR7YbXKKmNCd3fJRlY56qIUibCibq00k2kky5DdPxrJCyWA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-type=&quot;gif&quot; data-ratio=&quot;0.1732283464566929&quot; data-w=&quot;635&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/aVp1YC8UV0fXSy8oK0h6qL36nlWgib6lHDTj0Ykkiab2FufBJIumwMrDEBZ1wHteh6pzsQiaP4007ox4ichic8pNw3Q/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d8117257feb71cfb57cea4fedc989edf</guid>
<title>[推荐] 万字 Java 知识地图助你成为 Offer 收割机</title>
<link>https://toutiao.io/k/sdna90o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;最近很多读者在问：Java 怎么学习啊？有没有什么学习路线？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我相信这些读者或多或少都有一些 Java 基础，但由于看不到全貌，学了一段时间很容易迷失。所以我在寻思着能不能写一个学习的地图或者路线，让读者能知道下一步该学什么，自己离大厂的 offer还有多远的距离。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个人最怕的不是路途遥远，而是看不到胜利曙光。我希望下面这篇文章能给你的学习之路带来一丝曙光，大家不妨试着读一下吧，如果有收获给我点个赞哟。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;温馨提醒：这篇文章写着写着就一万字了，建议大家关注后再收藏，以防走丢。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章主要内容包括(干货满满)：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;学Java有哪些就业方向？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据结构和算法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设计模式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;计算机基础&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Java 入门&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Java 高手进阶&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基础框架（SSM）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务框架&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;常用中间件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式架构&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;必须掌握的工具软件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;学习资源网站列表汇总&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;学习常见问题（FAQ）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;买一瓶可乐，泡一杯咖啡，lets go 学习~&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;学Java有哪些就业方向？&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在介绍 Java 怎么学之前我给大家介绍一下学完了能干什么，因为有目标的学习才是最高效的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多 Java 入门学习者对岗位或者方向的概念非常模糊，今天学安卓、后天学大数据，三心二意的学习势必造成技术不精，这就是面试官通常说的：这位面试者基础比较差。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习技术首先要认准一个方向专注下去，有了一定积累后再将自己的知识面扩宽，找到自己感兴趣的方向再沉下去学习，周而复始你就成为这个行业的专家了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 这门语言，在公司里根据分工不同衍生出了众多的岗位或者技术方向。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在 boss 直聘上搜索了 BAT 等大厂的岗位，目前有以下三类岗位非常热门：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）安卓开发&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;技能要求：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;熟悉 Android UI 开发非常熟悉，对 UI 架构有理解，并了解基础的 UI 交互知识;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;熟悉 Android 调试工具和方法，可以应付各种 Android 复杂问题;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;熟悉 Android Framework 层，有通过 Android 源码阅读定位问题的经验;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）Java 后端开发&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;技能要求：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;具备扎实的Java基础，对JVM原理有扎实的理解；对Spring、MyBatis、Dubbo等开源框架熟悉，并能了解它的原理和机制，具有大型分布式系统设计研发经验；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;熟悉基于Mysql关系数据库设计和开发、对数据库性能优化有丰富的经验；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;熟悉底层中间件、分布式技术（如RPC框架、缓存、消息系统等）；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（3）大数据/数据仓库&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;技能要求：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;熟悉Hadoop/Spark/sqoop/hive/impala/azkaban/kylin等大数据相关组件;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;精通sql及性能调优，熟练使用java、python、scala其中一种编程语言;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;掌握数据仓库 (DW) / OLAP /商业智能 (BI) /数据统计理论，并灵活的应用，具备大型数据仓库设计经验;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里只列举了三类比较热门的技术岗位，希望大家结合自己的经验思考一下方向。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;敲黑板：认清自己，找准方向，越早确定方向越容易成功！&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据结构和算法&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些同学可能要问了：我学 Java 的有必要学习算法吗？答案是：&lt;code&gt;别无选择&lt;/code&gt;！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;国内互联网面试的流程逐渐在向国外靠拢，像字节跳动、BAT 等大厂，&lt;code&gt;手撕算法题&lt;/code&gt;已经成为了必选动作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确实， Java 相对于 C、C++有着丰富的类库和三方框架，进入工作后大部分人都是在写业务代码，俗称 API boy 或者 Crud boy，算法看起来并不是那么重要，但是考算法真的是公司面试筛选人的低成本办法，如果你写出了算法并且通过了，要么你聪明要么你勤奋（刷题了）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以不管你是学什么语言：C、C++、python、Java、GO，算法这一关你必须得过。数据结构和算法的面试核心知识点我已经列出来了，大家可以参考学习，逐个击破。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;栈与队列：先进先出、后进先出&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;线性链表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;查找：顺序查找、二分查找&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;排序：交换类、插入类、选择类&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;树、二叉树、图：深度优先（DFS）、广度优先（BFS）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;递归&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分治&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;滑窗&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;三大牛逼算法：回溯、贪心、动态规划（DP）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最好或者最笨的方法就是刷题，强烈推荐力扣：https://leetcode-cn.com建议刷300题以上，要覆盖简单、中等、困难的题目。面试前要训练手感，不要生疏了，可以选保持每日或几日一题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在刷题之前我建议你看一些书：《漫画算法-小灰的算法之旅》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果你之前没有任何算法基础，这边书很适合你，可以补充数据结构和算法的基础知识，像什么是时间复杂度空间复杂度、查找、排序等。如果你有了一定基础了，建议你直接跳到最后面的算法实战部分。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《剑指 offer》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;非常经典的一本书，学算法的人必刷。但是要注意了，这边书里面的题目是用 C++写的，如果你是 Java 开发人员可能会有点影响。但是要记住学习算法最关键的还是解题思路和方法，用什么语言实现是其次的，如果你时间比较多我是建议你用 Java 语言再实现一遍。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《labuladong的算法小抄》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;非常推荐！这是一本很新的书，写书前作者在 Github 开源了一个项目，主要讲解 LeetCode 解题套路，Start 总数排名前40。在书的开头讲解了学习算法的基本思维和套路，建议看这边书的同时再配合 leetcode 刷题，疗效非常棒！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《算法导论》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;要是不推荐这本书是不是显得我有点 low 了，这是一本科班出身的同学必看必学的经典大部头。国外大佬写的，国内翻译的经典之作，虽然是经典但是不建议刚入门算法的同学看，因为看了这本书你可能要放弃算法了，比较难看懂。建议有了一定基础再入手这边书。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你觉得看书比较枯燥，可以推荐你看一些极客时间的专栏，不过是收费，但是质量非常高。《数据结构与算法之美》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这个专栏是文字+语音，作者是王争，前 Google 工程师。他采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《算法面试通关40讲》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这个专栏是视频，作者是覃超，前Facebook工程师。作者会用白板带你一步一步解题，层层深入一环扣一环，每一题还会用多种解题方法。我基本看完了，收获颇多。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;leetcode、书和极客专栏可以并行，学练结合，不要光看不练哦。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;设计模式&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;金庸小说中牛叉的武功太多了，综合性最强的还是&lt;code&gt;九阳真经&lt;/code&gt;，九阴真经分为上、下两卷，&lt;code&gt;上卷为内功基础，下卷为武功招式&lt;/code&gt;，这些都是极负盛名的&lt;code&gt;武学秘籍&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那大家思考一下什么是武学秘籍？其实打开来开就是一些固定的招式，牢记这些招式并运用好就是绝顶高手了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到编程上来，除了要写干净的代码（clean code），还要运用各种&lt;code&gt;设计模式&lt;/code&gt;使代码可读性强、扩展性好、松耦合，这便是大家经常说的编码大牛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以不管是学武功还是学编码，都是有一些固定的招式，也就是设计模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到&lt;code&gt;设计模式&lt;/code&gt;很多同学可能会跳出来：这个我知道，就是单例模式、工厂模式……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;巴拉巴拉说了一堆，但是真正在写代码的时候又是一脸蒙：为什么我写的代码用不到设计模式？究其原因是你的代码经验不够。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想一下设计模式是怎么来的？上个世纪四个大男人搞了一个组合叫 GoF，并出版了一本书，这本书共收录了23种设计模式，后面逐渐被人熟知。这四个人从大量的代码实践中总结了一套方法论（写代码的套路），而我们作为一个在学校的学生或者刚工作的新人，可能连代码都写的少，怎么可能轻松快速地掌握这么多设计模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以说你学完了设计模式，但是还不会运用到日常的代码实践中，这个是很正常的，因为代码经验还不够。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那还学不学？当然要学，因为面试的时候有可能会问到。设计模式的理论知识我们还是要打好基础，需要掌握这些知识点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;设计模式的六大原则：单一职责、里氏替换、依赖倒置、接口隔离、迪米特法则、开闭原则&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;UML 基础知识&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设计模式三大分类：创建型、结构型、行为型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;常用设计模式基本原理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经典设计模式总共有23种（现在远不止23种了，还有一些变种），全部掌握难度太大了，我们只需要掌握一些常用的就好了，必须要掌握的我用小红旗已经标出来了。&lt;img data-ratio=&quot;0.6481257557436517&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3ErL2QGAp9ExLwicrkWDDVVVfP2ItIdaBsIA9uaT7lMN0ttekiclWFgs9KbViaK4NGbMIicDf2gvfGAaDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;827&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网上关于设计模式的学习资料非常多，质量也是参差不齐，大家找的时候可要擦亮眼睛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在看书之前我还是推荐你熟悉一下 UML 的理论知识，因为你如果不懂 UML 那任何一本设计模式的书你都可能读不下去， UML 是设计模式的前提。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;UML 学习网站：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://www.w3cschool.cn/uml_tutorial/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不要花太多时间学习 UML，简单理解入门即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设你已经入门 UML 了，那下面的这些书你可以考虑学习一下了：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《Head First 设计模式》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Head First 是一个比较经典的系列丛书，有些人非常喜欢这种风格。这本书讲枯燥的设计概念讲解的生动有趣，作为一本入手书非常值得推荐。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《大话设计模式》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;大话系列是国内非常经典的系列丛书，有众多粉丝。这本大话设计模式以对话的形式讲解知识，在当时可开创了先河。虽然书中有些例子比较牵强，但任然不失为一本入门的好书。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《图解设计模式》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;图解系列是日本的一位作者写的，有一本图解 HTTP 非常经典，这本图解设计模式也是类似的风格。由于是翻译过来的，书中有些例子可能听起来比较奇怪，貌似翻译过来的技术书都有这个问题。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《设计模式-可复用面向对象软件的基础》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;又是一本黑色大部头书，书的作者就是 GoF，大家都说经典。但是呢，经典归经典，读起来真的是晦涩难懂，对新人非常不优化，如果你想入门学习设计模式，这本书就不推荐了。不推荐为什么要说出来？经典的书如果不提，你们又要说我菜。（害）&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这几本书都要看吗？当然不是，如果你是在准备面试，我个人建议是读其中一本就够了。至于说看哪一本，你可以找对应的电子书，挑一个章节试读一下，符合你的胃口就选择这一本继续读下去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你已经有几年的编码经验，又想把代码写好，建议你多挑基本读读，吸收每本书的精华。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;计算机基础&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;科班出身的同学对《计算机网络》和《操作系统》这两门课应该不会陌生，至于掌握了多少，你懂得，都是在考前一两周突击学习的，哈哈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在大公司对于应届生的要求越来越高，计网和操作系统这两门课是必考的。那些拿了 SSSP Offer 的大牛计算机基础都非常扎实。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（1）计算机网络&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算网络的协议非常非常多，很多同学学完都一头雾水，或者仅仅懂一点 HTTP，但是真正要掌握的东西可不少：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;OSI 七层模型、TCP/IP五层模型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;常见网络协议：HTTP、TCP/IP、UDP&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;网络安全：非对称加密、数字签名、数字证书&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;网络攻击：DDOS、XSS、CSRF 跨域攻击&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算机网络面试有一道非常经典的面试题：说说你从URL输入到最终页面展现的过程。这一题可以覆盖大部分计网的知识点，可以从 DNS 解析到 HTTP、TCP/IP协议、物理层协议，一直到浏览器渲染页面，你技术功底有多深你就可以聊多深。希望大家学完了也能试着回答一下这个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐几本倍受好评的书：《网络是怎么连接的》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这本书是一本日本作者写的。文章围绕着在浏览器中输入网址开始，一路追踪了到显示出网页内容为止的整个过程，图文并茂生动有趣，非常推荐！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《图解 HTTP》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;也是一名日本作者写的。这本书对 HTTP 协议进行了全面系统的介绍，列举了很多常见通信场景及实战案例，相信读完会有恍然大悟的感觉。书很薄，几天就可以读完，强烈推荐！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《TCP/IP详解卷1：协议》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;计算机网络的经典教材， 大部头书籍，很难啃。建议挑重点看。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后安利一款工具，学习网络必备的抓包神奇：wireshark，如果你学网络没抓过包，那基本等于白学了（有点严重）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（2）操作系统&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一名 Javaer 在平时的工作中可能不会直接跟操作系统打交道，因为 JVM 帮我们屏蔽了众多差异。但是要想学好 JVM，懂一点操作系统更有助于你深刻理解 JVM 工作原理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 学习者这部分的要求可以稍微放低，但是你如果是搞 C++的，那这部分可是你的重点。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;进程和线程的区别&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;进程间的通信方式：共享内存、管道、消息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内存管理、虚拟内存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;死锁检测和避免&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要精通操作系统难度非常大，但是在面试中你要能讲出一些具体的操作系统知识，面试官会对你刮目相看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐一些视频学习资料：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;B 站：麻省理工 MIT 6.828（无字幕）：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://www.bilibili.com/video/BV1px411E7ST &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;操作系统（哈工大李治军老师）32讲（全）超清：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://www.bilibili.com/video/BV1d4411v7u7&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐书籍资料：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《深入理解计算机系统 CSAPP》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;赫赫有名的 CSAPP，全称：Computer Systems：A Programmer‘s Perspective。科班同学的圣经，哈哈，黑色大部头书籍，难啃。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《现代操作系统 （第3版）》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;操作系统领域的经典之作，因为是翻译过来的，遇到比较晦涩的先跳过，多读几遍才能消化。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Java 入门&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 语言从诞生到现在已经有20多年了，从Tiobe排行榜上来看，Java 语言常年霸榜经久不衰，所以不要怕学完 Java 后突然不流行了，至少这几年Java 就业机会非常多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你有其他语言的基础，比如之前学过 C、C++等，那学起 Java 应该是非常容易的，也容易上手。如果你没有语言基础，又不想了解太底层的东西，那学 Java 还是不错的。至于说 python，光从语言层面上看，python 确实非常简单，估计你一周内就可以学会并且代码写的还不错，但是 Java 不一样，一周你只能简单了解一下语法，想写好代码几乎不可能。另外 Go 语言势头很猛，大家也可以关注一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说 Java 入门你需要掌握下面这些知识点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;面向过程 VS 面向对象&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;面向对象基本特征：封装、继承、多态&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;访问控制符：private、default、protected、public&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据类型：基本类型、引用类型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;控制流程：for、while、switch 等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;序列化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;异常处理（有点难度）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;泛型（有点难度）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是零基础，建议你可以找一些 Java 入门的视频看一下，网上视频鱼龙混杂，大家注意甄别。推荐一个比较好的平台：B 站（https://www.bilibili.com/）
不是让你去看二次元的，里面有很多学习资源。（嘿哈）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;敲黑板啦：视频不要贪多，因为没有一个大牛是看视频看出来的。&lt;/code&gt; 看视频是别人将知识点往你脑袋里灌，最大的好处是能让你快速入门，如果你想学到更多，你需要的是&lt;code&gt;自我学习&lt;/code&gt;，带有思考的自我学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看书是一种高效的自我学习方式，推荐基本比较好的书：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《Java 核心技术卷I》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这本书建议作为Java 之旅的第一本书，涵盖的内容非常全，比起那些30天学会 Java 之类的书，这边书更加务实。书中有些章节其实不用看，比如Swing GUI 的直接略过，因为用 Java 写桌面端应用已经过时了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《阿里巴巴 Java 开发手册》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;大厂阿里巴巴出品的，这其实是一本 Java 编码规范，编码习惯从一开始就要养好。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《Java 编程思想（Thinking In Java）》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这是一本非常非常经典的书，你要问搞 Java 的人如果没听过这本书那算是白学了，哈哈。其实说实话这本书我试图看过几次，最终都没有看完，一个原因是它太厚了，另外我觉得讲得太啰嗦了，所以我现在拿来垫桌子，高度合适挺好的。所以呢，建议新人不要一开始看这边书，不然你会怀疑人生还没入门就放弃了，就把它当做编程圣经，等你后面有经验了拿起来再翻翻吧。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;敲黑板了：学习编程要有耐心，不要急于求成，要打好基础。也许你一个月两个月还在运行一些简单示例，这是正常的，多学习多思考。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Java 高手进阶&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;恭喜你终于Java 入门了，大牛和菜鸟的区别在于菜鸟永远止步于入门水平，而大牛已经找到新大陆了，翻过这几座山你离高手就不远了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 高手进阶需要掌握的东西非常非常多，这里列举一些核心知识点，必须全部掌握的。这是 Java 面试高频考点，也是传说中 Java 八股文的一部分，面好了进入下一面，面不好回家等消息。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Java 集合类源码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;线程池&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Java 代理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IO 模型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JVM&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Java 并发编程（JUC）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 已经入门了，你都想进阶了，建议你不要再找视频看了，一边看书一边思考吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《Effective Java》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;书中列举了很多编程建议，其实就是告诉怎样去写好代码，你需要从&lt;code&gt;能写代码&lt;/code&gt;（入门）过渡到&lt;code&gt;会写代码&lt;/code&gt;，这本书值得一看。如果你的编码经验比较少，那这边书你可以稍微往后延，因为看完了你可能没有感同身受。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《Java8 实战》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Java15 都出来了为什么还要学 Java8 ？因为现在很多公司都还停留在 Java8， Java8是继Java5之后改动很大的一个版本，得好好学。Java8之后的版本非常不给力，换一个 JDK 版本费时费力，收益也不明显，公司肯定不愿意动了。这边书将 Java8所有的新特性都详细讲解了，非常推荐。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《深入理解 Java 虚拟机 第3版》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;周志明大神写的，非常非常经典，已经更新到第三版了。Java 虚拟机也就是 JVM，JVM 是Java 面试必考的知识，不懂这个直接回家等消息吧。这边书我看了很多遍，每次看完都有新的收获，墙裂建议大家看完。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《Java 并发编程的艺术》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这是一本专门讲解Java并发的书，涉及到各种锁、常见安全的集合类，基本就是将 JUC（java.util.concurrent包的简称）里所有的内容覆盖了一遍，看完你一定有收获。强烈推荐！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面推荐的几本书可能不太容易读懂，建议多读几遍。书中看不懂的地方可以在网上搜，多找一些优质的博客或者公众号看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此 Java 语言特性基本学习完了，就算达不到高手的水平，你也在正轨上了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;基础框架（SSM）&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习 Java 语言特性可能比较枯燥，接下来可以学习基础框架动手做一些项目，比如 Java 领域非常流行的 Spring 框架，这就是为 Java 后端量身定做的，非常好用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 spring 流行之前，还出现 Struts 这样流行的框架，后面由于种种原因还是被 Spring 打败了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家在网上应该可以经常看到 SSM 的缩写，其实就是Spring+SpringMVC+MyBatis的缩写了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你需要掌握以下这些：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Spring 全家桶（Spring、Spring MVC、Spring Boot）使用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ORM 框架（MyBatis、Hibernate）使用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Spring 原理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ORM 框架原理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习 SSM 框架最好是动手完成一个简单的项目，建议跟着视频并且把代码敲出来，一来熟悉项目的开发流程，也可以给自己带来成就感。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;敲黑板：阶段性成就感非常重要，没有这个很容易放弃学习，所以要不定时给自己定个小目标，加加鸡腿啥的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有很多新手在做项目的时候非常纠结界面，作为一个 Java 后端程序员，你又不是全栈开发，纠结这个干什么，我的建议：要么不要界面只写接口，要么自己动手写点 html，不需要美观，实现功能即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跟着视频做完项目之后需要干什么？答案是：&lt;code&gt;深入理解框架原理&lt;/code&gt;。会用框架并不代表你懂框架，作为一个有追求的程序员，懂原理是永远的必修课，谁让这一行太卷了呢，人无你有你最棒。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐几本书：《Spring 基础内幕》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;首先声明一下这是一本讲解Spring 源码的书，不是教你做项目的书。如果需要深入理解 Spring 的技术原理，这是一本非常推荐的书。有点难啃，多读几遍。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《MyBatis 技术内幕》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;MyBatis 是 ORM 框架的一种，在国内使用比较多，据说在国外喜欢用 Hibernate。这本书对 MyBatis 的使用和基本原理都介绍比较清楚了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;敲黑板：技术更新迭代很快，抓住技术的本质才能与时俱进。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于基础框架这部分，大神们的学习方法是：使用框架 -&amp;gt; 懂框架 -&amp;gt; 造轮子。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;微服务框架&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;近些年微服务架构非常火，究其原因是因为传统的单体架构和面向服务的架构逐渐不能满足互联网快速迭代的需求。微服务可以更容易提供持续继承和持续部署的能力，让产品更快速交付推向市场。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面向服务的架构其实在五六年前就已经提出，期间经过了一段低潮期，泡沫散去后逐渐浮现了一些好用的框架，国外以 SpringCloud 为代表，国内以 Dubbo 为代表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;springCloud 和 Dubbo 有区别但是很多基本原理也是类似，大家学习的时候需要掌握技术的本质。下面列举一些核心知识点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Dubbo框架&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SpringCloud框架&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务注册与发现&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式服务链路追踪&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务隔离、熔断、降级&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务网关&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;springCloud 和 Dubbo 在官网都有很详细的介绍文档：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Dubbo官网 http://dubbo.apache.org/ 可以切到中文版&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SpringCloud 官网 https://spring.io/projects/spring-cloud&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看官网技术文档大家可能会很懵，但这些确实是最权威的资料，也是一手的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringCloud 和 Dubbo 是这几年刚刚流行的技术，从目前看来相关书籍还是比较少，也缺少一些经典的书，我还是列几本，大家按需获取。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《深入理解Apache Dubbo与实战》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Dubbo 最开始是阿里巴巴开源的，后面捐赠给Apache 了。建议大家读这本配合源码一起看。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《Spring Cloud微服务实战》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;读这本书之前你最好先学习 spring 和 spring boot，不然会很懵。另外这本书是2017年出版的，稍微显旧，大家注意分辨新旧特性。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果技术网站和书籍还不能满足你，建议你去搜一些视频学习，这里不做推荐以免认为是广告。推荐搜索平台：B 站、慕课网、网易云课堂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;敲黑板：微服务框架涵盖的内容非常多，也是有难点的技术，大家戒躁保持耐心。&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;常用中间件&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终用户并不直接使用&lt;code&gt;中间件&lt;/code&gt;，换言之&lt;code&gt;中间件&lt;/code&gt;不是大众消费类软件产品。但是在大公司里中间件是不可或缺的，它是支撑大型网站架构的一些基础的组件和服务，所以非常非常有必要学。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;小百科
中间件（Middleware）通常是指在一个大型分布式的系统中，负责各个不同组件（Component）/服务（Service）之间管理以及交互数据的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业界开源的优秀中间件非常多，通常会根据业务的需要在系统中引入若干，下面列举了一些常见的，都是必学的，非可选哈。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;缓存：Redis、Memcached（ 推荐 Redis）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息队列：Kafka、RocketMQ、RabbitMQ、ActiveMQ、ZeroMQ（推荐 Kafka）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据库中间件：ShardingSpere、Mycat&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个中间件涵盖的内容都非常多，要想学精需要大量时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 中文官方网站：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;http://www.redis.cn/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当做字典学习 redis 常见命令&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 官网：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;http://kafka.apache.org/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ShardingSpere 官网：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;http://shardingsphere.apache.org/index_zh.html&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Mycat 权威指南在线 PDF 版：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;http://www.mycat.org.cn/document/mycat-definitive-guide.pdf&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐几本相关的书：《Redis 设计与实现》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这时Redis 口碑比较好的一本书，书中详细讲解了 Redis 实现原理，如果你只是想学会怎么用，可以跳过一些章节。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《深入理解Kafka：核心设计与实践原理》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这本书既适合新手入门扫盲也适合高手进阶，想知道怎么用看前四章即可，想深入学习可以从第五章开始看，写的非常好，推荐学习！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《分布式数据库架构及企业实践——基于Mycat中间件》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Mycat 相关的书非常少，这本书是16年写的，有些陈旧了，如果对 Mycat 非常感兴趣可以简单翻一翻，但是不是特别推荐。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;书看完了你还想深入学习，建议大家关注一下极客时间的两门课：胡夕：《Kafka核心技术与实战》，老师是Apache Kafka Committer，很专业。蒋德钧：《Redis核心技术与实战》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过课程是付费的，手头紧的建议慎重哈。免费资源网上也有，靠大家搜索了~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;中间件的学习是一个漫长的过程，不仅需要很多理论知识还需要实践经验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如你学 Redis 的时候，要思考五种基本数据类型各自使用场景、布隆过滤器是什么原理、用 Redis 怎么实现分布式锁，带着问题去学习效率非常高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如你学 Kafka 消息队列，要对比常见消息队列的优缺点、Kafka 为什么吞吐量高、Kafka 会不会丢消息以及怎么解决。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如你学数据库中间件，要想数据库为什么要分库分表、分库分表 ID 如果处理等等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据库&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据库非常重要，面试也是必考的，可以考的点非常多，可以考得很浅：问一下 SQL 使用，也可以考的很深：问索引和锁的实现原理。下面列了一些常见的知识点。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;数据库基本理论：范式、索引原理、数据库引擎&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SQL 基本语法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SQL 调优，explain 执行计划&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据库事务（ACID）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据库锁：乐观锁、悲观锁、表锁、行锁等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建议数据库零基础的同学还是要先学习一下数据库的基本理论，因为我看到很多人都是一上来就学 SQL ，最终也只是会用而已，到后面 SQL 调优的时候就很迷茫了。如果你只是想用一用数据库，这部分也可以跳过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于原理部分有一本非常经典的教材《数据库系统概念》以供学习，经典书籍一般都比较难啃坑也比较厚，建议大家先看目录，挑重点看。大学学过这本书的可以直接跳过了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了一些理论后就可以开始学习 SQL 语法了，这里推荐一本《MySQL 必知必会》，一边看书一边对着电脑敲。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然面试大厂肯定会问一下比较难的东西，你需要搞懂索引的原理、事务 ACID、锁，问数据库这些东西必考哦！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL 学习书籍清单：《数据库系统概念》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;经典数据库教材，理解一些基本原理，可略看。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《MySQL必知必会》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;SQL 语法入门好书，推荐！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《MySQL技术内幕 : InnoDB存储引擎》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;数据库进阶必看，理解存储引擎以及事务、锁、索引等原理。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分布式架构&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学什么？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式这一部分就是面试的加分项了，答好了面试官会觉得你技术功底深厚，答不好，只要你前面的基础还不错也能过。所以呢，作为一个有追求的技术人，千万不要放过加分的机会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式相关的内容非常多，下面列举几个在项目中或者面试中经常会遇到的知识点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;分布式事务：两阶段提交（2PC）、补偿事务（TCC）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式锁：基于关系型数据库（MySQL）、基于 Redis、基于Zookeeper&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式 ID：雪花算法（Snowflake）、美团 Leaf&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么学？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分内容学好非常难，在很多书中都是轻轻带过，没有深入讲解原理，所以就不推荐书了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那怎么学呢？大家可以针对每个知识点到网上搜索优质的博客，后面我也会逐步更文讲解这些知识点，敬请期待，欢迎催更哟。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;必须掌握的工具软件&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工欲善其事，必先利其器。作为一个 Java 开发人员，你需要学习业界常用的软件，软件工具用得越熟你的编码效率越高，下班的时间可能越早（打工人太难了）。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Java 最聪明的 IDE：IntelliJ IDEA （请放弃使用 Eclipse，我有一堆理由睡服你）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;地球上最好用的版本管理工具：Git&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;经久不衰的依赖管理工具：Maven&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Docker&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些软件你要是用不好，那只能说明…… 你再多学学吧。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;学习资源网站列表汇总&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）视频网站&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;B站（推荐）：https://www.bilibili.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;网易云课堂：https://study.163.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;极客学院：https://www.jikexueyuan.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;慕课网：https://www.imooc.com/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）专栏&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;极客时间（推荐）：https://time.geekbang.org/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Gitchat https://gitbook.cn/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（3）Github&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Java 知识地图（推荐）：https://github.com/smileArchitect/JavaMap&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（4）技术博客：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;CSDN 博客：https://blog.csdn.net/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;博客园：https://www.cnblogs.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;掘金社区（推荐）：https://juejin.cn/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;InfoQ：https://xie.infoq.cn/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;思否：https://segmentfault.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;开源中国：https://www.oschina.net/blog&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（5）搜索引擎：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;百度：https://www.baidu.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;谷歌：https://www.google.com/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（6）知识问答：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;知乎（推荐）：https://www.zhihu.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;stackoverflow（推荐）：https://stackoverflow.com/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（7）刷题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;力扣（推荐）：https://leetcode-cn.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;牛客：https://www.nowcoder.com/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（8）云笔记：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;石墨：https://shimo.im/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;语雀：https://www.yuque.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有道云笔记：http://note.youdao.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;印象笔记：https://www.yinxiang.com/
看个人习惯去选择，不推荐了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（9）在线画图：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;processOn：https://www.processon.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;drawio：https://app.diagrams.net/
各有特色，都推荐。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;学习常见问题（FAQ）&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;学了容易忘怎么办？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是大家学习会遇到的头号大问题，怎么解决？重复学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打个比方，假如你正在学习 spring 注解，突然发现了一个注解@Aspect，不知道干什么用的，你可能会去查看源码或者通过博客学习，花了半小时终于弄懂了，下次又看到@Aspect 了，你有点郁闷了，上次好像在哪哪哪学习，你快速打开网页花了五分钟又学会了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从半小时和五分钟的对比中可以发现多学一次就离真正掌握知识又近了一步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;人的本性就是容易遗忘，只有不断加深印象、重复学习才能真正掌握，所以很多书我都是推荐大家多看几遍。哪有那么多天才，他只是比你多看了几遍书。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;推荐这么多书都要看完吗？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然不是！有一些书都是同类型的，作者写书的侧重点不一样，大家要学会挑重点看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿到一本书，首先要把目录多看一遍，一般而言书的前几章都是介绍型的内容，如果你已经有了基础，可以直接跳到后面原理解析或者实战部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;需要学多久才能成为技术大牛？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;学习无止境！&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业界说法，通过不断努力学习，一到两年可以达到初级水平，三到四年达到中级水平，五年可以达到高级水平。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上每个人的学习能力和精力不一样，时间参考意义不大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要你在一个方向或领域有自己的建树，就可以叫你大牛；如果你在公司是技术骨干、技术专家、架构师，也可以称之为大牛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;敲黑板：技术学习千万不要浮躁，谦卑一点多学一点，天外有天。&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;现在 python、Go 语言很火，要不要直接学它们？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不要纠结语言，语言只是工具。今天 Go 很火，明天会有其他语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我有一个同学毕业去阿里写 Java，后面跳槽到深圳腾讯写 C++，现在又跳到字节跳动写 Go，在大佬面前这些语言只是语法不一样而已。所以建议大家打好基础，答应我一定打好基础。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>de818b3cb8e8961d71462e229bbc4240</guid>
<title>[推荐] 肝了 3 版才满意：分布式系统之 CAP 理论，我们对它的理解和误解</title>
<link>https://toutiao.io/k/q2fkii4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;引言&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 理论，相信很多人都听过，它是指：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么要理解 CAP 理论？我能说出很多理由来。如果是在职场上，也许最合适的理由是，当领导给出的任务不靠谱时，我们可以依据 CAP 去否决它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，有这么一个任务，给你定了三大目标：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;既要提升系统的可用性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;又要保证数据的实时可见&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;还有提升系统的容错能力&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到“既要、又要、还要”，是不是想到了阿里……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，如果你深刻理解了 CAP，你会发现完成这个任务是不可能的。但是，如果你不理解 CAP，然后又拍了胸脯保证完成任务，不好意思，职场是不需要眼泪和后悔的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有点跑题了，书归正传。CAP 理论是分布式设计中最基础最重要的理论，不懂它，你可能连分析一套分布式系统的核心设计理念都做不到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于 CAP 为何你读了那么多文章都还是搞不明白呢？因为 CAP 理论来自学术界，而解读 CAP 理论的人尝试用工程师的方式去阐述它，这本身就有了问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 本身基于状态，基于瞬态，是一个描述性的理论，它并不解决工程问题。但是，很多工程师却总是尝试为 CAP 做过多解读。比如，非要说 CAP 理论只能适合某某场景，非要说 CAP 理论里的一致性是非常强的一致性，把其和事务的一致性混为一谈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 CAP 是学术理论，并不是工程理论，它会舍弃很多现实世界的问题。比如网络的时长，比如节点内部的处理速度不一致，比如节点间存储方式和速度的不一致。它说的一致性就是客户端是否能拿到最新数据，它说的可用性就是允许客户端拿不到最新数据。而这些东西被工程师们的过多脑补，导致了文章和文章说法不一样，解析不一样，阐述背景不一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在今天这篇文章中，我们只解释和说明，不脑补，不过多从工程角度解读，只说本质，只指核心，希望能真正说清楚、讲明白 CAP 理论。望本文能达到这个目的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来你看到文字，我前前后后写了 10 天，已经是这篇文章的第三版了，前两版写了一半都被我推翻重写了，因为我自己看了不满意。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一方面是对自己知识掌握程度不满意，本以为自己明白 CAP 了，直到写的时候，发现有些还是拿不准。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面是不满意自己的写的太晦涩、太教科书，能把知识讲的通俗易懂，才是我希望的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给大家看看文章上辈子的模样。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7de13Ay4VwjTWZWElOjvicFk1OVBgoX80dweibXdkf04QbQ7oQ2KicVjyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.2532188841201717&quot; data-w=&quot;466&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. CAP 的由来&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要理解 CAP，首先我们要清楚，为何会有人提出 CAP？提出 CAP 是为了解决什么问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间回到 1985 年，彼时，后来证明了 CAP 理论的 Lynch 教授此时给当时的 IT 界来了一记惊雷：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;她通过不可辩驳的证明告诉业界的工程师们，如果在一个不稳定（消息要么乱序要么丢了）的网络环境里（分布式异步模型），想始终保持数据一致是不可能的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是个什么概念呢？就是她打破了那些既想提供超高质量服务，又想提供超高性能服务的技术人员的幻想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本质是在告诉大家，在分布式系统里，需要妥协。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，如何妥协？分布式系统里到底应该怎么权衡这种 trade-off？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以想象一下，在 CAP 定理提出之前，没有这些方向性的指引，在设计和实施分布式系统时该有多么混乱。一套分布式系统是由多个模块组成的，这些模块本身可能由不同的开发人员去完成。然而，对于这些人，在公共层面，竟然没有一个原则去指导他们该怎么完成这套功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们在同步两个节点的数据时，如果发生了错误，到底我们应该怎么做呢？如果没有统一的标准和方向，那很可能在一套分布式系统中的不同模块，会出现不同的处理情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设一套系统，由 A、B 两个模块构成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;A 模块的设计理念是：节点间出现了问题，它可能会选择不断的重试，一直等到节点通信恢复。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7Sz5tMgqjRByonTWZ733mtfvC9vvgHcKIZpyKhQ88iaoLvFJiboXfDzxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.4981481481481482&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 B 的设计理念是：节点间出现了问题，它断开就是了，可能最多就记录下状态，等以后处理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7UBt01HgagILpplvO14XezPuYrfeicA5f1FTvyaXjDEBa4iaIrw84o15g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5212962962962963&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，当 A、B 之间出现了通信怎么办？那会出现 A 往 B 发请求，出问题会不断重试。而 B 往 A 发请求，出问题则直接断开的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，在后面我们会说明，CAP 的理念在实际工程中，会允许这种不一致。可是，那种不一致是提前设计好和规划好的，是根据实际数据的重要性和业务需求做的妥协，而不是这种混乱的妥协。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，IT 界的人们就一直在摸索，试图找到一些纲领去指导分布式系统的设计，这一找就找了 15 年。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2000 年时，Eric Brewer 教授在 PODC 会议上提出了 CAP 理论，但是由于没有被证明过，所以，当时只能被称为 CAP 猜想。这个猜想引起了巨大的反响，因为 CAP 很符合人们对设计纲领的预期。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2002 年后，经过 Seth Gilbert 和 Nancy Lynch 从理论上证明了 CAP 猜想后，CAP 理论正式成为了分布式系统理论的基石之一。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. CAP 到底是什么&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 定理表达了一个分布式系统里不可能同时满足以下的三个特性：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1. C：数据一致性&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是数据一致性？咋一看真的很让人糊涂，一致性是什么？是指数据能一起变化，是能让数据整齐划一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题又来了，数据何时会变化？数据怎么才能被称为一起变化？我们现在来回答这些问题，当我们搞清楚了这些问题，那么对数据一致性就会有了清晰的理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先第一个问题，数据何时会一起变化？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是：仅且仅当包含数据的服务，收到数据更新请求的时候，数据才会发生变化。而数据更新请求则仅包括数据的增、删、改这三种请求，而这三种请求又被统称为写请求。所以，数据只有在写请求的时候才会发生变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们来回答第二个问题，数据要怎么样才能被称为一起变化了？即谁来判断数据是最终变化了？是服务器对写请求的返回结果吗？告诉写请求成功，数据就一定发生一致性变化了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NO，数据发生变化是否一致是需要经过读请求来做检验的。那么读请求判断的依据是什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设，我们的分布式存储系统有两个节点，每个节点都包含了一部分需要被变化的数据。如果经过一次写请求后，两个节点都发生了数据变化。然后，读请求把这些变化后的数据都读取到了，我们就把这次数据修改称为数据发生了一致性变化。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7bUxeZKcABQ6lDc9oW7jpQ0aWRmQRb8ffTG6M8wBE5oHAeoGLEQicGJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.937037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，这还不是完整的一致性。因为系统不可能永久的正常运行下去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果系统内部发生了问题从而导致系统的节点无法发生一致性变化会怎么样呢？当我们这样做的时候，就意味着想看到最新数据的读请求们，很可能会看到旧数据，或者说获取到不同版本的数据。此时，为了保证分布式系统对外的数据一致性，于是选择不返回任何数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub75ichYvUC3DoHYNWg3O6121kumKUY2iayP6AhYeIPw0qOStQMwxBhfokA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6111111111111112&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里需要注意一下，CAP 定理是在说在某种状态下的选择，和实际工程的理论是有差别的。上面描述的一致性和 ACID 事务中的一致性是两回事。事务中的一致性包含了实际工程对状态的后续处理。但是 CAP 定理并不涉及到状态的后续处理，对于这些问题，后续出现了 BASE 理论等工程结论去处理，目前，只需要明白 CAP 定理主要描述的是状态。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2. A：可用性&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;奥维德曾经说过：“行动被人们遗忘，结果却将永存”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这句话说明了结果的重要性，而可用性在 CAP 里就是对结果的要求。它要求系统内的节点们接收到了无论是写请求还是读请求，都要能处理并给回响应结果。只是它有两点必须满足的条件：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;条件 1：返回结果必须在合理的时间以内，这个合理的时间是根据业务来定的。业务说必须 100 毫秒内返回，合理的时间就是 100 毫秒，需要 1 秒内返回，那就是 1 秒，如果业务定的 100 毫秒，结果却在 1 秒才返回，那么这个系统就不满足可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;条件 2：需要系统内能正常接收请求的所有节点都返回结果。这包含了两重含义：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果节点不能正常接收请求了，比如宕机了，系统崩溃了，而其他节点依然能正常接收请求，那么，我们说系统依然是可用的，也就是说，部分宕机没事儿，不影响可用性指标。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果节点能正常接收请求，但是发现节点内部数据有问题，那么也必须返回结果，哪怕返回的结果是有问题的。比如，系统有两个节点，其中有一个节点数据是三天前的，另一个节点是两分钟前的，如果，一个读请求跑到了包含了三天前数据的那个节点上，抱歉，这个节点不能拒绝，必须返回这个三天前的数据，即使它可能不太合理。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7r3q9LjBCW9uLCrIeUtaRjxGjYib0k1VkReHGelUXRVBpmkkb3XqfialQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.1111111111111112&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3. P：分区容忍性&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式的存储系统会有很多的节点，这些节点都是通过网络进行通信。而网络是不可靠的，当节点和节点之间的通信出现了问题，此时，就称当前的分布式存储系统出现了分区。但是，值得一提的是，分区并不一定是由网络故障引起的，也可能是因为机器故障。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们的分布式存储系统有 A、B 两个节点。那么，当 A、B 之间由于可能路由器、交换机等底层网络设备出现了故障，A 和 B 通信出现了问题，但是 A、B 依然都在运行，都在对外提供服务。这时候，就说 A 和 B 发生了分区。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一种情况也会发生分区，当 A 出现了宕机，A 和 B 节点之间通信也是出现了问题，那么我们也称 A 和 B 发生了分区。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，我们可以知道，只要在分布式系统中，节点通信出现了问题，那么就出现了分区。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub77AgVQ9MCqdibbNvp8cbfJhrd7kLJqCYXWNPUwIO7aIdr32b5M8iaVfAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.825925925925926&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，分区容忍性是指什么？它是说，如果出现了分区问题，我们的分布式存储系统还需要继续运行。不能因为出现了分区问题，整个分布式节点全部就熄火了，罢工了，不做事情了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7qoWQEM741EUG5J0n7Nwkoo2SKglgDAd3seFM7LlsMgkQafGTk9GPzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.8898148148148148&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. CAP 怎么选择&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们上面已经知道了，在设计分布式系统时，架构师们在 C、A、P 这三种特性里，只能选择两种。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，这道 CAP 的选择题，就像别人在问你“小明的父亲有三个孩子，老大叫大朗，老二叫二郎，请问老三叫什么”一样。在以分布式存系统为限定条件的 CAP 世界里，P 是早已经确定的答案，P 是必须的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为，在分布式系统内，P 是必然的发生的，不选 P，一旦发生分区错误，整个分布式系统就完全无法使用了，这是不符合实际需要的。所以，对于分布式系统，我们只能能考虑当发生分区错误时，如何选择一致性和可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而根据一致性和可用性的选择不同，开源的分布式系统往往又被分为 CP 系统和 AP 系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一套系统在发生分区故障后，客户端的任何请求都被卡死或者超时，但是，系统的每个节点总是会返回一致的数据，则这套系统就是 CP 系统，经典的比如 Zookeeper。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一套系统发生分区故障后，客户端依然可以访问系统，但是获取的数据有的是新的数据，有的还是老数据，那么这套系统就是 AP 系统，经典的比如 Eureka。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说了这么多，其实 CAP 定理本质很简单，它就是一种分布式系统设计的不同理念概括，包括它说的一致性，可用性和分区容错性。这就类似一个大学的校训，是极度概念化的东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，大白话来形容下 CAP 吧，CAP 就是告诉程序员们当分布式系统出现内部问题了，你要做两种选择：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;要么迁就外部服务，像外包公司。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要么让外部服务迁就你，像银行。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;迁就外部服务就是我们不能因为我们自己的问题让外部服务的业务运行受到影响，所以要优先可用性。而让外部服务迁就我们，就要优先一致性。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 对 CAP 的常见误解&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;误解一：分布式系统因为 CAP 定理放弃了 C 或者 A 中的其中一个&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人在没有对 CAP 做深入了解的情况下，听到很多人说分布式系统必须在 CAP 三个特性里选择两个，就觉得一套分布式系统肯定要么只有可用性要么只有一致性，不存在完整的可用性和一致性功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种理解是大有问题的。因为，P 这种问题发生的概率非常低，所以：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;当没有出现分区问题的时候，系统就应该有完美的数据一致性和可用性。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你什么时候见过一个系统，当内部没有问题的时候，会经常让外部请求卡一下的？要么就冷不丁的提供陈旧的老数据？那还能叫系统吗？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;误解二：C 和 A 之间的选择是针对整个分布式系统的，只能整体考虑 C 和 A 之间的选择&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个理解也是不对的。当分区发生的时候，其实对一致性和可用性的抉择是局部性的，而不是针对整个系统的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能是在一些子系统做一些抉择，甚至很可能只需要对某个事件或者数据，做一致性和可用性的抉择而已。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，当我们做一套支付系统的时候，会员的财务相关像账户余额，账务流水是必须强一致性的。这时候，你就要考虑选 C。但是，会员的名字，会员的支付设置就不必考虑强一致性，可以选择可用性 A。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一套分布式系统的运行，就像人生一样，就是一次又一次的选择。在不同阶段，不同的时刻有不同的事件发生的时候，又怎么可能会有完全一样的选择呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;误解三：CAP 的三个特性只有是和否两种极端选择，而不是一个范围&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种二元性的理解更是极其误导人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 理论的三种特性不是 Boolean 类型的，不是一致和不一致，可用和不可用，分区和没分区的这类二选一的选项。而是这三种特性都是范围类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿可用性来说，就像我从银行取钱。当我目的是派发压岁钱的时候，我很可能就想全要新票子，但是，新票子很可能就还得多一个步骤，就是需要拿旧票子去换一些新票，此时，我可以多等会儿，能拿到新票子就好。而当我的目的就是做生活花销的时候，票子是新是旧，我根本不那么关心，快点拿到钱就行。这就是可用性的范围需求之一，对时延性的要求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如，分区容错则由于探测机制的问题，可能还得各节点搞投票去协商分区是否存在，当某一台机器出现了问题，可能不影响业务的话，就会被机器投票认为分区不存在。然后一直等到多数机器出现了问题，才会投票确认出现了分区问题。这就好像新冠疫情，还会分低、中、高风险区呢，不是一出现通信故障就都被逻辑认定为分区问题。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. CAP 理论的一些疑问&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;疑问一：在遵从 CAP 定理的系统中是否适合任意的写请求&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，在 CAP 定理中，关于一致性会有多种说法，但是总的来说，都是在描述数据最新版本的可见性。而这些可见性往往代表的是读请求返回的数据的可见性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题来了，当我们要求读数据的可见性的时候，对写数据有什么要求吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们系统有三个节点，一个客户端给这个系统发了一个写请求，要求系统写入一个值为 20 的数据。那么，如果要满足 CAP 定理中的一致性，就需要在写完 20 这个数据之后，当其他客户端请求读取这个值为 20 的数据之后，无论请求被转发到系统中任何节点都能返回这个值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就要求写入这个值为 20 的写请求必须成功写到三个节点上，此时，系统就满足了写一致性的。所以，我们可以说对于读一致性的要求是同时约束了写一致性的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7vMa6aI6nPmmDuLtSVpvfJmJHqAWU7tOAbibYsn9oia9Z8lUJOtl5K17w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5324074074074074&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，在 CAP 定理中，可用性本身要求对读、写请求都要处理。如果我们以可用性作为标准的时候，在发生分区错误时，由于我们对读请求并没有强行要求返回完全准确的数据，所以，可能在本次读请求之前的最近一次写请求可能是部分失败的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的例子，我们的分布式系统由三个节点组成，最近一次写请求想把值为 20 的数据写到三个节点上。但是，由于发生了分区问题，有一个节点通信故障，写请求写不过去，因此只有两个节点包含了值为 20 的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，写请求会返回给客户端一个结果，可能会告诉客户端写入成功了，也可能告诉客户端写入部分成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，当后续的读请求恰巧被发送到有通信故障的那个节点，系统可能只能返回一个空的结果。但是，由于系统处理和返回了读写请求，所以，系统是满足了 CAP 中的可用性的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7IJRh1WQyaTgz3mHpBjxumrEVdtzXfOia0sj3iagzL9E4K7mYMwTgV5rg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5287037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;疑问二：数据分片和数据副本的分布式系统是否都遵守 CAP 定理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道，在一套大规模的分布式系统里，一定是既需要把海量数据做切分，存储到不同的机器上，也需要对这些存储了数据的机器做副本备份的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，如果，一个分布式系统里只有数据分片存储或者只有数据副本存储，他们都会遵守 CAP 定理吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是当数据分片时，也是要遵守 CAP 定理，但是，是种非常特殊的遵守。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当在一套分布式系统只有分片存储的时候，CAP 理论会表现成什么样？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们有个分布式系统，由三个节点 a、b、c 组成。其中节点 a 存放了 A 表的数据，b 存放了 B 表的数据，c 存放了 C 表的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有一个业务，它的意图是想往 A 表插入一条新数据，在 B 表删除一条已有数据，在 C 表更新一条老数据，这个分布式系统该怎么处理这种业务？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术上我们对这种一个意图想做多件事的情况往往会包装成一个事务。当我们包装成一个事务以后，我们可能会通过先在 a 节点执行，然后去 b 节点执行，最后去 c 节点执行，等到都成功了，才会返回成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，发生了分区以后怎么办？当在 a、b 节点都成功了，到 c 发现发生了通信故障？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，根据 CAP 定理，你有两个选择，要么就直接返回一个部分成功的结果给客户端，要么直接卡死等客户端超时或者返回失败给客户端。当返回部分成功的时候，这就是选择了可用性（A），当卡死或者返回失败给客户端的时候，就是选择了一致性（C）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，我们将请求包装成了事务，而事务是要求要么都成功，要么都失败……为了遵守这种要求，对于分布式只有分片的情况，迫于客观条件，只能选择C。所以分片的分布式系统，往往都是 CP 的系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可选择，但是无法选择是分布式系统只有分片数据存储的情况时，遵守 CAP 定理的特殊表现。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7B5JxhWjDyjGsOg9IlaggZfOxDl1F2ZqeibQ5mvic40wfvlcJ0qvRibblQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7537037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而当分布式系统是多个节点，每个节点存储了完整的一套数据，别的节点只是完整数据的备份的时候，即使事务只在一台机器上成功，当发生分区故障的时候，我们也是可以有充分的余地选择是&lt;strong&gt;单机事务的回退&lt;/strong&gt; or &lt;strong&gt;就此认为写成功的&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单机事务的回退，就可以对外表现为选择了一致性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7R0picGFzgA5TyCma6vKmf5gsibib4BNRBiafIFtIMA2OfeUm8ThCOQ03Cg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5203703703703704&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就此认为写成功，则可以认为选择了可用性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7fya5icVnbWbJbEzicEnx0glIDBe6IGmUcb66xUHnelVLhSnudUlJxauw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5018518518518519&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;疑问三：为何有时候区分一个系统是 AP 还是 CP 是如此之难&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为，就像我们前面讲过的，由于 AP 或者 CP 的选择，可能仅局限为整套系统的局部，甚至某些特殊的数据上，而我们又是用这种局部的特性去描述了整套系统，所以就导致了区分的困难。而这本身其实也日渐成为了 CAP 的一个大问题，从而被人诟病。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. CAP 的不足&lt;/span&gt;&lt;/h1&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CAP 定理本身是没有考虑网络延迟的问题的，它认为一致性是立即生效的，但是，要保持一致性，是需要时间成本的，这就导致往往分布式系统多选择 AP 方式&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;由于时代的演变，CAP 定理在针对所有分布式系统的时候，出现了一些力不从心的情况，导致很多时候它自己会把以前很严谨的数学定义改成了比较松弛的业务定义，类似于我们看到，CAP 定理把一致性、可用性、分区容错都变成了一个范围属性，而这和 CAP 定理本身这种数学定理般的称呼是有冲突的，出现了不符合数学严谨定义的问题。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在实践中以及后来 CAP 定理的提出者也承认，一致性和可用性并不仅仅是二选一的问题，只是一些重要性的区别，当强调一致性的时候，并不表示可用性是完全不可用的状态。比如，Zookeeper 只是在 master 出现问题的时候，才可能出现几十秒的不可用状态，而别的时候，都会以各种方式保证系统的可用性。而强调可用性的时候，也往往会采用一些技术手段，去保证数据最终是一致的。CAP 定理并没有给出这些情况的具体描述。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CAP 理论从工程角度来看只是一种状态的描述，它告诉大家当有错的时候，分布式系统可能处在什么状态。但是，状态是可能变化的。状态间如何转换，如何修补，如何恢复是没有提供方向的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. 引申出来的 BASE&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正因为 CAP 以上的种种不足，epay 的架构师 Dan Pritchett 根据他自身在大规模分布式系统的实践经验，总结出了 BASE 理论。BASE 理论是对 CAP 理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BASE 理论是实践工程的理论，它弥补了CAP 理论过于抽象的问题，也同时解决了 AP 系统的总体工程实践思想，是分布式系统的核心理论之一，我们将在下一篇文章里，详细的讲解此套理论。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. 大厂面试题&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在文章最后，来几道大厂关于 CAP 的面试真题，检验一下你的学习效果，hiahiahia&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;什么是 CAP 理论？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CAP 中的 P 是什么意思？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;为什么说分布式系统，只能在 C、A 中二选一？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;结合实际应用，CP、AP 该怎么选择？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;微信公众号改变了推送规则，&lt;span&gt;为了能正常看到文章，欢迎大家看完文章后，时常可以点点文末右下角的在看。&lt;/span&gt;&lt;span&gt;也可以把“四猿外”公众号加上星标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7068645640074211&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KTvmrffCdjtDe9IhiaiazkHSNbiakNHZfwfUkaYxUkn52dVFyfFewEHXbIs4bRU4b0HkqZbicN7hGtT1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;539&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我最近建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。欢迎加我微信，拉你入群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9852216748768473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KQibCDibpTo0kqofPehQvDDibibcb3bQUELdY3Knsl4r0RcgsV9l4icr3icmZQfaBXtSFNTxmdQlAZT1OQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;智能人工推荐&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484883&amp;amp;idx=1&amp;amp;sn=ae8c6aced4797e859fd2c224a11fea75&amp;amp;chksm=fcd8c992cbaf40848d237c4e499ec1ba7eff9fe5c3e9863af3a91e47782b5285b1673523e9cc&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;架构师的成长之路，第一步该怎么迈？我给大家准备好了&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484862&amp;amp;idx=1&amp;amp;sn=be1f32643415f605da7080f791ed64f9&amp;amp;chksm=fcd8c9ffcbaf40e936ac5aedde29c3b259026a2b2945ea195613087caab036df144f7c2d8937&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;优秀！一鼓作气学会“一致性哈希”，就靠这 18 张图了&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484826&amp;amp;idx=1&amp;amp;sn=35378fc344195edc643c5a68f896bc40&amp;amp;chksm=fcd8c9dbcbaf40cdcad84dd15b972afed8cf477f584748167ee67dc3a2a3532474497aa4d6c1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一个技术总监的忠告：精通那么多技术，你为何还是受不到重用？&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>850e8a2f01ab04872a74235dcf0e5cd2</guid>
<title>[推荐] 终于明白了，一文彻底理解 I/O 多路复用</title>
<link>https://toutiao.io/k/8c12y1i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;本篇是高性能、高并发系列的第三篇，承接上文&lt;/span&gt;《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484788&amp;amp;idx=1&amp;amp;sn=e2a084694bedf9b148bbcd5570747add&amp;amp;chksm=fcb9822acbce0b3cba63913ff6de1e37c133b878f02035bc816f7f2ec8423d908bd8560d3605&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;读取文件时程序经历了什么&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;读取文件时程序经历了什么&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;》，&lt;span&gt;在讲解了进程、线程以及I/O后，我们来到了高并发中又一关键技术，即I/O多路复用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在讲解该技术之前，我们需要预习一下文件以及文件描述符。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;什么是文件&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;程序员使用I/O最终都逃不过文件这个概念。&lt;/p&gt;&lt;p&gt;在Linux世界中文件是一个很简单的概念，作为程序员我们只需要将其理解为一个N byte的&lt;strong&gt;序列&lt;/strong&gt;就可以了：&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;b1, b2, b3, b4, ....... bN&lt;/strong&gt;&lt;/em&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;实际上所有的I/O设备都被抽象为了文件这个概念，一切皆文件，Everything is File，磁盘、网络数据、终端，甚至进程间通信工具管道pipe等都被当做文件对待。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.47844228094575797&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0tDTd5HtJx85rducEzeqRG9DFSQQsGiczkqZH322XyKtdBeRebJlvmew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;719&quot;/&gt;&lt;/section&gt;&lt;p&gt;所有的I/O操作也都可以通过文件读写来实现，&lt;strong&gt;这一非常优雅的抽象可以让程序员使用一套接口就能对所有外设I/O操作&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;常用的I/O操作接口一般有以下几类：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;打开文件，open&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;改变读写位置，seek&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;文件读写，read、write&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;关闭文件，close&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;程序员通过这几个接口几乎可以实现所有I/O操作，这就是文件这个概念的强大之处。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;文件描述符&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在上一篇《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484788&amp;amp;idx=1&amp;amp;sn=e2a084694bedf9b148bbcd5570747add&amp;amp;chksm=fcb9822acbce0b3cba63913ff6de1e37c133b878f02035bc816f7f2ec8423d908bd8560d3605&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;读取文件时，程序经历了什么&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;读取文件时，程序经历了什么&lt;/a&gt;》中我们讲到，要想进行I/O读操作，像磁盘数据，我们需要指定一个buff用来装入数据，一般都是这样写的：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;read&lt;/span&gt;(buff);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;但是这里我们忽略了一个关键问题，那就是虽然我们指定了往哪里写数据，但是我们该从哪里读数据呢？&lt;/section&gt;&lt;section&gt;从上一节中我们知道，通过文件这个概念我们能实现几乎所有I/O操作，&lt;strong&gt;因此这里少的一个主角就是文件&lt;/strong&gt;。&lt;/section&gt;&lt;p&gt;那么我们一般都怎样使用文件呢？&lt;/p&gt;&lt;p&gt;如果周末你去比较火的餐厅吃饭应该会有体会，一般周末人气高的餐厅都会排队，然后服务员会给你一个排队序号，通过这个序号服务员就能找到你，这里的好处就是服务员无需记住你是谁、你的名字是什么、来自哪里、喜好是什么、是不是保护环境爱护小动物等等，这里的关键点就是&lt;strong&gt;服务员对你一无所知，但依然可以通过一个号码就能找到你&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;同样的，在Linux世界要想使用文件，我们也需要借助一个号码，根据“&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484768&amp;amp;idx=1&amp;amp;sn=049db350af9e5eea5cf3523ceb83f447&amp;amp;chksm=fcb9823ecbce0b28ca28d021e68c78138cde4a1b86ea7209c0c667d3d544d223d8b2aecbccec&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;弄不懂原则&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;弄不懂原则&lt;/a&gt;”，这个号码就被称为了文件描述符，&lt;strong&gt;file descriptors&lt;/strong&gt;，在Linux世界中鼎鼎大名，其道理和上面那个排队号码一样。&lt;/p&gt;&lt;p&gt;因此，文件描述仅仅就是一个数字而已，但是通过这个数字我们可以操作一个打开的文件，这一点要记住。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1635434412265757&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0VoQpIAibEsDfwQibJ6AjvtueDkDSYLBAQAWjm8Pbcx2DzWwhvjSRt9Xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;587&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有了文件描述符，进程可以对文件一无所知&lt;/strong&gt;，比如文件在磁盘的什么位置、加载到内存中又是怎样管理的等等，这些信息统统交由操作系统打理，进程无需关心，操作系统只需要给进程一个文件描述符就足够了。&lt;/p&gt;&lt;p&gt;因此我们来完善上述程序：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; fd = &lt;span class=&quot;code-snippet__keyword&quot;&gt;open&lt;/span&gt;(file_name); &lt;span class=&quot;code-snippet__regexp&quot;&gt;//&lt;/span&gt; 获取文件描述符&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;read&lt;/span&gt;(fd, buff);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;怎么样，是不是非常简单。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;文件描述符太多了怎么办&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;经过了这么多的铺垫，终于要到高性能、高并发这一主题了。&lt;/p&gt;&lt;p&gt;从前几节我们知道，所有I/O操作都可以通过文件样的概念来进行，这当然包括网络通信。&lt;/p&gt;&lt;p&gt;如果你有一个web服务器，当三次握手成功以后，我们会调用accept来获取一个链接，调用该函数我们同样会得到一个文件描述符，通过这个文件描述符就可以处理客户端发送的请求并且把处理结果发送回去。也就是说通过这个描述符我们就可以和客户端进行通信了。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 通过&lt;span class=&quot;code-snippet__keyword&quot;&gt;accept&lt;/span&gt;获取客户端的文件描述符&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; conn_fd = &lt;span class=&quot;code-snippet__keyword&quot;&gt;accept&lt;/span&gt;(...);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;server的处理逻辑通常是读取客户端请求数据，然后执行某些特定逻辑：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;read&lt;/span&gt;(conn_fd, request_buff) &amp;gt; 0) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    do_something(request_buff);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;是不是非常简单，然而世界终归是复杂的，当然也不是这么简单的。&lt;/p&gt;&lt;p&gt;接下来就是比较复杂的了。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.708&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0Y6IbPK84RcJPC4nicAL1cibqOjK8FtEEprYKJichQAd3AZykrlQjdYrEQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;p&gt;既然我们的主题是高并发，那么&lt;strong&gt;server就不可能只和一个客户端通信&lt;/strong&gt;，而是可能会同时和成千上万个客户端进行通信。&lt;strong&gt;这时你需要处理不再是一个描述符这么简单，而是有可能要处理成千上万个描述符&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;为了不让问题一上来就过于复杂，我们先简单化，假设只同时处理两个客户端的请求。&lt;/p&gt;&lt;p&gt;有的同学可能会说，这还不简单，这样写不就行了：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(read(socket_fd1, buff) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    do_something();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(read(socket_fd2, buff) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    do_something();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;在上一篇《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484788&amp;amp;idx=1&amp;amp;sn=e2a084694bedf9b148bbcd5570747add&amp;amp;chksm=fcb9822acbce0b3cba63913ff6de1e37c133b878f02035bc816f7f2ec8423d908bd8560d3605&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;读取文件时，程序都经历了什么&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;读取文件时，程序都经历了什么&lt;/a&gt;》中我们讨论过这是非常典型的阻塞式I/O，如果此时没有数据可读那么进程会被阻塞而暂停运行，这时我们就无法处理第二个请求了，即使第二个请求的数据已经就位，这也就意味着处理某一个客户端时由于进程被阻塞导致剩下的所有其它客户端必须&lt;strong&gt;等待&lt;/strong&gt;，在同时处理几万客户端的server上，这显然是不能容忍的。&lt;/p&gt;&lt;p&gt;聪明的你一定会想到使用多线程，为每个客户端请求开启一个线程，这样一个客户端被阻塞就不会影响到处理其它客户端的线程了，注意，既然是高并发，那么我们要为成千上万个请求开启成千上万个线程吗，大量创建销毁线程会严重影响系统性能。&lt;/p&gt;&lt;p&gt;那么这个问题该怎么解决呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这里的关键点在于，我们事先并不知道一个文件描述对应的I/O设备是否是可读的、是否是可写的&lt;/strong&gt;，在外设的不可读或不可写的状态下进行I/O只会导致进程阻塞被暂停运行。&lt;/p&gt;&lt;p&gt;因此要优雅的解决这个问题，就要从其它角度来思考这个问题了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0BJ2icaAx4qQjBVVrIw7VamFqBmxLBRRnJCvxQ3SVVOtkl08xNDRADWw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;不要打电话给我，有需要我会打给你&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;大家生活中肯定会接到过推销电话，而且不止一个，一天下来接上十个八个推销电话你的身体会被掏空的。&lt;/p&gt;&lt;p&gt;这个场景的关键点在于打电话的人并不知道你是不是要买东西，只能来一遍遍问你，因此一种更好的策略是不要让他们打电话给你，记下他们的电话，有需要的话打给他们，这样推销员就不会一遍一遍的来烦你了(虽然现实生活中这并不可能)。&lt;/p&gt;&lt;p&gt;在这个例子中，你，就好比内核，推销者就好比应用程序，电话号码就好比文件描述符，和你用电话沟通就好比I/O。&lt;/p&gt;&lt;p&gt;现在你应该明白了吧，处理多个文件描述符的更好方法其实就存在于推销电话中。&lt;/p&gt;&lt;p&gt;因此相比上一节中我们通过I/O接口&lt;strong&gt;主动&lt;/strong&gt;问内核这些文件描述符对应的外设是不是已经就绪了，一种更好的方法是，我们把这些感兴趣的文件描述符一股脑扔给内核，并霸气的告诉内核：“&lt;strong&gt;我这里有1万个文件描述符，你替我监视着它们，有可以读写的文件描述符时你就告诉我，我好处理&lt;/strong&gt;”。而不是弱弱的问内核：“第一个文件描述可以读写了吗？第二个文件描述符可以读写吗？第三个文件描述符可以读写了吗？。。。”&lt;/p&gt;&lt;p&gt;这样应用程序就&lt;strong&gt;从“繁忙”的主动变为了清闲的被动&lt;/strong&gt;，&lt;strong&gt;反正文件描述可读可写了内核会通知我&lt;/strong&gt;，能偷懒我才不要那么勤奋。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv05kOtE9Se6jRyibLf346NDumLwjBx1chdzV3iayw5k4sTj1yZRibptJCgw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/section&gt;&lt;p&gt;这是一种更加高效的I/O处理机制，&lt;strong&gt;现在我们可以一次处理多路I/O了&lt;/strong&gt;，为这种机制起一个名字吧，再次祭出“&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484768&amp;amp;idx=1&amp;amp;sn=049db350af9e5eea5cf3523ceb83f447&amp;amp;chksm=fcb9823ecbce0b28ca28d021e68c78138cde4a1b86ea7209c0c667d3d544d223d8b2aecbccec&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;弄不懂原则&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;弄不懂原则&lt;/a&gt;”，就叫I/O多路复用吧，这就是 I/O multiplexing。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;I/O多路复用，I/O multiplexing&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;multiplexing一词其实多用于通信领域，为了充分利用通信线路，希望在一个信道中传输多路信号，要想在一个信道中传输多路信号就需要把这多路信号结合为一路，将多路信号组合成一个信号的设备被称为multiplexer，显然接收方接收到这一路组合后的信号后要恢复原先的多路信号，这个设备被称为demultiplexer，如图所示：&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3772032902467685&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8g3rwJPmya3k5TFfEicLibY7eJxAWPJZS6mXnPmJeB3IbwnRcJMBKXg8mn3SaUYL9K2nIAJV61dLYJRav9icp7xMQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;851&quot;/&gt;&lt;/section&gt;&lt;p&gt;回到我们的主题。&lt;/p&gt;&lt;p&gt;所谓I/O多路复用指的是这样一个过程：&lt;/p&gt;&lt;p&gt;1. 我们拿到了一堆文件描述符(不管是网络相关的、还是磁盘文件相关等等，任何文件描述符都可以)&lt;/p&gt;&lt;p&gt;2. 通过调用&lt;strong&gt;某个函数&lt;/strong&gt;告诉内核：“&lt;strong&gt;这个函数你先不要返回，你替我监视着这些描述符，当这堆文件描述符中有可以进行I/O读写操作的时候你再返回&lt;/strong&gt;”&lt;/p&gt;&lt;p&gt;3. 当调用的这个函数返回后我们就能知道哪些文件描述符可以进行I/O操作了。&lt;/p&gt;&lt;p&gt;也就是说&lt;strong&gt;通过I/O多路复用我们可以同时处理多路I/O&lt;/strong&gt;。那么有哪些函数可以用来进行I/O多路复用呢？&lt;/p&gt;&lt;p&gt;在Linux世界中有这样三种机制可以用来进行I/O多路复用：&lt;/p&gt;&lt;p&gt;接下来我们就来介绍一下牛掰的I/O多路复用三剑客。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.429042904290429&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0GepzW6Zr4GgCdQrVwMQvOpUCw6PrJO8ql1MHrqZqpVkNHJypFcVkiaw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;303&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;I/O多路复用三剑客&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本质上select、poll、epoll都是阻塞式I/O，也就是我们常说的同步I/O，原因在于调用这些I/O多路复用函数时如果任何一个需要监视的文件描述符都不可读或者可写那么进程会被阻塞暂停执行，直到有文件描述符可读或者可写才继续运行。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1，select：初出茅庐&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在select这种I/O多路复用机制下，我们需要把想监控的文件描述集合通过函数参数的形式告诉select，然后select会将这些文件描述符集合&lt;strong&gt;拷贝&lt;/strong&gt;到内核中，我们知道数据拷贝是有性能损耗的，因此为了减少这种数据拷贝带来的性能损耗，Linux内核对集合的大小做了限制，并规定用户监控的文件描述集合不能超过1024个，同时当select返回后&lt;strong&gt;我们仅仅能知道有些文件描述符可以读写了，但是我们不知道是哪一个&lt;/strong&gt;，因此程序员必须再遍历一边找到具体是哪个文件描述符可以读写了。&lt;/p&gt;&lt;p&gt;因此，总结下来select有这样几个特点：&lt;/p&gt;&lt;p&gt;因此我们可以看到，select机制的这些特性在高并发网络服务器动辄几万几十万并发链接的场景下无疑是低效的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5936507936507937&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0jofjqXUFYU9vTFWIbtv5Xlsp3I68iaxWicECgousqLpgLBMia4pauKSVQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;315&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2，poll：小有所成&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;poll和select是非常相似的，poll相对于select的优化仅仅在于解决了文件描述符不能超过1024个的限制，select和poll都会随着监控的文件描述数量增加而性能下降，因此不适合高并发场景。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3，epoll：独步天下&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在select面临的三个问题中，文件描述数量限制已经在poll中解决了，剩下的两个问题呢？&lt;/p&gt;&lt;p&gt;针对拷贝问题，epoll使用的策略是&lt;strong&gt;各个击破&lt;/strong&gt;与&lt;strong&gt;共享内存&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;实际上文件描述符集合的变化频率比较低，select和poll频繁的拷贝整个集合，内核都快被烦死了，epoll通过引入epoll_ctl很体贴的做到了只操作那些有变化的文件描述符，同时epoll和内核还成为了好朋友，共享了同一块内存，这块内存中保存的就是那些已经可读或者可写的的文件描述符集合，这样就减少了内核和程序的拷贝开销。&lt;/p&gt;&lt;p&gt;针对需要遍历文件描述符才能知道哪个可读可写这一问题，epoll使用的策略是“当小弟”。&lt;/p&gt;&lt;p&gt;在select和poll机制下，&lt;strong&gt;进程要亲自下场去各个文件描述符上等待&lt;/strong&gt;，任何一个文件描述可读或者可写就唤醒进程，但是进程被唤醒后也是一脸懵逼并不知道到底是哪个文件描述符可读或可写，还要再从头到尾检查一遍。&lt;/p&gt;&lt;p&gt;但epoll就懂事多了，主动找到进程要当小弟替大哥出头。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.494&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0ShdV4HDxVwG3K0hMfbqlib853kYuGRTuxDASibiaMFj81et8eqTNtm8qg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;p&gt;在这种机制下，进程不需要亲自下场了，进程只要等待在epoll上，epoll代替进程去各个文件描述符上等待，当哪个文件描述符可读或者可写的时候就告诉epoll，epoll用小本本认真记录下来然后唤醒大哥：“进程大哥，快醒醒，你要处理的文件描述符我都记下来了”，这样进程被唤醒后就无需自己从头到尾检查一遍，因为epoll小弟都已经记下来了。&lt;/p&gt;&lt;p&gt;因此我们可以看到，在epoll这种机制下，实际上利用的就是“不要打电话给我，有需要我会打给你”这种策略，进程不需要一遍一遍麻烦的问各个文件描述符，而是翻身做主人了，“你们这些文件描述符有哪个可读或者可写了主动报上来”，这种机制实际上就是大名鼎鼎的事件驱动，Event-driven，这也是我们下一篇的主题。&lt;/p&gt;&lt;p&gt;实际上在Linux平台，&lt;strong&gt;epoll基本上就是高并发的代名词&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;基于一切皆文件的设计哲学，I/O也可以通过文件的形式实现，高并发场景下要与多个文件交互，这就离不开高效的I/O多路复用技术，本文我们详细讲解了什么是I/O多路复用以及使用方法，这其中以epoll为代表的I/O多路复用(基于事件驱动)技术使用非常广泛，实际上你会发现但凡涉及到高并发、高性能的场景基本上都能见到事件驱动的编程方法，当然这也是下一篇我们要重点讲解的主题，敬请期待。&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__0&quot;&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2934&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2935&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2936&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2937&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2938&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2939&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2940&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2941&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2942&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2943&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;伟&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2944&quot;&gt;伟&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2945&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2946&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;分&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2947&quot;&gt;分&lt;/span&gt;&lt;span data-raw-text=&quot;割&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2948&quot;&gt;割&lt;/span&gt;&lt;span data-raw-text=&quot;线&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2949&quot;&gt;线&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2950&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2951&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2952&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2953&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2954&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2955&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2956&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2957&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2958&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2959&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2960&quot;&gt;-&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2961&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;H&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2962&quot;&gt;H&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2963&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2964&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2965&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2966&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot;(&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2967&quot;&gt;(&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2968&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2969&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2970&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;f&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2971&quot;&gt;f&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2972&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2973&quot;&gt;m&lt;/span&gt;&lt;span data-raw-text=&quot;i&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2974&quot;&gt;i&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2975&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;y&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2976&quot;&gt;y&lt;/span&gt;&lt;span data-raw-text=&quot;)&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2977&quot;&gt;)&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;98&quot; data-index=&quot;2978&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;由&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2979&quot;&gt;由&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2980&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;群&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2981&quot;&gt;群&lt;/span&gt;&lt;span data-raw-text=&quot;靠&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2982&quot;&gt;靠&lt;/span&gt;&lt;span data-raw-text=&quot;谱&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2983&quot;&gt;谱&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2984&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;人&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2985&quot;&gt;人&lt;/span&gt;&lt;span data-raw-text=&quot;建&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2986&quot;&gt;建&lt;/span&gt;&lt;span data-raw-text=&quot;立&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2987&quot;&gt;立&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2988&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;愿&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2989&quot;&gt;愿&lt;/span&gt;&lt;span data-raw-text=&quot;为&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2990&quot;&gt;为&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2991&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;H&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2992&quot;&gt;H&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2993&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2994&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;r&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2995&quot;&gt;r&lt;/span&gt;&lt;span data-raw-text=&quot;带&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2996&quot;&gt;带&lt;/span&gt;&lt;span data-raw-text=&quot;来&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2997&quot;&gt;来&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2998&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;些&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2999&quot;&gt;些&lt;/span&gt;&lt;span data-raw-text=&quot;值&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3000&quot;&gt;值&lt;/span&gt;&lt;span data-raw-text=&quot;得&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3001&quot;&gt;得&lt;/span&gt;&lt;span data-raw-text=&quot;细&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3002&quot;&gt;细&lt;/span&gt;&lt;span data-raw-text=&quot;细&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3003&quot;&gt;细&lt;/span&gt;&lt;span data-raw-text=&quot;品&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3004&quot;&gt;品&lt;/span&gt;&lt;span data-raw-text=&quot;味&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3005&quot;&gt;味&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3006&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3007&quot;&gt;精&lt;/span&gt;&lt;span data-raw-text=&quot;神&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3008&quot;&gt;神&lt;/span&gt;&lt;span data-raw-text=&quot;食&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3009&quot;&gt;食&lt;/span&gt;&lt;span data-raw-text=&quot;粮&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3010&quot;&gt;粮&lt;/span&gt;&lt;span data-raw-text=&quot;！&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3011&quot;&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__3&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot;&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3012&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3013&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3014&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot;只&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3015&quot;&gt;只&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3016&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3017&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;创&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3018&quot;&gt;创&lt;/span&gt;&lt;span data-raw-text=&quot;或&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3019&quot;&gt;或&lt;/span&gt;&lt;span data-raw-text=&quot;授&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3020&quot;&gt;授&lt;/span&gt;&lt;span data-raw-text=&quot;权&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3021&quot;&gt;权&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3022&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;表&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3023&quot;&gt;表&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3024&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3025&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3026&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3027&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;不&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3028&quot;&gt;不&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3029&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;载&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3030&quot;&gt;载&lt;/span&gt;&lt;span data-raw-text=&quot;网&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3031&quot;&gt;网&lt;/span&gt;&lt;span data-raw-text=&quot;上&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3032&quot;&gt;上&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3033&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3034&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3035&quot;&gt;章&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__5&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__6&quot;&gt;&lt;span data-raw-text=&quot;所&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3036&quot;&gt;所&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3037&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3038&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3039&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3040&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3041&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;均&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3042&quot;&gt;均&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3043&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;找&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3044&quot;&gt;找&lt;/span&gt;&lt;span data-raw-text=&quot;到&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3045&quot;&gt;到&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3046&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3047&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3048&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;进&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3049&quot;&gt;进&lt;/span&gt;&lt;span data-raw-text=&quot;行&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3050&quot;&gt;行&lt;/span&gt;&lt;span data-raw-text=&quot;沟&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3051&quot;&gt;沟&lt;/span&gt;&lt;span data-raw-text=&quot;通&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3052&quot;&gt;通&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3053&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__7&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__8&quot;&gt;&lt;span&gt;&lt;span data-raw-text=&quot;也&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3054&quot;&gt;也&lt;/span&gt;&lt;span data-raw-text=&quot;希&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3055&quot;&gt;希&lt;/span&gt;&lt;span data-raw-text=&quot;望&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3056&quot;&gt;望&lt;/span&gt;&lt;span data-raw-text=&quot;各&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3057&quot;&gt;各&lt;/span&gt;&lt;span data-raw-text=&quot;位&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3058&quot;&gt;位&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3059&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3060&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;打&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3061&quot;&gt;打&lt;/span&gt;&lt;span data-raw-text=&quot;赏&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3062&quot;&gt;赏&lt;/span&gt;&lt;span data-raw-text=&quot;（&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3063&quot;&gt;（&lt;/span&gt;&lt;span data-raw-text=&quot;算&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3064&quot;&gt;算&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3065&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3066&quot;&gt;稿&lt;/span&gt;&lt;span data-raw-text=&quot;费&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3067&quot;&gt;费&lt;/span&gt;&lt;span data-raw-text=&quot;给&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3068&quot;&gt;给&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3069&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3070&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3071&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3072&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;）&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3073&quot;&gt;）&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3074&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3075&quot;&gt;更&lt;/span&gt;&lt;span data-raw-text=&quot;希&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3076&quot;&gt;希&lt;/span&gt;&lt;span data-raw-text=&quot;望&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3077&quot;&gt;望&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3078&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;家&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3079&quot;&gt;家&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3080&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3081&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3082&quot;&gt;投&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;102&quot; data-index=&quot;3083&quot;&gt;稿&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__9&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__10&quot;&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3085&quot;&gt;投&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3086&quot;&gt;稿&lt;/span&gt;&lt;span data-raw-text=&quot;请&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3087&quot;&gt;请&lt;/span&gt;&lt;span data-raw-text=&quot;联&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3088&quot;&gt;联&lt;/span&gt;&lt;span data-raw-text=&quot;系&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3089&quot;&gt;系&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3090&quot;&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__11&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__12&quot;&gt;&lt;span data-raw-text=&quot;s&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3091&quot;&gt;s&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3092&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3093&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;n&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3094&quot;&gt;n&lt;/span&gt;&lt;span data-raw-text=&quot;z&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3095&quot;&gt;z&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3096&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3097&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3098&quot;&gt;1&lt;/span&gt;&lt;span data-raw-text=&quot;6&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3099&quot;&gt;6&lt;/span&gt;&lt;span data-raw-text=&quot;3&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3100&quot;&gt;3&lt;/span&gt;&lt;span data-raw-text=&quot;@&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3101&quot;&gt;@&lt;/span&gt;&lt;span data-raw-text=&quot;g&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3102&quot;&gt;g&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3103&quot;&gt;m&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3104&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;i&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3105&quot;&gt;i&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3106&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;.&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3107&quot;&gt;.&lt;/span&gt;&lt;span data-raw-text=&quot;c&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3108&quot;&gt;c&lt;/span&gt;&lt;span data-raw-text=&quot;o&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3109&quot;&gt;o&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3110&quot;&gt;m&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__13&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__14&quot;&gt;&lt;span data-raw-text=&quot;本&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3111&quot;&gt;本&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3112&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;由&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3113&quot;&gt;由&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3114&quot;&gt;  &lt;span&gt;码农的荒岛求生&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3118&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;授&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3119&quot;&gt;授&lt;/span&gt;&lt;span data-raw-text=&quot;权&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3120&quot;&gt;权&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3121&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3122&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3123&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3124&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3125&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3126&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;布&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3127&quot;&gt;布&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3128&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3129&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;载&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3130&quot;&gt;载&lt;/span&gt;&lt;span data-raw-text=&quot;请&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3131&quot;&gt;请&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3132&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;明&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3133&quot;&gt;明&lt;/span&gt;&lt;span data-raw-text=&quot;本&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3134&quot;&gt;本&lt;/span&gt;&lt;span data-raw-text=&quot;来&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3135&quot;&gt;来&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3136&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;信&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3137&quot;&gt;信&lt;/span&gt;&lt;span data-raw-text=&quot;息&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3138&quot;&gt;息&lt;/span&gt;&lt;span data-raw-text=&quot;和&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3139&quot;&gt;和&lt;/span&gt;&lt;span data-raw-text=&quot;以&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3140&quot;&gt;以&lt;/span&gt;&lt;span data-raw-text=&quot;下&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3141&quot;&gt;下&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3142&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3143&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3144&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3145&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;（&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3146&quot;&gt;（&lt;/span&gt;&lt;span data-raw-text=&quot;长&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3147&quot;&gt;长&lt;/span&gt;&lt;span data-raw-text=&quot;按&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3148&quot;&gt;按&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3149&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;识&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3150&quot;&gt;识&lt;/span&gt;&lt;span data-raw-text=&quot;别&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3151&quot;&gt;别&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3152&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3153&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3154&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3155&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3156&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;）&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3157&quot;&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__15&quot;&gt;&lt;span&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;other&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/LHDiahSVnXhunbEtuowcI7kF5kmUaeTrszibibQ3st6OU8hy2CoIotHHLxicicibyF1qkNI7HibXYHXGN6hRby4ZyjR6A/640?wx_fmt=other&quot;/&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>