<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>8d541051925502baa505f386eebfc6b4</guid>
<title>自定义注解！绝对是程序员装逼的利器</title>
<link>https://toutiao.io/k/gnbzbuw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;article-content&quot;&gt;
&lt;p&gt;相信很多人对Java中的注解都很熟悉，比如我们经常会用到的一些如@Override、@Autowired、@Service等，这些都是JDK或者诸如Spring这类框架给我们提供的。&lt;/p&gt;
&lt;p&gt;在以往的面试过程中，我发现，关于注解的知识很多程序员都仅仅停留在使用的层面上，很少有人知道注解是如何实现的，更别提使用自定义注解来解决实际问题了。&lt;/p&gt;
&lt;p&gt;但是其实，我觉得一个好的程序员的标准就是懂得如何优化自己的代码，那在代码优化上面，如何精简代码，去掉重复代码就是一个至关重要的话题，在这个话题领域，自定义注解绝对可以算得上是一个大大的功臣。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;在我看来，会使用自定义注解 ≈ 好的程序员。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么，本文，就来介绍几个，作者在开发中实际用到的几个例子，向你介绍下如何使用注解来提升你代码的逼格。&lt;/p&gt;
&lt;h3&gt;基本知识&lt;/h3&gt;
&lt;p&gt;在Java中，注解分为两种，元注解和自定义注解。&lt;/p&gt;
&lt;p&gt;很多人误以为自定义注解就是开发者自己定义的，而其它框架提供的不算，但是其实上面我们提到的那几个注解其实都是自定义注解。&lt;/p&gt;
&lt;p&gt;关于”元”这个描述，在编程世界里面有都很多，比如”元注解”、”元数据”、”元类”、”元表”等等，这里的”元”其实都是从meta翻译过来的。&lt;/p&gt;
&lt;p&gt;一般我们把&lt;strong&gt;元注解理解为描述注解的注解&lt;/strong&gt;，&lt;strong&gt;元数据理解为描述数据的数据&lt;/strong&gt;，&lt;strong&gt;元类理解为描述类的类&lt;/strong&gt;…&lt;/p&gt;
&lt;p&gt;所以，在Java中，除了有限的几个固定的”描述注解的注解”以外，所有的注解都是自定义注解。&lt;/p&gt;
&lt;p&gt;在JDK中提供了4个标准的用来对注解类型进行注解的注解类（元注解），他们分别是:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Target
@Retention
@Documented
@Inherited
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了以上这四个，所有的其他注解全部都是自定义注解。&lt;/p&gt;
&lt;p&gt;这里不准备深入介绍以上四个元注解的作用，大家可以自行学习。&lt;/p&gt;
&lt;p&gt;本文即将提到的几个例子，都是作者在日常工作中真实使用到的场景，这例子有一个共同点，那就是都用到了Spring的AOP技术。&lt;/p&gt;
&lt;p&gt;什么是AOP以及他的用法相信很多人都知道，这里也就不展开介绍了。&lt;/p&gt;
&lt;h3&gt;使用自定义注解做日志记录&lt;/h3&gt;
&lt;p&gt;不知道大家有没有遇到过类似的诉求，就是希望在一个方法的入口处或者出口处做统一的日志处理，比如记录一下入参、出参、记录下方法执行的时间等。&lt;/p&gt;
&lt;p&gt;如果在每一个方法中自己写这样的代码的话，一方面会有很多代码重复，另外也容易被遗漏。&lt;/p&gt;
&lt;p&gt;这种场景，就可以使用自定义注解+切面实现这个功能。&lt;/p&gt;
&lt;p&gt;假设我们想要在一些web请求的方法上，记录下本次操作具体做了什么事情，比如新增了一条记录或者删除了一条记录等。&lt;/p&gt;
&lt;p&gt;首先我们自定义一个注解：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Operate Log 的自定义注解
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface OpLog {

    /**
     * 业务类型，如新增、删除、修改
     *
     * @return
     */
    public OpType opType();

    /**
     * 业务对象名称，如订单、库存、价格
     *
     * @return
     */
    public String opItem();

    /**
     * 业务对象编号表达式，描述了如何获取订单号的表达式
     *
     * @return
     */
    public String opItemIdExpression();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为我们不仅要在日志中记录本次操作了什么，还需要知道被操作的对象的具体的唯一性标识，如订单号信息。&lt;/p&gt;
&lt;p&gt;但是每一个接口方法的参数类型肯定是不一样的，很难有一个统一的标准，那么我们就可以借助Spel表达式，即在表达式中指明如何获取对应的对象的唯一性标识。&lt;/p&gt;
&lt;p&gt;有了上面的注解，接下来就可以写切面了。主要代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * OpLog的切面处理类，用于通过注解获取日志信息，进行日志记录
 *
 * @author Hollis
 */
@Aspect
@Component
public class OpLogAspect {

    private static final Logger LOGGER = LoggerFactory.getLogger(OpLogAspect.class);

    @Autowired
    HttpServletRequest request;

    @Around(&quot;@annotation(com.hollis.annotation.OpLog)&quot;)
    public Object log(ProceedingJoinPoint pjp) throws Exception {

        Method method = ((MethodSignature)pjp.getSignature()).getMethod();
        OpLog opLog = method.getAnnotation(OpLog.class);

        Object response = null;

        try {
            // 目标方法执行
            response = pjp.proceed();
        } catch (Throwable throwable) {
            throw new Exception(throwable);
        } 

        if (StringUtils.isNotEmpty(opLog.opItemIdExpression())) {
            SpelExpressionParser parser = new SpelExpressionParser();
            Expression expression = parser.parseExpression(opLog.opItemIdExpression());

            EvaluationContext context = new StandardEvaluationContext();
            // 获取参数值
            Object[] args = pjp.getArgs();

            // 获取运行时参数的名称
            LocalVariableTableParameterNameDiscoverer discoverer
                = new LocalVariableTableParameterNameDiscoverer();
            String[] parameterNames = discoverer.getParameterNames(method);

            // 将参数绑定到context中
            if (parameterNames != null) {
                for (int i = 0; i &amp;lt; parameterNames.length; i++) {
                    context.setVariable(parameterNames[i], args[i]);
                }
            }

            // 将方法的resp当做变量放到context中，变量名称为该类名转化为小写字母开头的驼峰形式
            if (response != null) {
                context.setVariable(
                    CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, response.getClass().getSimpleName()),
                    response);
            }

            // 解析表达式，获取结果
            String itemId = String.valueOf(expression.getValue(context));

            // 执行日志记录
            handle(opLog.opType(), opLog.opItem(), itemId);
        }

        return response;
    }


    private void handle(OpType opType,  String opItem, String opItemId) {
      // 通过日志打印输出
      LOGGER.info(&quot;opType = &quot; + opType.name() +&quot;,opItem = &quot; +opItem + &quot;,opItemId = &quot; +opItemId);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上切面中，有几个点需要大家注意的：&lt;/p&gt;
&lt;p&gt;1、使用@Around注解来指定对标注了OpLog的方法设置切面。 2、使用Spel的相关方法，通过指定的表示，从对应的参数中获取到目标对象的唯一性标识。 3、再方法执行成功后，输出日志。&lt;/p&gt;
&lt;p&gt;有了以上的切面及注解后，我们只需要在对应的方法上增加注解标注即可，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; @RequestMapping(method = {RequestMethod.GET, RequestMethod.POST})
@OpLog(opType = OpType.QUERY, opItem = &quot;order&quot;, opItemIdExpression = &quot;#id&quot;)
public @ResponseBody
HashMap view(@RequestParam(name = &quot;id&quot;) String id)
    throws Exception {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面这种是入参的参数列表中已经有了被操作的对象的唯一性标识，直接使用&lt;code&gt;#id&lt;/code&gt;指定即可。&lt;/p&gt;
&lt;p&gt;如果被操作的对象的唯一性标识不在入参列表中，那么可能是入参的对象中的某一个属性，用法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; @RequestMapping(method = {RequestMethod.GET, RequestMethod.POST})
@OpLog(opType = OpType.QUERY, opItem = &quot;order&quot;, opItemIdExpression = &quot;#orderVo.id&quot;)
public @ResponseBody
HashMap update(OrderVO orderVo)
    throws Exception {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上，即可从入参的OrderVO对象的id属性的值获取。&lt;/p&gt;
&lt;p&gt;如果我们要记录的唯一性标识，在入参中没有的话，应该怎么办呢？最典型的就是插入方法，插入成功之前，根本不知道主键ID是什么，这种怎么办呢？&lt;/p&gt;
&lt;p&gt;我们上面的切面中，做了一件事情，就是我们把方法的返回值也会使用表达式进行一次解析，如果可以解析得到具体的值，可以是可以。如以下写法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; @RequestMapping(method = {RequestMethod.GET, RequestMethod.POST})
@OpLog(opType = OpType.QUERY, opItem = &quot;order&quot;, opItemIdExpression = &quot;#insertResult.id&quot;)
public @ResponseBody
InsertResult insert(OrderVO orderVo)
    throws Exception {

    return orderDao.insert(orderVo);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上，就是一个简单的使用自定义注解+切面进行日志记录的场景。下面我们再来看一个如何使用注解做方法参数的校验。&lt;/p&gt;
&lt;h3&gt;使用自定义注解做前置检查&lt;/h3&gt;
&lt;p&gt;当我们对外部提供接口的时候，会对其中的部分参数有一定的要求，比如某些参数值不能为空等。大多数情况下我们都需要自己主动进行校验，判断对方传入的值是否合理。&lt;/p&gt;
&lt;p&gt;这里推荐一个使用HibernateValidator + 自定义注解 + AOP实现参数校验的方式。&lt;/p&gt;
&lt;p&gt;首先我们会有一个具体的入参类，定义如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class User {
    private String idempotentNo;
    @NotNull(
        message = &quot;userName can&#x27;t be null&quot;
    )
    private String userName;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上，对userName参数注明不能为null。&lt;/p&gt;
&lt;p&gt;然后再使用hibernate validator定义一个工具类，用于做参数校验。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 参数校验工具
 *
 * @author Hollis
 */
public class BeanValidator {

    private static Validator validator = Validation.byProvider(HibernateValidator.class).configure().failFast(true)
        .buildValidatorFactory().getValidator();

    /**
     * @param object object
     * @param groups groups
     */
    public static void validateObject(Object object, Class&amp;lt;?&amp;gt;... groups) throws ValidationException {
        Set&amp;lt;ConstraintViolation&amp;lt;Object&amp;gt;&amp;gt; constraintViolations = validator.validate(object, groups);
        if (constraintViolations.stream().findFirst().isPresent()) {
            throw new ValidationException(constraintViolations.stream().findFirst().get().getMessage());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上代码，会对一个bean进行校验，一旦失败，就会抛出ValidationException。&lt;/p&gt;
&lt;p&gt;接下来定义一个注解：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * facade接口注解， 用于统一对facade进行参数校验及异常捕获
 * &amp;lt;pre&amp;gt;
 *      注意，使用该注解需要注意，该方法的返回值必须是BaseResponse的子类
 * &amp;lt;/pre&amp;gt;
 */

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface Facade {

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个注解里面没有任何参数，只用于标注那些方法要进行参数校验。&lt;/p&gt;
&lt;p&gt;接下来定义切面：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Facade的切面处理类，统一统计进行参数校验及异常捕获
 *
 * @author Hollis
 */
@Aspect
@Component
public class FacadeAspect {

    private static final Logger LOGGER = LoggerFactory.getLogger(FacadeAspect.class);

    @Autowired
    HttpServletRequest request;

    @Around(&quot;@annotation(com.hollis.annotation.Facade)&quot;)
    public Object facade(ProceedingJoinPoint pjp) throws Exception {

        Method method = ((MethodSignature)pjp.getSignature()).getMethod();
        Object[] args = pjp.getArgs();

        Class returnType = ((MethodSignature)pjp.getSignature()).getMethod().getReturnType();

        //循环遍历所有参数，进行参数校验
        for (Object parameter : args) {
            try {
                BeanValidator.validateObject(parameter);
            } catch (ValidationException e) {
                return getFailedResponse(returnType, e);
            }
        }

        try {
            // 目标方法执行
            Object response = pjp.proceed();
            return response;
        } catch (Throwable throwable) {
            return getFailedResponse(returnType, throwable);
        }
    }

    /**
     * 定义并返回一个通用的失败响应
     */
    private Object getFailedResponse(Class returnType, Throwable throwable)
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {

        //如果返回值的类型为BaseResponse 的子类，则创建一个通用的失败响应
        if (returnType.getDeclaredConstructor().newInstance() instanceof BaseResponse) {
            BaseResponse response = (BaseResponse)returnType.getDeclaredConstructor().newInstance();
            response.setSuccess(false);
            response.setResponseMessage(throwable.toString());
            response.setResponseCode(GlobalConstant.BIZ_ERROR);
            return response;
        }

        LOGGER.error(
            &quot;failed to getFailedResponse , returnType (&quot; + returnType + &quot;) is not instanceof BaseResponse&quot;);
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上代码，和前面的切面有点类似，主要是定义了一个切面，会对所有标注@Facade的方法进行统一处理，即在开始方法调用前进行参数校验，一旦校验失败，则返回一个固定的失败的Response，特别需要注意的是，这里之所以可以返回一个固定的BaseResponse，是因为我们会要求我们的所有对外提供的接口的response必须继承BaseResponse类，这个类里面会定义一些默认的参数，如错误码等。&lt;/p&gt;
&lt;p&gt;之后，只需要对需要参数校验的方法增加对应注解即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Facade
public TestResponse query(User user) {

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，有了以上注解和切面，我们就可以对所有的对外方法做统一的控制了。&lt;/p&gt;
&lt;p&gt;其实，以上这个facadeAspect我省略了很多东西，我们真正使用的那个切面，不仅仅做了参数检查，还可以做很多其他事情。比如异常的统一处理、错误码的统一转换、记录方法执行时长、记录方法的入参出参等等。&lt;/p&gt;
&lt;p&gt;总之，使用切面+自定义注解，我们可以统一做很多事情。除了以上的这几个场景，我们还有很多相似的用法，比如：&lt;/p&gt;
&lt;p&gt;统一的缓存处理。如某些操作需要在操作前查缓存、操作后更新缓存。这种就可以通过自定义注解+切面的方式统一处理。&lt;/p&gt;
&lt;p&gt;代码其实都差不多，思路也比较简单，就是通过自定义注解来标注需要被切面处理的累或者方法，然后在切面中对方法的执行过程进行干预，比如在执行前或者执行后做一些特殊的操作。&lt;/p&gt;
&lt;p&gt;使用这种方式可以大大减少重复代码，大大提升代码的优雅性，方便我们使用。&lt;/p&gt;
&lt;p&gt;但是同时也不能过度使用，因为注解看似简单，但是其实内部有很多逻辑是容易被忽略的。就像我之前写过一篇《&lt;a href=&quot;https://www.hollischuang.com/archives/5608&quot;&gt;Spring官方都推荐使用的@Transactional事务，为啥我不建议使用！&lt;/a&gt;》中提到的观点一样，无脑的使用切面和注解，可能会引入一些不必要的问题。&lt;/p&gt;
&lt;p&gt;不管怎么说，自定义注解却是是一个很好的发明，可以减少很多重复代码。快快在你的项目中用起来吧。&lt;/p&gt;
&lt;center&gt;&lt;b&gt;(全文完)&lt;/b&gt;&lt;/center&gt;&lt;hr/&gt;&lt;center&gt;&lt;b&gt;扫描二维码，关注作者微信公众号&lt;/b&gt;&lt;/center&gt;&lt;img src=&quot;http://www.hollischuang.com/wp-content/uploads/2019/04/二维码.png&quot;/&gt;
&lt;/article&gt;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>21f5f300661b3d2ab73ed9a9b1979ee4</guid>
<title>技术总监 7 年总结，如何进行正确的沟通？</title>
<link>https://toutiao.io/k/t68u47i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;有很粉丝私信我，问我要怎样地和领导、同事沟通？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;444&quot; data-backw=&quot;525&quot; data-ratio=&quot;0.8457142857142858&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4XQ0RVoHjpyXJu62K5R1xia1ZhuUGmgBULjLaoiccsqqzPudoEiciaoHp2PTC9YxicrZDdCKNMvdl826BPoqDy55baw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;525&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为在工作中，如何正确的沟通，是非常重要的。例如下面这个例子：&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;199&quot; data-backw=&quot;507&quot; data-ratio=&quot;0.39250493096646943&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4XQ0RVoHjpyXJu62K5R1xia1ZhuUGmgBUxGrOkdZo5yibrafyL58ZUxicA7dBwXIpKibwuvkDnoZPMVPTgrHteibV7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;507&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;这种沟通方式，应该不用五个来回，就能打起来了。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这篇文章我想给大家分享几个正确沟通的技巧，不管你是主管还是下属，都能适用。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;丢掉自我为中心&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;不要反问&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;沟通是一种语言的表达。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;而表达背后其实反映的是一个人的思考方式。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有些人说话喜欢用反问的方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;反问，也是一剂沟通的毒药。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你为什么会不知道呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你难道不懂吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你为什么不这样做？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样的问题，其实已经把你的建议藏在了问题中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;这不是提问，这是把别人强行拉入到你的价值观念和判断体系，让人很不舒服。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当别人启动防御机制时，距离吵架就不远了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当嘴仗开始时，距离答案就更远了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;换位思考&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有些人的说话的方式是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我说得这么明白，你怎么就是听不懂呢！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我对你一片好心，你居然一点都不领情！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我当然问心无愧，你应该好好反思自己！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些话语背后的模式，其实都暗藏着另一句话：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我没有错。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我苦口婆心，我勤勤恳恳，我任劳任怨，我没有错，都是别人的错。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种以自我为中心的沟通，应该戒掉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;别人为什么不明白？不是别人不明白，而是你没有讲明白。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你应该这么说会比较好：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“我讲的足够清楚吗？”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这句话的潜台词就是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;”如果没有讲清楚是我的责任，我的问题“&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这句话听起来会非常的舒服，没有很强的攻击性，情绪自然会好很多了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个人会沟通，会说话，不仅仅是能清晰表达自己的意思，更是能让对方产生好的情绪。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—&lt;/span&gt;&lt;span&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;保持谦虚&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在公司内，我们扮演者多个角色，有时候我们是下属，有时候我们是上级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你的下属可能会满心欢喜的完成了任务，告知你任务完成的喜讯。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你的同事遇到问题，需要寻求你的帮助，满怀期待你的慷慨。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;很多老板都会冷冷冰冰的回了一句：“嗯，好”&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这句话是什么意思？背后的意思是啥？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实是想说，这点问题还需要我去帮你解决，这点任务完成了有什么好开心的，有什么难度吗？还有一点就是，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;“我现在真的很忙，不要来浪费我时间”&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;聪明很多人在心中都有一个 高大的ego，一个深深的自我，始终想和全世界证明自己的聪明，并且想尽一切办法告诉别人，我很聪明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以请不要这么简单回复，尽量保持谦虚的态度&lt;/span&gt;&lt;span&gt;&lt;strong&gt;“真棒，加油！”&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;or&lt;/span&gt;&lt;strong&gt;&lt;span&gt;“好的，请稍等，我这还需要几分钟”&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;既简单、谦虚，又不是礼貌。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—&lt;/span&gt;&lt;span&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;黄金思维&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;黄金思维有三个层次——&lt;/span&gt;&lt;span&gt;&lt;strong&gt;why、how、what&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;做任何事情都包含了这个黄金思维的三个层次。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;沟通是一种表达方式，当然也不例外。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们在沟通的时候，往往只可能关注一个点，what——就是干什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;我们经常忽略了
why，为什么要做这件事，做这件事情的目的，有何价值。以及忽略了 how，如何做这件事。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此在职场沟通的时候，每当布置一个
what，你都要下意识地反应，前面还有一个大大的 why，后面还有一个大大的 how。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4XQ0RVoHjpyXJu62K5R1xia1ZhuUGmgBUT21hEgxgK2f2MBtk1NaE73wxaD4ZZChiacKFiczTTdDIuVQaH1ZAibHgQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是领导，把你的想法告诉你的下属，为什么要做这件事。没有任何一个人，希望在充满困惑的环境中工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图中，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;普通员工的思维模式，就是大众模式从外向内，从清晰到模糊。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;领导需要拥有&lt;/span&gt;非&lt;span&gt;凡模式，从内向外，从模糊到清晰。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;黄金思维，这几乎是职场沟通最好的思维方式了。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—&lt;/span&gt;&lt;span&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;金子塔原则&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在工作中，不可避免的要向领导汇报。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同样一件事，有的人三句话就能讲得清楚明白，而有些人半个小时，还没说到重点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;汇报工作的时候，有的人5页ppt就能说服对方，要点就能把握，有的人，写了几十页，却被人问想表达什么。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;金字塔原则可以帮助到汇报困难户。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基本结构是：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;结论先行，以上统下，归类分组，逻辑递进。先重要后次要，先总结后具体，先框架后细节，先结论后原因，先结果后过程，先论点后论据&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如：老板，我这个方案我觉得最优，第一，xxx，第二x，xxxx，第三xxxx。具体方案如下…。计划需要xx天，领导你觉得呢？&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个方案给到领导，有理有据、重点突出、思路清晰、层次分明、简单易懂，让领导有兴趣，能理解，记得住。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总之两个字—&lt;/span&gt;&lt;span&gt;&lt;strong&gt;—满意！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—&lt;/span&gt;&lt;span&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;信息传递&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;清楚了，就去干吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你以为这样就行了吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不行，没有deadline限制，没有清晰的目标时间限制，很容易拖延&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个时候，常常会设置一个“最后期限”（Deadline）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主动的提出deadline。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你以为最后deadline一天提交就行了吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然不行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;deadline是最低要求，最好在这之前就完成。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了保持项目、任务的良性进展，需要时刻保持信息的畅通。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就是主动的汇报自己的工作进展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;让领导知道你正在干什么？干到什么程度了。有什么问题？需要什么资源？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是领导，每天能看到下属每天反馈进展，那种掌控的成就感，油然而生。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以在deadline之前，保持和领导的信息交流，这最好的沟通方式。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—&lt;/span&gt;&lt;span&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;最后的总结&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;沟通是每一个技术人绕不开的技能，“别管我，我只想一个人安静写代码！”，这是不存在的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术人大多数情况下并非是和计算机打交道而是人，本身写的代码就是给人看的。想要成为好的开发人员，领导心里的能力者，一定要学会正确的沟通。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面的5点建议，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;丢掉自我为中心、保持谦虚、黄金思维、金字塔原则、信息传递，&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;希望大家职业生涯中的&lt;span&gt;能够&lt;/span&gt;沟通得更加优雅、从容。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__134&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__134&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__134&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;推荐阅读（干货）&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247484001&amp;amp;idx=1&amp;amp;sn=e5aafcb7ab8bad8b7439d4f8587d2f1f&amp;amp;chksm=cf209773f8571e659ca9fb146a49809b321ea2e83cf7d10248e7c94196b3eacb5b7d8f8142fc&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;程序员如何管理你的上级领导？&lt;/a&gt;&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483962&amp;amp;idx=1&amp;amp;sn=cc73b3d2124fc23d89ccc4c5c612d18c&amp;amp;chksm=cf209728f8571e3e4345d4737029960d1e5c3f7b005fd4c8545a1ac283c086a73e4ca914ede0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;程序员如何打造个人品牌？&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483954&amp;amp;idx=1&amp;amp;sn=4d122f3d2330254f5a5ecca3876c46a8&amp;amp;chksm=cf209720f8571e368d1123e185b30e930c83463496b0a9d8b76aec9ebcffeeb1c3f5155cb1dc&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;程序员你应该勇敢说不&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483946&amp;amp;idx=1&amp;amp;sn=7629654c4acf6bd1c5f53639707a9c61&amp;amp;chksm=cf209738f8571e2e66764576dfa494bec92059058c9f2609391ede8c40bc010c167b2d535820&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;聊一聊 软件系统中的“热力学第二定律”&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483907&amp;amp;idx=1&amp;amp;sn=a170a555f571d4cbd2c4136b8ed57eff&amp;amp;chksm=cf209711f8571e07d674b4582488fe61e4e64d7179be7cb5ca5574edeee36f207d0cf7b0ea52&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;谈一谈程序员的职业发展路线&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483891&amp;amp;idx=1&amp;amp;sn=24cd8a6abf3b0681179dc5e5e846e0ba&amp;amp;chksm=cf2094e1f8571df70c1e37be4f3a3a81df0165e5e3359006a16ed64730fe9e5cc7fe97c37289&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员进阶必备能力——晋升之道&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;程序员进阶必备能力——晋升之道&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483792&amp;amp;idx=1&amp;amp;sn=f30fe58e4ea99d647b1853eca6bd5a6a&amp;amp;chksm=cf209482f8571d94e7dd372851397f98a838e84a9fbea9299337e5ee2301084228a4f57d315c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;送给刚毕业的程序员——7点建议&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;送给刚毕业的程序员——7点建议&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483826&amp;amp;idx=1&amp;amp;sn=c82601363825ba261b88c0198ee3a91d&amp;amp;chksm=cf2094a0f8571db6b69603ba66b1ac62ef588fc3668ffdcddd4ca2fa62713eb8c614e279290b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员进阶技术专家必备能力——深度思考&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;程序员进阶技术专家必备能力——深度思考&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483879&amp;amp;idx=1&amp;amp;sn=96067a68ebe584002a64dc0e21edb21d&amp;amp;chksm=cf2094f5f8571de38333e04d03d1dd60a56574d08d62324ae65bc73a3bc414e6d6e5e9d17121&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员如何选择一家好公司&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;程序员如何选择一家好公司&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__136&quot;&gt;&lt;br data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__137&quot;&gt;&lt;strong&gt;&lt;span data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(49, 49, 49)&quot; data-style=&quot;max-width: 100%; color: rgb(49, 49, 49); font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 15px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot;&gt;觉得不错，记得关注、转发和在看！多年经验分享，实属不易，感谢支持！&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;hr data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;white-space: normal; max-width: 100%; letter-spacing: 0.544px; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; background-color: rgb(255, 255, 255); border-style: solid; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: rgba(0, 0, 0, 0.098); transform-origin: 0px 0px 0px; transform: scale(1, 0.5); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__139&quot;/&gt;&lt;p data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;white-space: normal; max-width: 100%; min-height: 1em; letter-spacing: 0.544px; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__140&quot;&gt;&lt;br data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__141&quot;&gt;&lt;span&gt;博主是一位物联网大厂技术总监，从业7年。从软件开发、高级软件开发、技术经理再到技术总监，分享职业发展、技术管理、职场晋升、技术成长等个人多年经验和心得。一起成长！有问题可以加我微信交流&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__145&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;pointersss&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__146&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;&lt;span data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;如果你有技术成长的瓶颈、对未来迷茫、关注我，帮你答疑解惑！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;&lt;span data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4XQ0RVoHjpx4fJoOHia8o9pebg6ffoYJ3SueWibyfyfUpyBqtcmMwSUg5DrJ3bXLPnhrJya3Xjk0JHkJ9uJu7IrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;1&quot; data-w=&quot;430&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-qa class=&quot;js_uneditable custom_select_card qa_iframe&quot; data-pluginname=&quot;insertquestion&quot; data-id=&quot;1590857283729752067&quot; data-bizuin=&quot;Mzg3NzUxMTgwNQ==&quot; data-title=&quot;对你们有帮助吗？&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>27bcb6ebfbce79226aa05757afec9371</guid>
<title>52 图初探 Linux 通用知识</title>
<link>https://toutiao.io/k/mgktqso</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote&gt;&lt;p&gt;噗。。为啥不是面试题了，封面船去哪里了？要开好船，先回到我们的初心---Linux，这篇文章是Linux的超级基础且经常用到的内容，不多说，直接肝！可以直接拉到文末点个赞！当然，如果需要思维导图可编辑版，私信我就好了。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8307533539731682&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEZ5JwMADzAZBJDr96jQYKHT49ZutA737ZKNCuvxKkVwHhL3ibJfJkFicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;969&quot; title=&quot;Linux软件安装&quot;/&gt;&lt;figcaption&gt;Linux软件安装&lt;/figcaption&gt;&lt;/figure&gt;&lt;hr/&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7429378531073446&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEr7M5ibOnH7SAzLbprMicCsz1fX8xESoYzVLow8456J4pwoSRfueHl25g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1062&quot; title=&quot;Linux排查问题套路&quot;/&gt;&lt;figcaption&gt;Linux排查问题套路&lt;/figcaption&gt;&lt;/figure&gt;&lt;hr/&gt;&lt;figure&gt;&lt;img data-ratio=&quot;4.297663903541824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEdOibI4fAffOmeZ7bRbC999Ybe16OXVia4K5p8qxCXbNFBMcdrYd5qA8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1327&quot; title=&quot;Linux命令详解&quot;/&gt;&lt;figcaption&gt;Linux命令详解&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;一 Linux通用知识&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;说到操作系统，如果读大学的时候是计算机专业，那肯定就会上这门课，我猜测当时的你们想法是这样的&lt;/p&gt;&lt;/blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;上大学使用的都是Windows系统，界面友好，上手快，习惯性的点点点操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大部分的课程在windows中操作，比如C++用的Vistual Studio，学数据库的SQL Server&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大学中的操作系统更加偏向理论研究，至于到底是怎么运作的可能懵懵懂懂&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;知道上了研究生到了实验室，我发现实验室的怎么都是对着一个窗口操作，瞬间觉得以前的计算机知识白学了，于是开启了Linux之路。&lt;/p&gt;&lt;p&gt;其实大部分的系统，团购，打车，快递都部署在服务端，其中都包含Linux，什么云计算，虚拟化，大数据等也是基于Linux，那为啥在大学里都是windows？&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.9833333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEzKgsrvWezIH7rg4U9KynIYafCJRWiaCzibcXMwzzTmUibYZ00dyicQsgkA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;240&quot; title=&quot;在这里插入图片描述&quot;/&gt;&lt;figcaption&gt;咦&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;为什么说了解Linux的生态，会让你学到更多的新技术?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们要知道很多的大牛通过Linux来开发各种如那件，数据库Mysql，kafka，Spark等技术都会默认提供Linux的安装运维手册，所以尽快的进入Linux的世界对于个人的进步和职业发展都是非常有好处的&lt;/p&gt;&lt;p&gt;每当我们买了手机，买了电脑，上手就可以用，这是因为预装了操作系统。所以呀，那有什么岁月静好，知识有人帮我们负重前行了，操作系统就是这样一个角色。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;那么操作系统帮助我们做了哪些事儿呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这几个任何一个操作，基本上都覆盖了操作系统的所有功能，那我来认识熟悉而默认的操作系统&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1 vmvare&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;虚拟机是什么？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;虚拟机通过软件来模拟具有完整硬件系统功能的，运行在完全隔离的完整计算机系统。每个虚拟计算机可以独立运行并安装各种软件和应用&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7827868852459017&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEq13WzGic61pDSLQ1SVLBENGZiaburZy8ficyPjOOpf5OxpsC4PsF32NPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;488&quot; title=&quot;双击VMVARE&quot;/&gt;&lt;figcaption&gt;双击VMVARE&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7841140529531568&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEMlX7GvP0h56Koc5ZwubibDJlTicQT3VEJC4xtc9JHibicPeC8TFN1zMmbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;491&quot; title=&quot;接受许可进行下一步&quot;/&gt;&lt;figcaption&gt;接受许可进行下一步&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7914110429447853&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MENcRqaywXjOsKEtdosibBlTOiaibgpkcAm0fg9o09IcYicpZicbOhTS44MlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;489&quot; title=&quot;自定义路径&quot;/&gt;&lt;figcaption&gt;自定义路径&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7820773930753564&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6ME3kp9pib7RaDFTEtuSzMs7hiaKmHKd1WciceEfEVfUicWOy6QVYk2zd3ejg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;491&quot; title=&quot;设置用户体验&quot;/&gt;&lt;figcaption&gt;设置用户体验&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7728194726166329&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MERlsOM6icicAicGC3Gq49WibyENRhRibNJhUX2SyCL8G3r1JYDgyULDMicAxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;493&quot; title=&quot;创建快捷方式&quot;/&gt;&lt;figcaption&gt;创建快捷方式&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7874493927125507&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6ME6zNAHD0tZFasMWSggL38IcPNaWJst17xQMh3wSgRNn0AnfG1lHEBBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;494&quot; title=&quot;输入许可证密钥&quot;/&gt;&lt;figcaption&gt;输入许可证密钥&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5671175858480749&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MERsef2sOCiasCqPWPIDCJYibF2SVTkTia4J2E8icYBPHPY3kdA1x95UTNKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;961&quot; title=&quot;打开vmvare&quot;/&gt;&lt;figcaption&gt;打开vmvare&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.56875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEH8UTLR0sIwtqssrL2hDJbEbHYq2RHU3Oia2F2oUicqnbL0rajsRwMBhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot; title=&quot;新建虚拟机&quot;/&gt;&lt;figcaption&gt;新建虚拟机&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.86&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6ME1SbClmiaiag4CA0bPcnUxbofEohzCbSBOATrqO26NomWVoicFibrkj8dgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; title=&quot;选择自定义&quot;/&gt;&lt;figcaption&gt;选择自定义&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8476953907815631&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEZhibuQ8Jxfa6oaU9uAQoYdnVNmS3A2S9CMQvpVdwsuE5qL9GvwziaJIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;499&quot; title=&quot;选择下一步&quot;/&gt;&lt;figcaption&gt;选择下一步&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8505050505050505&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEbbBOCwicI6N8Q8Bm4wYUyLSNPH7Y2iaycwU2nt25a68YhQ4mggb91VpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;495&quot; title=&quot;选择稍后安装操作系统&quot;/&gt;&lt;figcaption&gt;选择稍后安装操作系统&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.846&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEBMGke1wU7ibNn0jn1eZOibLOhdD4Gic2hcUN4dKebnJYWVttSaQ2eokHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; title=&quot;命名虚拟机&quot;/&gt;&lt;figcaption&gt;命名虚拟机&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.856&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEboB9liaANwiaUVeAwpEbQibhkwoeVQKHC98dJsLMia4RiaRiaxY51egazKtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; title=&quot;处理器核心数分配&quot;/&gt;&lt;figcaption&gt;处理器核心数分配&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;虚拟内存分配：注意内存分配不能大于主机内存&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8585858585858586&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6ME3BkoWUkpxSQhhrRiavAX29OQ7YaLiaoqicy3vB40qWfXNiaXiaAZXHjiclmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;495&quot; title=&quot;虚拟内存分配&quot;/&gt;&lt;figcaption&gt;虚拟内存分配&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;设置虚拟机网络得类型，这里选择NAT&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8412698412698413&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEzrvgibLm6TFFZT3qXoenbWzsqicD7VsBxAd9MFJPo2icc3R8ibhHA8eNrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;504&quot; title=&quot;网络类型暂设为NAT&quot;/&gt;&lt;figcaption&gt;网络类型暂设为NAT&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;IO控制器选择，选择LSILogic&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;磁盘类型选择SCSI即可&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8577154308617234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6ME3KG4ibKMbJCadZmYkkDV6YYUXXoJcv3gLsSM3CY425f1PSuywKuicKYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;499&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8475609756097561&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEAKw66kib3rgCfeld8iabI67k5U2AibEb1GCMHUlqrTup1dA4QIGCXF62Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;492&quot; title=&quot;创建新虚拟磁盘&quot;/&gt;&lt;figcaption&gt;创建新虚拟磁盘&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8528225806451613&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEiaQSKEq4WKgrhP8X7xd8bPLqIvK40NNPFAbZW3vYS1wWBodkstSmxjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;496&quot; title=&quot;指定磁盘文件&quot;/&gt;&lt;figcaption&gt;指定磁盘文件&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8473895582329317&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEjkicVhPoleqNJqrFgibS5CGd3bCODTIzhEbaiaIpG0qsXGicbnu7g5W7QA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;498&quot; title=&quot;选择自定义硬件&quot;/&gt;&lt;figcaption&gt;选择自定义硬件&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.48659626320064986&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEdXUWC2mlmtT0GhcBa6pqfDiau2r22iaiavrX8dfARZRfefABd9PZ8ay0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1231&quot; title=&quot;导入镜像&quot;/&gt;&lt;figcaption&gt;导入镜像&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.848605577689243&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEAGiaEPlFEByrvuIUHD1YUkicCmxEE09caAKqMxj7pm5QPTvVkZ9WffdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;502&quot; title=&quot;完成&quot;/&gt;&lt;figcaption&gt;完成&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5669781931464174&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEFBAiaxa9gNuCYfT6qHCIhZP0JT0cb1TjkU2cjKwU0HFWp3Rcd05u46w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;963&quot; title=&quot;开启虚拟机&quot;/&gt;&lt;figcaption&gt;开启虚拟机&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7616209773539928&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MELqtAZduHu1wSsmNGBQNqClmsfyr7NsN2XABDTnTzr2u5eEob6zjOTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;839&quot; title=&quot;install centos7&quot;/&gt;&lt;figcaption&gt;install centos7&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;选择软件选择最小安装，选择语言&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.788293897882939&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEWjVtK0icbbjUB6030SWsKpbfibRGmRz4TRD2ngYj9AnNA17dCHG6ShDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;803&quot; title=&quot;选择最小化安装&quot;/&gt;&lt;figcaption&gt;选择最小化安装&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;软件安装&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7071339173967459&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEV7icFIBGFicap8AX4W35V7kD08sgTia9ve5T4pkLQRNiarJDyJXYh3Ygnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;799&quot; title=&quot;软件安装&quot;/&gt;&lt;figcaption&gt;软件安装&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7277289836888331&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEJk4XEEnMNL9c0Wud0JPZZMDdGHhyxwxV7sibZPFiaFVWRhhEglwmfO0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;797&quot; title=&quot;选择计算节点&quot;/&gt;&lt;figcaption&gt;选择计算节点&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7152917505030181&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEDdgx7TZcO1HEQSWcruw44jsNCqrOLa1eFqxnToEicJiboGI1Gw1SxXVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot; title=&quot;开始安装&quot;/&gt;&lt;figcaption&gt;开始安装&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;设置root密码，点击完成配置&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.16689655172413792&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEwbe3j36vlApubKveuy9qVtHhicwTzSQM5cTp9MlmHACYvopnuzPHiatg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;725&quot; title=&quot;设置root密码&quot;/&gt;&lt;figcaption&gt;设置root密码&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;2 进行网络配置&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;现在我们的centos还是个空壳子，如果我们需要访问外网，则需要进一步配置一波&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;vi /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;DEVICE=eth0 #设备名称，可根据ifcofnig命令查看到。&lt;br/&gt;BOOTPROTO=dhcp #连接方式，dhcp会自动分配地址，此时不需要在下面设置ip和网关&lt;br/&gt;HWADDR=00:0C:29:AD:66:9F #硬件地址，可根据ifcofnig命令查看到。&lt;br/&gt;ONBOOT=yes #yes表示启动就执行该配置，需要改为yes&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6680272108843538&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEc96nsicjrOJJsHHicicr6f8JK63tEyau3qSFMzDW8hKT5rYoG0DdicTic4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;735&quot; title=&quot;网络检测&quot;/&gt;&lt;figcaption&gt;网络检测&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;3 安装xshell&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;我们已经完成了安装vmvare并导入了centos，那么我们如何去玩儿这个看似很牛皮的玩意？直接上手？不习惯吧，那我们用个远程工具连连&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Xshell 是一个强大的安全终端模拟软件，Xshell 可以在 Windows 界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。除此之外，其还有丰富的外观配色方案以及样式选择。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;4 基本命令的使用&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;命令太多，必须要全部记忆，但是要学会如何查每个命令的参数。我画了个思维导图可以当作小字典查看，下面列出可能我们使用频率会更高的命令&lt;/p&gt;&lt;/blockquote&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;执行命令&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;cd ~&lt;/td&gt;&lt;td&gt;切换到登录用户的主目录即/home/用户名&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cd /&lt;/td&gt;&lt;td&gt;进入根目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cd /home/lj&lt;/td&gt;&lt;td&gt;将/home/LJ作为当前的目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cd ..&lt;/td&gt;&lt;td&gt;返回到上一层目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cd -&lt;/td&gt;&lt;td&gt;回到上次所在的目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cd ../../&lt;/td&gt;&lt;td&gt;去上上层目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ls&lt;/td&gt;&lt;td&gt;查看当前目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ls -la&lt;/td&gt;&lt;td&gt;查看当前目录的文件信息 包含了隐藏文件&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;pwd&lt;/td&gt;&lt;td&gt;查看当前目录的绝对路径&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cp /目录/1.txt /目录/&lt;/td&gt;&lt;td&gt;复制&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;rm&lt;/td&gt;&lt;td&gt;删除&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;q！&lt;/td&gt;&lt;td&gt;不保存文件退出&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;wq！&lt;/td&gt;&lt;td&gt;保存退出&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;hostname&lt;/td&gt;&lt;td&gt;查看当前主机名&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ifconfig&lt;/td&gt;&lt;td&gt;查看网卡相关信息&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;firewall-cmd --state&lt;/td&gt;&lt;td&gt;centos7查看卡其关闭防火墙状态&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;&lt;span&gt;5 用户管理&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;刚才说了可以创建自己的用户，那么怎么创建自己的用户呢?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;添加用户&lt;/p&gt;&lt;pre&gt;&lt;code&gt;useradd -d /home/lanj -m lanj&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更改密码&lt;/p&gt;&lt;pre&gt;&lt;code&gt;passwd lanj&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;系统有很多的用户，怎么进行用户的切换？&lt;/p&gt;&lt;pre&gt;&lt;code&gt;su -lanj&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;su -root&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;如果需要&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;用户之间的切换使用su命令实现。root用户可以无需输入密码切换到lj用户，如果普通用户lj切换到root用户则需要输入密码，我们看看&lt;/p&gt;&lt;p&gt;su -lj&lt;/p&gt;&lt;p&gt;su -root&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;如何切换路径，绝对路径和相对路径&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;6 软件的安装方法&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;在Linux安装相关的工具分为三种方式，分别为源码安装，RPM包安装以及YUM安装方式&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;源码安装方式&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;开源软件都会提供源码下载的方式，对于源代码安装方式的好处即可以定制软件功能，安装需要的模块，不需要的模块可以屏蔽，方便管理，卸载等。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对于源码安装的步骤如下&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;一般下载下来源码以后都会存在一个Readme文件，首先应该仔细阅读这个文件，可能有很多需要修复的以前人家遇见的问题都会在上面做记录，以免入坑不回头&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这里会使用make工具，make工具就会通过makefile文件来实现。makefile文件是一种按照某种语法来编写且定义了各个文件的依赖关系。&lt;/p&gt;&lt;p&gt;在Linux中，习惯使用Makefile替代makefile，当用户执行configure后，就会在当前目录生成这个makefile文件，然后用户输入make就开始运行。我们看看Makefile是怎么个有样子&lt;/p&gt;&lt;pre&gt;&lt;code&gt;edit : main.o kbd.o command.o display.o \&lt;br/&gt;        insert.o search.o files.o utils.o       /*注释:如果后面这些.o文件比edit可执行文件新,那么才会去执行下面这句命令*/&lt;br/&gt;    cc -o edit main.o kbd.o command.o display.o \&lt;br/&gt;        insert.o search.o files.o utils.o&lt;br/&gt;&lt;br/&gt;main.o : main.c defs.h&lt;br/&gt;    cc -c main.c&lt;br/&gt;kbd.o : kbd.c defs.h command.h&lt;br/&gt;    cc -c kbd.c&lt;br/&gt;command.o : command.c defs.h command.h&lt;br/&gt;    cc -c command.c&lt;br/&gt;display.o : display.c defs.h buffer.h&lt;br/&gt;    cc -c display.c&lt;br/&gt;insert.o : insert.c defs.h buffer.h&lt;br/&gt;    cc -c insert.c&lt;br/&gt;search.o : search.c defs.h buffer.h&lt;br/&gt;    cc -c search.c&lt;br/&gt;files.o : files.c defs.h buffer.h command.h&lt;br/&gt;    cc -c files.c&lt;br/&gt;utils.o : utils.c defs.h&lt;br/&gt;    cc -c utils.c&lt;br/&gt;clean :&lt;br/&gt;    rm edit main.o kbd.o command.o display.o \&lt;br/&gt;        insert.o search.o files.o utils.o&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;make和make install的关系&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当我们输入make命令过后即进入了编译阶段，编译时间根据软件的程序规模大小以及硬件配置有关，当输入make install就会开始安装软件，我们可以指定安装目录也可以不指定，系统将给你默认指定目录为/user/local，这样安装完毕。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;RPM安装方式&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;RPM是Red Hat公司开发出来的Linux下的软件包管理工具。这些以.rpm结尾的包包含了已经编译好的二进制可执行文件，一句话即将源代码进行编译，安装，然后封装为RPM包&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;优点即安装简单，方便，因为已经编译完成，安装只是用来验证和解压过程，缺点也比较明显，过于依赖于操作系统，要求RPM包的安装环境必须和RPM封装时的环境保持一致，&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;RPM包是怎么个样子？&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;server-2.1.0-22.I386.rpm&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中：server为如那件的名称&lt;/p&gt;&lt;p&gt;2.1.0：软件的版本号&lt;/p&gt;&lt;p&gt;22：软件更新发行的次数&lt;/p&gt;&lt;p&gt;i386:适合硬件发行的次数&lt;/p&gt;&lt;p&gt;.rpm:rpm软件包的标识&lt;/p&gt;&lt;p&gt;&lt;strong&gt;YUM安装方式&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rpm -qa | grep yum&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;rpm -ivh yum-*.noarch.rpm&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;YUM有哪些特点呢&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;推荐个不错的yum源&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;是一个针对红帽企业版Linux及衍生发行版的一个高质量附加软件包项目。网址：http://fedoraproject.org/wiki/EPEL/zh-cn&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;这是一个第三方软件仓库，被centos社区认为是一个最安全最稳定的一个软件仓库&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;6 shell&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;大部分情况都是Linux操作系统，那么熟悉命令的用法以外，熟悉使用shell脚本能介绍不少时间&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;shell是什么&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“ 平时经常在Linux操作系统中使用各种命令，比如查看当前的目录文件，我们会使用&quot;ls&quot;或者&quot;ls -l&quot;，这些字符串参数实际上会被&quot;某段程序&quot;执行并启动它。这个负责将用户输入的字符串转换为需要执行程序的东西叫做&quot;shell&quot;。即帮用户更方便使用操作系统接口的“壳”。同样的壳还有当我输入Maven+相关参数的时候是不是就会去执行相应的功能，我们驶入sql语句的时候，数据库引擎是不是也会各种调用，一样的道理&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;尝试编写第一个shell&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;vim创建打开一个文件，扩展名为.sh。如下所示&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash #告诉系统使用什么解析器&lt;/span&gt;&lt;br/&gt;echo &lt;span&gt;&quot;Hello xiaolan !&quot;&lt;/span&gt; &lt;span&gt;# echo进行输出&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt; chmod +x ./hello.sh ./hello.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt; /bin/sh hello.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;变量&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;变量名和等号之间不能有空格&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;定义变量注意事项&lt;/p&gt;&lt;p&gt;&lt;strong&gt;变量使用&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;使用变量(使用变量的过程中，最好加上花括号)，只需要在变量前面加上美元符号即可&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;James=&lt;span&gt;&quot;小皇帝&quot;&lt;/span&gt;&lt;br/&gt;echo $James&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;只读变量&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;使用readonly将变量定义为只读，只读意味着不能改变&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;James=&lt;span&gt;&quot;小皇帝&quot;&lt;/span&gt;&lt;br/&gt;readonly James&lt;br/&gt;James=&lt;span&gt;&quot;登哥&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除变量&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;使用unset删除变量 变量删除以后不能再次使用，且不能删除只读变量&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;James=&lt;span&gt;&quot;小皇帝&quot;&lt;/span&gt;&lt;br/&gt;unset James&lt;br/&gt;echo $James &lt;span&gt;#不会有任何输出&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;变量类型&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;仅当前shell可用&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;所有程序都能访问环境变量&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;通过一部分环境变量和shell变量保证shell的正常运行&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;字符串&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;使用字符串的过程中，既可以用双引号也可以用单引号，也可以不用&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;单引号内容原样输出，不能包含变量，且不能出现单独单引号&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;可以出现转义字符&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;James=&lt;span&gt;&quot;小皇帝&quot;&lt;/span&gt;&lt;br/&gt;str=&lt;span&gt;&quot;\&quot;$ James\&quot;! oh my gad \n &quot;&lt;/span&gt;&lt;br/&gt;echo -e $str &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;获取字符串长度&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;使用#&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;string=&lt;span&gt;&quot;qwert&quot;&lt;/span&gt;&lt;br/&gt;echo $(&lt;span&gt;#string)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 提取子字符串&lt;/span&gt;&lt;br/&gt;echo $(string:&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;#查找字符串&lt;/span&gt;&lt;br/&gt;echo &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;支持以为数组&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;定义数组&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;数组元素使用“空格”隔开&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;array=(value1,value2,value3)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读取数组&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;value1&lt;/span&gt;=&lt;span&gt;${array[0]}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用@输出数组所有元素&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;${array[@]}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取数组中所有元素以及数组长度&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#! /bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author：xiaolan&lt;/span&gt;&lt;br/&gt;array[&lt;span&gt;0&lt;/span&gt;]=a&lt;br/&gt;array[&lt;span&gt;1&lt;/span&gt;]=b&lt;br/&gt;array[&lt;span&gt;3&lt;/span&gt;]=c&lt;br/&gt;&lt;br/&gt;echo “数组的元素为：${array[*]}”&lt;br/&gt;echo “数组的元素为：${array[@]}”&lt;br/&gt;echo “数组的个数为：${&lt;span&gt;#array[*]}”&lt;/span&gt;&lt;br/&gt;echo “数组的个数为：${&lt;span&gt;#array[@]}”&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./array.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2585669781931464&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEdIPJ8dbSEI8NFwhVicbh7bbeIiafn2q3aVicUEksLBTS3VVm0EicJgcERA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;321&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;result&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;注释&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;单行注释&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;使用#开头的行为注释，会被解释器忽略&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;多行注释&lt;/p&gt;&lt;p&gt;&lt;strong&gt;shell传递参数&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;在执行&lt;/strong&gt;shell的时候，命令行指定参数，如下所示&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;James=&lt;span&gt;&quot;小皇帝&quot;&lt;/span&gt;&lt;br/&gt;echo &lt;span&gt;&quot;执行的文件名为:$0&quot;&lt;/span&gt;&lt;br/&gt;echo &lt;span&gt;&quot;第一个参数为:$1&quot;&lt;/span&gt;&lt;br/&gt;echo &lt;span&gt;&quot;第二个参数为:$2&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;执行&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;./param.sh 1 2&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.19584569732937684&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEQicD6uCdoVLpQ6nj6D7Wj7evxGoSgeDqIHNxqbictfaUPibib825TJVrbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;337&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;result&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;几个特殊字符&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.47474747474747475&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEJCG0yvshIBBcroz7u9iccz46AcrJgWs4T86ElB3Qs2ibYMNO5ib8XE42Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;result&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;案例(partionnal.sh)&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; author:xiaolan&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;echo &quot;-- \$* 演示 ---&quot;&lt;br/&gt;for i in &quot;$*&quot;; do&lt;br/&gt;    echo $i&lt;br/&gt;done&lt;br/&gt;&lt;br/&gt;echo &quot;-- \$@ 演示 ---&quot;&lt;br/&gt;for i in &quot;$@&quot;; do&lt;br/&gt;    echo $i&lt;br/&gt;done&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./demo2.sh 1 2 3&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2852760736196319&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEA0icZsXIvicaKc598iaZeK0UibhHzSBz7R3mErzU3mjEWKJuHBsmpOKLAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;326&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;相同点：都是会引用所有参数&lt;/p&gt;&lt;p&gt;不同点：在使用双引号的时候。如果脚本运行时两个参数为a,b，则&quot;*&quot;等价于&quot;ab&quot;,而&quot;@&quot;等价于&quot;a&quot;,&quot;b&quot;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;echo &lt;span&gt;&quot;-- \$* 演示 ---&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;&quot;$*&quot;&lt;/span&gt;; do&lt;br/&gt;    echo $i&lt;br/&gt;done&lt;br/&gt;&lt;br/&gt;echo &lt;span&gt;&quot;-- \$@ 演示 ---&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;&quot;$@&quot;&lt;/span&gt;; do&lt;br/&gt;    echo $i&lt;br/&gt;done&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8 printf&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;使用printf格式化字符串，同时可以指定字符串宽度和对齐方式，格式如下&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;printf format-string [arguments...]&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;printf &lt;span&gt;&quot;%-8s %-8s %-4s\n&quot;&lt;/span&gt; 姓名 科目 分数  &lt;br/&gt;printf &lt;span&gt;&quot;%-8s %-8s %-4f\n&quot;&lt;/span&gt; 小明 数学 &lt;span&gt;97&lt;/span&gt;&lt;br/&gt;printf &lt;span&gt;&quot;%-8s %-8s %-4f\n&quot;&lt;/span&gt; 小话 语文 &lt;span&gt;89&lt;/span&gt;&lt;br/&gt;printf &lt;span&gt;&quot;%-8s %-8s %-4f\n&quot;&lt;/span&gt; 王三 英语 &lt;span&gt;93&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2669039145907473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEtXRr1va60BAmDNoNCVfDialic0vupIekFn0EbpRX4oXD35s4ldy5EYsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;281&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;9 test&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;shell中的test用于检查某个条件是否成立&lt;/p&gt;&lt;/blockquote&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.2842105263157895&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6ME4m2ice8IQQf2BibcMzdZfK4hDqlqOqMgYe5aHzdf8Dykq4vb3ff5WNSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;190&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;result&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;案例&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;num1=&lt;span&gt;55&lt;/span&gt;&lt;br/&gt;num2=&lt;span&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; test $[num1] -eq $[num2]&lt;br/&gt;then&lt;br/&gt;    echo &lt;span&gt;&#x27;两个数相等！&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;    echo &lt;span&gt;&#x27;两个数不相等！&#x27;&lt;/span&gt;&lt;br/&gt;fi&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.13857677902621723&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEFNWpRfPw885fCXrZkLwJqUjNHlW2ZFNNQV4dmfoNfibcpCVuicXibF4nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;267&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;result&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;字符串比较&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.2748815165876777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEnIyO5qqF4BFibVW494nb1mibXrhvpwlIIqGrbzLo3azj4ic0MoDUibOgjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;211&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;字符串比较&lt;/figcaption&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;num1=&lt;span&gt;&quot;xiaolan&quot;&lt;/span&gt;&lt;br/&gt;num2=&lt;span&gt;&quot;xiaolna&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; test $num1 = $num2&lt;br/&gt;then&lt;br/&gt;    echo &lt;span&gt;&#x27;两个字符串相等!&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;    echo &lt;span&gt;&#x27;两个字符串不相等!&#x27;&lt;/span&gt;&lt;br/&gt;fi&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.1111111111111111&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEX0JjAmaQ8Awl8WQb0YB5sGHNk6mKk73pLHRN9r9l63SvoU5FmQ82fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;270&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;result&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;流程&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;if语句语法格式&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; condition&lt;br/&gt;then&lt;br/&gt;    exec1 &lt;br/&gt;    exec2&lt;br/&gt;    ...&lt;br/&gt;    execN &lt;br/&gt;fi&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果简化为一行&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; [$(ps -ef | grep -c &lt;span&gt;&quot;httpd&quot;&lt;/span&gt;) -gt 1];&lt;span&gt;then&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;true&quot;&lt;/span&gt;;&lt;span&gt;fi&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;if else-if else&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; condition1&lt;br/&gt;then&lt;br/&gt;    exec1&lt;br/&gt;&lt;span&gt;elif&lt;/span&gt; condition2 &lt;br/&gt;then &lt;br/&gt;    exec2&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;    execn&lt;br/&gt;fi&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;案例 判断两数值是否相等&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;a=&lt;span&gt;2&lt;/span&gt;&lt;br/&gt;b=&lt;span&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; [ $a == $b ]&lt;br/&gt;then&lt;br/&gt;   echo &lt;span&gt;&quot;a 等于 b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;elif&lt;/span&gt; [ $a -gt $b ]&lt;br/&gt;then&lt;br/&gt;   echo &lt;span&gt;&quot;a 大于 b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;elif&lt;/span&gt; [ $a -lt $b ]&lt;br/&gt;then&lt;br/&gt;   echo &lt;span&gt;&quot;a 小于 b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;   echo &lt;span&gt;&quot;没有符合的条件&quot;&lt;/span&gt;&lt;br/&gt;fi&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;for循环&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; loop &lt;span&gt;in&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;br/&gt;do&lt;br/&gt;    echo &lt;span&gt;&quot;The value is: $loop&quot;&lt;/span&gt;&lt;br/&gt;done&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;while语句&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“ 通常用于从输入文件不断读取数据&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;while&lt;/span&gt; condition&lt;br/&gt;do&lt;br/&gt;    &lt;span&gt;exec&lt;/span&gt;&lt;br/&gt;done&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;int=&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt;(( $int&amp;lt;=&lt;span&gt;6&lt;/span&gt; ))&lt;br/&gt;do&lt;br/&gt;    echo $int&lt;br/&gt;    let &lt;span&gt;&quot;int++&quot;&lt;/span&gt;&lt;span&gt;# 用于执行一个或者多个&lt;/span&gt;&lt;br/&gt;done&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;无限循环&lt;/p&gt;&lt;pre&gt;&lt;code&gt;while true&lt;br/&gt;do&lt;br/&gt;    exec&lt;br/&gt;done&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;case语句&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;多选择语句。取值后面为单词in，每一个模式以&quot;)&quot;结束。匹配发现取值符合某一模式后，其间所有命令开始执行直至 &quot;;;&quot;。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;echo &lt;span&gt;&#x27;输入 1 到 3 之间的数字:&#x27;&lt;/span&gt;&lt;br/&gt;echo &lt;span&gt;&#x27;你输入的数字为:&#x27;&lt;/span&gt;&lt;br/&gt;read aNum&lt;br/&gt;case $aNum &lt;span&gt;in&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;1&lt;/span&gt;)  echo &lt;span&gt;&#x27;你选择了 1&#x27;&lt;/span&gt;&lt;br/&gt;    ;;&lt;br/&gt;    &lt;span&gt;2&lt;/span&gt;)  echo &lt;span&gt;&#x27;你选择了 2&#x27;&lt;/span&gt;&lt;br/&gt;    ;;&lt;br/&gt;    &lt;span&gt;3&lt;/span&gt;)  echo &lt;span&gt;&#x27;你选择了 3&#x27;&lt;/span&gt;&lt;br/&gt;    ;;&lt;br/&gt;    *)  echo &lt;span&gt;&#x27;你没有输入 1 到 3 之间的数字&#x27;&lt;/span&gt;&lt;br/&gt;    ;;&lt;br/&gt;esac&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输入不同的内容，会有不同的结果，例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;输入 1 到 4 之间的数字:&lt;br/&gt;&lt;span&gt;你输入的数字为:&lt;/span&gt;&lt;br/&gt;3&lt;br/&gt;你选择了 3&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;跳出循环&lt;/p&gt;&lt;p&gt;break&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;break命令允许跳出所有循环&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; :&lt;br/&gt;do&lt;br/&gt;    echo -n &lt;span&gt;&quot;输入 1 到 3 之间的数字:&quot;&lt;/span&gt;&lt;br/&gt;    read aNum&lt;br/&gt;    case $aNum &lt;span&gt;in&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;1&lt;/span&gt;|&lt;span&gt;2&lt;/span&gt;|&lt;span&gt;3&lt;/span&gt;) echo &lt;span&gt;&quot;你输入的数字为 $aNum!&quot;&lt;/span&gt;&lt;br/&gt;        ;;&lt;br/&gt;        *) echo &lt;span&gt;&quot;你输入的数字不是 1 到 3 之间的! 游戏结束&quot;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;&lt;br/&gt;        ;;&lt;br/&gt;    esac&lt;br/&gt;done&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;continue&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;跳出当次循环&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; :&lt;br/&gt;do&lt;br/&gt;    echo -n &lt;span&gt;&quot;输入 1 到 3 之间的数字: &quot;&lt;/span&gt;&lt;br/&gt;    read aNum&lt;br/&gt;    case $aNum &lt;span&gt;in&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;1&lt;/span&gt;|&lt;span&gt;2&lt;/span&gt;|&lt;span&gt;3&lt;/span&gt;|&lt;span&gt;4&lt;/span&gt;|&lt;span&gt;5&lt;/span&gt;) echo &lt;span&gt;&quot;你输入的数字为 $aNum!&quot;&lt;/span&gt;&lt;br/&gt;        ;;&lt;br/&gt;        *) echo &lt;span&gt;&quot;你输入的数字不是 1 到 3 之间的!&quot;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;continue&lt;/span&gt;&lt;br/&gt;            echo &lt;span&gt;&quot;游戏结束&quot;&lt;/span&gt;&lt;br/&gt;        ;;&lt;br/&gt;    esac&lt;br/&gt;done&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;10 shell函数&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;用户定义函数，然后在shell脚本中随便调用，格式如下&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;[ function ] funname [()]&lt;br/&gt;&lt;br/&gt;{&lt;br/&gt;&lt;br/&gt;    action;&lt;br/&gt;&lt;br/&gt;    [&lt;span&gt;return&lt;/span&gt; int;]&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例子&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;Fun1(){&lt;br/&gt;    echo &lt;span&gt;&quot;这是我的第一个 shell 函数!&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;echo &lt;span&gt;&quot;-----函数开始执行-----&quot;&lt;/span&gt;&lt;br/&gt;Fun1&lt;br/&gt;echo &lt;span&gt;&quot;-----函数执行完毕-----&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;带return语句&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;FunReturn(){&lt;br/&gt;    echo &lt;span&gt;&quot;这个函数会对输入的两个数字进行相加运算...&quot;&lt;/span&gt;&lt;br/&gt;    echo &lt;span&gt;&quot;输入第一个数字: &quot;&lt;/span&gt;&lt;br/&gt;    read aNum&lt;br/&gt;    echo &lt;span&gt;&quot;输入第二个数字: &quot;&lt;/span&gt;&lt;br/&gt;    read anotherNum&lt;br/&gt;    echo &lt;span&gt;&quot;两个数字分别为 $aNum 和 $anotherNum !&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; $(($aNum+$anotherNum))&lt;br/&gt;}&lt;br/&gt;FunReturn&lt;br/&gt;echo &lt;span&gt;&quot;输入的两个数字之和为 $? !&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数参数&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# author:xiaolan&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;funParam(){&lt;br/&gt;    echo &lt;span&gt;&quot;第一个参数为 $1 !&quot;&lt;/span&gt;&lt;br/&gt;    echo &lt;span&gt;&quot;第二个参数为 $2 !&quot;&lt;/span&gt;&lt;br/&gt;    echo &lt;span&gt;&quot;参数总数有 $# 个!&quot;&lt;/span&gt;&lt;br/&gt;    echo &lt;span&gt;&quot;作为一个字符串输出所有参数 $* !&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;funParam &lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;shell重定向&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;输出重定向&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;command1 &amp;gt; file # 如果file中存在内容将被清空覆盖。如果追加使用command1 &amp;gt;&amp;gt;file&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;ls -l &amp;gt; dir.txt&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;cat dir.txt&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.458128078817734&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6METlQKXhGiaQGzog6z1knB9JJpYs9OmJe8nVwo5KnOxSAnnRgU8vchicJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;406&quot; title=&quot;img&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;/dev/null文件&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;写入到它的内容都会被丢弃，会起到&quot;禁止输出&quot;的效果，如果希望屏蔽stdout和stderr  “ command &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;注意：Linux命令行都会打开三个文件&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;标准输入文件:stdin文件描述符为0&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;标准输出文件:stdout文件描述符为1&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;标准错误文件:stderr文件描述符2&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;12 运算符&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;下表列出了常用的算术运算符，假定变量 a 为 2，变量 b 为 3：&lt;/p&gt;&lt;p&gt;算术运算符&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.43670886075949367&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEttdro7Lp57R9axp80utYO5hIYFRar7rx92GJvCqNE7YzKUictiaibKiaQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;790&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;算术运算符&lt;/p&gt;&lt;p&gt;关系运算符&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.34127979924717694&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEpxbUaic6ibheW16n0qD8Nn2p7Oib6ticLITZ0PLpkh9KXRX1m0icbb9AIwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;797&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;关系&lt;/span&gt;&lt;span&gt;运算符&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;布尔运算符&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.19089759797724398&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEK1Biblp5z9TGjqTPPVt00NzAD8ahn4PLNYNmjoNCG1dtiaEicotUNibB5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;791&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;span&gt;布尔运算符&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;逻辑运算符&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.14936708860759493&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEfM0MdeQHlSPJLFcLTCX8lMCoBpQq0PqhcF9T1k90sfaXAGM7ou8diag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;790&quot;/&gt;&lt;span&gt;逻辑运算符&lt;/span&gt;&lt;/p&gt;&lt;p&gt;字符串运算符&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2900378310214376&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MEG71icXZ0C0GS5EQc5b2WZsfgmIYF4ngLaSVlb1JvZ0mpibohdvNxS52w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;793&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;12 shell实战&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt; cat demo.txt|awk ’NR==2{print $3}’ &amp;gt;demo2.txt &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;awk ’{print $1}’ *.log | sort | uniq -c | sort -nr | head -n &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;uniq - 删除排序文件中的重复行 sort对于文本进行排序 -l 按照当前环境排序. -m 合并已经排序好的文件,不排序. -n 按照字符串的数值顺序比较,暗含-b -r 颠倒比较的结果.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ps -aux|sort -k5nr|awk ’BEGIN{print ”PID VSZ”}{print ![2,(https://www.zhihu.com/equation?tex=2%2C)2,5}’|awk ’NR&amp;lt;3′ &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;if [-f /var/log/messages]&lt;br/&gt;then&lt;br/&gt;echo &quot;File exts&quot;&lt;br/&gt;fi&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;#!/bin/bash 表示脚本使用 /bin/bash。对于 python 脚本，就是 #!/usr/bin/python&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;“ “&amp;amp;” 脚本在后台运行时使用它。“&amp;amp;&amp;amp;”当前一个脚本成功完成才执行后面的命令&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;./a.sh &amp;gt;log.txt 2&amp;gt;&amp;amp;1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;wc -l /etc/passwd | cut -d&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;[ &lt;span&gt;$A&lt;/span&gt; == &lt;span&gt;$B&lt;/span&gt; ] – 用于字符串比较&lt;br/&gt;[ &lt;span&gt;$A&lt;/span&gt; -eq &lt;span&gt;$B&lt;/span&gt; ] – 用于数字比较&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;echo $string | tr -d &quot; &quot;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;! /bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; author:xiaolan&lt;/span&gt;&lt;br/&gt;sum=0&lt;br/&gt;for mem in `ps aux |awk &#x27;{print $6}&#x27; |grep -v &#x27;RSS&#x27; `&lt;br/&gt;do&lt;br/&gt;    sum=$[$sum+$mem]&lt;br/&gt;done&lt;br/&gt;echo &quot;The total memory is $sum&quot;&quot;k&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.11392405063291139&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicadHiavYnpTGmqVecvTr8c6MErtzzPOZhLBeFnQDplRLuCicNNyLH50CyIhzuEwrbEqy2oibgjibFXGkyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;316&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;result&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;批量修改123目录下txt为txt.temp。将temp打包为test.tar.gz&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;##查找txt文件&lt;/span&gt;&lt;br/&gt;find /&lt;span&gt;123&lt;/span&gt; -type f -name &lt;span&gt;&quot;*.txt&quot;&lt;/span&gt; &amp;gt; /tmp/txt.list&lt;br/&gt;&lt;span&gt;##批量修改文件名&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; f &lt;span&gt;in&lt;/span&gt; `cat /tmp/txt.list`&lt;br/&gt;do&lt;br/&gt;    mv $f $f.temp&lt;br/&gt;done&lt;br/&gt;&lt;span&gt;##创建一个目录，为了避免目录已经存在，所以要加一个复杂的后缀名&lt;/span&gt;&lt;br/&gt;d=`date +%y%m%d%H%M%S`&lt;br/&gt;mkdir /tmp/&lt;span&gt;123&lt;/span&gt;_$d&lt;br/&gt;&lt;span&gt;##把.temp文件拷贝到/tmp/123_$d&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; f &lt;span&gt;in&lt;/span&gt; `cat /tmp/txt.list`&lt;br/&gt;do&lt;br/&gt;    cp $f.temp /tmp/&lt;span&gt;123&lt;/span&gt;_$d&lt;br/&gt;done&lt;br/&gt;&lt;span&gt;##打包压缩&lt;/span&gt;&lt;br/&gt;cd /tmp/&lt;br/&gt;tar czf &lt;span&gt;123.&lt;/span&gt;tar.gz &lt;span&gt;123&lt;/span&gt;_$d/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;7 awk文本处理工具&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;awk是一个处理文本文件的应用程序，几乎所有的Linux系统都自带了这个程序&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;依次处理每一行，并读取里面的每一个字段。对于处理生产环境的日志有着非常高校的作用&lt;/p&gt;&lt;p&gt;&lt;strong&gt;基本用法&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 格式&lt;/span&gt;&lt;br/&gt;awk 做什么 文件吗&lt;br/&gt;awk &#x27;print $0&#x27; lan.txt&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面lan.txt是awk需要处理的文本文件。前面单引号里面有一个大括号，单引号里面就是每一行的处理动作。其中print为打印命令，&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;上菜&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;echo &#x27;my name is lanlan&#x27; | awk &#x27;{print $0}&#x27;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，print &lt;span aria-hidden=&quot;true&quot;&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;位&lt;/span&gt;&lt;span&gt;当&lt;/span&gt;&lt;span&gt;前&lt;/span&gt;&lt;span&gt;行&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;所&lt;/span&gt;&lt;span&gt;以&lt;/span&gt;&lt;span&gt;执&lt;/span&gt;&lt;span&gt;行&lt;/span&gt;&lt;span&gt;结&lt;/span&gt;&lt;span&gt;果&lt;/span&gt;&lt;span&gt;就&lt;/span&gt;&lt;span&gt;是&lt;/span&gt;&lt;span&gt;把&lt;/span&gt;&lt;span&gt;每&lt;/span&gt;&lt;span&gt;一&lt;/span&gt;&lt;span&gt;行&lt;/span&gt;&lt;span&gt;原&lt;/span&gt;&lt;span&gt;样&lt;/span&gt;&lt;span&gt;打&lt;/span&gt;&lt;span&gt;印&lt;/span&gt;&lt;span&gt;出&lt;/span&gt;&lt;span&gt;来&lt;/span&gt;&lt;span/&gt;&lt;span&gt;∗&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;∗&lt;/span&gt;&lt;span&gt;上&lt;/span&gt;&lt;span&gt;菜&lt;/span&gt;&lt;span/&gt;&lt;span&gt;∗&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;∗&lt;/span&gt;&lt;span&gt;¨&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;上&lt;/span&gt;&lt;span&gt;面&lt;/span&gt;&lt;span&gt;代&lt;/span&gt;&lt;span&gt;码&lt;/span&gt;&lt;span&gt;中&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;0即将标准输入my name is lanlan ,c重新打印一遍&lt;/p&gt;&lt;p&gt;awk根据空格和制表符，将每一行分成若干段，依次为&lt;span/&gt;2&lt;span/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;echo &#x27;my name is lanlan&#x27;| awk &#x27;{print $3}&#x27;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了方便，我们直接使用/etc/passwd文件进行操作，&lt;/p&gt;&lt;pre&gt;&lt;code&gt;awk -F &#x27;:&#x27; &#x27;{ print $1 }&#x27; demo.txt&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3 变量&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;上面我们说了，可以使用符号 “&lt;span aria-hidden=&quot;true&quot;&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;代&lt;/span&gt;&lt;span&gt;表&lt;/span&gt;&lt;span&gt;第&lt;/span&gt;&lt;span&gt;一&lt;/span&gt;&lt;span&gt;个&lt;/span&gt;&lt;span&gt;字&lt;/span&gt;&lt;span&gt;段&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;第&lt;/span&gt;&lt;span&gt;二&lt;/span&gt;&lt;span&gt;个&lt;/span&gt;&lt;span&gt;字&lt;/span&gt;&lt;span&gt;段&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;第&lt;/span&gt;&lt;span&gt;三&lt;/span&gt;&lt;span&gt;个&lt;/span&gt;&lt;span&gt;字&lt;/span&gt;&lt;span&gt;段&lt;/span&gt;&lt;span&gt;¨&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;为&lt;/span&gt;&lt;span&gt;了&lt;/span&gt;&lt;span&gt;方&lt;/span&gt;&lt;span&gt;便&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;我&lt;/span&gt;&lt;span&gt;们&lt;/span&gt;&lt;span&gt;直&lt;/span&gt;&lt;span&gt;接&lt;/span&gt;&lt;span&gt;使&lt;/span&gt;&lt;span&gt;用&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;文&lt;/span&gt;&lt;span&gt;件&lt;/span&gt;&lt;span&gt;进&lt;/span&gt;&lt;span&gt;行&lt;/span&gt;&lt;span&gt;操&lt;/span&gt;&lt;span&gt;作&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;¨&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span/&gt;&lt;span&gt;∗&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;∗&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;变&lt;/span&gt;&lt;span&gt;量&lt;/span&gt;&lt;span/&gt;&lt;span&gt;∗&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;∗&lt;/span&gt;&lt;span&gt;上&lt;/span&gt;&lt;span&gt;面&lt;/span&gt;&lt;span&gt;我&lt;/span&gt;&lt;span&gt;们&lt;/span&gt;&lt;span&gt;说&lt;/span&gt;&lt;span&gt;了&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;可&lt;/span&gt;&lt;span&gt;以&lt;/span&gt;&lt;span&gt;使&lt;/span&gt;&lt;span&gt;用&lt;/span&gt;&lt;span&gt;符&lt;/span&gt;&lt;span&gt;号&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;+” 数字的方式表示第几个字段，其实还有一些变量可以直接表示相应的字段。比如 “$NFb” 表示最后一个字段&lt;/p&gt;&lt;pre&gt;&lt;code&gt;echo &#x27;my name is lanlan&#x27;| awk &#x27;{print $NF}&#x27;&lt;br/&gt;awk -F &#x27;:&#x27; &#x27;{print NR &quot;) &quot; $1}&#x27; demo.txtshe&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里出现了双引号，表示原样输出&lt;/p&gt;&lt;p&gt;其他常用的内置变量&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4 函数&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;既然算是一门语言，函数当然少不了，下面看一波常用的函数&lt;/p&gt;&lt;p&gt;函数toupper()用于将字符转为大写&lt;/p&gt;&lt;pre&gt;&lt;code&gt;awk -F &#x27;:&#x27; &#x27;{ print toupper($1) }&#x27; demo.txt&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以发现第一个字段输出的时候变成了大写&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;tolower()：字符转为小写。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;length()：返回字符串长度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;substr()：返回子字符串。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;sin()：正弦。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;cos()：余弦。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;sqrt()：平方根。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;rand()：随机数。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;5 条件**&lt;/p&gt;&lt;p&gt;通过使用相应的条件，过滤出自己想要的内容&lt;/p&gt;&lt;pre&gt;&lt;code&gt;awk &#x27;条件 动作&#x27; 文件名&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上菜&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; awk -F &lt;span&gt;&#x27;:&#x27;&lt;/span&gt; &lt;span&gt;&#x27;/usr/ {print $1}&#x27;&lt;/span&gt; demo.txt&lt;/span&gt;&lt;br/&gt;root&lt;br/&gt;daemon&lt;br/&gt;bin&lt;br/&gt;sys&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里/usr/表示只输出包含usr的行&lt;/p&gt;&lt;p&gt;这个例子输出奇数行&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 输出奇数行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; awk -F &lt;span&gt;&#x27;:&#x27;&lt;/span&gt; &lt;span&gt;&#x27;NR % 2 == 1 {print $1}&#x27;&lt;/span&gt; demo.txt&lt;/span&gt;&lt;br/&gt;root&lt;br/&gt;bin&lt;br/&gt;sync&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; 输出第三行以后的行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; awk -F &lt;span&gt;&#x27;:&#x27;&lt;/span&gt; &lt;span&gt;&#x27;NR &amp;gt;3 {print $1}&#x27;&lt;/span&gt; demo.txt&lt;/span&gt;&lt;br/&gt;sys&lt;br/&gt;sync&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面的例子输出第一个字段等于指定值的行。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; awk -F &lt;span&gt;&#x27;:&#x27;&lt;/span&gt; &lt;span&gt;&#x27;$1 == &quot;root&quot; {print $1}&#x27;&lt;/span&gt; demo.txt&lt;/span&gt;&lt;br/&gt;root&lt;br/&gt;&lt;span&gt;&lt;br/&gt;$&lt;/span&gt;&lt;span&gt; awk -F &lt;span&gt;&#x27;:&#x27;&lt;/span&gt; &lt;span&gt;&#x27;$1 == &quot;root&quot; || $1 == &quot;bin&quot; {print $1}&#x27;&lt;/span&gt; demo.txt&lt;/span&gt;&lt;br/&gt;root&lt;br/&gt;bin&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;5 if语句&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通过if语句编写比较复杂的内容&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; awk -F &lt;span&gt;&#x27;:&#x27;&lt;/span&gt; &lt;span&gt;&#x27;{if ($1 &amp;gt; &quot;m&quot;) print $1}&#x27;&lt;/span&gt; demo.txt&lt;/span&gt;&lt;br/&gt;root&lt;br/&gt;sys&lt;br/&gt;sync&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码输出第一个字段的第一个字符大于&lt;code&gt;m&lt;/code&gt;的行。&lt;/p&gt;&lt;p&gt;if结构还可以指定else部分。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;8 进程管理与定时任务和后台执行&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;crond是什么？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;crond是一个可以在指定时间执行一个shell脚本或者一系列的Linux命令。和Windows下的计划任务类似。当安装完操作系统后，默认会安装这个服务工具，并且会自动启动crond进程。&lt;/p&gt;&lt;p&gt;在Linux中任务的调度分为&lt;strong&gt;两类&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;系统会周期性的执行一些工作，比如说写缓存的数据到硬盘，清理日志等&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;用户定期也会执行一些任务，比如用户数据的备份，定时的邮件提醒等，这些都是通过crondtab来设置&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;那么crontab到底怎么用么&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;首先看看crontab的使用格式：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;crontab -u user file&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;常见的选项&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;-u user:很明显是需要表明是那个用户的crontab服务，别瞎搞&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;file:file是命名文件的名字，表示将file作为crontab的任务列表文件并载入到crontab中&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;-e:e为edit，表示标记某个用户的crontab文件内容&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;-l:显示用户的crontab文件、&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;crontab的含义&lt;/p&gt;&lt;p&gt;创建的crontab文件，每一行代表一项任务，每个字段都有对应的设置规则，一共分为6个字段，分别为：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;minute hour day month week command&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;minute:区间 0-59&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;hour:区间0-23&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;day:区间0-31&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;month:区间1-12&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;week:区间0-7 周日可以是0/7&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;command&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里的command代表的是需要执行的而命令，通常为脚本文件，&lt;/p&gt;&lt;p&gt;除了上面几个字段，还需要注意几个特殊字段&lt;/p&gt;&lt;pre&gt;&lt;code&gt;crontab -e&lt;br/&gt;0 5 * * * /root/bin/backup.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这代表的是每天早上5点运行backup.sh&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;每个工作日11:59pm进行备份作业&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;59 11 * * 1-5 /root/bin/backup.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;每五分钟运行一个命令&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;*/5 * * * * /root/bin/check-status.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;crontab有哪些选项&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;crontab -e:修 改crontab文件，如果文件不存在会自动创建&lt;/p&gt;&lt;p&gt;crontab -l：显示crontab文件&lt;/p&gt;&lt;p&gt;crontab -r：删除crontab 文件&lt;/p&gt;&lt;p&gt;crontab -ir:删除crontab文件前提醒用户&lt;/p&gt;&lt;h2&gt;&lt;span&gt;9 后台运行&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;用途&lt;/strong&gt;：不挂断的运行命令&lt;/p&gt;&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：nohup Command [ Arg … ] [&amp;amp;]&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;无论是否将 nohup 命令的输出&lt;strong&gt;重定向&lt;/strong&gt;到终端，输出都将附加到当前目录的 nohup.out 文件中。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果当前目录的 &quot;nohup.out&quot; 文件不可写，输出重定向到&quot;home/nohup.out&quot;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;退出状态&lt;/strong&gt;：该命令返回下列出口值：　&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;126 可以查找但不能调用 Command 参数指定的命令。　&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;127 nohup 命令发生错误或不能查找由 Command 参数指定的命令。　&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;否则，nohup 命令的退出状态是 Command 参数指定命令的退出状态。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;使用&amp;amp;&lt;/strong&gt;&lt;br/&gt;用途：在后台运行,一般两个一起用&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nohup command &amp;amp;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0cbb7af6262adf80b7ad3e4257357845</guid>
<title>几乎刷完了力扣所有的链表题，我发现了这些东西。。。</title>
<link>https://toutiao.io/k/b2q9ajw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjy10z1yfrc6oKVIxFMy227Xib0ZbtodBqgFh9keDE1icfgeOBGa1HCUjw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;span/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先上下本文的提纲，这个是我用 mindmap 画的一个脑图，之后我后继续完善，将其他专题逐步完善起来。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;大家也可以使用 vscode blink-mind 打开源文件查看，里面有一些笔记可以点开查看。源文件可以去我的公众号《力扣加加》回复脑图获取，以后脑图也会持续更新更多内容。vscode 插件地址：https://marketplace.visualstudio.com/items?itemName=awehook.vscode-blink-mind&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是 lucifer。今天给大家带来的专题是《链表》。很多人觉得链表是一个很难的专题。实际上，只要你掌握了诀窍，它并没那么难。接下来，我们展开说说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;链表标签&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;在 leetcode 一共有 &lt;strong&gt;「54 道题」&lt;/strong&gt;。为了准备这个专题，我花了几天时间将 leetcode 几乎所有的链表题目都刷了一遍。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjQZ4Z3D10wgCK09GQv4hUqica5fUGLsPgiaRB1D4kUeMLibJyOiaxdD5bnQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出，除了六个上锁的，其他我都刷了一遍。而实际上，这六个上锁的也没有什么难度，甚至和其他 48 道题差不多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过集中刷这些题，我发现了一些有趣的信息，今天就分享给大家。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;简介&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各种数据结构，不管是队列，栈等线性数据结构还是树，图的等非线性数据结构，从根本上底层都是数组和链表。不管你用的是数组还是链表，用的都是计算机内存，物理内存是一个个大小相同的内存单元构成的，如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjsNGZGHvdK6ZdMun9ISeBoEk1F33VzbEc3n1Gf4NibXUJyZmkQNU14Lg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（图 1. 物理内存）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而数组和链表虽然用的都是物理内存，都是两者在对物理的使用上是非常不一样的，如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjIoYbpVSrFFDk82HqpF737wva3K8DDhGDbNJtnIULibPec9zLh7TgHNw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（图 2. 数组和链表的物理存储图）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不难看出，数组和链表只是使用物理内存的两种方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数组是连续的内存空间，通常每一个单位的大小也是固定的，因此可以按下标随机访问。而链表则不一定连续，因此其查找只能依靠别的方式，一般我们是通过一个叫 next 指针来遍历查找。链表其实就是一个结构体。比如一个可能的单链表的定义可以是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;interface&lt;/span&gt; ListNode&amp;lt;T&amp;gt; {&lt;br/&gt;  data: T;&lt;br/&gt;  next: ListNode;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;data 是数据域，存放数据，next 是一个指向下一个节点的指针。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的物理结构图可以看出数组是一块连续的空间，数组的每一项都是紧密相连的，因此如果要执行插入和删除操作就很麻烦。对数组头部的插入和删除时间复杂度都是&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，而平均复杂度也是&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，只有对尾部的插入和删除才是&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。简单来说”数组对查询特别友好，对删除和添加不友好“。为了解决这个问题，就有了链表这种数据结构。链表适合在数据需要有一定顺序，但是又需要进行频繁增删除的场景，具体内容参考后面的《链表的基本操作》小节。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjQ7wCAVIC8wIhLPlEY86OEtBVKsVJjTjCSZyYffA9lq00SRoYeIWjCA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（图 3. 一个典型的链表逻辑表示图）&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;后面所有的图都是基于逻辑结构，而不是物理结构&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链表只有一个后驱节点 next，如果是双向链表还会有一个前驱节点 pre。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;有没有想过为啥只有二叉树，而没有一叉树。实际上链表就是特殊的树，即一叉树。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;链表的基本操作&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要想写出链表的题目， 熟悉链表的各种基本操作和复杂度是必须的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;插入&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;插入只需要考虑要插入位置前驱节点和后继节点（双向链表的情况下需要更新后继节点）即可，其他节点不受影响，因此在给定指针的情况下插入的操作时间复杂度为&lt;code&gt;O(1)&lt;/code&gt;。这里给定指针中的指针指的是插入位置的前驱节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;temp = 待插入位置的前驱节点.next&lt;br/&gt;待插入位置的前驱节点.next = 待插入指针&lt;br/&gt;待插入指针.next = temp&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果没有给定指针，我们需要先遍历找到节点，因此最坏情况下时间复杂度为 &lt;code&gt;O(N)&lt;/code&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;提示 1: 考虑头尾指针的情况。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;提示 2: 新手推荐先画图，再写代码。等熟练之后，自然就不需要画图了。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;删除&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只需要将需要删除的节点的前驱指针的 next 指针修正为其下下个节点即可，注意考虑&lt;strong&gt;「边界条件」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;待删除位置的前驱节点.next = 待删除位置的前驱节点.next.next&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;提示 1: 考虑头尾指针的情况。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;提示 2: 新手推荐先画图，再写代码。等熟练之后，自然就不需要画图了。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;遍历&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;遍历比较简单，直接上伪代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;迭代伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;当前指针 =  头指针&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; 当前节点不为空 {&lt;br/&gt;   &lt;span&gt;print&lt;/span&gt;(当前节点)&lt;br/&gt;   当前指针 = 当前指针.next&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个前序遍历的递归的伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;dfs(cur) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; 当前节点为空 &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;    print(cur.val)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; dfs(cur.next)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;链表和数组到底有多大的差异？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;熟悉我的小伙伴应该经常听到我说过一句话，那就是&lt;strong&gt;「数组和链表同样作为线性的数组结构，二者在很多方便都是相同的，只在细微的操作和使用场景上有差异而已」&lt;/strong&gt;。而使用场景，很难在题目中直接考察。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;实际上，使用场景是可以死记硬背的。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，对于我们做题来说，&lt;strong&gt;「二者的差异通常就只是细微的操作差异」&lt;/strong&gt;。这么说大家可能感受不够强烈，我给大家举几个例子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数组的遍历：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; arr.size();i++) {&lt;br/&gt;    print(arr[i])&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链表的遍历：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; (ListNode cur = head; cur != &lt;span&gt;null&lt;/span&gt;; cur = cur.next) {&lt;br/&gt;    print(cur.val)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是很像？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;**可以看出二者逻辑是一致的，只不过细微操作不一样。**比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;数组是索引 ++&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;链表是 cur = cur.next&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们需要逆序遍历呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = arr.size() - &lt;span&gt;1&lt;/span&gt;; i &amp;gt; - &lt;span&gt;1&lt;/span&gt;;i--) {&lt;br/&gt;    print(arr[i])&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是链表，通常需要借助于双向链表。而双向链表在力扣的题目很少，因此大多数你没有办法拿到前驱节点，这也是为啥很多时候会自己记录一个前驱节点 pre 的原因。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; (ListNode cur = tail; cur != &lt;span&gt;null&lt;/span&gt;; cur = cur.pre) {&lt;br/&gt;    print(cur.val)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果往数组末尾添加一个元素就是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;arr.push(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链表的话，很多语言没有内置的数组类型。比如力扣通常使用如下的类来模拟。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ListNode&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;int&lt;/span&gt; val;&lt;br/&gt;      ListNode next;&lt;br/&gt;      ListNode() {}&lt;br/&gt;      ListNode(&lt;span&gt;int&lt;/span&gt; val) { &lt;span&gt;this&lt;/span&gt;.val = val; }&lt;br/&gt;      ListNode(&lt;span&gt;int&lt;/span&gt; val, ListNode next) { &lt;span&gt;this&lt;/span&gt;.val = val; &lt;span&gt;this&lt;/span&gt;.next = next; }&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们是不能直接调用 push 方法的。想一下，如果当你实现这个，你怎么做？你可以先自己想一下，再往下看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3...2...1&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ok，其实很简单。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 假设 cur 是链表的尾部节点&lt;/span&gt;&lt;br/&gt;tail.next = &lt;span&gt;new&lt;/span&gt; ListNode(&lt;span&gt;&#x27;lucifer&#x27;&lt;/span&gt;)&lt;br/&gt;tail = tail.next&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过上面两行代码之后， tail 仍然指向尾部节点。是不是很简单，你学会了么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这有什么用？比如有的题目需要你复制一个新的链表， 你是不是需要开辟一个新的链表头，然后不断拼接（push）复制的节点？这就用上了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于数组的底层也是类似的，一个可能的数组 push 底层实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;arr.length += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;arr[arr.length - &lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;&#x27;lucifer&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结一下， 数组和链表逻辑上二者有很多相似之处，不同的只是一些使用场景和操作细节，对于做题来说，我们通常更关注的是操作细节。关于细节，接下来给大家介绍，这一小节主要让大家知道二者在思想和逻辑的&lt;strong&gt;「神相似」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些小伙伴做链表题先把链表换成数组，然后用数组做，本人不推荐这种做法，这等于是否认了链表存在的价值，小朋友不要模仿。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;链表题难度几何？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链表题真的不难。说链表不难是有证据的。就拿 LeetCode 平台来说，处于困难难度的题目只有两个。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjCqPc7LtRNB88JpeexVXVPgiaQdHicehbqmLo3NeBQRDX3M0ELvwK2fiag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 第 23 题基本没有什么链表操作，一个常规的“归并排序”即可搞定，而合并两个有序链表是一个简单题。如果你懂得数组的归并排序和合并两个有序链表，应该轻松拿下这道题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;合并两个有序数组也是一个简单题目，二者难度几乎一样。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而对于第 25 题， 相信你看完本节的内容，也可以做出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，话虽这么说，但是还是有很多小朋友给我说 ”指针绕来绕去就绕晕了“， ”老是死循环“ 。。。。。。链表题目真的那么难么？我们又该如何破解？lucifer 给大家准备了一个口诀 &lt;strong&gt;「一个原则， 两种题型，三个注意，四个技巧」&lt;/strong&gt;，让你轻松搞定链表题，再也不怕手撕链表。我们依次来看下这个口诀的内容。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一个原则&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个原则就是 &lt;strong&gt;「画图」&lt;/strong&gt;，尤其是对于新手来说。不管是简单题还是难题一定要画图，这是贯穿链表题目的一个准则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;画图可以减少我们的认知负担，这其实和打草稿，备忘录道理是一样的，将存在脑子里的东西放到纸上。举一个不太恰当的例子就是你的脑子就是 CPU，脑子的记忆就是寄存器。寄存器的容量有限，我们需要把不那么频繁使用的东西放到内存，把寄存器用在真正该用的地方，这个内存就是纸或者电脑平板等一切你可以画图的东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;画的好看不好看都不重要，能看清就行了。用笔随便勾画一下， 能看出关系就够了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;两个考点&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我把力扣的链表做了个遍。发现一个有趣的现象，那就是链表的考点很单一。除了设计类题目，其考点无法就两点：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;指针的修改&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中指针修改最典型的就是链表反转。其实链表反转不就是修改指针么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于数组这种支持随机访问的数据结构来说， 反转很容易， 只需要头尾不断交换即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;reverseArray&lt;/span&gt;(&lt;span&gt;arr&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; left = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; right = arr.length - &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; (left &amp;lt; right) {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; temp = arr[left];&lt;br/&gt;    arr[left++] = arr[right];&lt;br/&gt;    arr[right--] = temp;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; arr;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而对于链表来说，就没那么容易了。力扣关于反转链表的题简直不要太多了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天我给大家写了一个最完整的链表反转，以后碰到可以直接用。当然，前提是大家要先理解再去套。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我要实现的一个反转&lt;strong&gt;「任意一段链表」&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;reverse(self, head: ListNode, tail: ListNode)。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 head 指的是需要反转的头节点，tail 是需要反转的尾节点。不难看出，如果 head 是整个链表的头，tail 是整个链表的尾，那就是反转整个链表，否则就是反转局部链表。接下来，我们就来实现它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们要做的就是画图。这个我在&lt;strong&gt;「一个原则」&lt;/strong&gt;部分讲过了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图，是我们需要反转的部分链表：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBj9xceMRTDwNOCx3hlE49WbkooSUw3jCUeonhr3GH5WmIT7p44qGXycA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而我们期望反转之后的长这个样子：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjXgUIZIQWjicbPHTQEZY7XbUawd0kWx1mibib8dWwezc3CDB3zvK2LzZ4w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不难看出， &lt;strong&gt;「最终返回 tail 即可」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于链表的递归性，实际上，我们只要反转其中相邻的两个，剩下的采用同样的方法完成即可。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;链表是一种递归的数据结构，因此采用递归的思想去考虑往往事半功倍，关于递归思考链表将在后面《三个注意》部分展开。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBj0kMevwJVVTVwlGKawqUicZ3HeqNiacdjUDGiabkr7qjfHibL6dkmiclW95A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于两个节点来说，我们只需要下修改一次指针即可，这好像不难。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cur.next = pre&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBj0yTNZvgHcZ9k8AJFUNwazvamstmbcAe4OTNowIBFlibIXTbP5BxWQSQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就是这一个操作，不仅硬生生有了环，让你死循环。还让不应该一刀两断的它们分道扬镳。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于分道扬镳这个不难解决， 我们只需要反转前，记录一下下一个节点即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;next = cur.next&lt;br/&gt;cur.next = pre&lt;br/&gt;&lt;br/&gt;cur = next&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjC9Zb1S6MQ7hDWF2CDrBI6rNk7FAb8BkGnVXha5v8pTnWb8340sBuag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么环呢？实际上， 环不用解决。因为如何我们是从前往后遍历，那么实际上，前面的链表已经被反转了，因此上面我的图是错的。正确的图应该是：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjTvVjialReO4Ioo8nEKfXicw1uRxccMCI0TiabtB1kjoUIFbX22YODG7TQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此为止，我们可以写出如下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;# 翻转一个子链表，并返回新的头与尾&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;reverse&lt;/span&gt;&lt;span&gt;(self, head: ListNode, tail: ListNode)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        cur = head&lt;br/&gt;        pre = &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; cur != tail:&lt;br/&gt;            &lt;span&gt;# 留下联系方式&lt;/span&gt;&lt;br/&gt;            next = cur.next&lt;br/&gt;            &lt;span&gt;# 修改指针&lt;/span&gt;&lt;br/&gt;            cur.next = pre&lt;br/&gt;            &lt;span&gt;# 继续往下走&lt;/span&gt;&lt;br/&gt;            pre = cur&lt;br/&gt;            cur = next&lt;br/&gt;        &lt;span&gt;# 反转后的新的头尾节点返回出去&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; tail, head&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你仔细观察，会发现，我们的 tail 实际上是没有被反转的。解决方法很简单，将 tail 后面的节点作为参数传进来呗。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 翻转一个子链表，并且返回新的头与尾&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;reverse&lt;/span&gt;&lt;span&gt;(self, head: ListNode, tail: ListNode, terminal:ListNode)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        cur = head&lt;br/&gt;        pre = &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; cur != terminal:&lt;br/&gt;            &lt;span&gt;# 留下联系方式&lt;/span&gt;&lt;br/&gt;            next = cur.next&lt;br/&gt;            &lt;span&gt;# 修改指针&lt;/span&gt;&lt;br/&gt;            cur.next = pre&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;# 继续往下走&lt;/span&gt;&lt;br/&gt;            pre = cur&lt;br/&gt;            cur = next&lt;br/&gt;         &lt;span&gt;# 反转后的新的头尾节点返回出去&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; tail, head&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信你对反转链表已经有了一定的了解。后面我们还会对这个问题做更详细的讲解，大家先留个印象就好。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;链表的拼接&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家有没有发现链表总喜欢穿来穿去（拼接）的？比如反转链表 II，再比如合并有序链表等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为啥链表总喜欢穿来穿去呢？实际上，这就是链表存在的价值，这就是设计它的初衷呀！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链表的价值就在于其&lt;strong&gt;「不必要求物理内存的连续性，以及对插入和删除的友好」&lt;/strong&gt;。这在文章开头的链表和数组的物理结构图就能看出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此链表的题目很多拼接的操作。如果上面我讲的链表基本操作你会了，我相信这难不倒你。除了环，边界 等 。。。^_^。这几个问题我们后面再看。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三个注意&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链表最容易出错的地方就是我们应该注意的地方。链表最容易出的错 90 % 集中在以下三种情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;出现了环，造成死循环。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分不清边界，导致边界条件出错。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;搞不懂递归怎么做&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们一一来看。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;环&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;环的考点有两个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;题目就有可能环，让你判断是否有环，以及环的位置。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;题目链表没环，但是被你操作指针整出环了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们只讨论第二种，而第一种可以用我们后面提到的&lt;strong&gt;「快慢指针算法」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;避免出现环最简单有效的措施就是画图，如果两个或者几个链表节点构成了环，通过图是很容易看出来的。因此一个简单的&lt;strong&gt;「实操技巧就是先画图，然后对指针的操作都反应在图中」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是链表那么长，我不可能全部画出来呀。其实完全不用，上面提到了链表是递归的数据结构， 很多链表问题天生具有递归性，比如反转链表，因此&lt;strong&gt;「仅仅画出一个子结构就可以了。&lt;strong&gt;「这个知识，我们放在后面的」&lt;/strong&gt;前后序」&lt;/strong&gt;部分讲解。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;边界&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人错的是没有考虑边界。一个考虑边界的技巧就是看题目信息。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果题目的头节点可能被移除，那么考虑使用虚拟节点，这样&lt;strong&gt;「头节点就变成了中间节点」&lt;/strong&gt;，就不需要为头节点做特殊判断了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;题目让你返回的不是原本的头节点，而是尾部节点或者其他中间节点，这个时候要注意指针的变化。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上两者部分的具体内容，我们在稍微讲到的虚拟头部分讲解。老规矩，大家留个印象即可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;前后序&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ok，是时候填坑了。上面提到了链表结构天生具有递归性，那么使用递归的解法或者递归的思维都会对我们解题有帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 二叉树遍历 部分，我讲了二叉树的三种流行的遍历方法，分别是前序遍历，中序遍历和后序遍历。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前中后序实际上是指的当前节点相对子节点的处理顺序。如果先处理当前节点再处理子节点，那么就是前序。如果先处理左节点，再处理当前节点，最后处理右节点，就是中序遍历。后序遍历自然是最后处理当前节点了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际过程中，我们不会这么扣的这么死。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;traverse&lt;/span&gt;&lt;span&gt;(root)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    print(&lt;span&gt;&#x27;pre&#x27;&lt;/span&gt;)&lt;br/&gt;    traverse(root.left)&lt;br/&gt;    traverse(root.righ)&lt;br/&gt;    print(&lt;span&gt;&#x27;post&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上代码，我们既在&lt;strong&gt;「进入左右节点前」&lt;/strong&gt;有逻辑， 又在&lt;strong&gt;「退出左右节点之后」&lt;/strong&gt;有逻辑。这算什么遍历方式呢？一般意义上，我习惯只看主逻辑的位置，如果你的主逻辑是在后面就是后序遍历，主逻辑在前面就是前序遍历。这个不是重点，对我们解题帮助不大，对我们解题帮助大的是接下来要讲的内容。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;绝大多数的题目都是单链表，而单链表只有一个后继指针。因此只有前序和后序，没有中序遍历。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是以上面讲的经典的反转链表来说。如果是前序遍历，我们的代码是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;dfs&lt;/span&gt;&lt;span&gt;(head, pre)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; head: &lt;span&gt;return&lt;/span&gt; pre&lt;br/&gt;    next = head.next&lt;br/&gt;    &lt;span&gt;# # 主逻辑（改变指针）在后面&lt;/span&gt;&lt;br/&gt;    head.next = pre&lt;br/&gt;    dfs(next, head)&lt;br/&gt;&lt;br/&gt;dfs(head, &lt;span&gt;None&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续遍历的代码是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;dfs&lt;/span&gt;&lt;span&gt;(head)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; head &lt;span&gt;or&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; head.next: &lt;span&gt;return&lt;/span&gt; head&lt;br/&gt;    res = dfs(head.next)&lt;br/&gt;    &lt;span&gt;# 主逻辑（改变指针）在进入后面的节点的后面，也就是递归返回的过程会执行到&lt;/span&gt;&lt;br/&gt;    head.next.next = head&lt;br/&gt;    head.next = &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; res&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出，这两种写法不管是边界，入参，还是代码都不太一样。为什么会有这样的差异呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回答这个问题也不难，大家只要记住一个很简单的一句话就好了，那就是&lt;strong&gt;「如果是前序遍历，那么你可以想象前面的链表都处理好了，怎么处理的不用管」&lt;/strong&gt;。相应地&lt;strong&gt;「如果是后续遍历，那么你可以想象后面的链表都处理好了，怎么处理的不用管」&lt;/strong&gt;。这句话的正确性也是毋庸置疑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图，是前序遍历的时候，我们应该画的图。大家把注意力集中在中间的框（子结构）就行了，同时注意两点。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;前面的已经处理好了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;后面的还没处理好&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjz0fCWS6P41vmANyVvEialvKTUhgwIU8sfVq4T2wOl25IiaVVstcUUVJQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;据此，我们不难写出以下递归代码，代码注释很详细，大家看注释就好了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;dfs&lt;/span&gt;&lt;span&gt;(head, pre)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; head: &lt;span&gt;return&lt;/span&gt; pre&lt;br/&gt;    &lt;span&gt;# 留下联系方式（由于后面的都没处理，因此可以通过 head.next 定位到下一个）&lt;/span&gt;&lt;br/&gt;    next = head.next&lt;br/&gt;    &lt;span&gt;# 主逻辑（改变指针）在进入后面节点的前面（由于前面的都已经处理好了，因此不会有环）&lt;/span&gt;&lt;br/&gt;    head.next = pre&lt;br/&gt;    dfs(next, head)&lt;br/&gt;&lt;br/&gt;dfs(head, &lt;span&gt;None&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是后序遍历呢？老规矩，秉承我们的一个原则，&lt;strong&gt;「先画图」&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBj74jdQcdJY6HDIcToM3vJDXHZnELSr84TeCUUQcbDiasZdfe8NhEuHhQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不难看出，我们可以通过 head.next 拿到下一个元素，然后将下一个元素的 next 指向自身来完成反转。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用代码表示就是:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;head.next.next = head&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjSiaD5tXJkGu3BYFf88wGchz4XBicgv0ibiax89jSicWRaDpGniaYatSNicpxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;画出图之后，是不是很容易看出图中有一个环？现在知道画图的好处了吧？就是这么直观，当你很熟练了，就不需要画了，但是在此之前，请不要偷懒。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我们需要将 head.next 改为不会造成环的一个值，比如置空。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjFq2Q4YxwRoib7SV77Igib7iaK1Q4hqWeawic0K38Cn4E8fpJabvPETpZBA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;dfs&lt;/span&gt;&lt;span&gt;(head)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; head &lt;span&gt;or&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; head.next: &lt;span&gt;return&lt;/span&gt; head&lt;br/&gt;    &lt;span&gt;# 不需要留联系方式了，因为我们后面已经走过了，不需走了，现在我们要回去了。&lt;/span&gt;&lt;br/&gt;    res = dfs(head.next)&lt;br/&gt;    &lt;span&gt;# 主逻辑（改变指针）在进入后面的节点的后面，也就是递归返回的过程会执行到&lt;/span&gt;&lt;br/&gt;    head.next.next = head&lt;br/&gt;    &lt;span&gt;# 置空，防止环的产生&lt;/span&gt;&lt;br/&gt;    head.next = &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; res&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;值得注意的是，&lt;strong&gt;「前序遍历很容易改造成迭代，因此推荐大家使用前序遍历」&lt;/strong&gt;。我拿上面的迭代和这里的前序遍历给大家对比一下。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjwibkNwfdrxsG09SJ2kMDJ7ekGic4NiaUJL7iboYA8gNdzpu13Gz4XqjzkA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么为什么&lt;strong&gt;「前序遍历很容易改造成迭代」&lt;/strong&gt;呢？实际上，这句话我说的不准确，准确地说应该是&lt;strong&gt;「前序遍历容易改成不需要栈的递归，而后续遍历需要借助栈来完成」&lt;/strong&gt;。这也不难理解，由于后续遍历的主逻辑在函数调用栈的弹出过程，而前序遍历则不需要。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这里给大家插播一个写递归的技巧，那就是想象我们已经处理好了一部分数据，并把他们用手挡起来，但是还有一部分等待处理，接下来思考”如何根据已经处理的数据和当前的数据来推导还没有处理的数据“就行了。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四个技巧&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对上面的考点和注意点，我总结了四个技巧来应对，这都是在平时做题中非常实用的技巧。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;虚拟头&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来了解虚拟头的意义之前，先给大家做几个小测验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Q1: 如下代码 ans.next 指向什么？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ans = ListNode(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;ans.next = head&lt;br/&gt;head = head.next&lt;br/&gt;head = head.next&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;A1: 最开始的 head。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Q2：如下代码 ans.next 指向什么？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ans = ListNode(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;head = ans&lt;br/&gt;head.next = ListNode(&lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;head.next = ListNode(&lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;A2: ListNode(4)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;似乎也不难，我们继续看一道题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Q3: 如下代码 ans.next 指向什么？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ans = ListNode(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;head = ans&lt;br/&gt;head.next = ListNode(&lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;head = ListNode(&lt;span&gt;2&lt;/span&gt;)&lt;br/&gt;head.next = ListNode(&lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;A3: ListNode(3)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果三道题你都答对了，那么恭喜你，这一部分可以跳过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你没有懂也没关系，我这里简单解释一下你就懂了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「ans.next 指向什么取决于最后切断 ans.next 指向的地方在哪」&lt;/strong&gt;。比如 Q1，ans.next 指向的是 head，我们假设其指向的内存编号为 &lt;code&gt;9527&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjXJ3MdqLHicNlnc0R7ADc8ZWKAbTOwyAUdX0YzlpHbTQ2EXQGd4Jyuow/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后执行 &lt;code&gt;head = head.next&lt;/code&gt; （ans 和 head 被切断联系了），此时的内存图：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;我们假设头节点的 next 指针指向的节点的内存地址为 10200&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjfYjy0obPe9tiaPea1DOdz9fZXicp7CNyZ7icC5yoAgkv10yPiaJ3OdJRFQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不难看出，ans 没变。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于第二个例子。一开始和上面例子一样，都是指向 9527。而后执行了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;head.next = ListNode(&lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;head.next = ListNode(&lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ans 和 head 又同时指向 ListNode(3) 了。如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjYzdJEHmOHJ0mFuGX3cGRx8JWP1f7K5ssFZmUYgBIoyM5qKiaRxzaaiaQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;head.next = ListNode(4)&lt;/code&gt; 也是同理。因此最终的指向 ans.next 是 ListNode(4)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看最后一个。前半部分和 Q2 是一样的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ans = ListNode(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;head = ans&lt;br/&gt;head.next = ListNode(&lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照上面的分析，此时 head 和 ans 的 next 都指向 ListNode(3)。关键是下面两行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;head = ListNode(&lt;span&gt;2&lt;/span&gt;)&lt;br/&gt;head.next = ListNode(&lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjb5KiaSefEjZicfU9y6ibwPWwwQy59bgXtia75vhy3FMyH2Nt1QcQVucAPA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指向了 &lt;code&gt;head = ListNode(2)&lt;/code&gt; 之后， head 和 ans 的关系就被切断了，&lt;strong&gt;「当前以及之后所有的 head 操作都不会影响到 ans」&lt;/strong&gt;，因此 ans 还指向被切断前的节点，因此 ans.next 输出的是 ListNode(3)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;花了这么大的篇幅讲这个东西的原因就是，指针操作是链表的核心，如果这些基础不懂， 那么就很难做。接下来，我们介绍主角 - 虚拟头。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信做过链表的小伙伴都听过这么个名字。为什么它这么好用？它的作用无非就两个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;将头节点变成中间节点，简化判断。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过在合适的时候断开链接，返回链表的中间节点。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我上面提到了链表的三个注意，有一个是边界。头节点是最常见的边界，那如果&lt;strong&gt;「我们用一个虚拟头指向头节点，虚拟头就是新的头节点了，而虚拟头不是题目给的节点，不参与运算，因此不需要特殊判断」&lt;/strong&gt;，虚拟头就是这个作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果题目需要返回链表中间的某个节点呢？实际上也可借助虚拟节点。由于我上面提到的指针的操作，实际上，你可以新建一个虚拟头，然后让虚拟头在恰当的时候（刚好指向需要返回的节点）断开连接，这样我们就可以返回虚拟头的 next 就 ok 了。25. K 个一组翻转链表 就用到了这个技巧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不仅仅是链表， 二叉树等也经常用到这个技巧。比如我让你返回二叉树的最左下方的节点怎么做？我们也可以利用上面提到的技巧。新建一个虚拟节点，虚拟节点 next 指向当前节点，并跟着一起走，在递归到最左下的时候断开链接，最后返回 虚拟节点的 next 指针即可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;快慢指针&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;判断链表是否有环，以及环的入口都是使用快慢指针即可解决。这种题就是不知道不会，知道了就不容易忘。不多说了，大家可以参考我之前的题解 https://github.com/azl397985856/leetcode/issues/274#issuecomment-573985706 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了这个，求链表的交点也是快慢指针，算法也是类似的。不这都属于不知道就难，知道了就容易。且下次写不容易想不到或者出错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分大家参考我上面的题解理一下， 写一道题就可以掌握。接下来，我们来看下&lt;strong&gt;「穿针引线」&lt;/strong&gt;大法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外由于链表不支持随机访问，因此如果想要获取数组中间项和倒数第几项等特定元素就需要一些特殊的手段，而这个手段就是快慢指针。比如要找链表中间项就&lt;strong&gt;「搞两个指针，一个大步走（一次走两步），一个小步走（一次走一步）」&lt;/strong&gt;，这样快指针走到头，慢指针刚好在中间。如果要求链表倒数第 2 个，那就&lt;strong&gt;「让快指针先走一步，慢指针再走」&lt;/strong&gt;，这样快指针走到头，慢指针刚好在倒数第二个。这个原理不难理解吧？这种技巧属于&lt;strong&gt;「会了就容易，且不容易忘。不会就很难想出的类型」&lt;/strong&gt;，因此大家学会了拿几道题练一下就可以放下了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;穿针引线&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是链表的第二个考点 - &lt;strong&gt;「拼接链表」&lt;/strong&gt;。我在 25. K 个一组翻转链表，61. 旋转链表 和 92. 反转链表 II都用了这个方法。穿针引线是我自己起的一个名字，起名字的好处就是方便记忆。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方法通常不是最优解，但是好理解，方便书写，不易出错，推荐新手用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是以反转链表为例，只不过这次是&lt;code&gt;反转链表的中间一部分&lt;/code&gt;，那我们该怎么做？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjmq4Kc1PgDuzFOIyKfG9WLgpF4JxRuuLTpaSPwHcibd9yt3Q5vNOxDLg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反转前面我们已经讲过了，于是我假设链表已经反转好了，那么如何将反转好的链表拼后去呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjR0iaM5AQGmX7jYJlOicD7pA9JTovibNiczgtbSxw8Zfl18K5VYs70icvlYg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们想要的效果是这样的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjOOvhQYtictSQ3YCzCiafQQicYw3sBGviaAgXe0iaQlrq6dppq89NUEZ5Hgw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那怎么达到图上的效果呢？我的做法是从做到右给断点编号。如图有两个断点，共涉及到四个节点。于是我给它们依次编号为 a，b，c，d。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实 a，d 分别是需要反转的链表部分的前驱和后继（不参与反转），而 b 和 c 是需要反转的部分的头和尾（参与反转）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此除了 cur， 多用两个指针 pre 和 next 即可找到 a，b，c，d。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;找到后就简单了，直接&lt;strong&gt;「穿针引线」&lt;/strong&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;a.next = c&lt;br/&gt;b.next = d&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjJeibAnKTWHhwvJ3v0YBk1kT8k6mfW7RKO9mWpaHGEQnCyq72RWmfPyA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这不就好了么？我记得的就有 25 题，61 题 和 92 题都是这么做的，清晰不混乱。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;先穿再排后判空&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是四个技巧的最后一个技巧了。虽然是最后讲，但并不意味着它不重要。相反，它的实操价值很大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续回到上面讲的链表反转题。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cur = head&lt;br/&gt;pre = &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; cur != tail:&lt;br/&gt;    &lt;span&gt;# 留下联系方式&lt;/span&gt;&lt;br/&gt;    next = cur.next&lt;br/&gt;    &lt;span&gt;# 修改指针&lt;/span&gt;&lt;br/&gt;    cur.next = pre&lt;br/&gt;    &lt;span&gt;# 继续往下走&lt;/span&gt;&lt;br/&gt;    pre = cur&lt;br/&gt;    cur = next&lt;br/&gt;&lt;span&gt;# 反转后的新的头尾节点返回出去&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么时候需要判断 next 是否存在，上面两行代码先写哪个呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是这样？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    next = cur.next&lt;br/&gt;    cur.next = pre&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是这样？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    cur.next = pre&lt;br/&gt;    next = cur.next&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;先穿&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我给你的建议是：先穿。这里的穿是修改指针，包括反转链表的修改指针和穿针引线的修改指针。&lt;strong&gt;「先别管顺序，先穿」&lt;/strong&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;再排&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;穿完之后，代码的总数已经确定了，无非就是排列组合让代码没有 bug。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此第二步考虑顺序，那上面的两行代码哪个在前？应该是先 next = cur.next ，原因在于后一条语句执行后 cur.next 就变了。由于上面代码的作用是反转，那么其实经过 cur.next = pre 之后链表就断开了，后面的都访问不到了，也就是说此时你&lt;strong&gt;「只能返回头节点这一个节点」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，有假如有十行&lt;strong&gt;「穿」&lt;/strong&gt;的代码，我们很多时候没有必要全考虑。我们&lt;strong&gt;「需要考虑的仅仅是被改变 next 指针的部分」&lt;/strong&gt;。比如 cur.next = pre 的 cur 被改了 next。因此下面用到了 cur.next 的地方就要考虑放哪。其他代码不需要考虑。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;后判空&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和上面的原则类似，穿完之后，代码的总数已经确定了，无非就是看看哪行代码会空指针异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和上面的技巧一样，我们很多时候没有必要全考虑。我们&lt;strong&gt;「需要考虑的仅仅是被改变 next 指针的部分」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如这样的代码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; cur:&lt;br/&gt;    cur = cur.next&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们考虑 cur 是否为空呢？很明显不可能，因为 while 条件保证了，因此不需判空。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那如何是这样的代码呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;while&lt;/span&gt; cur:&lt;br/&gt;    next = cur.next&lt;br/&gt;    n_next = next.next&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上代码有两个 next，第一个不用判空，上面已经讲了。而第二个是需要的，因为 next 可能是 null。如果 next 是 null ，就会引发空指针异常。因此需要修改为类似这样的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;while&lt;/span&gt; cur:&lt;br/&gt;    next = cur.next&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; next: &lt;span&gt;break&lt;/span&gt;&lt;br/&gt;    n_next = next.next&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是我们给大家的四个技巧了。相信有了这四个技巧，写链表题就没那么艰难啦~ ^_^&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;题目推荐&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后推荐几道题给大家，用今天学到的知识解决它们吧~&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;21. 合并两个有序链表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;82. 删除排序链表中的重复元素 II&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;83. 删除排序链表中的重复元素&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;86. 分隔链表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;92. 反转链表 II&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;138. 复制带随机指针的链表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;141. 环形链表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;142. 环形链表 II&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;143. 重排链表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;148. 排序链表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;206. 反转链表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;234. 回文链表&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数组和栈从逻辑上没有大的区别，你看基本操作都是差不多的。如果是单链表，我们无法在 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的时间拿到前驱节点，这也是为什么我们遍历的时候老是维护一个前驱节点的原因。但是本质原因其实是链表的增删操作都依赖前驱节点。这是链表的基本操作，是链表的特性天生决定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能有的同学有这样的疑问”考点你只讲了指针的修改和链表拼接，难道说链表就只会这些就够了？那我做的题怎么还需要我会前缀和啥的呢？你是不是坑我呢？“&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我前面说了，所有的数据结构底层都是数组和链表中的一种或两种。而我们这里讲的链表指的是考察链表的基本操作的题目。因此如果题目中需要你使用归并排序去合并链表，那其实归并排序这部分已经不再本文的讨论范围了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，你去力扣或者其他 OJ 翻链表题会发现他们的链表题大都指的是入参是链表，且你需要对链表进行一些操作的题目。再比如树的题目大多数是入参是树，你需要在树上进行搜索的题目。也就是说需要操作树（比如修改树的指针）的题目很少，比如有一道题让你给树增加一个 right 指针，指向同级的右侧指针，如果已经是最右侧了，则指向空。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链表的基本操作就是增删查，牢记链表的基本操作和复杂度是解决问题的基本。有了这些基本还不够，大家要牢记我的口诀”一个原则，两个考点，三个注意，四个技巧“。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;做链表的题，要想入门，无它，唯画图尔。能画出图，并根据图进行操作你就入门了，甭管你写的代码有没有 bug 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而链表的题目核心的考察点只有两个，一个是指针操作，典型的就是反转。另外一个是链表的拼接。这两个既是链表的精髓，也是主要考点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;知道了考点肯定不够，我们写代码哪些地方容易犯错？要注意什么？这里我列举了三个容易犯错的地方，分别是环，边界和前后序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中环指的是节点之间的相互引用，环的题目如果题目本身就有环， 90 % 双指针可以解决，如果本身没有环，那么环就是我们操作指针的时候留下的。如何解决出现环的问题？那就是&lt;strong&gt;「画图，然后聚焦子结构，忽略其他信息。」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了环，另外一个容易犯错的地方往往是边界的条件， 而边界这块链表头的判断又是一个大头。克服这点，我们需要认真读题，看题目的要求以及返回值，另外一个很有用的技巧是虚拟节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果大家用递归去解链表的题， 一定要注意自己写的是前序还是后序。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果是前序，那么&lt;strong&gt;「只思考子结构即可，前面的已经处理好了，怎么处理的，不用管。非要问，那就是同样方法。后面的也不需考虑如何处理，非要问，那就是用同样方法」&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果是后续，那么&lt;strong&gt;「只思考子结构即可，后面的已经处理好了，怎么处理的，不用管。非要问，那就是同样方法。前面的不需考虑如何处理。非要问，那就是用同样方法」&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想递归和迭代都写， 我推荐你用前序遍历。因为前序遍历容易改成不用栈的递归。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是链表专题的全部内容了。大家对此有何看法，欢迎给我留言，我有时间都会一一查看回答。更多算法套路可以访问我的 LeetCode 题解仓库：https://github.com/azl397985856/leetcode 。目前已经 37K star 啦。大家也可以关注我的公众号《力扣加加》带你啃下算法这块硬骨头。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我整理的 1000 多页的电子书已经开发下载了，大家可以去我的公众号《力扣加加》后台回复电子书获取。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjq6qANsfUxlzaibhM61Ucgiciaibc6DiblKEqhzPGc9QP1f46KnjGdT0rx4w/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTdIIUUoh8P2v7gW2tiahdUBjLkswNzuZXXWf8ibuGLnRAgoQJW8koNLG6GfYKgkjk60HzXpxCU3d96A/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;链表标签: &lt;span&gt;https://leetcode-cn.com/tag/linked-list/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b7ac2d765ebc367c86e8a2d69606a883</guid>
<title>Hadoop 框架：DataNode 工作机制详解</title>
<link>https://toutiao.io/k/1eyo5g3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1&gt;&lt;span&gt;一、工作机制&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基础描述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.68046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvC3Dic45XOMP8QsYQ73Q0V4Yr3SToxLxdW58Z42Q0pG5fKicDkSPzqcjrlbicWehxpMPM2cdBIkicVKUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;DataNode上数据块以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是数据块元数据包括长度、校验、时间戳；&lt;/p&gt;&lt;p&gt;DataNode启动后向NameNode服务注册，并周期性的向NameNode上报所有的数据块元数据信息；&lt;/p&gt;&lt;p&gt;DataNode与NameNode之间存在心跳机制，每3秒一次，返回结果带有NameNode给该DataNode的执行命令，例如数据复制删除等，如果超过10分钟没有收到DataNode的心跳，则认为该节点不可用。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、自定义时长&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;通过hdfs-site.xml配置文件，修改超时时长和心跳，其中中的heartbeat.recheck.interval的单位为毫秒，dfs.heartbeat.interval的单位为秒。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.namenode.heartbeat.recheck-interval&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;600000&lt;span&gt;&amp;lt;/&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.heartbeat.interval&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;6&lt;span&gt;&amp;lt;/&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;3、新节点上线&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;当前机器的节点为hop01、hop02、hop03，在此基础上新增节点hop04。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;基本步骤&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;基于当前一个服务节点克隆得到hop04环境；&lt;/p&gt;&lt;p&gt;修改Centos7相关基础配置，并删除data和log文件；&lt;/p&gt;&lt;p&gt;启动DataNode，即可关联到集群；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;4、多目录配置&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;该配置同步集群下服务，格式化启动hdfs及yarn，上传文件测试。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.datanode.data.dir&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;file:///${hadoop.tmp.dir}/dfs/data01,file:///${hadoop.tmp.dir}/dfs/data02&lt;span&gt;&amp;lt;/&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;二、黑白名单配置&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、白名单设置&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;配置白名单，该配置分发到集群服务下；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@hop01 hadoop]&lt;span&gt;# pwd&lt;/span&gt;&lt;br/&gt;/opt/hadoop2&lt;span&gt;.7&lt;/span&gt;/etc/hadoop&lt;br/&gt;[root@hop01 hadoop]&lt;span&gt;# vim dfs.hosts&lt;/span&gt;&lt;br/&gt;hop01&lt;br/&gt;hop02&lt;br/&gt;hop03&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置hdfs-site.xml，该配置分发到集群服务下；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.hosts&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;/opt/hadoop2.7/etc/hadoop/dfs.hosts&lt;span&gt;&amp;lt;/&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刷新NameNode&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# hdfs dfsadmin -refreshNodes&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刷新ResourceManager&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# yarn rmadmin -refreshNodes&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;2、黑名单设置&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;配置黑名单，该配置分发到集群服务下；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@hop01 hadoop]&lt;span&gt;# pwd&lt;/span&gt;&lt;br/&gt;/opt/hadoop2&lt;span&gt;.7&lt;/span&gt;/etc/hadoop&lt;br/&gt;[root@hop01 hadoop]&lt;span&gt;# vim dfs.hosts.exclude&lt;/span&gt;&lt;br/&gt;hop04&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置hdfs-site.xml，该配置分发到集群服务下；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.hosts.exclude&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;/opt/hadoop2.7/etc/hadoop/dfs.hosts.exclude&lt;span&gt;&amp;lt;/&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刷新NameNode&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# hdfs dfsadmin -refreshNodes&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刷新ResourceManager&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# yarn rmadmin -refreshNodes&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;三、文件存档&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基础描述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;HDFS存储的特点，适合海量数据的大文件，如果每个文件都很小，会产生大量的元数据信息，占用过多的内存，并且在NaemNode和DataNode交互的时候变的缓慢。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3632075471698113&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvC3Dic45XOMP8QsYQ73Q0V4YeRS7F4xbSIUEfYFRxfoKDNJf7duVHOgJXsESjib98YD5qJuOCKTXHHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;848&quot;/&gt;&lt;/p&gt;&lt;p&gt;HDFS可以对一些小的文件进行归档存储，这里可以理解为压缩存储，即减少NameNode的消耗，也较少交互的负担，同时还允许对归档的小文件访问，提高整体的效率。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、操作流程&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;创建两个目录&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 存放小文件&lt;/span&gt;&lt;br/&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# hadoop fs -mkdir -p /hopdir/harinput&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 存放归档文件&lt;/span&gt;&lt;br/&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# hadoop fs -mkdir -p /hopdir/haroutput&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;上传测试文件&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# hadoop fs -moveFromLocal LICENSE.txt /hopdir/harinput&lt;/span&gt;&lt;br/&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# hadoop fs -moveFromLocal README.txt /hopdir/harinput&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;归档操作&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# bin/hadoop archive -archiveName output.har -p /hopdir/harinput /hopdir/haroutput&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看归档文件&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# hadoop fs -lsr har:///hopdir/haroutput/output.har&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.11484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvC3Dic45XOMP8QsYQ73Q0V4Yay7ciczYIv2ImiaJ7FIh6MQ9my5tRJdCb62iaqeCjyiaVh502lOJmPNPiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;这样就可以把原来的那些小文件块删除即可。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;解除归档文件&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 执行解除&lt;/span&gt;&lt;br/&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# hadoop fs -cp har:///hopdir/haroutput/output.har/* /hopdir/haroutput&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 查看文件&lt;/span&gt;&lt;br/&gt;[root@hop01 hadoop2&lt;span&gt;.7&lt;/span&gt;]&lt;span&gt;# hadoop fs -ls /hopdir/haroutput&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;四、回收站机制&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基础描述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;如果开启回收站功能，被删除的文件在指定的时间内，可以执行恢复操作，防止数据被误删除情况。HDFS内部的具体实现就是在NameNode中启动一个后台线程Emptier，这个线程专门管理和监控系统回收站下面的文件，对于放进回收站的文件且超过生命周期，就会自动删除。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、开启配置&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;该配置需要同步到集群下的所有服务；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@hop01 hadoop]# vim /opt/hadoop2.7/etc/hadoop/core-site.xml &lt;br/&gt;# 添加内容&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;fs.trash.interval&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fs.trash.interval=0，表示禁用回收站机制，=1表示开启。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、源代码地址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https:&lt;span&gt;//github.com/cicadasmile/big-data-parent&lt;/span&gt;&lt;br/&gt;GitEE·地址&lt;br/&gt;https:&lt;span&gt;//gitee.com/cicadasmile/big-data-parent&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3783359497645212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCjMheLZtcM2iaVMBOpIUKR4CDRCG9FLT5K6NmGXvG7exrW0TSuDjnTKJQ5PDq8j8Y7PHDd17Z3gicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>