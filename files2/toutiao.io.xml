<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6787e3c662a83de655f2395cb96421e2</guid>
<title>与大厂面试官过招系列：Redis 篇</title>
<link>https://toutiao.io/k/eao9ccn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h3 data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.33184855233853006&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;898&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRgzIV2YTLYP1C9K6m6ZesXIGMic8cBk5es1ZicMDfULrExGEw49a51icWhlYkA1pXmib62xNNUDrMgXA/640?wx_fmt=png&quot;/&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;今天，我面试了某大厂的java开发岗位，迎面走来一位风尘仆仆的中年男子，手里拿着屏幕还亮着的mac，他冲着我礼貌的笑了笑，然后说了句“不好意思，让你久等了”，然后示意我坐下，说：“我们开始吧。看了你的简历，觉得你对redis应该掌握的不错，我们今天就来讨论下redis......”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我想：“来就来，兵来将挡水来土掩”。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-height=&quot;551&quot; data-ratio=&quot;0.5622448979591836&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBP7VvWhZGVxia6TL8VH7bTIsplbE9ibhibAc86rV89EK65InW9jIWzHEwOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;980&quot; data-width=&quot;980&quot;/&gt;&lt;/p&gt;&lt;h2&gt;Redis是什么？&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：你先来说下redis是什么吧&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：（这不就是总结下redis的定义和特点嘛）Redis是C语言开发的一个开源的（遵从BSD协议）高性能键值对（key-value）的内存数据库，可以用作数据库、缓存、消息中间件等。它是一种NoSQL（not-only sql，泛指非关系型数据库）的数据库。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我顿了一下，接着说：Redis作为一个内存数据库。1、性能优秀，数据在内存中，读写速度非常快，支持并发10W QPS；2、单进程单线程，是线程安全的，采用IO多路复用机制；3、丰富的数据类型，支持字符串（strings）、散列（hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）等；4、支持数据持久化。可以将内存中数据保存在磁盘中，重启时加载；5、主从复制，哨兵，高可用；6、可以用作分布式锁；7、可以作为消息中间件使用，支持发布订阅&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;五种数据类型&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.4681274900398406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPlaZuQBdQgmH15uy6NkaF5h3XpASGxicg7YSBqbjvHRND6puSWbQCWww/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1004&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;我：首先redis内部使用一个redisObject对象来表示所有的key和value，redisObject最主要的信息如上图所示：type表示一个value对象具体是何种数据类型，encoding是不同数据类型在redis内部的存储方式。比如：type=string表示value存储的是一个普通字符串，那么encoding可以是raw或者int。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我顿了一下，接着说：下面我简单说下5种数据类型：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、string是redis最基本的类型，可以理解成与memcached一模一样的类型，一个key对应一个value。value不仅是string，也可以是数字。string类型是二进制安全的，意思是redis的string类型可以包含任何数据，比如jpg图片或者序列化的对象。string类型的值最大能存储512M。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、Hash是一个键值（key-value）的集合。redis的hash是一个string的key和value的映射表，Hash特别适合存储对象。常用命令：hget,hset,hgetall等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、list列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边） 常用命令：lpush、rpush、lpop、rpop、lrange(获取列表片段)等。应用场景：list应用场景非常多，也是Redis最重要的数据结构之一，比如twitter的关注列表，粉丝列表都可以用list结构来实现。数据结构：list就是链表，可以用来当消息队列用。redis提供了List的push和pop操作，还提供了操作某一段的api，可以直接查询或者删除某一段的元素。实现方式：redis list的是实现是一个双向链表，既可以支持反向查找和遍历，更方便操作，不过带来了额外的内存开销。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、set是string类型的无序集合。集合是通过hashtable实现的。set中的元素是没有顺序的，而且是没有重复的。常用命令：sdd、spop、smembers、sunion等。应用场景：redis set对外提供的功能和list一样是一个列表，特殊之处在于set是自动去重的，而且set提供了判断某个成员是否在一个set集合中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5、zset和set一样是string类型元素的集合，且不允许重复的元素。常用命令：zadd、zrange、zrem、zcard等。使用场景：sorted set可以通过用户额外提供一个优先级（score）的参数来为成员排序，并且是插入有序的，即自动排序。当你需要一个有序的并且不重复的集合列表，那么可以选择sorted set结构。和set相比，sorted set关联了一个double类型权重的参数score，使得集合中的元素能够按照score进行有序排列，redis正是通过分数来为集合中的成员进行从小到大的排序。实现方式：Redis sorted set的内部使用HashMap和跳跃表(skipList)来保证数据的存储和有序，HashMap里放的是成员到score的映射，而跳跃表里存放的是所有的成员，排序依据是HashMap里存的score，使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;数据类型应用场景总结&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.7027777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPjvoW6uibkfBk82Hbibu6BfeYMdHdCskoYEBgDoqk0SlNQye6eEHTErsA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;Redis缓存&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependencies&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;org&lt;span&gt;.&lt;/span&gt;&lt;span&gt;springframework&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;boot&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;-&lt;/span&gt;boot&lt;span&gt;-&lt;/span&gt;starter&lt;span&gt;-&lt;/span&gt;data&lt;span&gt;-&lt;/span&gt;redis&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;org&lt;span&gt;.&lt;/span&gt;&lt;span&gt;apache&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;commons&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;commons&lt;span&gt;-&lt;/span&gt;pool2&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;org&lt;span&gt;.&lt;/span&gt;&lt;span&gt;springframework&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;boot&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;-&lt;/span&gt;boot&lt;span&gt;-&lt;/span&gt;starter&lt;span&gt;-&lt;/span&gt;web&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;org&lt;span&gt;.&lt;/span&gt;&lt;span&gt;springframework&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;session&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;-&lt;/span&gt;session&lt;span&gt;-&lt;/span&gt;data&lt;span&gt;-&lt;/span&gt;redis&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;org&lt;span&gt;.&lt;/span&gt;&lt;span&gt;projectlombok&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;lombok&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;optional&lt;span&gt;&amp;gt;true&amp;lt;/&lt;/span&gt;optional&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;org&lt;span&gt;.&lt;/span&gt;&lt;span&gt;springframework&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;boot&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;-&lt;/span&gt;boot&lt;span&gt;-&lt;/span&gt;starter&lt;span&gt;-&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;scope&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;scope&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;spring-boot-starter-data-redis:在spring boot 2.x以后底层不再使用Jedis，而是换成了Lettuce。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;commons-pool2：用作redis连接池，如不引入启动会报错&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;spring-session-data-redis：spring session引入，用作共享session。配置文件application.yml的配置：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;server:&lt;br/&gt;  port&lt;span&gt;:&lt;/span&gt; 8082&lt;br/&gt;  servlet&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;    session&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;      timeout&lt;span&gt;:&lt;/span&gt; 30ms&lt;br/&gt;spring:&lt;br/&gt;  cache&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;    type&lt;span&gt;:&lt;/span&gt; redis&lt;br/&gt;  redis&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;    host&lt;span&gt;:&lt;/span&gt; 127&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    port&lt;span&gt;:&lt;/span&gt; 6379&lt;br/&gt;    password&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;#&lt;/span&gt; redis默认情况下有16个分片&lt;span&gt;，&lt;/span&gt;这里配置具体使用的分片&lt;span&gt;，&lt;/span&gt;默认为0&lt;br/&gt;    database&lt;span&gt;:&lt;/span&gt; 0&lt;br/&gt;    lettuce&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;      pool&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;#&lt;/span&gt; 连接池最大连接数&lt;span&gt;(&lt;/span&gt;使用负数表示没有限制&lt;span&gt;),&lt;/span&gt;默认8&lt;br/&gt;        max&lt;span&gt;-&lt;/span&gt;active&lt;span&gt;:&lt;/span&gt; 100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;创建实体类User.java&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; Serializable&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID &lt;span&gt;=&lt;/span&gt; 662692455422902539L&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer id&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String name&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer age&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;User&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;User&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Integer id&lt;span&gt;,&lt;/span&gt; String name&lt;span&gt;,&lt;/span&gt; Integer age&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this.&lt;/span&gt;&lt;span&gt;id&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this.&lt;/span&gt;&lt;span&gt;age&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; age&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; Integer &lt;span&gt;getId&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Integer id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this.&lt;/span&gt;&lt;span&gt;id&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String name&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; Integer &lt;span&gt;getAge&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; age&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setAge&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Integer age&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this.&lt;/span&gt;&lt;span&gt;age&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; age&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @Override&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; String &lt;span&gt;toString&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;User{&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&quot;id=&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; id &lt;span&gt;+&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&quot;, name=&#x27;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; name &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&#x27;\&#x27;&#x27;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&quot;, age=&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; age &lt;span&gt;+&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&#x27;}&#x27;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;RedisTemplate的使用方式&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;默认情况下的模板只能支持RedisTemplate&amp;lt;String, String&amp;gt;，也就是只能存入字符串，所以自定义模板很有必要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;添加配置类RedisCacheConfig.java&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;br/&gt;@AutoConfigureAfter&lt;span&gt;(&lt;/span&gt;RedisAutoConfiguration&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;RedisCacheConfig&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @Bean&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; RedisTemplate&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; Serializable&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;redisCacheTemplate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;LettuceConnectionFactory connectionFactory&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        RedisTemplate&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; Serializable&lt;span&gt;&amp;gt;&lt;/span&gt; template &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RedisTemplate&lt;span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br/&gt;        template&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setKeySerializer&lt;/span&gt;&lt;span&gt;(new&lt;/span&gt; StringRedisSerializer&lt;span&gt;());&lt;/span&gt;&lt;br/&gt;        template&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setValueSerializer&lt;/span&gt;&lt;span&gt;(new&lt;/span&gt; GenericJackson2JsonRedisSerializer&lt;span&gt;());&lt;/span&gt;&lt;br/&gt;        template&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setConnectionFactory&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;connectionFactory&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; template&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;测试类&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;br/&gt;@RequestMapping&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;/user&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserController&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger &lt;span&gt;=&lt;/span&gt; LogManager&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getLogger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;UserController&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @Autowired&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; StringRedisTemplate stringRedisTemplate&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @Autowired&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RedisTemplate&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; Serializable&lt;span&gt;&amp;gt;&lt;/span&gt; redisCacheTemplate&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @RequestMapping&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;/test&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        redisCacheTemplate&lt;span&gt;.&lt;/span&gt;&lt;span&gt;opsForValue&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;userkey&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; User&lt;span&gt;(&lt;/span&gt;1&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;张三&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; 25&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;        User user &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;User&lt;span&gt;)&lt;/span&gt; redisCacheTemplate&lt;span&gt;.&lt;/span&gt;&lt;span&gt;opsForValue&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;userkey&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;        logger&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;当前获取对象：{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在浏览器访问，观察后台日志 http://localhost:8082/user/test&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.08425925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBP1bVeRLmxMd4pgUcplJAwlnOkzqFEMDGDAXfuMfuvmU5ibf2WSvoDj0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;使用spring cache集成redis&lt;/h3&gt;&lt;p&gt;&lt;span&gt;spring cache具备很好的灵活性，不仅能够使用SPEL(spring expression language)来定义缓存的key和各种condition，还提供了开箱即用的缓存临时存储方案，也支持和主流的专业缓存如EhCache、Redis、Guava的集成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;定义接口UserService.java&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;UserService&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    User &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;User user&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;void&lt;/span&gt; &lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; id&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    User &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Integer id&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;接口实现类UserServiceImpl.java&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Service&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserServiceImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; UserService&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger &lt;span&gt;=&lt;/span&gt; LogManager&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getLogger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;UserServiceImpl&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Map&lt;span&gt;&amp;lt;&lt;/span&gt;Integer&lt;span&gt;,&lt;/span&gt; User&lt;span&gt;&amp;gt;&lt;/span&gt; userMap &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HashMap&lt;span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        userMap&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;1&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; User&lt;span&gt;(&lt;/span&gt;1&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;肖战&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; 25&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;        userMap&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;2&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; User&lt;span&gt;(&lt;/span&gt;2&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;王一博&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; 26&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;        userMap&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;3&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; User&lt;span&gt;(&lt;/span&gt;3&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;杨紫&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; 24&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    @CachePut&lt;span&gt;(&lt;/span&gt;value &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;user&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; key &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;#user.id&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    @Override&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; User &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;User user&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        userMap&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; user&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;        logger&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;进入save方法，当前存储对象：{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; user&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @CacheEvict&lt;span&gt;(&lt;/span&gt;value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;user&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; key &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;#id&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    @Override&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        userMap&lt;span&gt;.&lt;/span&gt;&lt;span&gt;remove&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;        logger&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;进入delete方法，删除成功&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @Cacheable&lt;span&gt;(&lt;/span&gt;value &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;user&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; key &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;#id&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    @Override&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; User &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Integer id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        logger&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;进入get方法，当前获取对象：{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; userMap&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)==null?null:&lt;/span&gt;userMap&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;).&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; userMap&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;为了方便演示数据库的操作，这里直接定义了一个Map&amp;lt;Integer,User&amp;gt; userMap，这里的核心是三个注解@Cachable、@CachePut和@CacheEvict。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试类：UserController&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;br/&gt;@RequestMapping&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;/user&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserController&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger &lt;span&gt;=&lt;/span&gt; LogManager&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getLogger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;UserController&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @Autowired&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; StringRedisTemplate stringRedisTemplate&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @Autowired&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RedisTemplate&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; Serializable&lt;span&gt;&amp;gt;&lt;/span&gt; redisCacheTemplate&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @Autowired&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; UserService userService&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @RequestMapping&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;/test&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        redisCacheTemplate&lt;span&gt;.&lt;/span&gt;&lt;span&gt;opsForValue&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;userkey&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; User&lt;span&gt;(&lt;/span&gt;1&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;张三&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; 25&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;        User user &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;User&lt;span&gt;)&lt;/span&gt; redisCacheTemplate&lt;span&gt;.&lt;/span&gt;&lt;span&gt;opsForValue&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;userkey&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;        logger&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;当前获取对象：{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    @RequestMapping&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;/add&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        User user &lt;span&gt;=&lt;/span&gt; userService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;save&lt;/span&gt;&lt;span&gt;(new&lt;/span&gt; User&lt;span&gt;(&lt;/span&gt;4&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;李现&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; 30&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;        logger&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;添加的用户信息：{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @RequestMapping&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;/delete&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;delete&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        userService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;4&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    @RequestMapping&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;/get/{id}&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;@PathVariable&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;id&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; String idStr&lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;StringUtils&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isBlank&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;idStr&lt;span&gt;))&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;id为空&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;        Integer id &lt;span&gt;=&lt;/span&gt; Integer&lt;span&gt;.&lt;/span&gt;&lt;span&gt;parseInt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;idStr&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;        User user &lt;span&gt;=&lt;/span&gt; userService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;        logger&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;获取的用户信息：{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;用缓存要注意，启动类要加上一个注解开启缓存&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;span&gt;(&lt;/span&gt;exclude&lt;span&gt;=&lt;/span&gt;DataSourceAutoConfiguration&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;@EnableCaching&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Application&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String&lt;span&gt;[]&lt;/span&gt; args&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    SpringApplication&lt;span&gt;.&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Application&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; args&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、先调用添加接口：http://localhost:8082/user/add&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.05277777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPKTnkXPVgchKXf6AFwnpcDLHNvVJcbcBWM582yJcpyzJkIRnH9YgJsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;2、再调用查询接口，查询id=4的用户信息：&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.053703703703703705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPLCuZoIPUaIF1W0kAgm0cYGk2FXZBlvFSfnV7UheVNZIDhGX9s9iabFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;可以看出，这里已经从缓存中获取数据了，因为上一步add方法已经把id=4的用户数据放入了redis缓存 3、调用删除方法，删除id=4的用户信息，同时清除缓存&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.04722222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPD2u2O74tdE1a9kiaSP7CY2RU8ib0q3ToKiaRj2m79jr2VWdxrkoTJ2dLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;4、再次调用查询接口，查询id=4的用户信息：&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.03333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPEgcK2nE4Gw0TGMM4ND71GJz4g8iaEUicJ1xoQvibx9lE8s58ADF62HVug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;没有了缓存，所以进入了get方法，从userMap中获取。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;缓存注解&lt;/h2&gt;&lt;p&gt;&lt;span&gt;1、@Cacheable 根据方法的请求参数对其结果进行缓存&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;key：缓存的key，可以为空，如果指定要按照SPEL表达式编写，如果不指定，则按照方法的所有参数进行组合。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;value：缓存的名称，必须指定至少一个（如 @Cacheable (value=&#x27;user&#x27;)或者@Cacheable(value={&#x27;user1&#x27;,&#x27;user2&#x27;})）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;condition：缓存的条件，可以为空，使用SPEL编写，返回true或者false，只有为true才进行缓存。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2、@CachePut 根据方法的请求参数对其结果进行缓存，和@Cacheable不同的是，它每次都会触发真实方法的调用。参数描述见上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、@CacheEvict 根据条件对缓存进行清空&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;缓存问题&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：看了一下你的demo，简单易懂。那你在实际项目中使用缓存有遇到什么问题或者会遇到什么问题你知道吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：缓存和数据库数据一致性问题：分布式环境下非常容易出现缓存和数据库间数据一致性问题，针对这一点，如果项目对缓存的要求是强一致性的，那么就不要使用缓存。我们只能采取合适的策略来降低缓存和数据库间数据不一致的概率，而无法保证两者间的强一致性。合适的策略包括合适的缓存更新策略，更新数据库后及时更新缓存、缓存失败时增加重试机制。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：Redis雪崩了解吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：我了解的，目前电商首页以及热点数据都会去做缓存，一般缓存都是定时任务去刷新，或者查不到之后去更新缓存的，定时任务刷新就有一个问题。举个栗子：如果首页所有Key的失效时间都是12小时，中午12点刷新的，我零点有个大促活动大量用户涌入，假设每秒6000个请求，本来缓存可以抗住每秒5000个请求，但是缓存中所有Key都失效了。此时6000个/秒的请求全部落在了数据库上，数据库必然扛不住，真实情况可能DBA都没反应过来直接挂了，此时，如果没什么特别的方案来处理，DBA很着急，重启数据库，但是数据库立马又被新流量给打死了。这就是我理解的缓存雪崩。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我心想：同一时间大面积失效，瞬间Redis跟没有一样，那这个数量级别的请求直接打到数据库几乎是灾难性的，你想想如果挂的是一个用户服务的库，那其他依赖他的库所有接口几乎都会报错，如果没做熔断等策略基本上就是瞬间挂一片的节奏，你怎么重启用户都会把你打挂，等你重启好的时候，用户早睡觉去了，临睡之前，骂骂咧咧“什么垃圾产品”。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官摸摸了自己的头发：嗯，还不错，那这种情况你都是怎么应对的？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：处理缓存雪崩简单，在批量往Redis存数据的时候，把每个Key的失效时间都加个随机值就好了，这样可以保证数据不会再同一时间大面积失效。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;setRedis&lt;span&gt;（&lt;/span&gt;key&lt;span&gt;,&lt;/span&gt; value&lt;span&gt;,&lt;/span&gt; time&lt;span&gt;+&lt;/span&gt;Math&lt;span&gt;.&lt;/span&gt;&lt;span&gt;random&lt;/span&gt;&lt;span&gt;()*&lt;/span&gt;10000&lt;span&gt;）&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;如果Redis是集群部署，将热点数据均匀分布在不同的Redis库中也能避免全部失效。或者设置热点数据永不过期，有更新操作就更新缓存就好了（比如运维更新了首页商品，那你刷下缓存就好了，不要设置过期时间），电商首页的数据也可以用这个操作，保险。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：那你了解缓存穿透和击穿么，可以说说他们跟雪崩的区别吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：嗯，了解，先说下缓存穿透吧，缓存穿透是指缓存和数据库中都没有的数据，而用户（黑客）不断发起请求，举个栗子：我们数据库的id都是从1自增的，如果发起id=-1的数据或者id特别大不存在的数据，这样的不断攻击导致数据库压力很大，严重会击垮数据库。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我又接着说：至于缓存击穿嘛，这个跟缓存雪崩有点像，但是又有一点不一样，缓存雪崩是因为大面积的缓存失效，打崩了DB，而缓存击穿不同的是缓存击穿是指一个Key非常热点，在不停地扛着大量的请求，大并发集中对这一个点进行访问，当这个Key在失效的瞬间，持续的大并发直接落到了数据库上，就在这个Key的点上击穿了缓存。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官露出欣慰的眼光：那他们分别怎么解决？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：缓存穿透我会在接口层增加校验，比如用户鉴权，参数做校验，不合法的校验直接return，比如id做基础校验，id&amp;lt;=0直接拦截。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：那你还有别的方法吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：我记得Redis里还有一个高级用法 &lt;strong&gt;布隆过滤器（Bloom Filter）&lt;/strong&gt;这个也能很好的预防缓存穿透的发生，他的原理也很简单，就是利用高效的数据结构和算法快速判断出你这个Key是否在数据库中存在，不存在你return就好了，存在你就去查DB刷新KV再return。缓存击穿的话，设置热点数据永不过期，或者加上互斥锁就搞定了。作为暖男，代码给你准备好了，拿走不谢。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String &lt;span&gt;getData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String key&lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;//从Redis查询数据&lt;br/&gt;&lt;/span&gt;        String result &lt;span&gt;=&lt;/span&gt; getDataByKV&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;//参数校验&lt;br/&gt;&lt;/span&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;StringUtils&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isBlank&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;))&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;try&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;//获得锁&lt;br/&gt;&lt;/span&gt;                &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;reenLock&lt;span&gt;.&lt;/span&gt;&lt;span&gt;tryLock&lt;/span&gt;&lt;span&gt;())&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;//去数据库查询&lt;br/&gt;&lt;/span&gt;                    result &lt;span&gt;=&lt;/span&gt; getDataByDB&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;//校验&lt;br/&gt;&lt;/span&gt;                    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;StringUtils&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isNotBlank&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;))&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;//插进缓存&lt;br/&gt;&lt;/span&gt;                        setDataToKV&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;,&lt;/span&gt; result&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;//睡一会再拿&lt;br/&gt;&lt;/span&gt;                    Thread&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;100L&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;                    result &lt;span&gt;=&lt;/span&gt; getData&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;}&lt;/span&gt; &lt;span&gt;finally&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;//释放锁&lt;br/&gt;&lt;/span&gt;                reenLock&lt;span&gt;.&lt;/span&gt;&lt;span&gt;unlock&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; result&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Redis为何这么快&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：redis作为缓存大家都在用，那redis一定很快咯？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：当然了，官方提供的数据可以达到100000+的QPS（每秒内的查询次数），这个数据不比Memcached差！&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：redis这么快，它的“多线程模型”你了解吗？（露出邪魅一笑）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：您是想问Redis这么快，为什么还是单线程的吧。Redis确实是单进程单线程的模型，因为Redis完全是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章的采用单线程的方案了（毕竟采用多线程会有很多麻烦）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：嗯，是的。那你能说说Redis是单线程的，为什么还能这么快吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：可以这么说吧。第一：Redis完全基于内存，绝大部分请求是纯粹的内存操作，非常迅速，数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度是O(1)。第二：数据结构简单，对数据操作也简单。第三：采用单线程，避免了不必要的上下文切换和竞争条件，不存在多线程导致的CPU切换，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有死锁问题导致的性能消耗。第四：使用多路复用IO模型，非阻塞IO。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Redis和Memcached的区别&lt;/h2&gt;&lt;h2&gt;淘汰策略&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;面试官：那你说说你知道的redis的淘汰策略有哪些？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;我：Redis有六种淘汰策略&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.5022222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPLbRY8SEAuJXKr97RA86lDjDD6dHBzjqgc6r6jvsoblGAOiaE83mqfbw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;675&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;补充一下：Redis4.0加入了LFU(least frequency use)淘汰策略，包括volatile-lfu和allkeys-lfu，通过统计访问频率，将访问频率最少，即最不经常使用的KV淘汰。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;持久化&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：你对redis的持久化机制了解吗？能讲一下吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：redis为了保证效率，数据缓存在了内存中，但是会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中，以保证数据的持久化。Redis的持久化策略有两种：1、RDB：快照形式是直接把内存中的数据保存到一个dump的文件中，定时保存，保存策略。2、AOF：把所有的对Redis的服务器进行修改的命令都存到一个文件里，命令的集合。Redis默认是快照RDB的持久化方式。当Redis重启的时候，它会优先使用AOF文件来还原数据集，因为AOF文件保存的数据集通常比RDB文件所保存的数据集更完整。你甚至可以关闭持久化功能，让数据只在服务器运行时存。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：那你再说下RDB是怎么工作的？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：默认Redis是会以快照&quot;RDB&quot;的形式将数据持久化到磁盘的一个二进制文件dump.rdb。工作原理简单说一下：当Redis需要做持久化时，Redis会fork一个子进程，子进程将数据写到磁盘上一个临时RDB文件中。当子进程完成写临时文件后，将原来的RDB替换掉，这样的好处是可以copy-on-write。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：RDB的优点是：这种文件非常适合用于备份：比如，你可以在最近的24小时内，每小时备份一次，并且在每个月的每一天也备份一个RDB文件。这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。RDB非常适合灾难恢复。RDB的缺点是：如果你需要尽量避免在服务器故障时丢失数据，那么RDB不合适你。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：那你要不再说下AOF？？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：（说就一起说下吧）使用AOF做持久化，每一个写命令都通过write函数追加到appendonly.aof中，配置方式如下&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;appendfsync yes&lt;br/&gt;appendfsync always #每次有数据修改发生时都会写入AOF文件。&lt;br/&gt;appendfsync everysec #每秒钟同步一次，该策略为AOF的缺省策略。&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;AOF可以做到全程持久化，只需要在配置中开启 appendonly yes。这样redis每执行一个修改数据的命令，都会把它添加到AOF文件中，当redis重启时，将会读取AOF文件进行重放，恢复到redis关闭前的最后时刻。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我顿了一下，继续说：使用AOF的优点是会让redis变得非常耐久。可以设置不同的fsync策略，aof的默认策略是每秒钟fsync一次，在这种配置下，就算发生故障停机，也最多丢失一秒钟的数据。缺点是对于相同的数据集来说，AOF的文件体积通常要大于RDB文件的体积。根据所使用的fsync策略，AOF的速度可能会慢于RDB。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官又问：你说了这么多，那我该用哪一个呢？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我：如果你非常关心你的数据，但仍然可以承受数分钟内的数据丢失，那么可以额只使用RDB持久。AOF将Redis执行的每一条命令追加到磁盘中，处理巨大的写入会降低Redis的性能，不知道你是否可以接受。数据库备份和灾难恢复：定时生成RDB快照非常便于进行数据库备份，并且RDB恢复数据集的速度也要比AOF恢复的速度快。当然了，redis支持同时开启RDB和AOF，系统重启后，redis会优先使用AOF来恢复数据，这样丢失的数据会最少。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;主从复制&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：redis单节点存在单点故障问题，为了解决单点问题，一般都需要对redis配置从节点，然后使用哨兵来监听主节点的存活状态，如果主节点挂掉，从节点能继续提供缓存功能，你能说说redis主从复制的过程和原理吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我有点懵，这个说来就话长了。但幸好提前准备了：主从配置结合哨兵模式能解决单点故障问题，提高redis可用性。从节点仅提供读操作，主节点提供写操作。对于读多写少的状况，可给主节点配置多个从节点，从而提高响应效率。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我顿了一下，接着说：关于复制过程，是这样的：1、从节点执行slaveof[masterIP][masterPort]，保存主节点信息 2、从节点中的定时任务发现主节点信息，建立和主节点的socket连接 3、从节点发送Ping信号，主节点返回Pong，两边能互相通信 4、连接建立后，主节点将所有数据发送给从节点（数据同步） 5、主节点把当前的数据同步给从节点后，便完成了复制的建立过程。接下来，主节点就会持续的把写命令发送给从节点，保证主从数据一致性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面试官：那你能详细说下数据同步的过程吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;（我心想：这也问的太细了吧）我：可以。redis2.8之前使用sync[runId][offset]同步命令，redis2.8之后使用psync[runId][offset]命令。两者不同在于，sync命令仅支持全量复制过程，psync支持全量和部分复制。介绍同步之前，先介绍几个概念：runId：每个redis节点启动都会生成唯一的uuid，每次redis重启后，runId都会发生变化。offset：主节点和从节点都各自维护自己的主从复制偏移量offset，当主节点有写入命令时，offset=offset+命令的字节长度。从节点在收到主节点发送的命令后，也会增加自己的offset，并把自己的offset发送给主节点。这样，主节点同时保存自己的offset和从节点的offset，通过对比offset来判断主从节点数据是否一致。repl_backlog_size：保存在主节点上的一个固定长度的先进先出队列，默认大小是1MB。（1）主节点发送数据给从节点过程中，主节点还会进行一些写操作，这时候的数据存储在复制缓冲区中。从节点同步主节点数据完成后，主节点将缓冲区的数据继续发送给从节点，用于部分复制。（2）主节点响应写命令时，不但会把命名发送给从节点，还会写入复制积压缓冲区，用于复制命令丢失的数据补救。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.6969026548672567&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPS52YaEfckBSLyor0SWCMtPaCOb6W96RabILUKJBLNXBVSZ40BwStkw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;452&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;上面是psync的执行流程：从节点发送psync[runId][offset]命令，主节点有三种响应：（1）FULLRESYNC：第一次连接，进行全量复制 （2）CONTINUE：进行部分复制 （3）ERR：不支持psync命令，进行全量复制&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.7979166666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBP3pUwgJEOPfmEst4qv7nk0UxuAwXJFplu2rSOtsr1zFPKicR7lEquUgg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;关于部分复制有以下几点说明：1、部分复制主要是Redis针对全量复制的过高开销做出的一种优化措施，使用psync[runId][offset]命令实现。当从节点正在复制主节点时，如果出现网络闪断或者命令丢失等异常情况时，从节点会向主节点要求补发丢失的命令数据，主节点的复制积压缓冲区将这部分数据直接发送给从节点，这样就可以保持主从节点复制的一致性。补发的这部分数据一般远远小于全量数据。2、主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内的复制积压缓冲区依然可以保存最近一段时间的写命令数据。3、当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行ID。因此会把它们当做psync参数发送给主节点，要求进行部分复制。4、主节点接收到psync命令后首先核对参数runId是否与自身一致，如果一致，说明之前复制的是当前主节点；之后根据参数offset在复制积压缓冲区中查找，如果offset之后的数据存在，则对从节点发送+COUTINUE命令，表示可以进行部分复制。因为缓冲区大小固定，若发生缓冲溢出，则进行全量复制。5、主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面是全量复制的流程。主要有以下几步：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、从节点发送psync ? -1命令（因为第一次发送，不知道主节点的runId，所以为?，因为是第一次复制，所以offset=-1）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、主节点发现从节点是第一次复制，返回FULLRESYNC {runId} {offset}，runId是主节点的runId，offset是主节点目前的offset。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、从节点接收主节点信息后，保存到info中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、主节点在发送FULLRESYNC后，启动bgsave命令，生成RDB文件（数据持久化）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5、主节点发送RDB文件给从节点。到从节点加载数据完成这段期间主节点的写命令放入缓冲区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6、从节点清理自己的数据库数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;7、从节点加载RDB文件，将数据保存到自己的数据库中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;8、如果从节点开启了AOF，从节点会异步重写AOF文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于部分复制有以下几点说明：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、部分复制主要是Redis针对全量复制的过高开销做出的一种优化措施，使用psync[runId][offset]命令实现。当从节点正在复制主节点时，如果出现网络闪断或者命令丢失等异常情况时，从节点会向主节点要求补发丢失的命令数据，主节点的复制积压缓冲区将这部分数据直接发送给从节点，这样就可以保持主从节点复制的一致性。补发的这部分数据一般远远小于全量数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内的复制积压缓冲区依然可以保存最近一段时间的写命令数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行ID。因此会把它们当做psync参数发送给主节点，要求进行部分复制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、主节点接收到psync命令后首先核对参数runId是否与自身一致，如果一致，说明之前复制的是当前主节点；之后根据参数offset在复制积压缓冲区中查找，如果offset之后的数据存在，则对从节点发送+COUTINUE命令，表示可以进行部分复制。因为缓冲区大小固定，若发生缓冲溢出，则进行全量复制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5、主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;哨兵&lt;/h2&gt;&lt;p&gt;&lt;span&gt;面试官：那主从复制会存在哪些问题呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我：主从复制会存在以下问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、一旦主节点宕机，从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令所有从节点去复制新的主节点，整个过程需要人工干预。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、主节点的写能力受到单机的限制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、主节点的存储能力受到单机的限制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、原生复制的弊端在早期的版本中也会比较突出，比如：redis复制中断后，从节点会发起psync。此时如果同步不成功，则会进行全量同步，主库执行全量备份的同时，可能会造成毫秒或秒级的卡顿。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面试官：那比较主流的解决方案是什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我：当然是哨兵啊。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面试官：那么问题又来了。那你说下哨兵有哪些功能？&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;1.1506944444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPN9oHBIgWTI7ppZFT357P59qx6MOXjspG1FibjBQQH9K8Z7FibldaScdg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;我：如图，是Redis Sentinel（哨兵）的架构图。Redis Sentinel（哨兵）主要功能包括主节点存活检测、主从运行情况检测、自动故障转移、主从切换。Redis Sentinel最小配置是一主一从。Redis的Sentinel系统可以用来管理多个Redis服务器，该系统可以执行以下四个任务：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、监控：不断检查主服务器和从服务器是否正常运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、通知：当被监控的某个redis服务器出现问题，Sentinel通过API脚本向管理员或者其他应用程序发出通知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、自动故障转移：当主节点不能正常工作时，Sentinel会开始一次自动的故障转移操作，它会将与失效主节点是主从关系的其中一个从节点升级为新的主节点，并且将其他的从节点指向新的主节点，这样人工干预就可以免了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、配置提供者：在Redis Sentinel模式下，客户端应用在初始化时连接的是Sentinel节点集合，从中获取主节点的信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面试官：那你能说下哨兵的工作原理吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我：话不多说，直接上图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.7125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPgAxkHVKG9e73vl8nia7nMhgZmCH3qTYXWjjzb2IlDeQ8ECSyhW0yicWg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;1、每个Sentinel节点都需要定期执行以下任务：每个Sentinel以每秒一次的频率，向它所知的主服务器、从服务器以及其他的Sentinel实例发送一个PING命令。（如上图）&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.7527777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPtyWiadB8agJFPkMPHF2Qq3wiaibGCBng8KE6BDdVmtQibA2dqRwicPozqRQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;2、如果一个实例距离最后一次有效回复PING命令的时间超过down-after-milliseconds所指定的值，那么这个实例会被Sentinel标记为主观下线。（如上图）&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.7527777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPJPDuOBGk1zDDNH4RK7icau5CnKEQm5flxucJO9u0QJrFUO0Z920YkQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;3、如果一个主服务器被标记为主观下线，那么正在监视这个服务器的所有Sentinel节点，要以每秒一次的频率确认主服务器的确进入了主观下线状态。&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.7528901734104047&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPaQTUlUiaykpQ6NjAmCREQViaSUHFqZgibQlcQEjggHMqrYoricnicMxF1Yw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;692&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;4、如果一个主服务器被标记为主观下线，并且有足够数量的Sentinel（至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断，那么这个主服务器被标记为客观下线。&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.6798611111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPY33BkNiariaz38TQQTBJ80b0t6jGa0nPenOR7tG94MFaWTEB91cZdfFg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;5、一般情况下，每个Sentinel会以每10秒一次的频率向它已知的所有主服务器和从服务器发送INFO命令，当一个主服务器被标记为客观下线时，Sentinel向下线主服务器的所有从服务器发送INFO命令的频率，会从10秒一次改为每秒一次。&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.7569444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPx3Yf2iaAbT7MI0SEJLrcv3hhPUlp8liaOckq7ZJLx6naIO1gIzYpODdw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;6、Sentinel和其他Sentinel协商客观下线的主节点的状态，如果处于SDOWN状态，则投票自动选出新的主节点，将剩余从节点指向新的主节点进行数据复制。&lt;/span&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.38263888888888886&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgRebwcOibYdCAvMHVDVBwkBPQkZHiaN5PeYf7kw7GvJ3yBOic47qqReW5jpV5wbd6qNiaqxaY2bgzmqZA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;7、当没有足够数量的Sentinel同意主服务器下线时，主服务器的客观下线状态就会被移除。当主服务器重新向Sentinel的PING命令返回有效回复时，主服务器的主观下线状态就会被移除。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;&lt;span&gt;本文在一次面试的过程中讲述了Redis是什么，Redis的特点和功能，Redis缓存的使用，Redis为什么能这么快，Redis缓存的淘汰策略，持久化的两种方式，Redis高可用部分的主从复制和哨兵的基本原理。只要功夫深，铁杵磨成针，平时准备好，面试不用慌。虽然面试不一定是这样问的，但万变不离其“宗”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（笔者觉得这种问答形式的博客很不错，可读性强而且读后记的比较深刻）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;注：关注本公众号，回复关键字“Redis”，可免费获取《Redis设计与实现(第二版)》，成为叫板面试官的人，你也可以~&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;·················· &lt;/span&gt;&lt;span&gt;END&lt;/span&gt;&lt;span&gt; ··················&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关注公众号，免费领取程序员成长大礼包&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3MDg5MDkzOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQmUQ0Aca9qSYNFn0tQEXQc5EibBkqQLYtibYBj1hXuagwXkNc3kVwplHxIl7KQfBIiagysgn9GDUUibw/0?wx_fmt=png&quot; data-nickname=&quot;架构精进之路&quot; data-alias=&quot;jiagou_jingjin&quot; data-signature=&quot;十年研发风雨路，大厂架构师，CSDN博客专家。专注软件架构研究，技术学习与职业成长，坚持分享接地气儿的架构技术干货文章！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;十年研发路，大厂架构师，&lt;/span&gt;&lt;span&gt;CSDN博客专家&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;专注架构技术学习及分享，职业与认知升级&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;坚持分享接地气儿的干货，&lt;span&gt;期待与你一起成长&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3MDg5MDkzOA==&amp;amp;action=getalbum&amp;amp;album_id=1536564239870558210#wechat_redirect&quot; textvalue=&quot;消息中间件&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;消息中间件&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3MDg5MDkzOA==&amp;amp;action=getalbum&amp;amp;album_id=1536567322449117185#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;架构应用汇总&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3MDg5MDkzOA==&amp;amp;action=getalbum&amp;amp;album_id=1536569434063077381#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; data-linktype=&quot;2&quot;&gt;认知升级迭代&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3MDg5MDkzOA==&amp;amp;action=getalbum&amp;amp;album_id=1536561900824657922#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;MySQL实用探秘&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98311&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTqLjdQBs7fV8zqHRaQhA2ibia13fFn6ibS5qr5PpmZoxd8nlhAyJu7d1CjLicAruicOEb7uxibEGM476xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87502&quot;&gt;&lt;p&gt;&lt;span&gt;「架构精进之路」专注架构研究，技术分享&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;点“赞”和“在看”哦&lt;/span&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1.5925925925925926&quot; data-type=&quot;gif&quot; data-w=&quot;135&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/noz2jw2hPlWiaCrGuJxBicU5mcib3QapDLyo6eKnNVm9dPTV4Z1SicHLtrCCwOG9gblMBFlKf7p9cvwL6wIkZJvamg/640?wx_fmt=gif&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1967e4669fe521dd62d3f526fc959289</guid>
<title>如果你也会手抖输错命令，那就必须给你推荐这个 Fuck 工具</title>
<link>https://toutiao.io/k/zv6r0sz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;【导语】：The Fuck 是一个命令输出校验工具，能自动校对输入命令并执行正确的指令。大概早在 2015 年就火了。&lt;/p&gt;
&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;The Fuck 是一款功能强大的应用程序，可以校对并纠正控制台中命令的错误。它的开发者透露，设计灵感来源于这条推特：&lt;/p&gt;
&lt;p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-6ccae5da2a27e851fbbf1c654d24babf_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;566&quot; data-rawheight=&quot;243&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-6ccae5da2a27e851fbbf1c654d24babf_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;566&quot; data-rawheight=&quot;243&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-6ccae5da2a27e851fbbf1c654d24babf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-6ccae5da2a27e851fbbf1c654d24babf_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;简单的运行例子：  &lt;/p&gt;
&lt;p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-53361675b8cf86fc10002a22b3546ebc_b.gif&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;686&quot; data-rawheight=&quot;379&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-53361675b8cf86fc10002a22b3546ebc_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-53361675b8cf86fc10002a22b3546ebc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;686&quot; data-rawheight=&quot;379&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-53361675b8cf86fc10002a22b3546ebc_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-53361675b8cf86fc10002a22b3546ebc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-53361675b8cf86fc10002a22b3546ebc_b.gif&quot;/&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更多的例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;➜ apt-get install vim  
E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied)  
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?  

➜ fuck  
sudo apt-get install vim [enter/↑/↓/ctrl+c]  
[sudo] password for nvbn:  
Reading package lists... Done  
...  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;fatal: The current branch master has no upstream branch.  
To push the current branch and set the remote as upstream, use  

    git push --set-upstream origin master  


➜ fuck  
git push --set-upstream origin master [enter/↑/↓/ctrl+c]  
Counting objects: 9, done.  
...  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;➜ puthon  
No command &#x27;puthon&#x27; found, did you mean:  
 Command &#x27;python&#x27; from package &#x27;python-minimal&#x27; (main)  
 Command &#x27;python&#x27; from package &#x27;python3&#x27; (main)  
zsh: command not found: puthon  

➜ fuck  
python [enter/↑/↓/ctrl+c]  
Python 3.4.2 (default, Oct  8 2014, 13:08:17)  
...  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;项目地址是：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/nvbn/thefuck&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/nvbn/thefuck&lt;/span&gt;&lt;span class=&quot;invisible&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;下载安装&lt;/h3&gt;

&lt;ol&gt;&lt;li&gt;Ubuntu/Mint：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;sudo apt update  
sudo apt install python3-dev python3-pip python3-setuptools  
sudo pip3 install thefuck  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;FreeBSD：&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;ChromeOS:&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;其他操作系统使用pip进行安装：&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;升级：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pip3 install thefuck --upgrade  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;作用机制&lt;/h3&gt;
&lt;p&gt;The Fuck 尝试将错误的命令与规则匹配，如果找到匹配项，则使用匹配的规则创建一个新命令并执行。规则很多没办法一一列举，简单罗列几个，各位有兴趣的话到官网上查找。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;adb_unknown_command：修复拼写错误的命令，例如adb logcta&lt;/li&gt;
&lt;li&gt;cat_dir：尝试cat目录时使用ls替换cat&lt;/li&gt;
&lt;li&gt;cd_parent：更改cd..为cd ..&lt;/li&gt;
&lt;li&gt;docker_not_command：修复了错误的docker命令，如docker tags&lt;/li&gt;
&lt;li&gt;git_branch_delete：更改 git branch -d 为 git branch -D&lt;/li&gt;
&lt;li&gt;go_unknown_command：修复错误的go命令，例如go bulid&lt;/li&gt;
&lt;li&gt;java：在运行Java程序时删除.java扩展名 与此同时，The Fuck也允许用户自定义匹配规则。&lt;/li&gt;
&lt;li&gt;在~/.config/thefuck/rules目录下创建一个文件名为your-rule-name.py的违建，规则文件必须包含两个函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;match(command: Command) -&amp;gt; bool  
get_new_command(command: Command) -&amp;gt; str | list[str]  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;side_effect(old_command: Command, fixed_command: str) -&amp;gt; None  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;开源前哨&lt;/code&gt; 日常分享热门、有趣和实用的开源项目。参与维护 10万+ Star 的开源技术资源库，包括：Python、Java、C/C++、Go、JS、CSS、Node.js、PHP、.NET 等。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d1f5af17095f5c420f20fc6b3b5ab0f1</guid>
<title>解码无代码/低代码创业圈子及其玩家</title>
<link>https://toutiao.io/k/dzgh03u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;10年前，互联网上的大多数网络和应用程序设计都依赖于开发人员，他们不得不夜以继日地工作来让代码能够跑起来。而今天，任何拥有电脑和互联网接入的人都可以使用极其强大的应用程序——无代码和低代码工具来构建网站、应用程序或内部工具。它不仅限于网站和应用程序，今天即使没有深厚IT功底的人也可以在网上经营整个公司，建立电子商务业务，甚至创办银行！例如，最近年经常性收入达到500万美元的Nuage Stays公司，就是使用Airtable、Zapier等&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.makerpad.co/stories/nadim-el-asmar-boostrapping-to-5m-with-no-code-tools&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;低代码工具构建&lt;/a&gt;&lt;/u&gt;的，用于管理预订、收集和存储数据、创建日历等。这个崇尚新技术的时代并未把它给落下， 已经有不少人记录了这个趋势， 并有越来越多的人在关注这个趋势： &lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b8dd5c7f482eba3dfe2f36fd37ea911e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1548&quot; data-rawheight=&quot;750&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-b8dd5c7f482eba3dfe2f36fd37ea911e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1548&quot; data-rawheight=&quot;750&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-b8dd5c7f482eba3dfe2f36fd37ea911e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b8dd5c7f482eba3dfe2f36fd37ea911e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt; &lt;/p&gt;&lt;p&gt;&lt;b&gt;无代码/低代码意味着什么？它是&lt;/b&gt;一种编程方法和运动，不一定涉及编写代码，而是与图形用户界面（GUI）一起，人们可以使用模板、拖放函数、会话界面和逻辑序列来实现任何数字产品。 &lt;/p&gt;&lt;p&gt;这一新兴类别是关于&lt;b&gt;软件开发的民主化&lt;/b&gt;，释放数字化给任何能够使用电脑、电话和互联网的人带来的潜力。 &lt;/p&gt;&lt;p&gt;让我们明确一点：无代码和低代码工具不是为了消除代码或工程师。它们是为了让程序员的生活更轻松，同时向每个人开放访问权限，让每个人都成为“公民开发者”。他们是为了抽象代码的复杂性，专注于设计和逻辑。这意味着不再需要做无聊、重复的以及和项目无关的任务。 &lt;/p&gt;&lt;p&gt;通过这些工具，世界任何地方的销售/营销/产品/运营团队和创始人都可以构建复杂的工作流程和应用程序，而不需要任何技术知识。 &lt;/p&gt;&lt;p&gt;&lt;b&gt;投资界似乎也注意到了这一趋势&lt;/b&gt;：仅在上个月 , 就宣布了多起非常大的融资： &lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.forbes.com/sites/alexkonrad/2021/03/08/zapier-bootstraps-to-5-billion-valuation/%3Fsh%3D34042ad71c8e&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt; Zapier 第二轮投资前估值为5&lt;/a&gt;0亿美元；&lt;/u&gt; &lt;/li&gt;&lt;li&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//techcrunch.com/2021/02/17/low-code-focused-outsystems-raises-150m-at-a-9-5b-valuation/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;OutSystems获得 1.5亿美元融资，估值达到95亿美元&lt;/a&gt;&lt;/u&gt; &lt;/li&gt;&lt;li&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//techcrunch.com/2021/02/22/creatio-raises-68m-as-the-low-code-space-keeps-attracting-huge-checks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Creatio第一轮即获得6800万美元融资。 &lt;/a&gt;&lt;/u&gt; &lt;/li&gt;&lt;li&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//techcrunch.com/2021/02/22/rows-formerly-dashdash-raises-16m-to-build-and-populate-web-apps-using-only-spreadsheet-skills/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rows获得1600万B轮融资&lt;/a&gt;&lt;/u&gt;, &lt;/li&gt;&lt;li&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//venturebeat.com/2021/02/17/oribi-raises-15-5-million-to-challenge-google-analytics-with-no-code-marketing-insights/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Oribi 火的1550万美元B轮融资&lt;/a&gt;&lt;/u&gt; &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//venturebeat.com/2021/02/17/oribi-raises-15-5-million-to-challenge-google-analytics-with-no-code-marketing-insights/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;等等...势头如此强劲，以至于有些人认为这是一种&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//techcrunch.com/2020/07/21/tracking-the-growth-of-low-code-no-code-startups/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;热潮&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//venturebeat.com/2021/02/17/oribi-raises-15-5-million-to-challenge-google-analytics-with-no-code-marketing-insights/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;，与我们近年来看到的&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//venturebeat.com/2021/02/17/oribi-raises-15-5-million-to-challenge-google-analytics-with-no-code-marketing-insights/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;聊天机器人、ICOs-和大麻相关的&lt;/a&gt;&lt;/u&gt;爆炸相当... &lt;/p&gt;&lt;p&gt;在和使用它们的建造者和制造商一起使用了生态系统中的数百种工具，我们通常将这一类别分为： &lt;/p&gt;&lt;ol&gt;&lt;li&gt;无&lt;b&gt;代码&lt;/b&gt;：这包括 &lt;/li&gt;&lt;ol&gt;&lt;li&gt;字面上零代码的工具，提供给那些不知道也永远不想知道软件如何工作的人。他们只是想用它，且看起来不错就行。&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//onuniverse.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;（例如Universe，Gumroad&lt;/a&gt;等）。这些工具在设计上也不会太复杂。这个领域的公司感觉就像变魔法一样。你可以在15分钟内在手机上建立一个网站，或者在几分钟内以灵活的动态方式将Stripe计费带到你的产品中。它们通常易于使用，客户支持也很给力，大多数公司都有充满活力的非技术人员社区。 &lt;/li&gt;&lt;li&gt;工具和软件，面向那些善于系统思考并熟悉&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//technically.substack.com/p/whats-an-api&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;应用程序编程接口（API&lt;/a&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//technically.substack.com/p/whats-an-api&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;）&lt;/a&gt;的人（&lt;/b&gt;例如Airtable、Zapier、Webflow等）。这些工具确实有能力配置得更复杂，如果你想深入的话，还包括代码元素。这一细分市场不仅有趣，而且已经挤满了估值超过1亿美元的公司，它正迅速成为生态系统的滋生地。想想Atlassian作为一个完整的生态系统都做了什么，然后将其应用于&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.nocodelytics.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Webflow&lt;/a&gt;&lt;/u&gt; 或者 &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//microsaasidea.substack.com/p/issue7-building-1k-10k-mrr-micro&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Airtable ecosystems&lt;/a&gt;&lt;/u&gt;. &lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;低代码：&lt;/b&gt;面向设计师、产品人员、创始人和工程师的工具和软件，他们希望找到更快、更好、更容易、更便宜的方法来构建和扩展，而不放弃代码带来的定制。（例如&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.8base.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;8base&lt;/a&gt;&lt;/u&gt;, &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//retool.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Retool&lt;/a&gt;&lt;/u&gt;, &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//internal.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Internal&lt;/a&gt;&lt;/u&gt;等）。这一领域的公司仍然需要一定程度的技术专长，但通常支持用户提高生产力，并在日常任务上节省大量时间。 &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;深入挖掘，这些工具存在于哪些行业/垂直行业&lt;/b&gt;？我们花了几个月的时间试图回答这个问题，列出了145家独特的公司和12个需要我们关注的类别。 &lt;/p&gt;&lt;p&gt;&lt;b&gt;我们的计划是定期更新这篇文章&lt;/b&gt;，这样它就可以成为这个行业的热门文章。如果你正在建立一家你认为应该包括在内的公司，把它放在评论里或者在推特上联系我们！&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/W4ytOcrnIG6D9K5NNI9LzA&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;点击这里查看 145 个低代码产品及公司的分类分析&lt;/a&gt;。 &lt;/p&gt;&lt;p/&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e85200afd5799782b269294ae89ad896</guid>
<title>Kubebuilder 实战：CRUD</title>
<link>https://toutiao.io/k/9jssaxp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body&quot;&gt;&lt;p&gt;在前两天的文章当中我们搭建好了本地的 K8s 开发环境，并且了解了 kubebuilder 的基本使用方法，今天就从我之前遇到的一个真实需求出发完整的写一个 Operator&lt;/p&gt;&lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;/&gt;需求分析&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;/&gt;背景&lt;/h3&gt;&lt;p&gt;在 K8s 运行的过程当中我们发现总是存在一些业务由于安全，可用性等各种各样的原因需要跑在一些独立的节点池上，这些节点池里面可能再划分一些小的节点池。&lt;/p&gt;&lt;p&gt;虽然我们可以使用 &lt;code&gt;Taint&lt;/code&gt;，&lt;code&gt;Label&lt;/code&gt;对节点进行划分，使用 &lt;code&gt;nodeSelector&lt;/code&gt; 和 &lt;code&gt;tolerations&lt;/code&gt;让 Pod 跑在指定的节点上，但是这样主要会有两个问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一个是管理上不方便，在实际的使用过程中我们会发现存在错配漏配的情况&lt;br/&gt;虽然在 &lt;code&gt;v1.16&lt;/code&gt; 之后也可以使用 &lt;code&gt;RuntimeClass&lt;/code&gt;来简化 pod 的配置，但是 &lt;code&gt;RuntimClass&lt;/code&gt; 并不和节点进行关联&lt;sup id=&quot;fnref:1&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;容器运行时类(Runtime Class): https://kubernetes.io/zh/docs/concepts/containers/runtime-class/&amp;#10;&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;&lt;li&gt;另一个就是拓展需求不好实现，例如我们想要的某个节点属于网段或者当节点加入这个节点池自动开墙等&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;/&gt;需求&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;对应用来说我们可以在创建或者更新应用时便捷的选择的对应的节点池，默认情况下不需要进行选择&lt;/li&gt;&lt;li&gt;对于节点池来说&lt;ul&gt;&lt;li&gt;一个节点池可能有多个节点，并且一个节点也可能同时属于多个节点池&lt;/li&gt;&lt;li&gt;不同节点池的标签、污点信息可能不同&lt;/li&gt;&lt;li&gt;后续可以支持不同节点池的机型、安全组或者防火墙策略不同等&lt;/li&gt;&lt;li&gt;&lt;code&gt;MVP&lt;/code&gt; 版本支持标签、污点即可&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;方案设计&quot;&gt;&lt;a href=&quot;#方案设计&quot; class=&quot;headerlink&quot; title=&quot;方案设计&quot;/&gt;方案设计&lt;/h2&gt;&lt;p&gt;节点池资源如下&lt;/p&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;apiVersion:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;nodes.lailin.xyz/v1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;NodePool&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;taints:&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;node-pool.lailin.xyz&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;test&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;effect:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;NoSchedule&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;labels:&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;node-pool.lailin.xyz/test:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;节点和节点池之间的映射如何建立？&lt;/p&gt;&lt;p&gt;Pod 和节点池之间的映射如何建立？&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们可以复用 &lt;code&gt;RuntimeClass&lt;/code&gt;对象，当创建一个 NodePool 对象的时候我们就创建一个对应的 &lt;code&gt;RuntimeClass&lt;/code&gt; 对象，然后在 &lt;code&gt;Pod&lt;/code&gt; 中只需要加上 &lt;code&gt;runtimeClassName: myclass&lt;/code&gt; 就可以了&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;注: 对于 MVP 版本来说其实我们不需要使用自定义资源，只需要通过标签和 RuntimeClass 结合就能满足需求，但是这里为了展示一个完整的流程，我们使用了自定义资源&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;开发&quot;&gt;&lt;a href=&quot;#开发&quot; class=&quot;headerlink&quot; title=&quot;开发&quot;/&gt;开发&lt;/h2&gt;&lt;h3 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;/&gt;创建项目&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 初始化项目&lt;/span&gt;&lt;br/&gt;kubebuilder init --repo github.com/mohuishou/blog-code/k8s-operator/03-node-pool-operator --domain lailin.xyz --skip-go-version-check&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 创建 api&lt;/span&gt;&lt;br/&gt;kubebuilder create api --group nodes --version v1 --kind NodePool&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;定义对象&quot;&gt;&lt;a href=&quot;#定义对象&quot; class=&quot;headerlink&quot; title=&quot;定义对象&quot;/&gt;定义对象&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// NodePoolSpec 节点池&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; NodePoolSpec &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Taints 污点&lt;/span&gt;&lt;br/&gt;Taints []v1.Taint &lt;span class=&quot;hljs-string&quot;&gt;`json:&quot;taints,omitempty&quot;`&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Labels 标签&lt;/span&gt;&lt;br/&gt;Labels &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`json:&quot;labels,omitempty&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;/&gt;创建&lt;/h3&gt;&lt;p&gt;我们实现 &lt;code&gt;Reconcile&lt;/code&gt; 函数，&lt;code&gt;req&lt;/code&gt;会返回当前变更的对象的 &lt;code&gt;Namespace&lt;/code&gt;和&lt;code&gt;Name&lt;/code&gt;信息，有这两个信息，我们就可以获取到这个对象了，所以我们的操作就是&lt;/p&gt;&lt;ul&gt;&lt;li&gt;获取 &lt;code&gt;NodePool&lt;/code&gt; 对象&lt;/li&gt;&lt;li&gt;通过 &lt;code&gt;NodePool&lt;/code&gt; 对象生成对应的 &lt;code&gt;Label&lt;/code&gt; 查找是否已经存在对应的 &lt;code&gt;Label&lt;/code&gt; 的 Node&lt;ul&gt;&lt;li&gt;如果存在，就给对应的 &lt;code&gt;Node&lt;/code&gt; 加上对应的 &lt;code&gt;Taint&lt;/code&gt; 和 &lt;code&gt;Label&lt;/code&gt;&lt;/li&gt;&lt;li&gt;如果不存在就跳过&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;通过 &lt;code&gt;NodePool&lt;/code&gt; 生成对应的 &lt;code&gt;RuntimeClass&lt;/code&gt; ，查找是否已经存在对应的 &lt;code&gt;RuntimeClass&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(r *NodePoolReconciler)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Reconcile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ctx context.Context, req ctrl.Request)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ctrl.Result, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;_ = r.Log.WithValues(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nodepool&quot;&lt;/span&gt;, req.NamespacedName)&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 获取对象&lt;/span&gt;&lt;br/&gt;pool := &amp;amp;nodesv1.NodePool{}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := r.Get(ctx, req.NamespacedName, pool); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ctrl.Result{}, err&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nodes corev1.NodeList&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 查看是否存在对应的节点，如果存在那么就给这些节点加上数据&lt;/span&gt;&lt;br/&gt;err := r.List(ctx, &amp;amp;nodes, &amp;amp;client.ListOptions{LabelSelector: pool.NodeLabelSelector()})&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; client.IgnoreNotFound(err) != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ctrl.Result{}, err&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(nodes.Items) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {&lt;br/&gt;r.Log.Info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;find nodes, will merge data&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;nodes&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(nodes.Items))&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _, n := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; nodes.Items {&lt;br/&gt;n := n&lt;br/&gt;err := r.Patch(ctx, pool.Spec.ApplyNode(n), client.Merge)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ctrl.Result{}, err&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; runtimeClass v1beta1.RuntimeClass&lt;br/&gt;err = r.Get(ctx, client.ObjectKeyFromObject(pool.RuntimeClass()), &amp;amp;runtimeClass)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; client.IgnoreNotFound(err) != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ctrl.Result{}, err&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 如果不存在创建一个新的&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; runtimeClass.Name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; {&lt;br/&gt;err = r.Create(ctx, pool.RuntimeClass())&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ctrl.Result{}, err&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ctrl.Result{}, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;/&gt;更新&lt;/h3&gt;&lt;p&gt;相信聪明的你已经发现上面的创建逻辑存在很多的问题&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果 &lt;code&gt;NodePool&lt;/code&gt; 对象更新，&lt;code&gt;Node&lt;/code&gt; 是否更新对应的 &lt;code&gt;Taint&lt;/code&gt; 和&lt;code&gt;Label&lt;/code&gt;&lt;ul&gt;&lt;li&gt;如果 &lt;code&gt;NodePool&lt;/code&gt; 删除了一个 &lt;code&gt;Label&lt;/code&gt; 或&lt;code&gt;Taint&lt;/code&gt;对应 &lt;code&gt;Node&lt;/code&gt; 的&lt;code&gt;Label&lt;/code&gt;或&lt;code&gt;Taint&lt;/code&gt; 是否需要删除，怎么删除？&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;如果 &lt;code&gt;NodePool&lt;/code&gt; 对象更新，&lt;code&gt;RuntimeClass&lt;/code&gt;是否更新，如何更新&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们 &lt;code&gt;MVP&lt;/code&gt; 版本实现可以简单一些，我们约定，所有属于 &lt;code&gt;NodePool&lt;/code&gt; 的节点 &lt;code&gt;Tanit&lt;/code&gt; 和&lt;code&gt;Label&lt;/code&gt;信息都应该由 &lt;code&gt;NodePool&lt;/code&gt;管理，key 包含 kubernetes 标签污点除外&lt;/p&gt;&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs diff&quot;&gt;func (r *NodePoolReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {&lt;br/&gt;  // ....&lt;br/&gt;  &lt;br/&gt;if len(nodes.Items) &amp;gt; 0 {&lt;br/&gt;r.Log.Info(&quot;find nodes, will merge data&quot;, &quot;nodes&quot;, len(nodes.Items))&lt;br/&gt;for _, n := range nodes.Items {&lt;br/&gt;n := n&lt;br/&gt;&lt;br/&gt;// 更新节点的标签和污点信息&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+err := r.Update(ctx, pool.Spec.ApplyNode(n))&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-err := r.Patch(ctx, pool.Spec.ApplyNode(n), client.Merge)&lt;/span&gt;&lt;br/&gt;if err != nil {&lt;br/&gt;return ctrl.Result{}, err&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;//...&lt;br/&gt;&lt;br/&gt;// 如果存在则更新&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+err = r.Client.Patch(ctx, pool.RuntimeClass(), client.Merge)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+if err != nil {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+return ctrl.Result{}, err&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;return ctrl.Result{}, err&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;ApplyNode&lt;/code&gt; 方法如下所示，主要是修改节点的标签和污点信息&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ApplyNode 生成 Node 结构，可以用于 Patch 数据&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *NodePoolSpec)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ApplyNode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(node corev1.Node)&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;corev1&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 除了节点池的标签之外，我们只保留 k8s 的相关标签&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 注意：这里的逻辑如果一个节点只能属于一个节点池&lt;/span&gt;&lt;br/&gt;nodeLabels := &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;{}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; node.Labels {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; strings.Contains(k, &lt;span class=&quot;hljs-string&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;) {&lt;br/&gt;nodeLabels[k] = v&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; s.Labels {&lt;br/&gt;nodeLabels[k] = v&lt;br/&gt;}&lt;br/&gt;node.Labels = nodeLabels&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 污点同理&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; taints []corev1.Taint&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _, taint := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; node.Spec.Taints {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; strings.Contains(taint.Key, &lt;span class=&quot;hljs-string&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;) {&lt;br/&gt;taints = &lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(taints, taint)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;node.Spec.Taints = &lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(taints, s.Taints...)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;node&lt;br/&gt;} &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们使用 &lt;code&gt;make run&lt;/code&gt;将服务跑起来测试一下&lt;/p&gt;&lt;p&gt;首先我们准备一份 NodePool 的 CRD，使用 &lt;code&gt;kubectl apply -f config/samples/&lt;/code&gt; 部署一下&lt;/p&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;apiVersion:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;nodes.lailin.xyz/v1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;NodePool&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;master&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;taints:&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;node-pool.lailin.xyz&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;master&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;effect:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;NoSchedule&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;labels:&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;node-pool.lailin.xyz/master&quot;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;8&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;node-pool.lailin.xyz/test&quot;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;handler:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;runc&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;部署之后可以获取到节点的标签&lt;/p&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;labels:&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;beta.kubernetes.io/arch:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;amd64&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;beta.kubernetes.io/os:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;linux&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;kubernetes.io/arch:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;amd64&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;kubernetes.io/hostname:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;kind-control-plane&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;kubernetes.io/os:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;linux&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;node-pool.lailin.xyz/master:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;8&quot;&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;node-pool.lailin.xyz/test:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;node-role.kubernetes.io/control-plane:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;node-role.kubernetes.io/master:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以及 &lt;code&gt;RuntimeClass&lt;/code&gt;&lt;/p&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;apiVersion:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;node.k8s.io/v1&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;handler:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;runc&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;RuntimeClass&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;scheduling:&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;nodeSelector:&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;node-pool.lailin.xyz/master:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;8&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;node-pool.lailin.xyz/test:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;tolerations:&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;effect:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;NoSchedule&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;node-pool.lailin.xyz&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;operator:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;Equal&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;master&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们更新一下 NodePool&lt;/p&gt;&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs diff&quot;&gt;apiVersion: nodes.lailin.xyz/v1&lt;br/&gt;kind: NodePool&lt;br/&gt;metadata:&lt;br/&gt;  name: master&lt;br/&gt;spec:&lt;br/&gt;  taints:&lt;br/&gt;    - key: node-pool.lailin.xyz&lt;br/&gt;      value: master&lt;br/&gt;      effect: NoSchedule&lt;br/&gt;  labels:&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+    &quot;node-pool.lailin.xyz/master&quot;: &quot;10&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-    &quot;node-pool.lailin.xyz/master&quot;: &quot;8&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-    &quot;node-pool.lailin.xyz/test&quot;: &quot;2&quot;&lt;/span&gt;&lt;br/&gt;  handler: runc&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到 RuntimeClass&lt;/p&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;scheduling:&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;nodeSelector:&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;node-pool.lailin.xyz/master:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;tolerations:&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;effect:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;NoSchedule&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;node-pool.lailin.xyz&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;operator:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;Equal&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;master&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;和节点对应的标签信息都有了相应的变化&lt;/p&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;labels:&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;beta.kubernetes.io/arch:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;amd64&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;beta.kubernetes.io/os:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;linux&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;kubernetes.io/arch:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;amd64&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;kubernetes.io/hostname:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;kind-control-plane&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;kubernetes.io/os:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;linux&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;node-pool.lailin.xyz/master:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;node-role.kubernetes.io/control-plane:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;node-role.kubernetes.io/master:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;预删除-Finalizers&quot;&gt;&lt;a href=&quot;#预删除-Finalizers&quot; class=&quot;headerlink&quot; title=&quot;预删除: Finalizers&quot;/&gt;预删除: Finalizers&lt;/h3&gt;&lt;p&gt;我们可以直接使用 &lt;code&gt;kubectl delete NodePool name&lt;/code&gt;删除对应的对象，但是这样可以发现一个问题，就是 NodePool 创建的 RuntimeClass 以及其维护的 Node Taint Labels 等信息都没有被清理。&lt;/p&gt;&lt;p&gt;当我们想要再删除一个对象的时候，清理一写想要清理的信息时，我们就可以使用 &lt;code&gt;Finalizers&lt;/code&gt; 特性，执行预删除的操作。&lt;/p&gt;&lt;p&gt;k8s 的资源对象当中存在一个 &lt;code&gt;Finalizers&lt;/code&gt;字段，这个字段是一个字符串列表，当执行删除资源对象操作的时候，k8s 会先更新 &lt;code&gt;DeletionTimestamp&lt;/code&gt; 时间戳，然后会去检查 &lt;code&gt;Finalizers&lt;/code&gt; 是否为空，如果为空才会执行删除逻辑。所以我们就可以利用这个特性执行一些预删除的操作。&lt;em&gt;注意：预删除必须是幂等的&lt;/em&gt;&lt;/p&gt;&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs diff&quot;&gt;func (r *NodePoolReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {&lt;br/&gt;_ = r.Log.WithValues(&quot;nodepool&quot;, req.NamespacedName)&lt;br/&gt;// ......&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+// 进入预删除流程&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+if !pool.DeletionTimestamp.IsZero() {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+return ctrl.Result{}, r.nodeFinalizer(ctx, pool, nodes.Items)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+// 如果删除时间戳为空说明现在不需要删除该数据，我们将 nodeFinalizer 加入到资源中&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+if !containsString(pool.Finalizers, nodeFinalizer) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+pool.Finalizers = append(pool.Finalizers, nodeFinalizer)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+if err := r.Client.Update(ctx, pool); err != nil {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+return ctrl.Result{}, err&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;// ......&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;预删除的逻辑如下&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 节点预删除逻辑&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(r *NodePoolReconciler)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;nodeFinalizer&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ctx context.Context, pool *nodesv1.NodePool, nodes []corev1.Node)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 不为空就说明进入到预删除流程&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _, n := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; nodes {&lt;br/&gt;n := n&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 更新节点的标签和污点信息&lt;/span&gt;&lt;br/&gt;err := r.Update(ctx, pool.Spec.CleanNode(n))&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 预删除执行完毕，移除 nodeFinalizer&lt;/span&gt;&lt;br/&gt;pool.Finalizers = removeString(pool.Finalizers, nodeFinalizer)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r.Client.Update(ctx, pool)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们执行 &lt;code&gt;kubectl delete NodePool master&lt;/code&gt; 然后再获取节点信息可以发现，除了 &lt;code&gt;kubernetes&lt;/code&gt; 的标签其他 NodePool 附加的标签都已经被删除掉了&lt;/p&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;labels:&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;beta.kubernetes.io/arch:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;amd64&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;beta.kubernetes.io/os:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;linux&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;kubernetes.io/arch:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;amd64&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;kubernetes.io/hostname:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;kind-control-plane&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;kubernetes.io/os:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;linux&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;node-role.kubernetes.io/control-plane:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;node-role.kubernetes.io/master:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;OwnerReference&quot;&gt;&lt;a href=&quot;#OwnerReference&quot; class=&quot;headerlink&quot; title=&quot;OwnerReference&quot;/&gt;OwnerReference&lt;/h3&gt;&lt;p&gt;我们上面使用 &lt;code&gt;Finalizer&lt;/code&gt; 的时候只处理了 Node 的相关数据，没有处理 RuntimeClass，能不能用相同的方式进行处理呢？当然是可以的，但是不够优雅。&lt;/p&gt;&lt;p&gt;对于这种一一映射或者是附带创建出来的资源，更好的方式是在子资源的 OwnerReference 上加上对应的 id，这样我们删除对应的 NodePool 的时候所有 OwnerReference 是这个对象的对象都会被删除掉，就不用我们自己对这些逻辑进行处理了。&lt;/p&gt;&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs diff&quot;&gt;func (r *NodePoolReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {&lt;br/&gt;//...&lt;br/&gt;&lt;br/&gt;// 如果不存在创建一个新的&lt;br/&gt;if runtimeClass.Name == &quot;&quot; {&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+runtimeClass = pool.RuntimeClass()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+err = ctrl.SetControllerReference(pool, runtimeClass, r.Scheme)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+if err != nil {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+return ctrl.Result{}, err&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+err = r.Create(ctx, runtimeClass)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-err = r.Create(ctx, pool.RuntimeClass())&lt;/span&gt;&lt;br/&gt;return ctrl.Result{}, err&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在创建的时候使用 &lt;code&gt;controllerutil.SetOwnerReference&lt;/code&gt; 设置一下 OwnerReference 即可，然后我们再试试删除就可以发现 RuntimeClass 也一并被删除了。&lt;/p&gt;&lt;p&gt;注意，RuntimeClass 是一个集群级别的资源，我们最开始创建的 NodePool 是 Namespace 级别的，直接运行会报错，因为 Cluster 级别的 OwnerReference 不允许是 Namespace 的资源。&lt;/p&gt;&lt;p&gt;这个需要在 &lt;code&gt;api/v1/nodepool_types.go&lt;/code&gt; 添加一行注释，指定为 Cluster 级别&lt;/p&gt;&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs diff&quot;&gt;//+kubebuilder:object:root=true&lt;br/&gt;&lt;span class=&quot;hljs-addition&quot;&gt;+//+kubebuilder:resource:scope=Cluster&lt;/span&gt;&lt;br/&gt;//+kubebuilder:subresource:status&lt;br/&gt;&lt;br/&gt;// NodePool is the Schema for the nodepools API&lt;br/&gt;type NodePool struct {&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;修改之后我们需要先执行 &lt;code&gt;make uninstall&lt;/code&gt; 然后再执行 &lt;code&gt;make install&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;/&gt;总结&lt;/h2&gt;&lt;p&gt;回顾一下，这篇文章我们实现了一个 NodePool 的 Operator 用来控制节点以及对应的 RuntimeClass，除了基本的 CURD 之外我们还学习了预删除和 OwnerReference 的使用方式。之前在 kubectl delete 某个资源的时候有时候会卡住，这个其实是因为在执行预删除的操作，可能本来也比较慢，也有可能是预删除的时候返回了错误导致的。&lt;/p&gt;&lt;p&gt;下一篇我们一起来为我们的 Operator 加上 Event 和 Status。&lt;/p&gt;&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;/&gt;参考文献&lt;/h2&gt;&lt;section class=&quot;footnotes&quot;/&gt;&lt;h2 id=&quot;关注我获取更新&quot;&gt;&lt;a href=&quot;#关注我获取更新&quot; class=&quot;headerlink&quot; title=&quot;关注我获取更新&quot;/&gt;关注我获取更新&lt;a class=&quot;anchorjs-link&quot; aria-label=&quot;Anchor&quot; data-anchorjs-icon=&quot;&quot; href=&quot;#关注我获取更新&quot;/&gt;&lt;/h2&gt;&lt;h2 id=&quot;猜你喜欢&quot;&gt;猜你喜欢&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9b74b3ee81142b15bb021b71bfe0e90a</guid>
<title>3 个主流 Java 微服务框架</title>
<link>https://toutiao.io/k/4t5ie44</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43522561863173215&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl93WyxgAicjl34P1vQ8IcZsGGvkxriaNwvYanRPWpFo16R9htibcYTgEOFexBFaXPtuianLXoLRZ1FYeFA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1374&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文我们简单聊聊当下主流的 3 个 Java 微服务框架，看看各自的特点。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. Spring and Spring Boot&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl93WyxgAicjl34P1vQ8IcZsGGyoJCLicOzKOibXeaoNKcxpDCIPonVPiaEFDD0Qrw3CsFFnsQbJZd2BC9Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring Boot 在 Java 微服务领域绝对是一哥，毫无争议，据说已经占据 57% 的市场份额。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring Boot 这么牛是有道理的，它太成熟了，功能特性极其丰富，不管你的需求多复杂，都能满足你。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还内置了各种通用的功能，例如安全认证等等，开箱即用，非常方便。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringBoot 配置优先的理念大大简化了开发，通过自动配置可以非常简单的集成各种技术。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringBoot 集成了嵌入式的 Tomcat，应用打成 jar 包即可以运行，可以方便的运行在容器中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringBoot 是开源的，文档很全，社区也活跃。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从学习、开发，到部署运行，都这么便捷，想不火都难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官网地址：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://spring.io&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. Dropwizard&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3955321944809461&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl93WyxgAicjl34P1vQ8IcZsGGA5jBLF12Ig7JicmD33KfGiakAo9ZMuNVL1K9ss5icQltYxHvsLdjXcImg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;761&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dropwizard 是一个开源的 RESTful 快速开发框架，对微服务的开发也极其友好，而且性能很强。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dropwizard 也是打成 Jar 运行，SpringBoot 默认集成的是 Tomcat，Dropwizard 集成的是 Jetty。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dropwizard 有一个特点，它集成了各个领域的龙头技术，而且不可替换，不像 SpringBoot 集成的那么多，供大家选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;WebServer 选 Jetty&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;REST 选 Jersey&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;监控选 Metrics&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;日志用 Logback、slf4j&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样的话就不需要我们自己选择了，简单了很多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 SpringBoot 的思路是全面包容，你想用啥都行，我都支持，例如 WebServer 你可以用 Tomcat，也可以选 Jetty、Undertow。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dropwizard 自身是不支持依赖注入的，但集成了这个领域的强者 Guice 和 Dagger。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官网地址：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://www.dropwizard.io&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. Micronaut&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5472636815920398&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl93WyxgAicjl34P1vQ8IcZsGG5MZVShFTA1Sv0VpL81q9gBiaib7DKom9NtgTDjttxkiabOFtfyekUqicqg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;603&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Micronaut 有3个突出的特点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;IOC 是 Spring 引以为傲的特性，是基于大量的反射实现的，但这会影响启动速度，Micronaut 没有这么做，较少的使用了反射和代理，所以启动飞快，而且 Micronaut 是基于 GraalVM 的，增强了其速度和内存方面的优势。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Micronaut 使用的是 Netty，所以对响应式编程的支持也是一流的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官网地址：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://micronaut.io/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringBoot 我们都很熟悉了，建议也了解一下 Dropwizard 和 Micronaut，有利于扩展我们的思路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4Nzc4MjI4MQ==&amp;amp;mid=2652403576&amp;amp;idx=1&amp;amp;sn=00b6cc6110cbfc191d4efdcefd6432da&amp;amp;chksm=8bd8f19ebcaf7888b30a7491523de976154e0bcdd41df2167f10fd22c8526a392e9f7870cc75&amp;amp;token=456207156&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;OAuth2 图解&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4Nzc4MjI4MQ==&amp;amp;mid=2652403396&amp;amp;idx=1&amp;amp;sn=53ac0376b271abab985de793a9a66bb0&amp;amp;chksm=8bd8f022bcaf7934051078105e66fa8f2986e4daaa067a0c6ea3668eb04b728762ba241547cc&amp;amp;token=456207156&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;轻松理解 Kubernetes 的核心概念&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4Nzc4MjI4MQ==&amp;amp;mid=2652403407&amp;amp;idx=1&amp;amp;sn=69489b882cfafb77607a80e150d47b19&amp;amp;chksm=8bd8f029bcaf793fc8435b45f4bd2058200406e7a5f38665ef79acdb382feabacc8c5e5ac904&amp;amp;token=456207156&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;开发者必须要了解的架构技术趋势：Service Mesh&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>