<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3993bbe28ee4164e43abb808086c8393</guid>
<title>30 岁的程序员出路在哪里？| 码农周刊第 321 期</title>
<link>https://toutiao.io/k/qdeuemt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;30 岁的程序员出路在哪里？| 码农周刊第 321 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第321期（2020-10-15）&lt;/h2&gt;
        &lt;p&gt;☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=321&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3210&quot; target=&quot;_blank&quot;&gt;薪资翻番如何实现？程序员的涨薪秘诀&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;a href=&quot;https://weekly.manong.io/bounce?nid=321&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3210&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_321.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=321&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;最佳实践&lt;/p&gt;
        
        &lt;p&gt;偏好模型在贝壳的应用&lt;/p&gt;
        
        &lt;p&gt;实战经验&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;共包含 9 种英伟达开发的图像及视频合成方法&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;以 DDD 思想为基础，融合中台核心要素，赋能中台建设。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;开箱即用的中后台前端/设计解决方案&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;详细介绍&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;一步步教你&lt;/p&gt;
        
        &lt;p&gt;细致讲解&lt;/p&gt;
        
        &lt;p&gt;无废话&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;适合入门&lt;/p&gt;
        
        &lt;p&gt;多维度看问题&lt;/p&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://github.com/streamnative/mop&quot; target=&quot;_blank&quot;&gt;GitHub 地址&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;通俗易懂&lt;/p&gt;
        
        &lt;p&gt;适合新手&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;完备分析&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;通俗易懂&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;细致分析&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;一线互联网工程师，分享Linux C++ Go Python等后端开发技术。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 444675 即可&lt;/p&gt;
        
        &lt;p&gt;老年程序猿，工作15年以上。以前极其不擅长写作，最近决定对着弱点迎难而上，写写原创的经验、心得。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 426740 即可&lt;/p&gt;
        
        &lt;p&gt;分享一些在 ThinkJS 项目开发过程中总结的一些经验以及问题&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 253319 即可&lt;/p&gt;
        
        &lt;p&gt;专注互联网金融&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 26661 即可&lt;/p&gt;
        
        &lt;p&gt;主要是分享作为一个机器学习算法工程师的工作学习生活方面的内容，包括Python编程、机器学习和深度学习算法知识，偶尔可能分享一些计算机基础方面的知识，以及一些练习项目等&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 1584 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;本书介绍了 Kotlin 的基本语法、常用类型、面向对象编程以及一些高阶的知识。欢迎到&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;兑换阅读。&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;天无绝程序员之路&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验之谈&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6a0cb05b8387942d5b9de0136cbea250</guid>
<title>如何优雅地配置快应用的代码片段</title>
<link>https://toutiao.io/k/35tydue</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;pos-relative js-post-content&quot;&gt;
                
                &lt;p&gt;作为一名程序员，在编码的过程中，难免会遇到要写些重复性的代码；假如每次都重新码一遍，既浪费了时间，也有伤身体。倘若可以配置一个像快捷键一样，输入简单的字母单词，立即就能调出代码片段，岂不美哉？在本篇文章中，就跟大家分享下，如何在 IDE 中配置和使用代码片段，从而让我们可以如&lt;code&gt;极客&lt;/code&gt;一般，高效编码，节省时间。&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;&quot;&gt;如何使用&lt;/h2&gt;
&lt;h3 id=&quot;&quot;&gt;打开配置用户代码片段&lt;/h3&gt;
&lt;p&gt;快速应用开发工具（Windows 用户在文件下）=&amp;gt; &lt;strong&gt;首选项&lt;/strong&gt; =&amp;gt; &lt;strong&gt;用户片段&lt;/strong&gt; =&amp;gt; &lt;strong&gt;新建代码片段文件&lt;/strong&gt; =&amp;gt; 输入文件名；&lt;/p&gt;
&lt;p&gt;或者利用快捷键：Mac：⌘ + ⇧ + p（Windows：ctrl + shift + p）=&amp;gt; 输入 snippet =&amp;gt; 选择配置用户代码片段；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/15/0ot8ht.gif&quot; alt=&quot;快应用 IDE - 代码片段&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;编写自己的代码片段&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;首先，需要了解一下 snippets 的语法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;：代码片段名字，即输入此名字就可以调用代码片段；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scope&lt;/code&gt;：采用一个或多个语言标识符的附加属性，这使该代码段仅可用于那些指定的语言。如果未提供任何 scope 属性，则全局代码段适用于所有语言；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;body&lt;/code&gt;：这个是代码段的主体。需要编写的代码放在这里，换行符和嵌入的选项卡将根据插入代码段的上下文进行格式化；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$1&lt;/code&gt;：生成代码后光标的初始位置；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$2&lt;/code&gt;：生成代码后光标的第二个位置,按 tab 键可进行快速切换,还可以有 $3,$4,$5.....；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${1,字符}&lt;/code&gt;：生成代码后光标的初始位置(其中 1 表示光标开始的序号，字符表示生成代码后光标会直接选中字符；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt;：代码段描述,输入名字后编辑器显示的提示信息；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，需要补充说明的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果没有 description，默认提示信息是类似下面例子中的 console（即 key 值）&lt;/li&gt;
&lt;li&gt;代码多行语句的以 , 隔开&lt;/li&gt;
&lt;li&gt;每行代码需要用引号包裹住&lt;/li&gt;
&lt;li&gt;特殊字符需要用 \ 进行转义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;实战例子&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;在日常开发中，我们经常需要打印日志，可以配置一个 console.log 的代码片段：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
// Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
// Placeholders with the same ids are connected.
// Example:
&quot;console&quot;: {
&quot;scope&quot;: &quot;javascript,typescript&quot;,
&quot;prefix&quot;: &quot;cl&quot;,
&quot;body&quot;: [
&quot;console.log(&#x27;quickapp $1 = &#x27;, $2)&quot;
],
&quot;description&quot;: &quot;Log output to console&quot;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;具体效果如下图例所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/15/0owXtJ.gif&quot; alt=&quot;快应用 IDE - 代码片段&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在输入 &lt;code&gt;cl&lt;/code&gt; 之后，直接可以&lt;code&gt;回车&lt;/code&gt;选择代码片段，第一个参数可以填充参数名称，插入  tab 键之后，定位到第二个参数，填充需要打印的变量即可，可谓非常方便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果遇到定义的代码片段不在最上方，而在最下方，打开设置，搜索代码段，则将其下方的分段转换为内联即可。打开设置，搜索 snippet，则将其下方的分段转换为 inline 即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/15/0oBMx1.png&quot; alt=&quot;快应用 IDE - 代码片段&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;常用的代码片段&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
&quot;console&quot;: {
&quot;scope&quot;: &quot;javascript,typescript&quot;,
&quot;prefix&quot;: &quot;cl&quot;,
&quot;body&quot;: [
&quot;console.log(&#x27;quickapp $1 = &#x27;, $2)&quot;
],
&quot;description&quot;: &quot;Log output to console&quot;
},
&quot;callback&quot;: {
&quot;scope&quot;: &quot;javascript,typescript&quot;,
&quot;prefix&quot;: &quot;cb&quot;,
&quot;body&quot;: [
&quot;success: ($1) =&amp;gt; {&quot;,
&quot;\t$2&quot;,
&quot;},&quot;,
&quot;fail: ($3) =&amp;gt; {&quot;,
&quot;\t$4&quot;,
&quot;},&quot;,
&quot;complete: ($5) =&amp;gt; {&quot;,
&quot;\t$6&quot;,
&quot;}&quot;
],
&quot;description&quot;: &quot;Callback Success And Fail&quot;
},
&quot;ux&quot;: {
&quot;prefix&quot;: &quot;ux&quot;,
&quot;body&quot;: [
&quot;&amp;lt;template&amp;gt;&quot;,
            &quot;   &amp;lt;div class=\&quot;$1\&quot;&amp;gt;\n&quot;,
            &quot;   &amp;lt;/div&amp;gt;&quot;,
            &quot;&amp;lt;/template&amp;gt;\n&quot;,
            &quot;&amp;lt;script&amp;gt;&quot;,
            &quot;export default {&quot;,
            &quot;  data() {&quot;,
            &quot;    return {}&quot;,
            &quot;  }&quot;,
            &quot;}&quot;,
            &quot;&amp;lt;/script&amp;gt;\n&quot;,
&quot;&amp;lt;style&amp;gt;&quot;,
&quot;&quot;,
            &quot;&amp;lt;/style&amp;gt;&quot;,
],
&quot;description&quot;: &quot;ux file&quot;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cl&lt;/code&gt;：打印日志；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cb&lt;/code&gt;：回调的 success，fail 和 complete；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ux&lt;/code&gt;：初始化 ux 文件；&lt;/p&gt;

              &lt;/div&gt;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9a38d5dc290e64e5954bc42089bd7a36</guid>
<title>太牛皮了！拯救了千千万万程序员必备的 Java 神器，你值得拥有！</title>
<link>https://toutiao.io/k/kvnybds</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;多线程编程的理论&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;↓↓↓&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9311926605504587&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;436&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylKaGVe8hUF6I4bkQuShGggNIVDaaDJNj11Ktibw3QDQC7wOEMz6KB1CPz72GcaE7k8DqicQOsd6T5A/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;今天给小伙伴们出几道阿里必问的面试题，测测你能完美的回答几道呢？&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;有没有一种一定能保证线程安全的代码写法？（偷偷告诉你，真的有！）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多个线程如何保持A1B2C3等顺序交替输出？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;synchronized volatile的CPU原语是如何实现的？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;无锁、偏向锁、轻量级锁、重量级锁有什么差别？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如何正确的启动和停止一个线程？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;线程和纤程的区别的是什么？为什么纤程比较轻量级？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ThreadLocal有没有内存泄漏的问题？为什么？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;下&lt;/span&gt;&lt;span&gt;列三种业务，应该如何使用线程池：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;高并发、任务执行时间短&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;并发不高、任务执行时间长&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;并发高、业务执行时间长&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;网上搜罗一堆答案，各式各样，唉！！！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你平时只有CRUD的经验，不了解&lt;strong&gt;多线程与高并发&lt;/strong&gt;，面对这样面试题，大概率一头雾水。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你真是这样，建议要拿出&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;个小时的时间，参加一次马士兵老师亲授的&lt;strong&gt;《多线程与高并发》&lt;/strong&gt;训练营，&lt;em&gt;限时福利，本次免费学习...&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9966777&quot; data-w=&quot;301&quot; data-type=&quot;jpeg&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XaZiavTs8J08eLvOZDlsdKcAom6txMJpUEJGVm1H12ZMQzAE7iaKt1ibcXJQcoSJhiay8Tj5qa0TU4ibJvicEFNibNCqg/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;诶&lt;/strong&gt;，&lt;strong&gt;马士兵是谁？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7&quot; data-w=&quot;300&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WckhAmUCHiba13sDeibO19Lic8ByAmoMtg2nk03NJpNNZRLsFfUIEEGFxAlQYBJkGEOetd6847Y0QMGfYf2hELFqA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;99年清华毕业，从程序员干到CTO，一直致力于推动Java、大数据、AI生根中国，其高并发直播课程广受欢迎，有千万次播放学习。&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;120px&quot;&gt;&lt;span&gt;  马士兵  &lt;/span&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;img data-ratio=&quot;0.5993189557321226&quot; data-type=&quot;jpeg&quot; data-w=&quot;881&quot; title=&quot;&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/th7eyLCckm16HKSKic13FlksGzQImribMX9gic0diaplqGuwo2Rh7DBlMDdfoZOvtmLXp3tUKgBdgj44vQu7GRiaCiaQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;让骨灰级扫地神僧&lt;strong&gt;马士兵老师&lt;/strong&gt;带你将多线程的知识系统化，帮助你理解多线程在&lt;strong&gt;CPU层级的实现&lt;/strong&gt;，以及这些实现如何一层一层的映射到那些上亿用户，千万QPS，百万TPS的系统。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;训练营时间&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;10月19日-10月20日，20:00&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;限时福利，本号粉丝免费学习...&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;预习资料：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2261437908496732&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1530&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M2gicwTVOUSdQ6bu0gP0euyglbib7CDTvYjn5TZ3YM2M8dKxe2q0CkWk0lWE5EZxaGoaFvjDNehBwYTmicOKwPjlg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;长按扫码即可添加微信&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;仅限前200名，扫码备注“&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;多线程&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;”&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9871244635193133&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dL38CUWZUkMxuN1jnY8PXXKUBibx9SoIGsL8Mty9FtWaqg0eAjzxiaMe1eVibmttE9K7Ja8dPusnibiaKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;233&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;遇到扫码频繁，请再次识别哦&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（内容的价值取决于您的行动，千万莫做收藏家）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97836&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;训练营第一天：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;线程的本质(操作系统与CPU是如何执行线程的)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;纤程的本质(go语言纤程为什么和线程池有关)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;并发的本质是什么？锁的本质是什么？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;synchronized JMM CAS AQS lock这些高频出现的面试概念究竟是什么？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;无锁、偏向锁、轻量级锁、重量级锁升级过程&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;悲观锁/乐观锁 共享锁/独占锁 整体锁/分段锁 可重入锁/不可重入锁&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;（首次公开）银弹已经诞生？有没有一种一定能保证线程安全的终极代码？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;（首次公开）工作线程数，设多少最合适？如何理解N*C*(1+C/W)的计算公式?&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97836&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;训练营第二天：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;什么是CPU缓存L1 L2 L3？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;什么是缓存行？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为什么会有缓存行？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存行的大小是多少？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存行如何影响Java编程&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Disruptor框架如何使用缓存行填充提高效率？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;什么是CPU的乱序执行？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如何证明CPU的乱序执行？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;什么是内存屏障？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;JVM如何用内存屏障禁止重排序？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;DCL单例中不禁止重排序会造成什么严重后果？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;（首次公开）通过阿里一道面试题理解大厂面试多线程代码&lt;/span&gt;&lt;span&gt;题的要求&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;训练营时间&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;10月19日-10月20日，20:00&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;训练营&lt;/span&gt;&lt;span&gt;全程直播&lt;/span&gt;&lt;span&gt;，限时福利，本次免费听...&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;      扫描下方二维码获取马士兵老师私有“涨薪秘籍”&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;超级福利一&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你来就能三选一，实体资料直接邮寄到家～&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M2gicwTVOUSdhW8A1dPgvIUibwibE3n5f2qeGCnEfJk5DDdHcFn8LmrCQ6Fu5dKoW0NKzTsZFibvGDTLjNjFmqVNqg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;超级福利二（大厂必备-左神算法，百度左神哦！）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5079155672823219&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M2gicwTVOUSdQ6bu0gP0euyglbib7CDTvYWiaJxsDm3OxHp0PQr8He9RRXnlzo8dcMSVoBeicLTBVqnTfCZhsZElTw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;25414&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;再强调一遍，扫码：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1.预习学习资料&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2.参与小游戏，得《多线程与高并发》实体书籍&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3.参与直播课程，免费抽大奖&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;扫码领预习资料，仅限前200名&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;仅限前200名，扫码备注“&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;多线程&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9871244635193133&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dL38CUWZUkMxuN1jnY8PXXKUBibx9SoIGsL8Mty9FtWaqg0eAjzxiaMe1eVibmttE9K7Ja8dPusnibiaKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;233&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;（内容的价值取决于您的行动，千万莫做收藏家）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;扫上方“&lt;/span&gt;&lt;span&gt;二维码&lt;/span&gt;&lt;span&gt;”，学习&lt;span&gt;2&lt;/span&gt;个小时，值得！！！&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bda446bfff00bf0502ac7484cd5c0714</guid>
<title>协程中的取消和异常：驻留任务详解</title>
<link>https://toutiao.io/k/k36er6n</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;在本系列第二篇文章 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/_MkvDPJR7OIdhiR0Bnz_gA&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;协程中的取消和异常 | 取消操作详解&lt;/a&gt;&lt;/b&gt; 中，我们学到，当一个任务不再被需要时，正确地退出十分的重要。在 Android 中，您可以使用 Jetpack 提供的两个 CoroutineScopes: &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/reference/kotlin/androidx/lifecycle/package-summary%23%28androidx.lifecycle.ViewModel%29.viewModelScope%3Akotlinx.coroutines.CoroutineScope&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;viewModelScope&lt;/a&gt;&lt;/b&gt; 和 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/reference/kotlin/androidx/lifecycle/package-summary%23lifecyclescope&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;lifecycleScope&lt;/a&gt;&lt;/b&gt;，它们可以在 Activity、Fragment、Lifecycle 完成时退出正在运行的任务。如果您正在创建自己的 CoroutineScope，记得将它绑定到某个任务中，并在需要的时候取消它。&lt;/p&gt;&lt;p&gt;然而，在有些情况下，您会希望即使用户离开了当前界面，操作依然能够执行完成。因此，您就不会希望任务被取消，例如，向数据库写入数据或者向您的服务器发送特定类型的请求。&lt;/p&gt;&lt;p&gt;下面我们就来介绍实现此类情况的模式。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;协程还是 WorkManager？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;协程会在您的应用进程活动期间执行。如果您需要执行一个能够在应用进程之外活跃的操作 (比如向远程服务器发送日志)，在 Android 平台上建议使用 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/topic/libraries/architecture/workmanager&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;WorkManager&lt;/a&gt;&lt;/b&gt;。WorkManager 是一个扩展库，用于那些预期会在将来的某个时间点执行的重要操作。&lt;/p&gt;&lt;p&gt;请针对那些在当前进程中有效的操作使用协程，同时保证可以在用户关闭应用时取消操作 (例如，进行一个您希望缓存的网络请求)。那么，实现这类操作的最佳实践是什么呢？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;协程的最佳实践&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;由于本文所介绍的模式是在协程的其它最佳实践的基础之上实现的，我们可以借此机会回顾一下:&lt;/p&gt;&lt;h3&gt;&lt;b&gt;1. 将调度器注入到类中&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;不要在创建协程或调用 withContext 时硬编码调度器。&lt;/p&gt;&lt;p&gt;✅ &lt;b&gt;好处&lt;/b&gt;: 便于测试。您可以在进行单元测试或仪器测试时轻松替换掉它们。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;2. 应当在 ViewModel 或 Presenter 层创建协程&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;如果是仅与 UI 相关的操作，则可以在 UI 层执行。如果您认为这条最佳实践在您的工程中不可行，则很有可能是您没有遵循第一条最佳实践 (测试没有注入调度器的 ViewModel 会变得更加困难；这种情况下，暴露出挂起函数会使测试变得可行)。&lt;/p&gt;&lt;p&gt;✅ &lt;b&gt;好处&lt;/b&gt;: UI 层应该尽量简洁，并且不直接触发任何业务逻辑。作为代替，应当将响应能力转移到 ViewModel 或 Presenter 层实现。在 Android 中，测试 UI 层需要执行插桩测试，而执行插桩测试需要运行一个模拟器。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;3. ViewModel 或 Presenter 以下的层级，应当暴露挂起函数与 Flow&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;如果您需要创建协程，请使用 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;coroutineScope&lt;/a&gt;&lt;/b&gt; 或 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/supervisor-scope.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;supervisorScope&lt;/a&gt;&lt;/b&gt;。而如果您想要将协程限定在其他作用域，请继续阅读，接下来本文将对此进行讨论。&lt;/p&gt;&lt;p&gt;✅ &lt;b&gt;好处&lt;/b&gt;: 调用者 (通常是 ViewModel 层) 可以控制这些层级中任务的执行和生命周期，也可以在需要时取消这些任务。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;协程中那些不应当被取消的操作&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;假设我们的应用中有一个 ViewModel 和一个 Repository，它们的相关逻辑如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;class MyViewModel(private val repo: Repository) : ViewModel() {
  fun callRepo() {
    viewModelScope.launch {
      repo.doWork()
    }
  }
}

class Repository(private val ioDispatcher: CoroutineDispatcher) {
  suspend fun doWork() {
    withContext(ioDispatcher) {
      doSomeOtherWork()
     veryImportantOperation() // 它不应当被取消
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们不希望用 viewModelScope 来控制 veryImportantOperation()，因为 viewModelScope 随时都可能被取消。我们想要此操作的运行时长超过 viewModelScope，这个目的要如何达成呢？&lt;/p&gt;&lt;p&gt;&lt;b&gt;我们需要在 Application 类中创建自己的作用域，并在由它启动的协程中调用这些操作&lt;/b&gt;。这个作用域应当被注入到那些需要它的类中。&lt;/p&gt;&lt;p&gt;与稍后将在本文中看到的其他解决方案 (如 GlobalScope) 相比，创建自己的 CoroutineScope 的好处是您可以根据自己的想法对其进行配置。无论您是需要 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CoroutineExceptionHandler&lt;/a&gt;&lt;/b&gt;，还是想使用自己的线程池作为调度器，这些常见的配置都可以放在自己的 CoroutineScope 的 CoroutineContext 中。&lt;/p&gt;&lt;p&gt;您可以称其为 applicationScope。applicationScope 必须包含一个 SupervisorJob()，这样协程中的故障便不会在层级间传播 (见本系列第三篇文章: &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/FjAyR6YPvGy4nH8WsIdpZQ&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;协程中的取消和异常 | 异常处理详解&lt;/a&gt;&lt;/b&gt;):&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;class MyApplication : Application() {
  // 不需要取消这个作用域，因为它会随着进程结束而结束
   val applicationScope = CoroutineScope(SupervisorJob() + otherConfig)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于我们希望它在应用进程存活期间始终保持活动状态，所以我们不需要取消 applicationScope，进而也不需要保持 SupervisorJob 的引用。当协程所需的生存期比调用处作用域的生存期更长时，我们可以使用 applicationScope 来运行协程。&lt;/p&gt;&lt;p&gt;&lt;b&gt;从 application CoroutineScope 创建的协程中调用那些不应当被取消的操作&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;每当您创建一个新的 Repository 实例时，请传入上面创建的 applicationScope&lt;/b&gt;。对于测试，可以参考后文的 Testing 部分。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;应该使用哪种协程构造器？&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;您需要基于 veryImportantOperation 的行为来使用 launch 或 async 启动新的协程:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果需要返回结果，请使用 async 并调用 await 来等待其完成；&lt;/li&gt;&lt;li&gt;如果不是，请使用 launch 并调用 join 来等待其完成。请注意，如 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/FjAyR6YPvGy4nH8WsIdpZQ&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;本系列第三部分所述&lt;/a&gt;&lt;/b&gt;，您必须在 launch 块内部手动处理异常。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面是使用 launch 启动协程的方式:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;class Repository(
  private val externalScope: CoroutineScope,
  private val ioDispatcher: CoroutineDispatcher
) {
  suspend fun doWork() {
    withContext(ioDispatcher) {
      doSomeOtherWork()
      externalScope.launch {
        //如果这里会抛出异常，那么要将其包裹进 try/catch 中；
        //或者依赖 externalScope 的 CoroutineScope 中的 CoroutineExceptionHandler 
        veryImportantOperation()
      }.join()
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或使用 async:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;class Repository(
  private val externalScope: CoroutineScope,
  private val ioDispatcher: CoroutineDispatcher
) {
  suspend fun doWork(): Any { // 在结果中使用特定类型
    withContext(ioDispatcher) {
      doSomeOtherWork()
      return externalScope.async {
        // 异常会在调用 await 时暴露，它们会在调用了 doWork 的协程中传播。
        // 注意，如果正在调用的上下文被取消，那么异常将会被忽略。
        veryImportantOperation()
    }.await()
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在任何情况下，都无需改动上面的 ViewModel 的代码。就算 ViewModelScope 被销毁，使用 externalScope 的任务也会持续运行。就像其他挂起函数一样，只有在 veryImportantOperation() 完成之后，doWork() 才会返回。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;有没有更简单的解决方案呢?&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;另一种可以在一些用例中使用的方案 (可能是任何人都会首先想到的方案)，便是将 veryImportantOperation 像下面这样用 withContext 封装进 externalScope 的上下文中:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;class Repository(
  private val externalScope: CoroutineScope,
  private val ioDispatcher: CoroutineDispatcher
) {
  suspend fun doWork() {
    withContext(ioDispatcher) {
      doSomeOtherWork()
      withContext(externalScope.coroutineContext) {
        veryImportantOperation()
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，此方法有下面几个注意事项，使用的时候需要注意:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果调用 doWork() 的协程在 veryImportantOperation 开始执行时被退出，它将继续执行直到下一个退出节点，而不是在 veryImportantOperation 结束后退出；&lt;/li&gt;&lt;li&gt;CoroutineExceptionHandler 不会如您预期般工作，这是因为在 withContext 中使用上下文时，异常会被重新抛出。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;测试&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;由于我们可能需要同时注入调度器和 CoroutineScop，那么这些场景里分别需要注入什么呢？&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a54f1d1a4dc3500afa116e3a3b86d698_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;480&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-a54f1d1a4dc3500afa116e3a3b86d698_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;480&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-a54f1d1a4dc3500afa116e3a3b86d698_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a54f1d1a4dc3500afa116e3a3b86d698_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;测试时要注入什么&lt;/p&gt;&lt;p&gt;  说明文档:&lt;/p&gt;&lt;h2&gt;&lt;b&gt;替代方案&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;其实还有一些其他的方式可以让我们使用协程来实现这一行为。不过，这些解决方案不是在任何条件下都能有条理地实现。下面就让我们看看一些替代方案，以及为何适用或者不适用，何时使用或者不使用它们。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;❌ GlobalScope&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;下面是几个不应该使用 GlobalScope 的理由:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;诱导我们写出硬编码值&lt;/b&gt; 。直接使用 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GlobalScope&lt;/a&gt;&lt;/b&gt; 可能会让我们倾向于写出硬编码的调度器，这是一种很差的实践方式。&lt;/li&gt;&lt;li&gt;&lt;b&gt;导致测试非常困难&lt;/b&gt; 。由于您的代码会在一个不受控制的作用域中执行，您将无法对从中启动的任务进行管理。&lt;/li&gt;&lt;li&gt;就如同我们对 applicationScope 所做的那样，&lt;b&gt;您无法为所有协程都提供一个通用的、内建于作用域中的 CoroutineContext&lt;/b&gt;。相反，您必须传递一个通用的 CoroutineContext 给 GlobalScope 启动的所有协程。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;建议: 不要直接使用它。&lt;/b&gt;&lt;/p&gt;&lt;h3&gt;&lt;b&gt;❌ Android 中的 ProcessLifecycleOwner 作用域&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;在 Android 中的 androidx.lifecycle:lifecycle-process 库中，有一个 applicationScope，您可以使用  ProcessLifecycleOwner.get().lifecycleScope 来调用它。&lt;/p&gt;&lt;p&gt;在使用它时，您需要注入一个 LifecycleOwner 来代替我们之前注入的 CoroutineScope。在生产环境中，您需要传入 ProcessLifecycleOwner.get()；而在单元测试中，您可以用 LifecycleRegistry 来创建一个虚拟的 LifecycleOwner。   注意，这个作用域的默认 CoroutineContext 是 Dispatchers.Main.immediate，所以它可能不太适合去执行后台任务。就像使用 GlobalScope 时那样，您也需要传递一个通用的 CoroutineContext 到所有通过 GlobalScope 启动的协程中。&lt;/p&gt;&lt;p&gt;由于上述原因，此替代方案相比起直接在 Application 类中创建一个 CoroutineScope 要麻烦许多。而且，我个人不喜欢在 ViewModel 或 Presenter 层之下与 Android lifecycle 建立关系，我希望这些层级是平台无关的。&lt;/p&gt;&lt;p&gt;&lt;b&gt;建议: 不要直接使用它。&lt;/b&gt;&lt;/p&gt;&lt;h3&gt;&lt;b&gt;⚠️  特别说明**&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;如果您将您的 applicationScope 中的 CoroutineContext 等于 GlobalScope 或 ProcessLifecycleOwner.get().lifecycleScope，您就可以像下面这样直接使用它:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;class MyApplication : Application() {
  val applicationScope = GlobalScope
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您仍然可以获得上文所述的所有&lt;b&gt;优点&lt;/b&gt;，并且将来可以根据需要轻松进行更改。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;❌ ✅ 使用 NonCancellable&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;正如您在本系列第二篇文章 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/_MkvDPJR7OIdhiR0Bnz_gA&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;协程中的取消和异常 | 取消操作详解&lt;/a&gt;&lt;/b&gt; 中看到的，您可以使用 withContext(NonCancellable) 在被取消的协程中调用挂起函数。我们建议您使用它来进行可挂起的代码清理，但是，您不应该滥用它。&lt;/p&gt;&lt;p&gt;这样做的风险很高，因为您将会无法控制协程的执行。确实，它可以使代码更简洁，可读性更强，但与此同时，它也可能在将来引起一些无法预测的问题。&lt;/p&gt;&lt;p&gt;使用示例如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;class Repository(
  private val ioDispatcher: CoroutineDispatcher
) {
  suspend fun doWork() {
    withContext(ioDispatcher) {
      doSomeOtherWork()
    withContext(NonCancellable){
        veryImportantOperation()
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;尽管这个方案很有诱惑力，但是您可能无法总是知道 someImportantOperation() 背后有什么逻辑。它可能是一个扩展库；也可能是一个接口背后的实现。它可能会导致各种各样的问题:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;您将无法在测试中结束这些操作；&lt;/li&gt;&lt;li&gt;使用延迟的无限循环将永远无法被取消；&lt;/li&gt;&lt;li&gt;从其中收集 Flow 会导致 Flow 也变得无法从外部取消；&lt;/li&gt;&lt;li&gt;…...&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;而这些问题会导致出现细微且非常难以调试的错误。&lt;/p&gt;&lt;p&gt;&lt;b&gt;建议: 仅用它来挂起清理操作相关的代码。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;每当您需要执行一些超出当前作用域范围的工作时，我们都建议您在您自己的 Application 类中创建一个自定义作用域，并在此作用域中执行协程。同时要注意，在执行这类任务时，避免使用 GlobalScope、ProcessLifecycleOwner 作用域或 NonCancellable。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8871c1b3cc63e3a4094bf6dc2f05b5dd</guid>
<title>使用人工智能优化 Golang 编译器</title>
<link>https://toutiao.io/k/4tvze1x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;&lt;blockquote&gt;&lt;p&gt;有多少人工就有多少智能。 ——鲁迅&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;/&gt;缘起&lt;/h1&gt;&lt;p&gt;众所周知，字节跳动内部主要使用 Thrift，为了更好地掌控生成代码，我们用 Go 自己实现了 Thrift 代码生成工具。&lt;/p&gt;&lt;p&gt;而我们的故(shi)事(gu)，正是由一次重构开始……&lt;/p&gt;&lt;a id=&quot;more&quot;/&gt;&lt;p&gt;在一次平淡无奇的重构发版后，正当我拎着电脑包往外冲心里已经盘算好了回去之后要拿出我熟练度 30W 的至臻 KDA 卡莎大杀四方时，业务方拉住了我，告诉我他们在用了新版的生成代码后，性能下降了10%。&lt;/p&gt;&lt;p&gt;内心 os：What？？？你们是不是有其它逻辑变更？&lt;del&gt;我写的代码怎么可能有 bug&lt;/del&gt; 逻辑一模一样的生成代码怎么可能会有性能差异？&lt;/p&gt;&lt;p&gt;好吧，为了避免突然哪一天账号已停用，我还是耐心地问了业务方一个问题：&lt;/p&gt; &lt;img data-src=&quot;https://static-ali-oss.purewhite.io/uPic/2020-10-14/QpVggz-image-20201014151957346.png&quot; alt=&quot;能重现吗？&quot;/&gt;&lt;p&gt;于是在一通如此这般地各种标准对齐、环境对齐等等一通操作（此处省略 2^10^10 字）后，我们终于搞清楚了状况：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;重构后的生成代码比重构之前，在该业务方的 idl 上，性能真的要差 10%！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;What？？？虽然重构过生成代码，但是新的生成代码无论从语义上还是实现上都是（几乎）和旧的一致的，怎么可能性能会差？？？&lt;/p&gt;&lt;p&gt;好吧，为了发扬我大 IG 不加班的光辉传统，我们决定直接十五投就完事——把生成代码 revert 回旧版的。好了，问题解决。（第二天，HR：小吴啊，财务室工资结一下）。&lt;/p&gt; &lt;img data-src=&quot;https://static-ali-oss.purewhite.io/uPic/2020-10-14/CjPx3x-image-20201014152156510.png&quot;/&gt;&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;/&gt;正文&lt;/h1&gt;&lt;p&gt;先附上我们用来讲解生成代码的 IDL：&lt;/p&gt;&lt;figure class=&quot;highlight thrift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Example&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: list&amp;lt;list&amp;lt;&lt;span class=&quot;keyword&quot;&gt;i64&lt;/span&gt;&amp;gt;&amp;gt; data1,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: map&amp;lt;&lt;span class=&quot;keyword&quot;&gt;i64&lt;/span&gt;, list&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;&amp;gt;&amp;gt; data2,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: list&amp;lt;map&amp;lt;&lt;span class=&quot;keyword&quot;&gt;i64&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;&amp;gt;&amp;gt; data3,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Serialize&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    Example Method (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: Example req),&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;首先，对比一下新旧生成代码（由于代码较多，就不直接贴在文章中了）。&lt;/p&gt;&lt;p&gt;旧代码：&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://gist.github.com/PureWhiteWu/bdd28734ab1f675bb7b73ecf0c57e994&quot;&gt;https://gist.github.com/PureWhiteWu/bdd28734ab1f675bb7b73ecf0c57e994&lt;/a&gt;&lt;/p&gt;&lt;p&gt;新代码：&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://gist.github.com/PureWhiteWu/63ac02ee613695213fe9eac4e22493ba&quot;&gt;https://gist.github.com/PureWhiteWu/63ac02ee613695213fe9eac4e22493ba&lt;/a&gt;&lt;/p&gt;&lt;p&gt;可以看到，新旧生成代码，在编解码逻辑上是完全等价的！不过旧代码采用了局部变量，新代码是直接用的对应结构体的字段。我们怀疑是不是这里的差异导致的（这可能会导致计算 offset 的开销），于是生成了汇编进行比较（由于汇编较大，不直接贴了，有兴趣的同学建议自行生成一下看一下），发现确实是多了一条 MOVQ 语句用来计算偏移量！&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;/&gt;&lt;p&gt;看来罪魁祸首好像找到了？不过又感觉哪儿不太对，毕竟现代 CPU 都是有多级流水线的，就多这么一条 MOVQ 语句，对于多级流水线架构的 CPU 来说，性能差距再怎么不可能导致 10% 这么大，特别是尽管这个语句是在 for 循环中的，但是在总的执行的指令占比中也没有 10% 这么多。&lt;/p&gt; &lt;img data-src=&quot;https://static-ali-oss.purewhite.io/uPic/2020-10-14/4lXjbo-image-20201014153941394.png&quot;/&gt;&lt;p&gt;为了验证我们的疑问，我们改了一版生成代码，改为了和原先生成的一样使用临时变量，发现确实去掉了这条语句后，性能没有任何变化。也就是说，性能的问题并不是这个间接寻址导致的。&lt;/p&gt;&lt;p&gt;随后，根据生成代码的汇编差异，我们提出了许多猜想，花了大量时间进行验证，但是均不是性能变差的原因（此处过于心酸略过不表）。&lt;/p&gt; &lt;img data-src=&quot;https://static-ali-oss.purewhite.io/uPic/2020-10-14/CijHWI-1602576741958_a607b2f22c9eaad1d2fa15f240e3d7f9.png&quot;/&gt;&lt;p&gt;最终，我们定位到了是由于在新的生成代码中，相比旧版本的生成代码，在返回错误的时候会额外包装一下：&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := ...; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; thrift.PrependError(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%T read field x &#x27;xxx&#x27; error: &quot;&lt;/span&gt;, p), err)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;而旧版本的生成代码是直接返回的错误：&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := ...; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;虽然这些只是在发生错误的时候才会调用到，在正常流程中不会用到，但是生成的汇编代码中这段逻辑占了相当大的比例：&lt;/p&gt; &lt;img data-src=&quot;https://static-ali-oss.purewhite.io/uPic/2020-10-14/5xpCC2-1602577065517_13324d0f6a7ef6f60f4eb96f78b4d23d.png&quot;/&gt;&lt;p&gt;而 Go 的编译器并没有帮我们重排这些指令，导致在真正运行的时候，L1 cache miss 大大提高，极大地降低了性能，参考如下实验结果：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://static-ali-oss.purewhite.io/uPic/2020-10-14/ZuyUfz-image-20201014154039859.png&quot; alt=&quot;Old&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://static-ali-oss.purewhite.io/uPic/2020-10-14/GkGorr-image-20201014154055511.png&quot; alt=&quot;New&quot;/&gt;&lt;/p&gt;&lt;p&gt;针对这种编译器太弱智导致的问题，只能上人工智能来解决了——有多少人工就有多少智能。&lt;/p&gt; &lt;img data-src=&quot;https://static-ali-oss.purewhite.io/uPic/2020-10-14/OOtOtc-1602577689777_491ea856ccc372c98bbd3b7b83ecf03f.png&quot;/&gt;&lt;p&gt;既然编译器不会自动做指令重排，那就我们来帮编译器干这事，改造完成后的生成代码见：&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://gist.github.com/PureWhiteWu/296f2bdac6051e4052a68c2bb1de1c07&quot;&gt;https://gist.github.com/PureWhiteWu/296f2bdac6051e4052a68c2bb1de1c07&lt;/a&gt;&lt;/p&gt;&lt;p&gt;比较关键的方法是，我们在所有原先&lt;code&gt;return thrift.PrependError&lt;/code&gt;的地方，都改为了&lt;code&gt;goto XXXError&lt;/code&gt;，如下：&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(p *Example)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(iprot thrift.TProtocol)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err error&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fieldTypeId thrift.TType&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fieldId &lt;span class=&quot;keyword&quot;&gt;int16&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, err = iprot.ReadStructBegin(); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; ReadStructBeginError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; ReadFieldBeginError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fieldTypeId == thrift.STOP {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; fieldId {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fieldTypeId == thrift.LIST {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := p.ReadField1(iprot); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; ReadFieldError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;} &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := iprot.Skip(fieldTypeId); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; SkipFieldError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fieldTypeId == thrift.MAP {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := p.ReadField2(iprot); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; ReadFieldError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;} &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := iprot.Skip(fieldTypeId); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; SkipFieldError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fieldTypeId == thrift.LIST {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := p.ReadField3(iprot); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; ReadFieldError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;} &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := iprot.Skip(fieldTypeId); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; SkipFieldError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := iprot.Skip(fieldTypeId); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; SkipFieldError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := iprot.ReadFieldEnd(); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; ReadFieldEndError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := iprot.ReadStructEnd(); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; ReadStructEndError&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;ReadStructBeginError:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; thrift.PrependError(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%T read struct begin error: &quot;&lt;/span&gt;, p), err)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;ReadFieldBeginError:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; thrift.PrependError(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%T read field %d begin error: &quot;&lt;/span&gt;, p, fieldId), err)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;ReadFieldError:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; thrift.PrependError(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%T read field %d &#x27;%s&#x27; error: &quot;&lt;/span&gt;, p, fieldId, fieldIDToName_Example[fieldId]), err)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;SkipFieldError:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; thrift.PrependError(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%T field %d skip type %d error: &quot;&lt;/span&gt;, p, fieldId, fieldTypeId), err)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;ReadFieldEndError:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; thrift.PrependError(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%T read field end error&quot;&lt;/span&gt;, p), err)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;ReadStructEndError:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; thrift.PrependError(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%T read struct end error: &quot;&lt;/span&gt;, p), err)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过这种方式，使得我们正常流程中，如果判断 err 出错的情况之下，不再有之前的一大段处理的指令，而仅仅是变成了一条简单的 jmp 指令；而对应的错误处理逻辑，则尽可能放在正常流程 return 之后，使得尽可能减少 cpu load 指令的次数并降低 L1 icache miss；同时，使得所有的错误处理的逻辑在最终的汇编中只会出现一次，而不是出现多次。&lt;/p&gt;&lt;p&gt;这里必须吐槽一波，Go 编译器有时候会“贴心”地帮你把这些代码挪回到上面，但是由于只会出现一次而其它错误处理的地方都会直接 jmp，所以问题也不大，后续可以考虑试一下把这些逻辑扔到一个独立的函数中并标记 noinline 是否可以再度提高性能（使得在主流程中完全不出现）。&lt;/p&gt;&lt;p&gt;经过这个调整，perf 的性能明显好了很多，并且可能比旧版本更优：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://static-ali-oss.purewhite.io/uPic/2020-10-14/g4d2ua-image-20201014154314334.png&quot; alt=&quot;Newer&quot;/&gt;&lt;/p&gt;&lt;h1 id=&quot;The-End&quot;&gt;&lt;a href=&quot;#The-End&quot; class=&quot;headerlink&quot; title=&quot;The End&quot;/&gt;The End&lt;/h1&gt;&lt;p&gt;至此，这个问题算是搞明白了，在这个过程中，最大的收获是：&lt;del&gt;Go 编译器竟然如此的弱智&lt;/del&gt; 人工指令重排竟然能带来如此之大的提升。&lt;/p&gt;&lt;p&gt;谨以此文分享我们的经验，希望能够抛砖引玉，为性能优化提出一个新的思路，毕竟鲁迅曾说过：&lt;/p&gt; &lt;img data-src=&quot;https://static-ali-oss.purewhite.io/uPic/2020-10-14/gz7Udp-1602579503413_8c994f7473789b1c81ac17040fd9aa1f.png&quot;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>