<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>69d1fc6f21d0417a1b67131594ae99df</guid>
<title>[推荐] 谈谈 MySQL 的 JSON 数据类型</title>
<link>https://toutiao.io/k/x25pdur</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;MySQL 5.7 增加了 JSON 数据类型的支持，在之前如果要存储 JSON 类型的数据的话我们只能自己做 &lt;code&gt;JSON.stringify()&lt;/code&gt; 和 &lt;code&gt;JSON.parse()&lt;/code&gt; 的操作，而且没办法针对 JSON 内的数据进行查询操作，所有的操作必须读取出来 parse 之后进行，非常的麻烦。原生的 JSON 数据类型支持之后，我们就可以直接对 JSON 进行数据查询和修改等操作了，较之前会方便非常多。&lt;/p&gt;&lt;p&gt;为了方便演示我先创建一个 &lt;code&gt;user&lt;/code&gt; 表，其中 &lt;code&gt;info&lt;/code&gt; 字段用来存储用户的基础信息。要将字段定义成 JSON 类型数据非常简单，直接字段名后接 &lt;code&gt;JSON&lt;/code&gt; 即可。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UNSIGNED&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSON&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表创建成功之后我们就按照经典的 CRUD 数据操作来讲讲怎么进行 JSON 数据类型的操作。&lt;/p&gt;&lt;h2&gt;添加数据&lt;/h2&gt;&lt;p&gt;添加数据这块是比较简单，不过需要理解 MySQL 对 JSON 的存储本质上还是字符串的存储操作。只是当定义为 JSON 类型之后内部会对数据再进行一些索引的创建方便后续的操作而已。所以添加 JSON 数据的时候需要使用字符串包装。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; INSERT INTO user (`name`, `info`) VALUES(&#x27;lilei&#x27;, &#x27;{&quot;sex&quot;: &quot;male&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: [&quot;basketball&quot;, &quot;football&quot;], &quot;score&quot;: [85, 90, 100]}&#x27;);
Query OK, 1 row affected (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了自己拼 JSON 之外，你还可以调用 MySQL 的 JSON 创建函数进行创建。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;JSON_OBJECT&lt;/code&gt;：快速创建 JSON 对象，奇数列为 key，偶数列为 value，使用方法 &lt;code&gt;JSON_OBJECT(key,value,key1,value1)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_ARRAY&lt;/code&gt;：快速创建 JSON 数组，使用方法 &lt;code&gt;JSON_ARRAY(item0, item1, item2)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; INSERT INTO user (`name`, `info`) VALUES(&#x27;hanmeimei&#x27;, JSON_OBJECT(
    -&amp;gt;   &#x27;sex&#x27;, &#x27;female&#x27;, 
    -&amp;gt;   &#x27;age&#x27;, 18, 
    -&amp;gt;   &#x27;hobby&#x27;, JSON_ARRAY(&#x27;badminton&#x27;, &#x27;sing&#x27;), 
    -&amp;gt;   &#x27;score&#x27;, JSON_ARRAY(90, 95, 100)
    -&amp;gt; ));
Query OK, 1 row affected (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过对于 JavaScript 工程师来说不管是使用字符串来写还是使用自带函数来创建 JSON 都是非常麻烦的一件事，远没有 JS 原生对象来的好用。所以在 &lt;code&gt;think-model&lt;/code&gt; 模块中我们增加了 JSON 数据类型的数据自动进行 &lt;code&gt;JSON.stringify()&lt;/code&gt; 的支持，所以直接传入 JS 对象数据即可。&lt;/p&gt;&lt;p&gt;由于数据的自动序列化和解析是根据字段类型来做的，为了不影响已运行的项目，需要在模块中配置 &lt;code&gt;jsonFormat: true&lt;/code&gt; 才能开启这项功能。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//adapter.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;think-model-mysql&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;mysql&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;jsonFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;lilei&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;male&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;hobby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;basketball&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;football&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面让我们来看看最终存储到数据库中的数据是什么样的&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; SELECT * FROM `user`;
+----+-----------+-----------------------------------------------------------------------------------------+
| id | name      | info                                                                                    |
+----+-----------+-----------------------------------------------------------------------------------------+
|  1 | lilei     | {&quot;age&quot;: 18, &quot;sex&quot;: &quot;male&quot;, &quot;hobby&quot;: [&quot;basketball&quot;, &quot;football&quot;], &quot;score&quot;: [85, 90, 100]} |
|  2 | hanmeimei | {&quot;age&quot;: 18, &quot;sex&quot;: &quot;female&quot;, &quot;hobby&quot;: [&quot;badminton&quot;, &quot;sing&quot;], &quot;score&quot;: [90, 95, 100]}    |
+----+-----------+-----------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;查询数据&lt;/h2&gt;&lt;p&gt;为了更好的支持 JSON 数据的操作，MySQL 提供了一些 JSON 数据操作类的方法。和查询操作相关的方法主要如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;JSON_EXTRACT()&lt;/code&gt;：根据 Path 获取部分 JSON 数据，使用方法 &lt;code&gt;JSON_EXTRACT(json_doc, path[, path] ...)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;：&lt;code&gt;JSON_EXTRACT()&lt;/code&gt; 的等价写法&lt;/li&gt;&lt;li&gt;&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;：&lt;code&gt;JSON_EXTRACT()&lt;/code&gt; 和 &lt;code&gt;JSON_UNQUOTE()&lt;/code&gt; 的等价写法&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_CONTAINS()&lt;/code&gt;：查询 JSON 数据是否在指定 Path 包含指定的数据，包含则返回1，否则返回0。使用方法 &lt;code&gt;JSON_CONTAINS(json_doc, val[, path])&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_CONTAINS_PATH()&lt;/code&gt;：查询是否存在指定路径，存在则返回1，否则返回0。&lt;code&gt;one_or_all&lt;/code&gt; 只能取值 &quot;one&quot; 或 &quot;all&quot;，one 表示只要有一个存在即可，all 表示所有的都存在才行。使用方法 &lt;code&gt;JSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] ...)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_KEYS()&lt;/code&gt;：获取 JSON 数据在指定路径下的所有键值。使用方法 &lt;code&gt;JSON_KEYS(json_doc[, path])&lt;/code&gt;，类似 JavaScript 中的 &lt;code&gt;Object.keys()&lt;/code&gt; 方法。&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_SEARCH()&lt;/code&gt;：查询包含指定字符串的 Paths，并作为一个 JSON Array 返回。查询的字符串可以用 LIKE 里的 &#x27;%&#x27; 或 &#x27;_&#x27; 匹配。使用方法 &lt;code&gt;JSON_SEARCH(json_doc, one_or_all, search_str[, escape_char[, path] ...])&lt;/code&gt;，类似 JavaScript 中的 &lt;code&gt;findIndex()&lt;/code&gt; 操作。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们在这里不对每个方法进行逐个的举例描述，仅提出一些场景举例应该怎么操作。&lt;/p&gt;&lt;h3&gt;返回用户的年龄和性别&lt;/h3&gt;&lt;p&gt;举这个例子就是想告诉下大家怎么获取 JSON 数据中的部分内容，并按照正常的表字段进行返回。这块可以使用 &lt;code&gt;JSON_EXTRACT&lt;/code&gt; 或者等价的 &lt;code&gt;-&amp;gt;&lt;/code&gt; 操作都可以。其中根据例子可以看到 &lt;code&gt;sex&lt;/code&gt; 返回的数据都带有引号，这个时候可以使用 &lt;code&gt;JSON_UNQUOTE()&lt;/code&gt; 或者直接使用 &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; 就可以把引号去掉了。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; SELECT `name`, JSON_EXTRACT(`info`, &#x27;$.age&#x27;) as `age`, `info`-&amp;gt;&#x27;$.sex&#x27; as sex FROM `user`;
+-----------+------+----------+
| name      | age  | sex      |
+-----------+------+----------+
| lilei     | 18   | &quot;male&quot;   |
| hanmeimei | 16   | &quot;female&quot; |
+-----------+------+----------+
2 rows in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们第一次接触到了 Path 的写法，MySQL 通过这种字符串的 Path 描述帮助我们映射到对应的数据。和 JavaScript 中对象的操作比较类似，通过 &lt;code&gt;.&lt;/code&gt; 获取下一级的属性，通过 &lt;code&gt;[]&lt;/code&gt; 获取数组元素。&lt;/p&gt;&lt;p&gt;不一样的地方在于需要通过 &lt;code&gt;$&lt;/code&gt; 表示本身，这个也比较好理解。另外就是可以使用 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;**&lt;/code&gt; 两个通配符，比如 &lt;code&gt;.*&lt;/code&gt; 表示当前层级的所有成员的值，&lt;code&gt;[*]&lt;/code&gt; 则表示当前数组中所有成员值。&lt;code&gt;**&lt;/code&gt; 类似 LIKE 一样可以接前缀和后缀，比如 &lt;code&gt;a**b&lt;/code&gt; 表示的是以 a 开头，b结尾的路径。&lt;/p&gt;&lt;p&gt;路径的写法非常简单，后面的内容里也会出现。上面的这个查询对应在 &lt;code&gt;think-model&lt;/code&gt; 的写法为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;name, JSON_EXTRACT(info, &#x27;$.age&#x27;) AS age, info-&amp;gt;&#x27;$.sex&#x27; as sex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;1=1&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;返回喜欢篮球的男性用户&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; SELECT `name` FROM `user` WHERE JSON_CONTAINS(`info`, &#x27;&quot;male&quot;&#x27;, &#x27;$.sex&#x27;) AND JSON_SEARCH(`info`, &#x27;one&#x27;, &#x27;basketball&#x27;, null, &#x27;$.hobby&#x27;);
+-------+
| name  |
+-------+
| lilei |
+-------+
1 row in set, 1 warning (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个例子就是简单的告诉大家怎么对属性和数组进行查询搜索。其中需要注意的是 &lt;code&gt;JSON_CONTAINS()&lt;/code&gt; 查询字符串由于不带类型转换的问题字符串需要使用加上 &lt;code&gt;&quot;&quot;&lt;/code&gt; 包裹查询，或者使用 &lt;code&gt;JSON_QUOTE(&#x27;male&#x27;)&lt;/code&gt; 也可以。&lt;/p&gt;&lt;p&gt;如果你使用的是 MySQL 8 的话，也可以使用新增的 &lt;code&gt;JSON_VALUE()&lt;/code&gt; 来代替 &lt;code&gt;JSON_CONTAINS()&lt;/code&gt;，新方法的好处是会带类型转换，避免刚才双引号的尴尬问题。不需要返回的路径的话，&lt;code&gt;JSON_SEARCH()&lt;/code&gt; 在这里也可以使用新增的 &lt;code&gt;MEMBER OF&lt;/code&gt; 或者 &lt;code&gt;JSON_OVERLAPS()&lt;/code&gt; 方法替换。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; SELECT `name` FROM `user` WHERE JSON_VALUE(`info`, &#x27;$.sex&#x27;) = &#x27;male&#x27; AND &#x27;basketball&#x27; MEMBER OF(JSON_VALUE(`info`, &#x27;$.hobby&#x27;));
+-------+
| name  |
+-------+
| lilei |
+-------+
1 row in set (0.00 sec)

mysql&amp;gt; SELECT `name` FROM `user` WHERE JSON_VALUE(`info`, &#x27;$.sex&#x27;) = &#x27;male&#x27; AND JSON_OVERLAPS(JSON_VALUE(`info`, &#x27;$.hobby&#x27;), JSON_QUOTE(&#x27;basketball&#x27;));
+-------+
| name  |
+-------+
| lilei |
+-------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的这个查询对应在 &lt;code&gt;think-model&lt;/code&gt; 的写法为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;JSON_CONTAINS(info, &#x27;\&quot;male\&quot;&#x27;, &#x27;$.sex&#x27;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;JSON_SEARCH(info, &#x27;one&#x27;, &#x27;basketball&#x27;, null, &#x27;$.hobby&#x27;)&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;where1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;JSON_VALUE(`info`, &#x27;$.sex&#x27;) = &#x27;male&#x27;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;&#x27;basketball&#x27; MEMBER OF (JSON_VALUE(`info`, &#x27;$.hobby&#x27;))&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;where2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;JSON_VALUE(`info`, &#x27;$.sex&#x27;) = &#x27;male&#x27;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;JSON_OVERLAPS(JSON_VALUE(`info`, &#x27;$.hobby&#x27;), JSON_QUOTE(&#x27;basketball&#x27;))&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;name&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;修改数据&lt;/h2&gt;&lt;p&gt;MySQL 提供的 JSON 操作函数中，和修改操作相关的方法主要如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;JSON_APPEND/JSON_ARRAY_APPEND&lt;/code&gt;：这两个名字是同一个功能的两种叫法，MySQL 5.7 的时候为 &lt;code&gt;JSON_APPEND&lt;/code&gt;，MySQL 8 更新为 &lt;code&gt;JSON_ARRAY_APPEND&lt;/code&gt;，并且之前的名字被废弃。该方法如同字面意思，给数组添加值。使用方法 &lt;code&gt;JSON_ARRAY_APPEND(json_doc, path, val[, path, val] ...)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_ARRAY_INSERT&lt;/code&gt;：给数组添加值，区别于 &lt;code&gt;JSON_ARRAY_APPEND()&lt;/code&gt; 它可以在指定位置插值。使用方法 &lt;code&gt;JSON_ARRAY_INSERT(json_doc, path, val[, path, val] ...)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_INSERT/JSON_REPLACE/JSON_SET&lt;/code&gt;：以上三个方法都是对 JSON 插入数据的，他们的使用方法都为 &lt;code&gt;JSON_[INSERT|REPLACE|SET](json_doc, path, val[, path, val] ...)&lt;/code&gt;，不过在插入原则上存在一些差别。&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;JSON_INSERT&lt;/code&gt;：当路径不存在才插入&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_REPLACE&lt;/code&gt;：当路径存在才替换&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_SET&lt;/code&gt;：不管路径是否存在&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;JSON_REMOVE&lt;/code&gt;：移除指定路径的数据。使用方法 &lt;code&gt;JSON_REMOVE(json_doc, path[, path] ...)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;由于 &lt;code&gt;JSON_INSERT&lt;/code&gt;, &lt;code&gt;JSON_REPLACE&lt;/code&gt;, &lt;code&gt;JSON_SET&lt;/code&gt; 和 &lt;code&gt;JSON_REMOVE&lt;/code&gt; 几个方法支持属性和数组的操作，所以前两个 &lt;code&gt;JSON_ARRAY&lt;/code&gt; 方法用的会稍微少一点。下面我们根据之前的数据继续举几个实例看看。&lt;/p&gt;&lt;h3&gt;修改用户的年龄&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; UPDATE `user` SET `info` = JSON_REPLACE(`info`, &#x27;$.age&#x27;, 20) WHERE `name` = &#x27;lilei&#x27;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&amp;gt; SELECT JSON_VALUE(`info`, &#x27;$.age&#x27;) as age FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+------+
| age  |
+------+
| 20   |
+------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;JSON_INSERT&lt;/code&gt; 和 &lt;code&gt;JSON_SET&lt;/code&gt; 的例子也是类似，这里就不多做演示了。对应到 &lt;code&gt;think-model&lt;/code&gt; 中的话，需要使用 EXP 条件表达式处理，对应的写法为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;lilei&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;exp&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JSON_REPLACE(info, &#x27;$.age&#x27;, 20)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;修改用户的爱好&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; UPDATE `user` SET `info` = JSON_ARRAY_APPEND(`info`, &#x27;$.hobby&#x27;, &#x27;badminton&#x27;) WHERE `name` = &#x27;lilei&#x27;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&amp;gt; SELECT JSON_VALUE(`info`, &#x27;$.hobby&#x27;) as hobby FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+-----------------------------------------+
| hobby                                   |
+-----------------------------------------+
| [&quot;basketball&quot;, &quot;football&quot;, &quot;badminton&quot;] |
+-----------------------------------------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;JSON_ARRAY_APPEND&lt;/code&gt; 在对数组进行操作的时候还是要比 &lt;code&gt;JSON_INSERT&lt;/code&gt; 之类的方便的，起码你不需要知道数组的长度。对应到 &lt;code&gt;think-model&lt;/code&gt; 的写法为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;lilei&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;exp&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JSON_ARRAY_APPEND(info, &#x27;$.hobby&#x27;, &#x27;badminton&#x27;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;删除用户的分数&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; UPDATE `user` SET `info` = JSON_REMOVE(`info`, &#x27;$.score[0]&#x27;) WHERE `name` = &#x27;lilei&#x27;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&amp;gt; SELECT `name`, JSON_VALUE(`info`, &#x27;$.score&#x27;) as score FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+-------+-----------+
| name  | score     |
+-------+-----------+
| lilei | [90, 100] |
+-------+-----------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;删除这块和之前修改操作类似，没有什么太多需要说的。但是对数组进行操作很多时候我们可能就是想删值，但是却不知道这个值的 Path 是什么。这个时候就需要利用之前讲到的 &lt;code&gt;JSON_SEARCH()&lt;/code&gt; 方法，它是根据值去查找路径的。比如说我们要删除 lilei 兴趣中的 badminton 选项可以这么写。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; UPDATE `user` SET `info` = JSON_REMOVE(`info`, JSON_UNQUOTE(JSON_SEARCH(`info`, &#x27;one&#x27;, &#x27;badminton&#x27;))) WHERE `name` = &#x27;lilei&#x27;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&amp;gt; SELECT JSON_VALUE(`info`, &#x27;$.hobby&#x27;) as hobby FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+----------------------------+
| hobby                      |
+----------------------------+
| [&quot;basketball&quot;, &quot;football&quot;] |
+----------------------------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里需要注意由于 &lt;code&gt;JSON_SEARCH&lt;/code&gt; 不会做类型转换，所以匹配出来的路径字符串需要进行 &lt;code&gt;JSON_UNQUOTE()&lt;/code&gt; 操作。另外还有非常重要的一点是 &lt;code&gt;JSON_SEARCH&lt;/code&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/44056978/how-do-i-use-json-search-to-find-the-path-of-a-number-in-a-mysql-json-array&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;无法对数值类型数据进行查找&lt;/a&gt;，也不知道这个是 Bug 还是 Feature。这也是为什么我没有使用 &lt;code&gt;score&lt;/code&gt; 来进行举例而是换成了 &lt;code&gt;hobby&lt;/code&gt; 的原因。如果数值类型的话目前只能取出来在代码中处理了。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; SELECT JSON_VALUE(`info`, &#x27;$.score&#x27;) FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+-------------------------------+
| JSON_VALUE(`info`, &#x27;$.score&#x27;) |
+-------------------------------+
| [90, 100]                     |
+-------------------------------+
1 row in set (0.00 sec)

mysql&amp;gt; SELECT JSON_SEARCH(`info`, &#x27;one&#x27;, 90, null, &#x27;$.score&#x27;) FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+-------------------------------------------------+
| JSON_SEARCH(`info`, &#x27;one&#x27;, 90, null, &#x27;$.score&#x27;) |
+-------------------------------------------------+
| NULL                                            |
+-------------------------------------------------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上对应到 &lt;code&gt;think-model&lt;/code&gt; 的写法为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 删除分数
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;lilei&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;exp&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JSON_REMOVE(info, &#x27;$.score[0]&#x27;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 删除兴趣
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;lilei&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;exp&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JSON_REMOVE(`info`, JSON_UNQUOTE(JSON_SEARCH(`info`, &#x27;one&#x27;, &#x27;badminton&#x27;)))&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;后记&lt;/h2&gt;&lt;p&gt;由于最近有一个需求，有一堆数据，要记录这堆数据的排序情况，方便根据排序进行输出。一般情况下肯定是给每条数据增加一个 &lt;code&gt;order&lt;/code&gt; 字段来记录该条数据的排序情况。但是由于有着批量操作，在这种时候使用单字段去存储会显得特别麻烦。在服务端同事的建议下，我采取了使用 JSON 字段存储数组的情况来解决这个问题。&lt;/p&gt;&lt;p&gt;也因为这样了解了一下 MySQL 对 JSON 的支持情况，同时将 &lt;code&gt;think-model&lt;/code&gt; 做了一些优化，对 JSON 数据类型增加了支持。由于大部分 JSON 操作需要通过内置的函数来操作，这个本身是可以通过 EXP 条件表达式来完成的。所以只需要对 JSON 数据的添加和查询做好优化就可以了。&lt;/p&gt;&lt;p&gt;整体来看，配合提供的 JSON 操作函数，MySQL 对 JSON 的支持完成一些日常的需求还是没有问题的。除了作为 WHERE 条件以及查询字段之外，其它的 &lt;code&gt;ORDER&lt;/code&gt;, &lt;code&gt;GROUP&lt;/code&gt;, &lt;code&gt;JOIN&lt;/code&gt; 等操作也都是支持 &lt;code&gt;JSON&lt;/code&gt; 数据的。&lt;/p&gt;&lt;p&gt;不过对比 MongoDB 这种天生支持 JSON 的话，在操作性上还是要麻烦许多。特别是在类型转换这块，使用一段时间后发现非常容易掉坑。什么时候会带引号，什么时候会不带引号，什么时候需要引号，什么时候不需要引号，这些都容易让新手发憷。另外 &lt;code&gt;JSON_SEARCH()&lt;/code&gt; 不支持数字查找这个也是一个不小的坑了。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c1037b1c92165ba26a74541dc6d48023</guid>
<title>[推荐] 项目管理标准模板</title>
<link>https://toutiao.io/k/aud21gw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;之前写了一篇&lt;a href=&quot;https://www.rowkey.cn/blog/2020/04/25/tech-leader-manage/&quot;&gt;《技术管理标准模板》&lt;/a&gt;，其中项目管理部分并没有具体深入，而这一技能不仅仅是对于技术Leader的要求，从我的经验看来，只要是程序员，具有项目管理能力都是如虎添翼的，即使你走的是专业路线。本文即基于自己的经验，从项目的启动和迭代阶段总结了敏捷项目管理的一些标准动作。&lt;/p&gt;




&lt;h2&gt;启动阶段&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;相关干系人沟通，同步项目背景、业务价值等&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动会议：召集相关干系人，明确业务相关信息，确定相关流程制度等&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需求收集和分析-&amp;gt;&lt;strong&gt;总体需求文档&lt;/strong&gt;，概括性的功能与非功能需求列表&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初步的产品规划-&amp;gt;&lt;strong&gt;每一轮迭代的需求列表、发布时间&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建项目基础设施-&amp;gt;&lt;strong&gt;可持续交付到测试环境的基础项目&lt;/strong&gt;，包括各个端的代码库、到测试环境的流水线等。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;迭代阶段&lt;/h2&gt;

&lt;p&gt;两周为一迭代，包括需求、设计、开发、测试、发布。关键点在于需求的拆分、优先级以及并行化。&lt;/p&gt;

&lt;h3&gt;1. 需求评审&lt;/h3&gt;

&lt;p&gt;对本轮迭代的需求尽心评审确认。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前置条件&lt;/strong&gt;：产品经理对此轮迭代进行需求确认，产出需求条目，按&lt;strong&gt;优先级&lt;/strong&gt;排列；需求需要拆的足够小，把大需求拆成一个个&lt;strong&gt;能够独立开发测试发布&lt;/strong&gt;的小需求&lt;/p&gt;

&lt;h3&gt;2. 工作规划&lt;/h3&gt;

&lt;p&gt;根据本轮迭代需求做WBS任务分解&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WBS工作项分解: 甘特图&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;里程碑结点: 表格或者里程碑图&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;风险管理：风险点预估、严重程度、可能性、应对措施&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;3. 设计/技术评审&lt;/h3&gt;

&lt;p&gt;分别对交互设计和技术设计进行评审&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前置条件&lt;/strong&gt;：设计师需要输出设计图；技术部分做概要设计和系统设计，随着每一轮迭代进行更新维护&lt;/p&gt;

&lt;h3&gt;4. 测试用例评审&lt;/h3&gt;

&lt;p&gt;由QA安排，会前需要提前将测试用例文档发给产品经理与研发，提前标注有疑问的用例。&lt;/p&gt;

&lt;h3&gt;5. 开发、测试过程的监控&lt;/h3&gt;

&lt;p&gt;持续交付：开发和迭代测试，需求开发完成后即测试并进行缺陷跟踪。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;会议&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;项目周报&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;汇总项目总体状况，回答三个问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;项目的整体进展状态到底如何？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;风险可控吗？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标达成有没有问题？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;6. 版本全量测试&lt;/h3&gt;

&lt;p&gt;对所有已经开发完的功能进行交叉测试、全量测试、埋点测试、回归测试、第三方云测。&lt;/p&gt;

&lt;h3&gt;7. 验包发布&lt;/h3&gt;

&lt;p&gt;此迭代所有功能开发测试完成后，提交审核流程，各流程审核人验收通过后发布。&lt;/p&gt;

&lt;h3&gt;8. 复盘&lt;/h3&gt;

&lt;p&gt;项目复盘会：有意识地向过去的行为经验学习&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;团队做对了哪些事？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做错了哪些事？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再来一次，如何做得更好？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8893791b79f7df71a7c4ab33674f12ff</guid>
<title>[推荐] 分布式事务解决方案常见误区与实用建议</title>
<link>https://toutiao.io/k/h9nal21</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;CREATE TABLE `t_local_message`(&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; id BIGINT PRIMARY KEY COMMENT &#x27;主键&#x27;,&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  module INT NOT NULL COMMENT &#x27;消息模块&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  tag VARCHAR(20) NOT NULL COMMENT &#x27;消息标签&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  business_key VARCHAR(60) NOT NULL COMMENT &#x27;业务键&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  queue VARCHAR(60) NOT NULL COMMENT &#x27;队列&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  exchange VARCHAR(60) NOT NULL COMMENT &#x27;交换器&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  exchange_type VARCHAR(10) NOT NULL COMMENT &#x27;交换器类型&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  routing_key VARCHAR(60) NOT NULL COMMENT &#x27;路由键&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  retry_times TINYINT NOT NULL DEFAULT 0 COMMENT &#x27;重试次数&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建日期时间&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  edit_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改日期时间&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  seq_no VARCHAR(60) NOT NULL COMMENT &#x27;流水号&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  message_status TINYINT NOT NULL DEFAULT 0 COMMENT &#x27;消息状态&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  INDEX idx_business_key(business_key),&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  INDEX idx_create_time(create_time),&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  UNIQUE uniq_seq_no(seq_no)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;)COMMENT &#x27;本地消息表&#x27;;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CREATE TABLE `t_local_message_content`(&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  id BIGINT PRIMARY KEY COMMENT &#x27;主键&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  message_id BIGINT NOT NULL COMMENT &#x27;本地消息表主键&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  message_content TEXT COMMENT &#x27;消息内容&#x27;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  UNIQUE uniq_message_id(message_id)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;)COMMENT &#x27;本地消息内容表&#x27;;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>94a9112ab8d66d1f262da1a2bea7c20d</guid>
<title>[推荐] 一个每秒超过 3 万请求的微服务开发经历</title>
<link>https://toutiao.io/k/s2yudly</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;导读：本文介绍的是一个国外的外卖平台 ifood 的微服务案例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ifood 是一家巴西外卖平台公司，平均每天送出 100 多万份订单，每年增长 110% 左右。作为一家外卖平台，访问峰值大多出现在午餐和晚餐前后，周末的时候会更高一些。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在一些特殊的日子里（比如由于营销活动），访问量曾打破记录，平台获得了历史最高峰值，去年 6 月 12 日。我们一个微服务达到了每分钟 20 0万请求的峰值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;故事背景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我在公司平台部门的账号与身份团队工作了大约一年半的时间，这是一个相当长的旅程，由于公司的快速发展，我们时常会面临很多挑战。&lt;strong&gt;在设计新的解决方案时，我们总是要牢记这样一个想法：在几个月后，系统的使用量会增长 2 - 3 倍。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;今天要讲的故事就是上面案例的一种情况，这个系统是在 2018 年左右开发的，当时公司每个月的订单量是 1300 万。如今已经超过 3000 万了。在这个案例中，系统的使用量是随着公司用户的增长比例而增长的，当然后来增长速度更加迅猛。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在内部，我们把这个微服务称为账号元数据。尽管这是一个通用的名字，但它也解释了这个服务的目的：它处理账号的元数据。什么是账号元数据？主要是指那些非关键的用户信息。举个例子：如果用户喜欢通过短信或邮件收到通知，喜欢的食物类型（比如汉堡、意大利面、日本料理等），一些功能标志，为该用户做的订单数量等等。它就像一个通用的存储，把不同地方的数据汇总起来，方便地服务于客户端调用，同时也服务于其他微服务，这样他们只需要调用一个微服务，而不是 10 个微服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最早在 2018 年时，账号元数据的建立主要是为了放一些杂乱的（并不怎么用的）信息，说实话，没有其他地方可以放。我们需要一点结构和查询能力，而且很容易扩展，所以我们选择了 AWS 提供的 DynamoDB。在这里要说明一下，我们明白系统可能会增长，当时公司也已经相当大了，平均负载是有挑战的。但是，我们还是没有预估到，我们会从每分钟 1 万个请求增长到 20 万，然后最终达到了 200万。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个微服务刚发布后，并没有多少人使用（与账号团队的其他微服务相比）。然而，几周后做出的一些新的架构调整，让这个系统变得非常重要，它将成为客户端获取用户所有信息的首批调用目标之一。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在此之后的几个月，其他团队开始把账号元数据看作是一个很好的功能，可以把分散存储在多个地方的信息都搬来这里，依赖多个服务毕竟很麻烦。另外，我们开始创建更多的聚合，让其他微服务的调用变得非常简单，也让其他团队更多的了解了它的知名度和重要性。现在，账号元数据除了用户每次打开应用的时候都会被调用，而且被很多团队在很多其他不同的场景下访问。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面就是一个非常简单的总结，介绍了从 2018 年到现在发生的事情，系统为何变得如此重要。在这期间，团队（我加上八个非常优秀的同事，非常幸运地与他们一起工作）积极地进行了工作，但工作并未停止，我们仍然在为我们负责的其他十个微服务进行优化、开发以及维护。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们做了一大堆的改动，如果要展开我们经历的所有场景，会花费太多时间，所以我只把当前要说的这个架构描述清楚，我们需要能够稳定地每分钟处理 200万个请求。是时候深入到技术部分了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;深入技术&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;正如前面所说，这个微服务存储了账号的元数据。在数据库中，我们将这些元数据分割成不同的上下文（在代码中称之为 namespace 命名空间）。一个客户（customer_id 作为分区键）可以有 1 到 N 个 namespace（作为排序键），而且每个 namespace 都有一个固定的、强制性的 schema，插入前通过  jsonschema 来定义和检查。有了它，我们就可以确保无论如何将数据插入到哪个 namespace 中（后面会有更多的细节），都会遵从它的模式和正确的用法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们使用这种方法，是因为这个系统中，读和写是由不同的团队来完成的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;插入工作是由数据科学团队完成的，他们每天都会从内部工具中导出数百万条记录到这个微服务中，并通过 API 将这数百万条记录分割成每次 500 条进行批量调用。所以，一天中的某个特定时间，这个微服务会收到数百万次的调用（间隔 10 到 20 分钟），将数据插入到 DynamoDB 中。如果接收 API 直接将数据写入数据库，就会碰到 Dynamo 扩展的一些问题，而且响应时间过慢也是个问题。解决这个瓶颈的方法是数据团队直接将数据写入数据库，但是，我们必须检查这些记录是否符合命名对应空间的 jsonschema，这是此微服务的责任。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以解决方案是，API 接收这批记录，并将它们发布在 SNS/SQS 消息队列上，而 SNS/SQS 将被另外一个模块来消费，然后验证这些记录，如果没问题，就保存在 Dynamo 上。通过这种方式，接收到这批记录的接口可以非常快速地响应，我们不依赖 HTTP 连接进行写入（这一点相当重要，因为与 Dynamo 的通信可能会失败，再次尝试可能会使 HTTP 响应时间变得非常慢）。另一个好处是，我们可以通过调整队列消费程序，来控制从 SQS 读取数据以及在 Dynamo 上写入数据的快慢。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在这个流程之外，账号元数据也会被另一个服务调用，每当平台收到一个新订单就会调用它，并更新这个订单的一些信息。鉴于 ifood 每天订单量超过 100 多万，微服务也会接受到这个数量的调用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;虽然上面提到有一个非常繁重的写的过程，但是这个服务 95% 的负载来自于 API 调用读取的请求。前面也提到，读写数据是由公司不同的团队完成的，读的调用牵涉到非常多的团队，包括客户端的调用。比较幸运的是，这个微服务读请求要比写请求多得多，因此它的扩展就更容易一些。因为任何一个大量读取数据的系统都需要一个缓存，这个也是如此，AWS 没有使用 Redis 之类的东西，而是提供了 DAX 作为 DynamoDB 的 &quot;内置&quot; 缓存。要使用它，你只需要让客户端理解不同查询操作中可能存在有复制延迟。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在这样的调用量下，出现一些异常的情况也是很正常的。在我们的案例中，我们看到 Dynamo 中的一些查询耗时超过 2 - 3 秒，而 99.99% 的调用都在 17ms 以下。尽管这些慢查询每天只有几千次，但我们希望为团队提供更好的 SLA。所以我们决定如果碰到 Dynamo 超时就进行重试。也相关团队也讨论过，让他们在调用我们的 API 时配置一个低超时。他们大多数 HTTP 客户端的默认时间是 2s，所以我们改成了大约 100ms。如果他们碰到超时（比方说微服务对 dynamo 做了重试，但又失败了），他们可以重试，并且很可能会马上得到响应。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了部署它，我们使用 k8s（达到 70 个左右的 pod），并随着每秒请求的增长而进行扩展。DynamoDB 被设置为供应（provision）而非按需。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一个重要的步骤是确保系统能够在真正高吞吐量的情况下健康地工作，我们每天对它进行负载/压力测试，以确保新版本部署没有降低性能。通过这个负载测试的结果，我们可以跟踪一个接口是随着时间的推移和它的发展而变好还是变坏。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着时间的推移，这个微服务变得越来越重要，如果由于某些原因出现故障，那就是一个不可承受的问题。为了解决这个问题，我们要求团队通过 Kong（我们的 API 网关）来调用微服务，并在那里配置了一个 fallback。如果微服务宕机或返回 500，Kong 会激活回调，客户端会得到一个默认结果。在这种情况下，fallback 目前指向一个 S3 bucket，里面有系统会提供的数据副本。它可能是一些过时数据，但这总比不返回任何数据要好。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后总结一下，本文简单描述了一个高性能微服务工作方式。虽然微服务还包括一些其他的工作流程，跟主题无关就不展开赘述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;再谈下微服务接下来的工作，尽管目前还不是完全清晰。微服务的使用量可能会更多，我们可能会达到一个点，开始变得越来越难让它 scale。一个替代方案可能是将其拆分成不同的微服务（甚至可能使用不同的数据库），或者聚合更多的数据以更好地服务于他们。不管如何，我们还是会不断地测试，找到瓶颈，并持续优化它们。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;英文原文：&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://medium.com/swlh/developing-a-microservice-to-handle-over-30k-requests-per-second-at-ifood-3e2d7b822b0e&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;参考阅读：&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文由高可用架构翻译，技术原创及架构实践文章，欢迎通过公众号菜单「联系我们」进行投稿。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;高可用架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;改变互联网的构建方式&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;img data-w=&quot;200&quot; data-type=&quot;jpeg&quot; data-s=&quot;300,640&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/8XkvNnTiapOPOK9rQud9XibGhPOPsA3gA8Wr4CEnzmhfZQzSGu0Q09GOuk18S9icZtuVnQewvyqZtOWyDnJPBDn1A/640?wx_fmt=jpeg&quot;/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;长按二维码 关注「高可用架构」公众号&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4df88e9d7742e6aadbce9e47f50f77de</guid>
<title>[推荐] 研发效能杂谈</title>
<link>https://toutiao.io/k/zacmqw3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;研发效能是什么？为什么现在都在谈如何提高研发效能？研发效能对于一个企业到底有多重要？本文按照Why、What、How三步走沉淀梳理了研发效能相关的知识点。&lt;/p&gt;




&lt;h2&gt;一. 为什么要提升研发效能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;传统的职能部门组织架构带来的效率竖井问题&lt;/li&gt;
&lt;li&gt;人力的增加没有让项目进度加快&lt;/li&gt;
&lt;li&gt;长久加班导致团队士气低落，后续的效率降低&lt;/li&gt;
&lt;li&gt;上线前加班、熬夜，压力大&lt;/li&gt;
&lt;li&gt;上线后Bug、事故频发，实现效果与需求不匹配&lt;/li&gt;
&lt;li&gt;各种重复低效工作，疲于应付业务&lt;/li&gt;
&lt;li&gt;想要有限的人力做更多的产出&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;二. 什么是研发效能&lt;/h2&gt;

&lt;p&gt;对于一个企业来说，追求的是企业效能的最大化，包括：利润、用户规模、客户满意度、运营效率等。而对于需要研发自有产品的互联网公司来说，研发效能则是服务于企业效能的至关重要的因素。&lt;/p&gt;

&lt;p&gt;一个软件研发的完整流程如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_images/dev/devprocess.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;此流程交付期望产品的效率和能力，即研发效能。更进一步的《研发效率破局之道》中将研发效能定义为团队能够持续地为用户产生有效价值的效率，包括 &lt;strong&gt;有效性（Effectiveness）、效率（Efficiency）和可持续性（Sustainability）&lt;/strong&gt; 三个方面。其增加的可持续性指出研发效能应该着眼于长期效果。&lt;/p&gt;

&lt;p&gt;一句话来讲，研发效能就是持续快速交付价值的能力。&lt;/p&gt;

&lt;h2&gt;三. 如何提升研发效能&lt;/h2&gt;

&lt;p&gt;对应于第一部分中讲述的软件开发流程，如果想要提升研发效能，那么需要落实到研发流程（组织结构、项目管理、持续交付）、工程方法、个人效能以管理和文化的实践上。本文重点从研发流程、工程方法两方面来讲。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_images/dev/whole.png&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;3.1 衡量指标&lt;/h3&gt;

&lt;p&gt;评估一个组织持续快速交付价值的能力，需要一组可量化的数据或参数，用来跟踪和评估开发过程的“健康”状况。&lt;/p&gt;

&lt;h4&gt;3.1.1 指标分类&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;持续发布能力

&lt;ul&gt;
&lt;li&gt;发布频率：单位时间内的有效发布次数&lt;/li&gt;
&lt;li&gt;发布前置时间：从代码提交到功能上线花费的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需求响应周期

&lt;ul&gt;
&lt;li&gt;交付周期时间：从确认用户提出的需求开始，到需求上线经历的平均时长。&lt;/li&gt;
&lt;li&gt;开发周期时间：从开发团队理解需求开始，到需求可以上线所经历的平均时长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交付吞吐率


&lt;/li&gt;
&lt;li&gt;交付过程质量：质量内建

&lt;ul&gt;
&lt;li&gt;缺陷创建和修复时间分布：缺陷能够持续和及时地被发现，并在发现后尽快修复。&lt;/li&gt;
&lt;li&gt;缺陷库存：开发过程控制缺陷库存量，让产品始终处于接近可发布状态，是持续交付的基础&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交付质量：系统的可用性


&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;3.1.2 通用目标&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;2：2周交付周期。从想法提出并确认到上线的时间。【跨职能、组织的协调一致和紧密协作】&lt;/li&gt;
&lt;li&gt;1：1周开发周期。从需求设计完成（对开发就绪）到达到可上线的时间。【需求的拆分和管理，开发团队的分工协作模式，持续交付实践】&lt;/li&gt;
&lt;li&gt;1：1小时的发布前置时间。代码提交后可以在1小时内完成发布。【持续交付流水线】&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;3.1.3 选择优化指标&lt;/h4&gt;

&lt;p&gt;流程中总是有一个核心瓶颈。分析关键路径、定位瓶颈，针对优化&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用指标来发现问题而不是做绩效考核&lt;/li&gt;
&lt;li&gt;使用指标来检验优化效果&lt;/li&gt;
&lt;li&gt;使用价值流图/累积流程图发现全局瓶颈，从而确定需要提升的度量指标&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;3.2 组织结构&amp;amp;&amp;amp;项目管理&lt;/h3&gt;

&lt;h4&gt;3.2.1 组织结构&lt;/h4&gt;

&lt;p&gt;避免“效率竖井”： 采用以业务为单位的组织架构，保证业务线全栈配齐，目标一致。并从全局定位瓶颈进而进行优化工作。&lt;/p&gt;

&lt;h4&gt;3.2.2 项目管理&lt;/h4&gt;

&lt;p&gt;使用敏捷开发来提升研发效率&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;敏捷 = 价值观 + 原则 + 一系列符合价值观和原则的方法。

&lt;ul&gt;
&lt;li&gt;软件应该一直处于可工作状态&lt;/li&gt;
&lt;li&gt;每个迭代都能将软件部署到一个类生产环境中，并向用户演示&lt;/li&gt;
&lt;li&gt;迭代长度不超过两周&lt;/li&gt;
&lt;li&gt;透明性、协作性、纪律性和持续改进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用MVP，度量驱动开发&lt;/li&gt;
&lt;li&gt;流程尽快流动：工程方法支撑&lt;/li&gt;
&lt;li&gt;发现整个流程中的瓶颈，并解决：可视化工作流、事故复盘&lt;/li&gt;
&lt;li&gt;避免“小瀑布”

&lt;ul&gt;
&lt;li&gt;价值排序&lt;/li&gt;
&lt;li&gt;满足客户需要&lt;/li&gt;
&lt;li&gt;需求拆分成能够独立测试的需求！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看板

&lt;ul&gt;
&lt;li&gt;从个人转变到关注价值流动：待开发-&amp;gt;设计-&amp;gt;开发-&amp;gt;开发自测-&amp;gt;代码评审-&amp;gt;测试-&amp;gt;完成&lt;/li&gt;
&lt;li&gt;明确的“完成的定义”DoD，明确了状态迁移必须完成的活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从实际出发、以终为始：以实用主义的态度，从原则出发，灵活优化流程&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;一个可供参考的项目管理标准动作可见：&lt;a href=&quot;https://www.rowkey.cn/blog/2020/07/31/project-manage/&quot;&gt;项目管理标准模板&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;3.3 持续交付&lt;/h3&gt;

&lt;p&gt;持续交付指的是在短周期内完成软件产品，以保证软件保持在随时可以发布的状态。让每一个变更都经过一条自动化的检验流水线，来检查每一个变更的质量，通过就进入下一个阶段。&lt;strong&gt;其不是一种工具，而是一种实践！&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要阻塞开发人员&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每个团队指定构建负责人或者发布工程师：优化交付流水线，提升交付效率&lt;/li&gt;
&lt;li&gt;项目状态，应该对参与整个过程（包括构建、部署、测试和发布）的所有人都是可见的&lt;/li&gt;
&lt;li&gt;风险管理

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;迭代增量式交付&lt;/strong&gt;是有效风险管理的关键&lt;/li&gt;
&lt;li&gt;手工测试环境、试运行环境和生产环境总是需要严格的访问控制&lt;/li&gt;
&lt;li&gt;让风险识别成为每日立会的一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;审计

&lt;ul&gt;
&lt;li&gt;手工测试环境、试运行环境和生产环境总是需要严格的访问控制：指定谁能够访问“特权”环境。&lt;/li&gt;
&lt;li&gt;要求每次部署都要进行审计，以确切知道到底修改了哪些内容。&lt;/li&gt;
&lt;li&gt;文档自动化、自文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;具体可见：&lt;a href=&quot;https://www.rowkey.cn/blog/2020/06/15/cd/&quot;&gt;持续交付这点事&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;3.3 工程方法&lt;/h3&gt;

&lt;h4&gt;3.3.1 技术债&lt;/h4&gt;

&lt;p&gt;在开发产品或者功能的过程中，没有使用最佳的实现方法而引入的技术问题。需要持续关注业务和技术债。对业务机会敏感，敢放手一搏大量借贷，也知道什么时候必须偿还技术债。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;利用技术债的好处，必要时要大胆“举债前行”&lt;/li&gt;
&lt;li&gt;控制技术债，在适当的时候偿还适当部分的技术债。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;3.4.2 云计算&lt;/h4&gt;

&lt;p&gt;利用好云计算带来的&lt;strong&gt;服务化、自助化和弹性伸缩&lt;/strong&gt;三大优势。初创公司在业务刚起步时，使用 SaaS 或者 PaaS 快速开发业务；业务成长到一定规模之后，再逐步转到 IaaS 以及私有云降低成本。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;细节抽象得越多，云服务商负责的部分就越多，我们就越能够聚焦自己的业务，从而提高研发效能&lt;/li&gt;
&lt;li&gt;使用云资源时，通过工具或者 API 调用来完成工作，减少人工参与，达到自动化&lt;/li&gt;
&lt;li&gt;资源共享、弹性伸缩&lt;/li&gt;
&lt;li&gt;容器：不可变基础设施；基于K8S建设PaaS&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;在使用云计算时，要妥善处理它带来的挑战，比如分布式系统带来的安全和控制方面的问题。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自治和集中管理相结合：信息可视化（系统整体的质量看板、调用链追踪）&lt;/li&gt;
&lt;li&gt;错误处理&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;3.4.3 测试机制&lt;/h4&gt;

&lt;p&gt;上文持续交付一部分中最关键的其实就是测试部分，只有具有完善、可靠的测试机制，才能保证研发质量和交付效果，才能从根本上提高研发效能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;测试左移：质量内建，即持续交付中的测试机制。

&lt;ul&gt;
&lt;li&gt;按照功能的维度管理团队，让整个功能团队对产品负责；改变团队成员对测试工作的认知&lt;/li&gt;
&lt;li&gt;把测试添加到开发和产品需求步骤中&lt;/li&gt;
&lt;li&gt;频繁测试，快速测试：提升测试运行的速度，并行运行、提高构建速度、精准测试、分层测试、减少不必要的用例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试右移

&lt;ul&gt;
&lt;li&gt;利用线上的真实环境测试：需要有完备的数据隔离机制&lt;/li&gt;
&lt;li&gt;测试人员介入线上监控和预警，及时发现问题并跟进解决&lt;/li&gt;
&lt;li&gt;混沌工程：即在真实环境中通过模拟各种不可预期的故障来验证系统稳定性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;3.4.4 平台化&lt;/h4&gt;

&lt;p&gt;通过抽象共性组件、功能，达到代码、功能复用，从而减少重复开发，提高研发效能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;技术平台：技术设施的复用&lt;/li&gt;
&lt;li&gt;数据中台：数据沉淀和输出能力&lt;/li&gt;
&lt;li&gt;移动中台：前端组件、跨平台开发、插件化、热加载&lt;/li&gt;
&lt;li&gt;业务中台


&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;相关资料可见：&lt;a href=&quot;https://www.rowkey.cn/blog/2019/11/23/middle-talk/&quot;&gt;中台简谈&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;3.5 个人效能&lt;/h3&gt;

&lt;p&gt;如何提高开发人员自身的开发效率，除了每个人自身的天赋能力外，也有一些可以刻意使用的高效工具和方法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;高效工作方法


&lt;/li&gt;
&lt;li&gt;高效开发工具

&lt;ul&gt;
&lt;li&gt;好的IDE&lt;/li&gt;
&lt;li&gt;操作系统快捷键&lt;/li&gt;
&lt;li&gt;思维导图软件&lt;/li&gt;
&lt;li&gt;学习笔记软件&lt;/li&gt;
&lt;li&gt;文档撰写工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;持续学习：不断地学习新的开发技能，从而提升自己的开发效率&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;此外，还可以通过技术管理从外部驱动个人效能的提升，这在下面的技术管理部分会讲。&lt;/p&gt;

&lt;h3&gt;3.6 管理和文化&lt;/h3&gt;

&lt;h4&gt;3.6.1 技术管理&lt;/h4&gt;

&lt;p&gt;管理包括：看方向、管人、管事。做好技术管理是提高研发效能的关键部分。其中，3.4节个人效能部分的数字驱动也是技术管理的一部分。主要步骤包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;制定目标：兼顾业务目标和技术目标&lt;/li&gt;
&lt;li&gt;目标管理：使用OKR等目标管理方案&lt;/li&gt;
&lt;li&gt;计划并执行去实现目标&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;此外，技术管理中一个很难的问题是如何进行考核。这里可以使用数字化的方式，以驱动个人效能的提升。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;选择个人效能度量指标&lt;/li&gt;
&lt;li&gt;根据代码提交日志自动生成工作日报和周报、个人贡献值&lt;/li&gt;
&lt;li&gt;综合多维数据构建个人的数据画像

&lt;ul&gt;
&lt;li&gt;社会地位：用排名、榜单来实现；&lt;/li&gt;
&lt;li&gt;工作本身：用复合型报告去综合评价，告知员工究竟做得好不好&lt;/li&gt;
&lt;li&gt;自我改变：通过雷达图，进行多维度的数据分析，精准提炼员工的优点与不足，员工可以有针对性的取长补短。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;需要说明的是，如果指标不能全方面的衡量，就不要做为考核指标，仅仅用于发现问题，解决问题！&lt;/p&gt;

&lt;p&gt;一个可参考的技术管理标准动作模板见：&lt;a href=&quot;https://www.rowkey.cn/blog/2020/04/25/tech-leader-manage/&quot;&gt;技术管理标准模板&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;3.6.2 团队文化&lt;/h4&gt;

&lt;p&gt;团队文化是团队成员共同认可的价值观和行为准则，良好且有效的文化是保障团队高效产出的关键部分。很多互联网公司都是工程师文化主导的，包括Facebook、Google、百度等。他们也都具有自己独特的企业文化价值观，如百度的简单可依赖、谷歌的不作恶、Netflix的自由和责任。建立团队文化的步骤如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;定义：总结、明确自己团队的文化，提炼出简单易记的文字。&lt;/li&gt;
&lt;li&gt;主张：各种形式的传播。从我自己的经历来看，不断地念经是其中最有效的方式。&lt;/li&gt;
&lt;li&gt;追求：在奖惩中体现出文化价值观的作用。如对于文化价值观贯彻优秀的同学给与公开的肯定与奖励。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;四. 参考资料&lt;/h2&gt;



&lt;/div&gt;



  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>