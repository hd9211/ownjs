<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e24bf854065d987f774b0dafdae55c08</guid>
<title>服务端监控架构设计与实践</title>
<link>https://toutiao.io/k/xhwa9mo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;28&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;作者：vivo互联网服务器团队-Deng Haibo&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、业务背景&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;当今时代处在信息大爆发的时代，信息借助互联网的潮流在全球自由的流动，产生了各式各样的平台系统和软件系统，越来越多的业务也会导致系统的复杂性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当核心业务出现了问题影响用户体验，开发人员没有及时发现，发现问题时已经为时已晚，又或者当服务器的CPU持续增高，磁盘空间被打满等，需要运维人员及时发现并处理，这就需要一套有效的监控系统对其进行监控和预警。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如何对这些业务和服务器进行监控和维护是我们开发人员和运维人员不可忽视的重要一环，这篇文章全篇大约5000多字，我将对vivo服务端监控的原理和架构演进之路做一次系统性整理，以便大家做监控技术选型时参考。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;vivo服务端监控旨在为服务端应用提供包括系统监控、JVM监控以及自定义业务指标监控在内的一站式数据监控，并配套实时、多维度、多渠道的告警服务，帮助用户及时掌握应用多方面状态，事前及时预警发现故障，事后提供详实的数据用于追查定位问题，提升服务可用性。目前vivo服务端监控累计接入业务方数量达到200+，本文介绍的是服务端监控，我司还有其他类型的优秀监控包括通用监控、调用链监控和客户端监控等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1.1 监控系统的基本流程&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;无论是开源的监控系统还是自研的监控系统，整体流程都大同小异。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）数据采集&lt;/strong&gt;：可以包括JVM监控数据如GC次数，线程数量，老年代和新生代区域大小；系统监控数据如磁盘使用使用率，磁盘读写的吞吐量，网络的出口流量和入口流量，TCP连接数；业务监控数据如错误日志，访问日志，视频播放量，PV，UV等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）数据传输&lt;/strong&gt;：将采集的数据以消息形式或者 HTTP 协议的形式等上报给监控系统。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）数据存储&lt;/strong&gt;：有使用 MySQL、Oracle 等 RDBMS 存储的，也有使用时序数据库OpenTSDB、InfluxDB 存储的，还有使用 HBase 直接存储的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）数据可视化&lt;/strong&gt;：数据指标的图形化展示，可以是折线图，柱状图，饼图等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5）监控告警&lt;/strong&gt;：灵活的告警设置，以及支持邮件、短信、IM 等多种通知通道。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1.2 如何规范的使用监控系统&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在使用监控系统之前，我们需要了解监控对象的基本工作原理，例如JVM监控，我们需要清楚JVM的内存结构组成和常见的垃圾回收机制；其次需要确定如何去描述和定义监控对象的状态，例如监控某个业务功能的接口性能，可以监控该接口的请求量，耗时情况，错误量等；在确定了如何监控对象的状态之后，需要定义合理的告警阈值和告警类型，当收到告警提醒时，帮助开发人员及时发现故障；最后建立完善的故障处理体系，收到告警时迅速响应，及时处理线上故障。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、vivo服务端监控系统架构及演进之路&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在介绍vivo服务端监控系统架构之前，先带大家了解一下OpenTSDB时序数据库，在了解之前说明下为什么我们会选择OpenTSDB，原因有以下几点：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1） 监控数据采集指标在某一时间点具有唯一值，没有复杂的结构及关系。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）监控数据的指标具有随着时间不断变化的特点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）基于HBase分布式、可伸缩的时间序列数据库，存储层不需要过多投入精力，具有HBase的高吞吐，良好的伸缩性等特点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）开源，Java实现，并且提供基于HTTP的应用程序编程接口，问题排查快可修改。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.1 OpenTSDB简介&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1）基于HBase的分布式的，可伸缩的时间序列数据库，主要用途就是做监控系统。譬如收集大规模集群（包括网络设备、操作系统、应用程序）的监控数据并进行存储和查询，支持秒级数据采集，支持永久存储，可以做容量规划，并很容易地接入到现有的监控系统里，OpenTSDB的系统架构图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6401673640167364&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2xnobx3xsmp0DabiaMibXiaK7qDoGCCp1ENT4pZhkz8JibQcuANQbg49Emw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;478&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（来自官方文档）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;存储结构单元为Data Point，即某个Metric在某个时间点的数值。Data Point包括以下部分：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;核心存储两张表：tsdb和tsdb-uid。表tsdb用来存储监控数据，如下图：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;291&quot; data-backw=&quot;517&quot; data-ratio=&quot;0.562862669245648&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2uX5jPrHdt43qWrRpWxAee60D0AUpSGOdDsTUpnJS31qoaDnT6hXeeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;517&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;（图片出处：&lt;/span&gt;&lt;span&gt;https://www.jianshu.com&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Row Key为Metric+Timestamp的小时整点+TagKey+TagValue，取相应的字节映射组合起来；列族t下的Qualifier为Timestamp的小时整点余出的秒数，对应的值即为Value。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt; 表tsdb-uid用来存储刚才提到的字节映射，如下图：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;292&quot; data-backw=&quot;530&quot; data-ratio=&quot;0.5509433962264151&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2qAR97ziaovPrDoibeTkzZ3ETUFqpY9kWjEjwAib0mlBers3cOWp0k5rIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;530&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（图片出处：&lt;/span&gt;&lt;span&gt;https://www.jianshu.com&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图中的“001”表示tagk=hots或者tagv=static，提供正反查询。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt; 2）OpenTSDB使用策略说明：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.2 OpenTSDB在实践中需要关注的点&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）精确性问题&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;String &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;0.51&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt; f = Float.parseFloat(&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; raw = Float.floatToRawIntBits(f);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;byte&lt;/span&gt;[] float_bytes = Bytes.fromInt(raw);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; raw_back = Bytes.getInt(float_bytes, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; decode = Float.intBitsToFloat(raw_back);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Parsed Float: &quot;&lt;/span&gt; + f);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Encode Raw: &quot;&lt;/span&gt; + raw);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Encode Bytes: &quot;&lt;/span&gt; + UniqueId.uidToString(float_bytes));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Decode Raw: &quot;&lt;/span&gt; + raw_back);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Decoded Float: &quot;&lt;/span&gt; + decode);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;如上代码，OpenTSDB在存储浮点型数据时，无法知悉存储意图，在转化时会遇到精确性问题，即存储&quot;0.51&quot;，取出为&quot;0.5099999904632568&quot;。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2）聚合函数问题&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;OpenTSDB的大部分聚合函数，包括sum、avg、max、min都是LERP（linear interpolation）的插值方式，即所获取的值存在被补缺的现象，对于有空值需求的使用很不友好。详细原理参见OpenTSDB关于interpolation的文档。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前vmonitor服务端监控使用的OpenTSDB是我们改造后的源码，新增了nimavg函数，配合自带的zimsum函数满足空值插入需求。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.3 vivo服务端监控采集器原理&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.670906200317965&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2bzVFH3vskVC1tKZUX7jlxc7NUUwriaDBZgP4JKDU1OB8nryHWaOiaibpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;629&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）定时器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;内含3种采集器：OS采集器、JVM采集器和业务指标采集器，其中OS及JVM每分钟执行采集和汇聚，业务指标采集器会实时采集并在1分钟的时间点完成汇聚重置，3份采集器的数据打包上报至RabbitMQ，上报动作异步超时。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2）业务指标采集器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;业务指标采集方式有2种：日志输出过滤和工具类代码上报(侵入式)，日志输出过滤是通过继承log4j的Filter，从而获取指标配置中指定的Appender输出的renderedMessage，并根据指标配置的关键词、聚合方式等信息进行同步监听采集；代码上报根据代码中指定的指标code进行message信息上报，属于侵入式的采集方式，通过调用监控提供的Util实现。业务指标配置每隔5分钟会从CDN刷新，内置多种聚合器供聚合使用，包括count计数、 sum求和、average平均、max最大值和min最小值统计。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.4 vivo服务端监控老版本架构设计&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2ksJjSLjN7LrhmVwaGdE1CWZNepoxfV2doZhMu67QsTeP1Gq2gC5kicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）数据采集及上报&lt;/strong&gt;：需求方应用接入的监控采集器vmonitor-agent根据监控指标配置采集相应数据，每分钟上报1次数据至RabbitMQ，所采用的指标配置每5分钟从CDN下载更新，CDN内容由监控后台上传。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）计算及存储&lt;/strong&gt;：监控后台接收RabbitMQ的数据，拆解后存储至OpenTSDB，供可视化图表调用，监控项目、应用、指标和告警等配置存储于MySQL；通过Zookeeper和Redis实现分布式任务分发模块，实现多台监控服务协调配合运作，供分布式计算使用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）告警检测&lt;/strong&gt;：从OpenTSDB获取监控指标数据，根据告警配置检测异常，并将异常通过第三方依赖自研消息、短信发送，告警检测通过分布式任务分发模块完成分布式计算。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.5 vivo服务端监控老版本部署架构&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）自建机房A&lt;/strong&gt;：部署架构以国内为例，监控工程部署在自建机房A，监听本机房的RabbitMQ消息，依赖的Redis、OpenTSDB、MySQL、Zookeeper等均在同机房，需要上传的监控指标配置由文件服务上传至CDN，供监控需求应用设备调用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）云机房&lt;/strong&gt;：云机房的监控需求应用设备将监控数据上报至云机房本地的RabbitMQ，云机房的RabbitMQ将指定队列通过路由的方式转发至自建机房A的RabbitMQ，云机房的监控配置通过CDN拉取。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.6 vivo服务端监控新版本架构设计&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6959876543209876&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2mwk22Mt3nO0dprIgonou1mBzOhFUU2lMh2TboMNqH3q42qf8nfKtNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;648&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）采集（接入方）&lt;/strong&gt;：业务方接入vmonitor-collector，并在相应环境的监控后台配置相关监控项即完成接入，vmonitor- collector将定时拉取监控项配置，采集服务数据并每分钟上报。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）数据聚合&lt;/strong&gt;：老版本支持的是RabbitMQ将采集到的数据，路由至监控机房的RabbitMQ（同机房则不发生该行为），由监控后台服务消费；CDN负责承载各应用的配置供应用定时拉取。新版本vmonitor-gateway作为监控数据网关，采用http方式上报监控数据以及拉取指标配置，抛弃了之前使用的RabbitMQ上报以及CDN同步配置的途径，避免两者故障时对监控上报的影响。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）可视化并且支持告警与配置&lt;/strong&gt;（监控后台vmonitor）：负责前台的数据多元化展示（包括业务指标数据，分机房汇总数据，单台服务器数据，以及业务指标复合运算呈现），数据聚合，告警（目前包括短信及自研消息）等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）数据存储&lt;/strong&gt;：存储使用HBASE集群和开源的OpenTSDB作为聚合的中介，原始数据上报之后通过OpenTSDB持久化到HBase集群，Redis作为分布式数据存储调度任务分配、告警状态等信息，后台涉及的指标和告警配置存储于MySQL。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、监控采集上报和存储监控数据策略&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;为降低监控接入成本以及避免RabbitMQ上报故障和CDN同步配置故障对监控体系带来的影响，将由采集层通过HTTP直接上报至代理层，并通过采集层和数据代理层的队列实现灾时数据最大程度的挽救。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9052287581699346&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2Y8thqGIQ3OsS52sXoOWDvJeNgewlIiby6cqJ4G33PiczVJnh8QecSyDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;详细流程说明如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）采集器&lt;/strong&gt;（vmonitor-collector）根据监控配置每分钟采集数据并压缩，存储于本地队列（最大长度100，即最大存储100分钟数据），通知可进行HTTP上报，将数据上报至网关。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）网关&lt;/strong&gt;（vmonitor-gateway）接收到上报的数据后鉴权，认定非法即丢弃；同时判断当前是否下层异常熔断，如果发生则通知采集层重置数据退回队列。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt; 3）网关校验&lt;/strong&gt;上报时带来的监控配置版本号，过期则在结果返回时将最新监控配置一并返回要求采集层更新配置。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）网关将上报的数据存储于该应用对应的Redis队列中（单个应用缓存队列key最大长度1w）；存储队列完成后立即返回HTTP上报，表明网关已接受到数据，采集层可移除该条数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;5）网关对Redis队列数据进行解压以及数据聚合；如果熔断器异常则暂停前一行为；完成后通过HTTP存储至OpenTSDB；如果存储行为大量异常则触发熔断器。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、核心指标&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.1 系统监控告警和业务监控告警&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;将采集到的数据通过OpenTSDB存放到HBase中后，通过分布式任务分发模块完成分布式计算。如果符合业务方配置的告警规则，则触发相应的告警，对告警信息进行分组并且路由到正确的通知方。可以通过短信自研消息进行告警发送，可通过名字、工号、拼音查询录入需要接收告警的人员，当接收到大量重复告警时能够消除重复的告警信息，所有的告警信息可以通过MySQL表进行记录方便后续查询和统计，告警的目的不仅仅是帮助开发人员及时发现故障建立故障应急机制，同时也可以结合业务特点的监控项和告警梳理服务，借鉴行业最佳监控实践。告警流程图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.164179104477612&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2Q9aB26AG1WRFuZRtCf5H6VAhwLBUdng4DM1G5gDAKKG5L4LFwQSHtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;536&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.2 支持的告警类型以及计算公式&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）最大值&lt;/strong&gt;：当指定字段超过该值时触发报警（报警阈值单位：number）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）最小值&lt;/strong&gt;：当指定字段低于该值时触发报警（报警阈值单位：number）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）波动量&lt;/strong&gt;：取当前时间到前15分钟这段时间内的最大值或者最小值与这15分钟内的平均值做浮动百分比报警，波动量需要配置波动基线，标识超过该基线数值时才做“报警阀值”判定，低于该基线数值则不触发报警（报警阈值单位：percent）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;计算公式&lt;/strong&gt;： &lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;180&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;波动量-向上波动计算公式：float rate = (float) (max - avg) / (float) avg;&lt;/p&gt;&lt;p&gt;波动量-向下波动计算公式：float rate = (float) (avg - min) / (float) avg;&lt;/p&gt;&lt;p&gt;波动量-区间波动计算公式：float rate = (float) (max - min) / (float) max;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）日环比&lt;/strong&gt;：取当前时间与昨天同一时刻的值做浮动百分比报警（报警阈值单位：percent）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;计算公式：float rate = （当前值 - 上一周期值）/上一周期值&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5）周环比&lt;/strong&gt;：取当前时间与上周同一天的同一时刻的值做浮动百分比报警（报警阈值单位：percent）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;计算公式：float rate = （当前值 - 上一周期值）/上一周期值&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6）小时日环比&lt;/strong&gt;：取当前时间到前一小时内的数据值总和与昨天同一时刻的前一小时内的数据值总和做浮动百分比报警（报警阈值单位：percent）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;计算公式：float rate = (float) (anHourTodaySum - anHourYesterdaySum) / (float) anHourYesterdaySum。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、演示效果&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;5.1 业务指标数据查询&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）查询条件栏“指标”可选择指定指标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）双击图表上指标名称可展示大图，底部是根据起始时间的指标域合计值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）滚轮可以缩放图表。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;284&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4913294797687861&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2xdSySPfcPIPhCiaiapNDrNkwkOFOhKAs82MfiaTuMea1szz5T3Ua1heUA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1557&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;5.2 系统监控&amp;amp;JVM监控指标数据查询&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）每分钟页面自动刷新。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）如果某行，即某台机器整行显示红色，则代表该机器已逾半小时未上报数据，如机器是非正常下线就要注意排查了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）点击详情按钮，可以对系统&amp;amp;JVM监控数据进行明细查询。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;345&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.59765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2a73Izviar15dla3eU9mbyK0extiaicic5SHcDszTKTAZIiao0Cgvzkic2ZnA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;5.3 业务指标配置&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt; 单个监控指标(普通)可以针对单个指定Appender的日志文件进行数据采集。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;【必填】【指标类型】为“普通”、“复合”两种，复合是将多个普通指标二次聚合，所以正常情况下需要先新增普通指标。&lt;/p&gt;&lt;p&gt;【必填】【图表顺序】正序排列，控制指标图表在数据页面上的展示顺序。&lt;/p&gt;&lt;p&gt;【必填】【指标代码】默认自动生成UUID短码。&lt;/p&gt;&lt;p&gt;【可选】【Appender】为log4j日志文件的appender名称，要求该appender必须被logger的ref引用；如果使用侵入式采集数据则无需指定。&lt;/p&gt;&lt;p&gt;【可选】【关键字】为过滤日志文件行的关键词。&lt;/p&gt;&lt;p&gt;【可选】【分隔符】是指单行日志列分割的符号，一般为&quot;,&quot;英文逗号或其它符号。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;295&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5100430416068866&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4g5IMGibSxt5W1AmZ2hW8H1NbJxJEbCnvOnoxhHLXHianEhK7vUtLnx2AEIChuTiaWlvkkbzWibFtVYic2oESKIKhGA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1394&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;六、主流监控对比&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;6.1 Zabbix&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Zabbix 于 1998 年诞生，核心组件采用 C 语言开发，Web 端采用 PHP 开发，它属于老牌监控系统中的优秀代表，能够监控网络参数，服务器健康和软件完整性，使用也很广泛。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Zabbix采用MySQL 进行数据存储，所有没有OpenTSDB支持 Tag的特性，因此没法按多维度进行聚合统计和告警配置，使用起来不灵活。Zabbix 没有提供对应的 SDK，应用层监控支持有限，也没有我们自研的监控提供了侵入式的埋点和采集功能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总体而言Zabbix 的成熟度更高，高集成度导致灵活性较差，在监控复杂度增加后，定制难度会升高，而且使用的MySQL关系型数据库，对于大规模的监控数据插入和查询是个问题。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;288&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.49760765550239233&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2xJMpslHaNzZQQUFqTIB3hgWU5W7UxsxOXq1w7vjz5PKMD4jS0zdpjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;627&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;6.2 Open-Falcon&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;OpenFalcon 是一款企业级、高可用、可扩展的开源监控解决方案，提供实时报警、数据监控等功能，采用 Go 和 Python 语言开发，由小米公司开源。使用 Falcon 可以非常容易的监控整个服务器的状态，比如磁盘空间，端口存活，网络流量等等。基于 Proxy-gateway，很容易通过自主埋点实现应用层的监控（比如监控接口的访问量和耗时）和其他个性化监控需求，集成方便。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;339&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5857805255023184&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2ntKb9cibxayI3L7lcRAk2HiaJv54Q6o8edlic2gXt2CA5cHQrBkAFKVaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;647&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;官方的架构图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;384&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6635658914728683&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2ZGZf6RIEHIAhic5YsBwg6LR8ice73TcQALcSiaHGcRO7EIW495zsewJ8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;645&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;6.3 Prometheus（普罗米修斯）&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Prometheus是由SoundCloud开发的开源监控报警系统和时序列数据库(TSDB)，Prometheus使用Go语言开发，是Google BorgMon监控系统的开源版本。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;和小米的Open-Falcon一样，借鉴 OpenTSDB，数据模型中引入了 Tag，这样能支持多维度的聚合统计以及告警规则设置，大大提高了使用效率。监控数据直接存储在 Prometheus Server 本地的时序数据库中，单个实例可以处理数百万的 Metrics，架构简单，不依赖外部存储，单个服务器节点可直接工作。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;482&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;384&quot; data-ratio=&quot;0.8333333333333334&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2O8ygDKEZ2dMZ2cZbrEfjcJg8GOHuKuTgWXWHx5D0BByichjKCezcUpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;630&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;官方的架构图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I29Q34qB2cvJKicoBbJTdI7tBgnm4gV3roiabn4L4wTkT4ibr4Lvo50uwhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;630&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;6.4 vivo服务端监控vmonitor&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;vmonitor作为监控后台管理系统，可以进行可视化查看，告警的配置，业务指标的配置等，具备JVM监控、系统监控和业务监控的功能。通过采集层（vmonitor-collector采集器）和数据代理层（vmonitor-gateway网关）的队列实现灾时数据最大程度的挽救。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;提供了SDK方便业务方集成，支持日志输出过滤和侵入式代码上报数据等应用层监控统计，基于OpenTSDB时序开源数据库，对其源码进行了改造，新增了nimavg函数，配合自带的zimsum函数满足空值插入需求，具有强大的数据聚合能力，可以提供实时、多维度、多渠道的告警服务。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;261&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4514637904468413&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2Xs68KiafYF87d5Kzh2p2hWPfhaYq34WUJMBiaTbuEJ8W6gLOxDreU4qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;649&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;七、总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;676&quot; data-backw=&quot;578&quot; data-ratio=&quot;1.1690140845070423&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2ib1F9eR2UuP9M40SDs5mph7JUBhW1jgeRdT0sAS1OwaicxokFsxW3veQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;781&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本文主要介绍了vivo服务端监控架构的设计与演进之路，是基于java技术栈做的一套实时监控系统，同时也简单列举了行业内主流的几种类型的监控系统，希望有助于大家对监控系统的认识，以及在技术选型时做出更合适的选择。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;监控体系里面涉及到的面很广，是一个庞大复杂的体系，本文只是介绍了服务端监控里的JVM监控，系统监控以及业务监控（包含日志监控和工具类代码侵入式上报），未涉及到客户端监控和全链路监控等，如果想理解透彻，必须理论结合实践再做深入。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;section data-recommend-type=&quot;list-normal&quot; data-recommend-tid=&quot;2&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501257_1&quot; data-recommend-article-time=&quot;1636251616&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/zc3KLDBfJlm8bD2WBlwbvnsktMdtfSudNaJWbHr1Iyr6HkwCxETHiaiceaWYLmq7tWmHV29U8Xv8UnoeCAOYNj9Q/0?wx_fmt=jpeg&amp;amp;amp;random=0.27521905775014543&quot; data-recommend-article-title=&quot;强势开源一款小程序！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501257&amp;amp;idx=1&amp;amp;sn=7b4e27cdb1d3146a5e7e1951b5bdc9e8&amp;amp;chksm=c1ca33f9f6bdbaefd3874fa6313e422c8fb6b2799b40d09f36620f0ceaed4fd63c820da1f3ff#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501257&amp;amp;idx=1&amp;amp;sn=7b4e27cdb1d3146a5e7e1951b5bdc9e8&amp;amp;chksm=c1ca33f9f6bdbaefd3874fa6313e422c8fb6b2799b40d09f36620f0ceaed4fd63c820da1f3ff&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;强势开源一款小程序！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-11-07&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zc3KLDBfJlm8bD2WBlwbvnsktMdtfSudNaJWbHr1Iyr6HkwCxETHiaiceaWYLmq7tWmHV29U8Xv8UnoeCAOYNj9Q/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501242_1&quot; data-recommend-article-time=&quot;1634952613&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UWibGeSzVdcKHzDRdVHusb9CJicA5FdhDVPAiaicdTbibx5XoRkhKA3O7Q727cTSurBkJpciczjLrF2wkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;强力推荐一个完善的物流（WMS）管理项目（附代码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501242&amp;amp;idx=1&amp;amp;sn=aa2297b69874de0993f62ea404376bab&amp;amp;chksm=c1ca338af6bdba9cf3e051ff3001e1f31f9fa97350f3851c797d6486eca360df537196dbe67b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501242&amp;amp;idx=1&amp;amp;sn=aa2297b69874de0993f62ea404376bab&amp;amp;chksm=c1ca338af6bdba9cf3e051ff3001e1f31f9fa97350f3851c797d6486eca360df537196dbe67b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;强力推荐一个完善的物流（WMS）管理项目（附代码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-10-23&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UWibGeSzVdcKHzDRdVHusb9CJicA5FdhDVPAiaicdTbibx5XoRkhKA3O7Q727cTSurBkJpciczjLrF2wkA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501238_1&quot; data-recommend-article-time=&quot;1634606700&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VduLA9tc9dQkaw5HWIV6pqNrOiciaE17jeIeTtoLfgLbyu67dWkRj3tjKX7AFIMrV0rKD5ic6kwicyxg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一个 Spring Boot + MyBatis + Vue 音乐网站&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501238&amp;amp;idx=1&amp;amp;sn=d7e873d752a28b582d70bc9f7a981ddb&amp;amp;chksm=c1ca3386f6bdba9031ce115e734ce04c9b6728e8e027fbcf17d8d07f1e029ea5bea04f4a6273#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501238&amp;amp;idx=1&amp;amp;sn=d7e873d752a28b582d70bc9f7a981ddb&amp;amp;chksm=c1ca3386f6bdba9031ce115e734ce04c9b6728e8e027fbcf17d8d07f1e029ea5bea04f4a6273&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一个 Spring Boot + MyBatis + Vue 音乐网站&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-10-19&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VduLA9tc9dQkaw5HWIV6pqNrOiciaE17jeIeTtoLfgLbyu67dWkRj3tjKX7AFIMrV0rKD5ic6kwicyxg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501208_1&quot; data-recommend-article-time=&quot;1632101100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VibcP3PNgQvXGZ7UJkVeu0JZsrldvF1urHlmNwhUP89IeKHz1PfJ12es2ArTwkYibAh3Y0soOib2rjA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;分享一套家庭理财系统（附源码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501208&amp;amp;idx=1&amp;amp;sn=44fcdfe2d7f81a26845faf33750ea9bb&amp;amp;chksm=c1ca33a8f6bdbabec8ff34719f438465adf745cbef30bfb92be53897c714d8c13bdd01989d17#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501208&amp;amp;idx=1&amp;amp;sn=44fcdfe2d7f81a26845faf33750ea9bb&amp;amp;chksm=c1ca33a8f6bdbabec8ff34719f438465adf745cbef30bfb92be53897c714d8c13bdd01989d17&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;分享一套家庭理财系统（附源码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-09-20&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42407407407407405&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VibcP3PNgQvXGZ7UJkVeu0JZsrldvF1urHlmNwhUP89IeKHz1PfJ12es2ArTwkYibAh3Y0soOib2rjA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501192_1&quot; data-recommend-article-time=&quot;1630718700&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UG0pYPldneUCCVsPia3Rtr9j3hlFHakhItFlOXuwLicUqQvP1PhkTM28CUU9BpRCWfWPfHYredCBiaA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一个互联网企业级别的开源支付系统&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501192&amp;amp;idx=1&amp;amp;sn=444404a565f02a8c532d291d99678a7b&amp;amp;chksm=c1ca33b8f6bdbaaeb7c65d9f6f0c399f609fb203f065b6e88a3ad5431473713dbb5ae3507b32#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501192&amp;amp;idx=1&amp;amp;sn=444404a565f02a8c532d291d99678a7b&amp;amp;chksm=c1ca33b8f6bdbaaeb7c65d9f6f0c399f609fb203f065b6e88a3ad5431473713dbb5ae3507b32&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一个互联网企业级别的开源支付系统&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-09-04&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UG0pYPldneUCCVsPia3Rtr9j3hlFHakhItFlOXuwLicUqQvP1PhkTM28CUU9BpRCWfWPfHYredCBiaA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501176_1&quot; data-recommend-article-time=&quot;1629509100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VQRwetNLhDOB2Ej0fDZK4eRXsYlRNicgmsWwmuvlhibooic3N3su1lbMQPqWD186JiaOC5yJ9iaaic8bzw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一套开源通用后台管理系统（附源码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501176&amp;amp;idx=1&amp;amp;sn=68e3ae7a9dc33fbbd379906ddcefdf5b&amp;amp;chksm=c1ca3348f6bdba5e1774625745f5ef40081c9b8eb0189073734b6808efb872720781d25b8dc0#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501176&amp;amp;idx=1&amp;amp;sn=68e3ae7a9dc33fbbd379906ddcefdf5b&amp;amp;chksm=c1ca3348f6bdba5e1774625745f5ef40081c9b8eb0189073734b6808efb872720781d25b8dc0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一套开源通用后台管理系统（附源码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-08-21&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4265625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VQRwetNLhDOB2Ej0fDZK4eRXsYlRNicgmsWwmuvlhibooic3N3su1lbMQPqWD186JiaOC5yJ9iaaic8bzw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501153_1&quot; data-recommend-article-time=&quot;1627704022&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UbyFoOMqOObokEYiahCar20LiaY8ZLGKzU7NYQQoGycgnhrmIzNJibPicGcNia3cbbXlYib6bcLJVV5aww/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;一款神仙接私活儿软件，吊到不行！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501153&amp;amp;idx=1&amp;amp;sn=bb29cffa56431b72a92709c0ae993af7&amp;amp;chksm=c1ca3351f6bdba4729c671cdcd0ee8b6af75c6ce8a7003e6c032942b849aab5bfedecd0f9d3b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501153&amp;amp;idx=1&amp;amp;sn=bb29cffa56431b72a92709c0ae993af7&amp;amp;chksm=c1ca3351f6bdba4729c671cdcd0ee8b6af75c6ce8a7003e6c032942b849aab5bfedecd0f9d3b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;一款神仙接私活儿软件，吊到不行！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-07-31&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4265625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UbyFoOMqOObokEYiahCar20LiaY8ZLGKzU7NYQQoGycgnhrmIzNJibPicGcNia3cbbXlYib6bcLJVV5aww/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501139_1&quot; data-recommend-article-time=&quot;1626571500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VGxZrbRFy96Sm9cXQzVEhiaLibUUYhYH1SJL4HUXenau3DCeq0KEOsguY4CWjaEd1BeAicJd24qFM2w/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;基于 SpringBoot 的仿豆瓣平台【源码分享】&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501139&amp;amp;idx=1&amp;amp;sn=f133e70bda8abae27459ccc4d3d6d8fd&amp;amp;chksm=c1ca3363f6bdba75b9a4145510d9b6108c56146a3146b2e2e6d660a08221618b01c815d55642#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501139&amp;amp;idx=1&amp;amp;sn=f133e70bda8abae27459ccc4d3d6d8fd&amp;amp;chksm=c1ca3363f6bdba75b9a4145510d9b6108c56146a3146b2e2e6d660a08221618b01c815d55642&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;基于 SpringBoot 的仿豆瓣平台【源码分享】&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-07-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42427884615384615&quot; data-type=&quot;jpeg&quot; data-w=&quot;832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VGxZrbRFy96Sm9cXQzVEhiaLibUUYhYH1SJL4HUXenau3DCeq0KEOsguY4CWjaEd1BeAicJd24qFM2w/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501105_1&quot; data-recommend-article-time=&quot;1623979500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7Xw68Ow8vZian4lanQFAu09f4JOZlXbC85jsByb8V6StkOpibAdgPamPWoPPY3G7S3nic50QvxxuGNrg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;干掉 Wordpress！这个开源建站神器有点吊！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501105&amp;amp;idx=1&amp;amp;sn=caf01186b6d2e4a38e940ce07d822238&amp;amp;chksm=c1ca3301f6bdba17ba7127da24e28963ae40f944e587f14b57405e2a9ee9d8cdbcb835c880c8#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501105&amp;amp;idx=1&amp;amp;sn=caf01186b6d2e4a38e940ce07d822238&amp;amp;chksm=c1ca3301f6bdba17ba7127da24e28963ae40f944e587f14b57405e2a9ee9d8cdbcb835c880c8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;干掉 Wordpress！这个开源建站神器有点吊！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-06-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42578125&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7Xw68Ow8vZian4lanQFAu09f4JOZlXbC85jsByb8V6StkOpibAdgPamPWoPPY3G7S3nic50QvxxuGNrg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501098_2&quot; data-recommend-article-time=&quot;1623461160&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VzIP6xibP6U8htKa7YEad1iaTE02ZbsOfvDX1D8LoTiaNsMVgdjFOdm5LahpnNXFe3ibSp8S4FJ39KkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;从朋友那里搞了 20 个实战项目，速领！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4#rd&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;从朋友那里搞了 20 个实战项目，速领！&lt;/a&gt;&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;2021-06-12&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VzIP6xibP6U8htKa7YEad1iaTE02ZbsOfvDX1D8LoTiaNsMVgdjFOdm5LahpnNXFe3ibSp8S4FJ39KkA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;200&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4703703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Baq5lYpIw7X6YPYGQITyP8Zdk96ab7CX0Ind5E05VokoepTP9Adic0xRwiaQrAvfTeC7iafngRibhBShpVqibqNcCCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如有收获，点个在看，诚挚感谢&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100018364&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;19&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk54JM0xl7WLNGnqqwbcXQBWIOCMuOgPHRoOjMamXzrCqMS2xgOo5ibic9icPk7u3zsVgic3s1ZUYJ4xHXg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>07a014b0526bfe336e6658ba28a8a97f</guid>
<title>场景化面试：关于分布式锁的十问十答</title>
<link>https://toutiao.io/k/1uhzu4h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;面试官问：在某次产品迭代中，产品经理提出一个新的需求，要求在用户生日当天上午十点发送祝福短信，你会如何实现这个功能？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：这个需求是定时任务的典型场景，使用定时任务在指定的时间点去扫描出符合条件的用户列表，并循环调用发送短信的接口即可。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：好，这个定时任务的服务起码会部署两个实例，以避免单点故障，那如何避免两个实例同时给同一个用户发送短信造成重复短信呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：这个问题的本质是同一个时刻只能有一个实例运行定时任务，是典型的分布式锁场景。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：那为什么需要分布式锁？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：分布式锁其实是单机锁在分布式场景下的延伸，在说明为什么需要分布式锁之前，我先简单介绍下锁的概念，锁是操作系统的基本原语，它是用于并发控制的，能够确保在多 CPU 、多个线程的环境中，某一个时间点上，只能有一个线程进入&lt;strong&gt;临界区代码&lt;/strong&gt;，从而保证临界区中操作数据的一致性；当把使用场景扩展到分布式环境中，也就是跨机器跨进程时，就是分布式锁，本质上是解决进程间访问临界区代码的问题，上面定时任务中要执行的发送短信的代码就是临界区代码。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：那一个相对完备的分布式锁需要具备哪些特性？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：实现一个分布式锁，首先要确定锁存放在哪里？对于单机锁我们可以使用内存中的一个整数的不同取值来表示加锁或者解锁的状态；对于分布式锁，由于这个锁需要被不同机器上的进程访问到，因此，一般是把锁存放在共享存储中，例如关系型数据库、分布式缓存等。确定锁的存放位置，接下来 就需要考虑分布式锁需要具备哪些核心特性，总结起来主要有：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;互斥性&lt;/strong&gt;：在分布式高并发条件下，同一时刻只有一个线程可以获得锁。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;超时机制&lt;/strong&gt;：锁服务和请求锁的服务分散在不同的机器上面，它们之间是通过网络来通信的，所以我们需要用超时机制，来避免获得锁的节点故障或者网络异常，导致它持有的锁不能释放，出现死锁的情况。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;可重入性&lt;/strong&gt;：一个节点的一个线程如果已经获得这把锁，那么这个线程在持有锁的期间，可以再次成功获取锁。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;公平性&lt;/strong&gt;：根据具体的实现，锁可以分为公平锁和非公平锁，假如目前有三个线程在竞争同一把锁，线程 A 成功获得锁，线程 B 和线程 C 没有获取到并阻塞等待 A 释放锁，且线程 B 先于线程 C 阻塞等待，那么在线程 A 释放锁后，这把锁会被等待时间最长的线程 B 获得，按照先来先得的原则，那么这把锁就是公平锁，反之就是非公平锁。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;完备的锁接口&lt;/strong&gt;：即锁的接口定义中，加锁操作要同时提供阻塞式接口 lock 和非阻塞式接口 tryLock，解锁操作要提供 release 接口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：对于上面说到的超时机制，如果持有锁的节点处理临界区的代码比较耗时，所需时间大于锁的超时时间，这时会出现临界区代码还没有处理完这把锁就被释放掉了，最终导致其他节点可以获取这把锁并执行临界区代码，导致互斥失效的问题，如何解决呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：这个问题可以通过锁续约来解决，也就是通过另外一个线程通过心跳机制来不断延长锁的超时时间。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：好，那锁的重入性具体怎么实现？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：由于我们是实现同一个线程可以重复获取一把锁，因此，在加锁成功后，我们要记录下获得这把锁的节点id+线程id，将它俩的组合作为唯一标识和这把锁绑定；并在加锁逻辑执行之前，增加一个判断，如果当前请求的节点id+线程id和当前持有锁的相同，那么直接返回成功即可，否则执行正常的加锁逻辑。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：分布式锁的实现方法有哪几种？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：分布式锁有三种主流实现方法，分别是：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;基于关系型数据库（例如 MySQL）：创建一张表用于记录共享资源信息，对临界资源做唯一性约束，通过增加一条记录来对某个资源加锁，通过删除记录释放锁。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;基于分布式缓存 Redis ：通过调用 Redis 函数 SETNX+EXPIRE 实现，同时为了保证原子性，可以通过 Lua 脚本来实现锁的设置和过期时间的原子性。在 Redis 2.6.12 版本后 SETNX 增加了过期时间参数，也可以直接使用这个重载方法。SETNX 方法返回 1 表示获得 key 所代表的锁，返回 0 表示获取锁失败&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;基于分布式协调服务 ZooKeeper ：在对应的持久节点 shared_lock 的目录下为每个进程创建一个&lt;strong&gt;临时顺序节点&lt;/strong&gt;，然后查看哪个进程对应的节点编号最小，最小说明是最先创建的，因此获得锁，否则，等待最小编号节点释放锁。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：那这三种实现方式的优缺点、使用场景如何？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：数据库实现方式优点是实现简单，缺点是容易出现单点故障，死锁问题，而且性能和可靠性低；Redis 实现方式优点是性能高，可以跨集群部署，无单点故障问题；缺点是锁失效时间控制不稳定，可靠性不如基于 ZooKeeper 方式实现高；ZooKeeper 方式优点是没有单点故障、死锁问题，可靠性高；缺点是性能没有 Redis 方式高。从使用场景上看，数据库方式适合系统并发量不大且对性能要求不高的场景；Redis 方式适合高并发和对性能要求高的场景；ZooKeeper 方式适用于大部分场景（除了对性能要求极高的场景）。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：如果是在 Redis 集群环境下，由于 Redis 集群数据同步到各个节点时是异步的，如果在 Master 节点获取到锁后，在还没有同步到其它节点时，Master 节点崩溃了，此时新选举出来的 Master 节点依然可以获取锁，就会导致多个应用实例可以同时获取到锁，锁的互斥性失效，这种问题如何解决？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：确实会存在这种情况，因此，一般基于 Redis 集群实现的分布式锁我们建议使用 RedLock 算法，开源 Reddison 函数库实现了这个算法。在不同的节点上使用单个实例获取锁的方式去获得锁，且每次获取锁都有超时时间，如果请求超时，则认为该 Redis 节点不可用。当应用服务成功获取锁的 Redis 节点超过半数（N/2+1，N 为节点数) 时，并且获取锁消耗的实际时间不超过锁的过期时间，则获取锁成功。一旦获取锁成功，就会重新计算释放锁的时间，该时间是由原来释放锁的时间减去获取锁所消耗的时间；而如果获取锁失败，客户端依然会释放获取锁成功的节点。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：分布式锁的使用场景，除了我们上面说到的定时任务，还有哪些常见的使用场景？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：在秒杀活动中，为了防止库存超卖时可以使用。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;旁白&lt;/strong&gt;：关于分布式锁，有一个不错的开源实现，&lt;span&gt;lock4j&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;，基于Spring AOP 的声明式和编程式分布式锁，支持 RedisTemplate、Redisson、Zookeeper 等，其他分布式锁实现也可以自己扩展。&lt;/p&gt;&lt;h2&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;《高性能Java架构：核心原理与案例实战》第12章&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;分布式锁：所有的分布式锁都是错误的？&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;分布式锁：关键重地，非请勿入&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;如何设计更优的分布式锁？&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; lock4j: &lt;em&gt;https://github.com/baomidou/lock4j&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; 《高性能Java架构：核心原理与案例实战》第12章: &lt;em&gt;https://weread.qq.com/web/reader/6ba32c40726e7c066bad7edk7f33291023d7f39f8317e0b&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; 分布式锁：所有的分布式锁都是错误的？: &lt;em&gt;http://gk.link/a/11usl&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[4]&lt;/code&gt; 分布式锁：关键重地，非请勿入: &lt;em&gt;http://gk.link/a/11usy&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; 如何设计更优的分布式锁？: &lt;em&gt;http://gk.link/a/11usT&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fa2be41c38488972edbb47422343da95</guid>
<title>七种方案！探讨Redis分布式锁的正确使用姿势 【转】</title>
<link>https://toutiao.io/k/mkzst6n</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body cnblogs-markdown&quot;&gt;
&lt;p&gt;日常开发中，秒杀下单、抢红包等等业务场景，都需要用到分布式锁。而Redis非常适合作为分布式锁使用。本文将分七个方案展开，跟大家探讨Redis分布式锁的正确使用方式。如果有不正确的地方，欢迎大家指出哈，一起学习一起进步。&lt;/p&gt;
&lt;p&gt;公众号：&lt;strong&gt;捡田螺的小男孩&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是分布式锁&lt;/li&gt;
&lt;li&gt;方案一：SETNX + EXPIRE&lt;/li&gt;
&lt;li&gt;方案二：SETNX + value值是（系统时间+过期时间）&lt;/li&gt;
&lt;li&gt;方案三：使用Lua脚本(包含SETNX + EXPIRE两条指令)&lt;/li&gt;
&lt;li&gt;方案四：SET的扩展命令（SET EX PX NX）&lt;/li&gt;
&lt;li&gt;方案五：SET EX PX NX + 校验唯一随机值,再删除释放&lt;/li&gt;
&lt;li&gt;方案六: 开源框架:Redisson&lt;/li&gt;
&lt;li&gt;方案七：多机实现的分布式锁Redlock&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;什么是分布式锁&quot;&gt;什么是分布式锁&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;分布式锁其实就是，控制分布式系统不同进程共同访问共享资源的一种锁的实现。如果不同的系统或同一个系统的不同主机之间共享了某个临界资源，往往需要互斥来防止彼此干扰，以保证一致性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们先来看下，一把靠谱的分布式锁应该有哪些特征：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1458744/202103/1458744-20210308231146154-1760541322.png&quot; alt=&quot;&quot; class=&quot;medium-zoom-image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;互斥性&lt;/strong&gt;: 任意时刻，只有一个客户端能持有锁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;锁超时释放&lt;/strong&gt;：持有锁超时，可以释放，防止不必要的资源浪费，也可以防止死锁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可重入性&lt;/strong&gt;:一个线程如果获取了锁之后,可以再次对其请求加锁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高性能和高可用&lt;/strong&gt;：加锁和解锁需要开销尽可能低，同时也要保证高可用，避免分布式锁失效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：锁只能被持有的客户端删除，不能被其他客户端删除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;redis分布式锁方案一setnx--expire&quot;&gt;Redis分布式锁方案一：SETNX + EXPIRE&lt;/h3&gt;
&lt;p&gt;提到Redis的分布式锁，很多小伙伴马上就会想到&lt;code&gt;setnx&lt;/code&gt;+ &lt;code&gt;expire&lt;/code&gt;命令。即先用&lt;code&gt;setnx&lt;/code&gt;来抢锁，如果抢到之后，再用&lt;code&gt;expire&lt;/code&gt;给锁设置一个过期时间，防止锁忘记了释放。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SETNX 是SET IF NOT EXISTS的简写.日常命令格式是SETNX key value，如果 key不存在，则SETNX成功返回1，如果这个key已经存在了，则返回0。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设某电商网站的某商品做秒杀活动，key可以设置为key_resource_id,value设置任意值，伪代码如下：&lt;/p&gt;
&lt;pre class=&quot;highlighter-hljs&quot;&gt;&lt;code class=&quot;highlighter-hljs hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if（jedis.setnx(key_resource_id,lock_value) == &lt;span class=&quot;hljs-number&quot;&gt;1）{ &lt;span class=&quot;hljs-comment&quot;&gt;//加锁
    expire（key_resource_id，&lt;span class=&quot;hljs-number&quot;&gt;100）; &lt;span class=&quot;hljs-comment&quot;&gt;//设置过期时间
    &lt;span class=&quot;hljs-keyword&quot;&gt;try {
        &lt;span class=&quot;hljs-keyword&quot;&gt;do something  &lt;span class=&quot;hljs-comment&quot;&gt;//业务请求
    }&lt;span class=&quot;hljs-keyword&quot;&gt;catch(){
　　}
　　&lt;span class=&quot;hljs-keyword&quot;&gt;finally {
       jedis.del(key_resource_id); &lt;span class=&quot;hljs-comment&quot;&gt;//释放锁
    }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是这个方案中，&lt;code&gt;setnx&lt;/code&gt;和&lt;code&gt;expire&lt;/code&gt;两个命令分开了，&lt;strong&gt;不是原子操作&lt;/strong&gt;。如果执行完&lt;code&gt;setnx&lt;/code&gt;加锁，正要执行&lt;code&gt;expire&lt;/code&gt;设置过期时间时，进程crash或者要重启维护了，那么这个锁就“长生不老”了，&lt;strong&gt;别的线程永远获取不到锁啦&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;redis分布式锁方案二setnx--value值是系统时间过期时间&quot;&gt;Redis分布式锁方案二：SETNX + value值是(系统时间+过期时间)&lt;/h3&gt;
&lt;p&gt;为了解决方案一，&lt;strong&gt;发生异常锁得不到释放的场景&lt;/strong&gt;，有小伙伴认为，可以把过期时间放到&lt;code&gt;setnx&lt;/code&gt;的value值里面。如果加锁失败，再拿出value值校验一下即可。加锁代码如下：&lt;/p&gt;
&lt;pre class=&quot;highlighter-hljs&quot;&gt;&lt;code class=&quot;highlighter-hljs hljs language-kotlin&quot;&gt;long expires = System.currentTimeMillis() + expireTime; &lt;span class=&quot;hljs-comment&quot;&gt;//系统时间+设置的过期时间
String expiresStr = String.valueOf(expires);

&lt;span class=&quot;hljs-comment&quot;&gt;// 如果当前锁不存在，返回加锁成功
&lt;span class=&quot;hljs-keyword&quot;&gt;if (jedis.setnx(key_resource_id, expiresStr) == &lt;span class=&quot;hljs-number&quot;&gt;1) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-literal&quot;&gt;true;
} 
&lt;span class=&quot;hljs-comment&quot;&gt;// 如果锁已经存在，获取锁的过期时间
String currentValueStr = jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;get(key_resource_id);

&lt;span class=&quot;hljs-comment&quot;&gt;// 如果获取到的过期时间，小于系统当前时间，表示已经过期
&lt;span class=&quot;hljs-keyword&quot;&gt;if (currentValueStr != &lt;span class=&quot;hljs-literal&quot;&gt;null &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;Long.parseLong(currentValueStr) &amp;lt; System.currentTimeMillis()) {

     &lt;span class=&quot;hljs-comment&quot;&gt;// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间（不了解redis的getSet命令的小伙伴，可以去官网看下哈）
    String oldValueStr = jedis.getSet(key_resource_id, expiresStr);
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if (oldValueStr != &lt;span class=&quot;hljs-literal&quot;&gt;null &amp;amp;&amp;amp; oldValueStr.equals(currentValueStr)) {
         &lt;span class=&quot;hljs-comment&quot;&gt;// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才可以加锁
         &lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-literal&quot;&gt;true;
    }
}
        
&lt;span class=&quot;hljs-comment&quot;&gt;//其他情况，均返回加锁失败
&lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-literal&quot;&gt;false;
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个方案的优点是，巧妙移除&lt;code&gt;expire&lt;/code&gt;单独设置过期时间的操作，把&lt;strong&gt;过期时间放到setnx的value值&lt;/strong&gt;里面来。解决了方案一发生异常，锁得不到释放的问题。但是这个方案还有别的缺点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;过期时间是客户端自己生成的（System.currentTimeMillis()是当前系统的时间），必须要求分布式环境下，每个客户端的时间必须同步。&lt;/li&gt;
&lt;li&gt;如果锁过期的时候，并发多个客户端同时请求过来，都执行jedis.getSet()，最终只能有一个客户端加锁成功，但是该客户端锁的过期时间，可能被别的客户端覆盖&lt;/li&gt;
&lt;li&gt;该锁没有保存持有者的唯一标识，可能被别的客户端释放/解锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;redis分布式锁方案三使用lua脚本包含setnx--expire两条指令&quot;&gt;Redis分布式锁方案三：使用Lua脚本(包含SETNX + EXPIRE两条指令)&lt;/h3&gt;
&lt;p&gt;实际上，我们还可以使用Lua脚本来保证原子性（包含setnx和expire两条指令），lua脚本如下：&lt;/p&gt;
&lt;pre class=&quot;highlighter-hljs&quot;&gt;&lt;code class=&quot;highlighter-hljs hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if redis.&lt;span class=&quot;hljs-keyword&quot;&gt;call(&lt;span class=&quot;hljs-comment&quot;&gt;&#x27;setnx&#x27;,KEYS[1],ARGV[1]) == 1 then
   redis.&lt;span class=&quot;hljs-keyword&quot;&gt;call(&lt;span class=&quot;hljs-comment&quot;&gt;&#x27;expire&#x27;,KEYS[1],ARGV[2])
&lt;span class=&quot;hljs-keyword&quot;&gt;else
   &lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-number&quot;&gt;0
&lt;span class=&quot;hljs-keyword&quot;&gt;end;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加锁代码如下：&lt;/p&gt;
&lt;pre class=&quot;highlighter-hljs&quot;&gt;&lt;code class=&quot;highlighter-hljs hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String lua_scripts = &lt;span class=&quot;hljs-string&quot;&gt;&quot;if redis.call(&#x27;setnx&#x27;,KEYS[1],ARGV[1]) == 1 then&quot; +
            &lt;span class=&quot;hljs-string&quot;&gt;&quot; redis.call(&#x27;expire&#x27;,KEYS[1],ARGV[2]) return 1 else return 0 end&quot;;   
&lt;span class=&quot;hljs-title class_&quot;&gt;Object result = jedis.&lt;span class=&quot;hljs-built_in&quot;&gt;eval(lua_scripts, &lt;span class=&quot;hljs-title class_&quot;&gt;Collections.&lt;span class=&quot;hljs-title function_&quot;&gt;singletonList(key_resource_id), &lt;span class=&quot;hljs-title class_&quot;&gt;Collections.&lt;span class=&quot;hljs-title function_&quot;&gt;singletonList(values));
&lt;span class=&quot;hljs-comment&quot;&gt;//判断是否成功
&lt;span class=&quot;hljs-keyword&quot;&gt;return result.&lt;span class=&quot;hljs-title function_&quot;&gt;equals(1L);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个方案，跟方案二对比，你觉得哪个更好呢？&lt;/p&gt;
&lt;h3 id=&quot;redis分布式锁方案方案四set的扩展命令set-ex-px-nx&quot;&gt;Redis分布式锁方案方案四：SET的扩展命令（SET EX PX NX）&lt;/h3&gt;
&lt;p&gt;除了使用，使用Lua脚本，保证&lt;code&gt;SETNX + EXPIRE&lt;/code&gt;两条指令的原子性，我们还可以巧用Redis的SET指令扩展参数！（&lt;code&gt;SET key value[EX seconds][PX milliseconds][NX|XX]&lt;/code&gt;），它也是原子性的！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SET key value[EX seconds][PX milliseconds][NX|XX]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NX :表示key不存在的时候，才能set成功，也即保证只有第一个客户端请求才能获得锁，而其他客户端请求只能等其释放锁，才能获取。&lt;/li&gt;
&lt;li&gt;EX seconds :设定key的过期时间，时间单位是秒。&lt;/li&gt;
&lt;li&gt;PX milliseconds: 设定key的过期时间，单位为毫秒&lt;/li&gt;
&lt;li&gt;XX: 仅当key存在时设置值&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;伪代码demo如下：&lt;/p&gt;
&lt;pre class=&quot;highlighter-hljs&quot;&gt;&lt;code class=&quot;highlighter-hljs hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if（jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;set(key_resource_id, lock_value, &lt;span class=&quot;hljs-string&quot;&gt;&quot;NX&quot;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EX&quot;, &lt;span class=&quot;hljs-number&quot;&gt;100s) == &lt;span class=&quot;hljs-number&quot;&gt;1）{ &lt;span class=&quot;hljs-comment&quot;&gt;//加锁
    &lt;span class=&quot;hljs-keyword&quot;&gt;try {
        &lt;span class=&quot;hljs-keyword&quot;&gt;do something  &lt;span class=&quot;hljs-comment&quot;&gt;//业务处理
    }&lt;span class=&quot;hljs-keyword&quot;&gt;catch(){
　　}
　　&lt;span class=&quot;hljs-keyword&quot;&gt;finally {
       jedis.del(key_resource_id); &lt;span class=&quot;hljs-comment&quot;&gt;//释放锁
    }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是呢，这个方案还是可能存在问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题一：&lt;strong&gt;锁过期释放了，业务还没执行完&lt;/strong&gt;。假设线程a获取锁成功，一直在执行临界区的代码。但是100s过去后，它还没执行完。但是，这时候锁已经过期了，此时线程b又请求过来。显然线程b就可以获得锁成功，也开始执行临界区的代码。那么问题就来了，临界区的业务代码都不是严格串行执行的啦。&lt;/li&gt;
&lt;li&gt;问题二：&lt;strong&gt;锁被别的线程误删&lt;/strong&gt;。假设线程a执行完后，去释放锁。但是它不知道当前的锁可能是线程b持有的（线程a去释放锁时，有可能过期时间已经到了，此时线程b进来占有了锁）。那线程a就把线程b的锁释放掉了，但是线程b临界区业务代码可能都还没执行完呢。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;方案五set-ex-px-nx---校验唯一随机值再删除&quot;&gt;方案五：SET EX PX NX + 校验唯一随机值,再删除&lt;/h3&gt;
&lt;p&gt;既然锁可能被别的线程误删，那我们给value值设置一个标记当前线程唯一的随机数，在删除的时候，校验一下，不就OK了嘛。伪代码如下：&lt;/p&gt;
&lt;pre class=&quot;highlighter-hljs&quot;&gt;&lt;code class=&quot;highlighter-hljs hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if（jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;set(key_resource_id, uni_request_id, &lt;span class=&quot;hljs-string&quot;&gt;&quot;NX&quot;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EX&quot;, &lt;span class=&quot;hljs-number&quot;&gt;100s) == &lt;span class=&quot;hljs-number&quot;&gt;1）{ &lt;span class=&quot;hljs-comment&quot;&gt;//加锁
    &lt;span class=&quot;hljs-keyword&quot;&gt;try {
        &lt;span class=&quot;hljs-keyword&quot;&gt;do something  &lt;span class=&quot;hljs-comment&quot;&gt;//业务处理
    }&lt;span class=&quot;hljs-keyword&quot;&gt;catch(){
　　}
　　&lt;span class=&quot;hljs-keyword&quot;&gt;finally {
       &lt;span class=&quot;hljs-comment&quot;&gt;//判断是不是当前线程加的锁,是才释放
       &lt;span class=&quot;hljs-keyword&quot;&gt;if (uni_request_id.&lt;span class=&quot;hljs-keyword&quot;&gt;equals(jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;get(key_resource_id))) {
        jedis.del(lockKey); &lt;span class=&quot;hljs-comment&quot;&gt;//释放锁
        }
    }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这里，&lt;strong&gt;判断是不是当前线程加的锁&lt;/strong&gt;和&lt;strong&gt;释放锁&lt;/strong&gt;不是一个原子操作。如果调用jedis.del()释放锁的时候，可能这把锁已经不属于当前客户端，会解除他人加的锁。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1458744/202103/1458744-20210308231319184-1463675929.png&quot; alt=&quot;&quot; class=&quot;medium-zoom-image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了更严谨，一般也是用lua脚本代替。lua脚本如下：&lt;/p&gt;
&lt;pre class=&quot;highlighter-hljs&quot;&gt;&lt;code class=&quot;highlighter-hljs hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if redis.&lt;span class=&quot;hljs-keyword&quot;&gt;call(&lt;span class=&quot;hljs-comment&quot;&gt;&#x27;get&#x27;,KEYS[1]) == ARGV[1] then 
   &lt;span class=&quot;hljs-keyword&quot;&gt;return redis.&lt;span class=&quot;hljs-keyword&quot;&gt;call(&lt;span class=&quot;hljs-comment&quot;&gt;&#x27;del&#x27;,KEYS[1]) 
&lt;span class=&quot;hljs-keyword&quot;&gt;else
   &lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-number&quot;&gt;0
&lt;span class=&quot;hljs-keyword&quot;&gt;end;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;redis分布式锁方案六redisson框架&quot;&gt;Redis分布式锁方案六：Redisson框架&lt;/h3&gt;
&lt;p&gt;方案五还是可能存在&lt;strong&gt;锁过期释放，业务没执行完&lt;/strong&gt;的问题。有些小伙伴认为，稍微把锁过期时间设置长一些就可以啦。其实我们设想一下，是否可以给获得锁的线程，开启一个定时守护线程，每隔一段时间检查锁是否还存在，存在则对锁的过期时间延长，防止锁过期提前释放。&lt;/p&gt;
&lt;p&gt;当前开源框架Redisson解决了这个问题。我们一起来看下Redisson底层原理图吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1458744/202103/1458744-20210308231303484-1275738816.png&quot; alt=&quot;&quot; class=&quot;medium-zoom-image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;只要线程一加锁成功，就会启动一个&lt;code&gt;watch dog&lt;/code&gt;看门狗，它是一个后台线程，会每隔10秒检查一下，如果线程1还持有锁，那么就会不断的延长锁key的生存时间。因此，Redisson就是使用Redisson解决了&lt;strong&gt;锁过期释放，业务没执行完&lt;/strong&gt;问题。&lt;/p&gt;
&lt;h3 id=&quot;redis分布式锁方案七多机实现的分布式锁redlockredisson&quot;&gt;Redis分布式锁方案七：多机实现的分布式锁Redlock+Redisson&lt;/h3&gt;
&lt;p&gt;前面六种方案都只是基于单机版的讨论，还不是很完美。其实Redis一般都是集群部署的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1458744/202103/1458744-20210308231240610-475776552.png&quot; alt=&quot;&quot; class=&quot;medium-zoom-image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果线程一在Redis的master节点上拿到了锁，但是加锁的key还没同步到slave节点。恰好这时，master节点发生故障，一个slave节点就会升级为master节点。线程二就可以获取同个key的锁啦，但线程一也已经拿到锁了，锁的安全性就没了。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，Redis作者 antirez提出一种高级的分布式锁算法：Redlock。Redlock核心思想是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;搞多个Redis master部署，以保证它们不会同时宕掉。并且这些master节点是完全相互独立的，相互之间不存在数据同步。同时，需要确保在这多个master实例上，是与在Redis单实例，使用相同方法来获取和释放锁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们假设当前有5个Redis master节点，在5台服务器上面运行这些Redis实例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1458744/202103/1458744-20210308231219266-570218503.png&quot; alt=&quot;&quot; class=&quot;medium-zoom-image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;RedLock的实现步骤:如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.获取当前时间，以毫秒为单位。&lt;/li&gt;
&lt;li&gt;2.按顺序向5个master节点请求加锁。客户端设置网络连接和响应超时时间，并且超时时间要小于锁的失效时间。（假设锁自动失效时间为10秒，则超时时间一般在5-50毫秒之间,我们就假设超时时间是50ms吧）。如果超时，跳过该master节点，尽快去尝试下一个master节点。&lt;/li&gt;
&lt;li&gt;3.客户端使用当前时间减去开始获取锁时间（即步骤1记录的时间），得到获取锁使用的时间。当且仅当超过一半（N/2+1，这里是5/2+1=3个节点）的Redis master节点都获得锁，并且使用的时间小于锁失效时间时，锁才算获取成功。（如上图，10s&amp;gt; 30ms+40ms+50ms+4m0s+50ms）&lt;/li&gt;
&lt;li&gt;如果取到了锁，key的真正有效时间就变啦，需要减去获取锁所使用的时间。&lt;/li&gt;
&lt;li&gt;如果获取锁失败（没有在至少N/2+1个master实例取到锁，有或者获取锁时间已经超过了有效时间），客户端要在所有的master节点上解锁（即便有些master节点根本就没有加锁成功，也需要解锁，以防止有些漏网之鱼）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;简化下步骤就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按顺序向5个master节点请求加锁&lt;/li&gt;
&lt;li&gt;根据设置的超时时间来判断，是不是要跳过该master节点。&lt;/li&gt;
&lt;li&gt;如果大于等于三个节点加锁成功，并且使用的时间小于锁的有效期，即可认定加锁成功啦。&lt;/li&gt;
&lt;li&gt;获取锁失败，解锁！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redisson实现了redLock版本的锁，有兴趣的小伙伴，可以去了解一下哈~&lt;/p&gt;
&lt;h3 id=&quot;参考与感谢&quot;&gt;参考与感谢&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c07efedbe2cd8e4e65625c38be26a854</guid>
<title>用户增长分析——用户分群分析</title>
<link>https://toutiao.io/k/6wulspi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section class=&quot;xmteditor&quot; data-tools=&quot;新媒体管家&quot; data-label=&quot;powered by xmt.cn&quot;/&gt;&lt;p&gt;&lt;span&gt;| 导语&lt;/span&gt;&lt;span&gt;在产品的增长分析当中，想关注符合某些条件的一部分用户，不仅想知道这些人的整体行为（访问次数，访问时长等），还希望知道其中差异较大的细分群体。用户分群方法，能帮助我们对差异较大的群体分别进行深入分析，从而探究指标数字背后的原因，探索实现用户增长的途径。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、用户分群的应用场景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在日常的数据工作中，我们经常接到这样的需求：想关注符合某些条件的一部分用户，不仅想知道这些人的整体行为（访问次数，访问时长等），还希望知道具体是哪些人符合这些条件。然后查看这些人的数据导出用户名单，针对性的发送tips消息。有时还想进一步查看某些人在使用某功能上的具体操作行为。用户分群，就是用来满足这类需求的工具方法，它能帮助我们对差异较大的群体分别进行深入分析，从而探究指标数字背后的原因，探索实现用户增长的途径。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如用户画像分群，核心价值在于精细化的定位人群特征，挖掘潜在的用户群体。使网站、广告主、企业及广告公司充分认知群体用户的差异化特征，根据群体的差异化特征，帮助客户找到营销机会、运营方向，全面提高客户的核心影响力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;二、用户分群&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;lead_content&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6510948905109489&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5AgWzmseXOJlaexUFXZUdHRgR8Y3jP2qophYdhMKJH7Nm7IjLv3j0CcN2OBSDwiaaweKvoVx6t1nGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;685&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1：用户分群的5个类型&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;类型一：不分群，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;如全量活跃用户投放，群发短信等，缺点是没有针对性，容易引起用户反感。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;类型二：用户基本信息分群，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;如根据用户注册的信息分群。相比不分群，这种方法已具备一定的针对性， 但是由于对用户不是真正了解，产生不了很好的结果预期。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;类型三：用户画像分群，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;如年龄、性别、地域、用户偏好等，画像建设的焦点是为用户群打“标签”，一个标签通常是人为规定的高度精炼的特征标识，最后将用户分群的标签综合，即可勾勒出该用户群的立体“画像”。画像分群让我们真正了解了用户的某些特征，对业务推广帮助很大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;类型四：根据用户行为进行分群&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，此阶段会在画像分群的基础上关注用户的行为特征, 如根据用户的注册渠道和活跃习惯，制定不同的营销推广策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;类型五：聚类和预测建模分群&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，聚类建模可以根据用户的综合特征指标，将用户分为不同的群体，如将用户划分为娱乐型、挂机型、社交型、办公型等；预测建模即尝试去猜测用户下一步的态度与行为（例如想知道什么，想做什么）。正因如此，它对将复杂的行为过程变为营销自动化，是十分有帮助的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;三、&lt;/span&gt;&lt;span&gt;常见的用户分群维度&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 统计指标：年龄，性别，地域&lt;br/&gt;2. 付费状态：免费，试用，付费用户&lt;br/&gt;3. 购买历史：未付费用户，一次付费用户，多次付费用户&lt;br/&gt;4. 访问位置：用户使用产品的区域位置&lt;br/&gt;5. 使用频率：用户使用产品的频率&lt;br/&gt;6. 使用深度：轻度，中度，重度用户&lt;br/&gt;7. 广告点击：用户点击了广告 vs 未点击广告&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;四、&lt;/span&gt;&lt;span&gt;常用的聚类分群方法介绍&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面介绍了一些关于分群的方法和思路， 接下来重点讲解一下用户聚类分群，聚类分群可分为层次聚类（合并法，分解法，树状图）和非层次聚类（划分聚类，谱聚类等），而较常用的互联网用户聚类方法为K-means聚类方法和两步聚类法（均为划分聚类） 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;聚类分析的特征：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; 简单、直观；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; 主要应用于探索性的研究，其分析的结果可以提供多个可能的解，选择最终的解需要研究者 的主观判断和后续的分析；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不管实际数据中是否真正存在不同的类别，利用聚类分析都能得到若干类别的解；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;聚类分析的解完全依赖于研究者所选择的聚类变量，增加或删除一些变量对最终的解都可能产生实质性的影响。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;研究者在使用聚类分析时应特别注意可能影响结果的各个因素。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;异常值和特殊的变量对聚类有较大影响&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当分类变量的测量尺度不一致时，需要事先做标准化处理。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;聚类分析的弱点：&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;聚类是一种无监督类分析方法，无法自动发现应该分成多少个类；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;期望能很清楚的找到大致相等的类或细分市场是不现实的；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;样本聚类，变量之间的关系需要研究者决定；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不会自动给出一个最佳聚类结果。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;聚类分析的应用过程： &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）选择聚类变量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在选取特征的时候，我们会根据一定的假设，尽可能选取对产品使用行为有影响的变量，这些变量一般包含与产品密切相关的用户态度、观点、行为。但是，聚类分析过程对用于聚类的变量还有一定的要求： 1.这些变量在不同研究对象上的值具有明显差异；2.这些变量之间不能存在高度相关。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，用于聚类的变量数目不是越多越好，没有明显差异的变量对聚类没有起到实质意义，而且可能使结果产生偏差；其次，高度相关的变量相当于给这些变量进行了加权，等于放大了某方面因素对用户分类的作用。 识别合适的聚类变量的方法：1.对变量做聚类分析，从聚得的各类中挑选出一个有代表性的变量；2.做主成份分析或因子分析，产生新的变量作为聚类变量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）聚类分析&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相对于聚类前的准备工作，真正的执行过程显得异常简单。数据准备好后，导入到统计工具中跑一下，结果就出来了。这里面遇到的一个问题是，把用户分成多少类合适？通常，可以结合几个标准综合判断： 1.看拐点（层次聚类会出来聚合系数图，一般选择拐点附近的几个类别）；2.凭经验或产品特性判断（不同产品的用户差异性也不同）；3.在逻辑上能够清楚地解释。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5079365079365079&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5AgWzmseXOJlaexUFXZUdHRbn2qNuWict6B54ck6JYxvQepjJaKO8oJickw1OkON5MeCPYVxfic912Ug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;441&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图2：聚合系数图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）找出各类用户的重要特征&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;确定一种分类方案之后，接下来，我们需要返回观察各类别用户在各个变量上的表现。根据差异检验的结果，我们以颜色区分出不同类用户在这项指标上的水平高低。其他变量以此类推。最后，我们会发现不同类别用户有别于其他类别用户的重要特征。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）聚类解释和命名&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在理解和解释用户分类时，最好可以结合更多的数据，例如，人口统计学数据、功能偏好数据等等。然后，选取每一类别最明显的几个特征为其命名，大功告成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;五、K-means&lt;/span&gt;&lt;span&gt;聚类在用户分群中的应用案例&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在本案例中，我们首先来看最常用的K-Means聚类法（也叫快速聚类法），这是非层次聚类法当中最常用的一种。因其简单直观的计算方法和比较快的速度（相对层次聚类法而言），进行探索性分析时，K-Means往往是第一个采用的算法。并且，由于其广泛被采用，在协作沟通时也节省了不少用于解释的时间成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.  K-means的算法原理：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;随机取k个元素，作为k个簇各自的中心。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;计算剩下的元素到k个簇中心的相似度，将这些元素分别划归到相似度最高的簇。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根据聚类结果，重新计算k个簇各自的中心，计算方法是取簇中所有元素各自维度的算术平均数。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将全部元素按照新的中心重新聚类。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重复第4步，直到聚类结果不再变化，然后结果输出。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;假设我们提取到原始数据的集合为(X1, X2, …, Xn)，并且每个Xi为d维的向量，   K-means聚类的目的就是，在给定分类组数k（k ≤ n）值的条件下，将原始数据分成k类，S = {S1, S2, …, Sk}，在数值模型上，即对以下表达式求最小值（μi 表示分类Si 的平均值）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.2918454935622318&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5AgWzmseXOJlaexUFXZUdHRagYyXMB4aGyzhqsUOC2y4P0b2icudnDWNUcqxcooiaArlM1VRY6NVTtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;233&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 用户分群背景和目标:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;某产品覆盖社会各种群体（不同年龄、不同行业、不同兴趣等），需要将大盘用户进行一定细分，然后针对性的开展运营活动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 聚类变量选取: &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户画像特征、用户状态特征、用户活跃特征&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4. 聚类分析和结果：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过相关性分析和变量重要性分析，剔除部分效果差的变量，然后对剩余11个变量进行多次训练（目标聚类个数，参与的变量，组内个体差异容忍度），最终得出聚类结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0526315789473684&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5AgWzmseXOJlaexUFXZUdHRBuNtHBgUvYRg0PERVhRxbVzXp7O3tIF1lEGg1L0UYLtG1NuGk7Hlmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;266&quot;/&gt; &lt;/p&gt;&lt;p&gt;  &lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5714285714285714&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5AgWzmseXOJlaexUFXZUdHRusoUKt9A7OicUCbnOViapJRf4IqLLah2vSBHG3miauL6mqqDJvXOkCCOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;252&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;图3：用户分群K-means聚类效果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5.&lt;span&gt;  &lt;/span&gt;结果解读和命名：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;聚类1：低端低龄群体&lt;br/&gt;聚类2：学生活跃群体&lt;br/&gt;聚类3：职场高粘性群体&lt;br/&gt;聚类4：职场低粘性群体&lt;br/&gt;聚类5：高龄低活跃群体&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.35514018691588783&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5DZvzaaNLF0cpIMvdH2gpaPibxU8waW6PIk2mo3x0I2r4Gxhia96OTXb8bBuK8BL5PN6sjFlNdC41Og/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;642&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表2：用户分群K-mean聚类结果&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;六、两步聚类和k-means聚类的效果对比&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面谈到的K-Means聚类法有简单、直观和快速的优点。但是其缺点是只能采用数值型变量，不能包含类别变量，并且对异常值非常敏感，离群值很容易严重影响聚类结果。并且，当数据集比较大（在腾讯，这种情况很常见），不能把所有数据点都装进内存的时候，K-Means就无法在单机上运行。而两步聚类法则克服了以上缺点，可以包含类别变量和数值型变量，并且当硬件条件不足或数据集非常大时，都能顺利运行。这种两步聚类法可以看成是改进版BIRCH聚类算法和层次聚类法的结合，先用BIRCH算法中的“聚类特征树”做预聚类，形成子类，然后把子类作为输入，做层次聚类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 两步聚类的原理：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一步：预聚类过程：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;构建聚类特征树（CFT），分成很多子类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开始时，把某个观测量放在树的根节点处，它记录有该观测量的变量信息，然后根据指定的距离测度作为相似性依据，使每个后续观测量根据它与已有节点的相似性，放到最相似的节点中，如果没有找到某个相似性的节点，就为它形成一个新的节点。在这一步当中，离群点将会被识别并剔除，不会像在K-Means当中那么容易地影响结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二步：正式聚类：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;将第一步完成的预聚类作为输入，对之使用分层聚类的方法进行再聚类（以对数似然函数作为距离的度量）。每一个阶段，利用施瓦兹贝叶斯信息准则（BIC）评价现有分类是否适合现有数据，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;并在最后给出符合准则的分类方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 两步聚类的优点：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      1.海量数据处理；&lt;br/&gt;      2.自动标准化数据；&lt;br/&gt;      3.能够处理分类变量和连续变量的混合数据；&lt;br/&gt;      4.可自动丢弃异常值或者将异常值归入最近的类。&lt;br/&gt;      5.可自动确定或者根据业务需要人工指定分类数目；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 两步聚类的效果对比：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对第六点同样的数据进行两步聚类，得到模型最优结果如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.1815181518151816&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5AgWzmseXOJlaexUFXZUdHRtqTQdjibt2JG74lmlibYmlDcf3RbwpGRadedkJda54LjRsN71Clnicia4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;303&quot;/&gt;      &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5863453815261044&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5AgWzmseXOJlaexUFXZUdHRMbOgyEMeCDpcRwhdXNBPatuzyNcW6JQS45bKs1vYxiauaqWbMWFeRjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;249&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图4：用户分群两步聚类效果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;4. &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;两步聚类结果解读：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;聚类1：低端低龄群体&lt;br/&gt;聚类2：学生或新入职场高活跃群体&lt;br/&gt;聚类3：青年低活跃群体&lt;br/&gt;聚类4：青年挂机群体&lt;br/&gt;聚类5：职场办公群体&lt;br/&gt;聚类6：高龄低活跃群体&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.3052959501557632&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5DZvzaaNLF0cpIMvdH2gpaP0hNXngh9YD5gcKZkXiaKDOFHlqRWhO8nsRYRXWYlVlxrqyzFC7mqEaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;642&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表3：用户分群两步聚类结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;七、&lt;/span&gt;&lt;span&gt;业务案例 – 通过K-Means聚类，挖掘特殊行为模式的客户群&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. 业务需求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在本案中，产品经理希望了解登录不活跃用户的行为模式，并且能针对不同的行为组合，对庞大的用户群体进行细分，从而关注不同群体的不同需求，甚至挖掘垂直领域需求，从而在产品或运营侧采取措施，拉活沉默用户，提高DAU。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 分析目标&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;发现使用行为模式异于大盘典型用户的细分群体&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;粗估每个细分群体的用户数量&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;了解每个细分群体的行为特征和用户画像&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于上述结果，在拉活方面，提出产品或运营建议或明确进一步探索的方向&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 分析过程&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;a)  特征提取&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分析聚焦于用户的点击行为。在本例中，考虑到用户行为的典型性，选取了4个完整的周，共28天的数据，并且时间窗当中无任何节日。另外，考虑到计算性能和探索性分析需要反复迭代的场景，只从大盘当中随机抽取千份之一的用户作为代表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;b)  特征筛选&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在特征提取阶段一共提取了接近200个功能点的点击数据。但是这些特征当中，有些覆盖面非常低，只有百份之一的用户在28天当中曾经使用，这些低覆盖的特征会首先被去除。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，前面谈到高度相关的变量也会干扰聚类过程，这里对所有特征对两两进行计算皮尔逊相关系数，对高相关特征（相关系数大于0.5）则只保留其中保留覆盖面最广的特征，以便最大限度地体现用户差异。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;c)  特征改造-探索&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过上面两步后，笔者曾进行过多次聚类探索，但无一例外，聚类结果都呈现出一个超级大类搭配数十个非常小的小类（几个或十几个用户）。这样的结果，显然与我们的分析目标是想违背的。其一，这里挖掘出的小群体体积太小，从业务角度来说没有价值；其二，超级大类基本等同与大盘用户，没有能找出其中的用户差异。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么会有这样的结果呢，主要是因为点击行为基本上遵循的是幂率分布，大量用户集中在低频次区间，而极少量用户却会有极高的频次，这样在典型的聚类算法中，高频次用户都会被聚集成人数极少的小类，而大量的低频词用户就会被聚集成一个超级大类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7178502879078695&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5AgWzmseXOJlaexUFXZUdHRPAtEzicBHMAmPKib28iaVcYa7PtqUxZ6yRf2Sdl1odQ5rawzFByESRzNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;521&quot;/&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7183908045977011&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5AgWzmseXOJlaexUFXZUdHRAUIp5QRDicYdibyicSoibxbOBExGqBe11XR4YRh8j9ReqRatcgVWQ0Njcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;522&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图5：点击行为分布              &lt;span&gt;图6：点击行为数K-Means聚类示意图&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于这种情况，典型的解决方法是对频次取对数，使幂率分布转化为近似的正态分布再进行聚类，在本次研究中，取自然对数后，聚类效果仅有少量改善，但仍然停留在一个超级大类加上若干人数极少的小类的情况。背后原因，是点击行为数据的特点之一：核心功能和热门项目点击人数极多，而相对冷门的功能则有大量的0值。这样的情况下，取对数是没有改善的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6911764705882353&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5DZvzaaNLF0cpIMvdH2gpaPy2NOquZm4Pqb2cDCQkibfaeugM4aoIjC1y5Fic04DsY9icoYB9b7TicQLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;272&quot;/&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6430976430976431&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5DZvzaaNLF0cpIMvdH2gpaPTYXFKXjAu4N05IKiaXOwNqIPg2Gy5u6GlVX8Mpkrm3NMIFHu8ncWDfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;297&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图7：打开次数分布            &lt;span&gt;图8：打开次数分布(自然对数变换)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回到本次分析的目标当中，我们需要“发现使用行为模式异于大盘典型用户的细分群体”，如果丢弃这些冷门功能只看热门选项，则无法找出一些相对小众的行为模式达成分析目标。而这种数值稀疏的情况则让笔者想起了文本分类。在文本分类的词袋模型当中，每个“文档“的词向量同样存在大量的0值，词袋模型的解决方法是对词向量用TF-IDF方法进行加权。下面简单介绍这种方法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;d) 特征改造-TF-IDF&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在文本分类的词袋模型当中，需要将一篇篇“文档”（Document）（例如一篇新闻，一条微博，一条说说）按照其讨论的主题聚合在一起，而一篇文档里面有很多词（Term）。TF（Term Frequency 词频率）就是指一个词在一篇文档里的出现次数在整篇文档总词数当中的占比，这样简单的计算就知道一篇文档中什么词更多，而不会受到文档本身长度的影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一方面，有些词是是什么文章都会用的“大众”词，这些词对于文章主题的分辨是没什么帮助的（例如新闻当中的“报道”“记者”等等）。对于这样的“大众”词，就要降低他的权重，所以可以通过（文档总数/含有某个词的文档数）这样的计算达到目的，每篇文章都有的词权重会取0，包含的文档数越少，数值越大。这计算就是IDF（Inverse Document Frequency 逆文档频率）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按照上面的讨论，读者可能已经想到了，如果把“文档”的概念变为“用户”，把“词的出现次数”替换为“功能的点击次数“，就正好可以用来把用户行为的类型进行分类。首先是低频率用户的功能偏好会通过TF的计算得到反映，不会因为总体上用得少在与高频用户的对比当中被笼统归为一个低频用户的类。同时IDF也让一些小众功能有更大的权重，更容易在聚类中突出小众偏好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.1164021164021164&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/o2eWePa4j5AgWzmseXOJlaexUFXZUdHRWwlrwNFZpS8LzJdyP1TsHWJhKLuxmiap2uadtB2ZdSlakLe4FztFNuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;567&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;e)  聚类结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这样的特征改造，再用K-Means算法进行聚类，得出的结果就比较符合分析目标了，从大盘数据中，我们找到了各种具有鲜明行为特色的群体，并且初略估计出了各个群体的大小，行为特征和背景特征。并在此基础上结合用户研究数据去探索产品改进的建议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;八、小结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户分群对于用户数据研究领域最大的改变，在于打破数据孤岛并真实了解用户。分析某个指标数字背后的用户具备哪些特征（他们的人群属性、行为特点等），进而发现产品问题背后的原因，并从中发现产品有效改进提升的机会或方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在进行聚类分析时，特征的选择和准备非常重要：1. 合适的变量在各个样本之类需要有明显差异；2.变量之间不能有强相关关系，否则需要用PCA等方法先进行降维；3.需要根据数据本身的特点和业务特性对数据进行变换（如标准化，取对数等）；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而聚类算法的选择则需要结合数据特点（是否有变量，离群值，数据量，是否成簇状），以及计算速度（探索性分析往往需要较快的计算速度），精确度（能否精确识别出群落）等方面去选择合适的算法。对算法中的参数，例如K-Means当中的类别数K，则需要结合技术指标和业务背景，选取逻辑上说得通的分类方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;聚类算法有非常多，各有其特点和擅长的地方，本文仅举其中两个较常用的方法为例，抛砖引玉，希望对读者有所启发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/o2eWePa4j5BybcG4XN2p52VpFJy1iallb0iajDGpe9FRJmJKiaJpdK3uGzT4EQKN9njrhXPNO3ZsS6hxYh9JO2xwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&lt;/p&gt;&lt;br/&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>144842ca0a5d86cdca752b52b702548b</guid>
<title>中国的软件公司为什么做不出产品？00后抛弃互联网；B站开源的高性能API网关组件｜码农周刊VIP会员专属邮件周报 Vol.097</title>
<link>https://toutiao.io/k/hausykl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;我爱程序员&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;developerWorks&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;我们的产品：《码农周刊》 http://manong.io/ 、《开发者头条》 http://toutiao.io/&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>